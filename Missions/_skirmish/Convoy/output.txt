// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin enable ;
7717: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7718: LD_STRING updateTimer(
7720: PUSH
7721: LD_OWVAR 1
7725: STR
7726: PUSH
7727: LD_STRING );
7729: STR
7730: PPUSH
7731: CALL_OW 559
// end ;
7735: END
// export function SOS_MapStart ( ) ; begin
7736: LD_INT 0
7738: PPUSH
// if streamModeActive then
7739: LD_EXP 19
7743: IFFALSE 7752
// DefineStreamItems ( true ) ;
7745: LD_INT 1
7747: PPUSH
7748: CALL 9406 0 1
// UpdateFactoryWaypoints ( ) ;
7752: CALL 22267 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7756: CALL 22524 0 0
// end ;
7760: LD_VAR 0 1
7764: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7765: LD_INT 0
7767: PPUSH
// if p2 = 100 then
7768: LD_VAR 0 2
7772: PUSH
7773: LD_INT 100
7775: EQUAL
7776: IFFALSE 8779
// begin if not StreamModeActive then
7778: LD_EXP 19
7782: NOT
7783: IFFALSE 7793
// StreamModeActive := true ;
7785: LD_ADDR_EXP 19
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// if p3 = 0 then
7793: LD_VAR 0 3
7797: PUSH
7798: LD_INT 0
7800: EQUAL
7801: IFFALSE 7807
// InitStreamMode ;
7803: CALL 8942 0 0
// if p3 = 1 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 1
7814: EQUAL
7815: IFFALSE 7825
// sRocket := true ;
7817: LD_ADDR_EXP 24
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 2 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 2
7832: EQUAL
7833: IFFALSE 7843
// sSpeed := true ;
7835: LD_ADDR_EXP 23
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 3 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 3
7850: EQUAL
7851: IFFALSE 7861
// sEngine := true ;
7853: LD_ADDR_EXP 25
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 4 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 4
7868: EQUAL
7869: IFFALSE 7879
// sSpec := true ;
7871: LD_ADDR_EXP 22
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 5 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 5
7886: EQUAL
7887: IFFALSE 7897
// sLevel := true ;
7889: LD_ADDR_EXP 26
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 6 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 6
7904: EQUAL
7905: IFFALSE 7915
// sArmoury := true ;
7907: LD_ADDR_EXP 27
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 7 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 7
7922: EQUAL
7923: IFFALSE 7933
// sRadar := true ;
7925: LD_ADDR_EXP 28
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 8 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 8
7940: EQUAL
7941: IFFALSE 7951
// sBunker := true ;
7943: LD_ADDR_EXP 29
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 9 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 9
7958: EQUAL
7959: IFFALSE 7969
// sHack := true ;
7961: LD_ADDR_EXP 30
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 10 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 10
7976: EQUAL
7977: IFFALSE 7987
// sFire := true ;
7979: LD_ADDR_EXP 31
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 11 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 11
7994: EQUAL
7995: IFFALSE 8005
// sRefresh := true ;
7997: LD_ADDR_EXP 32
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 12 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 12
8012: EQUAL
8013: IFFALSE 8023
// sExp := true ;
8015: LD_ADDR_EXP 33
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 13 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 13
8030: EQUAL
8031: IFFALSE 8041
// sDepot := true ;
8033: LD_ADDR_EXP 34
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 14 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 14
8048: EQUAL
8049: IFFALSE 8059
// sFlag := true ;
8051: LD_ADDR_EXP 35
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 15 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 15
8066: EQUAL
8067: IFFALSE 8077
// sKamikadze := true ;
8069: LD_ADDR_EXP 43
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 16 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 16
8084: EQUAL
8085: IFFALSE 8095
// sTroll := true ;
8087: LD_ADDR_EXP 44
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 17 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 17
8102: EQUAL
8103: IFFALSE 8113
// sSlow := true ;
8105: LD_ADDR_EXP 45
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 18 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 18
8120: EQUAL
8121: IFFALSE 8131
// sLack := true ;
8123: LD_ADDR_EXP 46
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 19 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 19
8138: EQUAL
8139: IFFALSE 8149
// sTank := true ;
8141: LD_ADDR_EXP 48
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 20 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 20
8156: EQUAL
8157: IFFALSE 8167
// sRemote := true ;
8159: LD_ADDR_EXP 49
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 21 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 21
8174: EQUAL
8175: IFFALSE 8185
// sPowell := true ;
8177: LD_ADDR_EXP 50
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 22 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 22
8192: EQUAL
8193: IFFALSE 8203
// sTeleport := true ;
8195: LD_ADDR_EXP 53
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 23 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 23
8210: EQUAL
8211: IFFALSE 8221
// sOilTower := true ;
8213: LD_ADDR_EXP 55
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 24 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 24
8228: EQUAL
8229: IFFALSE 8239
// sShovel := true ;
8231: LD_ADDR_EXP 56
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 25 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 25
8246: EQUAL
8247: IFFALSE 8257
// sSheik := true ;
8249: LD_ADDR_EXP 57
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 26 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 26
8264: EQUAL
8265: IFFALSE 8275
// sEarthquake := true ;
8267: LD_ADDR_EXP 59
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 27 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 27
8282: EQUAL
8283: IFFALSE 8293
// sAI := true ;
8285: LD_ADDR_EXP 60
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 28 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 28
8300: EQUAL
8301: IFFALSE 8311
// sCargo := true ;
8303: LD_ADDR_EXP 63
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 29 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 29
8318: EQUAL
8319: IFFALSE 8329
// sDLaser := true ;
8321: LD_ADDR_EXP 64
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 30 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 30
8336: EQUAL
8337: IFFALSE 8347
// sExchange := true ;
8339: LD_ADDR_EXP 65
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 31 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 31
8354: EQUAL
8355: IFFALSE 8365
// sFac := true ;
8357: LD_ADDR_EXP 66
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 32 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 32
8372: EQUAL
8373: IFFALSE 8383
// sPower := true ;
8375: LD_ADDR_EXP 67
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 33 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 33
8390: EQUAL
8391: IFFALSE 8401
// sRandom := true ;
8393: LD_ADDR_EXP 68
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 34 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 34
8408: EQUAL
8409: IFFALSE 8419
// sShield := true ;
8411: LD_ADDR_EXP 69
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 35 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 35
8426: EQUAL
8427: IFFALSE 8437
// sTime := true ;
8429: LD_ADDR_EXP 70
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 36 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 36
8444: EQUAL
8445: IFFALSE 8455
// sTools := true ;
8447: LD_ADDR_EXP 71
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 101 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 101
8462: EQUAL
8463: IFFALSE 8473
// sSold := true ;
8465: LD_ADDR_EXP 36
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 102 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 102
8480: EQUAL
8481: IFFALSE 8491
// sDiff := true ;
8483: LD_ADDR_EXP 37
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 103 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 103
8498: EQUAL
8499: IFFALSE 8509
// sFog := true ;
8501: LD_ADDR_EXP 40
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 104 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 104
8516: EQUAL
8517: IFFALSE 8527
// sReset := true ;
8519: LD_ADDR_EXP 41
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 105 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 105
8534: EQUAL
8535: IFFALSE 8545
// sSun := true ;
8537: LD_ADDR_EXP 42
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 106 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 106
8552: EQUAL
8553: IFFALSE 8563
// sTiger := true ;
8555: LD_ADDR_EXP 38
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 107 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 107
8570: EQUAL
8571: IFFALSE 8581
// sBomb := true ;
8573: LD_ADDR_EXP 39
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 108 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 108
8588: EQUAL
8589: IFFALSE 8599
// sWound := true ;
8591: LD_ADDR_EXP 47
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 109 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 109
8606: EQUAL
8607: IFFALSE 8617
// sBetray := true ;
8609: LD_ADDR_EXP 51
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 110 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 110
8624: EQUAL
8625: IFFALSE 8635
// sContamin := true ;
8627: LD_ADDR_EXP 52
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 111 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 111
8642: EQUAL
8643: IFFALSE 8653
// sOil := true ;
8645: LD_ADDR_EXP 54
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 112 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 112
8660: EQUAL
8661: IFFALSE 8671
// sStu := true ;
8663: LD_ADDR_EXP 58
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 113 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 113
8678: EQUAL
8679: IFFALSE 8689
// sBazooka := true ;
8681: LD_ADDR_EXP 61
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 114 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 114
8696: EQUAL
8697: IFFALSE 8707
// sMortar := true ;
8699: LD_ADDR_EXP 62
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 115 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 115
8714: EQUAL
8715: IFFALSE 8725
// sRanger := true ;
8717: LD_ADDR_EXP 72
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 116 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 116
8732: EQUAL
8733: IFFALSE 8743
// sComputer := true ;
8735: LD_ADDR_EXP 73
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 117 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 117
8750: EQUAL
8751: IFFALSE 8761
// s30 := true ;
8753: LD_ADDR_EXP 74
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 118 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 118
8768: EQUAL
8769: IFFALSE 8779
// s60 := true ;
8771: LD_ADDR_EXP 75
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// end ; if p2 = 101 then
8779: LD_VAR 0 2
8783: PUSH
8784: LD_INT 101
8786: EQUAL
8787: IFFALSE 8915
// begin case p3 of 1 :
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 1
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8809
8802: POP
// hHackUnlimitedResources ; 2 :
8803: CALL 21013 0 0
8807: GO 8915
8809: LD_INT 2
8811: DOUBLE
8812: EQUAL
8813: IFTRUE 8817
8815: GO 8824
8817: POP
// hHackSetLevel10 ; 3 :
8818: CALL 21146 0 0
8822: GO 8915
8824: LD_INT 3
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 8839
8832: POP
// hHackSetLevel10YourUnits ; 4 :
8833: CALL 21231 0 0
8837: GO 8915
8839: LD_INT 4
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8854
8847: POP
// hHackInvincible ; 5 :
8848: CALL 21679 0 0
8852: GO 8915
8854: LD_INT 5
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8869
8862: POP
// hHackInvisible ; 6 :
8863: CALL 21790 0 0
8867: GO 8915
8869: LD_INT 6
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8884
8877: POP
// hHackChangeYourSide ; 7 :
8878: CALL 21847 0 0
8882: GO 8915
8884: LD_INT 7
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8899
8892: POP
// hHackChangeUnitSide ; 8 :
8893: CALL 21889 0 0
8897: GO 8915
8899: LD_INT 8
8901: DOUBLE
8902: EQUAL
8903: IFTRUE 8907
8905: GO 8914
8907: POP
// hHackFog ; end ;
8908: CALL 21990 0 0
8912: GO 8915
8914: POP
// end ; end ;
8915: LD_VAR 0 7
8919: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8920: GO 8922
8922: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8923: LD_STRING initStreamRollete();
8925: PPUSH
8926: CALL_OW 559
// InitStreamMode ;
8930: CALL 8942 0 0
// DefineStreamItems ( false ) ;
8934: LD_INT 0
8936: PPUSH
8937: CALL 9406 0 1
// end ;
8941: END
// function InitStreamMode ; begin
8942: LD_INT 0
8944: PPUSH
// streamModeActive := false ;
8945: LD_ADDR_EXP 19
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// normalCounter := 36 ;
8953: LD_ADDR_EXP 20
8957: PUSH
8958: LD_INT 36
8960: ST_TO_ADDR
// hardcoreCounter := 18 ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_INT 18
8968: ST_TO_ADDR
// sRocket := false ;
8969: LD_ADDR_EXP 24
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sSpeed := false ;
8977: LD_ADDR_EXP 23
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sEngine := false ;
8985: LD_ADDR_EXP 25
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sSpec := false ;
8993: LD_ADDR_EXP 22
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sLevel := false ;
9001: LD_ADDR_EXP 26
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sArmoury := false ;
9009: LD_ADDR_EXP 27
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sRadar := false ;
9017: LD_ADDR_EXP 28
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sBunker := false ;
9025: LD_ADDR_EXP 29
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sHack := false ;
9033: LD_ADDR_EXP 30
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sFire := false ;
9041: LD_ADDR_EXP 31
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sRefresh := false ;
9049: LD_ADDR_EXP 32
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sExp := false ;
9057: LD_ADDR_EXP 33
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sDepot := false ;
9065: LD_ADDR_EXP 34
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sFlag := false ;
9073: LD_ADDR_EXP 35
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// sKamikadze := false ;
9081: LD_ADDR_EXP 43
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// sTroll := false ;
9089: LD_ADDR_EXP 44
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// sSlow := false ;
9097: LD_ADDR_EXP 45
9101: PUSH
9102: LD_INT 0
9104: ST_TO_ADDR
// sLack := false ;
9105: LD_ADDR_EXP 46
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// sTank := false ;
9113: LD_ADDR_EXP 48
9117: PUSH
9118: LD_INT 0
9120: ST_TO_ADDR
// sRemote := false ;
9121: LD_ADDR_EXP 49
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// sPowell := false ;
9129: LD_ADDR_EXP 50
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// sTeleport := false ;
9137: LD_ADDR_EXP 53
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// sOilTower := false ;
9145: LD_ADDR_EXP 55
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// sShovel := false ;
9153: LD_ADDR_EXP 56
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// sSheik := false ;
9161: LD_ADDR_EXP 57
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// sEarthquake := false ;
9169: LD_ADDR_EXP 59
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// sAI := false ;
9177: LD_ADDR_EXP 60
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// sCargo := false ;
9185: LD_ADDR_EXP 63
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// sDLaser := false ;
9193: LD_ADDR_EXP 64
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// sExchange := false ;
9201: LD_ADDR_EXP 65
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// sFac := false ;
9209: LD_ADDR_EXP 66
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// sPower := false ;
9217: LD_ADDR_EXP 67
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// sRandom := false ;
9225: LD_ADDR_EXP 68
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// sShield := false ;
9233: LD_ADDR_EXP 69
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// sTime := false ;
9241: LD_ADDR_EXP 70
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// sTools := false ;
9249: LD_ADDR_EXP 71
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// sSold := false ;
9257: LD_ADDR_EXP 36
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// sDiff := false ;
9265: LD_ADDR_EXP 37
9269: PUSH
9270: LD_INT 0
9272: ST_TO_ADDR
// sFog := false ;
9273: LD_ADDR_EXP 40
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// sReset := false ;
9281: LD_ADDR_EXP 41
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// sSun := false ;
9289: LD_ADDR_EXP 42
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// sTiger := false ;
9297: LD_ADDR_EXP 38
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// sBomb := false ;
9305: LD_ADDR_EXP 39
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// sWound := false ;
9313: LD_ADDR_EXP 47
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// sBetray := false ;
9321: LD_ADDR_EXP 51
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// sContamin := false ;
9329: LD_ADDR_EXP 52
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// sOil := false ;
9337: LD_ADDR_EXP 54
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// sStu := false ;
9345: LD_ADDR_EXP 58
9349: PUSH
9350: LD_INT 0
9352: ST_TO_ADDR
// sBazooka := false ;
9353: LD_ADDR_EXP 61
9357: PUSH
9358: LD_INT 0
9360: ST_TO_ADDR
// sMortar := false ;
9361: LD_ADDR_EXP 62
9365: PUSH
9366: LD_INT 0
9368: ST_TO_ADDR
// sRanger := false ;
9369: LD_ADDR_EXP 72
9373: PUSH
9374: LD_INT 0
9376: ST_TO_ADDR
// sComputer := false ;
9377: LD_ADDR_EXP 73
9381: PUSH
9382: LD_INT 0
9384: ST_TO_ADDR
// s30 := false ;
9385: LD_ADDR_EXP 74
9389: PUSH
9390: LD_INT 0
9392: ST_TO_ADDR
// s60 := false ;
9393: LD_ADDR_EXP 75
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
// end ;
9401: LD_VAR 0 1
9405: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9406: LD_INT 0
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
// result := [ ] ;
9415: LD_ADDR_VAR 0 2
9419: PUSH
9420: EMPTY
9421: ST_TO_ADDR
// if campaign_id = 1 then
9422: LD_OWVAR 69
9426: PUSH
9427: LD_INT 1
9429: EQUAL
9430: IFFALSE 12596
// begin case mission_number of 1 :
9432: LD_OWVAR 70
9436: PUSH
9437: LD_INT 1
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9521
9445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 4
9456: PUSH
9457: LD_INT 11
9459: PUSH
9460: LD_INT 12
9462: PUSH
9463: LD_INT 15
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 23
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: PUSH
9489: LD_INT 101
9491: PUSH
9492: LD_INT 102
9494: PUSH
9495: LD_INT 106
9497: PUSH
9498: LD_INT 116
9500: PUSH
9501: LD_INT 117
9503: PUSH
9504: LD_INT 118
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
9519: GO 12594
9521: LD_INT 2
9523: DOUBLE
9524: EQUAL
9525: IFTRUE 9529
9527: GO 9613
9529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_INT 2
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: LD_INT 11
9543: PUSH
9544: LD_INT 12
9546: PUSH
9547: LD_INT 15
9549: PUSH
9550: LD_INT 16
9552: PUSH
9553: LD_INT 22
9555: PUSH
9556: LD_INT 23
9558: PUSH
9559: LD_INT 26
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 101
9575: PUSH
9576: LD_INT 102
9578: PUSH
9579: LD_INT 105
9581: PUSH
9582: LD_INT 106
9584: PUSH
9585: LD_INT 108
9587: PUSH
9588: LD_INT 116
9590: PUSH
9591: LD_INT 117
9593: PUSH
9594: LD_INT 118
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: ST_TO_ADDR
9611: GO 12594
9613: LD_INT 3
9615: DOUBLE
9616: EQUAL
9617: IFTRUE 9621
9619: GO 9709
9621: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 4
9632: PUSH
9633: LD_INT 5
9635: PUSH
9636: LD_INT 11
9638: PUSH
9639: LD_INT 12
9641: PUSH
9642: LD_INT 15
9644: PUSH
9645: LD_INT 16
9647: PUSH
9648: LD_INT 22
9650: PUSH
9651: LD_INT 26
9653: PUSH
9654: LD_INT 36
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 101
9671: PUSH
9672: LD_INT 102
9674: PUSH
9675: LD_INT 105
9677: PUSH
9678: LD_INT 106
9680: PUSH
9681: LD_INT 108
9683: PUSH
9684: LD_INT 116
9686: PUSH
9687: LD_INT 117
9689: PUSH
9690: LD_INT 118
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: ST_TO_ADDR
9707: GO 12594
9709: LD_INT 4
9711: DOUBLE
9712: EQUAL
9713: IFTRUE 9717
9715: GO 9813
9717: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: LD_INT 5
9731: PUSH
9732: LD_INT 8
9734: PUSH
9735: LD_INT 11
9737: PUSH
9738: LD_INT 12
9740: PUSH
9741: LD_INT 15
9743: PUSH
9744: LD_INT 16
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 23
9752: PUSH
9753: LD_INT 26
9755: PUSH
9756: LD_INT 36
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 101
9775: PUSH
9776: LD_INT 102
9778: PUSH
9779: LD_INT 105
9781: PUSH
9782: LD_INT 106
9784: PUSH
9785: LD_INT 108
9787: PUSH
9788: LD_INT 116
9790: PUSH
9791: LD_INT 117
9793: PUSH
9794: LD_INT 118
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: ST_TO_ADDR
9811: GO 12594
9813: LD_INT 5
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9933
9821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9822: LD_ADDR_VAR 0 2
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: LD_INT 6
9838: PUSH
9839: LD_INT 8
9841: PUSH
9842: LD_INT 11
9844: PUSH
9845: LD_INT 12
9847: PUSH
9848: LD_INT 15
9850: PUSH
9851: LD_INT 16
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_INT 25
9862: PUSH
9863: LD_INT 26
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 101
9887: PUSH
9888: LD_INT 102
9890: PUSH
9891: LD_INT 105
9893: PUSH
9894: LD_INT 106
9896: PUSH
9897: LD_INT 108
9899: PUSH
9900: LD_INT 109
9902: PUSH
9903: LD_INT 112
9905: PUSH
9906: LD_INT 116
9908: PUSH
9909: LD_INT 117
9911: PUSH
9912: LD_INT 118
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: ST_TO_ADDR
9931: GO 12594
9933: LD_INT 6
9935: DOUBLE
9936: EQUAL
9937: IFTRUE 9941
9939: GO 10073
9941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 4
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 6
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: LD_INT 11
9964: PUSH
9965: LD_INT 12
9967: PUSH
9968: LD_INT 15
9970: PUSH
9971: LD_INT 16
9973: PUSH
9974: LD_INT 20
9976: PUSH
9977: LD_INT 21
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 23
9985: PUSH
9986: LD_INT 25
9988: PUSH
9989: LD_INT 26
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 36
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 101
10027: PUSH
10028: LD_INT 102
10030: PUSH
10031: LD_INT 105
10033: PUSH
10034: LD_INT 106
10036: PUSH
10037: LD_INT 108
10039: PUSH
10040: LD_INT 109
10042: PUSH
10043: LD_INT 112
10045: PUSH
10046: LD_INT 116
10048: PUSH
10049: LD_INT 117
10051: PUSH
10052: LD_INT 118
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: ST_TO_ADDR
10071: GO 12594
10073: LD_INT 7
10075: DOUBLE
10076: EQUAL
10077: IFTRUE 10081
10079: GO 10193
10081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: LD_INT 5
10095: PUSH
10096: LD_INT 7
10098: PUSH
10099: LD_INT 11
10101: PUSH
10102: LD_INT 12
10104: PUSH
10105: LD_INT 15
10107: PUSH
10108: LD_INT 16
10110: PUSH
10111: LD_INT 20
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 26
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 101
10147: PUSH
10148: LD_INT 102
10150: PUSH
10151: LD_INT 103
10153: PUSH
10154: LD_INT 105
10156: PUSH
10157: LD_INT 106
10159: PUSH
10160: LD_INT 108
10162: PUSH
10163: LD_INT 112
10165: PUSH
10166: LD_INT 116
10168: PUSH
10169: LD_INT 117
10171: PUSH
10172: LD_INT 118
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: ST_TO_ADDR
10191: GO 12594
10193: LD_INT 8
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 10341
10201: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10202: LD_ADDR_VAR 0 2
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 4
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: LD_INT 6
10218: PUSH
10219: LD_INT 7
10221: PUSH
10222: LD_INT 8
10224: PUSH
10225: LD_INT 11
10227: PUSH
10228: LD_INT 12
10230: PUSH
10231: LD_INT 15
10233: PUSH
10234: LD_INT 16
10236: PUSH
10237: LD_INT 20
10239: PUSH
10240: LD_INT 21
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 23
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 26
10254: PUSH
10255: LD_INT 30
10257: PUSH
10258: LD_INT 31
10260: PUSH
10261: LD_INT 32
10263: PUSH
10264: LD_INT 36
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 101
10291: PUSH
10292: LD_INT 102
10294: PUSH
10295: LD_INT 103
10297: PUSH
10298: LD_INT 105
10300: PUSH
10301: LD_INT 106
10303: PUSH
10304: LD_INT 108
10306: PUSH
10307: LD_INT 109
10309: PUSH
10310: LD_INT 112
10312: PUSH
10313: LD_INT 116
10315: PUSH
10316: LD_INT 117
10318: PUSH
10319: LD_INT 118
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: ST_TO_ADDR
10339: GO 12594
10341: LD_INT 9
10343: DOUBLE
10344: EQUAL
10345: IFTRUE 10349
10347: GO 10497
10349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: LD_INT 4
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: LD_INT 6
10366: PUSH
10367: LD_INT 7
10369: PUSH
10370: LD_INT 8
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 15
10381: PUSH
10382: LD_INT 16
10384: PUSH
10385: LD_INT 20
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 22
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 26
10402: PUSH
10403: LD_INT 28
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: LD_INT 31
10411: PUSH
10412: LD_INT 32
10414: PUSH
10415: LD_INT 36
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 101
10443: PUSH
10444: LD_INT 102
10446: PUSH
10447: LD_INT 103
10449: PUSH
10450: LD_INT 105
10452: PUSH
10453: LD_INT 106
10455: PUSH
10456: LD_INT 108
10458: PUSH
10459: LD_INT 109
10461: PUSH
10462: LD_INT 112
10464: PUSH
10465: LD_INT 114
10467: PUSH
10468: LD_INT 116
10470: PUSH
10471: LD_INT 117
10473: PUSH
10474: LD_INT 118
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: ST_TO_ADDR
10495: GO 12594
10497: LD_INT 10
10499: DOUBLE
10500: EQUAL
10501: IFTRUE 10505
10503: GO 10701
10505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: LD_INT 4
10516: PUSH
10517: LD_INT 5
10519: PUSH
10520: LD_INT 6
10522: PUSH
10523: LD_INT 7
10525: PUSH
10526: LD_INT 8
10528: PUSH
10529: LD_INT 9
10531: PUSH
10532: LD_INT 10
10534: PUSH
10535: LD_INT 11
10537: PUSH
10538: LD_INT 12
10540: PUSH
10541: LD_INT 13
10543: PUSH
10544: LD_INT 14
10546: PUSH
10547: LD_INT 15
10549: PUSH
10550: LD_INT 16
10552: PUSH
10553: LD_INT 17
10555: PUSH
10556: LD_INT 18
10558: PUSH
10559: LD_INT 19
10561: PUSH
10562: LD_INT 20
10564: PUSH
10565: LD_INT 21
10567: PUSH
10568: LD_INT 22
10570: PUSH
10571: LD_INT 23
10573: PUSH
10574: LD_INT 24
10576: PUSH
10577: LD_INT 25
10579: PUSH
10580: LD_INT 26
10582: PUSH
10583: LD_INT 28
10585: PUSH
10586: LD_INT 30
10588: PUSH
10589: LD_INT 31
10591: PUSH
10592: LD_INT 32
10594: PUSH
10595: LD_INT 36
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 101
10631: PUSH
10632: LD_INT 102
10634: PUSH
10635: LD_INT 103
10637: PUSH
10638: LD_INT 104
10640: PUSH
10641: LD_INT 105
10643: PUSH
10644: LD_INT 106
10646: PUSH
10647: LD_INT 107
10649: PUSH
10650: LD_INT 108
10652: PUSH
10653: LD_INT 109
10655: PUSH
10656: LD_INT 110
10658: PUSH
10659: LD_INT 111
10661: PUSH
10662: LD_INT 112
10664: PUSH
10665: LD_INT 114
10667: PUSH
10668: LD_INT 116
10670: PUSH
10671: LD_INT 117
10673: PUSH
10674: LD_INT 118
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: ST_TO_ADDR
10699: GO 12594
10701: LD_INT 11
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10913
10709: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10710: LD_ADDR_VAR 0 2
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: LD_INT 3
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: LD_INT 9
10738: PUSH
10739: LD_INT 10
10741: PUSH
10742: LD_INT 11
10744: PUSH
10745: LD_INT 12
10747: PUSH
10748: LD_INT 13
10750: PUSH
10751: LD_INT 14
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: LD_INT 17
10762: PUSH
10763: LD_INT 18
10765: PUSH
10766: LD_INT 19
10768: PUSH
10769: LD_INT 20
10771: PUSH
10772: LD_INT 21
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 26
10789: PUSH
10790: LD_INT 28
10792: PUSH
10793: LD_INT 30
10795: PUSH
10796: LD_INT 31
10798: PUSH
10799: LD_INT 32
10801: PUSH
10802: LD_INT 34
10804: PUSH
10805: LD_INT 36
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 103
10849: PUSH
10850: LD_INT 104
10852: PUSH
10853: LD_INT 105
10855: PUSH
10856: LD_INT 106
10858: PUSH
10859: LD_INT 107
10861: PUSH
10862: LD_INT 108
10864: PUSH
10865: LD_INT 109
10867: PUSH
10868: LD_INT 110
10870: PUSH
10871: LD_INT 111
10873: PUSH
10874: LD_INT 112
10876: PUSH
10877: LD_INT 114
10879: PUSH
10880: LD_INT 116
10882: PUSH
10883: LD_INT 117
10885: PUSH
10886: LD_INT 118
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: ST_TO_ADDR
10911: GO 12594
10913: LD_INT 12
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 11141
10921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: LD_INT 3
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: LD_INT 5
10941: PUSH
10942: LD_INT 6
10944: PUSH
10945: LD_INT 7
10947: PUSH
10948: LD_INT 8
10950: PUSH
10951: LD_INT 9
10953: PUSH
10954: LD_INT 10
10956: PUSH
10957: LD_INT 11
10959: PUSH
10960: LD_INT 12
10962: PUSH
10963: LD_INT 13
10965: PUSH
10966: LD_INT 14
10968: PUSH
10969: LD_INT 15
10971: PUSH
10972: LD_INT 16
10974: PUSH
10975: LD_INT 17
10977: PUSH
10978: LD_INT 18
10980: PUSH
10981: LD_INT 19
10983: PUSH
10984: LD_INT 20
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_INT 23
10995: PUSH
10996: LD_INT 24
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 26
11004: PUSH
11005: LD_INT 27
11007: PUSH
11008: LD_INT 28
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: LD_INT 31
11016: PUSH
11017: LD_INT 32
11019: PUSH
11020: LD_INT 33
11022: PUSH
11023: LD_INT 34
11025: PUSH
11026: LD_INT 36
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 101
11067: PUSH
11068: LD_INT 102
11070: PUSH
11071: LD_INT 103
11073: PUSH
11074: LD_INT 104
11076: PUSH
11077: LD_INT 105
11079: PUSH
11080: LD_INT 106
11082: PUSH
11083: LD_INT 107
11085: PUSH
11086: LD_INT 108
11088: PUSH
11089: LD_INT 109
11091: PUSH
11092: LD_INT 110
11094: PUSH
11095: LD_INT 111
11097: PUSH
11098: LD_INT 112
11100: PUSH
11101: LD_INT 113
11103: PUSH
11104: LD_INT 114
11106: PUSH
11107: LD_INT 116
11109: PUSH
11110: LD_INT 117
11112: PUSH
11113: LD_INT 118
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
11139: GO 12594
11141: LD_INT 13
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11357
11149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: LD_INT 3
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: LD_INT 5
11169: PUSH
11170: LD_INT 8
11172: PUSH
11173: LD_INT 9
11175: PUSH
11176: LD_INT 10
11178: PUSH
11179: LD_INT 11
11181: PUSH
11182: LD_INT 12
11184: PUSH
11185: LD_INT 14
11187: PUSH
11188: LD_INT 15
11190: PUSH
11191: LD_INT 16
11193: PUSH
11194: LD_INT 17
11196: PUSH
11197: LD_INT 18
11199: PUSH
11200: LD_INT 19
11202: PUSH
11203: LD_INT 20
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 23
11214: PUSH
11215: LD_INT 24
11217: PUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: LD_INT 27
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: LD_INT 30
11232: PUSH
11233: LD_INT 31
11235: PUSH
11236: LD_INT 32
11238: PUSH
11239: LD_INT 33
11241: PUSH
11242: LD_INT 34
11244: PUSH
11245: LD_INT 36
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 101
11283: PUSH
11284: LD_INT 102
11286: PUSH
11287: LD_INT 103
11289: PUSH
11290: LD_INT 104
11292: PUSH
11293: LD_INT 105
11295: PUSH
11296: LD_INT 106
11298: PUSH
11299: LD_INT 107
11301: PUSH
11302: LD_INT 108
11304: PUSH
11305: LD_INT 109
11307: PUSH
11308: LD_INT 110
11310: PUSH
11311: LD_INT 111
11313: PUSH
11314: LD_INT 112
11316: PUSH
11317: LD_INT 113
11319: PUSH
11320: LD_INT 114
11322: PUSH
11323: LD_INT 116
11325: PUSH
11326: LD_INT 117
11328: PUSH
11329: LD_INT 118
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: ST_TO_ADDR
11355: GO 12594
11357: LD_INT 14
11359: DOUBLE
11360: EQUAL
11361: IFTRUE 11365
11363: GO 11589
11365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: LD_INT 4
11382: PUSH
11383: LD_INT 5
11385: PUSH
11386: LD_INT 6
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: LD_INT 8
11394: PUSH
11395: LD_INT 9
11397: PUSH
11398: LD_INT 10
11400: PUSH
11401: LD_INT 11
11403: PUSH
11404: LD_INT 12
11406: PUSH
11407: LD_INT 13
11409: PUSH
11410: LD_INT 14
11412: PUSH
11413: LD_INT 15
11415: PUSH
11416: LD_INT 16
11418: PUSH
11419: LD_INT 17
11421: PUSH
11422: LD_INT 18
11424: PUSH
11425: LD_INT 19
11427: PUSH
11428: LD_INT 20
11430: PUSH
11431: LD_INT 21
11433: PUSH
11434: LD_INT 22
11436: PUSH
11437: LD_INT 23
11439: PUSH
11440: LD_INT 24
11442: PUSH
11443: LD_INT 25
11445: PUSH
11446: LD_INT 26
11448: PUSH
11449: LD_INT 27
11451: PUSH
11452: LD_INT 28
11454: PUSH
11455: LD_INT 29
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 31
11463: PUSH
11464: LD_INT 32
11466: PUSH
11467: LD_INT 33
11469: PUSH
11470: LD_INT 34
11472: PUSH
11473: LD_INT 36
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: LD_INT 103
11521: PUSH
11522: LD_INT 104
11524: PUSH
11525: LD_INT 105
11527: PUSH
11528: LD_INT 106
11530: PUSH
11531: LD_INT 107
11533: PUSH
11534: LD_INT 108
11536: PUSH
11537: LD_INT 109
11539: PUSH
11540: LD_INT 110
11542: PUSH
11543: LD_INT 111
11545: PUSH
11546: LD_INT 112
11548: PUSH
11549: LD_INT 113
11551: PUSH
11552: LD_INT 114
11554: PUSH
11555: LD_INT 116
11557: PUSH
11558: LD_INT 117
11560: PUSH
11561: LD_INT 118
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 12594
11589: LD_INT 15
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11821
11597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: LD_INT 3
11611: PUSH
11612: LD_INT 4
11614: PUSH
11615: LD_INT 5
11617: PUSH
11618: LD_INT 6
11620: PUSH
11621: LD_INT 7
11623: PUSH
11624: LD_INT 8
11626: PUSH
11627: LD_INT 9
11629: PUSH
11630: LD_INT 10
11632: PUSH
11633: LD_INT 11
11635: PUSH
11636: LD_INT 12
11638: PUSH
11639: LD_INT 13
11641: PUSH
11642: LD_INT 14
11644: PUSH
11645: LD_INT 15
11647: PUSH
11648: LD_INT 16
11650: PUSH
11651: LD_INT 17
11653: PUSH
11654: LD_INT 18
11656: PUSH
11657: LD_INT 19
11659: PUSH
11660: LD_INT 20
11662: PUSH
11663: LD_INT 21
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 24
11674: PUSH
11675: LD_INT 25
11677: PUSH
11678: LD_INT 26
11680: PUSH
11681: LD_INT 27
11683: PUSH
11684: LD_INT 28
11686: PUSH
11687: LD_INT 29
11689: PUSH
11690: LD_INT 30
11692: PUSH
11693: LD_INT 31
11695: PUSH
11696: LD_INT 32
11698: PUSH
11699: LD_INT 33
11701: PUSH
11702: LD_INT 34
11704: PUSH
11705: LD_INT 36
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 101
11747: PUSH
11748: LD_INT 102
11750: PUSH
11751: LD_INT 103
11753: PUSH
11754: LD_INT 104
11756: PUSH
11757: LD_INT 105
11759: PUSH
11760: LD_INT 106
11762: PUSH
11763: LD_INT 107
11765: PUSH
11766: LD_INT 108
11768: PUSH
11769: LD_INT 109
11771: PUSH
11772: LD_INT 110
11774: PUSH
11775: LD_INT 111
11777: PUSH
11778: LD_INT 112
11780: PUSH
11781: LD_INT 113
11783: PUSH
11784: LD_INT 114
11786: PUSH
11787: LD_INT 116
11789: PUSH
11790: LD_INT 117
11792: PUSH
11793: LD_INT 118
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: ST_TO_ADDR
11819: GO 12594
11821: LD_INT 16
11823: DOUBLE
11824: EQUAL
11825: IFTRUE 11829
11827: GO 11965
11829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: LD_INT 4
11840: PUSH
11841: LD_INT 5
11843: PUSH
11844: LD_INT 7
11846: PUSH
11847: LD_INT 11
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: LD_INT 15
11855: PUSH
11856: LD_INT 16
11858: PUSH
11859: LD_INT 20
11861: PUSH
11862: LD_INT 21
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_INT 23
11870: PUSH
11871: LD_INT 25
11873: PUSH
11874: LD_INT 26
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 31
11882: PUSH
11883: LD_INT 32
11885: PUSH
11886: LD_INT 33
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 101
11915: PUSH
11916: LD_INT 102
11918: PUSH
11919: LD_INT 103
11921: PUSH
11922: LD_INT 106
11924: PUSH
11925: LD_INT 108
11927: PUSH
11928: LD_INT 112
11930: PUSH
11931: LD_INT 113
11933: PUSH
11934: LD_INT 114
11936: PUSH
11937: LD_INT 116
11939: PUSH
11940: LD_INT 117
11942: PUSH
11943: LD_INT 118
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: ST_TO_ADDR
11963: GO 12594
11965: LD_INT 17
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12197
11973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: LD_INT 3
11987: PUSH
11988: LD_INT 4
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: LD_INT 6
11996: PUSH
11997: LD_INT 7
11999: PUSH
12000: LD_INT 8
12002: PUSH
12003: LD_INT 9
12005: PUSH
12006: LD_INT 10
12008: PUSH
12009: LD_INT 11
12011: PUSH
12012: LD_INT 12
12014: PUSH
12015: LD_INT 13
12017: PUSH
12018: LD_INT 14
12020: PUSH
12021: LD_INT 15
12023: PUSH
12024: LD_INT 16
12026: PUSH
12027: LD_INT 17
12029: PUSH
12030: LD_INT 18
12032: PUSH
12033: LD_INT 19
12035: PUSH
12036: LD_INT 20
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_INT 23
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 26
12056: PUSH
12057: LD_INT 27
12059: PUSH
12060: LD_INT 28
12062: PUSH
12063: LD_INT 29
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 31
12071: PUSH
12072: LD_INT 32
12074: PUSH
12075: LD_INT 33
12077: PUSH
12078: LD_INT 34
12080: PUSH
12081: LD_INT 36
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 101
12123: PUSH
12124: LD_INT 102
12126: PUSH
12127: LD_INT 103
12129: PUSH
12130: LD_INT 104
12132: PUSH
12133: LD_INT 105
12135: PUSH
12136: LD_INT 106
12138: PUSH
12139: LD_INT 107
12141: PUSH
12142: LD_INT 108
12144: PUSH
12145: LD_INT 109
12147: PUSH
12148: LD_INT 110
12150: PUSH
12151: LD_INT 111
12153: PUSH
12154: LD_INT 112
12156: PUSH
12157: LD_INT 113
12159: PUSH
12160: LD_INT 114
12162: PUSH
12163: LD_INT 116
12165: PUSH
12166: LD_INT 117
12168: PUSH
12169: LD_INT 118
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: ST_TO_ADDR
12195: GO 12594
12197: LD_INT 18
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12353
12205: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: LD_INT 5
12219: PUSH
12220: LD_INT 7
12222: PUSH
12223: LD_INT 11
12225: PUSH
12226: LD_INT 12
12228: PUSH
12229: LD_INT 15
12231: PUSH
12232: LD_INT 16
12234: PUSH
12235: LD_INT 20
12237: PUSH
12238: LD_INT 21
12240: PUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 23
12246: PUSH
12247: LD_INT 25
12249: PUSH
12250: LD_INT 26
12252: PUSH
12253: LD_INT 30
12255: PUSH
12256: LD_INT 31
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: LD_INT 33
12264: PUSH
12265: LD_INT 34
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 36
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 101
12299: PUSH
12300: LD_INT 102
12302: PUSH
12303: LD_INT 103
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 112
12314: PUSH
12315: LD_INT 113
12317: PUSH
12318: LD_INT 114
12320: PUSH
12321: LD_INT 115
12323: PUSH
12324: LD_INT 116
12326: PUSH
12327: LD_INT 117
12329: PUSH
12330: LD_INT 118
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: ST_TO_ADDR
12351: GO 12594
12353: LD_INT 19
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12593
12361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12362: LD_ADDR_VAR 0 2
12366: PUSH
12367: LD_INT 1
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 4
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: LD_INT 6
12384: PUSH
12385: LD_INT 7
12387: PUSH
12388: LD_INT 8
12390: PUSH
12391: LD_INT 9
12393: PUSH
12394: LD_INT 10
12396: PUSH
12397: LD_INT 11
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: LD_INT 13
12405: PUSH
12406: LD_INT 14
12408: PUSH
12409: LD_INT 15
12411: PUSH
12412: LD_INT 16
12414: PUSH
12415: LD_INT 17
12417: PUSH
12418: LD_INT 18
12420: PUSH
12421: LD_INT 19
12423: PUSH
12424: LD_INT 20
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 23
12435: PUSH
12436: LD_INT 24
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 27
12447: PUSH
12448: LD_INT 28
12450: PUSH
12451: LD_INT 29
12453: PUSH
12454: LD_INT 30
12456: PUSH
12457: LD_INT 31
12459: PUSH
12460: LD_INT 32
12462: PUSH
12463: LD_INT 33
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 35
12471: PUSH
12472: LD_INT 36
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 101
12515: PUSH
12516: LD_INT 102
12518: PUSH
12519: LD_INT 103
12521: PUSH
12522: LD_INT 104
12524: PUSH
12525: LD_INT 105
12527: PUSH
12528: LD_INT 106
12530: PUSH
12531: LD_INT 107
12533: PUSH
12534: LD_INT 108
12536: PUSH
12537: LD_INT 109
12539: PUSH
12540: LD_INT 110
12542: PUSH
12543: LD_INT 111
12545: PUSH
12546: LD_INT 112
12548: PUSH
12549: LD_INT 113
12551: PUSH
12552: LD_INT 114
12554: PUSH
12555: LD_INT 115
12557: PUSH
12558: LD_INT 116
12560: PUSH
12561: LD_INT 117
12563: PUSH
12564: LD_INT 118
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12594
12593: POP
// end else
12594: GO 12825
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: LD_INT 4
12612: PUSH
12613: LD_INT 5
12615: PUSH
12616: LD_INT 6
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: LD_INT 9
12627: PUSH
12628: LD_INT 10
12630: PUSH
12631: LD_INT 11
12633: PUSH
12634: LD_INT 12
12636: PUSH
12637: LD_INT 13
12639: PUSH
12640: LD_INT 14
12642: PUSH
12643: LD_INT 15
12645: PUSH
12646: LD_INT 16
12648: PUSH
12649: LD_INT 17
12651: PUSH
12652: LD_INT 18
12654: PUSH
12655: LD_INT 19
12657: PUSH
12658: LD_INT 20
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 23
12669: PUSH
12670: LD_INT 24
12672: PUSH
12673: LD_INT 25
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: LD_INT 27
12681: PUSH
12682: LD_INT 28
12684: PUSH
12685: LD_INT 29
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 31
12693: PUSH
12694: LD_INT 32
12696: PUSH
12697: LD_INT 33
12699: PUSH
12700: LD_INT 34
12702: PUSH
12703: LD_INT 35
12705: PUSH
12706: LD_INT 36
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 101
12749: PUSH
12750: LD_INT 102
12752: PUSH
12753: LD_INT 103
12755: PUSH
12756: LD_INT 104
12758: PUSH
12759: LD_INT 105
12761: PUSH
12762: LD_INT 106
12764: PUSH
12765: LD_INT 107
12767: PUSH
12768: LD_INT 108
12770: PUSH
12771: LD_INT 109
12773: PUSH
12774: LD_INT 110
12776: PUSH
12777: LD_INT 111
12779: PUSH
12780: LD_INT 112
12782: PUSH
12783: LD_INT 113
12785: PUSH
12786: LD_INT 114
12788: PUSH
12789: LD_INT 115
12791: PUSH
12792: LD_INT 116
12794: PUSH
12795: LD_INT 117
12797: PUSH
12798: LD_INT 118
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: ST_TO_ADDR
// if result then
12825: LD_VAR 0 2
12829: IFFALSE 13615
// begin normal :=  ;
12831: LD_ADDR_VAR 0 5
12835: PUSH
12836: LD_STRING 
12838: ST_TO_ADDR
// hardcore :=  ;
12839: LD_ADDR_VAR 0 6
12843: PUSH
12844: LD_STRING 
12846: ST_TO_ADDR
// active :=  ;
12847: LD_ADDR_VAR 0 7
12851: PUSH
12852: LD_STRING 
12854: ST_TO_ADDR
// for i = 1 to normalCounter do
12855: LD_ADDR_VAR 0 8
12859: PUSH
12860: DOUBLE
12861: LD_INT 1
12863: DEC
12864: ST_TO_ADDR
12865: LD_EXP 20
12869: PUSH
12870: FOR_TO
12871: IFFALSE 12972
// begin tmp := 0 ;
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_STRING 0
12880: ST_TO_ADDR
// if result [ 1 ] then
12881: LD_VAR 0 2
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: IFFALSE 12954
// if result [ 1 ] [ 1 ] = i then
12891: LD_VAR 0 2
12895: PUSH
12896: LD_INT 1
12898: ARRAY
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_VAR 0 8
12908: EQUAL
12909: IFFALSE 12954
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_VAR 0 2
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 3
12940: PPUSH
12941: CALL_OW 1
12945: ST_TO_ADDR
// tmp := 1 ;
12946: LD_ADDR_VAR 0 3
12950: PUSH
12951: LD_STRING 1
12953: ST_TO_ADDR
// end ; normal := normal & tmp ;
12954: LD_ADDR_VAR 0 5
12958: PUSH
12959: LD_VAR 0 5
12963: PUSH
12964: LD_VAR 0 3
12968: STR
12969: ST_TO_ADDR
// end ;
12970: GO 12870
12972: POP
12973: POP
// for i = 1 to hardcoreCounter do
12974: LD_ADDR_VAR 0 8
12978: PUSH
12979: DOUBLE
12980: LD_INT 1
12982: DEC
12983: ST_TO_ADDR
12984: LD_EXP 21
12988: PUSH
12989: FOR_TO
12990: IFFALSE 13095
// begin tmp := 0 ;
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_STRING 0
12999: ST_TO_ADDR
// if result [ 2 ] then
13000: LD_VAR 0 2
13004: PUSH
13005: LD_INT 2
13007: ARRAY
13008: IFFALSE 13077
// if result [ 2 ] [ 1 ] = 100 + i then
13010: LD_VAR 0 2
13014: PUSH
13015: LD_INT 2
13017: ARRAY
13018: PUSH
13019: LD_INT 1
13021: ARRAY
13022: PUSH
13023: LD_INT 100
13025: PUSH
13026: LD_VAR 0 8
13030: PLUS
13031: EQUAL
13032: IFFALSE 13077
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13034: LD_ADDR_VAR 0 2
13038: PUSH
13039: LD_VAR 0 2
13043: PPUSH
13044: LD_INT 2
13046: PPUSH
13047: LD_VAR 0 2
13051: PUSH
13052: LD_INT 2
13054: ARRAY
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 3
13063: PPUSH
13064: CALL_OW 1
13068: ST_TO_ADDR
// tmp := 1 ;
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: LD_STRING 1
13076: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13077: LD_ADDR_VAR 0 6
13081: PUSH
13082: LD_VAR 0 6
13086: PUSH
13087: LD_VAR 0 3
13091: STR
13092: ST_TO_ADDR
// end ;
13093: GO 12989
13095: POP
13096: POP
// if isGameLoad then
13097: LD_VAR 0 1
13101: IFFALSE 13576
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13103: LD_ADDR_VAR 0 4
13107: PUSH
13108: LD_EXP 24
13112: PUSH
13113: LD_EXP 23
13117: PUSH
13118: LD_EXP 25
13122: PUSH
13123: LD_EXP 22
13127: PUSH
13128: LD_EXP 26
13132: PUSH
13133: LD_EXP 27
13137: PUSH
13138: LD_EXP 28
13142: PUSH
13143: LD_EXP 29
13147: PUSH
13148: LD_EXP 30
13152: PUSH
13153: LD_EXP 31
13157: PUSH
13158: LD_EXP 32
13162: PUSH
13163: LD_EXP 33
13167: PUSH
13168: LD_EXP 34
13172: PUSH
13173: LD_EXP 35
13177: PUSH
13178: LD_EXP 43
13182: PUSH
13183: LD_EXP 44
13187: PUSH
13188: LD_EXP 45
13192: PUSH
13193: LD_EXP 46
13197: PUSH
13198: LD_EXP 48
13202: PUSH
13203: LD_EXP 49
13207: PUSH
13208: LD_EXP 50
13212: PUSH
13213: LD_EXP 53
13217: PUSH
13218: LD_EXP 55
13222: PUSH
13223: LD_EXP 56
13227: PUSH
13228: LD_EXP 57
13232: PUSH
13233: LD_EXP 59
13237: PUSH
13238: LD_EXP 60
13242: PUSH
13243: LD_EXP 63
13247: PUSH
13248: LD_EXP 64
13252: PUSH
13253: LD_EXP 65
13257: PUSH
13258: LD_EXP 66
13262: PUSH
13263: LD_EXP 67
13267: PUSH
13268: LD_EXP 68
13272: PUSH
13273: LD_EXP 69
13277: PUSH
13278: LD_EXP 70
13282: PUSH
13283: LD_EXP 71
13287: PUSH
13288: LD_EXP 36
13292: PUSH
13293: LD_EXP 37
13297: PUSH
13298: LD_EXP 40
13302: PUSH
13303: LD_EXP 41
13307: PUSH
13308: LD_EXP 42
13312: PUSH
13313: LD_EXP 38
13317: PUSH
13318: LD_EXP 39
13322: PUSH
13323: LD_EXP 47
13327: PUSH
13328: LD_EXP 51
13332: PUSH
13333: LD_EXP 52
13337: PUSH
13338: LD_EXP 54
13342: PUSH
13343: LD_EXP 58
13347: PUSH
13348: LD_EXP 61
13352: PUSH
13353: LD_EXP 62
13357: PUSH
13358: LD_EXP 72
13362: PUSH
13363: LD_EXP 73
13367: PUSH
13368: LD_EXP 74
13372: PUSH
13373: LD_EXP 75
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: ST_TO_ADDR
// tmp :=  ;
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_STRING 
13441: ST_TO_ADDR
// for i = 1 to normalCounter do
13442: LD_ADDR_VAR 0 8
13446: PUSH
13447: DOUBLE
13448: LD_INT 1
13450: DEC
13451: ST_TO_ADDR
13452: LD_EXP 20
13456: PUSH
13457: FOR_TO
13458: IFFALSE 13494
// begin if flags [ i ] then
13460: LD_VAR 0 4
13464: PUSH
13465: LD_VAR 0 8
13469: ARRAY
13470: IFFALSE 13492
// tmp := tmp & i & ; ;
13472: LD_ADDR_VAR 0 3
13476: PUSH
13477: LD_VAR 0 3
13481: PUSH
13482: LD_VAR 0 8
13486: STR
13487: PUSH
13488: LD_STRING ;
13490: STR
13491: ST_TO_ADDR
// end ;
13492: GO 13457
13494: POP
13495: POP
// for i = 1 to hardcoreCounter do
13496: LD_ADDR_VAR 0 8
13500: PUSH
13501: DOUBLE
13502: LD_INT 1
13504: DEC
13505: ST_TO_ADDR
13506: LD_EXP 21
13510: PUSH
13511: FOR_TO
13512: IFFALSE 13558
// begin if flags [ normalCounter + i ] then
13514: LD_VAR 0 4
13518: PUSH
13519: LD_EXP 20
13523: PUSH
13524: LD_VAR 0 8
13528: PLUS
13529: ARRAY
13530: IFFALSE 13556
// tmp := tmp & ( 100 + i ) & ; ;
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 100
13544: PUSH
13545: LD_VAR 0 8
13549: PLUS
13550: STR
13551: PUSH
13552: LD_STRING ;
13554: STR
13555: ST_TO_ADDR
// end ;
13556: GO 13511
13558: POP
13559: POP
// if tmp then
13560: LD_VAR 0 3
13564: IFFALSE 13576
// active := tmp ;
13566: LD_ADDR_VAR 0 7
13570: PUSH
13571: LD_VAR 0 3
13575: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13576: LD_STRING getStreamItemsFromMission("
13578: PUSH
13579: LD_VAR 0 5
13583: STR
13584: PUSH
13585: LD_STRING ","
13587: STR
13588: PUSH
13589: LD_VAR 0 6
13593: STR
13594: PUSH
13595: LD_STRING ","
13597: STR
13598: PUSH
13599: LD_VAR 0 7
13603: STR
13604: PUSH
13605: LD_STRING ")
13607: STR
13608: PPUSH
13609: CALL_OW 559
// end else
13613: GO 13622
// ToLua ( getStreamItemsFromMission("","","") ) ;
13615: LD_STRING getStreamItemsFromMission("","","")
13617: PPUSH
13618: CALL_OW 559
// end ;
13622: LD_VAR 0 2
13626: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13627: LD_EXP 19
13631: PUSH
13632: LD_EXP 24
13636: AND
13637: IFFALSE 13761
13639: GO 13641
13641: DISABLE
13642: LD_INT 0
13644: PPUSH
13645: PPUSH
// begin enable ;
13646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13647: LD_ADDR_VAR 0 2
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_OWVAR 2
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 34
13669: PUSH
13670: LD_INT 7
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 34
13679: PUSH
13680: LD_INT 45
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 34
13689: PUSH
13690: LD_INT 28
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 34
13699: PUSH
13700: LD_INT 47
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if not tmp then
13723: LD_VAR 0 2
13727: NOT
13728: IFFALSE 13732
// exit ;
13730: GO 13761
// for i in tmp do
13732: LD_ADDR_VAR 0 1
13736: PUSH
13737: LD_VAR 0 2
13741: PUSH
13742: FOR_IN
13743: IFFALSE 13759
// begin SetLives ( i , 0 ) ;
13745: LD_VAR 0 1
13749: PPUSH
13750: LD_INT 0
13752: PPUSH
13753: CALL_OW 234
// end ;
13757: GO 13742
13759: POP
13760: POP
// end ;
13761: PPOPN 2
13763: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13764: LD_EXP 19
13768: PUSH
13769: LD_EXP 25
13773: AND
13774: IFFALSE 13858
13776: GO 13778
13778: DISABLE
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
// begin enable ;
13783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_OWVAR 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: ST_TO_ADDR
// if not tmp then
13820: LD_VAR 0 2
13824: NOT
13825: IFFALSE 13829
// exit ;
13827: GO 13858
// for i in tmp do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_VAR 0 2
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13856
// begin SetLives ( i , 0 ) ;
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_INT 0
13849: PPUSH
13850: CALL_OW 234
// end ;
13854: GO 13839
13856: POP
13857: POP
// end ;
13858: PPOPN 2
13860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13861: LD_EXP 19
13865: PUSH
13866: LD_EXP 22
13870: AND
13871: IFFALSE 13964
13873: GO 13875
13875: DISABLE
13876: LD_INT 0
13878: PPUSH
// begin enable ;
13879: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 25
13902: PUSH
13903: LD_INT 5
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 8
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: PUSH
13945: FOR_IN
13946: IFFALSE 13962
// begin SetClass ( i , 1 ) ;
13948: LD_VAR 0 1
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 336
// end ;
13960: GO 13945
13962: POP
13963: POP
// end ;
13964: PPOPN 1
13966: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13967: LD_EXP 19
13971: PUSH
13972: LD_EXP 23
13976: AND
13977: PUSH
13978: LD_OWVAR 65
13982: PUSH
13983: LD_INT 7
13985: LESS
13986: AND
13987: IFFALSE 14001
13989: GO 13991
13991: DISABLE
// begin enable ;
13992: ENABLE
// game_speed := 7 ;
13993: LD_ADDR_OWVAR 65
13997: PUSH
13998: LD_INT 7
14000: ST_TO_ADDR
// end ;
14001: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14002: LD_EXP 19
14006: PUSH
14007: LD_EXP 26
14011: AND
14012: IFFALSE 14214
14014: GO 14016
14016: DISABLE
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
14021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 81
14029: PUSH
14030: LD_OWVAR 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: ST_TO_ADDR
// if not tmp then
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14214
// if tmp > 5 then
14067: LD_VAR 0 3
14071: PUSH
14072: LD_INT 5
14074: GREATER
14075: IFFALSE 14087
// k := 5 else
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_INT 5
14084: ST_TO_ADDR
14085: GO 14097
// k := tmp ;
14087: LD_ADDR_VAR 0 2
14091: PUSH
14092: LD_VAR 0 3
14096: ST_TO_ADDR
// for i := 1 to k do
14097: LD_ADDR_VAR 0 1
14101: PUSH
14102: DOUBLE
14103: LD_INT 1
14105: DEC
14106: ST_TO_ADDR
14107: LD_VAR 0 2
14111: PUSH
14112: FOR_TO
14113: IFFALSE 14212
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14115: LD_VAR 0 3
14119: PUSH
14120: LD_VAR 0 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 4
14133: MOD
14134: PUSH
14135: LD_INT 1
14137: PLUS
14138: PPUSH
14139: CALL_OW 259
14143: PUSH
14144: LD_INT 10
14146: LESS
14147: IFFALSE 14210
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14149: LD_VAR 0 3
14153: PUSH
14154: LD_VAR 0 1
14158: ARRAY
14159: PPUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_INT 4
14167: MOD
14168: PUSH
14169: LD_INT 1
14171: PLUS
14172: PPUSH
14173: LD_VAR 0 3
14177: PUSH
14178: LD_VAR 0 1
14182: ARRAY
14183: PPUSH
14184: LD_VAR 0 1
14188: PUSH
14189: LD_INT 4
14191: MOD
14192: PUSH
14193: LD_INT 1
14195: PLUS
14196: PPUSH
14197: CALL_OW 259
14201: PUSH
14202: LD_INT 1
14204: PLUS
14205: PPUSH
14206: CALL_OW 237
14210: GO 14112
14212: POP
14213: POP
// end ;
14214: PPOPN 3
14216: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14217: LD_EXP 19
14221: PUSH
14222: LD_EXP 27
14226: AND
14227: IFFALSE 14247
14229: GO 14231
14231: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14232: LD_INT 4
14234: PPUSH
14235: LD_OWVAR 2
14239: PPUSH
14240: LD_INT 0
14242: PPUSH
14243: CALL_OW 324
14247: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14248: LD_EXP 19
14252: PUSH
14253: LD_EXP 56
14257: AND
14258: IFFALSE 14278
14260: GO 14262
14262: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14263: LD_INT 19
14265: PPUSH
14266: LD_OWVAR 2
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 324
14278: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14279: LD_EXP 19
14283: PUSH
14284: LD_EXP 28
14288: AND
14289: IFFALSE 14391
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
// begin enable ;
14298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14299: LD_ADDR_VAR 0 2
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_OWVAR 2
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: LD_INT 34
14321: PUSH
14322: LD_INT 11
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 34
14331: PUSH
14332: LD_INT 30
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PPUSH
14348: CALL_OW 69
14352: ST_TO_ADDR
// if not tmp then
14353: LD_VAR 0 2
14357: NOT
14358: IFFALSE 14362
// exit ;
14360: GO 14391
// for i in tmp do
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_VAR 0 2
14371: PUSH
14372: FOR_IN
14373: IFFALSE 14389
// begin SetLives ( i , 0 ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_INT 0
14382: PPUSH
14383: CALL_OW 234
// end ;
14387: GO 14372
14389: POP
14390: POP
// end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14394: LD_EXP 19
14398: PUSH
14399: LD_EXP 29
14403: AND
14404: IFFALSE 14424
14406: GO 14408
14408: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14409: LD_INT 32
14411: PPUSH
14412: LD_OWVAR 2
14416: PPUSH
14417: LD_INT 0
14419: PPUSH
14420: CALL_OW 324
14424: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14425: LD_EXP 19
14429: PUSH
14430: LD_EXP 30
14434: AND
14435: IFFALSE 14616
14437: GO 14439
14439: DISABLE
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: LD_INT 22
14452: PUSH
14453: LD_OWVAR 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 33
14464: PUSH
14465: LD_INT 3
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if not tmp then
14481: LD_VAR 0 2
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14616
// side := 0 ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// for i := 1 to 8 do
14498: LD_ADDR_VAR 0 1
14502: PUSH
14503: DOUBLE
14504: LD_INT 1
14506: DEC
14507: ST_TO_ADDR
14508: LD_INT 8
14510: PUSH
14511: FOR_TO
14512: IFFALSE 14560
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14514: LD_OWVAR 2
14518: PUSH
14519: LD_VAR 0 1
14523: NONEQUAL
14524: PUSH
14525: LD_OWVAR 2
14529: PPUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 81
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: AND
14544: IFFALSE 14558
// begin side := i ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ST_TO_ADDR
// break ;
14556: GO 14560
// end ;
14558: GO 14511
14560: POP
14561: POP
// if not side then
14562: LD_VAR 0 3
14566: NOT
14567: IFFALSE 14571
// exit ;
14569: GO 14616
// for i := 1 to tmp do
14571: LD_ADDR_VAR 0 1
14575: PUSH
14576: DOUBLE
14577: LD_INT 1
14579: DEC
14580: ST_TO_ADDR
14581: LD_VAR 0 2
14585: PUSH
14586: FOR_TO
14587: IFFALSE 14614
// if Prob ( 60 ) then
14589: LD_INT 60
14591: PPUSH
14592: CALL_OW 13
14596: IFFALSE 14612
// SetSide ( i , side ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: CALL_OW 235
14612: GO 14586
14614: POP
14615: POP
// end ;
14616: PPOPN 3
14618: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14619: LD_EXP 19
14623: PUSH
14624: LD_EXP 32
14628: AND
14629: IFFALSE 14748
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14637: LD_ADDR_VAR 0 1
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_OWVAR 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 3
14666: PUSH
14667: LD_INT 23
14669: PUSH
14670: LD_INT 0
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14746
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 257
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: LD_INT 2
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: LD_INT 4
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: IN
14722: IFFALSE 14744
// SetClass ( un , rand ( 1 , 4 ) ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: LD_INT 4
14734: PPUSH
14735: CALL_OW 12
14739: PPUSH
14740: CALL_OW 336
14744: GO 14691
14746: POP
14747: POP
// end ;
14748: PPOPN 1
14750: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14751: LD_EXP 19
14755: PUSH
14756: LD_EXP 31
14760: AND
14761: IFFALSE 14840
14763: GO 14765
14765: DISABLE
14766: LD_INT 0
14768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_OWVAR 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 21
14788: PUSH
14789: LD_INT 3
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: ST_TO_ADDR
// if not tmp then
14805: LD_VAR 0 1
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 14840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14814: LD_VAR 0 1
14818: PUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 12
14831: ARRAY
14832: PPUSH
14833: LD_INT 100
14835: PPUSH
14836: CALL_OW 234
// end ;
14840: PPOPN 1
14842: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14843: LD_EXP 19
14847: PUSH
14848: LD_EXP 33
14852: AND
14853: IFFALSE 14951
14855: GO 14857
14857: DISABLE
14858: LD_INT 0
14860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14861: LD_ADDR_VAR 0 1
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_OWVAR 2
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: ST_TO_ADDR
// if not tmp then
14897: LD_VAR 0 1
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 14951
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14906: LD_VAR 0 1
14910: PUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 12
14923: ARRAY
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_INT 4
14930: PPUSH
14931: CALL_OW 12
14935: PPUSH
14936: LD_INT 3000
14938: PPUSH
14939: LD_INT 9000
14941: PPUSH
14942: CALL_OW 12
14946: PPUSH
14947: CALL_OW 492
// end ;
14951: PPOPN 1
14953: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14954: LD_EXP 19
14958: PUSH
14959: LD_EXP 34
14963: AND
14964: IFFALSE 14984
14966: GO 14968
14968: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14969: LD_INT 1
14971: PPUSH
14972: LD_OWVAR 2
14976: PPUSH
14977: LD_INT 0
14979: PPUSH
14980: CALL_OW 324
14984: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14985: LD_EXP 19
14989: PUSH
14990: LD_EXP 35
14994: AND
14995: IFFALSE 15078
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15004: LD_ADDR_VAR 0 2
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 2
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15078
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15076
// SetBLevel ( i , 10 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 10
15069: PPUSH
15070: CALL_OW 241
15074: GO 15059
15076: POP
15077: POP
// end ;
15078: PPOPN 2
15080: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 36
15090: AND
15091: IFFALSE 15202
15093: GO 15095
15095: DISABLE
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15101: LD_ADDR_VAR 0 3
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 25
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 3
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15202
// un := tmp [ rand ( 1 , tmp ) ] ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_VAR 0 3
15155: PUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: CALL_OW 12
15168: ARRAY
15169: ST_TO_ADDR
// if Crawls ( un ) then
15170: LD_VAR 0 2
15174: PPUSH
15175: CALL_OW 318
15179: IFFALSE 15190
// ComWalk ( un ) ;
15181: LD_VAR 0 2
15185: PPUSH
15186: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15190: LD_VAR 0 2
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 336
// end ;
15202: PPOPN 3
15204: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15205: LD_EXP 19
15209: PUSH
15210: LD_EXP 37
15214: AND
15215: PUSH
15216: LD_OWVAR 67
15220: PUSH
15221: LD_INT 4
15223: LESS
15224: AND
15225: IFFALSE 15244
15227: GO 15229
15229: DISABLE
// begin Difficulty := Difficulty + 1 ;
15230: LD_ADDR_OWVAR 67
15234: PUSH
15235: LD_OWVAR 67
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: ST_TO_ADDR
// end ;
15244: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15245: LD_EXP 19
15249: PUSH
15250: LD_EXP 38
15254: AND
15255: IFFALSE 15358
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
// begin for i := 1 to 5 do
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: DOUBLE
15269: LD_INT 1
15271: DEC
15272: ST_TO_ADDR
15273: LD_INT 5
15275: PUSH
15276: FOR_TO
15277: IFFALSE 15356
// begin uc_nation := nation_nature ;
15279: LD_ADDR_OWVAR 21
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// uc_side := 0 ;
15287: LD_ADDR_OWVAR 20
15291: PUSH
15292: LD_INT 0
15294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15295: LD_ADDR_OWVAR 29
15299: PUSH
15300: LD_INT 12
15302: PUSH
15303: LD_INT 12
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := 20 ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 20
15317: ST_TO_ADDR
// hc_class := class_tiger ;
15318: LD_ADDR_OWVAR 28
15322: PUSH
15323: LD_INT 14
15325: ST_TO_ADDR
// hc_gallery :=  ;
15326: LD_ADDR_OWVAR 33
15330: PUSH
15331: LD_STRING 
15333: ST_TO_ADDR
// hc_name :=  ;
15334: LD_ADDR_OWVAR 26
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15342: CALL_OW 44
15346: PPUSH
15347: LD_INT 0
15349: PPUSH
15350: CALL_OW 51
// end ;
15354: GO 15276
15356: POP
15357: POP
// end ;
15358: PPOPN 1
15360: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15361: LD_EXP 19
15365: PUSH
15366: LD_EXP 39
15370: AND
15371: IFFALSE 15380
15373: GO 15375
15375: DISABLE
// StreamSibBomb ;
15376: CALL 15381 0 0
15380: END
// export function StreamSibBomb ; var i , x , y ; begin
15381: LD_INT 0
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
// result := false ;
15387: LD_ADDR_VAR 0 1
15391: PUSH
15392: LD_INT 0
15394: ST_TO_ADDR
// for i := 1 to 16 do
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: DOUBLE
15401: LD_INT 1
15403: DEC
15404: ST_TO_ADDR
15405: LD_INT 16
15407: PUSH
15408: FOR_TO
15409: IFFALSE 15608
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15411: LD_ADDR_VAR 0 3
15415: PUSH
15416: LD_INT 10
15418: PUSH
15419: LD_INT 20
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 40
15427: PUSH
15428: LD_INT 50
15430: PUSH
15431: LD_INT 60
15433: PUSH
15434: LD_INT 70
15436: PUSH
15437: LD_INT 80
15439: PUSH
15440: LD_INT 90
15442: PUSH
15443: LD_INT 100
15445: PUSH
15446: LD_INT 110
15448: PUSH
15449: LD_INT 120
15451: PUSH
15452: LD_INT 130
15454: PUSH
15455: LD_INT 140
15457: PUSH
15458: LD_INT 150
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: PPUSH
15481: LD_INT 15
15483: PPUSH
15484: CALL_OW 12
15488: ARRAY
15489: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15490: LD_ADDR_VAR 0 4
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 20
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 40
15506: PUSH
15507: LD_INT 50
15509: PUSH
15510: LD_INT 60
15512: PUSH
15513: LD_INT 70
15515: PUSH
15516: LD_INT 80
15518: PUSH
15519: LD_INT 90
15521: PUSH
15522: LD_INT 100
15524: PUSH
15525: LD_INT 110
15527: PUSH
15528: LD_INT 120
15530: PUSH
15531: LD_INT 130
15533: PUSH
15534: LD_INT 140
15536: PUSH
15537: LD_INT 150
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_INT 15
15562: PPUSH
15563: CALL_OW 12
15567: ARRAY
15568: ST_TO_ADDR
// if ValidHex ( x , y ) then
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: CALL_OW 488
15583: IFFALSE 15606
// begin result := [ x , y ] ;
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 3
15594: PUSH
15595: LD_VAR 0 4
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: ST_TO_ADDR
// break ;
15604: GO 15608
// end ; end ;
15606: GO 15408
15608: POP
15609: POP
// if result then
15610: LD_VAR 0 1
15614: IFFALSE 15674
// begin ToLua ( playSibBomb() ) ;
15616: LD_STRING playSibBomb()
15618: PPUSH
15619: CALL_OW 559
// wait ( 0 0$14 ) ;
15623: LD_INT 490
15625: PPUSH
15626: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PPUSH
15639: LD_VAR 0 1
15643: PUSH
15644: LD_INT 2
15646: ARRAY
15647: PPUSH
15648: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 1
15665: PUSH
15666: LD_INT 2
15668: ARRAY
15669: PPUSH
15670: CALL_OW 429
// end ; end ;
15674: LD_VAR 0 1
15678: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15679: LD_EXP 19
15683: PUSH
15684: LD_EXP 41
15688: AND
15689: IFFALSE 15701
15691: GO 15693
15693: DISABLE
// YouLost (  ) ;
15694: LD_STRING 
15696: PPUSH
15697: CALL_OW 104
15701: END
// every 0 0$1 trigger StreamModeActive and sFog do
15702: LD_EXP 19
15706: PUSH
15707: LD_EXP 40
15711: AND
15712: IFFALSE 15726
15714: GO 15716
15716: DISABLE
// FogOff ( your_side ) ;
15717: LD_OWVAR 2
15721: PPUSH
15722: CALL_OW 344
15726: END
// every 0 0$1 trigger StreamModeActive and sSun do
15727: LD_EXP 19
15731: PUSH
15732: LD_EXP 42
15736: AND
15737: IFFALSE 15765
15739: GO 15741
15741: DISABLE
// begin solar_recharge_percent := 0 ;
15742: LD_ADDR_OWVAR 79
15746: PUSH
15747: LD_INT 0
15749: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15750: LD_INT 10500
15752: PPUSH
15753: CALL_OW 67
// solar_recharge_percent := 100 ;
15757: LD_ADDR_OWVAR 79
15761: PUSH
15762: LD_INT 100
15764: ST_TO_ADDR
// end ;
15765: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15766: LD_EXP 19
15770: PUSH
15771: LD_EXP 43
15775: AND
15776: IFFALSE 16015
15778: GO 15780
15780: DISABLE
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
15785: PPUSH
// begin tmp := [ ] ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: EMPTY
15792: ST_TO_ADDR
// for i := 1 to 6 do
15793: LD_ADDR_VAR 0 1
15797: PUSH
15798: DOUBLE
15799: LD_INT 1
15801: DEC
15802: ST_TO_ADDR
15803: LD_INT 6
15805: PUSH
15806: FOR_TO
15807: IFFALSE 15912
// begin uc_nation := nation_nature ;
15809: LD_ADDR_OWVAR 21
15813: PUSH
15814: LD_INT 0
15816: ST_TO_ADDR
// uc_side := 0 ;
15817: LD_ADDR_OWVAR 20
15821: PUSH
15822: LD_INT 0
15824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15825: LD_ADDR_OWVAR 29
15829: PUSH
15830: LD_INT 12
15832: PUSH
15833: LD_INT 12
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: ST_TO_ADDR
// hc_agressivity := 20 ;
15840: LD_ADDR_OWVAR 35
15844: PUSH
15845: LD_INT 20
15847: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15848: LD_ADDR_OWVAR 28
15852: PUSH
15853: LD_INT 17
15855: ST_TO_ADDR
// hc_gallery :=  ;
15856: LD_ADDR_OWVAR 33
15860: PUSH
15861: LD_STRING 
15863: ST_TO_ADDR
// hc_name :=  ;
15864: LD_ADDR_OWVAR 26
15868: PUSH
15869: LD_STRING 
15871: ST_TO_ADDR
// un := CreateHuman ;
15872: LD_ADDR_VAR 0 2
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15882: LD_VAR 0 2
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 51
// tmp := tmp ^ un ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 2
15908: ADD
15909: ST_TO_ADDR
// end ;
15910: GO 15806
15912: POP
15913: POP
// repeat wait ( 0 0$1 ) ;
15914: LD_INT 35
15916: PPUSH
15917: CALL_OW 67
// for un in tmp do
15921: LD_ADDR_VAR 0 2
15925: PUSH
15926: LD_VAR 0 3
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16006
// begin if IsDead ( un ) then
15934: LD_VAR 0 2
15938: PPUSH
15939: CALL_OW 301
15943: IFFALSE 15963
// begin tmp := tmp diff un ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_VAR 0 3
15954: PUSH
15955: LD_VAR 0 2
15959: DIFF
15960: ST_TO_ADDR
// continue ;
15961: GO 15931
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15963: LD_VAR 0 2
15967: PPUSH
15968: LD_INT 3
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 69
15989: PPUSH
15990: LD_VAR 0 2
15994: PPUSH
15995: CALL_OW 74
15999: PPUSH
16000: CALL_OW 115
// end ;
16004: GO 15931
16006: POP
16007: POP
// until not tmp ;
16008: LD_VAR 0 3
16012: NOT
16013: IFFALSE 15914
// end ;
16015: PPOPN 3
16017: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16018: LD_EXP 19
16022: PUSH
16023: LD_EXP 44
16027: AND
16028: IFFALSE 16082
16030: GO 16032
16032: DISABLE
// begin ToLua ( displayTroll(); ) ;
16033: LD_STRING displayTroll();
16035: PPUSH
16036: CALL_OW 559
// wait ( 3 3$00 ) ;
16040: LD_INT 6300
16042: PPUSH
16043: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16047: LD_STRING hideTroll();
16049: PPUSH
16050: CALL_OW 559
// wait ( 1 1$00 ) ;
16054: LD_INT 2100
16056: PPUSH
16057: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16061: LD_STRING displayTroll();
16063: PPUSH
16064: CALL_OW 559
// wait ( 1 1$00 ) ;
16068: LD_INT 2100
16070: PPUSH
16071: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16075: LD_STRING hideTroll();
16077: PPUSH
16078: CALL_OW 559
// end ;
16082: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16083: LD_EXP 19
16087: PUSH
16088: LD_EXP 45
16092: AND
16093: IFFALSE 16156
16095: GO 16097
16097: DISABLE
16098: LD_INT 0
16100: PPUSH
// begin p := 0 ;
16101: LD_ADDR_VAR 0 1
16105: PUSH
16106: LD_INT 0
16108: ST_TO_ADDR
// repeat game_speed := 1 ;
16109: LD_ADDR_OWVAR 65
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16117: LD_INT 35
16119: PPUSH
16120: CALL_OW 67
// p := p + 1 ;
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_VAR 0 1
16133: PUSH
16134: LD_INT 1
16136: PLUS
16137: ST_TO_ADDR
// until p >= 60 ;
16138: LD_VAR 0 1
16142: PUSH
16143: LD_INT 60
16145: GREATEREQUAL
16146: IFFALSE 16109
// game_speed := 4 ;
16148: LD_ADDR_OWVAR 65
16152: PUSH
16153: LD_INT 4
16155: ST_TO_ADDR
// end ;
16156: PPOPN 1
16158: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16159: LD_EXP 19
16163: PUSH
16164: LD_EXP 46
16168: AND
16169: IFFALSE 16315
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 30
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 30
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PPUSH
16227: CALL_OW 69
16231: ST_TO_ADDR
// if not depot then
16232: LD_VAR 0 1
16236: NOT
16237: IFFALSE 16241
// exit ;
16239: GO 16315
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16241: LD_ADDR_VAR 0 2
16245: PUSH
16246: LD_VAR 0 1
16250: PUSH
16251: LD_INT 1
16253: PPUSH
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 12
16263: ARRAY
16264: PPUSH
16265: CALL_OW 274
16269: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: LD_INT 0
16280: PPUSH
16281: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16285: LD_VAR 0 2
16289: PPUSH
16290: LD_INT 2
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: LD_INT 0
16310: PPUSH
16311: CALL_OW 277
// end ;
16315: PPOPN 2
16317: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16318: LD_EXP 19
16322: PUSH
16323: LD_EXP 47
16327: AND
16328: IFFALSE 16425
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16336: LD_ADDR_VAR 0 1
16340: PUSH
16341: LD_INT 22
16343: PUSH
16344: LD_OWVAR 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 21
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: LD_INT 23
16368: PUSH
16369: LD_INT 0
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL_OW 69
16389: ST_TO_ADDR
// if not tmp then
16390: LD_VAR 0 1
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16425
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 12
16416: ARRAY
16417: PPUSH
16418: LD_INT 200
16420: PPUSH
16421: CALL_OW 234
// end ;
16425: PPOPN 1
16427: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16428: LD_EXP 19
16432: PUSH
16433: LD_EXP 48
16437: AND
16438: IFFALSE 16517
16440: GO 16442
16442: DISABLE
16443: LD_INT 0
16445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 22
16453: PUSH
16454: LD_OWVAR 2
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 21
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: ST_TO_ADDR
// if not tmp then
16482: LD_VAR 0 1
16486: NOT
16487: IFFALSE 16491
// exit ;
16489: GO 16517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16491: LD_VAR 0 1
16495: PUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 12
16508: ARRAY
16509: PPUSH
16510: LD_INT 60
16512: PPUSH
16513: CALL_OW 234
// end ;
16517: PPOPN 1
16519: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16520: LD_EXP 19
16524: PUSH
16525: LD_EXP 49
16529: AND
16530: IFFALSE 16629
16532: GO 16534
16534: DISABLE
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
// begin enable ;
16539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 61
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: LD_INT 33
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: ST_TO_ADDR
// if not tmp then
16583: LD_VAR 0 1
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16629
// for i in tmp do
16592: LD_ADDR_VAR 0 2
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: FOR_IN
16603: IFFALSE 16627
// if IsControledBy ( i ) then
16605: LD_VAR 0 2
16609: PPUSH
16610: CALL_OW 312
16614: IFFALSE 16625
// ComUnlink ( i ) ;
16616: LD_VAR 0 2
16620: PPUSH
16621: CALL_OW 136
16625: GO 16602
16627: POP
16628: POP
// end ;
16629: PPOPN 2
16631: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16632: LD_EXP 19
16636: PUSH
16637: LD_EXP 50
16641: AND
16642: IFFALSE 16782
16644: GO 16646
16646: DISABLE
16647: LD_INT 0
16649: PPUSH
16650: PPUSH
// begin ToLua ( displayPowell(); ) ;
16651: LD_STRING displayPowell();
16653: PPUSH
16654: CALL_OW 559
// uc_side := 0 ;
16658: LD_ADDR_OWVAR 20
16662: PUSH
16663: LD_INT 0
16665: ST_TO_ADDR
// uc_nation := 2 ;
16666: LD_ADDR_OWVAR 21
16670: PUSH
16671: LD_INT 2
16673: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16674: LD_ADDR_OWVAR 37
16678: PUSH
16679: LD_INT 14
16681: ST_TO_ADDR
// vc_engine := engine_siberite ;
16682: LD_ADDR_OWVAR 39
16686: PUSH
16687: LD_INT 3
16689: ST_TO_ADDR
// vc_control := control_apeman ;
16690: LD_ADDR_OWVAR 38
16694: PUSH
16695: LD_INT 5
16697: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16698: LD_ADDR_OWVAR 40
16702: PUSH
16703: LD_INT 29
16705: ST_TO_ADDR
// un := CreateVehicle ;
16706: LD_ADDR_VAR 0 2
16710: PUSH
16711: CALL_OW 45
16715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16728: LD_INT 35
16730: PPUSH
16731: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16735: LD_VAR 0 2
16739: PPUSH
16740: LD_INT 22
16742: PUSH
16743: LD_OWVAR 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PPUSH
16752: CALL_OW 69
16756: PPUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: CALL_OW 74
16766: PPUSH
16767: CALL_OW 115
// until IsDead ( un ) ;
16771: LD_VAR 0 2
16775: PPUSH
16776: CALL_OW 301
16780: IFFALSE 16728
// end ;
16782: PPOPN 2
16784: END
// every 0 0$1 trigger StreamModeActive and sStu do
16785: LD_EXP 19
16789: PUSH
16790: LD_EXP 58
16794: AND
16795: IFFALSE 16811
16797: GO 16799
16799: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16800: LD_STRING displayStucuk();
16802: PPUSH
16803: CALL_OW 559
// ResetFog ;
16807: CALL_OW 335
// end ;
16811: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16812: LD_EXP 19
16816: PUSH
16817: LD_EXP 51
16821: AND
16822: IFFALSE 16963
16824: GO 16826
16826: DISABLE
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_OWVAR 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PPUSH
16862: CALL_OW 69
16866: ST_TO_ADDR
// if not tmp then
16867: LD_VAR 0 2
16871: NOT
16872: IFFALSE 16876
// exit ;
16874: GO 16963
// un := tmp [ rand ( 1 , tmp ) ] ;
16876: LD_ADDR_VAR 0 1
16880: PUSH
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 1
16888: PPUSH
16889: LD_VAR 0 2
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16912: LD_VAR 0 1
16916: PPUSH
16917: LD_OWVAR 3
16921: PUSH
16922: LD_VAR 0 1
16926: DIFF
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 74
16937: PPUSH
16938: CALL_OW 115
// wait ( 0 0$20 ) ;
16942: LD_INT 700
16944: PPUSH
16945: CALL_OW 67
// SetSide ( un , your_side ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_OWVAR 2
16958: PPUSH
16959: CALL_OW 235
// end ;
16963: PPOPN 2
16965: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16966: LD_EXP 19
16970: PUSH
16971: LD_EXP 52
16975: AND
16976: IFFALSE 17082
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16984: LD_ADDR_VAR 0 1
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_OWVAR 2
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 30
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 69
17037: ST_TO_ADDR
// if not depot then
17038: LD_VAR 0 1
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17082
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17047: LD_VAR 0 1
17051: PUSH
17052: LD_INT 1
17054: ARRAY
17055: PPUSH
17056: CALL_OW 250
17060: PPUSH
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PPUSH
17070: CALL_OW 251
17074: PPUSH
17075: LD_INT 70
17077: PPUSH
17078: CALL_OW 495
// end ;
17082: PPOPN 1
17084: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17085: LD_EXP 19
17089: PUSH
17090: LD_EXP 53
17094: AND
17095: IFFALSE 17306
17097: GO 17099
17099: DISABLE
17100: LD_INT 0
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17107: LD_ADDR_VAR 0 5
17111: PUSH
17112: LD_INT 22
17114: PUSH
17115: LD_OWVAR 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 1
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: ST_TO_ADDR
// if not tmp then
17143: LD_VAR 0 5
17147: NOT
17148: IFFALSE 17152
// exit ;
17150: GO 17306
// for i in tmp do
17152: LD_ADDR_VAR 0 1
17156: PUSH
17157: LD_VAR 0 5
17161: PUSH
17162: FOR_IN
17163: IFFALSE 17304
// begin d := rand ( 0 , 5 ) ;
17165: LD_ADDR_VAR 0 4
17169: PUSH
17170: LD_INT 0
17172: PPUSH
17173: LD_INT 5
17175: PPUSH
17176: CALL_OW 12
17180: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 250
17195: PPUSH
17196: LD_VAR 0 4
17200: PPUSH
17201: LD_INT 3
17203: PPUSH
17204: LD_INT 12
17206: PPUSH
17207: CALL_OW 12
17211: PPUSH
17212: CALL_OW 272
17216: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 251
17231: PPUSH
17232: LD_VAR 0 4
17236: PPUSH
17237: LD_INT 3
17239: PPUSH
17240: LD_INT 12
17242: PPUSH
17243: CALL_OW 12
17247: PPUSH
17248: CALL_OW 273
17252: ST_TO_ADDR
// if ValidHex ( x , y ) then
17253: LD_VAR 0 2
17257: PPUSH
17258: LD_VAR 0 3
17262: PPUSH
17263: CALL_OW 488
17267: IFFALSE 17302
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_VAR 0 2
17278: PPUSH
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_INT 3
17286: PPUSH
17287: LD_INT 6
17289: PPUSH
17290: CALL_OW 12
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: CALL_OW 483
// end ;
17302: GO 17162
17304: POP
17305: POP
// end ;
17306: PPOPN 5
17308: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17309: LD_EXP 19
17313: PUSH
17314: LD_EXP 54
17318: AND
17319: IFFALSE 17413
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17328: LD_ADDR_VAR 0 2
17332: PUSH
17333: LD_INT 22
17335: PUSH
17336: LD_OWVAR 2
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 32
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 21
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// if not tmp then
17375: LD_VAR 0 2
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17413
// for i in tmp do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 2
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17411
// SetFuel ( i , 0 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 0
17404: PPUSH
17405: CALL_OW 240
17409: GO 17394
17411: POP
17412: POP
// end ;
17413: PPOPN 2
17415: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17416: LD_EXP 19
17420: PUSH
17421: LD_EXP 55
17425: AND
17426: IFFALSE 17492
17428: GO 17430
17430: DISABLE
17431: LD_INT 0
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 29
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 1
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17492
// DestroyUnit ( tmp [ 1 ] ) ;
17479: LD_VAR 0 1
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PPUSH
17488: CALL_OW 65
// end ;
17492: PPOPN 1
17494: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17495: LD_EXP 19
17499: PUSH
17500: LD_EXP 57
17504: AND
17505: IFFALSE 17634
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
// begin uc_side := 0 ;
17513: LD_ADDR_OWVAR 20
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// uc_nation := nation_arabian ;
17521: LD_ADDR_OWVAR 21
17525: PUSH
17526: LD_INT 2
17528: ST_TO_ADDR
// hc_gallery :=  ;
17529: LD_ADDR_OWVAR 33
17533: PUSH
17534: LD_STRING 
17536: ST_TO_ADDR
// hc_name :=  ;
17537: LD_ADDR_OWVAR 26
17541: PUSH
17542: LD_STRING 
17544: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17545: LD_INT 1
17547: PPUSH
17548: LD_INT 11
17550: PPUSH
17551: LD_INT 10
17553: PPUSH
17554: CALL_OW 380
// un := CreateHuman ;
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: CALL_OW 44
17567: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: PPUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 74
17618: PPUSH
17619: CALL_OW 115
// until IsDead ( un ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL_OW 301
17632: IFFALSE 17580
// end ;
17634: PPOPN 1
17636: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17637: LD_EXP 19
17641: PUSH
17642: LD_EXP 59
17646: AND
17647: IFFALSE 17659
17649: GO 17651
17651: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17652: LD_STRING earthquake(getX(game), 0, 32)
17654: PPUSH
17655: CALL_OW 559
17659: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17660: LD_EXP 19
17664: PUSH
17665: LD_EXP 60
17669: AND
17670: IFFALSE 17761
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin enable ;
17678: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_OWVAR 2
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 21
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 33
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 1
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 1
17742: PPUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 12
17752: ARRAY
17753: PPUSH
17754: LD_INT 1
17756: PPUSH
17757: CALL_OW 234
// end ;
17761: PPOPN 1
17763: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17764: LD_EXP 19
17768: PUSH
17769: LD_EXP 61
17773: AND
17774: IFFALSE 17915
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
17782: PPUSH
17783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 25
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 3
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17915
// un := tmp [ rand ( 1 , tmp ) ] ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_VAR 0 3
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: ST_TO_ADDR
// if Crawls ( un ) then
17853: LD_VAR 0 2
17857: PPUSH
17858: CALL_OW 318
17862: IFFALSE 17873
// ComWalk ( un ) ;
17864: LD_VAR 0 2
17868: PPUSH
17869: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17873: LD_VAR 0 2
17877: PPUSH
17878: LD_INT 9
17880: PPUSH
17881: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17885: LD_INT 28
17887: PPUSH
17888: LD_OWVAR 2
17892: PPUSH
17893: LD_INT 2
17895: PPUSH
17896: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17900: LD_INT 29
17902: PPUSH
17903: LD_OWVAR 2
17907: PPUSH
17908: LD_INT 2
17910: PPUSH
17911: CALL_OW 322
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17918: LD_EXP 19
17922: PUSH
17923: LD_EXP 62
17927: AND
17928: IFFALSE 18039
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 3
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18039
// un := tmp [ rand ( 1 , tmp ) ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
// if Crawls ( un ) then
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 318
18016: IFFALSE 18027
// ComWalk ( un ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_INT 8
18034: PPUSH
18035: CALL_OW 336
// end ;
18039: PPOPN 3
18041: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18042: LD_EXP 19
18046: PUSH
18047: LD_EXP 63
18051: AND
18052: IFFALSE 18196
18054: GO 18056
18056: DISABLE
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 34
18093: PUSH
18094: LD_INT 12
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 34
18103: PUSH
18104: LD_INT 51
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 34
18113: PUSH
18114: LD_INT 32
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: ST_TO_ADDR
// if not tmp then
18137: LD_VAR 0 2
18141: NOT
18142: IFFALSE 18146
// exit ;
18144: GO 18196
// for i in tmp do
18146: LD_ADDR_VAR 0 1
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: FOR_IN
18157: IFFALSE 18194
// if GetCargo ( i , mat_artifact ) = 0 then
18159: LD_VAR 0 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 289
18171: PUSH
18172: LD_INT 0
18174: EQUAL
18175: IFFALSE 18192
// SetCargo ( i , mat_siberit , 100 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 3
18184: PPUSH
18185: LD_INT 100
18187: PPUSH
18188: CALL_OW 290
18192: GO 18156
18194: POP
18195: POP
// end ;
18196: PPOPN 2
18198: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18199: LD_EXP 19
18203: PUSH
18204: LD_EXP 64
18208: AND
18209: IFFALSE 18392
18211: GO 18213
18213: DISABLE
18214: LD_INT 0
18216: PPUSH
18217: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 22
18225: PUSH
18226: LD_OWVAR 2
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: ST_TO_ADDR
// if not tmp then
18240: LD_VAR 0 2
18244: NOT
18245: IFFALSE 18249
// exit ;
18247: GO 18392
// for i := 1 to 2 do
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: DOUBLE
18255: LD_INT 1
18257: DEC
18258: ST_TO_ADDR
18259: LD_INT 2
18261: PUSH
18262: FOR_TO
18263: IFFALSE 18390
// begin uc_side := your_side ;
18265: LD_ADDR_OWVAR 20
18269: PUSH
18270: LD_OWVAR 2
18274: ST_TO_ADDR
// uc_nation := nation_american ;
18275: LD_ADDR_OWVAR 21
18279: PUSH
18280: LD_INT 1
18282: ST_TO_ADDR
// vc_chassis := us_morphling ;
18283: LD_ADDR_OWVAR 37
18287: PUSH
18288: LD_INT 5
18290: ST_TO_ADDR
// vc_engine := engine_siberite ;
18291: LD_ADDR_OWVAR 39
18295: PUSH
18296: LD_INT 3
18298: ST_TO_ADDR
// vc_control := control_computer ;
18299: LD_ADDR_OWVAR 38
18303: PUSH
18304: LD_INT 3
18306: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18307: LD_ADDR_OWVAR 40
18311: PUSH
18312: LD_INT 10
18314: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18315: LD_VAR 0 2
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PPUSH
18324: CALL_OW 310
18328: NOT
18329: IFFALSE 18376
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18331: CALL_OW 45
18335: PPUSH
18336: LD_VAR 0 2
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL_OW 250
18349: PPUSH
18350: LD_VAR 0 2
18354: PUSH
18355: LD_INT 1
18357: ARRAY
18358: PPUSH
18359: CALL_OW 251
18363: PPUSH
18364: LD_INT 12
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 50
18374: GO 18388
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18376: CALL_OW 45
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL_OW 51
// end ;
18388: GO 18262
18390: POP
18391: POP
// end ;
18392: PPOPN 2
18394: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18395: LD_EXP 19
18399: PUSH
18400: LD_EXP 65
18404: AND
18405: IFFALSE 18627
18407: GO 18409
18409: DISABLE
18410: LD_INT 0
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18418: LD_ADDR_VAR 0 6
18422: PUSH
18423: LD_INT 22
18425: PUSH
18426: LD_OWVAR 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 21
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: LD_INT 23
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 6
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18627
// s1 := rand ( 1 , 4 ) ;
18481: LD_ADDR_VAR 0 2
18485: PUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 4
18491: PPUSH
18492: CALL_OW 12
18496: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18497: LD_ADDR_VAR 0 4
18501: PUSH
18502: LD_VAR 0 6
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: PPUSH
18511: LD_VAR 0 2
18515: PPUSH
18516: CALL_OW 259
18520: ST_TO_ADDR
// if s1 = 1 then
18521: LD_VAR 0 2
18525: PUSH
18526: LD_INT 1
18528: EQUAL
18529: IFFALSE 18549
// s2 := rand ( 2 , 4 ) else
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_INT 2
18538: PPUSH
18539: LD_INT 4
18541: PPUSH
18542: CALL_OW 12
18546: ST_TO_ADDR
18547: GO 18557
// s2 := 1 ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 1
18556: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18557: LD_ADDR_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_INT 1
18569: ARRAY
18570: PPUSH
18571: LD_VAR 0 3
18575: PPUSH
18576: CALL_OW 259
18580: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18581: LD_VAR 0 6
18585: PUSH
18586: LD_INT 1
18588: ARRAY
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_VAR 0 5
18599: PPUSH
18600: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18604: LD_VAR 0 6
18608: PUSH
18609: LD_INT 1
18611: ARRAY
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: LD_VAR 0 4
18622: PPUSH
18623: CALL_OW 237
// end ;
18627: PPOPN 6
18629: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18630: LD_EXP 19
18634: PUSH
18635: LD_EXP 66
18639: AND
18640: IFFALSE 18719
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_OWVAR 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 30
18667: PUSH
18668: LD_INT 3
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 12
18710: ARRAY
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 234
// end ;
18719: PPOPN 1
18721: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18722: LD_EXP 19
18726: PUSH
18727: LD_EXP 67
18731: AND
18732: IFFALSE 18844
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18741: LD_ADDR_VAR 0 2
18745: PUSH
18746: LD_INT 22
18748: PUSH
18749: LD_OWVAR 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 30
18763: PUSH
18764: LD_INT 27
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 30
18773: PUSH
18774: LD_INT 26
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 30
18783: PUSH
18784: LD_INT 28
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: ST_TO_ADDR
// if not tmp then
18806: LD_VAR 0 2
18810: NOT
18811: IFFALSE 18815
// exit ;
18813: GO 18844
// for i in tmp do
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_VAR 0 2
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18842
// SetLives ( i , 1 ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: CALL_OW 234
18840: GO 18825
18842: POP
18843: POP
// end ;
18844: PPOPN 2
18846: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18847: LD_EXP 19
18851: PUSH
18852: LD_EXP 68
18856: AND
18857: IFFALSE 19144
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
// begin i := rand ( 1 , 7 ) ;
18867: LD_ADDR_VAR 0 1
18871: PUSH
18872: LD_INT 1
18874: PPUSH
18875: LD_INT 7
18877: PPUSH
18878: CALL_OW 12
18882: ST_TO_ADDR
// case i of 1 :
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 1
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18906
18896: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18897: LD_STRING earthquake(getX(game), 0, 32)
18899: PPUSH
18900: CALL_OW 559
18904: GO 19144
18906: LD_INT 2
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18928
18914: POP
// begin ToLua ( displayStucuk(); ) ;
18915: LD_STRING displayStucuk();
18917: PPUSH
18918: CALL_OW 559
// ResetFog ;
18922: CALL_OW 335
// end ; 3 :
18926: GO 19144
18928: LD_INT 3
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19040
18936: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_OWVAR 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 25
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 69
18972: ST_TO_ADDR
// if not tmp then
18973: LD_VAR 0 2
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 19144
// un := tmp [ rand ( 1 , tmp ) ] ;
18982: LD_ADDR_VAR 0 3
18986: PUSH
18987: LD_VAR 0 2
18991: PUSH
18992: LD_INT 1
18994: PPUSH
18995: LD_VAR 0 2
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: ST_TO_ADDR
// if Crawls ( un ) then
19006: LD_VAR 0 3
19010: PPUSH
19011: CALL_OW 318
19015: IFFALSE 19026
// ComWalk ( un ) ;
19017: LD_VAR 0 3
19021: PPUSH
19022: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19026: LD_VAR 0 3
19030: PPUSH
19031: LD_INT 8
19033: PPUSH
19034: CALL_OW 336
// end ; 4 :
19038: GO 19144
19040: LD_INT 4
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19122
19048: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 29
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: ST_TO_ADDR
// if not tmp then
19085: LD_VAR 0 2
19089: NOT
19090: IFFALSE 19094
// exit ;
19092: GO 19144
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19094: LD_VAR 0 2
19098: PUSH
19099: LD_INT 1
19101: ARRAY
19102: PPUSH
19103: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19107: LD_VAR 0 2
19111: PUSH
19112: LD_INT 1
19114: ARRAY
19115: PPUSH
19116: CALL_OW 65
// end ; 5 .. 7 :
19120: GO 19144
19122: LD_INT 5
19124: DOUBLE
19125: GREATEREQUAL
19126: IFFALSE 19134
19128: LD_INT 7
19130: DOUBLE
19131: LESSEQUAL
19132: IFTRUE 19136
19134: GO 19143
19136: POP
// StreamSibBomb ; end ;
19137: CALL 15381 0 0
19141: GO 19144
19143: POP
// end ;
19144: PPOPN 3
19146: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19147: LD_EXP 19
19151: PUSH
19152: LD_EXP 69
19156: AND
19157: IFFALSE 19313
19159: GO 19161
19161: DISABLE
19162: LD_INT 0
19164: PPUSH
19165: PPUSH
19166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19167: LD_ADDR_VAR 0 2
19171: PUSH
19172: LD_INT 81
19174: PUSH
19175: LD_OWVAR 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 21
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: ST_TO_ADDR
// if not tmp then
19221: LD_VAR 0 2
19225: NOT
19226: IFFALSE 19230
// exit ;
19228: GO 19313
// p := 0 ;
19230: LD_ADDR_VAR 0 3
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19238: LD_INT 35
19240: PPUSH
19241: CALL_OW 67
// p := p + 1 ;
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 1
19257: PLUS
19258: ST_TO_ADDR
// for i in tmp do
19259: LD_ADDR_VAR 0 1
19263: PUSH
19264: LD_VAR 0 2
19268: PUSH
19269: FOR_IN
19270: IFFALSE 19301
// if GetLives ( i ) < 1000 then
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL_OW 256
19281: PUSH
19282: LD_INT 1000
19284: LESS
19285: IFFALSE 19299
// SetLives ( i , 1000 ) ;
19287: LD_VAR 0 1
19291: PPUSH
19292: LD_INT 1000
19294: PPUSH
19295: CALL_OW 234
19299: GO 19269
19301: POP
19302: POP
// until p > 20 ;
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 20
19310: GREATER
19311: IFFALSE 19238
// end ;
19313: PPOPN 3
19315: END
// every 0 0$1 trigger StreamModeActive and sTime do
19316: LD_EXP 19
19320: PUSH
19321: LD_EXP 70
19325: AND
19326: IFFALSE 19361
19328: GO 19330
19330: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19331: LD_INT 28
19333: PPUSH
19334: LD_OWVAR 2
19338: PPUSH
19339: LD_INT 2
19341: PPUSH
19342: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19346: LD_INT 30
19348: PPUSH
19349: LD_OWVAR 2
19353: PPUSH
19354: LD_INT 2
19356: PPUSH
19357: CALL_OW 322
// end ;
19361: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19362: LD_EXP 19
19366: PUSH
19367: LD_EXP 71
19371: AND
19372: IFFALSE 19493
19374: GO 19376
19376: DISABLE
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 23
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: ST_TO_ADDR
// if not tmp then
19435: LD_VAR 0 2
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19493
// for i in tmp do
19444: LD_ADDR_VAR 0 1
19448: PUSH
19449: LD_VAR 0 2
19453: PUSH
19454: FOR_IN
19455: IFFALSE 19491
// begin if Crawls ( i ) then
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 318
19466: IFFALSE 19477
// ComWalk ( i ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 138
// SetClass ( i , 2 ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_INT 2
19484: PPUSH
19485: CALL_OW 336
// end ;
19489: GO 19454
19491: POP
19492: POP
// end ;
19493: PPOPN 2
19495: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19496: LD_EXP 19
19500: PUSH
19501: LD_EXP 72
19505: AND
19506: IFFALSE 19794
19508: GO 19510
19510: DISABLE
19511: LD_INT 0
19513: PPUSH
19514: PPUSH
19515: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19516: LD_OWVAR 2
19520: PPUSH
19521: LD_INT 9
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19534: LD_INT 9
19536: PPUSH
19537: LD_OWVAR 2
19541: PPUSH
19542: CALL_OW 343
// uc_side := 9 ;
19546: LD_ADDR_OWVAR 20
19550: PUSH
19551: LD_INT 9
19553: ST_TO_ADDR
// uc_nation := 2 ;
19554: LD_ADDR_OWVAR 21
19558: PUSH
19559: LD_INT 2
19561: ST_TO_ADDR
// hc_name := Dark Warrior ;
19562: LD_ADDR_OWVAR 26
19566: PUSH
19567: LD_STRING Dark Warrior
19569: ST_TO_ADDR
// hc_gallery :=  ;
19570: LD_ADDR_OWVAR 33
19574: PUSH
19575: LD_STRING 
19577: ST_TO_ADDR
// hc_noskilllimit := true ;
19578: LD_ADDR_OWVAR 76
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19586: LD_ADDR_OWVAR 31
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: ST_TO_ADDR
// un := CreateHuman ;
19609: LD_ADDR_VAR 0 3
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// hc_noskilllimit := false ;
19619: LD_ADDR_OWVAR 76
19623: PUSH
19624: LD_INT 0
19626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19627: LD_VAR 0 3
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: CALL_OW 51
// ToLua ( playRanger() ) ;
19639: LD_STRING playRanger()
19641: PPUSH
19642: CALL_OW 559
// p := 0 ;
19646: LD_ADDR_VAR 0 2
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19654: LD_INT 35
19656: PPUSH
19657: CALL_OW 67
// p := p + 1 ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_VAR 0 2
19670: PUSH
19671: LD_INT 1
19673: PLUS
19674: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19675: LD_VAR 0 3
19679: PPUSH
19680: CALL_OW 256
19684: PUSH
19685: LD_INT 1000
19687: LESS
19688: IFFALSE 19702
// SetLives ( un , 1000 ) ;
19690: LD_VAR 0 3
19694: PPUSH
19695: LD_INT 1000
19697: PPUSH
19698: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19702: LD_VAR 0 3
19706: PPUSH
19707: LD_INT 81
19709: PUSH
19710: LD_OWVAR 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 91
19721: PUSH
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 30
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PPUSH
19739: CALL_OW 69
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 74
19753: PPUSH
19754: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19758: LD_VAR 0 2
19762: PUSH
19763: LD_INT 80
19765: GREATER
19766: PUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: CALL_OW 301
19776: OR
19777: IFFALSE 19654
// if un then
19779: LD_VAR 0 3
19783: IFFALSE 19794
// RemoveUnit ( un ) ;
19785: LD_VAR 0 3
19789: PPUSH
19790: CALL_OW 64
// end ;
19794: PPOPN 3
19796: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19797: LD_EXP 73
19801: IFFALSE 19917
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
19809: PPUSH
19810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_INT 81
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 21
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19847: LD_STRING playComputer()
19849: PPUSH
19850: CALL_OW 559
// if not tmp then
19854: LD_VAR 0 2
19858: NOT
19859: IFFALSE 19863
// exit ;
19861: GO 19917
// for i in tmp do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: LD_VAR 0 2
19872: PUSH
19873: FOR_IN
19874: IFFALSE 19915
// for j := 1 to 4 do
19876: LD_ADDR_VAR 0 3
19880: PUSH
19881: DOUBLE
19882: LD_INT 1
19884: DEC
19885: ST_TO_ADDR
19886: LD_INT 4
19888: PUSH
19889: FOR_TO
19890: IFFALSE 19911
// SetSkill ( i , j , 10 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: LD_INT 10
19904: PPUSH
19905: CALL_OW 237
19909: GO 19889
19911: POP
19912: POP
19913: GO 19873
19915: POP
19916: POP
// end ;
19917: PPOPN 3
19919: END
// every 0 0$1 trigger s30 do var i , tmp ;
19920: LD_EXP 74
19924: IFFALSE 19993
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_OWVAR 2
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: ST_TO_ADDR
// if not tmp then
19955: LD_VAR 0 2
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 19993
// for i in tmp do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_VAR 0 2
19973: PUSH
19974: FOR_IN
19975: IFFALSE 19991
// SetLives ( i , 300 ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: LD_INT 300
19984: PPUSH
19985: CALL_OW 234
19989: GO 19974
19991: POP
19992: POP
// end ;
19993: PPOPN 2
19995: END
// every 0 0$1 trigger s60 do var i , tmp ;
19996: LD_EXP 75
20000: IFFALSE 20069
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 2
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20069
// for i in tmp do
20040: LD_ADDR_VAR 0 1
20044: PUSH
20045: LD_VAR 0 2
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20067
// SetLives ( i , 600 ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: LD_INT 600
20060: PPUSH
20061: CALL_OW 234
20065: GO 20050
20067: POP
20068: POP
// end ;
20069: PPOPN 2
20071: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20072: LD_INT 0
20074: PPUSH
// case cmd of 301 :
20075: LD_VAR 0 1
20079: PUSH
20080: LD_INT 301
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20120
20088: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20089: LD_VAR 0 6
20093: PPUSH
20094: LD_VAR 0 7
20098: PPUSH
20099: LD_VAR 0 8
20103: PPUSH
20104: LD_VAR 0 4
20108: PPUSH
20109: LD_VAR 0 5
20113: PPUSH
20114: CALL 21321 0 5
20118: GO 20241
20120: LD_INT 302
20122: DOUBLE
20123: EQUAL
20124: IFTRUE 20128
20126: GO 20165
20128: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20129: LD_VAR 0 6
20133: PPUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: LD_VAR 0 8
20143: PPUSH
20144: LD_VAR 0 9
20148: PPUSH
20149: LD_VAR 0 4
20153: PPUSH
20154: LD_VAR 0 5
20158: PPUSH
20159: CALL 21412 0 6
20163: GO 20241
20165: LD_INT 303
20167: DOUBLE
20168: EQUAL
20169: IFTRUE 20173
20171: GO 20210
20173: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20174: LD_VAR 0 6
20178: PPUSH
20179: LD_VAR 0 7
20183: PPUSH
20184: LD_VAR 0 8
20188: PPUSH
20189: LD_VAR 0 9
20193: PPUSH
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL 20246 0 6
20208: GO 20241
20210: LD_INT 304
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20240
20218: POP
// hHackTeleport ( unit , x , y ) ; end ;
20219: LD_VAR 0 2
20223: PPUSH
20224: LD_VAR 0 4
20228: PPUSH
20229: LD_VAR 0 5
20233: PPUSH
20234: CALL 22005 0 3
20238: GO 20241
20240: POP
// end ;
20241: LD_VAR 0 12
20245: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 1
20257: LESS
20258: PUSH
20259: LD_VAR 0 1
20263: PUSH
20264: LD_INT 3
20266: GREATER
20267: OR
20268: PUSH
20269: LD_VAR 0 5
20273: PPUSH
20274: LD_VAR 0 6
20278: PPUSH
20279: CALL_OW 428
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 21008
// uc_side := your_side ;
20288: LD_ADDR_OWVAR 20
20292: PUSH
20293: LD_OWVAR 2
20297: ST_TO_ADDR
// uc_nation := nation ;
20298: LD_ADDR_OWVAR 21
20302: PUSH
20303: LD_VAR 0 1
20307: ST_TO_ADDR
// bc_level = 1 ;
20308: LD_ADDR_OWVAR 43
20312: PUSH
20313: LD_INT 1
20315: ST_TO_ADDR
// case btype of 1 :
20316: LD_VAR 0 2
20320: PUSH
20321: LD_INT 1
20323: DOUBLE
20324: EQUAL
20325: IFTRUE 20329
20327: GO 20340
20329: POP
// bc_type := b_depot ; 2 :
20330: LD_ADDR_OWVAR 42
20334: PUSH
20335: LD_INT 0
20337: ST_TO_ADDR
20338: GO 20952
20340: LD_INT 2
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20359
20348: POP
// bc_type := b_warehouse ; 3 :
20349: LD_ADDR_OWVAR 42
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
20357: GO 20952
20359: LD_INT 3
20361: DOUBLE
20362: EQUAL
20363: IFTRUE 20367
20365: GO 20378
20367: POP
// bc_type := b_lab ; 4 .. 9 :
20368: LD_ADDR_OWVAR 42
20372: PUSH
20373: LD_INT 6
20375: ST_TO_ADDR
20376: GO 20952
20378: LD_INT 4
20380: DOUBLE
20381: GREATEREQUAL
20382: IFFALSE 20390
20384: LD_INT 9
20386: DOUBLE
20387: LESSEQUAL
20388: IFTRUE 20392
20390: GO 20444
20392: POP
// begin bc_type := b_lab_half ;
20393: LD_ADDR_OWVAR 42
20397: PUSH
20398: LD_INT 7
20400: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20401: LD_ADDR_OWVAR 44
20405: PUSH
20406: LD_INT 10
20408: PUSH
20409: LD_INT 11
20411: PUSH
20412: LD_INT 12
20414: PUSH
20415: LD_INT 15
20417: PUSH
20418: LD_INT 14
20420: PUSH
20421: LD_INT 13
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: LD_VAR 0 2
20436: PUSH
20437: LD_INT 3
20439: MINUS
20440: ARRAY
20441: ST_TO_ADDR
// end ; 10 .. 13 :
20442: GO 20952
20444: LD_INT 10
20446: DOUBLE
20447: GREATEREQUAL
20448: IFFALSE 20456
20450: LD_INT 13
20452: DOUBLE
20453: LESSEQUAL
20454: IFTRUE 20458
20456: GO 20535
20458: POP
// begin bc_type := b_lab_full ;
20459: LD_ADDR_OWVAR 42
20463: PUSH
20464: LD_INT 8
20466: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20467: LD_ADDR_OWVAR 44
20471: PUSH
20472: LD_INT 10
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 14
20480: PUSH
20481: LD_INT 13
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: LD_VAR 0 2
20494: PUSH
20495: LD_INT 9
20497: MINUS
20498: ARRAY
20499: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20500: LD_ADDR_OWVAR 45
20504: PUSH
20505: LD_INT 11
20507: PUSH
20508: LD_INT 15
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: LD_INT 15
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: PUSH
20523: LD_VAR 0 2
20527: PUSH
20528: LD_INT 9
20530: MINUS
20531: ARRAY
20532: ST_TO_ADDR
// end ; 14 :
20533: GO 20952
20535: LD_INT 14
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20554
20543: POP
// bc_type := b_workshop ; 15 :
20544: LD_ADDR_OWVAR 42
20548: PUSH
20549: LD_INT 2
20551: ST_TO_ADDR
20552: GO 20952
20554: LD_INT 15
20556: DOUBLE
20557: EQUAL
20558: IFTRUE 20562
20560: GO 20573
20562: POP
// bc_type := b_factory ; 16 :
20563: LD_ADDR_OWVAR 42
20567: PUSH
20568: LD_INT 3
20570: ST_TO_ADDR
20571: GO 20952
20573: LD_INT 16
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20592
20581: POP
// bc_type := b_ext_gun ; 17 :
20582: LD_ADDR_OWVAR 42
20586: PUSH
20587: LD_INT 17
20589: ST_TO_ADDR
20590: GO 20952
20592: LD_INT 17
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20628
20600: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20601: LD_ADDR_OWVAR 42
20605: PUSH
20606: LD_INT 19
20608: PUSH
20609: LD_INT 23
20611: PUSH
20612: LD_INT 19
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: PUSH
20620: LD_VAR 0 1
20624: ARRAY
20625: ST_TO_ADDR
20626: GO 20952
20628: LD_INT 18
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_ext_radar ; 19 :
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 20
20644: ST_TO_ADDR
20645: GO 20952
20647: LD_INT 19
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20666
20655: POP
// bc_type := b_ext_radio ; 20 :
20656: LD_ADDR_OWVAR 42
20660: PUSH
20661: LD_INT 22
20663: ST_TO_ADDR
20664: GO 20952
20666: LD_INT 20
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20685
20674: POP
// bc_type := b_ext_siberium ; 21 :
20675: LD_ADDR_OWVAR 42
20679: PUSH
20680: LD_INT 21
20682: ST_TO_ADDR
20683: GO 20952
20685: LD_INT 21
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20704
20693: POP
// bc_type := b_ext_computer ; 22 :
20694: LD_ADDR_OWVAR 42
20698: PUSH
20699: LD_INT 24
20701: ST_TO_ADDR
20702: GO 20952
20704: LD_INT 22
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20723
20712: POP
// bc_type := b_ext_track ; 23 :
20713: LD_ADDR_OWVAR 42
20717: PUSH
20718: LD_INT 16
20720: ST_TO_ADDR
20721: GO 20952
20723: LD_INT 23
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20742
20731: POP
// bc_type := b_ext_laser ; 24 :
20732: LD_ADDR_OWVAR 42
20736: PUSH
20737: LD_INT 25
20739: ST_TO_ADDR
20740: GO 20952
20742: LD_INT 24
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20761
20750: POP
// bc_type := b_control_tower ; 25 :
20751: LD_ADDR_OWVAR 42
20755: PUSH
20756: LD_INT 36
20758: ST_TO_ADDR
20759: GO 20952
20761: LD_INT 25
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20769
20767: GO 20780
20769: POP
// bc_type := b_breastwork ; 26 :
20770: LD_ADDR_OWVAR 42
20774: PUSH
20775: LD_INT 31
20777: ST_TO_ADDR
20778: GO 20952
20780: LD_INT 26
20782: DOUBLE
20783: EQUAL
20784: IFTRUE 20788
20786: GO 20799
20788: POP
// bc_type := b_bunker ; 27 :
20789: LD_ADDR_OWVAR 42
20793: PUSH
20794: LD_INT 32
20796: ST_TO_ADDR
20797: GO 20952
20799: LD_INT 27
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20818
20807: POP
// bc_type := b_turret ; 28 :
20808: LD_ADDR_OWVAR 42
20812: PUSH
20813: LD_INT 33
20815: ST_TO_ADDR
20816: GO 20952
20818: LD_INT 28
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 20837
20826: POP
// bc_type := b_armoury ; 29 :
20827: LD_ADDR_OWVAR 42
20831: PUSH
20832: LD_INT 4
20834: ST_TO_ADDR
20835: GO 20952
20837: LD_INT 29
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20856
20845: POP
// bc_type := b_barracks ; 30 :
20846: LD_ADDR_OWVAR 42
20850: PUSH
20851: LD_INT 5
20853: ST_TO_ADDR
20854: GO 20952
20856: LD_INT 30
20858: DOUBLE
20859: EQUAL
20860: IFTRUE 20864
20862: GO 20875
20864: POP
// bc_type := b_solar_power ; 31 :
20865: LD_ADDR_OWVAR 42
20869: PUSH
20870: LD_INT 27
20872: ST_TO_ADDR
20873: GO 20952
20875: LD_INT 31
20877: DOUBLE
20878: EQUAL
20879: IFTRUE 20883
20881: GO 20894
20883: POP
// bc_type := b_oil_power ; 32 :
20884: LD_ADDR_OWVAR 42
20888: PUSH
20889: LD_INT 26
20891: ST_TO_ADDR
20892: GO 20952
20894: LD_INT 32
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20913
20902: POP
// bc_type := b_siberite_power ; 33 :
20903: LD_ADDR_OWVAR 42
20907: PUSH
20908: LD_INT 28
20910: ST_TO_ADDR
20911: GO 20952
20913: LD_INT 33
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20932
20921: POP
// bc_type := b_oil_mine ; 34 :
20922: LD_ADDR_OWVAR 42
20926: PUSH
20927: LD_INT 29
20929: ST_TO_ADDR
20930: GO 20952
20932: LD_INT 34
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20951
20940: POP
// bc_type := b_siberite_mine ; end ;
20941: LD_ADDR_OWVAR 42
20945: PUSH
20946: LD_INT 30
20948: ST_TO_ADDR
20949: GO 20952
20951: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: LD_VAR 0 5
20961: PPUSH
20962: LD_VAR 0 6
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: CALL_OW 47
20976: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20977: LD_OWVAR 42
20981: PUSH
20982: LD_INT 32
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: IN
20992: IFFALSE 21008
// PlaceWeaponTurret ( b , weapon ) ;
20994: LD_VAR 0 8
20998: PPUSH
20999: LD_VAR 0 4
21003: PPUSH
21004: CALL_OW 431
// end ;
21008: LD_VAR 0 7
21012: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21019: LD_ADDR_VAR 0 4
21023: PUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 30
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PPUSH
21068: CALL_OW 69
21072: ST_TO_ADDR
// if not tmp then
21073: LD_VAR 0 4
21077: NOT
21078: IFFALSE 21082
// exit ;
21080: GO 21141
// for i in tmp do
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_VAR 0 4
21091: PUSH
21092: FOR_IN
21093: IFFALSE 21139
// for j = 1 to 3 do
21095: LD_ADDR_VAR 0 3
21099: PUSH
21100: DOUBLE
21101: LD_INT 1
21103: DEC
21104: ST_TO_ADDR
21105: LD_INT 3
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21135
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21111: LD_VAR 0 2
21115: PPUSH
21116: CALL_OW 274
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: LD_INT 99999
21128: PPUSH
21129: CALL_OW 277
21133: GO 21108
21135: POP
21136: POP
21137: GO 21092
21139: POP
21140: POP
// end ;
21141: LD_VAR 0 1
21145: RET
// export function hHackSetLevel10 ; var i , j ; begin
21146: LD_INT 0
21148: PPUSH
21149: PPUSH
21150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21151: LD_ADDR_VAR 0 2
21155: PUSH
21156: LD_INT 21
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21224
// if IsSelected ( i ) then
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 306
21183: IFFALSE 21222
// begin for j := 1 to 4 do
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: DOUBLE
21191: LD_INT 1
21193: DEC
21194: ST_TO_ADDR
21195: LD_INT 4
21197: PUSH
21198: FOR_TO
21199: IFFALSE 21220
// SetSkill ( i , j , 10 ) ;
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: LD_INT 10
21213: PPUSH
21214: CALL_OW 237
21218: GO 21198
21220: POP
21221: POP
// end ;
21222: GO 21171
21224: POP
21225: POP
// end ;
21226: LD_VAR 0 1
21230: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21231: LD_INT 0
21233: PPUSH
21234: PPUSH
21235: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_OWVAR 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 21
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: PUSH
21272: FOR_IN
21273: IFFALSE 21314
// begin for j := 1 to 4 do
21275: LD_ADDR_VAR 0 3
21279: PUSH
21280: DOUBLE
21281: LD_INT 1
21283: DEC
21284: ST_TO_ADDR
21285: LD_INT 4
21287: PUSH
21288: FOR_TO
21289: IFFALSE 21310
// SetSkill ( i , j , 10 ) ;
21291: LD_VAR 0 2
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_INT 10
21303: PPUSH
21304: CALL_OW 237
21308: GO 21288
21310: POP
21311: POP
// end ;
21312: GO 21272
21314: POP
21315: POP
// end ;
21316: LD_VAR 0 1
21320: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21321: LD_INT 0
21323: PPUSH
// uc_side := your_side ;
21324: LD_ADDR_OWVAR 20
21328: PUSH
21329: LD_OWVAR 2
21333: ST_TO_ADDR
// uc_nation := nation ;
21334: LD_ADDR_OWVAR 21
21338: PUSH
21339: LD_VAR 0 1
21343: ST_TO_ADDR
// InitHc ;
21344: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21348: LD_INT 0
21350: PPUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21365: LD_VAR 0 4
21369: PPUSH
21370: LD_VAR 0 5
21374: PPUSH
21375: CALL_OW 428
21379: PUSH
21380: LD_INT 0
21382: EQUAL
21383: IFFALSE 21407
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21385: CALL_OW 44
21389: PPUSH
21390: LD_VAR 0 4
21394: PPUSH
21395: LD_VAR 0 5
21399: PPUSH
21400: LD_INT 1
21402: PPUSH
21403: CALL_OW 48
// end ;
21407: LD_VAR 0 6
21411: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21412: LD_INT 0
21414: PPUSH
21415: PPUSH
// uc_side := your_side ;
21416: LD_ADDR_OWVAR 20
21420: PUSH
21421: LD_OWVAR 2
21425: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21426: LD_VAR 0 1
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: LD_INT 4
21442: PUSH
21443: LD_INT 5
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: IN
21453: IFFALSE 21465
// uc_nation := nation_american else
21455: LD_ADDR_OWVAR 21
21459: PUSH
21460: LD_INT 1
21462: ST_TO_ADDR
21463: GO 21508
// if chassis in [ 11 , 12 , 13 , 14 ] then
21465: LD_VAR 0 1
21469: PUSH
21470: LD_INT 11
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: LD_INT 13
21478: PUSH
21479: LD_INT 14
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: IN
21488: IFFALSE 21500
// uc_nation := nation_arabian else
21490: LD_ADDR_OWVAR 21
21494: PUSH
21495: LD_INT 2
21497: ST_TO_ADDR
21498: GO 21508
// uc_nation := nation_russian ;
21500: LD_ADDR_OWVAR 21
21504: PUSH
21505: LD_INT 3
21507: ST_TO_ADDR
// vc_chassis := chassis ;
21508: LD_ADDR_OWVAR 37
21512: PUSH
21513: LD_VAR 0 1
21517: ST_TO_ADDR
// vc_engine := engine ;
21518: LD_ADDR_OWVAR 39
21522: PUSH
21523: LD_VAR 0 2
21527: ST_TO_ADDR
// vc_control := control ;
21528: LD_ADDR_OWVAR 38
21532: PUSH
21533: LD_VAR 0 3
21537: ST_TO_ADDR
// vc_weapon := weapon ;
21538: LD_ADDR_OWVAR 40
21542: PUSH
21543: LD_VAR 0 4
21547: ST_TO_ADDR
// un := CreateVehicle ;
21548: LD_ADDR_VAR 0 8
21552: PUSH
21553: CALL_OW 45
21557: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21558: LD_VAR 0 8
21562: PPUSH
21563: LD_INT 0
21565: PPUSH
21566: LD_INT 5
21568: PPUSH
21569: CALL_OW 12
21573: PPUSH
21574: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21578: LD_VAR 0 8
21582: PPUSH
21583: LD_VAR 0 5
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL_OW 48
// end ;
21600: LD_VAR 0 7
21604: RET
// export hInvincible ; every 1 do
21605: GO 21607
21607: DISABLE
// hInvincible := [ ] ;
21608: LD_ADDR_EXP 76
21612: PUSH
21613: EMPTY
21614: ST_TO_ADDR
21615: END
// every 10 do var i ;
21616: GO 21618
21618: DISABLE
21619: LD_INT 0
21621: PPUSH
// begin enable ;
21622: ENABLE
// if not hInvincible then
21623: LD_EXP 76
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21676
// for i in hInvincible do
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_EXP 76
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21674
// if GetLives ( i ) < 1000 then
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 256
21654: PUSH
21655: LD_INT 1000
21657: LESS
21658: IFFALSE 21672
// SetLives ( i , 1000 ) ;
21660: LD_VAR 0 1
21664: PPUSH
21665: LD_INT 1000
21667: PPUSH
21668: CALL_OW 234
21672: GO 21642
21674: POP
21675: POP
// end ;
21676: PPOPN 1
21678: END
// export function hHackInvincible ; var i ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21683: LD_ADDR_VAR 0 2
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: LD_INT 21
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 21
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: PUSH
21721: FOR_IN
21722: IFFALSE 21783
// if IsSelected ( i ) then
21724: LD_VAR 0 2
21728: PPUSH
21729: CALL_OW 306
21733: IFFALSE 21781
// begin if i in hInvincible then
21735: LD_VAR 0 2
21739: PUSH
21740: LD_EXP 76
21744: IN
21745: IFFALSE 21765
// hInvincible := hInvincible diff i else
21747: LD_ADDR_EXP 76
21751: PUSH
21752: LD_EXP 76
21756: PUSH
21757: LD_VAR 0 2
21761: DIFF
21762: ST_TO_ADDR
21763: GO 21781
// hInvincible := hInvincible union i ;
21765: LD_ADDR_EXP 76
21769: PUSH
21770: LD_EXP 76
21774: PUSH
21775: LD_VAR 0 2
21779: UNION
21780: ST_TO_ADDR
// end ;
21781: GO 21721
21783: POP
21784: POP
// end ;
21785: LD_VAR 0 1
21789: RET
// export function hHackInvisible ; var i , j ; begin
21790: LD_INT 0
21792: PPUSH
21793: PPUSH
21794: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21795: LD_ADDR_VAR 0 2
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: PUSH
21815: FOR_IN
21816: IFFALSE 21840
// if IsSelected ( i ) then
21818: LD_VAR 0 2
21822: PPUSH
21823: CALL_OW 306
21827: IFFALSE 21838
// ComForceInvisible ( i ) ;
21829: LD_VAR 0 2
21833: PPUSH
21834: CALL_OW 496
21838: GO 21815
21840: POP
21841: POP
// end ;
21842: LD_VAR 0 1
21846: RET
// export function hHackChangeYourSide ; begin
21847: LD_INT 0
21849: PPUSH
// if your_side = 8 then
21850: LD_OWVAR 2
21854: PUSH
21855: LD_INT 8
21857: EQUAL
21858: IFFALSE 21870
// your_side := 0 else
21860: LD_ADDR_OWVAR 2
21864: PUSH
21865: LD_INT 0
21867: ST_TO_ADDR
21868: GO 21884
// your_side := your_side + 1 ;
21870: LD_ADDR_OWVAR 2
21874: PUSH
21875: LD_OWVAR 2
21879: PUSH
21880: LD_INT 1
21882: PLUS
21883: ST_TO_ADDR
// end ;
21884: LD_VAR 0 1
21888: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// for i in all_units do
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_OWVAR 3
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21983
// if IsSelected ( i ) then
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 306
21916: IFFALSE 21981
// begin j := GetSide ( i ) ;
21918: LD_ADDR_VAR 0 3
21922: PUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: CALL_OW 255
21932: ST_TO_ADDR
// if j = 8 then
21933: LD_VAR 0 3
21937: PUSH
21938: LD_INT 8
21940: EQUAL
21941: IFFALSE 21953
// j := 0 else
21943: LD_ADDR_VAR 0 3
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
21951: GO 21967
// j := j + 1 ;
21953: LD_ADDR_VAR 0 3
21957: PUSH
21958: LD_VAR 0 3
21962: PUSH
21963: LD_INT 1
21965: PLUS
21966: ST_TO_ADDR
// SetSide ( i , j ) ;
21967: LD_VAR 0 2
21971: PPUSH
21972: LD_VAR 0 3
21976: PPUSH
21977: CALL_OW 235
// end ;
21981: GO 21904
21983: POP
21984: POP
// end ;
21985: LD_VAR 0 1
21989: RET
// export function hHackFog ; begin
21990: LD_INT 0
21992: PPUSH
// FogOff ( true ) ;
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 344
// end ;
22000: LD_VAR 0 1
22004: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22005: LD_INT 0
22007: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_VAR 0 2
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: CALL_OW 483
// CenterOnXY ( x , y ) ;
22033: LD_VAR 0 2
22037: PPUSH
22038: LD_VAR 0 3
22042: PPUSH
22043: CALL_OW 84
// end ;
22047: LD_VAR 0 4
22051: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22052: LD_INT 0
22054: PPUSH
22055: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22056: LD_VAR 0 1
22060: NOT
22061: PUSH
22062: LD_VAR 0 2
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: CALL_OW 488
22076: NOT
22077: OR
22078: PUSH
22079: LD_VAR 0 1
22083: PPUSH
22084: CALL_OW 266
22088: PUSH
22089: LD_INT 3
22091: NONEQUAL
22092: PUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 247
22102: PUSH
22103: LD_INT 1
22105: EQUAL
22106: NOT
22107: AND
22108: OR
22109: IFFALSE 22113
// exit ;
22111: GO 22262
// if GetType ( factory ) = unit_human then
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 247
22122: PUSH
22123: LD_INT 1
22125: EQUAL
22126: IFFALSE 22143
// factory := IsInUnit ( factory ) ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 310
22142: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22143: LD_VAR 0 1
22147: PPUSH
22148: CALL_OW 266
22152: PUSH
22153: LD_INT 3
22155: NONEQUAL
22156: IFFALSE 22160
// exit ;
22158: GO 22262
// if HexInfo ( x , y ) = factory then
22160: LD_VAR 0 2
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: CALL_OW 428
22174: PUSH
22175: LD_VAR 0 1
22179: EQUAL
22180: IFFALSE 22207
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22182: LD_ADDR_EXP 77
22186: PUSH
22187: LD_EXP 77
22191: PPUSH
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_INT 0
22199: PPUSH
22200: CALL_OW 1
22204: ST_TO_ADDR
22205: GO 22258
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22207: LD_ADDR_EXP 77
22211: PUSH
22212: LD_EXP 77
22216: PPUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 255
22231: PUSH
22232: LD_VAR 0 1
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_VAR 0 3
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: PPUSH
22253: CALL_OW 1
22257: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22258: CALL 22267 0 0
// end ;
22262: LD_VAR 0 4
22266: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22272: LD_STRING resetFactoryWaypoint();
22274: PPUSH
22275: CALL_OW 559
// if factoryWaypoints then
22279: LD_EXP 77
22283: IFFALSE 22409
// begin list := PrepareArray ( factoryWaypoints ) ;
22285: LD_ADDR_VAR 0 3
22289: PUSH
22290: LD_EXP 77
22294: PPUSH
22295: CALL 64497 0 1
22299: ST_TO_ADDR
// for i := 1 to list do
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: DOUBLE
22306: LD_INT 1
22308: DEC
22309: ST_TO_ADDR
22310: LD_VAR 0 3
22314: PUSH
22315: FOR_TO
22316: IFFALSE 22407
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22318: LD_STRING setFactoryWaypointXY(
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_VAR 0 2
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: STR
22336: PUSH
22337: LD_STRING ,
22339: STR
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: LD_VAR 0 2
22350: ARRAY
22351: PUSH
22352: LD_INT 2
22354: ARRAY
22355: STR
22356: PUSH
22357: LD_STRING ,
22359: STR
22360: PUSH
22361: LD_VAR 0 3
22365: PUSH
22366: LD_VAR 0 2
22370: ARRAY
22371: PUSH
22372: LD_INT 3
22374: ARRAY
22375: STR
22376: PUSH
22377: LD_STRING ,
22379: STR
22380: PUSH
22381: LD_VAR 0 3
22385: PUSH
22386: LD_VAR 0 2
22390: ARRAY
22391: PUSH
22392: LD_INT 4
22394: ARRAY
22395: STR
22396: PUSH
22397: LD_STRING )
22399: STR
22400: PPUSH
22401: CALL_OW 559
22405: GO 22315
22407: POP
22408: POP
// end ; end ;
22409: LD_VAR 0 1
22413: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22414: LD_INT 0
22416: PPUSH
// if HexInfo ( x , y ) = warehouse then
22417: LD_VAR 0 2
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: CALL_OW 428
22431: PUSH
22432: LD_VAR 0 1
22436: EQUAL
22437: IFFALSE 22464
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22439: LD_ADDR_EXP 78
22443: PUSH
22444: LD_EXP 78
22448: PPUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 0
22456: PPUSH
22457: CALL_OW 1
22461: ST_TO_ADDR
22462: GO 22515
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22464: LD_ADDR_EXP 78
22468: PUSH
22469: LD_EXP 78
22473: PPUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 255
22488: PUSH
22489: LD_VAR 0 1
22493: PUSH
22494: LD_VAR 0 2
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL_OW 1
22514: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22515: CALL 22524 0 0
// end ;
22519: LD_VAR 0 4
22523: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22529: LD_STRING resetWarehouseGatheringPoints();
22531: PPUSH
22532: CALL_OW 559
// if warehouseGatheringPoints then
22536: LD_EXP 78
22540: IFFALSE 22666
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_EXP 78
22551: PPUSH
22552: CALL 64497 0 1
22556: ST_TO_ADDR
// for i := 1 to list do
22557: LD_ADDR_VAR 0 2
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_VAR 0 3
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22664
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22575: LD_STRING setWarehouseGatheringPointXY(
22577: PUSH
22578: LD_VAR 0 3
22582: PUSH
22583: LD_VAR 0 2
22587: ARRAY
22588: PUSH
22589: LD_INT 1
22591: ARRAY
22592: STR
22593: PUSH
22594: LD_STRING ,
22596: STR
22597: PUSH
22598: LD_VAR 0 3
22602: PUSH
22603: LD_VAR 0 2
22607: ARRAY
22608: PUSH
22609: LD_INT 2
22611: ARRAY
22612: STR
22613: PUSH
22614: LD_STRING ,
22616: STR
22617: PUSH
22618: LD_VAR 0 3
22622: PUSH
22623: LD_VAR 0 2
22627: ARRAY
22628: PUSH
22629: LD_INT 3
22631: ARRAY
22632: STR
22633: PUSH
22634: LD_STRING ,
22636: STR
22637: PUSH
22638: LD_VAR 0 3
22642: PUSH
22643: LD_VAR 0 2
22647: ARRAY
22648: PUSH
22649: LD_INT 4
22651: ARRAY
22652: STR
22653: PUSH
22654: LD_STRING )
22656: STR
22657: PPUSH
22658: CALL_OW 559
22662: GO 22572
22664: POP
22665: POP
// end ; end ;
22666: LD_VAR 0 1
22670: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22671: LD_EXP 78
22675: IFFALSE 23360
22677: GO 22679
22679: DISABLE
22680: LD_INT 0
22682: PPUSH
22683: PPUSH
22684: PPUSH
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
// begin enable ;
22691: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22692: LD_ADDR_VAR 0 3
22696: PUSH
22697: LD_EXP 78
22701: PPUSH
22702: CALL 64497 0 1
22706: ST_TO_ADDR
// if not list then
22707: LD_VAR 0 3
22711: NOT
22712: IFFALSE 22716
// exit ;
22714: GO 23360
// for i := 1 to list do
22716: LD_ADDR_VAR 0 1
22720: PUSH
22721: DOUBLE
22722: LD_INT 1
22724: DEC
22725: ST_TO_ADDR
22726: LD_VAR 0 3
22730: PUSH
22731: FOR_TO
22732: IFFALSE 23358
// begin depot := list [ i ] [ 2 ] ;
22734: LD_ADDR_VAR 0 8
22738: PUSH
22739: LD_VAR 0 3
22743: PUSH
22744: LD_VAR 0 1
22748: ARRAY
22749: PUSH
22750: LD_INT 2
22752: ARRAY
22753: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22754: LD_ADDR_VAR 0 5
22758: PUSH
22759: LD_VAR 0 3
22763: PUSH
22764: LD_VAR 0 1
22768: ARRAY
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22774: LD_VAR 0 8
22778: PPUSH
22779: CALL_OW 301
22783: PUSH
22784: LD_VAR 0 5
22788: PUSH
22789: LD_VAR 0 8
22793: PPUSH
22794: CALL_OW 255
22798: NONEQUAL
22799: OR
22800: IFFALSE 22829
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22802: LD_ADDR_EXP 78
22806: PUSH
22807: LD_EXP 78
22811: PPUSH
22812: LD_VAR 0 8
22816: PPUSH
22817: LD_INT 0
22819: PPUSH
22820: CALL_OW 1
22824: ST_TO_ADDR
// exit ;
22825: POP
22826: POP
22827: GO 23360
// end ; x := list [ i ] [ 3 ] ;
22829: LD_ADDR_VAR 0 6
22833: PUSH
22834: LD_VAR 0 3
22838: PUSH
22839: LD_VAR 0 1
22843: ARRAY
22844: PUSH
22845: LD_INT 3
22847: ARRAY
22848: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22849: LD_ADDR_VAR 0 7
22853: PUSH
22854: LD_VAR 0 3
22858: PUSH
22859: LD_VAR 0 1
22863: ARRAY
22864: PUSH
22865: LD_INT 4
22867: ARRAY
22868: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22869: LD_ADDR_VAR 0 9
22873: PUSH
22874: LD_VAR 0 6
22878: PPUSH
22879: LD_VAR 0 7
22883: PPUSH
22884: LD_INT 16
22886: PPUSH
22887: CALL 63085 0 3
22891: ST_TO_ADDR
// if not cratesNearbyPoint then
22892: LD_VAR 0 9
22896: NOT
22897: IFFALSE 22903
// exit ;
22899: POP
22900: POP
22901: GO 23360
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22903: LD_ADDR_VAR 0 4
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_VAR 0 5
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 3
22922: PUSH
22923: LD_INT 60
22925: PUSH
22926: EMPTY
22927: LIST
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 91
22935: PUSH
22936: LD_VAR 0 8
22940: PUSH
22941: LD_INT 6
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 25
22964: PUSH
22965: LD_INT 16
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: PUSH
22988: LD_VAR 0 8
22992: PPUSH
22993: CALL_OW 313
22997: PPUSH
22998: LD_INT 3
23000: PUSH
23001: LD_INT 60
23003: PUSH
23004: EMPTY
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 25
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 25
23026: PUSH
23027: LD_INT 16
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL_OW 72
23047: UNION
23048: ST_TO_ADDR
// if tmp then
23049: LD_VAR 0 4
23053: IFFALSE 23133
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23055: LD_ADDR_VAR 0 4
23059: PUSH
23060: LD_VAR 0 4
23064: PPUSH
23065: LD_INT 3
23067: PPUSH
23068: CALL 61054 0 2
23072: ST_TO_ADDR
// for j in tmp do
23073: LD_ADDR_VAR 0 2
23077: PUSH
23078: LD_VAR 0 4
23082: PUSH
23083: FOR_IN
23084: IFFALSE 23127
// begin if IsInUnit ( j ) then
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 310
23095: IFFALSE 23106
// ComExit ( j ) ;
23097: LD_VAR 0 2
23101: PPUSH
23102: CALL 61137 0 1
// AddComCollect ( j , x , y ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 6
23115: PPUSH
23116: LD_VAR 0 7
23120: PPUSH
23121: CALL_OW 177
// end ;
23125: GO 23083
23127: POP
23128: POP
// exit ;
23129: POP
23130: POP
23131: GO 23360
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23133: LD_ADDR_VAR 0 4
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: LD_VAR 0 5
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 91
23152: PUSH
23153: LD_VAR 0 8
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 34
23171: PUSH
23172: LD_INT 12
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 34
23181: PUSH
23182: LD_INT 51
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 34
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 34
23201: PUSH
23202: LD_INT 89
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if tmp then
23226: LD_VAR 0 4
23230: IFFALSE 23356
// begin for j in tmp do
23232: LD_ADDR_VAR 0 2
23236: PUSH
23237: LD_VAR 0 4
23241: PUSH
23242: FOR_IN
23243: IFFALSE 23354
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23245: LD_VAR 0 2
23249: PPUSH
23250: CALL_OW 262
23254: PUSH
23255: LD_INT 3
23257: EQUAL
23258: PUSH
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL_OW 261
23268: PUSH
23269: LD_INT 20
23271: GREATER
23272: OR
23273: PUSH
23274: LD_VAR 0 2
23278: PPUSH
23279: CALL_OW 314
23283: NOT
23284: AND
23285: PUSH
23286: LD_VAR 0 2
23290: PPUSH
23291: CALL_OW 263
23295: PUSH
23296: LD_INT 1
23298: NONEQUAL
23299: PUSH
23300: LD_VAR 0 2
23304: PPUSH
23305: CALL_OW 311
23309: OR
23310: AND
23311: IFFALSE 23352
// begin ComCollect ( j , x , y ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_VAR 0 6
23322: PPUSH
23323: LD_VAR 0 7
23327: PPUSH
23328: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23332: LD_VAR 0 2
23336: PPUSH
23337: LD_VAR 0 8
23341: PPUSH
23342: CALL_OW 172
// exit ;
23346: POP
23347: POP
23348: POP
23349: POP
23350: GO 23360
// end ;
23352: GO 23242
23354: POP
23355: POP
// end ; end ;
23356: GO 22731
23358: POP
23359: POP
// end ; end_of_file
23360: PPOPN 9
23362: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23363: LD_INT 0
23365: PPUSH
23366: PPUSH
// if exist_mode then
23367: LD_VAR 0 2
23371: IFFALSE 23396
// unit := CreateCharacter ( prefix & ident ) else
23373: LD_ADDR_VAR 0 5
23377: PUSH
23378: LD_VAR 0 3
23382: PUSH
23383: LD_VAR 0 1
23387: STR
23388: PPUSH
23389: CALL_OW 34
23393: ST_TO_ADDR
23394: GO 23411
// unit := NewCharacter ( ident ) ;
23396: LD_ADDR_VAR 0 5
23400: PUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 25
23410: ST_TO_ADDR
// result := unit ;
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_VAR 0 5
23420: ST_TO_ADDR
// end ;
23421: LD_VAR 0 4
23425: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23426: LD_INT 0
23428: PPUSH
23429: PPUSH
// if not side or not nation then
23430: LD_VAR 0 1
23434: NOT
23435: PUSH
23436: LD_VAR 0 2
23440: NOT
23441: OR
23442: IFFALSE 23446
// exit ;
23444: GO 24214
// case nation of nation_american :
23446: LD_VAR 0 2
23450: PUSH
23451: LD_INT 1
23453: DOUBLE
23454: EQUAL
23455: IFTRUE 23459
23457: GO 23673
23459: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23460: LD_ADDR_VAR 0 4
23464: PUSH
23465: LD_INT 35
23467: PUSH
23468: LD_INT 45
23470: PUSH
23471: LD_INT 46
23473: PUSH
23474: LD_INT 47
23476: PUSH
23477: LD_INT 82
23479: PUSH
23480: LD_INT 83
23482: PUSH
23483: LD_INT 84
23485: PUSH
23486: LD_INT 85
23488: PUSH
23489: LD_INT 86
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 6
23500: PUSH
23501: LD_INT 15
23503: PUSH
23504: LD_INT 16
23506: PUSH
23507: LD_INT 7
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 13
23515: PUSH
23516: LD_INT 10
23518: PUSH
23519: LD_INT 14
23521: PUSH
23522: LD_INT 20
23524: PUSH
23525: LD_INT 21
23527: PUSH
23528: LD_INT 22
23530: PUSH
23531: LD_INT 25
23533: PUSH
23534: LD_INT 32
23536: PUSH
23537: LD_INT 27
23539: PUSH
23540: LD_INT 36
23542: PUSH
23543: LD_INT 69
23545: PUSH
23546: LD_INT 39
23548: PUSH
23549: LD_INT 34
23551: PUSH
23552: LD_INT 40
23554: PUSH
23555: LD_INT 48
23557: PUSH
23558: LD_INT 49
23560: PUSH
23561: LD_INT 50
23563: PUSH
23564: LD_INT 51
23566: PUSH
23567: LD_INT 52
23569: PUSH
23570: LD_INT 53
23572: PUSH
23573: LD_INT 54
23575: PUSH
23576: LD_INT 55
23578: PUSH
23579: LD_INT 56
23581: PUSH
23582: LD_INT 57
23584: PUSH
23585: LD_INT 58
23587: PUSH
23588: LD_INT 59
23590: PUSH
23591: LD_INT 60
23593: PUSH
23594: LD_INT 61
23596: PUSH
23597: LD_INT 62
23599: PUSH
23600: LD_INT 80
23602: PUSH
23603: LD_INT 82
23605: PUSH
23606: LD_INT 83
23608: PUSH
23609: LD_INT 84
23611: PUSH
23612: LD_INT 85
23614: PUSH
23615: LD_INT 86
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: ST_TO_ADDR
23671: GO 24138
23673: LD_INT 2
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23907
23681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23682: LD_ADDR_VAR 0 4
23686: PUSH
23687: LD_INT 35
23689: PUSH
23690: LD_INT 45
23692: PUSH
23693: LD_INT 46
23695: PUSH
23696: LD_INT 47
23698: PUSH
23699: LD_INT 82
23701: PUSH
23702: LD_INT 83
23704: PUSH
23705: LD_INT 84
23707: PUSH
23708: LD_INT 85
23710: PUSH
23711: LD_INT 87
23713: PUSH
23714: LD_INT 70
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 11
23722: PUSH
23723: LD_INT 3
23725: PUSH
23726: LD_INT 4
23728: PUSH
23729: LD_INT 5
23731: PUSH
23732: LD_INT 6
23734: PUSH
23735: LD_INT 15
23737: PUSH
23738: LD_INT 18
23740: PUSH
23741: LD_INT 7
23743: PUSH
23744: LD_INT 17
23746: PUSH
23747: LD_INT 8
23749: PUSH
23750: LD_INT 20
23752: PUSH
23753: LD_INT 21
23755: PUSH
23756: LD_INT 22
23758: PUSH
23759: LD_INT 72
23761: PUSH
23762: LD_INT 26
23764: PUSH
23765: LD_INT 69
23767: PUSH
23768: LD_INT 39
23770: PUSH
23771: LD_INT 40
23773: PUSH
23774: LD_INT 41
23776: PUSH
23777: LD_INT 42
23779: PUSH
23780: LD_INT 43
23782: PUSH
23783: LD_INT 48
23785: PUSH
23786: LD_INT 49
23788: PUSH
23789: LD_INT 50
23791: PUSH
23792: LD_INT 51
23794: PUSH
23795: LD_INT 52
23797: PUSH
23798: LD_INT 53
23800: PUSH
23801: LD_INT 54
23803: PUSH
23804: LD_INT 55
23806: PUSH
23807: LD_INT 56
23809: PUSH
23810: LD_INT 60
23812: PUSH
23813: LD_INT 61
23815: PUSH
23816: LD_INT 62
23818: PUSH
23819: LD_INT 66
23821: PUSH
23822: LD_INT 67
23824: PUSH
23825: LD_INT 68
23827: PUSH
23828: LD_INT 81
23830: PUSH
23831: LD_INT 82
23833: PUSH
23834: LD_INT 83
23836: PUSH
23837: LD_INT 84
23839: PUSH
23840: LD_INT 85
23842: PUSH
23843: LD_INT 87
23845: PUSH
23846: LD_INT 88
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: ST_TO_ADDR
23905: GO 24138
23907: LD_INT 3
23909: DOUBLE
23910: EQUAL
23911: IFTRUE 23915
23913: GO 24137
23915: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_INT 46
23923: PUSH
23924: LD_INT 47
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 2
23932: PUSH
23933: LD_INT 82
23935: PUSH
23936: LD_INT 83
23938: PUSH
23939: LD_INT 84
23941: PUSH
23942: LD_INT 85
23944: PUSH
23945: LD_INT 86
23947: PUSH
23948: LD_INT 11
23950: PUSH
23951: LD_INT 9
23953: PUSH
23954: LD_INT 20
23956: PUSH
23957: LD_INT 19
23959: PUSH
23960: LD_INT 21
23962: PUSH
23963: LD_INT 24
23965: PUSH
23966: LD_INT 22
23968: PUSH
23969: LD_INT 25
23971: PUSH
23972: LD_INT 28
23974: PUSH
23975: LD_INT 29
23977: PUSH
23978: LD_INT 30
23980: PUSH
23981: LD_INT 31
23983: PUSH
23984: LD_INT 37
23986: PUSH
23987: LD_INT 38
23989: PUSH
23990: LD_INT 32
23992: PUSH
23993: LD_INT 27
23995: PUSH
23996: LD_INT 33
23998: PUSH
23999: LD_INT 69
24001: PUSH
24002: LD_INT 39
24004: PUSH
24005: LD_INT 34
24007: PUSH
24008: LD_INT 40
24010: PUSH
24011: LD_INT 71
24013: PUSH
24014: LD_INT 23
24016: PUSH
24017: LD_INT 44
24019: PUSH
24020: LD_INT 48
24022: PUSH
24023: LD_INT 49
24025: PUSH
24026: LD_INT 50
24028: PUSH
24029: LD_INT 51
24031: PUSH
24032: LD_INT 52
24034: PUSH
24035: LD_INT 53
24037: PUSH
24038: LD_INT 54
24040: PUSH
24041: LD_INT 55
24043: PUSH
24044: LD_INT 56
24046: PUSH
24047: LD_INT 57
24049: PUSH
24050: LD_INT 58
24052: PUSH
24053: LD_INT 59
24055: PUSH
24056: LD_INT 63
24058: PUSH
24059: LD_INT 64
24061: PUSH
24062: LD_INT 65
24064: PUSH
24065: LD_INT 82
24067: PUSH
24068: LD_INT 83
24070: PUSH
24071: LD_INT 84
24073: PUSH
24074: LD_INT 85
24076: PUSH
24077: LD_INT 86
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: ST_TO_ADDR
24135: GO 24138
24137: POP
// if state > - 1 and state < 3 then
24138: LD_VAR 0 3
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: GREATER
24147: PUSH
24148: LD_VAR 0 3
24152: PUSH
24153: LD_INT 3
24155: LESS
24156: AND
24157: IFFALSE 24214
// for i in result do
24159: LD_ADDR_VAR 0 5
24163: PUSH
24164: LD_VAR 0 4
24168: PUSH
24169: FOR_IN
24170: IFFALSE 24212
// if GetTech ( i , side ) <> state then
24172: LD_VAR 0 5
24176: PPUSH
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 321
24186: PUSH
24187: LD_VAR 0 3
24191: NONEQUAL
24192: IFFALSE 24210
// result := result diff i ;
24194: LD_ADDR_VAR 0 4
24198: PUSH
24199: LD_VAR 0 4
24203: PUSH
24204: LD_VAR 0 5
24208: DIFF
24209: ST_TO_ADDR
24210: GO 24169
24212: POP
24213: POP
// end ;
24214: LD_VAR 0 4
24218: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24219: LD_INT 0
24221: PPUSH
24222: PPUSH
24223: PPUSH
// result := true ;
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_INT 1
24231: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24232: LD_ADDR_VAR 0 5
24236: PUSH
24237: LD_VAR 0 2
24241: PPUSH
24242: CALL_OW 480
24246: ST_TO_ADDR
// if not tmp then
24247: LD_VAR 0 5
24251: NOT
24252: IFFALSE 24256
// exit ;
24254: GO 24305
// for i in tmp do
24256: LD_ADDR_VAR 0 4
24260: PUSH
24261: LD_VAR 0 5
24265: PUSH
24266: FOR_IN
24267: IFFALSE 24303
// if GetTech ( i , side ) <> state_researched then
24269: LD_VAR 0 4
24273: PPUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 321
24283: PUSH
24284: LD_INT 2
24286: NONEQUAL
24287: IFFALSE 24301
// begin result := false ;
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 0
24296: ST_TO_ADDR
// exit ;
24297: POP
24298: POP
24299: GO 24305
// end ;
24301: GO 24266
24303: POP
24304: POP
// end ;
24305: LD_VAR 0 3
24309: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24310: LD_INT 0
24312: PPUSH
24313: PPUSH
24314: PPUSH
24315: PPUSH
24316: PPUSH
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24325: LD_VAR 0 1
24329: NOT
24330: PUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 257
24340: PUSH
24341: LD_INT 9
24343: NONEQUAL
24344: OR
24345: IFFALSE 24349
// exit ;
24347: GO 24922
// side := GetSide ( unit ) ;
24349: LD_ADDR_VAR 0 9
24353: PUSH
24354: LD_VAR 0 1
24358: PPUSH
24359: CALL_OW 255
24363: ST_TO_ADDR
// tech_space := tech_spacanom ;
24364: LD_ADDR_VAR 0 12
24368: PUSH
24369: LD_INT 29
24371: ST_TO_ADDR
// tech_time := tech_taurad ;
24372: LD_ADDR_VAR 0 13
24376: PUSH
24377: LD_INT 28
24379: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24380: LD_ADDR_VAR 0 11
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: CALL_OW 310
24394: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24395: LD_VAR 0 11
24399: PPUSH
24400: CALL_OW 247
24404: PUSH
24405: LD_INT 2
24407: EQUAL
24408: IFFALSE 24412
// exit ;
24410: GO 24922
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24412: LD_ADDR_VAR 0 8
24416: PUSH
24417: LD_INT 81
24419: PUSH
24420: LD_VAR 0 9
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 3
24431: PUSH
24432: LD_INT 21
24434: PUSH
24435: LD_INT 3
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PPUSH
24450: CALL_OW 69
24454: ST_TO_ADDR
// if not tmp then
24455: LD_VAR 0 8
24459: NOT
24460: IFFALSE 24464
// exit ;
24462: GO 24922
// if in_unit then
24464: LD_VAR 0 11
24468: IFFALSE 24492
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24470: LD_ADDR_VAR 0 10
24474: PUSH
24475: LD_VAR 0 8
24479: PPUSH
24480: LD_VAR 0 11
24484: PPUSH
24485: CALL_OW 74
24489: ST_TO_ADDR
24490: GO 24512
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24492: LD_ADDR_VAR 0 10
24496: PUSH
24497: LD_VAR 0 8
24501: PPUSH
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 74
24511: ST_TO_ADDR
// if not enemy then
24512: LD_VAR 0 10
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24922
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24521: LD_VAR 0 11
24525: PUSH
24526: LD_VAR 0 11
24530: PPUSH
24531: LD_VAR 0 10
24535: PPUSH
24536: CALL_OW 296
24540: PUSH
24541: LD_INT 13
24543: GREATER
24544: AND
24545: PUSH
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_VAR 0 10
24555: PPUSH
24556: CALL_OW 296
24560: PUSH
24561: LD_INT 12
24563: GREATER
24564: OR
24565: IFFALSE 24569
// exit ;
24567: GO 24922
// missile := [ 1 ] ;
24569: LD_ADDR_VAR 0 14
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: EMPTY
24578: LIST
24579: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24580: LD_VAR 0 9
24584: PPUSH
24585: LD_VAR 0 12
24589: PPUSH
24590: CALL_OW 325
24594: IFFALSE 24623
// missile := Replace ( missile , missile + 1 , 2 ) ;
24596: LD_ADDR_VAR 0 14
24600: PUSH
24601: LD_VAR 0 14
24605: PPUSH
24606: LD_VAR 0 14
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PPUSH
24615: LD_INT 2
24617: PPUSH
24618: CALL_OW 1
24622: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24623: LD_VAR 0 9
24627: PPUSH
24628: LD_VAR 0 13
24632: PPUSH
24633: CALL_OW 325
24637: PUSH
24638: LD_VAR 0 10
24642: PPUSH
24643: CALL_OW 255
24647: PPUSH
24648: LD_VAR 0 13
24652: PPUSH
24653: CALL_OW 325
24657: NOT
24658: AND
24659: IFFALSE 24688
// missile := Replace ( missile , missile + 1 , 3 ) ;
24661: LD_ADDR_VAR 0 14
24665: PUSH
24666: LD_VAR 0 14
24670: PPUSH
24671: LD_VAR 0 14
24675: PUSH
24676: LD_INT 1
24678: PLUS
24679: PPUSH
24680: LD_INT 3
24682: PPUSH
24683: CALL_OW 1
24687: ST_TO_ADDR
// if missile < 2 then
24688: LD_VAR 0 14
24692: PUSH
24693: LD_INT 2
24695: LESS
24696: IFFALSE 24700
// exit ;
24698: GO 24922
// x := GetX ( enemy ) ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_VAR 0 10
24709: PPUSH
24710: CALL_OW 250
24714: ST_TO_ADDR
// y := GetY ( enemy ) ;
24715: LD_ADDR_VAR 0 5
24719: PUSH
24720: LD_VAR 0 10
24724: PPUSH
24725: CALL_OW 251
24729: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24730: LD_ADDR_VAR 0 6
24734: PUSH
24735: LD_VAR 0 4
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PPUSH
24744: LD_INT 1
24746: PPUSH
24747: CALL_OW 12
24751: PLUS
24752: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24753: LD_ADDR_VAR 0 7
24757: PUSH
24758: LD_VAR 0 5
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PPUSH
24767: LD_INT 1
24769: PPUSH
24770: CALL_OW 12
24774: PLUS
24775: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24776: LD_VAR 0 6
24780: PPUSH
24781: LD_VAR 0 7
24785: PPUSH
24786: CALL_OW 488
24790: NOT
24791: IFFALSE 24813
// begin _x := x ;
24793: LD_ADDR_VAR 0 6
24797: PUSH
24798: LD_VAR 0 4
24802: ST_TO_ADDR
// _y := y ;
24803: LD_ADDR_VAR 0 7
24807: PUSH
24808: LD_VAR 0 5
24812: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24813: LD_ADDR_VAR 0 3
24817: PUSH
24818: LD_INT 1
24820: PPUSH
24821: LD_VAR 0 14
24825: PPUSH
24826: CALL_OW 12
24830: ST_TO_ADDR
// case i of 1 :
24831: LD_VAR 0 3
24835: PUSH
24836: LD_INT 1
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24861
24844: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24845: LD_VAR 0 1
24849: PPUSH
24850: LD_VAR 0 10
24854: PPUSH
24855: CALL_OW 115
24859: GO 24922
24861: LD_INT 2
24863: DOUBLE
24864: EQUAL
24865: IFTRUE 24869
24867: GO 24891
24869: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24870: LD_VAR 0 1
24874: PPUSH
24875: LD_VAR 0 6
24879: PPUSH
24880: LD_VAR 0 7
24884: PPUSH
24885: CALL_OW 153
24889: GO 24922
24891: LD_INT 3
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24899
24897: GO 24921
24899: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24900: LD_VAR 0 1
24904: PPUSH
24905: LD_VAR 0 6
24909: PPUSH
24910: LD_VAR 0 7
24914: PPUSH
24915: CALL_OW 154
24919: GO 24922
24921: POP
// end ;
24922: LD_VAR 0 2
24926: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
// if not unit or not building then
24935: LD_VAR 0 1
24939: NOT
24940: PUSH
24941: LD_VAR 0 2
24945: NOT
24946: OR
24947: IFFALSE 24951
// exit ;
24949: GO 25109
// x := GetX ( building ) ;
24951: LD_ADDR_VAR 0 5
24955: PUSH
24956: LD_VAR 0 2
24960: PPUSH
24961: CALL_OW 250
24965: ST_TO_ADDR
// y := GetY ( building ) ;
24966: LD_ADDR_VAR 0 6
24970: PUSH
24971: LD_VAR 0 2
24975: PPUSH
24976: CALL_OW 251
24980: ST_TO_ADDR
// for i = 0 to 5 do
24981: LD_ADDR_VAR 0 4
24985: PUSH
24986: DOUBLE
24987: LD_INT 0
24989: DEC
24990: ST_TO_ADDR
24991: LD_INT 5
24993: PUSH
24994: FOR_TO
24995: IFFALSE 25107
// begin _x := ShiftX ( x , i , 3 ) ;
24997: LD_ADDR_VAR 0 7
25001: PUSH
25002: LD_VAR 0 5
25006: PPUSH
25007: LD_VAR 0 4
25011: PPUSH
25012: LD_INT 3
25014: PPUSH
25015: CALL_OW 272
25019: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25020: LD_ADDR_VAR 0 8
25024: PUSH
25025: LD_VAR 0 6
25029: PPUSH
25030: LD_VAR 0 4
25034: PPUSH
25035: LD_INT 3
25037: PPUSH
25038: CALL_OW 273
25042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25043: LD_VAR 0 7
25047: PPUSH
25048: LD_VAR 0 8
25052: PPUSH
25053: CALL_OW 488
25057: NOT
25058: IFFALSE 25062
// continue ;
25060: GO 24994
// if HexInfo ( _x , _y ) = 0 then
25062: LD_VAR 0 7
25066: PPUSH
25067: LD_VAR 0 8
25071: PPUSH
25072: CALL_OW 428
25076: PUSH
25077: LD_INT 0
25079: EQUAL
25080: IFFALSE 25105
// begin ComMoveXY ( unit , _x , _y ) ;
25082: LD_VAR 0 1
25086: PPUSH
25087: LD_VAR 0 7
25091: PPUSH
25092: LD_VAR 0 8
25096: PPUSH
25097: CALL_OW 111
// exit ;
25101: POP
25102: POP
25103: GO 25109
// end ; end ;
25105: GO 24994
25107: POP
25108: POP
// end ;
25109: LD_VAR 0 3
25113: RET
// export function ScanBase ( side , base_area ) ; begin
25114: LD_INT 0
25116: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25117: LD_ADDR_VAR 0 3
25121: PUSH
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_INT 81
25129: PUSH
25130: LD_VAR 0 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PPUSH
25139: CALL_OW 70
25143: ST_TO_ADDR
// end ;
25144: LD_VAR 0 3
25148: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25149: LD_INT 0
25151: PPUSH
25152: PPUSH
25153: PPUSH
25154: PPUSH
// result := false ;
25155: LD_ADDR_VAR 0 2
25159: PUSH
25160: LD_INT 0
25162: ST_TO_ADDR
// side := GetSide ( unit ) ;
25163: LD_ADDR_VAR 0 3
25167: PUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 255
25177: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25178: LD_ADDR_VAR 0 4
25182: PUSH
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL_OW 248
25192: ST_TO_ADDR
// case nat of 1 :
25193: LD_VAR 0 4
25197: PUSH
25198: LD_INT 1
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25217
25206: POP
// tech := tech_lassight ; 2 :
25207: LD_ADDR_VAR 0 5
25211: PUSH
25212: LD_INT 12
25214: ST_TO_ADDR
25215: GO 25256
25217: LD_INT 2
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 25236
25225: POP
// tech := tech_mortar ; 3 :
25226: LD_ADDR_VAR 0 5
25230: PUSH
25231: LD_INT 41
25233: ST_TO_ADDR
25234: GO 25256
25236: LD_INT 3
25238: DOUBLE
25239: EQUAL
25240: IFTRUE 25244
25242: GO 25255
25244: POP
// tech := tech_bazooka ; end ;
25245: LD_ADDR_VAR 0 5
25249: PUSH
25250: LD_INT 44
25252: ST_TO_ADDR
25253: GO 25256
25255: POP
// if Researched ( side , tech ) then
25256: LD_VAR 0 3
25260: PPUSH
25261: LD_VAR 0 5
25265: PPUSH
25266: CALL_OW 325
25270: IFFALSE 25297
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25272: LD_ADDR_VAR 0 2
25276: PUSH
25277: LD_INT 5
25279: PUSH
25280: LD_INT 8
25282: PUSH
25283: LD_INT 9
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: PUSH
25291: LD_VAR 0 4
25295: ARRAY
25296: ST_TO_ADDR
// end ;
25297: LD_VAR 0 2
25301: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25302: LD_INT 0
25304: PPUSH
25305: PPUSH
25306: PPUSH
// if not mines then
25307: LD_VAR 0 2
25311: NOT
25312: IFFALSE 25316
// exit ;
25314: GO 25460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25316: LD_ADDR_VAR 0 5
25320: PUSH
25321: LD_INT 81
25323: PUSH
25324: LD_VAR 0 1
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: LD_INT 21
25338: PUSH
25339: LD_INT 3
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 69
25358: ST_TO_ADDR
// for i in mines do
25359: LD_ADDR_VAR 0 4
25363: PUSH
25364: LD_VAR 0 2
25368: PUSH
25369: FOR_IN
25370: IFFALSE 25458
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25372: LD_VAR 0 4
25376: PUSH
25377: LD_INT 1
25379: ARRAY
25380: PPUSH
25381: LD_VAR 0 4
25385: PUSH
25386: LD_INT 2
25388: ARRAY
25389: PPUSH
25390: CALL_OW 458
25394: NOT
25395: IFFALSE 25399
// continue ;
25397: GO 25369
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25399: LD_VAR 0 4
25403: PUSH
25404: LD_INT 1
25406: ARRAY
25407: PPUSH
25408: LD_VAR 0 4
25412: PUSH
25413: LD_INT 2
25415: ARRAY
25416: PPUSH
25417: CALL_OW 428
25421: PUSH
25422: LD_VAR 0 5
25426: IN
25427: IFFALSE 25456
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25429: LD_VAR 0 4
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PPUSH
25438: LD_VAR 0 4
25442: PUSH
25443: LD_INT 2
25445: ARRAY
25446: PPUSH
25447: LD_VAR 0 1
25451: PPUSH
25452: CALL_OW 456
// end ;
25456: GO 25369
25458: POP
25459: POP
// end ;
25460: LD_VAR 0 3
25464: RET
// export function Count ( array ) ; var i ; begin
25465: LD_INT 0
25467: PPUSH
25468: PPUSH
// result := 0 ;
25469: LD_ADDR_VAR 0 2
25473: PUSH
25474: LD_INT 0
25476: ST_TO_ADDR
// for i in array do
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_VAR 0 1
25486: PUSH
25487: FOR_IN
25488: IFFALSE 25512
// if i then
25490: LD_VAR 0 3
25494: IFFALSE 25510
// result := result + 1 ;
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_VAR 0 2
25505: PUSH
25506: LD_INT 1
25508: PLUS
25509: ST_TO_ADDR
25510: GO 25487
25512: POP
25513: POP
// end ;
25514: LD_VAR 0 2
25518: RET
// export function IsEmpty ( building ) ; begin
25519: LD_INT 0
25521: PPUSH
// if not building then
25522: LD_VAR 0 1
25526: NOT
25527: IFFALSE 25531
// exit ;
25529: GO 25574
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25531: LD_ADDR_VAR 0 2
25535: PUSH
25536: LD_VAR 0 1
25540: PUSH
25541: LD_INT 22
25543: PUSH
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 255
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 58
25560: PUSH
25561: EMPTY
25562: LIST
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 69
25572: IN
25573: ST_TO_ADDR
// end ;
25574: LD_VAR 0 2
25578: RET
// export function IsNotFull ( building ) ; var places ; begin
25579: LD_INT 0
25581: PPUSH
25582: PPUSH
// if not building then
25583: LD_VAR 0 1
25587: NOT
25588: IFFALSE 25592
// exit ;
25590: GO 25763
// result := false ;
25592: LD_ADDR_VAR 0 2
25596: PUSH
25597: LD_INT 0
25599: ST_TO_ADDR
// places := 0 ;
25600: LD_ADDR_VAR 0 3
25604: PUSH
25605: LD_INT 0
25607: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 266
25617: PUSH
25618: LD_INT 0
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25680
25624: LD_INT 1
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25680
25630: LD_INT 6
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25680
25636: LD_INT 7
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25680
25642: LD_INT 8
25644: DOUBLE
25645: EQUAL
25646: IFTRUE 25680
25648: LD_INT 4
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25680
25654: LD_INT 5
25656: DOUBLE
25657: EQUAL
25658: IFTRUE 25680
25660: LD_INT 2
25662: DOUBLE
25663: EQUAL
25664: IFTRUE 25680
25666: LD_INT 3
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25680
25672: LD_INT 35
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25691
25680: POP
// places := 6 ; b_bunker , b_breastwork :
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 6
25688: ST_TO_ADDR
25689: GO 25736
25691: LD_INT 32
25693: DOUBLE
25694: EQUAL
25695: IFTRUE 25705
25697: LD_INT 31
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25716
25705: POP
// places := 1 ; b_control_tower :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 1
25713: ST_TO_ADDR
25714: GO 25736
25716: LD_INT 36
25718: DOUBLE
25719: EQUAL
25720: IFTRUE 25724
25722: GO 25735
25724: POP
// places := 3 ; end ;
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: LD_INT 3
25732: ST_TO_ADDR
25733: GO 25736
25735: POP
// if places then
25736: LD_VAR 0 3
25740: IFFALSE 25763
// result := UnitsInside ( building ) < places ;
25742: LD_ADDR_VAR 0 2
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 313
25756: PUSH
25757: LD_VAR 0 3
25761: LESS
25762: ST_TO_ADDR
// end ;
25763: LD_VAR 0 2
25767: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
// tmp := [ ] ;
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: EMPTY
25780: ST_TO_ADDR
// list := [ ] ;
25781: LD_ADDR_VAR 0 5
25785: PUSH
25786: EMPTY
25787: ST_TO_ADDR
// for i = 16 to 25 do
25788: LD_ADDR_VAR 0 4
25792: PUSH
25793: DOUBLE
25794: LD_INT 16
25796: DEC
25797: ST_TO_ADDR
25798: LD_INT 25
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25875
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_VAR 0 3
25813: PUSH
25814: LD_INT 22
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 255
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 91
25833: PUSH
25834: LD_VAR 0 1
25838: PUSH
25839: LD_INT 6
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 30
25849: PUSH
25850: LD_VAR 0 4
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: ADD
25872: ST_TO_ADDR
25873: GO 25801
25875: POP
25876: POP
// for i = 1 to tmp do
25877: LD_ADDR_VAR 0 4
25881: PUSH
25882: DOUBLE
25883: LD_INT 1
25885: DEC
25886: ST_TO_ADDR
25887: LD_VAR 0 3
25891: PUSH
25892: FOR_TO
25893: IFFALSE 25981
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25895: LD_ADDR_VAR 0 5
25899: PUSH
25900: LD_VAR 0 5
25904: PUSH
25905: LD_VAR 0 3
25909: PUSH
25910: LD_VAR 0 4
25914: ARRAY
25915: PPUSH
25916: CALL_OW 266
25920: PUSH
25921: LD_VAR 0 3
25925: PUSH
25926: LD_VAR 0 4
25930: ARRAY
25931: PPUSH
25932: CALL_OW 250
25936: PUSH
25937: LD_VAR 0 3
25941: PUSH
25942: LD_VAR 0 4
25946: ARRAY
25947: PPUSH
25948: CALL_OW 251
25952: PUSH
25953: LD_VAR 0 3
25957: PUSH
25958: LD_VAR 0 4
25962: ARRAY
25963: PPUSH
25964: CALL_OW 254
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: ADD
25978: ST_TO_ADDR
25979: GO 25892
25981: POP
25982: POP
// result := list ;
25983: LD_ADDR_VAR 0 2
25987: PUSH
25988: LD_VAR 0 5
25992: ST_TO_ADDR
// end ;
25993: LD_VAR 0 2
25997: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
// if not factory then
26007: LD_VAR 0 1
26011: NOT
26012: IFFALSE 26016
// exit ;
26014: GO 26609
// if control = control_apeman then
26016: LD_VAR 0 4
26020: PUSH
26021: LD_INT 5
26023: EQUAL
26024: IFFALSE 26133
// begin tmp := UnitsInside ( factory ) ;
26026: LD_ADDR_VAR 0 8
26030: PUSH
26031: LD_VAR 0 1
26035: PPUSH
26036: CALL_OW 313
26040: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26041: LD_VAR 0 8
26045: PPUSH
26046: LD_INT 25
26048: PUSH
26049: LD_INT 12
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 72
26060: NOT
26061: IFFALSE 26071
// control := control_manual ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_INT 1
26070: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26071: LD_ADDR_VAR 0 8
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL 25768 0 1
26085: ST_TO_ADDR
// if tmp then
26086: LD_VAR 0 8
26090: IFFALSE 26133
// begin for i in tmp do
26092: LD_ADDR_VAR 0 7
26096: PUSH
26097: LD_VAR 0 8
26101: PUSH
26102: FOR_IN
26103: IFFALSE 26131
// if i [ 1 ] = b_ext_radio then
26105: LD_VAR 0 7
26109: PUSH
26110: LD_INT 1
26112: ARRAY
26113: PUSH
26114: LD_INT 22
26116: EQUAL
26117: IFFALSE 26129
// begin control := control_remote ;
26119: LD_ADDR_VAR 0 4
26123: PUSH
26124: LD_INT 2
26126: ST_TO_ADDR
// break ;
26127: GO 26131
// end ;
26129: GO 26102
26131: POP
26132: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_VAR 0 2
26142: PPUSH
26143: LD_VAR 0 3
26147: PPUSH
26148: LD_VAR 0 4
26152: PPUSH
26153: LD_VAR 0 5
26157: PPUSH
26158: CALL_OW 448
26162: IFFALSE 26197
// begin result := [ chassis , engine , control , weapon ] ;
26164: LD_ADDR_VAR 0 6
26168: PUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_VAR 0 3
26178: PUSH
26179: LD_VAR 0 4
26183: PUSH
26184: LD_VAR 0 5
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: ST_TO_ADDR
// exit ;
26195: GO 26609
// end ; _chassis := AvailableChassisList ( factory ) ;
26197: LD_ADDR_VAR 0 9
26201: PUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 475
26211: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26212: LD_ADDR_VAR 0 11
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 476
26226: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26227: LD_ADDR_VAR 0 12
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 477
26241: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26242: LD_ADDR_VAR 0 10
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 478
26256: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26257: LD_VAR 0 9
26261: NOT
26262: PUSH
26263: LD_VAR 0 11
26267: NOT
26268: OR
26269: PUSH
26270: LD_VAR 0 12
26274: NOT
26275: OR
26276: PUSH
26277: LD_VAR 0 10
26281: NOT
26282: OR
26283: IFFALSE 26318
// begin result := [ chassis , engine , control , weapon ] ;
26285: LD_ADDR_VAR 0 6
26289: PUSH
26290: LD_VAR 0 2
26294: PUSH
26295: LD_VAR 0 3
26299: PUSH
26300: LD_VAR 0 4
26304: PUSH
26305: LD_VAR 0 5
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// exit ;
26316: GO 26609
// end ; if not chassis in _chassis then
26318: LD_VAR 0 2
26322: PUSH
26323: LD_VAR 0 9
26327: IN
26328: NOT
26329: IFFALSE 26355
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26331: LD_ADDR_VAR 0 2
26335: PUSH
26336: LD_VAR 0 9
26340: PUSH
26341: LD_INT 1
26343: PPUSH
26344: LD_VAR 0 9
26348: PPUSH
26349: CALL_OW 12
26353: ARRAY
26354: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26355: LD_VAR 0 2
26359: PPUSH
26360: LD_VAR 0 3
26364: PPUSH
26365: CALL 26614 0 2
26369: NOT
26370: IFFALSE 26429
// repeat engine := _engine [ 1 ] ;
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_VAR 0 11
26381: PUSH
26382: LD_INT 1
26384: ARRAY
26385: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26386: LD_ADDR_VAR 0 11
26390: PUSH
26391: LD_VAR 0 11
26395: PPUSH
26396: LD_INT 1
26398: PPUSH
26399: CALL_OW 3
26403: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26404: LD_VAR 0 2
26408: PPUSH
26409: LD_VAR 0 3
26413: PPUSH
26414: CALL 26614 0 2
26418: PUSH
26419: LD_VAR 0 11
26423: PUSH
26424: EMPTY
26425: EQUAL
26426: OR
26427: IFFALSE 26372
// if not control in _control then
26429: LD_VAR 0 4
26433: PUSH
26434: LD_VAR 0 12
26438: IN
26439: NOT
26440: IFFALSE 26466
// control := _control [ rand ( 1 , _control ) ] ;
26442: LD_ADDR_VAR 0 4
26446: PUSH
26447: LD_VAR 0 12
26451: PUSH
26452: LD_INT 1
26454: PPUSH
26455: LD_VAR 0 12
26459: PPUSH
26460: CALL_OW 12
26464: ARRAY
26465: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26466: LD_VAR 0 2
26470: PPUSH
26471: LD_VAR 0 5
26475: PPUSH
26476: CALL 26834 0 2
26480: NOT
26481: IFFALSE 26540
// repeat weapon := _weapon [ 1 ] ;
26483: LD_ADDR_VAR 0 5
26487: PUSH
26488: LD_VAR 0 10
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 10
26506: PPUSH
26507: LD_INT 1
26509: PPUSH
26510: CALL_OW 3
26514: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_VAR 0 5
26524: PPUSH
26525: CALL 26834 0 2
26529: PUSH
26530: LD_VAR 0 10
26534: PUSH
26535: EMPTY
26536: EQUAL
26537: OR
26538: IFFALSE 26483
// result := [ ] ;
26540: LD_ADDR_VAR 0 6
26544: PUSH
26545: EMPTY
26546: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26547: LD_VAR 0 1
26551: PPUSH
26552: LD_VAR 0 2
26556: PPUSH
26557: LD_VAR 0 3
26561: PPUSH
26562: LD_VAR 0 4
26566: PPUSH
26567: LD_VAR 0 5
26571: PPUSH
26572: CALL_OW 448
26576: IFFALSE 26609
// result := [ chassis , engine , control , weapon ] ;
26578: LD_ADDR_VAR 0 6
26582: PUSH
26583: LD_VAR 0 2
26587: PUSH
26588: LD_VAR 0 3
26592: PUSH
26593: LD_VAR 0 4
26597: PUSH
26598: LD_VAR 0 5
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
// end ;
26609: LD_VAR 0 6
26613: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26614: LD_INT 0
26616: PPUSH
// if not chassis or not engine then
26617: LD_VAR 0 1
26621: NOT
26622: PUSH
26623: LD_VAR 0 2
26627: NOT
26628: OR
26629: IFFALSE 26633
// exit ;
26631: GO 26829
// case engine of engine_solar :
26633: LD_VAR 0 2
26637: PUSH
26638: LD_INT 2
26640: DOUBLE
26641: EQUAL
26642: IFTRUE 26646
26644: GO 26684
26646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26647: LD_ADDR_VAR 0 3
26651: PUSH
26652: LD_INT 11
26654: PUSH
26655: LD_INT 12
26657: PUSH
26658: LD_INT 13
26660: PUSH
26661: LD_INT 14
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
26682: GO 26813
26684: LD_INT 1
26686: DOUBLE
26687: EQUAL
26688: IFTRUE 26692
26690: GO 26754
26692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26693: LD_ADDR_VAR 0 3
26697: PUSH
26698: LD_INT 11
26700: PUSH
26701: LD_INT 12
26703: PUSH
26704: LD_INT 13
26706: PUSH
26707: LD_INT 14
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 3
26718: PUSH
26719: LD_INT 4
26721: PUSH
26722: LD_INT 5
26724: PUSH
26725: LD_INT 21
26727: PUSH
26728: LD_INT 23
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_INT 24
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: ST_TO_ADDR
26752: GO 26813
26754: LD_INT 3
26756: DOUBLE
26757: EQUAL
26758: IFTRUE 26762
26760: GO 26812
26762: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26763: LD_ADDR_VAR 0 3
26767: PUSH
26768: LD_INT 13
26770: PUSH
26771: LD_INT 14
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 4
26782: PUSH
26783: LD_INT 5
26785: PUSH
26786: LD_INT 21
26788: PUSH
26789: LD_INT 22
26791: PUSH
26792: LD_INT 23
26794: PUSH
26795: LD_INT 24
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
26810: GO 26813
26812: POP
// result := ( chassis in result ) ;
26813: LD_ADDR_VAR 0 3
26817: PUSH
26818: LD_VAR 0 1
26822: PUSH
26823: LD_VAR 0 3
26827: IN
26828: ST_TO_ADDR
// end ;
26829: LD_VAR 0 3
26833: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26834: LD_INT 0
26836: PPUSH
// if not chassis or not weapon then
26837: LD_VAR 0 1
26841: NOT
26842: PUSH
26843: LD_VAR 0 2
26847: NOT
26848: OR
26849: IFFALSE 26853
// exit ;
26851: GO 27913
// case weapon of us_machine_gun :
26853: LD_VAR 0 2
26857: PUSH
26858: LD_INT 2
26860: DOUBLE
26861: EQUAL
26862: IFTRUE 26866
26864: GO 26896
26866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26867: LD_ADDR_VAR 0 3
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: LD_INT 4
26883: PUSH
26884: LD_INT 5
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
26894: GO 27897
26896: LD_INT 3
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26904
26902: GO 26934
26904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: LD_INT 4
26921: PUSH
26922: LD_INT 5
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: ST_TO_ADDR
26932: GO 27897
26934: LD_INT 11
26936: DOUBLE
26937: EQUAL
26938: IFTRUE 26942
26940: GO 26972
26942: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: LD_INT 4
26959: PUSH
26960: LD_INT 5
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: ST_TO_ADDR
26970: GO 27897
26972: LD_INT 4
26974: DOUBLE
26975: EQUAL
26976: IFTRUE 26980
26978: GO 27006
26980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26981: LD_ADDR_VAR 0 3
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: LD_INT 3
26991: PUSH
26992: LD_INT 4
26994: PUSH
26995: LD_INT 5
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
27004: GO 27897
27006: LD_INT 5
27008: DOUBLE
27009: EQUAL
27010: IFTRUE 27014
27012: GO 27040
27014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: LD_INT 3
27025: PUSH
27026: LD_INT 4
27028: PUSH
27029: LD_INT 5
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
27038: GO 27897
27040: LD_INT 9
27042: DOUBLE
27043: EQUAL
27044: IFTRUE 27048
27046: GO 27074
27048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27049: LD_ADDR_VAR 0 3
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 3
27059: PUSH
27060: LD_INT 4
27062: PUSH
27063: LD_INT 5
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
27072: GO 27897
27074: LD_INT 7
27076: DOUBLE
27077: EQUAL
27078: IFTRUE 27082
27080: GO 27108
27082: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27083: LD_ADDR_VAR 0 3
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: LD_INT 5
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
27106: GO 27897
27108: LD_INT 12
27110: DOUBLE
27111: EQUAL
27112: IFTRUE 27116
27114: GO 27142
27116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 4
27130: PUSH
27131: LD_INT 5
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: ST_TO_ADDR
27140: GO 27897
27142: LD_INT 13
27144: DOUBLE
27145: EQUAL
27146: IFTRUE 27150
27148: GO 27176
27150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27151: LD_ADDR_VAR 0 3
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 3
27161: PUSH
27162: LD_INT 4
27164: PUSH
27165: LD_INT 5
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: ST_TO_ADDR
27174: GO 27897
27176: LD_INT 14
27178: DOUBLE
27179: EQUAL
27180: IFTRUE 27184
27182: GO 27202
27184: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27185: LD_ADDR_VAR 0 3
27189: PUSH
27190: LD_INT 4
27192: PUSH
27193: LD_INT 5
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: ST_TO_ADDR
27200: GO 27897
27202: LD_INT 6
27204: DOUBLE
27205: EQUAL
27206: IFTRUE 27210
27208: GO 27228
27210: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27211: LD_ADDR_VAR 0 3
27215: PUSH
27216: LD_INT 4
27218: PUSH
27219: LD_INT 5
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: ST_TO_ADDR
27226: GO 27897
27228: LD_INT 10
27230: DOUBLE
27231: EQUAL
27232: IFTRUE 27236
27234: GO 27254
27236: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27237: LD_ADDR_VAR 0 3
27241: PUSH
27242: LD_INT 4
27244: PUSH
27245: LD_INT 5
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: ST_TO_ADDR
27252: GO 27897
27254: LD_INT 22
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 27288
27262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_INT 11
27270: PUSH
27271: LD_INT 12
27273: PUSH
27274: LD_INT 13
27276: PUSH
27277: LD_INT 14
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
27286: GO 27897
27288: LD_INT 23
27290: DOUBLE
27291: EQUAL
27292: IFTRUE 27296
27294: GO 27322
27296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27297: LD_ADDR_VAR 0 3
27301: PUSH
27302: LD_INT 11
27304: PUSH
27305: LD_INT 12
27307: PUSH
27308: LD_INT 13
27310: PUSH
27311: LD_INT 14
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
27320: GO 27897
27322: LD_INT 24
27324: DOUBLE
27325: EQUAL
27326: IFTRUE 27330
27328: GO 27356
27330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27331: LD_ADDR_VAR 0 3
27335: PUSH
27336: LD_INT 11
27338: PUSH
27339: LD_INT 12
27341: PUSH
27342: LD_INT 13
27344: PUSH
27345: LD_INT 14
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: ST_TO_ADDR
27354: GO 27897
27356: LD_INT 30
27358: DOUBLE
27359: EQUAL
27360: IFTRUE 27364
27362: GO 27390
27364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_INT 11
27372: PUSH
27373: LD_INT 12
27375: PUSH
27376: LD_INT 13
27378: PUSH
27379: LD_INT 14
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: ST_TO_ADDR
27388: GO 27897
27390: LD_INT 25
27392: DOUBLE
27393: EQUAL
27394: IFTRUE 27398
27396: GO 27416
27398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_INT 13
27406: PUSH
27407: LD_INT 14
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: ST_TO_ADDR
27414: GO 27897
27416: LD_INT 27
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27442
27424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_INT 13
27432: PUSH
27433: LD_INT 14
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: ST_TO_ADDR
27440: GO 27897
27442: LD_INT 92
27444: DOUBLE
27445: EQUAL
27446: IFTRUE 27450
27448: GO 27476
27450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 11
27458: PUSH
27459: LD_INT 12
27461: PUSH
27462: LD_INT 13
27464: PUSH
27465: LD_INT 14
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
27474: GO 27897
27476: LD_INT 28
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27484
27482: GO 27502
27484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27485: LD_ADDR_VAR 0 3
27489: PUSH
27490: LD_INT 13
27492: PUSH
27493: LD_INT 14
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: ST_TO_ADDR
27500: GO 27897
27502: LD_INT 29
27504: DOUBLE
27505: EQUAL
27506: IFTRUE 27510
27508: GO 27528
27510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27511: LD_ADDR_VAR 0 3
27515: PUSH
27516: LD_INT 13
27518: PUSH
27519: LD_INT 14
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: ST_TO_ADDR
27526: GO 27897
27528: LD_INT 31
27530: DOUBLE
27531: EQUAL
27532: IFTRUE 27536
27534: GO 27554
27536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 13
27544: PUSH
27545: LD_INT 14
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: ST_TO_ADDR
27552: GO 27897
27554: LD_INT 26
27556: DOUBLE
27557: EQUAL
27558: IFTRUE 27562
27560: GO 27580
27562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27563: LD_ADDR_VAR 0 3
27567: PUSH
27568: LD_INT 13
27570: PUSH
27571: LD_INT 14
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: ST_TO_ADDR
27578: GO 27897
27580: LD_INT 42
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27588
27586: GO 27614
27588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27589: LD_ADDR_VAR 0 3
27593: PUSH
27594: LD_INT 21
27596: PUSH
27597: LD_INT 22
27599: PUSH
27600: LD_INT 23
27602: PUSH
27603: LD_INT 24
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
27612: GO 27897
27614: LD_INT 43
27616: DOUBLE
27617: EQUAL
27618: IFTRUE 27622
27620: GO 27648
27622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27623: LD_ADDR_VAR 0 3
27627: PUSH
27628: LD_INT 21
27630: PUSH
27631: LD_INT 22
27633: PUSH
27634: LD_INT 23
27636: PUSH
27637: LD_INT 24
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: ST_TO_ADDR
27646: GO 27897
27648: LD_INT 44
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27656
27654: GO 27682
27656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27657: LD_ADDR_VAR 0 3
27661: PUSH
27662: LD_INT 21
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_INT 23
27670: PUSH
27671: LD_INT 24
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
27680: GO 27897
27682: LD_INT 45
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27690
27688: GO 27716
27690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27691: LD_ADDR_VAR 0 3
27695: PUSH
27696: LD_INT 21
27698: PUSH
27699: LD_INT 22
27701: PUSH
27702: LD_INT 23
27704: PUSH
27705: LD_INT 24
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
27714: GO 27897
27716: LD_INT 49
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27724
27722: GO 27750
27724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27725: LD_ADDR_VAR 0 3
27729: PUSH
27730: LD_INT 21
27732: PUSH
27733: LD_INT 22
27735: PUSH
27736: LD_INT 23
27738: PUSH
27739: LD_INT 24
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
27748: GO 27897
27750: LD_INT 51
27752: DOUBLE
27753: EQUAL
27754: IFTRUE 27758
27756: GO 27784
27758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27759: LD_ADDR_VAR 0 3
27763: PUSH
27764: LD_INT 21
27766: PUSH
27767: LD_INT 22
27769: PUSH
27770: LD_INT 23
27772: PUSH
27773: LD_INT 24
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
27782: GO 27897
27784: LD_INT 52
27786: DOUBLE
27787: EQUAL
27788: IFTRUE 27792
27790: GO 27818
27792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 21
27800: PUSH
27801: LD_INT 22
27803: PUSH
27804: LD_INT 23
27806: PUSH
27807: LD_INT 24
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
27816: GO 27897
27818: LD_INT 53
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 27844
27826: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27827: LD_ADDR_VAR 0 3
27831: PUSH
27832: LD_INT 23
27834: PUSH
27835: LD_INT 24
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: ST_TO_ADDR
27842: GO 27897
27844: LD_INT 46
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27870
27852: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 23
27860: PUSH
27861: LD_INT 24
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: ST_TO_ADDR
27868: GO 27897
27870: LD_INT 47
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 27896
27878: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_INT 23
27886: PUSH
27887: LD_INT 24
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: ST_TO_ADDR
27894: GO 27897
27896: POP
// result := ( chassis in result ) ;
27897: LD_ADDR_VAR 0 3
27901: PUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_VAR 0 3
27911: IN
27912: ST_TO_ADDR
// end ;
27913: LD_VAR 0 3
27917: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
// result := array ;
27927: LD_ADDR_VAR 0 5
27931: PUSH
27932: LD_VAR 0 1
27936: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27937: LD_VAR 0 1
27941: NOT
27942: PUSH
27943: LD_VAR 0 2
27947: NOT
27948: OR
27949: PUSH
27950: LD_VAR 0 3
27954: NOT
27955: OR
27956: PUSH
27957: LD_VAR 0 2
27961: PUSH
27962: LD_VAR 0 1
27966: GREATER
27967: OR
27968: PUSH
27969: LD_VAR 0 3
27973: PUSH
27974: LD_VAR 0 1
27978: GREATER
27979: OR
27980: IFFALSE 27984
// exit ;
27982: GO 28280
// if direction then
27984: LD_VAR 0 4
27988: IFFALSE 28052
// begin d := 1 ;
27990: LD_ADDR_VAR 0 9
27994: PUSH
27995: LD_INT 1
27997: ST_TO_ADDR
// if i_from > i_to then
27998: LD_VAR 0 2
28002: PUSH
28003: LD_VAR 0 3
28007: GREATER
28008: IFFALSE 28034
// length := ( array - i_from ) + i_to else
28010: LD_ADDR_VAR 0 11
28014: PUSH
28015: LD_VAR 0 1
28019: PUSH
28020: LD_VAR 0 2
28024: MINUS
28025: PUSH
28026: LD_VAR 0 3
28030: PLUS
28031: ST_TO_ADDR
28032: GO 28050
// length := i_to - i_from ;
28034: LD_ADDR_VAR 0 11
28038: PUSH
28039: LD_VAR 0 3
28043: PUSH
28044: LD_VAR 0 2
28048: MINUS
28049: ST_TO_ADDR
// end else
28050: GO 28113
// begin d := - 1 ;
28052: LD_ADDR_VAR 0 9
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: ST_TO_ADDR
// if i_from > i_to then
28061: LD_VAR 0 2
28065: PUSH
28066: LD_VAR 0 3
28070: GREATER
28071: IFFALSE 28091
// length := i_from - i_to else
28073: LD_ADDR_VAR 0 11
28077: PUSH
28078: LD_VAR 0 2
28082: PUSH
28083: LD_VAR 0 3
28087: MINUS
28088: ST_TO_ADDR
28089: GO 28113
// length := ( array - i_to ) + i_from ;
28091: LD_ADDR_VAR 0 11
28095: PUSH
28096: LD_VAR 0 1
28100: PUSH
28101: LD_VAR 0 3
28105: MINUS
28106: PUSH
28107: LD_VAR 0 2
28111: PLUS
28112: ST_TO_ADDR
// end ; if not length then
28113: LD_VAR 0 11
28117: NOT
28118: IFFALSE 28122
// exit ;
28120: GO 28280
// tmp := array ;
28122: LD_ADDR_VAR 0 10
28126: PUSH
28127: LD_VAR 0 1
28131: ST_TO_ADDR
// for i = 1 to length do
28132: LD_ADDR_VAR 0 6
28136: PUSH
28137: DOUBLE
28138: LD_INT 1
28140: DEC
28141: ST_TO_ADDR
28142: LD_VAR 0 11
28146: PUSH
28147: FOR_TO
28148: IFFALSE 28268
// begin for j = 1 to array do
28150: LD_ADDR_VAR 0 7
28154: PUSH
28155: DOUBLE
28156: LD_INT 1
28158: DEC
28159: ST_TO_ADDR
28160: LD_VAR 0 1
28164: PUSH
28165: FOR_TO
28166: IFFALSE 28254
// begin k := j + d ;
28168: LD_ADDR_VAR 0 8
28172: PUSH
28173: LD_VAR 0 7
28177: PUSH
28178: LD_VAR 0 9
28182: PLUS
28183: ST_TO_ADDR
// if k > array then
28184: LD_VAR 0 8
28188: PUSH
28189: LD_VAR 0 1
28193: GREATER
28194: IFFALSE 28204
// k := 1 ;
28196: LD_ADDR_VAR 0 8
28200: PUSH
28201: LD_INT 1
28203: ST_TO_ADDR
// if not k then
28204: LD_VAR 0 8
28208: NOT
28209: IFFALSE 28221
// k := array ;
28211: LD_ADDR_VAR 0 8
28215: PUSH
28216: LD_VAR 0 1
28220: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28221: LD_ADDR_VAR 0 10
28225: PUSH
28226: LD_VAR 0 10
28230: PPUSH
28231: LD_VAR 0 8
28235: PPUSH
28236: LD_VAR 0 1
28240: PUSH
28241: LD_VAR 0 7
28245: ARRAY
28246: PPUSH
28247: CALL_OW 1
28251: ST_TO_ADDR
// end ;
28252: GO 28165
28254: POP
28255: POP
// array := tmp ;
28256: LD_ADDR_VAR 0 1
28260: PUSH
28261: LD_VAR 0 10
28265: ST_TO_ADDR
// end ;
28266: GO 28147
28268: POP
28269: POP
// result := array ;
28270: LD_ADDR_VAR 0 5
28274: PUSH
28275: LD_VAR 0 1
28279: ST_TO_ADDR
// end ;
28280: LD_VAR 0 5
28284: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28285: LD_INT 0
28287: PPUSH
28288: PPUSH
// result := 0 ;
28289: LD_ADDR_VAR 0 3
28293: PUSH
28294: LD_INT 0
28296: ST_TO_ADDR
// if not array or not value in array then
28297: LD_VAR 0 1
28301: NOT
28302: PUSH
28303: LD_VAR 0 2
28307: PUSH
28308: LD_VAR 0 1
28312: IN
28313: NOT
28314: OR
28315: IFFALSE 28319
// exit ;
28317: GO 28373
// for i = 1 to array do
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_VAR 0 1
28333: PUSH
28334: FOR_TO
28335: IFFALSE 28371
// if value = array [ i ] then
28337: LD_VAR 0 2
28341: PUSH
28342: LD_VAR 0 1
28346: PUSH
28347: LD_VAR 0 4
28351: ARRAY
28352: EQUAL
28353: IFFALSE 28369
// begin result := i ;
28355: LD_ADDR_VAR 0 3
28359: PUSH
28360: LD_VAR 0 4
28364: ST_TO_ADDR
// exit ;
28365: POP
28366: POP
28367: GO 28373
// end ;
28369: GO 28334
28371: POP
28372: POP
// end ;
28373: LD_VAR 0 3
28377: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28378: LD_INT 0
28380: PPUSH
// vc_chassis := chassis ;
28381: LD_ADDR_OWVAR 37
28385: PUSH
28386: LD_VAR 0 1
28390: ST_TO_ADDR
// vc_engine := engine ;
28391: LD_ADDR_OWVAR 39
28395: PUSH
28396: LD_VAR 0 2
28400: ST_TO_ADDR
// vc_control := control ;
28401: LD_ADDR_OWVAR 38
28405: PUSH
28406: LD_VAR 0 3
28410: ST_TO_ADDR
// vc_weapon := weapon ;
28411: LD_ADDR_OWVAR 40
28415: PUSH
28416: LD_VAR 0 4
28420: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28421: LD_ADDR_OWVAR 41
28425: PUSH
28426: LD_VAR 0 5
28430: ST_TO_ADDR
// end ;
28431: LD_VAR 0 6
28435: RET
// export function WantPlant ( unit ) ; var task ; begin
28436: LD_INT 0
28438: PPUSH
28439: PPUSH
// result := false ;
28440: LD_ADDR_VAR 0 2
28444: PUSH
28445: LD_INT 0
28447: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_VAR 0 1
28457: PPUSH
28458: CALL_OW 437
28462: ST_TO_ADDR
// if task then
28463: LD_VAR 0 3
28467: IFFALSE 28495
// if task [ 1 ] [ 1 ] = p then
28469: LD_VAR 0 3
28473: PUSH
28474: LD_INT 1
28476: ARRAY
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PUSH
28482: LD_STRING p
28484: EQUAL
28485: IFFALSE 28495
// result := true ;
28487: LD_ADDR_VAR 0 2
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
// end ;
28495: LD_VAR 0 2
28499: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
28504: PPUSH
28505: PPUSH
// if pos < 1 then
28506: LD_VAR 0 2
28510: PUSH
28511: LD_INT 1
28513: LESS
28514: IFFALSE 28518
// exit ;
28516: GO 28821
// if pos = 1 then
28518: LD_VAR 0 2
28522: PUSH
28523: LD_INT 1
28525: EQUAL
28526: IFFALSE 28559
// result := Replace ( arr , pos [ 1 ] , value ) else
28528: LD_ADDR_VAR 0 4
28532: PUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: LD_VAR 0 2
28542: PUSH
28543: LD_INT 1
28545: ARRAY
28546: PPUSH
28547: LD_VAR 0 3
28551: PPUSH
28552: CALL_OW 1
28556: ST_TO_ADDR
28557: GO 28821
// begin tmp := arr ;
28559: LD_ADDR_VAR 0 6
28563: PUSH
28564: LD_VAR 0 1
28568: ST_TO_ADDR
// s_arr := [ tmp ] ;
28569: LD_ADDR_VAR 0 7
28573: PUSH
28574: LD_VAR 0 6
28578: PUSH
28579: EMPTY
28580: LIST
28581: ST_TO_ADDR
// for i = 1 to pos - 1 do
28582: LD_ADDR_VAR 0 5
28586: PUSH
28587: DOUBLE
28588: LD_INT 1
28590: DEC
28591: ST_TO_ADDR
28592: LD_VAR 0 2
28596: PUSH
28597: LD_INT 1
28599: MINUS
28600: PUSH
28601: FOR_TO
28602: IFFALSE 28647
// begin tmp := tmp [ pos [ i ] ] ;
28604: LD_ADDR_VAR 0 6
28608: PUSH
28609: LD_VAR 0 6
28613: PUSH
28614: LD_VAR 0 2
28618: PUSH
28619: LD_VAR 0 5
28623: ARRAY
28624: ARRAY
28625: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28626: LD_ADDR_VAR 0 7
28630: PUSH
28631: LD_VAR 0 7
28635: PUSH
28636: LD_VAR 0 6
28640: PUSH
28641: EMPTY
28642: LIST
28643: ADD
28644: ST_TO_ADDR
// end ;
28645: GO 28601
28647: POP
28648: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28649: LD_ADDR_VAR 0 6
28653: PUSH
28654: LD_VAR 0 6
28658: PPUSH
28659: LD_VAR 0 2
28663: PUSH
28664: LD_VAR 0 2
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 3
28674: PPUSH
28675: CALL_OW 1
28679: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28680: LD_ADDR_VAR 0 7
28684: PUSH
28685: LD_VAR 0 7
28689: PPUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: LD_VAR 0 6
28699: PPUSH
28700: CALL_OW 1
28704: ST_TO_ADDR
// for i = s_arr downto 2 do
28705: LD_ADDR_VAR 0 5
28709: PUSH
28710: DOUBLE
28711: LD_VAR 0 7
28715: INC
28716: ST_TO_ADDR
28717: LD_INT 2
28719: PUSH
28720: FOR_DOWNTO
28721: IFFALSE 28805
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28723: LD_ADDR_VAR 0 6
28727: PUSH
28728: LD_VAR 0 7
28732: PUSH
28733: LD_VAR 0 5
28737: PUSH
28738: LD_INT 1
28740: MINUS
28741: ARRAY
28742: PPUSH
28743: LD_VAR 0 2
28747: PUSH
28748: LD_VAR 0 5
28752: PUSH
28753: LD_INT 1
28755: MINUS
28756: ARRAY
28757: PPUSH
28758: LD_VAR 0 7
28762: PUSH
28763: LD_VAR 0 5
28767: ARRAY
28768: PPUSH
28769: CALL_OW 1
28773: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28774: LD_ADDR_VAR 0 7
28778: PUSH
28779: LD_VAR 0 7
28783: PPUSH
28784: LD_VAR 0 5
28788: PUSH
28789: LD_INT 1
28791: MINUS
28792: PPUSH
28793: LD_VAR 0 6
28797: PPUSH
28798: CALL_OW 1
28802: ST_TO_ADDR
// end ;
28803: GO 28720
28805: POP
28806: POP
// result := s_arr [ 1 ] ;
28807: LD_ADDR_VAR 0 4
28811: PUSH
28812: LD_VAR 0 7
28816: PUSH
28817: LD_INT 1
28819: ARRAY
28820: ST_TO_ADDR
// end ; end ;
28821: LD_VAR 0 4
28825: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28826: LD_INT 0
28828: PPUSH
28829: PPUSH
// if not list then
28830: LD_VAR 0 1
28834: NOT
28835: IFFALSE 28839
// exit ;
28837: GO 28930
// i := list [ pos1 ] ;
28839: LD_ADDR_VAR 0 5
28843: PUSH
28844: LD_VAR 0 1
28848: PUSH
28849: LD_VAR 0 2
28853: ARRAY
28854: ST_TO_ADDR
// if not i then
28855: LD_VAR 0 5
28859: NOT
28860: IFFALSE 28864
// exit ;
28862: GO 28930
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28864: LD_ADDR_VAR 0 1
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_VAR 0 2
28878: PPUSH
28879: LD_VAR 0 1
28883: PUSH
28884: LD_VAR 0 3
28888: ARRAY
28889: PPUSH
28890: CALL_OW 1
28894: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28895: LD_ADDR_VAR 0 1
28899: PUSH
28900: LD_VAR 0 1
28904: PPUSH
28905: LD_VAR 0 3
28909: PPUSH
28910: LD_VAR 0 5
28914: PPUSH
28915: CALL_OW 1
28919: ST_TO_ADDR
// result := list ;
28920: LD_ADDR_VAR 0 4
28924: PUSH
28925: LD_VAR 0 1
28929: ST_TO_ADDR
// end ;
28930: LD_VAR 0 4
28934: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28935: LD_INT 0
28937: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28938: LD_ADDR_VAR 0 5
28942: PUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 250
28952: PPUSH
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 251
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: LD_VAR 0 4
28977: PPUSH
28978: CALL 28988 0 5
28982: ST_TO_ADDR
// end ;
28983: LD_VAR 0 5
28987: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28988: LD_INT 0
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
// if not list then
28994: LD_VAR 0 3
28998: NOT
28999: IFFALSE 29003
// exit ;
29001: GO 29391
// result := [ ] ;
29003: LD_ADDR_VAR 0 6
29007: PUSH
29008: EMPTY
29009: ST_TO_ADDR
// for i in list do
29010: LD_ADDR_VAR 0 7
29014: PUSH
29015: LD_VAR 0 3
29019: PUSH
29020: FOR_IN
29021: IFFALSE 29223
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29023: LD_ADDR_VAR 0 9
29027: PUSH
29028: LD_VAR 0 7
29032: PPUSH
29033: LD_VAR 0 1
29037: PPUSH
29038: LD_VAR 0 2
29042: PPUSH
29043: CALL_OW 297
29047: ST_TO_ADDR
// if not result then
29048: LD_VAR 0 6
29052: NOT
29053: IFFALSE 29079
// result := [ [ i , tmp ] ] else
29055: LD_ADDR_VAR 0 6
29059: PUSH
29060: LD_VAR 0 7
29064: PUSH
29065: LD_VAR 0 9
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: ST_TO_ADDR
29077: GO 29221
// begin if result [ result ] [ 2 ] < tmp then
29079: LD_VAR 0 6
29083: PUSH
29084: LD_VAR 0 6
29088: ARRAY
29089: PUSH
29090: LD_INT 2
29092: ARRAY
29093: PUSH
29094: LD_VAR 0 9
29098: LESS
29099: IFFALSE 29141
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29101: LD_ADDR_VAR 0 6
29105: PUSH
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_VAR 0 6
29115: PUSH
29116: LD_INT 1
29118: PLUS
29119: PPUSH
29120: LD_VAR 0 7
29124: PUSH
29125: LD_VAR 0 9
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 2
29138: ST_TO_ADDR
29139: GO 29221
// for j = 1 to result do
29141: LD_ADDR_VAR 0 8
29145: PUSH
29146: DOUBLE
29147: LD_INT 1
29149: DEC
29150: ST_TO_ADDR
29151: LD_VAR 0 6
29155: PUSH
29156: FOR_TO
29157: IFFALSE 29219
// begin if tmp < result [ j ] [ 2 ] then
29159: LD_VAR 0 9
29163: PUSH
29164: LD_VAR 0 6
29168: PUSH
29169: LD_VAR 0 8
29173: ARRAY
29174: PUSH
29175: LD_INT 2
29177: ARRAY
29178: LESS
29179: IFFALSE 29217
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29181: LD_ADDR_VAR 0 6
29185: PUSH
29186: LD_VAR 0 6
29190: PPUSH
29191: LD_VAR 0 8
29195: PPUSH
29196: LD_VAR 0 7
29200: PUSH
29201: LD_VAR 0 9
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PPUSH
29210: CALL_OW 2
29214: ST_TO_ADDR
// break ;
29215: GO 29219
// end ; end ;
29217: GO 29156
29219: POP
29220: POP
// end ; end ;
29221: GO 29020
29223: POP
29224: POP
// if result and not asc then
29225: LD_VAR 0 6
29229: PUSH
29230: LD_VAR 0 4
29234: NOT
29235: AND
29236: IFFALSE 29311
// begin tmp := result ;
29238: LD_ADDR_VAR 0 9
29242: PUSH
29243: LD_VAR 0 6
29247: ST_TO_ADDR
// for i = tmp downto 1 do
29248: LD_ADDR_VAR 0 7
29252: PUSH
29253: DOUBLE
29254: LD_VAR 0 9
29258: INC
29259: ST_TO_ADDR
29260: LD_INT 1
29262: PUSH
29263: FOR_DOWNTO
29264: IFFALSE 29309
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29266: LD_ADDR_VAR 0 6
29270: PUSH
29271: LD_VAR 0 6
29275: PPUSH
29276: LD_VAR 0 9
29280: PUSH
29281: LD_VAR 0 7
29285: MINUS
29286: PUSH
29287: LD_INT 1
29289: PLUS
29290: PPUSH
29291: LD_VAR 0 9
29295: PUSH
29296: LD_VAR 0 7
29300: ARRAY
29301: PPUSH
29302: CALL_OW 1
29306: ST_TO_ADDR
29307: GO 29263
29309: POP
29310: POP
// end ; tmp := [ ] ;
29311: LD_ADDR_VAR 0 9
29315: PUSH
29316: EMPTY
29317: ST_TO_ADDR
// if mode then
29318: LD_VAR 0 5
29322: IFFALSE 29391
// begin for i = 1 to result do
29324: LD_ADDR_VAR 0 7
29328: PUSH
29329: DOUBLE
29330: LD_INT 1
29332: DEC
29333: ST_TO_ADDR
29334: LD_VAR 0 6
29338: PUSH
29339: FOR_TO
29340: IFFALSE 29379
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29342: LD_ADDR_VAR 0 9
29346: PUSH
29347: LD_VAR 0 9
29351: PPUSH
29352: LD_VAR 0 7
29356: PPUSH
29357: LD_VAR 0 6
29361: PUSH
29362: LD_VAR 0 7
29366: ARRAY
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: CALL_OW 1
29376: ST_TO_ADDR
29377: GO 29339
29379: POP
29380: POP
// result := tmp ;
29381: LD_ADDR_VAR 0 6
29385: PUSH
29386: LD_VAR 0 9
29390: ST_TO_ADDR
// end ; end ;
29391: LD_VAR 0 6
29395: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: EMPTY
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// if not x or not y then
29426: LD_VAR 0 2
29430: NOT
29431: PUSH
29432: LD_VAR 0 3
29436: NOT
29437: OR
29438: IFFALSE 29442
// exit ;
29440: GO 31092
// if not range then
29442: LD_VAR 0 4
29446: NOT
29447: IFFALSE 29457
// range := 10 ;
29449: LD_ADDR_VAR 0 4
29453: PUSH
29454: LD_INT 10
29456: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29457: LD_ADDR_VAR 0 8
29461: PUSH
29462: LD_INT 81
29464: PUSH
29465: LD_VAR 0 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 92
29476: PUSH
29477: LD_VAR 0 2
29481: PUSH
29482: LD_VAR 0 3
29486: PUSH
29487: LD_VAR 0 4
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: LD_INT 21
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 69
29524: ST_TO_ADDR
// if not tmp then
29525: LD_VAR 0 8
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 31092
// for i in tmp do
29534: LD_ADDR_VAR 0 6
29538: PUSH
29539: LD_VAR 0 8
29543: PUSH
29544: FOR_IN
29545: IFFALSE 31067
// begin points := [ 0 , 0 , 0 ] ;
29547: LD_ADDR_VAR 0 9
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// bpoints := 1 ;
29566: LD_ADDR_VAR 0 10
29570: PUSH
29571: LD_INT 1
29573: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29574: LD_VAR 0 6
29578: PPUSH
29579: CALL_OW 247
29583: PUSH
29584: LD_INT 1
29586: DOUBLE
29587: EQUAL
29588: IFTRUE 29592
29590: GO 30170
29592: POP
// begin if GetClass ( i ) = 1 then
29593: LD_VAR 0 6
29597: PPUSH
29598: CALL_OW 257
29602: PUSH
29603: LD_INT 1
29605: EQUAL
29606: IFFALSE 29627
// points := [ 10 , 5 , 3 ] ;
29608: LD_ADDR_VAR 0 9
29612: PUSH
29613: LD_INT 10
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29627: LD_VAR 0 6
29631: PPUSH
29632: CALL_OW 257
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 4
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: IN
29651: IFFALSE 29672
// points := [ 3 , 2 , 1 ] ;
29653: LD_ADDR_VAR 0 9
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29672: LD_VAR 0 6
29676: PPUSH
29677: CALL_OW 257
29681: PUSH
29682: LD_INT 5
29684: EQUAL
29685: IFFALSE 29706
// points := [ 130 , 5 , 2 ] ;
29687: LD_ADDR_VAR 0 9
29691: PUSH
29692: LD_INT 130
29694: PUSH
29695: LD_INT 5
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29706: LD_VAR 0 6
29710: PPUSH
29711: CALL_OW 257
29715: PUSH
29716: LD_INT 8
29718: EQUAL
29719: IFFALSE 29740
// points := [ 35 , 35 , 30 ] ;
29721: LD_ADDR_VAR 0 9
29725: PUSH
29726: LD_INT 35
29728: PUSH
29729: LD_INT 35
29731: PUSH
29732: LD_INT 30
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29740: LD_VAR 0 6
29744: PPUSH
29745: CALL_OW 257
29749: PUSH
29750: LD_INT 9
29752: EQUAL
29753: IFFALSE 29774
// points := [ 20 , 55 , 40 ] ;
29755: LD_ADDR_VAR 0 9
29759: PUSH
29760: LD_INT 20
29762: PUSH
29763: LD_INT 55
29765: PUSH
29766: LD_INT 40
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29774: LD_VAR 0 6
29778: PPUSH
29779: CALL_OW 257
29783: PUSH
29784: LD_INT 12
29786: PUSH
29787: LD_INT 16
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: IN
29794: IFFALSE 29815
// points := [ 5 , 3 , 2 ] ;
29796: LD_ADDR_VAR 0 9
29800: PUSH
29801: LD_INT 5
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29815: LD_VAR 0 6
29819: PPUSH
29820: CALL_OW 257
29824: PUSH
29825: LD_INT 17
29827: EQUAL
29828: IFFALSE 29849
// points := [ 100 , 50 , 75 ] ;
29830: LD_ADDR_VAR 0 9
29834: PUSH
29835: LD_INT 100
29837: PUSH
29838: LD_INT 50
29840: PUSH
29841: LD_INT 75
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29849: LD_VAR 0 6
29853: PPUSH
29854: CALL_OW 257
29858: PUSH
29859: LD_INT 15
29861: EQUAL
29862: IFFALSE 29883
// points := [ 10 , 5 , 3 ] ;
29864: LD_ADDR_VAR 0 9
29868: PUSH
29869: LD_INT 10
29871: PUSH
29872: LD_INT 5
29874: PUSH
29875: LD_INT 3
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29883: LD_VAR 0 6
29887: PPUSH
29888: CALL_OW 257
29892: PUSH
29893: LD_INT 14
29895: EQUAL
29896: IFFALSE 29917
// points := [ 10 , 0 , 0 ] ;
29898: LD_ADDR_VAR 0 9
29902: PUSH
29903: LD_INT 10
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29917: LD_VAR 0 6
29921: PPUSH
29922: CALL_OW 257
29926: PUSH
29927: LD_INT 11
29929: EQUAL
29930: IFFALSE 29951
// points := [ 30 , 10 , 5 ] ;
29932: LD_ADDR_VAR 0 9
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 10
29942: PUSH
29943: LD_INT 5
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29951: LD_VAR 0 1
29955: PPUSH
29956: LD_INT 5
29958: PPUSH
29959: CALL_OW 321
29963: PUSH
29964: LD_INT 2
29966: EQUAL
29967: IFFALSE 29984
// bpoints := bpoints * 1.8 ;
29969: LD_ADDR_VAR 0 10
29973: PUSH
29974: LD_VAR 0 10
29978: PUSH
29979: LD_REAL  1.80000000000000E+0000
29982: MUL
29983: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29984: LD_VAR 0 6
29988: PPUSH
29989: CALL_OW 257
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: IN
30012: PUSH
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_INT 51
30020: PPUSH
30021: CALL_OW 321
30025: PUSH
30026: LD_INT 2
30028: EQUAL
30029: AND
30030: IFFALSE 30047
// bpoints := bpoints * 1.2 ;
30032: LD_ADDR_VAR 0 10
30036: PUSH
30037: LD_VAR 0 10
30041: PUSH
30042: LD_REAL  1.20000000000000E+0000
30045: MUL
30046: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30047: LD_VAR 0 6
30051: PPUSH
30052: CALL_OW 257
30056: PUSH
30057: LD_INT 5
30059: PUSH
30060: LD_INT 7
30062: PUSH
30063: LD_INT 9
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: IN
30071: PUSH
30072: LD_VAR 0 1
30076: PPUSH
30077: LD_INT 52
30079: PPUSH
30080: CALL_OW 321
30084: PUSH
30085: LD_INT 2
30087: EQUAL
30088: AND
30089: IFFALSE 30106
// bpoints := bpoints * 1.5 ;
30091: LD_ADDR_VAR 0 10
30095: PUSH
30096: LD_VAR 0 10
30100: PUSH
30101: LD_REAL  1.50000000000000E+0000
30104: MUL
30105: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30106: LD_VAR 0 1
30110: PPUSH
30111: LD_INT 66
30113: PPUSH
30114: CALL_OW 321
30118: PUSH
30119: LD_INT 2
30121: EQUAL
30122: IFFALSE 30139
// bpoints := bpoints * 1.1 ;
30124: LD_ADDR_VAR 0 10
30128: PUSH
30129: LD_VAR 0 10
30133: PUSH
30134: LD_REAL  1.10000000000000E+0000
30137: MUL
30138: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30139: LD_ADDR_VAR 0 10
30143: PUSH
30144: LD_VAR 0 10
30148: PUSH
30149: LD_VAR 0 6
30153: PPUSH
30154: LD_INT 1
30156: PPUSH
30157: CALL_OW 259
30161: PUSH
30162: LD_REAL  1.15000000000000E+0000
30165: MUL
30166: MUL
30167: ST_TO_ADDR
// end ; unit_vehicle :
30168: GO 30996
30170: LD_INT 2
30172: DOUBLE
30173: EQUAL
30174: IFTRUE 30178
30176: GO 30984
30178: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30179: LD_VAR 0 6
30183: PPUSH
30184: CALL_OW 264
30188: PUSH
30189: LD_INT 2
30191: PUSH
30192: LD_INT 42
30194: PUSH
30195: LD_INT 24
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: IN
30203: IFFALSE 30224
// points := [ 25 , 5 , 3 ] ;
30205: LD_ADDR_VAR 0 9
30209: PUSH
30210: LD_INT 25
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30224: LD_VAR 0 6
30228: PPUSH
30229: CALL_OW 264
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: LD_INT 43
30239: PUSH
30240: LD_INT 25
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: IN
30248: IFFALSE 30269
// points := [ 40 , 15 , 5 ] ;
30250: LD_ADDR_VAR 0 9
30254: PUSH
30255: LD_INT 40
30257: PUSH
30258: LD_INT 15
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30269: LD_VAR 0 6
30273: PPUSH
30274: CALL_OW 264
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 23
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: IN
30289: IFFALSE 30310
// points := [ 7 , 25 , 8 ] ;
30291: LD_ADDR_VAR 0 9
30295: PUSH
30296: LD_INT 7
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 8
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30310: LD_VAR 0 6
30314: PPUSH
30315: CALL_OW 264
30319: PUSH
30320: LD_INT 5
30322: PUSH
30323: LD_INT 27
30325: PUSH
30326: LD_INT 44
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: IN
30334: IFFALSE 30355
// points := [ 14 , 50 , 16 ] ;
30336: LD_ADDR_VAR 0 9
30340: PUSH
30341: LD_INT 14
30343: PUSH
30344: LD_INT 50
30346: PUSH
30347: LD_INT 16
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30355: LD_VAR 0 6
30359: PPUSH
30360: CALL_OW 264
30364: PUSH
30365: LD_INT 6
30367: PUSH
30368: LD_INT 46
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: IN
30375: IFFALSE 30396
// points := [ 32 , 120 , 70 ] ;
30377: LD_ADDR_VAR 0 9
30381: PUSH
30382: LD_INT 32
30384: PUSH
30385: LD_INT 120
30387: PUSH
30388: LD_INT 70
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30396: LD_VAR 0 6
30400: PPUSH
30401: CALL_OW 264
30405: PUSH
30406: LD_INT 7
30408: PUSH
30409: LD_INT 28
30411: PUSH
30412: LD_INT 45
30414: PUSH
30415: LD_INT 92
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: IN
30424: IFFALSE 30445
// points := [ 35 , 20 , 45 ] ;
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: LD_INT 35
30433: PUSH
30434: LD_INT 20
30436: PUSH
30437: LD_INT 45
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 264
30454: PUSH
30455: LD_INT 47
30457: PUSH
30458: EMPTY
30459: LIST
30460: IN
30461: IFFALSE 30482
// points := [ 67 , 45 , 75 ] ;
30463: LD_ADDR_VAR 0 9
30467: PUSH
30468: LD_INT 67
30470: PUSH
30471: LD_INT 45
30473: PUSH
30474: LD_INT 75
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30482: LD_VAR 0 6
30486: PPUSH
30487: CALL_OW 264
30491: PUSH
30492: LD_INT 26
30494: PUSH
30495: EMPTY
30496: LIST
30497: IN
30498: IFFALSE 30519
// points := [ 120 , 30 , 80 ] ;
30500: LD_ADDR_VAR 0 9
30504: PUSH
30505: LD_INT 120
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 80
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30519: LD_VAR 0 6
30523: PPUSH
30524: CALL_OW 264
30528: PUSH
30529: LD_INT 22
30531: PUSH
30532: EMPTY
30533: LIST
30534: IN
30535: IFFALSE 30556
// points := [ 40 , 1 , 1 ] ;
30537: LD_ADDR_VAR 0 9
30541: PUSH
30542: LD_INT 40
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30556: LD_VAR 0 6
30560: PPUSH
30561: CALL_OW 264
30565: PUSH
30566: LD_INT 29
30568: PUSH
30569: EMPTY
30570: LIST
30571: IN
30572: IFFALSE 30593
// points := [ 70 , 200 , 400 ] ;
30574: LD_ADDR_VAR 0 9
30578: PUSH
30579: LD_INT 70
30581: PUSH
30582: LD_INT 200
30584: PUSH
30585: LD_INT 400
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: LIST
30592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30593: LD_VAR 0 6
30597: PPUSH
30598: CALL_OW 264
30602: PUSH
30603: LD_INT 14
30605: PUSH
30606: LD_INT 53
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: IN
30613: IFFALSE 30634
// points := [ 40 , 10 , 20 ] ;
30615: LD_ADDR_VAR 0 9
30619: PUSH
30620: LD_INT 40
30622: PUSH
30623: LD_INT 10
30625: PUSH
30626: LD_INT 20
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30634: LD_VAR 0 6
30638: PPUSH
30639: CALL_OW 264
30643: PUSH
30644: LD_INT 9
30646: PUSH
30647: EMPTY
30648: LIST
30649: IN
30650: IFFALSE 30671
// points := [ 5 , 70 , 20 ] ;
30652: LD_ADDR_VAR 0 9
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: LD_INT 70
30662: PUSH
30663: LD_INT 20
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30671: LD_VAR 0 6
30675: PPUSH
30676: CALL_OW 264
30680: PUSH
30681: LD_INT 10
30683: PUSH
30684: EMPTY
30685: LIST
30686: IN
30687: IFFALSE 30708
// points := [ 35 , 110 , 70 ] ;
30689: LD_ADDR_VAR 0 9
30693: PUSH
30694: LD_INT 35
30696: PUSH
30697: LD_INT 110
30699: PUSH
30700: LD_INT 70
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30708: LD_VAR 0 6
30712: PPUSH
30713: CALL_OW 265
30717: PUSH
30718: LD_INT 25
30720: EQUAL
30721: IFFALSE 30742
// points := [ 80 , 65 , 100 ] ;
30723: LD_ADDR_VAR 0 9
30727: PUSH
30728: LD_INT 80
30730: PUSH
30731: LD_INT 65
30733: PUSH
30734: LD_INT 100
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30742: LD_VAR 0 6
30746: PPUSH
30747: CALL_OW 263
30751: PUSH
30752: LD_INT 1
30754: EQUAL
30755: IFFALSE 30790
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30757: LD_ADDR_VAR 0 10
30761: PUSH
30762: LD_VAR 0 10
30766: PUSH
30767: LD_VAR 0 6
30771: PPUSH
30772: CALL_OW 311
30776: PPUSH
30777: LD_INT 3
30779: PPUSH
30780: CALL_OW 259
30784: PUSH
30785: LD_INT 4
30787: MUL
30788: MUL
30789: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30790: LD_VAR 0 6
30794: PPUSH
30795: CALL_OW 263
30799: PUSH
30800: LD_INT 2
30802: EQUAL
30803: IFFALSE 30854
// begin j := IsControledBy ( i ) ;
30805: LD_ADDR_VAR 0 7
30809: PUSH
30810: LD_VAR 0 6
30814: PPUSH
30815: CALL_OW 312
30819: ST_TO_ADDR
// if j then
30820: LD_VAR 0 7
30824: IFFALSE 30854
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30826: LD_ADDR_VAR 0 10
30830: PUSH
30831: LD_VAR 0 10
30835: PUSH
30836: LD_VAR 0 7
30840: PPUSH
30841: LD_INT 3
30843: PPUSH
30844: CALL_OW 259
30848: PUSH
30849: LD_INT 3
30851: MUL
30852: MUL
30853: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30854: LD_VAR 0 6
30858: PPUSH
30859: CALL_OW 264
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: LD_INT 6
30869: PUSH
30870: LD_INT 46
30872: PUSH
30873: LD_INT 44
30875: PUSH
30876: LD_INT 47
30878: PUSH
30879: LD_INT 45
30881: PUSH
30882: LD_INT 28
30884: PUSH
30885: LD_INT 7
30887: PUSH
30888: LD_INT 27
30890: PUSH
30891: LD_INT 29
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: IN
30906: PUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: LD_INT 52
30914: PPUSH
30915: CALL_OW 321
30919: PUSH
30920: LD_INT 2
30922: EQUAL
30923: AND
30924: IFFALSE 30941
// bpoints := bpoints * 1.2 ;
30926: LD_ADDR_VAR 0 10
30930: PUSH
30931: LD_VAR 0 10
30935: PUSH
30936: LD_REAL  1.20000000000000E+0000
30939: MUL
30940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30941: LD_VAR 0 6
30945: PPUSH
30946: CALL_OW 264
30950: PUSH
30951: LD_INT 6
30953: PUSH
30954: LD_INT 46
30956: PUSH
30957: LD_INT 47
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: IN
30965: IFFALSE 30982
// bpoints := bpoints * 1.2 ;
30967: LD_ADDR_VAR 0 10
30971: PUSH
30972: LD_VAR 0 10
30976: PUSH
30977: LD_REAL  1.20000000000000E+0000
30980: MUL
30981: ST_TO_ADDR
// end ; unit_building :
30982: GO 30996
30984: LD_INT 3
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30992
30990: GO 30995
30992: POP
// ; end ;
30993: GO 30996
30995: POP
// for j = 1 to 3 do
30996: LD_ADDR_VAR 0 7
31000: PUSH
31001: DOUBLE
31002: LD_INT 1
31004: DEC
31005: ST_TO_ADDR
31006: LD_INT 3
31008: PUSH
31009: FOR_TO
31010: IFFALSE 31063
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31012: LD_ADDR_VAR 0 5
31016: PUSH
31017: LD_VAR 0 5
31021: PPUSH
31022: LD_VAR 0 7
31026: PPUSH
31027: LD_VAR 0 5
31031: PUSH
31032: LD_VAR 0 7
31036: ARRAY
31037: PUSH
31038: LD_VAR 0 9
31042: PUSH
31043: LD_VAR 0 7
31047: ARRAY
31048: PUSH
31049: LD_VAR 0 10
31053: MUL
31054: PLUS
31055: PPUSH
31056: CALL_OW 1
31060: ST_TO_ADDR
31061: GO 31009
31063: POP
31064: POP
// end ;
31065: GO 29544
31067: POP
31068: POP
// result := Replace ( result , 4 , tmp ) ;
31069: LD_ADDR_VAR 0 5
31073: PUSH
31074: LD_VAR 0 5
31078: PPUSH
31079: LD_INT 4
31081: PPUSH
31082: LD_VAR 0 8
31086: PPUSH
31087: CALL_OW 1
31091: ST_TO_ADDR
// end ;
31092: LD_VAR 0 5
31096: RET
// export function DangerAtRange ( unit , range ) ; begin
31097: LD_INT 0
31099: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31100: LD_ADDR_VAR 0 3
31104: PUSH
31105: LD_VAR 0 1
31109: PPUSH
31110: CALL_OW 255
31114: PPUSH
31115: LD_VAR 0 1
31119: PPUSH
31120: CALL_OW 250
31124: PPUSH
31125: LD_VAR 0 1
31129: PPUSH
31130: CALL_OW 251
31134: PPUSH
31135: LD_VAR 0 2
31139: PPUSH
31140: CALL 29396 0 4
31144: ST_TO_ADDR
// end ;
31145: LD_VAR 0 3
31149: RET
// export function DangerInArea ( side , area ) ; begin
31150: LD_INT 0
31152: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31153: LD_ADDR_VAR 0 3
31157: PUSH
31158: LD_VAR 0 2
31162: PPUSH
31163: LD_INT 81
31165: PUSH
31166: LD_VAR 0 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PPUSH
31175: CALL_OW 70
31179: ST_TO_ADDR
// end ;
31180: LD_VAR 0 3
31184: RET
// export function IsExtension ( b ) ; begin
31185: LD_INT 0
31187: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31188: LD_ADDR_VAR 0 2
31192: PUSH
31193: LD_VAR 0 1
31197: PUSH
31198: LD_INT 23
31200: PUSH
31201: LD_INT 20
31203: PUSH
31204: LD_INT 22
31206: PUSH
31207: LD_INT 17
31209: PUSH
31210: LD_INT 24
31212: PUSH
31213: LD_INT 21
31215: PUSH
31216: LD_INT 19
31218: PUSH
31219: LD_INT 16
31221: PUSH
31222: LD_INT 25
31224: PUSH
31225: LD_INT 18
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: IN
31240: ST_TO_ADDR
// end ;
31241: LD_VAR 0 2
31245: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// result := [ ] ;
31251: LD_ADDR_VAR 0 4
31255: PUSH
31256: EMPTY
31257: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31258: LD_ADDR_VAR 0 5
31262: PUSH
31263: LD_VAR 0 2
31267: PPUSH
31268: LD_INT 21
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 70
31282: ST_TO_ADDR
// if not tmp then
31283: LD_VAR 0 5
31287: NOT
31288: IFFALSE 31292
// exit ;
31290: GO 31356
// if checkLink then
31292: LD_VAR 0 3
31296: IFFALSE 31346
// begin for i in tmp do
31298: LD_ADDR_VAR 0 6
31302: PUSH
31303: LD_VAR 0 5
31307: PUSH
31308: FOR_IN
31309: IFFALSE 31344
// if GetBase ( i ) <> base then
31311: LD_VAR 0 6
31315: PPUSH
31316: CALL_OW 274
31320: PUSH
31321: LD_VAR 0 1
31325: NONEQUAL
31326: IFFALSE 31342
// ComLinkToBase ( base , i ) ;
31328: LD_VAR 0 1
31332: PPUSH
31333: LD_VAR 0 6
31337: PPUSH
31338: CALL_OW 169
31342: GO 31308
31344: POP
31345: POP
// end ; result := tmp ;
31346: LD_ADDR_VAR 0 4
31350: PUSH
31351: LD_VAR 0 5
31355: ST_TO_ADDR
// end ;
31356: LD_VAR 0 4
31360: RET
// export function ComComplete ( units , b ) ; var i ; begin
31361: LD_INT 0
31363: PPUSH
31364: PPUSH
// if not units then
31365: LD_VAR 0 1
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31464
// for i in units do
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_VAR 0 1
31383: PUSH
31384: FOR_IN
31385: IFFALSE 31462
// if BuildingStatus ( b ) = bs_build then
31387: LD_VAR 0 2
31391: PPUSH
31392: CALL_OW 461
31396: PUSH
31397: LD_INT 1
31399: EQUAL
31400: IFFALSE 31460
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31402: LD_VAR 0 4
31406: PPUSH
31407: LD_STRING h
31409: PUSH
31410: LD_VAR 0 2
31414: PPUSH
31415: CALL_OW 250
31419: PUSH
31420: LD_VAR 0 2
31424: PPUSH
31425: CALL_OW 251
31429: PUSH
31430: LD_VAR 0 2
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: PPUSH
31456: CALL_OW 446
31460: GO 31384
31462: POP
31463: POP
// end ;
31464: LD_VAR 0 3
31468: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31469: LD_INT 0
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31477: LD_VAR 0 1
31481: NOT
31482: PUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 263
31492: PUSH
31493: LD_INT 2
31495: NONEQUAL
31496: OR
31497: IFFALSE 31501
// exit ;
31499: GO 31817
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31501: LD_ADDR_VAR 0 6
31505: PUSH
31506: LD_INT 22
31508: PUSH
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 255
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: LD_INT 30
31528: PUSH
31529: LD_INT 36
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 34
31538: PUSH
31539: LD_INT 31
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PPUSH
31555: CALL_OW 69
31559: ST_TO_ADDR
// if not tmp then
31560: LD_VAR 0 6
31564: NOT
31565: IFFALSE 31569
// exit ;
31567: GO 31817
// result := [ ] ;
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: EMPTY
31575: ST_TO_ADDR
// for i in tmp do
31576: LD_ADDR_VAR 0 3
31580: PUSH
31581: LD_VAR 0 6
31585: PUSH
31586: FOR_IN
31587: IFFALSE 31658
// begin t := UnitsInside ( i ) ;
31589: LD_ADDR_VAR 0 4
31593: PUSH
31594: LD_VAR 0 3
31598: PPUSH
31599: CALL_OW 313
31603: ST_TO_ADDR
// if t then
31604: LD_VAR 0 4
31608: IFFALSE 31656
// for j in t do
31610: LD_ADDR_VAR 0 7
31614: PUSH
31615: LD_VAR 0 4
31619: PUSH
31620: FOR_IN
31621: IFFALSE 31654
// result := Replace ( result , result + 1 , j ) ;
31623: LD_ADDR_VAR 0 2
31627: PUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: LD_VAR 0 2
31637: PUSH
31638: LD_INT 1
31640: PLUS
31641: PPUSH
31642: LD_VAR 0 7
31646: PPUSH
31647: CALL_OW 1
31651: ST_TO_ADDR
31652: GO 31620
31654: POP
31655: POP
// end ;
31656: GO 31586
31658: POP
31659: POP
// if not result then
31660: LD_VAR 0 2
31664: NOT
31665: IFFALSE 31669
// exit ;
31667: GO 31817
// mech := result [ 1 ] ;
31669: LD_ADDR_VAR 0 5
31673: PUSH
31674: LD_VAR 0 2
31678: PUSH
31679: LD_INT 1
31681: ARRAY
31682: ST_TO_ADDR
// if result > 1 then
31683: LD_VAR 0 2
31687: PUSH
31688: LD_INT 1
31690: GREATER
31691: IFFALSE 31803
// begin for i = 2 to result do
31693: LD_ADDR_VAR 0 3
31697: PUSH
31698: DOUBLE
31699: LD_INT 2
31701: DEC
31702: ST_TO_ADDR
31703: LD_VAR 0 2
31707: PUSH
31708: FOR_TO
31709: IFFALSE 31801
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31711: LD_ADDR_VAR 0 4
31715: PUSH
31716: LD_VAR 0 2
31720: PUSH
31721: LD_VAR 0 3
31725: ARRAY
31726: PPUSH
31727: LD_INT 3
31729: PPUSH
31730: CALL_OW 259
31734: PUSH
31735: LD_VAR 0 2
31739: PUSH
31740: LD_VAR 0 3
31744: ARRAY
31745: PPUSH
31746: CALL_OW 432
31750: MINUS
31751: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31752: LD_VAR 0 4
31756: PUSH
31757: LD_VAR 0 5
31761: PPUSH
31762: LD_INT 3
31764: PPUSH
31765: CALL_OW 259
31769: PUSH
31770: LD_VAR 0 5
31774: PPUSH
31775: CALL_OW 432
31779: MINUS
31780: GREATEREQUAL
31781: IFFALSE 31799
// mech := result [ i ] ;
31783: LD_ADDR_VAR 0 5
31787: PUSH
31788: LD_VAR 0 2
31792: PUSH
31793: LD_VAR 0 3
31797: ARRAY
31798: ST_TO_ADDR
// end ;
31799: GO 31708
31801: POP
31802: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_VAR 0 5
31812: PPUSH
31813: CALL_OW 135
// end ;
31817: LD_VAR 0 2
31821: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31822: LD_INT 0
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
// result := [ ] ;
31837: LD_ADDR_VAR 0 7
31841: PUSH
31842: EMPTY
31843: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 266
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: IN
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 33503
// if name then
31869: LD_VAR 0 3
31873: IFFALSE 31889
// SetBName ( base_dep , name ) ;
31875: LD_VAR 0 1
31879: PPUSH
31880: LD_VAR 0 3
31884: PPUSH
31885: CALL_OW 500
// base := GetBase ( base_dep ) ;
31889: LD_ADDR_VAR 0 15
31893: PUSH
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL_OW 274
31903: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31904: LD_ADDR_VAR 0 16
31908: PUSH
31909: LD_VAR 0 1
31913: PPUSH
31914: CALL_OW 255
31918: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31919: LD_ADDR_VAR 0 17
31923: PUSH
31924: LD_VAR 0 1
31928: PPUSH
31929: CALL_OW 248
31933: ST_TO_ADDR
// if sources then
31934: LD_VAR 0 5
31938: IFFALSE 31985
// for i = 1 to 3 do
31940: LD_ADDR_VAR 0 8
31944: PUSH
31945: DOUBLE
31946: LD_INT 1
31948: DEC
31949: ST_TO_ADDR
31950: LD_INT 3
31952: PUSH
31953: FOR_TO
31954: IFFALSE 31983
// AddResourceType ( base , i , sources [ i ] ) ;
31956: LD_VAR 0 15
31960: PPUSH
31961: LD_VAR 0 8
31965: PPUSH
31966: LD_VAR 0 5
31970: PUSH
31971: LD_VAR 0 8
31975: ARRAY
31976: PPUSH
31977: CALL_OW 276
31981: GO 31953
31983: POP
31984: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31985: LD_ADDR_VAR 0 18
31989: PUSH
31990: LD_VAR 0 15
31994: PPUSH
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_INT 1
32002: PPUSH
32003: CALL 31246 0 3
32007: ST_TO_ADDR
// InitHc ;
32008: CALL_OW 19
// InitUc ;
32012: CALL_OW 18
// uc_side := side ;
32016: LD_ADDR_OWVAR 20
32020: PUSH
32021: LD_VAR 0 16
32025: ST_TO_ADDR
// uc_nation := nation ;
32026: LD_ADDR_OWVAR 21
32030: PUSH
32031: LD_VAR 0 17
32035: ST_TO_ADDR
// if buildings then
32036: LD_VAR 0 18
32040: IFFALSE 33362
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32042: LD_ADDR_VAR 0 19
32046: PUSH
32047: LD_VAR 0 18
32051: PPUSH
32052: LD_INT 2
32054: PUSH
32055: LD_INT 30
32057: PUSH
32058: LD_INT 29
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 30
32067: PUSH
32068: LD_INT 30
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 72
32084: ST_TO_ADDR
// if tmp then
32085: LD_VAR 0 19
32089: IFFALSE 32137
// for i in tmp do
32091: LD_ADDR_VAR 0 8
32095: PUSH
32096: LD_VAR 0 19
32100: PUSH
32101: FOR_IN
32102: IFFALSE 32135
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32104: LD_VAR 0 8
32108: PPUSH
32109: CALL_OW 250
32113: PPUSH
32114: LD_VAR 0 8
32118: PPUSH
32119: CALL_OW 251
32123: PPUSH
32124: LD_VAR 0 16
32128: PPUSH
32129: CALL_OW 441
32133: GO 32101
32135: POP
32136: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32137: LD_VAR 0 18
32141: PPUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 30
32147: PUSH
32148: LD_INT 32
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 30
32157: PUSH
32158: LD_INT 33
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 72
32174: IFFALSE 32262
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32176: LD_ADDR_VAR 0 8
32180: PUSH
32181: LD_VAR 0 18
32185: PPUSH
32186: LD_INT 2
32188: PUSH
32189: LD_INT 30
32191: PUSH
32192: LD_INT 32
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 30
32201: PUSH
32202: LD_INT 33
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: PPUSH
32214: CALL_OW 72
32218: PUSH
32219: FOR_IN
32220: IFFALSE 32260
// begin if not GetBWeapon ( i ) then
32222: LD_VAR 0 8
32226: PPUSH
32227: CALL_OW 269
32231: NOT
32232: IFFALSE 32258
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32234: LD_VAR 0 8
32238: PPUSH
32239: LD_VAR 0 8
32243: PPUSH
32244: LD_VAR 0 2
32248: PPUSH
32249: CALL 33508 0 2
32253: PPUSH
32254: CALL_OW 431
// end ;
32258: GO 32219
32260: POP
32261: POP
// end ; for i = 1 to personel do
32262: LD_ADDR_VAR 0 8
32266: PUSH
32267: DOUBLE
32268: LD_INT 1
32270: DEC
32271: ST_TO_ADDR
32272: LD_VAR 0 6
32276: PUSH
32277: FOR_TO
32278: IFFALSE 33342
// begin if i > 4 then
32280: LD_VAR 0 8
32284: PUSH
32285: LD_INT 4
32287: GREATER
32288: IFFALSE 32292
// break ;
32290: GO 33342
// case i of 1 :
32292: LD_VAR 0 8
32296: PUSH
32297: LD_INT 1
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32305
32303: GO 32385
32305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32306: LD_ADDR_VAR 0 12
32310: PUSH
32311: LD_VAR 0 18
32315: PPUSH
32316: LD_INT 22
32318: PUSH
32319: LD_VAR 0 16
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 58
32330: PUSH
32331: EMPTY
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 30
32339: PUSH
32340: LD_INT 32
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 30
32349: PUSH
32350: LD_INT 4
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 30
32359: PUSH
32360: LD_INT 5
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 72
32382: ST_TO_ADDR
32383: GO 32607
32385: LD_INT 2
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32455
32393: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32394: LD_ADDR_VAR 0 12
32398: PUSH
32399: LD_VAR 0 18
32403: PPUSH
32404: LD_INT 22
32406: PUSH
32407: LD_VAR 0 16
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: LD_INT 30
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PPUSH
32448: CALL_OW 72
32452: ST_TO_ADDR
32453: GO 32607
32455: LD_INT 3
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32525
32463: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32464: LD_ADDR_VAR 0 12
32468: PUSH
32469: LD_VAR 0 18
32473: PPUSH
32474: LD_INT 22
32476: PUSH
32477: LD_VAR 0 16
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 30
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 30
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PPUSH
32518: CALL_OW 72
32522: ST_TO_ADDR
32523: GO 32607
32525: LD_INT 4
32527: DOUBLE
32528: EQUAL
32529: IFTRUE 32533
32531: GO 32606
32533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32534: LD_ADDR_VAR 0 12
32538: PUSH
32539: LD_VAR 0 18
32543: PPUSH
32544: LD_INT 22
32546: PUSH
32547: LD_VAR 0 16
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: LD_INT 30
32561: PUSH
32562: LD_INT 6
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 30
32571: PUSH
32572: LD_INT 7
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 30
32581: PUSH
32582: LD_INT 8
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 72
32603: ST_TO_ADDR
32604: GO 32607
32606: POP
// if i = 1 then
32607: LD_VAR 0 8
32611: PUSH
32612: LD_INT 1
32614: EQUAL
32615: IFFALSE 32726
// begin tmp := [ ] ;
32617: LD_ADDR_VAR 0 19
32621: PUSH
32622: EMPTY
32623: ST_TO_ADDR
// for j in f do
32624: LD_ADDR_VAR 0 9
32628: PUSH
32629: LD_VAR 0 12
32633: PUSH
32634: FOR_IN
32635: IFFALSE 32708
// if GetBType ( j ) = b_bunker then
32637: LD_VAR 0 9
32641: PPUSH
32642: CALL_OW 266
32646: PUSH
32647: LD_INT 32
32649: EQUAL
32650: IFFALSE 32677
// tmp := Insert ( tmp , 1 , j ) else
32652: LD_ADDR_VAR 0 19
32656: PUSH
32657: LD_VAR 0 19
32661: PPUSH
32662: LD_INT 1
32664: PPUSH
32665: LD_VAR 0 9
32669: PPUSH
32670: CALL_OW 2
32674: ST_TO_ADDR
32675: GO 32706
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32677: LD_ADDR_VAR 0 19
32681: PUSH
32682: LD_VAR 0 19
32686: PPUSH
32687: LD_VAR 0 19
32691: PUSH
32692: LD_INT 1
32694: PLUS
32695: PPUSH
32696: LD_VAR 0 9
32700: PPUSH
32701: CALL_OW 2
32705: ST_TO_ADDR
32706: GO 32634
32708: POP
32709: POP
// if tmp then
32710: LD_VAR 0 19
32714: IFFALSE 32726
// f := tmp ;
32716: LD_ADDR_VAR 0 12
32720: PUSH
32721: LD_VAR 0 19
32725: ST_TO_ADDR
// end ; x := personel [ i ] ;
32726: LD_ADDR_VAR 0 13
32730: PUSH
32731: LD_VAR 0 6
32735: PUSH
32736: LD_VAR 0 8
32740: ARRAY
32741: ST_TO_ADDR
// if x = - 1 then
32742: LD_VAR 0 13
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: EQUAL
32751: IFFALSE 32960
// begin for j in f do
32753: LD_ADDR_VAR 0 9
32757: PUSH
32758: LD_VAR 0 12
32762: PUSH
32763: FOR_IN
32764: IFFALSE 32956
// repeat InitHc ;
32766: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32770: LD_VAR 0 9
32774: PPUSH
32775: CALL_OW 266
32779: PUSH
32780: LD_INT 5
32782: EQUAL
32783: IFFALSE 32853
// begin if UnitsInside ( j ) < 3 then
32785: LD_VAR 0 9
32789: PPUSH
32790: CALL_OW 313
32794: PUSH
32795: LD_INT 3
32797: LESS
32798: IFFALSE 32834
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32800: LD_INT 0
32802: PPUSH
32803: LD_INT 5
32805: PUSH
32806: LD_INT 8
32808: PUSH
32809: LD_INT 9
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: PUSH
32817: LD_VAR 0 17
32821: ARRAY
32822: PPUSH
32823: LD_VAR 0 4
32827: PPUSH
32828: CALL_OW 380
32832: GO 32851
// PrepareHuman ( false , i , skill ) ;
32834: LD_INT 0
32836: PPUSH
32837: LD_VAR 0 8
32841: PPUSH
32842: LD_VAR 0 4
32846: PPUSH
32847: CALL_OW 380
// end else
32851: GO 32870
// PrepareHuman ( false , i , skill ) ;
32853: LD_INT 0
32855: PPUSH
32856: LD_VAR 0 8
32860: PPUSH
32861: LD_VAR 0 4
32865: PPUSH
32866: CALL_OW 380
// un := CreateHuman ;
32870: LD_ADDR_VAR 0 14
32874: PUSH
32875: CALL_OW 44
32879: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32880: LD_ADDR_VAR 0 7
32884: PUSH
32885: LD_VAR 0 7
32889: PPUSH
32890: LD_INT 1
32892: PPUSH
32893: LD_VAR 0 14
32897: PPUSH
32898: CALL_OW 2
32902: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32903: LD_VAR 0 14
32907: PPUSH
32908: LD_VAR 0 9
32912: PPUSH
32913: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32917: LD_VAR 0 9
32921: PPUSH
32922: CALL_OW 313
32926: PUSH
32927: LD_INT 6
32929: EQUAL
32930: PUSH
32931: LD_VAR 0 9
32935: PPUSH
32936: CALL_OW 266
32940: PUSH
32941: LD_INT 32
32943: PUSH
32944: LD_INT 31
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: IN
32951: OR
32952: IFFALSE 32766
32954: GO 32763
32956: POP
32957: POP
// end else
32958: GO 33340
// for j = 1 to x do
32960: LD_ADDR_VAR 0 9
32964: PUSH
32965: DOUBLE
32966: LD_INT 1
32968: DEC
32969: ST_TO_ADDR
32970: LD_VAR 0 13
32974: PUSH
32975: FOR_TO
32976: IFFALSE 33338
// begin InitHc ;
32978: CALL_OW 19
// if not f then
32982: LD_VAR 0 12
32986: NOT
32987: IFFALSE 33076
// begin PrepareHuman ( false , i , skill ) ;
32989: LD_INT 0
32991: PPUSH
32992: LD_VAR 0 8
32996: PPUSH
32997: LD_VAR 0 4
33001: PPUSH
33002: CALL_OW 380
// un := CreateHuman ;
33006: LD_ADDR_VAR 0 14
33010: PUSH
33011: CALL_OW 44
33015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33016: LD_ADDR_VAR 0 7
33020: PUSH
33021: LD_VAR 0 7
33025: PPUSH
33026: LD_INT 1
33028: PPUSH
33029: LD_VAR 0 14
33033: PPUSH
33034: CALL_OW 2
33038: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33039: LD_VAR 0 14
33043: PPUSH
33044: LD_VAR 0 1
33048: PPUSH
33049: CALL_OW 250
33053: PPUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL_OW 251
33063: PPUSH
33064: LD_INT 10
33066: PPUSH
33067: LD_INT 0
33069: PPUSH
33070: CALL_OW 50
// continue ;
33074: GO 32975
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33076: LD_VAR 0 12
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: PPUSH
33085: CALL_OW 313
33089: PUSH
33090: LD_VAR 0 12
33094: PUSH
33095: LD_INT 1
33097: ARRAY
33098: PPUSH
33099: CALL_OW 266
33103: PUSH
33104: LD_INT 32
33106: PUSH
33107: LD_INT 31
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: IN
33114: AND
33115: PUSH
33116: LD_VAR 0 12
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: PPUSH
33125: CALL_OW 313
33129: PUSH
33130: LD_INT 6
33132: EQUAL
33133: OR
33134: IFFALSE 33154
// f := Delete ( f , 1 ) ;
33136: LD_ADDR_VAR 0 12
33140: PUSH
33141: LD_VAR 0 12
33145: PPUSH
33146: LD_INT 1
33148: PPUSH
33149: CALL_OW 3
33153: ST_TO_ADDR
// if not f then
33154: LD_VAR 0 12
33158: NOT
33159: IFFALSE 33177
// begin x := x + 2 ;
33161: LD_ADDR_VAR 0 13
33165: PUSH
33166: LD_VAR 0 13
33170: PUSH
33171: LD_INT 2
33173: PLUS
33174: ST_TO_ADDR
// continue ;
33175: GO 32975
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33177: LD_VAR 0 12
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: PPUSH
33186: CALL_OW 266
33190: PUSH
33191: LD_INT 5
33193: EQUAL
33194: IFFALSE 33268
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33196: LD_VAR 0 12
33200: PUSH
33201: LD_INT 1
33203: ARRAY
33204: PPUSH
33205: CALL_OW 313
33209: PUSH
33210: LD_INT 3
33212: LESS
33213: IFFALSE 33249
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33215: LD_INT 0
33217: PPUSH
33218: LD_INT 5
33220: PUSH
33221: LD_INT 8
33223: PUSH
33224: LD_INT 9
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: PUSH
33232: LD_VAR 0 17
33236: ARRAY
33237: PPUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: CALL_OW 380
33247: GO 33266
// PrepareHuman ( false , i , skill ) ;
33249: LD_INT 0
33251: PPUSH
33252: LD_VAR 0 8
33256: PPUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: CALL_OW 380
// end else
33266: GO 33285
// PrepareHuman ( false , i , skill ) ;
33268: LD_INT 0
33270: PPUSH
33271: LD_VAR 0 8
33275: PPUSH
33276: LD_VAR 0 4
33280: PPUSH
33281: CALL_OW 380
// un := CreateHuman ;
33285: LD_ADDR_VAR 0 14
33289: PUSH
33290: CALL_OW 44
33294: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33295: LD_ADDR_VAR 0 7
33299: PUSH
33300: LD_VAR 0 7
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: LD_VAR 0 14
33312: PPUSH
33313: CALL_OW 2
33317: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33318: LD_VAR 0 14
33322: PPUSH
33323: LD_VAR 0 12
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: PPUSH
33332: CALL_OW 52
// end ;
33336: GO 32975
33338: POP
33339: POP
// end ;
33340: GO 32277
33342: POP
33343: POP
// result := result ^ buildings ;
33344: LD_ADDR_VAR 0 7
33348: PUSH
33349: LD_VAR 0 7
33353: PUSH
33354: LD_VAR 0 18
33358: ADD
33359: ST_TO_ADDR
// end else
33360: GO 33503
// begin for i = 1 to personel do
33362: LD_ADDR_VAR 0 8
33366: PUSH
33367: DOUBLE
33368: LD_INT 1
33370: DEC
33371: ST_TO_ADDR
33372: LD_VAR 0 6
33376: PUSH
33377: FOR_TO
33378: IFFALSE 33501
// begin if i > 4 then
33380: LD_VAR 0 8
33384: PUSH
33385: LD_INT 4
33387: GREATER
33388: IFFALSE 33392
// break ;
33390: GO 33501
// x := personel [ i ] ;
33392: LD_ADDR_VAR 0 13
33396: PUSH
33397: LD_VAR 0 6
33401: PUSH
33402: LD_VAR 0 8
33406: ARRAY
33407: ST_TO_ADDR
// if x = - 1 then
33408: LD_VAR 0 13
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: EQUAL
33417: IFFALSE 33421
// continue ;
33419: GO 33377
// PrepareHuman ( false , i , skill ) ;
33421: LD_INT 0
33423: PPUSH
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 4
33433: PPUSH
33434: CALL_OW 380
// un := CreateHuman ;
33438: LD_ADDR_VAR 0 14
33442: PUSH
33443: CALL_OW 44
33447: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33448: LD_VAR 0 14
33452: PPUSH
33453: LD_VAR 0 1
33457: PPUSH
33458: CALL_OW 250
33462: PPUSH
33463: LD_VAR 0 1
33467: PPUSH
33468: CALL_OW 251
33472: PPUSH
33473: LD_INT 10
33475: PPUSH
33476: LD_INT 0
33478: PPUSH
33479: CALL_OW 50
// result := result ^ un ;
33483: LD_ADDR_VAR 0 7
33487: PUSH
33488: LD_VAR 0 7
33492: PUSH
33493: LD_VAR 0 14
33497: ADD
33498: ST_TO_ADDR
// end ;
33499: GO 33377
33501: POP
33502: POP
// end ; end ;
33503: LD_VAR 0 7
33507: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33508: LD_INT 0
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
// result := false ;
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 0
33533: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33534: LD_VAR 0 1
33538: NOT
33539: PUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: CALL_OW 266
33549: PUSH
33550: LD_INT 32
33552: PUSH
33553: LD_INT 33
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: IN
33560: NOT
33561: OR
33562: IFFALSE 33566
// exit ;
33564: GO 34675
// nat := GetNation ( tower ) ;
33566: LD_ADDR_VAR 0 12
33570: PUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: CALL_OW 248
33580: ST_TO_ADDR
// side := GetSide ( tower ) ;
33581: LD_ADDR_VAR 0 16
33585: PUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 255
33595: ST_TO_ADDR
// x := GetX ( tower ) ;
33596: LD_ADDR_VAR 0 10
33600: PUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 250
33610: ST_TO_ADDR
// y := GetY ( tower ) ;
33611: LD_ADDR_VAR 0 11
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 251
33625: ST_TO_ADDR
// if not x or not y then
33626: LD_VAR 0 10
33630: NOT
33631: PUSH
33632: LD_VAR 0 11
33636: NOT
33637: OR
33638: IFFALSE 33642
// exit ;
33640: GO 34675
// weapon := 0 ;
33642: LD_ADDR_VAR 0 18
33646: PUSH
33647: LD_INT 0
33649: ST_TO_ADDR
// fac_list := [ ] ;
33650: LD_ADDR_VAR 0 17
33654: PUSH
33655: EMPTY
33656: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33657: LD_ADDR_VAR 0 6
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 274
33671: PPUSH
33672: LD_VAR 0 2
33676: PPUSH
33677: LD_INT 0
33679: PPUSH
33680: CALL 31246 0 3
33684: PPUSH
33685: LD_INT 30
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PPUSH
33695: CALL_OW 72
33699: ST_TO_ADDR
// if not factories then
33700: LD_VAR 0 6
33704: NOT
33705: IFFALSE 33709
// exit ;
33707: GO 34675
// for i in factories do
33709: LD_ADDR_VAR 0 8
33713: PUSH
33714: LD_VAR 0 6
33718: PUSH
33719: FOR_IN
33720: IFFALSE 33745
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33722: LD_ADDR_VAR 0 17
33726: PUSH
33727: LD_VAR 0 17
33731: PUSH
33732: LD_VAR 0 8
33736: PPUSH
33737: CALL_OW 478
33741: UNION
33742: ST_TO_ADDR
33743: GO 33719
33745: POP
33746: POP
// if not fac_list then
33747: LD_VAR 0 17
33751: NOT
33752: IFFALSE 33756
// exit ;
33754: GO 34675
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33756: LD_ADDR_VAR 0 5
33760: PUSH
33761: LD_INT 4
33763: PUSH
33764: LD_INT 5
33766: PUSH
33767: LD_INT 9
33769: PUSH
33770: LD_INT 10
33772: PUSH
33773: LD_INT 6
33775: PUSH
33776: LD_INT 7
33778: PUSH
33779: LD_INT 11
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 27
33793: PUSH
33794: LD_INT 28
33796: PUSH
33797: LD_INT 26
33799: PUSH
33800: LD_INT 30
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 43
33811: PUSH
33812: LD_INT 44
33814: PUSH
33815: LD_INT 46
33817: PUSH
33818: LD_INT 45
33820: PUSH
33821: LD_INT 47
33823: PUSH
33824: LD_INT 49
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: PUSH
33840: LD_VAR 0 12
33844: ARRAY
33845: ST_TO_ADDR
// list := list isect fac_list ;
33846: LD_ADDR_VAR 0 5
33850: PUSH
33851: LD_VAR 0 5
33855: PUSH
33856: LD_VAR 0 17
33860: ISECT
33861: ST_TO_ADDR
// if not list then
33862: LD_VAR 0 5
33866: NOT
33867: IFFALSE 33871
// exit ;
33869: GO 34675
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33871: LD_VAR 0 12
33875: PUSH
33876: LD_INT 3
33878: EQUAL
33879: PUSH
33880: LD_INT 49
33882: PUSH
33883: LD_VAR 0 5
33887: IN
33888: AND
33889: PUSH
33890: LD_INT 31
33892: PPUSH
33893: LD_VAR 0 16
33897: PPUSH
33898: CALL_OW 321
33902: PUSH
33903: LD_INT 2
33905: EQUAL
33906: AND
33907: IFFALSE 33967
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33909: LD_INT 22
33911: PUSH
33912: LD_VAR 0 16
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 35
33923: PUSH
33924: LD_INT 49
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 91
33933: PUSH
33934: LD_VAR 0 1
33938: PUSH
33939: LD_INT 10
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 69
33956: NOT
33957: IFFALSE 33967
// weapon := ru_time_lapser ;
33959: LD_ADDR_VAR 0 18
33963: PUSH
33964: LD_INT 49
33966: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33967: LD_VAR 0 12
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: IN
33982: PUSH
33983: LD_INT 11
33985: PUSH
33986: LD_VAR 0 5
33990: IN
33991: PUSH
33992: LD_INT 30
33994: PUSH
33995: LD_VAR 0 5
33999: IN
34000: OR
34001: AND
34002: PUSH
34003: LD_INT 6
34005: PPUSH
34006: LD_VAR 0 16
34010: PPUSH
34011: CALL_OW 321
34015: PUSH
34016: LD_INT 2
34018: EQUAL
34019: AND
34020: IFFALSE 34185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34022: LD_INT 22
34024: PUSH
34025: LD_VAR 0 16
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 35
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 35
34049: PUSH
34050: LD_INT 30
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 91
34064: PUSH
34065: LD_VAR 0 1
34069: PUSH
34070: LD_INT 18
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: PPUSH
34083: CALL_OW 69
34087: NOT
34088: PUSH
34089: LD_INT 22
34091: PUSH
34092: LD_VAR 0 16
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 30
34106: PUSH
34107: LD_INT 32
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 30
34116: PUSH
34117: LD_INT 33
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 91
34131: PUSH
34132: LD_VAR 0 1
34136: PUSH
34137: LD_INT 12
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: PUSH
34150: EMPTY
34151: LIST
34152: PPUSH
34153: CALL_OW 69
34157: PUSH
34158: LD_INT 2
34160: GREATER
34161: AND
34162: IFFALSE 34185
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34164: LD_ADDR_VAR 0 18
34168: PUSH
34169: LD_INT 11
34171: PUSH
34172: LD_INT 30
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_VAR 0 12
34183: ARRAY
34184: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34185: LD_VAR 0 18
34189: NOT
34190: PUSH
34191: LD_INT 40
34193: PPUSH
34194: LD_VAR 0 16
34198: PPUSH
34199: CALL_OW 321
34203: PUSH
34204: LD_INT 2
34206: EQUAL
34207: AND
34208: PUSH
34209: LD_INT 7
34211: PUSH
34212: LD_VAR 0 5
34216: IN
34217: PUSH
34218: LD_INT 28
34220: PUSH
34221: LD_VAR 0 5
34225: IN
34226: OR
34227: PUSH
34228: LD_INT 45
34230: PUSH
34231: LD_VAR 0 5
34235: IN
34236: OR
34237: AND
34238: IFFALSE 34492
// begin hex := GetHexInfo ( x , y ) ;
34240: LD_ADDR_VAR 0 4
34244: PUSH
34245: LD_VAR 0 10
34249: PPUSH
34250: LD_VAR 0 11
34254: PPUSH
34255: CALL_OW 546
34259: ST_TO_ADDR
// if hex [ 1 ] then
34260: LD_VAR 0 4
34264: PUSH
34265: LD_INT 1
34267: ARRAY
34268: IFFALSE 34272
// exit ;
34270: GO 34675
// height := hex [ 2 ] ;
34272: LD_ADDR_VAR 0 15
34276: PUSH
34277: LD_VAR 0 4
34281: PUSH
34282: LD_INT 2
34284: ARRAY
34285: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34286: LD_ADDR_VAR 0 14
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 3
34299: PUSH
34300: LD_INT 5
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: ST_TO_ADDR
// for i in tmp do
34309: LD_ADDR_VAR 0 8
34313: PUSH
34314: LD_VAR 0 14
34318: PUSH
34319: FOR_IN
34320: IFFALSE 34490
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34322: LD_ADDR_VAR 0 9
34326: PUSH
34327: LD_VAR 0 10
34331: PPUSH
34332: LD_VAR 0 8
34336: PPUSH
34337: LD_INT 5
34339: PPUSH
34340: CALL_OW 272
34344: PUSH
34345: LD_VAR 0 11
34349: PPUSH
34350: LD_VAR 0 8
34354: PPUSH
34355: LD_INT 5
34357: PPUSH
34358: CALL_OW 273
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34367: LD_VAR 0 9
34371: PUSH
34372: LD_INT 1
34374: ARRAY
34375: PPUSH
34376: LD_VAR 0 9
34380: PUSH
34381: LD_INT 2
34383: ARRAY
34384: PPUSH
34385: CALL_OW 488
34389: IFFALSE 34488
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: LD_VAR 0 9
34400: PUSH
34401: LD_INT 1
34403: ARRAY
34404: PPUSH
34405: LD_VAR 0 9
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: PPUSH
34414: CALL_OW 546
34418: ST_TO_ADDR
// if hex [ 1 ] then
34419: LD_VAR 0 4
34423: PUSH
34424: LD_INT 1
34426: ARRAY
34427: IFFALSE 34431
// continue ;
34429: GO 34319
// h := hex [ 2 ] ;
34431: LD_ADDR_VAR 0 13
34435: PUSH
34436: LD_VAR 0 4
34440: PUSH
34441: LD_INT 2
34443: ARRAY
34444: ST_TO_ADDR
// if h + 7 < height then
34445: LD_VAR 0 13
34449: PUSH
34450: LD_INT 7
34452: PLUS
34453: PUSH
34454: LD_VAR 0 15
34458: LESS
34459: IFFALSE 34488
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34461: LD_ADDR_VAR 0 18
34465: PUSH
34466: LD_INT 7
34468: PUSH
34469: LD_INT 28
34471: PUSH
34472: LD_INT 45
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: LIST
34479: PUSH
34480: LD_VAR 0 12
34484: ARRAY
34485: ST_TO_ADDR
// break ;
34486: GO 34490
// end ; end ; end ;
34488: GO 34319
34490: POP
34491: POP
// end ; if not weapon then
34492: LD_VAR 0 18
34496: NOT
34497: IFFALSE 34557
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_VAR 0 5
34508: PUSH
34509: LD_INT 11
34511: PUSH
34512: LD_INT 30
34514: PUSH
34515: LD_INT 49
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: DIFF
34523: ST_TO_ADDR
// if not list then
34524: LD_VAR 0 5
34528: NOT
34529: IFFALSE 34533
// exit ;
34531: GO 34675
// weapon := list [ rand ( 1 , list ) ] ;
34533: LD_ADDR_VAR 0 18
34537: PUSH
34538: LD_VAR 0 5
34542: PUSH
34543: LD_INT 1
34545: PPUSH
34546: LD_VAR 0 5
34550: PPUSH
34551: CALL_OW 12
34555: ARRAY
34556: ST_TO_ADDR
// end ; if weapon then
34557: LD_VAR 0 18
34561: IFFALSE 34675
// begin tmp := CostOfWeapon ( weapon ) ;
34563: LD_ADDR_VAR 0 14
34567: PUSH
34568: LD_VAR 0 18
34572: PPUSH
34573: CALL_OW 451
34577: ST_TO_ADDR
// j := GetBase ( tower ) ;
34578: LD_ADDR_VAR 0 9
34582: PUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL_OW 274
34592: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34593: LD_VAR 0 9
34597: PPUSH
34598: LD_INT 1
34600: PPUSH
34601: CALL_OW 275
34605: PUSH
34606: LD_VAR 0 14
34610: PUSH
34611: LD_INT 1
34613: ARRAY
34614: GREATEREQUAL
34615: PUSH
34616: LD_VAR 0 9
34620: PPUSH
34621: LD_INT 2
34623: PPUSH
34624: CALL_OW 275
34628: PUSH
34629: LD_VAR 0 14
34633: PUSH
34634: LD_INT 2
34636: ARRAY
34637: GREATEREQUAL
34638: AND
34639: PUSH
34640: LD_VAR 0 9
34644: PPUSH
34645: LD_INT 3
34647: PPUSH
34648: CALL_OW 275
34652: PUSH
34653: LD_VAR 0 14
34657: PUSH
34658: LD_INT 3
34660: ARRAY
34661: GREATEREQUAL
34662: AND
34663: IFFALSE 34675
// result := weapon ;
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: LD_VAR 0 18
34674: ST_TO_ADDR
// end ; end ;
34675: LD_VAR 0 3
34679: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34680: LD_INT 0
34682: PPUSH
34683: PPUSH
// result := true ;
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_INT 1
34691: ST_TO_ADDR
// if array1 = array2 then
34692: LD_VAR 0 1
34696: PUSH
34697: LD_VAR 0 2
34701: EQUAL
34702: IFFALSE 34762
// begin for i = 1 to array1 do
34704: LD_ADDR_VAR 0 4
34708: PUSH
34709: DOUBLE
34710: LD_INT 1
34712: DEC
34713: ST_TO_ADDR
34714: LD_VAR 0 1
34718: PUSH
34719: FOR_TO
34720: IFFALSE 34758
// if array1 [ i ] <> array2 [ i ] then
34722: LD_VAR 0 1
34726: PUSH
34727: LD_VAR 0 4
34731: ARRAY
34732: PUSH
34733: LD_VAR 0 2
34737: PUSH
34738: LD_VAR 0 4
34742: ARRAY
34743: NONEQUAL
34744: IFFALSE 34756
// begin result := false ;
34746: LD_ADDR_VAR 0 3
34750: PUSH
34751: LD_INT 0
34753: ST_TO_ADDR
// break ;
34754: GO 34758
// end ;
34756: GO 34719
34758: POP
34759: POP
// end else
34760: GO 34770
// result := false ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 0
34769: ST_TO_ADDR
// end ;
34770: LD_VAR 0 3
34774: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34775: LD_INT 0
34777: PPUSH
34778: PPUSH
// if not array1 or not array2 then
34779: LD_VAR 0 1
34783: NOT
34784: PUSH
34785: LD_VAR 0 2
34789: NOT
34790: OR
34791: IFFALSE 34795
// exit ;
34793: GO 34859
// result := true ;
34795: LD_ADDR_VAR 0 3
34799: PUSH
34800: LD_INT 1
34802: ST_TO_ADDR
// for i = 1 to array1 do
34803: LD_ADDR_VAR 0 4
34807: PUSH
34808: DOUBLE
34809: LD_INT 1
34811: DEC
34812: ST_TO_ADDR
34813: LD_VAR 0 1
34817: PUSH
34818: FOR_TO
34819: IFFALSE 34857
// if array1 [ i ] <> array2 [ i ] then
34821: LD_VAR 0 1
34825: PUSH
34826: LD_VAR 0 4
34830: ARRAY
34831: PUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 4
34841: ARRAY
34842: NONEQUAL
34843: IFFALSE 34855
// begin result := false ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_INT 0
34852: ST_TO_ADDR
// break ;
34853: GO 34857
// end ;
34855: GO 34818
34857: POP
34858: POP
// end ;
34859: LD_VAR 0 3
34863: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34864: LD_INT 0
34866: PPUSH
34867: PPUSH
34868: PPUSH
// pom := GetBase ( fac ) ;
34869: LD_ADDR_VAR 0 5
34873: PUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 274
34883: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34884: LD_ADDR_VAR 0 4
34888: PUSH
34889: LD_VAR 0 2
34893: PUSH
34894: LD_INT 1
34896: ARRAY
34897: PPUSH
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 2
34905: ARRAY
34906: PPUSH
34907: LD_VAR 0 2
34911: PUSH
34912: LD_INT 3
34914: ARRAY
34915: PPUSH
34916: LD_VAR 0 2
34920: PUSH
34921: LD_INT 4
34923: ARRAY
34924: PPUSH
34925: CALL_OW 449
34929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34930: LD_ADDR_VAR 0 3
34934: PUSH
34935: LD_VAR 0 5
34939: PPUSH
34940: LD_INT 1
34942: PPUSH
34943: CALL_OW 275
34947: PUSH
34948: LD_VAR 0 4
34952: PUSH
34953: LD_INT 1
34955: ARRAY
34956: GREATEREQUAL
34957: PUSH
34958: LD_VAR 0 5
34962: PPUSH
34963: LD_INT 2
34965: PPUSH
34966: CALL_OW 275
34970: PUSH
34971: LD_VAR 0 4
34975: PUSH
34976: LD_INT 2
34978: ARRAY
34979: GREATEREQUAL
34980: AND
34981: PUSH
34982: LD_VAR 0 5
34986: PPUSH
34987: LD_INT 3
34989: PPUSH
34990: CALL_OW 275
34994: PUSH
34995: LD_VAR 0 4
34999: PUSH
35000: LD_INT 3
35002: ARRAY
35003: GREATEREQUAL
35004: AND
35005: ST_TO_ADDR
// end ;
35006: LD_VAR 0 3
35010: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35011: LD_INT 0
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
// pom := GetBase ( building ) ;
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 274
35031: ST_TO_ADDR
// if not pom then
35032: LD_VAR 0 3
35036: NOT
35037: IFFALSE 35041
// exit ;
35039: GO 35211
// btype := GetBType ( building ) ;
35041: LD_ADDR_VAR 0 5
35045: PUSH
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 266
35055: ST_TO_ADDR
// if btype = b_armoury then
35056: LD_VAR 0 5
35060: PUSH
35061: LD_INT 4
35063: EQUAL
35064: IFFALSE 35074
// btype := b_barracks ;
35066: LD_ADDR_VAR 0 5
35070: PUSH
35071: LD_INT 5
35073: ST_TO_ADDR
// if btype = b_depot then
35074: LD_VAR 0 5
35078: PUSH
35079: LD_INT 0
35081: EQUAL
35082: IFFALSE 35092
// btype := b_warehouse ;
35084: LD_ADDR_VAR 0 5
35088: PUSH
35089: LD_INT 1
35091: ST_TO_ADDR
// if btype = b_workshop then
35092: LD_VAR 0 5
35096: PUSH
35097: LD_INT 2
35099: EQUAL
35100: IFFALSE 35110
// btype := b_factory ;
35102: LD_ADDR_VAR 0 5
35106: PUSH
35107: LD_INT 3
35109: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35110: LD_ADDR_VAR 0 4
35114: PUSH
35115: LD_VAR 0 5
35119: PPUSH
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL_OW 248
35129: PPUSH
35130: CALL_OW 450
35134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35135: LD_ADDR_VAR 0 2
35139: PUSH
35140: LD_VAR 0 3
35144: PPUSH
35145: LD_INT 1
35147: PPUSH
35148: CALL_OW 275
35152: PUSH
35153: LD_VAR 0 4
35157: PUSH
35158: LD_INT 1
35160: ARRAY
35161: GREATEREQUAL
35162: PUSH
35163: LD_VAR 0 3
35167: PPUSH
35168: LD_INT 2
35170: PPUSH
35171: CALL_OW 275
35175: PUSH
35176: LD_VAR 0 4
35180: PUSH
35181: LD_INT 2
35183: ARRAY
35184: GREATEREQUAL
35185: AND
35186: PUSH
35187: LD_VAR 0 3
35191: PPUSH
35192: LD_INT 3
35194: PPUSH
35195: CALL_OW 275
35199: PUSH
35200: LD_VAR 0 4
35204: PUSH
35205: LD_INT 3
35207: ARRAY
35208: GREATEREQUAL
35209: AND
35210: ST_TO_ADDR
// end ;
35211: LD_VAR 0 2
35215: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35216: LD_INT 0
35218: PPUSH
35219: PPUSH
35220: PPUSH
// pom := GetBase ( building ) ;
35221: LD_ADDR_VAR 0 4
35225: PUSH
35226: LD_VAR 0 1
35230: PPUSH
35231: CALL_OW 274
35235: ST_TO_ADDR
// if not pom then
35236: LD_VAR 0 4
35240: NOT
35241: IFFALSE 35245
// exit ;
35243: GO 35346
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35245: LD_ADDR_VAR 0 5
35249: PUSH
35250: LD_VAR 0 2
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 248
35264: PPUSH
35265: CALL_OW 450
35269: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_VAR 0 4
35279: PPUSH
35280: LD_INT 1
35282: PPUSH
35283: CALL_OW 275
35287: PUSH
35288: LD_VAR 0 5
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: GREATEREQUAL
35297: PUSH
35298: LD_VAR 0 4
35302: PPUSH
35303: LD_INT 2
35305: PPUSH
35306: CALL_OW 275
35310: PUSH
35311: LD_VAR 0 5
35315: PUSH
35316: LD_INT 2
35318: ARRAY
35319: GREATEREQUAL
35320: AND
35321: PUSH
35322: LD_VAR 0 4
35326: PPUSH
35327: LD_INT 3
35329: PPUSH
35330: CALL_OW 275
35334: PUSH
35335: LD_VAR 0 5
35339: PUSH
35340: LD_INT 3
35342: ARRAY
35343: GREATEREQUAL
35344: AND
35345: ST_TO_ADDR
// end ;
35346: LD_VAR 0 3
35350: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35351: LD_INT 0
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
// result := false ;
35364: LD_ADDR_VAR 0 8
35368: PUSH
35369: LD_INT 0
35371: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35372: LD_VAR 0 5
35376: NOT
35377: PUSH
35378: LD_VAR 0 1
35382: NOT
35383: OR
35384: PUSH
35385: LD_VAR 0 2
35389: NOT
35390: OR
35391: PUSH
35392: LD_VAR 0 3
35396: NOT
35397: OR
35398: IFFALSE 35402
// exit ;
35400: GO 36216
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35402: LD_ADDR_VAR 0 14
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: LD_VAR 0 2
35416: PPUSH
35417: LD_VAR 0 3
35421: PPUSH
35422: LD_VAR 0 4
35426: PPUSH
35427: LD_VAR 0 5
35431: PUSH
35432: LD_INT 1
35434: ARRAY
35435: PPUSH
35436: CALL_OW 248
35440: PPUSH
35441: LD_INT 0
35443: PPUSH
35444: CALL 37449 0 6
35448: ST_TO_ADDR
// if not hexes then
35449: LD_VAR 0 14
35453: NOT
35454: IFFALSE 35458
// exit ;
35456: GO 36216
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35458: LD_ADDR_VAR 0 17
35462: PUSH
35463: LD_VAR 0 5
35467: PPUSH
35468: LD_INT 22
35470: PUSH
35471: LD_VAR 0 13
35475: PPUSH
35476: CALL_OW 255
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 30
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 30
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PPUSH
35517: CALL_OW 72
35521: ST_TO_ADDR
// for i = 1 to hexes do
35522: LD_ADDR_VAR 0 9
35526: PUSH
35527: DOUBLE
35528: LD_INT 1
35530: DEC
35531: ST_TO_ADDR
35532: LD_VAR 0 14
35536: PUSH
35537: FOR_TO
35538: IFFALSE 36214
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35540: LD_ADDR_VAR 0 13
35544: PUSH
35545: LD_VAR 0 14
35549: PUSH
35550: LD_VAR 0 9
35554: ARRAY
35555: PUSH
35556: LD_INT 1
35558: ARRAY
35559: PPUSH
35560: LD_VAR 0 14
35564: PUSH
35565: LD_VAR 0 9
35569: ARRAY
35570: PUSH
35571: LD_INT 2
35573: ARRAY
35574: PPUSH
35575: CALL_OW 428
35579: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35580: LD_VAR 0 14
35584: PUSH
35585: LD_VAR 0 9
35589: ARRAY
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: LD_VAR 0 14
35599: PUSH
35600: LD_VAR 0 9
35604: ARRAY
35605: PUSH
35606: LD_INT 2
35608: ARRAY
35609: PPUSH
35610: CALL_OW 351
35614: PUSH
35615: LD_VAR 0 14
35619: PUSH
35620: LD_VAR 0 9
35624: ARRAY
35625: PUSH
35626: LD_INT 1
35628: ARRAY
35629: PPUSH
35630: LD_VAR 0 14
35634: PUSH
35635: LD_VAR 0 9
35639: ARRAY
35640: PUSH
35641: LD_INT 2
35643: ARRAY
35644: PPUSH
35645: CALL_OW 488
35649: NOT
35650: OR
35651: PUSH
35652: LD_VAR 0 13
35656: PPUSH
35657: CALL_OW 247
35661: PUSH
35662: LD_INT 3
35664: EQUAL
35665: OR
35666: IFFALSE 35672
// exit ;
35668: POP
35669: POP
35670: GO 36216
// if not tmp then
35672: LD_VAR 0 13
35676: NOT
35677: IFFALSE 35681
// continue ;
35679: GO 35537
// result := true ;
35681: LD_ADDR_VAR 0 8
35685: PUSH
35686: LD_INT 1
35688: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35689: LD_VAR 0 6
35693: PUSH
35694: LD_VAR 0 13
35698: PPUSH
35699: CALL_OW 247
35703: PUSH
35704: LD_INT 2
35706: EQUAL
35707: AND
35708: PUSH
35709: LD_VAR 0 13
35713: PPUSH
35714: CALL_OW 263
35718: PUSH
35719: LD_INT 1
35721: EQUAL
35722: AND
35723: IFFALSE 35887
// begin if IsDrivenBy ( tmp ) then
35725: LD_VAR 0 13
35729: PPUSH
35730: CALL_OW 311
35734: IFFALSE 35738
// continue ;
35736: GO 35537
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35738: LD_VAR 0 6
35742: PPUSH
35743: LD_INT 3
35745: PUSH
35746: LD_INT 60
35748: PUSH
35749: EMPTY
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: LD_INT 55
35761: PUSH
35762: EMPTY
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL_OW 72
35777: IFFALSE 35885
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35779: LD_ADDR_VAR 0 18
35783: PUSH
35784: LD_VAR 0 6
35788: PPUSH
35789: LD_INT 3
35791: PUSH
35792: LD_INT 60
35794: PUSH
35795: EMPTY
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 3
35804: PUSH
35805: LD_INT 55
35807: PUSH
35808: EMPTY
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PPUSH
35819: CALL_OW 72
35823: PUSH
35824: LD_INT 1
35826: ARRAY
35827: ST_TO_ADDR
// if IsInUnit ( driver ) then
35828: LD_VAR 0 18
35832: PPUSH
35833: CALL_OW 310
35837: IFFALSE 35848
// ComExit ( driver ) ;
35839: LD_VAR 0 18
35843: PPUSH
35844: CALL 61137 0 1
// AddComEnterUnit ( driver , tmp ) ;
35848: LD_VAR 0 18
35852: PPUSH
35853: LD_VAR 0 13
35857: PPUSH
35858: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35862: LD_VAR 0 18
35866: PPUSH
35867: LD_VAR 0 7
35871: PPUSH
35872: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35876: LD_VAR 0 18
35880: PPUSH
35881: CALL_OW 181
// end ; continue ;
35885: GO 35537
// end ; if not cleaners or not tmp in cleaners then
35887: LD_VAR 0 6
35891: NOT
35892: PUSH
35893: LD_VAR 0 13
35897: PUSH
35898: LD_VAR 0 6
35902: IN
35903: NOT
35904: OR
35905: IFFALSE 36212
// begin if dep then
35907: LD_VAR 0 17
35911: IFFALSE 36047
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35913: LD_ADDR_VAR 0 16
35917: PUSH
35918: LD_VAR 0 17
35922: PUSH
35923: LD_INT 1
35925: ARRAY
35926: PPUSH
35927: CALL_OW 250
35931: PPUSH
35932: LD_VAR 0 17
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PPUSH
35941: CALL_OW 254
35945: PPUSH
35946: LD_INT 5
35948: PPUSH
35949: CALL_OW 272
35953: PUSH
35954: LD_VAR 0 17
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: PPUSH
35963: CALL_OW 251
35967: PPUSH
35968: LD_VAR 0 17
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PPUSH
35977: CALL_OW 254
35981: PPUSH
35982: LD_INT 5
35984: PPUSH
35985: CALL_OW 273
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35994: LD_VAR 0 16
35998: PUSH
35999: LD_INT 1
36001: ARRAY
36002: PPUSH
36003: LD_VAR 0 16
36007: PUSH
36008: LD_INT 2
36010: ARRAY
36011: PPUSH
36012: CALL_OW 488
36016: IFFALSE 36047
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36018: LD_VAR 0 13
36022: PPUSH
36023: LD_VAR 0 16
36027: PUSH
36028: LD_INT 1
36030: ARRAY
36031: PPUSH
36032: LD_VAR 0 16
36036: PUSH
36037: LD_INT 2
36039: ARRAY
36040: PPUSH
36041: CALL_OW 111
// continue ;
36045: GO 35537
// end ; end ; r := GetDir ( tmp ) ;
36047: LD_ADDR_VAR 0 15
36051: PUSH
36052: LD_VAR 0 13
36056: PPUSH
36057: CALL_OW 254
36061: ST_TO_ADDR
// if r = 5 then
36062: LD_VAR 0 15
36066: PUSH
36067: LD_INT 5
36069: EQUAL
36070: IFFALSE 36080
// r := 0 ;
36072: LD_ADDR_VAR 0 15
36076: PUSH
36077: LD_INT 0
36079: ST_TO_ADDR
// for j = r to 5 do
36080: LD_ADDR_VAR 0 10
36084: PUSH
36085: DOUBLE
36086: LD_VAR 0 15
36090: DEC
36091: ST_TO_ADDR
36092: LD_INT 5
36094: PUSH
36095: FOR_TO
36096: IFFALSE 36210
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36098: LD_ADDR_VAR 0 11
36102: PUSH
36103: LD_VAR 0 13
36107: PPUSH
36108: CALL_OW 250
36112: PPUSH
36113: LD_VAR 0 10
36117: PPUSH
36118: LD_INT 2
36120: PPUSH
36121: CALL_OW 272
36125: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36126: LD_ADDR_VAR 0 12
36130: PUSH
36131: LD_VAR 0 13
36135: PPUSH
36136: CALL_OW 251
36140: PPUSH
36141: LD_VAR 0 10
36145: PPUSH
36146: LD_INT 2
36148: PPUSH
36149: CALL_OW 273
36153: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36154: LD_VAR 0 11
36158: PPUSH
36159: LD_VAR 0 12
36163: PPUSH
36164: CALL_OW 488
36168: PUSH
36169: LD_VAR 0 11
36173: PPUSH
36174: LD_VAR 0 12
36178: PPUSH
36179: CALL_OW 428
36183: NOT
36184: AND
36185: IFFALSE 36208
// begin ComMoveXY ( tmp , _x , _y ) ;
36187: LD_VAR 0 13
36191: PPUSH
36192: LD_VAR 0 11
36196: PPUSH
36197: LD_VAR 0 12
36201: PPUSH
36202: CALL_OW 111
// break ;
36206: GO 36210
// end ; end ;
36208: GO 36095
36210: POP
36211: POP
// end ; end ;
36212: GO 35537
36214: POP
36215: POP
// end ;
36216: LD_VAR 0 8
36220: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36221: LD_INT 0
36223: PPUSH
// result := true ;
36224: LD_ADDR_VAR 0 3
36228: PUSH
36229: LD_INT 1
36231: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36232: LD_VAR 0 2
36236: PUSH
36237: LD_INT 24
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36251
36243: LD_INT 33
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36276
36251: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 32
36259: PPUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: CALL_OW 321
36269: PUSH
36270: LD_INT 2
36272: EQUAL
36273: ST_TO_ADDR
36274: GO 36592
36276: LD_INT 20
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 36309
36284: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_INT 6
36292: PPUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: CALL_OW 321
36302: PUSH
36303: LD_INT 2
36305: EQUAL
36306: ST_TO_ADDR
36307: GO 36592
36309: LD_INT 22
36311: DOUBLE
36312: EQUAL
36313: IFTRUE 36323
36315: LD_INT 36
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36323
36321: GO 36348
36323: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36324: LD_ADDR_VAR 0 3
36328: PUSH
36329: LD_INT 15
36331: PPUSH
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL_OW 321
36341: PUSH
36342: LD_INT 2
36344: EQUAL
36345: ST_TO_ADDR
36346: GO 36592
36348: LD_INT 30
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36381
36356: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_INT 20
36364: PPUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 321
36374: PUSH
36375: LD_INT 2
36377: EQUAL
36378: ST_TO_ADDR
36379: GO 36592
36381: LD_INT 28
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36395
36387: LD_INT 21
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36395
36393: GO 36420
36395: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 21
36403: PPUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 321
36413: PUSH
36414: LD_INT 2
36416: EQUAL
36417: ST_TO_ADDR
36418: GO 36592
36420: LD_INT 16
36422: DOUBLE
36423: EQUAL
36424: IFTRUE 36428
36426: GO 36453
36428: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: LD_INT 84
36436: PPUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 321
36446: PUSH
36447: LD_INT 2
36449: EQUAL
36450: ST_TO_ADDR
36451: GO 36592
36453: LD_INT 19
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36467
36459: LD_INT 23
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36467
36465: GO 36492
36467: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36468: LD_ADDR_VAR 0 3
36472: PUSH
36473: LD_INT 83
36475: PPUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 321
36485: PUSH
36486: LD_INT 2
36488: EQUAL
36489: ST_TO_ADDR
36490: GO 36592
36492: LD_INT 17
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36500
36498: GO 36525
36500: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_INT 39
36508: PPUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 321
36518: PUSH
36519: LD_INT 2
36521: EQUAL
36522: ST_TO_ADDR
36523: GO 36592
36525: LD_INT 18
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36558
36533: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 40
36541: PPUSH
36542: LD_VAR 0 1
36546: PPUSH
36547: CALL_OW 321
36551: PUSH
36552: LD_INT 2
36554: EQUAL
36555: ST_TO_ADDR
36556: GO 36592
36558: LD_INT 27
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36591
36566: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36567: LD_ADDR_VAR 0 3
36571: PUSH
36572: LD_INT 35
36574: PPUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 321
36584: PUSH
36585: LD_INT 2
36587: EQUAL
36588: ST_TO_ADDR
36589: GO 36592
36591: POP
// end ;
36592: LD_VAR 0 3
36596: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36597: LD_INT 0
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
// result := false ;
36610: LD_ADDR_VAR 0 6
36614: PUSH
36615: LD_INT 0
36617: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36618: LD_VAR 0 1
36622: NOT
36623: PUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL_OW 266
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: IN
36644: NOT
36645: OR
36646: PUSH
36647: LD_VAR 0 2
36651: NOT
36652: OR
36653: PUSH
36654: LD_VAR 0 5
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 3
36670: PUSH
36671: LD_INT 4
36673: PUSH
36674: LD_INT 5
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: IN
36685: NOT
36686: OR
36687: PUSH
36688: LD_VAR 0 3
36692: PPUSH
36693: LD_VAR 0 4
36697: PPUSH
36698: CALL_OW 488
36702: NOT
36703: OR
36704: IFFALSE 36708
// exit ;
36706: GO 37444
// side := GetSide ( depot ) ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 255
36722: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36723: LD_VAR 0 9
36727: PPUSH
36728: LD_VAR 0 2
36732: PPUSH
36733: CALL 36221 0 2
36737: NOT
36738: IFFALSE 36742
// exit ;
36740: GO 37444
// pom := GetBase ( depot ) ;
36742: LD_ADDR_VAR 0 10
36746: PUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 274
36756: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36757: LD_ADDR_VAR 0 11
36761: PUSH
36762: LD_VAR 0 2
36766: PPUSH
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 248
36776: PPUSH
36777: CALL_OW 450
36781: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36782: LD_VAR 0 10
36786: PPUSH
36787: LD_INT 1
36789: PPUSH
36790: CALL_OW 275
36794: PUSH
36795: LD_VAR 0 11
36799: PUSH
36800: LD_INT 1
36802: ARRAY
36803: GREATEREQUAL
36804: PUSH
36805: LD_VAR 0 10
36809: PPUSH
36810: LD_INT 2
36812: PPUSH
36813: CALL_OW 275
36817: PUSH
36818: LD_VAR 0 11
36822: PUSH
36823: LD_INT 2
36825: ARRAY
36826: GREATEREQUAL
36827: AND
36828: PUSH
36829: LD_VAR 0 10
36833: PPUSH
36834: LD_INT 3
36836: PPUSH
36837: CALL_OW 275
36841: PUSH
36842: LD_VAR 0 11
36846: PUSH
36847: LD_INT 3
36849: ARRAY
36850: GREATEREQUAL
36851: AND
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 37444
// if GetBType ( depot ) = b_depot then
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 266
36866: PUSH
36867: LD_INT 0
36869: EQUAL
36870: IFFALSE 36882
// dist := 28 else
36872: LD_ADDR_VAR 0 14
36876: PUSH
36877: LD_INT 28
36879: ST_TO_ADDR
36880: GO 36890
// dist := 36 ;
36882: LD_ADDR_VAR 0 14
36886: PUSH
36887: LD_INT 36
36889: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36890: LD_VAR 0 1
36894: PPUSH
36895: LD_VAR 0 3
36899: PPUSH
36900: LD_VAR 0 4
36904: PPUSH
36905: CALL_OW 297
36909: PUSH
36910: LD_VAR 0 14
36914: GREATER
36915: IFFALSE 36919
// exit ;
36917: GO 37444
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36919: LD_ADDR_VAR 0 12
36923: PUSH
36924: LD_VAR 0 2
36928: PPUSH
36929: LD_VAR 0 3
36933: PPUSH
36934: LD_VAR 0 4
36938: PPUSH
36939: LD_VAR 0 5
36943: PPUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 248
36953: PPUSH
36954: LD_INT 0
36956: PPUSH
36957: CALL 37449 0 6
36961: ST_TO_ADDR
// if not hexes then
36962: LD_VAR 0 12
36966: NOT
36967: IFFALSE 36971
// exit ;
36969: GO 37444
// hex := GetHexInfo ( x , y ) ;
36971: LD_ADDR_VAR 0 15
36975: PUSH
36976: LD_VAR 0 3
36980: PPUSH
36981: LD_VAR 0 4
36985: PPUSH
36986: CALL_OW 546
36990: ST_TO_ADDR
// if hex [ 1 ] then
36991: LD_VAR 0 15
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: IFFALSE 37003
// exit ;
37001: GO 37444
// height := hex [ 2 ] ;
37003: LD_ADDR_VAR 0 13
37007: PUSH
37008: LD_VAR 0 15
37012: PUSH
37013: LD_INT 2
37015: ARRAY
37016: ST_TO_ADDR
// for i = 1 to hexes do
37017: LD_ADDR_VAR 0 7
37021: PUSH
37022: DOUBLE
37023: LD_INT 1
37025: DEC
37026: ST_TO_ADDR
37027: LD_VAR 0 12
37031: PUSH
37032: FOR_TO
37033: IFFALSE 37363
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37035: LD_VAR 0 12
37039: PUSH
37040: LD_VAR 0 7
37044: ARRAY
37045: PUSH
37046: LD_INT 1
37048: ARRAY
37049: PPUSH
37050: LD_VAR 0 12
37054: PUSH
37055: LD_VAR 0 7
37059: ARRAY
37060: PUSH
37061: LD_INT 2
37063: ARRAY
37064: PPUSH
37065: CALL_OW 488
37069: NOT
37070: PUSH
37071: LD_VAR 0 12
37075: PUSH
37076: LD_VAR 0 7
37080: ARRAY
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: PPUSH
37086: LD_VAR 0 12
37090: PUSH
37091: LD_VAR 0 7
37095: ARRAY
37096: PUSH
37097: LD_INT 2
37099: ARRAY
37100: PPUSH
37101: CALL_OW 428
37105: PUSH
37106: LD_INT 0
37108: GREATER
37109: OR
37110: PUSH
37111: LD_VAR 0 12
37115: PUSH
37116: LD_VAR 0 7
37120: ARRAY
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: LD_VAR 0 12
37130: PUSH
37131: LD_VAR 0 7
37135: ARRAY
37136: PUSH
37137: LD_INT 2
37139: ARRAY
37140: PPUSH
37141: CALL_OW 351
37145: OR
37146: IFFALSE 37152
// exit ;
37148: POP
37149: POP
37150: GO 37444
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37152: LD_ADDR_VAR 0 8
37156: PUSH
37157: LD_VAR 0 12
37161: PUSH
37162: LD_VAR 0 7
37166: ARRAY
37167: PUSH
37168: LD_INT 1
37170: ARRAY
37171: PPUSH
37172: LD_VAR 0 12
37176: PUSH
37177: LD_VAR 0 7
37181: ARRAY
37182: PUSH
37183: LD_INT 2
37185: ARRAY
37186: PPUSH
37187: CALL_OW 546
37191: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37192: LD_VAR 0 8
37196: PUSH
37197: LD_INT 1
37199: ARRAY
37200: PUSH
37201: LD_VAR 0 8
37205: PUSH
37206: LD_INT 2
37208: ARRAY
37209: PUSH
37210: LD_VAR 0 13
37214: PUSH
37215: LD_INT 2
37217: PLUS
37218: GREATER
37219: OR
37220: PUSH
37221: LD_VAR 0 8
37225: PUSH
37226: LD_INT 2
37228: ARRAY
37229: PUSH
37230: LD_VAR 0 13
37234: PUSH
37235: LD_INT 2
37237: MINUS
37238: LESS
37239: OR
37240: PUSH
37241: LD_VAR 0 8
37245: PUSH
37246: LD_INT 3
37248: ARRAY
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 8
37255: PUSH
37256: LD_INT 9
37258: PUSH
37259: LD_INT 10
37261: PUSH
37262: LD_INT 11
37264: PUSH
37265: LD_INT 12
37267: PUSH
37268: LD_INT 13
37270: PUSH
37271: LD_INT 16
37273: PUSH
37274: LD_INT 17
37276: PUSH
37277: LD_INT 18
37279: PUSH
37280: LD_INT 19
37282: PUSH
37283: LD_INT 20
37285: PUSH
37286: LD_INT 21
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: IN
37304: NOT
37305: OR
37306: PUSH
37307: LD_VAR 0 8
37311: PUSH
37312: LD_INT 5
37314: ARRAY
37315: NOT
37316: OR
37317: PUSH
37318: LD_VAR 0 8
37322: PUSH
37323: LD_INT 6
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: LD_INT 7
37335: PUSH
37336: LD_INT 9
37338: PUSH
37339: LD_INT 10
37341: PUSH
37342: LD_INT 11
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: IN
37353: NOT
37354: OR
37355: IFFALSE 37361
// exit ;
37357: POP
37358: POP
37359: GO 37444
// end ;
37361: GO 37032
37363: POP
37364: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37365: LD_VAR 0 9
37369: PPUSH
37370: LD_VAR 0 3
37374: PPUSH
37375: LD_VAR 0 4
37379: PPUSH
37380: LD_INT 20
37382: PPUSH
37383: CALL 29396 0 4
37387: PUSH
37388: LD_INT 4
37390: ARRAY
37391: IFFALSE 37395
// exit ;
37393: GO 37444
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37395: LD_VAR 0 2
37399: PUSH
37400: LD_INT 29
37402: PUSH
37403: LD_INT 30
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: IN
37410: PUSH
37411: LD_VAR 0 3
37415: PPUSH
37416: LD_VAR 0 4
37420: PPUSH
37421: LD_VAR 0 9
37425: PPUSH
37426: CALL_OW 440
37430: NOT
37431: AND
37432: IFFALSE 37436
// exit ;
37434: GO 37444
// result := true ;
37436: LD_ADDR_VAR 0 6
37440: PUSH
37441: LD_INT 1
37443: ST_TO_ADDR
// end ;
37444: LD_VAR 0 6
37448: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37449: LD_INT 0
37451: PPUSH
37452: PPUSH
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
// result = [ ] ;
37509: LD_ADDR_VAR 0 7
37513: PUSH
37514: EMPTY
37515: ST_TO_ADDR
// temp_list = [ ] ;
37516: LD_ADDR_VAR 0 9
37520: PUSH
37521: EMPTY
37522: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37523: LD_VAR 0 4
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: LD_INT 4
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: IN
37554: NOT
37555: PUSH
37556: LD_VAR 0 1
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: IN
37571: PUSH
37572: LD_VAR 0 5
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: IN
37591: NOT
37592: AND
37593: OR
37594: IFFALSE 37598
// exit ;
37596: GO 55989
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37598: LD_VAR 0 1
37602: PUSH
37603: LD_INT 6
37605: PUSH
37606: LD_INT 7
37608: PUSH
37609: LD_INT 8
37611: PUSH
37612: LD_INT 13
37614: PUSH
37615: LD_INT 12
37617: PUSH
37618: LD_INT 15
37620: PUSH
37621: LD_INT 11
37623: PUSH
37624: LD_INT 14
37626: PUSH
37627: LD_INT 10
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: IN
37641: IFFALSE 37651
// btype = b_lab ;
37643: LD_ADDR_VAR 0 1
37647: PUSH
37648: LD_INT 6
37650: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37651: LD_VAR 0 6
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: IN
37670: NOT
37671: PUSH
37672: LD_VAR 0 1
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: LD_INT 6
37691: PUSH
37692: LD_INT 36
37694: PUSH
37695: LD_INT 4
37697: PUSH
37698: LD_INT 5
37700: PUSH
37701: LD_INT 31
37703: PUSH
37704: LD_INT 32
37706: PUSH
37707: LD_INT 33
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: IN
37723: NOT
37724: PUSH
37725: LD_VAR 0 6
37729: PUSH
37730: LD_INT 1
37732: EQUAL
37733: AND
37734: OR
37735: PUSH
37736: LD_VAR 0 1
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: IN
37751: NOT
37752: PUSH
37753: LD_VAR 0 6
37757: PUSH
37758: LD_INT 2
37760: EQUAL
37761: AND
37762: OR
37763: IFFALSE 37773
// mode = 0 ;
37765: LD_ADDR_VAR 0 6
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// case mode of 0 :
37773: LD_VAR 0 6
37777: PUSH
37778: LD_INT 0
37780: DOUBLE
37781: EQUAL
37782: IFTRUE 37786
37784: GO 49239
37786: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37787: LD_ADDR_VAR 0 11
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37980: LD_ADDR_VAR 0 12
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: NEG
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 3
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38176: LD_ADDR_VAR 0 13
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: LD_INT 3
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 3
38347: NEG
38348: PUSH
38349: LD_INT 3
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38375: LD_ADDR_VAR 0 14
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38571: LD_ADDR_VAR 0 15
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38764: LD_ADDR_VAR 0 16
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38957: LD_ADDR_VAR 0 17
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39187: LD_ADDR_VAR 0 18
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39417: LD_ADDR_VAR 0 19
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39647: LD_ADDR_VAR 0 20
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39877: LD_ADDR_VAR 0 21
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40107: LD_ADDR_VAR 0 22
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40337: LD_ADDR_VAR 0 23
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40617: LD_ADDR_VAR 0 24
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40893: LD_ADDR_VAR 0 25
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41167: LD_ADDR_VAR 0 26
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41443: LD_ADDR_VAR 0 27
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41723: LD_ADDR_VAR 0 28
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 3
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 3
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42005: LD_ADDR_VAR 0 29
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: LD_INT 3
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 3
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 3
42249: NEG
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42284: LD_ADDR_VAR 0 30
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 3
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42562: LD_ADDR_VAR 0 31
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 3
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 3
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42840: LD_ADDR_VAR 0 32
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 3
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43118: LD_ADDR_VAR 0 33
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 3
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43397: LD_ADDR_VAR 0 34
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 3
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 3
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43677: LD_ADDR_VAR 0 35
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43789: LD_ADDR_VAR 0 36
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43901: LD_ADDR_VAR 0 37
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44013: LD_ADDR_VAR 0 38
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44125: LD_ADDR_VAR 0 39
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44237: LD_ADDR_VAR 0 40
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44349: LD_ADDR_VAR 0 41
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 3
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 3
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44699: LD_ADDR_VAR 0 42
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 2
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 3
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45049: LD_ADDR_VAR 0 43
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 3
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 3
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45397: LD_ADDR_VAR 0 44
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 3
45671: NEG
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45747: LD_ADDR_VAR 0 45
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 3
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 3
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46097: LD_ADDR_VAR 0 46
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46445: LD_ADDR_VAR 0 47
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46596: LD_ADDR_VAR 0 48
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46743: LD_ADDR_VAR 0 49
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46887: LD_ADDR_VAR 0 50
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47031: LD_ADDR_VAR 0 51
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47178: LD_ADDR_VAR 0 52
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47329: LD_ADDR_VAR 0 53
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47559: LD_ADDR_VAR 0 54
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47789: LD_ADDR_VAR 0 55
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48019: LD_ADDR_VAR 0 56
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48249: LD_ADDR_VAR 0 57
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48479: LD_ADDR_VAR 0 58
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48709: LD_ADDR_VAR 0 59
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48797: LD_ADDR_VAR 0 60
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48885: LD_ADDR_VAR 0 61
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48973: LD_ADDR_VAR 0 62
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49061: LD_ADDR_VAR 0 63
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49149: LD_ADDR_VAR 0 64
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// end ; 1 :
49237: GO 55134
49239: LD_INT 1
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49247
49245: GO 51870
49247: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49248: LD_ADDR_VAR 0 11
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: LIST
49291: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49292: LD_ADDR_VAR 0 12
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49333: LD_ADDR_VAR 0 13
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: LIST
49372: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49373: LD_ADDR_VAR 0 14
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49414: LD_ADDR_VAR 0 15
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49458: LD_ADDR_VAR 0 16
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49504: LD_ADDR_VAR 0 17
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 3
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49548: LD_ADDR_VAR 0 18
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49589: LD_ADDR_VAR 0 19
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49629: LD_ADDR_VAR 0 20
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49670: LD_ADDR_VAR 0 21
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49714: LD_ADDR_VAR 0 22
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49760: LD_ADDR_VAR 0 23
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 4
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49804: LD_ADDR_VAR 0 24
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49845: LD_ADDR_VAR 0 25
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 4
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49885: LD_ADDR_VAR 0 26
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 4
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49926: LD_ADDR_VAR 0 27
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49970: LD_ADDR_VAR 0 28
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: LD_INT 4
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 4
50001: NEG
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50016: LD_ADDR_VAR 0 29
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 4
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 4
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 5
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 5
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 6
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 6
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 5
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50171: LD_ADDR_VAR 0 30
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 4
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 4
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 4
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 5
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 5
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 6
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 6
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50314: LD_ADDR_VAR 0 31
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 4
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 4
50361: PUSH
50362: LD_INT 4
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 5
50391: PUSH
50392: LD_INT 5
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 4
50401: PUSH
50402: LD_INT 5
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 6
50411: PUSH
50412: LD_INT 5
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 6
50421: PUSH
50422: LD_INT 6
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 5
50431: PUSH
50432: LD_INT 6
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50453: LD_ADDR_VAR 0 32
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 4
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 5
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 5
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 4
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 6
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 6
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 5
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50596: LD_ADDR_VAR 0 33
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 4
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 4
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 4
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 5
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 5
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 5
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 6
50716: NEG
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 6
50727: NEG
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50751: LD_ADDR_VAR 0 34
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 4
50806: NEG
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 4
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 5
50842: NEG
50843: PUSH
50844: LD_INT 4
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 5
50854: NEG
50855: PUSH
50856: LD_INT 5
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 5
50866: NEG
50867: PUSH
50868: LD_INT 6
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 6
50878: NEG
50879: PUSH
50880: LD_INT 5
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 6
50890: NEG
50891: PUSH
50892: LD_INT 6
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50914: LD_ADDR_VAR 0 41
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50958: LD_ADDR_VAR 0 42
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50999: LD_ADDR_VAR 0 43
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51039: LD_ADDR_VAR 0 44
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51080: LD_ADDR_VAR 0 45
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51124: LD_ADDR_VAR 0 46
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 3
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51170: LD_ADDR_VAR 0 47
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51203: LD_ADDR_VAR 0 48
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51234: LD_ADDR_VAR 0 49
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51263: LD_ADDR_VAR 0 50
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51292: LD_ADDR_VAR 0 51
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 52
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51356: LD_ADDR_VAR 0 53
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51400: LD_ADDR_VAR 0 54
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 3
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51441: LD_ADDR_VAR 0 55
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51481: LD_ADDR_VAR 0 56
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51522: LD_ADDR_VAR 0 57
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51566: LD_ADDR_VAR 0 58
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 3
51585: NEG
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51612: LD_ADDR_VAR 0 59
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51656: LD_ADDR_VAR 0 60
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51697: LD_ADDR_VAR 0 61
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51737: LD_ADDR_VAR 0 62
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51778: LD_ADDR_VAR 0 63
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51822: LD_ADDR_VAR 0 64
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// end ; 2 :
51868: GO 55134
51870: LD_INT 2
51872: DOUBLE
51873: EQUAL
51874: IFTRUE 51878
51876: GO 55133
51878: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51879: LD_ADDR_VAR 0 29
51883: PUSH
51884: LD_INT 4
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 5
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 5
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 4
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 4
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 4
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 4
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 5
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 5
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 4
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 4
52264: NEG
52265: PUSH
52266: LD_INT 4
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: LD_INT 5
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 5
52324: NEG
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: NEG
52337: PUSH
52338: LD_INT 5
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: LD_INT 5
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 5
52360: NEG
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52417: LD_ADDR_VAR 0 30
52421: PUSH
52422: LD_INT 4
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 4
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 5
52444: PUSH
52445: LD_INT 4
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 5
52454: PUSH
52455: LD_INT 5
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 5
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: PUSH
52505: LD_INT 5
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 4
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 4
52607: NEG
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 4
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 4
52652: NEG
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 5
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 5
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 5
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: LD_INT 3
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: LD_INT 4
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 4
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: NEG
52782: PUSH
52783: LD_INT 4
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 4
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 4
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 5
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 4
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 5
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 5
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52964: LD_ADDR_VAR 0 31
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 4
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 5
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 5
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 5
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 4
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 4
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: LD_INT 5
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: NEG
53191: PUSH
53192: LD_INT 4
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 5
53226: NEG
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 5
53238: NEG
53239: PUSH
53240: LD_INT 5
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 5
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 5
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 4
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 4
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 4
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 4
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 5
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53514: LD_ADDR_VAR 0 32
53518: PUSH
53519: LD_INT 4
53521: NEG
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 4
53532: NEG
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 4
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 5
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 5
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 5
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 4
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 4
53683: NEG
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: LD_INT 4
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 4
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 4
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 4
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 5
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 4
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 4
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 5
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 5
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 4
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 4
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 4
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 4
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 5
53946: PUSH
53947: LD_INT 4
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 5
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 4
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: PUSH
53977: LD_INT 4
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 5
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 5
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54061: LD_ADDR_VAR 0 33
54065: PUSH
54066: LD_INT 4
54068: NEG
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 4
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: LD_INT 4
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 5
54140: NEG
54141: PUSH
54142: LD_INT 5
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 5
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 5
54164: NEG
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 3
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 4
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 5
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 5
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: LD_INT 4
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 4
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 4
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 4
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 5
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 4
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 5
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54599: LD_ADDR_VAR 0 34
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 4
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 5
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: LD_INT 5
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 4
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 5
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 4
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 4
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 4
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 4
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 5
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// end ; end ;
55131: GO 55134
55133: POP
// case btype of b_depot , b_warehouse :
55134: LD_VAR 0 1
55138: PUSH
55139: LD_INT 0
55141: DOUBLE
55142: EQUAL
55143: IFTRUE 55153
55145: LD_INT 1
55147: DOUBLE
55148: EQUAL
55149: IFTRUE 55153
55151: GO 55354
55153: POP
// case nation of nation_american :
55154: LD_VAR 0 5
55158: PUSH
55159: LD_INT 1
55161: DOUBLE
55162: EQUAL
55163: IFTRUE 55167
55165: GO 55223
55167: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55168: LD_ADDR_VAR 0 9
55172: PUSH
55173: LD_VAR 0 11
55177: PUSH
55178: LD_VAR 0 12
55182: PUSH
55183: LD_VAR 0 13
55187: PUSH
55188: LD_VAR 0 14
55192: PUSH
55193: LD_VAR 0 15
55197: PUSH
55198: LD_VAR 0 16
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: PUSH
55211: LD_VAR 0 4
55215: PUSH
55216: LD_INT 1
55218: PLUS
55219: ARRAY
55220: ST_TO_ADDR
55221: GO 55352
55223: LD_INT 2
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55231
55229: GO 55287
55231: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55232: LD_ADDR_VAR 0 9
55236: PUSH
55237: LD_VAR 0 17
55241: PUSH
55242: LD_VAR 0 18
55246: PUSH
55247: LD_VAR 0 19
55251: PUSH
55252: LD_VAR 0 20
55256: PUSH
55257: LD_VAR 0 21
55261: PUSH
55262: LD_VAR 0 22
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: PUSH
55275: LD_VAR 0 4
55279: PUSH
55280: LD_INT 1
55282: PLUS
55283: ARRAY
55284: ST_TO_ADDR
55285: GO 55352
55287: LD_INT 3
55289: DOUBLE
55290: EQUAL
55291: IFTRUE 55295
55293: GO 55351
55295: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55296: LD_ADDR_VAR 0 9
55300: PUSH
55301: LD_VAR 0 23
55305: PUSH
55306: LD_VAR 0 24
55310: PUSH
55311: LD_VAR 0 25
55315: PUSH
55316: LD_VAR 0 26
55320: PUSH
55321: LD_VAR 0 27
55325: PUSH
55326: LD_VAR 0 28
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: PUSH
55339: LD_VAR 0 4
55343: PUSH
55344: LD_INT 1
55346: PLUS
55347: ARRAY
55348: ST_TO_ADDR
55349: GO 55352
55351: POP
55352: GO 55907
55354: LD_INT 2
55356: DOUBLE
55357: EQUAL
55358: IFTRUE 55368
55360: LD_INT 3
55362: DOUBLE
55363: EQUAL
55364: IFTRUE 55368
55366: GO 55424
55368: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55369: LD_ADDR_VAR 0 9
55373: PUSH
55374: LD_VAR 0 29
55378: PUSH
55379: LD_VAR 0 30
55383: PUSH
55384: LD_VAR 0 31
55388: PUSH
55389: LD_VAR 0 32
55393: PUSH
55394: LD_VAR 0 33
55398: PUSH
55399: LD_VAR 0 34
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: PUSH
55412: LD_VAR 0 4
55416: PUSH
55417: LD_INT 1
55419: PLUS
55420: ARRAY
55421: ST_TO_ADDR
55422: GO 55907
55424: LD_INT 16
55426: DOUBLE
55427: EQUAL
55428: IFTRUE 55486
55430: LD_INT 17
55432: DOUBLE
55433: EQUAL
55434: IFTRUE 55486
55436: LD_INT 18
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55486
55442: LD_INT 19
55444: DOUBLE
55445: EQUAL
55446: IFTRUE 55486
55448: LD_INT 22
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55486
55454: LD_INT 20
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55486
55460: LD_INT 21
55462: DOUBLE
55463: EQUAL
55464: IFTRUE 55486
55466: LD_INT 23
55468: DOUBLE
55469: EQUAL
55470: IFTRUE 55486
55472: LD_INT 24
55474: DOUBLE
55475: EQUAL
55476: IFTRUE 55486
55478: LD_INT 25
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55486
55484: GO 55542
55486: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55487: LD_ADDR_VAR 0 9
55491: PUSH
55492: LD_VAR 0 35
55496: PUSH
55497: LD_VAR 0 36
55501: PUSH
55502: LD_VAR 0 37
55506: PUSH
55507: LD_VAR 0 38
55511: PUSH
55512: LD_VAR 0 39
55516: PUSH
55517: LD_VAR 0 40
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: PUSH
55530: LD_VAR 0 4
55534: PUSH
55535: LD_INT 1
55537: PLUS
55538: ARRAY
55539: ST_TO_ADDR
55540: GO 55907
55542: LD_INT 6
55544: DOUBLE
55545: EQUAL
55546: IFTRUE 55598
55548: LD_INT 7
55550: DOUBLE
55551: EQUAL
55552: IFTRUE 55598
55554: LD_INT 8
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55598
55560: LD_INT 13
55562: DOUBLE
55563: EQUAL
55564: IFTRUE 55598
55566: LD_INT 12
55568: DOUBLE
55569: EQUAL
55570: IFTRUE 55598
55572: LD_INT 15
55574: DOUBLE
55575: EQUAL
55576: IFTRUE 55598
55578: LD_INT 11
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55598
55584: LD_INT 14
55586: DOUBLE
55587: EQUAL
55588: IFTRUE 55598
55590: LD_INT 10
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55598
55596: GO 55654
55598: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55599: LD_ADDR_VAR 0 9
55603: PUSH
55604: LD_VAR 0 41
55608: PUSH
55609: LD_VAR 0 42
55613: PUSH
55614: LD_VAR 0 43
55618: PUSH
55619: LD_VAR 0 44
55623: PUSH
55624: LD_VAR 0 45
55628: PUSH
55629: LD_VAR 0 46
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: PUSH
55642: LD_VAR 0 4
55646: PUSH
55647: LD_INT 1
55649: PLUS
55650: ARRAY
55651: ST_TO_ADDR
55652: GO 55907
55654: LD_INT 36
55656: DOUBLE
55657: EQUAL
55658: IFTRUE 55662
55660: GO 55718
55662: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55663: LD_ADDR_VAR 0 9
55667: PUSH
55668: LD_VAR 0 47
55672: PUSH
55673: LD_VAR 0 48
55677: PUSH
55678: LD_VAR 0 49
55682: PUSH
55683: LD_VAR 0 50
55687: PUSH
55688: LD_VAR 0 51
55692: PUSH
55693: LD_VAR 0 52
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: PUSH
55706: LD_VAR 0 4
55710: PUSH
55711: LD_INT 1
55713: PLUS
55714: ARRAY
55715: ST_TO_ADDR
55716: GO 55907
55718: LD_INT 4
55720: DOUBLE
55721: EQUAL
55722: IFTRUE 55744
55724: LD_INT 5
55726: DOUBLE
55727: EQUAL
55728: IFTRUE 55744
55730: LD_INT 34
55732: DOUBLE
55733: EQUAL
55734: IFTRUE 55744
55736: LD_INT 37
55738: DOUBLE
55739: EQUAL
55740: IFTRUE 55744
55742: GO 55800
55744: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55745: LD_ADDR_VAR 0 9
55749: PUSH
55750: LD_VAR 0 53
55754: PUSH
55755: LD_VAR 0 54
55759: PUSH
55760: LD_VAR 0 55
55764: PUSH
55765: LD_VAR 0 56
55769: PUSH
55770: LD_VAR 0 57
55774: PUSH
55775: LD_VAR 0 58
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: PUSH
55788: LD_VAR 0 4
55792: PUSH
55793: LD_INT 1
55795: PLUS
55796: ARRAY
55797: ST_TO_ADDR
55798: GO 55907
55800: LD_INT 31
55802: DOUBLE
55803: EQUAL
55804: IFTRUE 55850
55806: LD_INT 32
55808: DOUBLE
55809: EQUAL
55810: IFTRUE 55850
55812: LD_INT 33
55814: DOUBLE
55815: EQUAL
55816: IFTRUE 55850
55818: LD_INT 27
55820: DOUBLE
55821: EQUAL
55822: IFTRUE 55850
55824: LD_INT 26
55826: DOUBLE
55827: EQUAL
55828: IFTRUE 55850
55830: LD_INT 28
55832: DOUBLE
55833: EQUAL
55834: IFTRUE 55850
55836: LD_INT 29
55838: DOUBLE
55839: EQUAL
55840: IFTRUE 55850
55842: LD_INT 30
55844: DOUBLE
55845: EQUAL
55846: IFTRUE 55850
55848: GO 55906
55850: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55851: LD_ADDR_VAR 0 9
55855: PUSH
55856: LD_VAR 0 59
55860: PUSH
55861: LD_VAR 0 60
55865: PUSH
55866: LD_VAR 0 61
55870: PUSH
55871: LD_VAR 0 62
55875: PUSH
55876: LD_VAR 0 63
55880: PUSH
55881: LD_VAR 0 64
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: PUSH
55894: LD_VAR 0 4
55898: PUSH
55899: LD_INT 1
55901: PLUS
55902: ARRAY
55903: ST_TO_ADDR
55904: GO 55907
55906: POP
// temp_list2 = [ ] ;
55907: LD_ADDR_VAR 0 10
55911: PUSH
55912: EMPTY
55913: ST_TO_ADDR
// for i in temp_list do
55914: LD_ADDR_VAR 0 8
55918: PUSH
55919: LD_VAR 0 9
55923: PUSH
55924: FOR_IN
55925: IFFALSE 55977
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55927: LD_ADDR_VAR 0 10
55931: PUSH
55932: LD_VAR 0 10
55936: PUSH
55937: LD_VAR 0 8
55941: PUSH
55942: LD_INT 1
55944: ARRAY
55945: PUSH
55946: LD_VAR 0 2
55950: PLUS
55951: PUSH
55952: LD_VAR 0 8
55956: PUSH
55957: LD_INT 2
55959: ARRAY
55960: PUSH
55961: LD_VAR 0 3
55965: PLUS
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: ADD
55974: ST_TO_ADDR
55975: GO 55924
55977: POP
55978: POP
// result = temp_list2 ;
55979: LD_ADDR_VAR 0 7
55983: PUSH
55984: LD_VAR 0 10
55988: ST_TO_ADDR
// end ;
55989: LD_VAR 0 7
55993: RET
// export function EnemyInRange ( unit , dist ) ; begin
55994: LD_INT 0
55996: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55997: LD_ADDR_VAR 0 3
56001: PUSH
56002: LD_VAR 0 1
56006: PPUSH
56007: CALL_OW 255
56011: PPUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 250
56021: PPUSH
56022: LD_VAR 0 1
56026: PPUSH
56027: CALL_OW 251
56031: PPUSH
56032: LD_VAR 0 2
56036: PPUSH
56037: CALL 29396 0 4
56041: PUSH
56042: LD_INT 4
56044: ARRAY
56045: ST_TO_ADDR
// end ;
56046: LD_VAR 0 3
56050: RET
// export function PlayerSeeMe ( unit ) ; begin
56051: LD_INT 0
56053: PPUSH
// result := See ( your_side , unit ) ;
56054: LD_ADDR_VAR 0 2
56058: PUSH
56059: LD_OWVAR 2
56063: PPUSH
56064: LD_VAR 0 1
56068: PPUSH
56069: CALL_OW 292
56073: ST_TO_ADDR
// end ;
56074: LD_VAR 0 2
56078: RET
// export function ReverseDir ( unit ) ; begin
56079: LD_INT 0
56081: PPUSH
// if not unit then
56082: LD_VAR 0 1
56086: NOT
56087: IFFALSE 56091
// exit ;
56089: GO 56114
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56091: LD_ADDR_VAR 0 2
56095: PUSH
56096: LD_VAR 0 1
56100: PPUSH
56101: CALL_OW 254
56105: PUSH
56106: LD_INT 3
56108: PLUS
56109: PUSH
56110: LD_INT 6
56112: MOD
56113: ST_TO_ADDR
// end ;
56114: LD_VAR 0 2
56118: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56119: LD_INT 0
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
// if not unit or not hexes then
56127: LD_VAR 0 1
56131: NOT
56132: PUSH
56133: LD_VAR 0 2
56137: NOT
56138: OR
56139: IFFALSE 56143
// exit ;
56141: GO 56266
// dist := 9999 ;
56143: LD_ADDR_VAR 0 5
56147: PUSH
56148: LD_INT 9999
56150: ST_TO_ADDR
// for i = 1 to hexes do
56151: LD_ADDR_VAR 0 4
56155: PUSH
56156: DOUBLE
56157: LD_INT 1
56159: DEC
56160: ST_TO_ADDR
56161: LD_VAR 0 2
56165: PUSH
56166: FOR_TO
56167: IFFALSE 56254
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56169: LD_ADDR_VAR 0 6
56173: PUSH
56174: LD_VAR 0 1
56178: PPUSH
56179: LD_VAR 0 2
56183: PUSH
56184: LD_VAR 0 4
56188: ARRAY
56189: PUSH
56190: LD_INT 1
56192: ARRAY
56193: PPUSH
56194: LD_VAR 0 2
56198: PUSH
56199: LD_VAR 0 4
56203: ARRAY
56204: PUSH
56205: LD_INT 2
56207: ARRAY
56208: PPUSH
56209: CALL_OW 297
56213: ST_TO_ADDR
// if tdist < dist then
56214: LD_VAR 0 6
56218: PUSH
56219: LD_VAR 0 5
56223: LESS
56224: IFFALSE 56252
// begin hex := hexes [ i ] ;
56226: LD_ADDR_VAR 0 8
56230: PUSH
56231: LD_VAR 0 2
56235: PUSH
56236: LD_VAR 0 4
56240: ARRAY
56241: ST_TO_ADDR
// dist := tdist ;
56242: LD_ADDR_VAR 0 5
56246: PUSH
56247: LD_VAR 0 6
56251: ST_TO_ADDR
// end ; end ;
56252: GO 56166
56254: POP
56255: POP
// result := hex ;
56256: LD_ADDR_VAR 0 3
56260: PUSH
56261: LD_VAR 0 8
56265: ST_TO_ADDR
// end ;
56266: LD_VAR 0 3
56270: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56271: LD_INT 0
56273: PPUSH
56274: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56275: LD_VAR 0 1
56279: NOT
56280: PUSH
56281: LD_VAR 0 1
56285: PUSH
56286: LD_INT 21
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 23
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PPUSH
56310: CALL_OW 69
56314: IN
56315: NOT
56316: OR
56317: IFFALSE 56321
// exit ;
56319: GO 56368
// for i = 1 to 3 do
56321: LD_ADDR_VAR 0 3
56325: PUSH
56326: DOUBLE
56327: LD_INT 1
56329: DEC
56330: ST_TO_ADDR
56331: LD_INT 3
56333: PUSH
56334: FOR_TO
56335: IFFALSE 56366
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56337: LD_VAR 0 1
56341: PPUSH
56342: CALL_OW 250
56346: PPUSH
56347: LD_VAR 0 1
56351: PPUSH
56352: CALL_OW 251
56356: PPUSH
56357: LD_INT 1
56359: PPUSH
56360: CALL_OW 453
56364: GO 56334
56366: POP
56367: POP
// end ;
56368: LD_VAR 0 2
56372: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56373: LD_INT 0
56375: PPUSH
56376: PPUSH
56377: PPUSH
56378: PPUSH
56379: PPUSH
56380: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56381: LD_VAR 0 1
56385: NOT
56386: PUSH
56387: LD_VAR 0 2
56391: NOT
56392: OR
56393: PUSH
56394: LD_VAR 0 1
56398: PPUSH
56399: CALL_OW 314
56403: OR
56404: IFFALSE 56408
// exit ;
56406: GO 56849
// x := GetX ( enemy_unit ) ;
56408: LD_ADDR_VAR 0 7
56412: PUSH
56413: LD_VAR 0 2
56417: PPUSH
56418: CALL_OW 250
56422: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56423: LD_ADDR_VAR 0 8
56427: PUSH
56428: LD_VAR 0 2
56432: PPUSH
56433: CALL_OW 251
56437: ST_TO_ADDR
// if not x or not y then
56438: LD_VAR 0 7
56442: NOT
56443: PUSH
56444: LD_VAR 0 8
56448: NOT
56449: OR
56450: IFFALSE 56454
// exit ;
56452: GO 56849
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56454: LD_ADDR_VAR 0 6
56458: PUSH
56459: LD_VAR 0 7
56463: PPUSH
56464: LD_INT 0
56466: PPUSH
56467: LD_INT 4
56469: PPUSH
56470: CALL_OW 272
56474: PUSH
56475: LD_VAR 0 8
56479: PPUSH
56480: LD_INT 0
56482: PPUSH
56483: LD_INT 4
56485: PPUSH
56486: CALL_OW 273
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_VAR 0 7
56499: PPUSH
56500: LD_INT 1
56502: PPUSH
56503: LD_INT 4
56505: PPUSH
56506: CALL_OW 272
56510: PUSH
56511: LD_VAR 0 8
56515: PPUSH
56516: LD_INT 1
56518: PPUSH
56519: LD_INT 4
56521: PPUSH
56522: CALL_OW 273
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_VAR 0 7
56535: PPUSH
56536: LD_INT 2
56538: PPUSH
56539: LD_INT 4
56541: PPUSH
56542: CALL_OW 272
56546: PUSH
56547: LD_VAR 0 8
56551: PPUSH
56552: LD_INT 2
56554: PPUSH
56555: LD_INT 4
56557: PPUSH
56558: CALL_OW 273
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_VAR 0 7
56571: PPUSH
56572: LD_INT 3
56574: PPUSH
56575: LD_INT 4
56577: PPUSH
56578: CALL_OW 272
56582: PUSH
56583: LD_VAR 0 8
56587: PPUSH
56588: LD_INT 3
56590: PPUSH
56591: LD_INT 4
56593: PPUSH
56594: CALL_OW 273
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 7
56607: PPUSH
56608: LD_INT 4
56610: PPUSH
56611: LD_INT 4
56613: PPUSH
56614: CALL_OW 272
56618: PUSH
56619: LD_VAR 0 8
56623: PPUSH
56624: LD_INT 4
56626: PPUSH
56627: LD_INT 4
56629: PPUSH
56630: CALL_OW 273
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_VAR 0 7
56643: PPUSH
56644: LD_INT 5
56646: PPUSH
56647: LD_INT 4
56649: PPUSH
56650: CALL_OW 272
56654: PUSH
56655: LD_VAR 0 8
56659: PPUSH
56660: LD_INT 5
56662: PPUSH
56663: LD_INT 4
56665: PPUSH
56666: CALL_OW 273
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// for i = tmp downto 1 do
56683: LD_ADDR_VAR 0 4
56687: PUSH
56688: DOUBLE
56689: LD_VAR 0 6
56693: INC
56694: ST_TO_ADDR
56695: LD_INT 1
56697: PUSH
56698: FOR_DOWNTO
56699: IFFALSE 56800
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56701: LD_VAR 0 6
56705: PUSH
56706: LD_VAR 0 4
56710: ARRAY
56711: PUSH
56712: LD_INT 1
56714: ARRAY
56715: PPUSH
56716: LD_VAR 0 6
56720: PUSH
56721: LD_VAR 0 4
56725: ARRAY
56726: PUSH
56727: LD_INT 2
56729: ARRAY
56730: PPUSH
56731: CALL_OW 488
56735: NOT
56736: PUSH
56737: LD_VAR 0 6
56741: PUSH
56742: LD_VAR 0 4
56746: ARRAY
56747: PUSH
56748: LD_INT 1
56750: ARRAY
56751: PPUSH
56752: LD_VAR 0 6
56756: PUSH
56757: LD_VAR 0 4
56761: ARRAY
56762: PUSH
56763: LD_INT 2
56765: ARRAY
56766: PPUSH
56767: CALL_OW 428
56771: PUSH
56772: LD_INT 0
56774: NONEQUAL
56775: OR
56776: IFFALSE 56798
// tmp := Delete ( tmp , i ) ;
56778: LD_ADDR_VAR 0 6
56782: PUSH
56783: LD_VAR 0 6
56787: PPUSH
56788: LD_VAR 0 4
56792: PPUSH
56793: CALL_OW 3
56797: ST_TO_ADDR
56798: GO 56698
56800: POP
56801: POP
// j := GetClosestHex ( unit , tmp ) ;
56802: LD_ADDR_VAR 0 5
56806: PUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: LD_VAR 0 6
56816: PPUSH
56817: CALL 56119 0 2
56821: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56822: LD_VAR 0 1
56826: PPUSH
56827: LD_VAR 0 5
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: PPUSH
56836: LD_VAR 0 5
56840: PUSH
56841: LD_INT 2
56843: ARRAY
56844: PPUSH
56845: CALL_OW 111
// end ;
56849: LD_VAR 0 3
56853: RET
// export function PrepareApemanSoldier ( ) ; begin
56854: LD_INT 0
56856: PPUSH
// uc_nation := 0 ;
56857: LD_ADDR_OWVAR 21
56861: PUSH
56862: LD_INT 0
56864: ST_TO_ADDR
// hc_sex := sex_male ;
56865: LD_ADDR_OWVAR 27
56869: PUSH
56870: LD_INT 1
56872: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56873: LD_ADDR_OWVAR 28
56877: PUSH
56878: LD_INT 15
56880: ST_TO_ADDR
// hc_gallery :=  ;
56881: LD_ADDR_OWVAR 33
56885: PUSH
56886: LD_STRING 
56888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56889: LD_ADDR_OWVAR 31
56893: PUSH
56894: LD_INT 0
56896: PPUSH
56897: LD_INT 3
56899: PPUSH
56900: CALL_OW 12
56904: PUSH
56905: LD_INT 0
56907: PPUSH
56908: LD_INT 3
56910: PPUSH
56911: CALL_OW 12
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// end ;
56928: LD_VAR 0 1
56932: RET
// export function PrepareApemanEngineer ( ) ; begin
56933: LD_INT 0
56935: PPUSH
// uc_nation := 0 ;
56936: LD_ADDR_OWVAR 21
56940: PUSH
56941: LD_INT 0
56943: ST_TO_ADDR
// hc_sex := sex_male ;
56944: LD_ADDR_OWVAR 27
56948: PUSH
56949: LD_INT 1
56951: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56952: LD_ADDR_OWVAR 28
56956: PUSH
56957: LD_INT 16
56959: ST_TO_ADDR
// hc_gallery :=  ;
56960: LD_ADDR_OWVAR 33
56964: PUSH
56965: LD_STRING 
56967: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56968: LD_ADDR_OWVAR 31
56972: PUSH
56973: LD_INT 0
56975: PPUSH
56976: LD_INT 3
56978: PPUSH
56979: CALL_OW 12
56983: PUSH
56984: LD_INT 0
56986: PPUSH
56987: LD_INT 3
56989: PPUSH
56990: CALL_OW 12
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// end ;
57007: LD_VAR 0 1
57011: RET
// export function PrepareApeman ( agressivity ) ; begin
57012: LD_INT 0
57014: PPUSH
// uc_side := 0 ;
57015: LD_ADDR_OWVAR 20
57019: PUSH
57020: LD_INT 0
57022: ST_TO_ADDR
// uc_nation := 0 ;
57023: LD_ADDR_OWVAR 21
57027: PUSH
57028: LD_INT 0
57030: ST_TO_ADDR
// hc_sex := sex_male ;
57031: LD_ADDR_OWVAR 27
57035: PUSH
57036: LD_INT 1
57038: ST_TO_ADDR
// hc_class := class_apeman ;
57039: LD_ADDR_OWVAR 28
57043: PUSH
57044: LD_INT 12
57046: ST_TO_ADDR
// hc_gallery :=  ;
57047: LD_ADDR_OWVAR 33
57051: PUSH
57052: LD_STRING 
57054: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57055: LD_ADDR_OWVAR 35
57059: PUSH
57060: LD_VAR 0 1
57064: NEG
57065: PPUSH
57066: LD_VAR 0 1
57070: PPUSH
57071: CALL_OW 12
57075: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57076: LD_ADDR_OWVAR 31
57080: PUSH
57081: LD_INT 0
57083: PPUSH
57084: LD_INT 3
57086: PPUSH
57087: CALL_OW 12
57091: PUSH
57092: LD_INT 0
57094: PPUSH
57095: LD_INT 3
57097: PPUSH
57098: CALL_OW 12
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// end ;
57115: LD_VAR 0 2
57119: RET
// export function PrepareTiger ( agressivity ) ; begin
57120: LD_INT 0
57122: PPUSH
// uc_side := 0 ;
57123: LD_ADDR_OWVAR 20
57127: PUSH
57128: LD_INT 0
57130: ST_TO_ADDR
// uc_nation := 0 ;
57131: LD_ADDR_OWVAR 21
57135: PUSH
57136: LD_INT 0
57138: ST_TO_ADDR
// hc_class := class_tiger ;
57139: LD_ADDR_OWVAR 28
57143: PUSH
57144: LD_INT 14
57146: ST_TO_ADDR
// hc_gallery :=  ;
57147: LD_ADDR_OWVAR 33
57151: PUSH
57152: LD_STRING 
57154: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57155: LD_ADDR_OWVAR 35
57159: PUSH
57160: LD_VAR 0 1
57164: NEG
57165: PPUSH
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 12
57175: ST_TO_ADDR
// end ;
57176: LD_VAR 0 2
57180: RET
// export function PrepareEnchidna ( ) ; begin
57181: LD_INT 0
57183: PPUSH
// uc_side := 0 ;
57184: LD_ADDR_OWVAR 20
57188: PUSH
57189: LD_INT 0
57191: ST_TO_ADDR
// uc_nation := 0 ;
57192: LD_ADDR_OWVAR 21
57196: PUSH
57197: LD_INT 0
57199: ST_TO_ADDR
// hc_class := class_baggie ;
57200: LD_ADDR_OWVAR 28
57204: PUSH
57205: LD_INT 13
57207: ST_TO_ADDR
// hc_gallery :=  ;
57208: LD_ADDR_OWVAR 33
57212: PUSH
57213: LD_STRING 
57215: ST_TO_ADDR
// end ;
57216: LD_VAR 0 1
57220: RET
// export function PrepareFrog ( ) ; begin
57221: LD_INT 0
57223: PPUSH
// uc_side := 0 ;
57224: LD_ADDR_OWVAR 20
57228: PUSH
57229: LD_INT 0
57231: ST_TO_ADDR
// uc_nation := 0 ;
57232: LD_ADDR_OWVAR 21
57236: PUSH
57237: LD_INT 0
57239: ST_TO_ADDR
// hc_class := class_frog ;
57240: LD_ADDR_OWVAR 28
57244: PUSH
57245: LD_INT 19
57247: ST_TO_ADDR
// hc_gallery :=  ;
57248: LD_ADDR_OWVAR 33
57252: PUSH
57253: LD_STRING 
57255: ST_TO_ADDR
// end ;
57256: LD_VAR 0 1
57260: RET
// export function PrepareFish ( ) ; begin
57261: LD_INT 0
57263: PPUSH
// uc_side := 0 ;
57264: LD_ADDR_OWVAR 20
57268: PUSH
57269: LD_INT 0
57271: ST_TO_ADDR
// uc_nation := 0 ;
57272: LD_ADDR_OWVAR 21
57276: PUSH
57277: LD_INT 0
57279: ST_TO_ADDR
// hc_class := class_fish ;
57280: LD_ADDR_OWVAR 28
57284: PUSH
57285: LD_INT 20
57287: ST_TO_ADDR
// hc_gallery :=  ;
57288: LD_ADDR_OWVAR 33
57292: PUSH
57293: LD_STRING 
57295: ST_TO_ADDR
// end ;
57296: LD_VAR 0 1
57300: RET
// export function PrepareBird ( ) ; begin
57301: LD_INT 0
57303: PPUSH
// uc_side := 0 ;
57304: LD_ADDR_OWVAR 20
57308: PUSH
57309: LD_INT 0
57311: ST_TO_ADDR
// uc_nation := 0 ;
57312: LD_ADDR_OWVAR 21
57316: PUSH
57317: LD_INT 0
57319: ST_TO_ADDR
// hc_class := class_phororhacos ;
57320: LD_ADDR_OWVAR 28
57324: PUSH
57325: LD_INT 18
57327: ST_TO_ADDR
// hc_gallery :=  ;
57328: LD_ADDR_OWVAR 33
57332: PUSH
57333: LD_STRING 
57335: ST_TO_ADDR
// end ;
57336: LD_VAR 0 1
57340: RET
// export function PrepareHorse ( ) ; begin
57341: LD_INT 0
57343: PPUSH
// uc_side := 0 ;
57344: LD_ADDR_OWVAR 20
57348: PUSH
57349: LD_INT 0
57351: ST_TO_ADDR
// uc_nation := 0 ;
57352: LD_ADDR_OWVAR 21
57356: PUSH
57357: LD_INT 0
57359: ST_TO_ADDR
// hc_class := class_horse ;
57360: LD_ADDR_OWVAR 28
57364: PUSH
57365: LD_INT 21
57367: ST_TO_ADDR
// hc_gallery :=  ;
57368: LD_ADDR_OWVAR 33
57372: PUSH
57373: LD_STRING 
57375: ST_TO_ADDR
// end ;
57376: LD_VAR 0 1
57380: RET
// export function PrepareMastodont ( ) ; begin
57381: LD_INT 0
57383: PPUSH
// uc_side := 0 ;
57384: LD_ADDR_OWVAR 20
57388: PUSH
57389: LD_INT 0
57391: ST_TO_ADDR
// uc_nation := 0 ;
57392: LD_ADDR_OWVAR 21
57396: PUSH
57397: LD_INT 0
57399: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57400: LD_ADDR_OWVAR 37
57404: PUSH
57405: LD_INT 31
57407: ST_TO_ADDR
// vc_control := control_rider ;
57408: LD_ADDR_OWVAR 38
57412: PUSH
57413: LD_INT 4
57415: ST_TO_ADDR
// end ;
57416: LD_VAR 0 1
57420: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57421: LD_INT 0
57423: PPUSH
57424: PPUSH
57425: PPUSH
// uc_side = 0 ;
57426: LD_ADDR_OWVAR 20
57430: PUSH
57431: LD_INT 0
57433: ST_TO_ADDR
// uc_nation = 0 ;
57434: LD_ADDR_OWVAR 21
57438: PUSH
57439: LD_INT 0
57441: ST_TO_ADDR
// InitHc_All ( ) ;
57442: CALL_OW 584
// InitVc ;
57446: CALL_OW 20
// if mastodonts then
57450: LD_VAR 0 6
57454: IFFALSE 57521
// for i = 1 to mastodonts do
57456: LD_ADDR_VAR 0 11
57460: PUSH
57461: DOUBLE
57462: LD_INT 1
57464: DEC
57465: ST_TO_ADDR
57466: LD_VAR 0 6
57470: PUSH
57471: FOR_TO
57472: IFFALSE 57519
// begin vc_chassis := 31 ;
57474: LD_ADDR_OWVAR 37
57478: PUSH
57479: LD_INT 31
57481: ST_TO_ADDR
// vc_control := control_rider ;
57482: LD_ADDR_OWVAR 38
57486: PUSH
57487: LD_INT 4
57489: ST_TO_ADDR
// animal := CreateVehicle ;
57490: LD_ADDR_VAR 0 12
57494: PUSH
57495: CALL_OW 45
57499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57500: LD_VAR 0 12
57504: PPUSH
57505: LD_VAR 0 8
57509: PPUSH
57510: LD_INT 0
57512: PPUSH
57513: CALL 59656 0 3
// end ;
57517: GO 57471
57519: POP
57520: POP
// if horses then
57521: LD_VAR 0 5
57525: IFFALSE 57592
// for i = 1 to horses do
57527: LD_ADDR_VAR 0 11
57531: PUSH
57532: DOUBLE
57533: LD_INT 1
57535: DEC
57536: ST_TO_ADDR
57537: LD_VAR 0 5
57541: PUSH
57542: FOR_TO
57543: IFFALSE 57590
// begin hc_class := 21 ;
57545: LD_ADDR_OWVAR 28
57549: PUSH
57550: LD_INT 21
57552: ST_TO_ADDR
// hc_gallery :=  ;
57553: LD_ADDR_OWVAR 33
57557: PUSH
57558: LD_STRING 
57560: ST_TO_ADDR
// animal := CreateHuman ;
57561: LD_ADDR_VAR 0 12
57565: PUSH
57566: CALL_OW 44
57570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57571: LD_VAR 0 12
57575: PPUSH
57576: LD_VAR 0 8
57580: PPUSH
57581: LD_INT 0
57583: PPUSH
57584: CALL 59656 0 3
// end ;
57588: GO 57542
57590: POP
57591: POP
// if birds then
57592: LD_VAR 0 1
57596: IFFALSE 57663
// for i = 1 to birds do
57598: LD_ADDR_VAR 0 11
57602: PUSH
57603: DOUBLE
57604: LD_INT 1
57606: DEC
57607: ST_TO_ADDR
57608: LD_VAR 0 1
57612: PUSH
57613: FOR_TO
57614: IFFALSE 57661
// begin hc_class = 18 ;
57616: LD_ADDR_OWVAR 28
57620: PUSH
57621: LD_INT 18
57623: ST_TO_ADDR
// hc_gallery =  ;
57624: LD_ADDR_OWVAR 33
57628: PUSH
57629: LD_STRING 
57631: ST_TO_ADDR
// animal := CreateHuman ;
57632: LD_ADDR_VAR 0 12
57636: PUSH
57637: CALL_OW 44
57641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57642: LD_VAR 0 12
57646: PPUSH
57647: LD_VAR 0 8
57651: PPUSH
57652: LD_INT 0
57654: PPUSH
57655: CALL 59656 0 3
// end ;
57659: GO 57613
57661: POP
57662: POP
// if tigers then
57663: LD_VAR 0 2
57667: IFFALSE 57751
// for i = 1 to tigers do
57669: LD_ADDR_VAR 0 11
57673: PUSH
57674: DOUBLE
57675: LD_INT 1
57677: DEC
57678: ST_TO_ADDR
57679: LD_VAR 0 2
57683: PUSH
57684: FOR_TO
57685: IFFALSE 57749
// begin hc_class = class_tiger ;
57687: LD_ADDR_OWVAR 28
57691: PUSH
57692: LD_INT 14
57694: ST_TO_ADDR
// hc_gallery =  ;
57695: LD_ADDR_OWVAR 33
57699: PUSH
57700: LD_STRING 
57702: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57703: LD_ADDR_OWVAR 35
57707: PUSH
57708: LD_INT 7
57710: NEG
57711: PPUSH
57712: LD_INT 7
57714: PPUSH
57715: CALL_OW 12
57719: ST_TO_ADDR
// animal := CreateHuman ;
57720: LD_ADDR_VAR 0 12
57724: PUSH
57725: CALL_OW 44
57729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57730: LD_VAR 0 12
57734: PPUSH
57735: LD_VAR 0 8
57739: PPUSH
57740: LD_INT 0
57742: PPUSH
57743: CALL 59656 0 3
// end ;
57747: GO 57684
57749: POP
57750: POP
// if apemans then
57751: LD_VAR 0 3
57755: IFFALSE 57878
// for i = 1 to apemans do
57757: LD_ADDR_VAR 0 11
57761: PUSH
57762: DOUBLE
57763: LD_INT 1
57765: DEC
57766: ST_TO_ADDR
57767: LD_VAR 0 3
57771: PUSH
57772: FOR_TO
57773: IFFALSE 57876
// begin hc_class = class_apeman ;
57775: LD_ADDR_OWVAR 28
57779: PUSH
57780: LD_INT 12
57782: ST_TO_ADDR
// hc_gallery =  ;
57783: LD_ADDR_OWVAR 33
57787: PUSH
57788: LD_STRING 
57790: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57791: LD_ADDR_OWVAR 35
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PPUSH
57800: LD_INT 2
57802: PPUSH
57803: CALL_OW 12
57807: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57808: LD_ADDR_OWVAR 31
57812: PUSH
57813: LD_INT 1
57815: PPUSH
57816: LD_INT 3
57818: PPUSH
57819: CALL_OW 12
57823: PUSH
57824: LD_INT 1
57826: PPUSH
57827: LD_INT 3
57829: PPUSH
57830: CALL_OW 12
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: ST_TO_ADDR
// animal := CreateHuman ;
57847: LD_ADDR_VAR 0 12
57851: PUSH
57852: CALL_OW 44
57856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57857: LD_VAR 0 12
57861: PPUSH
57862: LD_VAR 0 8
57866: PPUSH
57867: LD_INT 0
57869: PPUSH
57870: CALL 59656 0 3
// end ;
57874: GO 57772
57876: POP
57877: POP
// if enchidnas then
57878: LD_VAR 0 4
57882: IFFALSE 57949
// for i = 1 to enchidnas do
57884: LD_ADDR_VAR 0 11
57888: PUSH
57889: DOUBLE
57890: LD_INT 1
57892: DEC
57893: ST_TO_ADDR
57894: LD_VAR 0 4
57898: PUSH
57899: FOR_TO
57900: IFFALSE 57947
// begin hc_class = 13 ;
57902: LD_ADDR_OWVAR 28
57906: PUSH
57907: LD_INT 13
57909: ST_TO_ADDR
// hc_gallery =  ;
57910: LD_ADDR_OWVAR 33
57914: PUSH
57915: LD_STRING 
57917: ST_TO_ADDR
// animal := CreateHuman ;
57918: LD_ADDR_VAR 0 12
57922: PUSH
57923: CALL_OW 44
57927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57928: LD_VAR 0 12
57932: PPUSH
57933: LD_VAR 0 8
57937: PPUSH
57938: LD_INT 0
57940: PPUSH
57941: CALL 59656 0 3
// end ;
57945: GO 57899
57947: POP
57948: POP
// if fishes then
57949: LD_VAR 0 7
57953: IFFALSE 58020
// for i = 1 to fishes do
57955: LD_ADDR_VAR 0 11
57959: PUSH
57960: DOUBLE
57961: LD_INT 1
57963: DEC
57964: ST_TO_ADDR
57965: LD_VAR 0 7
57969: PUSH
57970: FOR_TO
57971: IFFALSE 58018
// begin hc_class = 20 ;
57973: LD_ADDR_OWVAR 28
57977: PUSH
57978: LD_INT 20
57980: ST_TO_ADDR
// hc_gallery =  ;
57981: LD_ADDR_OWVAR 33
57985: PUSH
57986: LD_STRING 
57988: ST_TO_ADDR
// animal := CreateHuman ;
57989: LD_ADDR_VAR 0 12
57993: PUSH
57994: CALL_OW 44
57998: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57999: LD_VAR 0 12
58003: PPUSH
58004: LD_VAR 0 9
58008: PPUSH
58009: LD_INT 0
58011: PPUSH
58012: CALL 59656 0 3
// end ;
58016: GO 57970
58018: POP
58019: POP
// end ;
58020: LD_VAR 0 10
58024: RET
// export function WantHeal ( sci , unit ) ; begin
58025: LD_INT 0
58027: PPUSH
// if GetTaskList ( sci ) > 0 then
58028: LD_VAR 0 1
58032: PPUSH
58033: CALL_OW 437
58037: PUSH
58038: LD_INT 0
58040: GREATER
58041: IFFALSE 58111
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58043: LD_VAR 0 1
58047: PPUSH
58048: CALL_OW 437
58052: PUSH
58053: LD_INT 1
58055: ARRAY
58056: PUSH
58057: LD_INT 1
58059: ARRAY
58060: PUSH
58061: LD_STRING l
58063: EQUAL
58064: PUSH
58065: LD_VAR 0 1
58069: PPUSH
58070: CALL_OW 437
58074: PUSH
58075: LD_INT 1
58077: ARRAY
58078: PUSH
58079: LD_INT 4
58081: ARRAY
58082: PUSH
58083: LD_VAR 0 2
58087: EQUAL
58088: AND
58089: IFFALSE 58101
// result := true else
58091: LD_ADDR_VAR 0 3
58095: PUSH
58096: LD_INT 1
58098: ST_TO_ADDR
58099: GO 58109
// result := false ;
58101: LD_ADDR_VAR 0 3
58105: PUSH
58106: LD_INT 0
58108: ST_TO_ADDR
// end else
58109: GO 58119
// result := false ;
58111: LD_ADDR_VAR 0 3
58115: PUSH
58116: LD_INT 0
58118: ST_TO_ADDR
// end ;
58119: LD_VAR 0 3
58123: RET
// export function HealTarget ( sci ) ; begin
58124: LD_INT 0
58126: PPUSH
// if not sci then
58127: LD_VAR 0 1
58131: NOT
58132: IFFALSE 58136
// exit ;
58134: GO 58201
// result := 0 ;
58136: LD_ADDR_VAR 0 2
58140: PUSH
58141: LD_INT 0
58143: ST_TO_ADDR
// if GetTaskList ( sci ) then
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 437
58153: IFFALSE 58201
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58155: LD_VAR 0 1
58159: PPUSH
58160: CALL_OW 437
58164: PUSH
58165: LD_INT 1
58167: ARRAY
58168: PUSH
58169: LD_INT 1
58171: ARRAY
58172: PUSH
58173: LD_STRING l
58175: EQUAL
58176: IFFALSE 58201
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58178: LD_ADDR_VAR 0 2
58182: PUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: CALL_OW 437
58192: PUSH
58193: LD_INT 1
58195: ARRAY
58196: PUSH
58197: LD_INT 4
58199: ARRAY
58200: ST_TO_ADDR
// end ;
58201: LD_VAR 0 2
58205: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58206: LD_INT 0
58208: PPUSH
58209: PPUSH
58210: PPUSH
58211: PPUSH
// if not base_units then
58212: LD_VAR 0 1
58216: NOT
58217: IFFALSE 58221
// exit ;
58219: GO 58308
// result := false ;
58221: LD_ADDR_VAR 0 2
58225: PUSH
58226: LD_INT 0
58228: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58229: LD_ADDR_VAR 0 5
58233: PUSH
58234: LD_VAR 0 1
58238: PPUSH
58239: LD_INT 21
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PPUSH
58249: CALL_OW 72
58253: ST_TO_ADDR
// if not tmp then
58254: LD_VAR 0 5
58258: NOT
58259: IFFALSE 58263
// exit ;
58261: GO 58308
// for i in tmp do
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: LD_VAR 0 5
58272: PUSH
58273: FOR_IN
58274: IFFALSE 58306
// begin result := EnemyInRange ( i , 22 ) ;
58276: LD_ADDR_VAR 0 2
58280: PUSH
58281: LD_VAR 0 3
58285: PPUSH
58286: LD_INT 22
58288: PPUSH
58289: CALL 55994 0 2
58293: ST_TO_ADDR
// if result then
58294: LD_VAR 0 2
58298: IFFALSE 58304
// exit ;
58300: POP
58301: POP
58302: GO 58308
// end ;
58304: GO 58273
58306: POP
58307: POP
// end ;
58308: LD_VAR 0 2
58312: RET
// export function FilterByTag ( units , tag ) ; begin
58313: LD_INT 0
58315: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58316: LD_ADDR_VAR 0 3
58320: PUSH
58321: LD_VAR 0 1
58325: PPUSH
58326: LD_INT 120
58328: PUSH
58329: LD_VAR 0 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PPUSH
58338: CALL_OW 72
58342: ST_TO_ADDR
// end ;
58343: LD_VAR 0 3
58347: RET
// export function IsDriver ( un ) ; begin
58348: LD_INT 0
58350: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58351: LD_ADDR_VAR 0 2
58355: PUSH
58356: LD_VAR 0 1
58360: PUSH
58361: LD_INT 55
58363: PUSH
58364: EMPTY
58365: LIST
58366: PPUSH
58367: CALL_OW 69
58371: IN
58372: ST_TO_ADDR
// end ;
58373: LD_VAR 0 2
58377: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58378: LD_INT 0
58380: PPUSH
58381: PPUSH
// list := [ ] ;
58382: LD_ADDR_VAR 0 5
58386: PUSH
58387: EMPTY
58388: ST_TO_ADDR
// case d of 0 :
58389: LD_VAR 0 3
58393: PUSH
58394: LD_INT 0
58396: DOUBLE
58397: EQUAL
58398: IFTRUE 58402
58400: GO 58535
58402: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58403: LD_ADDR_VAR 0 5
58407: PUSH
58408: LD_VAR 0 1
58412: PUSH
58413: LD_INT 4
58415: MINUS
58416: PUSH
58417: LD_VAR 0 2
58421: PUSH
58422: LD_INT 4
58424: MINUS
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 3
58441: MINUS
58442: PUSH
58443: LD_VAR 0 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: PUSH
58456: LD_VAR 0 1
58460: PUSH
58461: LD_INT 4
58463: PLUS
58464: PUSH
58465: LD_VAR 0 2
58469: PUSH
58470: LD_INT 4
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 1
58482: PUSH
58483: LD_INT 3
58485: PLUS
58486: PUSH
58487: LD_VAR 0 2
58491: PUSH
58492: LD_INT 3
58494: PLUS
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: PUSH
58504: LD_VAR 0 1
58508: PUSH
58509: LD_VAR 0 2
58513: PUSH
58514: LD_INT 4
58516: PLUS
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: ST_TO_ADDR
// end ; 1 :
58533: GO 59233
58535: LD_INT 1
58537: DOUBLE
58538: EQUAL
58539: IFTRUE 58543
58541: GO 58676
58543: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58544: LD_ADDR_VAR 0 5
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_VAR 0 2
58558: PUSH
58559: LD_INT 4
58561: MINUS
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: PUSH
58571: LD_VAR 0 1
58575: PUSH
58576: LD_INT 3
58578: MINUS
58579: PUSH
58580: LD_VAR 0 2
58584: PUSH
58585: LD_INT 3
58587: MINUS
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: PUSH
58597: LD_VAR 0 1
58601: PUSH
58602: LD_INT 4
58604: MINUS
58605: PUSH
58606: LD_VAR 0 2
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: PUSH
58619: LD_VAR 0 1
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_INT 3
58631: PLUS
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: PUSH
58641: LD_VAR 0 1
58645: PUSH
58646: LD_INT 4
58648: PLUS
58649: PUSH
58650: LD_VAR 0 2
58654: PUSH
58655: LD_INT 4
58657: PLUS
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// end ; 2 :
58674: GO 59233
58676: LD_INT 2
58678: DOUBLE
58679: EQUAL
58680: IFTRUE 58684
58682: GO 58813
58684: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58685: LD_ADDR_VAR 0 5
58689: PUSH
58690: LD_VAR 0 1
58694: PUSH
58695: LD_VAR 0 2
58699: PUSH
58700: LD_INT 3
58702: MINUS
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: PUSH
58712: LD_VAR 0 1
58716: PUSH
58717: LD_INT 4
58719: PLUS
58720: PUSH
58721: LD_VAR 0 2
58725: PUSH
58726: LD_INT 4
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: PUSH
58734: LD_VAR 0 1
58738: PUSH
58739: LD_VAR 0 2
58743: PUSH
58744: LD_INT 4
58746: PLUS
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: PUSH
58756: LD_VAR 0 1
58760: PUSH
58761: LD_INT 3
58763: MINUS
58764: PUSH
58765: LD_VAR 0 2
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: PUSH
58778: LD_VAR 0 1
58782: PUSH
58783: LD_INT 4
58785: MINUS
58786: PUSH
58787: LD_VAR 0 2
58791: PUSH
58792: LD_INT 4
58794: MINUS
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: ST_TO_ADDR
// end ; 3 :
58811: GO 59233
58813: LD_INT 3
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58821
58819: GO 58954
58821: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58822: LD_ADDR_VAR 0 5
58826: PUSH
58827: LD_VAR 0 1
58831: PUSH
58832: LD_INT 3
58834: PLUS
58835: PUSH
58836: LD_VAR 0 2
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: LD_VAR 0 1
58853: PUSH
58854: LD_INT 4
58856: PLUS
58857: PUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 4
58865: PLUS
58866: PUSH
58867: LD_INT 5
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: PUSH
58875: LD_VAR 0 1
58879: PUSH
58880: LD_INT 4
58882: MINUS
58883: PUSH
58884: LD_VAR 0 2
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: PUSH
58897: LD_VAR 0 1
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 4
58909: MINUS
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: PUSH
58919: LD_VAR 0 1
58923: PUSH
58924: LD_INT 3
58926: MINUS
58927: PUSH
58928: LD_VAR 0 2
58932: PUSH
58933: LD_INT 3
58935: MINUS
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// end ; 4 :
58952: GO 59233
58954: LD_INT 4
58956: DOUBLE
58957: EQUAL
58958: IFTRUE 58962
58960: GO 59095
58962: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58963: LD_ADDR_VAR 0 5
58967: PUSH
58968: LD_VAR 0 1
58972: PUSH
58973: LD_VAR 0 2
58977: PUSH
58978: LD_INT 4
58980: PLUS
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: PUSH
58990: LD_VAR 0 1
58994: PUSH
58995: LD_INT 3
58997: PLUS
58998: PUSH
58999: LD_VAR 0 2
59003: PUSH
59004: LD_INT 3
59006: PLUS
59007: PUSH
59008: LD_INT 5
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: PUSH
59016: LD_VAR 0 1
59020: PUSH
59021: LD_INT 4
59023: PLUS
59024: PUSH
59025: LD_VAR 0 2
59029: PUSH
59030: LD_INT 4
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: PUSH
59038: LD_VAR 0 1
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: LD_INT 3
59050: MINUS
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 1
59064: PUSH
59065: LD_INT 4
59067: MINUS
59068: PUSH
59069: LD_VAR 0 2
59073: PUSH
59074: LD_INT 4
59076: MINUS
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// end ; 5 :
59093: GO 59233
59095: LD_INT 5
59097: DOUBLE
59098: EQUAL
59099: IFTRUE 59103
59101: GO 59232
59103: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59104: LD_ADDR_VAR 0 5
59108: PUSH
59109: LD_VAR 0 1
59113: PUSH
59114: LD_INT 4
59116: MINUS
59117: PUSH
59118: LD_VAR 0 2
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: LD_VAR 0 1
59135: PUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_INT 4
59143: MINUS
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: PUSH
59153: LD_VAR 0 1
59157: PUSH
59158: LD_INT 4
59160: PLUS
59161: PUSH
59162: LD_VAR 0 2
59166: PUSH
59167: LD_INT 4
59169: PLUS
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: PUSH
59179: LD_VAR 0 1
59183: PUSH
59184: LD_INT 3
59186: PLUS
59187: PUSH
59188: LD_VAR 0 2
59192: PUSH
59193: LD_INT 4
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: PUSH
59201: LD_VAR 0 1
59205: PUSH
59206: LD_VAR 0 2
59210: PUSH
59211: LD_INT 3
59213: PLUS
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// end ; end ;
59230: GO 59233
59232: POP
// result := list ;
59233: LD_ADDR_VAR 0 4
59237: PUSH
59238: LD_VAR 0 5
59242: ST_TO_ADDR
// end ;
59243: LD_VAR 0 4
59247: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59248: LD_INT 0
59250: PPUSH
59251: PPUSH
59252: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59253: LD_VAR 0 1
59257: NOT
59258: PUSH
59259: LD_VAR 0 2
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: IN
59282: NOT
59283: OR
59284: IFFALSE 59288
// exit ;
59286: GO 59380
// tmp := [ ] ;
59288: LD_ADDR_VAR 0 5
59292: PUSH
59293: EMPTY
59294: ST_TO_ADDR
// for i in units do
59295: LD_ADDR_VAR 0 4
59299: PUSH
59300: LD_VAR 0 1
59304: PUSH
59305: FOR_IN
59306: IFFALSE 59349
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59308: LD_ADDR_VAR 0 5
59312: PUSH
59313: LD_VAR 0 5
59317: PPUSH
59318: LD_VAR 0 5
59322: PUSH
59323: LD_INT 1
59325: PLUS
59326: PPUSH
59327: LD_VAR 0 4
59331: PPUSH
59332: LD_VAR 0 2
59336: PPUSH
59337: CALL_OW 259
59341: PPUSH
59342: CALL_OW 2
59346: ST_TO_ADDR
59347: GO 59305
59349: POP
59350: POP
// if not tmp then
59351: LD_VAR 0 5
59355: NOT
59356: IFFALSE 59360
// exit ;
59358: GO 59380
// result := SortListByListDesc ( units , tmp ) ;
59360: LD_ADDR_VAR 0 3
59364: PUSH
59365: LD_VAR 0 1
59369: PPUSH
59370: LD_VAR 0 5
59374: PPUSH
59375: CALL_OW 77
59379: ST_TO_ADDR
// end ;
59380: LD_VAR 0 3
59384: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59385: LD_INT 0
59387: PPUSH
59388: PPUSH
59389: PPUSH
// result := false ;
59390: LD_ADDR_VAR 0 3
59394: PUSH
59395: LD_INT 0
59397: ST_TO_ADDR
// x := GetX ( building ) ;
59398: LD_ADDR_VAR 0 4
59402: PUSH
59403: LD_VAR 0 2
59407: PPUSH
59408: CALL_OW 250
59412: ST_TO_ADDR
// y := GetY ( building ) ;
59413: LD_ADDR_VAR 0 5
59417: PUSH
59418: LD_VAR 0 2
59422: PPUSH
59423: CALL_OW 251
59427: ST_TO_ADDR
// if not building or not x or not y then
59428: LD_VAR 0 2
59432: NOT
59433: PUSH
59434: LD_VAR 0 4
59438: NOT
59439: OR
59440: PUSH
59441: LD_VAR 0 5
59445: NOT
59446: OR
59447: IFFALSE 59451
// exit ;
59449: GO 59543
// if GetTaskList ( unit ) then
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 437
59460: IFFALSE 59543
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59462: LD_STRING e
59464: PUSH
59465: LD_VAR 0 1
59469: PPUSH
59470: CALL_OW 437
59474: PUSH
59475: LD_INT 1
59477: ARRAY
59478: PUSH
59479: LD_INT 1
59481: ARRAY
59482: EQUAL
59483: PUSH
59484: LD_VAR 0 4
59488: PUSH
59489: LD_VAR 0 1
59493: PPUSH
59494: CALL_OW 437
59498: PUSH
59499: LD_INT 1
59501: ARRAY
59502: PUSH
59503: LD_INT 2
59505: ARRAY
59506: EQUAL
59507: AND
59508: PUSH
59509: LD_VAR 0 5
59513: PUSH
59514: LD_VAR 0 1
59518: PPUSH
59519: CALL_OW 437
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PUSH
59528: LD_INT 3
59530: ARRAY
59531: EQUAL
59532: AND
59533: IFFALSE 59543
// result := true end ;
59535: LD_ADDR_VAR 0 3
59539: PUSH
59540: LD_INT 1
59542: ST_TO_ADDR
// end ;
59543: LD_VAR 0 3
59547: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59548: LD_INT 0
59550: PPUSH
// result := false ;
59551: LD_ADDR_VAR 0 4
59555: PUSH
59556: LD_INT 0
59558: ST_TO_ADDR
// if GetTaskList ( unit ) then
59559: LD_VAR 0 1
59563: PPUSH
59564: CALL_OW 437
59568: IFFALSE 59651
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59570: LD_STRING M
59572: PUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 437
59582: PUSH
59583: LD_INT 1
59585: ARRAY
59586: PUSH
59587: LD_INT 1
59589: ARRAY
59590: EQUAL
59591: PUSH
59592: LD_VAR 0 2
59596: PUSH
59597: LD_VAR 0 1
59601: PPUSH
59602: CALL_OW 437
59606: PUSH
59607: LD_INT 1
59609: ARRAY
59610: PUSH
59611: LD_INT 2
59613: ARRAY
59614: EQUAL
59615: AND
59616: PUSH
59617: LD_VAR 0 3
59621: PUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 437
59631: PUSH
59632: LD_INT 1
59634: ARRAY
59635: PUSH
59636: LD_INT 3
59638: ARRAY
59639: EQUAL
59640: AND
59641: IFFALSE 59651
// result := true ;
59643: LD_ADDR_VAR 0 4
59647: PUSH
59648: LD_INT 1
59650: ST_TO_ADDR
// end ; end ;
59651: LD_VAR 0 4
59655: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59656: LD_INT 0
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
// if not unit or not area then
59662: LD_VAR 0 1
59666: NOT
59667: PUSH
59668: LD_VAR 0 2
59672: NOT
59673: OR
59674: IFFALSE 59678
// exit ;
59676: GO 59842
// tmp := AreaToList ( area , i ) ;
59678: LD_ADDR_VAR 0 6
59682: PUSH
59683: LD_VAR 0 2
59687: PPUSH
59688: LD_VAR 0 5
59692: PPUSH
59693: CALL_OW 517
59697: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: DOUBLE
59704: LD_INT 1
59706: DEC
59707: ST_TO_ADDR
59708: LD_VAR 0 6
59712: PUSH
59713: LD_INT 1
59715: ARRAY
59716: PUSH
59717: FOR_TO
59718: IFFALSE 59840
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59720: LD_ADDR_VAR 0 7
59724: PUSH
59725: LD_VAR 0 6
59729: PUSH
59730: LD_INT 1
59732: ARRAY
59733: PUSH
59734: LD_VAR 0 5
59738: ARRAY
59739: PUSH
59740: LD_VAR 0 6
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: PUSH
59749: LD_VAR 0 5
59753: ARRAY
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59759: LD_VAR 0 7
59763: PUSH
59764: LD_INT 1
59766: ARRAY
59767: PPUSH
59768: LD_VAR 0 7
59772: PUSH
59773: LD_INT 2
59775: ARRAY
59776: PPUSH
59777: CALL_OW 428
59781: PUSH
59782: LD_INT 0
59784: EQUAL
59785: IFFALSE 59838
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59787: LD_VAR 0 1
59791: PPUSH
59792: LD_VAR 0 7
59796: PUSH
59797: LD_INT 1
59799: ARRAY
59800: PPUSH
59801: LD_VAR 0 7
59805: PUSH
59806: LD_INT 2
59808: ARRAY
59809: PPUSH
59810: LD_VAR 0 3
59814: PPUSH
59815: CALL_OW 48
// result := IsPlaced ( unit ) ;
59819: LD_ADDR_VAR 0 4
59823: PUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL_OW 305
59833: ST_TO_ADDR
// exit ;
59834: POP
59835: POP
59836: GO 59842
// end ; end ;
59838: GO 59717
59840: POP
59841: POP
// end ;
59842: LD_VAR 0 4
59846: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
59851: PPUSH
// if not side or side > 8 then
59852: LD_VAR 0 1
59856: NOT
59857: PUSH
59858: LD_VAR 0 1
59862: PUSH
59863: LD_INT 8
59865: GREATER
59866: OR
59867: IFFALSE 59871
// exit ;
59869: GO 60058
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59871: LD_ADDR_VAR 0 4
59875: PUSH
59876: LD_INT 22
59878: PUSH
59879: LD_VAR 0 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 21
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PPUSH
59902: CALL_OW 69
59906: ST_TO_ADDR
// if not tmp then
59907: LD_VAR 0 4
59911: NOT
59912: IFFALSE 59916
// exit ;
59914: GO 60058
// enable_addtolog := true ;
59916: LD_ADDR_OWVAR 81
59920: PUSH
59921: LD_INT 1
59923: ST_TO_ADDR
// AddToLog ( [ ) ;
59924: LD_STRING [
59926: PPUSH
59927: CALL_OW 561
// for i in tmp do
59931: LD_ADDR_VAR 0 3
59935: PUSH
59936: LD_VAR 0 4
59940: PUSH
59941: FOR_IN
59942: IFFALSE 60049
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59944: LD_STRING [
59946: PUSH
59947: LD_VAR 0 3
59951: PPUSH
59952: CALL_OW 266
59956: STR
59957: PUSH
59958: LD_STRING , 
59960: STR
59961: PUSH
59962: LD_VAR 0 3
59966: PPUSH
59967: CALL_OW 250
59971: STR
59972: PUSH
59973: LD_STRING , 
59975: STR
59976: PUSH
59977: LD_VAR 0 3
59981: PPUSH
59982: CALL_OW 251
59986: STR
59987: PUSH
59988: LD_STRING , 
59990: STR
59991: PUSH
59992: LD_VAR 0 3
59996: PPUSH
59997: CALL_OW 254
60001: STR
60002: PUSH
60003: LD_STRING , 
60005: STR
60006: PUSH
60007: LD_VAR 0 3
60011: PPUSH
60012: LD_INT 1
60014: PPUSH
60015: CALL_OW 268
60019: STR
60020: PUSH
60021: LD_STRING , 
60023: STR
60024: PUSH
60025: LD_VAR 0 3
60029: PPUSH
60030: LD_INT 2
60032: PPUSH
60033: CALL_OW 268
60037: STR
60038: PUSH
60039: LD_STRING ],
60041: STR
60042: PPUSH
60043: CALL_OW 561
// end ;
60047: GO 59941
60049: POP
60050: POP
// AddToLog ( ]; ) ;
60051: LD_STRING ];
60053: PPUSH
60054: CALL_OW 561
// end ;
60058: LD_VAR 0 2
60062: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60063: LD_INT 0
60065: PPUSH
60066: PPUSH
60067: PPUSH
60068: PPUSH
60069: PPUSH
// if not area or not rate or not max then
60070: LD_VAR 0 1
60074: NOT
60075: PUSH
60076: LD_VAR 0 2
60080: NOT
60081: OR
60082: PUSH
60083: LD_VAR 0 4
60087: NOT
60088: OR
60089: IFFALSE 60093
// exit ;
60091: GO 60282
// while 1 do
60093: LD_INT 1
60095: IFFALSE 60282
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60097: LD_ADDR_VAR 0 9
60101: PUSH
60102: LD_VAR 0 1
60106: PPUSH
60107: LD_INT 1
60109: PPUSH
60110: CALL_OW 287
60114: PUSH
60115: LD_INT 10
60117: MUL
60118: ST_TO_ADDR
// r := rate / 10 ;
60119: LD_ADDR_VAR 0 7
60123: PUSH
60124: LD_VAR 0 2
60128: PUSH
60129: LD_INT 10
60131: DIVREAL
60132: ST_TO_ADDR
// time := 1 1$00 ;
60133: LD_ADDR_VAR 0 8
60137: PUSH
60138: LD_INT 2100
60140: ST_TO_ADDR
// if amount < min then
60141: LD_VAR 0 9
60145: PUSH
60146: LD_VAR 0 3
60150: LESS
60151: IFFALSE 60169
// r := r * 2 else
60153: LD_ADDR_VAR 0 7
60157: PUSH
60158: LD_VAR 0 7
60162: PUSH
60163: LD_INT 2
60165: MUL
60166: ST_TO_ADDR
60167: GO 60195
// if amount > max then
60169: LD_VAR 0 9
60173: PUSH
60174: LD_VAR 0 4
60178: GREATER
60179: IFFALSE 60195
// r := r / 2 ;
60181: LD_ADDR_VAR 0 7
60185: PUSH
60186: LD_VAR 0 7
60190: PUSH
60191: LD_INT 2
60193: DIVREAL
60194: ST_TO_ADDR
// time := time / r ;
60195: LD_ADDR_VAR 0 8
60199: PUSH
60200: LD_VAR 0 8
60204: PUSH
60205: LD_VAR 0 7
60209: DIVREAL
60210: ST_TO_ADDR
// if time < 0 then
60211: LD_VAR 0 8
60215: PUSH
60216: LD_INT 0
60218: LESS
60219: IFFALSE 60236
// time := time * - 1 ;
60221: LD_ADDR_VAR 0 8
60225: PUSH
60226: LD_VAR 0 8
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: MUL
60235: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60236: LD_VAR 0 8
60240: PUSH
60241: LD_INT 35
60243: PPUSH
60244: LD_INT 875
60246: PPUSH
60247: CALL_OW 12
60251: PLUS
60252: PPUSH
60253: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60257: LD_INT 1
60259: PPUSH
60260: LD_INT 5
60262: PPUSH
60263: CALL_OW 12
60267: PPUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: LD_INT 1
60275: PPUSH
60276: CALL_OW 55
// end ;
60280: GO 60093
// end ;
60282: LD_VAR 0 5
60286: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60287: LD_INT 0
60289: PPUSH
60290: PPUSH
60291: PPUSH
60292: PPUSH
60293: PPUSH
60294: PPUSH
60295: PPUSH
60296: PPUSH
// if not turrets or not factories then
60297: LD_VAR 0 1
60301: NOT
60302: PUSH
60303: LD_VAR 0 2
60307: NOT
60308: OR
60309: IFFALSE 60313
// exit ;
60311: GO 60620
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60313: LD_ADDR_VAR 0 10
60317: PUSH
60318: LD_INT 5
60320: PUSH
60321: LD_INT 6
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 24
60355: PUSH
60356: LD_INT 25
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 23
60365: PUSH
60366: LD_INT 27
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 42
60379: PUSH
60380: LD_INT 43
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 44
60389: PUSH
60390: LD_INT 46
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 45
60399: PUSH
60400: LD_INT 47
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: ST_TO_ADDR
// result := [ ] ;
60417: LD_ADDR_VAR 0 3
60421: PUSH
60422: EMPTY
60423: ST_TO_ADDR
// for i in turrets do
60424: LD_ADDR_VAR 0 4
60428: PUSH
60429: LD_VAR 0 1
60433: PUSH
60434: FOR_IN
60435: IFFALSE 60618
// begin nat := GetNation ( i ) ;
60437: LD_ADDR_VAR 0 7
60441: PUSH
60442: LD_VAR 0 4
60446: PPUSH
60447: CALL_OW 248
60451: ST_TO_ADDR
// weapon := 0 ;
60452: LD_ADDR_VAR 0 8
60456: PUSH
60457: LD_INT 0
60459: ST_TO_ADDR
// if not nat then
60460: LD_VAR 0 7
60464: NOT
60465: IFFALSE 60469
// continue ;
60467: GO 60434
// for j in list [ nat ] do
60469: LD_ADDR_VAR 0 5
60473: PUSH
60474: LD_VAR 0 10
60478: PUSH
60479: LD_VAR 0 7
60483: ARRAY
60484: PUSH
60485: FOR_IN
60486: IFFALSE 60527
// if GetBWeapon ( i ) = j [ 1 ] then
60488: LD_VAR 0 4
60492: PPUSH
60493: CALL_OW 269
60497: PUSH
60498: LD_VAR 0 5
60502: PUSH
60503: LD_INT 1
60505: ARRAY
60506: EQUAL
60507: IFFALSE 60525
// begin weapon := j [ 2 ] ;
60509: LD_ADDR_VAR 0 8
60513: PUSH
60514: LD_VAR 0 5
60518: PUSH
60519: LD_INT 2
60521: ARRAY
60522: ST_TO_ADDR
// break ;
60523: GO 60527
// end ;
60525: GO 60485
60527: POP
60528: POP
// if not weapon then
60529: LD_VAR 0 8
60533: NOT
60534: IFFALSE 60538
// continue ;
60536: GO 60434
// for k in factories do
60538: LD_ADDR_VAR 0 6
60542: PUSH
60543: LD_VAR 0 2
60547: PUSH
60548: FOR_IN
60549: IFFALSE 60614
// begin weapons := AvailableWeaponList ( k ) ;
60551: LD_ADDR_VAR 0 9
60555: PUSH
60556: LD_VAR 0 6
60560: PPUSH
60561: CALL_OW 478
60565: ST_TO_ADDR
// if not weapons then
60566: LD_VAR 0 9
60570: NOT
60571: IFFALSE 60575
// continue ;
60573: GO 60548
// if weapon in weapons then
60575: LD_VAR 0 8
60579: PUSH
60580: LD_VAR 0 9
60584: IN
60585: IFFALSE 60612
// begin result := [ i , weapon ] ;
60587: LD_ADDR_VAR 0 3
60591: PUSH
60592: LD_VAR 0 4
60596: PUSH
60597: LD_VAR 0 8
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// exit ;
60606: POP
60607: POP
60608: POP
60609: POP
60610: GO 60620
// end ; end ;
60612: GO 60548
60614: POP
60615: POP
// end ;
60616: GO 60434
60618: POP
60619: POP
// end ;
60620: LD_VAR 0 3
60624: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60625: LD_INT 0
60627: PPUSH
// if not side or side > 8 then
60628: LD_VAR 0 3
60632: NOT
60633: PUSH
60634: LD_VAR 0 3
60638: PUSH
60639: LD_INT 8
60641: GREATER
60642: OR
60643: IFFALSE 60647
// exit ;
60645: GO 60706
// if not range then
60647: LD_VAR 0 4
60651: NOT
60652: IFFALSE 60663
// range := - 12 ;
60654: LD_ADDR_VAR 0 4
60658: PUSH
60659: LD_INT 12
60661: NEG
60662: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60663: LD_VAR 0 1
60667: PPUSH
60668: LD_VAR 0 2
60672: PPUSH
60673: LD_VAR 0 3
60677: PPUSH
60678: LD_VAR 0 4
60682: PPUSH
60683: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60687: LD_VAR 0 1
60691: PPUSH
60692: LD_VAR 0 2
60696: PPUSH
60697: LD_VAR 0 3
60701: PPUSH
60702: CALL_OW 331
// end ;
60706: LD_VAR 0 5
60710: RET
// export function Video ( mode ) ; begin
60711: LD_INT 0
60713: PPUSH
// ingame_video = mode ;
60714: LD_ADDR_OWVAR 52
60718: PUSH
60719: LD_VAR 0 1
60723: ST_TO_ADDR
// interface_hidden = mode ;
60724: LD_ADDR_OWVAR 54
60728: PUSH
60729: LD_VAR 0 1
60733: ST_TO_ADDR
// end ;
60734: LD_VAR 0 2
60738: RET
// export function Join ( array , element ) ; begin
60739: LD_INT 0
60741: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60742: LD_ADDR_VAR 0 3
60746: PUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_INT 1
60759: PLUS
60760: PPUSH
60761: LD_VAR 0 2
60765: PPUSH
60766: CALL_OW 1
60770: ST_TO_ADDR
// end ;
60771: LD_VAR 0 3
60775: RET
// export function JoinUnion ( array , element ) ; begin
60776: LD_INT 0
60778: PPUSH
// result := array union element ;
60779: LD_ADDR_VAR 0 3
60783: PUSH
60784: LD_VAR 0 1
60788: PUSH
60789: LD_VAR 0 2
60793: UNION
60794: ST_TO_ADDR
// end ;
60795: LD_VAR 0 3
60799: RET
// export function GetBehemoths ( side ) ; begin
60800: LD_INT 0
60802: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: LD_INT 22
60810: PUSH
60811: LD_VAR 0 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 31
60822: PUSH
60823: LD_INT 25
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PPUSH
60834: CALL_OW 69
60838: ST_TO_ADDR
// end ;
60839: LD_VAR 0 2
60843: RET
// export function Shuffle ( array ) ; var i , index ; begin
60844: LD_INT 0
60846: PPUSH
60847: PPUSH
60848: PPUSH
// result := [ ] ;
60849: LD_ADDR_VAR 0 2
60853: PUSH
60854: EMPTY
60855: ST_TO_ADDR
// if not array then
60856: LD_VAR 0 1
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 60964
// Randomize ;
60865: CALL_OW 10
// for i = array downto 1 do
60869: LD_ADDR_VAR 0 3
60873: PUSH
60874: DOUBLE
60875: LD_VAR 0 1
60879: INC
60880: ST_TO_ADDR
60881: LD_INT 1
60883: PUSH
60884: FOR_DOWNTO
60885: IFFALSE 60962
// begin index := rand ( 1 , array ) ;
60887: LD_ADDR_VAR 0 4
60891: PUSH
60892: LD_INT 1
60894: PPUSH
60895: LD_VAR 0 1
60899: PPUSH
60900: CALL_OW 12
60904: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60905: LD_ADDR_VAR 0 2
60909: PUSH
60910: LD_VAR 0 2
60914: PPUSH
60915: LD_VAR 0 2
60919: PUSH
60920: LD_INT 1
60922: PLUS
60923: PPUSH
60924: LD_VAR 0 1
60928: PUSH
60929: LD_VAR 0 4
60933: ARRAY
60934: PPUSH
60935: CALL_OW 2
60939: ST_TO_ADDR
// array := Delete ( array , index ) ;
60940: LD_ADDR_VAR 0 1
60944: PUSH
60945: LD_VAR 0 1
60949: PPUSH
60950: LD_VAR 0 4
60954: PPUSH
60955: CALL_OW 3
60959: ST_TO_ADDR
// end ;
60960: GO 60884
60962: POP
60963: POP
// end ;
60964: LD_VAR 0 2
60968: RET
// export function GetBaseMaterials ( base ) ; begin
60969: LD_INT 0
60971: PPUSH
// result := [ 0 , 0 , 0 ] ;
60972: LD_ADDR_VAR 0 2
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// if not base then
60991: LD_VAR 0 1
60995: NOT
60996: IFFALSE 61000
// exit ;
60998: GO 61049
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61000: LD_ADDR_VAR 0 2
61004: PUSH
61005: LD_VAR 0 1
61009: PPUSH
61010: LD_INT 1
61012: PPUSH
61013: CALL_OW 275
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: LD_INT 2
61025: PPUSH
61026: CALL_OW 275
61030: PUSH
61031: LD_VAR 0 1
61035: PPUSH
61036: LD_INT 3
61038: PPUSH
61039: CALL_OW 275
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// end ;
61049: LD_VAR 0 2
61053: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61054: LD_INT 0
61056: PPUSH
61057: PPUSH
// result := array ;
61058: LD_ADDR_VAR 0 3
61062: PUSH
61063: LD_VAR 0 1
61067: ST_TO_ADDR
// if size >= result then
61068: LD_VAR 0 2
61072: PUSH
61073: LD_VAR 0 3
61077: GREATEREQUAL
61078: IFFALSE 61082
// exit ;
61080: GO 61132
// if size then
61082: LD_VAR 0 2
61086: IFFALSE 61132
// for i := array downto size do
61088: LD_ADDR_VAR 0 4
61092: PUSH
61093: DOUBLE
61094: LD_VAR 0 1
61098: INC
61099: ST_TO_ADDR
61100: LD_VAR 0 2
61104: PUSH
61105: FOR_DOWNTO
61106: IFFALSE 61130
// result := Delete ( result , result ) ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: LD_VAR 0 3
61117: PPUSH
61118: LD_VAR 0 3
61122: PPUSH
61123: CALL_OW 3
61127: ST_TO_ADDR
61128: GO 61105
61130: POP
61131: POP
// end ;
61132: LD_VAR 0 3
61136: RET
// export function ComExit ( unit ) ; var tmp ; begin
61137: LD_INT 0
61139: PPUSH
61140: PPUSH
// if not IsInUnit ( unit ) then
61141: LD_VAR 0 1
61145: PPUSH
61146: CALL_OW 310
61150: NOT
61151: IFFALSE 61155
// exit ;
61153: GO 61215
// tmp := IsInUnit ( unit ) ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 310
61169: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61170: LD_VAR 0 3
61174: PPUSH
61175: CALL_OW 247
61179: PUSH
61180: LD_INT 2
61182: EQUAL
61183: IFFALSE 61196
// ComExitVehicle ( unit ) else
61185: LD_VAR 0 1
61189: PPUSH
61190: CALL_OW 121
61194: GO 61205
// ComExitBuilding ( unit ) ;
61196: LD_VAR 0 1
61200: PPUSH
61201: CALL_OW 122
// result := tmp ;
61205: LD_ADDR_VAR 0 2
61209: PUSH
61210: LD_VAR 0 3
61214: ST_TO_ADDR
// end ;
61215: LD_VAR 0 2
61219: RET
// export function ComExitAll ( units ) ; var i ; begin
61220: LD_INT 0
61222: PPUSH
61223: PPUSH
// if not units then
61224: LD_VAR 0 1
61228: NOT
61229: IFFALSE 61233
// exit ;
61231: GO 61259
// for i in units do
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_VAR 0 1
61242: PUSH
61243: FOR_IN
61244: IFFALSE 61257
// ComExit ( i ) ;
61246: LD_VAR 0 3
61250: PPUSH
61251: CALL 61137 0 1
61255: GO 61243
61257: POP
61258: POP
// end ;
61259: LD_VAR 0 2
61263: RET
// export function ResetHc ; begin
61264: LD_INT 0
61266: PPUSH
// InitHc ;
61267: CALL_OW 19
// hc_importance := 0 ;
61271: LD_ADDR_OWVAR 32
61275: PUSH
61276: LD_INT 0
61278: ST_TO_ADDR
// end ;
61279: LD_VAR 0 1
61283: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61284: LD_INT 0
61286: PPUSH
61287: PPUSH
61288: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61289: LD_ADDR_VAR 0 6
61293: PUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_VAR 0 3
61303: PLUS
61304: PUSH
61305: LD_INT 2
61307: DIV
61308: ST_TO_ADDR
// if _x < 0 then
61309: LD_VAR 0 6
61313: PUSH
61314: LD_INT 0
61316: LESS
61317: IFFALSE 61334
// _x := _x * - 1 ;
61319: LD_ADDR_VAR 0 6
61323: PUSH
61324: LD_VAR 0 6
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: MUL
61333: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61334: LD_ADDR_VAR 0 7
61338: PUSH
61339: LD_VAR 0 2
61343: PUSH
61344: LD_VAR 0 4
61348: PLUS
61349: PUSH
61350: LD_INT 2
61352: DIV
61353: ST_TO_ADDR
// if _y < 0 then
61354: LD_VAR 0 7
61358: PUSH
61359: LD_INT 0
61361: LESS
61362: IFFALSE 61379
// _y := _y * - 1 ;
61364: LD_ADDR_VAR 0 7
61368: PUSH
61369: LD_VAR 0 7
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: MUL
61378: ST_TO_ADDR
// result := [ _x , _y ] ;
61379: LD_ADDR_VAR 0 5
61383: PUSH
61384: LD_VAR 0 6
61388: PUSH
61389: LD_VAR 0 7
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: ST_TO_ADDR
// end ;
61398: LD_VAR 0 5
61402: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61403: LD_INT 0
61405: PPUSH
61406: PPUSH
61407: PPUSH
61408: PPUSH
// task := GetTaskList ( unit ) ;
61409: LD_ADDR_VAR 0 7
61413: PUSH
61414: LD_VAR 0 1
61418: PPUSH
61419: CALL_OW 437
61423: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61424: LD_VAR 0 7
61428: NOT
61429: PUSH
61430: LD_VAR 0 1
61434: PPUSH
61435: LD_VAR 0 2
61439: PPUSH
61440: CALL_OW 308
61444: NOT
61445: AND
61446: IFFALSE 61450
// exit ;
61448: GO 61568
// if IsInArea ( unit , area ) then
61450: LD_VAR 0 1
61454: PPUSH
61455: LD_VAR 0 2
61459: PPUSH
61460: CALL_OW 308
61464: IFFALSE 61482
// begin ComMoveToArea ( unit , goAway ) ;
61466: LD_VAR 0 1
61470: PPUSH
61471: LD_VAR 0 3
61475: PPUSH
61476: CALL_OW 113
// exit ;
61480: GO 61568
// end ; if task [ 1 ] [ 1 ] <> M then
61482: LD_VAR 0 7
61486: PUSH
61487: LD_INT 1
61489: ARRAY
61490: PUSH
61491: LD_INT 1
61493: ARRAY
61494: PUSH
61495: LD_STRING M
61497: NONEQUAL
61498: IFFALSE 61502
// exit ;
61500: GO 61568
// x := task [ 1 ] [ 2 ] ;
61502: LD_ADDR_VAR 0 5
61506: PUSH
61507: LD_VAR 0 7
61511: PUSH
61512: LD_INT 1
61514: ARRAY
61515: PUSH
61516: LD_INT 2
61518: ARRAY
61519: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61520: LD_ADDR_VAR 0 6
61524: PUSH
61525: LD_VAR 0 7
61529: PUSH
61530: LD_INT 1
61532: ARRAY
61533: PUSH
61534: LD_INT 3
61536: ARRAY
61537: ST_TO_ADDR
// if InArea ( x , y , area ) then
61538: LD_VAR 0 5
61542: PPUSH
61543: LD_VAR 0 6
61547: PPUSH
61548: LD_VAR 0 2
61552: PPUSH
61553: CALL_OW 309
61557: IFFALSE 61568
// ComStop ( unit ) ;
61559: LD_VAR 0 1
61563: PPUSH
61564: CALL_OW 141
// end ;
61568: LD_VAR 0 4
61572: RET
// export function Abs ( value ) ; begin
61573: LD_INT 0
61575: PPUSH
// result := value ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_VAR 0 1
61585: ST_TO_ADDR
// if value < 0 then
61586: LD_VAR 0 1
61590: PUSH
61591: LD_INT 0
61593: LESS
61594: IFFALSE 61611
// result := value * - 1 ;
61596: LD_ADDR_VAR 0 2
61600: PUSH
61601: LD_VAR 0 1
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: MUL
61610: ST_TO_ADDR
// end ;
61611: LD_VAR 0 2
61615: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61616: LD_INT 0
61618: PPUSH
61619: PPUSH
61620: PPUSH
61621: PPUSH
61622: PPUSH
61623: PPUSH
61624: PPUSH
61625: PPUSH
// if not unit or not building then
61626: LD_VAR 0 1
61630: NOT
61631: PUSH
61632: LD_VAR 0 2
61636: NOT
61637: OR
61638: IFFALSE 61642
// exit ;
61640: GO 61868
// x := GetX ( building ) ;
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_VAR 0 2
61651: PPUSH
61652: CALL_OW 250
61656: ST_TO_ADDR
// y := GetY ( building ) ;
61657: LD_ADDR_VAR 0 6
61661: PUSH
61662: LD_VAR 0 2
61666: PPUSH
61667: CALL_OW 251
61671: ST_TO_ADDR
// d := GetDir ( building ) ;
61672: LD_ADDR_VAR 0 8
61676: PUSH
61677: LD_VAR 0 2
61681: PPUSH
61682: CALL_OW 254
61686: ST_TO_ADDR
// r := 4 ;
61687: LD_ADDR_VAR 0 9
61691: PUSH
61692: LD_INT 4
61694: ST_TO_ADDR
// for i := 1 to 5 do
61695: LD_ADDR_VAR 0 10
61699: PUSH
61700: DOUBLE
61701: LD_INT 1
61703: DEC
61704: ST_TO_ADDR
61705: LD_INT 5
61707: PUSH
61708: FOR_TO
61709: IFFALSE 61866
// begin _x := ShiftX ( x , d , r + i ) ;
61711: LD_ADDR_VAR 0 5
61715: PUSH
61716: LD_VAR 0 4
61720: PPUSH
61721: LD_VAR 0 8
61725: PPUSH
61726: LD_VAR 0 9
61730: PUSH
61731: LD_VAR 0 10
61735: PLUS
61736: PPUSH
61737: CALL_OW 272
61741: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61742: LD_ADDR_VAR 0 7
61746: PUSH
61747: LD_VAR 0 6
61751: PPUSH
61752: LD_VAR 0 8
61756: PPUSH
61757: LD_VAR 0 9
61761: PUSH
61762: LD_VAR 0 10
61766: PLUS
61767: PPUSH
61768: CALL_OW 273
61772: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61773: LD_VAR 0 5
61777: PPUSH
61778: LD_VAR 0 7
61782: PPUSH
61783: CALL_OW 488
61787: PUSH
61788: LD_VAR 0 5
61792: PPUSH
61793: LD_VAR 0 7
61797: PPUSH
61798: CALL_OW 428
61802: PPUSH
61803: CALL_OW 247
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: IN
61818: NOT
61819: AND
61820: IFFALSE 61864
// begin ComMoveXY ( unit , _x , _y ) ;
61822: LD_VAR 0 1
61826: PPUSH
61827: LD_VAR 0 5
61831: PPUSH
61832: LD_VAR 0 7
61836: PPUSH
61837: CALL_OW 111
// result := [ _x , _y ] ;
61841: LD_ADDR_VAR 0 3
61845: PUSH
61846: LD_VAR 0 5
61850: PUSH
61851: LD_VAR 0 7
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// exit ;
61860: POP
61861: POP
61862: GO 61868
// end ; end ;
61864: GO 61708
61866: POP
61867: POP
// end ;
61868: LD_VAR 0 3
61872: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61873: LD_INT 0
61875: PPUSH
61876: PPUSH
61877: PPUSH
// result := 0 ;
61878: LD_ADDR_VAR 0 3
61882: PUSH
61883: LD_INT 0
61885: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61886: LD_VAR 0 1
61890: PUSH
61891: LD_INT 0
61893: LESS
61894: PUSH
61895: LD_VAR 0 1
61899: PUSH
61900: LD_INT 8
61902: GREATER
61903: OR
61904: PUSH
61905: LD_VAR 0 2
61909: PUSH
61910: LD_INT 0
61912: LESS
61913: OR
61914: PUSH
61915: LD_VAR 0 2
61919: PUSH
61920: LD_INT 8
61922: GREATER
61923: OR
61924: IFFALSE 61928
// exit ;
61926: GO 62003
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61928: LD_ADDR_VAR 0 4
61932: PUSH
61933: LD_INT 22
61935: PUSH
61936: LD_VAR 0 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PPUSH
61945: CALL_OW 69
61949: PUSH
61950: FOR_IN
61951: IFFALSE 62001
// begin un := UnitShoot ( i ) ;
61953: LD_ADDR_VAR 0 5
61957: PUSH
61958: LD_VAR 0 4
61962: PPUSH
61963: CALL_OW 504
61967: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61968: LD_VAR 0 5
61972: PPUSH
61973: CALL_OW 255
61977: PUSH
61978: LD_VAR 0 1
61982: EQUAL
61983: IFFALSE 61999
// begin result := un ;
61985: LD_ADDR_VAR 0 3
61989: PUSH
61990: LD_VAR 0 5
61994: ST_TO_ADDR
// exit ;
61995: POP
61996: POP
61997: GO 62003
// end ; end ;
61999: GO 61950
62001: POP
62002: POP
// end ;
62003: LD_VAR 0 3
62007: RET
// export function GetCargoBay ( units ) ; begin
62008: LD_INT 0
62010: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62011: LD_ADDR_VAR 0 2
62015: PUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 34
62026: PUSH
62027: LD_INT 12
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 34
62036: PUSH
62037: LD_INT 51
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 34
62046: PUSH
62047: LD_INT 32
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 34
62056: PUSH
62057: LD_INT 89
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: PPUSH
62071: CALL_OW 72
62075: ST_TO_ADDR
// end ;
62076: LD_VAR 0 2
62080: RET
// export function Negate ( value ) ; begin
62081: LD_INT 0
62083: PPUSH
// result := not value ;
62084: LD_ADDR_VAR 0 2
62088: PUSH
62089: LD_VAR 0 1
62093: NOT
62094: ST_TO_ADDR
// end ;
62095: LD_VAR 0 2
62099: RET
// export function Inc ( value ) ; begin
62100: LD_INT 0
62102: PPUSH
// result := value + 1 ;
62103: LD_ADDR_VAR 0 2
62107: PUSH
62108: LD_VAR 0 1
62112: PUSH
62113: LD_INT 1
62115: PLUS
62116: ST_TO_ADDR
// end ;
62117: LD_VAR 0 2
62121: RET
// export function Dec ( value ) ; begin
62122: LD_INT 0
62124: PPUSH
// result := value - 1 ;
62125: LD_ADDR_VAR 0 2
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: LD_INT 1
62137: MINUS
62138: ST_TO_ADDR
// end ;
62139: LD_VAR 0 2
62143: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
62148: PPUSH
62149: PPUSH
62150: PPUSH
62151: PPUSH
62152: PPUSH
62153: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62154: LD_VAR 0 1
62158: PPUSH
62159: LD_VAR 0 2
62163: PPUSH
62164: CALL_OW 488
62168: NOT
62169: PUSH
62170: LD_VAR 0 3
62174: PPUSH
62175: LD_VAR 0 4
62179: PPUSH
62180: CALL_OW 488
62184: NOT
62185: OR
62186: IFFALSE 62199
// begin result := - 1 ;
62188: LD_ADDR_VAR 0 5
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: ST_TO_ADDR
// exit ;
62197: GO 62434
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62199: LD_ADDR_VAR 0 12
62203: PUSH
62204: LD_VAR 0 1
62208: PPUSH
62209: LD_VAR 0 2
62213: PPUSH
62214: LD_VAR 0 3
62218: PPUSH
62219: LD_VAR 0 4
62223: PPUSH
62224: CALL 61284 0 4
62228: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62229: LD_ADDR_VAR 0 11
62233: PUSH
62234: LD_VAR 0 1
62238: PPUSH
62239: LD_VAR 0 2
62243: PPUSH
62244: LD_VAR 0 12
62248: PUSH
62249: LD_INT 1
62251: ARRAY
62252: PPUSH
62253: LD_VAR 0 12
62257: PUSH
62258: LD_INT 2
62260: ARRAY
62261: PPUSH
62262: CALL_OW 298
62266: ST_TO_ADDR
// distance := 9999 ;
62267: LD_ADDR_VAR 0 10
62271: PUSH
62272: LD_INT 9999
62274: ST_TO_ADDR
// for i := 0 to 5 do
62275: LD_ADDR_VAR 0 6
62279: PUSH
62280: DOUBLE
62281: LD_INT 0
62283: DEC
62284: ST_TO_ADDR
62285: LD_INT 5
62287: PUSH
62288: FOR_TO
62289: IFFALSE 62432
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62291: LD_ADDR_VAR 0 7
62295: PUSH
62296: LD_VAR 0 1
62300: PPUSH
62301: LD_VAR 0 6
62305: PPUSH
62306: LD_VAR 0 11
62310: PPUSH
62311: CALL_OW 272
62315: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62316: LD_ADDR_VAR 0 8
62320: PUSH
62321: LD_VAR 0 2
62325: PPUSH
62326: LD_VAR 0 6
62330: PPUSH
62331: LD_VAR 0 11
62335: PPUSH
62336: CALL_OW 273
62340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62341: LD_VAR 0 7
62345: PPUSH
62346: LD_VAR 0 8
62350: PPUSH
62351: CALL_OW 488
62355: NOT
62356: IFFALSE 62360
// continue ;
62358: GO 62288
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62360: LD_ADDR_VAR 0 9
62364: PUSH
62365: LD_VAR 0 12
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PPUSH
62374: LD_VAR 0 12
62378: PUSH
62379: LD_INT 2
62381: ARRAY
62382: PPUSH
62383: LD_VAR 0 7
62387: PPUSH
62388: LD_VAR 0 8
62392: PPUSH
62393: CALL_OW 298
62397: ST_TO_ADDR
// if tmp < distance then
62398: LD_VAR 0 9
62402: PUSH
62403: LD_VAR 0 10
62407: LESS
62408: IFFALSE 62430
// begin result := i ;
62410: LD_ADDR_VAR 0 5
62414: PUSH
62415: LD_VAR 0 6
62419: ST_TO_ADDR
// distance := tmp ;
62420: LD_ADDR_VAR 0 10
62424: PUSH
62425: LD_VAR 0 9
62429: ST_TO_ADDR
// end ; end ;
62430: GO 62288
62432: POP
62433: POP
// end ;
62434: LD_VAR 0 5
62438: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62439: LD_INT 0
62441: PPUSH
62442: PPUSH
// if not driver or not IsInUnit ( driver ) then
62443: LD_VAR 0 1
62447: NOT
62448: PUSH
62449: LD_VAR 0 1
62453: PPUSH
62454: CALL_OW 310
62458: NOT
62459: OR
62460: IFFALSE 62464
// exit ;
62462: GO 62554
// vehicle := IsInUnit ( driver ) ;
62464: LD_ADDR_VAR 0 3
62468: PUSH
62469: LD_VAR 0 1
62473: PPUSH
62474: CALL_OW 310
62478: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62479: LD_VAR 0 1
62483: PPUSH
62484: LD_STRING \
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: PUSH
62514: LD_STRING E
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_VAR 0 3
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PPUSH
62550: CALL_OW 446
// end ;
62554: LD_VAR 0 2
62558: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62559: LD_INT 0
62561: PPUSH
62562: PPUSH
// if not driver or not IsInUnit ( driver ) then
62563: LD_VAR 0 1
62567: NOT
62568: PUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL_OW 310
62578: NOT
62579: OR
62580: IFFALSE 62584
// exit ;
62582: GO 62674
// vehicle := IsInUnit ( driver ) ;
62584: LD_ADDR_VAR 0 3
62588: PUSH
62589: LD_VAR 0 1
62593: PPUSH
62594: CALL_OW 310
62598: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62599: LD_VAR 0 1
62603: PPUSH
62604: LD_STRING \
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: PUSH
62634: LD_STRING E
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_VAR 0 3
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PPUSH
62670: CALL_OW 447
// end ;
62674: LD_VAR 0 2
62678: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62679: LD_INT 0
62681: PPUSH
62682: PPUSH
62683: PPUSH
// tmp := [ ] ;
62684: LD_ADDR_VAR 0 5
62688: PUSH
62689: EMPTY
62690: ST_TO_ADDR
// for i in units do
62691: LD_ADDR_VAR 0 4
62695: PUSH
62696: LD_VAR 0 1
62700: PUSH
62701: FOR_IN
62702: IFFALSE 62740
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62704: LD_ADDR_VAR 0 5
62708: PUSH
62709: LD_VAR 0 5
62713: PPUSH
62714: LD_VAR 0 5
62718: PUSH
62719: LD_INT 1
62721: PLUS
62722: PPUSH
62723: LD_VAR 0 4
62727: PPUSH
62728: CALL_OW 256
62732: PPUSH
62733: CALL_OW 2
62737: ST_TO_ADDR
62738: GO 62701
62740: POP
62741: POP
// if not tmp then
62742: LD_VAR 0 5
62746: NOT
62747: IFFALSE 62751
// exit ;
62749: GO 62799
// if asc then
62751: LD_VAR 0 2
62755: IFFALSE 62779
// result := SortListByListAsc ( units , tmp ) else
62757: LD_ADDR_VAR 0 3
62761: PUSH
62762: LD_VAR 0 1
62766: PPUSH
62767: LD_VAR 0 5
62771: PPUSH
62772: CALL_OW 76
62776: ST_TO_ADDR
62777: GO 62799
// result := SortListByListDesc ( units , tmp ) ;
62779: LD_ADDR_VAR 0 3
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: LD_VAR 0 5
62793: PPUSH
62794: CALL_OW 77
62798: ST_TO_ADDR
// end ;
62799: LD_VAR 0 3
62803: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62804: LD_INT 0
62806: PPUSH
62807: PPUSH
// task := GetTaskList ( mech ) ;
62808: LD_ADDR_VAR 0 4
62812: PUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: CALL_OW 437
62822: ST_TO_ADDR
// if not task then
62823: LD_VAR 0 4
62827: NOT
62828: IFFALSE 62832
// exit ;
62830: GO 62874
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62832: LD_ADDR_VAR 0 3
62836: PUSH
62837: LD_VAR 0 4
62841: PUSH
62842: LD_INT 1
62844: ARRAY
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PUSH
62850: LD_STRING r
62852: EQUAL
62853: PUSH
62854: LD_VAR 0 4
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PUSH
62863: LD_INT 4
62865: ARRAY
62866: PUSH
62867: LD_VAR 0 2
62871: EQUAL
62872: AND
62873: ST_TO_ADDR
// end ;
62874: LD_VAR 0 3
62878: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62879: LD_INT 0
62881: PPUSH
// SetDir ( unit , d ) ;
62882: LD_VAR 0 1
62886: PPUSH
62887: LD_VAR 0 4
62891: PPUSH
62892: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62896: LD_VAR 0 1
62900: PPUSH
62901: LD_VAR 0 2
62905: PPUSH
62906: LD_VAR 0 3
62910: PPUSH
62911: LD_VAR 0 5
62915: PPUSH
62916: CALL_OW 48
// end ;
62920: LD_VAR 0 6
62924: RET
// export function ToNaturalNumber ( number ) ; begin
62925: LD_INT 0
62927: PPUSH
// result := number div 1 ;
62928: LD_ADDR_VAR 0 2
62932: PUSH
62933: LD_VAR 0 1
62937: PUSH
62938: LD_INT 1
62940: DIV
62941: ST_TO_ADDR
// if number < 0 then
62942: LD_VAR 0 1
62946: PUSH
62947: LD_INT 0
62949: LESS
62950: IFFALSE 62960
// result := 0 ;
62952: LD_ADDR_VAR 0 2
62956: PUSH
62957: LD_INT 0
62959: ST_TO_ADDR
// end ;
62960: LD_VAR 0 2
62964: RET
// export function SortByClass ( units , class ) ; var un ; begin
62965: LD_INT 0
62967: PPUSH
62968: PPUSH
// if not units or not class then
62969: LD_VAR 0 1
62973: NOT
62974: PUSH
62975: LD_VAR 0 2
62979: NOT
62980: OR
62981: IFFALSE 62985
// exit ;
62983: GO 63080
// result := [ ] ;
62985: LD_ADDR_VAR 0 3
62989: PUSH
62990: EMPTY
62991: ST_TO_ADDR
// for un in units do
62992: LD_ADDR_VAR 0 4
62996: PUSH
62997: LD_VAR 0 1
63001: PUSH
63002: FOR_IN
63003: IFFALSE 63078
// if GetClass ( un ) = class then
63005: LD_VAR 0 4
63009: PPUSH
63010: CALL_OW 257
63014: PUSH
63015: LD_VAR 0 2
63019: EQUAL
63020: IFFALSE 63047
// result := Insert ( result , 1 , un ) else
63022: LD_ADDR_VAR 0 3
63026: PUSH
63027: LD_VAR 0 3
63031: PPUSH
63032: LD_INT 1
63034: PPUSH
63035: LD_VAR 0 4
63039: PPUSH
63040: CALL_OW 2
63044: ST_TO_ADDR
63045: GO 63076
// result := Replace ( result , result + 1 , un ) ;
63047: LD_ADDR_VAR 0 3
63051: PUSH
63052: LD_VAR 0 3
63056: PPUSH
63057: LD_VAR 0 3
63061: PUSH
63062: LD_INT 1
63064: PLUS
63065: PPUSH
63066: LD_VAR 0 4
63070: PPUSH
63071: CALL_OW 1
63075: ST_TO_ADDR
63076: GO 63002
63078: POP
63079: POP
// end ;
63080: LD_VAR 0 3
63084: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63085: LD_INT 0
63087: PPUSH
63088: PPUSH
63089: PPUSH
63090: PPUSH
63091: PPUSH
63092: PPUSH
63093: PPUSH
// result := [ ] ;
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: EMPTY
63100: ST_TO_ADDR
// if x - r < 0 then
63101: LD_VAR 0 1
63105: PUSH
63106: LD_VAR 0 3
63110: MINUS
63111: PUSH
63112: LD_INT 0
63114: LESS
63115: IFFALSE 63127
// min_x := 0 else
63117: LD_ADDR_VAR 0 8
63121: PUSH
63122: LD_INT 0
63124: ST_TO_ADDR
63125: GO 63143
// min_x := x - r ;
63127: LD_ADDR_VAR 0 8
63131: PUSH
63132: LD_VAR 0 1
63136: PUSH
63137: LD_VAR 0 3
63141: MINUS
63142: ST_TO_ADDR
// if y - r < 0 then
63143: LD_VAR 0 2
63147: PUSH
63148: LD_VAR 0 3
63152: MINUS
63153: PUSH
63154: LD_INT 0
63156: LESS
63157: IFFALSE 63169
// min_y := 0 else
63159: LD_ADDR_VAR 0 7
63163: PUSH
63164: LD_INT 0
63166: ST_TO_ADDR
63167: GO 63185
// min_y := y - r ;
63169: LD_ADDR_VAR 0 7
63173: PUSH
63174: LD_VAR 0 2
63178: PUSH
63179: LD_VAR 0 3
63183: MINUS
63184: ST_TO_ADDR
// max_x := x + r ;
63185: LD_ADDR_VAR 0 9
63189: PUSH
63190: LD_VAR 0 1
63194: PUSH
63195: LD_VAR 0 3
63199: PLUS
63200: ST_TO_ADDR
// max_y := y + r ;
63201: LD_ADDR_VAR 0 10
63205: PUSH
63206: LD_VAR 0 2
63210: PUSH
63211: LD_VAR 0 3
63215: PLUS
63216: ST_TO_ADDR
// for _x = min_x to max_x do
63217: LD_ADDR_VAR 0 5
63221: PUSH
63222: DOUBLE
63223: LD_VAR 0 8
63227: DEC
63228: ST_TO_ADDR
63229: LD_VAR 0 9
63233: PUSH
63234: FOR_TO
63235: IFFALSE 63336
// for _y = min_y to max_y do
63237: LD_ADDR_VAR 0 6
63241: PUSH
63242: DOUBLE
63243: LD_VAR 0 7
63247: DEC
63248: ST_TO_ADDR
63249: LD_VAR 0 10
63253: PUSH
63254: FOR_TO
63255: IFFALSE 63332
// begin if not ValidHex ( _x , _y ) then
63257: LD_VAR 0 5
63261: PPUSH
63262: LD_VAR 0 6
63266: PPUSH
63267: CALL_OW 488
63271: NOT
63272: IFFALSE 63276
// continue ;
63274: GO 63254
// if GetResourceTypeXY ( _x , _y ) then
63276: LD_VAR 0 5
63280: PPUSH
63281: LD_VAR 0 6
63285: PPUSH
63286: CALL_OW 283
63290: IFFALSE 63330
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63292: LD_ADDR_VAR 0 4
63296: PUSH
63297: LD_VAR 0 4
63301: PPUSH
63302: LD_VAR 0 4
63306: PUSH
63307: LD_INT 1
63309: PLUS
63310: PPUSH
63311: LD_VAR 0 5
63315: PUSH
63316: LD_VAR 0 6
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PPUSH
63325: CALL_OW 1
63329: ST_TO_ADDR
// end ;
63330: GO 63254
63332: POP
63333: POP
63334: GO 63234
63336: POP
63337: POP
// end ;
63338: LD_VAR 0 4
63342: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63343: LD_INT 0
63345: PPUSH
63346: PPUSH
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
// if not units then
63353: LD_VAR 0 1
63357: NOT
63358: IFFALSE 63362
// exit ;
63360: GO 63886
// result := UnitFilter ( units , [ f_ok ] ) ;
63362: LD_ADDR_VAR 0 3
63366: PUSH
63367: LD_VAR 0 1
63371: PPUSH
63372: LD_INT 50
63374: PUSH
63375: EMPTY
63376: LIST
63377: PPUSH
63378: CALL_OW 72
63382: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63383: LD_ADDR_VAR 0 8
63387: PUSH
63388: LD_VAR 0 1
63392: PUSH
63393: LD_INT 1
63395: ARRAY
63396: PPUSH
63397: CALL_OW 255
63401: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63402: LD_ADDR_VAR 0 10
63406: PUSH
63407: LD_INT 29
63409: PUSH
63410: LD_INT 91
63412: PUSH
63413: LD_INT 49
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// if not result then
63421: LD_VAR 0 3
63425: NOT
63426: IFFALSE 63430
// exit ;
63428: GO 63886
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63430: LD_ADDR_VAR 0 5
63434: PUSH
63435: LD_INT 81
63437: PUSH
63438: LD_VAR 0 8
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PPUSH
63447: CALL_OW 69
63451: ST_TO_ADDR
// for i in result do
63452: LD_ADDR_VAR 0 4
63456: PUSH
63457: LD_VAR 0 3
63461: PUSH
63462: FOR_IN
63463: IFFALSE 63884
// begin tag := GetTag ( i ) + 1 ;
63465: LD_ADDR_VAR 0 9
63469: PUSH
63470: LD_VAR 0 4
63474: PPUSH
63475: CALL_OW 110
63479: PUSH
63480: LD_INT 1
63482: PLUS
63483: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63484: LD_ADDR_VAR 0 7
63488: PUSH
63489: LD_VAR 0 4
63493: PPUSH
63494: CALL_OW 250
63498: PPUSH
63499: LD_VAR 0 4
63503: PPUSH
63504: CALL_OW 251
63508: PPUSH
63509: LD_INT 6
63511: PPUSH
63512: CALL 63085 0 3
63516: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63517: LD_VAR 0 4
63521: PPUSH
63522: CALL_OW 247
63526: PUSH
63527: LD_INT 2
63529: EQUAL
63530: PUSH
63531: LD_VAR 0 7
63535: AND
63536: PUSH
63537: LD_VAR 0 4
63541: PPUSH
63542: CALL_OW 264
63546: PUSH
63547: LD_VAR 0 10
63551: IN
63552: NOT
63553: AND
63554: IFFALSE 63593
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63556: LD_VAR 0 4
63560: PPUSH
63561: LD_VAR 0 7
63565: PUSH
63566: LD_INT 1
63568: ARRAY
63569: PUSH
63570: LD_INT 1
63572: ARRAY
63573: PPUSH
63574: LD_VAR 0 7
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PUSH
63583: LD_INT 2
63585: ARRAY
63586: PPUSH
63587: CALL_OW 116
63591: GO 63882
// if path > tag then
63593: LD_VAR 0 2
63597: PUSH
63598: LD_VAR 0 9
63602: GREATER
63603: IFFALSE 63811
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63605: LD_ADDR_VAR 0 6
63609: PUSH
63610: LD_VAR 0 5
63614: PPUSH
63615: LD_INT 91
63617: PUSH
63618: LD_VAR 0 4
63622: PUSH
63623: LD_INT 8
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: LIST
63630: PPUSH
63631: CALL_OW 72
63635: ST_TO_ADDR
// if nearEnemy then
63636: LD_VAR 0 6
63640: IFFALSE 63709
// begin if GetWeapon ( i ) = ru_time_lapser then
63642: LD_VAR 0 4
63646: PPUSH
63647: CALL_OW 264
63651: PUSH
63652: LD_INT 49
63654: EQUAL
63655: IFFALSE 63683
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63657: LD_VAR 0 4
63661: PPUSH
63662: LD_VAR 0 6
63666: PPUSH
63667: LD_VAR 0 4
63671: PPUSH
63672: CALL_OW 74
63676: PPUSH
63677: CALL_OW 112
63681: GO 63707
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63683: LD_VAR 0 4
63687: PPUSH
63688: LD_VAR 0 6
63692: PPUSH
63693: LD_VAR 0 4
63697: PPUSH
63698: CALL_OW 74
63702: PPUSH
63703: CALL_OW 115
// end else
63707: GO 63809
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63709: LD_VAR 0 4
63713: PPUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_VAR 0 9
63723: ARRAY
63724: PUSH
63725: LD_INT 1
63727: ARRAY
63728: PPUSH
63729: LD_VAR 0 2
63733: PUSH
63734: LD_VAR 0 9
63738: ARRAY
63739: PUSH
63740: LD_INT 2
63742: ARRAY
63743: PPUSH
63744: CALL_OW 297
63748: PUSH
63749: LD_INT 6
63751: GREATER
63752: IFFALSE 63795
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63754: LD_VAR 0 4
63758: PPUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_VAR 0 9
63768: ARRAY
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PPUSH
63774: LD_VAR 0 2
63778: PUSH
63779: LD_VAR 0 9
63783: ARRAY
63784: PUSH
63785: LD_INT 2
63787: ARRAY
63788: PPUSH
63789: CALL_OW 114
63793: GO 63809
// SetTag ( i , tag ) ;
63795: LD_VAR 0 4
63799: PPUSH
63800: LD_VAR 0 9
63804: PPUSH
63805: CALL_OW 109
// end else
63809: GO 63882
// if enemy then
63811: LD_VAR 0 5
63815: IFFALSE 63882
// begin if GetWeapon ( i ) = ru_time_lapser then
63817: LD_VAR 0 4
63821: PPUSH
63822: CALL_OW 264
63826: PUSH
63827: LD_INT 49
63829: EQUAL
63830: IFFALSE 63858
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63832: LD_VAR 0 4
63836: PPUSH
63837: LD_VAR 0 5
63841: PPUSH
63842: LD_VAR 0 4
63846: PPUSH
63847: CALL_OW 74
63851: PPUSH
63852: CALL_OW 112
63856: GO 63882
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63858: LD_VAR 0 4
63862: PPUSH
63863: LD_VAR 0 5
63867: PPUSH
63868: LD_VAR 0 4
63872: PPUSH
63873: CALL_OW 74
63877: PPUSH
63878: CALL_OW 115
// end ; end ;
63882: GO 63462
63884: POP
63885: POP
// end ;
63886: LD_VAR 0 3
63890: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63891: LD_INT 0
63893: PPUSH
63894: PPUSH
63895: PPUSH
// if not unit or IsInUnit ( unit ) then
63896: LD_VAR 0 1
63900: NOT
63901: PUSH
63902: LD_VAR 0 1
63906: PPUSH
63907: CALL_OW 310
63911: OR
63912: IFFALSE 63916
// exit ;
63914: GO 64007
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63916: LD_ADDR_VAR 0 4
63920: PUSH
63921: LD_VAR 0 1
63925: PPUSH
63926: CALL_OW 250
63930: PPUSH
63931: LD_VAR 0 2
63935: PPUSH
63936: LD_INT 1
63938: PPUSH
63939: CALL_OW 272
63943: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63944: LD_ADDR_VAR 0 5
63948: PUSH
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL_OW 251
63958: PPUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: LD_INT 1
63966: PPUSH
63967: CALL_OW 273
63971: ST_TO_ADDR
// if ValidHex ( x , y ) then
63972: LD_VAR 0 4
63976: PPUSH
63977: LD_VAR 0 5
63981: PPUSH
63982: CALL_OW 488
63986: IFFALSE 64007
// ComTurnXY ( unit , x , y ) ;
63988: LD_VAR 0 1
63992: PPUSH
63993: LD_VAR 0 4
63997: PPUSH
63998: LD_VAR 0 5
64002: PPUSH
64003: CALL_OW 118
// end ;
64007: LD_VAR 0 3
64011: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64012: LD_INT 0
64014: PPUSH
64015: PPUSH
// result := false ;
64016: LD_ADDR_VAR 0 3
64020: PUSH
64021: LD_INT 0
64023: ST_TO_ADDR
// if not units then
64024: LD_VAR 0 2
64028: NOT
64029: IFFALSE 64033
// exit ;
64031: GO 64078
// for i in units do
64033: LD_ADDR_VAR 0 4
64037: PUSH
64038: LD_VAR 0 2
64042: PUSH
64043: FOR_IN
64044: IFFALSE 64076
// if See ( side , i ) then
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_VAR 0 4
64055: PPUSH
64056: CALL_OW 292
64060: IFFALSE 64074
// begin result := true ;
64062: LD_ADDR_VAR 0 3
64066: PUSH
64067: LD_INT 1
64069: ST_TO_ADDR
// exit ;
64070: POP
64071: POP
64072: GO 64078
// end ;
64074: GO 64043
64076: POP
64077: POP
// end ;
64078: LD_VAR 0 3
64082: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64083: LD_INT 0
64085: PPUSH
64086: PPUSH
64087: PPUSH
64088: PPUSH
// if not unit or not points then
64089: LD_VAR 0 1
64093: NOT
64094: PUSH
64095: LD_VAR 0 2
64099: NOT
64100: OR
64101: IFFALSE 64105
// exit ;
64103: GO 64195
// dist := 99999 ;
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_INT 99999
64112: ST_TO_ADDR
// for i in points do
64113: LD_ADDR_VAR 0 4
64117: PUSH
64118: LD_VAR 0 2
64122: PUSH
64123: FOR_IN
64124: IFFALSE 64193
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64126: LD_ADDR_VAR 0 6
64130: PUSH
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 4
64140: PUSH
64141: LD_INT 1
64143: ARRAY
64144: PPUSH
64145: LD_VAR 0 4
64149: PUSH
64150: LD_INT 2
64152: ARRAY
64153: PPUSH
64154: CALL_OW 297
64158: ST_TO_ADDR
// if tmpDist < dist then
64159: LD_VAR 0 6
64163: PUSH
64164: LD_VAR 0 5
64168: LESS
64169: IFFALSE 64191
// begin result := i ;
64171: LD_ADDR_VAR 0 3
64175: PUSH
64176: LD_VAR 0 4
64180: ST_TO_ADDR
// dist := tmpDist ;
64181: LD_ADDR_VAR 0 5
64185: PUSH
64186: LD_VAR 0 6
64190: ST_TO_ADDR
// end ; end ;
64191: GO 64123
64193: POP
64194: POP
// end ;
64195: LD_VAR 0 3
64199: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64200: LD_INT 0
64202: PPUSH
// uc_side := side ;
64203: LD_ADDR_OWVAR 20
64207: PUSH
64208: LD_VAR 0 1
64212: ST_TO_ADDR
// uc_nation := 3 ;
64213: LD_ADDR_OWVAR 21
64217: PUSH
64218: LD_INT 3
64220: ST_TO_ADDR
// vc_chassis := 25 ;
64221: LD_ADDR_OWVAR 37
64225: PUSH
64226: LD_INT 25
64228: ST_TO_ADDR
// vc_engine := engine_siberite ;
64229: LD_ADDR_OWVAR 39
64233: PUSH
64234: LD_INT 3
64236: ST_TO_ADDR
// vc_control := control_computer ;
64237: LD_ADDR_OWVAR 38
64241: PUSH
64242: LD_INT 3
64244: ST_TO_ADDR
// vc_weapon := 59 ;
64245: LD_ADDR_OWVAR 40
64249: PUSH
64250: LD_INT 59
64252: ST_TO_ADDR
// result := CreateVehicle ;
64253: LD_ADDR_VAR 0 5
64257: PUSH
64258: CALL_OW 45
64262: ST_TO_ADDR
// SetDir ( result , d ) ;
64263: LD_VAR 0 5
64267: PPUSH
64268: LD_VAR 0 4
64272: PPUSH
64273: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64277: LD_VAR 0 5
64281: PPUSH
64282: LD_VAR 0 2
64286: PPUSH
64287: LD_VAR 0 3
64291: PPUSH
64292: LD_INT 0
64294: PPUSH
64295: CALL_OW 48
// end ;
64299: LD_VAR 0 5
64303: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64304: LD_INT 0
64306: PPUSH
64307: PPUSH
64308: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64309: LD_ADDR_VAR 0 2
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64332: LD_VAR 0 1
64336: NOT
64337: PUSH
64338: LD_VAR 0 1
64342: PPUSH
64343: CALL_OW 264
64347: PUSH
64348: LD_INT 12
64350: PUSH
64351: LD_INT 51
64353: PUSH
64354: LD_INT 32
64356: PUSH
64357: LD_INT 89
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: IN
64366: NOT
64367: OR
64368: IFFALSE 64372
// exit ;
64370: GO 64470
// for i := 1 to 3 do
64372: LD_ADDR_VAR 0 3
64376: PUSH
64377: DOUBLE
64378: LD_INT 1
64380: DEC
64381: ST_TO_ADDR
64382: LD_INT 3
64384: PUSH
64385: FOR_TO
64386: IFFALSE 64468
// begin tmp := GetCargo ( cargo , i ) ;
64388: LD_ADDR_VAR 0 4
64392: PUSH
64393: LD_VAR 0 1
64397: PPUSH
64398: LD_VAR 0 3
64402: PPUSH
64403: CALL_OW 289
64407: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64408: LD_ADDR_VAR 0 2
64412: PUSH
64413: LD_VAR 0 2
64417: PPUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: LD_VAR 0 4
64427: PPUSH
64428: CALL_OW 1
64432: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_VAR 0 2
64442: PPUSH
64443: LD_INT 4
64445: PPUSH
64446: LD_VAR 0 2
64450: PUSH
64451: LD_INT 4
64453: ARRAY
64454: PUSH
64455: LD_VAR 0 4
64459: PLUS
64460: PPUSH
64461: CALL_OW 1
64465: ST_TO_ADDR
// end ;
64466: GO 64385
64468: POP
64469: POP
// end ;
64470: LD_VAR 0 2
64474: RET
// export function Length ( array ) ; begin
64475: LD_INT 0
64477: PPUSH
// result := array + 0 ;
64478: LD_ADDR_VAR 0 2
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_INT 0
64490: PLUS
64491: ST_TO_ADDR
// end ;
64492: LD_VAR 0 2
64496: RET
// export function PrepareArray ( array ) ; begin
64497: LD_INT 0
64499: PPUSH
// result := array diff 0 ;
64500: LD_ADDR_VAR 0 2
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_INT 0
64512: DIFF
64513: ST_TO_ADDR
// if not result [ 1 ] then
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 1
64521: ARRAY
64522: NOT
64523: IFFALSE 64543
// result := Delete ( result , 1 ) ;
64525: LD_ADDR_VAR 0 2
64529: PUSH
64530: LD_VAR 0 2
64534: PPUSH
64535: LD_INT 1
64537: PPUSH
64538: CALL_OW 3
64542: ST_TO_ADDR
// end ; end_of_file
64543: LD_VAR 0 2
64547: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64548: LD_VAR 0 1
64552: PUSH
64553: LD_INT 200
64555: DOUBLE
64556: GREATEREQUAL
64557: IFFALSE 64565
64559: LD_INT 299
64561: DOUBLE
64562: LESSEQUAL
64563: IFTRUE 64567
64565: GO 64599
64567: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64568: LD_VAR 0 1
64572: PPUSH
64573: LD_VAR 0 2
64577: PPUSH
64578: LD_VAR 0 3
64582: PPUSH
64583: LD_VAR 0 4
64587: PPUSH
64588: LD_VAR 0 5
64592: PPUSH
64593: CALL 65087 0 5
64597: GO 64676
64599: LD_INT 300
64601: DOUBLE
64602: GREATEREQUAL
64603: IFFALSE 64611
64605: LD_INT 399
64607: DOUBLE
64608: LESSEQUAL
64609: IFTRUE 64613
64611: GO 64675
64613: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_VAR 0 2
64623: PPUSH
64624: LD_VAR 0 3
64628: PPUSH
64629: LD_VAR 0 4
64633: PPUSH
64634: LD_VAR 0 5
64638: PPUSH
64639: LD_VAR 0 6
64643: PPUSH
64644: LD_VAR 0 7
64648: PPUSH
64649: LD_VAR 0 8
64653: PPUSH
64654: LD_VAR 0 9
64658: PPUSH
64659: LD_VAR 0 10
64663: PPUSH
64664: LD_VAR 0 11
64668: PPUSH
64669: CALL 20072 0 11
64673: GO 64676
64675: POP
// end ;
64676: PPOPN 11
64678: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: LD_VAR 0 3
64693: PPUSH
64694: LD_VAR 0 4
64698: PPUSH
64699: LD_VAR 0 5
64703: PPUSH
64704: CALL 64823 0 5
// end ; end_of_file
64708: PPOPN 5
64710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
64711: LD_INT 0
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
64717: LD_VAR 0 1
64721: PPUSH
64722: CALL_OW 264
64726: PUSH
64727: LD_INT 91
64729: EQUAL
64730: IFFALSE 64802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64732: LD_INT 68
64734: PPUSH
64735: LD_VAR 0 1
64739: PPUSH
64740: CALL_OW 255
64744: PPUSH
64745: CALL_OW 321
64749: PUSH
64750: LD_INT 2
64752: EQUAL
64753: IFFALSE 64765
// eff := 70 else
64755: LD_ADDR_VAR 0 4
64759: PUSH
64760: LD_INT 70
64762: ST_TO_ADDR
64763: GO 64773
// eff := 30 ;
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: LD_INT 30
64772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64773: LD_VAR 0 1
64777: PPUSH
64778: CALL_OW 250
64782: PPUSH
64783: LD_VAR 0 1
64787: PPUSH
64788: CALL_OW 251
64792: PPUSH
64793: LD_VAR 0 4
64797: PPUSH
64798: CALL_OW 495
// end ; end ;
64802: LD_VAR 0 2
64806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64807: LD_INT 0
64809: PPUSH
// end ;
64810: LD_VAR 0 4
64814: RET
// export function SOS_Command ( cmd ) ; begin
64815: LD_INT 0
64817: PPUSH
// end ;
64818: LD_VAR 0 2
64822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64823: LD_INT 0
64825: PPUSH
// end ;
64826: LD_VAR 0 6
64830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64831: LD_INT 0
64833: PPUSH
64834: PPUSH
// if not vehicle or not factory then
64835: LD_VAR 0 1
64839: NOT
64840: PUSH
64841: LD_VAR 0 2
64845: NOT
64846: OR
64847: IFFALSE 64851
// exit ;
64849: GO 65082
// if factoryWaypoints >= factory then
64851: LD_EXP 77
64855: PUSH
64856: LD_VAR 0 2
64860: GREATEREQUAL
64861: IFFALSE 65082
// if factoryWaypoints [ factory ] then
64863: LD_EXP 77
64867: PUSH
64868: LD_VAR 0 2
64872: ARRAY
64873: IFFALSE 65082
// begin if GetControl ( vehicle ) = control_manual then
64875: LD_VAR 0 1
64879: PPUSH
64880: CALL_OW 263
64884: PUSH
64885: LD_INT 1
64887: EQUAL
64888: IFFALSE 64969
// begin driver := IsDrivenBy ( vehicle ) ;
64890: LD_ADDR_VAR 0 4
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 311
64904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64905: LD_VAR 0 4
64909: PPUSH
64910: LD_EXP 77
64914: PUSH
64915: LD_VAR 0 2
64919: ARRAY
64920: PUSH
64921: LD_INT 3
64923: ARRAY
64924: PPUSH
64925: LD_EXP 77
64929: PUSH
64930: LD_VAR 0 2
64934: ARRAY
64935: PUSH
64936: LD_INT 4
64938: ARRAY
64939: PPUSH
64940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64944: LD_VAR 0 4
64948: PPUSH
64949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64953: LD_VAR 0 4
64957: PPUSH
64958: LD_VAR 0 2
64962: PPUSH
64963: CALL_OW 180
// end else
64967: GO 65082
// if GetControl ( vehicle ) = control_remote then
64969: LD_VAR 0 1
64973: PPUSH
64974: CALL_OW 263
64978: PUSH
64979: LD_INT 2
64981: EQUAL
64982: IFFALSE 65043
// begin wait ( 0 0$2 ) ;
64984: LD_INT 70
64986: PPUSH
64987: CALL_OW 67
// if Connect ( vehicle ) then
64991: LD_VAR 0 1
64995: PPUSH
64996: CALL 31469 0 1
65000: IFFALSE 65041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65002: LD_VAR 0 1
65006: PPUSH
65007: LD_EXP 77
65011: PUSH
65012: LD_VAR 0 2
65016: ARRAY
65017: PUSH
65018: LD_INT 3
65020: ARRAY
65021: PPUSH
65022: LD_EXP 77
65026: PUSH
65027: LD_VAR 0 2
65031: ARRAY
65032: PUSH
65033: LD_INT 4
65035: ARRAY
65036: PPUSH
65037: CALL_OW 171
// end else
65041: GO 65082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65043: LD_VAR 0 1
65047: PPUSH
65048: LD_EXP 77
65052: PUSH
65053: LD_VAR 0 2
65057: ARRAY
65058: PUSH
65059: LD_INT 3
65061: ARRAY
65062: PPUSH
65063: LD_EXP 77
65067: PUSH
65068: LD_VAR 0 2
65072: ARRAY
65073: PUSH
65074: LD_INT 4
65076: ARRAY
65077: PPUSH
65078: CALL_OW 171
// end ; end ;
65082: LD_VAR 0 3
65086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65087: LD_INT 0
65089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65090: LD_VAR 0 1
65094: PUSH
65095: LD_INT 250
65097: EQUAL
65098: PUSH
65099: LD_VAR 0 2
65103: PPUSH
65104: CALL_OW 264
65108: PUSH
65109: LD_INT 81
65111: EQUAL
65112: AND
65113: IFFALSE 65134
// MinerPlaceMine ( unit , x , y ) ;
65115: LD_VAR 0 2
65119: PPUSH
65120: LD_VAR 0 4
65124: PPUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: CALL 67519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 251
65141: EQUAL
65142: PUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: CALL_OW 264
65152: PUSH
65153: LD_INT 81
65155: EQUAL
65156: AND
65157: IFFALSE 65178
// MinerDetonateMine ( unit , x , y ) ;
65159: LD_VAR 0 2
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: LD_VAR 0 5
65173: PPUSH
65174: CALL 67794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65178: LD_VAR 0 1
65182: PUSH
65183: LD_INT 252
65185: EQUAL
65186: PUSH
65187: LD_VAR 0 2
65191: PPUSH
65192: CALL_OW 264
65196: PUSH
65197: LD_INT 81
65199: EQUAL
65200: AND
65201: IFFALSE 65222
// MinerCreateMinefield ( unit , x , y ) ;
65203: LD_VAR 0 2
65207: PPUSH
65208: LD_VAR 0 4
65212: PPUSH
65213: LD_VAR 0 5
65217: PPUSH
65218: CALL 68211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65222: LD_VAR 0 1
65226: PUSH
65227: LD_INT 253
65229: EQUAL
65230: PUSH
65231: LD_VAR 0 2
65235: PPUSH
65236: CALL_OW 257
65240: PUSH
65241: LD_INT 5
65243: EQUAL
65244: AND
65245: IFFALSE 65266
// ComBinocular ( unit , x , y ) ;
65247: LD_VAR 0 2
65251: PPUSH
65252: LD_VAR 0 4
65256: PPUSH
65257: LD_VAR 0 5
65261: PPUSH
65262: CALL 68580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65266: LD_VAR 0 1
65270: PUSH
65271: LD_INT 254
65273: EQUAL
65274: PUSH
65275: LD_VAR 0 2
65279: PPUSH
65280: CALL_OW 264
65284: PUSH
65285: LD_INT 99
65287: EQUAL
65288: AND
65289: PUSH
65290: LD_VAR 0 3
65294: PPUSH
65295: CALL_OW 263
65299: PUSH
65300: LD_INT 3
65302: EQUAL
65303: AND
65304: IFFALSE 65320
// HackDestroyVehicle ( unit , selectedUnit ) ;
65306: LD_VAR 0 2
65310: PPUSH
65311: LD_VAR 0 3
65315: PPUSH
65316: CALL 66883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 255
65327: EQUAL
65328: PUSH
65329: LD_VAR 0 2
65333: PPUSH
65334: CALL_OW 264
65338: PUSH
65339: LD_INT 14
65341: PUSH
65342: LD_INT 53
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: IN
65349: AND
65350: PUSH
65351: LD_VAR 0 4
65355: PPUSH
65356: LD_VAR 0 5
65360: PPUSH
65361: CALL_OW 488
65365: AND
65366: IFFALSE 65390
// CutTreeXYR ( unit , x , y , 12 ) ;
65368: LD_VAR 0 2
65372: PPUSH
65373: LD_VAR 0 4
65377: PPUSH
65378: LD_VAR 0 5
65382: PPUSH
65383: LD_INT 12
65385: PPUSH
65386: CALL 65453 0 4
// if cmd = 256 then
65390: LD_VAR 0 1
65394: PUSH
65395: LD_INT 256
65397: EQUAL
65398: IFFALSE 65419
// SetFactoryWaypoint ( unit , x , y ) ;
65400: LD_VAR 0 2
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: LD_VAR 0 5
65414: PPUSH
65415: CALL 22052 0 3
// if cmd = 257 then
65419: LD_VAR 0 1
65423: PUSH
65424: LD_INT 257
65426: EQUAL
65427: IFFALSE 65448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65429: LD_VAR 0 2
65433: PPUSH
65434: LD_VAR 0 4
65438: PPUSH
65439: LD_VAR 0 5
65443: PPUSH
65444: CALL 22414 0 3
// end ;
65448: LD_VAR 0 6
65452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65453: LD_INT 0
65455: PPUSH
65456: PPUSH
65457: PPUSH
65458: PPUSH
65459: PPUSH
65460: PPUSH
65461: PPUSH
65462: PPUSH
65463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65464: LD_VAR 0 1
65468: NOT
65469: PUSH
65470: LD_VAR 0 2
65474: PPUSH
65475: LD_VAR 0 3
65479: PPUSH
65480: CALL_OW 488
65484: NOT
65485: OR
65486: PUSH
65487: LD_VAR 0 4
65491: NOT
65492: OR
65493: IFFALSE 65497
// exit ;
65495: GO 65837
// list := [ ] ;
65497: LD_ADDR_VAR 0 13
65501: PUSH
65502: EMPTY
65503: ST_TO_ADDR
// if x - r < 0 then
65504: LD_VAR 0 2
65508: PUSH
65509: LD_VAR 0 4
65513: MINUS
65514: PUSH
65515: LD_INT 0
65517: LESS
65518: IFFALSE 65530
// min_x := 0 else
65520: LD_ADDR_VAR 0 7
65524: PUSH
65525: LD_INT 0
65527: ST_TO_ADDR
65528: GO 65546
// min_x := x - r ;
65530: LD_ADDR_VAR 0 7
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_VAR 0 4
65544: MINUS
65545: ST_TO_ADDR
// if y - r < 0 then
65546: LD_VAR 0 3
65550: PUSH
65551: LD_VAR 0 4
65555: MINUS
65556: PUSH
65557: LD_INT 0
65559: LESS
65560: IFFALSE 65572
// min_y := 0 else
65562: LD_ADDR_VAR 0 8
65566: PUSH
65567: LD_INT 0
65569: ST_TO_ADDR
65570: GO 65588
// min_y := y - r ;
65572: LD_ADDR_VAR 0 8
65576: PUSH
65577: LD_VAR 0 3
65581: PUSH
65582: LD_VAR 0 4
65586: MINUS
65587: ST_TO_ADDR
// max_x := x + r ;
65588: LD_ADDR_VAR 0 9
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_VAR 0 4
65602: PLUS
65603: ST_TO_ADDR
// max_y := y + r ;
65604: LD_ADDR_VAR 0 10
65608: PUSH
65609: LD_VAR 0 3
65613: PUSH
65614: LD_VAR 0 4
65618: PLUS
65619: ST_TO_ADDR
// for _x = min_x to max_x do
65620: LD_ADDR_VAR 0 11
65624: PUSH
65625: DOUBLE
65626: LD_VAR 0 7
65630: DEC
65631: ST_TO_ADDR
65632: LD_VAR 0 9
65636: PUSH
65637: FOR_TO
65638: IFFALSE 65755
// for _y = min_y to max_y do
65640: LD_ADDR_VAR 0 12
65644: PUSH
65645: DOUBLE
65646: LD_VAR 0 8
65650: DEC
65651: ST_TO_ADDR
65652: LD_VAR 0 10
65656: PUSH
65657: FOR_TO
65658: IFFALSE 65751
// begin if not ValidHex ( _x , _y ) then
65660: LD_VAR 0 11
65664: PPUSH
65665: LD_VAR 0 12
65669: PPUSH
65670: CALL_OW 488
65674: NOT
65675: IFFALSE 65679
// continue ;
65677: GO 65657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65679: LD_VAR 0 11
65683: PPUSH
65684: LD_VAR 0 12
65688: PPUSH
65689: CALL_OW 351
65693: PUSH
65694: LD_VAR 0 11
65698: PPUSH
65699: LD_VAR 0 12
65703: PPUSH
65704: CALL_OW 554
65708: AND
65709: IFFALSE 65749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65711: LD_ADDR_VAR 0 13
65715: PUSH
65716: LD_VAR 0 13
65720: PPUSH
65721: LD_VAR 0 13
65725: PUSH
65726: LD_INT 1
65728: PLUS
65729: PPUSH
65730: LD_VAR 0 11
65734: PUSH
65735: LD_VAR 0 12
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PPUSH
65744: CALL_OW 2
65748: ST_TO_ADDR
// end ;
65749: GO 65657
65751: POP
65752: POP
65753: GO 65637
65755: POP
65756: POP
// if not list then
65757: LD_VAR 0 13
65761: NOT
65762: IFFALSE 65766
// exit ;
65764: GO 65837
// for i in list do
65766: LD_ADDR_VAR 0 6
65770: PUSH
65771: LD_VAR 0 13
65775: PUSH
65776: FOR_IN
65777: IFFALSE 65835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65779: LD_VAR 0 1
65783: PPUSH
65784: LD_STRING M
65786: PUSH
65787: LD_VAR 0 6
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PUSH
65796: LD_VAR 0 6
65800: PUSH
65801: LD_INT 2
65803: ARRAY
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: PPUSH
65829: CALL_OW 447
65833: GO 65776
65835: POP
65836: POP
// end ;
65837: LD_VAR 0 5
65841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65842: LD_EXP 80
65846: NOT
65847: IFFALSE 65897
65849: GO 65851
65851: DISABLE
// begin initHack := true ;
65852: LD_ADDR_EXP 80
65856: PUSH
65857: LD_INT 1
65859: ST_TO_ADDR
// hackTanks := [ ] ;
65860: LD_ADDR_EXP 81
65864: PUSH
65865: EMPTY
65866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65867: LD_ADDR_EXP 82
65871: PUSH
65872: EMPTY
65873: ST_TO_ADDR
// hackLimit := 3 ;
65874: LD_ADDR_EXP 83
65878: PUSH
65879: LD_INT 3
65881: ST_TO_ADDR
// hackDist := 12 ;
65882: LD_ADDR_EXP 84
65886: PUSH
65887: LD_INT 12
65889: ST_TO_ADDR
// hackCounter := [ ] ;
65890: LD_ADDR_EXP 85
65894: PUSH
65895: EMPTY
65896: ST_TO_ADDR
// end ;
65897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65898: LD_EXP 80
65902: PUSH
65903: LD_INT 34
65905: PUSH
65906: LD_INT 99
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PPUSH
65913: CALL_OW 69
65917: AND
65918: IFFALSE 66171
65920: GO 65922
65922: DISABLE
65923: LD_INT 0
65925: PPUSH
65926: PPUSH
// begin enable ;
65927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65928: LD_ADDR_VAR 0 1
65932: PUSH
65933: LD_INT 34
65935: PUSH
65936: LD_INT 99
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PPUSH
65943: CALL_OW 69
65947: PUSH
65948: FOR_IN
65949: IFFALSE 66169
// begin if not i in hackTanks then
65951: LD_VAR 0 1
65955: PUSH
65956: LD_EXP 81
65960: IN
65961: NOT
65962: IFFALSE 66045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65964: LD_ADDR_EXP 81
65968: PUSH
65969: LD_EXP 81
65973: PPUSH
65974: LD_EXP 81
65978: PUSH
65979: LD_INT 1
65981: PLUS
65982: PPUSH
65983: LD_VAR 0 1
65987: PPUSH
65988: CALL_OW 1
65992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65993: LD_ADDR_EXP 82
65997: PUSH
65998: LD_EXP 82
66002: PPUSH
66003: LD_EXP 82
66007: PUSH
66008: LD_INT 1
66010: PLUS
66011: PPUSH
66012: EMPTY
66013: PPUSH
66014: CALL_OW 1
66018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66019: LD_ADDR_EXP 85
66023: PUSH
66024: LD_EXP 85
66028: PPUSH
66029: LD_EXP 85
66033: PUSH
66034: LD_INT 1
66036: PLUS
66037: PPUSH
66038: EMPTY
66039: PPUSH
66040: CALL_OW 1
66044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66045: LD_VAR 0 1
66049: PPUSH
66050: CALL_OW 302
66054: NOT
66055: IFFALSE 66068
// begin HackUnlinkAll ( i ) ;
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL 66174 0 1
// continue ;
66066: GO 65948
// end ; HackCheckCapturedStatus ( i ) ;
66068: LD_VAR 0 1
66072: PPUSH
66073: CALL 66617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66077: LD_ADDR_VAR 0 2
66081: PUSH
66082: LD_INT 81
66084: PUSH
66085: LD_VAR 0 1
66089: PPUSH
66090: CALL_OW 255
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 33
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 91
66111: PUSH
66112: LD_VAR 0 1
66116: PUSH
66117: LD_EXP 84
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 50
66129: PUSH
66130: EMPTY
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: PPUSH
66139: CALL_OW 69
66143: ST_TO_ADDR
// if not tmp then
66144: LD_VAR 0 2
66148: NOT
66149: IFFALSE 66153
// continue ;
66151: GO 65948
// HackLink ( i , tmp ) ;
66153: LD_VAR 0 1
66157: PPUSH
66158: LD_VAR 0 2
66162: PPUSH
66163: CALL 66310 0 2
// end ;
66167: GO 65948
66169: POP
66170: POP
// end ;
66171: PPOPN 2
66173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66174: LD_INT 0
66176: PPUSH
66177: PPUSH
66178: PPUSH
// if not hack in hackTanks then
66179: LD_VAR 0 1
66183: PUSH
66184: LD_EXP 81
66188: IN
66189: NOT
66190: IFFALSE 66194
// exit ;
66192: GO 66305
// index := GetElementIndex ( hackTanks , hack ) ;
66194: LD_ADDR_VAR 0 4
66198: PUSH
66199: LD_EXP 81
66203: PPUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: CALL 28285 0 2
66213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66214: LD_EXP 82
66218: PUSH
66219: LD_VAR 0 4
66223: ARRAY
66224: IFFALSE 66305
// begin for i in hackTanksCaptured [ index ] do
66226: LD_ADDR_VAR 0 3
66230: PUSH
66231: LD_EXP 82
66235: PUSH
66236: LD_VAR 0 4
66240: ARRAY
66241: PUSH
66242: FOR_IN
66243: IFFALSE 66269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66245: LD_VAR 0 3
66249: PUSH
66250: LD_INT 1
66252: ARRAY
66253: PPUSH
66254: LD_VAR 0 3
66258: PUSH
66259: LD_INT 2
66261: ARRAY
66262: PPUSH
66263: CALL_OW 235
66267: GO 66242
66269: POP
66270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66271: LD_ADDR_EXP 82
66275: PUSH
66276: LD_EXP 82
66280: PPUSH
66281: LD_VAR 0 4
66285: PPUSH
66286: EMPTY
66287: PPUSH
66288: CALL_OW 1
66292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66293: LD_VAR 0 1
66297: PPUSH
66298: LD_INT 0
66300: PPUSH
66301: CALL_OW 505
// end ; end ;
66305: LD_VAR 0 2
66309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66310: LD_INT 0
66312: PPUSH
66313: PPUSH
66314: PPUSH
// if not hack in hackTanks or not vehicles then
66315: LD_VAR 0 1
66319: PUSH
66320: LD_EXP 81
66324: IN
66325: NOT
66326: PUSH
66327: LD_VAR 0 2
66331: NOT
66332: OR
66333: IFFALSE 66337
// exit ;
66335: GO 66612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66337: LD_ADDR_VAR 0 2
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_VAR 0 2
66351: PPUSH
66352: LD_INT 1
66354: PPUSH
66355: LD_INT 1
66357: PPUSH
66358: CALL 28935 0 4
66362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66363: LD_ADDR_VAR 0 5
66367: PUSH
66368: LD_EXP 81
66372: PPUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: CALL 28285 0 2
66382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66383: LD_EXP 82
66387: PUSH
66388: LD_VAR 0 5
66392: ARRAY
66393: PUSH
66394: LD_EXP 83
66398: LESS
66399: IFFALSE 66588
// begin for i := 1 to vehicles do
66401: LD_ADDR_VAR 0 4
66405: PUSH
66406: DOUBLE
66407: LD_INT 1
66409: DEC
66410: ST_TO_ADDR
66411: LD_VAR 0 2
66415: PUSH
66416: FOR_TO
66417: IFFALSE 66586
// begin if hackTanksCaptured [ index ] = hackLimit then
66419: LD_EXP 82
66423: PUSH
66424: LD_VAR 0 5
66428: ARRAY
66429: PUSH
66430: LD_EXP 83
66434: EQUAL
66435: IFFALSE 66439
// break ;
66437: GO 66586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66439: LD_ADDR_EXP 85
66443: PUSH
66444: LD_EXP 85
66448: PPUSH
66449: LD_VAR 0 5
66453: PPUSH
66454: LD_EXP 85
66458: PUSH
66459: LD_VAR 0 5
66463: ARRAY
66464: PUSH
66465: LD_INT 1
66467: PLUS
66468: PPUSH
66469: CALL_OW 1
66473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66474: LD_ADDR_EXP 82
66478: PUSH
66479: LD_EXP 82
66483: PPUSH
66484: LD_VAR 0 5
66488: PUSH
66489: LD_EXP 82
66493: PUSH
66494: LD_VAR 0 5
66498: ARRAY
66499: PUSH
66500: LD_INT 1
66502: PLUS
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PPUSH
66508: LD_VAR 0 2
66512: PUSH
66513: LD_VAR 0 4
66517: ARRAY
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_VAR 0 4
66528: ARRAY
66529: PPUSH
66530: CALL_OW 255
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PPUSH
66539: CALL 28500 0 3
66543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66544: LD_VAR 0 2
66548: PUSH
66549: LD_VAR 0 4
66553: ARRAY
66554: PPUSH
66555: LD_VAR 0 1
66559: PPUSH
66560: CALL_OW 255
66564: PPUSH
66565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66569: LD_VAR 0 2
66573: PUSH
66574: LD_VAR 0 4
66578: ARRAY
66579: PPUSH
66580: CALL_OW 141
// end ;
66584: GO 66416
66586: POP
66587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66588: LD_VAR 0 1
66592: PPUSH
66593: LD_EXP 82
66597: PUSH
66598: LD_VAR 0 5
66602: ARRAY
66603: PUSH
66604: LD_INT 0
66606: PLUS
66607: PPUSH
66608: CALL_OW 505
// end ;
66612: LD_VAR 0 3
66616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66617: LD_INT 0
66619: PPUSH
66620: PPUSH
66621: PPUSH
66622: PPUSH
// if not hack in hackTanks then
66623: LD_VAR 0 1
66627: PUSH
66628: LD_EXP 81
66632: IN
66633: NOT
66634: IFFALSE 66638
// exit ;
66636: GO 66878
// index := GetElementIndex ( hackTanks , hack ) ;
66638: LD_ADDR_VAR 0 4
66642: PUSH
66643: LD_EXP 81
66647: PPUSH
66648: LD_VAR 0 1
66652: PPUSH
66653: CALL 28285 0 2
66657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: DOUBLE
66664: LD_EXP 82
66668: PUSH
66669: LD_VAR 0 4
66673: ARRAY
66674: INC
66675: ST_TO_ADDR
66676: LD_INT 1
66678: PUSH
66679: FOR_DOWNTO
66680: IFFALSE 66852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66682: LD_ADDR_VAR 0 5
66686: PUSH
66687: LD_EXP 82
66691: PUSH
66692: LD_VAR 0 4
66696: ARRAY
66697: PUSH
66698: LD_VAR 0 3
66702: ARRAY
66703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66704: LD_VAR 0 5
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PPUSH
66713: CALL_OW 302
66717: NOT
66718: PUSH
66719: LD_VAR 0 5
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PPUSH
66728: CALL_OW 255
66732: PUSH
66733: LD_VAR 0 1
66737: PPUSH
66738: CALL_OW 255
66742: NONEQUAL
66743: OR
66744: IFFALSE 66850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66746: LD_VAR 0 5
66750: PUSH
66751: LD_INT 1
66753: ARRAY
66754: PPUSH
66755: CALL_OW 305
66759: PUSH
66760: LD_VAR 0 5
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: PPUSH
66769: CALL_OW 255
66773: PUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 255
66783: EQUAL
66784: AND
66785: IFFALSE 66809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66787: LD_VAR 0 5
66791: PUSH
66792: LD_INT 1
66794: ARRAY
66795: PPUSH
66796: LD_VAR 0 5
66800: PUSH
66801: LD_INT 2
66803: ARRAY
66804: PPUSH
66805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66809: LD_ADDR_EXP 82
66813: PUSH
66814: LD_EXP 82
66818: PPUSH
66819: LD_VAR 0 4
66823: PPUSH
66824: LD_EXP 82
66828: PUSH
66829: LD_VAR 0 4
66833: ARRAY
66834: PPUSH
66835: LD_VAR 0 3
66839: PPUSH
66840: CALL_OW 3
66844: PPUSH
66845: CALL_OW 1
66849: ST_TO_ADDR
// end ; end ;
66850: GO 66679
66852: POP
66853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66854: LD_VAR 0 1
66858: PPUSH
66859: LD_EXP 82
66863: PUSH
66864: LD_VAR 0 4
66868: ARRAY
66869: PUSH
66870: LD_INT 0
66872: PLUS
66873: PPUSH
66874: CALL_OW 505
// end ;
66878: LD_VAR 0 2
66882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66883: LD_INT 0
66885: PPUSH
66886: PPUSH
66887: PPUSH
66888: PPUSH
// if not hack in hackTanks then
66889: LD_VAR 0 1
66893: PUSH
66894: LD_EXP 81
66898: IN
66899: NOT
66900: IFFALSE 66904
// exit ;
66902: GO 66989
// index := GetElementIndex ( hackTanks , hack ) ;
66904: LD_ADDR_VAR 0 5
66908: PUSH
66909: LD_EXP 81
66913: PPUSH
66914: LD_VAR 0 1
66918: PPUSH
66919: CALL 28285 0 2
66923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66924: LD_ADDR_VAR 0 4
66928: PUSH
66929: DOUBLE
66930: LD_INT 1
66932: DEC
66933: ST_TO_ADDR
66934: LD_EXP 82
66938: PUSH
66939: LD_VAR 0 5
66943: ARRAY
66944: PUSH
66945: FOR_TO
66946: IFFALSE 66987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66948: LD_EXP 82
66952: PUSH
66953: LD_VAR 0 5
66957: ARRAY
66958: PUSH
66959: LD_VAR 0 4
66963: ARRAY
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: PUSH
66969: LD_VAR 0 2
66973: EQUAL
66974: IFFALSE 66985
// KillUnit ( vehicle ) ;
66976: LD_VAR 0 2
66980: PPUSH
66981: CALL_OW 66
66985: GO 66945
66987: POP
66988: POP
// end ;
66989: LD_VAR 0 3
66993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66994: LD_EXP 86
66998: NOT
66999: IFFALSE 67034
67001: GO 67003
67003: DISABLE
// begin initMiner := true ;
67004: LD_ADDR_EXP 86
67008: PUSH
67009: LD_INT 1
67011: ST_TO_ADDR
// minersList := [ ] ;
67012: LD_ADDR_EXP 87
67016: PUSH
67017: EMPTY
67018: ST_TO_ADDR
// minerMinesList := [ ] ;
67019: LD_ADDR_EXP 88
67023: PUSH
67024: EMPTY
67025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67026: LD_ADDR_EXP 89
67030: PUSH
67031: LD_INT 5
67033: ST_TO_ADDR
// end ;
67034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67035: LD_EXP 86
67039: PUSH
67040: LD_INT 34
67042: PUSH
67043: LD_INT 81
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PPUSH
67050: CALL_OW 69
67054: AND
67055: IFFALSE 67516
67057: GO 67059
67059: DISABLE
67060: LD_INT 0
67062: PPUSH
67063: PPUSH
67064: PPUSH
67065: PPUSH
// begin enable ;
67066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67067: LD_ADDR_VAR 0 1
67071: PUSH
67072: LD_INT 34
67074: PUSH
67075: LD_INT 81
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PPUSH
67082: CALL_OW 69
67086: PUSH
67087: FOR_IN
67088: IFFALSE 67160
// begin if not i in minersList then
67090: LD_VAR 0 1
67094: PUSH
67095: LD_EXP 87
67099: IN
67100: NOT
67101: IFFALSE 67158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67103: LD_ADDR_EXP 87
67107: PUSH
67108: LD_EXP 87
67112: PPUSH
67113: LD_EXP 87
67117: PUSH
67118: LD_INT 1
67120: PLUS
67121: PPUSH
67122: LD_VAR 0 1
67126: PPUSH
67127: CALL_OW 1
67131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67132: LD_ADDR_EXP 88
67136: PUSH
67137: LD_EXP 88
67141: PPUSH
67142: LD_EXP 88
67146: PUSH
67147: LD_INT 1
67149: PLUS
67150: PPUSH
67151: EMPTY
67152: PPUSH
67153: CALL_OW 1
67157: ST_TO_ADDR
// end end ;
67158: GO 67087
67160: POP
67161: POP
// for i := minerMinesList downto 1 do
67162: LD_ADDR_VAR 0 1
67166: PUSH
67167: DOUBLE
67168: LD_EXP 88
67172: INC
67173: ST_TO_ADDR
67174: LD_INT 1
67176: PUSH
67177: FOR_DOWNTO
67178: IFFALSE 67514
// begin if IsLive ( minersList [ i ] ) then
67180: LD_EXP 87
67184: PUSH
67185: LD_VAR 0 1
67189: ARRAY
67190: PPUSH
67191: CALL_OW 300
67195: IFFALSE 67223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67197: LD_EXP 87
67201: PUSH
67202: LD_VAR 0 1
67206: ARRAY
67207: PPUSH
67208: LD_EXP 88
67212: PUSH
67213: LD_VAR 0 1
67217: ARRAY
67218: PPUSH
67219: CALL_OW 505
// if not minerMinesList [ i ] then
67223: LD_EXP 88
67227: PUSH
67228: LD_VAR 0 1
67232: ARRAY
67233: NOT
67234: IFFALSE 67238
// continue ;
67236: GO 67177
// for j := minerMinesList [ i ] downto 1 do
67238: LD_ADDR_VAR 0 2
67242: PUSH
67243: DOUBLE
67244: LD_EXP 88
67248: PUSH
67249: LD_VAR 0 1
67253: ARRAY
67254: INC
67255: ST_TO_ADDR
67256: LD_INT 1
67258: PUSH
67259: FOR_DOWNTO
67260: IFFALSE 67510
// begin side := GetSide ( minersList [ i ] ) ;
67262: LD_ADDR_VAR 0 3
67266: PUSH
67267: LD_EXP 87
67271: PUSH
67272: LD_VAR 0 1
67276: ARRAY
67277: PPUSH
67278: CALL_OW 255
67282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67283: LD_ADDR_VAR 0 4
67287: PUSH
67288: LD_EXP 88
67292: PUSH
67293: LD_VAR 0 1
67297: ARRAY
67298: PUSH
67299: LD_VAR 0 2
67303: ARRAY
67304: PUSH
67305: LD_INT 1
67307: ARRAY
67308: PPUSH
67309: LD_EXP 88
67313: PUSH
67314: LD_VAR 0 1
67318: ARRAY
67319: PUSH
67320: LD_VAR 0 2
67324: ARRAY
67325: PUSH
67326: LD_INT 2
67328: ARRAY
67329: PPUSH
67330: CALL_OW 428
67334: ST_TO_ADDR
// if not tmp then
67335: LD_VAR 0 4
67339: NOT
67340: IFFALSE 67344
// continue ;
67342: GO 67259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67344: LD_VAR 0 4
67348: PUSH
67349: LD_INT 81
67351: PUSH
67352: LD_VAR 0 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PPUSH
67361: CALL_OW 69
67365: IN
67366: PUSH
67367: LD_EXP 88
67371: PUSH
67372: LD_VAR 0 1
67376: ARRAY
67377: PUSH
67378: LD_VAR 0 2
67382: ARRAY
67383: PUSH
67384: LD_INT 1
67386: ARRAY
67387: PPUSH
67388: LD_EXP 88
67392: PUSH
67393: LD_VAR 0 1
67397: ARRAY
67398: PUSH
67399: LD_VAR 0 2
67403: ARRAY
67404: PUSH
67405: LD_INT 2
67407: ARRAY
67408: PPUSH
67409: CALL_OW 458
67413: AND
67414: IFFALSE 67508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67416: LD_EXP 88
67420: PUSH
67421: LD_VAR 0 1
67425: ARRAY
67426: PUSH
67427: LD_VAR 0 2
67431: ARRAY
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PPUSH
67437: LD_EXP 88
67441: PUSH
67442: LD_VAR 0 1
67446: ARRAY
67447: PUSH
67448: LD_VAR 0 2
67452: ARRAY
67453: PUSH
67454: LD_INT 2
67456: ARRAY
67457: PPUSH
67458: LD_VAR 0 3
67462: PPUSH
67463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67467: LD_ADDR_EXP 88
67471: PUSH
67472: LD_EXP 88
67476: PPUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: LD_EXP 88
67486: PUSH
67487: LD_VAR 0 1
67491: ARRAY
67492: PPUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 3
67502: PPUSH
67503: CALL_OW 1
67507: ST_TO_ADDR
// end ; end ;
67508: GO 67259
67510: POP
67511: POP
// end ;
67512: GO 67177
67514: POP
67515: POP
// end ;
67516: PPOPN 4
67518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67519: LD_INT 0
67521: PPUSH
67522: PPUSH
// result := false ;
67523: LD_ADDR_VAR 0 4
67527: PUSH
67528: LD_INT 0
67530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67531: LD_VAR 0 1
67535: PPUSH
67536: CALL_OW 264
67540: PUSH
67541: LD_INT 81
67543: EQUAL
67544: NOT
67545: IFFALSE 67549
// exit ;
67547: GO 67789
// index := GetElementIndex ( minersList , unit ) ;
67549: LD_ADDR_VAR 0 5
67553: PUSH
67554: LD_EXP 87
67558: PPUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: CALL 28285 0 2
67568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67569: LD_EXP 88
67573: PUSH
67574: LD_VAR 0 5
67578: ARRAY
67579: PUSH
67580: LD_EXP 89
67584: GREATEREQUAL
67585: IFFALSE 67589
// exit ;
67587: GO 67789
// ComMoveXY ( unit , x , y ) ;
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_VAR 0 2
67598: PPUSH
67599: LD_VAR 0 3
67603: PPUSH
67604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67608: LD_INT 35
67610: PPUSH
67611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67615: LD_VAR 0 1
67619: PPUSH
67620: LD_VAR 0 2
67624: PPUSH
67625: LD_VAR 0 3
67629: PPUSH
67630: CALL 59548 0 3
67634: NOT
67635: PUSH
67636: LD_VAR 0 1
67640: PPUSH
67641: CALL_OW 314
67645: AND
67646: IFFALSE 67650
// exit ;
67648: GO 67789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67650: LD_VAR 0 2
67654: PPUSH
67655: LD_VAR 0 3
67659: PPUSH
67660: CALL_OW 428
67664: PUSH
67665: LD_VAR 0 1
67669: EQUAL
67670: PUSH
67671: LD_VAR 0 1
67675: PPUSH
67676: CALL_OW 314
67680: NOT
67681: AND
67682: IFFALSE 67608
// PlaySoundXY ( x , y , PlantMine ) ;
67684: LD_VAR 0 2
67688: PPUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: LD_STRING PlantMine
67696: PPUSH
67697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67701: LD_VAR 0 2
67705: PPUSH
67706: LD_VAR 0 3
67710: PPUSH
67711: LD_VAR 0 1
67715: PPUSH
67716: CALL_OW 255
67720: PPUSH
67721: LD_INT 0
67723: PPUSH
67724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67728: LD_ADDR_EXP 88
67732: PUSH
67733: LD_EXP 88
67737: PPUSH
67738: LD_VAR 0 5
67742: PUSH
67743: LD_EXP 88
67747: PUSH
67748: LD_VAR 0 5
67752: ARRAY
67753: PUSH
67754: LD_INT 1
67756: PLUS
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PPUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_VAR 0 3
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PPUSH
67776: CALL 28500 0 3
67780: ST_TO_ADDR
// result := true ;
67781: LD_ADDR_VAR 0 4
67785: PUSH
67786: LD_INT 1
67788: ST_TO_ADDR
// end ;
67789: LD_VAR 0 4
67793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67794: LD_INT 0
67796: PPUSH
67797: PPUSH
67798: PPUSH
// if not unit in minersList then
67799: LD_VAR 0 1
67803: PUSH
67804: LD_EXP 87
67808: IN
67809: NOT
67810: IFFALSE 67814
// exit ;
67812: GO 68206
// index := GetElementIndex ( minersList , unit ) ;
67814: LD_ADDR_VAR 0 6
67818: PUSH
67819: LD_EXP 87
67823: PPUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL 28285 0 2
67833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67834: LD_ADDR_VAR 0 5
67838: PUSH
67839: DOUBLE
67840: LD_EXP 88
67844: PUSH
67845: LD_VAR 0 6
67849: ARRAY
67850: INC
67851: ST_TO_ADDR
67852: LD_INT 1
67854: PUSH
67855: FOR_DOWNTO
67856: IFFALSE 68017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67858: LD_EXP 88
67862: PUSH
67863: LD_VAR 0 6
67867: ARRAY
67868: PUSH
67869: LD_VAR 0 5
67873: ARRAY
67874: PUSH
67875: LD_INT 1
67877: ARRAY
67878: PUSH
67879: LD_VAR 0 2
67883: EQUAL
67884: PUSH
67885: LD_EXP 88
67889: PUSH
67890: LD_VAR 0 6
67894: ARRAY
67895: PUSH
67896: LD_VAR 0 5
67900: ARRAY
67901: PUSH
67902: LD_INT 2
67904: ARRAY
67905: PUSH
67906: LD_VAR 0 3
67910: EQUAL
67911: AND
67912: IFFALSE 68015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67914: LD_EXP 88
67918: PUSH
67919: LD_VAR 0 6
67923: ARRAY
67924: PUSH
67925: LD_VAR 0 5
67929: ARRAY
67930: PUSH
67931: LD_INT 1
67933: ARRAY
67934: PPUSH
67935: LD_EXP 88
67939: PUSH
67940: LD_VAR 0 6
67944: ARRAY
67945: PUSH
67946: LD_VAR 0 5
67950: ARRAY
67951: PUSH
67952: LD_INT 2
67954: ARRAY
67955: PPUSH
67956: LD_VAR 0 1
67960: PPUSH
67961: CALL_OW 255
67965: PPUSH
67966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67970: LD_ADDR_EXP 88
67974: PUSH
67975: LD_EXP 88
67979: PPUSH
67980: LD_VAR 0 6
67984: PPUSH
67985: LD_EXP 88
67989: PUSH
67990: LD_VAR 0 6
67994: ARRAY
67995: PPUSH
67996: LD_VAR 0 5
68000: PPUSH
68001: CALL_OW 3
68005: PPUSH
68006: CALL_OW 1
68010: ST_TO_ADDR
// exit ;
68011: POP
68012: POP
68013: GO 68206
// end ; end ;
68015: GO 67855
68017: POP
68018: POP
// for i := minerMinesList [ index ] downto 1 do
68019: LD_ADDR_VAR 0 5
68023: PUSH
68024: DOUBLE
68025: LD_EXP 88
68029: PUSH
68030: LD_VAR 0 6
68034: ARRAY
68035: INC
68036: ST_TO_ADDR
68037: LD_INT 1
68039: PUSH
68040: FOR_DOWNTO
68041: IFFALSE 68204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68043: LD_EXP 88
68047: PUSH
68048: LD_VAR 0 6
68052: ARRAY
68053: PUSH
68054: LD_VAR 0 5
68058: ARRAY
68059: PUSH
68060: LD_INT 1
68062: ARRAY
68063: PPUSH
68064: LD_EXP 88
68068: PUSH
68069: LD_VAR 0 6
68073: ARRAY
68074: PUSH
68075: LD_VAR 0 5
68079: ARRAY
68080: PUSH
68081: LD_INT 2
68083: ARRAY
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: CALL_OW 298
68099: PUSH
68100: LD_INT 6
68102: LESS
68103: IFFALSE 68202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68105: LD_EXP 88
68109: PUSH
68110: LD_VAR 0 6
68114: ARRAY
68115: PUSH
68116: LD_VAR 0 5
68120: ARRAY
68121: PUSH
68122: LD_INT 1
68124: ARRAY
68125: PPUSH
68126: LD_EXP 88
68130: PUSH
68131: LD_VAR 0 6
68135: ARRAY
68136: PUSH
68137: LD_VAR 0 5
68141: ARRAY
68142: PUSH
68143: LD_INT 2
68145: ARRAY
68146: PPUSH
68147: LD_VAR 0 1
68151: PPUSH
68152: CALL_OW 255
68156: PPUSH
68157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68161: LD_ADDR_EXP 88
68165: PUSH
68166: LD_EXP 88
68170: PPUSH
68171: LD_VAR 0 6
68175: PPUSH
68176: LD_EXP 88
68180: PUSH
68181: LD_VAR 0 6
68185: ARRAY
68186: PPUSH
68187: LD_VAR 0 5
68191: PPUSH
68192: CALL_OW 3
68196: PPUSH
68197: CALL_OW 1
68201: ST_TO_ADDR
// end ; end ;
68202: GO 68040
68204: POP
68205: POP
// end ;
68206: LD_VAR 0 4
68210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68211: LD_INT 0
68213: PPUSH
68214: PPUSH
68215: PPUSH
68216: PPUSH
68217: PPUSH
68218: PPUSH
68219: PPUSH
68220: PPUSH
68221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68222: LD_VAR 0 1
68226: PPUSH
68227: CALL_OW 264
68231: PUSH
68232: LD_INT 81
68234: EQUAL
68235: NOT
68236: PUSH
68237: LD_VAR 0 1
68241: PUSH
68242: LD_EXP 87
68246: IN
68247: NOT
68248: OR
68249: IFFALSE 68253
// exit ;
68251: GO 68575
// index := GetElementIndex ( minersList , unit ) ;
68253: LD_ADDR_VAR 0 6
68257: PUSH
68258: LD_EXP 87
68262: PPUSH
68263: LD_VAR 0 1
68267: PPUSH
68268: CALL 28285 0 2
68272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68273: LD_ADDR_VAR 0 8
68277: PUSH
68278: LD_EXP 89
68282: PUSH
68283: LD_EXP 88
68287: PUSH
68288: LD_VAR 0 6
68292: ARRAY
68293: MINUS
68294: ST_TO_ADDR
// if not minesFreeAmount then
68295: LD_VAR 0 8
68299: NOT
68300: IFFALSE 68304
// exit ;
68302: GO 68575
// tmp := [ ] ;
68304: LD_ADDR_VAR 0 7
68308: PUSH
68309: EMPTY
68310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68311: LD_ADDR_VAR 0 5
68315: PUSH
68316: DOUBLE
68317: LD_INT 1
68319: DEC
68320: ST_TO_ADDR
68321: LD_VAR 0 8
68325: PUSH
68326: FOR_TO
68327: IFFALSE 68522
// begin _d := rand ( 0 , 5 ) ;
68329: LD_ADDR_VAR 0 11
68333: PUSH
68334: LD_INT 0
68336: PPUSH
68337: LD_INT 5
68339: PPUSH
68340: CALL_OW 12
68344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68345: LD_ADDR_VAR 0 12
68349: PUSH
68350: LD_INT 2
68352: PPUSH
68353: LD_INT 6
68355: PPUSH
68356: CALL_OW 12
68360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68361: LD_ADDR_VAR 0 9
68365: PUSH
68366: LD_VAR 0 2
68370: PPUSH
68371: LD_VAR 0 11
68375: PPUSH
68376: LD_VAR 0 12
68380: PPUSH
68381: CALL_OW 272
68385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68386: LD_ADDR_VAR 0 10
68390: PUSH
68391: LD_VAR 0 3
68395: PPUSH
68396: LD_VAR 0 11
68400: PPUSH
68401: LD_VAR 0 12
68405: PPUSH
68406: CALL_OW 273
68410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68411: LD_VAR 0 9
68415: PPUSH
68416: LD_VAR 0 10
68420: PPUSH
68421: CALL_OW 488
68425: PUSH
68426: LD_VAR 0 9
68430: PUSH
68431: LD_VAR 0 10
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_VAR 0 7
68444: IN
68445: NOT
68446: AND
68447: PUSH
68448: LD_VAR 0 9
68452: PPUSH
68453: LD_VAR 0 10
68457: PPUSH
68458: CALL_OW 458
68462: NOT
68463: AND
68464: IFFALSE 68506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68466: LD_ADDR_VAR 0 7
68470: PUSH
68471: LD_VAR 0 7
68475: PPUSH
68476: LD_VAR 0 7
68480: PUSH
68481: LD_INT 1
68483: PLUS
68484: PPUSH
68485: LD_VAR 0 9
68489: PUSH
68490: LD_VAR 0 10
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PPUSH
68499: CALL_OW 1
68503: ST_TO_ADDR
68504: GO 68520
// i := i - 1 ;
68506: LD_ADDR_VAR 0 5
68510: PUSH
68511: LD_VAR 0 5
68515: PUSH
68516: LD_INT 1
68518: MINUS
68519: ST_TO_ADDR
// end ;
68520: GO 68326
68522: POP
68523: POP
// for i in tmp do
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: LD_VAR 0 7
68533: PUSH
68534: FOR_IN
68535: IFFALSE 68573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68537: LD_VAR 0 1
68541: PPUSH
68542: LD_VAR 0 5
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: PPUSH
68551: LD_VAR 0 5
68555: PUSH
68556: LD_INT 2
68558: ARRAY
68559: PPUSH
68560: CALL 67519 0 3
68564: NOT
68565: IFFALSE 68571
// exit ;
68567: POP
68568: POP
68569: GO 68575
68571: GO 68534
68573: POP
68574: POP
// end ;
68575: LD_VAR 0 4
68579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68580: LD_INT 0
68582: PPUSH
68583: PPUSH
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
// if not GetClass ( unit ) = class_sniper then
68589: LD_VAR 0 1
68593: PPUSH
68594: CALL_OW 257
68598: PUSH
68599: LD_INT 5
68601: EQUAL
68602: NOT
68603: IFFALSE 68607
// exit ;
68605: GO 68995
// dist := 8 ;
68607: LD_ADDR_VAR 0 5
68611: PUSH
68612: LD_INT 8
68614: ST_TO_ADDR
// viewRange := 12 ;
68615: LD_ADDR_VAR 0 7
68619: PUSH
68620: LD_INT 12
68622: ST_TO_ADDR
// side := GetSide ( unit ) ;
68623: LD_ADDR_VAR 0 6
68627: PUSH
68628: LD_VAR 0 1
68632: PPUSH
68633: CALL_OW 255
68637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68638: LD_INT 61
68640: PPUSH
68641: LD_VAR 0 6
68645: PPUSH
68646: CALL_OW 321
68650: PUSH
68651: LD_INT 2
68653: EQUAL
68654: IFFALSE 68664
// viewRange := 16 ;
68656: LD_ADDR_VAR 0 7
68660: PUSH
68661: LD_INT 16
68663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68664: LD_VAR 0 1
68668: PPUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: LD_VAR 0 3
68678: PPUSH
68679: CALL_OW 297
68683: PUSH
68684: LD_VAR 0 5
68688: GREATER
68689: IFFALSE 68768
// begin ComMoveXY ( unit , x , y ) ;
68691: LD_VAR 0 1
68695: PPUSH
68696: LD_VAR 0 2
68700: PPUSH
68701: LD_VAR 0 3
68705: PPUSH
68706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68710: LD_INT 35
68712: PPUSH
68713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68717: LD_VAR 0 1
68721: PPUSH
68722: LD_VAR 0 2
68726: PPUSH
68727: LD_VAR 0 3
68731: PPUSH
68732: CALL 59548 0 3
68736: NOT
68737: IFFALSE 68741
// exit ;
68739: GO 68995
// until GetDistUnitXY ( unit , x , y ) < dist ;
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_VAR 0 2
68750: PPUSH
68751: LD_VAR 0 3
68755: PPUSH
68756: CALL_OW 297
68760: PUSH
68761: LD_VAR 0 5
68765: LESS
68766: IFFALSE 68710
// end ; ComTurnXY ( unit , x , y ) ;
68768: LD_VAR 0 1
68772: PPUSH
68773: LD_VAR 0 2
68777: PPUSH
68778: LD_VAR 0 3
68782: PPUSH
68783: CALL_OW 118
// wait ( 5 ) ;
68787: LD_INT 5
68789: PPUSH
68790: CALL_OW 67
// _d := GetDir ( unit ) ;
68794: LD_ADDR_VAR 0 10
68798: PUSH
68799: LD_VAR 0 1
68803: PPUSH
68804: CALL_OW 254
68808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68809: LD_ADDR_VAR 0 8
68813: PUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 250
68823: PPUSH
68824: LD_VAR 0 10
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: CALL_OW 272
68838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68839: LD_ADDR_VAR 0 9
68843: PUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: CALL_OW 251
68853: PPUSH
68854: LD_VAR 0 10
68858: PPUSH
68859: LD_VAR 0 5
68863: PPUSH
68864: CALL_OW 273
68868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68869: LD_VAR 0 8
68873: PPUSH
68874: LD_VAR 0 9
68878: PPUSH
68879: CALL_OW 488
68883: NOT
68884: IFFALSE 68888
// exit ;
68886: GO 68995
// ComAnimCustom ( unit , 1 ) ;
68888: LD_VAR 0 1
68892: PPUSH
68893: LD_INT 1
68895: PPUSH
68896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68900: LD_VAR 0 8
68904: PPUSH
68905: LD_VAR 0 9
68909: PPUSH
68910: LD_VAR 0 6
68914: PPUSH
68915: LD_VAR 0 7
68919: PPUSH
68920: CALL_OW 330
// repeat wait ( 1 ) ;
68924: LD_INT 1
68926: PPUSH
68927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: CALL_OW 316
68940: PUSH
68941: LD_VAR 0 1
68945: PPUSH
68946: CALL_OW 314
68950: OR
68951: PUSH
68952: LD_VAR 0 1
68956: PPUSH
68957: CALL_OW 302
68961: NOT
68962: OR
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: CALL_OW 301
68973: OR
68974: IFFALSE 68924
// RemoveSeeing ( _x , _y , side ) ;
68976: LD_VAR 0 8
68980: PPUSH
68981: LD_VAR 0 9
68985: PPUSH
68986: LD_VAR 0 6
68990: PPUSH
68991: CALL_OW 331
// end ; end_of_file
68995: LD_VAR 0 4
68999: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69000: LD_VAR 0 1
69004: PPUSH
69005: LD_VAR 0 2
69009: PPUSH
69010: LD_VAR 0 3
69014: PPUSH
69015: LD_VAR 0 4
69019: PPUSH
69020: LD_VAR 0 5
69024: PPUSH
69025: LD_VAR 0 6
69029: PPUSH
69030: CALL 7765 0 6
// end ;
69034: PPOPN 6
69036: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69037: LD_INT 0
69039: PPUSH
// begin if not units then
69040: LD_VAR 0 1
69044: NOT
69045: IFFALSE 69049
// exit ;
69047: GO 69049
// end ;
69049: PPOPN 7
69051: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69052: CALL 7736 0 0
// end ;
69056: PPOPN 1
69058: END
