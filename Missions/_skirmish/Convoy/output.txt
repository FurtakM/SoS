// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2227 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3130 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7141 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7141 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: IFTRUE 1449
1420: PUSH
1421: LD_INT 22
1423: PUSH
1424: LD_INT 2
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: PUSH
1436: LD_INT 0
1438: EQUAL
1439: IFFALSE 1448
1441: PUSH
1442: LD_EXP 1
1446: NOT
1447: AND
1448: OR
1449: IFFALSE 1590
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1457: LD_EXP 6
1461: PPUSH
1462: LD_STRING DS-6
1464: PPUSH
1465: CALL_OW 88
// Wait ( 0 0$01 ) ;
1469: LD_INT 35
1471: PPUSH
1472: CALL_OW 67
// AddMedal ( med , 1 ) ;
1476: LD_STRING med
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1486: LD_INT 22
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PPUSH
1496: CALL_OW 69
1500: PUSH
1501: LD_INT 0
1503: EQUAL
1504: IFFALSE 1518
// AddMedal ( convoy_clear , 1 ) else
1506: LD_STRING convoy_clear
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 101
1516: GO 1529
// AddMedal ( convoy_clear , - 1 ) ;
1518: LD_STRING convoy_clear
1520: PPUSH
1521: LD_INT 1
1523: NEG
1524: PPUSH
1525: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1529: LD_INT 22
1531: PUSH
1532: LD_INT 6
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PPUSH
1539: CALL_OW 69
1543: PUSH
1544: LD_INT 2
1546: GREATEREQUAL
1547: IFFALSE 1568
// begin SetAchievement ( ACH_SAFECARGO ) ;
1549: LD_STRING ACH_SAFECARGO
1551: PPUSH
1552: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1556: LD_STRING convoy_cargos
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: CALL_OW 101
// end else
1566: GO 1579
// AddMedal ( convoy_cargos , - 1 ) ;
1568: LD_STRING convoy_cargos
1570: PPUSH
1571: LD_INT 1
1573: NEG
1574: PPUSH
1575: CALL_OW 101
// GiveMedals ( MAIN ) ;
1579: LD_STRING MAIN
1581: PPUSH
1582: CALL_OW 102
// YouWin ;
1586: CALL_OW 103
// end ;
1590: PPOPN 1
1592: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1593: LD_VAR 0 1
1597: PPUSH
1598: CALL_OW 255
1602: PUSH
1603: LD_INT 3
1605: EQUAL
1606: IFFALSE 1623
1608: PUSH
1609: LD_VAR 0 1
1613: PPUSH
1614: CALL_OW 247
1618: PUSH
1619: LD_INT 1
1621: EQUAL
1622: AND
1623: IFFALSE 1659
1625: PUSH
1626: LD_INT 22
1628: PUSH
1629: LD_INT 3
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 26
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PPUSH
1650: CALL_OW 69
1654: PUSH
1655: LD_INT 1
1657: GREATER
1658: AND
1659: IFFALSE 1668
1661: PUSH
1662: LD_EXP 9
1666: NOT
1667: AND
1668: IFFALSE 1724
// begin hurt := true ;
1670: LD_ADDR_EXP 9
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1678: LD_INT 22
1680: PUSH
1681: LD_INT 3
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 26
1690: PUSH
1691: LD_INT 1
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: PUSH
1707: LD_EXP 6
1711: DIFF
1712: PUSH
1713: LD_INT 1
1715: ARRAY
1716: PPUSH
1717: LD_STRING DM4
1719: PPUSH
1720: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1724: LD_VAR 0 1
1728: PUSH
1729: LD_INT 22
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 21
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PPUSH
1753: CALL_OW 69
1757: IN
1758: IFFALSE 1883
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1760: LD_INT 280
1762: PPUSH
1763: LD_INT 490
1765: PPUSH
1766: CALL_OW 12
1770: PPUSH
1771: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 250
1784: PPUSH
1785: LD_VAR 0 1
1789: PPUSH
1790: CALL_OW 251
1794: PPUSH
1795: LD_INT 10
1797: PPUSH
1798: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 250
1811: PPUSH
1812: LD_VAR 0 1
1816: PPUSH
1817: CALL_OW 251
1821: PPUSH
1822: LD_INT 10
1824: PPUSH
1825: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 250
1838: PPUSH
1839: LD_VAR 0 1
1843: PPUSH
1844: CALL_OW 251
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 250
1865: PPUSH
1866: LD_VAR 0 1
1870: PPUSH
1871: CALL_OW 251
1875: PPUSH
1876: LD_INT 5
1878: PPUSH
1879: CALL_OW 453
// end ; end ;
1883: PPOPN 1
1885: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1886: LD_INT 3
1888: PPUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 11
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: PUSH
1904: LD_INT 1
1906: ARRAY
1907: PPUSH
1908: CALL_OW 292
1912: IFFALSE 1963
1914: GO 1916
1916: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1917: LD_INT 22
1919: PUSH
1920: LD_INT 3
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 26
1929: PUSH
1930: LD_INT 1
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PPUSH
1941: CALL_OW 69
1945: PUSH
1946: LD_EXP 6
1950: DIFF
1951: PUSH
1952: LD_INT 1
1954: ARRAY
1955: PPUSH
1956: LD_STRING DM2
1958: PPUSH
1959: CALL_OW 88
// end ;
1963: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1964: LD_INT 3
1966: PPUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 25
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 6
2000: PPUSH
2001: CALL_OW 74
2005: PPUSH
2006: CALL_OW 292
2010: IFFALSE 2061
2012: GO 2014
2014: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2015: LD_INT 22
2017: PUSH
2018: LD_INT 3
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 26
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PPUSH
2039: CALL_OW 69
2043: PUSH
2044: LD_EXP 6
2048: DIFF
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: PPUSH
2054: LD_STRING DM3
2056: PPUSH
2057: CALL_OW 88
// end ;
2061: END
// every 0 0$01 trigger mines_trigger do
2062: LD_EXP 10
2066: IFFALSE 2137
2068: GO 2070
2070: DISABLE
// begin DialogueOn ;
2071: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2075: LD_INT 22
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 26
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: PUSH
2104: LD_EXP 6
2108: DIFF
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PPUSH
2114: LD_STRING DM1
2116: PPUSH
2117: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2121: LD_EXP 6
2125: PPUSH
2126: LD_STRING DS4
2128: PPUSH
2129: CALL_OW 88
// DialogueOff ;
2133: CALL_OW 7
// end ;
2137: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2138: LD_INT 34
2140: PUSH
2141: LD_INT 51
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 69
2152: PUSH
2153: LD_INT 1
2155: EQUAL
2156: IFFALSE 2173
2158: GO 2160
2160: DISABLE
// begin Say ( player_commander , DS5 ) ;
2161: LD_EXP 6
2165: PPUSH
2166: LD_STRING DS5
2168: PPUSH
2169: CALL_OW 88
// end ;
2173: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2174: LD_INT 34
2176: PUSH
2177: LD_INT 51
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PUSH
2189: LD_INT 0
2191: EQUAL
2192: IFFALSE 2204
2194: GO 2196
2196: DISABLE
// begin YouLost ( qconvl ) ;
2197: LD_STRING qconvl
2199: PPUSH
2200: CALL_OW 104
// end ;
2204: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2205: LD_EXP 6
2209: PPUSH
2210: CALL_OW 301
2214: IFFALSE 2226
2216: GO 2218
2218: DISABLE
// begin YouLost ( qcom ) ;
2219: LD_STRING qcom
2221: PPUSH
2222: CALL_OW 104
// end ; end_of_file
2226: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 6
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: CALL_OW 80
// case road of 1 :
2250: LD_EXP 2
2254: PUSH
2255: LD_INT 1
2257: DOUBLE
2258: EQUAL
2259: IFTRUE 2263
2261: GO 2289
2263: POP
// begin area := vpos2 ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 4
2271: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2272: LD_ADDR_VAR 0 5
2276: PUSH
2277: LD_INT 30
2279: PUSH
2280: LD_INT 46
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// end ; 2 :
2287: GO 2324
2289: LD_INT 2
2291: DOUBLE
2292: EQUAL
2293: IFTRUE 2297
2295: GO 2323
2297: POP
// begin area := vpos1 ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 2
2305: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_INT 18
2313: PUSH
2314: LD_INT 3
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// end ; end ;
2321: GO 2324
2323: POP
// if road = 1 then
2324: LD_EXP 2
2328: PUSH
2329: LD_INT 1
2331: EQUAL
2332: IFFALSE 2445
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2334: LD_ADDR_EXP 13
2338: PUSH
2339: LD_INT 36
2341: PUSH
2342: LD_INT 43
2344: PUSH
2345: LD_INT 40
2347: PUSH
2348: LD_INT 29
2350: PUSH
2351: LD_INT 56
2353: PUSH
2354: LD_INT 37
2356: PUSH
2357: LD_INT 70
2359: PUSH
2360: LD_INT 32
2362: PUSH
2363: LD_INT 63
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: LD_INT 84
2371: PUSH
2372: LD_INT 8
2374: PUSH
2375: LD_INT 90
2377: PUSH
2378: LD_INT 24
2380: PUSH
2381: LD_INT 96
2383: PUSH
2384: LD_INT 47
2386: PUSH
2387: LD_INT 110
2389: PUSH
2390: LD_INT 73
2392: PUSH
2393: LD_INT 143
2395: PUSH
2396: LD_INT 102
2398: PUSH
2399: LD_INT 121
2401: PUSH
2402: LD_INT 93
2404: PUSH
2405: LD_INT 98
2407: PUSH
2408: LD_INT 100
2410: PUSH
2411: LD_INT 62
2413: PUSH
2414: LD_INT 114
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: ST_TO_ADDR
// if road = 2 then
2445: LD_EXP 2
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2590
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2455: LD_ADDR_EXP 13
2459: PUSH
2460: LD_INT 39
2462: PUSH
2463: LD_INT 18
2465: PUSH
2466: LD_INT 61
2468: PUSH
2469: LD_INT 36
2471: PUSH
2472: LD_INT 62
2474: PUSH
2475: LD_INT 15
2477: PUSH
2478: LD_INT 75
2480: PUSH
2481: LD_INT 5
2483: PUSH
2484: LD_INT 97
2486: PUSH
2487: LD_INT 17
2489: PUSH
2490: LD_INT 98
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 95
2498: PUSH
2499: LD_INT 49
2501: PUSH
2502: LD_INT 110
2504: PUSH
2505: LD_INT 71
2507: PUSH
2508: LD_INT 146
2510: PUSH
2511: LD_INT 112
2513: PUSH
2514: LD_INT 100
2516: PUSH
2517: LD_INT 81
2519: PUSH
2520: LD_INT 99
2522: PUSH
2523: LD_INT 115
2525: PUSH
2526: LD_INT 77
2528: PUSH
2529: LD_INT 105
2531: PUSH
2532: LD_INT 65
2534: PUSH
2535: LD_INT 75
2537: PUSH
2538: LD_INT 45
2540: PUSH
2541: LD_INT 46
2543: PUSH
2544: LD_INT 26
2546: PUSH
2547: LD_INT 47
2549: PUSH
2550: LD_INT 29
2552: PUSH
2553: LD_INT 54
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// conv_am := 1 ;
2590: LD_ADDR_EXP 12
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// conv := 0 ;
2598: LD_ADDR_EXP 11
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// uc_side := 6 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 6
2613: ST_TO_ADDR
// uc_nation := 3 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 3
2621: ST_TO_ADDR
// for i = 1 to 2 do
2622: LD_ADDR_VAR 0 4
2626: PUSH
2627: DOUBLE
2628: LD_INT 1
2630: DEC
2631: ST_TO_ADDR
2632: LD_INT 2
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2741
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2638: LD_ADDR_VAR 0 2
2642: PUSH
2643: LD_INT 6
2645: PPUSH
2646: LD_INT 3
2648: PPUSH
2649: LD_INT 22
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 3
2657: PPUSH
2658: LD_INT 51
2660: PPUSH
2661: CALL 7141 0 6
2665: ST_TO_ADDR
// cargos := cargos ^ un ;
2666: LD_ADDR_EXP 4
2670: PUSH
2671: LD_EXP 4
2675: PUSH
2676: LD_VAR 0 2
2680: ADD
2681: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2682: LD_VAR 0 2
2686: PPUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 2
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_EXP 2
2701: ARRAY
2702: PPUSH
2703: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2707: LD_VAR 0 2
2711: PPUSH
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 3
2731: PPUSH
2732: LD_INT 100
2734: PPUSH
2735: CALL_OW 290
// end ;
2739: GO 2635
2741: POP
2742: POP
// end ;
2743: LD_VAR 0 1
2747: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2748: LD_EXP 4
2752: IFFALSE 2832
2754: GO 2756
2756: DISABLE
// begin enable ;
2757: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2758: LD_EXP 4
2762: PUSH
2763: LD_INT 1
2765: ARRAY
2766: PPUSH
2767: CALL_OW 306
2771: IFTRUE 2788
2773: PUSH
2774: LD_EXP 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 306
2787: OR
2788: IFFALSE 2832
// begin if debug then
2790: LD_EXP 1
2794: IFFALSE 2806
// display_strings := conv ;
2796: LD_ADDR_OWVAR 47
2800: PUSH
2801: LD_EXP 11
2805: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2806: LD_ADDR_EXP 11
2810: PUSH
2811: LD_STRING QConv
2813: PPUSH
2814: CALL_OW 97
2818: PUSH
2819: LD_INT 1
2821: MINUS
2822: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2823: LD_EXP 4
2827: PPUSH
2828: CALL_OW 491
// end ; end ;
2832: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2833: LD_EXP 11
2837: PUSH
2838: LD_INT 1
2840: EQUAL
2841: IFFALSE 3053
2843: GO 2845
2845: DISABLE
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
2850: PPUSH
// begin enable ;
2851: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2852: LD_ADDR_VAR 0 3
2856: PUSH
2857: LD_INT 34
2859: PUSH
2860: LD_INT 51
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: ST_TO_ADDR
// if debug then
2872: LD_EXP 1
2876: IFFALSE 2913
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2878: LD_ADDR_OWVAR 47
2882: PUSH
2883: LD_EXP 13
2887: PUSH
2888: LD_EXP 12
2892: ARRAY
2893: PUSH
2894: LD_EXP 13
2898: PUSH
2899: LD_EXP 12
2903: PUSH
2904: LD_INT 1
2906: PLUS
2907: ARRAY
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: ST_TO_ADDR
// for i = 1 to car do
2913: LD_ADDR_VAR 0 1
2917: PUSH
2918: DOUBLE
2919: LD_INT 1
2921: DEC
2922: ST_TO_ADDR
2923: LD_VAR 0 3
2927: PUSH
2928: FOR_TO
2929: IFFALSE 3051
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2931: LD_VAR 0 3
2935: PUSH
2936: LD_VAR 0 1
2940: ARRAY
2941: PPUSH
2942: LD_EXP 13
2946: PUSH
2947: LD_EXP 12
2951: ARRAY
2952: PPUSH
2953: LD_EXP 13
2957: PUSH
2958: LD_EXP 12
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: ARRAY
2967: PPUSH
2968: CALL 7219 0 3
2972: IFFALSE 2990
// conv_am := conv_am + 2 else
2974: LD_ADDR_EXP 12
2978: PUSH
2979: LD_EXP 12
2983: PUSH
2984: LD_INT 2
2986: PLUS
2987: ST_TO_ADDR
2988: GO 3049
// if not HasTask ( car [ i ] ) then
2990: LD_VAR 0 3
2994: PUSH
2995: LD_VAR 0 1
2999: ARRAY
3000: PPUSH
3001: CALL_OW 314
3005: NOT
3006: IFFALSE 3049
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3008: LD_VAR 0 3
3012: PUSH
3013: LD_VAR 0 1
3017: ARRAY
3018: PPUSH
3019: LD_EXP 13
3023: PUSH
3024: LD_EXP 12
3028: ARRAY
3029: PPUSH
3030: LD_EXP 13
3034: PUSH
3035: LD_EXP 12
3039: PUSH
3040: LD_INT 1
3042: PLUS
3043: ARRAY
3044: PPUSH
3045: CALL_OW 111
// end ;
3049: GO 2928
3051: POP
3052: POP
// end ;
3053: PPOPN 3
3055: END
// every 0 0$01 trigger conv = 0 do var i ;
3056: LD_EXP 11
3060: PUSH
3061: LD_INT 0
3063: EQUAL
3064: IFFALSE 3127
3066: GO 3068
3068: DISABLE
3069: LD_INT 0
3071: PPUSH
// begin enable ;
3072: ENABLE
// for i = 1 to cargos do
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_EXP 4
3087: PUSH
3088: FOR_TO
3089: IFFALSE 3125
// if HasTask ( cargos [ i ] ) then
3091: LD_EXP 4
3095: PUSH
3096: LD_VAR 0 1
3100: ARRAY
3101: PPUSH
3102: CALL_OW 314
3106: IFFALSE 3123
// ComStop ( cargos [ i ] ) ;
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 141
3123: GO 3088
3125: POP
3126: POP
// end ; end_of_file
3127: PPOPN 1
3129: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3130: LD_INT 0
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
3147: PPUSH
// uc_side := 2 ;
3148: LD_ADDR_OWVAR 20
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// uc_nation := 2 ;
3156: LD_ADDR_OWVAR 21
3160: PUSH
3161: LD_INT 2
3163: ST_TO_ADDR
// if road = 1 then
3164: LD_EXP 2
3168: PUSH
3169: LD_INT 1
3171: EQUAL
3172: IFFALSE 3934
// begin case Difficulty of 1 :
3174: LD_OWVAR 67
3178: PUSH
3179: LD_INT 1
3181: DOUBLE
3182: EQUAL
3183: IFTRUE 3187
3185: GO 3494
3187: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_INT 56
3195: PUSH
3196: LD_INT 37
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: LD_INT 81
3204: PUSH
3205: LD_INT 6
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: LD_INT 90
3213: PUSH
3214: LD_INT 25
3216: PUSH
3217: LD_INT 3
3219: PUSH
3220: LD_INT 105
3222: PUSH
3223: LD_INT 68
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: LD_INT 96
3231: PUSH
3232: LD_INT 82
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: LD_INT 80
3240: PUSH
3241: LD_INT 109
3243: PUSH
3244: LD_INT 4
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 7
3274: PUSH
3275: LD_INT 9
3277: PUSH
3278: LD_INT 10
3280: PUSH
3281: LD_INT 11
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3290: LD_ADDR_VAR 0 4
3294: PUSH
3295: LD_INT 13
3297: PUSH
3298: LD_INT 14
3300: PUSH
3301: LD_INT 15
3303: PUSH
3304: LD_INT 16
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3313: LD_ADDR_VAR 0 15
3317: PUSH
3318: LD_INT 4
3320: PUSH
3321: LD_INT 5
3323: PUSH
3324: LD_INT 0
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3336: LD_ADDR_VAR 0 8
3340: PUSH
3341: LD_INT 68
3343: PUSH
3344: LD_INT 5
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 53
3352: PUSH
3353: LD_INT 142
3355: PUSH
3356: LD_INT 98
3358: PUSH
3359: LD_INT 96
3361: PUSH
3362: LD_INT 82
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: LD_INT 17
3382: PUSH
3383: LD_INT 2
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3390: LD_ADDR_VAR 0 5
3394: PUSH
3395: LD_INT 104
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: LD_INT 100
3406: PUSH
3407: LD_INT 21
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3421: LD_ADDR_VAR 0 7
3425: PUSH
3426: LD_INT 38
3428: PUSH
3429: LD_INT 28
3431: PUSH
3432: LD_INT 41
3434: PUSH
3435: LD_INT 29
3437: PUSH
3438: LD_INT 62
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 65
3446: PUSH
3447: LD_INT 7
3449: PUSH
3450: LD_INT 95
3452: PUSH
3453: LD_INT 55
3455: PUSH
3456: LD_INT 98
3458: PUSH
3459: LD_INT 54
3461: PUSH
3462: LD_INT 96
3464: PUSH
3465: LD_INT 111
3467: PUSH
3468: LD_INT 99
3470: PUSH
3471: LD_INT 112
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: ST_TO_ADDR
// end ; 2 , 3 :
3492: GO 3932
3494: LD_INT 2
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3508
3500: LD_INT 3
3502: DOUBLE
3503: EQUAL
3504: IFTRUE 3508
3506: GO 3931
3508: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: LD_INT 56
3516: PUSH
3517: LD_INT 37
3519: PUSH
3520: LD_INT 2
3522: PUSH
3523: LD_INT 81
3525: PUSH
3526: LD_INT 6
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: LD_INT 90
3534: PUSH
3535: LD_INT 25
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 105
3543: PUSH
3544: LD_INT 68
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: LD_INT 96
3552: PUSH
3553: LD_INT 82
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 80
3561: PUSH
3562: LD_INT 109
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_INT 7
3595: PUSH
3596: LD_INT 8
3598: PUSH
3599: LD_INT 9
3601: PUSH
3602: LD_INT 10
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: LD_INT 12
3610: PUSH
3611: LD_INT 42
3613: PUSH
3614: LD_INT 43
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_INT 13
3634: PUSH
3635: LD_INT 14
3637: PUSH
3638: LD_INT 15
3640: PUSH
3641: LD_INT 16
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3650: LD_ADDR_VAR 0 15
3654: PUSH
3655: LD_INT 4
3657: PUSH
3658: LD_INT 5
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: LD_INT 1
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3673: LD_ADDR_VAR 0 8
3677: PUSH
3678: LD_INT 68
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 53
3689: PUSH
3690: LD_INT 142
3692: PUSH
3693: LD_INT 98
3695: PUSH
3696: LD_INT 96
3698: PUSH
3699: LD_INT 82
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 17
3719: PUSH
3720: LD_INT 3
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3727: LD_ADDR_VAR 0 5
3731: PUSH
3732: LD_INT 104
3734: PUSH
3735: LD_INT 21
3737: PUSH
3738: LD_INT 4
3740: PUSH
3741: LD_INT 100
3743: PUSH
3744: LD_INT 21
3746: PUSH
3747: LD_INT 4
3749: PUSH
3750: LD_INT 91
3752: PUSH
3753: LD_INT 28
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 92
3761: PUSH
3762: LD_INT 31
3764: PUSH
3765: LD_INT 1
3767: PUSH
3768: LD_INT 71
3770: PUSH
3771: LD_INT 106
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 71
3779: PUSH
3780: LD_INT 103
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 66
3788: PUSH
3789: LD_INT 102
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3818: LD_ADDR_VAR 0 7
3822: PUSH
3823: LD_INT 38
3825: PUSH
3826: LD_INT 28
3828: PUSH
3829: LD_INT 41
3831: PUSH
3832: LD_INT 29
3834: PUSH
3835: LD_INT 62
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: LD_INT 65
3843: PUSH
3844: LD_INT 7
3846: PUSH
3847: LD_INT 95
3849: PUSH
3850: LD_INT 55
3852: PUSH
3853: LD_INT 98
3855: PUSH
3856: LD_INT 54
3858: PUSH
3859: LD_INT 96
3861: PUSH
3862: LD_INT 111
3864: PUSH
3865: LD_INT 99
3867: PUSH
3868: LD_INT 112
3870: PUSH
3871: LD_INT 86
3873: PUSH
3874: LD_INT 17
3876: PUSH
3877: LD_INT 89
3879: PUSH
3880: LD_INT 17
3882: PUSH
3883: LD_INT 136
3885: PUSH
3886: LD_INT 91
3888: PUSH
3889: LD_INT 140
3891: PUSH
3892: LD_INT 91
3894: PUSH
3895: LD_INT 102
3897: PUSH
3898: LD_INT 54
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: ST_TO_ADDR
// end ; end ;
3929: GO 3932
3931: POP
// end else
3932: GO 4874
// if road = 2 then
3934: LD_EXP 2
3938: PUSH
3939: LD_INT 2
3941: EQUAL
3942: IFFALSE 4874
// begin case Difficulty of 1 :
3944: LD_OWVAR 67
3948: PUSH
3949: LD_INT 1
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 4368
3957: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3958: LD_ADDR_VAR 0 2
3962: PUSH
3963: LD_INT 44
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 2
3971: PUSH
3972: LD_INT 62
3974: PUSH
3975: LD_INT 8
3977: PUSH
3978: LD_INT 0
3980: PUSH
3981: LD_INT 106
3983: PUSH
3984: LD_INT 68
3986: PUSH
3987: LD_INT 2
3989: PUSH
3990: LD_INT 143
3992: PUSH
3993: LD_INT 96
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 90
4001: PUSH
4002: LD_INT 115
4004: PUSH
4005: LD_INT 4
4007: PUSH
4008: LD_INT 56
4010: PUSH
4011: LD_INT 59
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: LD_INT 45
4044: PUSH
4045: LD_INT 46
4047: PUSH
4048: LD_INT 47
4050: PUSH
4051: LD_INT 48
4053: PUSH
4054: LD_INT 49
4056: PUSH
4057: LD_INT 50
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_INT 45
4075: PUSH
4076: LD_INT 46
4078: PUSH
4079: LD_INT 47
4081: PUSH
4082: LD_INT 48
4084: PUSH
4085: LD_INT 49
4087: PUSH
4088: LD_INT 50
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_INT 0
4106: PUSH
4107: LD_INT 0
4109: PUSH
4110: LD_INT 5
4112: PUSH
4113: LD_INT 0
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4130: LD_ADDR_VAR 0 8
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 62
4143: PUSH
4144: LD_INT 8
4146: PUSH
4147: LD_INT 106
4149: PUSH
4150: LD_INT 68
4152: PUSH
4153: LD_INT 143
4155: PUSH
4156: LD_INT 96
4158: PUSH
4159: LD_INT 90
4161: PUSH
4162: LD_INT 115
4164: PUSH
4165: LD_INT 56
4167: PUSH
4168: LD_INT 59
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4185: LD_ADDR_VAR 0 6
4189: PUSH
4190: LD_INT 17
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4200: LD_ADDR_VAR 0 5
4204: PUSH
4205: LD_INT 51
4207: PUSH
4208: LD_INT 29
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 55
4216: PUSH
4217: LD_INT 33
4219: PUSH
4220: LD_INT 5
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4231: LD_ADDR_VAR 0 7
4235: PUSH
4236: LD_INT 31
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 33
4244: PUSH
4245: LD_INT 13
4247: PUSH
4248: LD_INT 35
4250: PUSH
4251: LD_INT 13
4253: PUSH
4254: LD_INT 98
4256: PUSH
4257: LD_INT 20
4259: PUSH
4260: LD_INT 102
4262: PUSH
4263: LD_INT 25
4265: PUSH
4266: LD_INT 97
4268: PUSH
4269: LD_INT 33
4271: PUSH
4272: LD_INT 101
4274: PUSH
4275: LD_INT 54
4277: PUSH
4278: LD_INT 98
4280: PUSH
4281: LD_INT 54
4283: PUSH
4284: LD_INT 96
4286: PUSH
4287: LD_INT 55
4289: PUSH
4290: LD_INT 94
4292: PUSH
4293: LD_INT 56
4295: PUSH
4296: LD_INT 145
4298: PUSH
4299: LD_INT 102
4301: PUSH
4302: LD_INT 146
4304: PUSH
4305: LD_INT 100
4307: PUSH
4308: LD_INT 97
4310: PUSH
4311: LD_INT 114
4313: PUSH
4314: LD_INT 99
4316: PUSH
4317: LD_INT 117
4319: PUSH
4320: LD_INT 54
4322: PUSH
4323: LD_INT 58
4325: PUSH
4326: LD_INT 55
4328: PUSH
4329: LD_INT 56
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// end ; 2 , 3 :
4366: GO 4874
4368: LD_INT 2
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4382
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4873
4382: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 44
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: LD_INT 62
4399: PUSH
4400: LD_INT 8
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 68
4411: PUSH
4412: LD_INT 2
4414: PUSH
4415: LD_INT 143
4417: PUSH
4418: LD_INT 96
4420: PUSH
4421: LD_INT 3
4423: PUSH
4424: LD_INT 90
4426: PUSH
4427: LD_INT 115
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 56
4435: PUSH
4436: LD_INT 59
4438: PUSH
4439: LD_INT 5
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4462: LD_ADDR_VAR 0 3
4466: PUSH
4467: LD_INT 45
4469: PUSH
4470: LD_INT 46
4472: PUSH
4473: LD_INT 47
4475: PUSH
4476: LD_INT 48
4478: PUSH
4479: LD_INT 49
4481: PUSH
4482: LD_INT 50
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 45
4500: PUSH
4501: LD_INT 46
4503: PUSH
4504: LD_INT 47
4506: PUSH
4507: LD_INT 48
4509: PUSH
4510: LD_INT 49
4512: PUSH
4513: LD_INT 50
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4524: LD_ADDR_VAR 0 15
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 0
4534: PUSH
4535: LD_INT 5
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4555: LD_ADDR_VAR 0 8
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 27
4565: PUSH
4566: LD_INT 44
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 62
4574: PUSH
4575: LD_INT 8
4577: PUSH
4578: LD_INT 106
4580: PUSH
4581: LD_INT 68
4583: PUSH
4584: LD_INT 143
4586: PUSH
4587: LD_INT 96
4589: PUSH
4590: LD_INT 90
4592: PUSH
4593: LD_INT 115
4595: PUSH
4596: LD_INT 56
4598: PUSH
4599: LD_INT 59
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4618: LD_ADDR_VAR 0 6
4622: PUSH
4623: LD_INT 17
4625: PUSH
4626: LD_INT 4
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 51
4640: PUSH
4641: LD_INT 29
4643: PUSH
4644: LD_INT 5
4646: PUSH
4647: LD_INT 55
4649: PUSH
4650: LD_INT 33
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 37
4661: PUSH
4662: LD_INT 0
4664: PUSH
4665: LD_INT 112
4667: PUSH
4668: LD_INT 72
4670: PUSH
4671: LD_INT 5
4673: PUSH
4674: LD_INT 120
4676: PUSH
4677: LD_INT 93
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 45
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: LD_INT 27
4694: PUSH
4695: LD_INT 48
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: LD_INT 28
4703: PUSH
4704: LD_INT 51
4706: PUSH
4707: LD_INT 1
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4736: LD_ADDR_VAR 0 7
4740: PUSH
4741: LD_INT 31
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 33
4749: PUSH
4750: LD_INT 13
4752: PUSH
4753: LD_INT 35
4755: PUSH
4756: LD_INT 13
4758: PUSH
4759: LD_INT 98
4761: PUSH
4762: LD_INT 20
4764: PUSH
4765: LD_INT 102
4767: PUSH
4768: LD_INT 25
4770: PUSH
4771: LD_INT 97
4773: PUSH
4774: LD_INT 33
4776: PUSH
4777: LD_INT 101
4779: PUSH
4780: LD_INT 54
4782: PUSH
4783: LD_INT 98
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: LD_INT 96
4791: PUSH
4792: LD_INT 55
4794: PUSH
4795: LD_INT 94
4797: PUSH
4798: LD_INT 56
4800: PUSH
4801: LD_INT 145
4803: PUSH
4804: LD_INT 102
4806: PUSH
4807: LD_INT 146
4809: PUSH
4810: LD_INT 100
4812: PUSH
4813: LD_INT 97
4815: PUSH
4816: LD_INT 114
4818: PUSH
4819: LD_INT 99
4821: PUSH
4822: LD_INT 117
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: LD_INT 55
4833: PUSH
4834: LD_INT 56
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// end ; end ;
4871: GO 4874
4873: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4874: LD_ADDR_EXP 3
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: PUSH
4893: LD_OWVAR 67
4897: ARRAY
4898: ST_TO_ADDR
// if Difficulty > 1 then
4899: LD_OWVAR 67
4903: PUSH
4904: LD_INT 1
4906: GREATER
4907: IFFALSE 4922
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4909: LD_INT 5
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL_OW 322
// if Difficulty > 1 then
4922: LD_OWVAR 67
4926: PUSH
4927: LD_INT 1
4929: GREATER
4930: IFFALSE 4945
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4932: LD_INT 52
4934: PPUSH
4935: LD_INT 2
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 322
// miners := [ ] ;
4945: LD_ADDR_EXP 15
4949: PUSH
4950: EMPTY
4951: ST_TO_ADDR
// hovers := [ ] ;
4952: LD_ADDR_EXP 16
4956: PUSH
4957: EMPTY
4958: ST_TO_ADDR
// hovers_driver := [ ] ;
4959: LD_ADDR_EXP 17
4963: PUSH
4964: EMPTY
4965: ST_TO_ADDR
// tanks := [ ] ;
4966: LD_ADDR_EXP 18
4970: PUSH
4971: EMPTY
4972: ST_TO_ADDR
// p := 1 ;
4973: LD_ADDR_VAR 0 10
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4981: LD_ADDR_OWVAR 43
4985: PUSH
4986: LD_INT 4
4988: PUSH
4989: LD_INT 5
4991: PUSH
4992: LD_INT 6
4994: PUSH
4995: LD_INT 7
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_OWVAR 67
5008: PUSH
5009: LD_INT 1
5011: PLUS
5012: ARRAY
5013: ST_TO_ADDR
// bc_type = b_breastwork ;
5014: LD_ADDR_OWVAR 42
5018: PUSH
5019: LD_INT 31
5021: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5022: LD_ADDR_VAR 0 9
5026: PUSH
5027: DOUBLE
5028: LD_INT 1
5030: DEC
5031: ST_TO_ADDR
5032: LD_VAR 0 2
5036: PUSH
5037: LD_INT 3
5039: DIVREAL
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5219
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5044: LD_ADDR_VAR 0 13
5048: PUSH
5049: LD_VAR 0 2
5053: PUSH
5054: LD_VAR 0 10
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: PLUS
5073: ARRAY
5074: PPUSH
5075: LD_VAR 0 2
5079: PUSH
5080: LD_VAR 0 10
5084: PUSH
5085: LD_INT 2
5087: PLUS
5088: ARRAY
5089: PPUSH
5090: CALL_OW 47
5094: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5095: LD_INT 0
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_EXP 3
5105: PPUSH
5106: CALL_OW 380
// un := CreateHuman ;
5110: LD_ADDR_VAR 0 12
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// dir := GetDir ( b ) ;
5120: LD_ADDR_VAR 0 16
5124: PUSH
5125: LD_VAR 0 13
5129: PPUSH
5130: CALL_OW 254
5134: ST_TO_ADDR
// if dir < 3 then
5135: LD_VAR 0 16
5139: PUSH
5140: LD_INT 3
5142: LESS
5143: IFFALSE 5161
// dir := dir + 3 else
5145: LD_ADDR_VAR 0 16
5149: PUSH
5150: LD_VAR 0 16
5154: PUSH
5155: LD_INT 3
5157: PLUS
5158: ST_TO_ADDR
5159: GO 5175
// dir := dir - 3 ;
5161: LD_ADDR_VAR 0 16
5165: PUSH
5166: LD_VAR 0 16
5170: PUSH
5171: LD_INT 3
5173: MINUS
5174: ST_TO_ADDR
// SetDir ( un , dir ) ;
5175: LD_VAR 0 12
5179: PPUSH
5180: LD_VAR 0 16
5184: PPUSH
5185: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5189: LD_VAR 0 12
5193: PPUSH
5194: LD_VAR 0 13
5198: PPUSH
5199: CALL_OW 52
// p := p + 3 ;
5203: LD_ADDR_VAR 0 10
5207: PUSH
5208: LD_VAR 0 10
5212: PUSH
5213: LD_INT 3
5215: PLUS
5216: ST_TO_ADDR
// end ;
5217: GO 5041
5219: POP
5220: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5221: LD_ADDR_VAR 0 14
5225: PUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: ST_TO_ADDR
// for i = 1 to sold_stand do
5246: LD_ADDR_VAR 0 9
5250: PUSH
5251: DOUBLE
5252: LD_INT 1
5254: DEC
5255: ST_TO_ADDR
5256: LD_VAR 0 3
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5447
// for p = 1 to x do
5264: LD_ADDR_VAR 0 10
5268: PUSH
5269: DOUBLE
5270: LD_INT 1
5272: DEC
5273: ST_TO_ADDR
5274: LD_VAR 0 14
5278: PUSH
5279: FOR_TO
5280: IFFALSE 5443
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5282: LD_VAR 0 3
5286: PUSH
5287: LD_VAR 0 9
5291: ARRAY
5292: PUSH
5293: LD_INT 10
5295: EQUAL
5296: IFTRUE 5334
5298: PUSH
5299: LD_EXP 2
5303: PUSH
5304: LD_INT 2
5306: EQUAL
5307: IFFALSE 5319
5309: PUSH
5310: LD_OWVAR 67
5314: PUSH
5315: LD_INT 1
5317: GREATER
5318: AND
5319: IFFALSE 5333
5321: PUSH
5322: LD_VAR 0 10
5326: PUSH
5327: LD_VAR 0 14
5331: EQUAL
5332: AND
5333: OR
5334: IFFALSE 5353
// PrepareHuman ( false , class_mortar , skill ) else
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 8
5341: PPUSH
5342: LD_EXP 3
5346: PPUSH
5347: CALL_OW 380
5351: GO 5368
// PrepareHuman ( false , 1 , skill ) ;
5353: LD_INT 0
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 3
5363: PPUSH
5364: CALL_OW 380
// un := CreateHuman ;
5368: LD_ADDR_VAR 0 12
5372: PUSH
5373: CALL_OW 44
5377: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5378: LD_VAR 0 12
5382: PPUSH
5383: CALL_OW 257
5387: PUSH
5388: LD_INT 1
5390: EQUAL
5391: IFFALSE 5409
// miners := miners ^ un ;
5393: LD_ADDR_EXP 15
5397: PUSH
5398: LD_EXP 15
5402: PUSH
5403: LD_VAR 0 12
5407: ADD
5408: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5409: LD_VAR 0 12
5413: PPUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 9
5423: ARRAY
5424: PPUSH
5425: LD_INT 0
5427: PPUSH
5428: CALL_OW 49
// ComHold ( un ) ;
5432: LD_VAR 0 12
5436: PPUSH
5437: CALL_OW 140
// end ;
5441: GO 5279
5443: POP
5444: POP
5445: GO 5261
5447: POP
5448: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5449: LD_ADDR_VAR 0 14
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: LD_INT 4
5459: PUSH
5460: LD_INT 4
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_OWVAR 67
5472: ARRAY
5473: ST_TO_ADDR
// for i = 1 to sold_crawl do
5474: LD_ADDR_VAR 0 9
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 4
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5602
// for p = 1 to x do
5492: LD_ADDR_VAR 0 10
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_VAR 0 14
5506: PUSH
5507: FOR_TO
5508: IFFALSE 5598
// begin PrepareHuman ( false , 1 , skill ) ;
5510: LD_INT 0
5512: PPUSH
5513: LD_INT 1
5515: PPUSH
5516: LD_EXP 3
5520: PPUSH
5521: CALL_OW 380
// un := CreateHuman ;
5525: LD_ADDR_VAR 0 12
5529: PUSH
5530: CALL_OW 44
5534: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5535: LD_VAR 0 12
5539: PPUSH
5540: LD_VAR 0 15
5544: PUSH
5545: LD_VAR 0 9
5549: ARRAY
5550: PPUSH
5551: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5555: LD_VAR 0 12
5559: PPUSH
5560: LD_VAR 0 4
5564: PUSH
5565: LD_VAR 0 9
5569: ARRAY
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 49
// ComCrawl ( un ) ;
5578: LD_VAR 0 12
5582: PPUSH
5583: CALL_OW 137
// AddComHold ( un ) ;
5587: LD_VAR 0 12
5591: PPUSH
5592: CALL_OW 200
// end ;
5596: GO 5507
5598: POP
5599: POP
5600: GO 5489
5602: POP
5603: POP
// p := 1 ;
5604: LD_ADDR_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5612: LD_ADDR_VAR 0 9
5616: PUSH
5617: DOUBLE
5618: LD_INT 1
5620: DEC
5621: ST_TO_ADDR
5622: LD_VAR 0 8
5626: PUSH
5627: LD_INT 2
5629: DIVREAL
5630: PUSH
5631: FOR_TO
5632: IFFALSE 5686
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5634: LD_VAR 0 8
5638: PUSH
5639: LD_VAR 0 10
5643: ARRAY
5644: PPUSH
5645: LD_VAR 0 8
5649: PUSH
5650: LD_VAR 0 10
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: ARRAY
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: LD_INT 10
5665: PPUSH
5666: CALL_OW 330
// p := p + 2 ;
5670: LD_ADDR_VAR 0 10
5674: PUSH
5675: LD_VAR 0 10
5679: PUSH
5680: LD_INT 2
5682: PLUS
5683: ST_TO_ADDR
// end ;
5684: GO 5631
5686: POP
5687: POP
// for i = 1 to hover_x [ 2 ] do
5688: LD_ADDR_VAR 0 9
5692: PUSH
5693: DOUBLE
5694: LD_INT 1
5696: DEC
5697: ST_TO_ADDR
5698: LD_VAR 0 6
5702: PUSH
5703: LD_INT 2
5705: ARRAY
5706: PUSH
5707: FOR_TO
5708: IFFALSE 5857
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5710: LD_INT 0
5712: PPUSH
5713: LD_INT 3
5715: PPUSH
5716: LD_EXP 3
5720: PUSH
5721: LD_INT 1
5723: PLUS
5724: PPUSH
5725: CALL_OW 380
// un := CreateHuman ;
5729: LD_ADDR_VAR 0 12
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5739: LD_ADDR_EXP 17
5743: PUSH
5744: LD_EXP 17
5748: PUSH
5749: LD_VAR 0 12
5753: ADD
5754: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5755: LD_ADDR_VAR 0 11
5759: PUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 2
5765: PPUSH
5766: LD_INT 11
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: LD_INT 92
5777: PUSH
5778: LD_INT 24
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_VAR 0 9
5789: PUSH
5790: LD_INT 2
5792: MOD
5793: PUSH
5794: LD_INT 1
5796: PLUS
5797: ARRAY
5798: PPUSH
5799: CALL 7141 0 6
5803: ST_TO_ADDR
// hovers := hovers ^ veh ;
5804: LD_ADDR_EXP 16
5808: PUSH
5809: LD_EXP 16
5813: PUSH
5814: LD_VAR 0 11
5818: ADD
5819: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5820: LD_VAR 0 11
5824: PPUSH
5825: LD_VAR 0 6
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: LD_INT 0
5836: PPUSH
5837: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5841: LD_VAR 0 12
5845: PPUSH
5846: LD_VAR 0 11
5850: PPUSH
5851: CALL_OW 52
// end ;
5855: GO 5707
5857: POP
5858: POP
// p := 1 ;
5859: LD_ADDR_VAR 0 10
5863: PUSH
5864: LD_INT 1
5866: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5867: LD_ADDR_VAR 0 9
5871: PUSH
5872: DOUBLE
5873: LD_INT 1
5875: DEC
5876: ST_TO_ADDR
5877: LD_VAR 0 5
5881: PUSH
5882: LD_INT 3
5884: DIVREAL
5885: PUSH
5886: FOR_TO
5887: IFFALSE 6061
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5889: LD_INT 0
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: LD_EXP 3
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: CALL_OW 380
// un := CreateHuman ;
5908: LD_ADDR_VAR 0 12
5912: PUSH
5913: CALL_OW 44
5917: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5918: LD_ADDR_VAR 0 11
5922: PUSH
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: LD_INT 14
5931: PPUSH
5932: LD_INT 2
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: LD_INT 27
5940: PUSH
5941: LD_INT 25
5943: PUSH
5944: LD_INT 26
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 12
5962: ARRAY
5963: PPUSH
5964: CALL 7141 0 6
5968: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5969: LD_VAR 0 11
5973: PPUSH
5974: LD_VAR 0 5
5978: PUSH
5979: LD_VAR 0 10
5983: PUSH
5984: LD_INT 2
5986: PLUS
5987: ARRAY
5988: PPUSH
5989: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5993: LD_VAR 0 11
5997: PPUSH
5998: LD_VAR 0 5
6002: PUSH
6003: LD_VAR 0 10
6007: ARRAY
6008: PPUSH
6009: LD_VAR 0 5
6013: PUSH
6014: LD_VAR 0 10
6018: PUSH
6019: LD_INT 1
6021: PLUS
6022: ARRAY
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6031: LD_VAR 0 12
6035: PPUSH
6036: LD_VAR 0 11
6040: PPUSH
6041: CALL_OW 52
// p := p + 3 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_VAR 0 10
6054: PUSH
6055: LD_INT 3
6057: PLUS
6058: ST_TO_ADDR
// end ;
6059: GO 5886
6061: POP
6062: POP
// p := 1 ;
6063: LD_ADDR_VAR 0 10
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6071: LD_ADDR_VAR 0 9
6075: PUSH
6076: DOUBLE
6077: LD_INT 1
6079: DEC
6080: ST_TO_ADDR
6081: LD_VAR 0 7
6085: PUSH
6086: LD_INT 2
6088: DIVREAL
6089: PUSH
6090: FOR_TO
6091: IFFALSE 6145
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6093: LD_VAR 0 7
6097: PUSH
6098: LD_VAR 0 10
6102: ARRAY
6103: PPUSH
6104: LD_VAR 0 7
6108: PUSH
6109: LD_VAR 0 10
6113: PUSH
6114: LD_INT 1
6116: PLUS
6117: ARRAY
6118: PPUSH
6119: LD_INT 2
6121: PPUSH
6122: LD_INT 0
6124: PPUSH
6125: CALL_OW 454
// p := p + 2 ;
6129: LD_ADDR_VAR 0 10
6133: PUSH
6134: LD_VAR 0 10
6138: PUSH
6139: LD_INT 2
6141: PLUS
6142: ST_TO_ADDR
// end ;
6143: GO 6090
6145: POP
6146: POP
// mines := mines_xy ;
6147: LD_ADDR_EXP 14
6151: PUSH
6152: LD_VAR 0 7
6156: ST_TO_ADDR
// end ;
6157: LD_VAR 0 1
6161: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6162: GO 6164
6164: DISABLE
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
// begin enable ;
6171: ENABLE
// if tanks > 0 then
6172: LD_EXP 18
6176: PUSH
6177: LD_INT 0
6179: GREATER
6180: IFFALSE 6290
// begin for i = 1 to tanks do
6182: LD_ADDR_VAR 0 3
6186: PUSH
6187: DOUBLE
6188: LD_INT 1
6190: DEC
6191: ST_TO_ADDR
6192: LD_EXP 18
6196: PUSH
6197: FOR_TO
6198: IFFALSE 6288
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6200: LD_INT 2
6202: PPUSH
6203: LD_EXP 18
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: PPUSH
6214: CALL_OW 292
6218: IFFALSE 6238
6220: PUSH
6221: LD_EXP 18
6225: PUSH
6226: LD_VAR 0 3
6230: ARRAY
6231: PPUSH
6232: CALL_OW 314
6236: NOT
6237: AND
6238: IFFALSE 6286
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6240: LD_EXP 18
6244: PUSH
6245: LD_VAR 0 3
6249: ARRAY
6250: PPUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: PPUSH
6266: LD_EXP 18
6270: PUSH
6271: LD_VAR 0 3
6275: ARRAY
6276: PPUSH
6277: CALL_OW 74
6281: PPUSH
6282: CALL_OW 115
6286: GO 6197
6288: POP
6289: POP
// end ; if hovers > 0 then
6290: LD_EXP 16
6294: PUSH
6295: LD_INT 0
6297: GREATER
6298: IFFALSE 6623
// begin for i = 1 to hovers do
6300: LD_ADDR_VAR 0 3
6304: PUSH
6305: DOUBLE
6306: LD_INT 1
6308: DEC
6309: ST_TO_ADDR
6310: LD_EXP 16
6314: PUSH
6315: FOR_TO
6316: IFFALSE 6621
// begin if GetLives ( hovers [ i ] ) < 600 then
6318: LD_EXP 16
6322: PUSH
6323: LD_VAR 0 3
6327: ARRAY
6328: PPUSH
6329: CALL_OW 256
6333: PUSH
6334: LD_INT 600
6336: LESS
6337: IFFALSE 6448
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6339: LD_EXP 16
6343: PUSH
6344: LD_VAR 0 3
6348: ARRAY
6349: PPUSH
6350: LD_INT 18
6352: PPUSH
6353: CALL_OW 308
6357: NOT
6358: IFFALSE 6380
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: LD_INT 18
6373: PPUSH
6374: CALL_OW 113
6378: GO 6448
// if IsDrivenBy ( hovers [ i ] ) then
6380: LD_EXP 16
6384: PUSH
6385: LD_VAR 0 3
6389: ARRAY
6390: PPUSH
6391: CALL_OW 311
6395: IFFALSE 6448
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6417: LD_EXP 16
6421: PUSH
6422: LD_VAR 0 3
6426: ARRAY
6427: PPUSH
6428: CALL_OW 311
6432: PPUSH
6433: LD_EXP 16
6437: PUSH
6438: LD_VAR 0 3
6442: ARRAY
6443: PPUSH
6444: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6448: LD_EXP 16
6452: PUSH
6453: LD_VAR 0 3
6457: ARRAY
6458: PPUSH
6459: CALL_OW 256
6463: PUSH
6464: LD_INT 998
6466: GREATER
6467: IFFALSE 6619
// begin if not IsDrivenBy ( hovers [ i ] ) then
6469: LD_EXP 16
6473: PUSH
6474: LD_VAR 0 3
6478: ARRAY
6479: PPUSH
6480: CALL_OW 311
6484: NOT
6485: IFFALSE 6522
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6487: LD_EXP 17
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: PPUSH
6498: LD_EXP 16
6502: PPUSH
6503: LD_INT 58
6505: PUSH
6506: EMPTY
6507: LIST
6508: PPUSH
6509: CALL_OW 72
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PPUSH
6518: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6522: LD_INT 19
6524: PPUSH
6525: LD_INT 22
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 70
6539: PUSH
6540: LD_INT 0
6542: GREATER
6543: IFFALSE 6619
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6545: LD_EXP 16
6549: PUSH
6550: LD_VAR 0 3
6554: ARRAY
6555: PPUSH
6556: CALL_OW 311
6560: PPUSH
6561: CALL_OW 314
6565: NOT
6566: IFFALSE 6619
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6568: LD_EXP 16
6572: PUSH
6573: LD_VAR 0 3
6577: ARRAY
6578: PPUSH
6579: CALL_OW 311
6583: PPUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PPUSH
6599: LD_EXP 16
6603: PUSH
6604: LD_VAR 0 3
6608: ARRAY
6609: PPUSH
6610: CALL_OW 74
6614: PPUSH
6615: CALL_OW 115
// end ; end ;
6619: GO 6315
6621: POP
6622: POP
// end ; p := 1 ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_EXP 14
6645: PUSH
6646: LD_INT 2
6648: DIVREAL
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6915
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6653: LD_ADDR_VAR 0 4
6657: PUSH
6658: LD_EXP 14
6662: PUSH
6663: LD_VAR 0 2
6667: ARRAY
6668: PPUSH
6669: LD_EXP 14
6673: PUSH
6674: LD_VAR 0 2
6678: PUSH
6679: LD_INT 1
6681: PLUS
6682: ARRAY
6683: PPUSH
6684: CALL_OW 428
6688: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6689: LD_VAR 0 4
6693: IFFALSE 6727
6695: PUSH
6696: LD_EXP 14
6700: PUSH
6701: LD_VAR 0 2
6705: ARRAY
6706: PPUSH
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: PUSH
6717: LD_INT 1
6719: PLUS
6720: ARRAY
6721: PPUSH
6722: CALL_OW 458
6726: AND
6727: IFFALSE 6899
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6729: LD_EXP 14
6733: PUSH
6734: LD_VAR 0 2
6738: ARRAY
6739: PPUSH
6740: LD_EXP 14
6744: PUSH
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 1
6752: PLUS
6753: ARRAY
6754: PPUSH
6755: CALL_OW 428
6759: PPUSH
6760: CALL_OW 255
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: IN
6775: IFFALSE 6849
6777: PUSH
6778: LD_EXP 15
6782: PPUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_VAR 0 2
6792: ARRAY
6793: PPUSH
6794: LD_EXP 14
6798: PUSH
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: PLUS
6807: ARRAY
6808: PPUSH
6809: CALL_OW 73
6813: PPUSH
6814: LD_EXP 14
6818: PUSH
6819: LD_VAR 0 2
6823: ARRAY
6824: PPUSH
6825: LD_EXP 14
6829: PUSH
6830: LD_VAR 0 2
6834: PUSH
6835: LD_INT 1
6837: PLUS
6838: ARRAY
6839: PPUSH
6840: CALL_OW 297
6844: PUSH
6845: LD_INT 30
6847: LESS
6848: AND
6849: IFFALSE 6899
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6851: LD_EXP 14
6855: PUSH
6856: LD_VAR 0 2
6860: ARRAY
6861: PPUSH
6862: LD_EXP 14
6866: PUSH
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 1
6874: PLUS
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PPUSH
6880: CALL_OW 456
// if not mines_trigger then
6884: LD_EXP 10
6888: NOT
6889: IFFALSE 6899
// mines_trigger := true ;
6891: LD_ADDR_EXP 10
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// end ; p := p + 2 ;
6899: LD_ADDR_VAR 0 2
6903: PUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 2
6911: PLUS
6912: ST_TO_ADDR
// end ;
6913: GO 6650
6915: POP
6916: POP
// end ;
6917: PPOPN 4
6919: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6920: LD_EXP 4
6924: PUSH
6925: LD_INT 1
6927: ARRAY
6928: PPUSH
6929: LD_EXP 6
6933: PPUSH
6934: CALL_OW 296
6938: PUSH
6939: LD_INT 20
6941: GREATER
6942: IFTRUE 6968
6944: PUSH
6945: LD_EXP 4
6949: PUSH
6950: LD_INT 1
6952: ARRAY
6953: PPUSH
6954: LD_EXP 6
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 20
6966: GREATER
6967: OR
6968: IFFALSE 7083
6970: GO 6972
6972: DISABLE
6973: LD_INT 0
6975: PPUSH
6976: PPUSH
// begin for i = 1 to Difficulty + 1 do
6977: LD_ADDR_VAR 0 1
6981: PUSH
6982: DOUBLE
6983: LD_INT 1
6985: DEC
6986: ST_TO_ADDR
6987: LD_OWVAR 67
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7081
// begin uc_side := 2 ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_INT 2
7006: ST_TO_ADDR
// uc_nation := 2 ;
7007: LD_ADDR_OWVAR 21
7011: PUSH
7012: LD_INT 2
7014: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_EXP 3
7025: PPUSH
7026: CALL_OW 380
// un := CreateHuman ;
7030: LD_ADDR_VAR 0 2
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_INT 44
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7055: LD_VAR 0 2
7059: PPUSH
7060: LD_EXP 4
7064: PPUSH
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 74
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 6996
7081: POP
7082: POP
// end ;
7083: PPOPN 2
7085: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7086: LD_VAR 0 2
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 31
7106: PUSH
7107: LD_INT 11
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: IN
7127: IFFALSE 7138
// ComRetreat ( driver ) ;
7129: LD_VAR 0 1
7133: PPUSH
7134: CALL 7270 0 1
// end ; end_of_file
7138: PPOPN 4
7140: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7141: LD_INT 0
7143: PPUSH
// uc_side := side ;
7144: LD_ADDR_OWVAR 20
7148: PUSH
7149: LD_VAR 0 1
7153: ST_TO_ADDR
// uc_nation := nation ;
7154: LD_ADDR_OWVAR 21
7158: PUSH
7159: LD_VAR 0 2
7163: ST_TO_ADDR
// vc_chassis := chassis ;
7164: LD_ADDR_OWVAR 37
7168: PUSH
7169: LD_VAR 0 3
7173: ST_TO_ADDR
// vc_engine := engine ;
7174: LD_ADDR_OWVAR 39
7178: PUSH
7179: LD_VAR 0 4
7183: ST_TO_ADDR
// vc_control := control ;
7184: LD_ADDR_OWVAR 38
7188: PUSH
7189: LD_VAR 0 5
7193: ST_TO_ADDR
// vc_weapon := weapon ;
7194: LD_ADDR_OWVAR 40
7198: PUSH
7199: LD_VAR 0 6
7203: ST_TO_ADDR
// result := CreateVehicle ;
7204: LD_ADDR_VAR 0 7
7208: PUSH
7209: CALL_OW 45
7213: ST_TO_ADDR
// end ;
7214: LD_VAR 0 7
7218: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7219: LD_INT 0
7221: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7222: LD_VAR 0 1
7226: PPUSH
7227: LD_VAR 0 2
7231: PPUSH
7232: LD_VAR 0 3
7236: PPUSH
7237: CALL_OW 297
7241: PUSH
7242: LD_INT 6
7244: LESS
7245: IFFALSE 7257
// result := true else
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
7255: GO 7265
// result := false ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// end ;
7265: LD_VAR 0 4
7269: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
7276: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 81
7284: PUSH
7285: LD_VAR 0 1
7289: PPUSH
7290: CALL_OW 255
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: PPUSH
7304: LD_VAR 0 1
7308: PPUSH
7309: CALL_OW 74
7313: PPUSH
7314: CALL_OW 119
// dir := GetDir ( un ) ;
7318: LD_ADDR_VAR 0 4
7322: PUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 254
7332: ST_TO_ADDR
// dir := dir - 3 ;
7333: LD_ADDR_VAR 0 4
7337: PUSH
7338: LD_VAR 0 4
7342: PUSH
7343: LD_INT 3
7345: MINUS
7346: ST_TO_ADDR
// if dir < 0 then
7347: LD_VAR 0 4
7351: PUSH
7352: LD_INT 0
7354: LESS
7355: IFFALSE 7371
// dir := dir + 6 ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_VAR 0 4
7366: PUSH
7367: LD_INT 6
7369: PLUS
7370: ST_TO_ADDR
// while true do
7371: LD_INT 1
7373: IFFALSE 7752
// begin coord_dist := 3 ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 3
7382: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7383: LD_ADDR_VAR 0 5
7387: PUSH
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 250
7397: PPUSH
7398: LD_VAR 0 4
7402: PPUSH
7403: LD_VAR 0 3
7407: PPUSH
7408: CALL_OW 272
7412: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7413: LD_ADDR_VAR 0 6
7417: PUSH
7418: LD_VAR 0 1
7422: PPUSH
7423: CALL_OW 251
7427: PPUSH
7428: LD_VAR 0 4
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL_OW 273
7442: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 351
7457: IFTRUE 7479
7459: PUSH
7460: LD_VAR 0 5
7464: PPUSH
7465: LD_VAR 0 6
7469: PPUSH
7470: CALL_OW 488
7474: PUSH
7475: LD_INT 0
7477: EQUAL
7478: OR
7479: IFTRUE 7501
7481: PUSH
7482: LD_VAR 0 5
7486: PPUSH
7487: LD_VAR 0 6
7491: PPUSH
7492: CALL_OW 428
7496: PUSH
7497: LD_INT 0
7499: NONEQUAL
7500: OR
7501: IFFALSE 7666
// begin repeat begin coord_dist := coord_dist + 1 ;
7503: LD_ADDR_VAR 0 3
7507: PUSH
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ST_TO_ADDR
// dir := dir + 1 ;
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 4
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: ST_TO_ADDR
// if dir > 5 then
7531: LD_VAR 0 4
7535: PUSH
7536: LD_INT 5
7538: GREATER
7539: IFFALSE 7549
// dir = 0 ;
7541: LD_ADDR_VAR 0 4
7545: PUSH
7546: LD_INT 0
7548: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 5
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 250
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 272
7578: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7579: LD_ADDR_VAR 0 6
7583: PUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: CALL_OW 251
7593: PPUSH
7594: LD_VAR 0 4
7598: PPUSH
7599: LD_VAR 0 3
7603: PPUSH
7604: CALL_OW 273
7608: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7609: LD_VAR 0 5
7613: PPUSH
7614: LD_VAR 0 6
7618: PPUSH
7619: CALL_OW 351
7623: NOT
7624: IFFALSE 7642
7626: PUSH
7627: LD_VAR 0 5
7631: PPUSH
7632: LD_VAR 0 6
7636: PPUSH
7637: CALL_OW 488
7641: AND
7642: IFFALSE 7664
7644: PUSH
7645: LD_VAR 0 5
7649: PPUSH
7650: LD_VAR 0 6
7654: PPUSH
7655: CALL_OW 428
7659: PUSH
7660: LD_INT 0
7662: EQUAL
7663: AND
7664: IFFALSE 7503
// end ; ComMoveXY ( un , x , y ) ;
7666: LD_VAR 0 1
7670: PPUSH
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 111
// Wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 81
7699: PUSH
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: PPUSH
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 74
7728: PPUSH
7729: CALL_OW 296
7733: PUSH
7734: LD_INT 10
7736: GREATEREQUAL
7737: IFFALSE 7750
// begin ComStop ( un ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 141
// break ;
7748: GO 7752
// end ; end ;
7750: GO 7371
// end ; end_of_file end_of_file
7752: LD_VAR 0 2
7756: RET
// export globalGameSaveCounter ; every 0 0$1 do
7757: GO 7759
7759: DISABLE
// begin enable ;
7760: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7761: LD_STRING updateTimer(
7763: PUSH
7764: LD_OWVAR 1
7768: STR
7769: PUSH
7770: LD_STRING );
7772: STR
7773: PPUSH
7774: CALL_OW 559
// end ;
7778: END
// every 0 0$1 do
7779: GO 7781
7781: DISABLE
// begin globalGameSaveCounter := 0 ;
7782: LD_ADDR_EXP 19
7786: PUSH
7787: LD_INT 0
7789: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7790: LD_STRING setGameSaveCounter(0)
7792: PPUSH
7793: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7797: LD_STRING initStreamRollete();
7799: PPUSH
7800: CALL_OW 559
// InitStreamMode ;
7804: CALL 9156 0 0
// DefineStreamItems ( false ) ;
7808: LD_INT 0
7810: PPUSH
7811: CALL 9620 0 1
// end ;
7815: END
// export function SOS_MapStart ( ) ; begin
7816: LD_INT 0
7818: PPUSH
// if streamModeActive then
7819: LD_EXP 20
7823: IFFALSE 7832
// DefineStreamItems ( true ) ;
7825: LD_INT 1
7827: PPUSH
7828: CALL 9620 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
7832: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
7834: PPUSH
7835: CALL_OW 559
// UpdateLuaVariables ( ) ;
7839: CALL 7856 0 0
// UpdateFactoryWaypoints ( ) ;
7843: CALL 22742 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7847: CALL 22994 0 0
// end ;
7851: LD_VAR 0 1
7855: RET
// function UpdateLuaVariables ( ) ; begin
7856: LD_INT 0
7858: PPUSH
// if globalGameSaveCounter then
7859: LD_EXP 19
7863: IFFALSE 7897
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7865: LD_ADDR_EXP 19
7869: PUSH
7870: LD_EXP 19
7874: PPUSH
7875: CALL 63416 0 1
7879: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7880: LD_STRING setGameSaveCounter(
7882: PUSH
7883: LD_EXP 19
7887: STR
7888: PUSH
7889: LD_STRING )
7891: STR
7892: PPUSH
7893: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7897: LD_STRING setGameDifficulty(
7899: PUSH
7900: LD_OWVAR 67
7904: STR
7905: PUSH
7906: LD_STRING )
7908: STR
7909: PPUSH
7910: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7914: LD_STRING displayDifficulty(
7916: PUSH
7917: LD_OWVAR 67
7921: STR
7922: PUSH
7923: LD_STRING )
7925: STR
7926: PPUSH
7927: CALL_OW 559
// end ;
7931: LD_VAR 0 1
7935: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7936: LD_INT 0
7938: PPUSH
// if p2 = stream_mode then
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 100
7946: EQUAL
7947: IFFALSE 8950
// begin if not StreamModeActive then
7949: LD_EXP 20
7953: NOT
7954: IFFALSE 7964
// StreamModeActive := true ;
7956: LD_ADDR_EXP 20
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// if p3 = 0 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 0
7971: EQUAL
7972: IFFALSE 7978
// InitStreamMode ;
7974: CALL 9156 0 0
// if p3 = 1 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 1
7985: EQUAL
7986: IFFALSE 7996
// sRocket := true ;
7988: LD_ADDR_EXP 25
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 2 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 2
8003: EQUAL
8004: IFFALSE 8014
// sSpeed := true ;
8006: LD_ADDR_EXP 24
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 3 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 3
8021: EQUAL
8022: IFFALSE 8032
// sEngine := true ;
8024: LD_ADDR_EXP 26
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 4 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 4
8039: EQUAL
8040: IFFALSE 8050
// sSpec := true ;
8042: LD_ADDR_EXP 23
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 5 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 5
8057: EQUAL
8058: IFFALSE 8068
// sLevel := true ;
8060: LD_ADDR_EXP 27
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 6 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 6
8075: EQUAL
8076: IFFALSE 8086
// sArmoury := true ;
8078: LD_ADDR_EXP 28
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 7 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 7
8093: EQUAL
8094: IFFALSE 8104
// sRadar := true ;
8096: LD_ADDR_EXP 29
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 8 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 8
8111: EQUAL
8112: IFFALSE 8122
// sBunker := true ;
8114: LD_ADDR_EXP 30
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 9 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 9
8129: EQUAL
8130: IFFALSE 8140
// sHack := true ;
8132: LD_ADDR_EXP 31
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 10 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 10
8147: EQUAL
8148: IFFALSE 8158
// sFire := true ;
8150: LD_ADDR_EXP 32
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 11 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 11
8165: EQUAL
8166: IFFALSE 8176
// sRefresh := true ;
8168: LD_ADDR_EXP 33
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 12 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 12
8183: EQUAL
8184: IFFALSE 8194
// sExp := true ;
8186: LD_ADDR_EXP 34
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 13 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 13
8201: EQUAL
8202: IFFALSE 8212
// sDepot := true ;
8204: LD_ADDR_EXP 35
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 14 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 14
8219: EQUAL
8220: IFFALSE 8230
// sFlag := true ;
8222: LD_ADDR_EXP 36
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 15 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 15
8237: EQUAL
8238: IFFALSE 8248
// sKamikadze := true ;
8240: LD_ADDR_EXP 44
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 16 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 16
8255: EQUAL
8256: IFFALSE 8266
// sTroll := true ;
8258: LD_ADDR_EXP 45
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 17 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 17
8273: EQUAL
8274: IFFALSE 8284
// sSlow := true ;
8276: LD_ADDR_EXP 46
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 18 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 18
8291: EQUAL
8292: IFFALSE 8302
// sLack := true ;
8294: LD_ADDR_EXP 47
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 19 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 19
8309: EQUAL
8310: IFFALSE 8320
// sTank := true ;
8312: LD_ADDR_EXP 49
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 20 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 20
8327: EQUAL
8328: IFFALSE 8338
// sRemote := true ;
8330: LD_ADDR_EXP 50
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 21 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 21
8345: EQUAL
8346: IFFALSE 8356
// sPowell := true ;
8348: LD_ADDR_EXP 51
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 22 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 22
8363: EQUAL
8364: IFFALSE 8374
// sTeleport := true ;
8366: LD_ADDR_EXP 54
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 23 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 23
8381: EQUAL
8382: IFFALSE 8392
// sOilTower := true ;
8384: LD_ADDR_EXP 56
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 24 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 24
8399: EQUAL
8400: IFFALSE 8410
// sShovel := true ;
8402: LD_ADDR_EXP 57
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 25 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 25
8417: EQUAL
8418: IFFALSE 8428
// sSheik := true ;
8420: LD_ADDR_EXP 58
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 26 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 26
8435: EQUAL
8436: IFFALSE 8446
// sEarthquake := true ;
8438: LD_ADDR_EXP 60
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 27 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 27
8453: EQUAL
8454: IFFALSE 8464
// sAI := true ;
8456: LD_ADDR_EXP 61
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 28 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 28
8471: EQUAL
8472: IFFALSE 8482
// sCargo := true ;
8474: LD_ADDR_EXP 64
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 29 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 29
8489: EQUAL
8490: IFFALSE 8500
// sDLaser := true ;
8492: LD_ADDR_EXP 65
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 30 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 30
8507: EQUAL
8508: IFFALSE 8518
// sExchange := true ;
8510: LD_ADDR_EXP 66
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 31 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 31
8525: EQUAL
8526: IFFALSE 8536
// sFac := true ;
8528: LD_ADDR_EXP 67
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 32 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 32
8543: EQUAL
8544: IFFALSE 8554
// sPower := true ;
8546: LD_ADDR_EXP 68
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 33 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 33
8561: EQUAL
8562: IFFALSE 8572
// sRandom := true ;
8564: LD_ADDR_EXP 69
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 34 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 34
8579: EQUAL
8580: IFFALSE 8590
// sShield := true ;
8582: LD_ADDR_EXP 70
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 35 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 35
8597: EQUAL
8598: IFFALSE 8608
// sTime := true ;
8600: LD_ADDR_EXP 71
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 36 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 36
8615: EQUAL
8616: IFFALSE 8626
// sTools := true ;
8618: LD_ADDR_EXP 72
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 101 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 101
8633: EQUAL
8634: IFFALSE 8644
// sSold := true ;
8636: LD_ADDR_EXP 37
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 102 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 102
8651: EQUAL
8652: IFFALSE 8662
// sDiff := true ;
8654: LD_ADDR_EXP 38
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 103 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 103
8669: EQUAL
8670: IFFALSE 8680
// sFog := true ;
8672: LD_ADDR_EXP 41
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 104 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 104
8687: EQUAL
8688: IFFALSE 8698
// sReset := true ;
8690: LD_ADDR_EXP 42
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 105 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 105
8705: EQUAL
8706: IFFALSE 8716
// sSun := true ;
8708: LD_ADDR_EXP 43
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 106 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 106
8723: EQUAL
8724: IFFALSE 8734
// sTiger := true ;
8726: LD_ADDR_EXP 39
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 107 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 107
8741: EQUAL
8742: IFFALSE 8752
// sBomb := true ;
8744: LD_ADDR_EXP 40
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 108 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 108
8759: EQUAL
8760: IFFALSE 8770
// sWound := true ;
8762: LD_ADDR_EXP 48
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if p3 = 109 then
8770: LD_VAR 0 3
8774: PUSH
8775: LD_INT 109
8777: EQUAL
8778: IFFALSE 8788
// sBetray := true ;
8780: LD_ADDR_EXP 52
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// if p3 = 110 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 110
8795: EQUAL
8796: IFFALSE 8806
// sContamin := true ;
8798: LD_ADDR_EXP 53
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 111 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 111
8813: EQUAL
8814: IFFALSE 8824
// sOil := true ;
8816: LD_ADDR_EXP 55
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 112 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 112
8831: EQUAL
8832: IFFALSE 8842
// sStu := true ;
8834: LD_ADDR_EXP 59
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 113 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 113
8849: EQUAL
8850: IFFALSE 8860
// sBazooka := true ;
8852: LD_ADDR_EXP 62
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 114 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 114
8867: EQUAL
8868: IFFALSE 8878
// sMortar := true ;
8870: LD_ADDR_EXP 63
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 115 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 115
8885: EQUAL
8886: IFFALSE 8896
// sRanger := true ;
8888: LD_ADDR_EXP 73
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 116 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 116
8903: EQUAL
8904: IFFALSE 8914
// sComputer := true ;
8906: LD_ADDR_EXP 74
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 117 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 117
8921: EQUAL
8922: IFFALSE 8932
// s30 := true ;
8924: LD_ADDR_EXP 75
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 118 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 118
8939: EQUAL
8940: IFFALSE 8950
// s60 := true ;
8942: LD_ADDR_EXP 76
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// end ; if p2 = hack_mode then
8950: LD_VAR 0 2
8954: PUSH
8955: LD_INT 101
8957: EQUAL
8958: IFFALSE 9086
// begin case p3 of 1 :
8960: LD_VAR 0 3
8964: PUSH
8965: LD_INT 1
8967: DOUBLE
8968: EQUAL
8969: IFTRUE 8973
8971: GO 8980
8973: POP
// hHackUnlimitedResources ; 2 :
8974: CALL 21349 0 0
8978: GO 9086
8980: LD_INT 2
8982: DOUBLE
8983: EQUAL
8984: IFTRUE 8988
8986: GO 8995
8988: POP
// hHackSetLevel10 ; 3 :
8989: CALL 21482 0 0
8993: GO 9086
8995: LD_INT 3
8997: DOUBLE
8998: EQUAL
8999: IFTRUE 9003
9001: GO 9010
9003: POP
// hHackSetLevel10YourUnits ; 4 :
9004: CALL 21567 0 0
9008: GO 9086
9010: LD_INT 4
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9025
9018: POP
// hHackInvincible ; 5 :
9019: CALL 22015 0 0
9023: GO 9086
9025: LD_INT 5
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9040
9033: POP
// hHackInvisible ; 6 :
9034: CALL 22126 0 0
9038: GO 9086
9040: LD_INT 6
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9055
9048: POP
// hHackChangeYourSide ; 7 :
9049: CALL 22183 0 0
9053: GO 9086
9055: LD_INT 7
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9070
9063: POP
// hHackChangeUnitSide ; 8 :
9064: CALL 22225 0 0
9068: GO 9086
9070: LD_INT 8
9072: DOUBLE
9073: EQUAL
9074: IFTRUE 9078
9076: GO 9085
9078: POP
// hHackFog ; end ;
9079: CALL 22326 0 0
9083: GO 9086
9085: POP
// end ; if p2 = game_save_mode then
9086: LD_VAR 0 2
9090: PUSH
9091: LD_INT 102
9093: EQUAL
9094: IFFALSE 9151
// begin if p3 = 1 then
9096: LD_VAR 0 3
9100: PUSH
9101: LD_INT 1
9103: EQUAL
9104: IFFALSE 9116
// globalGameSaveCounter := p4 ;
9106: LD_ADDR_EXP 19
9110: PUSH
9111: LD_VAR 0 4
9115: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9116: LD_VAR 0 3
9120: PUSH
9121: LD_INT 2
9123: EQUAL
9124: IFFALSE 9132
9126: PUSH
9127: LD_EXP 19
9131: AND
9132: IFFALSE 9151
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9134: LD_STRING setGameSaveCounter(
9136: PUSH
9137: LD_EXP 19
9141: STR
9142: PUSH
9143: LD_STRING )
9145: STR
9146: PPUSH
9147: CALL_OW 559
// end ; end ;
9151: LD_VAR 0 7
9155: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9156: LD_INT 0
9158: PPUSH
// streamModeActive := false ;
9159: LD_ADDR_EXP 20
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// normalCounter := 36 ;
9167: LD_ADDR_EXP 21
9171: PUSH
9172: LD_INT 36
9174: ST_TO_ADDR
// hardcoreCounter := 18 ;
9175: LD_ADDR_EXP 22
9179: PUSH
9180: LD_INT 18
9182: ST_TO_ADDR
// sRocket := false ;
9183: LD_ADDR_EXP 25
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sSpeed := false ;
9191: LD_ADDR_EXP 24
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sEngine := false ;
9199: LD_ADDR_EXP 26
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sSpec := false ;
9207: LD_ADDR_EXP 23
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sLevel := false ;
9215: LD_ADDR_EXP 27
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sArmoury := false ;
9223: LD_ADDR_EXP 28
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sRadar := false ;
9231: LD_ADDR_EXP 29
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sBunker := false ;
9239: LD_ADDR_EXP 30
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sHack := false ;
9247: LD_ADDR_EXP 31
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// sFire := false ;
9255: LD_ADDR_EXP 32
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// sRefresh := false ;
9263: LD_ADDR_EXP 33
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// sExp := false ;
9271: LD_ADDR_EXP 34
9275: PUSH
9276: LD_INT 0
9278: ST_TO_ADDR
// sDepot := false ;
9279: LD_ADDR_EXP 35
9283: PUSH
9284: LD_INT 0
9286: ST_TO_ADDR
// sFlag := false ;
9287: LD_ADDR_EXP 36
9291: PUSH
9292: LD_INT 0
9294: ST_TO_ADDR
// sKamikadze := false ;
9295: LD_ADDR_EXP 44
9299: PUSH
9300: LD_INT 0
9302: ST_TO_ADDR
// sTroll := false ;
9303: LD_ADDR_EXP 45
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// sSlow := false ;
9311: LD_ADDR_EXP 46
9315: PUSH
9316: LD_INT 0
9318: ST_TO_ADDR
// sLack := false ;
9319: LD_ADDR_EXP 47
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// sTank := false ;
9327: LD_ADDR_EXP 49
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// sRemote := false ;
9335: LD_ADDR_EXP 50
9339: PUSH
9340: LD_INT 0
9342: ST_TO_ADDR
// sPowell := false ;
9343: LD_ADDR_EXP 51
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// sTeleport := false ;
9351: LD_ADDR_EXP 54
9355: PUSH
9356: LD_INT 0
9358: ST_TO_ADDR
// sOilTower := false ;
9359: LD_ADDR_EXP 56
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// sShovel := false ;
9367: LD_ADDR_EXP 57
9371: PUSH
9372: LD_INT 0
9374: ST_TO_ADDR
// sSheik := false ;
9375: LD_ADDR_EXP 58
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// sEarthquake := false ;
9383: LD_ADDR_EXP 60
9387: PUSH
9388: LD_INT 0
9390: ST_TO_ADDR
// sAI := false ;
9391: LD_ADDR_EXP 61
9395: PUSH
9396: LD_INT 0
9398: ST_TO_ADDR
// sCargo := false ;
9399: LD_ADDR_EXP 64
9403: PUSH
9404: LD_INT 0
9406: ST_TO_ADDR
// sDLaser := false ;
9407: LD_ADDR_EXP 65
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// sExchange := false ;
9415: LD_ADDR_EXP 66
9419: PUSH
9420: LD_INT 0
9422: ST_TO_ADDR
// sFac := false ;
9423: LD_ADDR_EXP 67
9427: PUSH
9428: LD_INT 0
9430: ST_TO_ADDR
// sPower := false ;
9431: LD_ADDR_EXP 68
9435: PUSH
9436: LD_INT 0
9438: ST_TO_ADDR
// sRandom := false ;
9439: LD_ADDR_EXP 69
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// sShield := false ;
9447: LD_ADDR_EXP 70
9451: PUSH
9452: LD_INT 0
9454: ST_TO_ADDR
// sTime := false ;
9455: LD_ADDR_EXP 71
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// sTools := false ;
9463: LD_ADDR_EXP 72
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// sSold := false ;
9471: LD_ADDR_EXP 37
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// sDiff := false ;
9479: LD_ADDR_EXP 38
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// sFog := false ;
9487: LD_ADDR_EXP 41
9491: PUSH
9492: LD_INT 0
9494: ST_TO_ADDR
// sReset := false ;
9495: LD_ADDR_EXP 42
9499: PUSH
9500: LD_INT 0
9502: ST_TO_ADDR
// sSun := false ;
9503: LD_ADDR_EXP 43
9507: PUSH
9508: LD_INT 0
9510: ST_TO_ADDR
// sTiger := false ;
9511: LD_ADDR_EXP 39
9515: PUSH
9516: LD_INT 0
9518: ST_TO_ADDR
// sBomb := false ;
9519: LD_ADDR_EXP 40
9523: PUSH
9524: LD_INT 0
9526: ST_TO_ADDR
// sWound := false ;
9527: LD_ADDR_EXP 48
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// sBetray := false ;
9535: LD_ADDR_EXP 52
9539: PUSH
9540: LD_INT 0
9542: ST_TO_ADDR
// sContamin := false ;
9543: LD_ADDR_EXP 53
9547: PUSH
9548: LD_INT 0
9550: ST_TO_ADDR
// sOil := false ;
9551: LD_ADDR_EXP 55
9555: PUSH
9556: LD_INT 0
9558: ST_TO_ADDR
// sStu := false ;
9559: LD_ADDR_EXP 59
9563: PUSH
9564: LD_INT 0
9566: ST_TO_ADDR
// sBazooka := false ;
9567: LD_ADDR_EXP 62
9571: PUSH
9572: LD_INT 0
9574: ST_TO_ADDR
// sMortar := false ;
9575: LD_ADDR_EXP 63
9579: PUSH
9580: LD_INT 0
9582: ST_TO_ADDR
// sRanger := false ;
9583: LD_ADDR_EXP 73
9587: PUSH
9588: LD_INT 0
9590: ST_TO_ADDR
// sComputer := false ;
9591: LD_ADDR_EXP 74
9595: PUSH
9596: LD_INT 0
9598: ST_TO_ADDR
// s30 := false ;
9599: LD_ADDR_EXP 75
9603: PUSH
9604: LD_INT 0
9606: ST_TO_ADDR
// s60 := false ;
9607: LD_ADDR_EXP 76
9611: PUSH
9612: LD_INT 0
9614: ST_TO_ADDR
// end ;
9615: LD_VAR 0 1
9619: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
// result := [ ] ;
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: EMPTY
9635: ST_TO_ADDR
// if campaign_id = 1 then
9636: LD_OWVAR 69
9640: PUSH
9641: LD_INT 1
9643: EQUAL
9644: IFFALSE 12810
// begin case mission_number of 1 :
9646: LD_OWVAR 70
9650: PUSH
9651: LD_INT 1
9653: DOUBLE
9654: EQUAL
9655: IFTRUE 9659
9657: GO 9735
9659: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9660: LD_ADDR_VAR 0 2
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 4
9670: PUSH
9671: LD_INT 11
9673: PUSH
9674: LD_INT 12
9676: PUSH
9677: LD_INT 15
9679: PUSH
9680: LD_INT 16
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 23
9688: PUSH
9689: LD_INT 26
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 101
9705: PUSH
9706: LD_INT 102
9708: PUSH
9709: LD_INT 106
9711: PUSH
9712: LD_INT 116
9714: PUSH
9715: LD_INT 117
9717: PUSH
9718: LD_INT 118
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: ST_TO_ADDR
9733: GO 12808
9735: LD_INT 2
9737: DOUBLE
9738: EQUAL
9739: IFTRUE 9743
9741: GO 9827
9743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9744: LD_ADDR_VAR 0 2
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: LD_INT 4
9754: PUSH
9755: LD_INT 11
9757: PUSH
9758: LD_INT 12
9760: PUSH
9761: LD_INT 15
9763: PUSH
9764: LD_INT 16
9766: PUSH
9767: LD_INT 22
9769: PUSH
9770: LD_INT 23
9772: PUSH
9773: LD_INT 26
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 101
9789: PUSH
9790: LD_INT 102
9792: PUSH
9793: LD_INT 105
9795: PUSH
9796: LD_INT 106
9798: PUSH
9799: LD_INT 108
9801: PUSH
9802: LD_INT 116
9804: PUSH
9805: LD_INT 117
9807: PUSH
9808: LD_INT 118
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: ST_TO_ADDR
9825: GO 12808
9827: LD_INT 3
9829: DOUBLE
9830: EQUAL
9831: IFTRUE 9835
9833: GO 9923
9835: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: LD_INT 11
9852: PUSH
9853: LD_INT 12
9855: PUSH
9856: LD_INT 15
9858: PUSH
9859: LD_INT 16
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_INT 26
9867: PUSH
9868: LD_INT 36
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 101
9885: PUSH
9886: LD_INT 102
9888: PUSH
9889: LD_INT 105
9891: PUSH
9892: LD_INT 106
9894: PUSH
9895: LD_INT 108
9897: PUSH
9898: LD_INT 116
9900: PUSH
9901: LD_INT 117
9903: PUSH
9904: LD_INT 118
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: ST_TO_ADDR
9921: GO 12808
9923: LD_INT 4
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9931
9929: GO 10027
9931: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9932: LD_ADDR_VAR 0 2
9936: PUSH
9937: LD_INT 2
9939: PUSH
9940: LD_INT 4
9942: PUSH
9943: LD_INT 5
9945: PUSH
9946: LD_INT 8
9948: PUSH
9949: LD_INT 11
9951: PUSH
9952: LD_INT 12
9954: PUSH
9955: LD_INT 15
9957: PUSH
9958: LD_INT 16
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_INT 23
9966: PUSH
9967: LD_INT 26
9969: PUSH
9970: LD_INT 36
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 101
9989: PUSH
9990: LD_INT 102
9992: PUSH
9993: LD_INT 105
9995: PUSH
9996: LD_INT 106
9998: PUSH
9999: LD_INT 108
10001: PUSH
10002: LD_INT 116
10004: PUSH
10005: LD_INT 117
10007: PUSH
10008: LD_INT 118
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: ST_TO_ADDR
10025: GO 12808
10027: LD_INT 5
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10147
10035: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10036: LD_ADDR_VAR 0 2
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 6
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: LD_INT 11
10058: PUSH
10059: LD_INT 12
10061: PUSH
10062: LD_INT 15
10064: PUSH
10065: LD_INT 16
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_INT 23
10073: PUSH
10074: LD_INT 25
10076: PUSH
10077: LD_INT 26
10079: PUSH
10080: LD_INT 36
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 101
10101: PUSH
10102: LD_INT 102
10104: PUSH
10105: LD_INT 105
10107: PUSH
10108: LD_INT 106
10110: PUSH
10111: LD_INT 108
10113: PUSH
10114: LD_INT 109
10116: PUSH
10117: LD_INT 112
10119: PUSH
10120: LD_INT 116
10122: PUSH
10123: LD_INT 117
10125: PUSH
10126: LD_INT 118
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: ST_TO_ADDR
10145: GO 12808
10147: LD_INT 6
10149: DOUBLE
10150: EQUAL
10151: IFTRUE 10155
10153: GO 10287
10155: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10156: LD_ADDR_VAR 0 2
10160: PUSH
10161: LD_INT 2
10163: PUSH
10164: LD_INT 4
10166: PUSH
10167: LD_INT 5
10169: PUSH
10170: LD_INT 6
10172: PUSH
10173: LD_INT 8
10175: PUSH
10176: LD_INT 11
10178: PUSH
10179: LD_INT 12
10181: PUSH
10182: LD_INT 15
10184: PUSH
10185: LD_INT 16
10187: PUSH
10188: LD_INT 20
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 23
10199: PUSH
10200: LD_INT 25
10202: PUSH
10203: LD_INT 26
10205: PUSH
10206: LD_INT 30
10208: PUSH
10209: LD_INT 31
10211: PUSH
10212: LD_INT 32
10214: PUSH
10215: LD_INT 36
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 101
10241: PUSH
10242: LD_INT 102
10244: PUSH
10245: LD_INT 105
10247: PUSH
10248: LD_INT 106
10250: PUSH
10251: LD_INT 108
10253: PUSH
10254: LD_INT 109
10256: PUSH
10257: LD_INT 112
10259: PUSH
10260: LD_INT 116
10262: PUSH
10263: LD_INT 117
10265: PUSH
10266: LD_INT 118
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: ST_TO_ADDR
10285: GO 12808
10287: LD_INT 7
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10407
10295: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 4
10306: PUSH
10307: LD_INT 5
10309: PUSH
10310: LD_INT 7
10312: PUSH
10313: LD_INT 11
10315: PUSH
10316: LD_INT 12
10318: PUSH
10319: LD_INT 15
10321: PUSH
10322: LD_INT 16
10324: PUSH
10325: LD_INT 20
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: LD_INT 23
10336: PUSH
10337: LD_INT 25
10339: PUSH
10340: LD_INT 26
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 101
10361: PUSH
10362: LD_INT 102
10364: PUSH
10365: LD_INT 103
10367: PUSH
10368: LD_INT 105
10370: PUSH
10371: LD_INT 106
10373: PUSH
10374: LD_INT 108
10376: PUSH
10377: LD_INT 112
10379: PUSH
10380: LD_INT 116
10382: PUSH
10383: LD_INT 117
10385: PUSH
10386: LD_INT 118
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: ST_TO_ADDR
10405: GO 12808
10407: LD_INT 8
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10555
10415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10416: LD_ADDR_VAR 0 2
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: LD_INT 5
10429: PUSH
10430: LD_INT 6
10432: PUSH
10433: LD_INT 7
10435: PUSH
10436: LD_INT 8
10438: PUSH
10439: LD_INT 11
10441: PUSH
10442: LD_INT 12
10444: PUSH
10445: LD_INT 15
10447: PUSH
10448: LD_INT 16
10450: PUSH
10451: LD_INT 20
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 22
10459: PUSH
10460: LD_INT 23
10462: PUSH
10463: LD_INT 25
10465: PUSH
10466: LD_INT 26
10468: PUSH
10469: LD_INT 30
10471: PUSH
10472: LD_INT 31
10474: PUSH
10475: LD_INT 32
10477: PUSH
10478: LD_INT 36
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 101
10505: PUSH
10506: LD_INT 102
10508: PUSH
10509: LD_INT 103
10511: PUSH
10512: LD_INT 105
10514: PUSH
10515: LD_INT 106
10517: PUSH
10518: LD_INT 108
10520: PUSH
10521: LD_INT 109
10523: PUSH
10524: LD_INT 112
10526: PUSH
10527: LD_INT 116
10529: PUSH
10530: LD_INT 117
10532: PUSH
10533: LD_INT 118
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: ST_TO_ADDR
10553: GO 12808
10555: LD_INT 9
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10711
10563: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 4
10574: PUSH
10575: LD_INT 5
10577: PUSH
10578: LD_INT 6
10580: PUSH
10581: LD_INT 7
10583: PUSH
10584: LD_INT 8
10586: PUSH
10587: LD_INT 11
10589: PUSH
10590: LD_INT 12
10592: PUSH
10593: LD_INT 15
10595: PUSH
10596: LD_INT 16
10598: PUSH
10599: LD_INT 20
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 23
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 26
10616: PUSH
10617: LD_INT 28
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 31
10625: PUSH
10626: LD_INT 32
10628: PUSH
10629: LD_INT 36
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 101
10657: PUSH
10658: LD_INT 102
10660: PUSH
10661: LD_INT 103
10663: PUSH
10664: LD_INT 105
10666: PUSH
10667: LD_INT 106
10669: PUSH
10670: LD_INT 108
10672: PUSH
10673: LD_INT 109
10675: PUSH
10676: LD_INT 112
10678: PUSH
10679: LD_INT 114
10681: PUSH
10682: LD_INT 116
10684: PUSH
10685: LD_INT 117
10687: PUSH
10688: LD_INT 118
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: ST_TO_ADDR
10709: GO 12808
10711: LD_INT 10
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10915
10719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10720: LD_ADDR_VAR 0 2
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 4
10730: PUSH
10731: LD_INT 5
10733: PUSH
10734: LD_INT 6
10736: PUSH
10737: LD_INT 7
10739: PUSH
10740: LD_INT 8
10742: PUSH
10743: LD_INT 9
10745: PUSH
10746: LD_INT 10
10748: PUSH
10749: LD_INT 11
10751: PUSH
10752: LD_INT 12
10754: PUSH
10755: LD_INT 13
10757: PUSH
10758: LD_INT 14
10760: PUSH
10761: LD_INT 15
10763: PUSH
10764: LD_INT 16
10766: PUSH
10767: LD_INT 17
10769: PUSH
10770: LD_INT 18
10772: PUSH
10773: LD_INT 19
10775: PUSH
10776: LD_INT 20
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 22
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 24
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 26
10796: PUSH
10797: LD_INT 28
10799: PUSH
10800: LD_INT 30
10802: PUSH
10803: LD_INT 31
10805: PUSH
10806: LD_INT 32
10808: PUSH
10809: LD_INT 36
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 101
10845: PUSH
10846: LD_INT 102
10848: PUSH
10849: LD_INT 103
10851: PUSH
10852: LD_INT 104
10854: PUSH
10855: LD_INT 105
10857: PUSH
10858: LD_INT 106
10860: PUSH
10861: LD_INT 107
10863: PUSH
10864: LD_INT 108
10866: PUSH
10867: LD_INT 109
10869: PUSH
10870: LD_INT 110
10872: PUSH
10873: LD_INT 111
10875: PUSH
10876: LD_INT 112
10878: PUSH
10879: LD_INT 114
10881: PUSH
10882: LD_INT 116
10884: PUSH
10885: LD_INT 117
10887: PUSH
10888: LD_INT 118
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: ST_TO_ADDR
10913: GO 12808
10915: LD_INT 11
10917: DOUBLE
10918: EQUAL
10919: IFTRUE 10923
10921: GO 11127
10923: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10924: LD_ADDR_VAR 0 2
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: LD_INT 3
10934: PUSH
10935: LD_INT 4
10937: PUSH
10938: LD_INT 5
10940: PUSH
10941: LD_INT 6
10943: PUSH
10944: LD_INT 7
10946: PUSH
10947: LD_INT 8
10949: PUSH
10950: LD_INT 9
10952: PUSH
10953: LD_INT 10
10955: PUSH
10956: LD_INT 11
10958: PUSH
10959: LD_INT 12
10961: PUSH
10962: LD_INT 13
10964: PUSH
10965: LD_INT 14
10967: PUSH
10968: LD_INT 15
10970: PUSH
10971: LD_INT 16
10973: PUSH
10974: LD_INT 17
10976: PUSH
10977: LD_INT 18
10979: PUSH
10980: LD_INT 19
10982: PUSH
10983: LD_INT 20
10985: PUSH
10986: LD_INT 21
10988: PUSH
10989: LD_INT 22
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: LD_INT 24
10997: PUSH
10998: LD_INT 25
11000: PUSH
11001: LD_INT 26
11003: PUSH
11004: LD_INT 28
11006: PUSH
11007: LD_INT 30
11009: PUSH
11010: LD_INT 31
11012: PUSH
11013: LD_INT 32
11015: PUSH
11016: LD_INT 34
11018: PUSH
11019: LD_INT 36
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 101
11057: PUSH
11058: LD_INT 102
11060: PUSH
11061: LD_INT 103
11063: PUSH
11064: LD_INT 104
11066: PUSH
11067: LD_INT 105
11069: PUSH
11070: LD_INT 106
11072: PUSH
11073: LD_INT 107
11075: PUSH
11076: LD_INT 108
11078: PUSH
11079: LD_INT 109
11081: PUSH
11082: LD_INT 110
11084: PUSH
11085: LD_INT 111
11087: PUSH
11088: LD_INT 112
11090: PUSH
11091: LD_INT 114
11093: PUSH
11094: LD_INT 116
11096: PUSH
11097: LD_INT 117
11099: PUSH
11100: LD_INT 118
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: ST_TO_ADDR
11125: GO 12808
11127: LD_INT 12
11129: DOUBLE
11130: EQUAL
11131: IFTRUE 11135
11133: GO 11355
11135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: LD_INT 1
11143: PUSH
11144: LD_INT 2
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: LD_INT 5
11155: PUSH
11156: LD_INT 6
11158: PUSH
11159: LD_INT 7
11161: PUSH
11162: LD_INT 8
11164: PUSH
11165: LD_INT 9
11167: PUSH
11168: LD_INT 10
11170: PUSH
11171: LD_INT 11
11173: PUSH
11174: LD_INT 12
11176: PUSH
11177: LD_INT 13
11179: PUSH
11180: LD_INT 14
11182: PUSH
11183: LD_INT 15
11185: PUSH
11186: LD_INT 16
11188: PUSH
11189: LD_INT 17
11191: PUSH
11192: LD_INT 18
11194: PUSH
11195: LD_INT 19
11197: PUSH
11198: LD_INT 20
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 23
11209: PUSH
11210: LD_INT 24
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 26
11218: PUSH
11219: LD_INT 27
11221: PUSH
11222: LD_INT 28
11224: PUSH
11225: LD_INT 30
11227: PUSH
11228: LD_INT 31
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 33
11236: PUSH
11237: LD_INT 34
11239: PUSH
11240: LD_INT 36
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 101
11281: PUSH
11282: LD_INT 102
11284: PUSH
11285: LD_INT 103
11287: PUSH
11288: LD_INT 104
11290: PUSH
11291: LD_INT 105
11293: PUSH
11294: LD_INT 106
11296: PUSH
11297: LD_INT 107
11299: PUSH
11300: LD_INT 108
11302: PUSH
11303: LD_INT 109
11305: PUSH
11306: LD_INT 110
11308: PUSH
11309: LD_INT 111
11311: PUSH
11312: LD_INT 112
11314: PUSH
11315: LD_INT 113
11317: PUSH
11318: LD_INT 114
11320: PUSH
11321: LD_INT 116
11323: PUSH
11324: LD_INT 117
11326: PUSH
11327: LD_INT 118
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: ST_TO_ADDR
11353: GO 12808
11355: LD_INT 13
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11571
11363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 8
11386: PUSH
11387: LD_INT 9
11389: PUSH
11390: LD_INT 10
11392: PUSH
11393: LD_INT 11
11395: PUSH
11396: LD_INT 12
11398: PUSH
11399: LD_INT 14
11401: PUSH
11402: LD_INT 15
11404: PUSH
11405: LD_INT 16
11407: PUSH
11408: LD_INT 17
11410: PUSH
11411: LD_INT 18
11413: PUSH
11414: LD_INT 19
11416: PUSH
11417: LD_INT 20
11419: PUSH
11420: LD_INT 21
11422: PUSH
11423: LD_INT 22
11425: PUSH
11426: LD_INT 23
11428: PUSH
11429: LD_INT 24
11431: PUSH
11432: LD_INT 25
11434: PUSH
11435: LD_INT 26
11437: PUSH
11438: LD_INT 27
11440: PUSH
11441: LD_INT 28
11443: PUSH
11444: LD_INT 30
11446: PUSH
11447: LD_INT 31
11449: PUSH
11450: LD_INT 32
11452: PUSH
11453: LD_INT 33
11455: PUSH
11456: LD_INT 34
11458: PUSH
11459: LD_INT 36
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 101
11497: PUSH
11498: LD_INT 102
11500: PUSH
11501: LD_INT 103
11503: PUSH
11504: LD_INT 104
11506: PUSH
11507: LD_INT 105
11509: PUSH
11510: LD_INT 106
11512: PUSH
11513: LD_INT 107
11515: PUSH
11516: LD_INT 108
11518: PUSH
11519: LD_INT 109
11521: PUSH
11522: LD_INT 110
11524: PUSH
11525: LD_INT 111
11527: PUSH
11528: LD_INT 112
11530: PUSH
11531: LD_INT 113
11533: PUSH
11534: LD_INT 114
11536: PUSH
11537: LD_INT 116
11539: PUSH
11540: LD_INT 117
11542: PUSH
11543: LD_INT 118
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: ST_TO_ADDR
11569: GO 12808
11571: LD_INT 14
11573: DOUBLE
11574: EQUAL
11575: IFTRUE 11579
11577: GO 11803
11579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11580: LD_ADDR_VAR 0 2
11584: PUSH
11585: LD_INT 1
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 4
11596: PUSH
11597: LD_INT 5
11599: PUSH
11600: LD_INT 6
11602: PUSH
11603: LD_INT 7
11605: PUSH
11606: LD_INT 8
11608: PUSH
11609: LD_INT 9
11611: PUSH
11612: LD_INT 10
11614: PUSH
11615: LD_INT 11
11617: PUSH
11618: LD_INT 12
11620: PUSH
11621: LD_INT 13
11623: PUSH
11624: LD_INT 14
11626: PUSH
11627: LD_INT 15
11629: PUSH
11630: LD_INT 16
11632: PUSH
11633: LD_INT 17
11635: PUSH
11636: LD_INT 18
11638: PUSH
11639: LD_INT 19
11641: PUSH
11642: LD_INT 20
11644: PUSH
11645: LD_INT 21
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 23
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 25
11659: PUSH
11660: LD_INT 26
11662: PUSH
11663: LD_INT 27
11665: PUSH
11666: LD_INT 28
11668: PUSH
11669: LD_INT 29
11671: PUSH
11672: LD_INT 30
11674: PUSH
11675: LD_INT 31
11677: PUSH
11678: LD_INT 32
11680: PUSH
11681: LD_INT 33
11683: PUSH
11684: LD_INT 34
11686: PUSH
11687: LD_INT 36
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 101
11729: PUSH
11730: LD_INT 102
11732: PUSH
11733: LD_INT 103
11735: PUSH
11736: LD_INT 104
11738: PUSH
11739: LD_INT 105
11741: PUSH
11742: LD_INT 106
11744: PUSH
11745: LD_INT 107
11747: PUSH
11748: LD_INT 108
11750: PUSH
11751: LD_INT 109
11753: PUSH
11754: LD_INT 110
11756: PUSH
11757: LD_INT 111
11759: PUSH
11760: LD_INT 112
11762: PUSH
11763: LD_INT 113
11765: PUSH
11766: LD_INT 114
11768: PUSH
11769: LD_INT 116
11771: PUSH
11772: LD_INT 117
11774: PUSH
11775: LD_INT 118
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
11801: GO 12808
11803: LD_INT 15
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 12035
11811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: LD_INT 3
11825: PUSH
11826: LD_INT 4
11828: PUSH
11829: LD_INT 5
11831: PUSH
11832: LD_INT 6
11834: PUSH
11835: LD_INT 7
11837: PUSH
11838: LD_INT 8
11840: PUSH
11841: LD_INT 9
11843: PUSH
11844: LD_INT 10
11846: PUSH
11847: LD_INT 11
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: LD_INT 13
11855: PUSH
11856: LD_INT 14
11858: PUSH
11859: LD_INT 15
11861: PUSH
11862: LD_INT 16
11864: PUSH
11865: LD_INT 17
11867: PUSH
11868: LD_INT 18
11870: PUSH
11871: LD_INT 19
11873: PUSH
11874: LD_INT 20
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 24
11888: PUSH
11889: LD_INT 25
11891: PUSH
11892: LD_INT 26
11894: PUSH
11895: LD_INT 27
11897: PUSH
11898: LD_INT 28
11900: PUSH
11901: LD_INT 29
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 31
11909: PUSH
11910: LD_INT 32
11912: PUSH
11913: LD_INT 33
11915: PUSH
11916: LD_INT 34
11918: PUSH
11919: LD_INT 36
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 101
11961: PUSH
11962: LD_INT 102
11964: PUSH
11965: LD_INT 103
11967: PUSH
11968: LD_INT 104
11970: PUSH
11971: LD_INT 105
11973: PUSH
11974: LD_INT 106
11976: PUSH
11977: LD_INT 107
11979: PUSH
11980: LD_INT 108
11982: PUSH
11983: LD_INT 109
11985: PUSH
11986: LD_INT 110
11988: PUSH
11989: LD_INT 111
11991: PUSH
11992: LD_INT 112
11994: PUSH
11995: LD_INT 113
11997: PUSH
11998: LD_INT 114
12000: PUSH
12001: LD_INT 116
12003: PUSH
12004: LD_INT 117
12006: PUSH
12007: LD_INT 118
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: ST_TO_ADDR
12033: GO 12808
12035: LD_INT 16
12037: DOUBLE
12038: EQUAL
12039: IFTRUE 12043
12041: GO 12179
12043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12044: LD_ADDR_VAR 0 2
12048: PUSH
12049: LD_INT 2
12051: PUSH
12052: LD_INT 4
12054: PUSH
12055: LD_INT 5
12057: PUSH
12058: LD_INT 7
12060: PUSH
12061: LD_INT 11
12063: PUSH
12064: LD_INT 12
12066: PUSH
12067: LD_INT 15
12069: PUSH
12070: LD_INT 16
12072: PUSH
12073: LD_INT 20
12075: PUSH
12076: LD_INT 21
12078: PUSH
12079: LD_INT 22
12081: PUSH
12082: LD_INT 23
12084: PUSH
12085: LD_INT 25
12087: PUSH
12088: LD_INT 26
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 31
12096: PUSH
12097: LD_INT 32
12099: PUSH
12100: LD_INT 33
12102: PUSH
12103: LD_INT 34
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 101
12129: PUSH
12130: LD_INT 102
12132: PUSH
12133: LD_INT 103
12135: PUSH
12136: LD_INT 106
12138: PUSH
12139: LD_INT 108
12141: PUSH
12142: LD_INT 112
12144: PUSH
12145: LD_INT 113
12147: PUSH
12148: LD_INT 114
12150: PUSH
12151: LD_INT 116
12153: PUSH
12154: LD_INT 117
12156: PUSH
12157: LD_INT 118
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: ST_TO_ADDR
12177: GO 12808
12179: LD_INT 17
12181: DOUBLE
12182: EQUAL
12183: IFTRUE 12187
12185: GO 12411
12187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_INT 1
12195: PUSH
12196: LD_INT 2
12198: PUSH
12199: LD_INT 3
12201: PUSH
12202: LD_INT 4
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: LD_INT 6
12210: PUSH
12211: LD_INT 7
12213: PUSH
12214: LD_INT 8
12216: PUSH
12217: LD_INT 9
12219: PUSH
12220: LD_INT 10
12222: PUSH
12223: LD_INT 11
12225: PUSH
12226: LD_INT 12
12228: PUSH
12229: LD_INT 13
12231: PUSH
12232: LD_INT 14
12234: PUSH
12235: LD_INT 15
12237: PUSH
12238: LD_INT 16
12240: PUSH
12241: LD_INT 17
12243: PUSH
12244: LD_INT 18
12246: PUSH
12247: LD_INT 19
12249: PUSH
12250: LD_INT 20
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_INT 23
12261: PUSH
12262: LD_INT 24
12264: PUSH
12265: LD_INT 25
12267: PUSH
12268: LD_INT 26
12270: PUSH
12271: LD_INT 27
12273: PUSH
12274: LD_INT 28
12276: PUSH
12277: LD_INT 29
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 31
12285: PUSH
12286: LD_INT 32
12288: PUSH
12289: LD_INT 33
12291: PUSH
12292: LD_INT 34
12294: PUSH
12295: LD_INT 36
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 101
12337: PUSH
12338: LD_INT 102
12340: PUSH
12341: LD_INT 103
12343: PUSH
12344: LD_INT 104
12346: PUSH
12347: LD_INT 105
12349: PUSH
12350: LD_INT 106
12352: PUSH
12353: LD_INT 107
12355: PUSH
12356: LD_INT 108
12358: PUSH
12359: LD_INT 109
12361: PUSH
12362: LD_INT 110
12364: PUSH
12365: LD_INT 111
12367: PUSH
12368: LD_INT 112
12370: PUSH
12371: LD_INT 113
12373: PUSH
12374: LD_INT 114
12376: PUSH
12377: LD_INT 116
12379: PUSH
12380: LD_INT 117
12382: PUSH
12383: LD_INT 118
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: ST_TO_ADDR
12409: GO 12808
12411: LD_INT 18
12413: DOUBLE
12414: EQUAL
12415: IFTRUE 12419
12417: GO 12567
12419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 4
12430: PUSH
12431: LD_INT 5
12433: PUSH
12434: LD_INT 7
12436: PUSH
12437: LD_INT 11
12439: PUSH
12440: LD_INT 12
12442: PUSH
12443: LD_INT 15
12445: PUSH
12446: LD_INT 16
12448: PUSH
12449: LD_INT 20
12451: PUSH
12452: LD_INT 21
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 23
12460: PUSH
12461: LD_INT 25
12463: PUSH
12464: LD_INT 26
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 31
12472: PUSH
12473: LD_INT 32
12475: PUSH
12476: LD_INT 33
12478: PUSH
12479: LD_INT 34
12481: PUSH
12482: LD_INT 35
12484: PUSH
12485: LD_INT 36
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 101
12513: PUSH
12514: LD_INT 102
12516: PUSH
12517: LD_INT 103
12519: PUSH
12520: LD_INT 106
12522: PUSH
12523: LD_INT 108
12525: PUSH
12526: LD_INT 112
12528: PUSH
12529: LD_INT 113
12531: PUSH
12532: LD_INT 114
12534: PUSH
12535: LD_INT 115
12537: PUSH
12538: LD_INT 116
12540: PUSH
12541: LD_INT 117
12543: PUSH
12544: LD_INT 118
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 12808
12567: LD_INT 19
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12807
12575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: LD_INT 1
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: LD_INT 4
12592: PUSH
12593: LD_INT 5
12595: PUSH
12596: LD_INT 6
12598: PUSH
12599: LD_INT 7
12601: PUSH
12602: LD_INT 8
12604: PUSH
12605: LD_INT 9
12607: PUSH
12608: LD_INT 10
12610: PUSH
12611: LD_INT 11
12613: PUSH
12614: LD_INT 12
12616: PUSH
12617: LD_INT 13
12619: PUSH
12620: LD_INT 14
12622: PUSH
12623: LD_INT 15
12625: PUSH
12626: LD_INT 16
12628: PUSH
12629: LD_INT 17
12631: PUSH
12632: LD_INT 18
12634: PUSH
12635: LD_INT 19
12637: PUSH
12638: LD_INT 20
12640: PUSH
12641: LD_INT 21
12643: PUSH
12644: LD_INT 22
12646: PUSH
12647: LD_INT 23
12649: PUSH
12650: LD_INT 24
12652: PUSH
12653: LD_INT 25
12655: PUSH
12656: LD_INT 26
12658: PUSH
12659: LD_INT 27
12661: PUSH
12662: LD_INT 28
12664: PUSH
12665: LD_INT 29
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: LD_INT 32
12676: PUSH
12677: LD_INT 33
12679: PUSH
12680: LD_INT 34
12682: PUSH
12683: LD_INT 35
12685: PUSH
12686: LD_INT 36
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 101
12729: PUSH
12730: LD_INT 102
12732: PUSH
12733: LD_INT 103
12735: PUSH
12736: LD_INT 104
12738: PUSH
12739: LD_INT 105
12741: PUSH
12742: LD_INT 106
12744: PUSH
12745: LD_INT 107
12747: PUSH
12748: LD_INT 108
12750: PUSH
12751: LD_INT 109
12753: PUSH
12754: LD_INT 110
12756: PUSH
12757: LD_INT 111
12759: PUSH
12760: LD_INT 112
12762: PUSH
12763: LD_INT 113
12765: PUSH
12766: LD_INT 114
12768: PUSH
12769: LD_INT 115
12771: PUSH
12772: LD_INT 116
12774: PUSH
12775: LD_INT 117
12777: PUSH
12778: LD_INT 118
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: ST_TO_ADDR
12805: GO 12808
12807: POP
// end else
12808: GO 13039
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12810: LD_ADDR_VAR 0 2
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: LD_INT 3
12823: PUSH
12824: LD_INT 4
12826: PUSH
12827: LD_INT 5
12829: PUSH
12830: LD_INT 6
12832: PUSH
12833: LD_INT 7
12835: PUSH
12836: LD_INT 8
12838: PUSH
12839: LD_INT 9
12841: PUSH
12842: LD_INT 10
12844: PUSH
12845: LD_INT 11
12847: PUSH
12848: LD_INT 12
12850: PUSH
12851: LD_INT 13
12853: PUSH
12854: LD_INT 14
12856: PUSH
12857: LD_INT 15
12859: PUSH
12860: LD_INT 16
12862: PUSH
12863: LD_INT 17
12865: PUSH
12866: LD_INT 18
12868: PUSH
12869: LD_INT 19
12871: PUSH
12872: LD_INT 20
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 22
12880: PUSH
12881: LD_INT 23
12883: PUSH
12884: LD_INT 24
12886: PUSH
12887: LD_INT 25
12889: PUSH
12890: LD_INT 26
12892: PUSH
12893: LD_INT 27
12895: PUSH
12896: LD_INT 28
12898: PUSH
12899: LD_INT 29
12901: PUSH
12902: LD_INT 30
12904: PUSH
12905: LD_INT 31
12907: PUSH
12908: LD_INT 32
12910: PUSH
12911: LD_INT 33
12913: PUSH
12914: LD_INT 34
12916: PUSH
12917: LD_INT 35
12919: PUSH
12920: LD_INT 36
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 101
12963: PUSH
12964: LD_INT 102
12966: PUSH
12967: LD_INT 103
12969: PUSH
12970: LD_INT 104
12972: PUSH
12973: LD_INT 105
12975: PUSH
12976: LD_INT 106
12978: PUSH
12979: LD_INT 107
12981: PUSH
12982: LD_INT 108
12984: PUSH
12985: LD_INT 109
12987: PUSH
12988: LD_INT 110
12990: PUSH
12991: LD_INT 111
12993: PUSH
12994: LD_INT 112
12996: PUSH
12997: LD_INT 113
12999: PUSH
13000: LD_INT 114
13002: PUSH
13003: LD_INT 115
13005: PUSH
13006: LD_INT 116
13008: PUSH
13009: LD_INT 117
13011: PUSH
13012: LD_INT 118
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
// if result then
13039: LD_VAR 0 2
13043: IFFALSE 13829
// begin normal :=  ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_STRING 
13052: ST_TO_ADDR
// hardcore :=  ;
13053: LD_ADDR_VAR 0 6
13057: PUSH
13058: LD_STRING 
13060: ST_TO_ADDR
// active :=  ;
13061: LD_ADDR_VAR 0 7
13065: PUSH
13066: LD_STRING 
13068: ST_TO_ADDR
// for i = 1 to normalCounter do
13069: LD_ADDR_VAR 0 8
13073: PUSH
13074: DOUBLE
13075: LD_INT 1
13077: DEC
13078: ST_TO_ADDR
13079: LD_EXP 21
13083: PUSH
13084: FOR_TO
13085: IFFALSE 13186
// begin tmp := 0 ;
13087: LD_ADDR_VAR 0 3
13091: PUSH
13092: LD_STRING 0
13094: ST_TO_ADDR
// if result [ 1 ] then
13095: LD_VAR 0 2
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: IFFALSE 13168
// if result [ 1 ] [ 1 ] = i then
13105: LD_VAR 0 2
13109: PUSH
13110: LD_INT 1
13112: ARRAY
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PUSH
13118: LD_VAR 0 8
13122: EQUAL
13123: IFFALSE 13168
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: LD_VAR 0 2
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 3
13154: PPUSH
13155: CALL_OW 1
13159: ST_TO_ADDR
// tmp := 1 ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_STRING 1
13167: ST_TO_ADDR
// end ; normal := normal & tmp ;
13168: LD_ADDR_VAR 0 5
13172: PUSH
13173: LD_VAR 0 5
13177: PUSH
13178: LD_VAR 0 3
13182: STR
13183: ST_TO_ADDR
// end ;
13184: GO 13084
13186: POP
13187: POP
// for i = 1 to hardcoreCounter do
13188: LD_ADDR_VAR 0 8
13192: PUSH
13193: DOUBLE
13194: LD_INT 1
13196: DEC
13197: ST_TO_ADDR
13198: LD_EXP 22
13202: PUSH
13203: FOR_TO
13204: IFFALSE 13309
// begin tmp := 0 ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_STRING 0
13213: ST_TO_ADDR
// if result [ 2 ] then
13214: LD_VAR 0 2
13218: PUSH
13219: LD_INT 2
13221: ARRAY
13222: IFFALSE 13291
// if result [ 2 ] [ 1 ] = 100 + i then
13224: LD_VAR 0 2
13228: PUSH
13229: LD_INT 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PUSH
13237: LD_INT 100
13239: PUSH
13240: LD_VAR 0 8
13244: PLUS
13245: EQUAL
13246: IFFALSE 13291
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_VAR 0 2
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: LD_VAR 0 2
13265: PUSH
13266: LD_INT 2
13268: ARRAY
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 3
13277: PPUSH
13278: CALL_OW 1
13282: ST_TO_ADDR
// tmp := 1 ;
13283: LD_ADDR_VAR 0 3
13287: PUSH
13288: LD_STRING 1
13290: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13291: LD_ADDR_VAR 0 6
13295: PUSH
13296: LD_VAR 0 6
13300: PUSH
13301: LD_VAR 0 3
13305: STR
13306: ST_TO_ADDR
// end ;
13307: GO 13203
13309: POP
13310: POP
// if isGameLoad then
13311: LD_VAR 0 1
13315: IFFALSE 13790
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13317: LD_ADDR_VAR 0 4
13321: PUSH
13322: LD_EXP 25
13326: PUSH
13327: LD_EXP 24
13331: PUSH
13332: LD_EXP 26
13336: PUSH
13337: LD_EXP 23
13341: PUSH
13342: LD_EXP 27
13346: PUSH
13347: LD_EXP 28
13351: PUSH
13352: LD_EXP 29
13356: PUSH
13357: LD_EXP 30
13361: PUSH
13362: LD_EXP 31
13366: PUSH
13367: LD_EXP 32
13371: PUSH
13372: LD_EXP 33
13376: PUSH
13377: LD_EXP 34
13381: PUSH
13382: LD_EXP 35
13386: PUSH
13387: LD_EXP 36
13391: PUSH
13392: LD_EXP 44
13396: PUSH
13397: LD_EXP 45
13401: PUSH
13402: LD_EXP 46
13406: PUSH
13407: LD_EXP 47
13411: PUSH
13412: LD_EXP 49
13416: PUSH
13417: LD_EXP 50
13421: PUSH
13422: LD_EXP 51
13426: PUSH
13427: LD_EXP 54
13431: PUSH
13432: LD_EXP 56
13436: PUSH
13437: LD_EXP 57
13441: PUSH
13442: LD_EXP 58
13446: PUSH
13447: LD_EXP 60
13451: PUSH
13452: LD_EXP 61
13456: PUSH
13457: LD_EXP 64
13461: PUSH
13462: LD_EXP 65
13466: PUSH
13467: LD_EXP 66
13471: PUSH
13472: LD_EXP 67
13476: PUSH
13477: LD_EXP 68
13481: PUSH
13482: LD_EXP 69
13486: PUSH
13487: LD_EXP 70
13491: PUSH
13492: LD_EXP 71
13496: PUSH
13497: LD_EXP 72
13501: PUSH
13502: LD_EXP 37
13506: PUSH
13507: LD_EXP 38
13511: PUSH
13512: LD_EXP 41
13516: PUSH
13517: LD_EXP 42
13521: PUSH
13522: LD_EXP 43
13526: PUSH
13527: LD_EXP 39
13531: PUSH
13532: LD_EXP 40
13536: PUSH
13537: LD_EXP 48
13541: PUSH
13542: LD_EXP 52
13546: PUSH
13547: LD_EXP 53
13551: PUSH
13552: LD_EXP 55
13556: PUSH
13557: LD_EXP 59
13561: PUSH
13562: LD_EXP 62
13566: PUSH
13567: LD_EXP 63
13571: PUSH
13572: LD_EXP 73
13576: PUSH
13577: LD_EXP 74
13581: PUSH
13582: LD_EXP 75
13586: PUSH
13587: LD_EXP 76
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: ST_TO_ADDR
// tmp :=  ;
13648: LD_ADDR_VAR 0 3
13652: PUSH
13653: LD_STRING 
13655: ST_TO_ADDR
// for i = 1 to normalCounter do
13656: LD_ADDR_VAR 0 8
13660: PUSH
13661: DOUBLE
13662: LD_INT 1
13664: DEC
13665: ST_TO_ADDR
13666: LD_EXP 21
13670: PUSH
13671: FOR_TO
13672: IFFALSE 13708
// begin if flags [ i ] then
13674: LD_VAR 0 4
13678: PUSH
13679: LD_VAR 0 8
13683: ARRAY
13684: IFFALSE 13706
// tmp := tmp & i & ; ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_VAR 0 3
13695: PUSH
13696: LD_VAR 0 8
13700: STR
13701: PUSH
13702: LD_STRING ;
13704: STR
13705: ST_TO_ADDR
// end ;
13706: GO 13671
13708: POP
13709: POP
// for i = 1 to hardcoreCounter do
13710: LD_ADDR_VAR 0 8
13714: PUSH
13715: DOUBLE
13716: LD_INT 1
13718: DEC
13719: ST_TO_ADDR
13720: LD_EXP 22
13724: PUSH
13725: FOR_TO
13726: IFFALSE 13772
// begin if flags [ normalCounter + i ] then
13728: LD_VAR 0 4
13732: PUSH
13733: LD_EXP 21
13737: PUSH
13738: LD_VAR 0 8
13742: PLUS
13743: ARRAY
13744: IFFALSE 13770
// tmp := tmp & ( 100 + i ) & ; ;
13746: LD_ADDR_VAR 0 3
13750: PUSH
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 100
13758: PUSH
13759: LD_VAR 0 8
13763: PLUS
13764: STR
13765: PUSH
13766: LD_STRING ;
13768: STR
13769: ST_TO_ADDR
// end ;
13770: GO 13725
13772: POP
13773: POP
// if tmp then
13774: LD_VAR 0 3
13778: IFFALSE 13790
// active := tmp ;
13780: LD_ADDR_VAR 0 7
13784: PUSH
13785: LD_VAR 0 3
13789: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13790: LD_STRING getStreamItemsFromMission("
13792: PUSH
13793: LD_VAR 0 5
13797: STR
13798: PUSH
13799: LD_STRING ","
13801: STR
13802: PUSH
13803: LD_VAR 0 6
13807: STR
13808: PUSH
13809: LD_STRING ","
13811: STR
13812: PUSH
13813: LD_VAR 0 7
13817: STR
13818: PUSH
13819: LD_STRING ")
13821: STR
13822: PPUSH
13823: CALL_OW 559
// end else
13827: GO 13836
// ToLua ( getStreamItemsFromMission("","","") ) ;
13829: LD_STRING getStreamItemsFromMission("","","")
13831: PPUSH
13832: CALL_OW 559
// end ;
13836: LD_VAR 0 2
13840: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13841: LD_EXP 20
13845: IFFALSE 13853
13847: PUSH
13848: LD_EXP 25
13852: AND
13853: IFFALSE 13977
13855: GO 13857
13857: DISABLE
13858: LD_INT 0
13860: PPUSH
13861: PPUSH
// begin enable ;
13862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_OWVAR 2
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: LD_INT 34
13885: PUSH
13886: LD_INT 7
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 34
13895: PUSH
13896: LD_INT 45
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 34
13905: PUSH
13906: LD_INT 28
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 34
13915: PUSH
13916: LD_INT 47
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not tmp then
13939: LD_VAR 0 2
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 13977
// for i in tmp do
13948: LD_ADDR_VAR 0 1
13952: PUSH
13953: LD_VAR 0 2
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13975
// begin SetLives ( i , 0 ) ;
13961: LD_VAR 0 1
13965: PPUSH
13966: LD_INT 0
13968: PPUSH
13969: CALL_OW 234
// end ;
13973: GO 13958
13975: POP
13976: POP
// end ;
13977: PPOPN 2
13979: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13980: LD_EXP 20
13984: IFFALSE 13992
13986: PUSH
13987: LD_EXP 26
13991: AND
13992: IFFALSE 14076
13994: GO 13996
13996: DISABLE
13997: LD_INT 0
13999: PPUSH
14000: PPUSH
// begin enable ;
14001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14002: LD_ADDR_VAR 0 2
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_OWVAR 2
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 32
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PPUSH
14033: CALL_OW 69
14037: ST_TO_ADDR
// if not tmp then
14038: LD_VAR 0 2
14042: NOT
14043: IFFALSE 14047
// exit ;
14045: GO 14076
// for i in tmp do
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: LD_VAR 0 2
14056: PUSH
14057: FOR_IN
14058: IFFALSE 14074
// begin SetLives ( i , 0 ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_INT 0
14067: PPUSH
14068: CALL_OW 234
// end ;
14072: GO 14057
14074: POP
14075: POP
// end ;
14076: PPOPN 2
14078: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14079: LD_EXP 20
14083: IFFALSE 14091
14085: PUSH
14086: LD_EXP 23
14090: AND
14091: IFFALSE 14184
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
// begin enable ;
14099: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14100: LD_ADDR_VAR 0 1
14104: PUSH
14105: LD_INT 22
14107: PUSH
14108: LD_OWVAR 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: LD_INT 25
14122: PUSH
14123: LD_INT 5
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 25
14132: PUSH
14133: LD_INT 9
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 25
14142: PUSH
14143: LD_INT 8
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14182
// begin SetClass ( i , 1 ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 336
// end ;
14180: GO 14165
14182: POP
14183: POP
// end ;
14184: PPOPN 1
14186: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14187: LD_EXP 20
14191: IFFALSE 14199
14193: PUSH
14194: LD_EXP 24
14198: AND
14199: IFFALSE 14211
14201: PUSH
14202: LD_OWVAR 65
14206: PUSH
14207: LD_INT 7
14209: LESS
14210: AND
14211: IFFALSE 14225
14213: GO 14215
14215: DISABLE
// begin enable ;
14216: ENABLE
// game_speed := 7 ;
14217: LD_ADDR_OWVAR 65
14221: PUSH
14222: LD_INT 7
14224: ST_TO_ADDR
// end ;
14225: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14226: LD_EXP 20
14230: IFFALSE 14238
14232: PUSH
14233: LD_EXP 27
14237: AND
14238: IFFALSE 14440
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
14247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14248: LD_ADDR_VAR 0 3
14252: PUSH
14253: LD_INT 81
14255: PUSH
14256: LD_OWVAR 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: ST_TO_ADDR
// if not tmp then
14284: LD_VAR 0 3
14288: NOT
14289: IFFALSE 14293
// exit ;
14291: GO 14440
// if tmp > 5 then
14293: LD_VAR 0 3
14297: PUSH
14298: LD_INT 5
14300: GREATER
14301: IFFALSE 14313
// k := 5 else
14303: LD_ADDR_VAR 0 2
14307: PUSH
14308: LD_INT 5
14310: ST_TO_ADDR
14311: GO 14323
// k := tmp ;
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: LD_VAR 0 3
14322: ST_TO_ADDR
// for i := 1 to k do
14323: LD_ADDR_VAR 0 1
14327: PUSH
14328: DOUBLE
14329: LD_INT 1
14331: DEC
14332: ST_TO_ADDR
14333: LD_VAR 0 2
14337: PUSH
14338: FOR_TO
14339: IFFALSE 14438
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14341: LD_VAR 0 3
14345: PUSH
14346: LD_VAR 0 1
14350: ARRAY
14351: PPUSH
14352: LD_VAR 0 1
14356: PUSH
14357: LD_INT 4
14359: MOD
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: CALL_OW 259
14369: PUSH
14370: LD_INT 10
14372: LESS
14373: IFFALSE 14436
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14375: LD_VAR 0 3
14379: PUSH
14380: LD_VAR 0 1
14384: ARRAY
14385: PPUSH
14386: LD_VAR 0 1
14390: PUSH
14391: LD_INT 4
14393: MOD
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: PPUSH
14399: LD_VAR 0 3
14403: PUSH
14404: LD_VAR 0 1
14408: ARRAY
14409: PPUSH
14410: LD_VAR 0 1
14414: PUSH
14415: LD_INT 4
14417: MOD
14418: PUSH
14419: LD_INT 1
14421: PLUS
14422: PPUSH
14423: CALL_OW 259
14427: PUSH
14428: LD_INT 1
14430: PLUS
14431: PPUSH
14432: CALL_OW 237
14436: GO 14338
14438: POP
14439: POP
// end ;
14440: PPOPN 3
14442: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14443: LD_EXP 20
14447: IFFALSE 14455
14449: PUSH
14450: LD_EXP 28
14454: AND
14455: IFFALSE 14475
14457: GO 14459
14459: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14460: LD_INT 4
14462: PPUSH
14463: LD_OWVAR 2
14467: PPUSH
14468: LD_INT 0
14470: PPUSH
14471: CALL_OW 324
14475: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14476: LD_EXP 20
14480: IFFALSE 14488
14482: PUSH
14483: LD_EXP 57
14487: AND
14488: IFFALSE 14508
14490: GO 14492
14492: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14493: LD_INT 19
14495: PPUSH
14496: LD_OWVAR 2
14500: PPUSH
14501: LD_INT 0
14503: PPUSH
14504: CALL_OW 324
14508: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14509: LD_EXP 20
14513: IFFALSE 14521
14515: PUSH
14516: LD_EXP 29
14520: AND
14521: IFFALSE 14623
14523: GO 14525
14525: DISABLE
14526: LD_INT 0
14528: PPUSH
14529: PPUSH
// begin enable ;
14530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14531: LD_ADDR_VAR 0 2
14535: PUSH
14536: LD_INT 22
14538: PUSH
14539: LD_OWVAR 2
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: LD_INT 34
14553: PUSH
14554: LD_INT 11
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 34
14563: PUSH
14564: LD_INT 30
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 2
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14623
// for i in tmp do
14594: LD_ADDR_VAR 0 1
14598: PUSH
14599: LD_VAR 0 2
14603: PUSH
14604: FOR_IN
14605: IFFALSE 14621
// begin SetLives ( i , 0 ) ;
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_INT 0
14614: PPUSH
14615: CALL_OW 234
// end ;
14619: GO 14604
14621: POP
14622: POP
// end ;
14623: PPOPN 2
14625: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14626: LD_EXP 20
14630: IFFALSE 14638
14632: PUSH
14633: LD_EXP 30
14637: AND
14638: IFFALSE 14658
14640: GO 14642
14642: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14643: LD_INT 32
14645: PPUSH
14646: LD_OWVAR 2
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 324
14658: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14659: LD_EXP 20
14663: IFFALSE 14671
14665: PUSH
14666: LD_EXP 31
14670: AND
14671: IFFALSE 14854
14673: GO 14675
14675: DISABLE
14676: LD_INT 0
14678: PPUSH
14679: PPUSH
14680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_INT 22
14688: PUSH
14689: LD_OWVAR 2
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 33
14700: PUSH
14701: LD_INT 3
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// if not tmp then
14717: LD_VAR 0 2
14721: NOT
14722: IFFALSE 14726
// exit ;
14724: GO 14854
// side := 0 ;
14726: LD_ADDR_VAR 0 3
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// for i := 1 to 8 do
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: DOUBLE
14740: LD_INT 1
14742: DEC
14743: ST_TO_ADDR
14744: LD_INT 8
14746: PUSH
14747: FOR_TO
14748: IFFALSE 14798
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14750: LD_OWVAR 2
14754: PUSH
14755: LD_VAR 0 1
14759: NONEQUAL
14760: IFFALSE 14782
14762: PUSH
14763: LD_OWVAR 2
14767: PPUSH
14768: LD_VAR 0 1
14772: PPUSH
14773: CALL_OW 81
14777: PUSH
14778: LD_INT 2
14780: EQUAL
14781: AND
14782: IFFALSE 14796
// begin side := i ;
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_VAR 0 1
14793: ST_TO_ADDR
// break ;
14794: GO 14798
// end ;
14796: GO 14747
14798: POP
14799: POP
// if not side then
14800: LD_VAR 0 3
14804: NOT
14805: IFFALSE 14809
// exit ;
14807: GO 14854
// for i := 1 to tmp do
14809: LD_ADDR_VAR 0 1
14813: PUSH
14814: DOUBLE
14815: LD_INT 1
14817: DEC
14818: ST_TO_ADDR
14819: LD_VAR 0 2
14823: PUSH
14824: FOR_TO
14825: IFFALSE 14852
// if Prob ( 60 ) then
14827: LD_INT 60
14829: PPUSH
14830: CALL_OW 13
14834: IFFALSE 14850
// SetSide ( i , side ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: CALL_OW 235
14850: GO 14824
14852: POP
14853: POP
// end ;
14854: PPOPN 3
14856: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14857: LD_EXP 20
14861: IFFALSE 14869
14863: PUSH
14864: LD_EXP 33
14868: AND
14869: IFFALSE 14988
14871: GO 14873
14873: DISABLE
14874: LD_INT 0
14876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14877: LD_ADDR_VAR 0 1
14881: PUSH
14882: LD_INT 22
14884: PUSH
14885: LD_OWVAR 2
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 21
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 3
14906: PUSH
14907: LD_INT 23
14909: PUSH
14910: LD_INT 0
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 69
14930: PUSH
14931: FOR_IN
14932: IFFALSE 14986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 257
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: LD_INT 2
14949: PUSH
14950: LD_INT 3
14952: PUSH
14953: LD_INT 4
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: IN
14962: IFFALSE 14984
// SetClass ( un , rand ( 1 , 4 ) ) ;
14964: LD_VAR 0 1
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: LD_INT 4
14974: PPUSH
14975: CALL_OW 12
14979: PPUSH
14980: CALL_OW 336
14984: GO 14931
14986: POP
14987: POP
// end ;
14988: PPOPN 1
14990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14991: LD_EXP 20
14995: IFFALSE 15003
14997: PUSH
14998: LD_EXP 32
15002: AND
15003: IFFALSE 15082
15005: GO 15007
15007: DISABLE
15008: LD_INT 0
15010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15011: LD_ADDR_VAR 0 1
15015: PUSH
15016: LD_INT 22
15018: PUSH
15019: LD_OWVAR 2
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 21
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 69
15046: ST_TO_ADDR
// if not tmp then
15047: LD_VAR 0 1
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15056: LD_VAR 0 1
15060: PUSH
15061: LD_INT 1
15063: PPUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL_OW 12
15073: ARRAY
15074: PPUSH
15075: LD_INT 100
15077: PPUSH
15078: CALL_OW 234
// end ;
15082: PPOPN 1
15084: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15085: LD_EXP 20
15089: IFFALSE 15097
15091: PUSH
15092: LD_EXP 34
15096: AND
15097: IFFALSE 15195
15099: GO 15101
15101: DISABLE
15102: LD_INT 0
15104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15105: LD_ADDR_VAR 0 1
15109: PUSH
15110: LD_INT 22
15112: PUSH
15113: LD_OWVAR 2
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 21
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: ST_TO_ADDR
// if not tmp then
15141: LD_VAR 0 1
15145: NOT
15146: IFFALSE 15150
// exit ;
15148: GO 15195
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15150: LD_VAR 0 1
15154: PUSH
15155: LD_INT 1
15157: PPUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 12
15167: ARRAY
15168: PPUSH
15169: LD_INT 1
15171: PPUSH
15172: LD_INT 4
15174: PPUSH
15175: CALL_OW 12
15179: PPUSH
15180: LD_INT 3000
15182: PPUSH
15183: LD_INT 9000
15185: PPUSH
15186: CALL_OW 12
15190: PPUSH
15191: CALL_OW 492
// end ;
15195: PPOPN 1
15197: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15198: LD_EXP 20
15202: IFFALSE 15210
15204: PUSH
15205: LD_EXP 35
15209: AND
15210: IFFALSE 15230
15212: GO 15214
15214: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15215: LD_INT 1
15217: PPUSH
15218: LD_OWVAR 2
15222: PPUSH
15223: LD_INT 0
15225: PPUSH
15226: CALL_OW 324
15230: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15231: LD_EXP 20
15235: IFFALSE 15243
15237: PUSH
15238: LD_EXP 36
15242: AND
15243: IFFALSE 15326
15245: GO 15247
15247: DISABLE
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15252: LD_ADDR_VAR 0 2
15256: PUSH
15257: LD_INT 22
15259: PUSH
15260: LD_OWVAR 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 21
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 69
15287: ST_TO_ADDR
// if not tmp then
15288: LD_VAR 0 2
15292: NOT
15293: IFFALSE 15297
// exit ;
15295: GO 15326
// for i in tmp do
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_VAR 0 2
15306: PUSH
15307: FOR_IN
15308: IFFALSE 15324
// SetBLevel ( i , 10 ) ;
15310: LD_VAR 0 1
15314: PPUSH
15315: LD_INT 10
15317: PPUSH
15318: CALL_OW 241
15322: GO 15307
15324: POP
15325: POP
// end ;
15326: PPOPN 2
15328: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15329: LD_EXP 20
15333: IFFALSE 15341
15335: PUSH
15336: LD_EXP 37
15340: AND
15341: IFFALSE 15452
15343: GO 15345
15345: DISABLE
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
15350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_INT 22
15358: PUSH
15359: LD_OWVAR 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 3
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15452
// un := tmp [ rand ( 1 , tmp ) ] ;
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_VAR 0 3
15405: PUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: CALL_OW 12
15418: ARRAY
15419: ST_TO_ADDR
// if Crawls ( un ) then
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 318
15429: IFFALSE 15440
// ComWalk ( un ) ;
15431: LD_VAR 0 2
15435: PPUSH
15436: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_INT 5
15447: PPUSH
15448: CALL_OW 336
// end ;
15452: PPOPN 3
15454: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15455: LD_EXP 20
15459: IFFALSE 15467
15461: PUSH
15462: LD_EXP 38
15466: AND
15467: IFFALSE 15479
15469: PUSH
15470: LD_OWVAR 67
15474: PUSH
15475: LD_INT 4
15477: LESS
15478: AND
15479: IFFALSE 15498
15481: GO 15483
15483: DISABLE
// begin Difficulty := Difficulty + 1 ;
15484: LD_ADDR_OWVAR 67
15488: PUSH
15489: LD_OWVAR 67
15493: PUSH
15494: LD_INT 1
15496: PLUS
15497: ST_TO_ADDR
// end ;
15498: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15499: LD_EXP 20
15503: IFFALSE 15511
15505: PUSH
15506: LD_EXP 39
15510: AND
15511: IFFALSE 15614
15513: GO 15515
15515: DISABLE
15516: LD_INT 0
15518: PPUSH
// begin for i := 1 to 5 do
15519: LD_ADDR_VAR 0 1
15523: PUSH
15524: DOUBLE
15525: LD_INT 1
15527: DEC
15528: ST_TO_ADDR
15529: LD_INT 5
15531: PUSH
15532: FOR_TO
15533: IFFALSE 15612
// begin uc_nation := nation_nature ;
15535: LD_ADDR_OWVAR 21
15539: PUSH
15540: LD_INT 0
15542: ST_TO_ADDR
// uc_side := 0 ;
15543: LD_ADDR_OWVAR 20
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15551: LD_ADDR_OWVAR 29
15555: PUSH
15556: LD_INT 12
15558: PUSH
15559: LD_INT 12
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: ST_TO_ADDR
// hc_agressivity := 20 ;
15566: LD_ADDR_OWVAR 35
15570: PUSH
15571: LD_INT 20
15573: ST_TO_ADDR
// hc_class := class_tiger ;
15574: LD_ADDR_OWVAR 28
15578: PUSH
15579: LD_INT 14
15581: ST_TO_ADDR
// hc_gallery :=  ;
15582: LD_ADDR_OWVAR 33
15586: PUSH
15587: LD_STRING 
15589: ST_TO_ADDR
// hc_name :=  ;
15590: LD_ADDR_OWVAR 26
15594: PUSH
15595: LD_STRING 
15597: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15598: CALL_OW 44
15602: PPUSH
15603: LD_INT 0
15605: PPUSH
15606: CALL_OW 51
// end ;
15610: GO 15532
15612: POP
15613: POP
// end ;
15614: PPOPN 1
15616: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15617: LD_EXP 20
15621: IFFALSE 15629
15623: PUSH
15624: LD_EXP 40
15628: AND
15629: IFFALSE 15638
15631: GO 15633
15633: DISABLE
// StreamSibBomb ;
15634: CALL 15639 0 0
15638: END
// export function StreamSibBomb ; var i , x , y ; begin
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
// result := false ;
15645: LD_ADDR_VAR 0 1
15649: PUSH
15650: LD_INT 0
15652: ST_TO_ADDR
// for i := 1 to 16 do
15653: LD_ADDR_VAR 0 2
15657: PUSH
15658: DOUBLE
15659: LD_INT 1
15661: DEC
15662: ST_TO_ADDR
15663: LD_INT 16
15665: PUSH
15666: FOR_TO
15667: IFFALSE 15866
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_INT 10
15676: PUSH
15677: LD_INT 20
15679: PUSH
15680: LD_INT 30
15682: PUSH
15683: LD_INT 40
15685: PUSH
15686: LD_INT 50
15688: PUSH
15689: LD_INT 60
15691: PUSH
15692: LD_INT 70
15694: PUSH
15695: LD_INT 80
15697: PUSH
15698: LD_INT 90
15700: PUSH
15701: LD_INT 100
15703: PUSH
15704: LD_INT 110
15706: PUSH
15707: LD_INT 120
15709: PUSH
15710: LD_INT 130
15712: PUSH
15713: LD_INT 140
15715: PUSH
15716: LD_INT 150
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 15
15741: PPUSH
15742: CALL_OW 12
15746: ARRAY
15747: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15748: LD_ADDR_VAR 0 4
15752: PUSH
15753: LD_INT 10
15755: PUSH
15756: LD_INT 20
15758: PUSH
15759: LD_INT 30
15761: PUSH
15762: LD_INT 40
15764: PUSH
15765: LD_INT 50
15767: PUSH
15768: LD_INT 60
15770: PUSH
15771: LD_INT 70
15773: PUSH
15774: LD_INT 80
15776: PUSH
15777: LD_INT 90
15779: PUSH
15780: LD_INT 100
15782: PUSH
15783: LD_INT 110
15785: PUSH
15786: LD_INT 120
15788: PUSH
15789: LD_INT 130
15791: PUSH
15792: LD_INT 140
15794: PUSH
15795: LD_INT 150
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 1
15817: PPUSH
15818: LD_INT 15
15820: PPUSH
15821: CALL_OW 12
15825: ARRAY
15826: ST_TO_ADDR
// if ValidHex ( x , y ) then
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_VAR 0 4
15836: PPUSH
15837: CALL_OW 488
15841: IFFALSE 15864
// begin result := [ x , y ] ;
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 3
15852: PUSH
15853: LD_VAR 0 4
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: ST_TO_ADDR
// break ;
15862: GO 15866
// end ; end ;
15864: GO 15666
15866: POP
15867: POP
// if result then
15868: LD_VAR 0 1
15872: IFFALSE 15932
// begin ToLua ( playSibBomb() ) ;
15874: LD_STRING playSibBomb()
15876: PPUSH
15877: CALL_OW 559
// wait ( 0 0$14 ) ;
15881: LD_INT 490
15883: PPUSH
15884: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15888: LD_VAR 0 1
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_VAR 0 1
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: PPUSH
15906: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15910: LD_VAR 0 1
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: LD_VAR 0 1
15923: PUSH
15924: LD_INT 2
15926: ARRAY
15927: PPUSH
15928: CALL_OW 429
// end ; end ;
15932: LD_VAR 0 1
15936: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15937: LD_EXP 20
15941: IFFALSE 15949
15943: PUSH
15944: LD_EXP 42
15948: AND
15949: IFFALSE 15961
15951: GO 15953
15953: DISABLE
// YouLost (  ) ;
15954: LD_STRING 
15956: PPUSH
15957: CALL_OW 104
15961: END
// every 0 0$1 trigger StreamModeActive and sFog do
15962: LD_EXP 20
15966: IFFALSE 15974
15968: PUSH
15969: LD_EXP 41
15973: AND
15974: IFFALSE 15988
15976: GO 15978
15978: DISABLE
// FogOff ( your_side ) ;
15979: LD_OWVAR 2
15983: PPUSH
15984: CALL_OW 344
15988: END
// every 0 0$1 trigger StreamModeActive and sSun do
15989: LD_EXP 20
15993: IFFALSE 16001
15995: PUSH
15996: LD_EXP 43
16000: AND
16001: IFFALSE 16029
16003: GO 16005
16005: DISABLE
// begin solar_recharge_percent := 0 ;
16006: LD_ADDR_OWVAR 79
16010: PUSH
16011: LD_INT 0
16013: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16014: LD_INT 10500
16016: PPUSH
16017: CALL_OW 67
// solar_recharge_percent := 100 ;
16021: LD_ADDR_OWVAR 79
16025: PUSH
16026: LD_INT 100
16028: ST_TO_ADDR
// end ;
16029: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16030: LD_EXP 20
16034: IFFALSE 16042
16036: PUSH
16037: LD_EXP 44
16041: AND
16042: IFFALSE 16281
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
16051: PPUSH
// begin tmp := [ ] ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: EMPTY
16058: ST_TO_ADDR
// for i := 1 to 6 do
16059: LD_ADDR_VAR 0 1
16063: PUSH
16064: DOUBLE
16065: LD_INT 1
16067: DEC
16068: ST_TO_ADDR
16069: LD_INT 6
16071: PUSH
16072: FOR_TO
16073: IFFALSE 16178
// begin uc_nation := nation_nature ;
16075: LD_ADDR_OWVAR 21
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// uc_side := 0 ;
16083: LD_ADDR_OWVAR 20
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16091: LD_ADDR_OWVAR 29
16095: PUSH
16096: LD_INT 12
16098: PUSH
16099: LD_INT 12
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: ST_TO_ADDR
// hc_agressivity := 20 ;
16106: LD_ADDR_OWVAR 35
16110: PUSH
16111: LD_INT 20
16113: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16114: LD_ADDR_OWVAR 28
16118: PUSH
16119: LD_INT 17
16121: ST_TO_ADDR
// hc_gallery :=  ;
16122: LD_ADDR_OWVAR 33
16126: PUSH
16127: LD_STRING 
16129: ST_TO_ADDR
// hc_name :=  ;
16130: LD_ADDR_OWVAR 26
16134: PUSH
16135: LD_STRING 
16137: ST_TO_ADDR
// un := CreateHuman ;
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: CALL_OW 44
16147: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: CALL_OW 51
// tmp := tmp ^ un ;
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_VAR 0 3
16169: PUSH
16170: LD_VAR 0 2
16174: ADD
16175: ST_TO_ADDR
// end ;
16176: GO 16072
16178: POP
16179: POP
// repeat wait ( 0 0$1 ) ;
16180: LD_INT 35
16182: PPUSH
16183: CALL_OW 67
// for un in tmp do
16187: LD_ADDR_VAR 0 2
16191: PUSH
16192: LD_VAR 0 3
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16272
// begin if IsDead ( un ) then
16200: LD_VAR 0 2
16204: PPUSH
16205: CALL_OW 301
16209: IFFALSE 16229
// begin tmp := tmp diff un ;
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_VAR 0 3
16220: PUSH
16221: LD_VAR 0 2
16225: DIFF
16226: ST_TO_ADDR
// continue ;
16227: GO 16197
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16229: LD_VAR 0 2
16233: PPUSH
16234: LD_INT 3
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 69
16255: PPUSH
16256: LD_VAR 0 2
16260: PPUSH
16261: CALL_OW 74
16265: PPUSH
16266: CALL_OW 115
// end ;
16270: GO 16197
16272: POP
16273: POP
// until not tmp ;
16274: LD_VAR 0 3
16278: NOT
16279: IFFALSE 16180
// end ;
16281: PPOPN 3
16283: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16284: LD_EXP 20
16288: IFFALSE 16296
16290: PUSH
16291: LD_EXP 45
16295: AND
16296: IFFALSE 16350
16298: GO 16300
16300: DISABLE
// begin ToLua ( displayTroll(); ) ;
16301: LD_STRING displayTroll();
16303: PPUSH
16304: CALL_OW 559
// wait ( 3 3$00 ) ;
16308: LD_INT 6300
16310: PPUSH
16311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16315: LD_STRING hideTroll();
16317: PPUSH
16318: CALL_OW 559
// wait ( 1 1$00 ) ;
16322: LD_INT 2100
16324: PPUSH
16325: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16329: LD_STRING displayTroll();
16331: PPUSH
16332: CALL_OW 559
// wait ( 1 1$00 ) ;
16336: LD_INT 2100
16338: PPUSH
16339: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16343: LD_STRING hideTroll();
16345: PPUSH
16346: CALL_OW 559
// end ;
16350: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16351: LD_EXP 20
16355: IFFALSE 16363
16357: PUSH
16358: LD_EXP 46
16362: AND
16363: IFFALSE 16426
16365: GO 16367
16367: DISABLE
16368: LD_INT 0
16370: PPUSH
// begin p := 0 ;
16371: LD_ADDR_VAR 0 1
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// repeat game_speed := 1 ;
16379: LD_ADDR_OWVAR 65
16383: PUSH
16384: LD_INT 1
16386: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16387: LD_INT 35
16389: PPUSH
16390: CALL_OW 67
// p := p + 1 ;
16394: LD_ADDR_VAR 0 1
16398: PUSH
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: PLUS
16407: ST_TO_ADDR
// until p >= 60 ;
16408: LD_VAR 0 1
16412: PUSH
16413: LD_INT 60
16415: GREATEREQUAL
16416: IFFALSE 16379
// game_speed := 4 ;
16418: LD_ADDR_OWVAR 65
16422: PUSH
16423: LD_INT 4
16425: ST_TO_ADDR
// end ;
16426: PPOPN 1
16428: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16429: LD_EXP 20
16433: IFFALSE 16441
16435: PUSH
16436: LD_EXP 47
16440: AND
16441: IFFALSE 16587
16443: GO 16445
16445: DISABLE
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16450: LD_ADDR_VAR 0 1
16454: PUSH
16455: LD_INT 22
16457: PUSH
16458: LD_OWVAR 2
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 30
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 30
16482: PUSH
16483: LD_INT 1
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
// if not depot then
16504: LD_VAR 0 1
16508: NOT
16509: IFFALSE 16513
// exit ;
16511: GO 16587
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16513: LD_ADDR_VAR 0 2
16517: PUSH
16518: LD_VAR 0 1
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 12
16535: ARRAY
16536: PPUSH
16537: CALL_OW 274
16541: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_INT 0
16552: PPUSH
16553: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_INT 2
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16572: LD_VAR 0 2
16576: PPUSH
16577: LD_INT 3
16579: PPUSH
16580: LD_INT 0
16582: PPUSH
16583: CALL_OW 277
// end ;
16587: PPOPN 2
16589: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16590: LD_EXP 20
16594: IFFALSE 16602
16596: PUSH
16597: LD_EXP 48
16601: AND
16602: IFFALSE 16699
16604: GO 16606
16606: DISABLE
16607: LD_INT 0
16609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16610: LD_ADDR_VAR 0 1
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_OWVAR 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 21
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 3
16639: PUSH
16640: LD_INT 23
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: PPUSH
16659: CALL_OW 69
16663: ST_TO_ADDR
// if not tmp then
16664: LD_VAR 0 1
16668: NOT
16669: IFFALSE 16673
// exit ;
16671: GO 16699
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16673: LD_VAR 0 1
16677: PUSH
16678: LD_INT 1
16680: PPUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 12
16690: ARRAY
16691: PPUSH
16692: LD_INT 200
16694: PPUSH
16695: CALL_OW 234
// end ;
16699: PPOPN 1
16701: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16702: LD_EXP 20
16706: IFFALSE 16714
16708: PUSH
16709: LD_EXP 49
16713: AND
16714: IFFALSE 16793
16716: GO 16718
16718: DISABLE
16719: LD_INT 0
16721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16722: LD_ADDR_VAR 0 1
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_OWVAR 2
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 21
16741: PUSH
16742: LD_INT 2
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PPUSH
16753: CALL_OW 69
16757: ST_TO_ADDR
// if not tmp then
16758: LD_VAR 0 1
16762: NOT
16763: IFFALSE 16767
// exit ;
16765: GO 16793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16767: LD_VAR 0 1
16771: PUSH
16772: LD_INT 1
16774: PPUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL_OW 12
16784: ARRAY
16785: PPUSH
16786: LD_INT 60
16788: PPUSH
16789: CALL_OW 234
// end ;
16793: PPOPN 1
16795: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16796: LD_EXP 20
16800: IFFALSE 16808
16802: PUSH
16803: LD_EXP 50
16807: AND
16808: IFFALSE 16907
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
// begin enable ;
16817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16818: LD_ADDR_VAR 0 1
16822: PUSH
16823: LD_INT 22
16825: PUSH
16826: LD_OWVAR 2
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 61
16837: PUSH
16838: EMPTY
16839: LIST
16840: PUSH
16841: LD_INT 33
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PPUSH
16856: CALL_OW 69
16860: ST_TO_ADDR
// if not tmp then
16861: LD_VAR 0 1
16865: NOT
16866: IFFALSE 16870
// exit ;
16868: GO 16907
// for i in tmp do
16870: LD_ADDR_VAR 0 2
16874: PUSH
16875: LD_VAR 0 1
16879: PUSH
16880: FOR_IN
16881: IFFALSE 16905
// if IsControledBy ( i ) then
16883: LD_VAR 0 2
16887: PPUSH
16888: CALL_OW 312
16892: IFFALSE 16903
// ComUnlink ( i ) ;
16894: LD_VAR 0 2
16898: PPUSH
16899: CALL_OW 136
16903: GO 16880
16905: POP
16906: POP
// end ;
16907: PPOPN 2
16909: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16910: LD_EXP 20
16914: IFFALSE 16922
16916: PUSH
16917: LD_EXP 51
16921: AND
16922: IFFALSE 17062
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// begin ToLua ( displayPowell(); ) ;
16931: LD_STRING displayPowell();
16933: PPUSH
16934: CALL_OW 559
// uc_side := 0 ;
16938: LD_ADDR_OWVAR 20
16942: PUSH
16943: LD_INT 0
16945: ST_TO_ADDR
// uc_nation := 2 ;
16946: LD_ADDR_OWVAR 21
16950: PUSH
16951: LD_INT 2
16953: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16954: LD_ADDR_OWVAR 37
16958: PUSH
16959: LD_INT 14
16961: ST_TO_ADDR
// vc_engine := engine_siberite ;
16962: LD_ADDR_OWVAR 39
16966: PUSH
16967: LD_INT 3
16969: ST_TO_ADDR
// vc_control := control_apeman ;
16970: LD_ADDR_OWVAR 38
16974: PUSH
16975: LD_INT 5
16977: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16978: LD_ADDR_OWVAR 40
16982: PUSH
16983: LD_INT 29
16985: ST_TO_ADDR
// un := CreateVehicle ;
16986: LD_ADDR_VAR 0 2
16990: PUSH
16991: CALL_OW 45
16995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16996: LD_VAR 0 2
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17008: LD_INT 35
17010: PPUSH
17011: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17015: LD_VAR 0 2
17019: PPUSH
17020: LD_INT 22
17022: PUSH
17023: LD_OWVAR 2
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PPUSH
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 74
17046: PPUSH
17047: CALL_OW 115
// until IsDead ( un ) ;
17051: LD_VAR 0 2
17055: PPUSH
17056: CALL_OW 301
17060: IFFALSE 17008
// end ;
17062: PPOPN 2
17064: END
// every 0 0$1 trigger StreamModeActive and sStu do
17065: LD_EXP 20
17069: IFFALSE 17077
17071: PUSH
17072: LD_EXP 59
17076: AND
17077: IFFALSE 17093
17079: GO 17081
17081: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17082: LD_STRING displayStucuk();
17084: PPUSH
17085: CALL_OW 559
// ResetFog ;
17089: CALL_OW 335
// end ;
17093: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17094: LD_EXP 20
17098: IFFALSE 17106
17100: PUSH
17101: LD_EXP 52
17105: AND
17106: IFFALSE 17247
17108: GO 17110
17110: DISABLE
17111: LD_INT 0
17113: PPUSH
17114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17115: LD_ADDR_VAR 0 2
17119: PUSH
17120: LD_INT 22
17122: PUSH
17123: LD_OWVAR 2
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 21
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 2
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17247
// un := tmp [ rand ( 1 , tmp ) ] ;
17160: LD_ADDR_VAR 0 1
17164: PUSH
17165: LD_VAR 0 2
17169: PUSH
17170: LD_INT 1
17172: PPUSH
17173: LD_VAR 0 2
17177: PPUSH
17178: CALL_OW 12
17182: ARRAY
17183: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 0
17191: PPUSH
17192: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_OWVAR 3
17205: PUSH
17206: LD_VAR 0 1
17210: DIFF
17211: PPUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 74
17221: PPUSH
17222: CALL_OW 115
// wait ( 0 0$20 ) ;
17226: LD_INT 700
17228: PPUSH
17229: CALL_OW 67
// SetSide ( un , your_side ) ;
17233: LD_VAR 0 1
17237: PPUSH
17238: LD_OWVAR 2
17242: PPUSH
17243: CALL_OW 235
// end ;
17247: PPOPN 2
17249: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17250: LD_EXP 20
17254: IFFALSE 17262
17256: PUSH
17257: LD_EXP 53
17261: AND
17262: IFFALSE 17368
17264: GO 17266
17266: DISABLE
17267: LD_INT 0
17269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 30
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: ST_TO_ADDR
// if not depot then
17324: LD_VAR 0 1
17328: NOT
17329: IFFALSE 17333
// exit ;
17331: GO 17368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17333: LD_VAR 0 1
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PPUSH
17342: CALL_OW 250
17346: PPUSH
17347: LD_VAR 0 1
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: PPUSH
17356: CALL_OW 251
17360: PPUSH
17361: LD_INT 70
17363: PPUSH
17364: CALL_OW 495
// end ;
17368: PPOPN 1
17370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17371: LD_EXP 20
17375: IFFALSE 17383
17377: PUSH
17378: LD_EXP 54
17382: AND
17383: IFFALSE 17594
17385: GO 17387
17387: DISABLE
17388: LD_INT 0
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
17394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17395: LD_ADDR_VAR 0 5
17399: PUSH
17400: LD_INT 22
17402: PUSH
17403: LD_OWVAR 2
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: ST_TO_ADDR
// if not tmp then
17431: LD_VAR 0 5
17435: NOT
17436: IFFALSE 17440
// exit ;
17438: GO 17594
// for i in tmp do
17440: LD_ADDR_VAR 0 1
17444: PUSH
17445: LD_VAR 0 5
17449: PUSH
17450: FOR_IN
17451: IFFALSE 17592
// begin d := rand ( 0 , 5 ) ;
17453: LD_ADDR_VAR 0 4
17457: PUSH
17458: LD_INT 0
17460: PPUSH
17461: LD_INT 5
17463: PPUSH
17464: CALL_OW 12
17468: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 250
17483: PPUSH
17484: LD_VAR 0 4
17488: PPUSH
17489: LD_INT 3
17491: PPUSH
17492: LD_INT 12
17494: PPUSH
17495: CALL_OW 12
17499: PPUSH
17500: CALL_OW 272
17504: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17505: LD_ADDR_VAR 0 3
17509: PUSH
17510: LD_VAR 0 1
17514: PPUSH
17515: CALL_OW 251
17519: PPUSH
17520: LD_VAR 0 4
17524: PPUSH
17525: LD_INT 3
17527: PPUSH
17528: LD_INT 12
17530: PPUSH
17531: CALL_OW 12
17535: PPUSH
17536: CALL_OW 273
17540: ST_TO_ADDR
// if ValidHex ( x , y ) then
17541: LD_VAR 0 2
17545: PPUSH
17546: LD_VAR 0 3
17550: PPUSH
17551: CALL_OW 488
17555: IFFALSE 17590
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17557: LD_VAR 0 1
17561: PPUSH
17562: LD_VAR 0 2
17566: PPUSH
17567: LD_VAR 0 3
17571: PPUSH
17572: LD_INT 3
17574: PPUSH
17575: LD_INT 6
17577: PPUSH
17578: CALL_OW 12
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 483
// end ;
17590: GO 17450
17592: POP
17593: POP
// end ;
17594: PPOPN 5
17596: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17597: LD_EXP 20
17601: IFFALSE 17609
17603: PUSH
17604: LD_EXP 55
17608: AND
17609: IFFALSE 17703
17611: GO 17613
17613: DISABLE
17614: LD_INT 0
17616: PPUSH
17617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17618: LD_ADDR_VAR 0 2
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 32
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 21
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: PPUSH
17660: CALL_OW 69
17664: ST_TO_ADDR
// if not tmp then
17665: LD_VAR 0 2
17669: NOT
17670: IFFALSE 17674
// exit ;
17672: GO 17703
// for i in tmp do
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: LD_VAR 0 2
17683: PUSH
17684: FOR_IN
17685: IFFALSE 17701
// SetFuel ( i , 0 ) ;
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 240
17699: GO 17684
17701: POP
17702: POP
// end ;
17703: PPOPN 2
17705: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17706: LD_EXP 20
17710: IFFALSE 17718
17712: PUSH
17713: LD_EXP 56
17717: AND
17718: IFFALSE 17784
17720: GO 17722
17722: DISABLE
17723: LD_INT 0
17725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17726: LD_ADDR_VAR 0 1
17730: PUSH
17731: LD_INT 22
17733: PUSH
17734: LD_OWVAR 2
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 30
17745: PUSH
17746: LD_INT 29
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 69
17761: ST_TO_ADDR
// if not tmp then
17762: LD_VAR 0 1
17766: NOT
17767: IFFALSE 17771
// exit ;
17769: GO 17784
// DestroyUnit ( tmp [ 1 ] ) ;
17771: LD_VAR 0 1
17775: PUSH
17776: LD_INT 1
17778: ARRAY
17779: PPUSH
17780: CALL_OW 65
// end ;
17784: PPOPN 1
17786: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17787: LD_EXP 20
17791: IFFALSE 17799
17793: PUSH
17794: LD_EXP 58
17798: AND
17799: IFFALSE 17928
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
// begin uc_side := 0 ;
17807: LD_ADDR_OWVAR 20
17811: PUSH
17812: LD_INT 0
17814: ST_TO_ADDR
// uc_nation := nation_arabian ;
17815: LD_ADDR_OWVAR 21
17819: PUSH
17820: LD_INT 2
17822: ST_TO_ADDR
// hc_gallery :=  ;
17823: LD_ADDR_OWVAR 33
17827: PUSH
17828: LD_STRING 
17830: ST_TO_ADDR
// hc_name :=  ;
17831: LD_ADDR_OWVAR 26
17835: PUSH
17836: LD_STRING 
17838: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 11
17844: PPUSH
17845: LD_INT 10
17847: PPUSH
17848: CALL_OW 380
// un := CreateHuman ;
17852: LD_ADDR_VAR 0 1
17856: PUSH
17857: CALL_OW 44
17861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17862: LD_VAR 0 1
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17874: LD_INT 35
17876: PPUSH
17877: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17881: LD_VAR 0 1
17885: PPUSH
17886: LD_INT 22
17888: PUSH
17889: LD_OWVAR 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 69
17902: PPUSH
17903: LD_VAR 0 1
17907: PPUSH
17908: CALL_OW 74
17912: PPUSH
17913: CALL_OW 115
// until IsDead ( un ) ;
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL_OW 301
17926: IFFALSE 17874
// end ;
17928: PPOPN 1
17930: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17931: LD_EXP 20
17935: IFFALSE 17943
17937: PUSH
17938: LD_EXP 60
17942: AND
17943: IFFALSE 17955
17945: GO 17947
17947: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17948: LD_STRING earthquake(getX(game), 0, 32)
17950: PPUSH
17951: CALL_OW 559
17955: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17956: LD_EXP 20
17960: IFFALSE 17968
17962: PUSH
17963: LD_EXP 61
17967: AND
17968: IFFALSE 18059
17970: GO 17972
17972: DISABLE
17973: LD_INT 0
17975: PPUSH
// begin enable ;
17976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17977: LD_ADDR_VAR 0 1
17981: PUSH
17982: LD_INT 22
17984: PUSH
17985: LD_OWVAR 2
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 21
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 33
18006: PUSH
18007: LD_INT 3
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 1
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 1
18040: PPUSH
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 12
18050: ARRAY
18051: PPUSH
18052: LD_INT 1
18054: PPUSH
18055: CALL_OW 234
// end ;
18059: PPOPN 1
18061: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18062: LD_EXP 20
18066: IFFALSE 18074
18068: PUSH
18069: LD_EXP 62
18073: AND
18074: IFFALSE 18215
18076: GO 18078
18078: DISABLE
18079: LD_INT 0
18081: PPUSH
18082: PPUSH
18083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_INT 22
18091: PUSH
18092: LD_OWVAR 2
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 25
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PPUSH
18115: CALL_OW 69
18119: ST_TO_ADDR
// if not tmp then
18120: LD_VAR 0 3
18124: NOT
18125: IFFALSE 18129
// exit ;
18127: GO 18215
// un := tmp [ rand ( 1 , tmp ) ] ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_VAR 0 3
18138: PUSH
18139: LD_INT 1
18141: PPUSH
18142: LD_VAR 0 3
18146: PPUSH
18147: CALL_OW 12
18151: ARRAY
18152: ST_TO_ADDR
// if Crawls ( un ) then
18153: LD_VAR 0 2
18157: PPUSH
18158: CALL_OW 318
18162: IFFALSE 18173
// ComWalk ( un ) ;
18164: LD_VAR 0 2
18168: PPUSH
18169: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18173: LD_VAR 0 2
18177: PPUSH
18178: LD_INT 9
18180: PPUSH
18181: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18185: LD_INT 28
18187: PPUSH
18188: LD_OWVAR 2
18192: PPUSH
18193: LD_INT 2
18195: PPUSH
18196: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18200: LD_INT 29
18202: PPUSH
18203: LD_OWVAR 2
18207: PPUSH
18208: LD_INT 2
18210: PPUSH
18211: CALL_OW 322
// end ;
18215: PPOPN 3
18217: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18218: LD_EXP 20
18222: IFFALSE 18230
18224: PUSH
18225: LD_EXP 63
18229: AND
18230: IFFALSE 18341
18232: GO 18234
18234: DISABLE
18235: LD_INT 0
18237: PPUSH
18238: PPUSH
18239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18240: LD_ADDR_VAR 0 3
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_OWVAR 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 25
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: ST_TO_ADDR
// if not tmp then
18276: LD_VAR 0 3
18280: NOT
18281: IFFALSE 18285
// exit ;
18283: GO 18341
// un := tmp [ rand ( 1 , tmp ) ] ;
18285: LD_ADDR_VAR 0 2
18289: PUSH
18290: LD_VAR 0 3
18294: PUSH
18295: LD_INT 1
18297: PPUSH
18298: LD_VAR 0 3
18302: PPUSH
18303: CALL_OW 12
18307: ARRAY
18308: ST_TO_ADDR
// if Crawls ( un ) then
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 318
18318: IFFALSE 18329
// ComWalk ( un ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 8
18336: PPUSH
18337: CALL_OW 336
// end ;
18341: PPOPN 3
18343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18344: LD_EXP 20
18348: IFFALSE 18356
18350: PUSH
18351: LD_EXP 64
18355: AND
18356: IFFALSE 18500
18358: GO 18360
18360: DISABLE
18361: LD_INT 0
18363: PPUSH
18364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_OWVAR 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: LD_INT 34
18397: PUSH
18398: LD_INT 12
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 34
18407: PUSH
18408: LD_INT 51
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 34
18417: PUSH
18418: LD_INT 32
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: ST_TO_ADDR
// if not tmp then
18441: LD_VAR 0 2
18445: NOT
18446: IFFALSE 18450
// exit ;
18448: GO 18500
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 2
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18498
// if GetCargo ( i , mat_artifact ) = 0 then
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 4
18470: PPUSH
18471: CALL_OW 289
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: IFFALSE 18496
// SetCargo ( i , mat_siberit , 100 ) ;
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_INT 3
18488: PPUSH
18489: LD_INT 100
18491: PPUSH
18492: CALL_OW 290
18496: GO 18460
18498: POP
18499: POP
// end ;
18500: PPOPN 2
18502: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18503: LD_EXP 20
18507: IFFALSE 18515
18509: PUSH
18510: LD_EXP 65
18514: AND
18515: IFFALSE 18698
18517: GO 18519
18519: DISABLE
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18524: LD_ADDR_VAR 0 2
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_OWVAR 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PPUSH
18541: CALL_OW 69
18545: ST_TO_ADDR
// if not tmp then
18546: LD_VAR 0 2
18550: NOT
18551: IFFALSE 18555
// exit ;
18553: GO 18698
// for i := 1 to 2 do
18555: LD_ADDR_VAR 0 1
18559: PUSH
18560: DOUBLE
18561: LD_INT 1
18563: DEC
18564: ST_TO_ADDR
18565: LD_INT 2
18567: PUSH
18568: FOR_TO
18569: IFFALSE 18696
// begin uc_side := your_side ;
18571: LD_ADDR_OWVAR 20
18575: PUSH
18576: LD_OWVAR 2
18580: ST_TO_ADDR
// uc_nation := nation_american ;
18581: LD_ADDR_OWVAR 21
18585: PUSH
18586: LD_INT 1
18588: ST_TO_ADDR
// vc_chassis := us_morphling ;
18589: LD_ADDR_OWVAR 37
18593: PUSH
18594: LD_INT 5
18596: ST_TO_ADDR
// vc_engine := engine_siberite ;
18597: LD_ADDR_OWVAR 39
18601: PUSH
18602: LD_INT 3
18604: ST_TO_ADDR
// vc_control := control_computer ;
18605: LD_ADDR_OWVAR 38
18609: PUSH
18610: LD_INT 3
18612: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18613: LD_ADDR_OWVAR 40
18617: PUSH
18618: LD_INT 10
18620: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18621: LD_VAR 0 2
18625: PUSH
18626: LD_INT 1
18628: ARRAY
18629: PPUSH
18630: CALL_OW 310
18634: NOT
18635: IFFALSE 18682
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18637: CALL_OW 45
18641: PPUSH
18642: LD_VAR 0 2
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PPUSH
18651: CALL_OW 250
18655: PPUSH
18656: LD_VAR 0 2
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: CALL_OW 251
18669: PPUSH
18670: LD_INT 12
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL_OW 50
18680: GO 18694
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18682: CALL_OW 45
18686: PPUSH
18687: LD_INT 1
18689: PPUSH
18690: CALL_OW 51
// end ;
18694: GO 18568
18696: POP
18697: POP
// end ;
18698: PPOPN 2
18700: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18701: LD_EXP 20
18705: IFFALSE 18713
18707: PUSH
18708: LD_EXP 66
18712: AND
18713: IFFALSE 18935
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18726: LD_ADDR_VAR 0 6
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 1
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 3
18755: PUSH
18756: LD_INT 23
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 69
18779: ST_TO_ADDR
// if not tmp then
18780: LD_VAR 0 6
18784: NOT
18785: IFFALSE 18789
// exit ;
18787: GO 18935
// s1 := rand ( 1 , 4 ) ;
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 1
18796: PPUSH
18797: LD_INT 4
18799: PPUSH
18800: CALL_OW 12
18804: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18805: LD_ADDR_VAR 0 4
18809: PUSH
18810: LD_VAR 0 6
18814: PUSH
18815: LD_INT 1
18817: ARRAY
18818: PPUSH
18819: LD_VAR 0 2
18823: PPUSH
18824: CALL_OW 259
18828: ST_TO_ADDR
// if s1 = 1 then
18829: LD_VAR 0 2
18833: PUSH
18834: LD_INT 1
18836: EQUAL
18837: IFFALSE 18857
// s2 := rand ( 2 , 4 ) else
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_INT 2
18846: PPUSH
18847: LD_INT 4
18849: PPUSH
18850: CALL_OW 12
18854: ST_TO_ADDR
18855: GO 18865
// s2 := 1 ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18865: LD_ADDR_VAR 0 5
18869: PUSH
18870: LD_VAR 0 6
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PPUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: CALL_OW 259
18888: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18889: LD_VAR 0 6
18893: PUSH
18894: LD_INT 1
18896: ARRAY
18897: PPUSH
18898: LD_VAR 0 2
18902: PPUSH
18903: LD_VAR 0 5
18907: PPUSH
18908: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18912: LD_VAR 0 6
18916: PUSH
18917: LD_INT 1
18919: ARRAY
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: LD_VAR 0 4
18930: PPUSH
18931: CALL_OW 237
// end ;
18935: PPOPN 6
18937: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18938: LD_EXP 20
18942: IFFALSE 18950
18944: PUSH
18945: LD_EXP 67
18949: AND
18950: IFFALSE 19029
18952: GO 18954
18954: DISABLE
18955: LD_INT 0
18957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18958: LD_ADDR_VAR 0 1
18962: PUSH
18963: LD_INT 22
18965: PUSH
18966: LD_OWVAR 2
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 30
18977: PUSH
18978: LD_INT 3
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 69
18993: ST_TO_ADDR
// if not tmp then
18994: LD_VAR 0 1
18998: NOT
18999: IFFALSE 19003
// exit ;
19001: GO 19029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19003: LD_VAR 0 1
19007: PUSH
19008: LD_INT 1
19010: PPUSH
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 12
19020: ARRAY
19021: PPUSH
19022: LD_INT 1
19024: PPUSH
19025: CALL_OW 234
// end ;
19029: PPOPN 1
19031: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19032: LD_EXP 20
19036: IFFALSE 19044
19038: PUSH
19039: LD_EXP 68
19043: AND
19044: IFFALSE 19156
19046: GO 19048
19048: DISABLE
19049: LD_INT 0
19051: PPUSH
19052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_OWVAR 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: LD_INT 30
19075: PUSH
19076: LD_INT 27
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 26
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 28
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 69
19117: ST_TO_ADDR
// if not tmp then
19118: LD_VAR 0 2
19122: NOT
19123: IFFALSE 19127
// exit ;
19125: GO 19156
// for i in tmp do
19127: LD_ADDR_VAR 0 1
19131: PUSH
19132: LD_VAR 0 2
19136: PUSH
19137: FOR_IN
19138: IFFALSE 19154
// SetLives ( i , 1 ) ;
19140: LD_VAR 0 1
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 234
19152: GO 19137
19154: POP
19155: POP
// end ;
19156: PPOPN 2
19158: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19159: LD_EXP 20
19163: IFFALSE 19171
19165: PUSH
19166: LD_EXP 69
19170: AND
19171: IFFALSE 19458
19173: GO 19175
19175: DISABLE
19176: LD_INT 0
19178: PPUSH
19179: PPUSH
19180: PPUSH
// begin i := rand ( 1 , 7 ) ;
19181: LD_ADDR_VAR 0 1
19185: PUSH
19186: LD_INT 1
19188: PPUSH
19189: LD_INT 7
19191: PPUSH
19192: CALL_OW 12
19196: ST_TO_ADDR
// case i of 1 :
19197: LD_VAR 0 1
19201: PUSH
19202: LD_INT 1
19204: DOUBLE
19205: EQUAL
19206: IFTRUE 19210
19208: GO 19220
19210: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19211: LD_STRING earthquake(getX(game), 0, 32)
19213: PPUSH
19214: CALL_OW 559
19218: GO 19458
19220: LD_INT 2
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19242
19228: POP
// begin ToLua ( displayStucuk(); ) ;
19229: LD_STRING displayStucuk();
19231: PPUSH
19232: CALL_OW 559
// ResetFog ;
19236: CALL_OW 335
// end ; 3 :
19240: GO 19458
19242: LD_INT 3
19244: DOUBLE
19245: EQUAL
19246: IFTRUE 19250
19248: GO 19354
19250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_OWVAR 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 25
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: ST_TO_ADDR
// if not tmp then
19287: LD_VAR 0 2
19291: NOT
19292: IFFALSE 19296
// exit ;
19294: GO 19458
// un := tmp [ rand ( 1 , tmp ) ] ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_VAR 0 2
19305: PUSH
19306: LD_INT 1
19308: PPUSH
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 12
19318: ARRAY
19319: ST_TO_ADDR
// if Crawls ( un ) then
19320: LD_VAR 0 3
19324: PPUSH
19325: CALL_OW 318
19329: IFFALSE 19340
// ComWalk ( un ) ;
19331: LD_VAR 0 3
19335: PPUSH
19336: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 8
19347: PPUSH
19348: CALL_OW 336
// end ; 4 :
19352: GO 19458
19354: LD_INT 4
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19436
19362: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_OWVAR 2
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 30
19382: PUSH
19383: LD_INT 29
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PPUSH
19394: CALL_OW 69
19398: ST_TO_ADDR
// if not tmp then
19399: LD_VAR 0 2
19403: NOT
19404: IFFALSE 19408
// exit ;
19406: GO 19458
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19408: LD_VAR 0 2
19412: PUSH
19413: LD_INT 1
19415: ARRAY
19416: PPUSH
19417: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 1
19428: ARRAY
19429: PPUSH
19430: CALL_OW 65
// end ; 5 .. 7 :
19434: GO 19458
19436: LD_INT 5
19438: DOUBLE
19439: GREATEREQUAL
19440: IFFALSE 19448
19442: LD_INT 7
19444: DOUBLE
19445: LESSEQUAL
19446: IFTRUE 19450
19448: GO 19457
19450: POP
// StreamSibBomb ; end ;
19451: CALL 15639 0 0
19455: GO 19458
19457: POP
// end ;
19458: PPOPN 3
19460: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19461: LD_EXP 20
19465: IFFALSE 19473
19467: PUSH
19468: LD_EXP 70
19472: AND
19473: IFFALSE 19629
19475: GO 19477
19477: DISABLE
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: LD_INT 81
19490: PUSH
19491: LD_OWVAR 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 21
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 69
19536: ST_TO_ADDR
// if not tmp then
19537: LD_VAR 0 2
19541: NOT
19542: IFFALSE 19546
// exit ;
19544: GO 19629
// p := 0 ;
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: LD_INT 0
19553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19554: LD_INT 35
19556: PPUSH
19557: CALL_OW 67
// p := p + 1 ;
19561: LD_ADDR_VAR 0 3
19565: PUSH
19566: LD_VAR 0 3
19570: PUSH
19571: LD_INT 1
19573: PLUS
19574: ST_TO_ADDR
// for i in tmp do
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: LD_VAR 0 2
19584: PUSH
19585: FOR_IN
19586: IFFALSE 19617
// if GetLives ( i ) < 1000 then
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 256
19597: PUSH
19598: LD_INT 1000
19600: LESS
19601: IFFALSE 19615
// SetLives ( i , 1000 ) ;
19603: LD_VAR 0 1
19607: PPUSH
19608: LD_INT 1000
19610: PPUSH
19611: CALL_OW 234
19615: GO 19585
19617: POP
19618: POP
// until p > 20 ;
19619: LD_VAR 0 3
19623: PUSH
19624: LD_INT 20
19626: GREATER
19627: IFFALSE 19554
// end ;
19629: PPOPN 3
19631: END
// every 0 0$1 trigger StreamModeActive and sTime do
19632: LD_EXP 20
19636: IFFALSE 19644
19638: PUSH
19639: LD_EXP 71
19643: AND
19644: IFFALSE 19679
19646: GO 19648
19648: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19649: LD_INT 28
19651: PPUSH
19652: LD_OWVAR 2
19656: PPUSH
19657: LD_INT 2
19659: PPUSH
19660: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19664: LD_INT 30
19666: PPUSH
19667: LD_OWVAR 2
19671: PPUSH
19672: LD_INT 2
19674: PPUSH
19675: CALL_OW 322
// end ;
19679: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19680: LD_EXP 20
19684: IFFALSE 19692
19686: PUSH
19687: LD_EXP 72
19691: AND
19692: IFFALSE 19813
19694: GO 19696
19696: DISABLE
19697: LD_INT 0
19699: PPUSH
19700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19701: LD_ADDR_VAR 0 2
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_OWVAR 2
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 21
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: LD_INT 23
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 69
19754: ST_TO_ADDR
// if not tmp then
19755: LD_VAR 0 2
19759: NOT
19760: IFFALSE 19764
// exit ;
19762: GO 19813
// for i in tmp do
19764: LD_ADDR_VAR 0 1
19768: PUSH
19769: LD_VAR 0 2
19773: PUSH
19774: FOR_IN
19775: IFFALSE 19811
// begin if Crawls ( i ) then
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 318
19786: IFFALSE 19797
// ComWalk ( i ) ;
19788: LD_VAR 0 1
19792: PPUSH
19793: CALL_OW 138
// SetClass ( i , 2 ) ;
19797: LD_VAR 0 1
19801: PPUSH
19802: LD_INT 2
19804: PPUSH
19805: CALL_OW 336
// end ;
19809: GO 19774
19811: POP
19812: POP
// end ;
19813: PPOPN 2
19815: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19816: LD_EXP 20
19820: IFFALSE 19828
19822: PUSH
19823: LD_EXP 73
19827: AND
19828: IFFALSE 20118
19830: GO 19832
19832: DISABLE
19833: LD_INT 0
19835: PPUSH
19836: PPUSH
19837: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19838: LD_OWVAR 2
19842: PPUSH
19843: LD_INT 9
19845: PPUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_INT 1
19851: PPUSH
19852: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19856: LD_INT 9
19858: PPUSH
19859: LD_OWVAR 2
19863: PPUSH
19864: CALL_OW 343
// uc_side := 9 ;
19868: LD_ADDR_OWVAR 20
19872: PUSH
19873: LD_INT 9
19875: ST_TO_ADDR
// uc_nation := 2 ;
19876: LD_ADDR_OWVAR 21
19880: PUSH
19881: LD_INT 2
19883: ST_TO_ADDR
// hc_name := Dark Warrior ;
19884: LD_ADDR_OWVAR 26
19888: PUSH
19889: LD_STRING Dark Warrior
19891: ST_TO_ADDR
// hc_gallery :=  ;
19892: LD_ADDR_OWVAR 33
19896: PUSH
19897: LD_STRING 
19899: ST_TO_ADDR
// hc_noskilllimit := true ;
19900: LD_ADDR_OWVAR 76
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19908: LD_ADDR_OWVAR 31
19912: PUSH
19913: LD_INT 30
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 30
19921: PUSH
19922: LD_INT 30
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: ST_TO_ADDR
// un := CreateHuman ;
19931: LD_ADDR_VAR 0 3
19935: PUSH
19936: CALL_OW 44
19940: ST_TO_ADDR
// hc_noskilllimit := false ;
19941: LD_ADDR_OWVAR 76
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19949: LD_VAR 0 3
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: CALL_OW 51
// ToLua ( playRanger() ) ;
19961: LD_STRING playRanger()
19963: PPUSH
19964: CALL_OW 559
// p := 0 ;
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 0
19975: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19976: LD_INT 35
19978: PPUSH
19979: CALL_OW 67
// p := p + 1 ;
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_VAR 0 2
19992: PUSH
19993: LD_INT 1
19995: PLUS
19996: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 256
20006: PUSH
20007: LD_INT 1000
20009: LESS
20010: IFFALSE 20024
// SetLives ( un , 1000 ) ;
20012: LD_VAR 0 3
20016: PPUSH
20017: LD_INT 1000
20019: PPUSH
20020: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20024: LD_VAR 0 3
20028: PPUSH
20029: LD_INT 81
20031: PUSH
20032: LD_OWVAR 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 91
20043: PUSH
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: PPUSH
20066: LD_VAR 0 3
20070: PPUSH
20071: CALL_OW 74
20075: PPUSH
20076: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20080: LD_VAR 0 2
20084: PUSH
20085: LD_INT 80
20087: GREATER
20088: IFTRUE 20101
20090: PUSH
20091: LD_VAR 0 3
20095: PPUSH
20096: CALL_OW 301
20100: OR
20101: IFFALSE 19976
// if un then
20103: LD_VAR 0 3
20107: IFFALSE 20118
// RemoveUnit ( un ) ;
20109: LD_VAR 0 3
20113: PPUSH
20114: CALL_OW 64
// end ;
20118: PPOPN 3
20120: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20121: LD_EXP 74
20125: IFFALSE 20241
20127: GO 20129
20129: DISABLE
20130: LD_INT 0
20132: PPUSH
20133: PPUSH
20134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_INT 81
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PPUSH
20166: CALL_OW 69
20170: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20171: LD_STRING playComputer()
20173: PPUSH
20174: CALL_OW 559
// if not tmp then
20178: LD_VAR 0 2
20182: NOT
20183: IFFALSE 20187
// exit ;
20185: GO 20241
// for i in tmp do
20187: LD_ADDR_VAR 0 1
20191: PUSH
20192: LD_VAR 0 2
20196: PUSH
20197: FOR_IN
20198: IFFALSE 20239
// for j := 1 to 4 do
20200: LD_ADDR_VAR 0 3
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_INT 4
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20235
// SetSkill ( i , j , 10 ) ;
20216: LD_VAR 0 1
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 10
20228: PPUSH
20229: CALL_OW 237
20233: GO 20213
20235: POP
20236: POP
20237: GO 20197
20239: POP
20240: POP
// end ;
20241: PPOPN 3
20243: END
// every 0 0$1 trigger s30 do var i , tmp ;
20244: LD_EXP 75
20248: IFFALSE 20317
20250: GO 20252
20252: DISABLE
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20257: LD_ADDR_VAR 0 2
20261: PUSH
20262: LD_INT 22
20264: PUSH
20265: LD_OWVAR 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: ST_TO_ADDR
// if not tmp then
20279: LD_VAR 0 2
20283: NOT
20284: IFFALSE 20288
// exit ;
20286: GO 20317
// for i in tmp do
20288: LD_ADDR_VAR 0 1
20292: PUSH
20293: LD_VAR 0 2
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20315
// SetLives ( i , 300 ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_INT 300
20308: PPUSH
20309: CALL_OW 234
20313: GO 20298
20315: POP
20316: POP
// end ;
20317: PPOPN 2
20319: END
// every 0 0$1 trigger s60 do var i , tmp ;
20320: LD_EXP 76
20324: IFFALSE 20393
20326: GO 20328
20328: DISABLE
20329: LD_INT 0
20331: PPUSH
20332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20333: LD_ADDR_VAR 0 2
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_OWVAR 2
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PPUSH
20350: CALL_OW 69
20354: ST_TO_ADDR
// if not tmp then
20355: LD_VAR 0 2
20359: NOT
20360: IFFALSE 20364
// exit ;
20362: GO 20393
// for i in tmp do
20364: LD_ADDR_VAR 0 1
20368: PUSH
20369: LD_VAR 0 2
20373: PUSH
20374: FOR_IN
20375: IFFALSE 20391
// SetLives ( i , 600 ) ;
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_INT 600
20384: PPUSH
20385: CALL_OW 234
20389: GO 20374
20391: POP
20392: POP
// end ;
20393: PPOPN 2
20395: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20396: LD_INT 0
20398: PPUSH
// case cmd of 301 :
20399: LD_VAR 0 1
20403: PUSH
20404: LD_INT 301
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20444
20412: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20413: LD_VAR 0 6
20417: PPUSH
20418: LD_VAR 0 7
20422: PPUSH
20423: LD_VAR 0 8
20427: PPUSH
20428: LD_VAR 0 4
20432: PPUSH
20433: LD_VAR 0 5
20437: PPUSH
20438: CALL 21657 0 5
20442: GO 20565
20444: LD_INT 302
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20489
20452: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20453: LD_VAR 0 6
20457: PPUSH
20458: LD_VAR 0 7
20462: PPUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 9
20472: PPUSH
20473: LD_VAR 0 4
20477: PPUSH
20478: LD_VAR 0 5
20482: PPUSH
20483: CALL 21748 0 6
20487: GO 20565
20489: LD_INT 303
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20534
20497: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20498: LD_VAR 0 6
20502: PPUSH
20503: LD_VAR 0 7
20507: PPUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: LD_VAR 0 9
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: LD_VAR 0 5
20527: PPUSH
20528: CALL 20570 0 6
20532: GO 20565
20534: LD_INT 304
20536: DOUBLE
20537: EQUAL
20538: IFTRUE 20542
20540: GO 20564
20542: POP
// hHackTeleport ( unit , x , y ) ; end ;
20543: LD_VAR 0 2
20547: PPUSH
20548: LD_VAR 0 4
20552: PPUSH
20553: LD_VAR 0 5
20557: PPUSH
20558: CALL 22341 0 3
20562: GO 20565
20564: POP
// end ;
20565: LD_VAR 0 12
20569: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20570: LD_INT 0
20572: PPUSH
20573: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20574: LD_VAR 0 1
20578: PUSH
20579: LD_INT 1
20581: LESS
20582: IFTRUE 20594
20584: PUSH
20585: LD_VAR 0 1
20589: PUSH
20590: LD_INT 3
20592: GREATER
20593: OR
20594: IFTRUE 20612
20596: PUSH
20597: LD_VAR 0 5
20601: PPUSH
20602: LD_VAR 0 6
20606: PPUSH
20607: CALL_OW 428
20611: OR
20612: IFFALSE 20616
// exit ;
20614: GO 21344
// uc_side := your_side ;
20616: LD_ADDR_OWVAR 20
20620: PUSH
20621: LD_OWVAR 2
20625: ST_TO_ADDR
// uc_nation := nation ;
20626: LD_ADDR_OWVAR 21
20630: PUSH
20631: LD_VAR 0 1
20635: ST_TO_ADDR
// bc_level = 1 ;
20636: LD_ADDR_OWVAR 43
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// case btype of 1 :
20644: LD_VAR 0 2
20648: PUSH
20649: LD_INT 1
20651: DOUBLE
20652: EQUAL
20653: IFTRUE 20657
20655: GO 20668
20657: POP
// bc_type := b_depot ; 2 :
20658: LD_ADDR_OWVAR 42
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
20666: GO 21288
20668: LD_INT 2
20670: DOUBLE
20671: EQUAL
20672: IFTRUE 20676
20674: GO 20687
20676: POP
// bc_type := b_warehouse ; 3 :
20677: LD_ADDR_OWVAR 42
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
20685: GO 21288
20687: LD_INT 3
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20706
20695: POP
// bc_type := b_lab ; 4 .. 9 :
20696: LD_ADDR_OWVAR 42
20700: PUSH
20701: LD_INT 6
20703: ST_TO_ADDR
20704: GO 21288
20706: LD_INT 4
20708: DOUBLE
20709: GREATEREQUAL
20710: IFFALSE 20718
20712: LD_INT 9
20714: DOUBLE
20715: LESSEQUAL
20716: IFTRUE 20720
20718: GO 20780
20720: POP
// begin bc_type := b_lab_half ;
20721: LD_ADDR_OWVAR 42
20725: PUSH
20726: LD_INT 7
20728: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20729: LD_ADDR_OWVAR 44
20733: PUSH
20734: LD_INT 10
20736: PUSH
20737: LD_INT 11
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: LD_INT 15
20745: PUSH
20746: LD_INT 14
20748: PUSH
20749: LD_INT 13
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: LD_VAR 0 2
20764: PUSH
20765: LD_INT 3
20767: MINUS
20768: ARRAY
20769: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20770: LD_ADDR_OWVAR 45
20774: PUSH
20775: LD_INT 9
20777: ST_TO_ADDR
// end ; 10 .. 13 :
20778: GO 21288
20780: LD_INT 10
20782: DOUBLE
20783: GREATEREQUAL
20784: IFFALSE 20792
20786: LD_INT 13
20788: DOUBLE
20789: LESSEQUAL
20790: IFTRUE 20794
20792: GO 20871
20794: POP
// begin bc_type := b_lab_full ;
20795: LD_ADDR_OWVAR 42
20799: PUSH
20800: LD_INT 8
20802: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20803: LD_ADDR_OWVAR 44
20807: PUSH
20808: LD_INT 10
20810: PUSH
20811: LD_INT 12
20813: PUSH
20814: LD_INT 14
20816: PUSH
20817: LD_INT 13
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: LD_INT 9
20833: MINUS
20834: ARRAY
20835: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20836: LD_ADDR_OWVAR 45
20840: PUSH
20841: LD_INT 11
20843: PUSH
20844: LD_INT 15
20846: PUSH
20847: LD_INT 12
20849: PUSH
20850: LD_INT 15
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 2
20863: PUSH
20864: LD_INT 9
20866: MINUS
20867: ARRAY
20868: ST_TO_ADDR
// end ; 14 :
20869: GO 21288
20871: LD_INT 14
20873: DOUBLE
20874: EQUAL
20875: IFTRUE 20879
20877: GO 20890
20879: POP
// bc_type := b_workshop ; 15 :
20880: LD_ADDR_OWVAR 42
20884: PUSH
20885: LD_INT 2
20887: ST_TO_ADDR
20888: GO 21288
20890: LD_INT 15
20892: DOUBLE
20893: EQUAL
20894: IFTRUE 20898
20896: GO 20909
20898: POP
// bc_type := b_factory ; 16 :
20899: LD_ADDR_OWVAR 42
20903: PUSH
20904: LD_INT 3
20906: ST_TO_ADDR
20907: GO 21288
20909: LD_INT 16
20911: DOUBLE
20912: EQUAL
20913: IFTRUE 20917
20915: GO 20928
20917: POP
// bc_type := b_ext_gun ; 17 :
20918: LD_ADDR_OWVAR 42
20922: PUSH
20923: LD_INT 17
20925: ST_TO_ADDR
20926: GO 21288
20928: LD_INT 17
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 20964
20936: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20937: LD_ADDR_OWVAR 42
20941: PUSH
20942: LD_INT 19
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 19
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: PUSH
20956: LD_VAR 0 1
20960: ARRAY
20961: ST_TO_ADDR
20962: GO 21288
20964: LD_INT 18
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 20983
20972: POP
// bc_type := b_ext_radar ; 19 :
20973: LD_ADDR_OWVAR 42
20977: PUSH
20978: LD_INT 20
20980: ST_TO_ADDR
20981: GO 21288
20983: LD_INT 19
20985: DOUBLE
20986: EQUAL
20987: IFTRUE 20991
20989: GO 21002
20991: POP
// bc_type := b_ext_radio ; 20 :
20992: LD_ADDR_OWVAR 42
20996: PUSH
20997: LD_INT 22
20999: ST_TO_ADDR
21000: GO 21288
21002: LD_INT 20
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21021
21010: POP
// bc_type := b_ext_siberium ; 21 :
21011: LD_ADDR_OWVAR 42
21015: PUSH
21016: LD_INT 21
21018: ST_TO_ADDR
21019: GO 21288
21021: LD_INT 21
21023: DOUBLE
21024: EQUAL
21025: IFTRUE 21029
21027: GO 21040
21029: POP
// bc_type := b_ext_computer ; 22 :
21030: LD_ADDR_OWVAR 42
21034: PUSH
21035: LD_INT 24
21037: ST_TO_ADDR
21038: GO 21288
21040: LD_INT 22
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21059
21048: POP
// bc_type := b_ext_track ; 23 :
21049: LD_ADDR_OWVAR 42
21053: PUSH
21054: LD_INT 16
21056: ST_TO_ADDR
21057: GO 21288
21059: LD_INT 23
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21078
21067: POP
// bc_type := b_ext_laser ; 24 :
21068: LD_ADDR_OWVAR 42
21072: PUSH
21073: LD_INT 25
21075: ST_TO_ADDR
21076: GO 21288
21078: LD_INT 24
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21097
21086: POP
// bc_type := b_control_tower ; 25 :
21087: LD_ADDR_OWVAR 42
21091: PUSH
21092: LD_INT 36
21094: ST_TO_ADDR
21095: GO 21288
21097: LD_INT 25
21099: DOUBLE
21100: EQUAL
21101: IFTRUE 21105
21103: GO 21116
21105: POP
// bc_type := b_breastwork ; 26 :
21106: LD_ADDR_OWVAR 42
21110: PUSH
21111: LD_INT 31
21113: ST_TO_ADDR
21114: GO 21288
21116: LD_INT 26
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21135
21124: POP
// bc_type := b_bunker ; 27 :
21125: LD_ADDR_OWVAR 42
21129: PUSH
21130: LD_INT 32
21132: ST_TO_ADDR
21133: GO 21288
21135: LD_INT 27
21137: DOUBLE
21138: EQUAL
21139: IFTRUE 21143
21141: GO 21154
21143: POP
// bc_type := b_turret ; 28 :
21144: LD_ADDR_OWVAR 42
21148: PUSH
21149: LD_INT 33
21151: ST_TO_ADDR
21152: GO 21288
21154: LD_INT 28
21156: DOUBLE
21157: EQUAL
21158: IFTRUE 21162
21160: GO 21173
21162: POP
// bc_type := b_armoury ; 29 :
21163: LD_ADDR_OWVAR 42
21167: PUSH
21168: LD_INT 4
21170: ST_TO_ADDR
21171: GO 21288
21173: LD_INT 29
21175: DOUBLE
21176: EQUAL
21177: IFTRUE 21181
21179: GO 21192
21181: POP
// bc_type := b_barracks ; 30 :
21182: LD_ADDR_OWVAR 42
21186: PUSH
21187: LD_INT 5
21189: ST_TO_ADDR
21190: GO 21288
21192: LD_INT 30
21194: DOUBLE
21195: EQUAL
21196: IFTRUE 21200
21198: GO 21211
21200: POP
// bc_type := b_solar_power ; 31 :
21201: LD_ADDR_OWVAR 42
21205: PUSH
21206: LD_INT 27
21208: ST_TO_ADDR
21209: GO 21288
21211: LD_INT 31
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21230
21219: POP
// bc_type := b_oil_power ; 32 :
21220: LD_ADDR_OWVAR 42
21224: PUSH
21225: LD_INT 26
21227: ST_TO_ADDR
21228: GO 21288
21230: LD_INT 32
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21249
21238: POP
// bc_type := b_siberite_power ; 33 :
21239: LD_ADDR_OWVAR 42
21243: PUSH
21244: LD_INT 28
21246: ST_TO_ADDR
21247: GO 21288
21249: LD_INT 33
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21268
21257: POP
// bc_type := b_oil_mine ; 34 :
21258: LD_ADDR_OWVAR 42
21262: PUSH
21263: LD_INT 29
21265: ST_TO_ADDR
21266: GO 21288
21268: LD_INT 34
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21287
21276: POP
// bc_type := b_siberite_mine ; end ;
21277: LD_ADDR_OWVAR 42
21281: PUSH
21282: LD_INT 30
21284: ST_TO_ADDR
21285: GO 21288
21287: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21288: LD_ADDR_VAR 0 8
21292: PUSH
21293: LD_VAR 0 5
21297: PPUSH
21298: LD_VAR 0 6
21302: PPUSH
21303: LD_VAR 0 3
21307: PPUSH
21308: CALL_OW 47
21312: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21313: LD_OWVAR 42
21317: PUSH
21318: LD_INT 32
21320: PUSH
21321: LD_INT 33
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: IN
21328: IFFALSE 21344
// PlaceWeaponTurret ( b , weapon ) ;
21330: LD_VAR 0 8
21334: PPUSH
21335: LD_VAR 0 4
21339: PPUSH
21340: CALL_OW 431
// end ;
21344: LD_VAR 0 7
21348: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21349: LD_INT 0
21351: PPUSH
21352: PPUSH
21353: PPUSH
21354: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21355: LD_ADDR_VAR 0 4
21359: PUSH
21360: LD_INT 22
21362: PUSH
21363: LD_OWVAR 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: LD_INT 30
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 30
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PPUSH
21404: CALL_OW 69
21408: ST_TO_ADDR
// if not tmp then
21409: LD_VAR 0 4
21413: NOT
21414: IFFALSE 21418
// exit ;
21416: GO 21477
// for i in tmp do
21418: LD_ADDR_VAR 0 2
21422: PUSH
21423: LD_VAR 0 4
21427: PUSH
21428: FOR_IN
21429: IFFALSE 21475
// for j = 1 to 3 do
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: DOUBLE
21437: LD_INT 1
21439: DEC
21440: ST_TO_ADDR
21441: LD_INT 3
21443: PUSH
21444: FOR_TO
21445: IFFALSE 21471
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21447: LD_VAR 0 2
21451: PPUSH
21452: CALL_OW 274
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_INT 99999
21464: PPUSH
21465: CALL_OW 277
21469: GO 21444
21471: POP
21472: POP
21473: GO 21428
21475: POP
21476: POP
// end ;
21477: LD_VAR 0 1
21481: RET
// export function hHackSetLevel10 ; var i , j ; begin
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21487: LD_ADDR_VAR 0 2
21491: PUSH
21492: LD_INT 21
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PPUSH
21502: CALL_OW 69
21506: PUSH
21507: FOR_IN
21508: IFFALSE 21560
// if IsSelected ( i ) then
21510: LD_VAR 0 2
21514: PPUSH
21515: CALL_OW 306
21519: IFFALSE 21558
// begin for j := 1 to 4 do
21521: LD_ADDR_VAR 0 3
21525: PUSH
21526: DOUBLE
21527: LD_INT 1
21529: DEC
21530: ST_TO_ADDR
21531: LD_INT 4
21533: PUSH
21534: FOR_TO
21535: IFFALSE 21556
// SetSkill ( i , j , 10 ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 10
21549: PPUSH
21550: CALL_OW 237
21554: GO 21534
21556: POP
21557: POP
// end ;
21558: GO 21507
21560: POP
21561: POP
// end ;
21562: LD_VAR 0 1
21566: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21567: LD_INT 0
21569: PPUSH
21570: PPUSH
21571: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_INT 22
21579: PUSH
21580: LD_OWVAR 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 21
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PPUSH
21603: CALL_OW 69
21607: PUSH
21608: FOR_IN
21609: IFFALSE 21650
// begin for j := 1 to 4 do
21611: LD_ADDR_VAR 0 3
21615: PUSH
21616: DOUBLE
21617: LD_INT 1
21619: DEC
21620: ST_TO_ADDR
21621: LD_INT 4
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21646
// SetSkill ( i , j , 10 ) ;
21627: LD_VAR 0 2
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: LD_INT 10
21639: PPUSH
21640: CALL_OW 237
21644: GO 21624
21646: POP
21647: POP
// end ;
21648: GO 21608
21650: POP
21651: POP
// end ;
21652: LD_VAR 0 1
21656: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21657: LD_INT 0
21659: PPUSH
// uc_side := your_side ;
21660: LD_ADDR_OWVAR 20
21664: PUSH
21665: LD_OWVAR 2
21669: ST_TO_ADDR
// uc_nation := nation ;
21670: LD_ADDR_OWVAR 21
21674: PUSH
21675: LD_VAR 0 1
21679: ST_TO_ADDR
// InitHc ;
21680: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21684: LD_INT 0
21686: PPUSH
21687: LD_VAR 0 2
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21701: LD_VAR 0 4
21705: PPUSH
21706: LD_VAR 0 5
21710: PPUSH
21711: CALL_OW 428
21715: PUSH
21716: LD_INT 0
21718: EQUAL
21719: IFFALSE 21743
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21721: CALL_OW 44
21725: PPUSH
21726: LD_VAR 0 4
21730: PPUSH
21731: LD_VAR 0 5
21735: PPUSH
21736: LD_INT 1
21738: PPUSH
21739: CALL_OW 48
// end ;
21743: LD_VAR 0 6
21747: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
// uc_side := your_side ;
21752: LD_ADDR_OWVAR 20
21756: PUSH
21757: LD_OWVAR 2
21761: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21762: LD_VAR 0 1
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: LD_INT 4
21778: PUSH
21779: LD_INT 5
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: IN
21789: IFFALSE 21801
// uc_nation := nation_american else
21791: LD_ADDR_OWVAR 21
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
21799: GO 21844
// if chassis in [ 11 , 12 , 13 , 14 ] then
21801: LD_VAR 0 1
21805: PUSH
21806: LD_INT 11
21808: PUSH
21809: LD_INT 12
21811: PUSH
21812: LD_INT 13
21814: PUSH
21815: LD_INT 14
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: IN
21824: IFFALSE 21836
// uc_nation := nation_arabian else
21826: LD_ADDR_OWVAR 21
21830: PUSH
21831: LD_INT 2
21833: ST_TO_ADDR
21834: GO 21844
// uc_nation := nation_russian ;
21836: LD_ADDR_OWVAR 21
21840: PUSH
21841: LD_INT 3
21843: ST_TO_ADDR
// vc_chassis := chassis ;
21844: LD_ADDR_OWVAR 37
21848: PUSH
21849: LD_VAR 0 1
21853: ST_TO_ADDR
// vc_engine := engine ;
21854: LD_ADDR_OWVAR 39
21858: PUSH
21859: LD_VAR 0 2
21863: ST_TO_ADDR
// vc_control := control ;
21864: LD_ADDR_OWVAR 38
21868: PUSH
21869: LD_VAR 0 3
21873: ST_TO_ADDR
// vc_weapon := weapon ;
21874: LD_ADDR_OWVAR 40
21878: PUSH
21879: LD_VAR 0 4
21883: ST_TO_ADDR
// un := CreateVehicle ;
21884: LD_ADDR_VAR 0 8
21888: PUSH
21889: CALL_OW 45
21893: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21894: LD_VAR 0 8
21898: PPUSH
21899: LD_INT 0
21901: PPUSH
21902: LD_INT 5
21904: PPUSH
21905: CALL_OW 12
21909: PPUSH
21910: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21914: LD_VAR 0 8
21918: PPUSH
21919: LD_VAR 0 5
21923: PPUSH
21924: LD_VAR 0 6
21928: PPUSH
21929: LD_INT 1
21931: PPUSH
21932: CALL_OW 48
// end ;
21936: LD_VAR 0 7
21940: RET
// export hInvincible ; every 1 do
21941: GO 21943
21943: DISABLE
// hInvincible := [ ] ;
21944: LD_ADDR_EXP 77
21948: PUSH
21949: EMPTY
21950: ST_TO_ADDR
21951: END
// every 10 do var i ;
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
// begin enable ;
21958: ENABLE
// if not hInvincible then
21959: LD_EXP 77
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22012
// for i in hInvincible do
21968: LD_ADDR_VAR 0 1
21972: PUSH
21973: LD_EXP 77
21977: PUSH
21978: FOR_IN
21979: IFFALSE 22010
// if GetLives ( i ) < 1000 then
21981: LD_VAR 0 1
21985: PPUSH
21986: CALL_OW 256
21990: PUSH
21991: LD_INT 1000
21993: LESS
21994: IFFALSE 22008
// SetLives ( i , 1000 ) ;
21996: LD_VAR 0 1
22000: PPUSH
22001: LD_INT 1000
22003: PPUSH
22004: CALL_OW 234
22008: GO 21978
22010: POP
22011: POP
// end ;
22012: PPOPN 1
22014: END
// export function hHackInvincible ; var i ; begin
22015: LD_INT 0
22017: PPUSH
22018: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 2
22026: PUSH
22027: LD_INT 21
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 21
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: PPUSH
22052: CALL_OW 69
22056: PUSH
22057: FOR_IN
22058: IFFALSE 22119
// if IsSelected ( i ) then
22060: LD_VAR 0 2
22064: PPUSH
22065: CALL_OW 306
22069: IFFALSE 22117
// begin if i in hInvincible then
22071: LD_VAR 0 2
22075: PUSH
22076: LD_EXP 77
22080: IN
22081: IFFALSE 22101
// hInvincible := hInvincible diff i else
22083: LD_ADDR_EXP 77
22087: PUSH
22088: LD_EXP 77
22092: PUSH
22093: LD_VAR 0 2
22097: DIFF
22098: ST_TO_ADDR
22099: GO 22117
// hInvincible := hInvincible union i ;
22101: LD_ADDR_EXP 77
22105: PUSH
22106: LD_EXP 77
22110: PUSH
22111: LD_VAR 0 2
22115: UNION
22116: ST_TO_ADDR
// end ;
22117: GO 22057
22119: POP
22120: POP
// end ;
22121: LD_VAR 0 1
22125: RET
// export function hHackInvisible ; var i , j ; begin
22126: LD_INT 0
22128: PPUSH
22129: PPUSH
22130: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22131: LD_ADDR_VAR 0 2
22135: PUSH
22136: LD_INT 21
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 69
22150: PUSH
22151: FOR_IN
22152: IFFALSE 22176
// if IsSelected ( i ) then
22154: LD_VAR 0 2
22158: PPUSH
22159: CALL_OW 306
22163: IFFALSE 22174
// ComForceInvisible ( i ) ;
22165: LD_VAR 0 2
22169: PPUSH
22170: CALL_OW 496
22174: GO 22151
22176: POP
22177: POP
// end ;
22178: LD_VAR 0 1
22182: RET
// export function hHackChangeYourSide ; begin
22183: LD_INT 0
22185: PPUSH
// if your_side = 8 then
22186: LD_OWVAR 2
22190: PUSH
22191: LD_INT 8
22193: EQUAL
22194: IFFALSE 22206
// your_side := 0 else
22196: LD_ADDR_OWVAR 2
22200: PUSH
22201: LD_INT 0
22203: ST_TO_ADDR
22204: GO 22220
// your_side := your_side + 1 ;
22206: LD_ADDR_OWVAR 2
22210: PUSH
22211: LD_OWVAR 2
22215: PUSH
22216: LD_INT 1
22218: PLUS
22219: ST_TO_ADDR
// end ;
22220: LD_VAR 0 1
22224: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22225: LD_INT 0
22227: PPUSH
22228: PPUSH
22229: PPUSH
// for i in all_units do
22230: LD_ADDR_VAR 0 2
22234: PUSH
22235: LD_OWVAR 3
22239: PUSH
22240: FOR_IN
22241: IFFALSE 22319
// if IsSelected ( i ) then
22243: LD_VAR 0 2
22247: PPUSH
22248: CALL_OW 306
22252: IFFALSE 22317
// begin j := GetSide ( i ) ;
22254: LD_ADDR_VAR 0 3
22258: PUSH
22259: LD_VAR 0 2
22263: PPUSH
22264: CALL_OW 255
22268: ST_TO_ADDR
// if j = 8 then
22269: LD_VAR 0 3
22273: PUSH
22274: LD_INT 8
22276: EQUAL
22277: IFFALSE 22289
// j := 0 else
22279: LD_ADDR_VAR 0 3
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
22287: GO 22303
// j := j + 1 ;
22289: LD_ADDR_VAR 0 3
22293: PUSH
22294: LD_VAR 0 3
22298: PUSH
22299: LD_INT 1
22301: PLUS
22302: ST_TO_ADDR
// SetSide ( i , j ) ;
22303: LD_VAR 0 2
22307: PPUSH
22308: LD_VAR 0 3
22312: PPUSH
22313: CALL_OW 235
// end ;
22317: GO 22240
22319: POP
22320: POP
// end ;
22321: LD_VAR 0 1
22325: RET
// export function hHackFog ; begin
22326: LD_INT 0
22328: PPUSH
// FogOff ( true ) ;
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 344
// end ;
22336: LD_VAR 0 1
22340: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22341: LD_INT 0
22343: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22344: LD_VAR 0 1
22348: PPUSH
22349: LD_VAR 0 2
22353: PPUSH
22354: LD_VAR 0 3
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: CALL_OW 483
// CenterOnXY ( x , y ) ;
22369: LD_VAR 0 2
22373: PPUSH
22374: LD_VAR 0 3
22378: PPUSH
22379: CALL_OW 84
// end ;
22383: LD_VAR 0 4
22387: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22388: LD_INT 0
22390: PPUSH
22391: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22392: LD_VAR 0 1
22396: NOT
22397: IFTRUE 22416
22399: PUSH
22400: LD_VAR 0 2
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 488
22414: NOT
22415: OR
22416: IFTRUE 22451
22418: PUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 266
22428: PUSH
22429: LD_INT 3
22431: NONEQUAL
22432: IFFALSE 22450
22434: PUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 247
22444: PUSH
22445: LD_INT 1
22447: EQUAL
22448: NOT
22449: AND
22450: OR
22451: IFFALSE 22455
// exit ;
22453: GO 22737
// if GetType ( factory ) = unit_human then
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL_OW 247
22464: PUSH
22465: LD_INT 1
22467: EQUAL
22468: IFFALSE 22485
// factory := IsInUnit ( factory ) ;
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 310
22484: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 266
22494: PUSH
22495: LD_INT 3
22497: NONEQUAL
22498: IFFALSE 22502
// exit ;
22500: GO 22737
// for i := 1 to Count ( factoryWaypoints ) do
22502: LD_ADDR_VAR 0 5
22506: PUSH
22507: DOUBLE
22508: LD_INT 1
22510: DEC
22511: ST_TO_ADDR
22512: LD_EXP 78
22516: PPUSH
22517: CALL 26067 0 1
22521: PUSH
22522: FOR_TO
22523: IFFALSE 22685
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22525: LD_VAR 0 2
22529: PPUSH
22530: LD_VAR 0 3
22534: PPUSH
22535: CALL_OW 428
22539: PUSH
22540: LD_EXP 78
22544: PUSH
22545: LD_VAR 0 5
22549: ARRAY
22550: PUSH
22551: LD_INT 2
22553: ARRAY
22554: EQUAL
22555: IFFALSE 22587
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22557: LD_ADDR_EXP 78
22561: PUSH
22562: LD_EXP 78
22566: PPUSH
22567: LD_VAR 0 5
22571: PPUSH
22572: CALL_OW 3
22576: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22577: CALL 22742 0 0
// exit ;
22581: POP
22582: POP
22583: GO 22737
// end else
22585: GO 22683
// if factory = factoryWaypoints [ i ] [ 2 ] then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 78
22596: PUSH
22597: LD_VAR 0 5
22601: ARRAY
22602: PUSH
22603: LD_INT 2
22605: ARRAY
22606: EQUAL
22607: IFFALSE 22683
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22609: LD_ADDR_EXP 78
22613: PUSH
22614: LD_EXP 78
22618: PPUSH
22619: LD_VAR 0 5
22623: PPUSH
22624: CALL_OW 3
22628: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22629: LD_ADDR_EXP 78
22633: PUSH
22634: LD_EXP 78
22638: PPUSH
22639: LD_VAR 0 1
22643: PPUSH
22644: CALL_OW 255
22648: PUSH
22649: LD_VAR 0 1
22653: PUSH
22654: LD_VAR 0 2
22658: PUSH
22659: LD_VAR 0 3
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PPUSH
22670: CALL 62043 0 2
22674: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22675: CALL 22742 0 0
// exit ;
22679: POP
22680: POP
22681: GO 22737
// end ; end ;
22683: GO 22522
22685: POP
22686: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22687: LD_ADDR_EXP 78
22691: PUSH
22692: LD_EXP 78
22696: PPUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 255
22706: PUSH
22707: LD_VAR 0 1
22711: PUSH
22712: LD_VAR 0 2
22716: PUSH
22717: LD_VAR 0 3
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL 62043 0 2
22732: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22733: CALL 22742 0 0
// end ;
22737: LD_VAR 0 4
22741: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
22746: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22747: LD_STRING resetFactoryWaypoint();
22749: PPUSH
22750: CALL_OW 559
// if factoryWaypoints then
22754: LD_EXP 78
22758: IFFALSE 22879
// begin list := factoryWaypoints ;
22760: LD_ADDR_VAR 0 3
22764: PUSH
22765: LD_EXP 78
22769: ST_TO_ADDR
// for i := 1 to list do
22770: LD_ADDR_VAR 0 2
22774: PUSH
22775: DOUBLE
22776: LD_INT 1
22778: DEC
22779: ST_TO_ADDR
22780: LD_VAR 0 3
22784: PUSH
22785: FOR_TO
22786: IFFALSE 22877
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22788: LD_STRING setFactoryWaypointXY(
22790: PUSH
22791: LD_VAR 0 3
22795: PUSH
22796: LD_VAR 0 2
22800: ARRAY
22801: PUSH
22802: LD_INT 1
22804: ARRAY
22805: STR
22806: PUSH
22807: LD_STRING ,
22809: STR
22810: PUSH
22811: LD_VAR 0 3
22815: PUSH
22816: LD_VAR 0 2
22820: ARRAY
22821: PUSH
22822: LD_INT 2
22824: ARRAY
22825: STR
22826: PUSH
22827: LD_STRING ,
22829: STR
22830: PUSH
22831: LD_VAR 0 3
22835: PUSH
22836: LD_VAR 0 2
22840: ARRAY
22841: PUSH
22842: LD_INT 3
22844: ARRAY
22845: STR
22846: PUSH
22847: LD_STRING ,
22849: STR
22850: PUSH
22851: LD_VAR 0 3
22855: PUSH
22856: LD_VAR 0 2
22860: ARRAY
22861: PUSH
22862: LD_INT 4
22864: ARRAY
22865: STR
22866: PUSH
22867: LD_STRING )
22869: STR
22870: PPUSH
22871: CALL_OW 559
22875: GO 22785
22877: POP
22878: POP
// end ; end ;
22879: LD_VAR 0 1
22883: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22884: LD_INT 0
22886: PPUSH
// if HexInfo ( x , y ) = warehouse then
22887: LD_VAR 0 2
22891: PPUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: CALL_OW 428
22901: PUSH
22902: LD_VAR 0 1
22906: EQUAL
22907: IFFALSE 22934
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22909: LD_ADDR_EXP 80
22913: PUSH
22914: LD_EXP 80
22918: PPUSH
22919: LD_VAR 0 1
22923: PPUSH
22924: LD_INT 0
22926: PPUSH
22927: CALL_OW 1
22931: ST_TO_ADDR
22932: GO 22985
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22934: LD_ADDR_EXP 80
22938: PUSH
22939: LD_EXP 80
22943: PPUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 255
22958: PUSH
22959: LD_VAR 0 1
22963: PUSH
22964: LD_VAR 0 2
22968: PUSH
22969: LD_VAR 0 3
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL_OW 1
22984: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22985: CALL 22994 0 0
// end ;
22989: LD_VAR 0 4
22993: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
22998: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22999: LD_STRING resetWarehouseGatheringPoints();
23001: PPUSH
23002: CALL_OW 559
// if warehouseGatheringPoints then
23006: LD_EXP 80
23010: IFFALSE 23136
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23012: LD_ADDR_VAR 0 3
23016: PUSH
23017: LD_EXP 80
23021: PPUSH
23022: CALL 65977 0 1
23026: ST_TO_ADDR
// for i := 1 to list do
23027: LD_ADDR_VAR 0 2
23031: PUSH
23032: DOUBLE
23033: LD_INT 1
23035: DEC
23036: ST_TO_ADDR
23037: LD_VAR 0 3
23041: PUSH
23042: FOR_TO
23043: IFFALSE 23134
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23045: LD_STRING setWarehouseGatheringPointXY(
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PUSH
23059: LD_INT 1
23061: ARRAY
23062: STR
23063: PUSH
23064: LD_STRING ,
23066: STR
23067: PUSH
23068: LD_VAR 0 3
23072: PUSH
23073: LD_VAR 0 2
23077: ARRAY
23078: PUSH
23079: LD_INT 2
23081: ARRAY
23082: STR
23083: PUSH
23084: LD_STRING ,
23086: STR
23087: PUSH
23088: LD_VAR 0 3
23092: PUSH
23093: LD_VAR 0 2
23097: ARRAY
23098: PUSH
23099: LD_INT 3
23101: ARRAY
23102: STR
23103: PUSH
23104: LD_STRING ,
23106: STR
23107: PUSH
23108: LD_VAR 0 3
23112: PUSH
23113: LD_VAR 0 2
23117: ARRAY
23118: PUSH
23119: LD_INT 4
23121: ARRAY
23122: STR
23123: PUSH
23124: LD_STRING )
23126: STR
23127: PPUSH
23128: CALL_OW 559
23132: GO 23042
23134: POP
23135: POP
// end ; end ;
23136: LD_VAR 0 1
23140: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23141: LD_EXP 80
23145: IFFALSE 23840
23147: GO 23149
23149: DISABLE
23150: LD_INT 0
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
// begin enable ;
23161: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23162: LD_ADDR_VAR 0 3
23166: PUSH
23167: LD_EXP 80
23171: PPUSH
23172: CALL 65977 0 1
23176: ST_TO_ADDR
// if not list then
23177: LD_VAR 0 3
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23840
// for i := 1 to list do
23186: LD_ADDR_VAR 0 1
23190: PUSH
23191: DOUBLE
23192: LD_INT 1
23194: DEC
23195: ST_TO_ADDR
23196: LD_VAR 0 3
23200: PUSH
23201: FOR_TO
23202: IFFALSE 23838
// begin depot := list [ i ] [ 2 ] ;
23204: LD_ADDR_VAR 0 8
23208: PUSH
23209: LD_VAR 0 3
23213: PUSH
23214: LD_VAR 0 1
23218: ARRAY
23219: PUSH
23220: LD_INT 2
23222: ARRAY
23223: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23224: LD_ADDR_VAR 0 5
23228: PUSH
23229: LD_VAR 0 3
23233: PUSH
23234: LD_VAR 0 1
23238: ARRAY
23239: PUSH
23240: LD_INT 1
23242: ARRAY
23243: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23244: LD_VAR 0 8
23248: PPUSH
23249: CALL_OW 301
23253: IFTRUE 23272
23255: PUSH
23256: LD_VAR 0 5
23260: PUSH
23261: LD_VAR 0 8
23265: PPUSH
23266: CALL_OW 255
23270: NONEQUAL
23271: OR
23272: IFFALSE 23301
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23274: LD_ADDR_EXP 80
23278: PUSH
23279: LD_EXP 80
23283: PPUSH
23284: LD_VAR 0 8
23288: PPUSH
23289: LD_INT 0
23291: PPUSH
23292: CALL_OW 1
23296: ST_TO_ADDR
// exit ;
23297: POP
23298: POP
23299: GO 23840
// end ; x := list [ i ] [ 3 ] ;
23301: LD_ADDR_VAR 0 6
23305: PUSH
23306: LD_VAR 0 3
23310: PUSH
23311: LD_VAR 0 1
23315: ARRAY
23316: PUSH
23317: LD_INT 3
23319: ARRAY
23320: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23321: LD_ADDR_VAR 0 7
23325: PUSH
23326: LD_VAR 0 3
23330: PUSH
23331: LD_VAR 0 1
23335: ARRAY
23336: PUSH
23337: LD_INT 4
23339: ARRAY
23340: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23341: LD_ADDR_VAR 0 9
23345: PUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_VAR 0 7
23355: PPUSH
23356: LD_INT 16
23358: PPUSH
23359: CALL 64551 0 3
23363: ST_TO_ADDR
// if not cratesNearbyPoint then
23364: LD_VAR 0 9
23368: NOT
23369: IFFALSE 23375
// exit ;
23371: POP
23372: POP
23373: GO 23840
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23375: LD_ADDR_VAR 0 4
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_VAR 0 5
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 3
23394: PUSH
23395: LD_INT 60
23397: PUSH
23398: EMPTY
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 91
23407: PUSH
23408: LD_VAR 0 8
23412: PUSH
23413: LD_INT 6
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 25
23426: PUSH
23427: LD_INT 2
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 25
23436: PUSH
23437: LD_INT 16
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PPUSH
23455: CALL_OW 69
23459: PUSH
23460: LD_VAR 0 8
23464: PPUSH
23465: CALL_OW 313
23469: PPUSH
23470: LD_INT 3
23472: PUSH
23473: LD_INT 60
23475: PUSH
23476: EMPTY
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 25
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 25
23498: PUSH
23499: LD_INT 16
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PPUSH
23515: CALL_OW 72
23519: UNION
23520: ST_TO_ADDR
// if tmp then
23521: LD_VAR 0 4
23525: IFFALSE 23605
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23527: LD_ADDR_VAR 0 4
23531: PUSH
23532: LD_VAR 0 4
23536: PPUSH
23537: LD_INT 3
23539: PPUSH
23540: CALL 62358 0 2
23544: ST_TO_ADDR
// for j in tmp do
23545: LD_ADDR_VAR 0 2
23549: PUSH
23550: LD_VAR 0 4
23554: PUSH
23555: FOR_IN
23556: IFFALSE 23599
// begin if IsInUnit ( j ) then
23558: LD_VAR 0 2
23562: PPUSH
23563: CALL_OW 310
23567: IFFALSE 23578
// ComExit ( j ) ;
23569: LD_VAR 0 2
23573: PPUSH
23574: CALL 62441 0 1
// AddComCollect ( j , x , y ) ;
23578: LD_VAR 0 2
23582: PPUSH
23583: LD_VAR 0 6
23587: PPUSH
23588: LD_VAR 0 7
23592: PPUSH
23593: CALL_OW 177
// end ;
23597: GO 23555
23599: POP
23600: POP
// exit ;
23601: POP
23602: POP
23603: GO 23840
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23605: LD_ADDR_VAR 0 4
23609: PUSH
23610: LD_INT 22
23612: PUSH
23613: LD_VAR 0 5
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 91
23624: PUSH
23625: LD_VAR 0 8
23629: PUSH
23630: LD_INT 8
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 34
23643: PUSH
23644: LD_INT 12
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 34
23653: PUSH
23654: LD_INT 51
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 34
23663: PUSH
23664: LD_INT 32
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 34
23673: PUSH
23674: LD_INT 89
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 69
23697: ST_TO_ADDR
// if tmp then
23698: LD_VAR 0 4
23702: IFFALSE 23836
// begin for j in tmp do
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_VAR 0 4
23713: PUSH
23714: FOR_IN
23715: IFFALSE 23834
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23717: LD_VAR 0 2
23721: PPUSH
23722: CALL_OW 262
23726: PUSH
23727: LD_INT 3
23729: EQUAL
23730: IFTRUE 23747
23732: PUSH
23733: LD_VAR 0 2
23737: PPUSH
23738: CALL_OW 261
23742: PUSH
23743: LD_INT 20
23745: GREATER
23746: OR
23747: IFFALSE 23761
23749: PUSH
23750: LD_VAR 0 2
23754: PPUSH
23755: CALL_OW 314
23759: NOT
23760: AND
23761: IFFALSE 23791
23763: PUSH
23764: LD_VAR 0 2
23768: PPUSH
23769: CALL_OW 263
23773: PUSH
23774: LD_INT 1
23776: NONEQUAL
23777: IFTRUE 23790
23779: PUSH
23780: LD_VAR 0 2
23784: PPUSH
23785: CALL_OW 311
23789: OR
23790: AND
23791: IFFALSE 23832
// begin ComCollect ( j , x , y ) ;
23793: LD_VAR 0 2
23797: PPUSH
23798: LD_VAR 0 6
23802: PPUSH
23803: LD_VAR 0 7
23807: PPUSH
23808: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23812: LD_VAR 0 2
23816: PPUSH
23817: LD_VAR 0 8
23821: PPUSH
23822: CALL_OW 172
// exit ;
23826: POP
23827: POP
23828: POP
23829: POP
23830: GO 23840
// end ;
23832: GO 23714
23834: POP
23835: POP
// end ; end ;
23836: GO 23201
23838: POP
23839: POP
// end ; end_of_file
23840: PPOPN 9
23842: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
// if exist_mode then
23847: LD_VAR 0 2
23851: IFFALSE 23897
// begin unit := CreateCharacter ( prefix & ident ) ;
23853: LD_ADDR_VAR 0 5
23857: PUSH
23858: LD_VAR 0 3
23862: PUSH
23863: LD_VAR 0 1
23867: STR
23868: PPUSH
23869: CALL_OW 34
23873: ST_TO_ADDR
// if unit then
23874: LD_VAR 0 5
23878: IFFALSE 23895
// DeleteCharacters ( prefix & ident ) ;
23880: LD_VAR 0 3
23884: PUSH
23885: LD_VAR 0 1
23889: STR
23890: PPUSH
23891: CALL_OW 40
// end else
23895: GO 23912
// unit := NewCharacter ( ident ) ;
23897: LD_ADDR_VAR 0 5
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 25
23911: ST_TO_ADDR
// result := unit ;
23912: LD_ADDR_VAR 0 4
23916: PUSH
23917: LD_VAR 0 5
23921: ST_TO_ADDR
// end ;
23922: LD_VAR 0 4
23926: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
23927: LD_INT 0
23929: PPUSH
23930: PPUSH
// if exist_mode then
23931: LD_VAR 0 2
23935: IFFALSE 23960
// unit := CreateCharacter ( prefix & ident ) else
23937: LD_ADDR_VAR 0 5
23941: PUSH
23942: LD_VAR 0 3
23946: PUSH
23947: LD_VAR 0 1
23951: STR
23952: PPUSH
23953: CALL_OW 34
23957: ST_TO_ADDR
23958: GO 23975
// unit := NewCharacter ( ident ) ;
23960: LD_ADDR_VAR 0 5
23964: PUSH
23965: LD_VAR 0 1
23969: PPUSH
23970: CALL_OW 25
23974: ST_TO_ADDR
// result := unit ;
23975: LD_ADDR_VAR 0 4
23979: PUSH
23980: LD_VAR 0 5
23984: ST_TO_ADDR
// end ;
23985: LD_VAR 0 4
23989: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23990: LD_INT 0
23992: PPUSH
23993: PPUSH
// if not side or not nation then
23994: LD_VAR 0 1
23998: NOT
23999: IFTRUE 24008
24001: PUSH
24002: LD_VAR 0 2
24006: NOT
24007: OR
24008: IFFALSE 24012
// exit ;
24010: GO 24806
// case nation of nation_american :
24012: LD_VAR 0 2
24016: PUSH
24017: LD_INT 1
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24247
24025: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24026: LD_ADDR_VAR 0 4
24030: PUSH
24031: LD_INT 35
24033: PUSH
24034: LD_INT 45
24036: PUSH
24037: LD_INT 46
24039: PUSH
24040: LD_INT 47
24042: PUSH
24043: LD_INT 82
24045: PUSH
24046: LD_INT 83
24048: PUSH
24049: LD_INT 84
24051: PUSH
24052: LD_INT 85
24054: PUSH
24055: LD_INT 86
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: LD_INT 6
24066: PUSH
24067: LD_INT 15
24069: PUSH
24070: LD_INT 16
24072: PUSH
24073: LD_INT 7
24075: PUSH
24076: LD_INT 12
24078: PUSH
24079: LD_INT 13
24081: PUSH
24082: LD_INT 10
24084: PUSH
24085: LD_INT 14
24087: PUSH
24088: LD_INT 20
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 25
24099: PUSH
24100: LD_INT 32
24102: PUSH
24103: LD_INT 27
24105: PUSH
24106: LD_INT 36
24108: PUSH
24109: LD_INT 69
24111: PUSH
24112: LD_INT 39
24114: PUSH
24115: LD_INT 34
24117: PUSH
24118: LD_INT 40
24120: PUSH
24121: LD_INT 48
24123: PUSH
24124: LD_INT 49
24126: PUSH
24127: LD_INT 50
24129: PUSH
24130: LD_INT 51
24132: PUSH
24133: LD_INT 52
24135: PUSH
24136: LD_INT 53
24138: PUSH
24139: LD_INT 54
24141: PUSH
24142: LD_INT 55
24144: PUSH
24145: LD_INT 56
24147: PUSH
24148: LD_INT 57
24150: PUSH
24151: LD_INT 58
24153: PUSH
24154: LD_INT 59
24156: PUSH
24157: LD_INT 60
24159: PUSH
24160: LD_INT 61
24162: PUSH
24163: LD_INT 62
24165: PUSH
24166: LD_INT 80
24168: PUSH
24169: LD_INT 82
24171: PUSH
24172: LD_INT 83
24174: PUSH
24175: LD_INT 84
24177: PUSH
24178: LD_INT 85
24180: PUSH
24181: LD_INT 86
24183: PUSH
24184: LD_INT 90
24186: PUSH
24187: LD_INT 93
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: ST_TO_ADDR
24245: GO 24728
24247: LD_INT 2
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24489
24255: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24256: LD_ADDR_VAR 0 4
24260: PUSH
24261: LD_INT 35
24263: PUSH
24264: LD_INT 45
24266: PUSH
24267: LD_INT 46
24269: PUSH
24270: LD_INT 47
24272: PUSH
24273: LD_INT 82
24275: PUSH
24276: LD_INT 83
24278: PUSH
24279: LD_INT 84
24281: PUSH
24282: LD_INT 85
24284: PUSH
24285: LD_INT 87
24287: PUSH
24288: LD_INT 70
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: LD_INT 5
24305: PUSH
24306: LD_INT 6
24308: PUSH
24309: LD_INT 15
24311: PUSH
24312: LD_INT 18
24314: PUSH
24315: LD_INT 7
24317: PUSH
24318: LD_INT 17
24320: PUSH
24321: LD_INT 8
24323: PUSH
24324: LD_INT 20
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 22
24332: PUSH
24333: LD_INT 72
24335: PUSH
24336: LD_INT 26
24338: PUSH
24339: LD_INT 69
24341: PUSH
24342: LD_INT 39
24344: PUSH
24345: LD_INT 40
24347: PUSH
24348: LD_INT 41
24350: PUSH
24351: LD_INT 42
24353: PUSH
24354: LD_INT 43
24356: PUSH
24357: LD_INT 48
24359: PUSH
24360: LD_INT 49
24362: PUSH
24363: LD_INT 50
24365: PUSH
24366: LD_INT 51
24368: PUSH
24369: LD_INT 52
24371: PUSH
24372: LD_INT 53
24374: PUSH
24375: LD_INT 54
24377: PUSH
24378: LD_INT 55
24380: PUSH
24381: LD_INT 56
24383: PUSH
24384: LD_INT 60
24386: PUSH
24387: LD_INT 61
24389: PUSH
24390: LD_INT 62
24392: PUSH
24393: LD_INT 66
24395: PUSH
24396: LD_INT 67
24398: PUSH
24399: LD_INT 68
24401: PUSH
24402: LD_INT 81
24404: PUSH
24405: LD_INT 82
24407: PUSH
24408: LD_INT 83
24410: PUSH
24411: LD_INT 84
24413: PUSH
24414: LD_INT 85
24416: PUSH
24417: LD_INT 87
24419: PUSH
24420: LD_INT 88
24422: PUSH
24423: LD_INT 92
24425: PUSH
24426: LD_INT 94
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: ST_TO_ADDR
24487: GO 24728
24489: LD_INT 3
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24727
24497: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24498: LD_ADDR_VAR 0 4
24502: PUSH
24503: LD_INT 46
24505: PUSH
24506: LD_INT 47
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: LD_INT 82
24517: PUSH
24518: LD_INT 83
24520: PUSH
24521: LD_INT 84
24523: PUSH
24524: LD_INT 85
24526: PUSH
24527: LD_INT 86
24529: PUSH
24530: LD_INT 11
24532: PUSH
24533: LD_INT 9
24535: PUSH
24536: LD_INT 20
24538: PUSH
24539: LD_INT 19
24541: PUSH
24542: LD_INT 21
24544: PUSH
24545: LD_INT 24
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_INT 25
24553: PUSH
24554: LD_INT 28
24556: PUSH
24557: LD_INT 29
24559: PUSH
24560: LD_INT 30
24562: PUSH
24563: LD_INT 31
24565: PUSH
24566: LD_INT 37
24568: PUSH
24569: LD_INT 38
24571: PUSH
24572: LD_INT 32
24574: PUSH
24575: LD_INT 27
24577: PUSH
24578: LD_INT 33
24580: PUSH
24581: LD_INT 69
24583: PUSH
24584: LD_INT 39
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 40
24592: PUSH
24593: LD_INT 71
24595: PUSH
24596: LD_INT 23
24598: PUSH
24599: LD_INT 44
24601: PUSH
24602: LD_INT 48
24604: PUSH
24605: LD_INT 49
24607: PUSH
24608: LD_INT 50
24610: PUSH
24611: LD_INT 51
24613: PUSH
24614: LD_INT 52
24616: PUSH
24617: LD_INT 53
24619: PUSH
24620: LD_INT 54
24622: PUSH
24623: LD_INT 55
24625: PUSH
24626: LD_INT 56
24628: PUSH
24629: LD_INT 57
24631: PUSH
24632: LD_INT 58
24634: PUSH
24635: LD_INT 59
24637: PUSH
24638: LD_INT 63
24640: PUSH
24641: LD_INT 64
24643: PUSH
24644: LD_INT 65
24646: PUSH
24647: LD_INT 82
24649: PUSH
24650: LD_INT 83
24652: PUSH
24653: LD_INT 84
24655: PUSH
24656: LD_INT 85
24658: PUSH
24659: LD_INT 86
24661: PUSH
24662: LD_INT 89
24664: PUSH
24665: LD_INT 91
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: ST_TO_ADDR
24725: GO 24728
24727: POP
// if state > - 1 and state < 3 then
24728: LD_VAR 0 3
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: GREATER
24737: IFFALSE 24749
24739: PUSH
24740: LD_VAR 0 3
24744: PUSH
24745: LD_INT 3
24747: LESS
24748: AND
24749: IFFALSE 24806
// for i in result do
24751: LD_ADDR_VAR 0 5
24755: PUSH
24756: LD_VAR 0 4
24760: PUSH
24761: FOR_IN
24762: IFFALSE 24804
// if GetTech ( i , side ) <> state then
24764: LD_VAR 0 5
24768: PPUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 321
24778: PUSH
24779: LD_VAR 0 3
24783: NONEQUAL
24784: IFFALSE 24802
// result := result diff i ;
24786: LD_ADDR_VAR 0 4
24790: PUSH
24791: LD_VAR 0 4
24795: PUSH
24796: LD_VAR 0 5
24800: DIFF
24801: ST_TO_ADDR
24802: GO 24761
24804: POP
24805: POP
// end ;
24806: LD_VAR 0 4
24810: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24811: LD_INT 0
24813: PPUSH
24814: PPUSH
24815: PPUSH
// result := true ;
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 1
24823: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24824: LD_ADDR_VAR 0 5
24828: PUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: CALL_OW 480
24838: ST_TO_ADDR
// if not tmp then
24839: LD_VAR 0 5
24843: NOT
24844: IFFALSE 24848
// exit ;
24846: GO 24897
// for i in tmp do
24848: LD_ADDR_VAR 0 4
24852: PUSH
24853: LD_VAR 0 5
24857: PUSH
24858: FOR_IN
24859: IFFALSE 24895
// if GetTech ( i , side ) <> state_researched then
24861: LD_VAR 0 4
24865: PPUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 321
24875: PUSH
24876: LD_INT 2
24878: NONEQUAL
24879: IFFALSE 24893
// begin result := false ;
24881: LD_ADDR_VAR 0 3
24885: PUSH
24886: LD_INT 0
24888: ST_TO_ADDR
// exit ;
24889: POP
24890: POP
24891: GO 24897
// end ;
24893: GO 24858
24895: POP
24896: POP
// end ;
24897: LD_VAR 0 3
24901: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24902: LD_INT 0
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
24916: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24917: LD_VAR 0 1
24921: NOT
24922: IFTRUE 24939
24924: PUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 257
24934: PUSH
24935: LD_INT 9
24937: NONEQUAL
24938: OR
24939: IFFALSE 24943
// exit ;
24941: GO 25522
// side := GetSide ( unit ) ;
24943: LD_ADDR_VAR 0 9
24947: PUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 255
24957: ST_TO_ADDR
// tech_space := tech_spacanom ;
24958: LD_ADDR_VAR 0 12
24962: PUSH
24963: LD_INT 29
24965: ST_TO_ADDR
// tech_time := tech_taurad ;
24966: LD_ADDR_VAR 0 13
24970: PUSH
24971: LD_INT 28
24973: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24974: LD_ADDR_VAR 0 11
24978: PUSH
24979: LD_VAR 0 1
24983: PPUSH
24984: CALL_OW 310
24988: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24989: LD_VAR 0 11
24993: PPUSH
24994: CALL_OW 247
24998: PUSH
24999: LD_INT 2
25001: EQUAL
25002: IFFALSE 25006
// exit ;
25004: GO 25522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25006: LD_ADDR_VAR 0 8
25010: PUSH
25011: LD_INT 81
25013: PUSH
25014: LD_VAR 0 9
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 3
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 69
25048: ST_TO_ADDR
// if not tmp then
25049: LD_VAR 0 8
25053: NOT
25054: IFFALSE 25058
// exit ;
25056: GO 25522
// if in_unit then
25058: LD_VAR 0 11
25062: IFFALSE 25086
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25064: LD_ADDR_VAR 0 10
25068: PUSH
25069: LD_VAR 0 8
25073: PPUSH
25074: LD_VAR 0 11
25078: PPUSH
25079: CALL_OW 74
25083: ST_TO_ADDR
25084: GO 25106
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25086: LD_ADDR_VAR 0 10
25090: PUSH
25091: LD_VAR 0 8
25095: PPUSH
25096: LD_VAR 0 1
25100: PPUSH
25101: CALL_OW 74
25105: ST_TO_ADDR
// if not enemy then
25106: LD_VAR 0 10
25110: NOT
25111: IFFALSE 25115
// exit ;
25113: GO 25522
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25115: LD_VAR 0 11
25119: IFFALSE 25141
25121: PUSH
25122: LD_VAR 0 11
25126: PPUSH
25127: LD_VAR 0 10
25131: PPUSH
25132: CALL_OW 296
25136: PUSH
25137: LD_INT 13
25139: GREATER
25140: AND
25141: IFTRUE 25163
25143: PUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_VAR 0 10
25153: PPUSH
25154: CALL_OW 296
25158: PUSH
25159: LD_INT 12
25161: GREATER
25162: OR
25163: IFFALSE 25167
// exit ;
25165: GO 25522
// missile := [ 1 ] ;
25167: LD_ADDR_VAR 0 14
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25178: LD_VAR 0 9
25182: PPUSH
25183: LD_VAR 0 12
25187: PPUSH
25188: CALL_OW 325
25192: IFFALSE 25221
// missile := Replace ( missile , missile + 1 , 2 ) ;
25194: LD_ADDR_VAR 0 14
25198: PUSH
25199: LD_VAR 0 14
25203: PPUSH
25204: LD_VAR 0 14
25208: PUSH
25209: LD_INT 1
25211: PLUS
25212: PPUSH
25213: LD_INT 2
25215: PPUSH
25216: CALL_OW 1
25220: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25221: LD_VAR 0 9
25225: PPUSH
25226: LD_VAR 0 13
25230: PPUSH
25231: CALL_OW 325
25235: IFFALSE 25259
25237: PUSH
25238: LD_VAR 0 10
25242: PPUSH
25243: CALL_OW 255
25247: PPUSH
25248: LD_VAR 0 13
25252: PPUSH
25253: CALL_OW 325
25257: NOT
25258: AND
25259: IFFALSE 25288
// missile := Replace ( missile , missile + 1 , 3 ) ;
25261: LD_ADDR_VAR 0 14
25265: PUSH
25266: LD_VAR 0 14
25270: PPUSH
25271: LD_VAR 0 14
25275: PUSH
25276: LD_INT 1
25278: PLUS
25279: PPUSH
25280: LD_INT 3
25282: PPUSH
25283: CALL_OW 1
25287: ST_TO_ADDR
// if missile < 2 then
25288: LD_VAR 0 14
25292: PUSH
25293: LD_INT 2
25295: LESS
25296: IFFALSE 25300
// exit ;
25298: GO 25522
// x := GetX ( enemy ) ;
25300: LD_ADDR_VAR 0 4
25304: PUSH
25305: LD_VAR 0 10
25309: PPUSH
25310: CALL_OW 250
25314: ST_TO_ADDR
// y := GetY ( enemy ) ;
25315: LD_ADDR_VAR 0 5
25319: PUSH
25320: LD_VAR 0 10
25324: PPUSH
25325: CALL_OW 251
25329: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25330: LD_ADDR_VAR 0 6
25334: PUSH
25335: LD_VAR 0 4
25339: PUSH
25340: LD_INT 1
25342: NEG
25343: PPUSH
25344: LD_INT 1
25346: PPUSH
25347: CALL_OW 12
25351: PLUS
25352: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25353: LD_ADDR_VAR 0 7
25357: PUSH
25358: LD_VAR 0 5
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PPUSH
25367: LD_INT 1
25369: PPUSH
25370: CALL_OW 12
25374: PLUS
25375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25376: LD_VAR 0 6
25380: PPUSH
25381: LD_VAR 0 7
25385: PPUSH
25386: CALL_OW 488
25390: NOT
25391: IFFALSE 25413
// begin _x := x ;
25393: LD_ADDR_VAR 0 6
25397: PUSH
25398: LD_VAR 0 4
25402: ST_TO_ADDR
// _y := y ;
25403: LD_ADDR_VAR 0 7
25407: PUSH
25408: LD_VAR 0 5
25412: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25413: LD_ADDR_VAR 0 3
25417: PUSH
25418: LD_INT 1
25420: PPUSH
25421: LD_VAR 0 14
25425: PPUSH
25426: CALL_OW 12
25430: ST_TO_ADDR
// case i of 1 :
25431: LD_VAR 0 3
25435: PUSH
25436: LD_INT 1
25438: DOUBLE
25439: EQUAL
25440: IFTRUE 25444
25442: GO 25461
25444: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25445: LD_VAR 0 1
25449: PPUSH
25450: LD_VAR 0 10
25454: PPUSH
25455: CALL_OW 115
25459: GO 25522
25461: LD_INT 2
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25491
25469: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_VAR 0 6
25479: PPUSH
25480: LD_VAR 0 7
25484: PPUSH
25485: CALL_OW 153
25489: GO 25522
25491: LD_INT 3
25493: DOUBLE
25494: EQUAL
25495: IFTRUE 25499
25497: GO 25521
25499: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25500: LD_VAR 0 1
25504: PPUSH
25505: LD_VAR 0 6
25509: PPUSH
25510: LD_VAR 0 7
25514: PPUSH
25515: CALL_OW 154
25519: GO 25522
25521: POP
// end ;
25522: LD_VAR 0 2
25526: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25527: LD_INT 0
25529: PPUSH
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
25534: PPUSH
// if not unit or not building then
25535: LD_VAR 0 1
25539: NOT
25540: IFTRUE 25549
25542: PUSH
25543: LD_VAR 0 2
25547: NOT
25548: OR
25549: IFFALSE 25553
// exit ;
25551: GO 25711
// x := GetX ( building ) ;
25553: LD_ADDR_VAR 0 5
25557: PUSH
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 250
25567: ST_TO_ADDR
// y := GetY ( building ) ;
25568: LD_ADDR_VAR 0 6
25572: PUSH
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 251
25582: ST_TO_ADDR
// for i := 0 to 5 do
25583: LD_ADDR_VAR 0 4
25587: PUSH
25588: DOUBLE
25589: LD_INT 0
25591: DEC
25592: ST_TO_ADDR
25593: LD_INT 5
25595: PUSH
25596: FOR_TO
25597: IFFALSE 25709
// begin _x := ShiftX ( x , i , 3 ) ;
25599: LD_ADDR_VAR 0 7
25603: PUSH
25604: LD_VAR 0 5
25608: PPUSH
25609: LD_VAR 0 4
25613: PPUSH
25614: LD_INT 3
25616: PPUSH
25617: CALL_OW 272
25621: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25622: LD_ADDR_VAR 0 8
25626: PUSH
25627: LD_VAR 0 6
25631: PPUSH
25632: LD_VAR 0 4
25636: PPUSH
25637: LD_INT 3
25639: PPUSH
25640: CALL_OW 273
25644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25645: LD_VAR 0 7
25649: PPUSH
25650: LD_VAR 0 8
25654: PPUSH
25655: CALL_OW 488
25659: NOT
25660: IFFALSE 25664
// continue ;
25662: GO 25596
// if HexInfo ( _x , _y ) = 0 then
25664: LD_VAR 0 7
25668: PPUSH
25669: LD_VAR 0 8
25673: PPUSH
25674: CALL_OW 428
25678: PUSH
25679: LD_INT 0
25681: EQUAL
25682: IFFALSE 25707
// begin ComMoveXY ( unit , _x , _y ) ;
25684: LD_VAR 0 1
25688: PPUSH
25689: LD_VAR 0 7
25693: PPUSH
25694: LD_VAR 0 8
25698: PPUSH
25699: CALL_OW 111
// exit ;
25703: POP
25704: POP
25705: GO 25711
// end ; end ;
25707: GO 25596
25709: POP
25710: POP
// end ;
25711: LD_VAR 0 3
25715: RET
// export function ScanBase ( side , base_area ) ; begin
25716: LD_INT 0
25718: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_VAR 0 2
25728: PPUSH
25729: LD_INT 81
25731: PUSH
25732: LD_VAR 0 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 70
25745: ST_TO_ADDR
// end ;
25746: LD_VAR 0 3
25750: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25751: LD_INT 0
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
// result := false ;
25757: LD_ADDR_VAR 0 2
25761: PUSH
25762: LD_INT 0
25764: ST_TO_ADDR
// side := GetSide ( unit ) ;
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 255
25779: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25780: LD_ADDR_VAR 0 4
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 248
25794: ST_TO_ADDR
// case nat of 1 :
25795: LD_VAR 0 4
25799: PUSH
25800: LD_INT 1
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25819
25808: POP
// tech := tech_lassight ; 2 :
25809: LD_ADDR_VAR 0 5
25813: PUSH
25814: LD_INT 12
25816: ST_TO_ADDR
25817: GO 25858
25819: LD_INT 2
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25838
25827: POP
// tech := tech_mortar ; 3 :
25828: LD_ADDR_VAR 0 5
25832: PUSH
25833: LD_INT 41
25835: ST_TO_ADDR
25836: GO 25858
25838: LD_INT 3
25840: DOUBLE
25841: EQUAL
25842: IFTRUE 25846
25844: GO 25857
25846: POP
// tech := tech_bazooka ; end ;
25847: LD_ADDR_VAR 0 5
25851: PUSH
25852: LD_INT 44
25854: ST_TO_ADDR
25855: GO 25858
25857: POP
// if Researched ( side , tech ) then
25858: LD_VAR 0 3
25862: PPUSH
25863: LD_VAR 0 5
25867: PPUSH
25868: CALL_OW 325
25872: IFFALSE 25899
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25874: LD_ADDR_VAR 0 2
25878: PUSH
25879: LD_INT 5
25881: PUSH
25882: LD_INT 8
25884: PUSH
25885: LD_INT 9
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: PUSH
25893: LD_VAR 0 4
25897: ARRAY
25898: ST_TO_ADDR
// end ;
25899: LD_VAR 0 2
25903: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25904: LD_INT 0
25906: PPUSH
25907: PPUSH
25908: PPUSH
// if not mines then
25909: LD_VAR 0 2
25913: NOT
25914: IFFALSE 25918
// exit ;
25916: GO 26062
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25918: LD_ADDR_VAR 0 5
25922: PUSH
25923: LD_INT 81
25925: PUSH
25926: LD_VAR 0 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: LD_INT 21
25940: PUSH
25941: LD_INT 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PPUSH
25956: CALL_OW 69
25960: ST_TO_ADDR
// for i in mines do
25961: LD_ADDR_VAR 0 4
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 26060
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25974: LD_VAR 0 4
25978: PUSH
25979: LD_INT 1
25981: ARRAY
25982: PPUSH
25983: LD_VAR 0 4
25987: PUSH
25988: LD_INT 2
25990: ARRAY
25991: PPUSH
25992: CALL_OW 458
25996: NOT
25997: IFFALSE 26001
// continue ;
25999: GO 25971
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26001: LD_VAR 0 4
26005: PUSH
26006: LD_INT 1
26008: ARRAY
26009: PPUSH
26010: LD_VAR 0 4
26014: PUSH
26015: LD_INT 2
26017: ARRAY
26018: PPUSH
26019: CALL_OW 428
26023: PUSH
26024: LD_VAR 0 5
26028: IN
26029: IFFALSE 26058
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26031: LD_VAR 0 4
26035: PUSH
26036: LD_INT 1
26038: ARRAY
26039: PPUSH
26040: LD_VAR 0 4
26044: PUSH
26045: LD_INT 2
26047: ARRAY
26048: PPUSH
26049: LD_VAR 0 1
26053: PPUSH
26054: CALL_OW 456
// end ;
26058: GO 25971
26060: POP
26061: POP
// end ;
26062: LD_VAR 0 3
26066: RET
// export function Count ( array ) ; begin
26067: LD_INT 0
26069: PPUSH
// result := array + 0 ;
26070: LD_ADDR_VAR 0 2
26074: PUSH
26075: LD_VAR 0 1
26079: PUSH
26080: LD_INT 0
26082: PLUS
26083: ST_TO_ADDR
// end ;
26084: LD_VAR 0 2
26088: RET
// export function IsEmpty ( building ) ; begin
26089: LD_INT 0
26091: PPUSH
// if not building then
26092: LD_VAR 0 1
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26144
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: CALL_OW 255
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 58
26130: PUSH
26131: EMPTY
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: IN
26143: ST_TO_ADDR
// end ;
26144: LD_VAR 0 2
26148: RET
// export function IsNotFull ( building ) ; var places ; begin
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
// if not building then
26153: LD_VAR 0 1
26157: NOT
26158: IFFALSE 26162
// exit ;
26160: GO 26190
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26162: LD_ADDR_VAR 0 2
26166: PUSH
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_INT 3
26174: PUSH
26175: LD_INT 62
26177: PUSH
26178: EMPTY
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 72
26189: ST_TO_ADDR
// end ;
26190: LD_VAR 0 2
26194: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
// tmp := [ ] ;
26201: LD_ADDR_VAR 0 3
26205: PUSH
26206: EMPTY
26207: ST_TO_ADDR
// list := [ ] ;
26208: LD_ADDR_VAR 0 5
26212: PUSH
26213: EMPTY
26214: ST_TO_ADDR
// for i = 16 to 25 do
26215: LD_ADDR_VAR 0 4
26219: PUSH
26220: DOUBLE
26221: LD_INT 16
26223: DEC
26224: ST_TO_ADDR
26225: LD_INT 25
26227: PUSH
26228: FOR_TO
26229: IFFALSE 26302
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 3
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_VAR 0 1
26248: PPUSH
26249: CALL_OW 255
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 91
26260: PUSH
26261: LD_VAR 0 1
26265: PUSH
26266: LD_INT 6
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 30
26276: PUSH
26277: LD_VAR 0 4
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: PPUSH
26294: CALL_OW 69
26298: ADD
26299: ST_TO_ADDR
26300: GO 26228
26302: POP
26303: POP
// for i = 1 to tmp do
26304: LD_ADDR_VAR 0 4
26308: PUSH
26309: DOUBLE
26310: LD_INT 1
26312: DEC
26313: ST_TO_ADDR
26314: LD_VAR 0 3
26318: PUSH
26319: FOR_TO
26320: IFFALSE 26408
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26322: LD_ADDR_VAR 0 5
26326: PUSH
26327: LD_VAR 0 5
26331: PUSH
26332: LD_VAR 0 3
26336: PUSH
26337: LD_VAR 0 4
26341: ARRAY
26342: PPUSH
26343: CALL_OW 266
26347: PUSH
26348: LD_VAR 0 3
26352: PUSH
26353: LD_VAR 0 4
26357: ARRAY
26358: PPUSH
26359: CALL_OW 250
26363: PUSH
26364: LD_VAR 0 3
26368: PUSH
26369: LD_VAR 0 4
26373: ARRAY
26374: PPUSH
26375: CALL_OW 251
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_VAR 0 4
26389: ARRAY
26390: PPUSH
26391: CALL_OW 254
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: PUSH
26402: EMPTY
26403: LIST
26404: ADD
26405: ST_TO_ADDR
26406: GO 26319
26408: POP
26409: POP
// result := list ;
26410: LD_ADDR_VAR 0 2
26414: PUSH
26415: LD_VAR 0 5
26419: ST_TO_ADDR
// end ;
26420: LD_VAR 0 2
26424: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26425: LD_INT 0
26427: PPUSH
26428: PPUSH
26429: PPUSH
26430: PPUSH
26431: PPUSH
26432: PPUSH
26433: PPUSH
// if not factory then
26434: LD_VAR 0 1
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 27046
// if control = control_apeman then
26443: LD_VAR 0 4
26447: PUSH
26448: LD_INT 5
26450: EQUAL
26451: IFFALSE 26560
// begin tmp := UnitsInside ( factory ) ;
26453: LD_ADDR_VAR 0 8
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 313
26467: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26468: LD_VAR 0 8
26472: PPUSH
26473: LD_INT 25
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 72
26487: NOT
26488: IFFALSE 26498
// control := control_manual ;
26490: LD_ADDR_VAR 0 4
26494: PUSH
26495: LD_INT 1
26497: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26498: LD_ADDR_VAR 0 8
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL 26195 0 1
26512: ST_TO_ADDR
// if tmp then
26513: LD_VAR 0 8
26517: IFFALSE 26560
// begin for i in tmp do
26519: LD_ADDR_VAR 0 7
26523: PUSH
26524: LD_VAR 0 8
26528: PUSH
26529: FOR_IN
26530: IFFALSE 26558
// if i [ 1 ] = b_ext_radio then
26532: LD_VAR 0 7
26536: PUSH
26537: LD_INT 1
26539: ARRAY
26540: PUSH
26541: LD_INT 22
26543: EQUAL
26544: IFFALSE 26556
// begin control := control_remote ;
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: LD_INT 2
26553: ST_TO_ADDR
// break ;
26554: GO 26558
// end ;
26556: GO 26529
26558: POP
26559: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26560: LD_VAR 0 1
26564: PPUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_VAR 0 3
26574: PPUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: LD_VAR 0 5
26584: PPUSH
26585: CALL_OW 448
26589: IFFALSE 26624
// begin result := [ chassis , engine , control , weapon ] ;
26591: LD_ADDR_VAR 0 6
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 4
26610: PUSH
26611: LD_VAR 0 5
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// exit ;
26622: GO 27046
// end ; _chassis := AvailableChassisList ( factory ) ;
26624: LD_ADDR_VAR 0 9
26628: PUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 475
26638: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26639: LD_ADDR_VAR 0 11
26643: PUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 476
26653: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26654: LD_ADDR_VAR 0 12
26658: PUSH
26659: LD_VAR 0 1
26663: PPUSH
26664: CALL_OW 477
26668: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26669: LD_ADDR_VAR 0 10
26673: PUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 478
26683: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26684: LD_VAR 0 9
26688: NOT
26689: IFTRUE 26698
26691: PUSH
26692: LD_VAR 0 11
26696: NOT
26697: OR
26698: IFTRUE 26707
26700: PUSH
26701: LD_VAR 0 12
26705: NOT
26706: OR
26707: IFTRUE 26716
26709: PUSH
26710: LD_VAR 0 10
26714: NOT
26715: OR
26716: IFFALSE 26751
// begin result := [ chassis , engine , control , weapon ] ;
26718: LD_ADDR_VAR 0 6
26722: PUSH
26723: LD_VAR 0 2
26727: PUSH
26728: LD_VAR 0 3
26732: PUSH
26733: LD_VAR 0 4
26737: PUSH
26738: LD_VAR 0 5
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: ST_TO_ADDR
// exit ;
26749: GO 27046
// end ; if not chassis in _chassis then
26751: LD_VAR 0 2
26755: PUSH
26756: LD_VAR 0 9
26760: IN
26761: NOT
26762: IFFALSE 26788
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: LD_VAR 0 9
26773: PUSH
26774: LD_INT 1
26776: PPUSH
26777: LD_VAR 0 9
26781: PPUSH
26782: CALL_OW 12
26786: ARRAY
26787: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26788: LD_VAR 0 2
26792: PPUSH
26793: LD_VAR 0 3
26797: PPUSH
26798: CALL 27051 0 2
26802: NOT
26803: IFFALSE 26864
// repeat engine := _engine [ 1 ] ;
26805: LD_ADDR_VAR 0 3
26809: PUSH
26810: LD_VAR 0 11
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26819: LD_ADDR_VAR 0 11
26823: PUSH
26824: LD_VAR 0 11
26828: PPUSH
26829: LD_INT 1
26831: PPUSH
26832: CALL_OW 3
26836: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26837: LD_VAR 0 2
26841: PPUSH
26842: LD_VAR 0 3
26846: PPUSH
26847: CALL 27051 0 2
26851: IFTRUE 26862
26853: PUSH
26854: LD_VAR 0 11
26858: PUSH
26859: EMPTY
26860: EQUAL
26861: OR
26862: IFFALSE 26805
// if not control in _control then
26864: LD_VAR 0 4
26868: PUSH
26869: LD_VAR 0 12
26873: IN
26874: NOT
26875: IFFALSE 26901
// control := _control [ rand ( 1 , _control ) ] ;
26877: LD_ADDR_VAR 0 4
26881: PUSH
26882: LD_VAR 0 12
26886: PUSH
26887: LD_INT 1
26889: PPUSH
26890: LD_VAR 0 12
26894: PPUSH
26895: CALL_OW 12
26899: ARRAY
26900: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26901: LD_VAR 0 2
26905: PPUSH
26906: LD_VAR 0 5
26910: PPUSH
26911: CALL 27273 0 2
26915: NOT
26916: IFFALSE 26977
// repeat weapon := _weapon [ 1 ] ;
26918: LD_ADDR_VAR 0 5
26922: PUSH
26923: LD_VAR 0 10
26927: PUSH
26928: LD_INT 1
26930: ARRAY
26931: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26932: LD_ADDR_VAR 0 10
26936: PUSH
26937: LD_VAR 0 10
26941: PPUSH
26942: LD_INT 1
26944: PPUSH
26945: CALL_OW 3
26949: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL 27273 0 2
26964: IFTRUE 26975
26966: PUSH
26967: LD_VAR 0 10
26971: PUSH
26972: EMPTY
26973: EQUAL
26974: OR
26975: IFFALSE 26918
// result := [ ] ;
26977: LD_ADDR_VAR 0 6
26981: PUSH
26982: EMPTY
26983: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26984: LD_VAR 0 1
26988: PPUSH
26989: LD_VAR 0 2
26993: PPUSH
26994: LD_VAR 0 3
26998: PPUSH
26999: LD_VAR 0 4
27003: PPUSH
27004: LD_VAR 0 5
27008: PPUSH
27009: CALL_OW 448
27013: IFFALSE 27046
// result := [ chassis , engine , control , weapon ] ;
27015: LD_ADDR_VAR 0 6
27019: PUSH
27020: LD_VAR 0 2
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: LD_VAR 0 4
27034: PUSH
27035: LD_VAR 0 5
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: ST_TO_ADDR
// end ;
27046: LD_VAR 0 6
27050: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27051: LD_INT 0
27053: PPUSH
// if not chassis or not engine then
27054: LD_VAR 0 1
27058: NOT
27059: IFTRUE 27068
27061: PUSH
27062: LD_VAR 0 2
27066: NOT
27067: OR
27068: IFFALSE 27072
// exit ;
27070: GO 27268
// case engine of engine_solar :
27072: LD_VAR 0 2
27076: PUSH
27077: LD_INT 2
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27123
27085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_INT 11
27093: PUSH
27094: LD_INT 12
27096: PUSH
27097: LD_INT 13
27099: PUSH
27100: LD_INT 14
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: ST_TO_ADDR
27121: GO 27252
27123: LD_INT 1
27125: DOUBLE
27126: EQUAL
27127: IFTRUE 27131
27129: GO 27193
27131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27132: LD_ADDR_VAR 0 3
27136: PUSH
27137: LD_INT 11
27139: PUSH
27140: LD_INT 12
27142: PUSH
27143: LD_INT 13
27145: PUSH
27146: LD_INT 14
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: LD_INT 4
27160: PUSH
27161: LD_INT 5
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 23
27169: PUSH
27170: LD_INT 22
27172: PUSH
27173: LD_INT 24
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
27191: GO 27252
27193: LD_INT 3
27195: DOUBLE
27196: EQUAL
27197: IFTRUE 27201
27199: GO 27251
27201: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27202: LD_ADDR_VAR 0 3
27206: PUSH
27207: LD_INT 13
27209: PUSH
27210: LD_INT 14
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 4
27221: PUSH
27222: LD_INT 5
27224: PUSH
27225: LD_INT 21
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_INT 23
27233: PUSH
27234: LD_INT 24
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
27249: GO 27252
27251: POP
// result := ( chassis in result ) ;
27252: LD_ADDR_VAR 0 3
27256: PUSH
27257: LD_VAR 0 1
27261: PUSH
27262: LD_VAR 0 3
27266: IN
27267: ST_TO_ADDR
// end ;
27268: LD_VAR 0 3
27272: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27273: LD_INT 0
27275: PPUSH
// if not chassis or not weapon then
27276: LD_VAR 0 1
27280: NOT
27281: IFTRUE 27290
27283: PUSH
27284: LD_VAR 0 2
27288: NOT
27289: OR
27290: IFFALSE 27294
// exit ;
27292: GO 28388
// case weapon of us_machine_gun :
27294: LD_VAR 0 2
27298: PUSH
27299: LD_INT 2
27301: DOUBLE
27302: EQUAL
27303: IFTRUE 27307
27305: GO 27337
27307: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 3
27321: PUSH
27322: LD_INT 4
27324: PUSH
27325: LD_INT 5
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
27335: GO 28372
27337: LD_INT 3
27339: DOUBLE
27340: EQUAL
27341: IFTRUE 27345
27343: GO 27375
27345: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27346: LD_ADDR_VAR 0 3
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 2
27356: PUSH
27357: LD_INT 3
27359: PUSH
27360: LD_INT 4
27362: PUSH
27363: LD_INT 5
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
27373: GO 28372
27375: LD_INT 11
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27413
27383: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 3
27397: PUSH
27398: LD_INT 4
27400: PUSH
27401: LD_INT 5
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
27411: GO 28372
27413: LD_INT 4
27415: DOUBLE
27416: EQUAL
27417: IFTRUE 27421
27419: GO 27447
27421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: LD_INT 2
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 4
27435: PUSH
27436: LD_INT 5
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: ST_TO_ADDR
27445: GO 28372
27447: LD_INT 5
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27481
27455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 4
27469: PUSH
27470: LD_INT 5
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 28372
27481: LD_INT 9
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27515
27489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27490: LD_ADDR_VAR 0 3
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 4
27503: PUSH
27504: LD_INT 5
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 28372
27515: LD_INT 7
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27549
27523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 3
27534: PUSH
27535: LD_INT 4
27537: PUSH
27538: LD_INT 5
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
27547: GO 28372
27549: LD_INT 12
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27583
27557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: LD_INT 4
27571: PUSH
27572: LD_INT 5
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
27581: GO 28372
27583: LD_INT 13
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27617
27591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 4
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
27615: GO 28372
27617: LD_INT 14
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27643
27625: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: LD_INT 4
27633: PUSH
27634: LD_INT 5
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: ST_TO_ADDR
27641: GO 28372
27643: LD_INT 6
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 27669
27651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_INT 4
27659: PUSH
27660: LD_INT 5
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: ST_TO_ADDR
27667: GO 28372
27669: LD_INT 10
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27695
27677: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_INT 4
27685: PUSH
27686: LD_INT 5
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: ST_TO_ADDR
27693: GO 28372
27695: LD_INT 22
27697: DOUBLE
27698: EQUAL
27699: IFTRUE 27703
27701: GO 27729
27703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27704: LD_ADDR_VAR 0 3
27708: PUSH
27709: LD_INT 11
27711: PUSH
27712: LD_INT 12
27714: PUSH
27715: LD_INT 13
27717: PUSH
27718: LD_INT 14
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
27727: GO 28372
27729: LD_INT 23
27731: DOUBLE
27732: EQUAL
27733: IFTRUE 27737
27735: GO 27763
27737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_INT 11
27745: PUSH
27746: LD_INT 12
27748: PUSH
27749: LD_INT 13
27751: PUSH
27752: LD_INT 14
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
27761: GO 28372
27763: LD_INT 24
27765: DOUBLE
27766: EQUAL
27767: IFTRUE 27771
27769: GO 27797
27771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27772: LD_ADDR_VAR 0 3
27776: PUSH
27777: LD_INT 11
27779: PUSH
27780: LD_INT 12
27782: PUSH
27783: LD_INT 13
27785: PUSH
27786: LD_INT 14
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
27795: GO 28372
27797: LD_INT 30
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27831
27805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_INT 11
27813: PUSH
27814: LD_INT 12
27816: PUSH
27817: LD_INT 13
27819: PUSH
27820: LD_INT 14
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: ST_TO_ADDR
27829: GO 28372
27831: LD_INT 25
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27857
27839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27840: LD_ADDR_VAR 0 3
27844: PUSH
27845: LD_INT 13
27847: PUSH
27848: LD_INT 14
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
27855: GO 28372
27857: LD_INT 27
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27883
27865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_INT 13
27873: PUSH
27874: LD_INT 14
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 28372
27883: LD_INT 92
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27917
27891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: LD_INT 11
27899: PUSH
27900: LD_INT 12
27902: PUSH
27903: LD_INT 13
27905: PUSH
27906: LD_INT 14
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 28372
27917: LD_INT 28
27919: DOUBLE
27920: EQUAL
27921: IFTRUE 27925
27923: GO 27943
27925: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_INT 13
27933: PUSH
27934: LD_INT 14
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: ST_TO_ADDR
27941: GO 28372
27943: LD_INT 29
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27969
27951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_INT 13
27959: PUSH
27960: LD_INT 14
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: ST_TO_ADDR
27967: GO 28372
27969: LD_INT 31
27971: DOUBLE
27972: EQUAL
27973: IFTRUE 27977
27975: GO 27995
27977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27978: LD_ADDR_VAR 0 3
27982: PUSH
27983: LD_INT 13
27985: PUSH
27986: LD_INT 14
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: ST_TO_ADDR
27993: GO 28372
27995: LD_INT 26
27997: DOUBLE
27998: EQUAL
27999: IFTRUE 28003
28001: GO 28021
28003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28004: LD_ADDR_VAR 0 3
28008: PUSH
28009: LD_INT 13
28011: PUSH
28012: LD_INT 14
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: ST_TO_ADDR
28019: GO 28372
28021: LD_INT 42
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28055
28029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_INT 21
28037: PUSH
28038: LD_INT 22
28040: PUSH
28041: LD_INT 23
28043: PUSH
28044: LD_INT 24
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
28053: GO 28372
28055: LD_INT 43
28057: DOUBLE
28058: EQUAL
28059: IFTRUE 28063
28061: GO 28089
28063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_INT 21
28071: PUSH
28072: LD_INT 22
28074: PUSH
28075: LD_INT 23
28077: PUSH
28078: LD_INT 24
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
28087: GO 28372
28089: LD_INT 44
28091: DOUBLE
28092: EQUAL
28093: IFTRUE 28097
28095: GO 28123
28097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_INT 21
28105: PUSH
28106: LD_INT 22
28108: PUSH
28109: LD_INT 23
28111: PUSH
28112: LD_INT 24
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
28121: GO 28372
28123: LD_INT 45
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28157
28131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28132: LD_ADDR_VAR 0 3
28136: PUSH
28137: LD_INT 21
28139: PUSH
28140: LD_INT 22
28142: PUSH
28143: LD_INT 23
28145: PUSH
28146: LD_INT 24
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: ST_TO_ADDR
28155: GO 28372
28157: LD_INT 49
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28191
28165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 22
28176: PUSH
28177: LD_INT 23
28179: PUSH
28180: LD_INT 24
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
28189: GO 28372
28191: LD_INT 51
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28225
28199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 21
28207: PUSH
28208: LD_INT 22
28210: PUSH
28211: LD_INT 23
28213: PUSH
28214: LD_INT 24
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 28372
28225: LD_INT 52
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28259
28233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 21
28241: PUSH
28242: LD_INT 22
28244: PUSH
28245: LD_INT 23
28247: PUSH
28248: LD_INT 24
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
28257: GO 28372
28259: LD_INT 53
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28285
28267: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_INT 23
28275: PUSH
28276: LD_INT 24
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: ST_TO_ADDR
28283: GO 28372
28285: LD_INT 46
28287: DOUBLE
28288: EQUAL
28289: IFTRUE 28293
28291: GO 28311
28293: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28294: LD_ADDR_VAR 0 3
28298: PUSH
28299: LD_INT 23
28301: PUSH
28302: LD_INT 24
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: ST_TO_ADDR
28309: GO 28372
28311: LD_INT 47
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28337
28319: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_INT 23
28327: PUSH
28328: LD_INT 24
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: ST_TO_ADDR
28335: GO 28372
28337: LD_INT 98
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28371
28345: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_INT 21
28353: PUSH
28354: LD_INT 22
28356: PUSH
28357: LD_INT 23
28359: PUSH
28360: LD_INT 24
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
28369: GO 28372
28371: POP
// result := ( chassis in result ) ;
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: LD_VAR 0 1
28381: PUSH
28382: LD_VAR 0 3
28386: IN
28387: ST_TO_ADDR
// end ;
28388: LD_VAR 0 3
28392: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
// result := array ;
28402: LD_ADDR_VAR 0 5
28406: PUSH
28407: LD_VAR 0 1
28411: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28412: LD_VAR 0 1
28416: NOT
28417: IFTRUE 28426
28419: PUSH
28420: LD_VAR 0 2
28424: NOT
28425: OR
28426: IFTRUE 28435
28428: PUSH
28429: LD_VAR 0 3
28433: NOT
28434: OR
28435: IFTRUE 28449
28437: PUSH
28438: LD_VAR 0 2
28442: PUSH
28443: LD_VAR 0 1
28447: GREATER
28448: OR
28449: IFTRUE 28463
28451: PUSH
28452: LD_VAR 0 3
28456: PUSH
28457: LD_VAR 0 1
28461: GREATER
28462: OR
28463: IFFALSE 28467
// exit ;
28465: GO 28763
// if direction then
28467: LD_VAR 0 4
28471: IFFALSE 28535
// begin d := 1 ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 1
28480: ST_TO_ADDR
// if i_from > i_to then
28481: LD_VAR 0 2
28485: PUSH
28486: LD_VAR 0 3
28490: GREATER
28491: IFFALSE 28517
// length := ( array - i_from ) + i_to else
28493: LD_ADDR_VAR 0 11
28497: PUSH
28498: LD_VAR 0 1
28502: PUSH
28503: LD_VAR 0 2
28507: MINUS
28508: PUSH
28509: LD_VAR 0 3
28513: PLUS
28514: ST_TO_ADDR
28515: GO 28533
// length := i_to - i_from ;
28517: LD_ADDR_VAR 0 11
28521: PUSH
28522: LD_VAR 0 3
28526: PUSH
28527: LD_VAR 0 2
28531: MINUS
28532: ST_TO_ADDR
// end else
28533: GO 28596
// begin d := - 1 ;
28535: LD_ADDR_VAR 0 9
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: ST_TO_ADDR
// if i_from > i_to then
28544: LD_VAR 0 2
28548: PUSH
28549: LD_VAR 0 3
28553: GREATER
28554: IFFALSE 28574
// length := i_from - i_to else
28556: LD_ADDR_VAR 0 11
28560: PUSH
28561: LD_VAR 0 2
28565: PUSH
28566: LD_VAR 0 3
28570: MINUS
28571: ST_TO_ADDR
28572: GO 28596
// length := ( array - i_to ) + i_from ;
28574: LD_ADDR_VAR 0 11
28578: PUSH
28579: LD_VAR 0 1
28583: PUSH
28584: LD_VAR 0 3
28588: MINUS
28589: PUSH
28590: LD_VAR 0 2
28594: PLUS
28595: ST_TO_ADDR
// end ; if not length then
28596: LD_VAR 0 11
28600: NOT
28601: IFFALSE 28605
// exit ;
28603: GO 28763
// tmp := array ;
28605: LD_ADDR_VAR 0 10
28609: PUSH
28610: LD_VAR 0 1
28614: ST_TO_ADDR
// for i = 1 to length do
28615: LD_ADDR_VAR 0 6
28619: PUSH
28620: DOUBLE
28621: LD_INT 1
28623: DEC
28624: ST_TO_ADDR
28625: LD_VAR 0 11
28629: PUSH
28630: FOR_TO
28631: IFFALSE 28751
// begin for j = 1 to array do
28633: LD_ADDR_VAR 0 7
28637: PUSH
28638: DOUBLE
28639: LD_INT 1
28641: DEC
28642: ST_TO_ADDR
28643: LD_VAR 0 1
28647: PUSH
28648: FOR_TO
28649: IFFALSE 28737
// begin k := j + d ;
28651: LD_ADDR_VAR 0 8
28655: PUSH
28656: LD_VAR 0 7
28660: PUSH
28661: LD_VAR 0 9
28665: PLUS
28666: ST_TO_ADDR
// if k > array then
28667: LD_VAR 0 8
28671: PUSH
28672: LD_VAR 0 1
28676: GREATER
28677: IFFALSE 28687
// k := 1 ;
28679: LD_ADDR_VAR 0 8
28683: PUSH
28684: LD_INT 1
28686: ST_TO_ADDR
// if not k then
28687: LD_VAR 0 8
28691: NOT
28692: IFFALSE 28704
// k := array ;
28694: LD_ADDR_VAR 0 8
28698: PUSH
28699: LD_VAR 0 1
28703: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28704: LD_ADDR_VAR 0 10
28708: PUSH
28709: LD_VAR 0 10
28713: PPUSH
28714: LD_VAR 0 8
28718: PPUSH
28719: LD_VAR 0 1
28723: PUSH
28724: LD_VAR 0 7
28728: ARRAY
28729: PPUSH
28730: CALL_OW 1
28734: ST_TO_ADDR
// end ;
28735: GO 28648
28737: POP
28738: POP
// array := tmp ;
28739: LD_ADDR_VAR 0 1
28743: PUSH
28744: LD_VAR 0 10
28748: ST_TO_ADDR
// end ;
28749: GO 28630
28751: POP
28752: POP
// result := array ;
28753: LD_ADDR_VAR 0 5
28757: PUSH
28758: LD_VAR 0 1
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 5
28767: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
// result := 0 ;
28772: LD_ADDR_VAR 0 3
28776: PUSH
28777: LD_INT 0
28779: ST_TO_ADDR
// if not array or not value in array then
28780: LD_VAR 0 1
28784: NOT
28785: IFTRUE 28800
28787: PUSH
28788: LD_VAR 0 2
28792: PUSH
28793: LD_VAR 0 1
28797: IN
28798: NOT
28799: OR
28800: IFFALSE 28804
// exit ;
28802: GO 28858
// for i = 1 to array do
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: DOUBLE
28810: LD_INT 1
28812: DEC
28813: ST_TO_ADDR
28814: LD_VAR 0 1
28818: PUSH
28819: FOR_TO
28820: IFFALSE 28856
// if value = array [ i ] then
28822: LD_VAR 0 2
28826: PUSH
28827: LD_VAR 0 1
28831: PUSH
28832: LD_VAR 0 4
28836: ARRAY
28837: EQUAL
28838: IFFALSE 28854
// begin result := i ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: LD_VAR 0 4
28849: ST_TO_ADDR
// exit ;
28850: POP
28851: POP
28852: GO 28858
// end ;
28854: GO 28819
28856: POP
28857: POP
// end ;
28858: LD_VAR 0 3
28862: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28863: LD_INT 0
28865: PPUSH
// vc_chassis := chassis ;
28866: LD_ADDR_OWVAR 37
28870: PUSH
28871: LD_VAR 0 1
28875: ST_TO_ADDR
// vc_engine := engine ;
28876: LD_ADDR_OWVAR 39
28880: PUSH
28881: LD_VAR 0 2
28885: ST_TO_ADDR
// vc_control := control ;
28886: LD_ADDR_OWVAR 38
28890: PUSH
28891: LD_VAR 0 3
28895: ST_TO_ADDR
// vc_weapon := weapon ;
28896: LD_ADDR_OWVAR 40
28900: PUSH
28901: LD_VAR 0 4
28905: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28906: LD_ADDR_OWVAR 41
28910: PUSH
28911: LD_VAR 0 5
28915: ST_TO_ADDR
// end ;
28916: LD_VAR 0 6
28920: RET
// export function WantPlant ( unit ) ; var task ; begin
28921: LD_INT 0
28923: PPUSH
28924: PPUSH
// result := false ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: LD_INT 0
28932: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 437
28947: ST_TO_ADDR
// if task then
28948: LD_VAR 0 3
28952: IFFALSE 28980
// if task [ 1 ] [ 1 ] = p then
28954: LD_VAR 0 3
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PUSH
28963: LD_INT 1
28965: ARRAY
28966: PUSH
28967: LD_STRING p
28969: EQUAL
28970: IFFALSE 28980
// result := true ;
28972: LD_ADDR_VAR 0 2
28976: PUSH
28977: LD_INT 1
28979: ST_TO_ADDR
// end ;
28980: LD_VAR 0 2
28984: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28985: LD_INT 0
28987: PPUSH
28988: PPUSH
28989: PPUSH
28990: PPUSH
// if pos < 1 then
28991: LD_VAR 0 2
28995: PUSH
28996: LD_INT 1
28998: LESS
28999: IFFALSE 29003
// exit ;
29001: GO 29306
// if pos = 1 then
29003: LD_VAR 0 2
29007: PUSH
29008: LD_INT 1
29010: EQUAL
29011: IFFALSE 29044
// result := Replace ( arr , pos [ 1 ] , value ) else
29013: LD_ADDR_VAR 0 4
29017: PUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: LD_VAR 0 2
29027: PUSH
29028: LD_INT 1
29030: ARRAY
29031: PPUSH
29032: LD_VAR 0 3
29036: PPUSH
29037: CALL_OW 1
29041: ST_TO_ADDR
29042: GO 29306
// begin tmp := arr ;
29044: LD_ADDR_VAR 0 6
29048: PUSH
29049: LD_VAR 0 1
29053: ST_TO_ADDR
// s_arr := [ tmp ] ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: LD_VAR 0 6
29063: PUSH
29064: EMPTY
29065: LIST
29066: ST_TO_ADDR
// for i = 1 to pos - 1 do
29067: LD_ADDR_VAR 0 5
29071: PUSH
29072: DOUBLE
29073: LD_INT 1
29075: DEC
29076: ST_TO_ADDR
29077: LD_VAR 0 2
29081: PUSH
29082: LD_INT 1
29084: MINUS
29085: PUSH
29086: FOR_TO
29087: IFFALSE 29132
// begin tmp := tmp [ pos [ i ] ] ;
29089: LD_ADDR_VAR 0 6
29093: PUSH
29094: LD_VAR 0 6
29098: PUSH
29099: LD_VAR 0 2
29103: PUSH
29104: LD_VAR 0 5
29108: ARRAY
29109: ARRAY
29110: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29111: LD_ADDR_VAR 0 7
29115: PUSH
29116: LD_VAR 0 7
29120: PUSH
29121: LD_VAR 0 6
29125: PUSH
29126: EMPTY
29127: LIST
29128: ADD
29129: ST_TO_ADDR
// end ;
29130: GO 29086
29132: POP
29133: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29134: LD_ADDR_VAR 0 6
29138: PUSH
29139: LD_VAR 0 6
29143: PPUSH
29144: LD_VAR 0 2
29148: PUSH
29149: LD_VAR 0 2
29153: ARRAY
29154: PPUSH
29155: LD_VAR 0 3
29159: PPUSH
29160: CALL_OW 1
29164: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29165: LD_ADDR_VAR 0 7
29169: PUSH
29170: LD_VAR 0 7
29174: PPUSH
29175: LD_VAR 0 7
29179: PPUSH
29180: LD_VAR 0 6
29184: PPUSH
29185: CALL_OW 1
29189: ST_TO_ADDR
// for i = s_arr downto 2 do
29190: LD_ADDR_VAR 0 5
29194: PUSH
29195: DOUBLE
29196: LD_VAR 0 7
29200: INC
29201: ST_TO_ADDR
29202: LD_INT 2
29204: PUSH
29205: FOR_DOWNTO
29206: IFFALSE 29290
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29208: LD_ADDR_VAR 0 6
29212: PUSH
29213: LD_VAR 0 7
29217: PUSH
29218: LD_VAR 0 5
29222: PUSH
29223: LD_INT 1
29225: MINUS
29226: ARRAY
29227: PPUSH
29228: LD_VAR 0 2
29232: PUSH
29233: LD_VAR 0 5
29237: PUSH
29238: LD_INT 1
29240: MINUS
29241: ARRAY
29242: PPUSH
29243: LD_VAR 0 7
29247: PUSH
29248: LD_VAR 0 5
29252: ARRAY
29253: PPUSH
29254: CALL_OW 1
29258: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29259: LD_ADDR_VAR 0 7
29263: PUSH
29264: LD_VAR 0 7
29268: PPUSH
29269: LD_VAR 0 5
29273: PUSH
29274: LD_INT 1
29276: MINUS
29277: PPUSH
29278: LD_VAR 0 6
29282: PPUSH
29283: CALL_OW 1
29287: ST_TO_ADDR
// end ;
29288: GO 29205
29290: POP
29291: POP
// result := s_arr [ 1 ] ;
29292: LD_ADDR_VAR 0 4
29296: PUSH
29297: LD_VAR 0 7
29301: PUSH
29302: LD_INT 1
29304: ARRAY
29305: ST_TO_ADDR
// end ; end ;
29306: LD_VAR 0 4
29310: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29311: LD_INT 0
29313: PPUSH
29314: PPUSH
// if not list then
29315: LD_VAR 0 1
29319: NOT
29320: IFFALSE 29324
// exit ;
29322: GO 29415
// i := list [ pos1 ] ;
29324: LD_ADDR_VAR 0 5
29328: PUSH
29329: LD_VAR 0 1
29333: PUSH
29334: LD_VAR 0 2
29338: ARRAY
29339: ST_TO_ADDR
// if not i then
29340: LD_VAR 0 5
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29415
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29349: LD_ADDR_VAR 0 1
29353: PUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_VAR 0 2
29363: PPUSH
29364: LD_VAR 0 1
29368: PUSH
29369: LD_VAR 0 3
29373: ARRAY
29374: PPUSH
29375: CALL_OW 1
29379: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29380: LD_ADDR_VAR 0 1
29384: PUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: LD_VAR 0 3
29394: PPUSH
29395: LD_VAR 0 5
29399: PPUSH
29400: CALL_OW 1
29404: ST_TO_ADDR
// result := list ;
29405: LD_ADDR_VAR 0 4
29409: PUSH
29410: LD_VAR 0 1
29414: ST_TO_ADDR
// end ;
29415: LD_VAR 0 4
29419: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29420: LD_INT 0
29422: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29423: LD_ADDR_VAR 0 5
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 250
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 251
29447: PPUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: LD_VAR 0 3
29457: PPUSH
29458: LD_VAR 0 4
29462: PPUSH
29463: CALL 29845 0 5
29467: ST_TO_ADDR
// end ;
29468: LD_VAR 0 5
29472: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
// if not list or not unit then
29479: LD_VAR 0 2
29483: NOT
29484: IFTRUE 29493
29486: PUSH
29487: LD_VAR 0 1
29491: NOT
29492: OR
29493: IFFALSE 29497
// exit ;
29495: GO 29840
// result := [ ] ;
29497: LD_ADDR_VAR 0 5
29501: PUSH
29502: EMPTY
29503: ST_TO_ADDR
// for i in list do
29504: LD_ADDR_VAR 0 6
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: FOR_IN
29515: IFFALSE 29733
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29517: LD_ADDR_VAR 0 8
29521: PUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_VAR 0 6
29531: PUSH
29532: LD_INT 1
29534: ARRAY
29535: PPUSH
29536: LD_VAR 0 6
29540: PUSH
29541: LD_INT 2
29543: ARRAY
29544: PPUSH
29545: CALL_OW 297
29549: ST_TO_ADDR
// if not Count ( result ) then
29550: LD_VAR 0 5
29554: PPUSH
29555: CALL 26067 0 1
29559: NOT
29560: IFFALSE 29593
// begin result := Join ( result , [ i , tmp ] ) ;
29562: LD_ADDR_VAR 0 5
29566: PUSH
29567: LD_VAR 0 5
29571: PPUSH
29572: LD_VAR 0 6
29576: PUSH
29577: LD_VAR 0 8
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PPUSH
29586: CALL 62043 0 2
29590: ST_TO_ADDR
// continue ;
29591: GO 29514
// end ; if result [ result ] [ 2 ] <= tmp then
29593: LD_VAR 0 5
29597: PUSH
29598: LD_VAR 0 5
29602: ARRAY
29603: PUSH
29604: LD_INT 2
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 8
29612: LESSEQUAL
29613: IFFALSE 29646
// result := Join ( result , [ i , tmp ] ) else
29615: LD_ADDR_VAR 0 5
29619: PUSH
29620: LD_VAR 0 5
29624: PPUSH
29625: LD_VAR 0 6
29629: PUSH
29630: LD_VAR 0 8
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL 62043 0 2
29643: ST_TO_ADDR
29644: GO 29731
// begin for j := 1 to Count ( result ) do
29646: LD_ADDR_VAR 0 7
29650: PUSH
29651: DOUBLE
29652: LD_INT 1
29654: DEC
29655: ST_TO_ADDR
29656: LD_VAR 0 5
29660: PPUSH
29661: CALL 26067 0 1
29665: PUSH
29666: FOR_TO
29667: IFFALSE 29729
// begin if tmp < result [ j ] [ 2 ] then
29669: LD_VAR 0 8
29673: PUSH
29674: LD_VAR 0 5
29678: PUSH
29679: LD_VAR 0 7
29683: ARRAY
29684: PUSH
29685: LD_INT 2
29687: ARRAY
29688: LESS
29689: IFFALSE 29727
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29691: LD_ADDR_VAR 0 5
29695: PUSH
29696: LD_VAR 0 5
29700: PPUSH
29701: LD_VAR 0 7
29705: PPUSH
29706: LD_VAR 0 6
29710: PUSH
29711: LD_VAR 0 8
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PPUSH
29720: CALL_OW 2
29724: ST_TO_ADDR
// break ;
29725: GO 29729
// end ; end ;
29727: GO 29666
29729: POP
29730: POP
// end ; end ;
29731: GO 29514
29733: POP
29734: POP
// if result and not asc then
29735: LD_VAR 0 5
29739: IFFALSE 29748
29741: PUSH
29742: LD_VAR 0 3
29746: NOT
29747: AND
29748: IFFALSE 29765
// result := ReverseArray ( result ) ;
29750: LD_ADDR_VAR 0 5
29754: PUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: CALL 57123 0 1
29764: ST_TO_ADDR
// tmp := [ ] ;
29765: LD_ADDR_VAR 0 8
29769: PUSH
29770: EMPTY
29771: ST_TO_ADDR
// if mode then
29772: LD_VAR 0 4
29776: IFFALSE 29840
// begin for i := 1 to result do
29778: LD_ADDR_VAR 0 6
29782: PUSH
29783: DOUBLE
29784: LD_INT 1
29786: DEC
29787: ST_TO_ADDR
29788: LD_VAR 0 5
29792: PUSH
29793: FOR_TO
29794: IFFALSE 29828
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29796: LD_ADDR_VAR 0 8
29800: PUSH
29801: LD_VAR 0 8
29805: PPUSH
29806: LD_VAR 0 5
29810: PUSH
29811: LD_VAR 0 6
29815: ARRAY
29816: PUSH
29817: LD_INT 1
29819: ARRAY
29820: PPUSH
29821: CALL 62043 0 2
29825: ST_TO_ADDR
29826: GO 29793
29828: POP
29829: POP
// result := tmp ;
29830: LD_ADDR_VAR 0 5
29834: PUSH
29835: LD_VAR 0 8
29839: ST_TO_ADDR
// end ; end ;
29840: LD_VAR 0 5
29844: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
// if not list then
29851: LD_VAR 0 3
29855: NOT
29856: IFFALSE 29860
// exit ;
29858: GO 30250
// result := [ ] ;
29860: LD_ADDR_VAR 0 6
29864: PUSH
29865: EMPTY
29866: ST_TO_ADDR
// for i in list do
29867: LD_ADDR_VAR 0 7
29871: PUSH
29872: LD_VAR 0 3
29876: PUSH
29877: FOR_IN
29878: IFFALSE 30080
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29880: LD_ADDR_VAR 0 9
29884: PUSH
29885: LD_VAR 0 7
29889: PPUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: LD_VAR 0 2
29899: PPUSH
29900: CALL_OW 297
29904: ST_TO_ADDR
// if not result then
29905: LD_VAR 0 6
29909: NOT
29910: IFFALSE 29936
// result := [ [ i , tmp ] ] else
29912: LD_ADDR_VAR 0 6
29916: PUSH
29917: LD_VAR 0 7
29921: PUSH
29922: LD_VAR 0 9
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: ST_TO_ADDR
29934: GO 30078
// begin if result [ result ] [ 2 ] <= tmp then
29936: LD_VAR 0 6
29940: PUSH
29941: LD_VAR 0 6
29945: ARRAY
29946: PUSH
29947: LD_INT 2
29949: ARRAY
29950: PUSH
29951: LD_VAR 0 9
29955: LESSEQUAL
29956: IFFALSE 29998
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29958: LD_ADDR_VAR 0 6
29962: PUSH
29963: LD_VAR 0 6
29967: PPUSH
29968: LD_VAR 0 6
29972: PUSH
29973: LD_INT 1
29975: PLUS
29976: PPUSH
29977: LD_VAR 0 7
29981: PUSH
29982: LD_VAR 0 9
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 2
29995: ST_TO_ADDR
29996: GO 30078
// for j := 1 to result do
29998: LD_ADDR_VAR 0 8
30002: PUSH
30003: DOUBLE
30004: LD_INT 1
30006: DEC
30007: ST_TO_ADDR
30008: LD_VAR 0 6
30012: PUSH
30013: FOR_TO
30014: IFFALSE 30076
// begin if tmp < result [ j ] [ 2 ] then
30016: LD_VAR 0 9
30020: PUSH
30021: LD_VAR 0 6
30025: PUSH
30026: LD_VAR 0 8
30030: ARRAY
30031: PUSH
30032: LD_INT 2
30034: ARRAY
30035: LESS
30036: IFFALSE 30074
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30038: LD_ADDR_VAR 0 6
30042: PUSH
30043: LD_VAR 0 6
30047: PPUSH
30048: LD_VAR 0 8
30052: PPUSH
30053: LD_VAR 0 7
30057: PUSH
30058: LD_VAR 0 9
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL_OW 2
30071: ST_TO_ADDR
// break ;
30072: GO 30076
// end ; end ;
30074: GO 30013
30076: POP
30077: POP
// end ; end ;
30078: GO 29877
30080: POP
30081: POP
// if result and not asc then
30082: LD_VAR 0 6
30086: IFFALSE 30095
30088: PUSH
30089: LD_VAR 0 4
30093: NOT
30094: AND
30095: IFFALSE 30170
// begin tmp := result ;
30097: LD_ADDR_VAR 0 9
30101: PUSH
30102: LD_VAR 0 6
30106: ST_TO_ADDR
// for i = tmp downto 1 do
30107: LD_ADDR_VAR 0 7
30111: PUSH
30112: DOUBLE
30113: LD_VAR 0 9
30117: INC
30118: ST_TO_ADDR
30119: LD_INT 1
30121: PUSH
30122: FOR_DOWNTO
30123: IFFALSE 30168
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30125: LD_ADDR_VAR 0 6
30129: PUSH
30130: LD_VAR 0 6
30134: PPUSH
30135: LD_VAR 0 9
30139: PUSH
30140: LD_VAR 0 7
30144: MINUS
30145: PUSH
30146: LD_INT 1
30148: PLUS
30149: PPUSH
30150: LD_VAR 0 9
30154: PUSH
30155: LD_VAR 0 7
30159: ARRAY
30160: PPUSH
30161: CALL_OW 1
30165: ST_TO_ADDR
30166: GO 30122
30168: POP
30169: POP
// end ; tmp := [ ] ;
30170: LD_ADDR_VAR 0 9
30174: PUSH
30175: EMPTY
30176: ST_TO_ADDR
// if mode then
30177: LD_VAR 0 5
30181: IFFALSE 30250
// begin for i = 1 to result do
30183: LD_ADDR_VAR 0 7
30187: PUSH
30188: DOUBLE
30189: LD_INT 1
30191: DEC
30192: ST_TO_ADDR
30193: LD_VAR 0 6
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30238
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: LD_VAR 0 9
30210: PPUSH
30211: LD_VAR 0 7
30215: PPUSH
30216: LD_VAR 0 6
30220: PUSH
30221: LD_VAR 0 7
30225: ARRAY
30226: PUSH
30227: LD_INT 1
30229: ARRAY
30230: PPUSH
30231: CALL_OW 1
30235: ST_TO_ADDR
30236: GO 30198
30238: POP
30239: POP
// result := tmp ;
30240: LD_ADDR_VAR 0 6
30244: PUSH
30245: LD_VAR 0 9
30249: ST_TO_ADDR
// end ; end ;
30250: LD_VAR 0 6
30254: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30255: LD_INT 0
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30263: LD_ADDR_VAR 0 5
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: ST_TO_ADDR
// if not x or not y then
30285: LD_VAR 0 2
30289: NOT
30290: IFTRUE 30299
30292: PUSH
30293: LD_VAR 0 3
30297: NOT
30298: OR
30299: IFFALSE 30303
// exit ;
30301: GO 31959
// if not range then
30303: LD_VAR 0 4
30307: NOT
30308: IFFALSE 30318
// range := 10 ;
30310: LD_ADDR_VAR 0 4
30314: PUSH
30315: LD_INT 10
30317: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30318: LD_ADDR_VAR 0 8
30322: PUSH
30323: LD_INT 81
30325: PUSH
30326: LD_VAR 0 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 92
30337: PUSH
30338: LD_VAR 0 2
30342: PUSH
30343: LD_VAR 0 3
30347: PUSH
30348: LD_VAR 0 4
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 21
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: ST_TO_ADDR
// if not tmp then
30386: LD_VAR 0 8
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 31959
// for i in tmp do
30395: LD_ADDR_VAR 0 6
30399: PUSH
30400: LD_VAR 0 8
30404: PUSH
30405: FOR_IN
30406: IFFALSE 31934
// begin points := [ 0 , 0 , 0 ] ;
30408: LD_ADDR_VAR 0 9
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: ST_TO_ADDR
// bpoints := 1 ;
30427: LD_ADDR_VAR 0 10
30431: PUSH
30432: LD_INT 1
30434: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30435: LD_VAR 0 6
30439: PPUSH
30440: CALL_OW 247
30444: PUSH
30445: LD_INT 1
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 31035
30453: POP
// begin if GetClass ( i ) = 1 then
30454: LD_VAR 0 6
30458: PPUSH
30459: CALL_OW 257
30463: PUSH
30464: LD_INT 1
30466: EQUAL
30467: IFFALSE 30488
// points := [ 10 , 5 , 3 ] ;
30469: LD_ADDR_VAR 0 9
30473: PUSH
30474: LD_INT 10
30476: PUSH
30477: LD_INT 5
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30488: LD_VAR 0 6
30492: PPUSH
30493: CALL_OW 257
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: LD_INT 4
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: IN
30512: IFFALSE 30533
// points := [ 3 , 2 , 1 ] ;
30514: LD_ADDR_VAR 0 9
30518: PUSH
30519: LD_INT 3
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30533: LD_VAR 0 6
30537: PPUSH
30538: CALL_OW 257
30542: PUSH
30543: LD_INT 5
30545: EQUAL
30546: IFFALSE 30567
// points := [ 130 , 5 , 2 ] ;
30548: LD_ADDR_VAR 0 9
30552: PUSH
30553: LD_INT 130
30555: PUSH
30556: LD_INT 5
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30567: LD_VAR 0 6
30571: PPUSH
30572: CALL_OW 257
30576: PUSH
30577: LD_INT 8
30579: EQUAL
30580: IFFALSE 30601
// points := [ 35 , 35 , 30 ] ;
30582: LD_ADDR_VAR 0 9
30586: PUSH
30587: LD_INT 35
30589: PUSH
30590: LD_INT 35
30592: PUSH
30593: LD_INT 30
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30601: LD_VAR 0 6
30605: PPUSH
30606: CALL_OW 257
30610: PUSH
30611: LD_INT 9
30613: EQUAL
30614: IFFALSE 30635
// points := [ 20 , 55 , 40 ] ;
30616: LD_ADDR_VAR 0 9
30620: PUSH
30621: LD_INT 20
30623: PUSH
30624: LD_INT 55
30626: PUSH
30627: LD_INT 40
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 257
30644: PUSH
30645: LD_INT 12
30647: PUSH
30648: LD_INT 16
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: IN
30655: IFFALSE 30676
// points := [ 5 , 3 , 2 ] ;
30657: LD_ADDR_VAR 0 9
30661: PUSH
30662: LD_INT 5
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30676: LD_VAR 0 6
30680: PPUSH
30681: CALL_OW 257
30685: PUSH
30686: LD_INT 17
30688: EQUAL
30689: IFFALSE 30710
// points := [ 100 , 50 , 75 ] ;
30691: LD_ADDR_VAR 0 9
30695: PUSH
30696: LD_INT 100
30698: PUSH
30699: LD_INT 50
30701: PUSH
30702: LD_INT 75
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 257
30719: PUSH
30720: LD_INT 15
30722: EQUAL
30723: IFFALSE 30744
// points := [ 10 , 5 , 3 ] ;
30725: LD_ADDR_VAR 0 9
30729: PUSH
30730: LD_INT 10
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30744: LD_VAR 0 6
30748: PPUSH
30749: CALL_OW 257
30753: PUSH
30754: LD_INT 14
30756: EQUAL
30757: IFFALSE 30778
// points := [ 10 , 0 , 0 ] ;
30759: LD_ADDR_VAR 0 9
30763: PUSH
30764: LD_INT 10
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30778: LD_VAR 0 6
30782: PPUSH
30783: CALL_OW 257
30787: PUSH
30788: LD_INT 11
30790: EQUAL
30791: IFFALSE 30812
// points := [ 30 , 10 , 5 ] ;
30793: LD_ADDR_VAR 0 9
30797: PUSH
30798: LD_INT 30
30800: PUSH
30801: LD_INT 10
30803: PUSH
30804: LD_INT 5
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30812: LD_VAR 0 1
30816: PPUSH
30817: LD_INT 5
30819: PPUSH
30820: CALL_OW 321
30824: PUSH
30825: LD_INT 2
30827: EQUAL
30828: IFFALSE 30845
// bpoints := bpoints * 1.8 ;
30830: LD_ADDR_VAR 0 10
30834: PUSH
30835: LD_VAR 0 10
30839: PUSH
30840: LD_REAL  1.80000000000000E+0000
30843: MUL
30844: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 257
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: LD_INT 4
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: IN
30873: IFFALSE 30893
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: LD_INT 51
30883: PPUSH
30884: CALL_OW 321
30888: PUSH
30889: LD_INT 2
30891: EQUAL
30892: AND
30893: IFFALSE 30910
// bpoints := bpoints * 1.2 ;
30895: LD_ADDR_VAR 0 10
30899: PUSH
30900: LD_VAR 0 10
30904: PUSH
30905: LD_REAL  1.20000000000000E+0000
30908: MUL
30909: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30910: LD_VAR 0 6
30914: PPUSH
30915: CALL_OW 257
30919: PUSH
30920: LD_INT 5
30922: PUSH
30923: LD_INT 7
30925: PUSH
30926: LD_INT 9
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: IN
30934: IFFALSE 30954
30936: PUSH
30937: LD_VAR 0 1
30941: PPUSH
30942: LD_INT 52
30944: PPUSH
30945: CALL_OW 321
30949: PUSH
30950: LD_INT 2
30952: EQUAL
30953: AND
30954: IFFALSE 30971
// bpoints := bpoints * 1.5 ;
30956: LD_ADDR_VAR 0 10
30960: PUSH
30961: LD_VAR 0 10
30965: PUSH
30966: LD_REAL  1.50000000000000E+0000
30969: MUL
30970: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_INT 66
30978: PPUSH
30979: CALL_OW 321
30983: PUSH
30984: LD_INT 2
30986: EQUAL
30987: IFFALSE 31004
// bpoints := bpoints * 1.1 ;
30989: LD_ADDR_VAR 0 10
30993: PUSH
30994: LD_VAR 0 10
30998: PUSH
30999: LD_REAL  1.10000000000000E+0000
31002: MUL
31003: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31004: LD_ADDR_VAR 0 10
31008: PUSH
31009: LD_VAR 0 10
31013: PUSH
31014: LD_VAR 0 6
31018: PPUSH
31019: LD_INT 1
31021: PPUSH
31022: CALL_OW 259
31026: PUSH
31027: LD_REAL  1.15000000000000E+0000
31030: MUL
31031: MUL
31032: ST_TO_ADDR
// end ; unit_vehicle :
31033: GO 31863
31035: LD_INT 2
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31851
31043: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31044: LD_VAR 0 6
31048: PPUSH
31049: CALL_OW 264
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 42
31059: PUSH
31060: LD_INT 24
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: IN
31068: IFFALSE 31089
// points := [ 25 , 5 , 3 ] ;
31070: LD_ADDR_VAR 0 9
31074: PUSH
31075: LD_INT 25
31077: PUSH
31078: LD_INT 5
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31089: LD_VAR 0 6
31093: PPUSH
31094: CALL_OW 264
31098: PUSH
31099: LD_INT 4
31101: PUSH
31102: LD_INT 43
31104: PUSH
31105: LD_INT 25
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: IN
31113: IFFALSE 31134
// points := [ 40 , 15 , 5 ] ;
31115: LD_ADDR_VAR 0 9
31119: PUSH
31120: LD_INT 40
31122: PUSH
31123: LD_INT 15
31125: PUSH
31126: LD_INT 5
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31134: LD_VAR 0 6
31138: PPUSH
31139: CALL_OW 264
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 23
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: IN
31154: IFFALSE 31175
// points := [ 7 , 25 , 8 ] ;
31156: LD_ADDR_VAR 0 9
31160: PUSH
31161: LD_INT 7
31163: PUSH
31164: LD_INT 25
31166: PUSH
31167: LD_INT 8
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31175: LD_VAR 0 6
31179: PPUSH
31180: CALL_OW 264
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 27
31190: PUSH
31191: LD_INT 44
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: IN
31199: IFFALSE 31220
// points := [ 14 , 50 , 16 ] ;
31201: LD_ADDR_VAR 0 9
31205: PUSH
31206: LD_INT 14
31208: PUSH
31209: LD_INT 50
31211: PUSH
31212: LD_INT 16
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31220: LD_VAR 0 6
31224: PPUSH
31225: CALL_OW 264
31229: PUSH
31230: LD_INT 6
31232: PUSH
31233: LD_INT 46
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: IN
31240: IFFALSE 31261
// points := [ 32 , 120 , 70 ] ;
31242: LD_ADDR_VAR 0 9
31246: PUSH
31247: LD_INT 32
31249: PUSH
31250: LD_INT 120
31252: PUSH
31253: LD_INT 70
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31261: LD_VAR 0 6
31265: PPUSH
31266: CALL_OW 264
31270: PUSH
31271: LD_INT 7
31273: PUSH
31274: LD_INT 28
31276: PUSH
31277: LD_INT 45
31279: PUSH
31280: LD_INT 92
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: IN
31289: IFFALSE 31310
// points := [ 35 , 20 , 45 ] ;
31291: LD_ADDR_VAR 0 9
31295: PUSH
31296: LD_INT 35
31298: PUSH
31299: LD_INT 20
31301: PUSH
31302: LD_INT 45
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31310: LD_VAR 0 6
31314: PPUSH
31315: CALL_OW 264
31319: PUSH
31320: LD_INT 47
31322: PUSH
31323: EMPTY
31324: LIST
31325: IN
31326: IFFALSE 31347
// points := [ 67 , 45 , 75 ] ;
31328: LD_ADDR_VAR 0 9
31332: PUSH
31333: LD_INT 67
31335: PUSH
31336: LD_INT 45
31338: PUSH
31339: LD_INT 75
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31347: LD_VAR 0 6
31351: PPUSH
31352: CALL_OW 264
31356: PUSH
31357: LD_INT 26
31359: PUSH
31360: EMPTY
31361: LIST
31362: IN
31363: IFFALSE 31384
// points := [ 120 , 30 , 80 ] ;
31365: LD_ADDR_VAR 0 9
31369: PUSH
31370: LD_INT 120
31372: PUSH
31373: LD_INT 30
31375: PUSH
31376: LD_INT 80
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31384: LD_VAR 0 6
31388: PPUSH
31389: CALL_OW 264
31393: PUSH
31394: LD_INT 22
31396: PUSH
31397: EMPTY
31398: LIST
31399: IN
31400: IFFALSE 31421
// points := [ 40 , 1 , 1 ] ;
31402: LD_ADDR_VAR 0 9
31406: PUSH
31407: LD_INT 40
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31421: LD_VAR 0 6
31425: PPUSH
31426: CALL_OW 264
31430: PUSH
31431: LD_INT 29
31433: PUSH
31434: EMPTY
31435: LIST
31436: IN
31437: IFFALSE 31458
// points := [ 70 , 200 , 400 ] ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_INT 70
31446: PUSH
31447: LD_INT 200
31449: PUSH
31450: LD_INT 400
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31458: LD_VAR 0 6
31462: PPUSH
31463: CALL_OW 264
31467: PUSH
31468: LD_INT 14
31470: PUSH
31471: LD_INT 53
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: IN
31478: IFFALSE 31499
// points := [ 40 , 10 , 20 ] ;
31480: LD_ADDR_VAR 0 9
31484: PUSH
31485: LD_INT 40
31487: PUSH
31488: LD_INT 10
31490: PUSH
31491: LD_INT 20
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31499: LD_VAR 0 6
31503: PPUSH
31504: CALL_OW 264
31508: PUSH
31509: LD_INT 9
31511: PUSH
31512: EMPTY
31513: LIST
31514: IN
31515: IFFALSE 31536
// points := [ 5 , 70 , 20 ] ;
31517: LD_ADDR_VAR 0 9
31521: PUSH
31522: LD_INT 5
31524: PUSH
31525: LD_INT 70
31527: PUSH
31528: LD_INT 20
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31536: LD_VAR 0 6
31540: PPUSH
31541: CALL_OW 264
31545: PUSH
31546: LD_INT 10
31548: PUSH
31549: EMPTY
31550: LIST
31551: IN
31552: IFFALSE 31573
// points := [ 35 , 110 , 70 ] ;
31554: LD_ADDR_VAR 0 9
31558: PUSH
31559: LD_INT 35
31561: PUSH
31562: LD_INT 110
31564: PUSH
31565: LD_INT 70
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31573: LD_VAR 0 6
31577: PPUSH
31578: CALL_OW 265
31582: PUSH
31583: LD_INT 25
31585: EQUAL
31586: IFFALSE 31607
// points := [ 80 , 65 , 100 ] ;
31588: LD_ADDR_VAR 0 9
31592: PUSH
31593: LD_INT 80
31595: PUSH
31596: LD_INT 65
31598: PUSH
31599: LD_INT 100
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31607: LD_VAR 0 6
31611: PPUSH
31612: CALL_OW 263
31616: PUSH
31617: LD_INT 1
31619: EQUAL
31620: IFFALSE 31655
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31622: LD_ADDR_VAR 0 10
31626: PUSH
31627: LD_VAR 0 10
31631: PUSH
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 311
31641: PPUSH
31642: LD_INT 3
31644: PPUSH
31645: CALL_OW 259
31649: PUSH
31650: LD_INT 4
31652: MUL
31653: MUL
31654: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31655: LD_VAR 0 6
31659: PPUSH
31660: CALL_OW 263
31664: PUSH
31665: LD_INT 2
31667: EQUAL
31668: IFFALSE 31719
// begin j := IsControledBy ( i ) ;
31670: LD_ADDR_VAR 0 7
31674: PUSH
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 312
31684: ST_TO_ADDR
// if j then
31685: LD_VAR 0 7
31689: IFFALSE 31719
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31691: LD_ADDR_VAR 0 10
31695: PUSH
31696: LD_VAR 0 10
31700: PUSH
31701: LD_VAR 0 7
31705: PPUSH
31706: LD_INT 3
31708: PPUSH
31709: CALL_OW 259
31713: PUSH
31714: LD_INT 3
31716: MUL
31717: MUL
31718: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31719: LD_VAR 0 6
31723: PPUSH
31724: CALL_OW 264
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: LD_INT 6
31734: PUSH
31735: LD_INT 46
31737: PUSH
31738: LD_INT 44
31740: PUSH
31741: LD_INT 47
31743: PUSH
31744: LD_INT 45
31746: PUSH
31747: LD_INT 28
31749: PUSH
31750: LD_INT 7
31752: PUSH
31753: LD_INT 27
31755: PUSH
31756: LD_INT 29
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: IN
31771: IFFALSE 31791
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: LD_INT 52
31781: PPUSH
31782: CALL_OW 321
31786: PUSH
31787: LD_INT 2
31789: EQUAL
31790: AND
31791: IFFALSE 31808
// bpoints := bpoints * 1.2 ;
31793: LD_ADDR_VAR 0 10
31797: PUSH
31798: LD_VAR 0 10
31802: PUSH
31803: LD_REAL  1.20000000000000E+0000
31806: MUL
31807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31808: LD_VAR 0 6
31812: PPUSH
31813: CALL_OW 264
31817: PUSH
31818: LD_INT 6
31820: PUSH
31821: LD_INT 46
31823: PUSH
31824: LD_INT 47
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: IN
31832: IFFALSE 31849
// bpoints := bpoints * 1.2 ;
31834: LD_ADDR_VAR 0 10
31838: PUSH
31839: LD_VAR 0 10
31843: PUSH
31844: LD_REAL  1.20000000000000E+0000
31847: MUL
31848: ST_TO_ADDR
// end ; unit_building :
31849: GO 31863
31851: LD_INT 3
31853: DOUBLE
31854: EQUAL
31855: IFTRUE 31859
31857: GO 31862
31859: POP
// ; end ;
31860: GO 31863
31862: POP
// for j = 1 to 3 do
31863: LD_ADDR_VAR 0 7
31867: PUSH
31868: DOUBLE
31869: LD_INT 1
31871: DEC
31872: ST_TO_ADDR
31873: LD_INT 3
31875: PUSH
31876: FOR_TO
31877: IFFALSE 31930
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31879: LD_ADDR_VAR 0 5
31883: PUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: LD_VAR 0 7
31893: PPUSH
31894: LD_VAR 0 5
31898: PUSH
31899: LD_VAR 0 7
31903: ARRAY
31904: PUSH
31905: LD_VAR 0 9
31909: PUSH
31910: LD_VAR 0 7
31914: ARRAY
31915: PUSH
31916: LD_VAR 0 10
31920: MUL
31921: PLUS
31922: PPUSH
31923: CALL_OW 1
31927: ST_TO_ADDR
31928: GO 31876
31930: POP
31931: POP
// end ;
31932: GO 30405
31934: POP
31935: POP
// result := Replace ( result , 4 , tmp ) ;
31936: LD_ADDR_VAR 0 5
31940: PUSH
31941: LD_VAR 0 5
31945: PPUSH
31946: LD_INT 4
31948: PPUSH
31949: LD_VAR 0 8
31953: PPUSH
31954: CALL_OW 1
31958: ST_TO_ADDR
// end ;
31959: LD_VAR 0 5
31963: RET
// export function DangerAtRange ( unit , range ) ; begin
31964: LD_INT 0
31966: PPUSH
// if not unit then
31967: LD_VAR 0 1
31971: NOT
31972: IFFALSE 31976
// exit ;
31974: GO 32021
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31976: LD_ADDR_VAR 0 3
31980: PUSH
31981: LD_VAR 0 1
31985: PPUSH
31986: CALL_OW 255
31990: PPUSH
31991: LD_VAR 0 1
31995: PPUSH
31996: CALL_OW 250
32000: PPUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: CALL_OW 251
32010: PPUSH
32011: LD_VAR 0 2
32015: PPUSH
32016: CALL 30255 0 4
32020: ST_TO_ADDR
// end ;
32021: LD_VAR 0 3
32025: RET
// export function DangerInArea ( side , area ) ; begin
32026: LD_INT 0
32028: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_VAR 0 2
32038: PPUSH
32039: LD_INT 81
32041: PUSH
32042: LD_VAR 0 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PPUSH
32051: CALL_OW 70
32055: ST_TO_ADDR
// end ;
32056: LD_VAR 0 3
32060: RET
// export function IsExtension ( b ) ; begin
32061: LD_INT 0
32063: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 1
32073: PUSH
32074: LD_INT 23
32076: PUSH
32077: LD_INT 20
32079: PUSH
32080: LD_INT 22
32082: PUSH
32083: LD_INT 17
32085: PUSH
32086: LD_INT 24
32088: PUSH
32089: LD_INT 21
32091: PUSH
32092: LD_INT 19
32094: PUSH
32095: LD_INT 16
32097: PUSH
32098: LD_INT 25
32100: PUSH
32101: LD_INT 18
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: IN
32116: ST_TO_ADDR
// end ;
32117: LD_VAR 0 2
32121: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
// result := [ ] ;
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: EMPTY
32133: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32134: LD_ADDR_VAR 0 5
32138: PUSH
32139: LD_VAR 0 2
32143: PPUSH
32144: LD_INT 21
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PPUSH
32154: CALL_OW 70
32158: ST_TO_ADDR
// if not tmp then
32159: LD_VAR 0 5
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32232
// if checkLink then
32168: LD_VAR 0 3
32172: IFFALSE 32222
// begin for i in tmp do
32174: LD_ADDR_VAR 0 6
32178: PUSH
32179: LD_VAR 0 5
32183: PUSH
32184: FOR_IN
32185: IFFALSE 32220
// if GetBase ( i ) <> base then
32187: LD_VAR 0 6
32191: PPUSH
32192: CALL_OW 274
32196: PUSH
32197: LD_VAR 0 1
32201: NONEQUAL
32202: IFFALSE 32218
// ComLinkToBase ( base , i ) ;
32204: LD_VAR 0 1
32208: PPUSH
32209: LD_VAR 0 6
32213: PPUSH
32214: CALL_OW 169
32218: GO 32184
32220: POP
32221: POP
// end ; result := tmp ;
32222: LD_ADDR_VAR 0 4
32226: PUSH
32227: LD_VAR 0 5
32231: ST_TO_ADDR
// end ;
32232: LD_VAR 0 4
32236: RET
// export function ComComplete ( units , b ) ; var i ; begin
32237: LD_INT 0
32239: PPUSH
32240: PPUSH
// if not units then
32241: LD_VAR 0 1
32245: NOT
32246: IFFALSE 32250
// exit ;
32248: GO 32340
// for i in units do
32250: LD_ADDR_VAR 0 4
32254: PUSH
32255: LD_VAR 0 1
32259: PUSH
32260: FOR_IN
32261: IFFALSE 32338
// if BuildingStatus ( b ) = bs_build then
32263: LD_VAR 0 2
32267: PPUSH
32268: CALL_OW 461
32272: PUSH
32273: LD_INT 1
32275: EQUAL
32276: IFFALSE 32336
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32278: LD_VAR 0 4
32282: PPUSH
32283: LD_STRING h
32285: PUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: CALL_OW 250
32295: PUSH
32296: LD_VAR 0 2
32300: PPUSH
32301: CALL_OW 251
32305: PUSH
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: PPUSH
32332: CALL_OW 446
32336: GO 32260
32338: POP
32339: POP
// end ;
32340: LD_VAR 0 3
32344: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32345: LD_INT 0
32347: PPUSH
32348: PPUSH
32349: PPUSH
32350: PPUSH
32351: PPUSH
32352: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32353: LD_VAR 0 1
32357: NOT
32358: IFTRUE 32375
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 263
32370: PUSH
32371: LD_INT 2
32373: NONEQUAL
32374: OR
32375: IFFALSE 32379
// exit ;
32377: GO 32695
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32379: LD_ADDR_VAR 0 6
32383: PUSH
32384: LD_INT 22
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 255
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 30
32406: PUSH
32407: LD_INT 36
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 34
32416: PUSH
32417: LD_INT 31
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: CALL_OW 69
32437: ST_TO_ADDR
// if not tmp then
32438: LD_VAR 0 6
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 32695
// result := [ ] ;
32447: LD_ADDR_VAR 0 2
32451: PUSH
32452: EMPTY
32453: ST_TO_ADDR
// for i in tmp do
32454: LD_ADDR_VAR 0 3
32458: PUSH
32459: LD_VAR 0 6
32463: PUSH
32464: FOR_IN
32465: IFFALSE 32536
// begin t := UnitsInside ( i ) ;
32467: LD_ADDR_VAR 0 4
32471: PUSH
32472: LD_VAR 0 3
32476: PPUSH
32477: CALL_OW 313
32481: ST_TO_ADDR
// if t then
32482: LD_VAR 0 4
32486: IFFALSE 32534
// for j in t do
32488: LD_ADDR_VAR 0 7
32492: PUSH
32493: LD_VAR 0 4
32497: PUSH
32498: FOR_IN
32499: IFFALSE 32532
// result := Replace ( result , result + 1 , j ) ;
32501: LD_ADDR_VAR 0 2
32505: PUSH
32506: LD_VAR 0 2
32510: PPUSH
32511: LD_VAR 0 2
32515: PUSH
32516: LD_INT 1
32518: PLUS
32519: PPUSH
32520: LD_VAR 0 7
32524: PPUSH
32525: CALL_OW 1
32529: ST_TO_ADDR
32530: GO 32498
32532: POP
32533: POP
// end ;
32534: GO 32464
32536: POP
32537: POP
// if not result then
32538: LD_VAR 0 2
32542: NOT
32543: IFFALSE 32547
// exit ;
32545: GO 32695
// mech := result [ 1 ] ;
32547: LD_ADDR_VAR 0 5
32551: PUSH
32552: LD_VAR 0 2
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: ST_TO_ADDR
// if result > 1 then
32561: LD_VAR 0 2
32565: PUSH
32566: LD_INT 1
32568: GREATER
32569: IFFALSE 32681
// begin for i = 2 to result do
32571: LD_ADDR_VAR 0 3
32575: PUSH
32576: DOUBLE
32577: LD_INT 2
32579: DEC
32580: ST_TO_ADDR
32581: LD_VAR 0 2
32585: PUSH
32586: FOR_TO
32587: IFFALSE 32679
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32589: LD_ADDR_VAR 0 4
32593: PUSH
32594: LD_VAR 0 2
32598: PUSH
32599: LD_VAR 0 3
32603: ARRAY
32604: PPUSH
32605: LD_INT 3
32607: PPUSH
32608: CALL_OW 259
32612: PUSH
32613: LD_VAR 0 2
32617: PUSH
32618: LD_VAR 0 3
32622: ARRAY
32623: PPUSH
32624: CALL_OW 432
32628: MINUS
32629: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32630: LD_VAR 0 4
32634: PUSH
32635: LD_VAR 0 5
32639: PPUSH
32640: LD_INT 3
32642: PPUSH
32643: CALL_OW 259
32647: PUSH
32648: LD_VAR 0 5
32652: PPUSH
32653: CALL_OW 432
32657: MINUS
32658: GREATEREQUAL
32659: IFFALSE 32677
// mech := result [ i ] ;
32661: LD_ADDR_VAR 0 5
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_VAR 0 3
32675: ARRAY
32676: ST_TO_ADDR
// end ;
32677: GO 32586
32679: POP
32680: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32681: LD_VAR 0 1
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: CALL_OW 135
// end ;
32695: LD_VAR 0 2
32699: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
// result := [ ] ;
32715: LD_ADDR_VAR 0 7
32719: PUSH
32720: EMPTY
32721: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32722: LD_VAR 0 1
32726: PPUSH
32727: CALL_OW 266
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: IN
32742: NOT
32743: IFFALSE 32747
// exit ;
32745: GO 34387
// if name then
32747: LD_VAR 0 3
32751: IFFALSE 32767
// SetBName ( base_dep , name ) ;
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_VAR 0 3
32762: PPUSH
32763: CALL_OW 500
// base := GetBase ( base_dep ) ;
32767: LD_ADDR_VAR 0 15
32771: PUSH
32772: LD_VAR 0 1
32776: PPUSH
32777: CALL_OW 274
32781: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32782: LD_ADDR_VAR 0 16
32786: PUSH
32787: LD_VAR 0 1
32791: PPUSH
32792: CALL_OW 255
32796: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32797: LD_ADDR_VAR 0 17
32801: PUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 248
32811: ST_TO_ADDR
// if sources then
32812: LD_VAR 0 5
32816: IFFALSE 32863
// for i = 1 to 3 do
32818: LD_ADDR_VAR 0 8
32822: PUSH
32823: DOUBLE
32824: LD_INT 1
32826: DEC
32827: ST_TO_ADDR
32828: LD_INT 3
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32861
// AddResourceType ( base , i , sources [ i ] ) ;
32834: LD_VAR 0 15
32838: PPUSH
32839: LD_VAR 0 8
32843: PPUSH
32844: LD_VAR 0 5
32848: PUSH
32849: LD_VAR 0 8
32853: ARRAY
32854: PPUSH
32855: CALL_OW 276
32859: GO 32831
32861: POP
32862: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32863: LD_ADDR_VAR 0 18
32867: PUSH
32868: LD_VAR 0 15
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_INT 1
32880: PPUSH
32881: CALL 32122 0 3
32885: ST_TO_ADDR
// InitHc ;
32886: CALL_OW 19
// InitUc ;
32890: CALL_OW 18
// uc_side := side ;
32894: LD_ADDR_OWVAR 20
32898: PUSH
32899: LD_VAR 0 16
32903: ST_TO_ADDR
// uc_nation := nation ;
32904: LD_ADDR_OWVAR 21
32908: PUSH
32909: LD_VAR 0 17
32913: ST_TO_ADDR
// if buildings then
32914: LD_VAR 0 18
32918: IFFALSE 34246
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32920: LD_ADDR_VAR 0 19
32924: PUSH
32925: LD_VAR 0 18
32929: PPUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 30
32935: PUSH
32936: LD_INT 29
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: LD_INT 30
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 72
32962: ST_TO_ADDR
// if tmp then
32963: LD_VAR 0 19
32967: IFFALSE 33015
// for i in tmp do
32969: LD_ADDR_VAR 0 8
32973: PUSH
32974: LD_VAR 0 19
32978: PUSH
32979: FOR_IN
32980: IFFALSE 33013
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32982: LD_VAR 0 8
32986: PPUSH
32987: CALL_OW 250
32991: PPUSH
32992: LD_VAR 0 8
32996: PPUSH
32997: CALL_OW 251
33001: PPUSH
33002: LD_VAR 0 16
33006: PPUSH
33007: CALL_OW 441
33011: GO 32979
33013: POP
33014: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33015: LD_VAR 0 18
33019: PPUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 30
33025: PUSH
33026: LD_INT 32
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 30
33035: PUSH
33036: LD_INT 33
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 72
33052: IFFALSE 33140
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33054: LD_ADDR_VAR 0 8
33058: PUSH
33059: LD_VAR 0 18
33063: PPUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 30
33069: PUSH
33070: LD_INT 32
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 30
33079: PUSH
33080: LD_INT 33
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: PPUSH
33092: CALL_OW 72
33096: PUSH
33097: FOR_IN
33098: IFFALSE 33138
// begin if not GetBWeapon ( i ) then
33100: LD_VAR 0 8
33104: PPUSH
33105: CALL_OW 269
33109: NOT
33110: IFFALSE 33136
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33112: LD_VAR 0 8
33116: PPUSH
33117: LD_VAR 0 8
33121: PPUSH
33122: LD_VAR 0 2
33126: PPUSH
33127: CALL 34392 0 2
33131: PPUSH
33132: CALL_OW 431
// end ;
33136: GO 33097
33138: POP
33139: POP
// end ; for i = 1 to personel do
33140: LD_ADDR_VAR 0 8
33144: PUSH
33145: DOUBLE
33146: LD_INT 1
33148: DEC
33149: ST_TO_ADDR
33150: LD_VAR 0 6
33154: PUSH
33155: FOR_TO
33156: IFFALSE 34226
// begin if i > 4 then
33158: LD_VAR 0 8
33162: PUSH
33163: LD_INT 4
33165: GREATER
33166: IFFALSE 33170
// break ;
33168: GO 34226
// case i of 1 :
33170: LD_VAR 0 8
33174: PUSH
33175: LD_INT 1
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33263
33183: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33184: LD_ADDR_VAR 0 12
33188: PUSH
33189: LD_VAR 0 18
33193: PPUSH
33194: LD_INT 22
33196: PUSH
33197: LD_VAR 0 16
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 58
33208: PUSH
33209: EMPTY
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: LD_INT 30
33217: PUSH
33218: LD_INT 32
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 30
33227: PUSH
33228: LD_INT 4
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 30
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: PPUSH
33256: CALL_OW 72
33260: ST_TO_ADDR
33261: GO 33485
33263: LD_INT 2
33265: DOUBLE
33266: EQUAL
33267: IFTRUE 33271
33269: GO 33333
33271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33272: LD_ADDR_VAR 0 12
33276: PUSH
33277: LD_VAR 0 18
33281: PPUSH
33282: LD_INT 22
33284: PUSH
33285: LD_VAR 0 16
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 30
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 30
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PPUSH
33326: CALL_OW 72
33330: ST_TO_ADDR
33331: GO 33485
33333: LD_INT 3
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33403
33341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33342: LD_ADDR_VAR 0 12
33346: PUSH
33347: LD_VAR 0 18
33351: PPUSH
33352: LD_INT 22
33354: PUSH
33355: LD_VAR 0 16
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: LD_INT 30
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PPUSH
33396: CALL_OW 72
33400: ST_TO_ADDR
33401: GO 33485
33403: LD_INT 4
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33484
33411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33412: LD_ADDR_VAR 0 12
33416: PUSH
33417: LD_VAR 0 18
33421: PPUSH
33422: LD_INT 22
33424: PUSH
33425: LD_VAR 0 16
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: LD_INT 30
33439: PUSH
33440: LD_INT 6
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 7
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 8
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PPUSH
33477: CALL_OW 72
33481: ST_TO_ADDR
33482: GO 33485
33484: POP
// if i = 1 then
33485: LD_VAR 0 8
33489: PUSH
33490: LD_INT 1
33492: EQUAL
33493: IFFALSE 33604
// begin tmp := [ ] ;
33495: LD_ADDR_VAR 0 19
33499: PUSH
33500: EMPTY
33501: ST_TO_ADDR
// for j in f do
33502: LD_ADDR_VAR 0 9
33506: PUSH
33507: LD_VAR 0 12
33511: PUSH
33512: FOR_IN
33513: IFFALSE 33586
// if GetBType ( j ) = b_bunker then
33515: LD_VAR 0 9
33519: PPUSH
33520: CALL_OW 266
33524: PUSH
33525: LD_INT 32
33527: EQUAL
33528: IFFALSE 33555
// tmp := Insert ( tmp , 1 , j ) else
33530: LD_ADDR_VAR 0 19
33534: PUSH
33535: LD_VAR 0 19
33539: PPUSH
33540: LD_INT 1
33542: PPUSH
33543: LD_VAR 0 9
33547: PPUSH
33548: CALL_OW 2
33552: ST_TO_ADDR
33553: GO 33584
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33555: LD_ADDR_VAR 0 19
33559: PUSH
33560: LD_VAR 0 19
33564: PPUSH
33565: LD_VAR 0 19
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: PPUSH
33574: LD_VAR 0 9
33578: PPUSH
33579: CALL_OW 2
33583: ST_TO_ADDR
33584: GO 33512
33586: POP
33587: POP
// if tmp then
33588: LD_VAR 0 19
33592: IFFALSE 33604
// f := tmp ;
33594: LD_ADDR_VAR 0 12
33598: PUSH
33599: LD_VAR 0 19
33603: ST_TO_ADDR
// end ; x := personel [ i ] ;
33604: LD_ADDR_VAR 0 13
33608: PUSH
33609: LD_VAR 0 6
33613: PUSH
33614: LD_VAR 0 8
33618: ARRAY
33619: ST_TO_ADDR
// if x = - 1 then
33620: LD_VAR 0 13
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: EQUAL
33629: IFFALSE 33840
// begin for j in f do
33631: LD_ADDR_VAR 0 9
33635: PUSH
33636: LD_VAR 0 12
33640: PUSH
33641: FOR_IN
33642: IFFALSE 33836
// repeat InitHc ;
33644: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33648: LD_VAR 0 9
33652: PPUSH
33653: CALL_OW 266
33657: PUSH
33658: LD_INT 5
33660: EQUAL
33661: IFFALSE 33731
// begin if UnitsInside ( j ) < 3 then
33663: LD_VAR 0 9
33667: PPUSH
33668: CALL_OW 313
33672: PUSH
33673: LD_INT 3
33675: LESS
33676: IFFALSE 33712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33678: LD_INT 0
33680: PPUSH
33681: LD_INT 5
33683: PUSH
33684: LD_INT 8
33686: PUSH
33687: LD_INT 9
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: PUSH
33695: LD_VAR 0 17
33699: ARRAY
33700: PPUSH
33701: LD_VAR 0 4
33705: PPUSH
33706: CALL_OW 380
33710: GO 33729
// PrepareHuman ( false , i , skill ) ;
33712: LD_INT 0
33714: PPUSH
33715: LD_VAR 0 8
33719: PPUSH
33720: LD_VAR 0 4
33724: PPUSH
33725: CALL_OW 380
// end else
33729: GO 33748
// PrepareHuman ( false , i , skill ) ;
33731: LD_INT 0
33733: PPUSH
33734: LD_VAR 0 8
33738: PPUSH
33739: LD_VAR 0 4
33743: PPUSH
33744: CALL_OW 380
// un := CreateHuman ;
33748: LD_ADDR_VAR 0 14
33752: PUSH
33753: CALL_OW 44
33757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33758: LD_ADDR_VAR 0 7
33762: PUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: LD_INT 1
33770: PPUSH
33771: LD_VAR 0 14
33775: PPUSH
33776: CALL_OW 2
33780: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33781: LD_VAR 0 14
33785: PPUSH
33786: LD_VAR 0 9
33790: PPUSH
33791: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33795: LD_VAR 0 9
33799: PPUSH
33800: CALL_OW 313
33804: PUSH
33805: LD_INT 6
33807: EQUAL
33808: IFTRUE 33832
33810: PUSH
33811: LD_VAR 0 9
33815: PPUSH
33816: CALL_OW 266
33820: PUSH
33821: LD_INT 32
33823: PUSH
33824: LD_INT 31
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: IN
33831: OR
33832: IFFALSE 33644
33834: GO 33641
33836: POP
33837: POP
// end else
33838: GO 34224
// for j = 1 to x do
33840: LD_ADDR_VAR 0 9
33844: PUSH
33845: DOUBLE
33846: LD_INT 1
33848: DEC
33849: ST_TO_ADDR
33850: LD_VAR 0 13
33854: PUSH
33855: FOR_TO
33856: IFFALSE 34222
// begin InitHc ;
33858: CALL_OW 19
// if not f then
33862: LD_VAR 0 12
33866: NOT
33867: IFFALSE 33956
// begin PrepareHuman ( false , i , skill ) ;
33869: LD_INT 0
33871: PPUSH
33872: LD_VAR 0 8
33876: PPUSH
33877: LD_VAR 0 4
33881: PPUSH
33882: CALL_OW 380
// un := CreateHuman ;
33886: LD_ADDR_VAR 0 14
33890: PUSH
33891: CALL_OW 44
33895: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33896: LD_ADDR_VAR 0 7
33900: PUSH
33901: LD_VAR 0 7
33905: PPUSH
33906: LD_INT 1
33908: PPUSH
33909: LD_VAR 0 14
33913: PPUSH
33914: CALL_OW 2
33918: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33919: LD_VAR 0 14
33923: PPUSH
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL_OW 250
33933: PPUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 251
33943: PPUSH
33944: LD_INT 10
33946: PPUSH
33947: LD_INT 0
33949: PPUSH
33950: CALL_OW 50
// continue ;
33954: GO 33855
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33956: LD_VAR 0 12
33960: PUSH
33961: LD_INT 1
33963: ARRAY
33964: PPUSH
33965: CALL_OW 313
33969: IFFALSE 33997
33971: PUSH
33972: LD_VAR 0 12
33976: PUSH
33977: LD_INT 1
33979: ARRAY
33980: PPUSH
33981: CALL_OW 266
33985: PUSH
33986: LD_INT 32
33988: PUSH
33989: LD_INT 31
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: IN
33996: AND
33997: IFTRUE 34018
33999: PUSH
34000: LD_VAR 0 12
34004: PUSH
34005: LD_INT 1
34007: ARRAY
34008: PPUSH
34009: CALL_OW 313
34013: PUSH
34014: LD_INT 6
34016: EQUAL
34017: OR
34018: IFFALSE 34038
// f := Delete ( f , 1 ) ;
34020: LD_ADDR_VAR 0 12
34024: PUSH
34025: LD_VAR 0 12
34029: PPUSH
34030: LD_INT 1
34032: PPUSH
34033: CALL_OW 3
34037: ST_TO_ADDR
// if not f then
34038: LD_VAR 0 12
34042: NOT
34043: IFFALSE 34061
// begin x := x + 2 ;
34045: LD_ADDR_VAR 0 13
34049: PUSH
34050: LD_VAR 0 13
34054: PUSH
34055: LD_INT 2
34057: PLUS
34058: ST_TO_ADDR
// continue ;
34059: GO 33855
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34061: LD_VAR 0 12
34065: PUSH
34066: LD_INT 1
34068: ARRAY
34069: PPUSH
34070: CALL_OW 266
34074: PUSH
34075: LD_INT 5
34077: EQUAL
34078: IFFALSE 34152
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34080: LD_VAR 0 12
34084: PUSH
34085: LD_INT 1
34087: ARRAY
34088: PPUSH
34089: CALL_OW 313
34093: PUSH
34094: LD_INT 3
34096: LESS
34097: IFFALSE 34133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34099: LD_INT 0
34101: PPUSH
34102: LD_INT 5
34104: PUSH
34105: LD_INT 8
34107: PUSH
34108: LD_INT 9
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: PUSH
34116: LD_VAR 0 17
34120: ARRAY
34121: PPUSH
34122: LD_VAR 0 4
34126: PPUSH
34127: CALL_OW 380
34131: GO 34150
// PrepareHuman ( false , i , skill ) ;
34133: LD_INT 0
34135: PPUSH
34136: LD_VAR 0 8
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: CALL_OW 380
// end else
34150: GO 34169
// PrepareHuman ( false , i , skill ) ;
34152: LD_INT 0
34154: PPUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_VAR 0 4
34164: PPUSH
34165: CALL_OW 380
// un := CreateHuman ;
34169: LD_ADDR_VAR 0 14
34173: PUSH
34174: CALL_OW 44
34178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34179: LD_ADDR_VAR 0 7
34183: PUSH
34184: LD_VAR 0 7
34188: PPUSH
34189: LD_INT 1
34191: PPUSH
34192: LD_VAR 0 14
34196: PPUSH
34197: CALL_OW 2
34201: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34202: LD_VAR 0 14
34206: PPUSH
34207: LD_VAR 0 12
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: CALL_OW 52
// end ;
34220: GO 33855
34222: POP
34223: POP
// end ;
34224: GO 33155
34226: POP
34227: POP
// result := result ^ buildings ;
34228: LD_ADDR_VAR 0 7
34232: PUSH
34233: LD_VAR 0 7
34237: PUSH
34238: LD_VAR 0 18
34242: ADD
34243: ST_TO_ADDR
// end else
34244: GO 34387
// begin for i = 1 to personel do
34246: LD_ADDR_VAR 0 8
34250: PUSH
34251: DOUBLE
34252: LD_INT 1
34254: DEC
34255: ST_TO_ADDR
34256: LD_VAR 0 6
34260: PUSH
34261: FOR_TO
34262: IFFALSE 34385
// begin if i > 4 then
34264: LD_VAR 0 8
34268: PUSH
34269: LD_INT 4
34271: GREATER
34272: IFFALSE 34276
// break ;
34274: GO 34385
// x := personel [ i ] ;
34276: LD_ADDR_VAR 0 13
34280: PUSH
34281: LD_VAR 0 6
34285: PUSH
34286: LD_VAR 0 8
34290: ARRAY
34291: ST_TO_ADDR
// if x = - 1 then
34292: LD_VAR 0 13
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: EQUAL
34301: IFFALSE 34305
// continue ;
34303: GO 34261
// PrepareHuman ( false , i , skill ) ;
34305: LD_INT 0
34307: PPUSH
34308: LD_VAR 0 8
34312: PPUSH
34313: LD_VAR 0 4
34317: PPUSH
34318: CALL_OW 380
// un := CreateHuman ;
34322: LD_ADDR_VAR 0 14
34326: PUSH
34327: CALL_OW 44
34331: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34332: LD_VAR 0 14
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 250
34346: PPUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 251
34356: PPUSH
34357: LD_INT 10
34359: PPUSH
34360: LD_INT 0
34362: PPUSH
34363: CALL_OW 50
// result := result ^ un ;
34367: LD_ADDR_VAR 0 7
34371: PUSH
34372: LD_VAR 0 7
34376: PUSH
34377: LD_VAR 0 14
34381: ADD
34382: ST_TO_ADDR
// end ;
34383: GO 34261
34385: POP
34386: POP
// end ; end ;
34387: LD_VAR 0 7
34391: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34392: LD_INT 0
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
// result := false ;
34410: LD_ADDR_VAR 0 3
34414: PUSH
34415: LD_INT 0
34417: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34418: LD_VAR 0 1
34422: NOT
34423: IFTRUE 34448
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 266
34435: PUSH
34436: LD_INT 32
34438: PUSH
34439: LD_INT 33
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: IN
34446: NOT
34447: OR
34448: IFFALSE 34452
// exit ;
34450: GO 35587
// nat := GetNation ( tower ) ;
34452: LD_ADDR_VAR 0 12
34456: PUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 248
34466: ST_TO_ADDR
// side := GetSide ( tower ) ;
34467: LD_ADDR_VAR 0 16
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 255
34481: ST_TO_ADDR
// x := GetX ( tower ) ;
34482: LD_ADDR_VAR 0 10
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL_OW 250
34496: ST_TO_ADDR
// y := GetY ( tower ) ;
34497: LD_ADDR_VAR 0 11
34501: PUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 251
34511: ST_TO_ADDR
// if not x or not y then
34512: LD_VAR 0 10
34516: NOT
34517: IFTRUE 34526
34519: PUSH
34520: LD_VAR 0 11
34524: NOT
34525: OR
34526: IFFALSE 34530
// exit ;
34528: GO 35587
// weapon := 0 ;
34530: LD_ADDR_VAR 0 18
34534: PUSH
34535: LD_INT 0
34537: ST_TO_ADDR
// fac_list := [ ] ;
34538: LD_ADDR_VAR 0 17
34542: PUSH
34543: EMPTY
34544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34545: LD_ADDR_VAR 0 6
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 274
34559: PPUSH
34560: LD_VAR 0 2
34564: PPUSH
34565: LD_INT 0
34567: PPUSH
34568: CALL 32122 0 3
34572: PPUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PPUSH
34583: CALL_OW 72
34587: ST_TO_ADDR
// if not factories then
34588: LD_VAR 0 6
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35587
// for i in factories do
34597: LD_ADDR_VAR 0 8
34601: PUSH
34602: LD_VAR 0 6
34606: PUSH
34607: FOR_IN
34608: IFFALSE 34633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34610: LD_ADDR_VAR 0 17
34614: PUSH
34615: LD_VAR 0 17
34619: PUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: CALL_OW 478
34629: UNION
34630: ST_TO_ADDR
34631: GO 34607
34633: POP
34634: POP
// if not fac_list then
34635: LD_VAR 0 17
34639: NOT
34640: IFFALSE 34644
// exit ;
34642: GO 35587
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34644: LD_ADDR_VAR 0 5
34648: PUSH
34649: LD_INT 4
34651: PUSH
34652: LD_INT 5
34654: PUSH
34655: LD_INT 9
34657: PUSH
34658: LD_INT 10
34660: PUSH
34661: LD_INT 6
34663: PUSH
34664: LD_INT 7
34666: PUSH
34667: LD_INT 11
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 27
34681: PUSH
34682: LD_INT 28
34684: PUSH
34685: LD_INT 26
34687: PUSH
34688: LD_INT 30
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 43
34699: PUSH
34700: LD_INT 44
34702: PUSH
34703: LD_INT 46
34705: PUSH
34706: LD_INT 45
34708: PUSH
34709: LD_INT 47
34711: PUSH
34712: LD_INT 49
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: PUSH
34728: LD_VAR 0 12
34732: ARRAY
34733: ST_TO_ADDR
// list := list isect fac_list ;
34734: LD_ADDR_VAR 0 5
34738: PUSH
34739: LD_VAR 0 5
34743: PUSH
34744: LD_VAR 0 17
34748: ISECT
34749: ST_TO_ADDR
// if not list then
34750: LD_VAR 0 5
34754: NOT
34755: IFFALSE 34759
// exit ;
34757: GO 35587
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34759: LD_VAR 0 12
34763: PUSH
34764: LD_INT 3
34766: EQUAL
34767: IFFALSE 34779
34769: PUSH
34770: LD_INT 49
34772: PUSH
34773: LD_VAR 0 5
34777: IN
34778: AND
34779: IFFALSE 34799
34781: PUSH
34782: LD_INT 31
34784: PPUSH
34785: LD_VAR 0 16
34789: PPUSH
34790: CALL_OW 321
34794: PUSH
34795: LD_INT 2
34797: EQUAL
34798: AND
34799: IFFALSE 34859
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34801: LD_INT 22
34803: PUSH
34804: LD_VAR 0 16
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 35
34815: PUSH
34816: LD_INT 49
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 91
34825: PUSH
34826: LD_VAR 0 1
34830: PUSH
34831: LD_INT 10
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: PPUSH
34844: CALL_OW 69
34848: NOT
34849: IFFALSE 34859
// weapon := ru_time_lapser ;
34851: LD_ADDR_VAR 0 18
34855: PUSH
34856: LD_INT 49
34858: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34859: LD_VAR 0 12
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: IN
34874: IFFALSE 34898
34876: PUSH
34877: LD_INT 11
34879: PUSH
34880: LD_VAR 0 5
34884: IN
34885: IFTRUE 34897
34887: PUSH
34888: LD_INT 30
34890: PUSH
34891: LD_VAR 0 5
34895: IN
34896: OR
34897: AND
34898: IFFALSE 34918
34900: PUSH
34901: LD_INT 6
34903: PPUSH
34904: LD_VAR 0 16
34908: PPUSH
34909: CALL_OW 321
34913: PUSH
34914: LD_INT 2
34916: EQUAL
34917: AND
34918: IFFALSE 35085
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34920: LD_INT 22
34922: PUSH
34923: LD_VAR 0 16
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 35
34937: PUSH
34938: LD_INT 11
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 35
34947: PUSH
34948: LD_INT 30
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 91
34962: PUSH
34963: LD_VAR 0 1
34967: PUSH
34968: LD_INT 18
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PPUSH
34981: CALL_OW 69
34985: NOT
34986: IFFALSE 35062
34988: PUSH
34989: LD_INT 22
34991: PUSH
34992: LD_VAR 0 16
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: LD_INT 30
35006: PUSH
35007: LD_INT 32
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 30
35016: PUSH
35017: LD_INT 33
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 91
35031: PUSH
35032: LD_VAR 0 1
35036: PUSH
35037: LD_INT 12
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: PPUSH
35053: CALL_OW 69
35057: PUSH
35058: LD_INT 2
35060: GREATER
35061: AND
35062: IFFALSE 35085
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35064: LD_ADDR_VAR 0 18
35068: PUSH
35069: LD_INT 11
35071: PUSH
35072: LD_INT 30
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_VAR 0 12
35083: ARRAY
35084: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35085: LD_VAR 0 18
35089: NOT
35090: IFFALSE 35110
35092: PUSH
35093: LD_INT 40
35095: PPUSH
35096: LD_VAR 0 16
35100: PPUSH
35101: CALL_OW 321
35105: PUSH
35106: LD_INT 2
35108: EQUAL
35109: AND
35110: IFFALSE 35146
35112: PUSH
35113: LD_INT 7
35115: PUSH
35116: LD_VAR 0 5
35120: IN
35121: IFTRUE 35133
35123: PUSH
35124: LD_INT 28
35126: PUSH
35127: LD_VAR 0 5
35131: IN
35132: OR
35133: IFTRUE 35145
35135: PUSH
35136: LD_INT 45
35138: PUSH
35139: LD_VAR 0 5
35143: IN
35144: OR
35145: AND
35146: IFFALSE 35400
// begin hex := GetHexInfo ( x , y ) ;
35148: LD_ADDR_VAR 0 4
35152: PUSH
35153: LD_VAR 0 10
35157: PPUSH
35158: LD_VAR 0 11
35162: PPUSH
35163: CALL_OW 546
35167: ST_TO_ADDR
// if hex [ 1 ] then
35168: LD_VAR 0 4
35172: PUSH
35173: LD_INT 1
35175: ARRAY
35176: IFFALSE 35180
// exit ;
35178: GO 35587
// height := hex [ 2 ] ;
35180: LD_ADDR_VAR 0 15
35184: PUSH
35185: LD_VAR 0 4
35189: PUSH
35190: LD_INT 2
35192: ARRAY
35193: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35194: LD_ADDR_VAR 0 14
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 3
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: ST_TO_ADDR
// for i in tmp do
35217: LD_ADDR_VAR 0 8
35221: PUSH
35222: LD_VAR 0 14
35226: PUSH
35227: FOR_IN
35228: IFFALSE 35398
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: LD_VAR 0 10
35239: PPUSH
35240: LD_VAR 0 8
35244: PPUSH
35245: LD_INT 5
35247: PPUSH
35248: CALL_OW 272
35252: PUSH
35253: LD_VAR 0 11
35257: PPUSH
35258: LD_VAR 0 8
35262: PPUSH
35263: LD_INT 5
35265: PPUSH
35266: CALL_OW 273
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35275: LD_VAR 0 9
35279: PUSH
35280: LD_INT 1
35282: ARRAY
35283: PPUSH
35284: LD_VAR 0 9
35288: PUSH
35289: LD_INT 2
35291: ARRAY
35292: PPUSH
35293: CALL_OW 488
35297: IFFALSE 35396
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35299: LD_ADDR_VAR 0 4
35303: PUSH
35304: LD_VAR 0 9
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PPUSH
35313: LD_VAR 0 9
35317: PUSH
35318: LD_INT 2
35320: ARRAY
35321: PPUSH
35322: CALL_OW 546
35326: ST_TO_ADDR
// if hex [ 1 ] then
35327: LD_VAR 0 4
35331: PUSH
35332: LD_INT 1
35334: ARRAY
35335: IFFALSE 35339
// continue ;
35337: GO 35227
// h := hex [ 2 ] ;
35339: LD_ADDR_VAR 0 13
35343: PUSH
35344: LD_VAR 0 4
35348: PUSH
35349: LD_INT 2
35351: ARRAY
35352: ST_TO_ADDR
// if h + 7 < height then
35353: LD_VAR 0 13
35357: PUSH
35358: LD_INT 7
35360: PLUS
35361: PUSH
35362: LD_VAR 0 15
35366: LESS
35367: IFFALSE 35396
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35369: LD_ADDR_VAR 0 18
35373: PUSH
35374: LD_INT 7
35376: PUSH
35377: LD_INT 28
35379: PUSH
35380: LD_INT 45
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: PUSH
35388: LD_VAR 0 12
35392: ARRAY
35393: ST_TO_ADDR
// break ;
35394: GO 35398
// end ; end ; end ;
35396: GO 35227
35398: POP
35399: POP
// end ; if not weapon then
35400: LD_VAR 0 18
35404: NOT
35405: IFFALSE 35465
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 5
35416: PUSH
35417: LD_INT 11
35419: PUSH
35420: LD_INT 30
35422: PUSH
35423: LD_INT 49
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: DIFF
35431: ST_TO_ADDR
// if not list then
35432: LD_VAR 0 5
35436: NOT
35437: IFFALSE 35441
// exit ;
35439: GO 35587
// weapon := list [ rand ( 1 , list ) ] ;
35441: LD_ADDR_VAR 0 18
35445: PUSH
35446: LD_VAR 0 5
35450: PUSH
35451: LD_INT 1
35453: PPUSH
35454: LD_VAR 0 5
35458: PPUSH
35459: CALL_OW 12
35463: ARRAY
35464: ST_TO_ADDR
// end ; if weapon then
35465: LD_VAR 0 18
35469: IFFALSE 35587
// begin tmp := CostOfWeapon ( weapon ) ;
35471: LD_ADDR_VAR 0 14
35475: PUSH
35476: LD_VAR 0 18
35480: PPUSH
35481: CALL_OW 451
35485: ST_TO_ADDR
// j := GetBase ( tower ) ;
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 274
35500: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35501: LD_VAR 0 9
35505: PPUSH
35506: LD_INT 1
35508: PPUSH
35509: CALL_OW 275
35513: PUSH
35514: LD_VAR 0 14
35518: PUSH
35519: LD_INT 1
35521: ARRAY
35522: GREATEREQUAL
35523: IFFALSE 35549
35525: PUSH
35526: LD_VAR 0 9
35530: PPUSH
35531: LD_INT 2
35533: PPUSH
35534: CALL_OW 275
35538: PUSH
35539: LD_VAR 0 14
35543: PUSH
35544: LD_INT 2
35546: ARRAY
35547: GREATEREQUAL
35548: AND
35549: IFFALSE 35575
35551: PUSH
35552: LD_VAR 0 9
35556: PPUSH
35557: LD_INT 3
35559: PPUSH
35560: CALL_OW 275
35564: PUSH
35565: LD_VAR 0 14
35569: PUSH
35570: LD_INT 3
35572: ARRAY
35573: GREATEREQUAL
35574: AND
35575: IFFALSE 35587
// result := weapon ;
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_VAR 0 18
35586: ST_TO_ADDR
// end ; end ;
35587: LD_VAR 0 3
35591: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35592: LD_INT 0
35594: PPUSH
35595: PPUSH
// result := true ;
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 1
35603: ST_TO_ADDR
// if array1 = array2 then
35604: LD_VAR 0 1
35608: PUSH
35609: LD_VAR 0 2
35613: EQUAL
35614: IFFALSE 35674
// begin for i = 1 to array1 do
35616: LD_ADDR_VAR 0 4
35620: PUSH
35621: DOUBLE
35622: LD_INT 1
35624: DEC
35625: ST_TO_ADDR
35626: LD_VAR 0 1
35630: PUSH
35631: FOR_TO
35632: IFFALSE 35670
// if array1 [ i ] <> array2 [ i ] then
35634: LD_VAR 0 1
35638: PUSH
35639: LD_VAR 0 4
35643: ARRAY
35644: PUSH
35645: LD_VAR 0 2
35649: PUSH
35650: LD_VAR 0 4
35654: ARRAY
35655: NONEQUAL
35656: IFFALSE 35668
// begin result := false ;
35658: LD_ADDR_VAR 0 3
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// break ;
35666: GO 35670
// end ;
35668: GO 35631
35670: POP
35671: POP
// end else
35672: GO 35682
// result := false ;
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 0
35681: ST_TO_ADDR
// end ;
35682: LD_VAR 0 3
35686: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35687: LD_INT 0
35689: PPUSH
35690: PPUSH
// if not array1 or not array2 then
35691: LD_VAR 0 1
35695: NOT
35696: IFTRUE 35705
35698: PUSH
35699: LD_VAR 0 2
35703: NOT
35704: OR
35705: IFFALSE 35709
// exit ;
35707: GO 35773
// result := true ;
35709: LD_ADDR_VAR 0 3
35713: PUSH
35714: LD_INT 1
35716: ST_TO_ADDR
// for i = 1 to array1 do
35717: LD_ADDR_VAR 0 4
35721: PUSH
35722: DOUBLE
35723: LD_INT 1
35725: DEC
35726: ST_TO_ADDR
35727: LD_VAR 0 1
35731: PUSH
35732: FOR_TO
35733: IFFALSE 35771
// if array1 [ i ] <> array2 [ i ] then
35735: LD_VAR 0 1
35739: PUSH
35740: LD_VAR 0 4
35744: ARRAY
35745: PUSH
35746: LD_VAR 0 2
35750: PUSH
35751: LD_VAR 0 4
35755: ARRAY
35756: NONEQUAL
35757: IFFALSE 35769
// begin result := false ;
35759: LD_ADDR_VAR 0 3
35763: PUSH
35764: LD_INT 0
35766: ST_TO_ADDR
// break ;
35767: GO 35771
// end ;
35769: GO 35732
35771: POP
35772: POP
// end ;
35773: LD_VAR 0 3
35777: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35778: LD_INT 0
35780: PPUSH
35781: PPUSH
35782: PPUSH
// pom := GetBase ( fac ) ;
35783: LD_ADDR_VAR 0 5
35787: PUSH
35788: LD_VAR 0 1
35792: PPUSH
35793: CALL_OW 274
35797: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35798: LD_ADDR_VAR 0 4
35802: PUSH
35803: LD_VAR 0 2
35807: PUSH
35808: LD_INT 1
35810: ARRAY
35811: PPUSH
35812: LD_VAR 0 2
35816: PUSH
35817: LD_INT 2
35819: ARRAY
35820: PPUSH
35821: LD_VAR 0 2
35825: PUSH
35826: LD_INT 3
35828: ARRAY
35829: PPUSH
35830: LD_VAR 0 2
35834: PUSH
35835: LD_INT 4
35837: ARRAY
35838: PPUSH
35839: CALL_OW 449
35843: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35844: LD_ADDR_VAR 0 3
35848: PUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_INT 1
35856: PPUSH
35857: CALL_OW 275
35861: PUSH
35862: LD_VAR 0 4
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: GREATEREQUAL
35871: IFFALSE 35897
35873: PUSH
35874: LD_VAR 0 5
35878: PPUSH
35879: LD_INT 2
35881: PPUSH
35882: CALL_OW 275
35886: PUSH
35887: LD_VAR 0 4
35891: PUSH
35892: LD_INT 2
35894: ARRAY
35895: GREATEREQUAL
35896: AND
35897: IFFALSE 35923
35899: PUSH
35900: LD_VAR 0 5
35904: PPUSH
35905: LD_INT 3
35907: PPUSH
35908: CALL_OW 275
35912: PUSH
35913: LD_VAR 0 4
35917: PUSH
35918: LD_INT 3
35920: ARRAY
35921: GREATEREQUAL
35922: AND
35923: ST_TO_ADDR
// end ;
35924: LD_VAR 0 3
35928: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35929: LD_INT 0
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
// pom := GetBase ( building ) ;
35935: LD_ADDR_VAR 0 3
35939: PUSH
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL_OW 274
35949: ST_TO_ADDR
// if not pom then
35950: LD_VAR 0 3
35954: NOT
35955: IFFALSE 35959
// exit ;
35957: GO 36133
// btype := GetBType ( building ) ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 266
35973: ST_TO_ADDR
// if btype = b_armoury then
35974: LD_VAR 0 5
35978: PUSH
35979: LD_INT 4
35981: EQUAL
35982: IFFALSE 35992
// btype := b_barracks ;
35984: LD_ADDR_VAR 0 5
35988: PUSH
35989: LD_INT 5
35991: ST_TO_ADDR
// if btype = b_depot then
35992: LD_VAR 0 5
35996: PUSH
35997: LD_INT 0
35999: EQUAL
36000: IFFALSE 36010
// btype := b_warehouse ;
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_INT 1
36009: ST_TO_ADDR
// if btype = b_workshop then
36010: LD_VAR 0 5
36014: PUSH
36015: LD_INT 2
36017: EQUAL
36018: IFFALSE 36028
// btype := b_factory ;
36020: LD_ADDR_VAR 0 5
36024: PUSH
36025: LD_INT 3
36027: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36028: LD_ADDR_VAR 0 4
36032: PUSH
36033: LD_VAR 0 5
36037: PPUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 248
36047: PPUSH
36048: CALL_OW 450
36052: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36053: LD_ADDR_VAR 0 2
36057: PUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: LD_INT 1
36065: PPUSH
36066: CALL_OW 275
36070: PUSH
36071: LD_VAR 0 4
36075: PUSH
36076: LD_INT 1
36078: ARRAY
36079: GREATEREQUAL
36080: IFFALSE 36106
36082: PUSH
36083: LD_VAR 0 3
36087: PPUSH
36088: LD_INT 2
36090: PPUSH
36091: CALL_OW 275
36095: PUSH
36096: LD_VAR 0 4
36100: PUSH
36101: LD_INT 2
36103: ARRAY
36104: GREATEREQUAL
36105: AND
36106: IFFALSE 36132
36108: PUSH
36109: LD_VAR 0 3
36113: PPUSH
36114: LD_INT 3
36116: PPUSH
36117: CALL_OW 275
36121: PUSH
36122: LD_VAR 0 4
36126: PUSH
36127: LD_INT 3
36129: ARRAY
36130: GREATEREQUAL
36131: AND
36132: ST_TO_ADDR
// end ;
36133: LD_VAR 0 2
36137: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
36142: PPUSH
// pom := GetBase ( building ) ;
36143: LD_ADDR_VAR 0 4
36147: PUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 274
36157: ST_TO_ADDR
// if not pom then
36158: LD_VAR 0 4
36162: NOT
36163: IFFALSE 36167
// exit ;
36165: GO 36272
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36167: LD_ADDR_VAR 0 5
36171: PUSH
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 248
36186: PPUSH
36187: CALL_OW 450
36191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36192: LD_ADDR_VAR 0 3
36196: PUSH
36197: LD_VAR 0 4
36201: PPUSH
36202: LD_INT 1
36204: PPUSH
36205: CALL_OW 275
36209: PUSH
36210: LD_VAR 0 5
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: GREATEREQUAL
36219: IFFALSE 36245
36221: PUSH
36222: LD_VAR 0 4
36226: PPUSH
36227: LD_INT 2
36229: PPUSH
36230: CALL_OW 275
36234: PUSH
36235: LD_VAR 0 5
36239: PUSH
36240: LD_INT 2
36242: ARRAY
36243: GREATEREQUAL
36244: AND
36245: IFFALSE 36271
36247: PUSH
36248: LD_VAR 0 4
36252: PPUSH
36253: LD_INT 3
36255: PPUSH
36256: CALL_OW 275
36260: PUSH
36261: LD_VAR 0 5
36265: PUSH
36266: LD_INT 3
36268: ARRAY
36269: GREATEREQUAL
36270: AND
36271: ST_TO_ADDR
// end ;
36272: LD_VAR 0 3
36276: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36277: LD_INT 0
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// result := false ;
36290: LD_ADDR_VAR 0 8
36294: PUSH
36295: LD_INT 0
36297: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36298: LD_VAR 0 5
36302: NOT
36303: IFTRUE 36312
36305: PUSH
36306: LD_VAR 0 1
36310: NOT
36311: OR
36312: IFTRUE 36321
36314: PUSH
36315: LD_VAR 0 2
36319: NOT
36320: OR
36321: IFTRUE 36330
36323: PUSH
36324: LD_VAR 0 3
36328: NOT
36329: OR
36330: IFFALSE 36334
// exit ;
36332: GO 37160
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36334: LD_ADDR_VAR 0 14
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: LD_VAR 0 2
36348: PPUSH
36349: LD_VAR 0 3
36353: PPUSH
36354: LD_VAR 0 4
36358: PPUSH
36359: LD_VAR 0 5
36363: PUSH
36364: LD_INT 1
36366: ARRAY
36367: PPUSH
36368: CALL_OW 248
36372: PPUSH
36373: LD_INT 0
36375: PPUSH
36376: CALL 38441 0 6
36380: ST_TO_ADDR
// if not hexes then
36381: LD_VAR 0 14
36385: NOT
36386: IFFALSE 36390
// exit ;
36388: GO 37160
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36390: LD_ADDR_VAR 0 17
36394: PUSH
36395: LD_VAR 0 5
36399: PPUSH
36400: LD_INT 22
36402: PUSH
36403: LD_VAR 0 13
36407: PPUSH
36408: CALL_OW 255
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 30
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PPUSH
36449: CALL_OW 72
36453: ST_TO_ADDR
// for i = 1 to hexes do
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: DOUBLE
36460: LD_INT 1
36462: DEC
36463: ST_TO_ADDR
36464: LD_VAR 0 14
36468: PUSH
36469: FOR_TO
36470: IFFALSE 37158
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36472: LD_ADDR_VAR 0 13
36476: PUSH
36477: LD_VAR 0 14
36481: PUSH
36482: LD_VAR 0 9
36486: ARRAY
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 14
36496: PUSH
36497: LD_VAR 0 9
36501: ARRAY
36502: PUSH
36503: LD_INT 2
36505: ARRAY
36506: PPUSH
36507: CALL_OW 428
36511: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36512: LD_VAR 0 14
36516: PUSH
36517: LD_VAR 0 9
36521: ARRAY
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: PPUSH
36527: LD_VAR 0 14
36531: PUSH
36532: LD_VAR 0 9
36536: ARRAY
36537: PUSH
36538: LD_INT 2
36540: ARRAY
36541: PPUSH
36542: CALL_OW 351
36546: IFTRUE 36585
36548: PUSH
36549: LD_VAR 0 14
36553: PUSH
36554: LD_VAR 0 9
36558: ARRAY
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PPUSH
36564: LD_VAR 0 14
36568: PUSH
36569: LD_VAR 0 9
36573: ARRAY
36574: PUSH
36575: LD_INT 2
36577: ARRAY
36578: PPUSH
36579: CALL_OW 488
36583: NOT
36584: OR
36585: IFTRUE 36602
36587: PUSH
36588: LD_VAR 0 13
36592: PPUSH
36593: CALL_OW 247
36597: PUSH
36598: LD_INT 3
36600: EQUAL
36601: OR
36602: IFFALSE 36608
// exit ;
36604: POP
36605: POP
36606: GO 37160
// if not tmp then
36608: LD_VAR 0 13
36612: NOT
36613: IFFALSE 36617
// continue ;
36615: GO 36469
// result := true ;
36617: LD_ADDR_VAR 0 8
36621: PUSH
36622: LD_INT 1
36624: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36625: LD_VAR 0 6
36629: IFFALSE 36646
36631: PUSH
36632: LD_VAR 0 13
36636: PPUSH
36637: CALL_OW 247
36641: PUSH
36642: LD_INT 2
36644: EQUAL
36645: AND
36646: IFFALSE 36663
36648: PUSH
36649: LD_VAR 0 13
36653: PPUSH
36654: CALL_OW 263
36658: PUSH
36659: LD_INT 1
36661: EQUAL
36662: AND
36663: IFFALSE 36827
// begin if IsDrivenBy ( tmp ) then
36665: LD_VAR 0 13
36669: PPUSH
36670: CALL_OW 311
36674: IFFALSE 36678
// continue ;
36676: GO 36469
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36678: LD_VAR 0 6
36682: PPUSH
36683: LD_INT 3
36685: PUSH
36686: LD_INT 60
36688: PUSH
36689: EMPTY
36690: LIST
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: LD_INT 55
36701: PUSH
36702: EMPTY
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PPUSH
36713: CALL_OW 72
36717: IFFALSE 36825
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36719: LD_ADDR_VAR 0 18
36723: PUSH
36724: LD_VAR 0 6
36728: PPUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 60
36734: PUSH
36735: EMPTY
36736: LIST
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 3
36744: PUSH
36745: LD_INT 55
36747: PUSH
36748: EMPTY
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 72
36763: PUSH
36764: LD_INT 1
36766: ARRAY
36767: ST_TO_ADDR
// if IsInUnit ( driver ) then
36768: LD_VAR 0 18
36772: PPUSH
36773: CALL_OW 310
36777: IFFALSE 36788
// ComExit ( driver ) ;
36779: LD_VAR 0 18
36783: PPUSH
36784: CALL 62441 0 1
// AddComEnterUnit ( driver , tmp ) ;
36788: LD_VAR 0 18
36792: PPUSH
36793: LD_VAR 0 13
36797: PPUSH
36798: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36802: LD_VAR 0 18
36806: PPUSH
36807: LD_VAR 0 7
36811: PPUSH
36812: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36816: LD_VAR 0 18
36820: PPUSH
36821: CALL_OW 181
// end ; continue ;
36825: GO 36469
// end ; if not cleaners or not tmp in cleaners then
36827: LD_VAR 0 6
36831: NOT
36832: IFTRUE 36847
36834: PUSH
36835: LD_VAR 0 13
36839: PUSH
36840: LD_VAR 0 6
36844: IN
36845: NOT
36846: OR
36847: IFFALSE 37156
// begin if dep then
36849: LD_VAR 0 17
36853: IFFALSE 36989
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36855: LD_ADDR_VAR 0 16
36859: PUSH
36860: LD_VAR 0 17
36864: PUSH
36865: LD_INT 1
36867: ARRAY
36868: PPUSH
36869: CALL_OW 250
36873: PPUSH
36874: LD_VAR 0 17
36878: PUSH
36879: LD_INT 1
36881: ARRAY
36882: PPUSH
36883: CALL_OW 254
36887: PPUSH
36888: LD_INT 5
36890: PPUSH
36891: CALL_OW 272
36895: PUSH
36896: LD_VAR 0 17
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PPUSH
36905: CALL_OW 251
36909: PPUSH
36910: LD_VAR 0 17
36914: PUSH
36915: LD_INT 1
36917: ARRAY
36918: PPUSH
36919: CALL_OW 254
36923: PPUSH
36924: LD_INT 5
36926: PPUSH
36927: CALL_OW 273
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36936: LD_VAR 0 16
36940: PUSH
36941: LD_INT 1
36943: ARRAY
36944: PPUSH
36945: LD_VAR 0 16
36949: PUSH
36950: LD_INT 2
36952: ARRAY
36953: PPUSH
36954: CALL_OW 488
36958: IFFALSE 36989
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36960: LD_VAR 0 13
36964: PPUSH
36965: LD_VAR 0 16
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_VAR 0 16
36978: PUSH
36979: LD_INT 2
36981: ARRAY
36982: PPUSH
36983: CALL_OW 111
// continue ;
36987: GO 36469
// end ; end ; r := GetDir ( tmp ) ;
36989: LD_ADDR_VAR 0 15
36993: PUSH
36994: LD_VAR 0 13
36998: PPUSH
36999: CALL_OW 254
37003: ST_TO_ADDR
// if r = 5 then
37004: LD_VAR 0 15
37008: PUSH
37009: LD_INT 5
37011: EQUAL
37012: IFFALSE 37022
// r := 0 ;
37014: LD_ADDR_VAR 0 15
37018: PUSH
37019: LD_INT 0
37021: ST_TO_ADDR
// for j = r to 5 do
37022: LD_ADDR_VAR 0 10
37026: PUSH
37027: DOUBLE
37028: LD_VAR 0 15
37032: DEC
37033: ST_TO_ADDR
37034: LD_INT 5
37036: PUSH
37037: FOR_TO
37038: IFFALSE 37154
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37040: LD_ADDR_VAR 0 11
37044: PUSH
37045: LD_VAR 0 13
37049: PPUSH
37050: CALL_OW 250
37054: PPUSH
37055: LD_VAR 0 10
37059: PPUSH
37060: LD_INT 2
37062: PPUSH
37063: CALL_OW 272
37067: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37068: LD_ADDR_VAR 0 12
37072: PUSH
37073: LD_VAR 0 13
37077: PPUSH
37078: CALL_OW 251
37082: PPUSH
37083: LD_VAR 0 10
37087: PPUSH
37088: LD_INT 2
37090: PPUSH
37091: CALL_OW 273
37095: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37096: LD_VAR 0 11
37100: PPUSH
37101: LD_VAR 0 12
37105: PPUSH
37106: CALL_OW 488
37110: IFFALSE 37129
37112: PUSH
37113: LD_VAR 0 11
37117: PPUSH
37118: LD_VAR 0 12
37122: PPUSH
37123: CALL_OW 428
37127: NOT
37128: AND
37129: IFFALSE 37152
// begin ComMoveXY ( tmp , _x , _y ) ;
37131: LD_VAR 0 13
37135: PPUSH
37136: LD_VAR 0 11
37140: PPUSH
37141: LD_VAR 0 12
37145: PPUSH
37146: CALL_OW 111
// break ;
37150: GO 37154
// end ; end ;
37152: GO 37037
37154: POP
37155: POP
// end ; end ;
37156: GO 36469
37158: POP
37159: POP
// end ;
37160: LD_VAR 0 8
37164: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37165: LD_INT 0
37167: PPUSH
// result := true ;
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_INT 1
37175: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37176: LD_VAR 0 2
37180: PUSH
37181: LD_INT 24
37183: DOUBLE
37184: EQUAL
37185: IFTRUE 37195
37187: LD_INT 33
37189: DOUBLE
37190: EQUAL
37191: IFTRUE 37195
37193: GO 37220
37195: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: LD_INT 32
37203: PPUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 321
37213: PUSH
37214: LD_INT 2
37216: EQUAL
37217: ST_TO_ADDR
37218: GO 37536
37220: LD_INT 20
37222: DOUBLE
37223: EQUAL
37224: IFTRUE 37228
37226: GO 37253
37228: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37229: LD_ADDR_VAR 0 3
37233: PUSH
37234: LD_INT 6
37236: PPUSH
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL_OW 321
37246: PUSH
37247: LD_INT 2
37249: EQUAL
37250: ST_TO_ADDR
37251: GO 37536
37253: LD_INT 22
37255: DOUBLE
37256: EQUAL
37257: IFTRUE 37267
37259: LD_INT 36
37261: DOUBLE
37262: EQUAL
37263: IFTRUE 37267
37265: GO 37292
37267: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_INT 15
37275: PPUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 321
37285: PUSH
37286: LD_INT 2
37288: EQUAL
37289: ST_TO_ADDR
37290: GO 37536
37292: LD_INT 30
37294: DOUBLE
37295: EQUAL
37296: IFTRUE 37300
37298: GO 37325
37300: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_INT 20
37308: PPUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 321
37318: PUSH
37319: LD_INT 2
37321: EQUAL
37322: ST_TO_ADDR
37323: GO 37536
37325: LD_INT 28
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37339
37331: LD_INT 21
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 37364
37339: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37340: LD_ADDR_VAR 0 3
37344: PUSH
37345: LD_INT 21
37347: PPUSH
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL_OW 321
37357: PUSH
37358: LD_INT 2
37360: EQUAL
37361: ST_TO_ADDR
37362: GO 37536
37364: LD_INT 16
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 37397
37372: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_INT 84
37380: PPUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 321
37390: PUSH
37391: LD_INT 2
37393: EQUAL
37394: ST_TO_ADDR
37395: GO 37536
37397: LD_INT 19
37399: DOUBLE
37400: EQUAL
37401: IFTRUE 37411
37403: LD_INT 23
37405: DOUBLE
37406: EQUAL
37407: IFTRUE 37411
37409: GO 37436
37411: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37412: LD_ADDR_VAR 0 3
37416: PUSH
37417: LD_INT 83
37419: PPUSH
37420: LD_VAR 0 1
37424: PPUSH
37425: CALL_OW 321
37429: PUSH
37430: LD_INT 2
37432: EQUAL
37433: ST_TO_ADDR
37434: GO 37536
37436: LD_INT 17
37438: DOUBLE
37439: EQUAL
37440: IFTRUE 37444
37442: GO 37469
37444: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37445: LD_ADDR_VAR 0 3
37449: PUSH
37450: LD_INT 39
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 321
37462: PUSH
37463: LD_INT 2
37465: EQUAL
37466: ST_TO_ADDR
37467: GO 37536
37469: LD_INT 18
37471: DOUBLE
37472: EQUAL
37473: IFTRUE 37477
37475: GO 37502
37477: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37478: LD_ADDR_VAR 0 3
37482: PUSH
37483: LD_INT 40
37485: PPUSH
37486: LD_VAR 0 1
37490: PPUSH
37491: CALL_OW 321
37495: PUSH
37496: LD_INT 2
37498: EQUAL
37499: ST_TO_ADDR
37500: GO 37536
37502: LD_INT 27
37504: DOUBLE
37505: EQUAL
37506: IFTRUE 37510
37508: GO 37535
37510: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37511: LD_ADDR_VAR 0 3
37515: PUSH
37516: LD_INT 35
37518: PPUSH
37519: LD_VAR 0 1
37523: PPUSH
37524: CALL_OW 321
37528: PUSH
37529: LD_INT 2
37531: EQUAL
37532: ST_TO_ADDR
37533: GO 37536
37535: POP
// end ;
37536: LD_VAR 0 3
37540: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37541: LD_INT 0
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
// result := false ;
37554: LD_ADDR_VAR 0 6
37558: PUSH
37559: LD_INT 0
37561: ST_TO_ADDR
// if btype = b_depot then
37562: LD_VAR 0 2
37566: PUSH
37567: LD_INT 0
37569: EQUAL
37570: IFFALSE 37582
// begin result := true ;
37572: LD_ADDR_VAR 0 6
37576: PUSH
37577: LD_INT 1
37579: ST_TO_ADDR
// exit ;
37580: GO 38436
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37582: LD_VAR 0 1
37586: NOT
37587: IFTRUE 37612
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 266
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: IN
37610: NOT
37611: OR
37612: IFTRUE 37621
37614: PUSH
37615: LD_VAR 0 2
37619: NOT
37620: OR
37621: IFTRUE 37657
37623: PUSH
37624: LD_VAR 0 5
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 3
37640: PUSH
37641: LD_INT 4
37643: PUSH
37644: LD_INT 5
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: IN
37655: NOT
37656: OR
37657: IFTRUE 37676
37659: PUSH
37660: LD_VAR 0 3
37664: PPUSH
37665: LD_VAR 0 4
37669: PPUSH
37670: CALL_OW 488
37674: NOT
37675: OR
37676: IFFALSE 37680
// exit ;
37678: GO 38436
// side := GetSide ( depot ) ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_VAR 0 1
37689: PPUSH
37690: CALL_OW 255
37694: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37695: LD_VAR 0 9
37699: PPUSH
37700: LD_VAR 0 2
37704: PPUSH
37705: CALL 37165 0 2
37709: NOT
37710: IFFALSE 37714
// exit ;
37712: GO 38436
// pom := GetBase ( depot ) ;
37714: LD_ADDR_VAR 0 10
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 274
37728: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37729: LD_ADDR_VAR 0 11
37733: PUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: CALL_OW 248
37748: PPUSH
37749: CALL_OW 450
37753: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37754: LD_VAR 0 10
37758: PPUSH
37759: LD_INT 1
37761: PPUSH
37762: CALL_OW 275
37766: PUSH
37767: LD_VAR 0 11
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: GREATEREQUAL
37776: IFFALSE 37802
37778: PUSH
37779: LD_VAR 0 10
37783: PPUSH
37784: LD_INT 2
37786: PPUSH
37787: CALL_OW 275
37791: PUSH
37792: LD_VAR 0 11
37796: PUSH
37797: LD_INT 2
37799: ARRAY
37800: GREATEREQUAL
37801: AND
37802: IFFALSE 37828
37804: PUSH
37805: LD_VAR 0 10
37809: PPUSH
37810: LD_INT 3
37812: PPUSH
37813: CALL_OW 275
37817: PUSH
37818: LD_VAR 0 11
37822: PUSH
37823: LD_INT 3
37825: ARRAY
37826: GREATEREQUAL
37827: AND
37828: NOT
37829: IFFALSE 37833
// exit ;
37831: GO 38436
// if GetBType ( depot ) = b_depot then
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 266
37842: PUSH
37843: LD_INT 0
37845: EQUAL
37846: IFFALSE 37858
// dist := 28 else
37848: LD_ADDR_VAR 0 14
37852: PUSH
37853: LD_INT 28
37855: ST_TO_ADDR
37856: GO 37866
// dist := 36 ;
37858: LD_ADDR_VAR 0 14
37862: PUSH
37863: LD_INT 36
37865: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 3
37875: PPUSH
37876: LD_VAR 0 4
37880: PPUSH
37881: CALL_OW 297
37885: PUSH
37886: LD_VAR 0 14
37890: GREATER
37891: IFFALSE 37895
// exit ;
37893: GO 38436
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37895: LD_ADDR_VAR 0 12
37899: PUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: LD_VAR 0 3
37909: PPUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: LD_VAR 0 5
37919: PPUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 248
37929: PPUSH
37930: LD_INT 0
37932: PPUSH
37933: CALL 38441 0 6
37937: ST_TO_ADDR
// if not hexes then
37938: LD_VAR 0 12
37942: NOT
37943: IFFALSE 37947
// exit ;
37945: GO 38436
// hex := GetHexInfo ( x , y ) ;
37947: LD_ADDR_VAR 0 15
37951: PUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: LD_VAR 0 4
37961: PPUSH
37962: CALL_OW 546
37966: ST_TO_ADDR
// if hex [ 1 ] then
37967: LD_VAR 0 15
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: IFFALSE 37979
// exit ;
37977: GO 38436
// height := hex [ 2 ] ;
37979: LD_ADDR_VAR 0 13
37983: PUSH
37984: LD_VAR 0 15
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: ST_TO_ADDR
// for i = 1 to hexes do
37993: LD_ADDR_VAR 0 7
37997: PUSH
37998: DOUBLE
37999: LD_INT 1
38001: DEC
38002: ST_TO_ADDR
38003: LD_VAR 0 12
38007: PUSH
38008: FOR_TO
38009: IFFALSE 38353
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38011: LD_VAR 0 12
38015: PUSH
38016: LD_VAR 0 7
38020: ARRAY
38021: PUSH
38022: LD_INT 1
38024: ARRAY
38025: PPUSH
38026: LD_VAR 0 12
38030: PUSH
38031: LD_VAR 0 7
38035: ARRAY
38036: PUSH
38037: LD_INT 2
38039: ARRAY
38040: PPUSH
38041: CALL_OW 488
38045: NOT
38046: IFTRUE 38088
38048: PUSH
38049: LD_VAR 0 12
38053: PUSH
38054: LD_VAR 0 7
38058: ARRAY
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PPUSH
38064: LD_VAR 0 12
38068: PUSH
38069: LD_VAR 0 7
38073: ARRAY
38074: PUSH
38075: LD_INT 2
38077: ARRAY
38078: PPUSH
38079: CALL_OW 428
38083: PUSH
38084: LD_INT 0
38086: GREATER
38087: OR
38088: IFTRUE 38126
38090: PUSH
38091: LD_VAR 0 12
38095: PUSH
38096: LD_VAR 0 7
38100: ARRAY
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: PPUSH
38106: LD_VAR 0 12
38110: PUSH
38111: LD_VAR 0 7
38115: ARRAY
38116: PUSH
38117: LD_INT 2
38119: ARRAY
38120: PPUSH
38121: CALL_OW 351
38125: OR
38126: IFFALSE 38132
// exit ;
38128: POP
38129: POP
38130: GO 38436
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38132: LD_ADDR_VAR 0 8
38136: PUSH
38137: LD_VAR 0 12
38141: PUSH
38142: LD_VAR 0 7
38146: ARRAY
38147: PUSH
38148: LD_INT 1
38150: ARRAY
38151: PPUSH
38152: LD_VAR 0 12
38156: PUSH
38157: LD_VAR 0 7
38161: ARRAY
38162: PUSH
38163: LD_INT 2
38165: ARRAY
38166: PPUSH
38167: CALL_OW 546
38171: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38172: LD_VAR 0 8
38176: PUSH
38177: LD_INT 1
38179: ARRAY
38180: IFTRUE 38202
38182: PUSH
38183: LD_VAR 0 8
38187: PUSH
38188: LD_INT 2
38190: ARRAY
38191: PUSH
38192: LD_VAR 0 13
38196: PUSH
38197: LD_INT 2
38199: PLUS
38200: GREATER
38201: OR
38202: IFTRUE 38224
38204: PUSH
38205: LD_VAR 0 8
38209: PUSH
38210: LD_INT 2
38212: ARRAY
38213: PUSH
38214: LD_VAR 0 13
38218: PUSH
38219: LD_INT 2
38221: MINUS
38222: LESS
38223: OR
38224: IFTRUE 38292
38226: PUSH
38227: LD_VAR 0 8
38231: PUSH
38232: LD_INT 3
38234: ARRAY
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 8
38241: PUSH
38242: LD_INT 9
38244: PUSH
38245: LD_INT 10
38247: PUSH
38248: LD_INT 11
38250: PUSH
38251: LD_INT 12
38253: PUSH
38254: LD_INT 13
38256: PUSH
38257: LD_INT 16
38259: PUSH
38260: LD_INT 17
38262: PUSH
38263: LD_INT 18
38265: PUSH
38266: LD_INT 19
38268: PUSH
38269: LD_INT 20
38271: PUSH
38272: LD_INT 21
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: IN
38290: NOT
38291: OR
38292: IFTRUE 38305
38294: PUSH
38295: LD_VAR 0 8
38299: PUSH
38300: LD_INT 5
38302: ARRAY
38303: NOT
38304: OR
38305: IFTRUE 38345
38307: PUSH
38308: LD_VAR 0 8
38312: PUSH
38313: LD_INT 6
38315: ARRAY
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 7
38325: PUSH
38326: LD_INT 9
38328: PUSH
38329: LD_INT 10
38331: PUSH
38332: LD_INT 11
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: IN
38343: NOT
38344: OR
38345: IFFALSE 38351
// exit ;
38347: POP
38348: POP
38349: GO 38436
// end ;
38351: GO 38008
38353: POP
38354: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38355: LD_VAR 0 9
38359: PPUSH
38360: LD_VAR 0 3
38364: PPUSH
38365: LD_VAR 0 4
38369: PPUSH
38370: LD_INT 20
38372: PPUSH
38373: CALL 30255 0 4
38377: PUSH
38378: LD_INT 4
38380: ARRAY
38381: IFFALSE 38385
// exit ;
38383: GO 38436
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38385: LD_VAR 0 2
38389: PUSH
38390: LD_INT 29
38392: PUSH
38393: LD_INT 30
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: IN
38400: IFFALSE 38424
38402: PUSH
38403: LD_VAR 0 3
38407: PPUSH
38408: LD_VAR 0 4
38412: PPUSH
38413: LD_VAR 0 9
38417: PPUSH
38418: CALL_OW 440
38422: NOT
38423: AND
38424: IFFALSE 38428
// exit ;
38426: GO 38436
// result := true ;
38428: LD_ADDR_VAR 0 6
38432: PUSH
38433: LD_INT 1
38435: ST_TO_ADDR
// end ;
38436: LD_VAR 0 6
38440: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38441: LD_INT 0
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
38482: PPUSH
38483: PPUSH
38484: PPUSH
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
// result = [ ] ;
38501: LD_ADDR_VAR 0 7
38505: PUSH
38506: EMPTY
38507: ST_TO_ADDR
// temp_list = [ ] ;
38508: LD_ADDR_VAR 0 9
38512: PUSH
38513: EMPTY
38514: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38515: LD_VAR 0 4
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: LD_INT 4
38534: PUSH
38535: LD_INT 5
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: IN
38546: NOT
38547: IFTRUE 38590
38549: PUSH
38550: LD_VAR 0 1
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: IN
38565: IFFALSE 38589
38567: PUSH
38568: LD_VAR 0 5
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: IN
38587: NOT
38588: AND
38589: OR
38590: IFFALSE 38594
// exit ;
38592: GO 56993
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38594: LD_VAR 0 1
38598: PUSH
38599: LD_INT 6
38601: PUSH
38602: LD_INT 7
38604: PUSH
38605: LD_INT 8
38607: PUSH
38608: LD_INT 13
38610: PUSH
38611: LD_INT 12
38613: PUSH
38614: LD_INT 15
38616: PUSH
38617: LD_INT 11
38619: PUSH
38620: LD_INT 14
38622: PUSH
38623: LD_INT 10
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: IN
38637: IFFALSE 38647
// btype = b_lab ;
38639: LD_ADDR_VAR 0 1
38643: PUSH
38644: LD_INT 6
38646: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38647: LD_VAR 0 6
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: IN
38666: NOT
38667: IFTRUE 38735
38669: PUSH
38670: LD_VAR 0 1
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: LD_INT 6
38689: PUSH
38690: LD_INT 36
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: LD_INT 31
38701: PUSH
38702: LD_INT 32
38704: PUSH
38705: LD_INT 33
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: IN
38721: NOT
38722: IFFALSE 38734
38724: PUSH
38725: LD_VAR 0 6
38729: PUSH
38730: LD_INT 1
38732: EQUAL
38733: AND
38734: OR
38735: IFTRUE 38767
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: IN
38753: NOT
38754: IFFALSE 38766
38756: PUSH
38757: LD_VAR 0 6
38761: PUSH
38762: LD_INT 2
38764: EQUAL
38765: AND
38766: OR
38767: IFFALSE 38777
// mode = 0 ;
38769: LD_ADDR_VAR 0 6
38773: PUSH
38774: LD_INT 0
38776: ST_TO_ADDR
// case mode of 0 :
38777: LD_VAR 0 6
38781: PUSH
38782: LD_INT 0
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38790
38788: GO 50243
38790: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38791: LD_ADDR_VAR 0 11
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38984: LD_ADDR_VAR 0 12
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 3
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39180: LD_ADDR_VAR 0 13
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39379: LD_ADDR_VAR 0 14
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 3
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39575: LD_ADDR_VAR 0 15
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39768: LD_ADDR_VAR 0 16
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39961: LD_ADDR_VAR 0 17
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40191: LD_ADDR_VAR 0 18
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40421: LD_ADDR_VAR 0 19
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40651: LD_ADDR_VAR 0 20
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40881: LD_ADDR_VAR 0 21
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41111: LD_ADDR_VAR 0 22
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41341: LD_ADDR_VAR 0 23
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 3
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 3
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41621: LD_ADDR_VAR 0 24
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41897: LD_ADDR_VAR 0 25
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 3
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42171: LD_ADDR_VAR 0 26
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42447: LD_ADDR_VAR 0 27
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42727: LD_ADDR_VAR 0 28
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43009: LD_ADDR_VAR 0 29
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43288: LD_ADDR_VAR 0 30
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 3
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43566: LD_ADDR_VAR 0 31
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: LD_INT 3
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: NEG
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43844: LD_ADDR_VAR 0 32
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 3
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 3
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44122: LD_ADDR_VAR 0 33
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44401: LD_ADDR_VAR 0 34
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44681: LD_ADDR_VAR 0 35
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44793: LD_ADDR_VAR 0 36
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44905: LD_ADDR_VAR 0 37
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45017: LD_ADDR_VAR 0 38
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45129: LD_ADDR_VAR 0 39
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45241: LD_ADDR_VAR 0 40
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45353: LD_ADDR_VAR 0 41
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 3
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 3
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: LD_INT 3
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45703: LD_ADDR_VAR 0 42
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 3
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46053: LD_ADDR_VAR 0 43
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46401: LD_ADDR_VAR 0 44
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46751: LD_ADDR_VAR 0 45
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 3
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47101: LD_ADDR_VAR 0 46
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47449: LD_ADDR_VAR 0 47
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47600: LD_ADDR_VAR 0 48
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47747: LD_ADDR_VAR 0 49
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47891: LD_ADDR_VAR 0 50
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48035: LD_ADDR_VAR 0 51
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48182: LD_ADDR_VAR 0 52
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48333: LD_ADDR_VAR 0 53
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48563: LD_ADDR_VAR 0 54
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48793: LD_ADDR_VAR 0 55
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49023: LD_ADDR_VAR 0 56
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49253: LD_ADDR_VAR 0 57
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49483: LD_ADDR_VAR 0 58
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49713: LD_ADDR_VAR 0 59
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49801: LD_ADDR_VAR 0 60
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49889: LD_ADDR_VAR 0 61
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49977: LD_ADDR_VAR 0 62
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50065: LD_ADDR_VAR 0 63
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50153: LD_ADDR_VAR 0 64
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// end ; 1 :
50241: GO 56138
50243: LD_INT 1
50245: DOUBLE
50246: EQUAL
50247: IFTRUE 50251
50249: GO 52874
50251: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50252: LD_ADDR_VAR 0 11
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50296: LD_ADDR_VAR 0 12
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50337: LD_ADDR_VAR 0 13
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50377: LD_ADDR_VAR 0 14
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50418: LD_ADDR_VAR 0 15
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50462: LD_ADDR_VAR 0 16
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 3
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50508: LD_ADDR_VAR 0 17
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50552: LD_ADDR_VAR 0 18
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50593: LD_ADDR_VAR 0 19
50597: PUSH
50598: LD_INT 3
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50633: LD_ADDR_VAR 0 20
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50674: LD_ADDR_VAR 0 21
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50718: LD_ADDR_VAR 0 22
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 3
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50764: LD_ADDR_VAR 0 23
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 4
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50808: LD_ADDR_VAR 0 24
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50849: LD_ADDR_VAR 0 25
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50889: LD_ADDR_VAR 0 26
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 4
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50930: LD_ADDR_VAR 0 27
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 4
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50974: LD_ADDR_VAR 0 28
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: LD_INT 4
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51020: LD_ADDR_VAR 0 29
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 4
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 5
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 5
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 4
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 6
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 6
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 5
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51175: LD_ADDR_VAR 0 30
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 4
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 4
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 5
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 5
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 6
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 6
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51318: LD_ADDR_VAR 0 31
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 4
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 4
51365: PUSH
51366: LD_INT 4
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 5
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 5
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 6
51415: PUSH
51416: LD_INT 5
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 6
51425: PUSH
51426: LD_INT 6
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 5
51435: PUSH
51436: LD_INT 6
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51457: LD_ADDR_VAR 0 32
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 4
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 4
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 5
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 5
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 6
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 6
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 5
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51600: LD_ADDR_VAR 0 33
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 4
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 4
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 5
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 5
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 5
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 6
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 6
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51755: LD_ADDR_VAR 0 34
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: NEG
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: LD_INT 4
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 4
51810: NEG
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 4
51822: NEG
51823: PUSH
51824: LD_INT 4
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 4
51834: NEG
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 5
51846: NEG
51847: PUSH
51848: LD_INT 4
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 5
51858: NEG
51859: PUSH
51860: LD_INT 5
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 5
51870: NEG
51871: PUSH
51872: LD_INT 6
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 6
51882: NEG
51883: PUSH
51884: LD_INT 5
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 6
51894: NEG
51895: PUSH
51896: LD_INT 6
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51918: LD_ADDR_VAR 0 41
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51962: LD_ADDR_VAR 0 42
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52003: LD_ADDR_VAR 0 43
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52043: LD_ADDR_VAR 0 44
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52084: LD_ADDR_VAR 0 45
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52128: LD_ADDR_VAR 0 46
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52174: LD_ADDR_VAR 0 47
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52207: LD_ADDR_VAR 0 48
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52238: LD_ADDR_VAR 0 49
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52267: LD_ADDR_VAR 0 50
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52296: LD_ADDR_VAR 0 51
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52327: LD_ADDR_VAR 0 52
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52360: LD_ADDR_VAR 0 53
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52404: LD_ADDR_VAR 0 54
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52445: LD_ADDR_VAR 0 55
52449: PUSH
52450: LD_INT 3
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52485: LD_ADDR_VAR 0 56
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 3
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 3
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52526: LD_ADDR_VAR 0 57
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52570: LD_ADDR_VAR 0 58
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52616: LD_ADDR_VAR 0 59
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52660: LD_ADDR_VAR 0 60
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52701: LD_ADDR_VAR 0 61
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52741: LD_ADDR_VAR 0 62
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52782: LD_ADDR_VAR 0 63
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52826: LD_ADDR_VAR 0 64
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// end ; 2 :
52872: GO 56138
52874: LD_INT 2
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52882
52880: GO 56137
52882: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52883: LD_ADDR_VAR 0 29
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 4
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 5
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 5
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 5
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: LD_INT 4
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 4
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 4
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 4
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 4
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 5
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 5
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 5
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 3
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 4
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 4
53245: NEG
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 4
53268: NEG
53269: PUSH
53270: LD_INT 4
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: NEG
53281: PUSH
53282: LD_INT 5
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 4
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 4
53316: NEG
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 5
53328: NEG
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 5
53340: NEG
53341: PUSH
53342: LD_INT 5
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 5
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 5
53364: NEG
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53421: LD_ADDR_VAR 0 30
53425: PUSH
53426: LD_INT 4
53428: PUSH
53429: LD_INT 4
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 5
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 5
53458: PUSH
53459: LD_INT 5
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 4
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: LD_INT 5
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 4
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 4
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 4
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 4
53611: NEG
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 5
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 5
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 5
53690: NEG
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 4
53785: NEG
53786: PUSH
53787: LD_INT 4
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 4
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 4
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 5
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 4
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 5
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 5
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53968: LD_ADDR_VAR 0 31
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 4
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 5
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 5
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 4
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: LD_INT 5
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 3
54068: NEG
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 4
54147: NEG
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 4
54170: NEG
54171: PUSH
54172: LD_INT 4
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: NEG
54183: PUSH
54184: LD_INT 5
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 4
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: NEG
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 5
54230: NEG
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 5
54242: NEG
54243: PUSH
54244: LD_INT 5
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 5
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 5
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 3
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 4
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 4
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 4
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 5
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 5
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 5
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54518: LD_ADDR_VAR 0 32
54522: PUSH
54523: LD_INT 4
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 5
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 5
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 5
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 4
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 4
54699: NEG
54700: PUSH
54701: LD_INT 4
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 4
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 4
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 5
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 4
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 5
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 5
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 4
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 4
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 4
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 4
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 4
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 5
54950: PUSH
54951: LD_INT 4
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: LD_INT 5
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 4
54970: PUSH
54971: LD_INT 5
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: LD_INT 5
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55065: LD_ADDR_VAR 0 33
55069: PUSH
55070: LD_INT 4
55072: NEG
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 4
55084: NEG
55085: PUSH
55086: LD_INT 5
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 4
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 5
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 5
55144: NEG
55145: PUSH
55146: LD_INT 5
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 5
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: NEG
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 3
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 4
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 4
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: LD_INT 4
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 5
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 5
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 4
55405: PUSH
55406: LD_INT 4
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 4
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 4
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 5
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 5
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55603: LD_ADDR_VAR 0 34
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 4
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 5
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 4
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 5
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 5
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 4
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 4
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 4
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 4
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 5
55825: PUSH
55826: LD_INT 4
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 5
55835: PUSH
55836: LD_INT 5
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 5
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 5
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: LD_INT 4
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 4
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 4
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 4
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 5
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 5
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// end ; end ;
56135: GO 56138
56137: POP
// case btype of b_depot , b_warehouse :
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 0
56145: DOUBLE
56146: EQUAL
56147: IFTRUE 56157
56149: LD_INT 1
56151: DOUBLE
56152: EQUAL
56153: IFTRUE 56157
56155: GO 56358
56157: POP
// case nation of nation_american :
56158: LD_VAR 0 5
56162: PUSH
56163: LD_INT 1
56165: DOUBLE
56166: EQUAL
56167: IFTRUE 56171
56169: GO 56227
56171: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56172: LD_ADDR_VAR 0 9
56176: PUSH
56177: LD_VAR 0 11
56181: PUSH
56182: LD_VAR 0 12
56186: PUSH
56187: LD_VAR 0 13
56191: PUSH
56192: LD_VAR 0 14
56196: PUSH
56197: LD_VAR 0 15
56201: PUSH
56202: LD_VAR 0 16
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: LD_VAR 0 4
56219: PUSH
56220: LD_INT 1
56222: PLUS
56223: ARRAY
56224: ST_TO_ADDR
56225: GO 56356
56227: LD_INT 2
56229: DOUBLE
56230: EQUAL
56231: IFTRUE 56235
56233: GO 56291
56235: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56236: LD_ADDR_VAR 0 9
56240: PUSH
56241: LD_VAR 0 17
56245: PUSH
56246: LD_VAR 0 18
56250: PUSH
56251: LD_VAR 0 19
56255: PUSH
56256: LD_VAR 0 20
56260: PUSH
56261: LD_VAR 0 21
56265: PUSH
56266: LD_VAR 0 22
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: PUSH
56279: LD_VAR 0 4
56283: PUSH
56284: LD_INT 1
56286: PLUS
56287: ARRAY
56288: ST_TO_ADDR
56289: GO 56356
56291: LD_INT 3
56293: DOUBLE
56294: EQUAL
56295: IFTRUE 56299
56297: GO 56355
56299: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56300: LD_ADDR_VAR 0 9
56304: PUSH
56305: LD_VAR 0 23
56309: PUSH
56310: LD_VAR 0 24
56314: PUSH
56315: LD_VAR 0 25
56319: PUSH
56320: LD_VAR 0 26
56324: PUSH
56325: LD_VAR 0 27
56329: PUSH
56330: LD_VAR 0 28
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: PUSH
56343: LD_VAR 0 4
56347: PUSH
56348: LD_INT 1
56350: PLUS
56351: ARRAY
56352: ST_TO_ADDR
56353: GO 56356
56355: POP
56356: GO 56911
56358: LD_INT 2
56360: DOUBLE
56361: EQUAL
56362: IFTRUE 56372
56364: LD_INT 3
56366: DOUBLE
56367: EQUAL
56368: IFTRUE 56372
56370: GO 56428
56372: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56373: LD_ADDR_VAR 0 9
56377: PUSH
56378: LD_VAR 0 29
56382: PUSH
56383: LD_VAR 0 30
56387: PUSH
56388: LD_VAR 0 31
56392: PUSH
56393: LD_VAR 0 32
56397: PUSH
56398: LD_VAR 0 33
56402: PUSH
56403: LD_VAR 0 34
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: PUSH
56416: LD_VAR 0 4
56420: PUSH
56421: LD_INT 1
56423: PLUS
56424: ARRAY
56425: ST_TO_ADDR
56426: GO 56911
56428: LD_INT 16
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56490
56434: LD_INT 17
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56490
56440: LD_INT 18
56442: DOUBLE
56443: EQUAL
56444: IFTRUE 56490
56446: LD_INT 19
56448: DOUBLE
56449: EQUAL
56450: IFTRUE 56490
56452: LD_INT 22
56454: DOUBLE
56455: EQUAL
56456: IFTRUE 56490
56458: LD_INT 20
56460: DOUBLE
56461: EQUAL
56462: IFTRUE 56490
56464: LD_INT 21
56466: DOUBLE
56467: EQUAL
56468: IFTRUE 56490
56470: LD_INT 23
56472: DOUBLE
56473: EQUAL
56474: IFTRUE 56490
56476: LD_INT 24
56478: DOUBLE
56479: EQUAL
56480: IFTRUE 56490
56482: LD_INT 25
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56490
56488: GO 56546
56490: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56491: LD_ADDR_VAR 0 9
56495: PUSH
56496: LD_VAR 0 35
56500: PUSH
56501: LD_VAR 0 36
56505: PUSH
56506: LD_VAR 0 37
56510: PUSH
56511: LD_VAR 0 38
56515: PUSH
56516: LD_VAR 0 39
56520: PUSH
56521: LD_VAR 0 40
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: PUSH
56534: LD_VAR 0 4
56538: PUSH
56539: LD_INT 1
56541: PLUS
56542: ARRAY
56543: ST_TO_ADDR
56544: GO 56911
56546: LD_INT 6
56548: DOUBLE
56549: EQUAL
56550: IFTRUE 56602
56552: LD_INT 7
56554: DOUBLE
56555: EQUAL
56556: IFTRUE 56602
56558: LD_INT 8
56560: DOUBLE
56561: EQUAL
56562: IFTRUE 56602
56564: LD_INT 13
56566: DOUBLE
56567: EQUAL
56568: IFTRUE 56602
56570: LD_INT 12
56572: DOUBLE
56573: EQUAL
56574: IFTRUE 56602
56576: LD_INT 15
56578: DOUBLE
56579: EQUAL
56580: IFTRUE 56602
56582: LD_INT 11
56584: DOUBLE
56585: EQUAL
56586: IFTRUE 56602
56588: LD_INT 14
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56602
56594: LD_INT 10
56596: DOUBLE
56597: EQUAL
56598: IFTRUE 56602
56600: GO 56658
56602: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56603: LD_ADDR_VAR 0 9
56607: PUSH
56608: LD_VAR 0 41
56612: PUSH
56613: LD_VAR 0 42
56617: PUSH
56618: LD_VAR 0 43
56622: PUSH
56623: LD_VAR 0 44
56627: PUSH
56628: LD_VAR 0 45
56632: PUSH
56633: LD_VAR 0 46
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: PUSH
56646: LD_VAR 0 4
56650: PUSH
56651: LD_INT 1
56653: PLUS
56654: ARRAY
56655: ST_TO_ADDR
56656: GO 56911
56658: LD_INT 36
56660: DOUBLE
56661: EQUAL
56662: IFTRUE 56666
56664: GO 56722
56666: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56667: LD_ADDR_VAR 0 9
56671: PUSH
56672: LD_VAR 0 47
56676: PUSH
56677: LD_VAR 0 48
56681: PUSH
56682: LD_VAR 0 49
56686: PUSH
56687: LD_VAR 0 50
56691: PUSH
56692: LD_VAR 0 51
56696: PUSH
56697: LD_VAR 0 52
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: PUSH
56710: LD_VAR 0 4
56714: PUSH
56715: LD_INT 1
56717: PLUS
56718: ARRAY
56719: ST_TO_ADDR
56720: GO 56911
56722: LD_INT 4
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56748
56728: LD_INT 5
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56748
56734: LD_INT 34
56736: DOUBLE
56737: EQUAL
56738: IFTRUE 56748
56740: LD_INT 37
56742: DOUBLE
56743: EQUAL
56744: IFTRUE 56748
56746: GO 56804
56748: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56749: LD_ADDR_VAR 0 9
56753: PUSH
56754: LD_VAR 0 53
56758: PUSH
56759: LD_VAR 0 54
56763: PUSH
56764: LD_VAR 0 55
56768: PUSH
56769: LD_VAR 0 56
56773: PUSH
56774: LD_VAR 0 57
56778: PUSH
56779: LD_VAR 0 58
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: PUSH
56792: LD_VAR 0 4
56796: PUSH
56797: LD_INT 1
56799: PLUS
56800: ARRAY
56801: ST_TO_ADDR
56802: GO 56911
56804: LD_INT 31
56806: DOUBLE
56807: EQUAL
56808: IFTRUE 56854
56810: LD_INT 32
56812: DOUBLE
56813: EQUAL
56814: IFTRUE 56854
56816: LD_INT 33
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56854
56822: LD_INT 27
56824: DOUBLE
56825: EQUAL
56826: IFTRUE 56854
56828: LD_INT 26
56830: DOUBLE
56831: EQUAL
56832: IFTRUE 56854
56834: LD_INT 28
56836: DOUBLE
56837: EQUAL
56838: IFTRUE 56854
56840: LD_INT 29
56842: DOUBLE
56843: EQUAL
56844: IFTRUE 56854
56846: LD_INT 30
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56854
56852: GO 56910
56854: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56855: LD_ADDR_VAR 0 9
56859: PUSH
56860: LD_VAR 0 59
56864: PUSH
56865: LD_VAR 0 60
56869: PUSH
56870: LD_VAR 0 61
56874: PUSH
56875: LD_VAR 0 62
56879: PUSH
56880: LD_VAR 0 63
56884: PUSH
56885: LD_VAR 0 64
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 4
56902: PUSH
56903: LD_INT 1
56905: PLUS
56906: ARRAY
56907: ST_TO_ADDR
56908: GO 56911
56910: POP
// temp_list2 = [ ] ;
56911: LD_ADDR_VAR 0 10
56915: PUSH
56916: EMPTY
56917: ST_TO_ADDR
// for i in temp_list do
56918: LD_ADDR_VAR 0 8
56922: PUSH
56923: LD_VAR 0 9
56927: PUSH
56928: FOR_IN
56929: IFFALSE 56981
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56931: LD_ADDR_VAR 0 10
56935: PUSH
56936: LD_VAR 0 10
56940: PUSH
56941: LD_VAR 0 8
56945: PUSH
56946: LD_INT 1
56948: ARRAY
56949: PUSH
56950: LD_VAR 0 2
56954: PLUS
56955: PUSH
56956: LD_VAR 0 8
56960: PUSH
56961: LD_INT 2
56963: ARRAY
56964: PUSH
56965: LD_VAR 0 3
56969: PLUS
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: ADD
56978: ST_TO_ADDR
56979: GO 56928
56981: POP
56982: POP
// result = temp_list2 ;
56983: LD_ADDR_VAR 0 7
56987: PUSH
56988: LD_VAR 0 10
56992: ST_TO_ADDR
// end ;
56993: LD_VAR 0 7
56997: RET
// export function EnemyInRange ( unit , dist ) ; begin
56998: LD_INT 0
57000: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57001: LD_ADDR_VAR 0 3
57005: PUSH
57006: LD_VAR 0 1
57010: PPUSH
57011: CALL_OW 255
57015: PPUSH
57016: LD_VAR 0 1
57020: PPUSH
57021: CALL_OW 250
57025: PPUSH
57026: LD_VAR 0 1
57030: PPUSH
57031: CALL_OW 251
57035: PPUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: CALL 30255 0 4
57045: PUSH
57046: LD_INT 4
57048: ARRAY
57049: ST_TO_ADDR
// end ;
57050: LD_VAR 0 3
57054: RET
// export function PlayerSeeMe ( unit ) ; begin
57055: LD_INT 0
57057: PPUSH
// result := See ( your_side , unit ) ;
57058: LD_ADDR_VAR 0 2
57062: PUSH
57063: LD_OWVAR 2
57067: PPUSH
57068: LD_VAR 0 1
57072: PPUSH
57073: CALL_OW 292
57077: ST_TO_ADDR
// end ;
57078: LD_VAR 0 2
57082: RET
// export function ReverseDir ( unit ) ; begin
57083: LD_INT 0
57085: PPUSH
// if not unit then
57086: LD_VAR 0 1
57090: NOT
57091: IFFALSE 57095
// exit ;
57093: GO 57118
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57095: LD_ADDR_VAR 0 2
57099: PUSH
57100: LD_VAR 0 1
57104: PPUSH
57105: CALL_OW 254
57109: PUSH
57110: LD_INT 3
57112: PLUS
57113: PUSH
57114: LD_INT 6
57116: MOD
57117: ST_TO_ADDR
// end ;
57118: LD_VAR 0 2
57122: RET
// export function ReverseArray ( array ) ; var i ; begin
57123: LD_INT 0
57125: PPUSH
57126: PPUSH
// if not array then
57127: LD_VAR 0 1
57131: NOT
57132: IFFALSE 57136
// exit ;
57134: GO 57191
// result := [ ] ;
57136: LD_ADDR_VAR 0 2
57140: PUSH
57141: EMPTY
57142: ST_TO_ADDR
// for i := array downto 1 do
57143: LD_ADDR_VAR 0 3
57147: PUSH
57148: DOUBLE
57149: LD_VAR 0 1
57153: INC
57154: ST_TO_ADDR
57155: LD_INT 1
57157: PUSH
57158: FOR_DOWNTO
57159: IFFALSE 57189
// result := Join ( result , array [ i ] ) ;
57161: LD_ADDR_VAR 0 2
57165: PUSH
57166: LD_VAR 0 2
57170: PPUSH
57171: LD_VAR 0 1
57175: PUSH
57176: LD_VAR 0 3
57180: ARRAY
57181: PPUSH
57182: CALL 62043 0 2
57186: ST_TO_ADDR
57187: GO 57158
57189: POP
57190: POP
// end ;
57191: LD_VAR 0 2
57195: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
57200: PPUSH
57201: PPUSH
57202: PPUSH
57203: PPUSH
// if not unit or not hexes then
57204: LD_VAR 0 1
57208: NOT
57209: IFTRUE 57218
57211: PUSH
57212: LD_VAR 0 2
57216: NOT
57217: OR
57218: IFFALSE 57222
// exit ;
57220: GO 57345
// dist := 9999 ;
57222: LD_ADDR_VAR 0 5
57226: PUSH
57227: LD_INT 9999
57229: ST_TO_ADDR
// for i = 1 to hexes do
57230: LD_ADDR_VAR 0 4
57234: PUSH
57235: DOUBLE
57236: LD_INT 1
57238: DEC
57239: ST_TO_ADDR
57240: LD_VAR 0 2
57244: PUSH
57245: FOR_TO
57246: IFFALSE 57333
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57248: LD_ADDR_VAR 0 6
57252: PUSH
57253: LD_VAR 0 1
57257: PPUSH
57258: LD_VAR 0 2
57262: PUSH
57263: LD_VAR 0 4
57267: ARRAY
57268: PUSH
57269: LD_INT 1
57271: ARRAY
57272: PPUSH
57273: LD_VAR 0 2
57277: PUSH
57278: LD_VAR 0 4
57282: ARRAY
57283: PUSH
57284: LD_INT 2
57286: ARRAY
57287: PPUSH
57288: CALL_OW 297
57292: ST_TO_ADDR
// if tdist < dist then
57293: LD_VAR 0 6
57297: PUSH
57298: LD_VAR 0 5
57302: LESS
57303: IFFALSE 57331
// begin hex := hexes [ i ] ;
57305: LD_ADDR_VAR 0 8
57309: PUSH
57310: LD_VAR 0 2
57314: PUSH
57315: LD_VAR 0 4
57319: ARRAY
57320: ST_TO_ADDR
// dist := tdist ;
57321: LD_ADDR_VAR 0 5
57325: PUSH
57326: LD_VAR 0 6
57330: ST_TO_ADDR
// end ; end ;
57331: GO 57245
57333: POP
57334: POP
// result := hex ;
57335: LD_ADDR_VAR 0 3
57339: PUSH
57340: LD_VAR 0 8
57344: ST_TO_ADDR
// end ;
57345: LD_VAR 0 3
57349: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57350: LD_INT 0
57352: PPUSH
57353: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57354: LD_VAR 0 1
57358: NOT
57359: IFTRUE 57398
57361: PUSH
57362: LD_VAR 0 1
57366: PUSH
57367: LD_INT 21
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 23
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PPUSH
57391: CALL_OW 69
57395: IN
57396: NOT
57397: OR
57398: IFFALSE 57402
// exit ;
57400: GO 57449
// for i = 1 to 3 do
57402: LD_ADDR_VAR 0 3
57406: PUSH
57407: DOUBLE
57408: LD_INT 1
57410: DEC
57411: ST_TO_ADDR
57412: LD_INT 3
57414: PUSH
57415: FOR_TO
57416: IFFALSE 57447
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57418: LD_VAR 0 1
57422: PPUSH
57423: CALL_OW 250
57427: PPUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 251
57437: PPUSH
57438: LD_INT 1
57440: PPUSH
57441: CALL_OW 453
57445: GO 57415
57447: POP
57448: POP
// end ;
57449: LD_VAR 0 2
57453: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57454: LD_INT 0
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
57461: PPUSH
// if not unit or not enemy_unit then
57462: LD_VAR 0 1
57466: NOT
57467: IFTRUE 57476
57469: PUSH
57470: LD_VAR 0 2
57474: NOT
57475: OR
57476: IFFALSE 57480
// exit ;
57478: GO 57961
// if GetLives ( i ) < 250 then
57480: LD_VAR 0 4
57484: PPUSH
57485: CALL_OW 256
57489: PUSH
57490: LD_INT 250
57492: LESS
57493: IFFALSE 57506
// begin ComAutodestruct ( i ) ;
57495: LD_VAR 0 4
57499: PPUSH
57500: CALL 57350 0 1
// exit ;
57504: GO 57961
// end ; x := GetX ( enemy_unit ) ;
57506: LD_ADDR_VAR 0 7
57510: PUSH
57511: LD_VAR 0 2
57515: PPUSH
57516: CALL_OW 250
57520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57521: LD_ADDR_VAR 0 8
57525: PUSH
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL_OW 251
57535: ST_TO_ADDR
// if not x or not y then
57536: LD_VAR 0 7
57540: NOT
57541: IFTRUE 57550
57543: PUSH
57544: LD_VAR 0 8
57548: NOT
57549: OR
57550: IFFALSE 57554
// exit ;
57552: GO 57961
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57554: LD_ADDR_VAR 0 6
57558: PUSH
57559: LD_VAR 0 7
57563: PPUSH
57564: LD_INT 0
57566: PPUSH
57567: LD_INT 4
57569: PPUSH
57570: CALL_OW 272
57574: PUSH
57575: LD_VAR 0 8
57579: PPUSH
57580: LD_INT 0
57582: PPUSH
57583: LD_INT 4
57585: PPUSH
57586: CALL_OW 273
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_VAR 0 7
57599: PPUSH
57600: LD_INT 1
57602: PPUSH
57603: LD_INT 4
57605: PPUSH
57606: CALL_OW 272
57610: PUSH
57611: LD_VAR 0 8
57615: PPUSH
57616: LD_INT 1
57618: PPUSH
57619: LD_INT 4
57621: PPUSH
57622: CALL_OW 273
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_VAR 0 7
57635: PPUSH
57636: LD_INT 2
57638: PPUSH
57639: LD_INT 4
57641: PPUSH
57642: CALL_OW 272
57646: PUSH
57647: LD_VAR 0 8
57651: PPUSH
57652: LD_INT 2
57654: PPUSH
57655: LD_INT 4
57657: PPUSH
57658: CALL_OW 273
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_VAR 0 7
57671: PPUSH
57672: LD_INT 3
57674: PPUSH
57675: LD_INT 4
57677: PPUSH
57678: CALL_OW 272
57682: PUSH
57683: LD_VAR 0 8
57687: PPUSH
57688: LD_INT 3
57690: PPUSH
57691: LD_INT 4
57693: PPUSH
57694: CALL_OW 273
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_VAR 0 7
57707: PPUSH
57708: LD_INT 4
57710: PPUSH
57711: LD_INT 4
57713: PPUSH
57714: CALL_OW 272
57718: PUSH
57719: LD_VAR 0 8
57723: PPUSH
57724: LD_INT 4
57726: PPUSH
57727: LD_INT 4
57729: PPUSH
57730: CALL_OW 273
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_VAR 0 7
57743: PPUSH
57744: LD_INT 5
57746: PPUSH
57747: LD_INT 4
57749: PPUSH
57750: CALL_OW 272
57754: PUSH
57755: LD_VAR 0 8
57759: PPUSH
57760: LD_INT 5
57762: PPUSH
57763: LD_INT 4
57765: PPUSH
57766: CALL_OW 273
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// for i = tmp downto 1 do
57783: LD_ADDR_VAR 0 4
57787: PUSH
57788: DOUBLE
57789: LD_VAR 0 6
57793: INC
57794: ST_TO_ADDR
57795: LD_INT 1
57797: PUSH
57798: FOR_DOWNTO
57799: IFFALSE 57902
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57801: LD_VAR 0 6
57805: PUSH
57806: LD_VAR 0 4
57810: ARRAY
57811: PUSH
57812: LD_INT 1
57814: ARRAY
57815: PPUSH
57816: LD_VAR 0 6
57820: PUSH
57821: LD_VAR 0 4
57825: ARRAY
57826: PUSH
57827: LD_INT 2
57829: ARRAY
57830: PPUSH
57831: CALL_OW 488
57835: NOT
57836: IFTRUE 57878
57838: PUSH
57839: LD_VAR 0 6
57843: PUSH
57844: LD_VAR 0 4
57848: ARRAY
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: PPUSH
57854: LD_VAR 0 6
57858: PUSH
57859: LD_VAR 0 4
57863: ARRAY
57864: PUSH
57865: LD_INT 2
57867: ARRAY
57868: PPUSH
57869: CALL_OW 428
57873: PUSH
57874: LD_INT 0
57876: NONEQUAL
57877: OR
57878: IFFALSE 57900
// tmp := Delete ( tmp , i ) ;
57880: LD_ADDR_VAR 0 6
57884: PUSH
57885: LD_VAR 0 6
57889: PPUSH
57890: LD_VAR 0 4
57894: PPUSH
57895: CALL_OW 3
57899: ST_TO_ADDR
57900: GO 57798
57902: POP
57903: POP
// j := GetClosestHex ( unit , tmp ) ;
57904: LD_ADDR_VAR 0 5
57908: PUSH
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_VAR 0 6
57918: PPUSH
57919: CALL 57196 0 2
57923: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57924: LD_VAR 0 1
57928: PPUSH
57929: LD_VAR 0 5
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PPUSH
57938: LD_VAR 0 5
57942: PUSH
57943: LD_INT 2
57945: ARRAY
57946: PPUSH
57947: CALL_OW 111
// result := j ;
57951: LD_ADDR_VAR 0 3
57955: PUSH
57956: LD_VAR 0 5
57960: ST_TO_ADDR
// end ;
57961: LD_VAR 0 3
57965: RET
// export function PrepareApemanSoldier ( ) ; begin
57966: LD_INT 0
57968: PPUSH
// uc_nation := 0 ;
57969: LD_ADDR_OWVAR 21
57973: PUSH
57974: LD_INT 0
57976: ST_TO_ADDR
// hc_sex := sex_male ;
57977: LD_ADDR_OWVAR 27
57981: PUSH
57982: LD_INT 1
57984: ST_TO_ADDR
// hc_name :=  ;
57985: LD_ADDR_OWVAR 26
57989: PUSH
57990: LD_STRING 
57992: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57993: LD_ADDR_OWVAR 28
57997: PUSH
57998: LD_INT 15
58000: ST_TO_ADDR
// hc_gallery :=  ;
58001: LD_ADDR_OWVAR 33
58005: PUSH
58006: LD_STRING 
58008: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58009: LD_ADDR_OWVAR 31
58013: PUSH
58014: LD_INT 0
58016: PPUSH
58017: LD_INT 3
58019: PPUSH
58020: CALL_OW 12
58024: PUSH
58025: LD_INT 0
58027: PPUSH
58028: LD_INT 3
58030: PPUSH
58031: CALL_OW 12
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58048: LD_ADDR_OWVAR 29
58052: PUSH
58053: LD_INT 10
58055: PUSH
58056: LD_INT 12
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// end ;
58063: LD_VAR 0 1
58067: RET
// export function PrepareApemanEngineer ( ) ; begin
58068: LD_INT 0
58070: PPUSH
// uc_nation := 0 ;
58071: LD_ADDR_OWVAR 21
58075: PUSH
58076: LD_INT 0
58078: ST_TO_ADDR
// hc_sex := sex_male ;
58079: LD_ADDR_OWVAR 27
58083: PUSH
58084: LD_INT 1
58086: ST_TO_ADDR
// hc_name :=  ;
58087: LD_ADDR_OWVAR 26
58091: PUSH
58092: LD_STRING 
58094: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58095: LD_ADDR_OWVAR 28
58099: PUSH
58100: LD_INT 16
58102: ST_TO_ADDR
// hc_gallery :=  ;
58103: LD_ADDR_OWVAR 33
58107: PUSH
58108: LD_STRING 
58110: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58111: LD_ADDR_OWVAR 31
58115: PUSH
58116: LD_INT 0
58118: PPUSH
58119: LD_INT 3
58121: PPUSH
58122: CALL_OW 12
58126: PUSH
58127: LD_INT 0
58129: PPUSH
58130: LD_INT 3
58132: PPUSH
58133: CALL_OW 12
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58150: LD_ADDR_OWVAR 29
58154: PUSH
58155: LD_INT 10
58157: PUSH
58158: LD_INT 12
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// end ;
58165: LD_VAR 0 1
58169: RET
// export function PrepareApeman ( agressivity ) ; begin
58170: LD_INT 0
58172: PPUSH
// uc_side := 0 ;
58173: LD_ADDR_OWVAR 20
58177: PUSH
58178: LD_INT 0
58180: ST_TO_ADDR
// uc_nation := 0 ;
58181: LD_ADDR_OWVAR 21
58185: PUSH
58186: LD_INT 0
58188: ST_TO_ADDR
// hc_sex := sex_male ;
58189: LD_ADDR_OWVAR 27
58193: PUSH
58194: LD_INT 1
58196: ST_TO_ADDR
// hc_class := class_apeman ;
58197: LD_ADDR_OWVAR 28
58201: PUSH
58202: LD_INT 12
58204: ST_TO_ADDR
// hc_gallery :=  ;
58205: LD_ADDR_OWVAR 33
58209: PUSH
58210: LD_STRING 
58212: ST_TO_ADDR
// hc_name :=  ;
58213: LD_ADDR_OWVAR 26
58217: PUSH
58218: LD_STRING 
58220: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58221: LD_ADDR_OWVAR 29
58225: PUSH
58226: LD_INT 10
58228: PUSH
58229: LD_INT 12
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// if agressivity = 0 then
58236: LD_VAR 0 1
58240: PUSH
58241: LD_INT 0
58243: EQUAL
58244: IFFALSE 58256
// hc_agressivity := 0 else
58246: LD_ADDR_OWVAR 35
58250: PUSH
58251: LD_INT 0
58253: ST_TO_ADDR
58254: GO 58277
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58256: LD_ADDR_OWVAR 35
58260: PUSH
58261: LD_VAR 0 1
58265: NEG
58266: PPUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: CALL_OW 12
58276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58277: LD_ADDR_OWVAR 31
58281: PUSH
58282: LD_INT 0
58284: PPUSH
58285: LD_INT 3
58287: PPUSH
58288: CALL_OW 12
58292: PUSH
58293: LD_INT 0
58295: PPUSH
58296: LD_INT 3
58298: PPUSH
58299: CALL_OW 12
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// end ;
58316: LD_VAR 0 2
58320: RET
// export function PrepareTiger ( agressivity ) ; begin
58321: LD_INT 0
58323: PPUSH
// uc_side := 0 ;
58324: LD_ADDR_OWVAR 20
58328: PUSH
58329: LD_INT 0
58331: ST_TO_ADDR
// uc_nation := 0 ;
58332: LD_ADDR_OWVAR 21
58336: PUSH
58337: LD_INT 0
58339: ST_TO_ADDR
// InitHc ;
58340: CALL_OW 19
// hc_class := class_tiger ;
58344: LD_ADDR_OWVAR 28
58348: PUSH
58349: LD_INT 14
58351: ST_TO_ADDR
// hc_gallery :=  ;
58352: LD_ADDR_OWVAR 33
58356: PUSH
58357: LD_STRING 
58359: ST_TO_ADDR
// hc_name :=  ;
58360: LD_ADDR_OWVAR 26
58364: PUSH
58365: LD_STRING 
58367: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58368: LD_ADDR_OWVAR 35
58372: PUSH
58373: LD_VAR 0 1
58377: NEG
58378: PPUSH
58379: LD_VAR 0 1
58383: PPUSH
58384: CALL_OW 12
58388: ST_TO_ADDR
// end ;
58389: LD_VAR 0 2
58393: RET
// export function PrepareEnchidna ( ) ; begin
58394: LD_INT 0
58396: PPUSH
// uc_side := 0 ;
58397: LD_ADDR_OWVAR 20
58401: PUSH
58402: LD_INT 0
58404: ST_TO_ADDR
// uc_nation := 0 ;
58405: LD_ADDR_OWVAR 21
58409: PUSH
58410: LD_INT 0
58412: ST_TO_ADDR
// InitHc ;
58413: CALL_OW 19
// hc_class := class_baggie ;
58417: LD_ADDR_OWVAR 28
58421: PUSH
58422: LD_INT 13
58424: ST_TO_ADDR
// hc_gallery :=  ;
58425: LD_ADDR_OWVAR 33
58429: PUSH
58430: LD_STRING 
58432: ST_TO_ADDR
// hc_name :=  ;
58433: LD_ADDR_OWVAR 26
58437: PUSH
58438: LD_STRING 
58440: ST_TO_ADDR
// end ;
58441: LD_VAR 0 1
58445: RET
// export function PrepareFrog ( ) ; begin
58446: LD_INT 0
58448: PPUSH
// uc_side := 0 ;
58449: LD_ADDR_OWVAR 20
58453: PUSH
58454: LD_INT 0
58456: ST_TO_ADDR
// uc_nation := 0 ;
58457: LD_ADDR_OWVAR 21
58461: PUSH
58462: LD_INT 0
58464: ST_TO_ADDR
// InitHc ;
58465: CALL_OW 19
// hc_class := class_frog ;
58469: LD_ADDR_OWVAR 28
58473: PUSH
58474: LD_INT 19
58476: ST_TO_ADDR
// hc_gallery :=  ;
58477: LD_ADDR_OWVAR 33
58481: PUSH
58482: LD_STRING 
58484: ST_TO_ADDR
// hc_name :=  ;
58485: LD_ADDR_OWVAR 26
58489: PUSH
58490: LD_STRING 
58492: ST_TO_ADDR
// end ;
58493: LD_VAR 0 1
58497: RET
// export function PrepareFish ( ) ; begin
58498: LD_INT 0
58500: PPUSH
// uc_side := 0 ;
58501: LD_ADDR_OWVAR 20
58505: PUSH
58506: LD_INT 0
58508: ST_TO_ADDR
// uc_nation := 0 ;
58509: LD_ADDR_OWVAR 21
58513: PUSH
58514: LD_INT 0
58516: ST_TO_ADDR
// InitHc ;
58517: CALL_OW 19
// hc_class := class_fish ;
58521: LD_ADDR_OWVAR 28
58525: PUSH
58526: LD_INT 20
58528: ST_TO_ADDR
// hc_gallery :=  ;
58529: LD_ADDR_OWVAR 33
58533: PUSH
58534: LD_STRING 
58536: ST_TO_ADDR
// hc_name :=  ;
58537: LD_ADDR_OWVAR 26
58541: PUSH
58542: LD_STRING 
58544: ST_TO_ADDR
// end ;
58545: LD_VAR 0 1
58549: RET
// export function PrepareBird ( ) ; begin
58550: LD_INT 0
58552: PPUSH
// uc_side := 0 ;
58553: LD_ADDR_OWVAR 20
58557: PUSH
58558: LD_INT 0
58560: ST_TO_ADDR
// uc_nation := 0 ;
58561: LD_ADDR_OWVAR 21
58565: PUSH
58566: LD_INT 0
58568: ST_TO_ADDR
// InitHc ;
58569: CALL_OW 19
// hc_class := class_phororhacos ;
58573: LD_ADDR_OWVAR 28
58577: PUSH
58578: LD_INT 18
58580: ST_TO_ADDR
// hc_gallery :=  ;
58581: LD_ADDR_OWVAR 33
58585: PUSH
58586: LD_STRING 
58588: ST_TO_ADDR
// hc_name :=  ;
58589: LD_ADDR_OWVAR 26
58593: PUSH
58594: LD_STRING 
58596: ST_TO_ADDR
// end ;
58597: LD_VAR 0 1
58601: RET
// export function PrepareHorse ( ) ; begin
58602: LD_INT 0
58604: PPUSH
// uc_side := 0 ;
58605: LD_ADDR_OWVAR 20
58609: PUSH
58610: LD_INT 0
58612: ST_TO_ADDR
// uc_nation := 0 ;
58613: LD_ADDR_OWVAR 21
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// InitHc ;
58621: CALL_OW 19
// hc_class := class_horse ;
58625: LD_ADDR_OWVAR 28
58629: PUSH
58630: LD_INT 21
58632: ST_TO_ADDR
// hc_gallery :=  ;
58633: LD_ADDR_OWVAR 33
58637: PUSH
58638: LD_STRING 
58640: ST_TO_ADDR
// hc_name :=  ;
58641: LD_ADDR_OWVAR 26
58645: PUSH
58646: LD_STRING 
58648: ST_TO_ADDR
// end ;
58649: LD_VAR 0 1
58653: RET
// export function PrepareMastodont ( ) ; begin
58654: LD_INT 0
58656: PPUSH
// uc_side := 0 ;
58657: LD_ADDR_OWVAR 20
58661: PUSH
58662: LD_INT 0
58664: ST_TO_ADDR
// uc_nation := 0 ;
58665: LD_ADDR_OWVAR 21
58669: PUSH
58670: LD_INT 0
58672: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58673: LD_ADDR_OWVAR 37
58677: PUSH
58678: LD_INT 31
58680: ST_TO_ADDR
// vc_control := control_rider ;
58681: LD_ADDR_OWVAR 38
58685: PUSH
58686: LD_INT 4
58688: ST_TO_ADDR
// end ;
58689: LD_VAR 0 1
58693: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58694: LD_INT 0
58696: PPUSH
58697: PPUSH
58698: PPUSH
// uc_side = 0 ;
58699: LD_ADDR_OWVAR 20
58703: PUSH
58704: LD_INT 0
58706: ST_TO_ADDR
// uc_nation = 0 ;
58707: LD_ADDR_OWVAR 21
58711: PUSH
58712: LD_INT 0
58714: ST_TO_ADDR
// InitHc_All ( ) ;
58715: CALL_OW 584
// InitVc ;
58719: CALL_OW 20
// if mastodonts then
58723: LD_VAR 0 6
58727: IFFALSE 58794
// for i = 1 to mastodonts do
58729: LD_ADDR_VAR 0 11
58733: PUSH
58734: DOUBLE
58735: LD_INT 1
58737: DEC
58738: ST_TO_ADDR
58739: LD_VAR 0 6
58743: PUSH
58744: FOR_TO
58745: IFFALSE 58792
// begin vc_chassis := 31 ;
58747: LD_ADDR_OWVAR 37
58751: PUSH
58752: LD_INT 31
58754: ST_TO_ADDR
// vc_control := control_rider ;
58755: LD_ADDR_OWVAR 38
58759: PUSH
58760: LD_INT 4
58762: ST_TO_ADDR
// animal := CreateVehicle ;
58763: LD_ADDR_VAR 0 12
58767: PUSH
58768: CALL_OW 45
58772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58773: LD_VAR 0 12
58777: PPUSH
58778: LD_VAR 0 8
58782: PPUSH
58783: LD_INT 0
58785: PPUSH
58786: CALL 60936 0 3
// end ;
58790: GO 58744
58792: POP
58793: POP
// if horses then
58794: LD_VAR 0 5
58798: IFFALSE 58865
// for i = 1 to horses do
58800: LD_ADDR_VAR 0 11
58804: PUSH
58805: DOUBLE
58806: LD_INT 1
58808: DEC
58809: ST_TO_ADDR
58810: LD_VAR 0 5
58814: PUSH
58815: FOR_TO
58816: IFFALSE 58863
// begin hc_class := 21 ;
58818: LD_ADDR_OWVAR 28
58822: PUSH
58823: LD_INT 21
58825: ST_TO_ADDR
// hc_gallery :=  ;
58826: LD_ADDR_OWVAR 33
58830: PUSH
58831: LD_STRING 
58833: ST_TO_ADDR
// animal := CreateHuman ;
58834: LD_ADDR_VAR 0 12
58838: PUSH
58839: CALL_OW 44
58843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58844: LD_VAR 0 12
58848: PPUSH
58849: LD_VAR 0 8
58853: PPUSH
58854: LD_INT 0
58856: PPUSH
58857: CALL 60936 0 3
// end ;
58861: GO 58815
58863: POP
58864: POP
// if birds then
58865: LD_VAR 0 1
58869: IFFALSE 58936
// for i = 1 to birds do
58871: LD_ADDR_VAR 0 11
58875: PUSH
58876: DOUBLE
58877: LD_INT 1
58879: DEC
58880: ST_TO_ADDR
58881: LD_VAR 0 1
58885: PUSH
58886: FOR_TO
58887: IFFALSE 58934
// begin hc_class := 18 ;
58889: LD_ADDR_OWVAR 28
58893: PUSH
58894: LD_INT 18
58896: ST_TO_ADDR
// hc_gallery =  ;
58897: LD_ADDR_OWVAR 33
58901: PUSH
58902: LD_STRING 
58904: ST_TO_ADDR
// animal := CreateHuman ;
58905: LD_ADDR_VAR 0 12
58909: PUSH
58910: CALL_OW 44
58914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58915: LD_VAR 0 12
58919: PPUSH
58920: LD_VAR 0 8
58924: PPUSH
58925: LD_INT 0
58927: PPUSH
58928: CALL 60936 0 3
// end ;
58932: GO 58886
58934: POP
58935: POP
// if tigers then
58936: LD_VAR 0 2
58940: IFFALSE 59024
// for i = 1 to tigers do
58942: LD_ADDR_VAR 0 11
58946: PUSH
58947: DOUBLE
58948: LD_INT 1
58950: DEC
58951: ST_TO_ADDR
58952: LD_VAR 0 2
58956: PUSH
58957: FOR_TO
58958: IFFALSE 59022
// begin hc_class = class_tiger ;
58960: LD_ADDR_OWVAR 28
58964: PUSH
58965: LD_INT 14
58967: ST_TO_ADDR
// hc_gallery =  ;
58968: LD_ADDR_OWVAR 33
58972: PUSH
58973: LD_STRING 
58975: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58976: LD_ADDR_OWVAR 35
58980: PUSH
58981: LD_INT 7
58983: NEG
58984: PPUSH
58985: LD_INT 7
58987: PPUSH
58988: CALL_OW 12
58992: ST_TO_ADDR
// animal := CreateHuman ;
58993: LD_ADDR_VAR 0 12
58997: PUSH
58998: CALL_OW 44
59002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59003: LD_VAR 0 12
59007: PPUSH
59008: LD_VAR 0 8
59012: PPUSH
59013: LD_INT 0
59015: PPUSH
59016: CALL 60936 0 3
// end ;
59020: GO 58957
59022: POP
59023: POP
// if apemans then
59024: LD_VAR 0 3
59028: IFFALSE 59151
// for i = 1 to apemans do
59030: LD_ADDR_VAR 0 11
59034: PUSH
59035: DOUBLE
59036: LD_INT 1
59038: DEC
59039: ST_TO_ADDR
59040: LD_VAR 0 3
59044: PUSH
59045: FOR_TO
59046: IFFALSE 59149
// begin hc_class = class_apeman ;
59048: LD_ADDR_OWVAR 28
59052: PUSH
59053: LD_INT 12
59055: ST_TO_ADDR
// hc_gallery =  ;
59056: LD_ADDR_OWVAR 33
59060: PUSH
59061: LD_STRING 
59063: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59064: LD_ADDR_OWVAR 35
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PPUSH
59073: LD_INT 2
59075: PPUSH
59076: CALL_OW 12
59080: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59081: LD_ADDR_OWVAR 31
59085: PUSH
59086: LD_INT 1
59088: PPUSH
59089: LD_INT 3
59091: PPUSH
59092: CALL_OW 12
59096: PUSH
59097: LD_INT 1
59099: PPUSH
59100: LD_INT 3
59102: PPUSH
59103: CALL_OW 12
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: ST_TO_ADDR
// animal := CreateHuman ;
59120: LD_ADDR_VAR 0 12
59124: PUSH
59125: CALL_OW 44
59129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59130: LD_VAR 0 12
59134: PPUSH
59135: LD_VAR 0 8
59139: PPUSH
59140: LD_INT 0
59142: PPUSH
59143: CALL 60936 0 3
// end ;
59147: GO 59045
59149: POP
59150: POP
// if enchidnas then
59151: LD_VAR 0 4
59155: IFFALSE 59222
// for i = 1 to enchidnas do
59157: LD_ADDR_VAR 0 11
59161: PUSH
59162: DOUBLE
59163: LD_INT 1
59165: DEC
59166: ST_TO_ADDR
59167: LD_VAR 0 4
59171: PUSH
59172: FOR_TO
59173: IFFALSE 59220
// begin hc_class = 13 ;
59175: LD_ADDR_OWVAR 28
59179: PUSH
59180: LD_INT 13
59182: ST_TO_ADDR
// hc_gallery =  ;
59183: LD_ADDR_OWVAR 33
59187: PUSH
59188: LD_STRING 
59190: ST_TO_ADDR
// animal := CreateHuman ;
59191: LD_ADDR_VAR 0 12
59195: PUSH
59196: CALL_OW 44
59200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59201: LD_VAR 0 12
59205: PPUSH
59206: LD_VAR 0 8
59210: PPUSH
59211: LD_INT 0
59213: PPUSH
59214: CALL 60936 0 3
// end ;
59218: GO 59172
59220: POP
59221: POP
// if fishes then
59222: LD_VAR 0 7
59226: IFFALSE 59293
// for i = 1 to fishes do
59228: LD_ADDR_VAR 0 11
59232: PUSH
59233: DOUBLE
59234: LD_INT 1
59236: DEC
59237: ST_TO_ADDR
59238: LD_VAR 0 7
59242: PUSH
59243: FOR_TO
59244: IFFALSE 59291
// begin hc_class = 20 ;
59246: LD_ADDR_OWVAR 28
59250: PUSH
59251: LD_INT 20
59253: ST_TO_ADDR
// hc_gallery =  ;
59254: LD_ADDR_OWVAR 33
59258: PUSH
59259: LD_STRING 
59261: ST_TO_ADDR
// animal := CreateHuman ;
59262: LD_ADDR_VAR 0 12
59266: PUSH
59267: CALL_OW 44
59271: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59272: LD_VAR 0 12
59276: PPUSH
59277: LD_VAR 0 9
59281: PPUSH
59282: LD_INT 0
59284: PPUSH
59285: CALL 60936 0 3
// end ;
59289: GO 59243
59291: POP
59292: POP
// end ;
59293: LD_VAR 0 10
59297: RET
// export function WantHeal ( sci , unit ) ; begin
59298: LD_INT 0
59300: PPUSH
// if GetTaskList ( sci ) > 0 then
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 437
59310: PUSH
59311: LD_INT 0
59313: GREATER
59314: IFFALSE 59386
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 437
59325: PUSH
59326: LD_INT 1
59328: ARRAY
59329: PUSH
59330: LD_INT 1
59332: ARRAY
59333: PUSH
59334: LD_STRING l
59336: EQUAL
59337: IFFALSE 59364
59339: PUSH
59340: LD_VAR 0 1
59344: PPUSH
59345: CALL_OW 437
59349: PUSH
59350: LD_INT 1
59352: ARRAY
59353: PUSH
59354: LD_INT 4
59356: ARRAY
59357: PUSH
59358: LD_VAR 0 2
59362: EQUAL
59363: AND
59364: IFFALSE 59376
// result := true else
59366: LD_ADDR_VAR 0 3
59370: PUSH
59371: LD_INT 1
59373: ST_TO_ADDR
59374: GO 59384
// result := false ;
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: LD_INT 0
59383: ST_TO_ADDR
// end else
59384: GO 59394
// result := false ;
59386: LD_ADDR_VAR 0 3
59390: PUSH
59391: LD_INT 0
59393: ST_TO_ADDR
// end ;
59394: LD_VAR 0 3
59398: RET
// export function HealTarget ( sci ) ; begin
59399: LD_INT 0
59401: PPUSH
// if not sci then
59402: LD_VAR 0 1
59406: NOT
59407: IFFALSE 59411
// exit ;
59409: GO 59476
// result := 0 ;
59411: LD_ADDR_VAR 0 2
59415: PUSH
59416: LD_INT 0
59418: ST_TO_ADDR
// if GetTaskList ( sci ) then
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 437
59428: IFFALSE 59476
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59430: LD_VAR 0 1
59434: PPUSH
59435: CALL_OW 437
59439: PUSH
59440: LD_INT 1
59442: ARRAY
59443: PUSH
59444: LD_INT 1
59446: ARRAY
59447: PUSH
59448: LD_STRING l
59450: EQUAL
59451: IFFALSE 59476
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59453: LD_ADDR_VAR 0 2
59457: PUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL_OW 437
59467: PUSH
59468: LD_INT 1
59470: ARRAY
59471: PUSH
59472: LD_INT 4
59474: ARRAY
59475: ST_TO_ADDR
// end ;
59476: LD_VAR 0 2
59480: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59481: LD_INT 0
59483: PPUSH
59484: PPUSH
59485: PPUSH
59486: PPUSH
// if not base_units then
59487: LD_VAR 0 1
59491: NOT
59492: IFFALSE 59496
// exit ;
59494: GO 59583
// result := false ;
59496: LD_ADDR_VAR 0 2
59500: PUSH
59501: LD_INT 0
59503: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_VAR 0 1
59513: PPUSH
59514: LD_INT 21
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PPUSH
59524: CALL_OW 72
59528: ST_TO_ADDR
// if not tmp then
59529: LD_VAR 0 5
59533: NOT
59534: IFFALSE 59538
// exit ;
59536: GO 59583
// for i in tmp do
59538: LD_ADDR_VAR 0 3
59542: PUSH
59543: LD_VAR 0 5
59547: PUSH
59548: FOR_IN
59549: IFFALSE 59581
// begin result := EnemyInRange ( i , 22 ) ;
59551: LD_ADDR_VAR 0 2
59555: PUSH
59556: LD_VAR 0 3
59560: PPUSH
59561: LD_INT 22
59563: PPUSH
59564: CALL 56998 0 2
59568: ST_TO_ADDR
// if result then
59569: LD_VAR 0 2
59573: IFFALSE 59579
// exit ;
59575: POP
59576: POP
59577: GO 59583
// end ;
59579: GO 59548
59581: POP
59582: POP
// end ;
59583: LD_VAR 0 2
59587: RET
// export function FilterByTag ( units , tag ) ; begin
59588: LD_INT 0
59590: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59591: LD_ADDR_VAR 0 3
59595: PUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: LD_INT 120
59603: PUSH
59604: LD_VAR 0 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PPUSH
59613: CALL_OW 72
59617: ST_TO_ADDR
// end ;
59618: LD_VAR 0 3
59622: RET
// export function IsDriver ( un ) ; begin
59623: LD_INT 0
59625: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59626: LD_ADDR_VAR 0 2
59630: PUSH
59631: LD_VAR 0 1
59635: PUSH
59636: LD_INT 55
59638: PUSH
59639: EMPTY
59640: LIST
59641: PPUSH
59642: CALL_OW 69
59646: IN
59647: ST_TO_ADDR
// end ;
59648: LD_VAR 0 2
59652: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
// list := [ ] ;
59657: LD_ADDR_VAR 0 5
59661: PUSH
59662: EMPTY
59663: ST_TO_ADDR
// case d of 0 :
59664: LD_VAR 0 3
59668: PUSH
59669: LD_INT 0
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59677
59675: GO 59810
59677: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59678: LD_ADDR_VAR 0 5
59682: PUSH
59683: LD_VAR 0 1
59687: PUSH
59688: LD_INT 4
59690: MINUS
59691: PUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_INT 4
59699: MINUS
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: PUSH
59709: LD_VAR 0 1
59713: PUSH
59714: LD_INT 3
59716: MINUS
59717: PUSH
59718: LD_VAR 0 2
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_INT 4
59738: PLUS
59739: PUSH
59740: LD_VAR 0 2
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: PUSH
59753: LD_VAR 0 1
59757: PUSH
59758: LD_INT 3
59760: PLUS
59761: PUSH
59762: LD_VAR 0 2
59766: PUSH
59767: LD_INT 3
59769: PLUS
59770: PUSH
59771: LD_INT 5
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: PUSH
59779: LD_VAR 0 1
59783: PUSH
59784: LD_VAR 0 2
59788: PUSH
59789: LD_INT 4
59791: PLUS
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: ST_TO_ADDR
// end ; 1 :
59808: GO 60508
59810: LD_INT 1
59812: DOUBLE
59813: EQUAL
59814: IFTRUE 59818
59816: GO 59951
59818: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59819: LD_ADDR_VAR 0 5
59823: PUSH
59824: LD_VAR 0 1
59828: PUSH
59829: LD_VAR 0 2
59833: PUSH
59834: LD_INT 4
59836: MINUS
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: PUSH
59846: LD_VAR 0 1
59850: PUSH
59851: LD_INT 3
59853: MINUS
59854: PUSH
59855: LD_VAR 0 2
59859: PUSH
59860: LD_INT 3
59862: MINUS
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_INT 4
59879: MINUS
59880: PUSH
59881: LD_VAR 0 2
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: LD_INT 3
59906: PLUS
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: PUSH
59916: LD_VAR 0 1
59920: PUSH
59921: LD_INT 4
59923: PLUS
59924: PUSH
59925: LD_VAR 0 2
59929: PUSH
59930: LD_INT 4
59932: PLUS
59933: PUSH
59934: LD_INT 5
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: ST_TO_ADDR
// end ; 2 :
59949: GO 60508
59951: LD_INT 2
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 59959
59957: GO 60088
59959: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: LD_VAR 0 1
59969: PUSH
59970: LD_VAR 0 2
59974: PUSH
59975: LD_INT 3
59977: MINUS
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: PUSH
59987: LD_VAR 0 1
59991: PUSH
59992: LD_INT 4
59994: PLUS
59995: PUSH
59996: LD_VAR 0 2
60000: PUSH
60001: LD_INT 4
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: PUSH
60009: LD_VAR 0 1
60013: PUSH
60014: LD_VAR 0 2
60018: PUSH
60019: LD_INT 4
60021: PLUS
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: PUSH
60031: LD_VAR 0 1
60035: PUSH
60036: LD_INT 3
60038: MINUS
60039: PUSH
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: PUSH
60053: LD_VAR 0 1
60057: PUSH
60058: LD_INT 4
60060: MINUS
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_INT 4
60069: MINUS
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// end ; 3 :
60086: GO 60508
60088: LD_INT 3
60090: DOUBLE
60091: EQUAL
60092: IFTRUE 60096
60094: GO 60229
60096: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60097: LD_ADDR_VAR 0 5
60101: PUSH
60102: LD_VAR 0 1
60106: PUSH
60107: LD_INT 3
60109: PLUS
60110: PUSH
60111: LD_VAR 0 2
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: PUSH
60124: LD_VAR 0 1
60128: PUSH
60129: LD_INT 4
60131: PLUS
60132: PUSH
60133: LD_VAR 0 2
60137: PUSH
60138: LD_INT 4
60140: PLUS
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 1
60154: PUSH
60155: LD_INT 4
60157: MINUS
60158: PUSH
60159: LD_VAR 0 2
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: LIST
60171: PUSH
60172: LD_VAR 0 1
60176: PUSH
60177: LD_VAR 0 2
60181: PUSH
60182: LD_INT 4
60184: MINUS
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: PUSH
60194: LD_VAR 0 1
60198: PUSH
60199: LD_INT 3
60201: MINUS
60202: PUSH
60203: LD_VAR 0 2
60207: PUSH
60208: LD_INT 3
60210: MINUS
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// end ; 4 :
60227: GO 60508
60229: LD_INT 4
60231: DOUBLE
60232: EQUAL
60233: IFTRUE 60237
60235: GO 60370
60237: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60238: LD_ADDR_VAR 0 5
60242: PUSH
60243: LD_VAR 0 1
60247: PUSH
60248: LD_VAR 0 2
60252: PUSH
60253: LD_INT 4
60255: PLUS
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: PUSH
60265: LD_VAR 0 1
60269: PUSH
60270: LD_INT 3
60272: PLUS
60273: PUSH
60274: LD_VAR 0 2
60278: PUSH
60279: LD_INT 3
60281: PLUS
60282: PUSH
60283: LD_INT 5
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: PUSH
60291: LD_VAR 0 1
60295: PUSH
60296: LD_INT 4
60298: PLUS
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: PUSH
60313: LD_VAR 0 1
60317: PUSH
60318: LD_VAR 0 2
60322: PUSH
60323: LD_INT 3
60325: MINUS
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: PUSH
60335: LD_VAR 0 1
60339: PUSH
60340: LD_INT 4
60342: MINUS
60343: PUSH
60344: LD_VAR 0 2
60348: PUSH
60349: LD_INT 4
60351: MINUS
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// end ; 5 :
60368: GO 60508
60370: LD_INT 5
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60378
60376: GO 60507
60378: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60379: LD_ADDR_VAR 0 5
60383: PUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 4
60391: MINUS
60392: PUSH
60393: LD_VAR 0 2
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: PUSH
60406: LD_VAR 0 1
60410: PUSH
60411: LD_VAR 0 2
60415: PUSH
60416: LD_INT 4
60418: MINUS
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: PUSH
60428: LD_VAR 0 1
60432: PUSH
60433: LD_INT 4
60435: PLUS
60436: PUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_INT 4
60444: PLUS
60445: PUSH
60446: LD_INT 5
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_INT 3
60461: PLUS
60462: PUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_INT 4
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: LD_VAR 0 2
60485: PUSH
60486: LD_INT 3
60488: PLUS
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: ST_TO_ADDR
// end ; end ;
60505: GO 60508
60507: POP
// result := list ;
60508: LD_ADDR_VAR 0 4
60512: PUSH
60513: LD_VAR 0 5
60517: ST_TO_ADDR
// end ;
60518: LD_VAR 0 4
60522: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60523: LD_INT 0
60525: PPUSH
60526: PPUSH
60527: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60528: LD_VAR 0 1
60532: NOT
60533: IFTRUE 60561
60535: PUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 3
60549: PUSH
60550: LD_INT 4
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: IN
60559: NOT
60560: OR
60561: IFFALSE 60565
// exit ;
60563: GO 60648
// tmp := [ ] ;
60565: LD_ADDR_VAR 0 5
60569: PUSH
60570: EMPTY
60571: ST_TO_ADDR
// for i in units do
60572: LD_ADDR_VAR 0 4
60576: PUSH
60577: LD_VAR 0 1
60581: PUSH
60582: FOR_IN
60583: IFFALSE 60617
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60585: LD_ADDR_VAR 0 5
60589: PUSH
60590: LD_VAR 0 5
60594: PPUSH
60595: LD_VAR 0 4
60599: PPUSH
60600: LD_VAR 0 2
60604: PPUSH
60605: CALL_OW 259
60609: PPUSH
60610: CALL 62043 0 2
60614: ST_TO_ADDR
60615: GO 60582
60617: POP
60618: POP
// if not tmp then
60619: LD_VAR 0 5
60623: NOT
60624: IFFALSE 60628
// exit ;
60626: GO 60648
// result := SortListByListDesc ( units , tmp ) ;
60628: LD_ADDR_VAR 0 3
60632: PUSH
60633: LD_VAR 0 1
60637: PPUSH
60638: LD_VAR 0 5
60642: PPUSH
60643: CALL_OW 77
60647: ST_TO_ADDR
// end ;
60648: LD_VAR 0 3
60652: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60653: LD_INT 0
60655: PPUSH
60656: PPUSH
60657: PPUSH
// result := false ;
60658: LD_ADDR_VAR 0 3
60662: PUSH
60663: LD_INT 0
60665: ST_TO_ADDR
// if not building then
60666: LD_VAR 0 2
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 60819
// x := GetX ( building ) ;
60675: LD_ADDR_VAR 0 4
60679: PUSH
60680: LD_VAR 0 2
60684: PPUSH
60685: CALL_OW 250
60689: ST_TO_ADDR
// y := GetY ( building ) ;
60690: LD_ADDR_VAR 0 5
60694: PUSH
60695: LD_VAR 0 2
60699: PPUSH
60700: CALL_OW 251
60704: ST_TO_ADDR
// if not x or not y then
60705: LD_VAR 0 4
60709: NOT
60710: IFTRUE 60719
60712: PUSH
60713: LD_VAR 0 5
60717: NOT
60718: OR
60719: IFFALSE 60723
// exit ;
60721: GO 60819
// if GetTaskList ( unit ) then
60723: LD_VAR 0 1
60727: PPUSH
60728: CALL_OW 437
60732: IFFALSE 60819
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60734: LD_STRING e
60736: PUSH
60737: LD_VAR 0 1
60741: PPUSH
60742: CALL_OW 437
60746: PUSH
60747: LD_INT 1
60749: ARRAY
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: EQUAL
60755: IFFALSE 60782
60757: PUSH
60758: LD_VAR 0 4
60762: PUSH
60763: LD_VAR 0 1
60767: PPUSH
60768: CALL_OW 437
60772: PUSH
60773: LD_INT 1
60775: ARRAY
60776: PUSH
60777: LD_INT 2
60779: ARRAY
60780: EQUAL
60781: AND
60782: IFFALSE 60809
60784: PUSH
60785: LD_VAR 0 5
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 437
60799: PUSH
60800: LD_INT 1
60802: ARRAY
60803: PUSH
60804: LD_INT 3
60806: ARRAY
60807: EQUAL
60808: AND
60809: IFFALSE 60819
// result := true end ;
60811: LD_ADDR_VAR 0 3
60815: PUSH
60816: LD_INT 1
60818: ST_TO_ADDR
// end ;
60819: LD_VAR 0 3
60823: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60824: LD_INT 0
60826: PPUSH
// result := false ;
60827: LD_ADDR_VAR 0 4
60831: PUSH
60832: LD_INT 0
60834: ST_TO_ADDR
// if GetTaskList ( unit ) then
60835: LD_VAR 0 1
60839: PPUSH
60840: CALL_OW 437
60844: IFFALSE 60931
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60846: LD_STRING M
60848: PUSH
60849: LD_VAR 0 1
60853: PPUSH
60854: CALL_OW 437
60858: PUSH
60859: LD_INT 1
60861: ARRAY
60862: PUSH
60863: LD_INT 1
60865: ARRAY
60866: EQUAL
60867: IFFALSE 60894
60869: PUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_VAR 0 1
60879: PPUSH
60880: CALL_OW 437
60884: PUSH
60885: LD_INT 1
60887: ARRAY
60888: PUSH
60889: LD_INT 2
60891: ARRAY
60892: EQUAL
60893: AND
60894: IFFALSE 60921
60896: PUSH
60897: LD_VAR 0 3
60901: PUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: CALL_OW 437
60911: PUSH
60912: LD_INT 1
60914: ARRAY
60915: PUSH
60916: LD_INT 3
60918: ARRAY
60919: EQUAL
60920: AND
60921: IFFALSE 60931
// result := true ;
60923: LD_ADDR_VAR 0 4
60927: PUSH
60928: LD_INT 1
60930: ST_TO_ADDR
// end ; end ;
60931: LD_VAR 0 4
60935: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60936: LD_INT 0
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
// if not unit or not area then
60942: LD_VAR 0 1
60946: NOT
60947: IFTRUE 60956
60949: PUSH
60950: LD_VAR 0 2
60954: NOT
60955: OR
60956: IFFALSE 60960
// exit ;
60958: GO 61136
// tmp := AreaToList ( area , i ) ;
60960: LD_ADDR_VAR 0 6
60964: PUSH
60965: LD_VAR 0 2
60969: PPUSH
60970: LD_VAR 0 5
60974: PPUSH
60975: CALL_OW 517
60979: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60980: LD_ADDR_VAR 0 5
60984: PUSH
60985: DOUBLE
60986: LD_INT 1
60988: DEC
60989: ST_TO_ADDR
60990: LD_VAR 0 6
60994: PUSH
60995: LD_INT 1
60997: ARRAY
60998: PUSH
60999: FOR_TO
61000: IFFALSE 61134
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61002: LD_ADDR_VAR 0 7
61006: PUSH
61007: LD_VAR 0 6
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PUSH
61016: LD_VAR 0 5
61020: ARRAY
61021: PUSH
61022: LD_VAR 0 6
61026: PUSH
61027: LD_INT 2
61029: ARRAY
61030: PUSH
61031: LD_VAR 0 5
61035: ARRAY
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61041: LD_INT 92
61043: PUSH
61044: LD_VAR 0 7
61048: PUSH
61049: LD_INT 1
61051: ARRAY
61052: PUSH
61053: LD_VAR 0 7
61057: PUSH
61058: LD_INT 2
61060: ARRAY
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: PPUSH
61071: CALL_OW 69
61075: PUSH
61076: LD_INT 0
61078: EQUAL
61079: IFFALSE 61132
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61081: LD_VAR 0 1
61085: PPUSH
61086: LD_VAR 0 7
61090: PUSH
61091: LD_INT 1
61093: ARRAY
61094: PPUSH
61095: LD_VAR 0 7
61099: PUSH
61100: LD_INT 2
61102: ARRAY
61103: PPUSH
61104: LD_VAR 0 3
61108: PPUSH
61109: CALL_OW 48
// result := IsPlaced ( unit ) ;
61113: LD_ADDR_VAR 0 4
61117: PUSH
61118: LD_VAR 0 1
61122: PPUSH
61123: CALL_OW 305
61127: ST_TO_ADDR
// exit ;
61128: POP
61129: POP
61130: GO 61136
// end ; end ;
61132: GO 60999
61134: POP
61135: POP
// end ;
61136: LD_VAR 0 4
61140: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61141: LD_INT 0
61143: PPUSH
61144: PPUSH
61145: PPUSH
// if not side or side > 8 then
61146: LD_VAR 0 1
61150: NOT
61151: IFTRUE 61163
61153: PUSH
61154: LD_VAR 0 1
61158: PUSH
61159: LD_INT 8
61161: GREATER
61162: OR
61163: IFFALSE 61167
// exit ;
61165: GO 61354
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61167: LD_ADDR_VAR 0 4
61171: PUSH
61172: LD_INT 22
61174: PUSH
61175: LD_VAR 0 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 21
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PPUSH
61198: CALL_OW 69
61202: ST_TO_ADDR
// if not tmp then
61203: LD_VAR 0 4
61207: NOT
61208: IFFALSE 61212
// exit ;
61210: GO 61354
// enable_addtolog := true ;
61212: LD_ADDR_OWVAR 81
61216: PUSH
61217: LD_INT 1
61219: ST_TO_ADDR
// AddToLog ( [ ) ;
61220: LD_STRING [
61222: PPUSH
61223: CALL_OW 561
// for i in tmp do
61227: LD_ADDR_VAR 0 3
61231: PUSH
61232: LD_VAR 0 4
61236: PUSH
61237: FOR_IN
61238: IFFALSE 61345
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61240: LD_STRING [
61242: PUSH
61243: LD_VAR 0 3
61247: PPUSH
61248: CALL_OW 266
61252: STR
61253: PUSH
61254: LD_STRING , 
61256: STR
61257: PUSH
61258: LD_VAR 0 3
61262: PPUSH
61263: CALL_OW 250
61267: STR
61268: PUSH
61269: LD_STRING , 
61271: STR
61272: PUSH
61273: LD_VAR 0 3
61277: PPUSH
61278: CALL_OW 251
61282: STR
61283: PUSH
61284: LD_STRING , 
61286: STR
61287: PUSH
61288: LD_VAR 0 3
61292: PPUSH
61293: CALL_OW 254
61297: STR
61298: PUSH
61299: LD_STRING , 
61301: STR
61302: PUSH
61303: LD_VAR 0 3
61307: PPUSH
61308: LD_INT 1
61310: PPUSH
61311: CALL_OW 268
61315: STR
61316: PUSH
61317: LD_STRING , 
61319: STR
61320: PUSH
61321: LD_VAR 0 3
61325: PPUSH
61326: LD_INT 2
61328: PPUSH
61329: CALL_OW 268
61333: STR
61334: PUSH
61335: LD_STRING ],
61337: STR
61338: PPUSH
61339: CALL_OW 561
// end ;
61343: GO 61237
61345: POP
61346: POP
// AddToLog ( ]; ) ;
61347: LD_STRING ];
61349: PPUSH
61350: CALL_OW 561
// end ;
61354: LD_VAR 0 2
61358: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61359: LD_INT 0
61361: PPUSH
61362: PPUSH
61363: PPUSH
61364: PPUSH
61365: PPUSH
// if not area or not rate or not max then
61366: LD_VAR 0 1
61370: NOT
61371: IFTRUE 61380
61373: PUSH
61374: LD_VAR 0 2
61378: NOT
61379: OR
61380: IFTRUE 61389
61382: PUSH
61383: LD_VAR 0 4
61387: NOT
61388: OR
61389: IFFALSE 61393
// exit ;
61391: GO 61582
// while 1 do
61393: LD_INT 1
61395: IFFALSE 61582
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61397: LD_ADDR_VAR 0 9
61401: PUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: LD_INT 1
61409: PPUSH
61410: CALL_OW 287
61414: PUSH
61415: LD_INT 10
61417: MUL
61418: ST_TO_ADDR
// r := rate / 10 ;
61419: LD_ADDR_VAR 0 7
61423: PUSH
61424: LD_VAR 0 2
61428: PUSH
61429: LD_INT 10
61431: DIVREAL
61432: ST_TO_ADDR
// time := 1 1$00 ;
61433: LD_ADDR_VAR 0 8
61437: PUSH
61438: LD_INT 2100
61440: ST_TO_ADDR
// if amount < min then
61441: LD_VAR 0 9
61445: PUSH
61446: LD_VAR 0 3
61450: LESS
61451: IFFALSE 61469
// r := r * 2 else
61453: LD_ADDR_VAR 0 7
61457: PUSH
61458: LD_VAR 0 7
61462: PUSH
61463: LD_INT 2
61465: MUL
61466: ST_TO_ADDR
61467: GO 61495
// if amount > max then
61469: LD_VAR 0 9
61473: PUSH
61474: LD_VAR 0 4
61478: GREATER
61479: IFFALSE 61495
// r := r / 2 ;
61481: LD_ADDR_VAR 0 7
61485: PUSH
61486: LD_VAR 0 7
61490: PUSH
61491: LD_INT 2
61493: DIVREAL
61494: ST_TO_ADDR
// time := time / r ;
61495: LD_ADDR_VAR 0 8
61499: PUSH
61500: LD_VAR 0 8
61504: PUSH
61505: LD_VAR 0 7
61509: DIVREAL
61510: ST_TO_ADDR
// if time < 0 then
61511: LD_VAR 0 8
61515: PUSH
61516: LD_INT 0
61518: LESS
61519: IFFALSE 61536
// time := time * - 1 ;
61521: LD_ADDR_VAR 0 8
61525: PUSH
61526: LD_VAR 0 8
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: MUL
61535: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61536: LD_VAR 0 8
61540: PUSH
61541: LD_INT 35
61543: PPUSH
61544: LD_INT 875
61546: PPUSH
61547: CALL_OW 12
61551: PLUS
61552: PPUSH
61553: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61557: LD_INT 1
61559: PPUSH
61560: LD_INT 5
61562: PPUSH
61563: CALL_OW 12
61567: PPUSH
61568: LD_VAR 0 1
61572: PPUSH
61573: LD_INT 1
61575: PPUSH
61576: CALL_OW 55
// end ;
61580: GO 61393
// end ;
61582: LD_VAR 0 5
61586: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61587: LD_INT 0
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
61593: PPUSH
61594: PPUSH
61595: PPUSH
61596: PPUSH
// if not turrets or not factories then
61597: LD_VAR 0 1
61601: NOT
61602: IFTRUE 61611
61604: PUSH
61605: LD_VAR 0 2
61609: NOT
61610: OR
61611: IFFALSE 61615
// exit ;
61613: GO 61922
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61615: LD_ADDR_VAR 0 10
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: LD_INT 6
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 4
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: LD_INT 5
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 24
61657: PUSH
61658: LD_INT 25
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 23
61667: PUSH
61668: LD_INT 27
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 42
61681: PUSH
61682: LD_INT 43
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 44
61691: PUSH
61692: LD_INT 46
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 45
61701: PUSH
61702: LD_INT 47
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// result := [ ] ;
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: EMPTY
61725: ST_TO_ADDR
// for i in turrets do
61726: LD_ADDR_VAR 0 4
61730: PUSH
61731: LD_VAR 0 1
61735: PUSH
61736: FOR_IN
61737: IFFALSE 61920
// begin nat := GetNation ( i ) ;
61739: LD_ADDR_VAR 0 7
61743: PUSH
61744: LD_VAR 0 4
61748: PPUSH
61749: CALL_OW 248
61753: ST_TO_ADDR
// weapon := 0 ;
61754: LD_ADDR_VAR 0 8
61758: PUSH
61759: LD_INT 0
61761: ST_TO_ADDR
// if not nat then
61762: LD_VAR 0 7
61766: NOT
61767: IFFALSE 61771
// continue ;
61769: GO 61736
// for j in list [ nat ] do
61771: LD_ADDR_VAR 0 5
61775: PUSH
61776: LD_VAR 0 10
61780: PUSH
61781: LD_VAR 0 7
61785: ARRAY
61786: PUSH
61787: FOR_IN
61788: IFFALSE 61829
// if GetBWeapon ( i ) = j [ 1 ] then
61790: LD_VAR 0 4
61794: PPUSH
61795: CALL_OW 269
61799: PUSH
61800: LD_VAR 0 5
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: EQUAL
61809: IFFALSE 61827
// begin weapon := j [ 2 ] ;
61811: LD_ADDR_VAR 0 8
61815: PUSH
61816: LD_VAR 0 5
61820: PUSH
61821: LD_INT 2
61823: ARRAY
61824: ST_TO_ADDR
// break ;
61825: GO 61829
// end ;
61827: GO 61787
61829: POP
61830: POP
// if not weapon then
61831: LD_VAR 0 8
61835: NOT
61836: IFFALSE 61840
// continue ;
61838: GO 61736
// for k in factories do
61840: LD_ADDR_VAR 0 6
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: FOR_IN
61851: IFFALSE 61916
// begin weapons := AvailableWeaponList ( k ) ;
61853: LD_ADDR_VAR 0 9
61857: PUSH
61858: LD_VAR 0 6
61862: PPUSH
61863: CALL_OW 478
61867: ST_TO_ADDR
// if not weapons then
61868: LD_VAR 0 9
61872: NOT
61873: IFFALSE 61877
// continue ;
61875: GO 61850
// if weapon in weapons then
61877: LD_VAR 0 8
61881: PUSH
61882: LD_VAR 0 9
61886: IN
61887: IFFALSE 61914
// begin result := [ i , weapon ] ;
61889: LD_ADDR_VAR 0 3
61893: PUSH
61894: LD_VAR 0 4
61898: PUSH
61899: LD_VAR 0 8
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// exit ;
61908: POP
61909: POP
61910: POP
61911: POP
61912: GO 61922
// end ; end ;
61914: GO 61850
61916: POP
61917: POP
// end ;
61918: GO 61736
61920: POP
61921: POP
// end ;
61922: LD_VAR 0 3
61926: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61927: LD_INT 0
61929: PPUSH
// if not side or side > 8 then
61930: LD_VAR 0 3
61934: NOT
61935: IFTRUE 61947
61937: PUSH
61938: LD_VAR 0 3
61942: PUSH
61943: LD_INT 8
61945: GREATER
61946: OR
61947: IFFALSE 61951
// exit ;
61949: GO 62010
// if not range then
61951: LD_VAR 0 4
61955: NOT
61956: IFFALSE 61967
// range := - 12 ;
61958: LD_ADDR_VAR 0 4
61962: PUSH
61963: LD_INT 12
61965: NEG
61966: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61967: LD_VAR 0 1
61971: PPUSH
61972: LD_VAR 0 2
61976: PPUSH
61977: LD_VAR 0 3
61981: PPUSH
61982: LD_VAR 0 4
61986: PPUSH
61987: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61991: LD_VAR 0 1
61995: PPUSH
61996: LD_VAR 0 2
62000: PPUSH
62001: LD_VAR 0 3
62005: PPUSH
62006: CALL_OW 331
// end ;
62010: LD_VAR 0 5
62014: RET
// export function Video ( mode ) ; begin
62015: LD_INT 0
62017: PPUSH
// ingame_video = mode ;
62018: LD_ADDR_OWVAR 52
62022: PUSH
62023: LD_VAR 0 1
62027: ST_TO_ADDR
// interface_hidden = mode ;
62028: LD_ADDR_OWVAR 54
62032: PUSH
62033: LD_VAR 0 1
62037: ST_TO_ADDR
// end ;
62038: LD_VAR 0 2
62042: RET
// export function Join ( array , element ) ; begin
62043: LD_INT 0
62045: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62046: LD_ADDR_VAR 0 3
62050: PUSH
62051: LD_VAR 0 1
62055: PPUSH
62056: LD_VAR 0 1
62060: PUSH
62061: LD_INT 1
62063: PLUS
62064: PPUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: CALL_OW 1
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 3
62079: RET
// export function JoinUnion ( array , element ) ; begin
62080: LD_INT 0
62082: PPUSH
// result := array union element ;
62083: LD_ADDR_VAR 0 3
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_VAR 0 2
62097: UNION
62098: ST_TO_ADDR
// end ;
62099: LD_VAR 0 3
62103: RET
// export function GetBehemoths ( side ) ; begin
62104: LD_INT 0
62106: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: LD_INT 22
62114: PUSH
62115: LD_VAR 0 1
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 31
62126: PUSH
62127: LD_INT 25
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PPUSH
62138: CALL_OW 69
62142: ST_TO_ADDR
// end ;
62143: LD_VAR 0 2
62147: RET
// export function Shuffle ( array ) ; var i , index ; begin
62148: LD_INT 0
62150: PPUSH
62151: PPUSH
62152: PPUSH
// result := [ ] ;
62153: LD_ADDR_VAR 0 2
62157: PUSH
62158: EMPTY
62159: ST_TO_ADDR
// if not array then
62160: LD_VAR 0 1
62164: NOT
62165: IFFALSE 62169
// exit ;
62167: GO 62268
// Randomize ;
62169: CALL_OW 10
// for i = array downto 1 do
62173: LD_ADDR_VAR 0 3
62177: PUSH
62178: DOUBLE
62179: LD_VAR 0 1
62183: INC
62184: ST_TO_ADDR
62185: LD_INT 1
62187: PUSH
62188: FOR_DOWNTO
62189: IFFALSE 62266
// begin index := rand ( 1 , array ) ;
62191: LD_ADDR_VAR 0 4
62195: PUSH
62196: LD_INT 1
62198: PPUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 12
62208: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62209: LD_ADDR_VAR 0 2
62213: PUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: LD_VAR 0 2
62223: PUSH
62224: LD_INT 1
62226: PLUS
62227: PPUSH
62228: LD_VAR 0 1
62232: PUSH
62233: LD_VAR 0 4
62237: ARRAY
62238: PPUSH
62239: CALL_OW 2
62243: ST_TO_ADDR
// array := Delete ( array , index ) ;
62244: LD_ADDR_VAR 0 1
62248: PUSH
62249: LD_VAR 0 1
62253: PPUSH
62254: LD_VAR 0 4
62258: PPUSH
62259: CALL_OW 3
62263: ST_TO_ADDR
// end ;
62264: GO 62188
62266: POP
62267: POP
// end ;
62268: LD_VAR 0 2
62272: RET
// export function GetBaseMaterials ( base ) ; begin
62273: LD_INT 0
62275: PPUSH
// result := [ 0 , 0 , 0 ] ;
62276: LD_ADDR_VAR 0 2
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: ST_TO_ADDR
// if not base then
62295: LD_VAR 0 1
62299: NOT
62300: IFFALSE 62304
// exit ;
62302: GO 62353
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62304: LD_ADDR_VAR 0 2
62308: PUSH
62309: LD_VAR 0 1
62313: PPUSH
62314: LD_INT 1
62316: PPUSH
62317: CALL_OW 275
62321: PUSH
62322: LD_VAR 0 1
62326: PPUSH
62327: LD_INT 2
62329: PPUSH
62330: CALL_OW 275
62334: PUSH
62335: LD_VAR 0 1
62339: PPUSH
62340: LD_INT 3
62342: PPUSH
62343: CALL_OW 275
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// end ;
62353: LD_VAR 0 2
62357: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62358: LD_INT 0
62360: PPUSH
62361: PPUSH
// result := array ;
62362: LD_ADDR_VAR 0 3
62366: PUSH
62367: LD_VAR 0 1
62371: ST_TO_ADDR
// if size >= result then
62372: LD_VAR 0 2
62376: PUSH
62377: LD_VAR 0 3
62381: GREATEREQUAL
62382: IFFALSE 62386
// exit ;
62384: GO 62436
// if size then
62386: LD_VAR 0 2
62390: IFFALSE 62436
// for i := array downto size do
62392: LD_ADDR_VAR 0 4
62396: PUSH
62397: DOUBLE
62398: LD_VAR 0 1
62402: INC
62403: ST_TO_ADDR
62404: LD_VAR 0 2
62408: PUSH
62409: FOR_DOWNTO
62410: IFFALSE 62434
// result := Delete ( result , result ) ;
62412: LD_ADDR_VAR 0 3
62416: PUSH
62417: LD_VAR 0 3
62421: PPUSH
62422: LD_VAR 0 3
62426: PPUSH
62427: CALL_OW 3
62431: ST_TO_ADDR
62432: GO 62409
62434: POP
62435: POP
// end ;
62436: LD_VAR 0 3
62440: RET
// export function ComExit ( unit ) ; var tmp ; begin
62441: LD_INT 0
62443: PPUSH
62444: PPUSH
// if not IsInUnit ( unit ) then
62445: LD_VAR 0 1
62449: PPUSH
62450: CALL_OW 310
62454: NOT
62455: IFFALSE 62459
// exit ;
62457: GO 62519
// tmp := IsInUnit ( unit ) ;
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: CALL_OW 310
62473: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62474: LD_VAR 0 3
62478: PPUSH
62479: CALL_OW 247
62483: PUSH
62484: LD_INT 2
62486: EQUAL
62487: IFFALSE 62500
// ComExitVehicle ( unit ) else
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 121
62498: GO 62509
// ComExitBuilding ( unit ) ;
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 122
// result := tmp ;
62509: LD_ADDR_VAR 0 2
62513: PUSH
62514: LD_VAR 0 3
62518: ST_TO_ADDR
// end ;
62519: LD_VAR 0 2
62523: RET
// export function ComExitAll ( units ) ; var i ; begin
62524: LD_INT 0
62526: PPUSH
62527: PPUSH
// if not units then
62528: LD_VAR 0 1
62532: NOT
62533: IFFALSE 62537
// exit ;
62535: GO 62563
// for i in units do
62537: LD_ADDR_VAR 0 3
62541: PUSH
62542: LD_VAR 0 1
62546: PUSH
62547: FOR_IN
62548: IFFALSE 62561
// ComExit ( i ) ;
62550: LD_VAR 0 3
62554: PPUSH
62555: CALL 62441 0 1
62559: GO 62547
62561: POP
62562: POP
// end ;
62563: LD_VAR 0 2
62567: RET
// export function ResetHc ; begin
62568: LD_INT 0
62570: PPUSH
// InitHc ;
62571: CALL_OW 19
// hc_importance := 0 ;
62575: LD_ADDR_OWVAR 32
62579: PUSH
62580: LD_INT 0
62582: ST_TO_ADDR
// end ;
62583: LD_VAR 0 1
62587: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62588: LD_INT 0
62590: PPUSH
62591: PPUSH
62592: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62593: LD_ADDR_VAR 0 6
62597: PUSH
62598: LD_VAR 0 1
62602: PUSH
62603: LD_VAR 0 3
62607: PLUS
62608: PUSH
62609: LD_INT 2
62611: DIV
62612: ST_TO_ADDR
// if _x < 0 then
62613: LD_VAR 0 6
62617: PUSH
62618: LD_INT 0
62620: LESS
62621: IFFALSE 62638
// _x := _x * - 1 ;
62623: LD_ADDR_VAR 0 6
62627: PUSH
62628: LD_VAR 0 6
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: MUL
62637: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62638: LD_ADDR_VAR 0 7
62642: PUSH
62643: LD_VAR 0 2
62647: PUSH
62648: LD_VAR 0 4
62652: PLUS
62653: PUSH
62654: LD_INT 2
62656: DIV
62657: ST_TO_ADDR
// if _y < 0 then
62658: LD_VAR 0 7
62662: PUSH
62663: LD_INT 0
62665: LESS
62666: IFFALSE 62683
// _y := _y * - 1 ;
62668: LD_ADDR_VAR 0 7
62672: PUSH
62673: LD_VAR 0 7
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: MUL
62682: ST_TO_ADDR
// result := [ _x , _y ] ;
62683: LD_ADDR_VAR 0 5
62687: PUSH
62688: LD_VAR 0 6
62692: PUSH
62693: LD_VAR 0 7
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: ST_TO_ADDR
// end ;
62702: LD_VAR 0 5
62706: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62707: LD_INT 0
62709: PPUSH
62710: PPUSH
62711: PPUSH
62712: PPUSH
// task := GetTaskList ( unit ) ;
62713: LD_ADDR_VAR 0 7
62717: PUSH
62718: LD_VAR 0 1
62722: PPUSH
62723: CALL_OW 437
62727: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62728: LD_VAR 0 7
62732: NOT
62733: IFFALSE 62752
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_VAR 0 2
62745: PPUSH
62746: CALL_OW 308
62750: NOT
62751: AND
62752: IFFALSE 62756
// exit ;
62754: GO 62874
// if IsInArea ( unit , area ) then
62756: LD_VAR 0 1
62760: PPUSH
62761: LD_VAR 0 2
62765: PPUSH
62766: CALL_OW 308
62770: IFFALSE 62788
// begin ComMoveToArea ( unit , goAway ) ;
62772: LD_VAR 0 1
62776: PPUSH
62777: LD_VAR 0 3
62781: PPUSH
62782: CALL_OW 113
// exit ;
62786: GO 62874
// end ; if task [ 1 ] [ 1 ] <> M then
62788: LD_VAR 0 7
62792: PUSH
62793: LD_INT 1
62795: ARRAY
62796: PUSH
62797: LD_INT 1
62799: ARRAY
62800: PUSH
62801: LD_STRING M
62803: NONEQUAL
62804: IFFALSE 62808
// exit ;
62806: GO 62874
// x := task [ 1 ] [ 2 ] ;
62808: LD_ADDR_VAR 0 5
62812: PUSH
62813: LD_VAR 0 7
62817: PUSH
62818: LD_INT 1
62820: ARRAY
62821: PUSH
62822: LD_INT 2
62824: ARRAY
62825: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62826: LD_ADDR_VAR 0 6
62830: PUSH
62831: LD_VAR 0 7
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PUSH
62840: LD_INT 3
62842: ARRAY
62843: ST_TO_ADDR
// if InArea ( x , y , area ) then
62844: LD_VAR 0 5
62848: PPUSH
62849: LD_VAR 0 6
62853: PPUSH
62854: LD_VAR 0 2
62858: PPUSH
62859: CALL_OW 309
62863: IFFALSE 62874
// ComStop ( unit ) ;
62865: LD_VAR 0 1
62869: PPUSH
62870: CALL_OW 141
// end ;
62874: LD_VAR 0 4
62878: RET
// export function Abs ( value ) ; begin
62879: LD_INT 0
62881: PPUSH
// result := value ;
62882: LD_ADDR_VAR 0 2
62886: PUSH
62887: LD_VAR 0 1
62891: ST_TO_ADDR
// if value < 0 then
62892: LD_VAR 0 1
62896: PUSH
62897: LD_INT 0
62899: LESS
62900: IFFALSE 62917
// result := value * - 1 ;
62902: LD_ADDR_VAR 0 2
62906: PUSH
62907: LD_VAR 0 1
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: MUL
62916: ST_TO_ADDR
// end ;
62917: LD_VAR 0 2
62921: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62922: LD_INT 0
62924: PPUSH
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
62929: PPUSH
62930: PPUSH
62931: PPUSH
// if not unit or not building then
62932: LD_VAR 0 1
62936: NOT
62937: IFTRUE 62946
62939: PUSH
62940: LD_VAR 0 2
62944: NOT
62945: OR
62946: IFFALSE 62950
// exit ;
62948: GO 63178
// x := GetX ( building ) ;
62950: LD_ADDR_VAR 0 4
62954: PUSH
62955: LD_VAR 0 2
62959: PPUSH
62960: CALL_OW 250
62964: ST_TO_ADDR
// y := GetY ( building ) ;
62965: LD_ADDR_VAR 0 6
62969: PUSH
62970: LD_VAR 0 2
62974: PPUSH
62975: CALL_OW 251
62979: ST_TO_ADDR
// d := GetDir ( building ) ;
62980: LD_ADDR_VAR 0 8
62984: PUSH
62985: LD_VAR 0 2
62989: PPUSH
62990: CALL_OW 254
62994: ST_TO_ADDR
// r := 4 ;
62995: LD_ADDR_VAR 0 9
62999: PUSH
63000: LD_INT 4
63002: ST_TO_ADDR
// for i := 1 to 5 do
63003: LD_ADDR_VAR 0 10
63007: PUSH
63008: DOUBLE
63009: LD_INT 1
63011: DEC
63012: ST_TO_ADDR
63013: LD_INT 5
63015: PUSH
63016: FOR_TO
63017: IFFALSE 63176
// begin _x := ShiftX ( x , d , r + i ) ;
63019: LD_ADDR_VAR 0 5
63023: PUSH
63024: LD_VAR 0 4
63028: PPUSH
63029: LD_VAR 0 8
63033: PPUSH
63034: LD_VAR 0 9
63038: PUSH
63039: LD_VAR 0 10
63043: PLUS
63044: PPUSH
63045: CALL_OW 272
63049: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63050: LD_ADDR_VAR 0 7
63054: PUSH
63055: LD_VAR 0 6
63059: PPUSH
63060: LD_VAR 0 8
63064: PPUSH
63065: LD_VAR 0 9
63069: PUSH
63070: LD_VAR 0 10
63074: PLUS
63075: PPUSH
63076: CALL_OW 273
63080: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63081: LD_VAR 0 5
63085: PPUSH
63086: LD_VAR 0 7
63090: PPUSH
63091: CALL_OW 488
63095: IFFALSE 63130
63097: PUSH
63098: LD_VAR 0 5
63102: PPUSH
63103: LD_VAR 0 7
63107: PPUSH
63108: CALL_OW 428
63112: PPUSH
63113: CALL_OW 247
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: IN
63128: NOT
63129: AND
63130: IFFALSE 63174
// begin ComMoveXY ( unit , _x , _y ) ;
63132: LD_VAR 0 1
63136: PPUSH
63137: LD_VAR 0 5
63141: PPUSH
63142: LD_VAR 0 7
63146: PPUSH
63147: CALL_OW 111
// result := [ _x , _y ] ;
63151: LD_ADDR_VAR 0 3
63155: PUSH
63156: LD_VAR 0 5
63160: PUSH
63161: LD_VAR 0 7
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// exit ;
63170: POP
63171: POP
63172: GO 63178
// end ; end ;
63174: GO 63016
63176: POP
63177: POP
// end ;
63178: LD_VAR 0 3
63182: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
// result := 0 ;
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: LD_INT 0
63195: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63196: LD_VAR 0 1
63200: PUSH
63201: LD_INT 0
63203: LESS
63204: IFTRUE 63216
63206: PUSH
63207: LD_VAR 0 1
63211: PUSH
63212: LD_INT 8
63214: GREATER
63215: OR
63216: IFTRUE 63228
63218: PUSH
63219: LD_VAR 0 2
63223: PUSH
63224: LD_INT 0
63226: LESS
63227: OR
63228: IFTRUE 63240
63230: PUSH
63231: LD_VAR 0 2
63235: PUSH
63236: LD_INT 8
63238: GREATER
63239: OR
63240: IFFALSE 63244
// exit ;
63242: GO 63319
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63244: LD_ADDR_VAR 0 4
63248: PUSH
63249: LD_INT 22
63251: PUSH
63252: LD_VAR 0 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PPUSH
63261: CALL_OW 69
63265: PUSH
63266: FOR_IN
63267: IFFALSE 63317
// begin un := UnitShoot ( i ) ;
63269: LD_ADDR_VAR 0 5
63273: PUSH
63274: LD_VAR 0 4
63278: PPUSH
63279: CALL_OW 504
63283: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63284: LD_VAR 0 5
63288: PPUSH
63289: CALL_OW 255
63293: PUSH
63294: LD_VAR 0 1
63298: EQUAL
63299: IFFALSE 63315
// begin result := un ;
63301: LD_ADDR_VAR 0 3
63305: PUSH
63306: LD_VAR 0 5
63310: ST_TO_ADDR
// exit ;
63311: POP
63312: POP
63313: GO 63319
// end ; end ;
63315: GO 63266
63317: POP
63318: POP
// end ;
63319: LD_VAR 0 3
63323: RET
// export function GetCargoBay ( units ) ; begin
63324: LD_INT 0
63326: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63327: LD_ADDR_VAR 0 2
63331: PUSH
63332: LD_VAR 0 1
63336: PPUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 34
63342: PUSH
63343: LD_INT 12
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 34
63352: PUSH
63353: LD_INT 51
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 34
63362: PUSH
63363: LD_INT 32
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 34
63372: PUSH
63373: LD_INT 89
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: PPUSH
63387: CALL_OW 72
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function Negate ( value ) ; begin
63397: LD_INT 0
63399: PPUSH
// result := not value ;
63400: LD_ADDR_VAR 0 2
63404: PUSH
63405: LD_VAR 0 1
63409: NOT
63410: ST_TO_ADDR
// end ;
63411: LD_VAR 0 2
63415: RET
// export function Inc ( value ) ; begin
63416: LD_INT 0
63418: PPUSH
// result := value + 1 ;
63419: LD_ADDR_VAR 0 2
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: LD_INT 1
63431: PLUS
63432: ST_TO_ADDR
// end ;
63433: LD_VAR 0 2
63437: RET
// export function Dec ( value ) ; begin
63438: LD_INT 0
63440: PPUSH
// result := value - 1 ;
63441: LD_ADDR_VAR 0 2
63445: PUSH
63446: LD_VAR 0 1
63450: PUSH
63451: LD_INT 1
63453: MINUS
63454: ST_TO_ADDR
// end ;
63455: LD_VAR 0 2
63459: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63460: LD_INT 0
63462: PPUSH
63463: PPUSH
63464: PPUSH
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
63469: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_VAR 0 2
63479: PPUSH
63480: CALL_OW 488
63484: NOT
63485: IFTRUE 63504
63487: PUSH
63488: LD_VAR 0 3
63492: PPUSH
63493: LD_VAR 0 4
63497: PPUSH
63498: CALL_OW 488
63502: NOT
63503: OR
63504: IFFALSE 63517
// begin result := - 1 ;
63506: LD_ADDR_VAR 0 5
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: ST_TO_ADDR
// exit ;
63515: GO 63752
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63517: LD_ADDR_VAR 0 12
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_VAR 0 2
63531: PPUSH
63532: LD_VAR 0 3
63536: PPUSH
63537: LD_VAR 0 4
63541: PPUSH
63542: CALL 62588 0 4
63546: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63547: LD_ADDR_VAR 0 11
63551: PUSH
63552: LD_VAR 0 1
63556: PPUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: LD_VAR 0 12
63566: PUSH
63567: LD_INT 1
63569: ARRAY
63570: PPUSH
63571: LD_VAR 0 12
63575: PUSH
63576: LD_INT 2
63578: ARRAY
63579: PPUSH
63580: CALL_OW 298
63584: ST_TO_ADDR
// distance := 9999 ;
63585: LD_ADDR_VAR 0 10
63589: PUSH
63590: LD_INT 9999
63592: ST_TO_ADDR
// for i := 0 to 5 do
63593: LD_ADDR_VAR 0 6
63597: PUSH
63598: DOUBLE
63599: LD_INT 0
63601: DEC
63602: ST_TO_ADDR
63603: LD_INT 5
63605: PUSH
63606: FOR_TO
63607: IFFALSE 63750
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63609: LD_ADDR_VAR 0 7
63613: PUSH
63614: LD_VAR 0 1
63618: PPUSH
63619: LD_VAR 0 6
63623: PPUSH
63624: LD_VAR 0 11
63628: PPUSH
63629: CALL_OW 272
63633: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63634: LD_ADDR_VAR 0 8
63638: PUSH
63639: LD_VAR 0 2
63643: PPUSH
63644: LD_VAR 0 6
63648: PPUSH
63649: LD_VAR 0 11
63653: PPUSH
63654: CALL_OW 273
63658: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63659: LD_VAR 0 7
63663: PPUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: CALL_OW 488
63673: NOT
63674: IFFALSE 63678
// continue ;
63676: GO 63606
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63678: LD_ADDR_VAR 0 9
63682: PUSH
63683: LD_VAR 0 12
63687: PUSH
63688: LD_INT 1
63690: ARRAY
63691: PPUSH
63692: LD_VAR 0 12
63696: PUSH
63697: LD_INT 2
63699: ARRAY
63700: PPUSH
63701: LD_VAR 0 7
63705: PPUSH
63706: LD_VAR 0 8
63710: PPUSH
63711: CALL_OW 298
63715: ST_TO_ADDR
// if tmp < distance then
63716: LD_VAR 0 9
63720: PUSH
63721: LD_VAR 0 10
63725: LESS
63726: IFFALSE 63748
// begin result := i ;
63728: LD_ADDR_VAR 0 5
63732: PUSH
63733: LD_VAR 0 6
63737: ST_TO_ADDR
// distance := tmp ;
63738: LD_ADDR_VAR 0 10
63742: PUSH
63743: LD_VAR 0 9
63747: ST_TO_ADDR
// end ; end ;
63748: GO 63606
63750: POP
63751: POP
// end ;
63752: LD_VAR 0 5
63756: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63757: LD_INT 0
63759: PPUSH
63760: PPUSH
// if not driver or not IsInUnit ( driver ) then
63761: LD_VAR 0 1
63765: NOT
63766: IFTRUE 63780
63768: PUSH
63769: LD_VAR 0 1
63773: PPUSH
63774: CALL_OW 310
63778: NOT
63779: OR
63780: IFFALSE 63784
// exit ;
63782: GO 63874
// vehicle := IsInUnit ( driver ) ;
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 1
63793: PPUSH
63794: CALL_OW 310
63798: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63799: LD_VAR 0 1
63803: PPUSH
63804: LD_STRING \
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: PUSH
63834: LD_STRING E
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_VAR 0 3
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PPUSH
63870: CALL_OW 446
// end ;
63874: LD_VAR 0 2
63878: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63879: LD_INT 0
63881: PPUSH
63882: PPUSH
// if not driver or not IsInUnit ( driver ) then
63883: LD_VAR 0 1
63887: NOT
63888: IFTRUE 63902
63890: PUSH
63891: LD_VAR 0 1
63895: PPUSH
63896: CALL_OW 310
63900: NOT
63901: OR
63902: IFFALSE 63906
// exit ;
63904: GO 63996
// vehicle := IsInUnit ( driver ) ;
63906: LD_ADDR_VAR 0 3
63910: PUSH
63911: LD_VAR 0 1
63915: PPUSH
63916: CALL_OW 310
63920: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63921: LD_VAR 0 1
63925: PPUSH
63926: LD_STRING \
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: PUSH
63956: LD_STRING E
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_VAR 0 3
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PPUSH
63992: CALL_OW 447
// end ;
63996: LD_VAR 0 2
64000: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64001: LD_INT 0
64003: PPUSH
64004: PPUSH
64005: PPUSH
// tmp := [ ] ;
64006: LD_ADDR_VAR 0 5
64010: PUSH
64011: EMPTY
64012: ST_TO_ADDR
// for i in units do
64013: LD_ADDR_VAR 0 4
64017: PUSH
64018: LD_VAR 0 1
64022: PUSH
64023: FOR_IN
64024: IFFALSE 64062
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64026: LD_ADDR_VAR 0 5
64030: PUSH
64031: LD_VAR 0 5
64035: PPUSH
64036: LD_VAR 0 5
64040: PUSH
64041: LD_INT 1
64043: PLUS
64044: PPUSH
64045: LD_VAR 0 4
64049: PPUSH
64050: CALL_OW 256
64054: PPUSH
64055: CALL_OW 2
64059: ST_TO_ADDR
64060: GO 64023
64062: POP
64063: POP
// if not tmp then
64064: LD_VAR 0 5
64068: NOT
64069: IFFALSE 64073
// exit ;
64071: GO 64121
// if asc then
64073: LD_VAR 0 2
64077: IFFALSE 64101
// result := SortListByListAsc ( units , tmp ) else
64079: LD_ADDR_VAR 0 3
64083: PUSH
64084: LD_VAR 0 1
64088: PPUSH
64089: LD_VAR 0 5
64093: PPUSH
64094: CALL_OW 76
64098: ST_TO_ADDR
64099: GO 64121
// result := SortListByListDesc ( units , tmp ) ;
64101: LD_ADDR_VAR 0 3
64105: PUSH
64106: LD_VAR 0 1
64110: PPUSH
64111: LD_VAR 0 5
64115: PPUSH
64116: CALL_OW 77
64120: ST_TO_ADDR
// end ;
64121: LD_VAR 0 3
64125: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
// task := GetTaskList ( mech ) ;
64130: LD_ADDR_VAR 0 4
64134: PUSH
64135: LD_VAR 0 1
64139: PPUSH
64140: CALL_OW 437
64144: ST_TO_ADDR
// if not task then
64145: LD_VAR 0 4
64149: NOT
64150: IFFALSE 64154
// exit ;
64152: GO 64198
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64154: LD_ADDR_VAR 0 3
64158: PUSH
64159: LD_VAR 0 4
64163: PUSH
64164: LD_INT 1
64166: ARRAY
64167: PUSH
64168: LD_INT 1
64170: ARRAY
64171: PUSH
64172: LD_STRING r
64174: EQUAL
64175: IFFALSE 64197
64177: PUSH
64178: LD_VAR 0 4
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PUSH
64187: LD_INT 4
64189: ARRAY
64190: PUSH
64191: LD_VAR 0 2
64195: EQUAL
64196: AND
64197: ST_TO_ADDR
// end ;
64198: LD_VAR 0 3
64202: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64203: LD_INT 0
64205: PPUSH
// SetDir ( unit , d ) ;
64206: LD_VAR 0 1
64210: PPUSH
64211: LD_VAR 0 4
64215: PPUSH
64216: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64220: LD_ADDR_VAR 0 6
64224: PUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: LD_VAR 0 2
64234: PPUSH
64235: LD_VAR 0 3
64239: PPUSH
64240: LD_VAR 0 5
64244: PPUSH
64245: CALL_OW 48
64249: ST_TO_ADDR
// end ;
64250: LD_VAR 0 6
64254: RET
// export function ToNaturalNumber ( number ) ; begin
64255: LD_INT 0
64257: PPUSH
// result := number div 1 ;
64258: LD_ADDR_VAR 0 2
64262: PUSH
64263: LD_VAR 0 1
64267: PUSH
64268: LD_INT 1
64270: DIV
64271: ST_TO_ADDR
// if number < 0 then
64272: LD_VAR 0 1
64276: PUSH
64277: LD_INT 0
64279: LESS
64280: IFFALSE 64290
// result := 0 ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_INT 0
64289: ST_TO_ADDR
// end ;
64290: LD_VAR 0 2
64294: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64295: LD_INT 0
64297: PPUSH
64298: PPUSH
64299: PPUSH
// if not buildings then
64300: LD_VAR 0 1
64304: NOT
64305: IFFALSE 64309
// exit ;
64307: GO 64424
// tmp := [ ] ;
64309: LD_ADDR_VAR 0 5
64313: PUSH
64314: EMPTY
64315: ST_TO_ADDR
// for b in buildings do
64316: LD_ADDR_VAR 0 4
64320: PUSH
64321: LD_VAR 0 1
64325: PUSH
64326: FOR_IN
64327: IFFALSE 64365
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64329: LD_ADDR_VAR 0 5
64333: PUSH
64334: LD_VAR 0 5
64338: PPUSH
64339: LD_VAR 0 5
64343: PUSH
64344: LD_INT 1
64346: PLUS
64347: PPUSH
64348: LD_VAR 0 4
64352: PPUSH
64353: CALL_OW 266
64357: PPUSH
64358: CALL_OW 1
64362: ST_TO_ADDR
64363: GO 64326
64365: POP
64366: POP
// if not tmp then
64367: LD_VAR 0 5
64371: NOT
64372: IFFALSE 64376
// exit ;
64374: GO 64424
// if asc then
64376: LD_VAR 0 2
64380: IFFALSE 64404
// result := SortListByListAsc ( buildings , tmp ) else
64382: LD_ADDR_VAR 0 3
64386: PUSH
64387: LD_VAR 0 1
64391: PPUSH
64392: LD_VAR 0 5
64396: PPUSH
64397: CALL_OW 76
64401: ST_TO_ADDR
64402: GO 64424
// result := SortListByListDesc ( buildings , tmp ) ;
64404: LD_ADDR_VAR 0 3
64408: PUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: LD_VAR 0 5
64418: PPUSH
64419: CALL_OW 77
64423: ST_TO_ADDR
// end ;
64424: LD_VAR 0 3
64428: RET
// export function SortByClass ( units , class ) ; var un ; begin
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
// if not units or not class then
64433: LD_VAR 0 1
64437: NOT
64438: IFTRUE 64447
64440: PUSH
64441: LD_VAR 0 2
64445: NOT
64446: OR
64447: IFFALSE 64451
// exit ;
64449: GO 64546
// result := [ ] ;
64451: LD_ADDR_VAR 0 3
64455: PUSH
64456: EMPTY
64457: ST_TO_ADDR
// for un in units do
64458: LD_ADDR_VAR 0 4
64462: PUSH
64463: LD_VAR 0 1
64467: PUSH
64468: FOR_IN
64469: IFFALSE 64544
// if GetClass ( un ) = class then
64471: LD_VAR 0 4
64475: PPUSH
64476: CALL_OW 257
64480: PUSH
64481: LD_VAR 0 2
64485: EQUAL
64486: IFFALSE 64513
// result := Insert ( result , 1 , un ) else
64488: LD_ADDR_VAR 0 3
64492: PUSH
64493: LD_VAR 0 3
64497: PPUSH
64498: LD_INT 1
64500: PPUSH
64501: LD_VAR 0 4
64505: PPUSH
64506: CALL_OW 2
64510: ST_TO_ADDR
64511: GO 64542
// result := Replace ( result , result + 1 , un ) ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: LD_VAR 0 3
64522: PPUSH
64523: LD_VAR 0 3
64527: PUSH
64528: LD_INT 1
64530: PLUS
64531: PPUSH
64532: LD_VAR 0 4
64536: PPUSH
64537: CALL_OW 1
64541: ST_TO_ADDR
64542: GO 64468
64544: POP
64545: POP
// end ;
64546: LD_VAR 0 3
64550: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64551: LD_INT 0
64553: PPUSH
64554: PPUSH
64555: PPUSH
64556: PPUSH
64557: PPUSH
64558: PPUSH
64559: PPUSH
// result := [ ] ;
64560: LD_ADDR_VAR 0 4
64564: PUSH
64565: EMPTY
64566: ST_TO_ADDR
// if x - r < 0 then
64567: LD_VAR 0 1
64571: PUSH
64572: LD_VAR 0 3
64576: MINUS
64577: PUSH
64578: LD_INT 0
64580: LESS
64581: IFFALSE 64593
// min_x := 0 else
64583: LD_ADDR_VAR 0 8
64587: PUSH
64588: LD_INT 0
64590: ST_TO_ADDR
64591: GO 64609
// min_x := x - r ;
64593: LD_ADDR_VAR 0 8
64597: PUSH
64598: LD_VAR 0 1
64602: PUSH
64603: LD_VAR 0 3
64607: MINUS
64608: ST_TO_ADDR
// if y - r < 0 then
64609: LD_VAR 0 2
64613: PUSH
64614: LD_VAR 0 3
64618: MINUS
64619: PUSH
64620: LD_INT 0
64622: LESS
64623: IFFALSE 64635
// min_y := 0 else
64625: LD_ADDR_VAR 0 7
64629: PUSH
64630: LD_INT 0
64632: ST_TO_ADDR
64633: GO 64651
// min_y := y - r ;
64635: LD_ADDR_VAR 0 7
64639: PUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_VAR 0 3
64649: MINUS
64650: ST_TO_ADDR
// max_x := x + r ;
64651: LD_ADDR_VAR 0 9
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_VAR 0 3
64665: PLUS
64666: ST_TO_ADDR
// max_y := y + r ;
64667: LD_ADDR_VAR 0 10
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_VAR 0 3
64681: PLUS
64682: ST_TO_ADDR
// for _x = min_x to max_x do
64683: LD_ADDR_VAR 0 5
64687: PUSH
64688: DOUBLE
64689: LD_VAR 0 8
64693: DEC
64694: ST_TO_ADDR
64695: LD_VAR 0 9
64699: PUSH
64700: FOR_TO
64701: IFFALSE 64802
// for _y = min_y to max_y do
64703: LD_ADDR_VAR 0 6
64707: PUSH
64708: DOUBLE
64709: LD_VAR 0 7
64713: DEC
64714: ST_TO_ADDR
64715: LD_VAR 0 10
64719: PUSH
64720: FOR_TO
64721: IFFALSE 64798
// begin if not ValidHex ( _x , _y ) then
64723: LD_VAR 0 5
64727: PPUSH
64728: LD_VAR 0 6
64732: PPUSH
64733: CALL_OW 488
64737: NOT
64738: IFFALSE 64742
// continue ;
64740: GO 64720
// if GetResourceTypeXY ( _x , _y ) then
64742: LD_VAR 0 5
64746: PPUSH
64747: LD_VAR 0 6
64751: PPUSH
64752: CALL_OW 283
64756: IFFALSE 64796
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64758: LD_ADDR_VAR 0 4
64762: PUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: LD_VAR 0 4
64772: PUSH
64773: LD_INT 1
64775: PLUS
64776: PPUSH
64777: LD_VAR 0 5
64781: PUSH
64782: LD_VAR 0 6
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PPUSH
64791: CALL_OW 1
64795: ST_TO_ADDR
// end ;
64796: GO 64720
64798: POP
64799: POP
64800: GO 64700
64802: POP
64803: POP
// end ;
64804: LD_VAR 0 4
64808: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64809: LD_INT 0
64811: PPUSH
64812: PPUSH
64813: PPUSH
64814: PPUSH
64815: PPUSH
64816: PPUSH
64817: PPUSH
64818: PPUSH
// if not units then
64819: LD_VAR 0 1
64823: NOT
64824: IFFALSE 64828
// exit ;
64826: GO 65360
// result := UnitFilter ( units , [ f_ok ] ) ;
64828: LD_ADDR_VAR 0 3
64832: PUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: LD_INT 50
64840: PUSH
64841: EMPTY
64842: LIST
64843: PPUSH
64844: CALL_OW 72
64848: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64849: LD_ADDR_VAR 0 8
64853: PUSH
64854: LD_VAR 0 1
64858: PUSH
64859: LD_INT 1
64861: ARRAY
64862: PPUSH
64863: CALL_OW 255
64867: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64868: LD_ADDR_VAR 0 10
64872: PUSH
64873: LD_INT 29
64875: PUSH
64876: LD_INT 91
64878: PUSH
64879: LD_INT 49
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: ST_TO_ADDR
// if not result then
64887: LD_VAR 0 3
64891: NOT
64892: IFFALSE 64896
// exit ;
64894: GO 65360
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64896: LD_ADDR_VAR 0 5
64900: PUSH
64901: LD_INT 81
64903: PUSH
64904: LD_VAR 0 8
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PPUSH
64913: CALL_OW 69
64917: ST_TO_ADDR
// for i in result do
64918: LD_ADDR_VAR 0 4
64922: PUSH
64923: LD_VAR 0 3
64927: PUSH
64928: FOR_IN
64929: IFFALSE 65358
// begin tag := GetTag ( i ) + 1 ;
64931: LD_ADDR_VAR 0 9
64935: PUSH
64936: LD_VAR 0 4
64940: PPUSH
64941: CALL_OW 110
64945: PUSH
64946: LD_INT 1
64948: PLUS
64949: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
64950: LD_ADDR_VAR 0 7
64954: PUSH
64955: LD_VAR 0 4
64959: PPUSH
64960: CALL_OW 250
64964: PPUSH
64965: LD_VAR 0 4
64969: PPUSH
64970: CALL_OW 251
64974: PPUSH
64975: LD_INT 4
64977: PPUSH
64978: CALL 64551 0 3
64982: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
64983: LD_VAR 0 4
64987: PPUSH
64988: CALL_OW 247
64992: PUSH
64993: LD_INT 2
64995: EQUAL
64996: IFFALSE 65008
64998: PUSH
64999: LD_VAR 0 7
65003: PUSH
65004: LD_INT 2
65006: GREATER
65007: AND
65008: IFFALSE 65028
65010: PUSH
65011: LD_VAR 0 4
65015: PPUSH
65016: CALL_OW 264
65020: PUSH
65021: LD_VAR 0 10
65025: IN
65026: NOT
65027: AND
65028: IFFALSE 65067
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65030: LD_VAR 0 4
65034: PPUSH
65035: LD_VAR 0 7
65039: PUSH
65040: LD_INT 1
65042: ARRAY
65043: PUSH
65044: LD_INT 1
65046: ARRAY
65047: PPUSH
65048: LD_VAR 0 7
65052: PUSH
65053: LD_INT 1
65055: ARRAY
65056: PUSH
65057: LD_INT 2
65059: ARRAY
65060: PPUSH
65061: CALL_OW 116
65065: GO 65356
// if path > tag then
65067: LD_VAR 0 2
65071: PUSH
65072: LD_VAR 0 9
65076: GREATER
65077: IFFALSE 65285
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65079: LD_ADDR_VAR 0 6
65083: PUSH
65084: LD_VAR 0 5
65088: PPUSH
65089: LD_INT 91
65091: PUSH
65092: LD_VAR 0 4
65096: PUSH
65097: LD_INT 8
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: PPUSH
65105: CALL_OW 72
65109: ST_TO_ADDR
// if nearEnemy then
65110: LD_VAR 0 6
65114: IFFALSE 65183
// begin if GetWeapon ( i ) = ru_time_lapser then
65116: LD_VAR 0 4
65120: PPUSH
65121: CALL_OW 264
65125: PUSH
65126: LD_INT 49
65128: EQUAL
65129: IFFALSE 65157
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65131: LD_VAR 0 4
65135: PPUSH
65136: LD_VAR 0 6
65140: PPUSH
65141: LD_VAR 0 4
65145: PPUSH
65146: CALL_OW 74
65150: PPUSH
65151: CALL_OW 112
65155: GO 65181
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65157: LD_VAR 0 4
65161: PPUSH
65162: LD_VAR 0 6
65166: PPUSH
65167: LD_VAR 0 4
65171: PPUSH
65172: CALL_OW 74
65176: PPUSH
65177: CALL 66441 0 2
// end else
65181: GO 65283
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65183: LD_VAR 0 4
65187: PPUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_VAR 0 9
65197: ARRAY
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: PPUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 9
65212: ARRAY
65213: PUSH
65214: LD_INT 2
65216: ARRAY
65217: PPUSH
65218: CALL_OW 297
65222: PUSH
65223: LD_INT 6
65225: GREATER
65226: IFFALSE 65269
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65228: LD_VAR 0 4
65232: PPUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_VAR 0 9
65242: ARRAY
65243: PUSH
65244: LD_INT 1
65246: ARRAY
65247: PPUSH
65248: LD_VAR 0 2
65252: PUSH
65253: LD_VAR 0 9
65257: ARRAY
65258: PUSH
65259: LD_INT 2
65261: ARRAY
65262: PPUSH
65263: CALL_OW 114
65267: GO 65283
// SetTag ( i , tag ) ;
65269: LD_VAR 0 4
65273: PPUSH
65274: LD_VAR 0 9
65278: PPUSH
65279: CALL_OW 109
// end else
65283: GO 65356
// if enemy then
65285: LD_VAR 0 5
65289: IFFALSE 65356
// begin if GetWeapon ( i ) = ru_time_lapser then
65291: LD_VAR 0 4
65295: PPUSH
65296: CALL_OW 264
65300: PUSH
65301: LD_INT 49
65303: EQUAL
65304: IFFALSE 65332
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65306: LD_VAR 0 4
65310: PPUSH
65311: LD_VAR 0 5
65315: PPUSH
65316: LD_VAR 0 4
65320: PPUSH
65321: CALL_OW 74
65325: PPUSH
65326: CALL_OW 112
65330: GO 65356
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65332: LD_VAR 0 4
65336: PPUSH
65337: LD_VAR 0 5
65341: PPUSH
65342: LD_VAR 0 4
65346: PPUSH
65347: CALL_OW 74
65351: PPUSH
65352: CALL 66441 0 2
// end ; end ;
65356: GO 64928
65358: POP
65359: POP
// end ;
65360: LD_VAR 0 3
65364: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
65369: PPUSH
// if not unit or IsInUnit ( unit ) then
65370: LD_VAR 0 1
65374: NOT
65375: IFTRUE 65388
65377: PUSH
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 310
65387: OR
65388: IFFALSE 65392
// exit ;
65390: GO 65483
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65392: LD_ADDR_VAR 0 4
65396: PUSH
65397: LD_VAR 0 1
65401: PPUSH
65402: CALL_OW 250
65406: PPUSH
65407: LD_VAR 0 2
65411: PPUSH
65412: LD_INT 1
65414: PPUSH
65415: CALL_OW 272
65419: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65420: LD_ADDR_VAR 0 5
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: CALL_OW 251
65434: PPUSH
65435: LD_VAR 0 2
65439: PPUSH
65440: LD_INT 1
65442: PPUSH
65443: CALL_OW 273
65447: ST_TO_ADDR
// if ValidHex ( x , y ) then
65448: LD_VAR 0 4
65452: PPUSH
65453: LD_VAR 0 5
65457: PPUSH
65458: CALL_OW 488
65462: IFFALSE 65483
// ComTurnXY ( unit , x , y ) ;
65464: LD_VAR 0 1
65468: PPUSH
65469: LD_VAR 0 4
65473: PPUSH
65474: LD_VAR 0 5
65478: PPUSH
65479: CALL_OW 118
// end ;
65483: LD_VAR 0 3
65487: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
// result := false ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_INT 0
65499: ST_TO_ADDR
// if not units then
65500: LD_VAR 0 2
65504: NOT
65505: IFFALSE 65509
// exit ;
65507: GO 65554
// for i in units do
65509: LD_ADDR_VAR 0 4
65513: PUSH
65514: LD_VAR 0 2
65518: PUSH
65519: FOR_IN
65520: IFFALSE 65552
// if See ( side , i ) then
65522: LD_VAR 0 1
65526: PPUSH
65527: LD_VAR 0 4
65531: PPUSH
65532: CALL_OW 292
65536: IFFALSE 65550
// begin result := true ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_INT 1
65545: ST_TO_ADDR
// exit ;
65546: POP
65547: POP
65548: GO 65554
// end ;
65550: GO 65519
65552: POP
65553: POP
// end ;
65554: LD_VAR 0 3
65558: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65559: LD_INT 0
65561: PPUSH
65562: PPUSH
65563: PPUSH
65564: PPUSH
// if not unit or not points then
65565: LD_VAR 0 1
65569: NOT
65570: IFTRUE 65579
65572: PUSH
65573: LD_VAR 0 2
65577: NOT
65578: OR
65579: IFFALSE 65583
// exit ;
65581: GO 65673
// dist := 99999 ;
65583: LD_ADDR_VAR 0 5
65587: PUSH
65588: LD_INT 99999
65590: ST_TO_ADDR
// for i in points do
65591: LD_ADDR_VAR 0 4
65595: PUSH
65596: LD_VAR 0 2
65600: PUSH
65601: FOR_IN
65602: IFFALSE 65671
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65604: LD_ADDR_VAR 0 6
65608: PUSH
65609: LD_VAR 0 1
65613: PPUSH
65614: LD_VAR 0 4
65618: PUSH
65619: LD_INT 1
65621: ARRAY
65622: PPUSH
65623: LD_VAR 0 4
65627: PUSH
65628: LD_INT 2
65630: ARRAY
65631: PPUSH
65632: CALL_OW 297
65636: ST_TO_ADDR
// if tmpDist < dist then
65637: LD_VAR 0 6
65641: PUSH
65642: LD_VAR 0 5
65646: LESS
65647: IFFALSE 65669
// begin result := i ;
65649: LD_ADDR_VAR 0 3
65653: PUSH
65654: LD_VAR 0 4
65658: ST_TO_ADDR
// dist := tmpDist ;
65659: LD_ADDR_VAR 0 5
65663: PUSH
65664: LD_VAR 0 6
65668: ST_TO_ADDR
// end ; end ;
65669: GO 65601
65671: POP
65672: POP
// end ;
65673: LD_VAR 0 3
65677: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65678: LD_INT 0
65680: PPUSH
// uc_side := side ;
65681: LD_ADDR_OWVAR 20
65685: PUSH
65686: LD_VAR 0 1
65690: ST_TO_ADDR
// uc_nation := 3 ;
65691: LD_ADDR_OWVAR 21
65695: PUSH
65696: LD_INT 3
65698: ST_TO_ADDR
// vc_chassis := 25 ;
65699: LD_ADDR_OWVAR 37
65703: PUSH
65704: LD_INT 25
65706: ST_TO_ADDR
// vc_engine := engine_siberite ;
65707: LD_ADDR_OWVAR 39
65711: PUSH
65712: LD_INT 3
65714: ST_TO_ADDR
// vc_control := control_computer ;
65715: LD_ADDR_OWVAR 38
65719: PUSH
65720: LD_INT 3
65722: ST_TO_ADDR
// vc_weapon := 59 ;
65723: LD_ADDR_OWVAR 40
65727: PUSH
65728: LD_INT 59
65730: ST_TO_ADDR
// result := CreateVehicle ;
65731: LD_ADDR_VAR 0 5
65735: PUSH
65736: CALL_OW 45
65740: ST_TO_ADDR
// SetDir ( result , d ) ;
65741: LD_VAR 0 5
65745: PPUSH
65746: LD_VAR 0 4
65750: PPUSH
65751: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65755: LD_VAR 0 5
65759: PPUSH
65760: LD_VAR 0 2
65764: PPUSH
65765: LD_VAR 0 3
65769: PPUSH
65770: LD_INT 0
65772: PPUSH
65773: CALL_OW 48
// end ;
65777: LD_VAR 0 5
65781: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65782: LD_INT 0
65784: PPUSH
65785: PPUSH
65786: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65787: LD_ADDR_VAR 0 2
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65810: LD_VAR 0 1
65814: NOT
65815: IFTRUE 65848
65817: PUSH
65818: LD_VAR 0 1
65822: PPUSH
65823: CALL_OW 264
65827: PUSH
65828: LD_INT 12
65830: PUSH
65831: LD_INT 51
65833: PUSH
65834: LD_INT 32
65836: PUSH
65837: LD_INT 89
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: IN
65846: NOT
65847: OR
65848: IFFALSE 65852
// exit ;
65850: GO 65950
// for i := 1 to 3 do
65852: LD_ADDR_VAR 0 3
65856: PUSH
65857: DOUBLE
65858: LD_INT 1
65860: DEC
65861: ST_TO_ADDR
65862: LD_INT 3
65864: PUSH
65865: FOR_TO
65866: IFFALSE 65948
// begin tmp := GetCargo ( cargo , i ) ;
65868: LD_ADDR_VAR 0 4
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: LD_VAR 0 3
65882: PPUSH
65883: CALL_OW 289
65887: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65888: LD_ADDR_VAR 0 2
65892: PUSH
65893: LD_VAR 0 2
65897: PPUSH
65898: LD_VAR 0 3
65902: PPUSH
65903: LD_VAR 0 4
65907: PPUSH
65908: CALL_OW 1
65912: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65913: LD_ADDR_VAR 0 2
65917: PUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: LD_INT 4
65925: PPUSH
65926: LD_VAR 0 2
65930: PUSH
65931: LD_INT 4
65933: ARRAY
65934: PUSH
65935: LD_VAR 0 4
65939: PLUS
65940: PPUSH
65941: CALL_OW 1
65945: ST_TO_ADDR
// end ;
65946: GO 65865
65948: POP
65949: POP
// end ;
65950: LD_VAR 0 2
65954: RET
// export function Length ( array ) ; begin
65955: LD_INT 0
65957: PPUSH
// result := array + 0 ;
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_VAR 0 1
65967: PUSH
65968: LD_INT 0
65970: PLUS
65971: ST_TO_ADDR
// end ;
65972: LD_VAR 0 2
65976: RET
// export function PrepareArray ( array ) ; begin
65977: LD_INT 0
65979: PPUSH
// result := array diff 0 ;
65980: LD_ADDR_VAR 0 2
65984: PUSH
65985: LD_VAR 0 1
65989: PUSH
65990: LD_INT 0
65992: DIFF
65993: ST_TO_ADDR
// if not result [ 1 ] then
65994: LD_VAR 0 2
65998: PUSH
65999: LD_INT 1
66001: ARRAY
66002: NOT
66003: IFFALSE 66023
// result := Delete ( result , 1 ) ;
66005: LD_ADDR_VAR 0 2
66009: PUSH
66010: LD_VAR 0 2
66014: PPUSH
66015: LD_INT 1
66017: PPUSH
66018: CALL_OW 3
66022: ST_TO_ADDR
// end ;
66023: LD_VAR 0 2
66027: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66028: LD_INT 0
66030: PPUSH
66031: PPUSH
66032: PPUSH
66033: PPUSH
// sibRocketRange := 25 ;
66034: LD_ADDR_VAR 0 6
66038: PUSH
66039: LD_INT 25
66041: ST_TO_ADDR
// result := false ;
66042: LD_ADDR_VAR 0 4
66046: PUSH
66047: LD_INT 0
66049: ST_TO_ADDR
// for i := 0 to 5 do
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: DOUBLE
66056: LD_INT 0
66058: DEC
66059: ST_TO_ADDR
66060: LD_INT 5
66062: PUSH
66063: FOR_TO
66064: IFFALSE 66131
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66066: LD_VAR 0 1
66070: PPUSH
66071: LD_VAR 0 5
66075: PPUSH
66076: LD_VAR 0 6
66080: PPUSH
66081: CALL_OW 272
66085: PPUSH
66086: LD_VAR 0 2
66090: PPUSH
66091: LD_VAR 0 5
66095: PPUSH
66096: LD_VAR 0 6
66100: PPUSH
66101: CALL_OW 273
66105: PPUSH
66106: LD_VAR 0 3
66110: PPUSH
66111: CALL_OW 309
66115: IFFALSE 66129
// begin result := true ;
66117: LD_ADDR_VAR 0 4
66121: PUSH
66122: LD_INT 1
66124: ST_TO_ADDR
// exit ;
66125: POP
66126: POP
66127: GO 66133
// end ;
66129: GO 66063
66131: POP
66132: POP
// end ;
66133: LD_VAR 0 4
66137: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66138: LD_INT 0
66140: PPUSH
66141: PPUSH
66142: PPUSH
// if btype = b_depot then
66143: LD_VAR 0 2
66147: PUSH
66148: LD_INT 0
66150: EQUAL
66151: IFFALSE 66163
// begin result := true ;
66153: LD_ADDR_VAR 0 3
66157: PUSH
66158: LD_INT 1
66160: ST_TO_ADDR
// exit ;
66161: GO 66283
// end ; pom := GetBase ( depot ) ;
66163: LD_ADDR_VAR 0 4
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: CALL_OW 274
66177: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66178: LD_ADDR_VAR 0 5
66182: PUSH
66183: LD_VAR 0 2
66187: PPUSH
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL_OW 248
66197: PPUSH
66198: CALL_OW 450
66202: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66203: LD_ADDR_VAR 0 3
66207: PUSH
66208: LD_VAR 0 4
66212: PPUSH
66213: LD_INT 1
66215: PPUSH
66216: CALL_OW 275
66220: PUSH
66221: LD_VAR 0 5
66225: PUSH
66226: LD_INT 1
66228: ARRAY
66229: GREATEREQUAL
66230: IFFALSE 66256
66232: PUSH
66233: LD_VAR 0 4
66237: PPUSH
66238: LD_INT 2
66240: PPUSH
66241: CALL_OW 275
66245: PUSH
66246: LD_VAR 0 5
66250: PUSH
66251: LD_INT 2
66253: ARRAY
66254: GREATEREQUAL
66255: AND
66256: IFFALSE 66282
66258: PUSH
66259: LD_VAR 0 4
66263: PPUSH
66264: LD_INT 3
66266: PPUSH
66267: CALL_OW 275
66271: PUSH
66272: LD_VAR 0 5
66276: PUSH
66277: LD_INT 3
66279: ARRAY
66280: GREATEREQUAL
66281: AND
66282: ST_TO_ADDR
// end ;
66283: LD_VAR 0 3
66287: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66288: LD_INT 0
66290: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66291: LD_VAR 0 1
66295: PPUSH
66296: LD_VAR 0 2
66300: PPUSH
66301: LD_INT 0
66303: PPUSH
66304: LD_INT 0
66306: PPUSH
66307: LD_INT 1
66309: PPUSH
66310: LD_INT 0
66312: PPUSH
66313: CALL_OW 587
// end ;
66317: LD_VAR 0 3
66321: RET
// export function CenterOnNow ( unit ) ; begin
66322: LD_INT 0
66324: PPUSH
// result := IsInUnit ( unit ) ;
66325: LD_ADDR_VAR 0 2
66329: PUSH
66330: LD_VAR 0 1
66334: PPUSH
66335: CALL_OW 310
66339: ST_TO_ADDR
// if not result then
66340: LD_VAR 0 2
66344: NOT
66345: IFFALSE 66357
// result := unit ;
66347: LD_ADDR_VAR 0 2
66351: PUSH
66352: LD_VAR 0 1
66356: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66357: LD_VAR 0 1
66361: PPUSH
66362: CALL_OW 87
// end ;
66366: LD_VAR 0 2
66370: RET
// export function ComMoveHex ( unit , hex ) ; begin
66371: LD_INT 0
66373: PPUSH
// if not hex then
66374: LD_VAR 0 2
66378: NOT
66379: IFFALSE 66383
// exit ;
66381: GO 66436
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66383: LD_VAR 0 2
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: PPUSH
66392: LD_VAR 0 2
66396: PUSH
66397: LD_INT 2
66399: ARRAY
66400: PPUSH
66401: CALL_OW 428
66405: IFFALSE 66409
// exit ;
66407: GO 66436
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66409: LD_VAR 0 1
66413: PPUSH
66414: LD_VAR 0 2
66418: PUSH
66419: LD_INT 1
66421: ARRAY
66422: PPUSH
66423: LD_VAR 0 2
66427: PUSH
66428: LD_INT 2
66430: ARRAY
66431: PPUSH
66432: CALL_OW 111
// end ;
66436: LD_VAR 0 3
66440: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66441: LD_INT 0
66443: PPUSH
66444: PPUSH
66445: PPUSH
// if not unit or not enemy then
66446: LD_VAR 0 1
66450: NOT
66451: IFTRUE 66460
66453: PUSH
66454: LD_VAR 0 2
66458: NOT
66459: OR
66460: IFFALSE 66464
// exit ;
66462: GO 66590
// x := GetX ( enemy ) ;
66464: LD_ADDR_VAR 0 4
66468: PUSH
66469: LD_VAR 0 2
66473: PPUSH
66474: CALL_OW 250
66478: ST_TO_ADDR
// y := GetY ( enemy ) ;
66479: LD_ADDR_VAR 0 5
66483: PUSH
66484: LD_VAR 0 2
66488: PPUSH
66489: CALL_OW 251
66493: ST_TO_ADDR
// if ValidHex ( x , y ) then
66494: LD_VAR 0 4
66498: PPUSH
66499: LD_VAR 0 5
66503: PPUSH
66504: CALL_OW 488
66508: IFFALSE 66590
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66510: LD_VAR 0 2
66514: PPUSH
66515: CALL_OW 247
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: IN
66530: IFTRUE 66553
66532: PUSH
66533: LD_VAR 0 1
66537: PPUSH
66538: CALL_OW 255
66542: PPUSH
66543: LD_VAR 0 2
66547: PPUSH
66548: CALL_OW 292
66552: OR
66553: IFFALSE 66571
// ComAttackUnit ( unit , enemy ) else
66555: LD_VAR 0 1
66559: PPUSH
66560: LD_VAR 0 2
66564: PPUSH
66565: CALL_OW 115
66569: GO 66590
// ComAgressiveMove ( unit , x , y ) ;
66571: LD_VAR 0 1
66575: PPUSH
66576: LD_VAR 0 4
66580: PPUSH
66581: LD_VAR 0 5
66585: PPUSH
66586: CALL_OW 114
// end ;
66590: LD_VAR 0 3
66594: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66595: LD_INT 0
66597: PPUSH
66598: PPUSH
66599: PPUSH
// list := AreaToList ( area , 0 ) ;
66600: LD_ADDR_VAR 0 5
66604: PUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: LD_INT 0
66612: PPUSH
66613: CALL_OW 517
66617: ST_TO_ADDR
// if not list then
66618: LD_VAR 0 5
66622: NOT
66623: IFFALSE 66627
// exit ;
66625: GO 66757
// if all then
66627: LD_VAR 0 2
66631: IFFALSE 66719
// begin for i := 1 to list [ 1 ] do
66633: LD_ADDR_VAR 0 4
66637: PUSH
66638: DOUBLE
66639: LD_INT 1
66641: DEC
66642: ST_TO_ADDR
66643: LD_VAR 0 5
66647: PUSH
66648: LD_INT 1
66650: ARRAY
66651: PUSH
66652: FOR_TO
66653: IFFALSE 66715
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66655: LD_ADDR_VAR 0 3
66659: PUSH
66660: LD_VAR 0 3
66664: PPUSH
66665: LD_VAR 0 3
66669: PUSH
66670: LD_INT 1
66672: PLUS
66673: PPUSH
66674: LD_VAR 0 5
66678: PUSH
66679: LD_INT 1
66681: ARRAY
66682: PUSH
66683: LD_VAR 0 4
66687: ARRAY
66688: PUSH
66689: LD_VAR 0 5
66693: PUSH
66694: LD_INT 2
66696: ARRAY
66697: PUSH
66698: LD_VAR 0 4
66702: ARRAY
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PPUSH
66708: CALL_OW 1
66712: ST_TO_ADDR
66713: GO 66652
66715: POP
66716: POP
// exit ;
66717: GO 66757
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66719: LD_ADDR_VAR 0 3
66723: PUSH
66724: LD_VAR 0 5
66728: PUSH
66729: LD_INT 1
66731: ARRAY
66732: PUSH
66733: LD_INT 1
66735: ARRAY
66736: PUSH
66737: LD_VAR 0 5
66741: PUSH
66742: LD_INT 2
66744: ARRAY
66745: PUSH
66746: LD_INT 1
66748: ARRAY
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: ST_TO_ADDR
// end ;
66757: LD_VAR 0 3
66761: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66762: LD_INT 0
66764: PPUSH
66765: PPUSH
// list := AreaToList ( area , 0 ) ;
66766: LD_ADDR_VAR 0 4
66770: PUSH
66771: LD_VAR 0 1
66775: PPUSH
66776: LD_INT 0
66778: PPUSH
66779: CALL_OW 517
66783: ST_TO_ADDR
// if not list then
66784: LD_VAR 0 4
66788: NOT
66789: IFFALSE 66793
// exit ;
66791: GO 66834
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66793: LD_ADDR_VAR 0 3
66797: PUSH
66798: LD_VAR 0 4
66802: PUSH
66803: LD_INT 1
66805: ARRAY
66806: PUSH
66807: LD_INT 1
66809: ARRAY
66810: PUSH
66811: LD_VAR 0 4
66815: PUSH
66816: LD_INT 2
66818: ARRAY
66819: PUSH
66820: LD_INT 1
66822: ARRAY
66823: PUSH
66824: LD_VAR 0 2
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// end ;
66834: LD_VAR 0 3
66838: RET
// export function First ( array ) ; begin
66839: LD_INT 0
66841: PPUSH
// if not array then
66842: LD_VAR 0 1
66846: NOT
66847: IFFALSE 66851
// exit ;
66849: GO 66865
// result := array [ 1 ] ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 1
66863: ARRAY
66864: ST_TO_ADDR
// end ;
66865: LD_VAR 0 2
66869: RET
// export function Last ( array ) ; begin
66870: LD_INT 0
66872: PPUSH
// if not array then
66873: LD_VAR 0 1
66877: NOT
66878: IFFALSE 66882
// exit ;
66880: GO 66898
// result := array [ array ] ;
66882: LD_ADDR_VAR 0 2
66886: PUSH
66887: LD_VAR 0 1
66891: PUSH
66892: LD_VAR 0 1
66896: ARRAY
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 2
66902: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
66903: LD_INT 0
66905: PPUSH
66906: PPUSH
// result := [ ] ;
66907: LD_ADDR_VAR 0 5
66911: PUSH
66912: EMPTY
66913: ST_TO_ADDR
// if not array then
66914: LD_VAR 0 1
66918: NOT
66919: IFFALSE 66923
// exit ;
66921: GO 67035
// for i := 1 to array do
66923: LD_ADDR_VAR 0 6
66927: PUSH
66928: DOUBLE
66929: LD_INT 1
66931: DEC
66932: ST_TO_ADDR
66933: LD_VAR 0 1
66937: PUSH
66938: FOR_TO
66939: IFFALSE 67033
// if array [ i ] [ index ] = value then
66941: LD_VAR 0 1
66945: PUSH
66946: LD_VAR 0 6
66950: ARRAY
66951: PUSH
66952: LD_VAR 0 2
66956: ARRAY
66957: PUSH
66958: LD_VAR 0 3
66962: EQUAL
66963: IFFALSE 67031
// begin if indexColumn then
66965: LD_VAR 0 4
66969: IFFALSE 67005
// result := Join ( result , array [ i ] [ indexColumn ] ) else
66971: LD_ADDR_VAR 0 5
66975: PUSH
66976: LD_VAR 0 5
66980: PPUSH
66981: LD_VAR 0 1
66985: PUSH
66986: LD_VAR 0 6
66990: ARRAY
66991: PUSH
66992: LD_VAR 0 4
66996: ARRAY
66997: PPUSH
66998: CALL 62043 0 2
67002: ST_TO_ADDR
67003: GO 67031
// result := Join ( result , array [ i ] ) ;
67005: LD_ADDR_VAR 0 5
67009: PUSH
67010: LD_VAR 0 5
67014: PPUSH
67015: LD_VAR 0 1
67019: PUSH
67020: LD_VAR 0 6
67024: ARRAY
67025: PPUSH
67026: CALL 62043 0 2
67030: ST_TO_ADDR
// end ;
67031: GO 66938
67033: POP
67034: POP
// end ;
67035: LD_VAR 0 5
67039: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67040: LD_INT 0
67042: PPUSH
// if not vehicles or not parkingPoint then
67043: LD_VAR 0 1
67047: NOT
67048: IFTRUE 67057
67050: PUSH
67051: LD_VAR 0 2
67055: NOT
67056: OR
67057: IFFALSE 67061
// exit ;
67059: GO 67159
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67061: LD_ADDR_VAR 0 1
67065: PUSH
67066: LD_VAR 0 1
67070: PPUSH
67071: LD_INT 50
67073: PUSH
67074: EMPTY
67075: LIST
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: LD_INT 92
67082: PUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_INT 1
67090: ARRAY
67091: PUSH
67092: LD_VAR 0 2
67096: PUSH
67097: LD_INT 2
67099: ARRAY
67100: PUSH
67101: LD_INT 8
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PPUSH
67118: CALL_OW 72
67122: ST_TO_ADDR
// if not vehicles then
67123: LD_VAR 0 1
67127: NOT
67128: IFFALSE 67132
// exit ;
67130: GO 67159
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_VAR 0 2
67141: PUSH
67142: LD_INT 1
67144: ARRAY
67145: PPUSH
67146: LD_VAR 0 2
67150: PUSH
67151: LD_INT 2
67153: ARRAY
67154: PPUSH
67155: CALL_OW 111
// end ;
67159: LD_VAR 0 3
67163: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67164: LD_INT 0
67166: PPUSH
67167: PPUSH
67168: PPUSH
// if not side or not area then
67169: LD_VAR 0 1
67173: NOT
67174: IFTRUE 67183
67176: PUSH
67177: LD_VAR 0 2
67181: NOT
67182: OR
67183: IFFALSE 67187
// exit ;
67185: GO 67306
// tmp := AreaToList ( area , 0 ) ;
67187: LD_ADDR_VAR 0 5
67191: PUSH
67192: LD_VAR 0 2
67196: PPUSH
67197: LD_INT 0
67199: PPUSH
67200: CALL_OW 517
67204: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67205: LD_ADDR_VAR 0 4
67209: PUSH
67210: DOUBLE
67211: LD_INT 1
67213: DEC
67214: ST_TO_ADDR
67215: LD_VAR 0 5
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: PUSH
67224: FOR_TO
67225: IFFALSE 67304
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67227: LD_VAR 0 5
67231: PUSH
67232: LD_INT 1
67234: ARRAY
67235: PUSH
67236: LD_VAR 0 4
67240: ARRAY
67241: PPUSH
67242: LD_VAR 0 5
67246: PUSH
67247: LD_INT 2
67249: ARRAY
67250: PUSH
67251: LD_VAR 0 4
67255: ARRAY
67256: PPUSH
67257: CALL_OW 351
67261: IFFALSE 67302
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67263: LD_VAR 0 5
67267: PUSH
67268: LD_INT 1
67270: ARRAY
67271: PUSH
67272: LD_VAR 0 4
67276: ARRAY
67277: PPUSH
67278: LD_VAR 0 5
67282: PUSH
67283: LD_INT 2
67285: ARRAY
67286: PUSH
67287: LD_VAR 0 4
67291: ARRAY
67292: PPUSH
67293: LD_VAR 0 1
67297: PPUSH
67298: CALL_OW 244
// end ;
67302: GO 67224
67304: POP
67305: POP
// end ;
67306: LD_VAR 0 3
67310: RET
// export function UniqueArray ( array ) ; var i ; begin
67311: LD_INT 0
67313: PPUSH
67314: PPUSH
// result := [ ] ;
67315: LD_ADDR_VAR 0 2
67319: PUSH
67320: EMPTY
67321: ST_TO_ADDR
// if not array then
67322: LD_VAR 0 1
67326: NOT
67327: IFFALSE 67331
// exit ;
67329: GO 67392
// for i := 1 to array do
67331: LD_ADDR_VAR 0 3
67335: PUSH
67336: DOUBLE
67337: LD_INT 1
67339: DEC
67340: ST_TO_ADDR
67341: LD_VAR 0 1
67345: PUSH
67346: FOR_TO
67347: IFFALSE 67390
// if not array [ i ] in result then
67349: LD_VAR 0 1
67353: PUSH
67354: LD_VAR 0 3
67358: ARRAY
67359: PUSH
67360: LD_VAR 0 2
67364: IN
67365: NOT
67366: IFFALSE 67388
// result := Join ( result , i ) ;
67368: LD_ADDR_VAR 0 2
67372: PUSH
67373: LD_VAR 0 2
67377: PPUSH
67378: LD_VAR 0 3
67382: PPUSH
67383: CALL 62043 0 2
67387: ST_TO_ADDR
67388: GO 67346
67390: POP
67391: POP
// end ; end_of_file
67392: LD_VAR 0 2
67396: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67397: LD_VAR 0 1
67401: PUSH
67402: LD_INT 200
67404: DOUBLE
67405: GREATEREQUAL
67406: IFFALSE 67414
67408: LD_INT 299
67410: DOUBLE
67411: LESSEQUAL
67412: IFTRUE 67416
67414: GO 67448
67416: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67417: LD_VAR 0 1
67421: PPUSH
67422: LD_VAR 0 2
67426: PPUSH
67427: LD_VAR 0 3
67431: PPUSH
67432: LD_VAR 0 4
67436: PPUSH
67437: LD_VAR 0 5
67441: PPUSH
67442: CALL 68310 0 5
67446: GO 67525
67448: LD_INT 300
67450: DOUBLE
67451: GREATEREQUAL
67452: IFFALSE 67460
67454: LD_INT 399
67456: DOUBLE
67457: LESSEQUAL
67458: IFTRUE 67462
67460: GO 67524
67462: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67463: LD_VAR 0 1
67467: PPUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: LD_VAR 0 3
67477: PPUSH
67478: LD_VAR 0 4
67482: PPUSH
67483: LD_VAR 0 5
67487: PPUSH
67488: LD_VAR 0 6
67492: PPUSH
67493: LD_VAR 0 7
67497: PPUSH
67498: LD_VAR 0 8
67502: PPUSH
67503: LD_VAR 0 9
67507: PPUSH
67508: LD_VAR 0 10
67512: PPUSH
67513: LD_VAR 0 11
67517: PPUSH
67518: CALL 20396 0 11
67522: GO 67525
67524: POP
// end ;
67525: PPOPN 11
67527: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67528: LD_VAR 0 1
67532: PPUSH
67533: LD_VAR 0 2
67537: PPUSH
67538: LD_VAR 0 3
67542: PPUSH
67543: LD_VAR 0 4
67547: PPUSH
67548: LD_VAR 0 5
67552: PPUSH
67553: CALL 67610 0 5
// end ; end_of_file
67557: PPOPN 5
67559: END
// export function SOS_UnitDestroyed ( un ) ; begin
67560: LD_INT 0
67562: PPUSH
// ComRadiation ( un ) ;
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL 68730 0 1
// end ;
67572: LD_VAR 0 2
67576: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67577: LD_INT 0
67579: PPUSH
// ComRadiation ( un ) ;
67580: LD_VAR 0 1
67584: PPUSH
67585: CALL 68730 0 1
// end ;
67589: LD_VAR 0 2
67593: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67594: LD_INT 0
67596: PPUSH
// end ;
67597: LD_VAR 0 4
67601: RET
// export function SOS_Command ( cmd ) ; begin
67602: LD_INT 0
67604: PPUSH
// end ;
67605: LD_VAR 0 2
67609: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67610: LD_INT 0
67612: PPUSH
// end ;
67613: LD_VAR 0 6
67617: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
67618: LD_INT 0
67620: PPUSH
67621: PPUSH
67622: PPUSH
67623: PPUSH
67624: PPUSH
// if not vehicle or not factory then
67625: LD_VAR 0 1
67629: NOT
67630: IFTRUE 67639
67632: PUSH
67633: LD_VAR 0 2
67637: NOT
67638: OR
67639: IFFALSE 67643
// exit ;
67641: GO 68305
// weapon := GetWeapon ( vehicle ) ;
67643: LD_ADDR_VAR 0 7
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 264
67657: ST_TO_ADDR
// if weapon = ar_miner then
67658: LD_VAR 0 7
67662: PUSH
67663: LD_INT 81
67665: EQUAL
67666: IFFALSE 67723
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
67668: LD_ADDR_EXP 89
67672: PUSH
67673: LD_EXP 89
67677: PPUSH
67678: LD_EXP 89
67682: PUSH
67683: LD_INT 1
67685: PLUS
67686: PPUSH
67687: LD_VAR 0 1
67691: PPUSH
67692: CALL_OW 1
67696: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67697: LD_ADDR_EXP 90
67701: PUSH
67702: LD_EXP 90
67706: PPUSH
67707: LD_EXP 90
67711: PUSH
67712: LD_INT 1
67714: PLUS
67715: PPUSH
67716: EMPTY
67717: PPUSH
67718: CALL_OW 1
67722: ST_TO_ADDR
// end ; if not factoryWaypoints then
67723: LD_EXP 78
67727: NOT
67728: IFFALSE 67732
// exit ;
67730: GO 68305
// for i := 1 to Count ( factoryWaypoints ) do
67732: LD_ADDR_VAR 0 4
67736: PUSH
67737: DOUBLE
67738: LD_INT 1
67740: DEC
67741: ST_TO_ADDR
67742: LD_EXP 78
67746: PPUSH
67747: CALL 26067 0 1
67751: PUSH
67752: FOR_TO
67753: IFFALSE 68303
// if factoryWaypoints [ i ] [ 2 ] = factory then
67755: LD_EXP 78
67759: PUSH
67760: LD_VAR 0 4
67764: ARRAY
67765: PUSH
67766: LD_INT 2
67768: ARRAY
67769: PUSH
67770: LD_VAR 0 2
67774: EQUAL
67775: IFFALSE 68301
// begin if GetControl ( vehicle ) = control_manual then
67777: LD_VAR 0 1
67781: PPUSH
67782: CALL_OW 263
67786: PUSH
67787: LD_INT 1
67789: EQUAL
67790: IFFALSE 68154
// begin driver := IsDrivenBy ( vehicle ) ;
67792: LD_ADDR_VAR 0 5
67796: PUSH
67797: LD_VAR 0 1
67801: PPUSH
67802: CALL_OW 311
67806: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
67807: LD_VAR 0 5
67811: PUSH
67812: LD_EXP 79
67816: IN
67817: IFTRUE 67831
67819: PUSH
67820: LD_VAR 0 1
67824: PUSH
67825: LD_EXP 79
67829: IN
67830: OR
67831: IFFALSE 67837
// exit ;
67833: POP
67834: POP
67835: GO 68305
// if not HasTask ( driver ) then
67837: LD_VAR 0 5
67841: PPUSH
67842: CALL_OW 314
67846: NOT
67847: IFFALSE 68152
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
67849: LD_ADDR_EXP 79
67853: PUSH
67854: LD_EXP 79
67858: PPUSH
67859: LD_VAR 0 5
67863: PPUSH
67864: CALL 62043 0 2
67868: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
67869: LD_ADDR_EXP 79
67873: PUSH
67874: LD_EXP 79
67878: PPUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: CALL 62043 0 2
67888: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
67889: LD_ADDR_VAR 0 6
67893: PUSH
67894: LD_EXP 78
67898: PUSH
67899: LD_VAR 0 4
67903: ARRAY
67904: PUSH
67905: LD_INT 3
67907: ARRAY
67908: PPUSH
67909: LD_EXP 78
67913: PUSH
67914: LD_VAR 0 4
67918: ARRAY
67919: PUSH
67920: LD_INT 4
67922: ARRAY
67923: PPUSH
67924: CALL_OW 428
67928: ST_TO_ADDR
// if hex then
67929: LD_VAR 0 6
67933: IFFALSE 67951
// ComMoveUnit ( driver , hex ) else
67935: LD_VAR 0 5
67939: PPUSH
67940: LD_VAR 0 6
67944: PPUSH
67945: CALL_OW 112
67949: GO 68035
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_EXP 78
67960: PUSH
67961: LD_VAR 0 4
67965: ARRAY
67966: PUSH
67967: LD_INT 3
67969: ARRAY
67970: PPUSH
67971: LD_EXP 78
67975: PUSH
67976: LD_VAR 0 4
67980: ARRAY
67981: PUSH
67982: LD_INT 4
67984: ARRAY
67985: PPUSH
67986: CALL_OW 297
67990: PUSH
67991: LD_INT 0
67993: GREATER
67994: IFFALSE 68035
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
67996: LD_VAR 0 5
68000: PPUSH
68001: LD_EXP 78
68005: PUSH
68006: LD_VAR 0 4
68010: ARRAY
68011: PUSH
68012: LD_INT 3
68014: ARRAY
68015: PPUSH
68016: LD_EXP 78
68020: PUSH
68021: LD_VAR 0 4
68025: ARRAY
68026: PUSH
68027: LD_INT 4
68029: ARRAY
68030: PPUSH
68031: CALL_OW 111
// AddComExitVehicle ( driver ) ;
68035: LD_VAR 0 5
68039: PPUSH
68040: CALL_OW 181
// if Multiplayer then
68044: LD_OWVAR 4
68048: IFFALSE 68097
// begin repeat wait ( 10 ) ;
68050: LD_INT 10
68052: PPUSH
68053: CALL_OW 67
// until not IsInUnit ( driver ) ;
68057: LD_VAR 0 5
68061: PPUSH
68062: CALL_OW 310
68066: NOT
68067: IFFALSE 68050
// if not HasTask ( driver ) then
68069: LD_VAR 0 5
68073: PPUSH
68074: CALL_OW 314
68078: NOT
68079: IFFALSE 68095
// ComEnterUnit ( driver , factory ) ;
68081: LD_VAR 0 5
68085: PPUSH
68086: LD_VAR 0 2
68090: PPUSH
68091: CALL_OW 120
// end else
68095: GO 68111
// AddComEnterUnit ( driver , factory ) ;
68097: LD_VAR 0 5
68101: PPUSH
68102: LD_VAR 0 2
68106: PPUSH
68107: CALL_OW 180
// wait ( 0 0$1 ) ;
68111: LD_INT 35
68113: PPUSH
68114: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
68118: LD_ADDR_EXP 79
68122: PUSH
68123: LD_EXP 79
68127: PUSH
68128: LD_VAR 0 5
68132: DIFF
68133: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
68134: LD_ADDR_EXP 79
68138: PUSH
68139: LD_EXP 79
68143: PUSH
68144: LD_VAR 0 1
68148: DIFF
68149: ST_TO_ADDR
// break ;
68150: GO 68303
// end ; end else
68152: GO 68301
// if GetControl ( vehicle ) = control_remote then
68154: LD_VAR 0 1
68158: PPUSH
68159: CALL_OW 263
68163: PUSH
68164: LD_INT 2
68166: EQUAL
68167: IFFALSE 68253
// begin wait ( 0 0$2 ) ;
68169: LD_INT 70
68171: PPUSH
68172: CALL_OW 67
// repeat wait ( 10 ) ;
68176: LD_INT 10
68178: PPUSH
68179: CALL_OW 67
// Connect ( vehicle ) ;
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL 32345 0 1
// until IsControledBy ( vehicle ) ;
68192: LD_VAR 0 1
68196: PPUSH
68197: CALL_OW 312
68201: IFFALSE 68176
// wait ( 10 ) ;
68203: LD_INT 10
68205: PPUSH
68206: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_EXP 78
68219: PUSH
68220: LD_VAR 0 4
68224: ARRAY
68225: PUSH
68226: LD_INT 3
68228: ARRAY
68229: PPUSH
68230: LD_EXP 78
68234: PUSH
68235: LD_VAR 0 4
68239: ARRAY
68240: PUSH
68241: LD_INT 4
68243: ARRAY
68244: PPUSH
68245: CALL_OW 111
// break ;
68249: GO 68303
// end else
68251: GO 68301
// begin wait ( 0 0$3 ) ;
68253: LD_INT 105
68255: PPUSH
68256: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
68260: LD_VAR 0 1
68264: PPUSH
68265: LD_EXP 78
68269: PUSH
68270: LD_VAR 0 4
68274: ARRAY
68275: PUSH
68276: LD_INT 3
68278: ARRAY
68279: PPUSH
68280: LD_EXP 78
68284: PUSH
68285: LD_VAR 0 4
68289: ARRAY
68290: PUSH
68291: LD_INT 4
68293: ARRAY
68294: PPUSH
68295: CALL_OW 111
// break ;
68299: GO 68303
// end ; end ;
68301: GO 67752
68303: POP
68304: POP
// end ;
68305: LD_VAR 0 3
68309: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68310: LD_INT 0
68312: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68313: LD_VAR 0 1
68317: PUSH
68318: LD_INT 250
68320: EQUAL
68321: IFFALSE 68338
68323: PUSH
68324: LD_VAR 0 2
68328: PPUSH
68329: CALL_OW 264
68333: PUSH
68334: LD_INT 81
68336: EQUAL
68337: AND
68338: IFFALSE 68359
// MinerPlaceMine ( unit , x , y ) ;
68340: LD_VAR 0 2
68344: PPUSH
68345: LD_VAR 0 4
68349: PPUSH
68350: LD_VAR 0 5
68354: PPUSH
68355: CALL 71705 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68359: LD_VAR 0 1
68363: PUSH
68364: LD_INT 251
68366: EQUAL
68367: IFFALSE 68384
68369: PUSH
68370: LD_VAR 0 2
68374: PPUSH
68375: CALL_OW 264
68379: PUSH
68380: LD_INT 81
68382: EQUAL
68383: AND
68384: IFFALSE 68405
// MinerDetonateMine ( unit , x , y ) ;
68386: LD_VAR 0 2
68390: PPUSH
68391: LD_VAR 0 4
68395: PPUSH
68396: LD_VAR 0 5
68400: PPUSH
68401: CALL 72112 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68405: LD_VAR 0 1
68409: PUSH
68410: LD_INT 252
68412: EQUAL
68413: IFFALSE 68430
68415: PUSH
68416: LD_VAR 0 2
68420: PPUSH
68421: CALL_OW 264
68425: PUSH
68426: LD_INT 81
68428: EQUAL
68429: AND
68430: IFFALSE 68451
// MinerCreateMinefield ( unit , x , y ) ;
68432: LD_VAR 0 2
68436: PPUSH
68437: LD_VAR 0 4
68441: PPUSH
68442: LD_VAR 0 5
68446: PPUSH
68447: CALL 72344 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68451: LD_VAR 0 1
68455: PUSH
68456: LD_INT 253
68458: EQUAL
68459: IFFALSE 68476
68461: PUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: CALL_OW 257
68471: PUSH
68472: LD_INT 5
68474: EQUAL
68475: AND
68476: IFFALSE 68497
// ComBinocular ( unit , x , y ) ;
68478: LD_VAR 0 2
68482: PPUSH
68483: LD_VAR 0 4
68487: PPUSH
68488: LD_VAR 0 5
68492: PPUSH
68493: CALL 72719 0 3
// if selectedUnit then
68497: LD_VAR 0 3
68501: IFFALSE 68561
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68503: LD_VAR 0 1
68507: PUSH
68508: LD_INT 254
68510: EQUAL
68511: IFFALSE 68528
68513: PUSH
68514: LD_VAR 0 2
68518: PPUSH
68519: CALL_OW 264
68523: PUSH
68524: LD_INT 99
68526: EQUAL
68527: AND
68528: IFFALSE 68545
68530: PUSH
68531: LD_VAR 0 3
68535: PPUSH
68536: CALL_OW 263
68540: PUSH
68541: LD_INT 3
68543: EQUAL
68544: AND
68545: IFFALSE 68561
// HackDestroyVehicle ( unit , selectedUnit ) ;
68547: LD_VAR 0 2
68551: PPUSH
68552: LD_VAR 0 3
68556: PPUSH
68557: CALL 70895 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68561: LD_VAR 0 1
68565: PUSH
68566: LD_INT 255
68568: EQUAL
68569: IFFALSE 68593
68571: PUSH
68572: LD_VAR 0 2
68576: PPUSH
68577: CALL_OW 264
68581: PUSH
68582: LD_INT 14
68584: PUSH
68585: LD_INT 53
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: IN
68592: AND
68593: IFFALSE 68611
68595: PUSH
68596: LD_VAR 0 4
68600: PPUSH
68601: LD_VAR 0 5
68605: PPUSH
68606: CALL_OW 488
68610: AND
68611: IFFALSE 68635
// CutTreeXYR ( unit , x , y , 12 ) ;
68613: LD_VAR 0 2
68617: PPUSH
68618: LD_VAR 0 4
68622: PPUSH
68623: LD_VAR 0 5
68627: PPUSH
68628: LD_INT 12
68630: PPUSH
68631: CALL 68826 0 4
// if cmd = 256 then
68635: LD_VAR 0 1
68639: PUSH
68640: LD_INT 256
68642: EQUAL
68643: IFFALSE 68664
// SetFactoryWaypoint ( unit , x , y ) ;
68645: LD_VAR 0 2
68649: PPUSH
68650: LD_VAR 0 4
68654: PPUSH
68655: LD_VAR 0 5
68659: PPUSH
68660: CALL 22388 0 3
// if cmd = 257 then
68664: LD_VAR 0 1
68668: PUSH
68669: LD_INT 257
68671: EQUAL
68672: IFFALSE 68693
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68674: LD_VAR 0 2
68678: PPUSH
68679: LD_VAR 0 4
68683: PPUSH
68684: LD_VAR 0 5
68688: PPUSH
68689: CALL 22884 0 3
// if cmd = 258 then
68693: LD_VAR 0 1
68697: PUSH
68698: LD_INT 258
68700: EQUAL
68701: IFFALSE 68725
// BurnTreeXYR ( unit , x , y , 8 ) ;
68703: LD_VAR 0 2
68707: PPUSH
68708: LD_VAR 0 4
68712: PPUSH
68713: LD_VAR 0 5
68717: PPUSH
68718: LD_INT 8
68720: PPUSH
68721: CALL 69248 0 4
// end ;
68725: LD_VAR 0 6
68729: RET
// export function ComRadiation ( un ) ; var eff ; begin
68730: LD_INT 0
68732: PPUSH
68733: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68734: LD_VAR 0 1
68738: PPUSH
68739: CALL_OW 264
68743: PUSH
68744: LD_INT 91
68746: NONEQUAL
68747: IFFALSE 68751
// exit ;
68749: GO 68821
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68751: LD_INT 68
68753: PPUSH
68754: LD_VAR 0 1
68758: PPUSH
68759: CALL_OW 255
68763: PPUSH
68764: CALL_OW 321
68768: PUSH
68769: LD_INT 2
68771: EQUAL
68772: IFFALSE 68784
// eff := 50 else
68774: LD_ADDR_VAR 0 3
68778: PUSH
68779: LD_INT 50
68781: ST_TO_ADDR
68782: GO 68792
// eff := 25 ;
68784: LD_ADDR_VAR 0 3
68788: PUSH
68789: LD_INT 25
68791: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68792: LD_VAR 0 1
68796: PPUSH
68797: CALL_OW 250
68801: PPUSH
68802: LD_VAR 0 1
68806: PPUSH
68807: CALL_OW 251
68811: PPUSH
68812: LD_VAR 0 3
68816: PPUSH
68817: CALL_OW 495
// end ;
68821: LD_VAR 0 2
68825: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68826: LD_INT 0
68828: PPUSH
68829: PPUSH
68830: PPUSH
68831: PPUSH
68832: PPUSH
68833: PPUSH
68834: PPUSH
68835: PPUSH
68836: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68837: LD_VAR 0 1
68841: PPUSH
68842: CALL_OW 302
68846: NOT
68847: IFTRUE 68866
68849: PUSH
68850: LD_VAR 0 2
68854: PPUSH
68855: LD_VAR 0 3
68859: PPUSH
68860: CALL_OW 488
68864: NOT
68865: OR
68866: IFTRUE 68875
68868: PUSH
68869: LD_VAR 0 4
68873: NOT
68874: OR
68875: IFFALSE 68879
// exit ;
68877: GO 69243
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
68879: LD_VAR 0 1
68883: PPUSH
68884: CALL_OW 437
68888: PPUSH
68889: CALL 26067 0 1
68893: PUSH
68894: LD_INT 10
68896: GREATER
68897: IFFALSE 68901
// exit ;
68899: GO 69243
// list := [ ] ;
68901: LD_ADDR_VAR 0 13
68905: PUSH
68906: EMPTY
68907: ST_TO_ADDR
// if x - r < 0 then
68908: LD_VAR 0 2
68912: PUSH
68913: LD_VAR 0 4
68917: MINUS
68918: PUSH
68919: LD_INT 0
68921: LESS
68922: IFFALSE 68934
// min_x := 0 else
68924: LD_ADDR_VAR 0 7
68928: PUSH
68929: LD_INT 0
68931: ST_TO_ADDR
68932: GO 68950
// min_x := x - r ;
68934: LD_ADDR_VAR 0 7
68938: PUSH
68939: LD_VAR 0 2
68943: PUSH
68944: LD_VAR 0 4
68948: MINUS
68949: ST_TO_ADDR
// if y - r < 0 then
68950: LD_VAR 0 3
68954: PUSH
68955: LD_VAR 0 4
68959: MINUS
68960: PUSH
68961: LD_INT 0
68963: LESS
68964: IFFALSE 68976
// min_y := 0 else
68966: LD_ADDR_VAR 0 8
68970: PUSH
68971: LD_INT 0
68973: ST_TO_ADDR
68974: GO 68992
// min_y := y - r ;
68976: LD_ADDR_VAR 0 8
68980: PUSH
68981: LD_VAR 0 3
68985: PUSH
68986: LD_VAR 0 4
68990: MINUS
68991: ST_TO_ADDR
// max_x := x + r ;
68992: LD_ADDR_VAR 0 9
68996: PUSH
68997: LD_VAR 0 2
69001: PUSH
69002: LD_VAR 0 4
69006: PLUS
69007: ST_TO_ADDR
// max_y := y + r ;
69008: LD_ADDR_VAR 0 10
69012: PUSH
69013: LD_VAR 0 3
69017: PUSH
69018: LD_VAR 0 4
69022: PLUS
69023: ST_TO_ADDR
// for _x = min_x to max_x do
69024: LD_ADDR_VAR 0 11
69028: PUSH
69029: DOUBLE
69030: LD_VAR 0 7
69034: DEC
69035: ST_TO_ADDR
69036: LD_VAR 0 9
69040: PUSH
69041: FOR_TO
69042: IFFALSE 69161
// for _y = min_y to max_y do
69044: LD_ADDR_VAR 0 12
69048: PUSH
69049: DOUBLE
69050: LD_VAR 0 8
69054: DEC
69055: ST_TO_ADDR
69056: LD_VAR 0 10
69060: PUSH
69061: FOR_TO
69062: IFFALSE 69157
// begin if not ValidHex ( _x , _y ) then
69064: LD_VAR 0 11
69068: PPUSH
69069: LD_VAR 0 12
69073: PPUSH
69074: CALL_OW 488
69078: NOT
69079: IFFALSE 69083
// continue ;
69081: GO 69061
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69083: LD_VAR 0 11
69087: PPUSH
69088: LD_VAR 0 12
69092: PPUSH
69093: CALL_OW 351
69097: IFFALSE 69115
69099: PUSH
69100: LD_VAR 0 11
69104: PPUSH
69105: LD_VAR 0 12
69109: PPUSH
69110: CALL_OW 554
69114: AND
69115: IFFALSE 69155
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69117: LD_ADDR_VAR 0 13
69121: PUSH
69122: LD_VAR 0 13
69126: PPUSH
69127: LD_VAR 0 13
69131: PUSH
69132: LD_INT 1
69134: PLUS
69135: PPUSH
69136: LD_VAR 0 11
69140: PUSH
69141: LD_VAR 0 12
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PPUSH
69150: CALL_OW 2
69154: ST_TO_ADDR
// end ;
69155: GO 69061
69157: POP
69158: POP
69159: GO 69041
69161: POP
69162: POP
// if not list then
69163: LD_VAR 0 13
69167: NOT
69168: IFFALSE 69172
// exit ;
69170: GO 69243
// for i in list do
69172: LD_ADDR_VAR 0 6
69176: PUSH
69177: LD_VAR 0 13
69181: PUSH
69182: FOR_IN
69183: IFFALSE 69241
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69185: LD_VAR 0 1
69189: PPUSH
69190: LD_STRING M
69192: PUSH
69193: LD_VAR 0 6
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PUSH
69202: LD_VAR 0 6
69206: PUSH
69207: LD_INT 2
69209: ARRAY
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: PUSH
69232: EMPTY
69233: LIST
69234: PPUSH
69235: CALL_OW 447
69239: GO 69182
69241: POP
69242: POP
// end ;
69243: LD_VAR 0 5
69247: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69248: LD_INT 0
69250: PPUSH
69251: PPUSH
69252: PPUSH
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69260: LD_VAR 0 1
69264: PPUSH
69265: CALL_OW 302
69269: NOT
69270: IFTRUE 69289
69272: PUSH
69273: LD_VAR 0 2
69277: PPUSH
69278: LD_VAR 0 3
69282: PPUSH
69283: CALL_OW 488
69287: NOT
69288: OR
69289: IFTRUE 69298
69291: PUSH
69292: LD_VAR 0 4
69296: NOT
69297: OR
69298: IFFALSE 69302
// exit ;
69300: GO 69841
// if Count ( GetTaskList ( flame ) ) > 10 then
69302: LD_VAR 0 1
69306: PPUSH
69307: CALL_OW 437
69311: PPUSH
69312: CALL 26067 0 1
69316: PUSH
69317: LD_INT 10
69319: GREATER
69320: IFFALSE 69324
// exit ;
69322: GO 69841
// list := [ ] ;
69324: LD_ADDR_VAR 0 13
69328: PUSH
69329: EMPTY
69330: ST_TO_ADDR
// if x - r < 0 then
69331: LD_VAR 0 2
69335: PUSH
69336: LD_VAR 0 4
69340: MINUS
69341: PUSH
69342: LD_INT 0
69344: LESS
69345: IFFALSE 69357
// min_x := 0 else
69347: LD_ADDR_VAR 0 7
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
69355: GO 69373
// min_x := x - r ;
69357: LD_ADDR_VAR 0 7
69361: PUSH
69362: LD_VAR 0 2
69366: PUSH
69367: LD_VAR 0 4
69371: MINUS
69372: ST_TO_ADDR
// if y - r < 0 then
69373: LD_VAR 0 3
69377: PUSH
69378: LD_VAR 0 4
69382: MINUS
69383: PUSH
69384: LD_INT 0
69386: LESS
69387: IFFALSE 69399
// min_y := 0 else
69389: LD_ADDR_VAR 0 8
69393: PUSH
69394: LD_INT 0
69396: ST_TO_ADDR
69397: GO 69415
// min_y := y - r ;
69399: LD_ADDR_VAR 0 8
69403: PUSH
69404: LD_VAR 0 3
69408: PUSH
69409: LD_VAR 0 4
69413: MINUS
69414: ST_TO_ADDR
// max_x := x + r ;
69415: LD_ADDR_VAR 0 9
69419: PUSH
69420: LD_VAR 0 2
69424: PUSH
69425: LD_VAR 0 4
69429: PLUS
69430: ST_TO_ADDR
// max_y := y + r ;
69431: LD_ADDR_VAR 0 10
69435: PUSH
69436: LD_VAR 0 3
69440: PUSH
69441: LD_VAR 0 4
69445: PLUS
69446: ST_TO_ADDR
// for _x = min_x to max_x do
69447: LD_ADDR_VAR 0 11
69451: PUSH
69452: DOUBLE
69453: LD_VAR 0 7
69457: DEC
69458: ST_TO_ADDR
69459: LD_VAR 0 9
69463: PUSH
69464: FOR_TO
69465: IFFALSE 69584
// for _y = min_y to max_y do
69467: LD_ADDR_VAR 0 12
69471: PUSH
69472: DOUBLE
69473: LD_VAR 0 8
69477: DEC
69478: ST_TO_ADDR
69479: LD_VAR 0 10
69483: PUSH
69484: FOR_TO
69485: IFFALSE 69580
// begin if not ValidHex ( _x , _y ) then
69487: LD_VAR 0 11
69491: PPUSH
69492: LD_VAR 0 12
69496: PPUSH
69497: CALL_OW 488
69501: NOT
69502: IFFALSE 69506
// continue ;
69504: GO 69484
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69506: LD_VAR 0 11
69510: PPUSH
69511: LD_VAR 0 12
69515: PPUSH
69516: CALL_OW 351
69520: IFFALSE 69538
69522: PUSH
69523: LD_VAR 0 11
69527: PPUSH
69528: LD_VAR 0 12
69532: PPUSH
69533: CALL_OW 554
69537: AND
69538: IFFALSE 69578
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69540: LD_ADDR_VAR 0 13
69544: PUSH
69545: LD_VAR 0 13
69549: PPUSH
69550: LD_VAR 0 13
69554: PUSH
69555: LD_INT 1
69557: PLUS
69558: PPUSH
69559: LD_VAR 0 11
69563: PUSH
69564: LD_VAR 0 12
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PPUSH
69573: CALL_OW 2
69577: ST_TO_ADDR
// end ;
69578: GO 69484
69580: POP
69581: POP
69582: GO 69464
69584: POP
69585: POP
// if not list then
69586: LD_VAR 0 13
69590: NOT
69591: IFFALSE 69595
// exit ;
69593: GO 69841
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69595: LD_ADDR_VAR 0 13
69599: PUSH
69600: LD_VAR 0 1
69604: PPUSH
69605: LD_VAR 0 13
69609: PPUSH
69610: LD_INT 1
69612: PPUSH
69613: LD_INT 1
69615: PPUSH
69616: CALL 29473 0 4
69620: ST_TO_ADDR
// ComStop ( flame ) ;
69621: LD_VAR 0 1
69625: PPUSH
69626: CALL_OW 141
// for i in list do
69630: LD_ADDR_VAR 0 6
69634: PUSH
69635: LD_VAR 0 13
69639: PUSH
69640: FOR_IN
69641: IFFALSE 69672
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69643: LD_VAR 0 1
69647: PPUSH
69648: LD_VAR 0 6
69652: PUSH
69653: LD_INT 1
69655: ARRAY
69656: PPUSH
69657: LD_VAR 0 6
69661: PUSH
69662: LD_INT 2
69664: ARRAY
69665: PPUSH
69666: CALL_OW 176
69670: GO 69640
69672: POP
69673: POP
// repeat wait ( 0 0$1 ) ;
69674: LD_INT 35
69676: PPUSH
69677: CALL_OW 67
// task := GetTaskList ( flame ) ;
69681: LD_ADDR_VAR 0 14
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: CALL_OW 437
69695: ST_TO_ADDR
// if not task then
69696: LD_VAR 0 14
69700: NOT
69701: IFFALSE 69705
// exit ;
69703: GO 69841
// if task [ 1 ] [ 1 ] <> | then
69705: LD_VAR 0 14
69709: PUSH
69710: LD_INT 1
69712: ARRAY
69713: PUSH
69714: LD_INT 1
69716: ARRAY
69717: PUSH
69718: LD_STRING |
69720: NONEQUAL
69721: IFFALSE 69725
// exit ;
69723: GO 69841
// _x := task [ 1 ] [ 2 ] ;
69725: LD_ADDR_VAR 0 11
69729: PUSH
69730: LD_VAR 0 14
69734: PUSH
69735: LD_INT 1
69737: ARRAY
69738: PUSH
69739: LD_INT 2
69741: ARRAY
69742: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69743: LD_ADDR_VAR 0 12
69747: PUSH
69748: LD_VAR 0 14
69752: PUSH
69753: LD_INT 1
69755: ARRAY
69756: PUSH
69757: LD_INT 3
69759: ARRAY
69760: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69761: LD_VAR 0 11
69765: PPUSH
69766: LD_VAR 0 12
69770: PPUSH
69771: CALL_OW 351
69775: NOT
69776: IFTRUE 69795
69778: PUSH
69779: LD_VAR 0 11
69783: PPUSH
69784: LD_VAR 0 12
69788: PPUSH
69789: CALL_OW 554
69793: NOT
69794: OR
69795: IFFALSE 69829
// begin task := Delete ( task , 1 ) ;
69797: LD_ADDR_VAR 0 14
69801: PUSH
69802: LD_VAR 0 14
69806: PPUSH
69807: LD_INT 1
69809: PPUSH
69810: CALL_OW 3
69814: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69815: LD_VAR 0 1
69819: PPUSH
69820: LD_VAR 0 14
69824: PPUSH
69825: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69829: LD_VAR 0 1
69833: PPUSH
69834: CALL_OW 314
69838: NOT
69839: IFFALSE 69674
// end ;
69841: LD_VAR 0 5
69845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69846: LD_EXP 82
69850: NOT
69851: IFFALSE 69901
69853: GO 69855
69855: DISABLE
// begin initHack := true ;
69856: LD_ADDR_EXP 82
69860: PUSH
69861: LD_INT 1
69863: ST_TO_ADDR
// hackTanks := [ ] ;
69864: LD_ADDR_EXP 83
69868: PUSH
69869: EMPTY
69870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69871: LD_ADDR_EXP 84
69875: PUSH
69876: EMPTY
69877: ST_TO_ADDR
// hackLimit := 3 ;
69878: LD_ADDR_EXP 85
69882: PUSH
69883: LD_INT 3
69885: ST_TO_ADDR
// hackDist := 12 ;
69886: LD_ADDR_EXP 86
69890: PUSH
69891: LD_INT 12
69893: ST_TO_ADDR
// hackCounter := [ ] ;
69894: LD_ADDR_EXP 87
69898: PUSH
69899: EMPTY
69900: ST_TO_ADDR
// end ;
69901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69902: LD_EXP 82
69906: IFFALSE 69924
69908: PUSH
69909: LD_INT 34
69911: PUSH
69912: LD_INT 99
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PPUSH
69919: CALL_OW 69
69923: AND
69924: IFFALSE 70177
69926: GO 69928
69928: DISABLE
69929: LD_INT 0
69931: PPUSH
69932: PPUSH
// begin enable ;
69933: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69934: LD_ADDR_VAR 0 1
69938: PUSH
69939: LD_INT 34
69941: PUSH
69942: LD_INT 99
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PPUSH
69949: CALL_OW 69
69953: PUSH
69954: FOR_IN
69955: IFFALSE 70175
// begin if not i in hackTanks then
69957: LD_VAR 0 1
69961: PUSH
69962: LD_EXP 83
69966: IN
69967: NOT
69968: IFFALSE 70051
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69970: LD_ADDR_EXP 83
69974: PUSH
69975: LD_EXP 83
69979: PPUSH
69980: LD_EXP 83
69984: PUSH
69985: LD_INT 1
69987: PLUS
69988: PPUSH
69989: LD_VAR 0 1
69993: PPUSH
69994: CALL_OW 1
69998: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69999: LD_ADDR_EXP 84
70003: PUSH
70004: LD_EXP 84
70008: PPUSH
70009: LD_EXP 84
70013: PUSH
70014: LD_INT 1
70016: PLUS
70017: PPUSH
70018: EMPTY
70019: PPUSH
70020: CALL_OW 1
70024: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
70025: LD_ADDR_EXP 87
70029: PUSH
70030: LD_EXP 87
70034: PPUSH
70035: LD_EXP 87
70039: PUSH
70040: LD_INT 1
70042: PLUS
70043: PPUSH
70044: EMPTY
70045: PPUSH
70046: CALL_OW 1
70050: ST_TO_ADDR
// end ; if not IsOk ( i ) then
70051: LD_VAR 0 1
70055: PPUSH
70056: CALL_OW 302
70060: NOT
70061: IFFALSE 70074
// begin HackUnlinkAll ( i ) ;
70063: LD_VAR 0 1
70067: PPUSH
70068: CALL 70180 0 1
// continue ;
70072: GO 69954
// end ; HackCheckCapturedStatus ( i ) ;
70074: LD_VAR 0 1
70078: PPUSH
70079: CALL 70625 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
70083: LD_ADDR_VAR 0 2
70087: PUSH
70088: LD_INT 81
70090: PUSH
70091: LD_VAR 0 1
70095: PPUSH
70096: CALL_OW 255
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 33
70107: PUSH
70108: LD_INT 3
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 91
70117: PUSH
70118: LD_VAR 0 1
70122: PUSH
70123: LD_EXP 86
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 50
70135: PUSH
70136: EMPTY
70137: LIST
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: PPUSH
70145: CALL_OW 69
70149: ST_TO_ADDR
// if not tmp then
70150: LD_VAR 0 2
70154: NOT
70155: IFFALSE 70159
// continue ;
70157: GO 69954
// HackLink ( i , tmp ) ;
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 2
70168: PPUSH
70169: CALL 70316 0 2
// end ;
70173: GO 69954
70175: POP
70176: POP
// end ;
70177: PPOPN 2
70179: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70180: LD_INT 0
70182: PPUSH
70183: PPUSH
70184: PPUSH
// if not hack in hackTanks then
70185: LD_VAR 0 1
70189: PUSH
70190: LD_EXP 83
70194: IN
70195: NOT
70196: IFFALSE 70200
// exit ;
70198: GO 70311
// index := GetElementIndex ( hackTanks , hack ) ;
70200: LD_ADDR_VAR 0 4
70204: PUSH
70205: LD_EXP 83
70209: PPUSH
70210: LD_VAR 0 1
70214: PPUSH
70215: CALL 28768 0 2
70219: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70220: LD_EXP 84
70224: PUSH
70225: LD_VAR 0 4
70229: ARRAY
70230: IFFALSE 70311
// begin for i in hackTanksCaptured [ index ] do
70232: LD_ADDR_VAR 0 3
70236: PUSH
70237: LD_EXP 84
70241: PUSH
70242: LD_VAR 0 4
70246: ARRAY
70247: PUSH
70248: FOR_IN
70249: IFFALSE 70275
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70251: LD_VAR 0 3
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PPUSH
70260: LD_VAR 0 3
70264: PUSH
70265: LD_INT 2
70267: ARRAY
70268: PPUSH
70269: CALL_OW 235
70273: GO 70248
70275: POP
70276: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70277: LD_ADDR_EXP 84
70281: PUSH
70282: LD_EXP 84
70286: PPUSH
70287: LD_VAR 0 4
70291: PPUSH
70292: EMPTY
70293: PPUSH
70294: CALL_OW 1
70298: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70299: LD_VAR 0 1
70303: PPUSH
70304: LD_INT 0
70306: PPUSH
70307: CALL_OW 505
// end ; end ;
70311: LD_VAR 0 2
70315: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70316: LD_INT 0
70318: PPUSH
70319: PPUSH
70320: PPUSH
// if not hack in hackTanks or not vehicles then
70321: LD_VAR 0 1
70325: PUSH
70326: LD_EXP 83
70330: IN
70331: NOT
70332: IFTRUE 70341
70334: PUSH
70335: LD_VAR 0 2
70339: NOT
70340: OR
70341: IFFALSE 70345
// exit ;
70343: GO 70620
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70345: LD_ADDR_VAR 0 2
70349: PUSH
70350: LD_VAR 0 1
70354: PPUSH
70355: LD_VAR 0 2
70359: PPUSH
70360: LD_INT 1
70362: PPUSH
70363: LD_INT 1
70365: PPUSH
70366: CALL 29420 0 4
70370: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70371: LD_ADDR_VAR 0 5
70375: PUSH
70376: LD_EXP 83
70380: PPUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: CALL 28768 0 2
70390: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70391: LD_EXP 84
70395: PUSH
70396: LD_VAR 0 5
70400: ARRAY
70401: PUSH
70402: LD_EXP 85
70406: LESS
70407: IFFALSE 70596
// begin for i := 1 to vehicles do
70409: LD_ADDR_VAR 0 4
70413: PUSH
70414: DOUBLE
70415: LD_INT 1
70417: DEC
70418: ST_TO_ADDR
70419: LD_VAR 0 2
70423: PUSH
70424: FOR_TO
70425: IFFALSE 70594
// begin if hackTanksCaptured [ index ] = hackLimit then
70427: LD_EXP 84
70431: PUSH
70432: LD_VAR 0 5
70436: ARRAY
70437: PUSH
70438: LD_EXP 85
70442: EQUAL
70443: IFFALSE 70447
// break ;
70445: GO 70594
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70447: LD_ADDR_EXP 87
70451: PUSH
70452: LD_EXP 87
70456: PPUSH
70457: LD_VAR 0 5
70461: PPUSH
70462: LD_EXP 87
70466: PUSH
70467: LD_VAR 0 5
70471: ARRAY
70472: PUSH
70473: LD_INT 1
70475: PLUS
70476: PPUSH
70477: CALL_OW 1
70481: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70482: LD_ADDR_EXP 84
70486: PUSH
70487: LD_EXP 84
70491: PPUSH
70492: LD_VAR 0 5
70496: PUSH
70497: LD_EXP 84
70501: PUSH
70502: LD_VAR 0 5
70506: ARRAY
70507: PUSH
70508: LD_INT 1
70510: PLUS
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PPUSH
70516: LD_VAR 0 2
70520: PUSH
70521: LD_VAR 0 4
70525: ARRAY
70526: PUSH
70527: LD_VAR 0 2
70531: PUSH
70532: LD_VAR 0 4
70536: ARRAY
70537: PPUSH
70538: CALL_OW 255
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PPUSH
70547: CALL 28985 0 3
70551: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70552: LD_VAR 0 2
70556: PUSH
70557: LD_VAR 0 4
70561: ARRAY
70562: PPUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 255
70572: PPUSH
70573: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70577: LD_VAR 0 2
70581: PUSH
70582: LD_VAR 0 4
70586: ARRAY
70587: PPUSH
70588: CALL_OW 141
// end ;
70592: GO 70424
70594: POP
70595: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70596: LD_VAR 0 1
70600: PPUSH
70601: LD_EXP 84
70605: PUSH
70606: LD_VAR 0 5
70610: ARRAY
70611: PUSH
70612: LD_INT 0
70614: PLUS
70615: PPUSH
70616: CALL_OW 505
// end ;
70620: LD_VAR 0 3
70624: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70625: LD_INT 0
70627: PPUSH
70628: PPUSH
70629: PPUSH
70630: PPUSH
// if not hack in hackTanks then
70631: LD_VAR 0 1
70635: PUSH
70636: LD_EXP 83
70640: IN
70641: NOT
70642: IFFALSE 70646
// exit ;
70644: GO 70890
// index := GetElementIndex ( hackTanks , hack ) ;
70646: LD_ADDR_VAR 0 4
70650: PUSH
70651: LD_EXP 83
70655: PPUSH
70656: LD_VAR 0 1
70660: PPUSH
70661: CALL 28768 0 2
70665: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70666: LD_ADDR_VAR 0 3
70670: PUSH
70671: DOUBLE
70672: LD_EXP 84
70676: PUSH
70677: LD_VAR 0 4
70681: ARRAY
70682: INC
70683: ST_TO_ADDR
70684: LD_INT 1
70686: PUSH
70687: FOR_DOWNTO
70688: IFFALSE 70864
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70690: LD_ADDR_VAR 0 5
70694: PUSH
70695: LD_EXP 84
70699: PUSH
70700: LD_VAR 0 4
70704: ARRAY
70705: PUSH
70706: LD_VAR 0 3
70710: ARRAY
70711: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70712: LD_VAR 0 5
70716: PUSH
70717: LD_INT 1
70719: ARRAY
70720: PPUSH
70721: CALL_OW 302
70725: NOT
70726: IFTRUE 70754
70728: PUSH
70729: LD_VAR 0 5
70733: PUSH
70734: LD_INT 1
70736: ARRAY
70737: PPUSH
70738: CALL_OW 255
70742: PUSH
70743: LD_VAR 0 1
70747: PPUSH
70748: CALL_OW 255
70752: NONEQUAL
70753: OR
70754: IFFALSE 70862
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70756: LD_VAR 0 5
70760: PUSH
70761: LD_INT 1
70763: ARRAY
70764: PPUSH
70765: CALL_OW 305
70769: IFFALSE 70797
70771: PUSH
70772: LD_VAR 0 5
70776: PUSH
70777: LD_INT 1
70779: ARRAY
70780: PPUSH
70781: CALL_OW 255
70785: PUSH
70786: LD_VAR 0 1
70790: PPUSH
70791: CALL_OW 255
70795: EQUAL
70796: AND
70797: IFFALSE 70821
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70799: LD_VAR 0 5
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PPUSH
70808: LD_VAR 0 5
70812: PUSH
70813: LD_INT 2
70815: ARRAY
70816: PPUSH
70817: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70821: LD_ADDR_EXP 84
70825: PUSH
70826: LD_EXP 84
70830: PPUSH
70831: LD_VAR 0 4
70835: PPUSH
70836: LD_EXP 84
70840: PUSH
70841: LD_VAR 0 4
70845: ARRAY
70846: PPUSH
70847: LD_VAR 0 3
70851: PPUSH
70852: CALL_OW 3
70856: PPUSH
70857: CALL_OW 1
70861: ST_TO_ADDR
// end ; end ;
70862: GO 70687
70864: POP
70865: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70866: LD_VAR 0 1
70870: PPUSH
70871: LD_EXP 84
70875: PUSH
70876: LD_VAR 0 4
70880: ARRAY
70881: PUSH
70882: LD_INT 0
70884: PLUS
70885: PPUSH
70886: CALL_OW 505
// end ;
70890: LD_VAR 0 2
70894: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70895: LD_INT 0
70897: PPUSH
70898: PPUSH
70899: PPUSH
70900: PPUSH
// if not hack in hackTanks then
70901: LD_VAR 0 1
70905: PUSH
70906: LD_EXP 83
70910: IN
70911: NOT
70912: IFFALSE 70916
// exit ;
70914: GO 71001
// index := GetElementIndex ( hackTanks , hack ) ;
70916: LD_ADDR_VAR 0 5
70920: PUSH
70921: LD_EXP 83
70925: PPUSH
70926: LD_VAR 0 1
70930: PPUSH
70931: CALL 28768 0 2
70935: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70936: LD_ADDR_VAR 0 4
70940: PUSH
70941: DOUBLE
70942: LD_INT 1
70944: DEC
70945: ST_TO_ADDR
70946: LD_EXP 84
70950: PUSH
70951: LD_VAR 0 5
70955: ARRAY
70956: PUSH
70957: FOR_TO
70958: IFFALSE 70999
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70960: LD_EXP 84
70964: PUSH
70965: LD_VAR 0 5
70969: ARRAY
70970: PUSH
70971: LD_VAR 0 4
70975: ARRAY
70976: PUSH
70977: LD_INT 1
70979: ARRAY
70980: PUSH
70981: LD_VAR 0 2
70985: EQUAL
70986: IFFALSE 70997
// KillUnit ( vehicle ) ;
70988: LD_VAR 0 2
70992: PPUSH
70993: CALL_OW 66
70997: GO 70957
70999: POP
71000: POP
// end ;
71001: LD_VAR 0 3
71005: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
71006: LD_EXP 88
71010: NOT
71011: IFFALSE 71144
71013: GO 71015
71015: DISABLE
71016: LD_INT 0
71018: PPUSH
// begin initMiner := true ;
71019: LD_ADDR_EXP 88
71023: PUSH
71024: LD_INT 1
71026: ST_TO_ADDR
// minersList := [ ] ;
71027: LD_ADDR_EXP 89
71031: PUSH
71032: EMPTY
71033: ST_TO_ADDR
// minerMinesList := [ ] ;
71034: LD_ADDR_EXP 90
71038: PUSH
71039: EMPTY
71040: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
71041: LD_ADDR_EXP 91
71045: PUSH
71046: LD_INT 10
71048: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
71049: LD_ADDR_VAR 0 1
71053: PUSH
71054: LD_INT 34
71056: PUSH
71057: LD_INT 81
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PPUSH
71064: CALL_OW 69
71068: PUSH
71069: FOR_IN
71070: IFFALSE 71142
// begin if not i in minersList then
71072: LD_VAR 0 1
71076: PUSH
71077: LD_EXP 89
71081: IN
71082: NOT
71083: IFFALSE 71140
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
71085: LD_ADDR_EXP 89
71089: PUSH
71090: LD_EXP 89
71094: PPUSH
71095: LD_EXP 89
71099: PUSH
71100: LD_INT 1
71102: PLUS
71103: PPUSH
71104: LD_VAR 0 1
71108: PPUSH
71109: CALL_OW 1
71113: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
71114: LD_ADDR_EXP 90
71118: PUSH
71119: LD_EXP 90
71123: PPUSH
71124: LD_EXP 90
71128: PUSH
71129: LD_INT 1
71131: PLUS
71132: PPUSH
71133: EMPTY
71134: PPUSH
71135: CALL_OW 1
71139: ST_TO_ADDR
// end end ;
71140: GO 71069
71142: POP
71143: POP
// end ;
71144: PPOPN 1
71146: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
71147: LD_EXP 88
71151: IFFALSE 71182
71153: PUSH
71154: LD_EXP 90
71158: PPUSH
71159: CALL 26067 0 1
71163: IFTRUE 71181
71165: PUSH
71166: LD_INT 34
71168: PUSH
71169: LD_INT 81
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PPUSH
71176: CALL_OW 69
71180: OR
71181: AND
71182: IFFALSE 71702
71184: GO 71186
71186: DISABLE
71187: LD_INT 0
71189: PPUSH
71190: PPUSH
71191: PPUSH
71192: PPUSH
// begin enable ;
71193: ENABLE
// for i := minerMinesList downto 1 do
71194: LD_ADDR_VAR 0 1
71198: PUSH
71199: DOUBLE
71200: LD_EXP 90
71204: INC
71205: ST_TO_ADDR
71206: LD_INT 1
71208: PUSH
71209: FOR_DOWNTO
71210: IFFALSE 71700
// begin side := GetSide ( minersList [ i ] ) ;
71212: LD_ADDR_VAR 0 3
71216: PUSH
71217: LD_EXP 89
71221: PUSH
71222: LD_VAR 0 1
71226: ARRAY
71227: PPUSH
71228: CALL_OW 255
71232: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
71233: LD_EXP 89
71237: PUSH
71238: LD_VAR 0 1
71242: ARRAY
71243: PPUSH
71244: CALL_OW 300
71248: IFFALSE 71269
71250: PUSH
71251: LD_VAR 0 3
71255: PUSH
71256: LD_OWVAR 2
71260: PUSH
71261: LD_INT 9
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: IN
71268: AND
71269: IFFALSE 71302
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
71271: LD_EXP 89
71275: PUSH
71276: LD_VAR 0 1
71280: ARRAY
71281: PPUSH
71282: LD_EXP 90
71286: PUSH
71287: LD_VAR 0 1
71291: ARRAY
71292: PPUSH
71293: CALL 26067 0 1
71297: PPUSH
71298: CALL_OW 505
// if not minerMinesList [ i ] then
71302: LD_EXP 90
71306: PUSH
71307: LD_VAR 0 1
71311: ARRAY
71312: NOT
71313: IFFALSE 71317
// continue ;
71315: GO 71209
// for j := minerMinesList [ i ] downto 1 do
71317: LD_ADDR_VAR 0 2
71321: PUSH
71322: DOUBLE
71323: LD_EXP 90
71327: PUSH
71328: LD_VAR 0 1
71332: ARRAY
71333: INC
71334: ST_TO_ADDR
71335: LD_INT 1
71337: PUSH
71338: FOR_DOWNTO
71339: IFFALSE 71696
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
71341: LD_EXP 89
71345: PUSH
71346: LD_VAR 0 1
71350: ARRAY
71351: PPUSH
71352: CALL_OW 301
71356: IFTRUE 71376
71358: PUSH
71359: LD_EXP 89
71363: PUSH
71364: LD_VAR 0 1
71368: ARRAY
71369: PPUSH
71370: CALL_OW 305
71374: NOT
71375: OR
71376: IFFALSE 71467
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71378: LD_EXP 90
71382: PUSH
71383: LD_VAR 0 1
71387: ARRAY
71388: PUSH
71389: LD_VAR 0 2
71393: ARRAY
71394: PUSH
71395: LD_INT 1
71397: ARRAY
71398: PPUSH
71399: LD_EXP 90
71403: PUSH
71404: LD_VAR 0 1
71408: ARRAY
71409: PUSH
71410: LD_VAR 0 2
71414: ARRAY
71415: PUSH
71416: LD_INT 2
71418: ARRAY
71419: PPUSH
71420: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71424: LD_ADDR_EXP 90
71428: PUSH
71429: LD_EXP 90
71433: PPUSH
71434: LD_VAR 0 1
71438: PPUSH
71439: LD_EXP 90
71443: PUSH
71444: LD_VAR 0 1
71448: ARRAY
71449: PPUSH
71450: LD_VAR 0 2
71454: PPUSH
71455: CALL_OW 3
71459: PPUSH
71460: CALL_OW 1
71464: ST_TO_ADDR
// continue ;
71465: GO 71338
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71467: LD_ADDR_VAR 0 4
71471: PUSH
71472: LD_EXP 90
71476: PUSH
71477: LD_VAR 0 1
71481: ARRAY
71482: PUSH
71483: LD_VAR 0 2
71487: ARRAY
71488: PUSH
71489: LD_INT 1
71491: ARRAY
71492: PPUSH
71493: LD_EXP 90
71497: PUSH
71498: LD_VAR 0 1
71502: ARRAY
71503: PUSH
71504: LD_VAR 0 2
71508: ARRAY
71509: PUSH
71510: LD_INT 2
71512: ARRAY
71513: PPUSH
71514: CALL_OW 428
71518: ST_TO_ADDR
// if not tmp then
71519: LD_VAR 0 4
71523: NOT
71524: IFFALSE 71528
// continue ;
71526: GO 71338
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71528: LD_VAR 0 4
71532: PUSH
71533: LD_INT 81
71535: PUSH
71536: LD_VAR 0 3
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PPUSH
71545: CALL_OW 69
71549: IN
71550: IFFALSE 71600
71552: PUSH
71553: LD_EXP 90
71557: PUSH
71558: LD_VAR 0 1
71562: ARRAY
71563: PUSH
71564: LD_VAR 0 2
71568: ARRAY
71569: PUSH
71570: LD_INT 1
71572: ARRAY
71573: PPUSH
71574: LD_EXP 90
71578: PUSH
71579: LD_VAR 0 1
71583: ARRAY
71584: PUSH
71585: LD_VAR 0 2
71589: ARRAY
71590: PUSH
71591: LD_INT 2
71593: ARRAY
71594: PPUSH
71595: CALL_OW 458
71599: AND
71600: IFFALSE 71694
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71602: LD_EXP 90
71606: PUSH
71607: LD_VAR 0 1
71611: ARRAY
71612: PUSH
71613: LD_VAR 0 2
71617: ARRAY
71618: PUSH
71619: LD_INT 1
71621: ARRAY
71622: PPUSH
71623: LD_EXP 90
71627: PUSH
71628: LD_VAR 0 1
71632: ARRAY
71633: PUSH
71634: LD_VAR 0 2
71638: ARRAY
71639: PUSH
71640: LD_INT 2
71642: ARRAY
71643: PPUSH
71644: LD_VAR 0 3
71648: PPUSH
71649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71653: LD_ADDR_EXP 90
71657: PUSH
71658: LD_EXP 90
71662: PPUSH
71663: LD_VAR 0 1
71667: PPUSH
71668: LD_EXP 90
71672: PUSH
71673: LD_VAR 0 1
71677: ARRAY
71678: PPUSH
71679: LD_VAR 0 2
71683: PPUSH
71684: CALL_OW 3
71688: PPUSH
71689: CALL_OW 1
71693: ST_TO_ADDR
// end ; end ;
71694: GO 71338
71696: POP
71697: POP
// end ;
71698: GO 71209
71700: POP
71701: POP
// end ;
71702: PPOPN 4
71704: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
71705: LD_INT 0
71707: PPUSH
71708: PPUSH
71709: PPUSH
71710: PPUSH
// result := false ;
71711: LD_ADDR_VAR 0 4
71715: PUSH
71716: LD_INT 0
71718: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 264
71728: PUSH
71729: LD_INT 81
71731: EQUAL
71732: NOT
71733: IFFALSE 71737
// exit ;
71735: GO 72107
// side := GetSide ( unit ) ;
71737: LD_ADDR_VAR 0 6
71741: PUSH
71742: LD_VAR 0 1
71746: PPUSH
71747: CALL_OW 255
71751: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
71752: LD_ADDR_VAR 0 5
71756: PUSH
71757: LD_EXP 89
71761: PPUSH
71762: LD_VAR 0 1
71766: PPUSH
71767: CALL 28768 0 2
71771: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71772: LD_EXP 90
71776: PUSH
71777: LD_VAR 0 5
71781: ARRAY
71782: PUSH
71783: LD_EXP 91
71787: GREATEREQUAL
71788: IFFALSE 71792
// exit ;
71790: GO 72107
// ComMoveXY ( unit , x , y ) ;
71792: LD_VAR 0 1
71796: PPUSH
71797: LD_VAR 0 2
71801: PPUSH
71802: LD_VAR 0 3
71806: PPUSH
71807: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71811: LD_INT 35
71813: PPUSH
71814: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71818: LD_VAR 0 1
71822: PPUSH
71823: LD_VAR 0 2
71827: PPUSH
71828: LD_VAR 0 3
71832: PPUSH
71833: CALL 60824 0 3
71837: NOT
71838: IFFALSE 71851
71840: PUSH
71841: LD_VAR 0 1
71845: PPUSH
71846: CALL_OW 314
71850: AND
71851: IFFALSE 71855
// exit ;
71853: GO 72107
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71855: LD_VAR 0 2
71859: PPUSH
71860: LD_VAR 0 3
71864: PPUSH
71865: CALL_OW 428
71869: PUSH
71870: LD_VAR 0 1
71874: EQUAL
71875: IFFALSE 71889
71877: PUSH
71878: LD_VAR 0 1
71882: PPUSH
71883: CALL_OW 314
71887: NOT
71888: AND
71889: IFFALSE 71811
// if MineAtPos ( x , y ) then
71891: LD_VAR 0 2
71895: PPUSH
71896: LD_VAR 0 3
71900: PPUSH
71901: CALL_OW 458
71905: IFFALSE 71909
// exit ;
71907: GO 72107
// if your_side = side then
71909: LD_OWVAR 2
71913: PUSH
71914: LD_VAR 0 6
71918: EQUAL
71919: IFFALSE 71938
// PlaySoundXY ( x , y , PlantMine ) ;
71921: LD_VAR 0 2
71925: PPUSH
71926: LD_VAR 0 3
71930: PPUSH
71931: LD_STRING PlantMine
71933: PPUSH
71934: CALL_OW 366
// repeat wait ( 1 ) ;
71938: LD_INT 1
71940: PPUSH
71941: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
71945: LD_VAR 0 2
71949: PPUSH
71950: LD_VAR 0 3
71954: PPUSH
71955: LD_VAR 0 6
71959: PPUSH
71960: LD_INT 0
71962: PPUSH
71963: CALL_OW 454
71967: IFFALSE 71938
// if MineAtPos ( x , y ) then
71969: LD_VAR 0 2
71973: PPUSH
71974: LD_VAR 0 3
71978: PPUSH
71979: CALL_OW 458
71983: IFFALSE 72099
// begin for i in minerMinesList [ index ] do
71985: LD_ADDR_VAR 0 7
71989: PUSH
71990: LD_EXP 90
71994: PUSH
71995: LD_VAR 0 5
71999: ARRAY
72000: PUSH
72001: FOR_IN
72002: IFFALSE 72044
// if i [ 1 ] = x and i [ 2 ] = y then
72004: LD_VAR 0 7
72008: PUSH
72009: LD_INT 1
72011: ARRAY
72012: PUSH
72013: LD_VAR 0 2
72017: EQUAL
72018: IFFALSE 72036
72020: PUSH
72021: LD_VAR 0 7
72025: PUSH
72026: LD_INT 2
72028: ARRAY
72029: PUSH
72030: LD_VAR 0 3
72034: EQUAL
72035: AND
72036: IFFALSE 72042
// exit ;
72038: POP
72039: POP
72040: GO 72107
72042: GO 72001
72044: POP
72045: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
72046: LD_ADDR_EXP 90
72050: PUSH
72051: LD_EXP 90
72055: PPUSH
72056: LD_VAR 0 5
72060: PUSH
72061: LD_EXP 90
72065: PUSH
72066: LD_VAR 0 5
72070: ARRAY
72071: PUSH
72072: LD_INT 1
72074: PLUS
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PPUSH
72080: LD_VAR 0 2
72084: PUSH
72085: LD_VAR 0 3
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PPUSH
72094: CALL 28985 0 3
72098: ST_TO_ADDR
// end ; result := true ;
72099: LD_ADDR_VAR 0 4
72103: PUSH
72104: LD_INT 1
72106: ST_TO_ADDR
// end ;
72107: LD_VAR 0 4
72111: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
72112: LD_INT 0
72114: PPUSH
72115: PPUSH
72116: PPUSH
// if not unit in minersList then
72117: LD_VAR 0 1
72121: PUSH
72122: LD_EXP 89
72126: IN
72127: NOT
72128: IFFALSE 72132
// exit ;
72130: GO 72339
// index := GetElementIndex ( minersList , unit ) ;
72132: LD_ADDR_VAR 0 6
72136: PUSH
72137: LD_EXP 89
72141: PPUSH
72142: LD_VAR 0 1
72146: PPUSH
72147: CALL 28768 0 2
72151: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
72152: LD_ADDR_VAR 0 5
72156: PUSH
72157: DOUBLE
72158: LD_EXP 90
72162: PUSH
72163: LD_VAR 0 6
72167: ARRAY
72168: INC
72169: ST_TO_ADDR
72170: LD_INT 1
72172: PUSH
72173: FOR_DOWNTO
72174: IFFALSE 72337
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
72176: LD_EXP 90
72180: PUSH
72181: LD_VAR 0 6
72185: ARRAY
72186: PUSH
72187: LD_VAR 0 5
72191: ARRAY
72192: PUSH
72193: LD_INT 1
72195: ARRAY
72196: PPUSH
72197: LD_EXP 90
72201: PUSH
72202: LD_VAR 0 6
72206: ARRAY
72207: PUSH
72208: LD_VAR 0 5
72212: ARRAY
72213: PUSH
72214: LD_INT 2
72216: ARRAY
72217: PPUSH
72218: LD_VAR 0 2
72222: PPUSH
72223: LD_VAR 0 3
72227: PPUSH
72228: CALL_OW 298
72232: PUSH
72233: LD_INT 6
72235: LESS
72236: IFFALSE 72335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
72238: LD_EXP 90
72242: PUSH
72243: LD_VAR 0 6
72247: ARRAY
72248: PUSH
72249: LD_VAR 0 5
72253: ARRAY
72254: PUSH
72255: LD_INT 1
72257: ARRAY
72258: PPUSH
72259: LD_EXP 90
72263: PUSH
72264: LD_VAR 0 6
72268: ARRAY
72269: PUSH
72270: LD_VAR 0 5
72274: ARRAY
72275: PUSH
72276: LD_INT 2
72278: ARRAY
72279: PPUSH
72280: LD_VAR 0 1
72284: PPUSH
72285: CALL_OW 255
72289: PPUSH
72290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72294: LD_ADDR_EXP 90
72298: PUSH
72299: LD_EXP 90
72303: PPUSH
72304: LD_VAR 0 6
72308: PPUSH
72309: LD_EXP 90
72313: PUSH
72314: LD_VAR 0 6
72318: ARRAY
72319: PPUSH
72320: LD_VAR 0 5
72324: PPUSH
72325: CALL_OW 3
72329: PPUSH
72330: CALL_OW 1
72334: ST_TO_ADDR
// end ; end ;
72335: GO 72173
72337: POP
72338: POP
// end ;
72339: LD_VAR 0 4
72343: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72344: LD_INT 0
72346: PPUSH
72347: PPUSH
72348: PPUSH
72349: PPUSH
72350: PPUSH
72351: PPUSH
72352: PPUSH
72353: PPUSH
72354: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 264
72364: PUSH
72365: LD_INT 81
72367: EQUAL
72368: NOT
72369: IFTRUE 72384
72371: PUSH
72372: LD_VAR 0 1
72376: PUSH
72377: LD_EXP 89
72381: IN
72382: NOT
72383: OR
72384: IFFALSE 72388
// exit ;
72386: GO 72714
// index := GetElementIndex ( minersList , unit ) ;
72388: LD_ADDR_VAR 0 6
72392: PUSH
72393: LD_EXP 89
72397: PPUSH
72398: LD_VAR 0 1
72402: PPUSH
72403: CALL 28768 0 2
72407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72408: LD_ADDR_VAR 0 8
72412: PUSH
72413: LD_EXP 91
72417: PUSH
72418: LD_EXP 90
72422: PUSH
72423: LD_VAR 0 6
72427: ARRAY
72428: MINUS
72429: ST_TO_ADDR
// if not minesFreeAmount then
72430: LD_VAR 0 8
72434: NOT
72435: IFFALSE 72439
// exit ;
72437: GO 72714
// tmp := [ ] ;
72439: LD_ADDR_VAR 0 7
72443: PUSH
72444: EMPTY
72445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72446: LD_ADDR_VAR 0 5
72450: PUSH
72451: DOUBLE
72452: LD_INT 1
72454: DEC
72455: ST_TO_ADDR
72456: LD_VAR 0 8
72460: PUSH
72461: FOR_TO
72462: IFFALSE 72661
// begin _d := rand ( 0 , 5 ) ;
72464: LD_ADDR_VAR 0 11
72468: PUSH
72469: LD_INT 0
72471: PPUSH
72472: LD_INT 5
72474: PPUSH
72475: CALL_OW 12
72479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72480: LD_ADDR_VAR 0 12
72484: PUSH
72485: LD_INT 2
72487: PPUSH
72488: LD_INT 6
72490: PPUSH
72491: CALL_OW 12
72495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72496: LD_ADDR_VAR 0 9
72500: PUSH
72501: LD_VAR 0 2
72505: PPUSH
72506: LD_VAR 0 11
72510: PPUSH
72511: LD_VAR 0 12
72515: PPUSH
72516: CALL_OW 272
72520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72521: LD_ADDR_VAR 0 10
72525: PUSH
72526: LD_VAR 0 3
72530: PPUSH
72531: LD_VAR 0 11
72535: PPUSH
72536: LD_VAR 0 12
72540: PPUSH
72541: CALL_OW 273
72545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72546: LD_VAR 0 9
72550: PPUSH
72551: LD_VAR 0 10
72555: PPUSH
72556: CALL_OW 488
72560: IFFALSE 72584
72562: PUSH
72563: LD_VAR 0 9
72567: PUSH
72568: LD_VAR 0 10
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_VAR 0 7
72581: IN
72582: NOT
72583: AND
72584: IFFALSE 72603
72586: PUSH
72587: LD_VAR 0 9
72591: PPUSH
72592: LD_VAR 0 10
72596: PPUSH
72597: CALL_OW 458
72601: NOT
72602: AND
72603: IFFALSE 72645
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72605: LD_ADDR_VAR 0 7
72609: PUSH
72610: LD_VAR 0 7
72614: PPUSH
72615: LD_VAR 0 7
72619: PUSH
72620: LD_INT 1
72622: PLUS
72623: PPUSH
72624: LD_VAR 0 9
72628: PUSH
72629: LD_VAR 0 10
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PPUSH
72638: CALL_OW 1
72642: ST_TO_ADDR
72643: GO 72659
// i := i - 1 ;
72645: LD_ADDR_VAR 0 5
72649: PUSH
72650: LD_VAR 0 5
72654: PUSH
72655: LD_INT 1
72657: MINUS
72658: ST_TO_ADDR
// end ;
72659: GO 72461
72661: POP
72662: POP
// for i in tmp do
72663: LD_ADDR_VAR 0 5
72667: PUSH
72668: LD_VAR 0 7
72672: PUSH
72673: FOR_IN
72674: IFFALSE 72712
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72676: LD_VAR 0 1
72680: PPUSH
72681: LD_VAR 0 5
72685: PUSH
72686: LD_INT 1
72688: ARRAY
72689: PPUSH
72690: LD_VAR 0 5
72694: PUSH
72695: LD_INT 2
72697: ARRAY
72698: PPUSH
72699: CALL 71705 0 3
72703: NOT
72704: IFFALSE 72710
// exit ;
72706: POP
72707: POP
72708: GO 72714
72710: GO 72673
72712: POP
72713: POP
// end ;
72714: LD_VAR 0 4
72718: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72719: LD_INT 0
72721: PPUSH
72722: PPUSH
72723: PPUSH
72724: PPUSH
72725: PPUSH
72726: PPUSH
72727: PPUSH
72728: PPUSH
72729: PPUSH
// if GetClass ( unit ) <> class_sniper then
72730: LD_VAR 0 1
72734: PPUSH
72735: CALL_OW 257
72739: PUSH
72740: LD_INT 5
72742: NONEQUAL
72743: IFFALSE 72747
// exit ;
72745: GO 73217
// dist := 8 ;
72747: LD_ADDR_VAR 0 5
72751: PUSH
72752: LD_INT 8
72754: ST_TO_ADDR
// viewRange := 12 ;
72755: LD_ADDR_VAR 0 8
72759: PUSH
72760: LD_INT 12
72762: ST_TO_ADDR
// side := GetSide ( unit ) ;
72763: LD_ADDR_VAR 0 6
72767: PUSH
72768: LD_VAR 0 1
72772: PPUSH
72773: CALL_OW 255
72777: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72778: LD_INT 61
72780: PPUSH
72781: LD_VAR 0 6
72785: PPUSH
72786: CALL_OW 321
72790: PUSH
72791: LD_INT 2
72793: EQUAL
72794: IFFALSE 72804
// viewRange := 16 ;
72796: LD_ADDR_VAR 0 8
72800: PUSH
72801: LD_INT 16
72803: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72804: LD_VAR 0 1
72808: PPUSH
72809: LD_VAR 0 2
72813: PPUSH
72814: LD_VAR 0 3
72818: PPUSH
72819: CALL_OW 297
72823: PUSH
72824: LD_VAR 0 5
72828: GREATER
72829: IFFALSE 72908
// begin ComMoveXY ( unit , x , y ) ;
72831: LD_VAR 0 1
72835: PPUSH
72836: LD_VAR 0 2
72840: PPUSH
72841: LD_VAR 0 3
72845: PPUSH
72846: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72850: LD_INT 35
72852: PPUSH
72853: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72857: LD_VAR 0 1
72861: PPUSH
72862: LD_VAR 0 2
72866: PPUSH
72867: LD_VAR 0 3
72871: PPUSH
72872: CALL 60824 0 3
72876: NOT
72877: IFFALSE 72881
// exit ;
72879: GO 73217
// until GetDistUnitXY ( unit , x , y ) < dist ;
72881: LD_VAR 0 1
72885: PPUSH
72886: LD_VAR 0 2
72890: PPUSH
72891: LD_VAR 0 3
72895: PPUSH
72896: CALL_OW 297
72900: PUSH
72901: LD_VAR 0 5
72905: LESS
72906: IFFALSE 72850
// end ; ComTurnXY ( unit , x , y ) ;
72908: LD_VAR 0 1
72912: PPUSH
72913: LD_VAR 0 2
72917: PPUSH
72918: LD_VAR 0 3
72922: PPUSH
72923: CALL_OW 118
// repeat if Multiplayer then
72927: LD_OWVAR 4
72931: IFFALSE 72942
// wait ( 35 ) else
72933: LD_INT 35
72935: PPUSH
72936: CALL_OW 67
72940: GO 72949
// wait ( 5 ) ;
72942: LD_INT 5
72944: PPUSH
72945: CALL_OW 67
// _d := GetDir ( unit ) ;
72949: LD_ADDR_VAR 0 11
72953: PUSH
72954: LD_VAR 0 1
72958: PPUSH
72959: CALL_OW 254
72963: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72964: LD_ADDR_VAR 0 7
72968: PUSH
72969: LD_VAR 0 1
72973: PPUSH
72974: CALL_OW 250
72978: PPUSH
72979: LD_VAR 0 1
72983: PPUSH
72984: CALL_OW 251
72988: PPUSH
72989: LD_VAR 0 2
72993: PPUSH
72994: LD_VAR 0 3
72998: PPUSH
72999: CALL 63460 0 4
73003: ST_TO_ADDR
// until dir = _d ;
73004: LD_VAR 0 7
73008: PUSH
73009: LD_VAR 0 11
73013: EQUAL
73014: IFFALSE 72927
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
73016: LD_ADDR_VAR 0 9
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: CALL_OW 250
73030: PPUSH
73031: LD_VAR 0 7
73035: PPUSH
73036: LD_VAR 0 5
73040: PPUSH
73041: CALL_OW 272
73045: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
73046: LD_ADDR_VAR 0 10
73050: PUSH
73051: LD_VAR 0 1
73055: PPUSH
73056: CALL_OW 251
73060: PPUSH
73061: LD_VAR 0 7
73065: PPUSH
73066: LD_VAR 0 5
73070: PPUSH
73071: CALL_OW 273
73075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73076: LD_VAR 0 9
73080: PPUSH
73081: LD_VAR 0 10
73085: PPUSH
73086: CALL_OW 488
73090: NOT
73091: IFFALSE 73095
// exit ;
73093: GO 73217
// ComAnimCustom ( unit , 1 ) ;
73095: LD_VAR 0 1
73099: PPUSH
73100: LD_INT 1
73102: PPUSH
73103: CALL_OW 592
// p := 0 ;
73107: LD_ADDR_VAR 0 12
73111: PUSH
73112: LD_INT 0
73114: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
73115: LD_VAR 0 9
73119: PPUSH
73120: LD_VAR 0 10
73124: PPUSH
73125: LD_VAR 0 6
73129: PPUSH
73130: LD_VAR 0 8
73134: PPUSH
73135: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
73139: LD_INT 35
73141: PPUSH
73142: CALL_OW 67
// p := Inc ( p ) ;
73146: LD_ADDR_VAR 0 12
73150: PUSH
73151: LD_VAR 0 12
73155: PPUSH
73156: CALL 63416 0 1
73160: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
73161: LD_VAR 0 12
73165: PUSH
73166: LD_INT 3
73168: EQUAL
73169: IFTRUE 73183
73171: PUSH
73172: LD_VAR 0 1
73176: PPUSH
73177: CALL_OW 302
73181: NOT
73182: OR
73183: IFTRUE 73196
73185: PUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: CALL_OW 301
73195: OR
73196: IFFALSE 73139
// RemoveSeeing ( _x , _y , side ) ;
73198: LD_VAR 0 9
73202: PPUSH
73203: LD_VAR 0 10
73207: PPUSH
73208: LD_VAR 0 6
73212: PPUSH
73213: CALL_OW 331
// end ;
73217: LD_VAR 0 4
73221: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
73222: LD_INT 0
73224: PPUSH
73225: PPUSH
73226: PPUSH
73227: PPUSH
73228: PPUSH
73229: PPUSH
73230: PPUSH
73231: PPUSH
73232: PPUSH
73233: PPUSH
73234: PPUSH
// if not unit then
73235: LD_VAR 0 1
73239: NOT
73240: IFFALSE 73244
// exit ;
73242: GO 73515
// side := GetSide ( unit ) ;
73244: LD_ADDR_VAR 0 3
73248: PUSH
73249: LD_VAR 0 1
73253: PPUSH
73254: CALL_OW 255
73258: ST_TO_ADDR
// x := GetX ( unit ) ;
73259: LD_ADDR_VAR 0 5
73263: PUSH
73264: LD_VAR 0 1
73268: PPUSH
73269: CALL_OW 250
73273: ST_TO_ADDR
// y := GetY ( unit ) ;
73274: LD_ADDR_VAR 0 6
73278: PUSH
73279: LD_VAR 0 1
73283: PPUSH
73284: CALL_OW 251
73288: ST_TO_ADDR
// r := 8 ;
73289: LD_ADDR_VAR 0 4
73293: PUSH
73294: LD_INT 8
73296: ST_TO_ADDR
// if x - r < 0 then
73297: LD_VAR 0 5
73301: PUSH
73302: LD_VAR 0 4
73306: MINUS
73307: PUSH
73308: LD_INT 0
73310: LESS
73311: IFFALSE 73323
// min_x := 0 else
73313: LD_ADDR_VAR 0 7
73317: PUSH
73318: LD_INT 0
73320: ST_TO_ADDR
73321: GO 73339
// min_x := x - r ;
73323: LD_ADDR_VAR 0 7
73327: PUSH
73328: LD_VAR 0 5
73332: PUSH
73333: LD_VAR 0 4
73337: MINUS
73338: ST_TO_ADDR
// if y - r < 0 then
73339: LD_VAR 0 6
73343: PUSH
73344: LD_VAR 0 4
73348: MINUS
73349: PUSH
73350: LD_INT 0
73352: LESS
73353: IFFALSE 73365
// min_y := 0 else
73355: LD_ADDR_VAR 0 8
73359: PUSH
73360: LD_INT 0
73362: ST_TO_ADDR
73363: GO 73381
// min_y := y - r ;
73365: LD_ADDR_VAR 0 8
73369: PUSH
73370: LD_VAR 0 6
73374: PUSH
73375: LD_VAR 0 4
73379: MINUS
73380: ST_TO_ADDR
// max_x := x + r ;
73381: LD_ADDR_VAR 0 9
73385: PUSH
73386: LD_VAR 0 5
73390: PUSH
73391: LD_VAR 0 4
73395: PLUS
73396: ST_TO_ADDR
// max_y := y + r ;
73397: LD_ADDR_VAR 0 10
73401: PUSH
73402: LD_VAR 0 6
73406: PUSH
73407: LD_VAR 0 4
73411: PLUS
73412: ST_TO_ADDR
// for _x = min_x to max_x do
73413: LD_ADDR_VAR 0 11
73417: PUSH
73418: DOUBLE
73419: LD_VAR 0 7
73423: DEC
73424: ST_TO_ADDR
73425: LD_VAR 0 9
73429: PUSH
73430: FOR_TO
73431: IFFALSE 73513
// for _y = min_y to max_y do
73433: LD_ADDR_VAR 0 12
73437: PUSH
73438: DOUBLE
73439: LD_VAR 0 8
73443: DEC
73444: ST_TO_ADDR
73445: LD_VAR 0 10
73449: PUSH
73450: FOR_TO
73451: IFFALSE 73509
// begin if not ValidHex ( _x , _y ) then
73453: LD_VAR 0 11
73457: PPUSH
73458: LD_VAR 0 12
73462: PPUSH
73463: CALL_OW 488
73467: NOT
73468: IFFALSE 73472
// continue ;
73470: GO 73450
// if MineAtPos ( _x , _y ) then
73472: LD_VAR 0 11
73476: PPUSH
73477: LD_VAR 0 12
73481: PPUSH
73482: CALL_OW 458
73486: IFFALSE 73507
// ViewMineAtPos ( _x , _y , side ) ;
73488: LD_VAR 0 11
73492: PPUSH
73493: LD_VAR 0 12
73497: PPUSH
73498: LD_VAR 0 3
73502: PPUSH
73503: CALL_OW 457
// end ;
73507: GO 73450
73509: POP
73510: POP
73511: GO 73430
73513: POP
73514: POP
// end ;
73515: LD_VAR 0 2
73519: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
73520: LD_INT 0
73522: PPUSH
73523: PPUSH
73524: PPUSH
73525: PPUSH
73526: PPUSH
73527: PPUSH
73528: PPUSH
// if not units then
73529: LD_VAR 0 1
73533: NOT
73534: IFFALSE 73538
// exit ;
73536: GO 74002
// scaners := [ ] ;
73538: LD_ADDR_VAR 0 6
73542: PUSH
73543: EMPTY
73544: ST_TO_ADDR
// for i in units do
73545: LD_ADDR_VAR 0 3
73549: PUSH
73550: LD_VAR 0 1
73554: PUSH
73555: FOR_IN
73556: IFFALSE 73713
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
73558: LD_VAR 0 3
73562: PPUSH
73563: CALL_OW 264
73567: PUSH
73568: LD_INT 11
73570: NONEQUAL
73571: IFTRUE 73585
73573: PUSH
73574: LD_VAR 0 3
73578: PPUSH
73579: CALL_OW 302
73583: NOT
73584: OR
73585: IFTRUE 73602
73587: PUSH
73588: LD_VAR 0 3
73592: PPUSH
73593: CALL_OW 110
73597: PUSH
73598: LD_INT 502
73600: EQUAL
73601: OR
73602: IFFALSE 73606
// continue ;
73604: GO 73555
// ComStop ( i ) ;
73606: LD_VAR 0 3
73610: PPUSH
73611: CALL_OW 141
// x := GetX ( i ) ;
73615: LD_ADDR_VAR 0 4
73619: PUSH
73620: LD_VAR 0 3
73624: PPUSH
73625: CALL_OW 250
73629: ST_TO_ADDR
// y := GetY ( i ) ;
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: LD_VAR 0 3
73639: PPUSH
73640: CALL_OW 251
73644: ST_TO_ADDR
// if GetSide ( i ) = your_side then
73645: LD_VAR 0 3
73649: PPUSH
73650: CALL_OW 255
73654: PUSH
73655: LD_OWVAR 2
73659: EQUAL
73660: IFFALSE 73679
// PlaySoundXY ( x , y , mineDetector ) ;
73662: LD_VAR 0 4
73666: PPUSH
73667: LD_VAR 0 5
73671: PPUSH
73672: LD_STRING mineDetector
73674: PPUSH
73675: CALL_OW 366
// scaners := Join ( scaners , i ) ;
73679: LD_ADDR_VAR 0 6
73683: PUSH
73684: LD_VAR 0 6
73688: PPUSH
73689: LD_VAR 0 3
73693: PPUSH
73694: CALL 62043 0 2
73698: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
73699: LD_VAR 0 3
73703: PPUSH
73704: LD_INT 502
73706: PPUSH
73707: CALL_OW 109
// end ;
73711: GO 73555
73713: POP
73714: POP
// if not scaners then
73715: LD_VAR 0 6
73719: NOT
73720: IFFALSE 73724
// exit ;
73722: GO 74002
// wait ( 3 ) ;
73724: LD_INT 3
73726: PPUSH
73727: CALL_OW 67
// timer := 6 ;
73731: LD_ADDR_VAR 0 7
73735: PUSH
73736: LD_INT 6
73738: ST_TO_ADDR
// repeat for i in scaners do
73739: LD_ADDR_VAR 0 3
73743: PUSH
73744: LD_VAR 0 6
73748: PUSH
73749: FOR_IN
73750: IFFALSE 73900
// begin side := GetSide ( i ) ;
73752: LD_ADDR_VAR 0 8
73756: PUSH
73757: LD_VAR 0 3
73761: PPUSH
73762: CALL_OW 255
73766: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
73767: LD_VAR 0 3
73771: PPUSH
73772: CALL_OW 302
73776: NOT
73777: IFTRUE 73790
73779: PUSH
73780: LD_VAR 0 3
73784: PPUSH
73785: CALL_OW 314
73789: OR
73790: IFTRUE 73821
73792: PUSH
73793: LD_VAR 0 3
73797: PPUSH
73798: CALL_OW 263
73802: PUSH
73803: LD_INT 1
73805: EQUAL
73806: IFFALSE 73820
73808: PUSH
73809: LD_VAR 0 3
73813: PPUSH
73814: CALL_OW 311
73818: NOT
73819: AND
73820: OR
73821: IFFALSE 73865
// begin SetUnitDisplayNumber ( i , 0 ) ;
73823: LD_VAR 0 3
73827: PPUSH
73828: LD_INT 0
73830: PPUSH
73831: CALL_OW 505
// SetTag ( i , 0 ) ;
73835: LD_VAR 0 3
73839: PPUSH
73840: LD_INT 0
73842: PPUSH
73843: CALL_OW 109
// scaners := scaners diff i ;
73847: LD_ADDR_VAR 0 6
73851: PUSH
73852: LD_VAR 0 6
73856: PUSH
73857: LD_VAR 0 3
73861: DIFF
73862: ST_TO_ADDR
// continue ;
73863: GO 73749
// end ; if side in [ your_side , 9 ] then
73865: LD_VAR 0 8
73869: PUSH
73870: LD_OWVAR 2
73874: PUSH
73875: LD_INT 9
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: IN
73882: IFFALSE 73898
// SetUnitDisplayNumber ( i , timer ) ;
73884: LD_VAR 0 3
73888: PPUSH
73889: LD_VAR 0 7
73893: PPUSH
73894: CALL_OW 505
// end ;
73898: GO 73749
73900: POP
73901: POP
// if not scaners then
73902: LD_VAR 0 6
73906: NOT
73907: IFFALSE 73911
// exit ;
73909: GO 74002
// timer := Dec ( timer ) ;
73911: LD_ADDR_VAR 0 7
73915: PUSH
73916: LD_VAR 0 7
73920: PPUSH
73921: CALL 63438 0 1
73925: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73926: LD_INT 35
73928: PPUSH
73929: CALL_OW 67
// until timer = 0 ;
73933: LD_VAR 0 7
73937: PUSH
73938: LD_INT 0
73940: EQUAL
73941: IFFALSE 73739
// if not scaners then
73943: LD_VAR 0 6
73947: NOT
73948: IFFALSE 73952
// exit ;
73950: GO 74002
// for i in scaners do
73952: LD_ADDR_VAR 0 3
73956: PUSH
73957: LD_VAR 0 6
73961: PUSH
73962: FOR_IN
73963: IFFALSE 74000
// begin SetUnitDisplayNumber ( i , 0 ) ;
73965: LD_VAR 0 3
73969: PPUSH
73970: LD_INT 0
73972: PPUSH
73973: CALL_OW 505
// SetTag ( i , 0 ) ;
73977: LD_VAR 0 3
73981: PPUSH
73982: LD_INT 0
73984: PPUSH
73985: CALL_OW 109
// RevealDetectorMine ( i ) ;
73989: LD_VAR 0 3
73993: PPUSH
73994: CALL 73222 0 1
// end ;
73998: GO 73962
74000: POP
74001: POP
// end ;
74002: LD_VAR 0 2
74006: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
74007: LD_INT 0
74009: PPUSH
// if p1 = mine_detector_mode then
74010: LD_VAR 0 2
74014: PUSH
74015: LD_INT 103
74017: EQUAL
74018: IFFALSE 74029
// DetectMine ( units ) ;
74020: LD_VAR 0 1
74024: PPUSH
74025: CALL 73520 0 1
// end ; end_of_file
74029: LD_VAR 0 7
74033: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74034: LD_VAR 0 1
74038: PPUSH
74039: LD_VAR 0 2
74043: PPUSH
74044: LD_VAR 0 3
74048: PPUSH
74049: LD_VAR 0 4
74053: PPUSH
74054: LD_VAR 0 5
74058: PPUSH
74059: LD_VAR 0 6
74063: PPUSH
74064: CALL 7936 0 6
// end ;
74068: PPOPN 6
74070: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74071: LD_INT 0
74073: PPUSH
// begin if not units then
74074: LD_VAR 0 1
74078: NOT
74079: IFFALSE 74083
// exit ;
74081: GO 74117
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
74083: LD_VAR 0 1
74087: PPUSH
74088: LD_VAR 0 2
74092: PPUSH
74093: LD_VAR 0 3
74097: PPUSH
74098: LD_VAR 0 4
74102: PPUSH
74103: LD_VAR 0 5
74107: PPUSH
74108: LD_VAR 0 6
74112: PPUSH
74113: CALL 74007 0 6
// end ;
74117: PPOPN 7
74119: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74120: CALL 7816 0 0
// end ;
74124: PPOPN 1
74126: END
