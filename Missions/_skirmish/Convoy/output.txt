// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7714: LD_INT 0
7716: PPUSH
// if p2 = 100 then
7717: LD_VAR 0 2
7721: PUSH
7722: LD_INT 100
7724: EQUAL
7725: IFFALSE 8674
// begin if not StreamModeActive then
7727: LD_EXP 19
7731: NOT
7732: IFFALSE 7742
// StreamModeActive := true ;
7734: LD_ADDR_EXP 19
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// if p3 = 0 then
7742: LD_VAR 0 3
7746: PUSH
7747: LD_INT 0
7749: EQUAL
7750: IFFALSE 7756
// InitStreamMode ;
7752: CALL 8834 0 0
// if p3 = 1 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 1
7763: EQUAL
7764: IFFALSE 7774
// sRocket := true ;
7766: LD_ADDR_EXP 24
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 2 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 2
7781: EQUAL
7782: IFFALSE 7792
// sSpeed := true ;
7784: LD_ADDR_EXP 23
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 3 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: IFFALSE 7810
// sEngine := true ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 4 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 4
7817: EQUAL
7818: IFFALSE 7828
// sSpec := true ;
7820: LD_ADDR_EXP 22
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 5 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 5
7835: EQUAL
7836: IFFALSE 7846
// sLevel := true ;
7838: LD_ADDR_EXP 26
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 6 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 6
7853: EQUAL
7854: IFFALSE 7864
// sArmoury := true ;
7856: LD_ADDR_EXP 27
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 7 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 7
7871: EQUAL
7872: IFFALSE 7882
// sRadar := true ;
7874: LD_ADDR_EXP 28
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 8 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 8
7889: EQUAL
7890: IFFALSE 7900
// sBunker := true ;
7892: LD_ADDR_EXP 29
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 9 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 9
7907: EQUAL
7908: IFFALSE 7918
// sHack := true ;
7910: LD_ADDR_EXP 30
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 10 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 10
7925: EQUAL
7926: IFFALSE 7936
// sFire := true ;
7928: LD_ADDR_EXP 31
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 11 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 11
7943: EQUAL
7944: IFFALSE 7954
// sRefresh := true ;
7946: LD_ADDR_EXP 32
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 12 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 12
7961: EQUAL
7962: IFFALSE 7972
// sExp := true ;
7964: LD_ADDR_EXP 33
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 13 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 13
7979: EQUAL
7980: IFFALSE 7990
// sDepot := true ;
7982: LD_ADDR_EXP 34
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 14 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 14
7997: EQUAL
7998: IFFALSE 8008
// sFlag := true ;
8000: LD_ADDR_EXP 35
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 15 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 15
8015: EQUAL
8016: IFFALSE 8026
// sKamikadze := true ;
8018: LD_ADDR_EXP 43
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 16 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 16
8033: EQUAL
8034: IFFALSE 8044
// sTroll := true ;
8036: LD_ADDR_EXP 44
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 17 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 17
8051: EQUAL
8052: IFFALSE 8062
// sSlow := true ;
8054: LD_ADDR_EXP 45
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 18 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 18
8069: EQUAL
8070: IFFALSE 8080
// sLack := true ;
8072: LD_ADDR_EXP 46
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 19 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 19
8087: EQUAL
8088: IFFALSE 8098
// sTank := true ;
8090: LD_ADDR_EXP 48
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 20 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 20
8105: EQUAL
8106: IFFALSE 8116
// sRemote := true ;
8108: LD_ADDR_EXP 49
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 21 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 21
8123: EQUAL
8124: IFFALSE 8134
// sPowell := true ;
8126: LD_ADDR_EXP 50
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 22 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 22
8141: EQUAL
8142: IFFALSE 8152
// sTeleport := true ;
8144: LD_ADDR_EXP 53
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 23 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 23
8159: EQUAL
8160: IFFALSE 8170
// sOilTower := true ;
8162: LD_ADDR_EXP 55
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 24 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 24
8177: EQUAL
8178: IFFALSE 8188
// sShovel := true ;
8180: LD_ADDR_EXP 56
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 25 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 25
8195: EQUAL
8196: IFFALSE 8206
// sSheik := true ;
8198: LD_ADDR_EXP 57
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 26 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 26
8213: EQUAL
8214: IFFALSE 8224
// sEarthquake := true ;
8216: LD_ADDR_EXP 59
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 27 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 27
8231: EQUAL
8232: IFFALSE 8242
// sAI := true ;
8234: LD_ADDR_EXP 60
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 28 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 28
8249: EQUAL
8250: IFFALSE 8260
// sCargo := true ;
8252: LD_ADDR_EXP 63
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 29 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 29
8267: EQUAL
8268: IFFALSE 8278
// sDLaser := true ;
8270: LD_ADDR_EXP 64
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 30 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 30
8285: EQUAL
8286: IFFALSE 8296
// sExchange := true ;
8288: LD_ADDR_EXP 65
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 31 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 31
8303: EQUAL
8304: IFFALSE 8314
// sFac := true ;
8306: LD_ADDR_EXP 66
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 32 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 32
8321: EQUAL
8322: IFFALSE 8332
// sPower := true ;
8324: LD_ADDR_EXP 67
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 33 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 33
8339: EQUAL
8340: IFFALSE 8350
// sRandom := true ;
8342: LD_ADDR_EXP 68
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 34 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 34
8357: EQUAL
8358: IFFALSE 8368
// sShield := true ;
8360: LD_ADDR_EXP 69
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 35 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 35
8375: EQUAL
8376: IFFALSE 8386
// sTime := true ;
8378: LD_ADDR_EXP 70
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 36 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 36
8393: EQUAL
8394: IFFALSE 8404
// sTools := true ;
8396: LD_ADDR_EXP 71
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 101 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 101
8411: EQUAL
8412: IFFALSE 8422
// sSold := true ;
8414: LD_ADDR_EXP 36
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 102 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 102
8429: EQUAL
8430: IFFALSE 8440
// sDiff := true ;
8432: LD_ADDR_EXP 37
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 103 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 103
8447: EQUAL
8448: IFFALSE 8458
// sFog := true ;
8450: LD_ADDR_EXP 40
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 104 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 104
8465: EQUAL
8466: IFFALSE 8476
// sReset := true ;
8468: LD_ADDR_EXP 41
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 105 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 105
8483: EQUAL
8484: IFFALSE 8494
// sSun := true ;
8486: LD_ADDR_EXP 42
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 106 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 106
8501: EQUAL
8502: IFFALSE 8512
// sTiger := true ;
8504: LD_ADDR_EXP 38
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 107 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 107
8519: EQUAL
8520: IFFALSE 8530
// sBomb := true ;
8522: LD_ADDR_EXP 39
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 108 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 108
8537: EQUAL
8538: IFFALSE 8548
// sWound := true ;
8540: LD_ADDR_EXP 47
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 109 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 109
8555: EQUAL
8556: IFFALSE 8566
// sBetray := true ;
8558: LD_ADDR_EXP 51
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 110 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 110
8573: EQUAL
8574: IFFALSE 8584
// sContamin := true ;
8576: LD_ADDR_EXP 52
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 111 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 111
8591: EQUAL
8592: IFFALSE 8602
// sOil := true ;
8594: LD_ADDR_EXP 54
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 112 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 112
8609: EQUAL
8610: IFFALSE 8620
// sStu := true ;
8612: LD_ADDR_EXP 58
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 113 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 113
8627: EQUAL
8628: IFFALSE 8638
// sBazooka := true ;
8630: LD_ADDR_EXP 61
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 114 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 114
8645: EQUAL
8646: IFFALSE 8656
// sMortar := true ;
8648: LD_ADDR_EXP 62
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 115 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 115
8663: EQUAL
8664: IFFALSE 8674
// sRanger := true ;
8666: LD_ADDR_EXP 72
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// end ; if p2 = 101 then
8674: LD_VAR 0 2
8678: PUSH
8679: LD_INT 101
8681: EQUAL
8682: IFFALSE 8810
// begin case p3 of 1 :
8684: LD_VAR 0 3
8688: PUSH
8689: LD_INT 1
8691: DOUBLE
8692: EQUAL
8693: IFTRUE 8697
8695: GO 8704
8697: POP
// hHackUnlimitedResources ; 2 :
8698: CALL 19847 0 0
8702: GO 8810
8704: LD_INT 2
8706: DOUBLE
8707: EQUAL
8708: IFTRUE 8712
8710: GO 8719
8712: POP
// hHackSetLevel10 ; 3 :
8713: CALL 19980 0 0
8717: GO 8810
8719: LD_INT 3
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8734
8727: POP
// hHackSetLevel10YourUnits ; 4 :
8728: CALL 20065 0 0
8732: GO 8810
8734: LD_INT 4
8736: DOUBLE
8737: EQUAL
8738: IFTRUE 8742
8740: GO 8749
8742: POP
// hHackInvincible ; 5 :
8743: CALL 20513 0 0
8747: GO 8810
8749: LD_INT 5
8751: DOUBLE
8752: EQUAL
8753: IFTRUE 8757
8755: GO 8764
8757: POP
// hHackInvisible ; 6 :
8758: CALL 20624 0 0
8762: GO 8810
8764: LD_INT 6
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 8779
8772: POP
// hHackChangeYourSide ; 7 :
8773: CALL 20681 0 0
8777: GO 8810
8779: LD_INT 7
8781: DOUBLE
8782: EQUAL
8783: IFTRUE 8787
8785: GO 8794
8787: POP
// hHackChangeUnitSide ; 8 :
8788: CALL 20723 0 0
8792: GO 8810
8794: LD_INT 8
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8809
8802: POP
// hHackFog ; end ;
8803: CALL 20824 0 0
8807: GO 8810
8809: POP
// end ; end ;
8810: LD_VAR 0 7
8814: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8815: GO 8817
8817: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8818: LD_STRING initStreamRollete();
8820: PPUSH
8821: CALL_OW 559
// InitStreamMode ;
8825: CALL 8834 0 0
// DefineStreamItems ( ) ;
8829: CALL 9274 0 0
// end ;
8833: END
// function InitStreamMode ; begin
8834: LD_INT 0
8836: PPUSH
// streamModeActive := false ;
8837: LD_ADDR_EXP 19
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// normalCounter := 36 ;
8845: LD_ADDR_EXP 20
8849: PUSH
8850: LD_INT 36
8852: ST_TO_ADDR
// hardcoreCounter := 16 ;
8853: LD_ADDR_EXP 21
8857: PUSH
8858: LD_INT 16
8860: ST_TO_ADDR
// sRocket := false ;
8861: LD_ADDR_EXP 24
8865: PUSH
8866: LD_INT 0
8868: ST_TO_ADDR
// sSpeed := false ;
8869: LD_ADDR_EXP 23
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// sEngine := false ;
8877: LD_ADDR_EXP 25
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// sSpec := false ;
8885: LD_ADDR_EXP 22
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// sLevel := false ;
8893: LD_ADDR_EXP 26
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// sArmoury := false ;
8901: LD_ADDR_EXP 27
8905: PUSH
8906: LD_INT 0
8908: ST_TO_ADDR
// sRadar := false ;
8909: LD_ADDR_EXP 28
8913: PUSH
8914: LD_INT 0
8916: ST_TO_ADDR
// sBunker := false ;
8917: LD_ADDR_EXP 29
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// sHack := false ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// sFire := false ;
8933: LD_ADDR_EXP 31
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// sRefresh := false ;
8941: LD_ADDR_EXP 32
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// sExp := false ;
8949: LD_ADDR_EXP 33
8953: PUSH
8954: LD_INT 0
8956: ST_TO_ADDR
// sDepot := false ;
8957: LD_ADDR_EXP 34
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// sFlag := false ;
8965: LD_ADDR_EXP 35
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// sKamikadze := false ;
8973: LD_ADDR_EXP 43
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// sTroll := false ;
8981: LD_ADDR_EXP 44
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// sSlow := false ;
8989: LD_ADDR_EXP 45
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// sLack := false ;
8997: LD_ADDR_EXP 46
9001: PUSH
9002: LD_INT 0
9004: ST_TO_ADDR
// sTank := false ;
9005: LD_ADDR_EXP 48
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// sRemote := false ;
9013: LD_ADDR_EXP 49
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// sPowell := false ;
9021: LD_ADDR_EXP 50
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// sTeleport := false ;
9029: LD_ADDR_EXP 53
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// sOilTower := false ;
9037: LD_ADDR_EXP 55
9041: PUSH
9042: LD_INT 0
9044: ST_TO_ADDR
// sShovel := false ;
9045: LD_ADDR_EXP 56
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// sSheik := false ;
9053: LD_ADDR_EXP 57
9057: PUSH
9058: LD_INT 0
9060: ST_TO_ADDR
// sEarthquake := false ;
9061: LD_ADDR_EXP 59
9065: PUSH
9066: LD_INT 0
9068: ST_TO_ADDR
// sAI := false ;
9069: LD_ADDR_EXP 60
9073: PUSH
9074: LD_INT 0
9076: ST_TO_ADDR
// sCargo := false ;
9077: LD_ADDR_EXP 63
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// sDLaser := false ;
9085: LD_ADDR_EXP 64
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// sExchange := false ;
9093: LD_ADDR_EXP 65
9097: PUSH
9098: LD_INT 0
9100: ST_TO_ADDR
// sFac := false ;
9101: LD_ADDR_EXP 66
9105: PUSH
9106: LD_INT 0
9108: ST_TO_ADDR
// sPower := false ;
9109: LD_ADDR_EXP 67
9113: PUSH
9114: LD_INT 0
9116: ST_TO_ADDR
// sRandom := false ;
9117: LD_ADDR_EXP 68
9121: PUSH
9122: LD_INT 0
9124: ST_TO_ADDR
// sShield := false ;
9125: LD_ADDR_EXP 69
9129: PUSH
9130: LD_INT 0
9132: ST_TO_ADDR
// sTime := false ;
9133: LD_ADDR_EXP 70
9137: PUSH
9138: LD_INT 0
9140: ST_TO_ADDR
// sTools := false ;
9141: LD_ADDR_EXP 71
9145: PUSH
9146: LD_INT 0
9148: ST_TO_ADDR
// sSold := false ;
9149: LD_ADDR_EXP 36
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// sDiff := false ;
9157: LD_ADDR_EXP 37
9161: PUSH
9162: LD_INT 0
9164: ST_TO_ADDR
// sFog := false ;
9165: LD_ADDR_EXP 40
9169: PUSH
9170: LD_INT 0
9172: ST_TO_ADDR
// sReset := false ;
9173: LD_ADDR_EXP 41
9177: PUSH
9178: LD_INT 0
9180: ST_TO_ADDR
// sSun := false ;
9181: LD_ADDR_EXP 42
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// sTiger := false ;
9189: LD_ADDR_EXP 38
9193: PUSH
9194: LD_INT 0
9196: ST_TO_ADDR
// sBomb := false ;
9197: LD_ADDR_EXP 39
9201: PUSH
9202: LD_INT 0
9204: ST_TO_ADDR
// sWound := false ;
9205: LD_ADDR_EXP 47
9209: PUSH
9210: LD_INT 0
9212: ST_TO_ADDR
// sBetray := false ;
9213: LD_ADDR_EXP 51
9217: PUSH
9218: LD_INT 0
9220: ST_TO_ADDR
// sContamin := false ;
9221: LD_ADDR_EXP 52
9225: PUSH
9226: LD_INT 0
9228: ST_TO_ADDR
// sOil := false ;
9229: LD_ADDR_EXP 54
9233: PUSH
9234: LD_INT 0
9236: ST_TO_ADDR
// sStu := false ;
9237: LD_ADDR_EXP 58
9241: PUSH
9242: LD_INT 0
9244: ST_TO_ADDR
// sBazooka := false ;
9245: LD_ADDR_EXP 61
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// sMortar := false ;
9253: LD_ADDR_EXP 62
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// sRanger := false ;
9261: LD_ADDR_EXP 72
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// end ;
9269: LD_VAR 0 1
9273: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9274: LD_INT 0
9276: PPUSH
9277: PPUSH
9278: PPUSH
9279: PPUSH
9280: PPUSH
// result := [ ] ;
9281: LD_ADDR_VAR 0 1
9285: PUSH
9286: EMPTY
9287: ST_TO_ADDR
// if campaign_id = 1 then
9288: LD_OWVAR 69
9292: PUSH
9293: LD_INT 1
9295: EQUAL
9296: IFFALSE 12234
// begin case mission_number of 1 :
9298: LD_OWVAR 70
9302: PUSH
9303: LD_INT 1
9305: DOUBLE
9306: EQUAL
9307: IFTRUE 9311
9309: GO 9375
9311: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: LD_INT 4
9322: PUSH
9323: LD_INT 11
9325: PUSH
9326: LD_INT 12
9328: PUSH
9329: LD_INT 15
9331: PUSH
9332: LD_INT 16
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_INT 23
9340: PUSH
9341: LD_INT 26
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 101
9357: PUSH
9358: LD_INT 102
9360: PUSH
9361: LD_INT 106
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: ST_TO_ADDR
9373: GO 12232
9375: LD_INT 2
9377: DOUBLE
9378: EQUAL
9379: IFTRUE 9383
9381: GO 9455
9383: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 4
9394: PUSH
9395: LD_INT 11
9397: PUSH
9398: LD_INT 12
9400: PUSH
9401: LD_INT 15
9403: PUSH
9404: LD_INT 16
9406: PUSH
9407: LD_INT 22
9409: PUSH
9410: LD_INT 23
9412: PUSH
9413: LD_INT 26
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 101
9429: PUSH
9430: LD_INT 102
9432: PUSH
9433: LD_INT 105
9435: PUSH
9436: LD_INT 106
9438: PUSH
9439: LD_INT 108
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: ST_TO_ADDR
9453: GO 12232
9455: LD_INT 3
9457: DOUBLE
9458: EQUAL
9459: IFTRUE 9463
9461: GO 9539
9463: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9464: LD_ADDR_VAR 0 1
9468: PUSH
9469: LD_INT 2
9471: PUSH
9472: LD_INT 4
9474: PUSH
9475: LD_INT 5
9477: PUSH
9478: LD_INT 11
9480: PUSH
9481: LD_INT 12
9483: PUSH
9484: LD_INT 15
9486: PUSH
9487: LD_INT 16
9489: PUSH
9490: LD_INT 22
9492: PUSH
9493: LD_INT 26
9495: PUSH
9496: LD_INT 36
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 101
9513: PUSH
9514: LD_INT 102
9516: PUSH
9517: LD_INT 105
9519: PUSH
9520: LD_INT 106
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: ST_TO_ADDR
9537: GO 12232
9539: LD_INT 4
9541: DOUBLE
9542: EQUAL
9543: IFTRUE 9547
9545: GO 9631
9547: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_INT 2
9555: PUSH
9556: LD_INT 4
9558: PUSH
9559: LD_INT 5
9561: PUSH
9562: LD_INT 8
9564: PUSH
9565: LD_INT 11
9567: PUSH
9568: LD_INT 12
9570: PUSH
9571: LD_INT 15
9573: PUSH
9574: LD_INT 16
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 23
9582: PUSH
9583: LD_INT 26
9585: PUSH
9586: LD_INT 36
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 101
9605: PUSH
9606: LD_INT 102
9608: PUSH
9609: LD_INT 105
9611: PUSH
9612: LD_INT 106
9614: PUSH
9615: LD_INT 108
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: ST_TO_ADDR
9629: GO 12232
9631: LD_INT 5
9633: DOUBLE
9634: EQUAL
9635: IFTRUE 9639
9637: GO 9739
9639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9640: LD_ADDR_VAR 0 1
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: LD_INT 4
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: LD_INT 6
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: LD_INT 11
9662: PUSH
9663: LD_INT 12
9665: PUSH
9666: LD_INT 15
9668: PUSH
9669: LD_INT 16
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_INT 23
9677: PUSH
9678: LD_INT 25
9680: PUSH
9681: LD_INT 26
9683: PUSH
9684: LD_INT 36
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 101
9705: PUSH
9706: LD_INT 102
9708: PUSH
9709: LD_INT 105
9711: PUSH
9712: LD_INT 106
9714: PUSH
9715: LD_INT 108
9717: PUSH
9718: LD_INT 109
9720: PUSH
9721: LD_INT 112
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: ST_TO_ADDR
9737: GO 12232
9739: LD_INT 6
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9867
9747: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9748: LD_ADDR_VAR 0 1
9752: PUSH
9753: LD_INT 2
9755: PUSH
9756: LD_INT 4
9758: PUSH
9759: LD_INT 5
9761: PUSH
9762: LD_INT 6
9764: PUSH
9765: LD_INT 8
9767: PUSH
9768: LD_INT 11
9770: PUSH
9771: LD_INT 12
9773: PUSH
9774: LD_INT 15
9776: PUSH
9777: LD_INT 16
9779: PUSH
9780: LD_INT 20
9782: PUSH
9783: LD_INT 21
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 23
9791: PUSH
9792: LD_INT 25
9794: PUSH
9795: LD_INT 26
9797: PUSH
9798: LD_INT 30
9800: PUSH
9801: LD_INT 31
9803: PUSH
9804: LD_INT 32
9806: PUSH
9807: LD_INT 36
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 101
9833: PUSH
9834: LD_INT 102
9836: PUSH
9837: LD_INT 105
9839: PUSH
9840: LD_INT 106
9842: PUSH
9843: LD_INT 108
9845: PUSH
9846: LD_INT 109
9848: PUSH
9849: LD_INT 112
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: ST_TO_ADDR
9865: GO 12232
9867: LD_INT 7
9869: DOUBLE
9870: EQUAL
9871: IFTRUE 9875
9873: GO 9975
9875: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9876: LD_ADDR_VAR 0 1
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: LD_INT 4
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: LD_INT 7
9892: PUSH
9893: LD_INT 11
9895: PUSH
9896: LD_INT 12
9898: PUSH
9899: LD_INT 15
9901: PUSH
9902: LD_INT 16
9904: PUSH
9905: LD_INT 20
9907: PUSH
9908: LD_INT 21
9910: PUSH
9911: LD_INT 22
9913: PUSH
9914: LD_INT 23
9916: PUSH
9917: LD_INT 25
9919: PUSH
9920: LD_INT 26
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 101
9941: PUSH
9942: LD_INT 102
9944: PUSH
9945: LD_INT 103
9947: PUSH
9948: LD_INT 105
9950: PUSH
9951: LD_INT 106
9953: PUSH
9954: LD_INT 108
9956: PUSH
9957: LD_INT 112
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: ST_TO_ADDR
9973: GO 12232
9975: LD_INT 8
9977: DOUBLE
9978: EQUAL
9979: IFTRUE 9983
9981: GO 10111
9983: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9984: LD_ADDR_VAR 0 1
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: LD_INT 4
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: LD_INT 6
10000: PUSH
10001: LD_INT 7
10003: PUSH
10004: LD_INT 8
10006: PUSH
10007: LD_INT 11
10009: PUSH
10010: LD_INT 12
10012: PUSH
10013: LD_INT 15
10015: PUSH
10016: LD_INT 16
10018: PUSH
10019: LD_INT 20
10021: PUSH
10022: LD_INT 21
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 23
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 26
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 31
10042: PUSH
10043: LD_INT 32
10045: PUSH
10046: LD_INT 36
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 101
10073: PUSH
10074: LD_INT 102
10076: PUSH
10077: LD_INT 103
10079: PUSH
10080: LD_INT 105
10082: PUSH
10083: LD_INT 106
10085: PUSH
10086: LD_INT 108
10088: PUSH
10089: LD_INT 109
10091: PUSH
10092: LD_INT 112
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
10109: GO 12232
10111: LD_INT 9
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10255
10119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10120: LD_ADDR_VAR 0 1
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: LD_INT 4
10130: PUSH
10131: LD_INT 5
10133: PUSH
10134: LD_INT 6
10136: PUSH
10137: LD_INT 7
10139: PUSH
10140: LD_INT 8
10142: PUSH
10143: LD_INT 11
10145: PUSH
10146: LD_INT 12
10148: PUSH
10149: LD_INT 15
10151: PUSH
10152: LD_INT 16
10154: PUSH
10155: LD_INT 20
10157: PUSH
10158: LD_INT 21
10160: PUSH
10161: LD_INT 22
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 26
10172: PUSH
10173: LD_INT 28
10175: PUSH
10176: LD_INT 30
10178: PUSH
10179: LD_INT 31
10181: PUSH
10182: LD_INT 32
10184: PUSH
10185: LD_INT 36
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 101
10213: PUSH
10214: LD_INT 102
10216: PUSH
10217: LD_INT 103
10219: PUSH
10220: LD_INT 105
10222: PUSH
10223: LD_INT 106
10225: PUSH
10226: LD_INT 108
10228: PUSH
10229: LD_INT 109
10231: PUSH
10232: LD_INT 112
10234: PUSH
10235: LD_INT 114
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: ST_TO_ADDR
10253: GO 12232
10255: LD_INT 10
10257: DOUBLE
10258: EQUAL
10259: IFTRUE 10263
10261: GO 10447
10263: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10264: LD_ADDR_VAR 0 1
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: LD_INT 4
10274: PUSH
10275: LD_INT 5
10277: PUSH
10278: LD_INT 6
10280: PUSH
10281: LD_INT 7
10283: PUSH
10284: LD_INT 8
10286: PUSH
10287: LD_INT 9
10289: PUSH
10290: LD_INT 10
10292: PUSH
10293: LD_INT 11
10295: PUSH
10296: LD_INT 12
10298: PUSH
10299: LD_INT 13
10301: PUSH
10302: LD_INT 14
10304: PUSH
10305: LD_INT 15
10307: PUSH
10308: LD_INT 16
10310: PUSH
10311: LD_INT 17
10313: PUSH
10314: LD_INT 18
10316: PUSH
10317: LD_INT 19
10319: PUSH
10320: LD_INT 20
10322: PUSH
10323: LD_INT 21
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 23
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 26
10340: PUSH
10341: LD_INT 28
10343: PUSH
10344: LD_INT 30
10346: PUSH
10347: LD_INT 31
10349: PUSH
10350: LD_INT 32
10352: PUSH
10353: LD_INT 36
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 101
10389: PUSH
10390: LD_INT 102
10392: PUSH
10393: LD_INT 103
10395: PUSH
10396: LD_INT 104
10398: PUSH
10399: LD_INT 105
10401: PUSH
10402: LD_INT 106
10404: PUSH
10405: LD_INT 107
10407: PUSH
10408: LD_INT 108
10410: PUSH
10411: LD_INT 109
10413: PUSH
10414: LD_INT 110
10416: PUSH
10417: LD_INT 111
10419: PUSH
10420: LD_INT 112
10422: PUSH
10423: LD_INT 114
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: ST_TO_ADDR
10445: GO 12232
10447: LD_INT 11
10449: DOUBLE
10450: EQUAL
10451: IFTRUE 10455
10453: GO 10647
10455: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10456: LD_ADDR_VAR 0 1
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: LD_INT 4
10469: PUSH
10470: LD_INT 5
10472: PUSH
10473: LD_INT 6
10475: PUSH
10476: LD_INT 7
10478: PUSH
10479: LD_INT 8
10481: PUSH
10482: LD_INT 9
10484: PUSH
10485: LD_INT 10
10487: PUSH
10488: LD_INT 11
10490: PUSH
10491: LD_INT 12
10493: PUSH
10494: LD_INT 13
10496: PUSH
10497: LD_INT 14
10499: PUSH
10500: LD_INT 15
10502: PUSH
10503: LD_INT 16
10505: PUSH
10506: LD_INT 17
10508: PUSH
10509: LD_INT 18
10511: PUSH
10512: LD_INT 19
10514: PUSH
10515: LD_INT 20
10517: PUSH
10518: LD_INT 21
10520: PUSH
10521: LD_INT 22
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: LD_INT 24
10529: PUSH
10530: LD_INT 25
10532: PUSH
10533: LD_INT 26
10535: PUSH
10536: LD_INT 28
10538: PUSH
10539: LD_INT 30
10541: PUSH
10542: LD_INT 31
10544: PUSH
10545: LD_INT 32
10547: PUSH
10548: LD_INT 34
10550: PUSH
10551: LD_INT 36
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 101
10589: PUSH
10590: LD_INT 102
10592: PUSH
10593: LD_INT 103
10595: PUSH
10596: LD_INT 104
10598: PUSH
10599: LD_INT 105
10601: PUSH
10602: LD_INT 106
10604: PUSH
10605: LD_INT 107
10607: PUSH
10608: LD_INT 108
10610: PUSH
10611: LD_INT 109
10613: PUSH
10614: LD_INT 110
10616: PUSH
10617: LD_INT 111
10619: PUSH
10620: LD_INT 112
10622: PUSH
10623: LD_INT 114
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: ST_TO_ADDR
10645: GO 12232
10647: LD_INT 12
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10863
10655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10656: LD_ADDR_VAR 0 1
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 3
10669: PUSH
10670: LD_INT 4
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: LD_INT 6
10678: PUSH
10679: LD_INT 7
10681: PUSH
10682: LD_INT 8
10684: PUSH
10685: LD_INT 9
10687: PUSH
10688: LD_INT 10
10690: PUSH
10691: LD_INT 11
10693: PUSH
10694: LD_INT 12
10696: PUSH
10697: LD_INT 13
10699: PUSH
10700: LD_INT 14
10702: PUSH
10703: LD_INT 15
10705: PUSH
10706: LD_INT 16
10708: PUSH
10709: LD_INT 17
10711: PUSH
10712: LD_INT 18
10714: PUSH
10715: LD_INT 19
10717: PUSH
10718: LD_INT 20
10720: PUSH
10721: LD_INT 21
10723: PUSH
10724: LD_INT 22
10726: PUSH
10727: LD_INT 23
10729: PUSH
10730: LD_INT 24
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 26
10738: PUSH
10739: LD_INT 27
10741: PUSH
10742: LD_INT 28
10744: PUSH
10745: LD_INT 30
10747: PUSH
10748: LD_INT 31
10750: PUSH
10751: LD_INT 32
10753: PUSH
10754: LD_INT 33
10756: PUSH
10757: LD_INT 34
10759: PUSH
10760: LD_INT 36
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 101
10801: PUSH
10802: LD_INT 102
10804: PUSH
10805: LD_INT 103
10807: PUSH
10808: LD_INT 104
10810: PUSH
10811: LD_INT 105
10813: PUSH
10814: LD_INT 106
10816: PUSH
10817: LD_INT 107
10819: PUSH
10820: LD_INT 108
10822: PUSH
10823: LD_INT 109
10825: PUSH
10826: LD_INT 110
10828: PUSH
10829: LD_INT 111
10831: PUSH
10832: LD_INT 112
10834: PUSH
10835: LD_INT 113
10837: PUSH
10838: LD_INT 114
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: ST_TO_ADDR
10861: GO 12232
10863: LD_INT 13
10865: DOUBLE
10866: EQUAL
10867: IFTRUE 10871
10869: GO 11067
10871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10872: LD_ADDR_VAR 0 1
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: LD_INT 2
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: LD_INT 8
10894: PUSH
10895: LD_INT 9
10897: PUSH
10898: LD_INT 10
10900: PUSH
10901: LD_INT 11
10903: PUSH
10904: LD_INT 12
10906: PUSH
10907: LD_INT 14
10909: PUSH
10910: LD_INT 15
10912: PUSH
10913: LD_INT 16
10915: PUSH
10916: LD_INT 17
10918: PUSH
10919: LD_INT 18
10921: PUSH
10922: LD_INT 19
10924: PUSH
10925: LD_INT 20
10927: PUSH
10928: LD_INT 21
10930: PUSH
10931: LD_INT 22
10933: PUSH
10934: LD_INT 23
10936: PUSH
10937: LD_INT 24
10939: PUSH
10940: LD_INT 25
10942: PUSH
10943: LD_INT 26
10945: PUSH
10946: LD_INT 27
10948: PUSH
10949: LD_INT 28
10951: PUSH
10952: LD_INT 30
10954: PUSH
10955: LD_INT 31
10957: PUSH
10958: LD_INT 32
10960: PUSH
10961: LD_INT 33
10963: PUSH
10964: LD_INT 34
10966: PUSH
10967: LD_INT 36
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 101
11005: PUSH
11006: LD_INT 102
11008: PUSH
11009: LD_INT 103
11011: PUSH
11012: LD_INT 104
11014: PUSH
11015: LD_INT 105
11017: PUSH
11018: LD_INT 106
11020: PUSH
11021: LD_INT 107
11023: PUSH
11024: LD_INT 108
11026: PUSH
11027: LD_INT 109
11029: PUSH
11030: LD_INT 110
11032: PUSH
11033: LD_INT 111
11035: PUSH
11036: LD_INT 112
11038: PUSH
11039: LD_INT 113
11041: PUSH
11042: LD_INT 114
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: ST_TO_ADDR
11065: GO 12232
11067: LD_INT 14
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11287
11075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11076: LD_ADDR_VAR 0 1
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: LD_INT 4
11092: PUSH
11093: LD_INT 5
11095: PUSH
11096: LD_INT 6
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: LD_INT 8
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: LD_INT 10
11110: PUSH
11111: LD_INT 11
11113: PUSH
11114: LD_INT 12
11116: PUSH
11117: LD_INT 13
11119: PUSH
11120: LD_INT 14
11122: PUSH
11123: LD_INT 15
11125: PUSH
11126: LD_INT 16
11128: PUSH
11129: LD_INT 17
11131: PUSH
11132: LD_INT 18
11134: PUSH
11135: LD_INT 19
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_INT 23
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 26
11158: PUSH
11159: LD_INT 27
11161: PUSH
11162: LD_INT 28
11164: PUSH
11165: LD_INT 29
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 31
11173: PUSH
11174: LD_INT 32
11176: PUSH
11177: LD_INT 33
11179: PUSH
11180: LD_INT 34
11182: PUSH
11183: LD_INT 36
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 101
11225: PUSH
11226: LD_INT 102
11228: PUSH
11229: LD_INT 103
11231: PUSH
11232: LD_INT 104
11234: PUSH
11235: LD_INT 105
11237: PUSH
11238: LD_INT 106
11240: PUSH
11241: LD_INT 107
11243: PUSH
11244: LD_INT 108
11246: PUSH
11247: LD_INT 109
11249: PUSH
11250: LD_INT 110
11252: PUSH
11253: LD_INT 111
11255: PUSH
11256: LD_INT 112
11258: PUSH
11259: LD_INT 113
11261: PUSH
11262: LD_INT 114
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: ST_TO_ADDR
11285: GO 12232
11287: LD_INT 15
11289: DOUBLE
11290: EQUAL
11291: IFTRUE 11295
11293: GO 11507
11295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11296: LD_ADDR_VAR 0 1
11300: PUSH
11301: LD_INT 1
11303: PUSH
11304: LD_INT 2
11306: PUSH
11307: LD_INT 3
11309: PUSH
11310: LD_INT 4
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: LD_INT 6
11318: PUSH
11319: LD_INT 7
11321: PUSH
11322: LD_INT 8
11324: PUSH
11325: LD_INT 9
11327: PUSH
11328: LD_INT 10
11330: PUSH
11331: LD_INT 11
11333: PUSH
11334: LD_INT 12
11336: PUSH
11337: LD_INT 13
11339: PUSH
11340: LD_INT 14
11342: PUSH
11343: LD_INT 15
11345: PUSH
11346: LD_INT 16
11348: PUSH
11349: LD_INT 17
11351: PUSH
11352: LD_INT 18
11354: PUSH
11355: LD_INT 19
11357: PUSH
11358: LD_INT 20
11360: PUSH
11361: LD_INT 21
11363: PUSH
11364: LD_INT 22
11366: PUSH
11367: LD_INT 23
11369: PUSH
11370: LD_INT 24
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 26
11378: PUSH
11379: LD_INT 27
11381: PUSH
11382: LD_INT 28
11384: PUSH
11385: LD_INT 29
11387: PUSH
11388: LD_INT 30
11390: PUSH
11391: LD_INT 31
11393: PUSH
11394: LD_INT 32
11396: PUSH
11397: LD_INT 33
11399: PUSH
11400: LD_INT 34
11402: PUSH
11403: LD_INT 36
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 101
11445: PUSH
11446: LD_INT 102
11448: PUSH
11449: LD_INT 103
11451: PUSH
11452: LD_INT 104
11454: PUSH
11455: LD_INT 105
11457: PUSH
11458: LD_INT 106
11460: PUSH
11461: LD_INT 107
11463: PUSH
11464: LD_INT 108
11466: PUSH
11467: LD_INT 109
11469: PUSH
11470: LD_INT 110
11472: PUSH
11473: LD_INT 111
11475: PUSH
11476: LD_INT 112
11478: PUSH
11479: LD_INT 113
11481: PUSH
11482: LD_INT 114
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: ST_TO_ADDR
11505: GO 12232
11507: LD_INT 16
11509: DOUBLE
11510: EQUAL
11511: IFTRUE 11515
11513: GO 11639
11515: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: LD_INT 4
11526: PUSH
11527: LD_INT 5
11529: PUSH
11530: LD_INT 7
11532: PUSH
11533: LD_INT 11
11535: PUSH
11536: LD_INT 12
11538: PUSH
11539: LD_INT 15
11541: PUSH
11542: LD_INT 16
11544: PUSH
11545: LD_INT 20
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 22
11553: PUSH
11554: LD_INT 23
11556: PUSH
11557: LD_INT 25
11559: PUSH
11560: LD_INT 26
11562: PUSH
11563: LD_INT 30
11565: PUSH
11566: LD_INT 31
11568: PUSH
11569: LD_INT 32
11571: PUSH
11572: LD_INT 33
11574: PUSH
11575: LD_INT 34
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 101
11601: PUSH
11602: LD_INT 102
11604: PUSH
11605: LD_INT 103
11607: PUSH
11608: LD_INT 106
11610: PUSH
11611: LD_INT 108
11613: PUSH
11614: LD_INT 112
11616: PUSH
11617: LD_INT 113
11619: PUSH
11620: LD_INT 114
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: ST_TO_ADDR
11637: GO 12232
11639: LD_INT 17
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11859
11647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11648: LD_ADDR_VAR 0 1
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: LD_INT 5
11667: PUSH
11668: LD_INT 6
11670: PUSH
11671: LD_INT 7
11673: PUSH
11674: LD_INT 8
11676: PUSH
11677: LD_INT 9
11679: PUSH
11680: LD_INT 10
11682: PUSH
11683: LD_INT 11
11685: PUSH
11686: LD_INT 12
11688: PUSH
11689: LD_INT 13
11691: PUSH
11692: LD_INT 14
11694: PUSH
11695: LD_INT 15
11697: PUSH
11698: LD_INT 16
11700: PUSH
11701: LD_INT 17
11703: PUSH
11704: LD_INT 18
11706: PUSH
11707: LD_INT 19
11709: PUSH
11710: LD_INT 20
11712: PUSH
11713: LD_INT 21
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_INT 23
11721: PUSH
11722: LD_INT 24
11724: PUSH
11725: LD_INT 25
11727: PUSH
11728: LD_INT 26
11730: PUSH
11731: LD_INT 27
11733: PUSH
11734: LD_INT 28
11736: PUSH
11737: LD_INT 29
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 31
11745: PUSH
11746: LD_INT 32
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 34
11754: PUSH
11755: LD_INT 36
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 101
11797: PUSH
11798: LD_INT 102
11800: PUSH
11801: LD_INT 103
11803: PUSH
11804: LD_INT 104
11806: PUSH
11807: LD_INT 105
11809: PUSH
11810: LD_INT 106
11812: PUSH
11813: LD_INT 107
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: LD_INT 109
11821: PUSH
11822: LD_INT 110
11824: PUSH
11825: LD_INT 111
11827: PUSH
11828: LD_INT 112
11830: PUSH
11831: LD_INT 113
11833: PUSH
11834: LD_INT 114
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
11857: GO 12232
11859: LD_INT 18
11861: DOUBLE
11862: EQUAL
11863: IFTRUE 11867
11865: GO 12003
11867: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11868: LD_ADDR_VAR 0 1
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: LD_INT 4
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: LD_INT 7
11884: PUSH
11885: LD_INT 11
11887: PUSH
11888: LD_INT 12
11890: PUSH
11891: LD_INT 15
11893: PUSH
11894: LD_INT 16
11896: PUSH
11897: LD_INT 20
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 22
11905: PUSH
11906: LD_INT 23
11908: PUSH
11909: LD_INT 25
11911: PUSH
11912: LD_INT 26
11914: PUSH
11915: LD_INT 30
11917: PUSH
11918: LD_INT 31
11920: PUSH
11921: LD_INT 32
11923: PUSH
11924: LD_INT 33
11926: PUSH
11927: LD_INT 34
11929: PUSH
11930: LD_INT 35
11932: PUSH
11933: LD_INT 36
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 101
11961: PUSH
11962: LD_INT 102
11964: PUSH
11965: LD_INT 103
11967: PUSH
11968: LD_INT 106
11970: PUSH
11971: LD_INT 108
11973: PUSH
11974: LD_INT 112
11976: PUSH
11977: LD_INT 113
11979: PUSH
11980: LD_INT 114
11982: PUSH
11983: LD_INT 115
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: ST_TO_ADDR
12001: GO 12232
12003: LD_INT 19
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12231
12011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 3
12025: PUSH
12026: LD_INT 4
12028: PUSH
12029: LD_INT 5
12031: PUSH
12032: LD_INT 6
12034: PUSH
12035: LD_INT 7
12037: PUSH
12038: LD_INT 8
12040: PUSH
12041: LD_INT 9
12043: PUSH
12044: LD_INT 10
12046: PUSH
12047: LD_INT 11
12049: PUSH
12050: LD_INT 12
12052: PUSH
12053: LD_INT 13
12055: PUSH
12056: LD_INT 14
12058: PUSH
12059: LD_INT 15
12061: PUSH
12062: LD_INT 16
12064: PUSH
12065: LD_INT 17
12067: PUSH
12068: LD_INT 18
12070: PUSH
12071: LD_INT 19
12073: PUSH
12074: LD_INT 20
12076: PUSH
12077: LD_INT 21
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 23
12085: PUSH
12086: LD_INT 24
12088: PUSH
12089: LD_INT 25
12091: PUSH
12092: LD_INT 26
12094: PUSH
12095: LD_INT 27
12097: PUSH
12098: LD_INT 28
12100: PUSH
12101: LD_INT 29
12103: PUSH
12104: LD_INT 30
12106: PUSH
12107: LD_INT 31
12109: PUSH
12110: LD_INT 32
12112: PUSH
12113: LD_INT 33
12115: PUSH
12116: LD_INT 34
12118: PUSH
12119: LD_INT 35
12121: PUSH
12122: LD_INT 36
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 101
12165: PUSH
12166: LD_INT 102
12168: PUSH
12169: LD_INT 103
12171: PUSH
12172: LD_INT 104
12174: PUSH
12175: LD_INT 105
12177: PUSH
12178: LD_INT 106
12180: PUSH
12181: LD_INT 107
12183: PUSH
12184: LD_INT 108
12186: PUSH
12187: LD_INT 109
12189: PUSH
12190: LD_INT 110
12192: PUSH
12193: LD_INT 111
12195: PUSH
12196: LD_INT 112
12198: PUSH
12199: LD_INT 113
12201: PUSH
12202: LD_INT 114
12204: PUSH
12205: LD_INT 115
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: ST_TO_ADDR
12229: GO 12232
12231: POP
// end else
12232: GO 12451
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 3
12247: PUSH
12248: LD_INT 4
12250: PUSH
12251: LD_INT 5
12253: PUSH
12254: LD_INT 6
12256: PUSH
12257: LD_INT 7
12259: PUSH
12260: LD_INT 8
12262: PUSH
12263: LD_INT 9
12265: PUSH
12266: LD_INT 10
12268: PUSH
12269: LD_INT 11
12271: PUSH
12272: LD_INT 12
12274: PUSH
12275: LD_INT 13
12277: PUSH
12278: LD_INT 14
12280: PUSH
12281: LD_INT 15
12283: PUSH
12284: LD_INT 16
12286: PUSH
12287: LD_INT 17
12289: PUSH
12290: LD_INT 18
12292: PUSH
12293: LD_INT 19
12295: PUSH
12296: LD_INT 20
12298: PUSH
12299: LD_INT 21
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_INT 23
12307: PUSH
12308: LD_INT 24
12310: PUSH
12311: LD_INT 25
12313: PUSH
12314: LD_INT 26
12316: PUSH
12317: LD_INT 27
12319: PUSH
12320: LD_INT 28
12322: PUSH
12323: LD_INT 29
12325: PUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 31
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 33
12337: PUSH
12338: LD_INT 34
12340: PUSH
12341: LD_INT 35
12343: PUSH
12344: LD_INT 36
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 101
12387: PUSH
12388: LD_INT 102
12390: PUSH
12391: LD_INT 103
12393: PUSH
12394: LD_INT 104
12396: PUSH
12397: LD_INT 105
12399: PUSH
12400: LD_INT 106
12402: PUSH
12403: LD_INT 107
12405: PUSH
12406: LD_INT 108
12408: PUSH
12409: LD_INT 109
12411: PUSH
12412: LD_INT 110
12414: PUSH
12415: LD_INT 111
12417: PUSH
12418: LD_INT 112
12420: PUSH
12421: LD_INT 113
12423: PUSH
12424: LD_INT 114
12426: PUSH
12427: LD_INT 115
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: ST_TO_ADDR
// if result then
12451: LD_VAR 0 1
12455: IFFALSE 12744
// begin normal :=  ;
12457: LD_ADDR_VAR 0 3
12461: PUSH
12462: LD_STRING 
12464: ST_TO_ADDR
// hardcore :=  ;
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: LD_STRING 
12472: ST_TO_ADDR
// for i = 1 to normalCounter do
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: DOUBLE
12479: LD_INT 1
12481: DEC
12482: ST_TO_ADDR
12483: LD_EXP 20
12487: PUSH
12488: FOR_TO
12489: IFFALSE 12590
// begin tmp := 0 ;
12491: LD_ADDR_VAR 0 2
12495: PUSH
12496: LD_STRING 0
12498: ST_TO_ADDR
// if result [ 1 ] then
12499: LD_VAR 0 1
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: IFFALSE 12572
// if result [ 1 ] [ 1 ] = i then
12509: LD_VAR 0 1
12513: PUSH
12514: LD_INT 1
12516: ARRAY
12517: PUSH
12518: LD_INT 1
12520: ARRAY
12521: PUSH
12522: LD_VAR 0 5
12526: EQUAL
12527: IFFALSE 12572
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_VAR 0 1
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: LD_VAR 0 1
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 3
12558: PPUSH
12559: CALL_OW 1
12563: ST_TO_ADDR
// tmp := 1 ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_STRING 1
12571: ST_TO_ADDR
// end ; normal := normal & tmp ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 3
12581: PUSH
12582: LD_VAR 0 2
12586: STR
12587: ST_TO_ADDR
// end ;
12588: GO 12488
12590: POP
12591: POP
// for i = 1 to hardcoreCounter do
12592: LD_ADDR_VAR 0 5
12596: PUSH
12597: DOUBLE
12598: LD_INT 1
12600: DEC
12601: ST_TO_ADDR
12602: LD_EXP 21
12606: PUSH
12607: FOR_TO
12608: IFFALSE 12713
// begin tmp := 0 ;
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_STRING 0
12617: ST_TO_ADDR
// if result [ 2 ] then
12618: LD_VAR 0 1
12622: PUSH
12623: LD_INT 2
12625: ARRAY
12626: IFFALSE 12695
// if result [ 2 ] [ 1 ] = 100 + i then
12628: LD_VAR 0 1
12632: PUSH
12633: LD_INT 2
12635: ARRAY
12636: PUSH
12637: LD_INT 1
12639: ARRAY
12640: PUSH
12641: LD_INT 100
12643: PUSH
12644: LD_VAR 0 5
12648: PLUS
12649: EQUAL
12650: IFFALSE 12695
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12652: LD_ADDR_VAR 0 1
12656: PUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: LD_INT 2
12664: PPUSH
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: ARRAY
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 3
12681: PPUSH
12682: CALL_OW 1
12686: ST_TO_ADDR
// tmp := 1 ;
12687: LD_ADDR_VAR 0 2
12691: PUSH
12692: LD_STRING 1
12694: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12695: LD_ADDR_VAR 0 4
12699: PUSH
12700: LD_VAR 0 4
12704: PUSH
12705: LD_VAR 0 2
12709: STR
12710: ST_TO_ADDR
// end ;
12711: GO 12607
12713: POP
12714: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12715: LD_STRING getStreamItemsFromMission("
12717: PUSH
12718: LD_VAR 0 3
12722: STR
12723: PUSH
12724: LD_STRING ","
12726: STR
12727: PUSH
12728: LD_VAR 0 4
12732: STR
12733: PUSH
12734: LD_STRING ")
12736: STR
12737: PPUSH
12738: CALL_OW 559
// end else
12742: GO 12751
// ToLua ( getStreamItemsFromMission("","") ) ;
12744: LD_STRING getStreamItemsFromMission("","")
12746: PPUSH
12747: CALL_OW 559
// end ;
12751: LD_VAR 0 1
12755: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12756: LD_EXP 19
12760: PUSH
12761: LD_EXP 24
12765: AND
12766: IFFALSE 12890
12768: GO 12770
12770: DISABLE
12771: LD_INT 0
12773: PPUSH
12774: PPUSH
// begin enable ;
12775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12776: LD_ADDR_VAR 0 2
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_OWVAR 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 2
12795: PUSH
12796: LD_INT 34
12798: PUSH
12799: LD_INT 7
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 34
12808: PUSH
12809: LD_INT 45
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 34
12818: PUSH
12819: LD_INT 28
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 34
12828: PUSH
12829: LD_INT 47
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: ST_TO_ADDR
// if not tmp then
12852: LD_VAR 0 2
12856: NOT
12857: IFFALSE 12861
// exit ;
12859: GO 12890
// for i in tmp do
12861: LD_ADDR_VAR 0 1
12865: PUSH
12866: LD_VAR 0 2
12870: PUSH
12871: FOR_IN
12872: IFFALSE 12888
// begin SetLives ( i , 0 ) ;
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_INT 0
12881: PPUSH
12882: CALL_OW 234
// end ;
12886: GO 12871
12888: POP
12889: POP
// end ;
12890: PPOPN 2
12892: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12893: LD_EXP 19
12897: PUSH
12898: LD_EXP 25
12902: AND
12903: IFFALSE 12987
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12913: LD_ADDR_VAR 0 2
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 32
12932: PUSH
12933: LD_INT 3
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if not tmp then
12949: LD_VAR 0 2
12953: NOT
12954: IFFALSE 12958
// exit ;
12956: GO 12987
// for i in tmp do
12958: LD_ADDR_VAR 0 1
12962: PUSH
12963: LD_VAR 0 2
12967: PUSH
12968: FOR_IN
12969: IFFALSE 12985
// begin SetLives ( i , 0 ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_INT 0
12978: PPUSH
12979: CALL_OW 234
// end ;
12983: GO 12968
12985: POP
12986: POP
// end ;
12987: PPOPN 2
12989: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12990: LD_EXP 19
12994: PUSH
12995: LD_EXP 22
12999: AND
13000: IFFALSE 13093
13002: GO 13004
13004: DISABLE
13005: LD_INT 0
13007: PPUSH
// begin enable ;
13008: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13009: LD_ADDR_VAR 0 1
13013: PUSH
13014: LD_INT 22
13016: PUSH
13017: LD_OWVAR 2
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 2
13028: PUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 5
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 25
13041: PUSH
13042: LD_INT 9
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 25
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 69
13073: PUSH
13074: FOR_IN
13075: IFFALSE 13091
// begin SetClass ( i , 1 ) ;
13077: LD_VAR 0 1
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 336
// end ;
13089: GO 13074
13091: POP
13092: POP
// end ;
13093: PPOPN 1
13095: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13096: LD_EXP 19
13100: PUSH
13101: LD_EXP 23
13105: AND
13106: PUSH
13107: LD_OWVAR 65
13111: PUSH
13112: LD_INT 7
13114: LESS
13115: AND
13116: IFFALSE 13130
13118: GO 13120
13120: DISABLE
// begin enable ;
13121: ENABLE
// game_speed := 7 ;
13122: LD_ADDR_OWVAR 65
13126: PUSH
13127: LD_INT 7
13129: ST_TO_ADDR
// end ;
13130: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13131: LD_EXP 19
13135: PUSH
13136: LD_EXP 26
13140: AND
13141: IFFALSE 13343
13143: GO 13145
13145: DISABLE
13146: LD_INT 0
13148: PPUSH
13149: PPUSH
13150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 81
13158: PUSH
13159: LD_OWVAR 2
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 21
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 69
13186: ST_TO_ADDR
// if not tmp then
13187: LD_VAR 0 3
13191: NOT
13192: IFFALSE 13196
// exit ;
13194: GO 13343
// if tmp > 5 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 5
13203: GREATER
13204: IFFALSE 13216
// k := 5 else
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 5
13213: ST_TO_ADDR
13214: GO 13226
// k := tmp ;
13216: LD_ADDR_VAR 0 2
13220: PUSH
13221: LD_VAR 0 3
13225: ST_TO_ADDR
// for i := 1 to k do
13226: LD_ADDR_VAR 0 1
13230: PUSH
13231: DOUBLE
13232: LD_INT 1
13234: DEC
13235: ST_TO_ADDR
13236: LD_VAR 0 2
13240: PUSH
13241: FOR_TO
13242: IFFALSE 13341
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13244: LD_VAR 0 3
13248: PUSH
13249: LD_VAR 0 1
13253: ARRAY
13254: PPUSH
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 4
13262: MOD
13263: PUSH
13264: LD_INT 1
13266: PLUS
13267: PPUSH
13268: CALL_OW 259
13272: PUSH
13273: LD_INT 10
13275: LESS
13276: IFFALSE 13339
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13278: LD_VAR 0 3
13282: PUSH
13283: LD_VAR 0 1
13287: ARRAY
13288: PPUSH
13289: LD_VAR 0 1
13293: PUSH
13294: LD_INT 4
13296: MOD
13297: PUSH
13298: LD_INT 1
13300: PLUS
13301: PPUSH
13302: LD_VAR 0 3
13306: PUSH
13307: LD_VAR 0 1
13311: ARRAY
13312: PPUSH
13313: LD_VAR 0 1
13317: PUSH
13318: LD_INT 4
13320: MOD
13321: PUSH
13322: LD_INT 1
13324: PLUS
13325: PPUSH
13326: CALL_OW 259
13330: PUSH
13331: LD_INT 1
13333: PLUS
13334: PPUSH
13335: CALL_OW 237
13339: GO 13241
13341: POP
13342: POP
// end ;
13343: PPOPN 3
13345: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13346: LD_EXP 19
13350: PUSH
13351: LD_EXP 27
13355: AND
13356: IFFALSE 13376
13358: GO 13360
13360: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13361: LD_INT 4
13363: PPUSH
13364: LD_OWVAR 2
13368: PPUSH
13369: LD_INT 0
13371: PPUSH
13372: CALL_OW 324
13376: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13377: LD_EXP 19
13381: PUSH
13382: LD_EXP 56
13386: AND
13387: IFFALSE 13407
13389: GO 13391
13391: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13392: LD_INT 19
13394: PPUSH
13395: LD_OWVAR 2
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL_OW 324
13407: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13408: LD_EXP 19
13412: PUSH
13413: LD_EXP 28
13417: AND
13418: IFFALSE 13520
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
// begin enable ;
13427: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13428: LD_ADDR_VAR 0 2
13432: PUSH
13433: LD_INT 22
13435: PUSH
13436: LD_OWVAR 2
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 2
13447: PUSH
13448: LD_INT 34
13450: PUSH
13451: LD_INT 11
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 34
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if not tmp then
13482: LD_VAR 0 2
13486: NOT
13487: IFFALSE 13491
// exit ;
13489: GO 13520
// for i in tmp do
13491: LD_ADDR_VAR 0 1
13495: PUSH
13496: LD_VAR 0 2
13500: PUSH
13501: FOR_IN
13502: IFFALSE 13518
// begin SetLives ( i , 0 ) ;
13504: LD_VAR 0 1
13508: PPUSH
13509: LD_INT 0
13511: PPUSH
13512: CALL_OW 234
// end ;
13516: GO 13501
13518: POP
13519: POP
// end ;
13520: PPOPN 2
13522: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13523: LD_EXP 19
13527: PUSH
13528: LD_EXP 29
13532: AND
13533: IFFALSE 13553
13535: GO 13537
13537: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13538: LD_INT 32
13540: PPUSH
13541: LD_OWVAR 2
13545: PPUSH
13546: LD_INT 0
13548: PPUSH
13549: CALL_OW 324
13553: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13554: LD_EXP 19
13558: PUSH
13559: LD_EXP 30
13563: AND
13564: IFFALSE 13745
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
13572: PPUSH
13573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_OWVAR 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 33
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PPUSH
13605: CALL_OW 69
13609: ST_TO_ADDR
// if not tmp then
13610: LD_VAR 0 2
13614: NOT
13615: IFFALSE 13619
// exit ;
13617: GO 13745
// side := 0 ;
13619: LD_ADDR_VAR 0 3
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// for i := 1 to 8 do
13627: LD_ADDR_VAR 0 1
13631: PUSH
13632: DOUBLE
13633: LD_INT 1
13635: DEC
13636: ST_TO_ADDR
13637: LD_INT 8
13639: PUSH
13640: FOR_TO
13641: IFFALSE 13689
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13643: LD_OWVAR 2
13647: PUSH
13648: LD_VAR 0 1
13652: NONEQUAL
13653: PUSH
13654: LD_OWVAR 2
13658: PPUSH
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 81
13668: PUSH
13669: LD_INT 2
13671: EQUAL
13672: AND
13673: IFFALSE 13687
// begin side := i ;
13675: LD_ADDR_VAR 0 3
13679: PUSH
13680: LD_VAR 0 1
13684: ST_TO_ADDR
// break ;
13685: GO 13689
// end ;
13687: GO 13640
13689: POP
13690: POP
// if not side then
13691: LD_VAR 0 3
13695: NOT
13696: IFFALSE 13700
// exit ;
13698: GO 13745
// for i := 1 to tmp do
13700: LD_ADDR_VAR 0 1
13704: PUSH
13705: DOUBLE
13706: LD_INT 1
13708: DEC
13709: ST_TO_ADDR
13710: LD_VAR 0 2
13714: PUSH
13715: FOR_TO
13716: IFFALSE 13743
// if Prob ( 60 ) then
13718: LD_INT 60
13720: PPUSH
13721: CALL_OW 13
13725: IFFALSE 13741
// SetSide ( i , side ) ;
13727: LD_VAR 0 1
13731: PPUSH
13732: LD_VAR 0 3
13736: PPUSH
13737: CALL_OW 235
13741: GO 13715
13743: POP
13744: POP
// end ;
13745: PPOPN 3
13747: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13748: LD_EXP 19
13752: PUSH
13753: LD_EXP 32
13757: AND
13758: IFFALSE 13877
13760: GO 13762
13762: DISABLE
13763: LD_INT 0
13765: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13766: LD_ADDR_VAR 0 1
13770: PUSH
13771: LD_INT 22
13773: PUSH
13774: LD_OWVAR 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: LD_INT 23
13798: PUSH
13799: LD_INT 0
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: PUSH
13820: FOR_IN
13821: IFFALSE 13875
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 257
13832: PUSH
13833: LD_INT 1
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 3
13841: PUSH
13842: LD_INT 4
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: IN
13851: IFFALSE 13873
// SetClass ( un , rand ( 1 , 4 ) ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 4
13863: PPUSH
13864: CALL_OW 12
13868: PPUSH
13869: CALL_OW 336
13873: GO 13820
13875: POP
13876: POP
// end ;
13877: PPOPN 1
13879: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13880: LD_EXP 19
13884: PUSH
13885: LD_EXP 31
13889: AND
13890: IFFALSE 13969
13892: GO 13894
13894: DISABLE
13895: LD_INT 0
13897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13898: LD_ADDR_VAR 0 1
13902: PUSH
13903: LD_INT 22
13905: PUSH
13906: LD_OWVAR 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 21
13917: PUSH
13918: LD_INT 3
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PPUSH
13929: CALL_OW 69
13933: ST_TO_ADDR
// if not tmp then
13934: LD_VAR 0 1
13938: NOT
13939: IFFALSE 13943
// exit ;
13941: GO 13969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13943: LD_VAR 0 1
13947: PUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 12
13960: ARRAY
13961: PPUSH
13962: LD_INT 100
13964: PPUSH
13965: CALL_OW 234
// end ;
13969: PPOPN 1
13971: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13972: LD_EXP 19
13976: PUSH
13977: LD_EXP 33
13981: AND
13982: IFFALSE 14080
13984: GO 13986
13986: DISABLE
13987: LD_INT 0
13989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13990: LD_ADDR_VAR 0 1
13994: PUSH
13995: LD_INT 22
13997: PUSH
13998: LD_OWVAR 2
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 21
14009: PUSH
14010: LD_INT 1
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PPUSH
14021: CALL_OW 69
14025: ST_TO_ADDR
// if not tmp then
14026: LD_VAR 0 1
14030: NOT
14031: IFFALSE 14035
// exit ;
14033: GO 14080
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14035: LD_VAR 0 1
14039: PUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_VAR 0 1
14047: PPUSH
14048: CALL_OW 12
14052: ARRAY
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: LD_INT 4
14059: PPUSH
14060: CALL_OW 12
14064: PPUSH
14065: LD_INT 3000
14067: PPUSH
14068: LD_INT 9000
14070: PPUSH
14071: CALL_OW 12
14075: PPUSH
14076: CALL_OW 492
// end ;
14080: PPOPN 1
14082: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14083: LD_EXP 19
14087: PUSH
14088: LD_EXP 34
14092: AND
14093: IFFALSE 14113
14095: GO 14097
14097: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14098: LD_INT 1
14100: PPUSH
14101: LD_OWVAR 2
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL_OW 324
14113: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14114: LD_EXP 19
14118: PUSH
14119: LD_EXP 35
14123: AND
14124: IFFALSE 14207
14126: GO 14128
14128: DISABLE
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_OWVAR 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 21
14152: PUSH
14153: LD_INT 3
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if not tmp then
14169: LD_VAR 0 2
14173: NOT
14174: IFFALSE 14178
// exit ;
14176: GO 14207
// for i in tmp do
14178: LD_ADDR_VAR 0 1
14182: PUSH
14183: LD_VAR 0 2
14187: PUSH
14188: FOR_IN
14189: IFFALSE 14205
// SetBLevel ( i , 10 ) ;
14191: LD_VAR 0 1
14195: PPUSH
14196: LD_INT 10
14198: PPUSH
14199: CALL_OW 241
14203: GO 14188
14205: POP
14206: POP
// end ;
14207: PPOPN 2
14209: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14210: LD_EXP 19
14214: PUSH
14215: LD_EXP 36
14219: AND
14220: IFFALSE 14331
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
14228: PPUSH
14229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14230: LD_ADDR_VAR 0 3
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_OWVAR 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// if not tmp then
14266: LD_VAR 0 3
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14331
// un := tmp [ rand ( 1 , tmp ) ] ;
14275: LD_ADDR_VAR 0 2
14279: PUSH
14280: LD_VAR 0 3
14284: PUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_VAR 0 3
14292: PPUSH
14293: CALL_OW 12
14297: ARRAY
14298: ST_TO_ADDR
// if Crawls ( un ) then
14299: LD_VAR 0 2
14303: PPUSH
14304: CALL_OW 318
14308: IFFALSE 14319
// ComWalk ( un ) ;
14310: LD_VAR 0 2
14314: PPUSH
14315: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14319: LD_VAR 0 2
14323: PPUSH
14324: LD_INT 5
14326: PPUSH
14327: CALL_OW 336
// end ;
14331: PPOPN 3
14333: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14334: LD_EXP 19
14338: PUSH
14339: LD_EXP 37
14343: AND
14344: PUSH
14345: LD_OWVAR 67
14349: PUSH
14350: LD_INT 3
14352: LESS
14353: AND
14354: IFFALSE 14373
14356: GO 14358
14358: DISABLE
// Difficulty := Difficulty + 1 ;
14359: LD_ADDR_OWVAR 67
14363: PUSH
14364: LD_OWVAR 67
14368: PUSH
14369: LD_INT 1
14371: PLUS
14372: ST_TO_ADDR
14373: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14374: LD_EXP 19
14378: PUSH
14379: LD_EXP 38
14383: AND
14384: IFFALSE 14487
14386: GO 14388
14388: DISABLE
14389: LD_INT 0
14391: PPUSH
// begin for i := 1 to 5 do
14392: LD_ADDR_VAR 0 1
14396: PUSH
14397: DOUBLE
14398: LD_INT 1
14400: DEC
14401: ST_TO_ADDR
14402: LD_INT 5
14404: PUSH
14405: FOR_TO
14406: IFFALSE 14485
// begin uc_nation := nation_nature ;
14408: LD_ADDR_OWVAR 21
14412: PUSH
14413: LD_INT 0
14415: ST_TO_ADDR
// uc_side := 0 ;
14416: LD_ADDR_OWVAR 20
14420: PUSH
14421: LD_INT 0
14423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14424: LD_ADDR_OWVAR 29
14428: PUSH
14429: LD_INT 12
14431: PUSH
14432: LD_INT 12
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: ST_TO_ADDR
// hc_agressivity := 20 ;
14439: LD_ADDR_OWVAR 35
14443: PUSH
14444: LD_INT 20
14446: ST_TO_ADDR
// hc_class := class_tiger ;
14447: LD_ADDR_OWVAR 28
14451: PUSH
14452: LD_INT 14
14454: ST_TO_ADDR
// hc_gallery :=  ;
14455: LD_ADDR_OWVAR 33
14459: PUSH
14460: LD_STRING 
14462: ST_TO_ADDR
// hc_name :=  ;
14463: LD_ADDR_OWVAR 26
14467: PUSH
14468: LD_STRING 
14470: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14471: CALL_OW 44
14475: PPUSH
14476: LD_INT 0
14478: PPUSH
14479: CALL_OW 51
// end ;
14483: GO 14405
14485: POP
14486: POP
// end ;
14487: PPOPN 1
14489: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14490: LD_EXP 19
14494: PUSH
14495: LD_EXP 39
14499: AND
14500: IFFALSE 14509
14502: GO 14504
14504: DISABLE
// StreamSibBomb ;
14505: CALL 14510 0 0
14509: END
// export function StreamSibBomb ; var i , x , y ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
// result := false ;
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// for i := 1 to 16 do
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: DOUBLE
14530: LD_INT 1
14532: DEC
14533: ST_TO_ADDR
14534: LD_INT 16
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14737
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14540: LD_ADDR_VAR 0 3
14544: PUSH
14545: LD_INT 10
14547: PUSH
14548: LD_INT 20
14550: PUSH
14551: LD_INT 30
14553: PUSH
14554: LD_INT 40
14556: PUSH
14557: LD_INT 50
14559: PUSH
14560: LD_INT 60
14562: PUSH
14563: LD_INT 70
14565: PUSH
14566: LD_INT 80
14568: PUSH
14569: LD_INT 90
14571: PUSH
14572: LD_INT 100
14574: PUSH
14575: LD_INT 110
14577: PUSH
14578: LD_INT 120
14580: PUSH
14581: LD_INT 130
14583: PUSH
14584: LD_INT 140
14586: PUSH
14587: LD_INT 150
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 1
14609: PPUSH
14610: LD_INT 15
14612: PPUSH
14613: CALL_OW 12
14617: ARRAY
14618: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14619: LD_ADDR_VAR 0 4
14623: PUSH
14624: LD_INT 10
14626: PUSH
14627: LD_INT 20
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 40
14635: PUSH
14636: LD_INT 50
14638: PUSH
14639: LD_INT 60
14641: PUSH
14642: LD_INT 70
14644: PUSH
14645: LD_INT 80
14647: PUSH
14648: LD_INT 90
14650: PUSH
14651: LD_INT 100
14653: PUSH
14654: LD_INT 110
14656: PUSH
14657: LD_INT 120
14659: PUSH
14660: LD_INT 130
14662: PUSH
14663: LD_INT 140
14665: PUSH
14666: LD_INT 150
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 1
14688: PPUSH
14689: LD_INT 15
14691: PPUSH
14692: CALL_OW 12
14696: ARRAY
14697: ST_TO_ADDR
// if ValidHex ( x , y ) then
14698: LD_VAR 0 3
14702: PPUSH
14703: LD_VAR 0 4
14707: PPUSH
14708: CALL_OW 488
14712: IFFALSE 14735
// begin result := [ x , y ] ;
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_VAR 0 3
14723: PUSH
14724: LD_VAR 0 4
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: ST_TO_ADDR
// break ;
14733: GO 14737
// end ; end ;
14735: GO 14537
14737: POP
14738: POP
// if result then
14739: LD_VAR 0 1
14743: IFFALSE 14803
// begin ToLua ( playSibBomb() ) ;
14745: LD_STRING playSibBomb()
14747: PPUSH
14748: CALL_OW 559
// wait ( 0 0$14 ) ;
14752: LD_INT 490
14754: PPUSH
14755: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14759: LD_VAR 0 1
14763: PUSH
14764: LD_INT 1
14766: ARRAY
14767: PPUSH
14768: LD_VAR 0 1
14772: PUSH
14773: LD_INT 2
14775: ARRAY
14776: PPUSH
14777: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14781: LD_VAR 0 1
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: LD_VAR 0 1
14794: PUSH
14795: LD_INT 2
14797: ARRAY
14798: PPUSH
14799: CALL_OW 429
// end ; end ;
14803: LD_VAR 0 1
14807: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14808: LD_EXP 19
14812: PUSH
14813: LD_EXP 41
14817: AND
14818: IFFALSE 14830
14820: GO 14822
14822: DISABLE
// YouLost (  ) ;
14823: LD_STRING 
14825: PPUSH
14826: CALL_OW 104
14830: END
// every 0 0$1 trigger StreamModeActive and sFog do
14831: LD_EXP 19
14835: PUSH
14836: LD_EXP 40
14840: AND
14841: IFFALSE 14855
14843: GO 14845
14845: DISABLE
// FogOff ( your_side ) ;
14846: LD_OWVAR 2
14850: PPUSH
14851: CALL_OW 344
14855: END
// every 0 0$1 trigger StreamModeActive and sSun do
14856: LD_EXP 19
14860: PUSH
14861: LD_EXP 42
14865: AND
14866: IFFALSE 14894
14868: GO 14870
14870: DISABLE
// begin solar_recharge_percent := 0 ;
14871: LD_ADDR_OWVAR 79
14875: PUSH
14876: LD_INT 0
14878: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14879: LD_INT 10500
14881: PPUSH
14882: CALL_OW 67
// solar_recharge_percent := 100 ;
14886: LD_ADDR_OWVAR 79
14890: PUSH
14891: LD_INT 100
14893: ST_TO_ADDR
// end ;
14894: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14895: LD_EXP 19
14899: PUSH
14900: LD_EXP 43
14904: AND
14905: IFFALSE 15144
14907: GO 14909
14909: DISABLE
14910: LD_INT 0
14912: PPUSH
14913: PPUSH
14914: PPUSH
// begin tmp := [ ] ;
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: EMPTY
14921: ST_TO_ADDR
// for i := 1 to 6 do
14922: LD_ADDR_VAR 0 1
14926: PUSH
14927: DOUBLE
14928: LD_INT 1
14930: DEC
14931: ST_TO_ADDR
14932: LD_INT 6
14934: PUSH
14935: FOR_TO
14936: IFFALSE 15041
// begin uc_nation := nation_nature ;
14938: LD_ADDR_OWVAR 21
14942: PUSH
14943: LD_INT 0
14945: ST_TO_ADDR
// uc_side := 0 ;
14946: LD_ADDR_OWVAR 20
14950: PUSH
14951: LD_INT 0
14953: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14954: LD_ADDR_OWVAR 29
14958: PUSH
14959: LD_INT 12
14961: PUSH
14962: LD_INT 12
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: ST_TO_ADDR
// hc_agressivity := 20 ;
14969: LD_ADDR_OWVAR 35
14973: PUSH
14974: LD_INT 20
14976: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14977: LD_ADDR_OWVAR 28
14981: PUSH
14982: LD_INT 17
14984: ST_TO_ADDR
// hc_gallery :=  ;
14985: LD_ADDR_OWVAR 33
14989: PUSH
14990: LD_STRING 
14992: ST_TO_ADDR
// hc_name :=  ;
14993: LD_ADDR_OWVAR 26
14997: PUSH
14998: LD_STRING 
15000: ST_TO_ADDR
// un := CreateHuman ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: CALL_OW 44
15010: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 51
// tmp := tmp ^ un ;
15023: LD_ADDR_VAR 0 3
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: LD_VAR 0 2
15037: ADD
15038: ST_TO_ADDR
// end ;
15039: GO 14935
15041: POP
15042: POP
// repeat wait ( 0 0$1 ) ;
15043: LD_INT 35
15045: PPUSH
15046: CALL_OW 67
// for un in tmp do
15050: LD_ADDR_VAR 0 2
15054: PUSH
15055: LD_VAR 0 3
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15135
// begin if IsDead ( un ) then
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 301
15072: IFFALSE 15092
// begin tmp := tmp diff un ;
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_VAR 0 3
15083: PUSH
15084: LD_VAR 0 2
15088: DIFF
15089: ST_TO_ADDR
// continue ;
15090: GO 15060
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15092: LD_VAR 0 2
15096: PPUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 22
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PPUSH
15114: CALL_OW 69
15118: PPUSH
15119: LD_VAR 0 2
15123: PPUSH
15124: CALL_OW 74
15128: PPUSH
15129: CALL_OW 115
// end ;
15133: GO 15060
15135: POP
15136: POP
// until not tmp ;
15137: LD_VAR 0 3
15141: NOT
15142: IFFALSE 15043
// end ;
15144: PPOPN 3
15146: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15147: LD_EXP 19
15151: PUSH
15152: LD_EXP 44
15156: AND
15157: IFFALSE 15211
15159: GO 15161
15161: DISABLE
// begin ToLua ( displayTroll(); ) ;
15162: LD_STRING displayTroll();
15164: PPUSH
15165: CALL_OW 559
// wait ( 3 3$00 ) ;
15169: LD_INT 6300
15171: PPUSH
15172: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15176: LD_STRING hideTroll();
15178: PPUSH
15179: CALL_OW 559
// wait ( 1 1$00 ) ;
15183: LD_INT 2100
15185: PPUSH
15186: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15190: LD_STRING displayTroll();
15192: PPUSH
15193: CALL_OW 559
// wait ( 1 1$00 ) ;
15197: LD_INT 2100
15199: PPUSH
15200: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15204: LD_STRING hideTroll();
15206: PPUSH
15207: CALL_OW 559
// end ;
15211: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15212: LD_EXP 19
15216: PUSH
15217: LD_EXP 45
15221: AND
15222: IFFALSE 15285
15224: GO 15226
15226: DISABLE
15227: LD_INT 0
15229: PPUSH
// begin p := 0 ;
15230: LD_ADDR_VAR 0 1
15234: PUSH
15235: LD_INT 0
15237: ST_TO_ADDR
// repeat game_speed := 1 ;
15238: LD_ADDR_OWVAR 65
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15246: LD_INT 35
15248: PPUSH
15249: CALL_OW 67
// p := p + 1 ;
15253: LD_ADDR_VAR 0 1
15257: PUSH
15258: LD_VAR 0 1
15262: PUSH
15263: LD_INT 1
15265: PLUS
15266: ST_TO_ADDR
// until p >= 60 ;
15267: LD_VAR 0 1
15271: PUSH
15272: LD_INT 60
15274: GREATEREQUAL
15275: IFFALSE 15238
// game_speed := 4 ;
15277: LD_ADDR_OWVAR 65
15281: PUSH
15282: LD_INT 4
15284: ST_TO_ADDR
// end ;
15285: PPOPN 1
15287: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15288: LD_EXP 19
15292: PUSH
15293: LD_EXP 46
15297: AND
15298: IFFALSE 15444
15300: GO 15302
15302: DISABLE
15303: LD_INT 0
15305: PPUSH
15306: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15307: LD_ADDR_VAR 0 1
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_OWVAR 2
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 0
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PPUSH
15356: CALL_OW 69
15360: ST_TO_ADDR
// if not depot then
15361: LD_VAR 0 1
15365: NOT
15366: IFFALSE 15370
// exit ;
15368: GO 15444
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 1
15382: PPUSH
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 12
15392: ARRAY
15393: PPUSH
15394: CALL_OW 274
15398: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15399: LD_VAR 0 2
15403: PPUSH
15404: LD_INT 1
15406: PPUSH
15407: LD_INT 0
15409: PPUSH
15410: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15414: LD_VAR 0 2
15418: PPUSH
15419: LD_INT 2
15421: PPUSH
15422: LD_INT 0
15424: PPUSH
15425: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15429: LD_VAR 0 2
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: LD_INT 0
15439: PPUSH
15440: CALL_OW 277
// end ;
15444: PPOPN 2
15446: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 47
15456: AND
15457: IFFALSE 15554
15459: GO 15461
15461: DISABLE
15462: LD_INT 0
15464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15465: LD_ADDR_VAR 0 1
15469: PUSH
15470: LD_INT 22
15472: PUSH
15473: LD_OWVAR 2
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 21
15484: PUSH
15485: LD_INT 1
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 3
15494: PUSH
15495: LD_INT 23
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: PPUSH
15514: CALL_OW 69
15518: ST_TO_ADDR
// if not tmp then
15519: LD_VAR 0 1
15523: NOT
15524: IFFALSE 15528
// exit ;
15526: GO 15554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15528: LD_VAR 0 1
15532: PUSH
15533: LD_INT 1
15535: PPUSH
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 12
15545: ARRAY
15546: PPUSH
15547: LD_INT 200
15549: PPUSH
15550: CALL_OW 234
// end ;
15554: PPOPN 1
15556: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15557: LD_EXP 19
15561: PUSH
15562: LD_EXP 48
15566: AND
15567: IFFALSE 15646
15569: GO 15571
15571: DISABLE
15572: LD_INT 0
15574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15575: LD_ADDR_VAR 0 1
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_OWVAR 2
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 69
15610: ST_TO_ADDR
// if not tmp then
15611: LD_VAR 0 1
15615: NOT
15616: IFFALSE 15620
// exit ;
15618: GO 15646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15620: LD_VAR 0 1
15624: PUSH
15625: LD_INT 1
15627: PPUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 12
15637: ARRAY
15638: PPUSH
15639: LD_INT 60
15641: PPUSH
15642: CALL_OW 234
// end ;
15646: PPOPN 1
15648: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15649: LD_EXP 19
15653: PUSH
15654: LD_EXP 49
15658: AND
15659: IFFALSE 15758
15661: GO 15663
15663: DISABLE
15664: LD_INT 0
15666: PPUSH
15667: PPUSH
// begin enable ;
15668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15669: LD_ADDR_VAR 0 1
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_OWVAR 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 61
15688: PUSH
15689: EMPTY
15690: LIST
15691: PUSH
15692: LD_INT 33
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 1
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15758
// for i in tmp do
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_VAR 0 1
15730: PUSH
15731: FOR_IN
15732: IFFALSE 15756
// if IsControledBy ( i ) then
15734: LD_VAR 0 2
15738: PPUSH
15739: CALL_OW 312
15743: IFFALSE 15754
// ComUnlink ( i ) ;
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 136
15754: GO 15731
15756: POP
15757: POP
// end ;
15758: PPOPN 2
15760: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15761: LD_EXP 19
15765: PUSH
15766: LD_EXP 50
15770: AND
15771: IFFALSE 15911
15773: GO 15775
15775: DISABLE
15776: LD_INT 0
15778: PPUSH
15779: PPUSH
// begin ToLua ( displayPowell(); ) ;
15780: LD_STRING displayPowell();
15782: PPUSH
15783: CALL_OW 559
// uc_side := 0 ;
15787: LD_ADDR_OWVAR 20
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// uc_nation := 2 ;
15795: LD_ADDR_OWVAR 21
15799: PUSH
15800: LD_INT 2
15802: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15803: LD_ADDR_OWVAR 37
15807: PUSH
15808: LD_INT 14
15810: ST_TO_ADDR
// vc_engine := engine_siberite ;
15811: LD_ADDR_OWVAR 39
15815: PUSH
15816: LD_INT 3
15818: ST_TO_ADDR
// vc_control := control_apeman ;
15819: LD_ADDR_OWVAR 38
15823: PUSH
15824: LD_INT 5
15826: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15827: LD_ADDR_OWVAR 40
15831: PUSH
15832: LD_INT 29
15834: ST_TO_ADDR
// un := CreateVehicle ;
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: CALL_OW 45
15844: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15845: LD_VAR 0 2
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15857: LD_INT 35
15859: PPUSH
15860: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15864: LD_VAR 0 2
15868: PPUSH
15869: LD_INT 22
15871: PUSH
15872: LD_OWVAR 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PPUSH
15886: LD_VAR 0 2
15890: PPUSH
15891: CALL_OW 74
15895: PPUSH
15896: CALL_OW 115
// until IsDead ( un ) ;
15900: LD_VAR 0 2
15904: PPUSH
15905: CALL_OW 301
15909: IFFALSE 15857
// end ;
15911: PPOPN 2
15913: END
// every 0 0$1 trigger StreamModeActive and sStu do
15914: LD_EXP 19
15918: PUSH
15919: LD_EXP 58
15923: AND
15924: IFFALSE 15940
15926: GO 15928
15928: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15929: LD_STRING displayStucuk();
15931: PPUSH
15932: CALL_OW 559
// ResetFog ;
15936: CALL_OW 335
// end ;
15940: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15941: LD_EXP 19
15945: PUSH
15946: LD_EXP 51
15950: AND
15951: IFFALSE 16092
15953: GO 15955
15955: DISABLE
15956: LD_INT 0
15958: PPUSH
15959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_OWVAR 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 21
15979: PUSH
15980: LD_INT 1
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: ST_TO_ADDR
// if not tmp then
15996: LD_VAR 0 2
16000: NOT
16001: IFFALSE 16005
// exit ;
16003: GO 16092
// un := tmp [ rand ( 1 , tmp ) ] ;
16005: LD_ADDR_VAR 0 1
16009: PUSH
16010: LD_VAR 0 2
16014: PUSH
16015: LD_INT 1
16017: PPUSH
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 12
16027: ARRAY
16028: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: LD_INT 0
16036: PPUSH
16037: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_OWVAR 3
16050: PUSH
16051: LD_VAR 0 1
16055: DIFF
16056: PPUSH
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 74
16066: PPUSH
16067: CALL_OW 115
// wait ( 0 0$20 ) ;
16071: LD_INT 700
16073: PPUSH
16074: CALL_OW 67
// SetSide ( un , your_side ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: LD_OWVAR 2
16087: PPUSH
16088: CALL_OW 235
// end ;
16092: PPOPN 2
16094: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16095: LD_EXP 19
16099: PUSH
16100: LD_EXP 52
16104: AND
16105: IFFALSE 16211
16107: GO 16109
16109: DISABLE
16110: LD_INT 0
16112: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: LD_INT 22
16120: PUSH
16121: LD_OWVAR 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 2
16132: PUSH
16133: LD_INT 30
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL_OW 69
16166: ST_TO_ADDR
// if not depot then
16167: LD_VAR 0 1
16171: NOT
16172: IFFALSE 16176
// exit ;
16174: GO 16211
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16176: LD_VAR 0 1
16180: PUSH
16181: LD_INT 1
16183: ARRAY
16184: PPUSH
16185: CALL_OW 250
16189: PPUSH
16190: LD_VAR 0 1
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: CALL_OW 251
16203: PPUSH
16204: LD_INT 70
16206: PPUSH
16207: CALL_OW 495
// end ;
16211: PPOPN 1
16213: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16214: LD_EXP 19
16218: PUSH
16219: LD_EXP 53
16223: AND
16224: IFFALSE 16435
16226: GO 16228
16228: DISABLE
16229: LD_INT 0
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16236: LD_ADDR_VAR 0 5
16240: PUSH
16241: LD_INT 22
16243: PUSH
16244: LD_OWVAR 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 21
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL_OW 69
16271: ST_TO_ADDR
// if not tmp then
16272: LD_VAR 0 5
16276: NOT
16277: IFFALSE 16281
// exit ;
16279: GO 16435
// for i in tmp do
16281: LD_ADDR_VAR 0 1
16285: PUSH
16286: LD_VAR 0 5
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16433
// begin d := rand ( 0 , 5 ) ;
16294: LD_ADDR_VAR 0 4
16298: PUSH
16299: LD_INT 0
16301: PPUSH
16302: LD_INT 5
16304: PPUSH
16305: CALL_OW 12
16309: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 250
16324: PPUSH
16325: LD_VAR 0 4
16329: PPUSH
16330: LD_INT 3
16332: PPUSH
16333: LD_INT 12
16335: PPUSH
16336: CALL_OW 12
16340: PPUSH
16341: CALL_OW 272
16345: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16346: LD_ADDR_VAR 0 3
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 251
16360: PPUSH
16361: LD_VAR 0 4
16365: PPUSH
16366: LD_INT 3
16368: PPUSH
16369: LD_INT 12
16371: PPUSH
16372: CALL_OW 12
16376: PPUSH
16377: CALL_OW 273
16381: ST_TO_ADDR
// if ValidHex ( x , y ) then
16382: LD_VAR 0 2
16386: PPUSH
16387: LD_VAR 0 3
16391: PPUSH
16392: CALL_OW 488
16396: IFFALSE 16431
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: LD_INT 3
16415: PPUSH
16416: LD_INT 6
16418: PPUSH
16419: CALL_OW 12
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 483
// end ;
16431: GO 16291
16433: POP
16434: POP
// end ;
16435: PPOPN 5
16437: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16438: LD_EXP 19
16442: PUSH
16443: LD_EXP 54
16447: AND
16448: IFFALSE 16542
16450: GO 16452
16452: DISABLE
16453: LD_INT 0
16455: PPUSH
16456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16457: LD_ADDR_VAR 0 2
16461: PUSH
16462: LD_INT 22
16464: PUSH
16465: LD_OWVAR 2
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 32
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 21
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
// if not tmp then
16504: LD_VAR 0 2
16508: NOT
16509: IFFALSE 16513
// exit ;
16511: GO 16542
// for i in tmp do
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: LD_VAR 0 2
16522: PUSH
16523: FOR_IN
16524: IFFALSE 16540
// SetFuel ( i , 0 ) ;
16526: LD_VAR 0 1
16530: PPUSH
16531: LD_INT 0
16533: PPUSH
16534: CALL_OW 240
16538: GO 16523
16540: POP
16541: POP
// end ;
16542: PPOPN 2
16544: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16545: LD_EXP 19
16549: PUSH
16550: LD_EXP 55
16554: AND
16555: IFFALSE 16621
16557: GO 16559
16559: DISABLE
16560: LD_INT 0
16562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16563: LD_ADDR_VAR 0 1
16567: PUSH
16568: LD_INT 22
16570: PUSH
16571: LD_OWVAR 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 29
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PPUSH
16594: CALL_OW 69
16598: ST_TO_ADDR
// if not tmp then
16599: LD_VAR 0 1
16603: NOT
16604: IFFALSE 16608
// exit ;
16606: GO 16621
// DestroyUnit ( tmp [ 1 ] ) ;
16608: LD_VAR 0 1
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: PPUSH
16617: CALL_OW 65
// end ;
16621: PPOPN 1
16623: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16624: LD_EXP 19
16628: PUSH
16629: LD_EXP 57
16633: AND
16634: IFFALSE 16763
16636: GO 16638
16638: DISABLE
16639: LD_INT 0
16641: PPUSH
// begin uc_side := 0 ;
16642: LD_ADDR_OWVAR 20
16646: PUSH
16647: LD_INT 0
16649: ST_TO_ADDR
// uc_nation := nation_arabian ;
16650: LD_ADDR_OWVAR 21
16654: PUSH
16655: LD_INT 2
16657: ST_TO_ADDR
// hc_gallery :=  ;
16658: LD_ADDR_OWVAR 33
16662: PUSH
16663: LD_STRING 
16665: ST_TO_ADDR
// hc_name :=  ;
16666: LD_ADDR_OWVAR 26
16670: PUSH
16671: LD_STRING 
16673: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16674: LD_INT 1
16676: PPUSH
16677: LD_INT 11
16679: PPUSH
16680: LD_INT 10
16682: PPUSH
16683: CALL_OW 380
// un := CreateHuman ;
16687: LD_ADDR_VAR 0 1
16691: PUSH
16692: CALL_OW 44
16696: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16697: LD_VAR 0 1
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16716: LD_VAR 0 1
16720: PPUSH
16721: LD_INT 22
16723: PUSH
16724: LD_OWVAR 2
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PPUSH
16733: CALL_OW 69
16737: PPUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 74
16747: PPUSH
16748: CALL_OW 115
// until IsDead ( un ) ;
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 301
16761: IFFALSE 16709
// end ;
16763: PPOPN 1
16765: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16766: LD_EXP 19
16770: PUSH
16771: LD_EXP 59
16775: AND
16776: IFFALSE 16788
16778: GO 16780
16780: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16781: LD_STRING earthquake(getX(game), 0, 32)
16783: PPUSH
16784: CALL_OW 559
16788: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16789: LD_EXP 19
16793: PUSH
16794: LD_EXP 60
16798: AND
16799: IFFALSE 16890
16801: GO 16803
16803: DISABLE
16804: LD_INT 0
16806: PPUSH
// begin enable ;
16807: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16808: LD_ADDR_VAR 0 1
16812: PUSH
16813: LD_INT 22
16815: PUSH
16816: LD_OWVAR 2
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 21
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 33
16837: PUSH
16838: LD_INT 3
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: ST_TO_ADDR
// if not tmp then
16855: LD_VAR 0 1
16859: NOT
16860: IFFALSE 16864
// exit ;
16862: GO 16890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16864: LD_VAR 0 1
16868: PUSH
16869: LD_INT 1
16871: PPUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 12
16881: ARRAY
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: CALL_OW 234
// end ;
16890: PPOPN 1
16892: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16893: LD_EXP 19
16897: PUSH
16898: LD_EXP 61
16902: AND
16903: IFFALSE 17044
16905: GO 16907
16907: DISABLE
16908: LD_INT 0
16910: PPUSH
16911: PPUSH
16912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16913: LD_ADDR_VAR 0 3
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_OWVAR 2
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 25
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 69
16948: ST_TO_ADDR
// if not tmp then
16949: LD_VAR 0 3
16953: NOT
16954: IFFALSE 16958
// exit ;
16956: GO 17044
// un := tmp [ rand ( 1 , tmp ) ] ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 3
16975: PPUSH
16976: CALL_OW 12
16980: ARRAY
16981: ST_TO_ADDR
// if Crawls ( un ) then
16982: LD_VAR 0 2
16986: PPUSH
16987: CALL_OW 318
16991: IFFALSE 17002
// ComWalk ( un ) ;
16993: LD_VAR 0 2
16997: PPUSH
16998: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17002: LD_VAR 0 2
17006: PPUSH
17007: LD_INT 9
17009: PPUSH
17010: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17014: LD_INT 28
17016: PPUSH
17017: LD_OWVAR 2
17021: PPUSH
17022: LD_INT 2
17024: PPUSH
17025: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17029: LD_INT 29
17031: PPUSH
17032: LD_OWVAR 2
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: CALL_OW 322
// end ;
17044: PPOPN 3
17046: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17047: LD_EXP 19
17051: PUSH
17052: LD_EXP 62
17056: AND
17057: IFFALSE 17168
17059: GO 17061
17061: DISABLE
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
17066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17067: LD_ADDR_VAR 0 3
17071: PUSH
17072: LD_INT 22
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 25
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 69
17102: ST_TO_ADDR
// if not tmp then
17103: LD_VAR 0 3
17107: NOT
17108: IFFALSE 17112
// exit ;
17110: GO 17168
// un := tmp [ rand ( 1 , tmp ) ] ;
17112: LD_ADDR_VAR 0 2
17116: PUSH
17117: LD_VAR 0 3
17121: PUSH
17122: LD_INT 1
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: CALL_OW 12
17134: ARRAY
17135: ST_TO_ADDR
// if Crawls ( un ) then
17136: LD_VAR 0 2
17140: PPUSH
17141: CALL_OW 318
17145: IFFALSE 17156
// ComWalk ( un ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17156: LD_VAR 0 2
17160: PPUSH
17161: LD_INT 8
17163: PPUSH
17164: CALL_OW 336
// end ;
17168: PPOPN 3
17170: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17171: LD_EXP 19
17175: PUSH
17176: LD_EXP 63
17180: AND
17181: IFFALSE 17325
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_OWVAR 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 21
17209: PUSH
17210: LD_INT 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: LD_INT 34
17222: PUSH
17223: LD_INT 12
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 34
17232: PUSH
17233: LD_INT 51
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 34
17242: PUSH
17243: LD_INT 32
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: PPUSH
17261: CALL_OW 69
17265: ST_TO_ADDR
// if not tmp then
17266: LD_VAR 0 2
17270: NOT
17271: IFFALSE 17275
// exit ;
17273: GO 17325
// for i in tmp do
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: LD_VAR 0 2
17284: PUSH
17285: FOR_IN
17286: IFFALSE 17323
// if GetCargo ( i , mat_artifact ) = 0 then
17288: LD_VAR 0 1
17292: PPUSH
17293: LD_INT 4
17295: PPUSH
17296: CALL_OW 289
17300: PUSH
17301: LD_INT 0
17303: EQUAL
17304: IFFALSE 17321
// SetCargo ( i , mat_siberit , 100 ) ;
17306: LD_VAR 0 1
17310: PPUSH
17311: LD_INT 3
17313: PPUSH
17314: LD_INT 100
17316: PPUSH
17317: CALL_OW 290
17321: GO 17285
17323: POP
17324: POP
// end ;
17325: PPOPN 2
17327: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17328: LD_EXP 19
17332: PUSH
17333: LD_EXP 64
17337: AND
17338: IFFALSE 17521
17340: GO 17342
17342: DISABLE
17343: LD_INT 0
17345: PPUSH
17346: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_OWVAR 2
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: ST_TO_ADDR
// if not tmp then
17369: LD_VAR 0 2
17373: NOT
17374: IFFALSE 17378
// exit ;
17376: GO 17521
// for i := 1 to 2 do
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: DOUBLE
17384: LD_INT 1
17386: DEC
17387: ST_TO_ADDR
17388: LD_INT 2
17390: PUSH
17391: FOR_TO
17392: IFFALSE 17519
// begin uc_side := your_side ;
17394: LD_ADDR_OWVAR 20
17398: PUSH
17399: LD_OWVAR 2
17403: ST_TO_ADDR
// uc_nation := nation_american ;
17404: LD_ADDR_OWVAR 21
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// vc_chassis := us_morphling ;
17412: LD_ADDR_OWVAR 37
17416: PUSH
17417: LD_INT 5
17419: ST_TO_ADDR
// vc_engine := engine_siberite ;
17420: LD_ADDR_OWVAR 39
17424: PUSH
17425: LD_INT 3
17427: ST_TO_ADDR
// vc_control := control_computer ;
17428: LD_ADDR_OWVAR 38
17432: PUSH
17433: LD_INT 3
17435: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17436: LD_ADDR_OWVAR 40
17440: PUSH
17441: LD_INT 10
17443: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17444: LD_VAR 0 2
17448: PUSH
17449: LD_INT 1
17451: ARRAY
17452: PPUSH
17453: CALL_OW 310
17457: NOT
17458: IFFALSE 17505
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17460: CALL_OW 45
17464: PPUSH
17465: LD_VAR 0 2
17469: PUSH
17470: LD_INT 1
17472: ARRAY
17473: PPUSH
17474: CALL_OW 250
17478: PPUSH
17479: LD_VAR 0 2
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PPUSH
17488: CALL_OW 251
17492: PPUSH
17493: LD_INT 12
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 50
17503: GO 17517
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17505: CALL_OW 45
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 51
// end ;
17517: GO 17391
17519: POP
17520: POP
// end ;
17521: PPOPN 2
17523: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17524: LD_EXP 19
17528: PUSH
17529: LD_EXP 65
17533: AND
17534: IFFALSE 17756
17536: GO 17538
17538: DISABLE
17539: LD_INT 0
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17547: LD_ADDR_VAR 0 6
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 23
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 6
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17756
// s1 := rand ( 1 , 4 ) ;
17610: LD_ADDR_VAR 0 2
17614: PUSH
17615: LD_INT 1
17617: PPUSH
17618: LD_INT 4
17620: PPUSH
17621: CALL_OW 12
17625: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17626: LD_ADDR_VAR 0 4
17630: PUSH
17631: LD_VAR 0 6
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: PPUSH
17640: LD_VAR 0 2
17644: PPUSH
17645: CALL_OW 259
17649: ST_TO_ADDR
// if s1 = 1 then
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 1
17657: EQUAL
17658: IFFALSE 17678
// s2 := rand ( 2 , 4 ) else
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: LD_INT 2
17667: PPUSH
17668: LD_INT 4
17670: PPUSH
17671: CALL_OW 12
17675: ST_TO_ADDR
17676: GO 17686
// s2 := 1 ;
17678: LD_ADDR_VAR 0 3
17682: PUSH
17683: LD_INT 1
17685: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17686: LD_ADDR_VAR 0 5
17690: PUSH
17691: LD_VAR 0 6
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: CALL_OW 259
17709: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17710: LD_VAR 0 6
17714: PUSH
17715: LD_INT 1
17717: ARRAY
17718: PPUSH
17719: LD_VAR 0 2
17723: PPUSH
17724: LD_VAR 0 5
17728: PPUSH
17729: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17733: LD_VAR 0 6
17737: PUSH
17738: LD_INT 1
17740: ARRAY
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_VAR 0 4
17751: PPUSH
17752: CALL_OW 237
// end ;
17756: PPOPN 6
17758: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17759: LD_EXP 19
17763: PUSH
17764: LD_EXP 66
17768: AND
17769: IFFALSE 17848
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_INT 22
17784: PUSH
17785: LD_OWVAR 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 30
17796: PUSH
17797: LD_INT 3
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 69
17812: ST_TO_ADDR
// if not tmp then
17813: LD_VAR 0 1
17817: NOT
17818: IFFALSE 17822
// exit ;
17820: GO 17848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17822: LD_VAR 0 1
17826: PUSH
17827: LD_INT 1
17829: PPUSH
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 12
17839: ARRAY
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 234
// end ;
17848: PPOPN 1
17850: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17851: LD_EXP 19
17855: PUSH
17856: LD_EXP 67
17860: AND
17861: IFFALSE 17973
17863: GO 17865
17865: DISABLE
17866: LD_INT 0
17868: PPUSH
17869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17870: LD_ADDR_VAR 0 2
17874: PUSH
17875: LD_INT 22
17877: PUSH
17878: LD_OWVAR 2
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 30
17892: PUSH
17893: LD_INT 27
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 30
17902: PUSH
17903: LD_INT 26
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 30
17912: PUSH
17913: LD_INT 28
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: ST_TO_ADDR
// if not tmp then
17935: LD_VAR 0 2
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 17973
// for i in tmp do
17944: LD_ADDR_VAR 0 1
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: FOR_IN
17955: IFFALSE 17971
// SetLives ( i , 1 ) ;
17957: LD_VAR 0 1
17961: PPUSH
17962: LD_INT 1
17964: PPUSH
17965: CALL_OW 234
17969: GO 17954
17971: POP
17972: POP
// end ;
17973: PPOPN 2
17975: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17976: LD_EXP 19
17980: PUSH
17981: LD_EXP 68
17985: AND
17986: IFFALSE 18260
17988: GO 17990
17990: DISABLE
17991: LD_INT 0
17993: PPUSH
17994: PPUSH
17995: PPUSH
// begin i := rand ( 1 , 7 ) ;
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: LD_INT 1
18003: PPUSH
18004: LD_INT 7
18006: PPUSH
18007: CALL_OW 12
18011: ST_TO_ADDR
// case i of 1 :
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 1
18019: DOUBLE
18020: EQUAL
18021: IFTRUE 18025
18023: GO 18035
18025: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18026: LD_STRING earthquake(getX(game), 0, 32)
18028: PPUSH
18029: CALL_OW 559
18033: GO 18260
18035: LD_INT 2
18037: DOUBLE
18038: EQUAL
18039: IFTRUE 18043
18041: GO 18057
18043: POP
// begin ToLua ( displayStucuk(); ) ;
18044: LD_STRING displayStucuk();
18046: PPUSH
18047: CALL_OW 559
// ResetFog ;
18051: CALL_OW 335
// end ; 3 :
18055: GO 18260
18057: LD_INT 3
18059: DOUBLE
18060: EQUAL
18061: IFTRUE 18065
18063: GO 18169
18065: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18066: LD_ADDR_VAR 0 2
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_OWVAR 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// if not tmp then
18102: LD_VAR 0 2
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 18260
// un := tmp [ rand ( 1 , tmp ) ] ;
18111: LD_ADDR_VAR 0 3
18115: PUSH
18116: LD_VAR 0 2
18120: PUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL_OW 12
18133: ARRAY
18134: ST_TO_ADDR
// if Crawls ( un ) then
18135: LD_VAR 0 3
18139: PPUSH
18140: CALL_OW 318
18144: IFFALSE 18155
// ComWalk ( un ) ;
18146: LD_VAR 0 3
18150: PPUSH
18151: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18155: LD_VAR 0 3
18159: PPUSH
18160: LD_INT 8
18162: PPUSH
18163: CALL_OW 336
// end ; 4 :
18167: GO 18260
18169: LD_INT 4
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18238
18177: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18178: LD_ADDR_VAR 0 2
18182: PUSH
18183: LD_INT 22
18185: PUSH
18186: LD_OWVAR 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 30
18197: PUSH
18198: LD_INT 29
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PPUSH
18209: CALL_OW 69
18213: ST_TO_ADDR
// if not tmp then
18214: LD_VAR 0 2
18218: NOT
18219: IFFALSE 18223
// exit ;
18221: GO 18260
// DestroyUnit ( tmp [ 1 ] ) ;
18223: LD_VAR 0 2
18227: PUSH
18228: LD_INT 1
18230: ARRAY
18231: PPUSH
18232: CALL_OW 65
// end ; 5 .. 7 :
18236: GO 18260
18238: LD_INT 5
18240: DOUBLE
18241: GREATEREQUAL
18242: IFFALSE 18250
18244: LD_INT 7
18246: DOUBLE
18247: LESSEQUAL
18248: IFTRUE 18252
18250: GO 18259
18252: POP
// StreamSibBomb ; end ;
18253: CALL 14510 0 0
18257: GO 18260
18259: POP
// end ;
18260: PPOPN 3
18262: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18263: LD_EXP 19
18267: PUSH
18268: LD_EXP 69
18272: AND
18273: IFFALSE 18429
18275: GO 18277
18277: DISABLE
18278: LD_INT 0
18280: PPUSH
18281: PPUSH
18282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18283: LD_ADDR_VAR 0 2
18287: PUSH
18288: LD_INT 81
18290: PUSH
18291: LD_OWVAR 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 21
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: ST_TO_ADDR
// if not tmp then
18337: LD_VAR 0 2
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 18429
// p := 0 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_INT 0
18353: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18354: LD_INT 35
18356: PPUSH
18357: CALL_OW 67
// p := p + 1 ;
18361: LD_ADDR_VAR 0 3
18365: PUSH
18366: LD_VAR 0 3
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: ST_TO_ADDR
// for i in tmp do
18375: LD_ADDR_VAR 0 1
18379: PUSH
18380: LD_VAR 0 2
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18417
// if GetLives ( i ) < 1000 then
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 256
18397: PUSH
18398: LD_INT 1000
18400: LESS
18401: IFFALSE 18415
// SetLives ( i , 1000 ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_INT 1000
18410: PPUSH
18411: CALL_OW 234
18415: GO 18385
18417: POP
18418: POP
// until p > 20 ;
18419: LD_VAR 0 3
18423: PUSH
18424: LD_INT 20
18426: GREATER
18427: IFFALSE 18354
// end ;
18429: PPOPN 3
18431: END
// every 0 0$1 trigger StreamModeActive and sTime do
18432: LD_EXP 19
18436: PUSH
18437: LD_EXP 70
18441: AND
18442: IFFALSE 18477
18444: GO 18446
18446: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18447: LD_INT 28
18449: PPUSH
18450: LD_OWVAR 2
18454: PPUSH
18455: LD_INT 2
18457: PPUSH
18458: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18462: LD_INT 30
18464: PPUSH
18465: LD_OWVAR 2
18469: PPUSH
18470: LD_INT 2
18472: PPUSH
18473: CALL_OW 322
// end ;
18477: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18478: LD_EXP 19
18482: PUSH
18483: LD_EXP 71
18487: AND
18488: IFFALSE 18609
18490: GO 18492
18492: DISABLE
18493: LD_INT 0
18495: PPUSH
18496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_OWVAR 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: LD_INT 23
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 2
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18609
// for i in tmp do
18560: LD_ADDR_VAR 0 1
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18607
// begin if Crawls ( i ) then
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL_OW 318
18582: IFFALSE 18593
// ComWalk ( i ) ;
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 138
// SetClass ( i , 2 ) ;
18593: LD_VAR 0 1
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 336
// end ;
18605: GO 18570
18607: POP
18608: POP
// end ;
18609: PPOPN 2
18611: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18612: LD_EXP 19
18616: PUSH
18617: LD_EXP 72
18621: AND
18622: IFFALSE 18903
18624: GO 18626
18626: DISABLE
18627: LD_INT 0
18629: PPUSH
18630: PPUSH
18631: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18632: LD_OWVAR 2
18636: PPUSH
18637: LD_INT 9
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18650: LD_INT 9
18652: PPUSH
18653: LD_OWVAR 2
18657: PPUSH
18658: CALL_OW 343
// uc_side := 9 ;
18662: LD_ADDR_OWVAR 20
18666: PUSH
18667: LD_INT 9
18669: ST_TO_ADDR
// uc_nation := 2 ;
18670: LD_ADDR_OWVAR 21
18674: PUSH
18675: LD_INT 2
18677: ST_TO_ADDR
// hc_name := Dark Warrior ;
18678: LD_ADDR_OWVAR 26
18682: PUSH
18683: LD_STRING Dark Warrior
18685: ST_TO_ADDR
// hc_gallery :=  ;
18686: LD_ADDR_OWVAR 33
18690: PUSH
18691: LD_STRING 
18693: ST_TO_ADDR
// hc_noskilllimit := true ;
18694: LD_ADDR_OWVAR 76
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18702: LD_ADDR_OWVAR 31
18706: PUSH
18707: LD_INT 30
18709: PUSH
18710: LD_INT 30
18712: PUSH
18713: LD_INT 30
18715: PUSH
18716: LD_INT 30
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: ST_TO_ADDR
// un := CreateHuman ;
18725: LD_ADDR_VAR 0 3
18729: PUSH
18730: CALL_OW 44
18734: ST_TO_ADDR
// hc_noskilllimit := false ;
18735: LD_ADDR_OWVAR 76
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: CALL_OW 51
// p := 0 ;
18755: LD_ADDR_VAR 0 2
18759: PUSH
18760: LD_INT 0
18762: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18763: LD_INT 35
18765: PPUSH
18766: CALL_OW 67
// p := p + 1 ;
18770: LD_ADDR_VAR 0 2
18774: PUSH
18775: LD_VAR 0 2
18779: PUSH
18780: LD_INT 1
18782: PLUS
18783: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18784: LD_VAR 0 3
18788: PPUSH
18789: CALL_OW 256
18793: PUSH
18794: LD_INT 1000
18796: LESS
18797: IFFALSE 18811
// SetLives ( un , 1000 ) ;
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1000
18806: PPUSH
18807: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18811: LD_VAR 0 3
18815: PPUSH
18816: LD_INT 81
18818: PUSH
18819: LD_OWVAR 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 91
18830: PUSH
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 30
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 69
18852: PPUSH
18853: LD_VAR 0 3
18857: PPUSH
18858: CALL_OW 74
18862: PPUSH
18863: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18867: LD_VAR 0 2
18871: PUSH
18872: LD_INT 60
18874: GREATER
18875: PUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 301
18885: OR
18886: IFFALSE 18763
// if un then
18888: LD_VAR 0 3
18892: IFFALSE 18903
// RemoveUnit ( un ) ;
18894: LD_VAR 0 3
18898: PPUSH
18899: CALL_OW 64
// end ;
18903: PPOPN 3
18905: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18906: LD_INT 0
18908: PPUSH
// case cmd of 301 :
18909: LD_VAR 0 1
18913: PUSH
18914: LD_INT 301
18916: DOUBLE
18917: EQUAL
18918: IFTRUE 18922
18920: GO 18954
18922: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18923: LD_VAR 0 6
18927: PPUSH
18928: LD_VAR 0 7
18932: PPUSH
18933: LD_VAR 0 8
18937: PPUSH
18938: LD_VAR 0 4
18942: PPUSH
18943: LD_VAR 0 5
18947: PPUSH
18948: CALL 20155 0 5
18952: GO 19075
18954: LD_INT 302
18956: DOUBLE
18957: EQUAL
18958: IFTRUE 18962
18960: GO 18999
18962: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18963: LD_VAR 0 6
18967: PPUSH
18968: LD_VAR 0 7
18972: PPUSH
18973: LD_VAR 0 8
18977: PPUSH
18978: LD_VAR 0 9
18982: PPUSH
18983: LD_VAR 0 4
18987: PPUSH
18988: LD_VAR 0 5
18992: PPUSH
18993: CALL 20246 0 6
18997: GO 19075
18999: LD_INT 303
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19044
19007: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19008: LD_VAR 0 6
19012: PPUSH
19013: LD_VAR 0 7
19017: PPUSH
19018: LD_VAR 0 8
19022: PPUSH
19023: LD_VAR 0 9
19027: PPUSH
19028: LD_VAR 0 4
19032: PPUSH
19033: LD_VAR 0 5
19037: PPUSH
19038: CALL 19080 0 6
19042: GO 19075
19044: LD_INT 304
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19074
19052: POP
// hHackTeleport ( unit , x , y ) ; end ;
19053: LD_VAR 0 2
19057: PPUSH
19058: LD_VAR 0 4
19062: PPUSH
19063: LD_VAR 0 5
19067: PPUSH
19068: CALL 20839 0 3
19072: GO 19075
19074: POP
// end ;
19075: LD_VAR 0 12
19079: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19080: LD_INT 0
19082: PPUSH
19083: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 1
19091: LESS
19092: PUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 3
19100: GREATER
19101: OR
19102: PUSH
19103: LD_VAR 0 5
19107: PPUSH
19108: LD_VAR 0 6
19112: PPUSH
19113: CALL_OW 428
19117: OR
19118: IFFALSE 19122
// exit ;
19120: GO 19842
// uc_side := your_side ;
19122: LD_ADDR_OWVAR 20
19126: PUSH
19127: LD_OWVAR 2
19131: ST_TO_ADDR
// uc_nation := nation ;
19132: LD_ADDR_OWVAR 21
19136: PUSH
19137: LD_VAR 0 1
19141: ST_TO_ADDR
// bc_level = 1 ;
19142: LD_ADDR_OWVAR 43
19146: PUSH
19147: LD_INT 1
19149: ST_TO_ADDR
// case btype of 1 :
19150: LD_VAR 0 2
19154: PUSH
19155: LD_INT 1
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19174
19163: POP
// bc_type := b_depot ; 2 :
19164: LD_ADDR_OWVAR 42
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
19172: GO 19786
19174: LD_INT 2
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19193
19182: POP
// bc_type := b_warehouse ; 3 :
19183: LD_ADDR_OWVAR 42
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
19191: GO 19786
19193: LD_INT 3
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19212
19201: POP
// bc_type := b_lab ; 4 .. 9 :
19202: LD_ADDR_OWVAR 42
19206: PUSH
19207: LD_INT 6
19209: ST_TO_ADDR
19210: GO 19786
19212: LD_INT 4
19214: DOUBLE
19215: GREATEREQUAL
19216: IFFALSE 19224
19218: LD_INT 9
19220: DOUBLE
19221: LESSEQUAL
19222: IFTRUE 19226
19224: GO 19278
19226: POP
// begin bc_type := b_lab_half ;
19227: LD_ADDR_OWVAR 42
19231: PUSH
19232: LD_INT 7
19234: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19235: LD_ADDR_OWVAR 44
19239: PUSH
19240: LD_INT 10
19242: PUSH
19243: LD_INT 11
19245: PUSH
19246: LD_INT 12
19248: PUSH
19249: LD_INT 15
19251: PUSH
19252: LD_INT 14
19254: PUSH
19255: LD_INT 13
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: LD_VAR 0 2
19270: PUSH
19271: LD_INT 3
19273: MINUS
19274: ARRAY
19275: ST_TO_ADDR
// end ; 10 .. 13 :
19276: GO 19786
19278: LD_INT 10
19280: DOUBLE
19281: GREATEREQUAL
19282: IFFALSE 19290
19284: LD_INT 13
19286: DOUBLE
19287: LESSEQUAL
19288: IFTRUE 19292
19290: GO 19369
19292: POP
// begin bc_type := b_lab_full ;
19293: LD_ADDR_OWVAR 42
19297: PUSH
19298: LD_INT 8
19300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19301: LD_ADDR_OWVAR 44
19305: PUSH
19306: LD_INT 10
19308: PUSH
19309: LD_INT 12
19311: PUSH
19312: LD_INT 14
19314: PUSH
19315: LD_INT 13
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: LD_VAR 0 2
19328: PUSH
19329: LD_INT 9
19331: MINUS
19332: ARRAY
19333: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19334: LD_ADDR_OWVAR 45
19338: PUSH
19339: LD_INT 11
19341: PUSH
19342: LD_INT 15
19344: PUSH
19345: LD_INT 12
19347: PUSH
19348: LD_INT 15
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: PUSH
19357: LD_VAR 0 2
19361: PUSH
19362: LD_INT 9
19364: MINUS
19365: ARRAY
19366: ST_TO_ADDR
// end ; 14 :
19367: GO 19786
19369: LD_INT 14
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19388
19377: POP
// bc_type := b_workshop ; 15 :
19378: LD_ADDR_OWVAR 42
19382: PUSH
19383: LD_INT 2
19385: ST_TO_ADDR
19386: GO 19786
19388: LD_INT 15
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19407
19396: POP
// bc_type := b_factory ; 16 :
19397: LD_ADDR_OWVAR 42
19401: PUSH
19402: LD_INT 3
19404: ST_TO_ADDR
19405: GO 19786
19407: LD_INT 16
19409: DOUBLE
19410: EQUAL
19411: IFTRUE 19415
19413: GO 19426
19415: POP
// bc_type := b_ext_gun ; 17 :
19416: LD_ADDR_OWVAR 42
19420: PUSH
19421: LD_INT 17
19423: ST_TO_ADDR
19424: GO 19786
19426: LD_INT 17
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19462
19434: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19435: LD_ADDR_OWVAR 42
19439: PUSH
19440: LD_INT 19
19442: PUSH
19443: LD_INT 23
19445: PUSH
19446: LD_INT 19
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PUSH
19454: LD_VAR 0 1
19458: ARRAY
19459: ST_TO_ADDR
19460: GO 19786
19462: LD_INT 18
19464: DOUBLE
19465: EQUAL
19466: IFTRUE 19470
19468: GO 19481
19470: POP
// bc_type := b_ext_radar ; 19 :
19471: LD_ADDR_OWVAR 42
19475: PUSH
19476: LD_INT 20
19478: ST_TO_ADDR
19479: GO 19786
19481: LD_INT 19
19483: DOUBLE
19484: EQUAL
19485: IFTRUE 19489
19487: GO 19500
19489: POP
// bc_type := b_ext_radio ; 20 :
19490: LD_ADDR_OWVAR 42
19494: PUSH
19495: LD_INT 22
19497: ST_TO_ADDR
19498: GO 19786
19500: LD_INT 20
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19519
19508: POP
// bc_type := b_ext_siberium ; 21 :
19509: LD_ADDR_OWVAR 42
19513: PUSH
19514: LD_INT 21
19516: ST_TO_ADDR
19517: GO 19786
19519: LD_INT 21
19521: DOUBLE
19522: EQUAL
19523: IFTRUE 19527
19525: GO 19538
19527: POP
// bc_type := b_ext_computer ; 22 :
19528: LD_ADDR_OWVAR 42
19532: PUSH
19533: LD_INT 24
19535: ST_TO_ADDR
19536: GO 19786
19538: LD_INT 22
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 19557
19546: POP
// bc_type := b_ext_track ; 23 :
19547: LD_ADDR_OWVAR 42
19551: PUSH
19552: LD_INT 16
19554: ST_TO_ADDR
19555: GO 19786
19557: LD_INT 23
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19576
19565: POP
// bc_type := b_ext_laser ; 24 :
19566: LD_ADDR_OWVAR 42
19570: PUSH
19571: LD_INT 25
19573: ST_TO_ADDR
19574: GO 19786
19576: LD_INT 24
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19595
19584: POP
// bc_type := b_control_tower ; 25 :
19585: LD_ADDR_OWVAR 42
19589: PUSH
19590: LD_INT 36
19592: ST_TO_ADDR
19593: GO 19786
19595: LD_INT 25
19597: DOUBLE
19598: EQUAL
19599: IFTRUE 19603
19601: GO 19614
19603: POP
// bc_type := b_breastwork ; 26 :
19604: LD_ADDR_OWVAR 42
19608: PUSH
19609: LD_INT 31
19611: ST_TO_ADDR
19612: GO 19786
19614: LD_INT 26
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19633
19622: POP
// bc_type := b_bunker ; 27 :
19623: LD_ADDR_OWVAR 42
19627: PUSH
19628: LD_INT 32
19630: ST_TO_ADDR
19631: GO 19786
19633: LD_INT 27
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19652
19641: POP
// bc_type := b_turret ; 28 :
19642: LD_ADDR_OWVAR 42
19646: PUSH
19647: LD_INT 33
19649: ST_TO_ADDR
19650: GO 19786
19652: LD_INT 28
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19671
19660: POP
// bc_type := b_armoury ; 29 :
19661: LD_ADDR_OWVAR 42
19665: PUSH
19666: LD_INT 4
19668: ST_TO_ADDR
19669: GO 19786
19671: LD_INT 29
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19690
19679: POP
// bc_type := b_barracks ; 30 :
19680: LD_ADDR_OWVAR 42
19684: PUSH
19685: LD_INT 5
19687: ST_TO_ADDR
19688: GO 19786
19690: LD_INT 30
19692: DOUBLE
19693: EQUAL
19694: IFTRUE 19698
19696: GO 19709
19698: POP
// bc_type := b_solar_power ; 31 :
19699: LD_ADDR_OWVAR 42
19703: PUSH
19704: LD_INT 27
19706: ST_TO_ADDR
19707: GO 19786
19709: LD_INT 31
19711: DOUBLE
19712: EQUAL
19713: IFTRUE 19717
19715: GO 19728
19717: POP
// bc_type := b_oil_power ; 32 :
19718: LD_ADDR_OWVAR 42
19722: PUSH
19723: LD_INT 26
19725: ST_TO_ADDR
19726: GO 19786
19728: LD_INT 32
19730: DOUBLE
19731: EQUAL
19732: IFTRUE 19736
19734: GO 19747
19736: POP
// bc_type := b_siberite_power ; 33 :
19737: LD_ADDR_OWVAR 42
19741: PUSH
19742: LD_INT 28
19744: ST_TO_ADDR
19745: GO 19786
19747: LD_INT 33
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19766
19755: POP
// bc_type := b_oil_mine ; 34 :
19756: LD_ADDR_OWVAR 42
19760: PUSH
19761: LD_INT 29
19763: ST_TO_ADDR
19764: GO 19786
19766: LD_INT 34
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19785
19774: POP
// bc_type := b_siberite_mine ; end ;
19775: LD_ADDR_OWVAR 42
19779: PUSH
19780: LD_INT 30
19782: ST_TO_ADDR
19783: GO 19786
19785: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19786: LD_ADDR_VAR 0 8
19790: PUSH
19791: LD_VAR 0 5
19795: PPUSH
19796: LD_VAR 0 6
19800: PPUSH
19801: LD_VAR 0 3
19805: PPUSH
19806: CALL_OW 47
19810: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19811: LD_OWVAR 42
19815: PUSH
19816: LD_INT 32
19818: PUSH
19819: LD_INT 33
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: IN
19826: IFFALSE 19842
// PlaceWeaponTurret ( b , weapon ) ;
19828: LD_VAR 0 8
19832: PPUSH
19833: LD_VAR 0 4
19837: PPUSH
19838: CALL_OW 431
// end ;
19842: LD_VAR 0 7
19846: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19847: LD_INT 0
19849: PPUSH
19850: PPUSH
19851: PPUSH
19852: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19853: LD_ADDR_VAR 0 4
19857: PUSH
19858: LD_INT 22
19860: PUSH
19861: LD_OWVAR 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 30
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 30
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PPUSH
19902: CALL_OW 69
19906: ST_TO_ADDR
// if not tmp then
19907: LD_VAR 0 4
19911: NOT
19912: IFFALSE 19916
// exit ;
19914: GO 19975
// for i in tmp do
19916: LD_ADDR_VAR 0 2
19920: PUSH
19921: LD_VAR 0 4
19925: PUSH
19926: FOR_IN
19927: IFFALSE 19973
// for j = 1 to 3 do
19929: LD_ADDR_VAR 0 3
19933: PUSH
19934: DOUBLE
19935: LD_INT 1
19937: DEC
19938: ST_TO_ADDR
19939: LD_INT 3
19941: PUSH
19942: FOR_TO
19943: IFFALSE 19969
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19945: LD_VAR 0 2
19949: PPUSH
19950: CALL_OW 274
19954: PPUSH
19955: LD_VAR 0 3
19959: PPUSH
19960: LD_INT 99999
19962: PPUSH
19963: CALL_OW 277
19967: GO 19942
19969: POP
19970: POP
19971: GO 19926
19973: POP
19974: POP
// end ;
19975: LD_VAR 0 1
19979: RET
// export function hHackSetLevel10 ; var i , j ; begin
19980: LD_INT 0
19982: PPUSH
19983: PPUSH
19984: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_INT 21
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 69
20004: PUSH
20005: FOR_IN
20006: IFFALSE 20058
// if IsSelected ( i ) then
20008: LD_VAR 0 2
20012: PPUSH
20013: CALL_OW 306
20017: IFFALSE 20056
// begin for j := 1 to 4 do
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 4
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20054
// SetSkill ( i , j , 10 ) ;
20035: LD_VAR 0 2
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: LD_INT 10
20047: PPUSH
20048: CALL_OW 237
20052: GO 20032
20054: POP
20055: POP
// end ;
20056: GO 20005
20058: POP
20059: POP
// end ;
20060: LD_VAR 0 1
20064: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20065: LD_INT 0
20067: PPUSH
20068: PPUSH
20069: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20070: LD_ADDR_VAR 0 2
20074: PUSH
20075: LD_INT 22
20077: PUSH
20078: LD_OWVAR 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 21
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PPUSH
20101: CALL_OW 69
20105: PUSH
20106: FOR_IN
20107: IFFALSE 20148
// begin for j := 1 to 4 do
20109: LD_ADDR_VAR 0 3
20113: PUSH
20114: DOUBLE
20115: LD_INT 1
20117: DEC
20118: ST_TO_ADDR
20119: LD_INT 4
20121: PUSH
20122: FOR_TO
20123: IFFALSE 20144
// SetSkill ( i , j , 10 ) ;
20125: LD_VAR 0 2
20129: PPUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: LD_INT 10
20137: PPUSH
20138: CALL_OW 237
20142: GO 20122
20144: POP
20145: POP
// end ;
20146: GO 20106
20148: POP
20149: POP
// end ;
20150: LD_VAR 0 1
20154: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20155: LD_INT 0
20157: PPUSH
// uc_side := your_side ;
20158: LD_ADDR_OWVAR 20
20162: PUSH
20163: LD_OWVAR 2
20167: ST_TO_ADDR
// uc_nation := nation ;
20168: LD_ADDR_OWVAR 21
20172: PUSH
20173: LD_VAR 0 1
20177: ST_TO_ADDR
// InitHc ;
20178: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20182: LD_INT 0
20184: PPUSH
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20199: LD_VAR 0 4
20203: PPUSH
20204: LD_VAR 0 5
20208: PPUSH
20209: CALL_OW 428
20213: PUSH
20214: LD_INT 0
20216: EQUAL
20217: IFFALSE 20241
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20219: CALL_OW 44
20223: PPUSH
20224: LD_VAR 0 4
20228: PPUSH
20229: LD_VAR 0 5
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 48
// end ;
20241: LD_VAR 0 6
20245: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
// uc_side := your_side ;
20250: LD_ADDR_OWVAR 20
20254: PUSH
20255: LD_OWVAR 2
20259: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20260: LD_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 4
20276: PUSH
20277: LD_INT 5
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: IN
20287: IFFALSE 20299
// uc_nation := nation_american else
20289: LD_ADDR_OWVAR 21
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
20297: GO 20342
// if chassis in [ 11 , 12 , 13 , 14 ] then
20299: LD_VAR 0 1
20303: PUSH
20304: LD_INT 11
20306: PUSH
20307: LD_INT 12
20309: PUSH
20310: LD_INT 13
20312: PUSH
20313: LD_INT 14
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: IN
20322: IFFALSE 20334
// uc_nation := nation_arabian else
20324: LD_ADDR_OWVAR 21
20328: PUSH
20329: LD_INT 2
20331: ST_TO_ADDR
20332: GO 20342
// uc_nation := nation_russian ;
20334: LD_ADDR_OWVAR 21
20338: PUSH
20339: LD_INT 3
20341: ST_TO_ADDR
// vc_chassis := chassis ;
20342: LD_ADDR_OWVAR 37
20346: PUSH
20347: LD_VAR 0 1
20351: ST_TO_ADDR
// vc_engine := engine ;
20352: LD_ADDR_OWVAR 39
20356: PUSH
20357: LD_VAR 0 2
20361: ST_TO_ADDR
// vc_control := control ;
20362: LD_ADDR_OWVAR 38
20366: PUSH
20367: LD_VAR 0 3
20371: ST_TO_ADDR
// vc_weapon := weapon ;
20372: LD_ADDR_OWVAR 40
20376: PUSH
20377: LD_VAR 0 4
20381: ST_TO_ADDR
// un := CreateVehicle ;
20382: LD_ADDR_VAR 0 8
20386: PUSH
20387: CALL_OW 45
20391: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20392: LD_VAR 0 8
20396: PPUSH
20397: LD_INT 0
20399: PPUSH
20400: LD_INT 5
20402: PPUSH
20403: CALL_OW 12
20407: PPUSH
20408: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20412: LD_VAR 0 8
20416: PPUSH
20417: LD_VAR 0 5
20421: PPUSH
20422: LD_VAR 0 6
20426: PPUSH
20427: LD_INT 1
20429: PPUSH
20430: CALL_OW 48
// end ;
20434: LD_VAR 0 7
20438: RET
// export hInvincible ; every 1 do
20439: GO 20441
20441: DISABLE
// hInvincible := [ ] ;
20442: LD_ADDR_EXP 73
20446: PUSH
20447: EMPTY
20448: ST_TO_ADDR
20449: END
// every 10 do var i ;
20450: GO 20452
20452: DISABLE
20453: LD_INT 0
20455: PPUSH
// begin enable ;
20456: ENABLE
// if not hInvincible then
20457: LD_EXP 73
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20510
// for i in hInvincible do
20466: LD_ADDR_VAR 0 1
20470: PUSH
20471: LD_EXP 73
20475: PUSH
20476: FOR_IN
20477: IFFALSE 20508
// if GetLives ( i ) < 1000 then
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL_OW 256
20488: PUSH
20489: LD_INT 1000
20491: LESS
20492: IFFALSE 20506
// SetLives ( i , 1000 ) ;
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_INT 1000
20501: PPUSH
20502: CALL_OW 234
20506: GO 20476
20508: POP
20509: POP
// end ;
20510: PPOPN 1
20512: END
// export function hHackInvincible ; var i ; begin
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20517: LD_ADDR_VAR 0 2
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: PPUSH
20550: CALL_OW 69
20554: PUSH
20555: FOR_IN
20556: IFFALSE 20617
// if IsSelected ( i ) then
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 306
20567: IFFALSE 20615
// begin if i in hInvincible then
20569: LD_VAR 0 2
20573: PUSH
20574: LD_EXP 73
20578: IN
20579: IFFALSE 20599
// hInvincible := hInvincible diff i else
20581: LD_ADDR_EXP 73
20585: PUSH
20586: LD_EXP 73
20590: PUSH
20591: LD_VAR 0 2
20595: DIFF
20596: ST_TO_ADDR
20597: GO 20615
// hInvincible := hInvincible union i ;
20599: LD_ADDR_EXP 73
20603: PUSH
20604: LD_EXP 73
20608: PUSH
20609: LD_VAR 0 2
20613: UNION
20614: ST_TO_ADDR
// end ;
20615: GO 20555
20617: POP
20618: POP
// end ;
20619: LD_VAR 0 1
20623: RET
// export function hHackInvisible ; var i , j ; begin
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
20628: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20629: LD_ADDR_VAR 0 2
20633: PUSH
20634: LD_INT 21
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: FOR_IN
20650: IFFALSE 20674
// if IsSelected ( i ) then
20652: LD_VAR 0 2
20656: PPUSH
20657: CALL_OW 306
20661: IFFALSE 20672
// ComForceInvisible ( i ) ;
20663: LD_VAR 0 2
20667: PPUSH
20668: CALL_OW 496
20672: GO 20649
20674: POP
20675: POP
// end ;
20676: LD_VAR 0 1
20680: RET
// export function hHackChangeYourSide ; begin
20681: LD_INT 0
20683: PPUSH
// if your_side = 8 then
20684: LD_OWVAR 2
20688: PUSH
20689: LD_INT 8
20691: EQUAL
20692: IFFALSE 20704
// your_side := 0 else
20694: LD_ADDR_OWVAR 2
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
20702: GO 20718
// your_side := your_side + 1 ;
20704: LD_ADDR_OWVAR 2
20708: PUSH
20709: LD_OWVAR 2
20713: PUSH
20714: LD_INT 1
20716: PLUS
20717: ST_TO_ADDR
// end ;
20718: LD_VAR 0 1
20722: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20723: LD_INT 0
20725: PPUSH
20726: PPUSH
20727: PPUSH
// for i in all_units do
20728: LD_ADDR_VAR 0 2
20732: PUSH
20733: LD_OWVAR 3
20737: PUSH
20738: FOR_IN
20739: IFFALSE 20817
// if IsSelected ( i ) then
20741: LD_VAR 0 2
20745: PPUSH
20746: CALL_OW 306
20750: IFFALSE 20815
// begin j := GetSide ( i ) ;
20752: LD_ADDR_VAR 0 3
20756: PUSH
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 255
20766: ST_TO_ADDR
// if j = 8 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 8
20774: EQUAL
20775: IFFALSE 20787
// j := 0 else
20777: LD_ADDR_VAR 0 3
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
20785: GO 20801
// j := j + 1 ;
20787: LD_ADDR_VAR 0 3
20791: PUSH
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 1
20799: PLUS
20800: ST_TO_ADDR
// SetSide ( i , j ) ;
20801: LD_VAR 0 2
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: CALL_OW 235
// end ;
20815: GO 20738
20817: POP
20818: POP
// end ;
20819: LD_VAR 0 1
20823: RET
// export function hHackFog ; begin
20824: LD_INT 0
20826: PPUSH
// FogOff ( true ) ;
20827: LD_INT 1
20829: PPUSH
20830: CALL_OW 344
// end ;
20834: LD_VAR 0 1
20838: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20839: LD_INT 0
20841: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20842: LD_VAR 0 1
20846: PPUSH
20847: LD_VAR 0 2
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: LD_INT 1
20862: PPUSH
20863: CALL_OW 483
// CenterOnXY ( x , y ) ;
20867: LD_VAR 0 2
20871: PPUSH
20872: LD_VAR 0 3
20876: PPUSH
20877: CALL_OW 84
// end ; end_of_file
20881: LD_VAR 0 4
20885: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20886: LD_INT 0
20888: PPUSH
20889: PPUSH
// if exist_mode then
20890: LD_VAR 0 2
20894: IFFALSE 20919
// unit := CreateCharacter ( prefix & ident ) else
20896: LD_ADDR_VAR 0 5
20900: PUSH
20901: LD_VAR 0 3
20905: PUSH
20906: LD_VAR 0 1
20910: STR
20911: PPUSH
20912: CALL_OW 34
20916: ST_TO_ADDR
20917: GO 20934
// unit := NewCharacter ( ident ) ;
20919: LD_ADDR_VAR 0 5
20923: PUSH
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 25
20933: ST_TO_ADDR
// result := unit ;
20934: LD_ADDR_VAR 0 4
20938: PUSH
20939: LD_VAR 0 5
20943: ST_TO_ADDR
// end ;
20944: LD_VAR 0 4
20948: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20949: LD_INT 0
20951: PPUSH
20952: PPUSH
// if not side or not nation then
20953: LD_VAR 0 1
20957: NOT
20958: PUSH
20959: LD_VAR 0 2
20963: NOT
20964: OR
20965: IFFALSE 20969
// exit ;
20967: GO 21733
// case nation of nation_american :
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21196
20982: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20983: LD_ADDR_VAR 0 4
20987: PUSH
20988: LD_INT 35
20990: PUSH
20991: LD_INT 45
20993: PUSH
20994: LD_INT 46
20996: PUSH
20997: LD_INT 47
20999: PUSH
21000: LD_INT 82
21002: PUSH
21003: LD_INT 83
21005: PUSH
21006: LD_INT 84
21008: PUSH
21009: LD_INT 85
21011: PUSH
21012: LD_INT 86
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 6
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 7
21032: PUSH
21033: LD_INT 12
21035: PUSH
21036: LD_INT 13
21038: PUSH
21039: LD_INT 10
21041: PUSH
21042: LD_INT 14
21044: PUSH
21045: LD_INT 20
21047: PUSH
21048: LD_INT 21
21050: PUSH
21051: LD_INT 22
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 32
21059: PUSH
21060: LD_INT 27
21062: PUSH
21063: LD_INT 36
21065: PUSH
21066: LD_INT 69
21068: PUSH
21069: LD_INT 39
21071: PUSH
21072: LD_INT 34
21074: PUSH
21075: LD_INT 40
21077: PUSH
21078: LD_INT 48
21080: PUSH
21081: LD_INT 49
21083: PUSH
21084: LD_INT 50
21086: PUSH
21087: LD_INT 51
21089: PUSH
21090: LD_INT 52
21092: PUSH
21093: LD_INT 53
21095: PUSH
21096: LD_INT 54
21098: PUSH
21099: LD_INT 55
21101: PUSH
21102: LD_INT 56
21104: PUSH
21105: LD_INT 57
21107: PUSH
21108: LD_INT 58
21110: PUSH
21111: LD_INT 59
21113: PUSH
21114: LD_INT 60
21116: PUSH
21117: LD_INT 61
21119: PUSH
21120: LD_INT 62
21122: PUSH
21123: LD_INT 80
21125: PUSH
21126: LD_INT 82
21128: PUSH
21129: LD_INT 83
21131: PUSH
21132: LD_INT 84
21134: PUSH
21135: LD_INT 85
21137: PUSH
21138: LD_INT 86
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: ST_TO_ADDR
21194: GO 21657
21196: LD_INT 2
21198: DOUBLE
21199: EQUAL
21200: IFTRUE 21204
21202: GO 21426
21204: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21205: LD_ADDR_VAR 0 4
21209: PUSH
21210: LD_INT 35
21212: PUSH
21213: LD_INT 45
21215: PUSH
21216: LD_INT 46
21218: PUSH
21219: LD_INT 47
21221: PUSH
21222: LD_INT 82
21224: PUSH
21225: LD_INT 83
21227: PUSH
21228: LD_INT 84
21230: PUSH
21231: LD_INT 85
21233: PUSH
21234: LD_INT 87
21236: PUSH
21237: LD_INT 70
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 11
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: LD_INT 4
21251: PUSH
21252: LD_INT 5
21254: PUSH
21255: LD_INT 6
21257: PUSH
21258: LD_INT 15
21260: PUSH
21261: LD_INT 18
21263: PUSH
21264: LD_INT 7
21266: PUSH
21267: LD_INT 17
21269: PUSH
21270: LD_INT 8
21272: PUSH
21273: LD_INT 20
21275: PUSH
21276: LD_INT 21
21278: PUSH
21279: LD_INT 22
21281: PUSH
21282: LD_INT 72
21284: PUSH
21285: LD_INT 26
21287: PUSH
21288: LD_INT 69
21290: PUSH
21291: LD_INT 39
21293: PUSH
21294: LD_INT 40
21296: PUSH
21297: LD_INT 41
21299: PUSH
21300: LD_INT 42
21302: PUSH
21303: LD_INT 43
21305: PUSH
21306: LD_INT 48
21308: PUSH
21309: LD_INT 49
21311: PUSH
21312: LD_INT 50
21314: PUSH
21315: LD_INT 51
21317: PUSH
21318: LD_INT 52
21320: PUSH
21321: LD_INT 53
21323: PUSH
21324: LD_INT 54
21326: PUSH
21327: LD_INT 55
21329: PUSH
21330: LD_INT 56
21332: PUSH
21333: LD_INT 60
21335: PUSH
21336: LD_INT 61
21338: PUSH
21339: LD_INT 62
21341: PUSH
21342: LD_INT 66
21344: PUSH
21345: LD_INT 67
21347: PUSH
21348: LD_INT 68
21350: PUSH
21351: LD_INT 81
21353: PUSH
21354: LD_INT 82
21356: PUSH
21357: LD_INT 83
21359: PUSH
21360: LD_INT 84
21362: PUSH
21363: LD_INT 85
21365: PUSH
21366: LD_INT 87
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: ST_TO_ADDR
21424: GO 21657
21426: LD_INT 3
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21656
21434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21435: LD_ADDR_VAR 0 4
21439: PUSH
21440: LD_INT 46
21442: PUSH
21443: LD_INT 47
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: LD_INT 82
21454: PUSH
21455: LD_INT 83
21457: PUSH
21458: LD_INT 84
21460: PUSH
21461: LD_INT 85
21463: PUSH
21464: LD_INT 86
21466: PUSH
21467: LD_INT 11
21469: PUSH
21470: LD_INT 9
21472: PUSH
21473: LD_INT 20
21475: PUSH
21476: LD_INT 19
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 24
21484: PUSH
21485: LD_INT 22
21487: PUSH
21488: LD_INT 25
21490: PUSH
21491: LD_INT 28
21493: PUSH
21494: LD_INT 29
21496: PUSH
21497: LD_INT 30
21499: PUSH
21500: LD_INT 31
21502: PUSH
21503: LD_INT 37
21505: PUSH
21506: LD_INT 38
21508: PUSH
21509: LD_INT 32
21511: PUSH
21512: LD_INT 27
21514: PUSH
21515: LD_INT 33
21517: PUSH
21518: LD_INT 69
21520: PUSH
21521: LD_INT 39
21523: PUSH
21524: LD_INT 34
21526: PUSH
21527: LD_INT 40
21529: PUSH
21530: LD_INT 71
21532: PUSH
21533: LD_INT 23
21535: PUSH
21536: LD_INT 44
21538: PUSH
21539: LD_INT 48
21541: PUSH
21542: LD_INT 49
21544: PUSH
21545: LD_INT 50
21547: PUSH
21548: LD_INT 51
21550: PUSH
21551: LD_INT 52
21553: PUSH
21554: LD_INT 53
21556: PUSH
21557: LD_INT 54
21559: PUSH
21560: LD_INT 55
21562: PUSH
21563: LD_INT 56
21565: PUSH
21566: LD_INT 57
21568: PUSH
21569: LD_INT 58
21571: PUSH
21572: LD_INT 59
21574: PUSH
21575: LD_INT 63
21577: PUSH
21578: LD_INT 64
21580: PUSH
21581: LD_INT 65
21583: PUSH
21584: LD_INT 82
21586: PUSH
21587: LD_INT 83
21589: PUSH
21590: LD_INT 84
21592: PUSH
21593: LD_INT 85
21595: PUSH
21596: LD_INT 86
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: ST_TO_ADDR
21654: GO 21657
21656: POP
// if state > - 1 and state < 3 then
21657: LD_VAR 0 3
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: GREATER
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 3
21674: LESS
21675: AND
21676: IFFALSE 21733
// for i in result do
21678: LD_ADDR_VAR 0 5
21682: PUSH
21683: LD_VAR 0 4
21687: PUSH
21688: FOR_IN
21689: IFFALSE 21731
// if GetTech ( i , side ) <> state then
21691: LD_VAR 0 5
21695: PPUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 321
21705: PUSH
21706: LD_VAR 0 3
21710: NONEQUAL
21711: IFFALSE 21729
// result := result diff i ;
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: LD_VAR 0 4
21722: PUSH
21723: LD_VAR 0 5
21727: DIFF
21728: ST_TO_ADDR
21729: GO 21688
21731: POP
21732: POP
// end ;
21733: LD_VAR 0 4
21737: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21738: LD_INT 0
21740: PPUSH
21741: PPUSH
21742: PPUSH
// result := true ;
21743: LD_ADDR_VAR 0 3
21747: PUSH
21748: LD_INT 1
21750: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21751: LD_ADDR_VAR 0 5
21755: PUSH
21756: LD_VAR 0 2
21760: PPUSH
21761: CALL_OW 480
21765: ST_TO_ADDR
// if not tmp then
21766: LD_VAR 0 5
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 21824
// for i in tmp do
21775: LD_ADDR_VAR 0 4
21779: PUSH
21780: LD_VAR 0 5
21784: PUSH
21785: FOR_IN
21786: IFFALSE 21822
// if GetTech ( i , side ) <> state_researched then
21788: LD_VAR 0 4
21792: PPUSH
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 321
21802: PUSH
21803: LD_INT 2
21805: NONEQUAL
21806: IFFALSE 21820
// begin result := false ;
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// exit ;
21816: POP
21817: POP
21818: GO 21824
// end ;
21820: GO 21785
21822: POP
21823: POP
// end ;
21824: LD_VAR 0 3
21828: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21844: LD_VAR 0 1
21848: NOT
21849: PUSH
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 257
21859: PUSH
21860: LD_INT 9
21862: NONEQUAL
21863: OR
21864: IFFALSE 21868
// exit ;
21866: GO 22441
// side := GetSide ( unit ) ;
21868: LD_ADDR_VAR 0 9
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 255
21882: ST_TO_ADDR
// tech_space := tech_spacanom ;
21883: LD_ADDR_VAR 0 12
21887: PUSH
21888: LD_INT 29
21890: ST_TO_ADDR
// tech_time := tech_taurad ;
21891: LD_ADDR_VAR 0 13
21895: PUSH
21896: LD_INT 28
21898: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21899: LD_ADDR_VAR 0 11
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 310
21913: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21914: LD_VAR 0 11
21918: PPUSH
21919: CALL_OW 247
21923: PUSH
21924: LD_INT 2
21926: EQUAL
21927: IFFALSE 21931
// exit ;
21929: GO 22441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21931: LD_ADDR_VAR 0 8
21935: PUSH
21936: LD_INT 81
21938: PUSH
21939: LD_VAR 0 9
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: LD_INT 21
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PPUSH
21969: CALL_OW 69
21973: ST_TO_ADDR
// if not tmp then
21974: LD_VAR 0 8
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22441
// if in_unit then
21983: LD_VAR 0 11
21987: IFFALSE 22011
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21989: LD_ADDR_VAR 0 10
21993: PUSH
21994: LD_VAR 0 8
21998: PPUSH
21999: LD_VAR 0 11
22003: PPUSH
22004: CALL_OW 74
22008: ST_TO_ADDR
22009: GO 22031
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22011: LD_ADDR_VAR 0 10
22015: PUSH
22016: LD_VAR 0 8
22020: PPUSH
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 74
22030: ST_TO_ADDR
// if not enemy then
22031: LD_VAR 0 10
22035: NOT
22036: IFFALSE 22040
// exit ;
22038: GO 22441
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22040: LD_VAR 0 11
22044: PUSH
22045: LD_VAR 0 11
22049: PPUSH
22050: LD_VAR 0 10
22054: PPUSH
22055: CALL_OW 296
22059: PUSH
22060: LD_INT 13
22062: GREATER
22063: AND
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_VAR 0 10
22074: PPUSH
22075: CALL_OW 296
22079: PUSH
22080: LD_INT 12
22082: GREATER
22083: OR
22084: IFFALSE 22088
// exit ;
22086: GO 22441
// missile := [ 1 ] ;
22088: LD_ADDR_VAR 0 14
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22099: LD_VAR 0 9
22103: PPUSH
22104: LD_VAR 0 12
22108: PPUSH
22109: CALL_OW 325
22113: IFFALSE 22142
// missile := Insert ( missile , missile + 1 , 2 ) ;
22115: LD_ADDR_VAR 0 14
22119: PUSH
22120: LD_VAR 0 14
22124: PPUSH
22125: LD_VAR 0 14
22129: PUSH
22130: LD_INT 1
22132: PLUS
22133: PPUSH
22134: LD_INT 2
22136: PPUSH
22137: CALL_OW 2
22141: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22142: LD_VAR 0 9
22146: PPUSH
22147: LD_VAR 0 13
22151: PPUSH
22152: CALL_OW 325
22156: PUSH
22157: LD_VAR 0 10
22161: PPUSH
22162: CALL_OW 255
22166: PPUSH
22167: LD_VAR 0 13
22171: PPUSH
22172: CALL_OW 325
22176: NOT
22177: AND
22178: IFFALSE 22207
// missile := Insert ( missile , missile + 1 , 3 ) ;
22180: LD_ADDR_VAR 0 14
22184: PUSH
22185: LD_VAR 0 14
22189: PPUSH
22190: LD_VAR 0 14
22194: PUSH
22195: LD_INT 1
22197: PLUS
22198: PPUSH
22199: LD_INT 3
22201: PPUSH
22202: CALL_OW 2
22206: ST_TO_ADDR
// if missile < 2 then
22207: LD_VAR 0 14
22211: PUSH
22212: LD_INT 2
22214: LESS
22215: IFFALSE 22219
// exit ;
22217: GO 22441
// x := GetX ( enemy ) ;
22219: LD_ADDR_VAR 0 4
22223: PUSH
22224: LD_VAR 0 10
22228: PPUSH
22229: CALL_OW 250
22233: ST_TO_ADDR
// y := GetY ( enemy ) ;
22234: LD_ADDR_VAR 0 5
22238: PUSH
22239: LD_VAR 0 10
22243: PPUSH
22244: CALL_OW 251
22248: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22249: LD_ADDR_VAR 0 6
22253: PUSH
22254: LD_VAR 0 4
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL_OW 12
22270: PLUS
22271: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22272: LD_ADDR_VAR 0 7
22276: PUSH
22277: LD_VAR 0 5
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PPUSH
22286: LD_INT 1
22288: PPUSH
22289: CALL_OW 12
22293: PLUS
22294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22295: LD_VAR 0 6
22299: PPUSH
22300: LD_VAR 0 7
22304: PPUSH
22305: CALL_OW 488
22309: NOT
22310: IFFALSE 22332
// begin _x := x ;
22312: LD_ADDR_VAR 0 6
22316: PUSH
22317: LD_VAR 0 4
22321: ST_TO_ADDR
// _y := y ;
22322: LD_ADDR_VAR 0 7
22326: PUSH
22327: LD_VAR 0 5
22331: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 1
22339: PPUSH
22340: LD_VAR 0 14
22344: PPUSH
22345: CALL_OW 12
22349: ST_TO_ADDR
// case i of 1 :
22350: LD_VAR 0 3
22354: PUSH
22355: LD_INT 1
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22363
22361: GO 22380
22363: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22364: LD_VAR 0 1
22368: PPUSH
22369: LD_VAR 0 10
22373: PPUSH
22374: CALL_OW 115
22378: GO 22441
22380: LD_INT 2
22382: DOUBLE
22383: EQUAL
22384: IFTRUE 22388
22386: GO 22410
22388: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22389: LD_VAR 0 1
22393: PPUSH
22394: LD_VAR 0 6
22398: PPUSH
22399: LD_VAR 0 7
22403: PPUSH
22404: CALL_OW 153
22408: GO 22441
22410: LD_INT 3
22412: DOUBLE
22413: EQUAL
22414: IFTRUE 22418
22416: GO 22440
22418: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22419: LD_VAR 0 1
22423: PPUSH
22424: LD_VAR 0 6
22428: PPUSH
22429: LD_VAR 0 7
22433: PPUSH
22434: CALL_OW 154
22438: GO 22441
22440: POP
// end ;
22441: LD_VAR 0 2
22445: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
// if not unit or not building then
22454: LD_VAR 0 1
22458: NOT
22459: PUSH
22460: LD_VAR 0 2
22464: NOT
22465: OR
22466: IFFALSE 22470
// exit ;
22468: GO 22628
// x := GetX ( building ) ;
22470: LD_ADDR_VAR 0 5
22474: PUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: CALL_OW 250
22484: ST_TO_ADDR
// y := GetY ( building ) ;
22485: LD_ADDR_VAR 0 6
22489: PUSH
22490: LD_VAR 0 2
22494: PPUSH
22495: CALL_OW 251
22499: ST_TO_ADDR
// for i = 0 to 5 do
22500: LD_ADDR_VAR 0 4
22504: PUSH
22505: DOUBLE
22506: LD_INT 0
22508: DEC
22509: ST_TO_ADDR
22510: LD_INT 5
22512: PUSH
22513: FOR_TO
22514: IFFALSE 22626
// begin _x := ShiftX ( x , i , 3 ) ;
22516: LD_ADDR_VAR 0 7
22520: PUSH
22521: LD_VAR 0 5
22525: PPUSH
22526: LD_VAR 0 4
22530: PPUSH
22531: LD_INT 3
22533: PPUSH
22534: CALL_OW 272
22538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22539: LD_ADDR_VAR 0 8
22543: PUSH
22544: LD_VAR 0 6
22548: PPUSH
22549: LD_VAR 0 4
22553: PPUSH
22554: LD_INT 3
22556: PPUSH
22557: CALL_OW 273
22561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22562: LD_VAR 0 7
22566: PPUSH
22567: LD_VAR 0 8
22571: PPUSH
22572: CALL_OW 488
22576: NOT
22577: IFFALSE 22581
// continue ;
22579: GO 22513
// if HexInfo ( _x , _y ) = 0 then
22581: LD_VAR 0 7
22585: PPUSH
22586: LD_VAR 0 8
22590: PPUSH
22591: CALL_OW 428
22595: PUSH
22596: LD_INT 0
22598: EQUAL
22599: IFFALSE 22624
// begin ComMoveXY ( unit , _x , _y ) ;
22601: LD_VAR 0 1
22605: PPUSH
22606: LD_VAR 0 7
22610: PPUSH
22611: LD_VAR 0 8
22615: PPUSH
22616: CALL_OW 111
// exit ;
22620: POP
22621: POP
22622: GO 22628
// end ; end ;
22624: GO 22513
22626: POP
22627: POP
// end ;
22628: LD_VAR 0 3
22632: RET
// export function ScanBase ( side , base_area ) ; begin
22633: LD_INT 0
22635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22636: LD_ADDR_VAR 0 3
22640: PUSH
22641: LD_VAR 0 2
22645: PPUSH
22646: LD_INT 81
22648: PUSH
22649: LD_VAR 0 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 70
22662: ST_TO_ADDR
// end ;
22663: LD_VAR 0 3
22667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
// result := false ;
22674: LD_ADDR_VAR 0 2
22678: PUSH
22679: LD_INT 0
22681: ST_TO_ADDR
// side := GetSide ( unit ) ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 255
22696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22697: LD_ADDR_VAR 0 4
22701: PUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 248
22711: ST_TO_ADDR
// case nat of 1 :
22712: LD_VAR 0 4
22716: PUSH
22717: LD_INT 1
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22736
22725: POP
// tech := tech_lassight ; 2 :
22726: LD_ADDR_VAR 0 5
22730: PUSH
22731: LD_INT 12
22733: ST_TO_ADDR
22734: GO 22775
22736: LD_INT 2
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22755
22744: POP
// tech := tech_mortar ; 3 :
22745: LD_ADDR_VAR 0 5
22749: PUSH
22750: LD_INT 41
22752: ST_TO_ADDR
22753: GO 22775
22755: LD_INT 3
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22774
22763: POP
// tech := tech_bazooka ; end ;
22764: LD_ADDR_VAR 0 5
22768: PUSH
22769: LD_INT 44
22771: ST_TO_ADDR
22772: GO 22775
22774: POP
// if Researched ( side , tech ) then
22775: LD_VAR 0 3
22779: PPUSH
22780: LD_VAR 0 5
22784: PPUSH
22785: CALL_OW 325
22789: IFFALSE 22816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 5
22798: PUSH
22799: LD_INT 8
22801: PUSH
22802: LD_INT 9
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PUSH
22810: LD_VAR 0 4
22814: ARRAY
22815: ST_TO_ADDR
// end ;
22816: LD_VAR 0 2
22820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22821: LD_INT 0
22823: PPUSH
22824: PPUSH
22825: PPUSH
// if not mines then
22826: LD_VAR 0 2
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 22979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22835: LD_ADDR_VAR 0 5
22839: PUSH
22840: LD_INT 81
22842: PUSH
22843: LD_VAR 0 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 3
22854: PUSH
22855: LD_INT 21
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PPUSH
22873: CALL_OW 69
22877: ST_TO_ADDR
// for i in mines do
22878: LD_ADDR_VAR 0 4
22882: PUSH
22883: LD_VAR 0 2
22887: PUSH
22888: FOR_IN
22889: IFFALSE 22977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22891: LD_VAR 0 4
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: PPUSH
22900: LD_VAR 0 4
22904: PUSH
22905: LD_INT 2
22907: ARRAY
22908: PPUSH
22909: CALL_OW 458
22913: NOT
22914: IFFALSE 22918
// continue ;
22916: GO 22888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22918: LD_VAR 0 4
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PPUSH
22927: LD_VAR 0 4
22931: PUSH
22932: LD_INT 2
22934: ARRAY
22935: PPUSH
22936: CALL_OW 428
22940: PUSH
22941: LD_VAR 0 5
22945: IN
22946: IFFALSE 22975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22948: LD_VAR 0 4
22952: PUSH
22953: LD_INT 1
22955: ARRAY
22956: PPUSH
22957: LD_VAR 0 4
22961: PUSH
22962: LD_INT 2
22964: ARRAY
22965: PPUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 456
// end ;
22975: GO 22888
22977: POP
22978: POP
// end ;
22979: LD_VAR 0 3
22983: RET
// export function Count ( array ) ; var i ; begin
22984: LD_INT 0
22986: PPUSH
22987: PPUSH
// result := 0 ;
22988: LD_ADDR_VAR 0 2
22992: PUSH
22993: LD_INT 0
22995: ST_TO_ADDR
// for i in array do
22996: LD_ADDR_VAR 0 3
23000: PUSH
23001: LD_VAR 0 1
23005: PUSH
23006: FOR_IN
23007: IFFALSE 23031
// if i then
23009: LD_VAR 0 3
23013: IFFALSE 23029
// result := result + 1 ;
23015: LD_ADDR_VAR 0 2
23019: PUSH
23020: LD_VAR 0 2
23024: PUSH
23025: LD_INT 1
23027: PLUS
23028: ST_TO_ADDR
23029: GO 23006
23031: POP
23032: POP
// end ;
23033: LD_VAR 0 2
23037: RET
// export function IsEmpty ( building ) ; begin
23038: LD_INT 0
23040: PPUSH
// if not building then
23041: LD_VAR 0 1
23045: NOT
23046: IFFALSE 23050
// exit ;
23048: GO 23093
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_VAR 0 1
23059: PUSH
23060: LD_INT 22
23062: PUSH
23063: LD_VAR 0 1
23067: PPUSH
23068: CALL_OW 255
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 58
23079: PUSH
23080: EMPTY
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PPUSH
23087: CALL_OW 69
23091: IN
23092: ST_TO_ADDR
// end ;
23093: LD_VAR 0 2
23097: RET
// export function IsNotFull ( building ) ; begin
23098: LD_INT 0
23100: PPUSH
// if not building then
23101: LD_VAR 0 1
23105: NOT
23106: IFFALSE 23110
// exit ;
23108: GO 23129
// result := UnitsInside ( building ) < 6 ;
23110: LD_ADDR_VAR 0 2
23114: PUSH
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 313
23124: PUSH
23125: LD_INT 6
23127: LESS
23128: ST_TO_ADDR
// end ;
23129: LD_VAR 0 2
23133: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23134: LD_INT 0
23136: PPUSH
23137: PPUSH
23138: PPUSH
23139: PPUSH
// tmp := [ ] ;
23140: LD_ADDR_VAR 0 3
23144: PUSH
23145: EMPTY
23146: ST_TO_ADDR
// list := [ ] ;
23147: LD_ADDR_VAR 0 5
23151: PUSH
23152: EMPTY
23153: ST_TO_ADDR
// for i = 16 to 25 do
23154: LD_ADDR_VAR 0 4
23158: PUSH
23159: DOUBLE
23160: LD_INT 16
23162: DEC
23163: ST_TO_ADDR
23164: LD_INT 25
23166: PUSH
23167: FOR_TO
23168: IFFALSE 23241
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: LD_VAR 0 3
23179: PUSH
23180: LD_INT 22
23182: PUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 255
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 91
23199: PUSH
23200: LD_VAR 0 1
23204: PUSH
23205: LD_INT 6
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: LD_VAR 0 4
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: PPUSH
23233: CALL_OW 69
23237: ADD
23238: ST_TO_ADDR
23239: GO 23167
23241: POP
23242: POP
// for i = 1 to tmp do
23243: LD_ADDR_VAR 0 4
23247: PUSH
23248: DOUBLE
23249: LD_INT 1
23251: DEC
23252: ST_TO_ADDR
23253: LD_VAR 0 3
23257: PUSH
23258: FOR_TO
23259: IFFALSE 23347
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23261: LD_ADDR_VAR 0 5
23265: PUSH
23266: LD_VAR 0 5
23270: PUSH
23271: LD_VAR 0 3
23275: PUSH
23276: LD_VAR 0 4
23280: ARRAY
23281: PPUSH
23282: CALL_OW 266
23286: PUSH
23287: LD_VAR 0 3
23291: PUSH
23292: LD_VAR 0 4
23296: ARRAY
23297: PPUSH
23298: CALL_OW 250
23302: PUSH
23303: LD_VAR 0 3
23307: PUSH
23308: LD_VAR 0 4
23312: ARRAY
23313: PPUSH
23314: CALL_OW 251
23318: PUSH
23319: LD_VAR 0 3
23323: PUSH
23324: LD_VAR 0 4
23328: ARRAY
23329: PPUSH
23330: CALL_OW 254
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: ADD
23344: ST_TO_ADDR
23345: GO 23258
23347: POP
23348: POP
// result := list ;
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: LD_VAR 0 5
23358: ST_TO_ADDR
// end ;
23359: LD_VAR 0 2
23363: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
// if not factory then
23373: LD_VAR 0 1
23377: NOT
23378: IFFALSE 23382
// exit ;
23380: GO 23975
// if control = control_apeman then
23382: LD_VAR 0 4
23386: PUSH
23387: LD_INT 5
23389: EQUAL
23390: IFFALSE 23499
// begin tmp := UnitsInside ( factory ) ;
23392: LD_ADDR_VAR 0 8
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 313
23406: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23407: LD_VAR 0 8
23411: PPUSH
23412: LD_INT 25
23414: PUSH
23415: LD_INT 12
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 72
23426: NOT
23427: IFFALSE 23437
// control := control_manual ;
23429: LD_ADDR_VAR 0 4
23433: PUSH
23434: LD_INT 1
23436: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23437: LD_ADDR_VAR 0 8
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL 23134 0 1
23451: ST_TO_ADDR
// if tmp then
23452: LD_VAR 0 8
23456: IFFALSE 23499
// begin for i in tmp do
23458: LD_ADDR_VAR 0 7
23462: PUSH
23463: LD_VAR 0 8
23467: PUSH
23468: FOR_IN
23469: IFFALSE 23497
// if i [ 1 ] = b_ext_radio then
23471: LD_VAR 0 7
23475: PUSH
23476: LD_INT 1
23478: ARRAY
23479: PUSH
23480: LD_INT 22
23482: EQUAL
23483: IFFALSE 23495
// begin control := control_remote ;
23485: LD_ADDR_VAR 0 4
23489: PUSH
23490: LD_INT 2
23492: ST_TO_ADDR
// break ;
23493: GO 23497
// end ;
23495: GO 23468
23497: POP
23498: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23499: LD_VAR 0 1
23503: PPUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_VAR 0 4
23518: PPUSH
23519: LD_VAR 0 5
23523: PPUSH
23524: CALL_OW 448
23528: IFFALSE 23563
// begin result := [ chassis , engine , control , weapon ] ;
23530: LD_ADDR_VAR 0 6
23534: PUSH
23535: LD_VAR 0 2
23539: PUSH
23540: LD_VAR 0 3
23544: PUSH
23545: LD_VAR 0 4
23549: PUSH
23550: LD_VAR 0 5
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: ST_TO_ADDR
// exit ;
23561: GO 23975
// end ; _chassis := AvailableChassisList ( factory ) ;
23563: LD_ADDR_VAR 0 9
23567: PUSH
23568: LD_VAR 0 1
23572: PPUSH
23573: CALL_OW 475
23577: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23578: LD_ADDR_VAR 0 11
23582: PUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL_OW 476
23592: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23593: LD_ADDR_VAR 0 12
23597: PUSH
23598: LD_VAR 0 1
23602: PPUSH
23603: CALL_OW 477
23607: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23608: LD_ADDR_VAR 0 10
23612: PUSH
23613: LD_VAR 0 1
23617: PPUSH
23618: CALL_OW 478
23622: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23623: LD_VAR 0 9
23627: NOT
23628: PUSH
23629: LD_VAR 0 11
23633: NOT
23634: OR
23635: PUSH
23636: LD_VAR 0 12
23640: NOT
23641: OR
23642: PUSH
23643: LD_VAR 0 10
23647: NOT
23648: OR
23649: IFFALSE 23684
// begin result := [ chassis , engine , control , weapon ] ;
23651: LD_ADDR_VAR 0 6
23655: PUSH
23656: LD_VAR 0 2
23660: PUSH
23661: LD_VAR 0 3
23665: PUSH
23666: LD_VAR 0 4
23670: PUSH
23671: LD_VAR 0 5
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: ST_TO_ADDR
// exit ;
23682: GO 23975
// end ; if not chassis in _chassis then
23684: LD_VAR 0 2
23688: PUSH
23689: LD_VAR 0 9
23693: IN
23694: NOT
23695: IFFALSE 23721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_VAR 0 9
23706: PUSH
23707: LD_INT 1
23709: PPUSH
23710: LD_VAR 0 9
23714: PPUSH
23715: CALL_OW 12
23719: ARRAY
23720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23721: LD_VAR 0 2
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: CALL 23980 0 2
23735: NOT
23736: IFFALSE 23795
// repeat engine := _engine [ 1 ] ;
23738: LD_ADDR_VAR 0 3
23742: PUSH
23743: LD_VAR 0 11
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23752: LD_ADDR_VAR 0 11
23756: PUSH
23757: LD_VAR 0 11
23761: PPUSH
23762: LD_INT 1
23764: PPUSH
23765: CALL_OW 3
23769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23770: LD_VAR 0 2
23774: PPUSH
23775: LD_VAR 0 3
23779: PPUSH
23780: CALL 23980 0 2
23784: PUSH
23785: LD_VAR 0 11
23789: PUSH
23790: EMPTY
23791: EQUAL
23792: OR
23793: IFFALSE 23738
// if not control in _control then
23795: LD_VAR 0 4
23799: PUSH
23800: LD_VAR 0 12
23804: IN
23805: NOT
23806: IFFALSE 23832
// control := _control [ rand ( 1 , _control ) ] ;
23808: LD_ADDR_VAR 0 4
23812: PUSH
23813: LD_VAR 0 12
23817: PUSH
23818: LD_INT 1
23820: PPUSH
23821: LD_VAR 0 12
23825: PPUSH
23826: CALL_OW 12
23830: ARRAY
23831: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23832: LD_VAR 0 2
23836: PPUSH
23837: LD_VAR 0 5
23841: PPUSH
23842: CALL 24200 0 2
23846: NOT
23847: IFFALSE 23906
// repeat weapon := _weapon [ 1 ] ;
23849: LD_ADDR_VAR 0 5
23853: PUSH
23854: LD_VAR 0 10
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23863: LD_ADDR_VAR 0 10
23867: PUSH
23868: LD_VAR 0 10
23872: PPUSH
23873: LD_INT 1
23875: PPUSH
23876: CALL_OW 3
23880: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 5
23890: PPUSH
23891: CALL 24200 0 2
23895: PUSH
23896: LD_VAR 0 10
23900: PUSH
23901: EMPTY
23902: EQUAL
23903: OR
23904: IFFALSE 23849
// result := [ ] ;
23906: LD_ADDR_VAR 0 6
23910: PUSH
23911: EMPTY
23912: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_VAR 0 2
23922: PPUSH
23923: LD_VAR 0 3
23927: PPUSH
23928: LD_VAR 0 4
23932: PPUSH
23933: LD_VAR 0 5
23937: PPUSH
23938: CALL_OW 448
23942: IFFALSE 23975
// result := [ chassis , engine , control , weapon ] ;
23944: LD_ADDR_VAR 0 6
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: LD_VAR 0 3
23958: PUSH
23959: LD_VAR 0 4
23963: PUSH
23964: LD_VAR 0 5
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: ST_TO_ADDR
// end ;
23975: LD_VAR 0 6
23979: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23980: LD_INT 0
23982: PPUSH
// if not chassis or not engine then
23983: LD_VAR 0 1
23987: NOT
23988: PUSH
23989: LD_VAR 0 2
23993: NOT
23994: OR
23995: IFFALSE 23999
// exit ;
23997: GO 24195
// case engine of engine_solar :
23999: LD_VAR 0 2
24003: PUSH
24004: LD_INT 2
24006: DOUBLE
24007: EQUAL
24008: IFTRUE 24012
24010: GO 24050
24012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_INT 11
24020: PUSH
24021: LD_INT 12
24023: PUSH
24024: LD_INT 13
24026: PUSH
24027: LD_INT 14
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 3
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24179
24050: LD_INT 1
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24120
24058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 11
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 13
24072: PUSH
24073: LD_INT 14
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 4
24087: PUSH
24088: LD_INT 5
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 23
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 24
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
24118: GO 24179
24120: LD_INT 3
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24178
24128: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_INT 13
24136: PUSH
24137: LD_INT 14
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: LD_INT 4
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: LD_INT 21
24154: PUSH
24155: LD_INT 22
24157: PUSH
24158: LD_INT 23
24160: PUSH
24161: LD_INT 24
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 24179
24178: POP
// result := ( chassis in result ) ;
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_VAR 0 1
24188: PUSH
24189: LD_VAR 0 3
24193: IN
24194: ST_TO_ADDR
// end ;
24195: LD_VAR 0 3
24199: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24200: LD_INT 0
24202: PPUSH
// if not chassis or not weapon then
24203: LD_VAR 0 1
24207: NOT
24208: PUSH
24209: LD_VAR 0 2
24213: NOT
24214: OR
24215: IFFALSE 24219
// exit ;
24217: GO 25245
// case weapon of us_machine_gun :
24219: LD_VAR 0 2
24223: PUSH
24224: LD_INT 2
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24262
24232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24233: LD_ADDR_VAR 0 3
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 4
24249: PUSH
24250: LD_INT 5
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 25229
24262: LD_INT 3
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24300
24270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: LD_INT 4
24287: PUSH
24288: LD_INT 5
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: ST_TO_ADDR
24298: GO 25229
24300: LD_INT 11
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24338
24308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24309: LD_ADDR_VAR 0 3
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 3
24322: PUSH
24323: LD_INT 4
24325: PUSH
24326: LD_INT 5
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: ST_TO_ADDR
24336: GO 25229
24338: LD_INT 4
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24372
24346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24347: LD_ADDR_VAR 0 3
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: ST_TO_ADDR
24370: GO 25229
24372: LD_INT 5
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24406
24380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 3
24391: PUSH
24392: LD_INT 4
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
24404: GO 25229
24406: LD_INT 9
24408: DOUBLE
24409: EQUAL
24410: IFTRUE 24414
24412: GO 24440
24414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: LD_INT 4
24428: PUSH
24429: LD_INT 5
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: ST_TO_ADDR
24438: GO 25229
24440: LD_INT 7
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24474
24448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24449: LD_ADDR_VAR 0 3
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: LD_INT 4
24462: PUSH
24463: LD_INT 5
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: ST_TO_ADDR
24472: GO 25229
24474: LD_INT 12
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24508
24482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24483: LD_ADDR_VAR 0 3
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: LD_INT 3
24493: PUSH
24494: LD_INT 4
24496: PUSH
24497: LD_INT 5
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: ST_TO_ADDR
24506: GO 25229
24508: LD_INT 13
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24542
24516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24517: LD_ADDR_VAR 0 3
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: ST_TO_ADDR
24540: GO 25229
24542: LD_INT 14
24544: DOUBLE
24545: EQUAL
24546: IFTRUE 24550
24548: GO 24568
24550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24551: LD_ADDR_VAR 0 3
24555: PUSH
24556: LD_INT 4
24558: PUSH
24559: LD_INT 5
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: ST_TO_ADDR
24566: GO 25229
24568: LD_INT 6
24570: DOUBLE
24571: EQUAL
24572: IFTRUE 24576
24574: GO 24594
24576: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: LD_INT 4
24584: PUSH
24585: LD_INT 5
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: ST_TO_ADDR
24592: GO 25229
24594: LD_INT 10
24596: DOUBLE
24597: EQUAL
24598: IFTRUE 24602
24600: GO 24620
24602: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24603: LD_ADDR_VAR 0 3
24607: PUSH
24608: LD_INT 4
24610: PUSH
24611: LD_INT 5
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: ST_TO_ADDR
24618: GO 25229
24620: LD_INT 22
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24654
24628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_INT 11
24636: PUSH
24637: LD_INT 12
24639: PUSH
24640: LD_INT 13
24642: PUSH
24643: LD_INT 14
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: ST_TO_ADDR
24652: GO 25229
24654: LD_INT 23
24656: DOUBLE
24657: EQUAL
24658: IFTRUE 24662
24660: GO 24688
24662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_INT 11
24670: PUSH
24671: LD_INT 12
24673: PUSH
24674: LD_INT 13
24676: PUSH
24677: LD_INT 14
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: ST_TO_ADDR
24686: GO 25229
24688: LD_INT 24
24690: DOUBLE
24691: EQUAL
24692: IFTRUE 24696
24694: GO 24722
24696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24697: LD_ADDR_VAR 0 3
24701: PUSH
24702: LD_INT 11
24704: PUSH
24705: LD_INT 12
24707: PUSH
24708: LD_INT 13
24710: PUSH
24711: LD_INT 14
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: ST_TO_ADDR
24720: GO 25229
24722: LD_INT 30
24724: DOUBLE
24725: EQUAL
24726: IFTRUE 24730
24728: GO 24756
24730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: LD_INT 11
24738: PUSH
24739: LD_INT 12
24741: PUSH
24742: LD_INT 13
24744: PUSH
24745: LD_INT 14
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: ST_TO_ADDR
24754: GO 25229
24756: LD_INT 25
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24782
24764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_INT 13
24772: PUSH
24773: LD_INT 14
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: ST_TO_ADDR
24780: GO 25229
24782: LD_INT 27
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24808
24790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24791: LD_ADDR_VAR 0 3
24795: PUSH
24796: LD_INT 13
24798: PUSH
24799: LD_INT 14
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: ST_TO_ADDR
24806: GO 25229
24808: LD_INT 28
24810: DOUBLE
24811: EQUAL
24812: IFTRUE 24816
24814: GO 24834
24816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: LD_INT 13
24824: PUSH
24825: LD_INT 14
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: ST_TO_ADDR
24832: GO 25229
24834: LD_INT 29
24836: DOUBLE
24837: EQUAL
24838: IFTRUE 24842
24840: GO 24860
24842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24843: LD_ADDR_VAR 0 3
24847: PUSH
24848: LD_INT 13
24850: PUSH
24851: LD_INT 14
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: ST_TO_ADDR
24858: GO 25229
24860: LD_INT 31
24862: DOUBLE
24863: EQUAL
24864: IFTRUE 24868
24866: GO 24886
24868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_INT 13
24876: PUSH
24877: LD_INT 14
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: ST_TO_ADDR
24884: GO 25229
24886: LD_INT 26
24888: DOUBLE
24889: EQUAL
24890: IFTRUE 24894
24892: GO 24912
24894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24895: LD_ADDR_VAR 0 3
24899: PUSH
24900: LD_INT 13
24902: PUSH
24903: LD_INT 14
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: ST_TO_ADDR
24910: GO 25229
24912: LD_INT 42
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24946
24920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 21
24928: PUSH
24929: LD_INT 22
24931: PUSH
24932: LD_INT 23
24934: PUSH
24935: LD_INT 24
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: ST_TO_ADDR
24944: GO 25229
24946: LD_INT 43
24948: DOUBLE
24949: EQUAL
24950: IFTRUE 24954
24952: GO 24980
24954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 22
24965: PUSH
24966: LD_INT 23
24968: PUSH
24969: LD_INT 24
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
24978: GO 25229
24980: LD_INT 44
24982: DOUBLE
24983: EQUAL
24984: IFTRUE 24988
24986: GO 25014
24988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 21
24996: PUSH
24997: LD_INT 22
24999: PUSH
25000: LD_INT 23
25002: PUSH
25003: LD_INT 24
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: ST_TO_ADDR
25012: GO 25229
25014: LD_INT 45
25016: DOUBLE
25017: EQUAL
25018: IFTRUE 25022
25020: GO 25048
25022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: LD_INT 21
25030: PUSH
25031: LD_INT 22
25033: PUSH
25034: LD_INT 23
25036: PUSH
25037: LD_INT 24
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: ST_TO_ADDR
25046: GO 25229
25048: LD_INT 49
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25082
25056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_INT 21
25064: PUSH
25065: LD_INT 22
25067: PUSH
25068: LD_INT 23
25070: PUSH
25071: LD_INT 24
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: ST_TO_ADDR
25080: GO 25229
25082: LD_INT 51
25084: DOUBLE
25085: EQUAL
25086: IFTRUE 25090
25088: GO 25116
25090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25091: LD_ADDR_VAR 0 3
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 22
25101: PUSH
25102: LD_INT 23
25104: PUSH
25105: LD_INT 24
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 25229
25116: LD_INT 52
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25150
25124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 24
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
25148: GO 25229
25150: LD_INT 53
25152: DOUBLE
25153: EQUAL
25154: IFTRUE 25158
25156: GO 25176
25158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25159: LD_ADDR_VAR 0 3
25163: PUSH
25164: LD_INT 23
25166: PUSH
25167: LD_INT 24
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: ST_TO_ADDR
25174: GO 25229
25176: LD_INT 46
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25202
25184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: LD_INT 23
25192: PUSH
25193: LD_INT 24
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: ST_TO_ADDR
25200: GO 25229
25202: LD_INT 47
25204: DOUBLE
25205: EQUAL
25206: IFTRUE 25210
25208: GO 25228
25210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_INT 23
25218: PUSH
25219: LD_INT 24
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: ST_TO_ADDR
25226: GO 25229
25228: POP
// result := ( chassis in result ) ;
25229: LD_ADDR_VAR 0 3
25233: PUSH
25234: LD_VAR 0 1
25238: PUSH
25239: LD_VAR 0 3
25243: IN
25244: ST_TO_ADDR
// end ;
25245: LD_VAR 0 3
25249: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25250: LD_INT 0
25252: PPUSH
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
// result := array ;
25259: LD_ADDR_VAR 0 5
25263: PUSH
25264: LD_VAR 0 1
25268: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25269: LD_VAR 0 1
25273: NOT
25274: PUSH
25275: LD_VAR 0 2
25279: NOT
25280: OR
25281: PUSH
25282: LD_VAR 0 3
25286: NOT
25287: OR
25288: PUSH
25289: LD_VAR 0 2
25293: PUSH
25294: LD_VAR 0 1
25298: GREATER
25299: OR
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_VAR 0 1
25310: GREATER
25311: OR
25312: IFFALSE 25316
// exit ;
25314: GO 25612
// if direction then
25316: LD_VAR 0 4
25320: IFFALSE 25384
// begin d := 1 ;
25322: LD_ADDR_VAR 0 9
25326: PUSH
25327: LD_INT 1
25329: ST_TO_ADDR
// if i_from > i_to then
25330: LD_VAR 0 2
25334: PUSH
25335: LD_VAR 0 3
25339: GREATER
25340: IFFALSE 25366
// length := ( array - i_from ) + i_to else
25342: LD_ADDR_VAR 0 11
25346: PUSH
25347: LD_VAR 0 1
25351: PUSH
25352: LD_VAR 0 2
25356: MINUS
25357: PUSH
25358: LD_VAR 0 3
25362: PLUS
25363: ST_TO_ADDR
25364: GO 25382
// length := i_to - i_from ;
25366: LD_ADDR_VAR 0 11
25370: PUSH
25371: LD_VAR 0 3
25375: PUSH
25376: LD_VAR 0 2
25380: MINUS
25381: ST_TO_ADDR
// end else
25382: GO 25445
// begin d := - 1 ;
25384: LD_ADDR_VAR 0 9
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: ST_TO_ADDR
// if i_from > i_to then
25393: LD_VAR 0 2
25397: PUSH
25398: LD_VAR 0 3
25402: GREATER
25403: IFFALSE 25423
// length := i_from - i_to else
25405: LD_ADDR_VAR 0 11
25409: PUSH
25410: LD_VAR 0 2
25414: PUSH
25415: LD_VAR 0 3
25419: MINUS
25420: ST_TO_ADDR
25421: GO 25445
// length := ( array - i_to ) + i_from ;
25423: LD_ADDR_VAR 0 11
25427: PUSH
25428: LD_VAR 0 1
25432: PUSH
25433: LD_VAR 0 3
25437: MINUS
25438: PUSH
25439: LD_VAR 0 2
25443: PLUS
25444: ST_TO_ADDR
// end ; if not length then
25445: LD_VAR 0 11
25449: NOT
25450: IFFALSE 25454
// exit ;
25452: GO 25612
// tmp := array ;
25454: LD_ADDR_VAR 0 10
25458: PUSH
25459: LD_VAR 0 1
25463: ST_TO_ADDR
// for i = 1 to length do
25464: LD_ADDR_VAR 0 6
25468: PUSH
25469: DOUBLE
25470: LD_INT 1
25472: DEC
25473: ST_TO_ADDR
25474: LD_VAR 0 11
25478: PUSH
25479: FOR_TO
25480: IFFALSE 25600
// begin for j = 1 to array do
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: DOUBLE
25488: LD_INT 1
25490: DEC
25491: ST_TO_ADDR
25492: LD_VAR 0 1
25496: PUSH
25497: FOR_TO
25498: IFFALSE 25586
// begin k := j + d ;
25500: LD_ADDR_VAR 0 8
25504: PUSH
25505: LD_VAR 0 7
25509: PUSH
25510: LD_VAR 0 9
25514: PLUS
25515: ST_TO_ADDR
// if k > array then
25516: LD_VAR 0 8
25520: PUSH
25521: LD_VAR 0 1
25525: GREATER
25526: IFFALSE 25536
// k := 1 ;
25528: LD_ADDR_VAR 0 8
25532: PUSH
25533: LD_INT 1
25535: ST_TO_ADDR
// if not k then
25536: LD_VAR 0 8
25540: NOT
25541: IFFALSE 25553
// k := array ;
25543: LD_ADDR_VAR 0 8
25547: PUSH
25548: LD_VAR 0 1
25552: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25553: LD_ADDR_VAR 0 10
25557: PUSH
25558: LD_VAR 0 10
25562: PPUSH
25563: LD_VAR 0 8
25567: PPUSH
25568: LD_VAR 0 1
25572: PUSH
25573: LD_VAR 0 7
25577: ARRAY
25578: PPUSH
25579: CALL_OW 1
25583: ST_TO_ADDR
// end ;
25584: GO 25497
25586: POP
25587: POP
// array := tmp ;
25588: LD_ADDR_VAR 0 1
25592: PUSH
25593: LD_VAR 0 10
25597: ST_TO_ADDR
// end ;
25598: GO 25479
25600: POP
25601: POP
// result := array ;
25602: LD_ADDR_VAR 0 5
25606: PUSH
25607: LD_VAR 0 1
25611: ST_TO_ADDR
// end ;
25612: LD_VAR 0 5
25616: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25617: LD_INT 0
25619: PPUSH
25620: PPUSH
// result := 0 ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 0
25628: ST_TO_ADDR
// if not array or not value in array then
25629: LD_VAR 0 1
25633: NOT
25634: PUSH
25635: LD_VAR 0 2
25639: PUSH
25640: LD_VAR 0 1
25644: IN
25645: NOT
25646: OR
25647: IFFALSE 25651
// exit ;
25649: GO 25705
// for i = 1 to array do
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: DOUBLE
25657: LD_INT 1
25659: DEC
25660: ST_TO_ADDR
25661: LD_VAR 0 1
25665: PUSH
25666: FOR_TO
25667: IFFALSE 25703
// if value = array [ i ] then
25669: LD_VAR 0 2
25673: PUSH
25674: LD_VAR 0 1
25678: PUSH
25679: LD_VAR 0 4
25683: ARRAY
25684: EQUAL
25685: IFFALSE 25701
// begin result := i ;
25687: LD_ADDR_VAR 0 3
25691: PUSH
25692: LD_VAR 0 4
25696: ST_TO_ADDR
// exit ;
25697: POP
25698: POP
25699: GO 25705
// end ;
25701: GO 25666
25703: POP
25704: POP
// end ;
25705: LD_VAR 0 3
25709: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25710: LD_INT 0
25712: PPUSH
// vc_chassis := chassis ;
25713: LD_ADDR_OWVAR 37
25717: PUSH
25718: LD_VAR 0 1
25722: ST_TO_ADDR
// vc_engine := engine ;
25723: LD_ADDR_OWVAR 39
25727: PUSH
25728: LD_VAR 0 2
25732: ST_TO_ADDR
// vc_control := control ;
25733: LD_ADDR_OWVAR 38
25737: PUSH
25738: LD_VAR 0 3
25742: ST_TO_ADDR
// vc_weapon := weapon ;
25743: LD_ADDR_OWVAR 40
25747: PUSH
25748: LD_VAR 0 4
25752: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25753: LD_ADDR_OWVAR 41
25757: PUSH
25758: LD_VAR 0 5
25762: ST_TO_ADDR
// end ;
25763: LD_VAR 0 6
25767: RET
// export function WantPlant ( unit ) ; var task ; begin
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
// result := false ;
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_INT 0
25779: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 437
25794: ST_TO_ADDR
// if task then
25795: LD_VAR 0 3
25799: IFFALSE 25827
// if task [ 1 ] [ 1 ] = p then
25801: LD_VAR 0 3
25805: PUSH
25806: LD_INT 1
25808: ARRAY
25809: PUSH
25810: LD_INT 1
25812: ARRAY
25813: PUSH
25814: LD_STRING p
25816: EQUAL
25817: IFFALSE 25827
// result := true ;
25819: LD_ADDR_VAR 0 2
25823: PUSH
25824: LD_INT 1
25826: ST_TO_ADDR
// end ;
25827: LD_VAR 0 2
25831: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
25836: PPUSH
25837: PPUSH
// if pos < 1 then
25838: LD_VAR 0 2
25842: PUSH
25843: LD_INT 1
25845: LESS
25846: IFFALSE 25850
// exit ;
25848: GO 26153
// if pos = 1 then
25850: LD_VAR 0 2
25854: PUSH
25855: LD_INT 1
25857: EQUAL
25858: IFFALSE 25891
// result := Replace ( arr , pos [ 1 ] , value ) else
25860: LD_ADDR_VAR 0 4
25864: PUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: LD_VAR 0 2
25874: PUSH
25875: LD_INT 1
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 3
25883: PPUSH
25884: CALL_OW 1
25888: ST_TO_ADDR
25889: GO 26153
// begin tmp := arr ;
25891: LD_ADDR_VAR 0 6
25895: PUSH
25896: LD_VAR 0 1
25900: ST_TO_ADDR
// s_arr := [ tmp ] ;
25901: LD_ADDR_VAR 0 7
25905: PUSH
25906: LD_VAR 0 6
25910: PUSH
25911: EMPTY
25912: LIST
25913: ST_TO_ADDR
// for i = 1 to pos - 1 do
25914: LD_ADDR_VAR 0 5
25918: PUSH
25919: DOUBLE
25920: LD_INT 1
25922: DEC
25923: ST_TO_ADDR
25924: LD_VAR 0 2
25928: PUSH
25929: LD_INT 1
25931: MINUS
25932: PUSH
25933: FOR_TO
25934: IFFALSE 25979
// begin tmp := tmp [ pos [ i ] ] ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_VAR 0 6
25945: PUSH
25946: LD_VAR 0 2
25950: PUSH
25951: LD_VAR 0 5
25955: ARRAY
25956: ARRAY
25957: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25958: LD_ADDR_VAR 0 7
25962: PUSH
25963: LD_VAR 0 7
25967: PUSH
25968: LD_VAR 0 6
25972: PUSH
25973: EMPTY
25974: LIST
25975: ADD
25976: ST_TO_ADDR
// end ;
25977: GO 25933
25979: POP
25980: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25981: LD_ADDR_VAR 0 6
25985: PUSH
25986: LD_VAR 0 6
25990: PPUSH
25991: LD_VAR 0 2
25995: PUSH
25996: LD_VAR 0 2
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 1
26011: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26012: LD_ADDR_VAR 0 7
26016: PUSH
26017: LD_VAR 0 7
26021: PPUSH
26022: LD_VAR 0 7
26026: PPUSH
26027: LD_VAR 0 6
26031: PPUSH
26032: CALL_OW 1
26036: ST_TO_ADDR
// for i = s_arr downto 2 do
26037: LD_ADDR_VAR 0 5
26041: PUSH
26042: DOUBLE
26043: LD_VAR 0 7
26047: INC
26048: ST_TO_ADDR
26049: LD_INT 2
26051: PUSH
26052: FOR_DOWNTO
26053: IFFALSE 26137
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26055: LD_ADDR_VAR 0 6
26059: PUSH
26060: LD_VAR 0 7
26064: PUSH
26065: LD_VAR 0 5
26069: PUSH
26070: LD_INT 1
26072: MINUS
26073: ARRAY
26074: PPUSH
26075: LD_VAR 0 2
26079: PUSH
26080: LD_VAR 0 5
26084: PUSH
26085: LD_INT 1
26087: MINUS
26088: ARRAY
26089: PPUSH
26090: LD_VAR 0 7
26094: PUSH
26095: LD_VAR 0 5
26099: ARRAY
26100: PPUSH
26101: CALL_OW 1
26105: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26106: LD_ADDR_VAR 0 7
26110: PUSH
26111: LD_VAR 0 7
26115: PPUSH
26116: LD_VAR 0 5
26120: PUSH
26121: LD_INT 1
26123: MINUS
26124: PPUSH
26125: LD_VAR 0 6
26129: PPUSH
26130: CALL_OW 1
26134: ST_TO_ADDR
// end ;
26135: GO 26052
26137: POP
26138: POP
// result := s_arr [ 1 ] ;
26139: LD_ADDR_VAR 0 4
26143: PUSH
26144: LD_VAR 0 7
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: ST_TO_ADDR
// end ; end ;
26153: LD_VAR 0 4
26157: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26158: LD_INT 0
26160: PPUSH
26161: PPUSH
// if not list then
26162: LD_VAR 0 1
26166: NOT
26167: IFFALSE 26171
// exit ;
26169: GO 26262
// i := list [ pos1 ] ;
26171: LD_ADDR_VAR 0 5
26175: PUSH
26176: LD_VAR 0 1
26180: PUSH
26181: LD_VAR 0 2
26185: ARRAY
26186: ST_TO_ADDR
// if not i then
26187: LD_VAR 0 5
26191: NOT
26192: IFFALSE 26196
// exit ;
26194: GO 26262
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: LD_VAR 0 2
26210: PPUSH
26211: LD_VAR 0 1
26215: PUSH
26216: LD_VAR 0 3
26220: ARRAY
26221: PPUSH
26222: CALL_OW 1
26226: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: LD_VAR 0 3
26241: PPUSH
26242: LD_VAR 0 5
26246: PPUSH
26247: CALL_OW 1
26251: ST_TO_ADDR
// result := list ;
26252: LD_ADDR_VAR 0 4
26256: PUSH
26257: LD_VAR 0 1
26261: ST_TO_ADDR
// end ;
26262: LD_VAR 0 4
26266: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26267: LD_INT 0
26269: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26270: LD_ADDR_VAR 0 5
26274: PUSH
26275: LD_VAR 0 1
26279: PPUSH
26280: CALL_OW 250
26284: PPUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 251
26294: PPUSH
26295: LD_VAR 0 2
26299: PPUSH
26300: LD_VAR 0 3
26304: PPUSH
26305: LD_VAR 0 4
26309: PPUSH
26310: CALL 26320 0 5
26314: ST_TO_ADDR
// end ;
26315: LD_VAR 0 5
26319: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26320: LD_INT 0
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
// if not list then
26326: LD_VAR 0 3
26330: NOT
26331: IFFALSE 26335
// exit ;
26333: GO 26723
// result := [ ] ;
26335: LD_ADDR_VAR 0 6
26339: PUSH
26340: EMPTY
26341: ST_TO_ADDR
// for i in list do
26342: LD_ADDR_VAR 0 7
26346: PUSH
26347: LD_VAR 0 3
26351: PUSH
26352: FOR_IN
26353: IFFALSE 26555
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26355: LD_ADDR_VAR 0 9
26359: PUSH
26360: LD_VAR 0 7
26364: PPUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: LD_VAR 0 2
26374: PPUSH
26375: CALL_OW 297
26379: ST_TO_ADDR
// if not result then
26380: LD_VAR 0 6
26384: NOT
26385: IFFALSE 26411
// result := [ [ i , tmp ] ] else
26387: LD_ADDR_VAR 0 6
26391: PUSH
26392: LD_VAR 0 7
26396: PUSH
26397: LD_VAR 0 9
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: ST_TO_ADDR
26409: GO 26553
// begin if result [ result ] [ 2 ] < tmp then
26411: LD_VAR 0 6
26415: PUSH
26416: LD_VAR 0 6
26420: ARRAY
26421: PUSH
26422: LD_INT 2
26424: ARRAY
26425: PUSH
26426: LD_VAR 0 9
26430: LESS
26431: IFFALSE 26473
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 6
26442: PPUSH
26443: LD_VAR 0 6
26447: PUSH
26448: LD_INT 1
26450: PLUS
26451: PPUSH
26452: LD_VAR 0 7
26456: PUSH
26457: LD_VAR 0 9
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 2
26470: ST_TO_ADDR
26471: GO 26553
// for j = 1 to result do
26473: LD_ADDR_VAR 0 8
26477: PUSH
26478: DOUBLE
26479: LD_INT 1
26481: DEC
26482: ST_TO_ADDR
26483: LD_VAR 0 6
26487: PUSH
26488: FOR_TO
26489: IFFALSE 26551
// begin if tmp < result [ j ] [ 2 ] then
26491: LD_VAR 0 9
26495: PUSH
26496: LD_VAR 0 6
26500: PUSH
26501: LD_VAR 0 8
26505: ARRAY
26506: PUSH
26507: LD_INT 2
26509: ARRAY
26510: LESS
26511: IFFALSE 26549
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26513: LD_ADDR_VAR 0 6
26517: PUSH
26518: LD_VAR 0 6
26522: PPUSH
26523: LD_VAR 0 8
26527: PPUSH
26528: LD_VAR 0 7
26532: PUSH
26533: LD_VAR 0 9
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PPUSH
26542: CALL_OW 2
26546: ST_TO_ADDR
// break ;
26547: GO 26551
// end ; end ;
26549: GO 26488
26551: POP
26552: POP
// end ; end ;
26553: GO 26352
26555: POP
26556: POP
// if result and not asc then
26557: LD_VAR 0 6
26561: PUSH
26562: LD_VAR 0 4
26566: NOT
26567: AND
26568: IFFALSE 26643
// begin tmp := result ;
26570: LD_ADDR_VAR 0 9
26574: PUSH
26575: LD_VAR 0 6
26579: ST_TO_ADDR
// for i = tmp downto 1 do
26580: LD_ADDR_VAR 0 7
26584: PUSH
26585: DOUBLE
26586: LD_VAR 0 9
26590: INC
26591: ST_TO_ADDR
26592: LD_INT 1
26594: PUSH
26595: FOR_DOWNTO
26596: IFFALSE 26641
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26598: LD_ADDR_VAR 0 6
26602: PUSH
26603: LD_VAR 0 6
26607: PPUSH
26608: LD_VAR 0 9
26612: PUSH
26613: LD_VAR 0 7
26617: MINUS
26618: PUSH
26619: LD_INT 1
26621: PLUS
26622: PPUSH
26623: LD_VAR 0 9
26627: PUSH
26628: LD_VAR 0 7
26632: ARRAY
26633: PPUSH
26634: CALL_OW 1
26638: ST_TO_ADDR
26639: GO 26595
26641: POP
26642: POP
// end ; tmp := [ ] ;
26643: LD_ADDR_VAR 0 9
26647: PUSH
26648: EMPTY
26649: ST_TO_ADDR
// if mode then
26650: LD_VAR 0 5
26654: IFFALSE 26723
// begin for i = 1 to result do
26656: LD_ADDR_VAR 0 7
26660: PUSH
26661: DOUBLE
26662: LD_INT 1
26664: DEC
26665: ST_TO_ADDR
26666: LD_VAR 0 6
26670: PUSH
26671: FOR_TO
26672: IFFALSE 26711
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26674: LD_ADDR_VAR 0 9
26678: PUSH
26679: LD_VAR 0 9
26683: PPUSH
26684: LD_VAR 0 7
26688: PPUSH
26689: LD_VAR 0 6
26693: PUSH
26694: LD_VAR 0 7
26698: ARRAY
26699: PUSH
26700: LD_INT 1
26702: ARRAY
26703: PPUSH
26704: CALL_OW 1
26708: ST_TO_ADDR
26709: GO 26671
26711: POP
26712: POP
// result := tmp ;
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: LD_VAR 0 9
26722: ST_TO_ADDR
// end ; end ;
26723: LD_VAR 0 6
26727: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26736: LD_ADDR_VAR 0 5
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: ST_TO_ADDR
// if not x or not y then
26758: LD_VAR 0 2
26762: NOT
26763: PUSH
26764: LD_VAR 0 3
26768: NOT
26769: OR
26770: IFFALSE 26774
// exit ;
26772: GO 28420
// if not range then
26774: LD_VAR 0 4
26778: NOT
26779: IFFALSE 26789
// range := 10 ;
26781: LD_ADDR_VAR 0 4
26785: PUSH
26786: LD_INT 10
26788: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26789: LD_ADDR_VAR 0 8
26793: PUSH
26794: LD_INT 81
26796: PUSH
26797: LD_VAR 0 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 92
26808: PUSH
26809: LD_VAR 0 2
26813: PUSH
26814: LD_VAR 0 3
26818: PUSH
26819: LD_VAR 0 4
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 3
26832: PUSH
26833: LD_INT 21
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: PPUSH
26852: CALL_OW 69
26856: ST_TO_ADDR
// if not tmp then
26857: LD_VAR 0 8
26861: NOT
26862: IFFALSE 26866
// exit ;
26864: GO 28420
// for i in tmp do
26866: LD_ADDR_VAR 0 6
26870: PUSH
26871: LD_VAR 0 8
26875: PUSH
26876: FOR_IN
26877: IFFALSE 28395
// begin points := [ 0 , 0 , 0 ] ;
26879: LD_ADDR_VAR 0 9
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
// bpoints := 1 ;
26898: LD_ADDR_VAR 0 10
26902: PUSH
26903: LD_INT 1
26905: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26906: LD_VAR 0 6
26910: PPUSH
26911: CALL_OW 247
26915: PUSH
26916: LD_INT 1
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26924
26922: GO 27502
26924: POP
// begin if GetClass ( i ) = 1 then
26925: LD_VAR 0 6
26929: PPUSH
26930: CALL_OW 257
26934: PUSH
26935: LD_INT 1
26937: EQUAL
26938: IFFALSE 26959
// points := [ 10 , 5 , 3 ] ;
26940: LD_ADDR_VAR 0 9
26944: PUSH
26945: LD_INT 10
26947: PUSH
26948: LD_INT 5
26950: PUSH
26951: LD_INT 3
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26959: LD_VAR 0 6
26963: PPUSH
26964: CALL_OW 257
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: LD_INT 4
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: IN
26983: IFFALSE 27004
// points := [ 3 , 2 , 1 ] ;
26985: LD_ADDR_VAR 0 9
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27004: LD_VAR 0 6
27008: PPUSH
27009: CALL_OW 257
27013: PUSH
27014: LD_INT 5
27016: EQUAL
27017: IFFALSE 27038
// points := [ 130 , 5 , 2 ] ;
27019: LD_ADDR_VAR 0 9
27023: PUSH
27024: LD_INT 130
27026: PUSH
27027: LD_INT 5
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27038: LD_VAR 0 6
27042: PPUSH
27043: CALL_OW 257
27047: PUSH
27048: LD_INT 8
27050: EQUAL
27051: IFFALSE 27072
// points := [ 35 , 35 , 30 ] ;
27053: LD_ADDR_VAR 0 9
27057: PUSH
27058: LD_INT 35
27060: PUSH
27061: LD_INT 35
27063: PUSH
27064: LD_INT 30
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27072: LD_VAR 0 6
27076: PPUSH
27077: CALL_OW 257
27081: PUSH
27082: LD_INT 9
27084: EQUAL
27085: IFFALSE 27106
// points := [ 20 , 55 , 40 ] ;
27087: LD_ADDR_VAR 0 9
27091: PUSH
27092: LD_INT 20
27094: PUSH
27095: LD_INT 55
27097: PUSH
27098: LD_INT 40
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27106: LD_VAR 0 6
27110: PPUSH
27111: CALL_OW 257
27115: PUSH
27116: LD_INT 12
27118: PUSH
27119: LD_INT 16
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: IN
27126: IFFALSE 27147
// points := [ 5 , 3 , 2 ] ;
27128: LD_ADDR_VAR 0 9
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: LD_INT 3
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27147: LD_VAR 0 6
27151: PPUSH
27152: CALL_OW 257
27156: PUSH
27157: LD_INT 17
27159: EQUAL
27160: IFFALSE 27181
// points := [ 100 , 50 , 75 ] ;
27162: LD_ADDR_VAR 0 9
27166: PUSH
27167: LD_INT 100
27169: PUSH
27170: LD_INT 50
27172: PUSH
27173: LD_INT 75
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27181: LD_VAR 0 6
27185: PPUSH
27186: CALL_OW 257
27190: PUSH
27191: LD_INT 15
27193: EQUAL
27194: IFFALSE 27215
// points := [ 10 , 5 , 3 ] ;
27196: LD_ADDR_VAR 0 9
27200: PUSH
27201: LD_INT 10
27203: PUSH
27204: LD_INT 5
27206: PUSH
27207: LD_INT 3
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27215: LD_VAR 0 6
27219: PPUSH
27220: CALL_OW 257
27224: PUSH
27225: LD_INT 14
27227: EQUAL
27228: IFFALSE 27249
// points := [ 10 , 0 , 0 ] ;
27230: LD_ADDR_VAR 0 9
27234: PUSH
27235: LD_INT 10
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27249: LD_VAR 0 6
27253: PPUSH
27254: CALL_OW 257
27258: PUSH
27259: LD_INT 11
27261: EQUAL
27262: IFFALSE 27283
// points := [ 30 , 10 , 5 ] ;
27264: LD_ADDR_VAR 0 9
27268: PUSH
27269: LD_INT 30
27271: PUSH
27272: LD_INT 10
27274: PUSH
27275: LD_INT 5
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27283: LD_VAR 0 1
27287: PPUSH
27288: LD_INT 5
27290: PPUSH
27291: CALL_OW 321
27295: PUSH
27296: LD_INT 2
27298: EQUAL
27299: IFFALSE 27316
// bpoints := bpoints * 1.8 ;
27301: LD_ADDR_VAR 0 10
27305: PUSH
27306: LD_VAR 0 10
27310: PUSH
27311: LD_REAL  1.80000000000000E+0000
27314: MUL
27315: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27316: LD_VAR 0 6
27320: PPUSH
27321: CALL_OW 257
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 3
27334: PUSH
27335: LD_INT 4
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: IN
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: LD_INT 51
27352: PPUSH
27353: CALL_OW 321
27357: PUSH
27358: LD_INT 2
27360: EQUAL
27361: AND
27362: IFFALSE 27379
// bpoints := bpoints * 1.2 ;
27364: LD_ADDR_VAR 0 10
27368: PUSH
27369: LD_VAR 0 10
27373: PUSH
27374: LD_REAL  1.20000000000000E+0000
27377: MUL
27378: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27379: LD_VAR 0 6
27383: PPUSH
27384: CALL_OW 257
27388: PUSH
27389: LD_INT 5
27391: PUSH
27392: LD_INT 7
27394: PUSH
27395: LD_INT 9
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: IN
27403: PUSH
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_INT 52
27411: PPUSH
27412: CALL_OW 321
27416: PUSH
27417: LD_INT 2
27419: EQUAL
27420: AND
27421: IFFALSE 27438
// bpoints := bpoints * 1.5 ;
27423: LD_ADDR_VAR 0 10
27427: PUSH
27428: LD_VAR 0 10
27432: PUSH
27433: LD_REAL  1.50000000000000E+0000
27436: MUL
27437: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27438: LD_VAR 0 1
27442: PPUSH
27443: LD_INT 66
27445: PPUSH
27446: CALL_OW 321
27450: PUSH
27451: LD_INT 2
27453: EQUAL
27454: IFFALSE 27471
// bpoints := bpoints * 1.1 ;
27456: LD_ADDR_VAR 0 10
27460: PUSH
27461: LD_VAR 0 10
27465: PUSH
27466: LD_REAL  1.10000000000000E+0000
27469: MUL
27470: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27471: LD_ADDR_VAR 0 10
27475: PUSH
27476: LD_VAR 0 10
27480: PUSH
27481: LD_VAR 0 6
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 259
27493: PUSH
27494: LD_REAL  1.15000000000000E+0000
27497: MUL
27498: MUL
27499: ST_TO_ADDR
// end ; unit_vehicle :
27500: GO 28324
27502: LD_INT 2
27504: DOUBLE
27505: EQUAL
27506: IFTRUE 27510
27508: GO 28312
27510: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27511: LD_VAR 0 6
27515: PPUSH
27516: CALL_OW 264
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 42
27526: PUSH
27527: LD_INT 24
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: IN
27535: IFFALSE 27556
// points := [ 25 , 5 , 3 ] ;
27537: LD_ADDR_VAR 0 9
27541: PUSH
27542: LD_INT 25
27544: PUSH
27545: LD_INT 5
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27556: LD_VAR 0 6
27560: PPUSH
27561: CALL_OW 264
27565: PUSH
27566: LD_INT 4
27568: PUSH
27569: LD_INT 43
27571: PUSH
27572: LD_INT 25
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: IN
27580: IFFALSE 27601
// points := [ 40 , 15 , 5 ] ;
27582: LD_ADDR_VAR 0 9
27586: PUSH
27587: LD_INT 40
27589: PUSH
27590: LD_INT 15
27592: PUSH
27593: LD_INT 5
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27601: LD_VAR 0 6
27605: PPUSH
27606: CALL_OW 264
27610: PUSH
27611: LD_INT 3
27613: PUSH
27614: LD_INT 23
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: IN
27621: IFFALSE 27642
// points := [ 7 , 25 , 8 ] ;
27623: LD_ADDR_VAR 0 9
27627: PUSH
27628: LD_INT 7
27630: PUSH
27631: LD_INT 25
27633: PUSH
27634: LD_INT 8
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27642: LD_VAR 0 6
27646: PPUSH
27647: CALL_OW 264
27651: PUSH
27652: LD_INT 5
27654: PUSH
27655: LD_INT 27
27657: PUSH
27658: LD_INT 44
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: IN
27666: IFFALSE 27687
// points := [ 14 , 50 , 16 ] ;
27668: LD_ADDR_VAR 0 9
27672: PUSH
27673: LD_INT 14
27675: PUSH
27676: LD_INT 50
27678: PUSH
27679: LD_INT 16
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27687: LD_VAR 0 6
27691: PPUSH
27692: CALL_OW 264
27696: PUSH
27697: LD_INT 6
27699: PUSH
27700: LD_INT 46
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: IN
27707: IFFALSE 27728
// points := [ 32 , 120 , 70 ] ;
27709: LD_ADDR_VAR 0 9
27713: PUSH
27714: LD_INT 32
27716: PUSH
27717: LD_INT 120
27719: PUSH
27720: LD_INT 70
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27728: LD_VAR 0 6
27732: PPUSH
27733: CALL_OW 264
27737: PUSH
27738: LD_INT 7
27740: PUSH
27741: LD_INT 28
27743: PUSH
27744: LD_INT 45
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: IN
27752: IFFALSE 27773
// points := [ 35 , 20 , 45 ] ;
27754: LD_ADDR_VAR 0 9
27758: PUSH
27759: LD_INT 35
27761: PUSH
27762: LD_INT 20
27764: PUSH
27765: LD_INT 45
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27773: LD_VAR 0 6
27777: PPUSH
27778: CALL_OW 264
27782: PUSH
27783: LD_INT 47
27785: PUSH
27786: EMPTY
27787: LIST
27788: IN
27789: IFFALSE 27810
// points := [ 67 , 45 , 75 ] ;
27791: LD_ADDR_VAR 0 9
27795: PUSH
27796: LD_INT 67
27798: PUSH
27799: LD_INT 45
27801: PUSH
27802: LD_INT 75
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27810: LD_VAR 0 6
27814: PPUSH
27815: CALL_OW 264
27819: PUSH
27820: LD_INT 26
27822: PUSH
27823: EMPTY
27824: LIST
27825: IN
27826: IFFALSE 27847
// points := [ 120 , 30 , 80 ] ;
27828: LD_ADDR_VAR 0 9
27832: PUSH
27833: LD_INT 120
27835: PUSH
27836: LD_INT 30
27838: PUSH
27839: LD_INT 80
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 264
27856: PUSH
27857: LD_INT 22
27859: PUSH
27860: EMPTY
27861: LIST
27862: IN
27863: IFFALSE 27884
// points := [ 40 , 1 , 1 ] ;
27865: LD_ADDR_VAR 0 9
27869: PUSH
27870: LD_INT 40
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27884: LD_VAR 0 6
27888: PPUSH
27889: CALL_OW 264
27893: PUSH
27894: LD_INT 29
27896: PUSH
27897: EMPTY
27898: LIST
27899: IN
27900: IFFALSE 27921
// points := [ 70 , 200 , 400 ] ;
27902: LD_ADDR_VAR 0 9
27906: PUSH
27907: LD_INT 70
27909: PUSH
27910: LD_INT 200
27912: PUSH
27913: LD_INT 400
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27921: LD_VAR 0 6
27925: PPUSH
27926: CALL_OW 264
27930: PUSH
27931: LD_INT 14
27933: PUSH
27934: LD_INT 53
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: IN
27941: IFFALSE 27962
// points := [ 40 , 10 , 20 ] ;
27943: LD_ADDR_VAR 0 9
27947: PUSH
27948: LD_INT 40
27950: PUSH
27951: LD_INT 10
27953: PUSH
27954: LD_INT 20
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27962: LD_VAR 0 6
27966: PPUSH
27967: CALL_OW 264
27971: PUSH
27972: LD_INT 9
27974: PUSH
27975: EMPTY
27976: LIST
27977: IN
27978: IFFALSE 27999
// points := [ 5 , 70 , 20 ] ;
27980: LD_ADDR_VAR 0 9
27984: PUSH
27985: LD_INT 5
27987: PUSH
27988: LD_INT 70
27990: PUSH
27991: LD_INT 20
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: LIST
27998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27999: LD_VAR 0 6
28003: PPUSH
28004: CALL_OW 264
28008: PUSH
28009: LD_INT 10
28011: PUSH
28012: EMPTY
28013: LIST
28014: IN
28015: IFFALSE 28036
// points := [ 35 , 110 , 70 ] ;
28017: LD_ADDR_VAR 0 9
28021: PUSH
28022: LD_INT 35
28024: PUSH
28025: LD_INT 110
28027: PUSH
28028: LD_INT 70
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28036: LD_VAR 0 6
28040: PPUSH
28041: CALL_OW 265
28045: PUSH
28046: LD_INT 25
28048: EQUAL
28049: IFFALSE 28070
// points := [ 80 , 65 , 100 ] ;
28051: LD_ADDR_VAR 0 9
28055: PUSH
28056: LD_INT 80
28058: PUSH
28059: LD_INT 65
28061: PUSH
28062: LD_INT 100
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28070: LD_VAR 0 6
28074: PPUSH
28075: CALL_OW 263
28079: PUSH
28080: LD_INT 1
28082: EQUAL
28083: IFFALSE 28118
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28085: LD_ADDR_VAR 0 10
28089: PUSH
28090: LD_VAR 0 10
28094: PUSH
28095: LD_VAR 0 6
28099: PPUSH
28100: CALL_OW 311
28104: PPUSH
28105: LD_INT 3
28107: PPUSH
28108: CALL_OW 259
28112: PUSH
28113: LD_INT 4
28115: MUL
28116: MUL
28117: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28118: LD_VAR 0 6
28122: PPUSH
28123: CALL_OW 263
28127: PUSH
28128: LD_INT 2
28130: EQUAL
28131: IFFALSE 28182
// begin j := IsControledBy ( i ) ;
28133: LD_ADDR_VAR 0 7
28137: PUSH
28138: LD_VAR 0 6
28142: PPUSH
28143: CALL_OW 312
28147: ST_TO_ADDR
// if j then
28148: LD_VAR 0 7
28152: IFFALSE 28182
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28154: LD_ADDR_VAR 0 10
28158: PUSH
28159: LD_VAR 0 10
28163: PUSH
28164: LD_VAR 0 7
28168: PPUSH
28169: LD_INT 3
28171: PPUSH
28172: CALL_OW 259
28176: PUSH
28177: LD_INT 3
28179: MUL
28180: MUL
28181: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28182: LD_VAR 0 6
28186: PPUSH
28187: CALL_OW 264
28191: PUSH
28192: LD_INT 5
28194: PUSH
28195: LD_INT 6
28197: PUSH
28198: LD_INT 46
28200: PUSH
28201: LD_INT 44
28203: PUSH
28204: LD_INT 47
28206: PUSH
28207: LD_INT 45
28209: PUSH
28210: LD_INT 28
28212: PUSH
28213: LD_INT 7
28215: PUSH
28216: LD_INT 27
28218: PUSH
28219: LD_INT 29
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: IN
28234: PUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_INT 52
28242: PPUSH
28243: CALL_OW 321
28247: PUSH
28248: LD_INT 2
28250: EQUAL
28251: AND
28252: IFFALSE 28269
// bpoints := bpoints * 1.2 ;
28254: LD_ADDR_VAR 0 10
28258: PUSH
28259: LD_VAR 0 10
28263: PUSH
28264: LD_REAL  1.20000000000000E+0000
28267: MUL
28268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28269: LD_VAR 0 6
28273: PPUSH
28274: CALL_OW 264
28278: PUSH
28279: LD_INT 6
28281: PUSH
28282: LD_INT 46
28284: PUSH
28285: LD_INT 47
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: IN
28293: IFFALSE 28310
// bpoints := bpoints * 1.2 ;
28295: LD_ADDR_VAR 0 10
28299: PUSH
28300: LD_VAR 0 10
28304: PUSH
28305: LD_REAL  1.20000000000000E+0000
28308: MUL
28309: ST_TO_ADDR
// end ; unit_building :
28310: GO 28324
28312: LD_INT 3
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28323
28320: POP
// ; end ;
28321: GO 28324
28323: POP
// for j = 1 to 3 do
28324: LD_ADDR_VAR 0 7
28328: PUSH
28329: DOUBLE
28330: LD_INT 1
28332: DEC
28333: ST_TO_ADDR
28334: LD_INT 3
28336: PUSH
28337: FOR_TO
28338: IFFALSE 28391
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28340: LD_ADDR_VAR 0 5
28344: PUSH
28345: LD_VAR 0 5
28349: PPUSH
28350: LD_VAR 0 7
28354: PPUSH
28355: LD_VAR 0 5
28359: PUSH
28360: LD_VAR 0 7
28364: ARRAY
28365: PUSH
28366: LD_VAR 0 9
28370: PUSH
28371: LD_VAR 0 7
28375: ARRAY
28376: PUSH
28377: LD_VAR 0 10
28381: MUL
28382: PLUS
28383: PPUSH
28384: CALL_OW 1
28388: ST_TO_ADDR
28389: GO 28337
28391: POP
28392: POP
// end ;
28393: GO 26876
28395: POP
28396: POP
// result := Replace ( result , 4 , tmp ) ;
28397: LD_ADDR_VAR 0 5
28401: PUSH
28402: LD_VAR 0 5
28406: PPUSH
28407: LD_INT 4
28409: PPUSH
28410: LD_VAR 0 8
28414: PPUSH
28415: CALL_OW 1
28419: ST_TO_ADDR
// end ;
28420: LD_VAR 0 5
28424: RET
// export function DangerAtRange ( unit , range ) ; begin
28425: LD_INT 0
28427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_VAR 0 1
28437: PPUSH
28438: CALL_OW 255
28442: PPUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: CALL_OW 250
28452: PPUSH
28453: LD_VAR 0 1
28457: PPUSH
28458: CALL_OW 251
28462: PPUSH
28463: LD_VAR 0 2
28467: PPUSH
28468: CALL 26728 0 4
28472: ST_TO_ADDR
// end ;
28473: LD_VAR 0 3
28477: RET
// export function DangerInArea ( side , area ) ; begin
28478: LD_INT 0
28480: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_VAR 0 2
28490: PPUSH
28491: LD_INT 81
28493: PUSH
28494: LD_VAR 0 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 70
28507: ST_TO_ADDR
// end ;
28508: LD_VAR 0 3
28512: RET
// export function IsExtension ( b ) ; begin
28513: LD_INT 0
28515: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28516: LD_ADDR_VAR 0 2
28520: PUSH
28521: LD_VAR 0 1
28525: PUSH
28526: LD_INT 23
28528: PUSH
28529: LD_INT 20
28531: PUSH
28532: LD_INT 22
28534: PUSH
28535: LD_INT 17
28537: PUSH
28538: LD_INT 24
28540: PUSH
28541: LD_INT 21
28543: PUSH
28544: LD_INT 19
28546: PUSH
28547: LD_INT 16
28549: PUSH
28550: LD_INT 25
28552: PUSH
28553: LD_INT 18
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: IN
28568: ST_TO_ADDR
// end ;
28569: LD_VAR 0 2
28573: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
28578: PPUSH
// result := [ ] ;
28579: LD_ADDR_VAR 0 4
28583: PUSH
28584: EMPTY
28585: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28586: LD_ADDR_VAR 0 5
28590: PUSH
28591: LD_VAR 0 2
28595: PPUSH
28596: LD_INT 21
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PPUSH
28606: CALL_OW 70
28610: ST_TO_ADDR
// if not tmp then
28611: LD_VAR 0 5
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28684
// if checkLink then
28620: LD_VAR 0 3
28624: IFFALSE 28674
// begin for i in tmp do
28626: LD_ADDR_VAR 0 6
28630: PUSH
28631: LD_VAR 0 5
28635: PUSH
28636: FOR_IN
28637: IFFALSE 28672
// if GetBase ( i ) <> base then
28639: LD_VAR 0 6
28643: PPUSH
28644: CALL_OW 274
28648: PUSH
28649: LD_VAR 0 1
28653: NONEQUAL
28654: IFFALSE 28670
// ComLinkToBase ( base , i ) ;
28656: LD_VAR 0 1
28660: PPUSH
28661: LD_VAR 0 6
28665: PPUSH
28666: CALL_OW 169
28670: GO 28636
28672: POP
28673: POP
// end ; result := tmp ;
28674: LD_ADDR_VAR 0 4
28678: PUSH
28679: LD_VAR 0 5
28683: ST_TO_ADDR
// end ;
28684: LD_VAR 0 4
28688: RET
// export function ComComplete ( units , b ) ; var i ; begin
28689: LD_INT 0
28691: PPUSH
28692: PPUSH
// if not units then
28693: LD_VAR 0 1
28697: NOT
28698: IFFALSE 28702
// exit ;
28700: GO 28792
// for i in units do
28702: LD_ADDR_VAR 0 4
28706: PUSH
28707: LD_VAR 0 1
28711: PUSH
28712: FOR_IN
28713: IFFALSE 28790
// if BuildingStatus ( b ) = bs_build then
28715: LD_VAR 0 2
28719: PPUSH
28720: CALL_OW 461
28724: PUSH
28725: LD_INT 1
28727: EQUAL
28728: IFFALSE 28788
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28730: LD_VAR 0 4
28734: PPUSH
28735: LD_STRING h
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 250
28747: PUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 251
28757: PUSH
28758: LD_VAR 0 2
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: PPUSH
28784: CALL_OW 446
28788: GO 28712
28790: POP
28791: POP
// end ;
28792: LD_VAR 0 3
28796: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28797: LD_INT 0
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28805: LD_VAR 0 1
28809: NOT
28810: PUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 263
28820: PUSH
28821: LD_INT 2
28823: EQUAL
28824: NOT
28825: OR
28826: IFFALSE 28830
// exit ;
28828: GO 29146
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28830: LD_ADDR_VAR 0 6
28834: PUSH
28835: LD_INT 22
28837: PUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 255
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 30
28857: PUSH
28858: LD_INT 36
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 34
28867: PUSH
28868: LD_INT 31
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PPUSH
28884: CALL_OW 69
28888: ST_TO_ADDR
// if not tmp then
28889: LD_VAR 0 6
28893: NOT
28894: IFFALSE 28898
// exit ;
28896: GO 29146
// result := [ ] ;
28898: LD_ADDR_VAR 0 2
28902: PUSH
28903: EMPTY
28904: ST_TO_ADDR
// for i in tmp do
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_VAR 0 6
28914: PUSH
28915: FOR_IN
28916: IFFALSE 28987
// begin t := UnitsInside ( i ) ;
28918: LD_ADDR_VAR 0 4
28922: PUSH
28923: LD_VAR 0 3
28927: PPUSH
28928: CALL_OW 313
28932: ST_TO_ADDR
// if t then
28933: LD_VAR 0 4
28937: IFFALSE 28985
// for j in t do
28939: LD_ADDR_VAR 0 7
28943: PUSH
28944: LD_VAR 0 4
28948: PUSH
28949: FOR_IN
28950: IFFALSE 28983
// result := Insert ( result , result + 1 , j ) ;
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: LD_VAR 0 2
28961: PPUSH
28962: LD_VAR 0 2
28966: PUSH
28967: LD_INT 1
28969: PLUS
28970: PPUSH
28971: LD_VAR 0 7
28975: PPUSH
28976: CALL_OW 2
28980: ST_TO_ADDR
28981: GO 28949
28983: POP
28984: POP
// end ;
28985: GO 28915
28987: POP
28988: POP
// if not result then
28989: LD_VAR 0 2
28993: NOT
28994: IFFALSE 28998
// exit ;
28996: GO 29146
// mech := result [ 1 ] ;
28998: LD_ADDR_VAR 0 5
29002: PUSH
29003: LD_VAR 0 2
29007: PUSH
29008: LD_INT 1
29010: ARRAY
29011: ST_TO_ADDR
// if result > 1 then
29012: LD_VAR 0 2
29016: PUSH
29017: LD_INT 1
29019: GREATER
29020: IFFALSE 29132
// for i = 2 to result do
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: DOUBLE
29028: LD_INT 2
29030: DEC
29031: ST_TO_ADDR
29032: LD_VAR 0 2
29036: PUSH
29037: FOR_TO
29038: IFFALSE 29130
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29040: LD_ADDR_VAR 0 4
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: LD_VAR 0 3
29054: ARRAY
29055: PPUSH
29056: LD_INT 3
29058: PPUSH
29059: CALL_OW 259
29063: PUSH
29064: LD_VAR 0 2
29068: PUSH
29069: LD_VAR 0 3
29073: ARRAY
29074: PPUSH
29075: CALL_OW 432
29079: MINUS
29080: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29081: LD_VAR 0 4
29085: PUSH
29086: LD_VAR 0 5
29090: PPUSH
29091: LD_INT 3
29093: PPUSH
29094: CALL_OW 259
29098: PUSH
29099: LD_VAR 0 5
29103: PPUSH
29104: CALL_OW 432
29108: MINUS
29109: GREATEREQUAL
29110: IFFALSE 29128
// mech := result [ i ] ;
29112: LD_ADDR_VAR 0 5
29116: PUSH
29117: LD_VAR 0 2
29121: PUSH
29122: LD_VAR 0 3
29126: ARRAY
29127: ST_TO_ADDR
// end ;
29128: GO 29037
29130: POP
29131: POP
// ComLinkTo ( vehicle , mech ) ;
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_VAR 0 5
29141: PPUSH
29142: CALL_OW 135
// end ;
29146: LD_VAR 0 2
29150: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
// result := [ ] ;
29166: LD_ADDR_VAR 0 7
29170: PUSH
29171: EMPTY
29172: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 266
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: IN
29193: NOT
29194: IFFALSE 29198
// exit ;
29196: GO 30832
// if name then
29198: LD_VAR 0 3
29202: IFFALSE 29218
// SetBName ( base_dep , name ) ;
29204: LD_VAR 0 1
29208: PPUSH
29209: LD_VAR 0 3
29213: PPUSH
29214: CALL_OW 500
// base := GetBase ( base_dep ) ;
29218: LD_ADDR_VAR 0 15
29222: PUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL_OW 274
29232: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29233: LD_ADDR_VAR 0 16
29237: PUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 255
29247: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29248: LD_ADDR_VAR 0 17
29252: PUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 248
29262: ST_TO_ADDR
// if sources then
29263: LD_VAR 0 5
29267: IFFALSE 29314
// for i = 1 to 3 do
29269: LD_ADDR_VAR 0 8
29273: PUSH
29274: DOUBLE
29275: LD_INT 1
29277: DEC
29278: ST_TO_ADDR
29279: LD_INT 3
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29312
// AddResourceType ( base , i , sources [ i ] ) ;
29285: LD_VAR 0 15
29289: PPUSH
29290: LD_VAR 0 8
29294: PPUSH
29295: LD_VAR 0 5
29299: PUSH
29300: LD_VAR 0 8
29304: ARRAY
29305: PPUSH
29306: CALL_OW 276
29310: GO 29282
29312: POP
29313: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29314: LD_ADDR_VAR 0 18
29318: PUSH
29319: LD_VAR 0 15
29323: PPUSH
29324: LD_VAR 0 2
29328: PPUSH
29329: LD_INT 1
29331: PPUSH
29332: CALL 28574 0 3
29336: ST_TO_ADDR
// InitHc ;
29337: CALL_OW 19
// InitUc ;
29341: CALL_OW 18
// uc_side := side ;
29345: LD_ADDR_OWVAR 20
29349: PUSH
29350: LD_VAR 0 16
29354: ST_TO_ADDR
// uc_nation := nation ;
29355: LD_ADDR_OWVAR 21
29359: PUSH
29360: LD_VAR 0 17
29364: ST_TO_ADDR
// if buildings then
29365: LD_VAR 0 18
29369: IFFALSE 30691
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29371: LD_ADDR_VAR 0 19
29375: PUSH
29376: LD_VAR 0 18
29380: PPUSH
29381: LD_INT 2
29383: PUSH
29384: LD_INT 30
29386: PUSH
29387: LD_INT 29
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 30
29396: PUSH
29397: LD_INT 30
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 72
29413: ST_TO_ADDR
// if tmp then
29414: LD_VAR 0 19
29418: IFFALSE 29466
// for i in tmp do
29420: LD_ADDR_VAR 0 8
29424: PUSH
29425: LD_VAR 0 19
29429: PUSH
29430: FOR_IN
29431: IFFALSE 29464
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29433: LD_VAR 0 8
29437: PPUSH
29438: CALL_OW 250
29442: PPUSH
29443: LD_VAR 0 8
29447: PPUSH
29448: CALL_OW 251
29452: PPUSH
29453: LD_VAR 0 16
29457: PPUSH
29458: CALL_OW 441
29462: GO 29430
29464: POP
29465: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29466: LD_VAR 0 18
29470: PPUSH
29471: LD_INT 2
29473: PUSH
29474: LD_INT 30
29476: PUSH
29477: LD_INT 32
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 30
29486: PUSH
29487: LD_INT 33
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: PPUSH
29499: CALL_OW 72
29503: IFFALSE 29591
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29505: LD_ADDR_VAR 0 8
29509: PUSH
29510: LD_VAR 0 18
29514: PPUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 30
29520: PUSH
29521: LD_INT 32
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 30
29530: PUSH
29531: LD_INT 33
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: PPUSH
29543: CALL_OW 72
29547: PUSH
29548: FOR_IN
29549: IFFALSE 29589
// begin if not GetBWeapon ( i ) then
29551: LD_VAR 0 8
29555: PPUSH
29556: CALL_OW 269
29560: NOT
29561: IFFALSE 29587
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29563: LD_VAR 0 8
29567: PPUSH
29568: LD_VAR 0 8
29572: PPUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: CALL 30837 0 2
29582: PPUSH
29583: CALL_OW 431
// end ;
29587: GO 29548
29589: POP
29590: POP
// end ; for i = 1 to personel do
29591: LD_ADDR_VAR 0 8
29595: PUSH
29596: DOUBLE
29597: LD_INT 1
29599: DEC
29600: ST_TO_ADDR
29601: LD_VAR 0 6
29605: PUSH
29606: FOR_TO
29607: IFFALSE 30671
// begin if i > 4 then
29609: LD_VAR 0 8
29613: PUSH
29614: LD_INT 4
29616: GREATER
29617: IFFALSE 29621
// break ;
29619: GO 30671
// case i of 1 :
29621: LD_VAR 0 8
29625: PUSH
29626: LD_INT 1
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29634
29632: GO 29714
29634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29635: LD_ADDR_VAR 0 12
29639: PUSH
29640: LD_VAR 0 18
29644: PPUSH
29645: LD_INT 22
29647: PUSH
29648: LD_VAR 0 16
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 58
29659: PUSH
29660: EMPTY
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: PUSH
29666: LD_INT 30
29668: PUSH
29669: LD_INT 32
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 30
29678: PUSH
29679: LD_INT 4
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 30
29688: PUSH
29689: LD_INT 5
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: PPUSH
29707: CALL_OW 72
29711: ST_TO_ADDR
29712: GO 29936
29714: LD_INT 2
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29784
29722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29723: LD_ADDR_VAR 0 12
29727: PUSH
29728: LD_VAR 0 18
29732: PPUSH
29733: LD_INT 22
29735: PUSH
29736: LD_VAR 0 16
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 2
29747: PUSH
29748: LD_INT 30
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 30
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 72
29781: ST_TO_ADDR
29782: GO 29936
29784: LD_INT 3
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29854
29792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29793: LD_ADDR_VAR 0 12
29797: PUSH
29798: LD_VAR 0 18
29802: PPUSH
29803: LD_INT 22
29805: PUSH
29806: LD_VAR 0 16
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 30
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 30
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 72
29851: ST_TO_ADDR
29852: GO 29936
29854: LD_INT 4
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 29935
29862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29863: LD_ADDR_VAR 0 12
29867: PUSH
29868: LD_VAR 0 18
29872: PPUSH
29873: LD_INT 22
29875: PUSH
29876: LD_VAR 0 16
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 30
29890: PUSH
29891: LD_INT 6
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 7
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 8
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PPUSH
29928: CALL_OW 72
29932: ST_TO_ADDR
29933: GO 29936
29935: POP
// if i = 1 then
29936: LD_VAR 0 8
29940: PUSH
29941: LD_INT 1
29943: EQUAL
29944: IFFALSE 30055
// begin tmp := [ ] ;
29946: LD_ADDR_VAR 0 19
29950: PUSH
29951: EMPTY
29952: ST_TO_ADDR
// for j in f do
29953: LD_ADDR_VAR 0 9
29957: PUSH
29958: LD_VAR 0 12
29962: PUSH
29963: FOR_IN
29964: IFFALSE 30037
// if GetBType ( j ) = b_bunker then
29966: LD_VAR 0 9
29970: PPUSH
29971: CALL_OW 266
29975: PUSH
29976: LD_INT 32
29978: EQUAL
29979: IFFALSE 30006
// tmp := Insert ( tmp , 1 , j ) else
29981: LD_ADDR_VAR 0 19
29985: PUSH
29986: LD_VAR 0 19
29990: PPUSH
29991: LD_INT 1
29993: PPUSH
29994: LD_VAR 0 9
29998: PPUSH
29999: CALL_OW 2
30003: ST_TO_ADDR
30004: GO 30035
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30006: LD_ADDR_VAR 0 19
30010: PUSH
30011: LD_VAR 0 19
30015: PPUSH
30016: LD_VAR 0 19
30020: PUSH
30021: LD_INT 1
30023: PLUS
30024: PPUSH
30025: LD_VAR 0 9
30029: PPUSH
30030: CALL_OW 2
30034: ST_TO_ADDR
30035: GO 29963
30037: POP
30038: POP
// if tmp then
30039: LD_VAR 0 19
30043: IFFALSE 30055
// f := tmp ;
30045: LD_ADDR_VAR 0 12
30049: PUSH
30050: LD_VAR 0 19
30054: ST_TO_ADDR
// end ; x := personel [ i ] ;
30055: LD_ADDR_VAR 0 13
30059: PUSH
30060: LD_VAR 0 6
30064: PUSH
30065: LD_VAR 0 8
30069: ARRAY
30070: ST_TO_ADDR
// if x = - 1 then
30071: LD_VAR 0 13
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: EQUAL
30080: IFFALSE 30289
// begin for j in f do
30082: LD_ADDR_VAR 0 9
30086: PUSH
30087: LD_VAR 0 12
30091: PUSH
30092: FOR_IN
30093: IFFALSE 30285
// repeat InitHc ;
30095: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30099: LD_VAR 0 9
30103: PPUSH
30104: CALL_OW 266
30108: PUSH
30109: LD_INT 5
30111: EQUAL
30112: IFFALSE 30182
// begin if UnitsInside ( j ) < 3 then
30114: LD_VAR 0 9
30118: PPUSH
30119: CALL_OW 313
30123: PUSH
30124: LD_INT 3
30126: LESS
30127: IFFALSE 30163
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30129: LD_INT 0
30131: PPUSH
30132: LD_INT 5
30134: PUSH
30135: LD_INT 8
30137: PUSH
30138: LD_INT 9
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: LD_VAR 0 17
30150: ARRAY
30151: PPUSH
30152: LD_VAR 0 4
30156: PPUSH
30157: CALL_OW 380
30161: GO 30180
// PrepareHuman ( false , i , skill ) ;
30163: LD_INT 0
30165: PPUSH
30166: LD_VAR 0 8
30170: PPUSH
30171: LD_VAR 0 4
30175: PPUSH
30176: CALL_OW 380
// end else
30180: GO 30199
// PrepareHuman ( false , i , skill ) ;
30182: LD_INT 0
30184: PPUSH
30185: LD_VAR 0 8
30189: PPUSH
30190: LD_VAR 0 4
30194: PPUSH
30195: CALL_OW 380
// un := CreateHuman ;
30199: LD_ADDR_VAR 0 14
30203: PUSH
30204: CALL_OW 44
30208: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30209: LD_ADDR_VAR 0 7
30213: PUSH
30214: LD_VAR 0 7
30218: PPUSH
30219: LD_INT 1
30221: PPUSH
30222: LD_VAR 0 14
30226: PPUSH
30227: CALL_OW 2
30231: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30232: LD_VAR 0 14
30236: PPUSH
30237: LD_VAR 0 9
30241: PPUSH
30242: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30246: LD_VAR 0 9
30250: PPUSH
30251: CALL_OW 313
30255: PUSH
30256: LD_INT 6
30258: EQUAL
30259: PUSH
30260: LD_VAR 0 9
30264: PPUSH
30265: CALL_OW 266
30269: PUSH
30270: LD_INT 32
30272: PUSH
30273: LD_INT 31
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: IN
30280: OR
30281: IFFALSE 30095
30283: GO 30092
30285: POP
30286: POP
// end else
30287: GO 30669
// for j = 1 to x do
30289: LD_ADDR_VAR 0 9
30293: PUSH
30294: DOUBLE
30295: LD_INT 1
30297: DEC
30298: ST_TO_ADDR
30299: LD_VAR 0 13
30303: PUSH
30304: FOR_TO
30305: IFFALSE 30667
// begin InitHc ;
30307: CALL_OW 19
// if not f then
30311: LD_VAR 0 12
30315: NOT
30316: IFFALSE 30405
// begin PrepareHuman ( false , i , skill ) ;
30318: LD_INT 0
30320: PPUSH
30321: LD_VAR 0 8
30325: PPUSH
30326: LD_VAR 0 4
30330: PPUSH
30331: CALL_OW 380
// un := CreateHuman ;
30335: LD_ADDR_VAR 0 14
30339: PUSH
30340: CALL_OW 44
30344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30345: LD_ADDR_VAR 0 7
30349: PUSH
30350: LD_VAR 0 7
30354: PPUSH
30355: LD_INT 1
30357: PPUSH
30358: LD_VAR 0 14
30362: PPUSH
30363: CALL_OW 2
30367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30368: LD_VAR 0 14
30372: PPUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 250
30382: PPUSH
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 251
30392: PPUSH
30393: LD_INT 10
30395: PPUSH
30396: LD_INT 0
30398: PPUSH
30399: CALL_OW 50
// continue ;
30403: GO 30304
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30405: LD_VAR 0 12
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 313
30418: PUSH
30419: LD_VAR 0 12
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: CALL_OW 266
30432: PUSH
30433: LD_INT 32
30435: PUSH
30436: LD_INT 31
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: IN
30443: AND
30444: PUSH
30445: LD_VAR 0 12
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PPUSH
30454: CALL_OW 313
30458: PUSH
30459: LD_INT 6
30461: EQUAL
30462: OR
30463: IFFALSE 30483
// f := Delete ( f , 1 ) ;
30465: LD_ADDR_VAR 0 12
30469: PUSH
30470: LD_VAR 0 12
30474: PPUSH
30475: LD_INT 1
30477: PPUSH
30478: CALL_OW 3
30482: ST_TO_ADDR
// if not f then
30483: LD_VAR 0 12
30487: NOT
30488: IFFALSE 30506
// begin x := x + 2 ;
30490: LD_ADDR_VAR 0 13
30494: PUSH
30495: LD_VAR 0 13
30499: PUSH
30500: LD_INT 2
30502: PLUS
30503: ST_TO_ADDR
// continue ;
30504: GO 30304
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30506: LD_VAR 0 12
30510: PUSH
30511: LD_INT 1
30513: ARRAY
30514: PPUSH
30515: CALL_OW 266
30519: PUSH
30520: LD_INT 5
30522: EQUAL
30523: IFFALSE 30597
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30525: LD_VAR 0 12
30529: PUSH
30530: LD_INT 1
30532: ARRAY
30533: PPUSH
30534: CALL_OW 313
30538: PUSH
30539: LD_INT 3
30541: LESS
30542: IFFALSE 30578
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30544: LD_INT 0
30546: PPUSH
30547: LD_INT 5
30549: PUSH
30550: LD_INT 8
30552: PUSH
30553: LD_INT 9
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: PUSH
30561: LD_VAR 0 17
30565: ARRAY
30566: PPUSH
30567: LD_VAR 0 4
30571: PPUSH
30572: CALL_OW 380
30576: GO 30595
// PrepareHuman ( false , i , skill ) ;
30578: LD_INT 0
30580: PPUSH
30581: LD_VAR 0 8
30585: PPUSH
30586: LD_VAR 0 4
30590: PPUSH
30591: CALL_OW 380
// end else
30595: GO 30614
// PrepareHuman ( false , i , skill ) ;
30597: LD_INT 0
30599: PPUSH
30600: LD_VAR 0 8
30604: PPUSH
30605: LD_VAR 0 4
30609: PPUSH
30610: CALL_OW 380
// un := CreateHuman ;
30614: LD_ADDR_VAR 0 14
30618: PUSH
30619: CALL_OW 44
30623: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30624: LD_ADDR_VAR 0 7
30628: PUSH
30629: LD_VAR 0 7
30633: PPUSH
30634: LD_INT 1
30636: PPUSH
30637: LD_VAR 0 14
30641: PPUSH
30642: CALL_OW 2
30646: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30647: LD_VAR 0 14
30651: PPUSH
30652: LD_VAR 0 12
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: CALL_OW 52
// end ;
30665: GO 30304
30667: POP
30668: POP
// end ;
30669: GO 29606
30671: POP
30672: POP
// result := result ^ buildings ;
30673: LD_ADDR_VAR 0 7
30677: PUSH
30678: LD_VAR 0 7
30682: PUSH
30683: LD_VAR 0 18
30687: ADD
30688: ST_TO_ADDR
// end else
30689: GO 30832
// begin for i = 1 to personel do
30691: LD_ADDR_VAR 0 8
30695: PUSH
30696: DOUBLE
30697: LD_INT 1
30699: DEC
30700: ST_TO_ADDR
30701: LD_VAR 0 6
30705: PUSH
30706: FOR_TO
30707: IFFALSE 30830
// begin if i > 4 then
30709: LD_VAR 0 8
30713: PUSH
30714: LD_INT 4
30716: GREATER
30717: IFFALSE 30721
// break ;
30719: GO 30830
// x := personel [ i ] ;
30721: LD_ADDR_VAR 0 13
30725: PUSH
30726: LD_VAR 0 6
30730: PUSH
30731: LD_VAR 0 8
30735: ARRAY
30736: ST_TO_ADDR
// if x = - 1 then
30737: LD_VAR 0 13
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: EQUAL
30746: IFFALSE 30750
// continue ;
30748: GO 30706
// PrepareHuman ( false , i , skill ) ;
30750: LD_INT 0
30752: PPUSH
30753: LD_VAR 0 8
30757: PPUSH
30758: LD_VAR 0 4
30762: PPUSH
30763: CALL_OW 380
// un := CreateHuman ;
30767: LD_ADDR_VAR 0 14
30771: PUSH
30772: CALL_OW 44
30776: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30777: LD_VAR 0 14
30781: PPUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 250
30791: PPUSH
30792: LD_VAR 0 1
30796: PPUSH
30797: CALL_OW 251
30801: PPUSH
30802: LD_INT 10
30804: PPUSH
30805: LD_INT 0
30807: PPUSH
30808: CALL_OW 50
// result := result ^ un ;
30812: LD_ADDR_VAR 0 7
30816: PUSH
30817: LD_VAR 0 7
30821: PUSH
30822: LD_VAR 0 14
30826: ADD
30827: ST_TO_ADDR
// end ;
30828: GO 30706
30830: POP
30831: POP
// end ; end ;
30832: LD_VAR 0 7
30836: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
30853: PPUSH
30854: PPUSH
// result := false ;
30855: LD_ADDR_VAR 0 3
30859: PUSH
30860: LD_INT 0
30862: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30863: LD_VAR 0 1
30867: NOT
30868: PUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 266
30878: PUSH
30879: LD_INT 32
30881: PUSH
30882: LD_INT 33
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: IN
30889: NOT
30890: OR
30891: IFFALSE 30895
// exit ;
30893: GO 32034
// nat := GetNation ( tower ) ;
30895: LD_ADDR_VAR 0 12
30899: PUSH
30900: LD_VAR 0 1
30904: PPUSH
30905: CALL_OW 248
30909: ST_TO_ADDR
// side := GetSide ( tower ) ;
30910: LD_ADDR_VAR 0 16
30914: PUSH
30915: LD_VAR 0 1
30919: PPUSH
30920: CALL_OW 255
30924: ST_TO_ADDR
// x := GetX ( tower ) ;
30925: LD_ADDR_VAR 0 10
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 250
30939: ST_TO_ADDR
// y := GetY ( tower ) ;
30940: LD_ADDR_VAR 0 11
30944: PUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 251
30954: ST_TO_ADDR
// if not x or not y then
30955: LD_VAR 0 10
30959: NOT
30960: PUSH
30961: LD_VAR 0 11
30965: NOT
30966: OR
30967: IFFALSE 30971
// exit ;
30969: GO 32034
// weapon := 0 ;
30971: LD_ADDR_VAR 0 18
30975: PUSH
30976: LD_INT 0
30978: ST_TO_ADDR
// fac_list := [ ] ;
30979: LD_ADDR_VAR 0 17
30983: PUSH
30984: EMPTY
30985: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30986: LD_ADDR_VAR 0 6
30990: PUSH
30991: LD_VAR 0 1
30995: PPUSH
30996: CALL_OW 274
31000: PPUSH
31001: LD_VAR 0 2
31005: PPUSH
31006: LD_INT 0
31008: PPUSH
31009: CALL 28574 0 3
31013: PPUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 3
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PPUSH
31024: CALL_OW 72
31028: ST_TO_ADDR
// if not factories then
31029: LD_VAR 0 6
31033: NOT
31034: IFFALSE 31038
// exit ;
31036: GO 32034
// for i in factories do
31038: LD_ADDR_VAR 0 8
31042: PUSH
31043: LD_VAR 0 6
31047: PUSH
31048: FOR_IN
31049: IFFALSE 31074
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31051: LD_ADDR_VAR 0 17
31055: PUSH
31056: LD_VAR 0 17
31060: PUSH
31061: LD_VAR 0 8
31065: PPUSH
31066: CALL_OW 478
31070: UNION
31071: ST_TO_ADDR
31072: GO 31048
31074: POP
31075: POP
// if not fac_list then
31076: LD_VAR 0 17
31080: NOT
31081: IFFALSE 31085
// exit ;
31083: GO 32034
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31085: LD_ADDR_VAR 0 5
31089: PUSH
31090: LD_INT 4
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 9
31098: PUSH
31099: LD_INT 10
31101: PUSH
31102: LD_INT 6
31104: PUSH
31105: LD_INT 7
31107: PUSH
31108: LD_INT 11
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 27
31122: PUSH
31123: LD_INT 28
31125: PUSH
31126: LD_INT 26
31128: PUSH
31129: LD_INT 30
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 43
31140: PUSH
31141: LD_INT 44
31143: PUSH
31144: LD_INT 46
31146: PUSH
31147: LD_INT 45
31149: PUSH
31150: LD_INT 47
31152: PUSH
31153: LD_INT 49
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: PUSH
31169: LD_VAR 0 12
31173: ARRAY
31174: ST_TO_ADDR
// for i in list do
31175: LD_ADDR_VAR 0 8
31179: PUSH
31180: LD_VAR 0 5
31184: PUSH
31185: FOR_IN
31186: IFFALSE 31219
// if not i in fac_list then
31188: LD_VAR 0 8
31192: PUSH
31193: LD_VAR 0 17
31197: IN
31198: NOT
31199: IFFALSE 31217
// list := list diff i ;
31201: LD_ADDR_VAR 0 5
31205: PUSH
31206: LD_VAR 0 5
31210: PUSH
31211: LD_VAR 0 8
31215: DIFF
31216: ST_TO_ADDR
31217: GO 31185
31219: POP
31220: POP
// if not list then
31221: LD_VAR 0 5
31225: NOT
31226: IFFALSE 31230
// exit ;
31228: GO 32034
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31230: LD_VAR 0 12
31234: PUSH
31235: LD_INT 3
31237: EQUAL
31238: PUSH
31239: LD_INT 49
31241: PUSH
31242: LD_VAR 0 5
31246: IN
31247: AND
31248: PUSH
31249: LD_INT 31
31251: PPUSH
31252: LD_VAR 0 16
31256: PPUSH
31257: CALL_OW 321
31261: PUSH
31262: LD_INT 2
31264: EQUAL
31265: AND
31266: IFFALSE 31326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31268: LD_INT 22
31270: PUSH
31271: LD_VAR 0 16
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 35
31282: PUSH
31283: LD_INT 49
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 91
31292: PUSH
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 10
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: NOT
31316: IFFALSE 31326
// weapon := ru_time_lapser ;
31318: LD_ADDR_VAR 0 18
31322: PUSH
31323: LD_INT 49
31325: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31326: LD_VAR 0 12
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: IN
31341: PUSH
31342: LD_INT 11
31344: PUSH
31345: LD_VAR 0 5
31349: IN
31350: PUSH
31351: LD_INT 30
31353: PUSH
31354: LD_VAR 0 5
31358: IN
31359: OR
31360: AND
31361: PUSH
31362: LD_INT 6
31364: PPUSH
31365: LD_VAR 0 16
31369: PPUSH
31370: CALL_OW 321
31374: PUSH
31375: LD_INT 2
31377: EQUAL
31378: AND
31379: IFFALSE 31544
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31381: LD_INT 22
31383: PUSH
31384: LD_VAR 0 16
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 35
31398: PUSH
31399: LD_INT 11
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 35
31408: PUSH
31409: LD_INT 30
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 91
31423: PUSH
31424: LD_VAR 0 1
31428: PUSH
31429: LD_INT 18
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 69
31446: NOT
31447: PUSH
31448: LD_INT 22
31450: PUSH
31451: LD_VAR 0 16
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: LD_INT 30
31465: PUSH
31466: LD_INT 32
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 30
31475: PUSH
31476: LD_INT 33
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 91
31490: PUSH
31491: LD_VAR 0 1
31495: PUSH
31496: LD_INT 12
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: PPUSH
31512: CALL_OW 69
31516: PUSH
31517: LD_INT 2
31519: GREATER
31520: AND
31521: IFFALSE 31544
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31523: LD_ADDR_VAR 0 18
31527: PUSH
31528: LD_INT 11
31530: PUSH
31531: LD_INT 30
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_VAR 0 12
31542: ARRAY
31543: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31544: LD_VAR 0 18
31548: NOT
31549: PUSH
31550: LD_INT 40
31552: PPUSH
31553: LD_VAR 0 16
31557: PPUSH
31558: CALL_OW 321
31562: PUSH
31563: LD_INT 2
31565: EQUAL
31566: AND
31567: PUSH
31568: LD_INT 7
31570: PUSH
31571: LD_VAR 0 5
31575: IN
31576: PUSH
31577: LD_INT 28
31579: PUSH
31580: LD_VAR 0 5
31584: IN
31585: OR
31586: PUSH
31587: LD_INT 45
31589: PUSH
31590: LD_VAR 0 5
31594: IN
31595: OR
31596: AND
31597: IFFALSE 31851
// begin hex := GetHexInfo ( x , y ) ;
31599: LD_ADDR_VAR 0 4
31603: PUSH
31604: LD_VAR 0 10
31608: PPUSH
31609: LD_VAR 0 11
31613: PPUSH
31614: CALL_OW 546
31618: ST_TO_ADDR
// if hex [ 1 ] then
31619: LD_VAR 0 4
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: IFFALSE 31631
// exit ;
31629: GO 32034
// height := hex [ 2 ] ;
31631: LD_ADDR_VAR 0 15
31635: PUSH
31636: LD_VAR 0 4
31640: PUSH
31641: LD_INT 2
31643: ARRAY
31644: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31645: LD_ADDR_VAR 0 14
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 5
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// for i in tmp do
31668: LD_ADDR_VAR 0 8
31672: PUSH
31673: LD_VAR 0 14
31677: PUSH
31678: FOR_IN
31679: IFFALSE 31849
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_VAR 0 10
31690: PPUSH
31691: LD_VAR 0 8
31695: PPUSH
31696: LD_INT 5
31698: PPUSH
31699: CALL_OW 272
31703: PUSH
31704: LD_VAR 0 11
31708: PPUSH
31709: LD_VAR 0 8
31713: PPUSH
31714: LD_INT 5
31716: PPUSH
31717: CALL_OW 273
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31726: LD_VAR 0 9
31730: PUSH
31731: LD_INT 1
31733: ARRAY
31734: PPUSH
31735: LD_VAR 0 9
31739: PUSH
31740: LD_INT 2
31742: ARRAY
31743: PPUSH
31744: CALL_OW 488
31748: IFFALSE 31847
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31750: LD_ADDR_VAR 0 4
31754: PUSH
31755: LD_VAR 0 9
31759: PUSH
31760: LD_INT 1
31762: ARRAY
31763: PPUSH
31764: LD_VAR 0 9
31768: PUSH
31769: LD_INT 2
31771: ARRAY
31772: PPUSH
31773: CALL_OW 546
31777: ST_TO_ADDR
// if hex [ 1 ] then
31778: LD_VAR 0 4
31782: PUSH
31783: LD_INT 1
31785: ARRAY
31786: IFFALSE 31790
// continue ;
31788: GO 31678
// h := hex [ 2 ] ;
31790: LD_ADDR_VAR 0 13
31794: PUSH
31795: LD_VAR 0 4
31799: PUSH
31800: LD_INT 2
31802: ARRAY
31803: ST_TO_ADDR
// if h + 7 < height then
31804: LD_VAR 0 13
31808: PUSH
31809: LD_INT 7
31811: PLUS
31812: PUSH
31813: LD_VAR 0 15
31817: LESS
31818: IFFALSE 31847
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31820: LD_ADDR_VAR 0 18
31824: PUSH
31825: LD_INT 7
31827: PUSH
31828: LD_INT 28
31830: PUSH
31831: LD_INT 45
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: PUSH
31839: LD_VAR 0 12
31843: ARRAY
31844: ST_TO_ADDR
// break ;
31845: GO 31849
// end ; end ; end ;
31847: GO 31678
31849: POP
31850: POP
// end ; if not weapon then
31851: LD_VAR 0 18
31855: NOT
31856: IFFALSE 31916
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31858: LD_ADDR_VAR 0 5
31862: PUSH
31863: LD_VAR 0 5
31867: PUSH
31868: LD_INT 11
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 49
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: DIFF
31882: ST_TO_ADDR
// if not list then
31883: LD_VAR 0 5
31887: NOT
31888: IFFALSE 31892
// exit ;
31890: GO 32034
// weapon := list [ rand ( 1 , list ) ] ;
31892: LD_ADDR_VAR 0 18
31896: PUSH
31897: LD_VAR 0 5
31901: PUSH
31902: LD_INT 1
31904: PPUSH
31905: LD_VAR 0 5
31909: PPUSH
31910: CALL_OW 12
31914: ARRAY
31915: ST_TO_ADDR
// end ; if weapon then
31916: LD_VAR 0 18
31920: IFFALSE 32034
// begin tmp := CostOfWeapon ( weapon ) ;
31922: LD_ADDR_VAR 0 14
31926: PUSH
31927: LD_VAR 0 18
31931: PPUSH
31932: CALL_OW 451
31936: ST_TO_ADDR
// j := GetBase ( tower ) ;
31937: LD_ADDR_VAR 0 9
31941: PUSH
31942: LD_VAR 0 1
31946: PPUSH
31947: CALL_OW 274
31951: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31952: LD_VAR 0 9
31956: PPUSH
31957: LD_INT 1
31959: PPUSH
31960: CALL_OW 275
31964: PUSH
31965: LD_VAR 0 14
31969: PUSH
31970: LD_INT 1
31972: ARRAY
31973: GREATEREQUAL
31974: PUSH
31975: LD_VAR 0 9
31979: PPUSH
31980: LD_INT 2
31982: PPUSH
31983: CALL_OW 275
31987: PUSH
31988: LD_VAR 0 14
31992: PUSH
31993: LD_INT 2
31995: ARRAY
31996: GREATEREQUAL
31997: AND
31998: PUSH
31999: LD_VAR 0 9
32003: PPUSH
32004: LD_INT 3
32006: PPUSH
32007: CALL_OW 275
32011: PUSH
32012: LD_VAR 0 14
32016: PUSH
32017: LD_INT 3
32019: ARRAY
32020: GREATEREQUAL
32021: AND
32022: IFFALSE 32034
// result := weapon ;
32024: LD_ADDR_VAR 0 3
32028: PUSH
32029: LD_VAR 0 18
32033: ST_TO_ADDR
// end ; end ;
32034: LD_VAR 0 3
32038: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
// result := true ;
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 1
32050: ST_TO_ADDR
// if array1 = array2 then
32051: LD_VAR 0 1
32055: PUSH
32056: LD_VAR 0 2
32060: EQUAL
32061: IFFALSE 32121
// begin for i = 1 to array1 do
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: DOUBLE
32069: LD_INT 1
32071: DEC
32072: ST_TO_ADDR
32073: LD_VAR 0 1
32077: PUSH
32078: FOR_TO
32079: IFFALSE 32117
// if array1 [ i ] <> array2 [ i ] then
32081: LD_VAR 0 1
32085: PUSH
32086: LD_VAR 0 4
32090: ARRAY
32091: PUSH
32092: LD_VAR 0 2
32096: PUSH
32097: LD_VAR 0 4
32101: ARRAY
32102: NONEQUAL
32103: IFFALSE 32115
// begin result := false ;
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_INT 0
32112: ST_TO_ADDR
// break ;
32113: GO 32117
// end ;
32115: GO 32078
32117: POP
32118: POP
// end else
32119: GO 32129
// result := false ;
32121: LD_ADDR_VAR 0 3
32125: PUSH
32126: LD_INT 0
32128: ST_TO_ADDR
// end ;
32129: LD_VAR 0 3
32133: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32134: LD_INT 0
32136: PPUSH
32137: PPUSH
// if not array1 or not array2 then
32138: LD_VAR 0 1
32142: NOT
32143: PUSH
32144: LD_VAR 0 2
32148: NOT
32149: OR
32150: IFFALSE 32154
// exit ;
32152: GO 32218
// result := true ;
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_INT 1
32161: ST_TO_ADDR
// for i = 1 to array1 do
32162: LD_ADDR_VAR 0 4
32166: PUSH
32167: DOUBLE
32168: LD_INT 1
32170: DEC
32171: ST_TO_ADDR
32172: LD_VAR 0 1
32176: PUSH
32177: FOR_TO
32178: IFFALSE 32216
// if array1 [ i ] <> array2 [ i ] then
32180: LD_VAR 0 1
32184: PUSH
32185: LD_VAR 0 4
32189: ARRAY
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: LD_VAR 0 4
32200: ARRAY
32201: NONEQUAL
32202: IFFALSE 32214
// begin result := false ;
32204: LD_ADDR_VAR 0 3
32208: PUSH
32209: LD_INT 0
32211: ST_TO_ADDR
// break ;
32212: GO 32216
// end ;
32214: GO 32177
32216: POP
32217: POP
// end ;
32218: LD_VAR 0 3
32222: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32223: LD_INT 0
32225: PPUSH
32226: PPUSH
32227: PPUSH
// pom := GetBase ( fac ) ;
32228: LD_ADDR_VAR 0 5
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 274
32242: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32243: LD_ADDR_VAR 0 4
32247: PUSH
32248: LD_VAR 0 2
32252: PUSH
32253: LD_INT 1
32255: ARRAY
32256: PPUSH
32257: LD_VAR 0 2
32261: PUSH
32262: LD_INT 2
32264: ARRAY
32265: PPUSH
32266: LD_VAR 0 2
32270: PUSH
32271: LD_INT 3
32273: ARRAY
32274: PPUSH
32275: LD_VAR 0 2
32279: PUSH
32280: LD_INT 4
32282: ARRAY
32283: PPUSH
32284: CALL_OW 449
32288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_VAR 0 5
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: CALL_OW 275
32306: PUSH
32307: LD_VAR 0 4
32311: PUSH
32312: LD_INT 1
32314: ARRAY
32315: GREATEREQUAL
32316: PUSH
32317: LD_VAR 0 5
32321: PPUSH
32322: LD_INT 2
32324: PPUSH
32325: CALL_OW 275
32329: PUSH
32330: LD_VAR 0 4
32334: PUSH
32335: LD_INT 2
32337: ARRAY
32338: GREATEREQUAL
32339: AND
32340: PUSH
32341: LD_VAR 0 5
32345: PPUSH
32346: LD_INT 3
32348: PPUSH
32349: CALL_OW 275
32353: PUSH
32354: LD_VAR 0 4
32358: PUSH
32359: LD_INT 3
32361: ARRAY
32362: GREATEREQUAL
32363: AND
32364: ST_TO_ADDR
// end ;
32365: LD_VAR 0 3
32369: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32370: LD_INT 0
32372: PPUSH
32373: PPUSH
32374: PPUSH
32375: PPUSH
// pom := GetBase ( building ) ;
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_VAR 0 1
32385: PPUSH
32386: CALL_OW 274
32390: ST_TO_ADDR
// if not pom then
32391: LD_VAR 0 3
32395: NOT
32396: IFFALSE 32400
// exit ;
32398: GO 32570
// btype := GetBType ( building ) ;
32400: LD_ADDR_VAR 0 5
32404: PUSH
32405: LD_VAR 0 1
32409: PPUSH
32410: CALL_OW 266
32414: ST_TO_ADDR
// if btype = b_armoury then
32415: LD_VAR 0 5
32419: PUSH
32420: LD_INT 4
32422: EQUAL
32423: IFFALSE 32433
// btype := b_barracks ;
32425: LD_ADDR_VAR 0 5
32429: PUSH
32430: LD_INT 5
32432: ST_TO_ADDR
// if btype = b_depot then
32433: LD_VAR 0 5
32437: PUSH
32438: LD_INT 0
32440: EQUAL
32441: IFFALSE 32451
// btype := b_warehouse ;
32443: LD_ADDR_VAR 0 5
32447: PUSH
32448: LD_INT 1
32450: ST_TO_ADDR
// if btype = b_workshop then
32451: LD_VAR 0 5
32455: PUSH
32456: LD_INT 2
32458: EQUAL
32459: IFFALSE 32469
// btype := b_factory ;
32461: LD_ADDR_VAR 0 5
32465: PUSH
32466: LD_INT 3
32468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32469: LD_ADDR_VAR 0 4
32473: PUSH
32474: LD_VAR 0 5
32478: PPUSH
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 248
32488: PPUSH
32489: CALL_OW 450
32493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32494: LD_ADDR_VAR 0 2
32498: PUSH
32499: LD_VAR 0 3
32503: PPUSH
32504: LD_INT 1
32506: PPUSH
32507: CALL_OW 275
32511: PUSH
32512: LD_VAR 0 4
32516: PUSH
32517: LD_INT 1
32519: ARRAY
32520: GREATEREQUAL
32521: PUSH
32522: LD_VAR 0 3
32526: PPUSH
32527: LD_INT 2
32529: PPUSH
32530: CALL_OW 275
32534: PUSH
32535: LD_VAR 0 4
32539: PUSH
32540: LD_INT 2
32542: ARRAY
32543: GREATEREQUAL
32544: AND
32545: PUSH
32546: LD_VAR 0 3
32550: PPUSH
32551: LD_INT 3
32553: PPUSH
32554: CALL_OW 275
32558: PUSH
32559: LD_VAR 0 4
32563: PUSH
32564: LD_INT 3
32566: ARRAY
32567: GREATEREQUAL
32568: AND
32569: ST_TO_ADDR
// end ;
32570: LD_VAR 0 2
32574: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32575: LD_INT 0
32577: PPUSH
32578: PPUSH
32579: PPUSH
// pom := GetBase ( building ) ;
32580: LD_ADDR_VAR 0 4
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: CALL_OW 274
32594: ST_TO_ADDR
// if not pom then
32595: LD_VAR 0 4
32599: NOT
32600: IFFALSE 32604
// exit ;
32602: GO 32705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32604: LD_ADDR_VAR 0 5
32608: PUSH
32609: LD_VAR 0 2
32613: PPUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 248
32623: PPUSH
32624: CALL_OW 450
32628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32629: LD_ADDR_VAR 0 3
32633: PUSH
32634: LD_VAR 0 4
32638: PPUSH
32639: LD_INT 1
32641: PPUSH
32642: CALL_OW 275
32646: PUSH
32647: LD_VAR 0 5
32651: PUSH
32652: LD_INT 1
32654: ARRAY
32655: GREATEREQUAL
32656: PUSH
32657: LD_VAR 0 4
32661: PPUSH
32662: LD_INT 2
32664: PPUSH
32665: CALL_OW 275
32669: PUSH
32670: LD_VAR 0 5
32674: PUSH
32675: LD_INT 2
32677: ARRAY
32678: GREATEREQUAL
32679: AND
32680: PUSH
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_INT 3
32688: PPUSH
32689: CALL_OW 275
32693: PUSH
32694: LD_VAR 0 5
32698: PUSH
32699: LD_INT 3
32701: ARRAY
32702: GREATEREQUAL
32703: AND
32704: ST_TO_ADDR
// end ;
32705: LD_VAR 0 3
32709: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32710: LD_INT 0
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
// result := false ;
32723: LD_ADDR_VAR 0 8
32727: PUSH
32728: LD_INT 0
32730: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32731: LD_VAR 0 5
32735: NOT
32736: PUSH
32737: LD_VAR 0 1
32741: NOT
32742: OR
32743: PUSH
32744: LD_VAR 0 2
32748: NOT
32749: OR
32750: PUSH
32751: LD_VAR 0 3
32755: NOT
32756: OR
32757: IFFALSE 32761
// exit ;
32759: GO 33575
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32761: LD_ADDR_VAR 0 14
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: LD_VAR 0 2
32775: PPUSH
32776: LD_VAR 0 3
32780: PPUSH
32781: LD_VAR 0 4
32785: PPUSH
32786: LD_VAR 0 5
32790: PUSH
32791: LD_INT 1
32793: ARRAY
32794: PPUSH
32795: CALL_OW 248
32799: PPUSH
32800: LD_INT 0
32802: PPUSH
32803: CALL 34412 0 6
32807: ST_TO_ADDR
// if not hexes then
32808: LD_VAR 0 14
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 33575
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32817: LD_ADDR_VAR 0 17
32821: PUSH
32822: LD_VAR 0 5
32826: PPUSH
32827: LD_INT 22
32829: PUSH
32830: LD_VAR 0 13
32834: PPUSH
32835: CALL_OW 255
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 30
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PPUSH
32876: CALL_OW 72
32880: ST_TO_ADDR
// for i = 1 to hexes do
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: DOUBLE
32887: LD_INT 1
32889: DEC
32890: ST_TO_ADDR
32891: LD_VAR 0 14
32895: PUSH
32896: FOR_TO
32897: IFFALSE 33573
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32899: LD_ADDR_VAR 0 13
32903: PUSH
32904: LD_VAR 0 14
32908: PUSH
32909: LD_VAR 0 9
32913: ARRAY
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: PPUSH
32919: LD_VAR 0 14
32923: PUSH
32924: LD_VAR 0 9
32928: ARRAY
32929: PUSH
32930: LD_INT 2
32932: ARRAY
32933: PPUSH
32934: CALL_OW 428
32938: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32939: LD_VAR 0 14
32943: PUSH
32944: LD_VAR 0 9
32948: ARRAY
32949: PUSH
32950: LD_INT 1
32952: ARRAY
32953: PPUSH
32954: LD_VAR 0 14
32958: PUSH
32959: LD_VAR 0 9
32963: ARRAY
32964: PUSH
32965: LD_INT 2
32967: ARRAY
32968: PPUSH
32969: CALL_OW 351
32973: PUSH
32974: LD_VAR 0 14
32978: PUSH
32979: LD_VAR 0 9
32983: ARRAY
32984: PUSH
32985: LD_INT 1
32987: ARRAY
32988: PPUSH
32989: LD_VAR 0 14
32993: PUSH
32994: LD_VAR 0 9
32998: ARRAY
32999: PUSH
33000: LD_INT 2
33002: ARRAY
33003: PPUSH
33004: CALL_OW 488
33008: NOT
33009: OR
33010: PUSH
33011: LD_VAR 0 13
33015: PPUSH
33016: CALL_OW 247
33020: PUSH
33021: LD_INT 3
33023: EQUAL
33024: OR
33025: IFFALSE 33031
// exit ;
33027: POP
33028: POP
33029: GO 33575
// if not tmp then
33031: LD_VAR 0 13
33035: NOT
33036: IFFALSE 33040
// continue ;
33038: GO 32896
// result := true ;
33040: LD_ADDR_VAR 0 8
33044: PUSH
33045: LD_INT 1
33047: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33048: LD_VAR 0 6
33052: PUSH
33053: LD_VAR 0 13
33057: PPUSH
33058: CALL_OW 247
33062: PUSH
33063: LD_INT 2
33065: EQUAL
33066: AND
33067: PUSH
33068: LD_VAR 0 13
33072: PPUSH
33073: CALL_OW 263
33077: PUSH
33078: LD_INT 1
33080: EQUAL
33081: AND
33082: IFFALSE 33246
// begin if IsDrivenBy ( tmp ) then
33084: LD_VAR 0 13
33088: PPUSH
33089: CALL_OW 311
33093: IFFALSE 33097
// continue ;
33095: GO 32896
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33097: LD_VAR 0 6
33101: PPUSH
33102: LD_INT 3
33104: PUSH
33105: LD_INT 60
33107: PUSH
33108: EMPTY
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 55
33120: PUSH
33121: EMPTY
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PPUSH
33132: CALL_OW 72
33136: IFFALSE 33244
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33138: LD_ADDR_VAR 0 18
33142: PUSH
33143: LD_VAR 0 6
33147: PPUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 60
33153: PUSH
33154: EMPTY
33155: LIST
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: LD_INT 55
33166: PUSH
33167: EMPTY
33168: LIST
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PPUSH
33178: CALL_OW 72
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: ST_TO_ADDR
// if IsInUnit ( driver ) then
33187: LD_VAR 0 18
33191: PPUSH
33192: CALL_OW 310
33196: IFFALSE 33207
// ComExit ( driver ) ;
33198: LD_VAR 0 18
33202: PPUSH
33203: CALL 57596 0 1
// AddComEnterUnit ( driver , tmp ) ;
33207: LD_VAR 0 18
33211: PPUSH
33212: LD_VAR 0 13
33216: PPUSH
33217: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33221: LD_VAR 0 18
33225: PPUSH
33226: LD_VAR 0 7
33230: PPUSH
33231: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33235: LD_VAR 0 18
33239: PPUSH
33240: CALL_OW 181
// end ; continue ;
33244: GO 32896
// end ; if not cleaners or not tmp in cleaners then
33246: LD_VAR 0 6
33250: NOT
33251: PUSH
33252: LD_VAR 0 13
33256: PUSH
33257: LD_VAR 0 6
33261: IN
33262: NOT
33263: OR
33264: IFFALSE 33571
// begin if dep then
33266: LD_VAR 0 17
33270: IFFALSE 33406
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33272: LD_ADDR_VAR 0 16
33276: PUSH
33277: LD_VAR 0 17
33281: PUSH
33282: LD_INT 1
33284: ARRAY
33285: PPUSH
33286: CALL_OW 250
33290: PPUSH
33291: LD_VAR 0 17
33295: PUSH
33296: LD_INT 1
33298: ARRAY
33299: PPUSH
33300: CALL_OW 254
33304: PPUSH
33305: LD_INT 5
33307: PPUSH
33308: CALL_OW 272
33312: PUSH
33313: LD_VAR 0 17
33317: PUSH
33318: LD_INT 1
33320: ARRAY
33321: PPUSH
33322: CALL_OW 251
33326: PPUSH
33327: LD_VAR 0 17
33331: PUSH
33332: LD_INT 1
33334: ARRAY
33335: PPUSH
33336: CALL_OW 254
33340: PPUSH
33341: LD_INT 5
33343: PPUSH
33344: CALL_OW 273
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33353: LD_VAR 0 16
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: PPUSH
33362: LD_VAR 0 16
33366: PUSH
33367: LD_INT 2
33369: ARRAY
33370: PPUSH
33371: CALL_OW 488
33375: IFFALSE 33406
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33377: LD_VAR 0 13
33381: PPUSH
33382: LD_VAR 0 16
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: PPUSH
33391: LD_VAR 0 16
33395: PUSH
33396: LD_INT 2
33398: ARRAY
33399: PPUSH
33400: CALL_OW 111
// continue ;
33404: GO 32896
// end ; end ; r := GetDir ( tmp ) ;
33406: LD_ADDR_VAR 0 15
33410: PUSH
33411: LD_VAR 0 13
33415: PPUSH
33416: CALL_OW 254
33420: ST_TO_ADDR
// if r = 5 then
33421: LD_VAR 0 15
33425: PUSH
33426: LD_INT 5
33428: EQUAL
33429: IFFALSE 33439
// r := 0 ;
33431: LD_ADDR_VAR 0 15
33435: PUSH
33436: LD_INT 0
33438: ST_TO_ADDR
// for j = r to 5 do
33439: LD_ADDR_VAR 0 10
33443: PUSH
33444: DOUBLE
33445: LD_VAR 0 15
33449: DEC
33450: ST_TO_ADDR
33451: LD_INT 5
33453: PUSH
33454: FOR_TO
33455: IFFALSE 33569
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33457: LD_ADDR_VAR 0 11
33461: PUSH
33462: LD_VAR 0 13
33466: PPUSH
33467: CALL_OW 250
33471: PPUSH
33472: LD_VAR 0 10
33476: PPUSH
33477: LD_INT 2
33479: PPUSH
33480: CALL_OW 272
33484: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33485: LD_ADDR_VAR 0 12
33489: PUSH
33490: LD_VAR 0 13
33494: PPUSH
33495: CALL_OW 251
33499: PPUSH
33500: LD_VAR 0 10
33504: PPUSH
33505: LD_INT 2
33507: PPUSH
33508: CALL_OW 273
33512: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33513: LD_VAR 0 11
33517: PPUSH
33518: LD_VAR 0 12
33522: PPUSH
33523: CALL_OW 488
33527: PUSH
33528: LD_VAR 0 11
33532: PPUSH
33533: LD_VAR 0 12
33537: PPUSH
33538: CALL_OW 428
33542: NOT
33543: AND
33544: IFFALSE 33567
// begin ComMoveXY ( tmp , _x , _y ) ;
33546: LD_VAR 0 13
33550: PPUSH
33551: LD_VAR 0 11
33555: PPUSH
33556: LD_VAR 0 12
33560: PPUSH
33561: CALL_OW 111
// break ;
33565: GO 33569
// end ; end ;
33567: GO 33454
33569: POP
33570: POP
// end ; end ;
33571: GO 32896
33573: POP
33574: POP
// end ;
33575: LD_VAR 0 8
33579: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// result := false ;
33592: LD_ADDR_VAR 0 6
33596: PUSH
33597: LD_INT 0
33599: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33600: LD_VAR 0 1
33604: NOT
33605: PUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 266
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: IN
33626: NOT
33627: OR
33628: PUSH
33629: LD_VAR 0 2
33633: NOT
33634: OR
33635: PUSH
33636: LD_VAR 0 5
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 5
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: IN
33667: NOT
33668: OR
33669: PUSH
33670: LD_VAR 0 3
33674: PPUSH
33675: LD_VAR 0 4
33679: PPUSH
33680: CALL_OW 488
33684: NOT
33685: OR
33686: IFFALSE 33690
// exit ;
33688: GO 34407
// pom := GetBase ( depot ) ;
33690: LD_ADDR_VAR 0 10
33694: PUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 274
33704: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33705: LD_ADDR_VAR 0 11
33709: PUSH
33710: LD_VAR 0 2
33714: PPUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 248
33724: PPUSH
33725: CALL_OW 450
33729: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33730: LD_VAR 0 10
33734: PPUSH
33735: LD_INT 1
33737: PPUSH
33738: CALL_OW 275
33742: PUSH
33743: LD_VAR 0 11
33747: PUSH
33748: LD_INT 1
33750: ARRAY
33751: GREATEREQUAL
33752: PUSH
33753: LD_VAR 0 10
33757: PPUSH
33758: LD_INT 2
33760: PPUSH
33761: CALL_OW 275
33765: PUSH
33766: LD_VAR 0 11
33770: PUSH
33771: LD_INT 2
33773: ARRAY
33774: GREATEREQUAL
33775: AND
33776: PUSH
33777: LD_VAR 0 10
33781: PPUSH
33782: LD_INT 3
33784: PPUSH
33785: CALL_OW 275
33789: PUSH
33790: LD_VAR 0 11
33794: PUSH
33795: LD_INT 3
33797: ARRAY
33798: GREATEREQUAL
33799: AND
33800: NOT
33801: IFFALSE 33805
// exit ;
33803: GO 34407
// if GetBType ( depot ) = b_depot then
33805: LD_VAR 0 1
33809: PPUSH
33810: CALL_OW 266
33814: PUSH
33815: LD_INT 0
33817: EQUAL
33818: IFFALSE 33830
// dist := 28 else
33820: LD_ADDR_VAR 0 14
33824: PUSH
33825: LD_INT 28
33827: ST_TO_ADDR
33828: GO 33838
// dist := 36 ;
33830: LD_ADDR_VAR 0 14
33834: PUSH
33835: LD_INT 36
33837: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33838: LD_VAR 0 1
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: LD_VAR 0 4
33852: PPUSH
33853: CALL_OW 297
33857: PUSH
33858: LD_VAR 0 14
33862: GREATER
33863: IFFALSE 33867
// exit ;
33865: GO 34407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33867: LD_ADDR_VAR 0 12
33871: PUSH
33872: LD_VAR 0 2
33876: PPUSH
33877: LD_VAR 0 3
33881: PPUSH
33882: LD_VAR 0 4
33886: PPUSH
33887: LD_VAR 0 5
33891: PPUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 248
33901: PPUSH
33902: LD_INT 0
33904: PPUSH
33905: CALL 34412 0 6
33909: ST_TO_ADDR
// if not hexes then
33910: LD_VAR 0 12
33914: NOT
33915: IFFALSE 33919
// exit ;
33917: GO 34407
// hex := GetHexInfo ( x , y ) ;
33919: LD_ADDR_VAR 0 15
33923: PUSH
33924: LD_VAR 0 3
33928: PPUSH
33929: LD_VAR 0 4
33933: PPUSH
33934: CALL_OW 546
33938: ST_TO_ADDR
// if hex [ 1 ] then
33939: LD_VAR 0 15
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: IFFALSE 33951
// exit ;
33949: GO 34407
// height := hex [ 2 ] ;
33951: LD_ADDR_VAR 0 13
33955: PUSH
33956: LD_VAR 0 15
33960: PUSH
33961: LD_INT 2
33963: ARRAY
33964: ST_TO_ADDR
// for i = 1 to hexes do
33965: LD_ADDR_VAR 0 7
33969: PUSH
33970: DOUBLE
33971: LD_INT 1
33973: DEC
33974: ST_TO_ADDR
33975: LD_VAR 0 12
33979: PUSH
33980: FOR_TO
33981: IFFALSE 34311
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33983: LD_VAR 0 12
33987: PUSH
33988: LD_VAR 0 7
33992: ARRAY
33993: PUSH
33994: LD_INT 1
33996: ARRAY
33997: PPUSH
33998: LD_VAR 0 12
34002: PUSH
34003: LD_VAR 0 7
34007: ARRAY
34008: PUSH
34009: LD_INT 2
34011: ARRAY
34012: PPUSH
34013: CALL_OW 488
34017: NOT
34018: PUSH
34019: LD_VAR 0 12
34023: PUSH
34024: LD_VAR 0 7
34028: ARRAY
34029: PUSH
34030: LD_INT 1
34032: ARRAY
34033: PPUSH
34034: LD_VAR 0 12
34038: PUSH
34039: LD_VAR 0 7
34043: ARRAY
34044: PUSH
34045: LD_INT 2
34047: ARRAY
34048: PPUSH
34049: CALL_OW 428
34053: PUSH
34054: LD_INT 0
34056: GREATER
34057: OR
34058: PUSH
34059: LD_VAR 0 12
34063: PUSH
34064: LD_VAR 0 7
34068: ARRAY
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: LD_VAR 0 12
34078: PUSH
34079: LD_VAR 0 7
34083: ARRAY
34084: PUSH
34085: LD_INT 2
34087: ARRAY
34088: PPUSH
34089: CALL_OW 351
34093: OR
34094: IFFALSE 34100
// exit ;
34096: POP
34097: POP
34098: GO 34407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34100: LD_ADDR_VAR 0 8
34104: PUSH
34105: LD_VAR 0 12
34109: PUSH
34110: LD_VAR 0 7
34114: ARRAY
34115: PUSH
34116: LD_INT 1
34118: ARRAY
34119: PPUSH
34120: LD_VAR 0 12
34124: PUSH
34125: LD_VAR 0 7
34129: ARRAY
34130: PUSH
34131: LD_INT 2
34133: ARRAY
34134: PPUSH
34135: CALL_OW 546
34139: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34140: LD_VAR 0 8
34144: PUSH
34145: LD_INT 1
34147: ARRAY
34148: PUSH
34149: LD_VAR 0 8
34153: PUSH
34154: LD_INT 2
34156: ARRAY
34157: PUSH
34158: LD_VAR 0 13
34162: PUSH
34163: LD_INT 2
34165: PLUS
34166: GREATER
34167: OR
34168: PUSH
34169: LD_VAR 0 8
34173: PUSH
34174: LD_INT 2
34176: ARRAY
34177: PUSH
34178: LD_VAR 0 13
34182: PUSH
34183: LD_INT 2
34185: MINUS
34186: LESS
34187: OR
34188: PUSH
34189: LD_VAR 0 8
34193: PUSH
34194: LD_INT 3
34196: ARRAY
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 8
34203: PUSH
34204: LD_INT 9
34206: PUSH
34207: LD_INT 10
34209: PUSH
34210: LD_INT 11
34212: PUSH
34213: LD_INT 12
34215: PUSH
34216: LD_INT 13
34218: PUSH
34219: LD_INT 16
34221: PUSH
34222: LD_INT 17
34224: PUSH
34225: LD_INT 18
34227: PUSH
34228: LD_INT 19
34230: PUSH
34231: LD_INT 20
34233: PUSH
34234: LD_INT 21
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: IN
34252: NOT
34253: OR
34254: PUSH
34255: LD_VAR 0 8
34259: PUSH
34260: LD_INT 5
34262: ARRAY
34263: NOT
34264: OR
34265: PUSH
34266: LD_VAR 0 8
34270: PUSH
34271: LD_INT 6
34273: ARRAY
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 7
34283: PUSH
34284: LD_INT 9
34286: PUSH
34287: LD_INT 10
34289: PUSH
34290: LD_INT 11
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: IN
34301: NOT
34302: OR
34303: IFFALSE 34309
// exit ;
34305: POP
34306: POP
34307: GO 34407
// end ;
34309: GO 33980
34311: POP
34312: POP
// side := GetSide ( depot ) ;
34313: LD_ADDR_VAR 0 9
34317: PUSH
34318: LD_VAR 0 1
34322: PPUSH
34323: CALL_OW 255
34327: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34328: LD_VAR 0 9
34332: PPUSH
34333: LD_VAR 0 3
34337: PPUSH
34338: LD_VAR 0 4
34342: PPUSH
34343: LD_INT 20
34345: PPUSH
34346: CALL 26728 0 4
34350: PUSH
34351: LD_INT 4
34353: ARRAY
34354: IFFALSE 34358
// exit ;
34356: GO 34407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34358: LD_VAR 0 2
34362: PUSH
34363: LD_INT 29
34365: PUSH
34366: LD_INT 30
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: IN
34373: PUSH
34374: LD_VAR 0 3
34378: PPUSH
34379: LD_VAR 0 4
34383: PPUSH
34384: LD_VAR 0 9
34388: PPUSH
34389: CALL_OW 440
34393: NOT
34394: AND
34395: IFFALSE 34399
// exit ;
34397: GO 34407
// result := true ;
34399: LD_ADDR_VAR 0 6
34403: PUSH
34404: LD_INT 1
34406: ST_TO_ADDR
// end ;
34407: LD_VAR 0 6
34411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
// result = [ ] ;
34472: LD_ADDR_VAR 0 7
34476: PUSH
34477: EMPTY
34478: ST_TO_ADDR
// temp_list = [ ] ;
34479: LD_ADDR_VAR 0 9
34483: PUSH
34484: EMPTY
34485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34486: LD_VAR 0 4
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 4
34505: PUSH
34506: LD_INT 5
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: IN
34517: NOT
34518: PUSH
34519: LD_VAR 0 1
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: IN
34534: PUSH
34535: LD_VAR 0 5
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: IN
34554: NOT
34555: AND
34556: OR
34557: IFFALSE 34561
// exit ;
34559: GO 52952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34561: LD_VAR 0 1
34565: PUSH
34566: LD_INT 6
34568: PUSH
34569: LD_INT 7
34571: PUSH
34572: LD_INT 8
34574: PUSH
34575: LD_INT 13
34577: PUSH
34578: LD_INT 12
34580: PUSH
34581: LD_INT 15
34583: PUSH
34584: LD_INT 11
34586: PUSH
34587: LD_INT 14
34589: PUSH
34590: LD_INT 10
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: IN
34604: IFFALSE 34614
// btype = b_lab ;
34606: LD_ADDR_VAR 0 1
34610: PUSH
34611: LD_INT 6
34613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34614: LD_VAR 0 6
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: IN
34633: NOT
34634: PUSH
34635: LD_VAR 0 1
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: LD_INT 3
34651: PUSH
34652: LD_INT 6
34654: PUSH
34655: LD_INT 36
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: LD_INT 5
34663: PUSH
34664: LD_INT 31
34666: PUSH
34667: LD_INT 32
34669: PUSH
34670: LD_INT 33
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: NOT
34687: PUSH
34688: LD_VAR 0 6
34692: PUSH
34693: LD_INT 1
34695: EQUAL
34696: AND
34697: OR
34698: PUSH
34699: LD_VAR 0 1
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: IN
34714: NOT
34715: PUSH
34716: LD_VAR 0 6
34720: PUSH
34721: LD_INT 2
34723: EQUAL
34724: AND
34725: OR
34726: IFFALSE 34736
// mode = 0 ;
34728: LD_ADDR_VAR 0 6
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// case mode of 0 :
34736: LD_VAR 0 6
34740: PUSH
34741: LD_INT 0
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34749
34747: GO 46202
34749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34750: LD_ADDR_VAR 0 11
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 3
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34943: LD_ADDR_VAR 0 12
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 2
35089: NEG
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 3
35100: NEG
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35139: LD_ADDR_VAR 0 13
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: NEG
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35338: LD_ADDR_VAR 0 14
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 2
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: NEG
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35534: LD_ADDR_VAR 0 15
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 2
35657: NEG
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 3
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35727: LD_ADDR_VAR 0 16
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35920: LD_ADDR_VAR 0 17
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36150: LD_ADDR_VAR 0 18
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36380: LD_ADDR_VAR 0 19
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36610: LD_ADDR_VAR 0 20
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36840: LD_ADDR_VAR 0 21
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37070: LD_ADDR_VAR 0 22
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37300: LD_ADDR_VAR 0 23
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: LD_INT 3
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 3
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 2
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37580: LD_ADDR_VAR 0 24
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: NEG
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37856: LD_ADDR_VAR 0 25
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38130: LD_ADDR_VAR 0 26
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: NEG
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38406: LD_ADDR_VAR 0 27
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38686: LD_ADDR_VAR 0 28
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 3
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38968: LD_ADDR_VAR 0 29
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39247: LD_ADDR_VAR 0 30
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: NEG
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39525: LD_ADDR_VAR 0 31
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: LD_INT 3
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 3
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 3
39768: NEG
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39803: LD_ADDR_VAR 0 32
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: LD_INT 3
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 3
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 3
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40081: LD_ADDR_VAR 0 33
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: LD_INT 3
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 3
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40360: LD_ADDR_VAR 0 34
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: NEG
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 3
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40640: LD_ADDR_VAR 0 35
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40752: LD_ADDR_VAR 0 36
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40864: LD_ADDR_VAR 0 37
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40976: LD_ADDR_VAR 0 38
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41088: LD_ADDR_VAR 0 39
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 2
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41200: LD_ADDR_VAR 0 40
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41312: LD_ADDR_VAR 0 41
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 3
41609: NEG
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 3
41621: NEG
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41662: LD_ADDR_VAR 0 42
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 3
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 3
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 3
41959: NEG
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42012: LD_ADDR_VAR 0 43
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 3
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42360: LD_ADDR_VAR 0 44
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 3
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 3
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 3
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42710: LD_ADDR_VAR 0 45
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 3
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43060: LD_ADDR_VAR 0 46
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 3
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43408: LD_ADDR_VAR 0 47
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43559: LD_ADDR_VAR 0 48
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43706: LD_ADDR_VAR 0 49
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43850: LD_ADDR_VAR 0 50
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43994: LD_ADDR_VAR 0 51
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44141: LD_ADDR_VAR 0 52
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44292: LD_ADDR_VAR 0 53
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44522: LD_ADDR_VAR 0 54
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44752: LD_ADDR_VAR 0 55
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44982: LD_ADDR_VAR 0 56
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45212: LD_ADDR_VAR 0 57
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45442: LD_ADDR_VAR 0 58
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45672: LD_ADDR_VAR 0 59
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45760: LD_ADDR_VAR 0 60
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45848: LD_ADDR_VAR 0 61
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45936: LD_ADDR_VAR 0 62
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46024: LD_ADDR_VAR 0 63
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46112: LD_ADDR_VAR 0 64
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// end ; 1 :
46200: GO 52097
46202: LD_INT 1
46204: DOUBLE
46205: EQUAL
46206: IFTRUE 46210
46208: GO 48833
46210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46211: LD_ADDR_VAR 0 11
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 3
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46255: LD_ADDR_VAR 0 12
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46296: LD_ADDR_VAR 0 13
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46336: LD_ADDR_VAR 0 14
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46377: LD_ADDR_VAR 0 15
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46421: LD_ADDR_VAR 0 16
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46467: LD_ADDR_VAR 0 17
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46511: LD_ADDR_VAR 0 18
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 3
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46552: LD_ADDR_VAR 0 19
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46592: LD_ADDR_VAR 0 20
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46633: LD_ADDR_VAR 0 21
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46677: LD_ADDR_VAR 0 22
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: LD_INT 3
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46723: LD_ADDR_VAR 0 23
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 4
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46767: LD_ADDR_VAR 0 24
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46808: LD_ADDR_VAR 0 25
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: LD_INT 4
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46848: LD_ADDR_VAR 0 26
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46889: LD_ADDR_VAR 0 27
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46933: LD_ADDR_VAR 0 28
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: NEG
46965: PUSH
46966: LD_INT 3
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46979: LD_ADDR_VAR 0 29
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 4
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 4
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 5
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 4
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 6
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 6
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 5
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47134: LD_ADDR_VAR 0 30
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 4
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 4
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 5
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 5
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 5
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 6
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 6
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47277: LD_ADDR_VAR 0 31
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 4
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 4
47324: PUSH
47325: LD_INT 4
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: LD_INT 4
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 5
47344: PUSH
47345: LD_INT 4
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: LD_INT 5
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 4
47364: PUSH
47365: LD_INT 5
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 6
47374: PUSH
47375: LD_INT 5
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 6
47384: PUSH
47385: LD_INT 6
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 5
47394: PUSH
47395: LD_INT 6
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47416: LD_ADDR_VAR 0 32
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 4
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 4
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 5
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 4
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 6
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 6
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 5
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47559: LD_ADDR_VAR 0 33
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 3
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 4
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 4
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 5
47645: NEG
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 5
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 5
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 6
47679: NEG
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 6
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47714: LD_ADDR_VAR 0 34
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 4
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 4
47769: NEG
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 4
47781: NEG
47782: PUSH
47783: LD_INT 4
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: NEG
47794: PUSH
47795: LD_INT 5
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 5
47805: NEG
47806: PUSH
47807: LD_INT 4
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 5
47817: NEG
47818: PUSH
47819: LD_INT 5
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 5
47829: NEG
47830: PUSH
47831: LD_INT 6
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 6
47841: NEG
47842: PUSH
47843: LD_INT 5
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 6
47853: NEG
47854: PUSH
47855: LD_INT 6
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47877: LD_ADDR_VAR 0 41
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47921: LD_ADDR_VAR 0 42
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47962: LD_ADDR_VAR 0 43
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48002: LD_ADDR_VAR 0 44
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48043: LD_ADDR_VAR 0 45
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48087: LD_ADDR_VAR 0 46
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 3
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48133: LD_ADDR_VAR 0 47
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48166: LD_ADDR_VAR 0 48
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48197: LD_ADDR_VAR 0 49
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48226: LD_ADDR_VAR 0 50
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 3
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48255: LD_ADDR_VAR 0 51
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48286: LD_ADDR_VAR 0 52
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48319: LD_ADDR_VAR 0 53
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48363: LD_ADDR_VAR 0 54
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 3
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48404: LD_ADDR_VAR 0 55
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48444: LD_ADDR_VAR 0 56
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48485: LD_ADDR_VAR 0 57
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48529: LD_ADDR_VAR 0 58
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48575: LD_ADDR_VAR 0 59
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48619: LD_ADDR_VAR 0 60
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48660: LD_ADDR_VAR 0 61
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48700: LD_ADDR_VAR 0 62
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48741: LD_ADDR_VAR 0 63
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48785: LD_ADDR_VAR 0 64
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// end ; 2 :
48831: GO 52097
48833: LD_INT 2
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48841
48839: GO 52096
48841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48842: LD_ADDR_VAR 0 29
48846: PUSH
48847: LD_INT 4
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 4
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 5
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 5
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 4
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 5
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 4
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 4
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 4
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 4
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 5
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 5
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 4
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 5
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 4
49192: NEG
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 4
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 4
49227: NEG
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: LD_INT 5
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 4
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 4
49275: NEG
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 5
49287: NEG
49288: PUSH
49289: LD_INT 4
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 5
49299: NEG
49300: PUSH
49301: LD_INT 5
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: LD_INT 5
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 5
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49380: LD_ADDR_VAR 0 30
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 4
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 5
49407: PUSH
49408: LD_INT 4
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: LD_INT 5
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 4
49427: PUSH
49428: LD_INT 5
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: LD_INT 4
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 5
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: LD_INT 5
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 4
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 4
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 4
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 4
49570: NEG
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 4
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 4
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 5
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 5
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 5
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: LD_INT 4
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 4
49732: NEG
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: LD_INT 4
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 4
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 4
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 4
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 5
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 4
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 5
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 5
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49927: LD_ADDR_VAR 0 31
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 4
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 5
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 4
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 4
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: LD_INT 4
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: LD_INT 5
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: NEG
50154: PUSH
50155: LD_INT 4
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 4
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: LD_INT 4
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 5
50201: NEG
50202: PUSH
50203: LD_INT 5
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: LD_INT 5
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: LD_INT 3
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 4
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 4
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 4
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 4
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 4
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 4
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 5
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50477: LD_ADDR_VAR 0 32
50481: PUSH
50482: LD_INT 4
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 5
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 5
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: LD_INT 4
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: LD_INT 4
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 4
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 4
50682: NEG
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 4
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 5
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 4
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 3
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 5
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 5
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 4
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: LD_INT 4
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 4
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 5
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: LD_INT 5
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: PUSH
50930: LD_INT 5
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: LD_INT 4
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 5
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 5
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51024: LD_ADDR_VAR 0 33
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 5
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: NEG
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 5
51091: NEG
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 5
51103: NEG
51104: PUSH
51105: LD_INT 5
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 5
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 5
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 4
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 4
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 4
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 4
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 5
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 4
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 4
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 4
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 4
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 4
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 5
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 4
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: LD_INT 5
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51562: LD_ADDR_VAR 0 34
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 4
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 5
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 5
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 5
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 4
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 4
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 4
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 4
51764: PUSH
51765: LD_INT 4
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 5
51784: PUSH
51785: LD_INT 4
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 5
51794: PUSH
51795: LD_INT 5
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: LD_INT 5
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 4
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 5
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 4
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 4
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 4
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 4
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 5
52003: NEG
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 5
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 5
52026: NEG
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// end ; end ;
52094: GO 52097
52096: POP
// case btype of b_depot , b_warehouse :
52097: LD_VAR 0 1
52101: PUSH
52102: LD_INT 0
52104: DOUBLE
52105: EQUAL
52106: IFTRUE 52116
52108: LD_INT 1
52110: DOUBLE
52111: EQUAL
52112: IFTRUE 52116
52114: GO 52317
52116: POP
// case nation of nation_american :
52117: LD_VAR 0 5
52121: PUSH
52122: LD_INT 1
52124: DOUBLE
52125: EQUAL
52126: IFTRUE 52130
52128: GO 52186
52130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52131: LD_ADDR_VAR 0 9
52135: PUSH
52136: LD_VAR 0 11
52140: PUSH
52141: LD_VAR 0 12
52145: PUSH
52146: LD_VAR 0 13
52150: PUSH
52151: LD_VAR 0 14
52155: PUSH
52156: LD_VAR 0 15
52160: PUSH
52161: LD_VAR 0 16
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: PUSH
52174: LD_VAR 0 4
52178: PUSH
52179: LD_INT 1
52181: PLUS
52182: ARRAY
52183: ST_TO_ADDR
52184: GO 52315
52186: LD_INT 2
52188: DOUBLE
52189: EQUAL
52190: IFTRUE 52194
52192: GO 52250
52194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52195: LD_ADDR_VAR 0 9
52199: PUSH
52200: LD_VAR 0 17
52204: PUSH
52205: LD_VAR 0 18
52209: PUSH
52210: LD_VAR 0 19
52214: PUSH
52215: LD_VAR 0 20
52219: PUSH
52220: LD_VAR 0 21
52224: PUSH
52225: LD_VAR 0 22
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: LD_VAR 0 4
52242: PUSH
52243: LD_INT 1
52245: PLUS
52246: ARRAY
52247: ST_TO_ADDR
52248: GO 52315
52250: LD_INT 3
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52258
52256: GO 52314
52258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52259: LD_ADDR_VAR 0 9
52263: PUSH
52264: LD_VAR 0 23
52268: PUSH
52269: LD_VAR 0 24
52273: PUSH
52274: LD_VAR 0 25
52278: PUSH
52279: LD_VAR 0 26
52283: PUSH
52284: LD_VAR 0 27
52288: PUSH
52289: LD_VAR 0 28
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: PUSH
52302: LD_VAR 0 4
52306: PUSH
52307: LD_INT 1
52309: PLUS
52310: ARRAY
52311: ST_TO_ADDR
52312: GO 52315
52314: POP
52315: GO 52870
52317: LD_INT 2
52319: DOUBLE
52320: EQUAL
52321: IFTRUE 52331
52323: LD_INT 3
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52331
52329: GO 52387
52331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52332: LD_ADDR_VAR 0 9
52336: PUSH
52337: LD_VAR 0 29
52341: PUSH
52342: LD_VAR 0 30
52346: PUSH
52347: LD_VAR 0 31
52351: PUSH
52352: LD_VAR 0 32
52356: PUSH
52357: LD_VAR 0 33
52361: PUSH
52362: LD_VAR 0 34
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_VAR 0 4
52379: PUSH
52380: LD_INT 1
52382: PLUS
52383: ARRAY
52384: ST_TO_ADDR
52385: GO 52870
52387: LD_INT 16
52389: DOUBLE
52390: EQUAL
52391: IFTRUE 52449
52393: LD_INT 17
52395: DOUBLE
52396: EQUAL
52397: IFTRUE 52449
52399: LD_INT 18
52401: DOUBLE
52402: EQUAL
52403: IFTRUE 52449
52405: LD_INT 19
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52449
52411: LD_INT 22
52413: DOUBLE
52414: EQUAL
52415: IFTRUE 52449
52417: LD_INT 20
52419: DOUBLE
52420: EQUAL
52421: IFTRUE 52449
52423: LD_INT 21
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52449
52429: LD_INT 23
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52449
52435: LD_INT 24
52437: DOUBLE
52438: EQUAL
52439: IFTRUE 52449
52441: LD_INT 25
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52449
52447: GO 52505
52449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52450: LD_ADDR_VAR 0 9
52454: PUSH
52455: LD_VAR 0 35
52459: PUSH
52460: LD_VAR 0 36
52464: PUSH
52465: LD_VAR 0 37
52469: PUSH
52470: LD_VAR 0 38
52474: PUSH
52475: LD_VAR 0 39
52479: PUSH
52480: LD_VAR 0 40
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: PUSH
52493: LD_VAR 0 4
52497: PUSH
52498: LD_INT 1
52500: PLUS
52501: ARRAY
52502: ST_TO_ADDR
52503: GO 52870
52505: LD_INT 6
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52561
52511: LD_INT 7
52513: DOUBLE
52514: EQUAL
52515: IFTRUE 52561
52517: LD_INT 8
52519: DOUBLE
52520: EQUAL
52521: IFTRUE 52561
52523: LD_INT 13
52525: DOUBLE
52526: EQUAL
52527: IFTRUE 52561
52529: LD_INT 12
52531: DOUBLE
52532: EQUAL
52533: IFTRUE 52561
52535: LD_INT 15
52537: DOUBLE
52538: EQUAL
52539: IFTRUE 52561
52541: LD_INT 11
52543: DOUBLE
52544: EQUAL
52545: IFTRUE 52561
52547: LD_INT 14
52549: DOUBLE
52550: EQUAL
52551: IFTRUE 52561
52553: LD_INT 10
52555: DOUBLE
52556: EQUAL
52557: IFTRUE 52561
52559: GO 52617
52561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52562: LD_ADDR_VAR 0 9
52566: PUSH
52567: LD_VAR 0 41
52571: PUSH
52572: LD_VAR 0 42
52576: PUSH
52577: LD_VAR 0 43
52581: PUSH
52582: LD_VAR 0 44
52586: PUSH
52587: LD_VAR 0 45
52591: PUSH
52592: LD_VAR 0 46
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: PUSH
52605: LD_VAR 0 4
52609: PUSH
52610: LD_INT 1
52612: PLUS
52613: ARRAY
52614: ST_TO_ADDR
52615: GO 52870
52617: LD_INT 36
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 52681
52625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52626: LD_ADDR_VAR 0 9
52630: PUSH
52631: LD_VAR 0 47
52635: PUSH
52636: LD_VAR 0 48
52640: PUSH
52641: LD_VAR 0 49
52645: PUSH
52646: LD_VAR 0 50
52650: PUSH
52651: LD_VAR 0 51
52655: PUSH
52656: LD_VAR 0 52
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: LD_VAR 0 4
52673: PUSH
52674: LD_INT 1
52676: PLUS
52677: ARRAY
52678: ST_TO_ADDR
52679: GO 52870
52681: LD_INT 4
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52707
52687: LD_INT 5
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52707
52693: LD_INT 34
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52707
52699: LD_INT 37
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52707
52705: GO 52763
52707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52708: LD_ADDR_VAR 0 9
52712: PUSH
52713: LD_VAR 0 53
52717: PUSH
52718: LD_VAR 0 54
52722: PUSH
52723: LD_VAR 0 55
52727: PUSH
52728: LD_VAR 0 56
52732: PUSH
52733: LD_VAR 0 57
52737: PUSH
52738: LD_VAR 0 58
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: PUSH
52751: LD_VAR 0 4
52755: PUSH
52756: LD_INT 1
52758: PLUS
52759: ARRAY
52760: ST_TO_ADDR
52761: GO 52870
52763: LD_INT 31
52765: DOUBLE
52766: EQUAL
52767: IFTRUE 52813
52769: LD_INT 32
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52813
52775: LD_INT 33
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52813
52781: LD_INT 27
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52813
52787: LD_INT 26
52789: DOUBLE
52790: EQUAL
52791: IFTRUE 52813
52793: LD_INT 28
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52813
52799: LD_INT 29
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52813
52805: LD_INT 30
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52813
52811: GO 52869
52813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52814: LD_ADDR_VAR 0 9
52818: PUSH
52819: LD_VAR 0 59
52823: PUSH
52824: LD_VAR 0 60
52828: PUSH
52829: LD_VAR 0 61
52833: PUSH
52834: LD_VAR 0 62
52838: PUSH
52839: LD_VAR 0 63
52843: PUSH
52844: LD_VAR 0 64
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: PUSH
52857: LD_VAR 0 4
52861: PUSH
52862: LD_INT 1
52864: PLUS
52865: ARRAY
52866: ST_TO_ADDR
52867: GO 52870
52869: POP
// temp_list2 = [ ] ;
52870: LD_ADDR_VAR 0 10
52874: PUSH
52875: EMPTY
52876: ST_TO_ADDR
// for i in temp_list do
52877: LD_ADDR_VAR 0 8
52881: PUSH
52882: LD_VAR 0 9
52886: PUSH
52887: FOR_IN
52888: IFFALSE 52940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52890: LD_ADDR_VAR 0 10
52894: PUSH
52895: LD_VAR 0 10
52899: PUSH
52900: LD_VAR 0 8
52904: PUSH
52905: LD_INT 1
52907: ARRAY
52908: PUSH
52909: LD_VAR 0 2
52913: PLUS
52914: PUSH
52915: LD_VAR 0 8
52919: PUSH
52920: LD_INT 2
52922: ARRAY
52923: PUSH
52924: LD_VAR 0 3
52928: PLUS
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: EMPTY
52935: LIST
52936: ADD
52937: ST_TO_ADDR
52938: GO 52887
52940: POP
52941: POP
// result = temp_list2 ;
52942: LD_ADDR_VAR 0 7
52946: PUSH
52947: LD_VAR 0 10
52951: ST_TO_ADDR
// end ;
52952: LD_VAR 0 7
52956: RET
// export function EnemyInRange ( unit , dist ) ; begin
52957: LD_INT 0
52959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52960: LD_ADDR_VAR 0 3
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 255
52974: PPUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL_OW 250
52984: PPUSH
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL_OW 251
52994: PPUSH
52995: LD_VAR 0 2
52999: PPUSH
53000: CALL 26728 0 4
53004: PUSH
53005: LD_INT 4
53007: ARRAY
53008: ST_TO_ADDR
// end ;
53009: LD_VAR 0 3
53013: RET
// export function PlayerSeeMe ( unit ) ; begin
53014: LD_INT 0
53016: PPUSH
// result := See ( your_side , unit ) ;
53017: LD_ADDR_VAR 0 2
53021: PUSH
53022: LD_OWVAR 2
53026: PPUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 292
53036: ST_TO_ADDR
// end ;
53037: LD_VAR 0 2
53041: RET
// export function ReverseDir ( unit ) ; begin
53042: LD_INT 0
53044: PPUSH
// if not unit then
53045: LD_VAR 0 1
53049: NOT
53050: IFFALSE 53054
// exit ;
53052: GO 53077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53054: LD_ADDR_VAR 0 2
53058: PUSH
53059: LD_VAR 0 1
53063: PPUSH
53064: CALL_OW 254
53068: PUSH
53069: LD_INT 3
53071: PLUS
53072: PUSH
53073: LD_INT 6
53075: MOD
53076: ST_TO_ADDR
// end ;
53077: LD_VAR 0 2
53081: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53082: LD_INT 0
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
// if not hexes then
53089: LD_VAR 0 2
53093: NOT
53094: IFFALSE 53098
// exit ;
53096: GO 53246
// dist := 9999 ;
53098: LD_ADDR_VAR 0 5
53102: PUSH
53103: LD_INT 9999
53105: ST_TO_ADDR
// for i = 1 to hexes do
53106: LD_ADDR_VAR 0 4
53110: PUSH
53111: DOUBLE
53112: LD_INT 1
53114: DEC
53115: ST_TO_ADDR
53116: LD_VAR 0 2
53120: PUSH
53121: FOR_TO
53122: IFFALSE 53234
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53124: LD_VAR 0 1
53128: PPUSH
53129: LD_VAR 0 2
53133: PUSH
53134: LD_VAR 0 4
53138: ARRAY
53139: PUSH
53140: LD_INT 1
53142: ARRAY
53143: PPUSH
53144: LD_VAR 0 2
53148: PUSH
53149: LD_VAR 0 4
53153: ARRAY
53154: PUSH
53155: LD_INT 2
53157: ARRAY
53158: PPUSH
53159: CALL_OW 297
53163: PUSH
53164: LD_VAR 0 5
53168: LESS
53169: IFFALSE 53232
// begin hex := hexes [ i ] ;
53171: LD_ADDR_VAR 0 7
53175: PUSH
53176: LD_VAR 0 2
53180: PUSH
53181: LD_VAR 0 4
53185: ARRAY
53186: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53187: LD_ADDR_VAR 0 5
53191: PUSH
53192: LD_VAR 0 1
53196: PPUSH
53197: LD_VAR 0 2
53201: PUSH
53202: LD_VAR 0 4
53206: ARRAY
53207: PUSH
53208: LD_INT 1
53210: ARRAY
53211: PPUSH
53212: LD_VAR 0 2
53216: PUSH
53217: LD_VAR 0 4
53221: ARRAY
53222: PUSH
53223: LD_INT 2
53225: ARRAY
53226: PPUSH
53227: CALL_OW 297
53231: ST_TO_ADDR
// end ; end ;
53232: GO 53121
53234: POP
53235: POP
// result := hex ;
53236: LD_ADDR_VAR 0 3
53240: PUSH
53241: LD_VAR 0 7
53245: ST_TO_ADDR
// end ;
53246: LD_VAR 0 3
53250: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53255: LD_VAR 0 1
53259: NOT
53260: PUSH
53261: LD_VAR 0 1
53265: PUSH
53266: LD_INT 21
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 23
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PPUSH
53290: CALL_OW 69
53294: IN
53295: NOT
53296: OR
53297: IFFALSE 53301
// exit ;
53299: GO 53348
// for i = 1 to 3 do
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: DOUBLE
53307: LD_INT 1
53309: DEC
53310: ST_TO_ADDR
53311: LD_INT 3
53313: PUSH
53314: FOR_TO
53315: IFFALSE 53346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53317: LD_VAR 0 1
53321: PPUSH
53322: CALL_OW 250
53326: PPUSH
53327: LD_VAR 0 1
53331: PPUSH
53332: CALL_OW 251
53336: PPUSH
53337: LD_INT 1
53339: PPUSH
53340: CALL_OW 453
53344: GO 53314
53346: POP
53347: POP
// end ;
53348: LD_VAR 0 2
53352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53353: LD_INT 0
53355: PPUSH
53356: PPUSH
53357: PPUSH
53358: PPUSH
53359: PPUSH
53360: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53361: LD_VAR 0 1
53365: NOT
53366: PUSH
53367: LD_VAR 0 2
53371: NOT
53372: OR
53373: PUSH
53374: LD_VAR 0 1
53378: PPUSH
53379: CALL_OW 314
53383: OR
53384: IFFALSE 53388
// exit ;
53386: GO 53829
// x := GetX ( enemy_unit ) ;
53388: LD_ADDR_VAR 0 7
53392: PUSH
53393: LD_VAR 0 2
53397: PPUSH
53398: CALL_OW 250
53402: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53403: LD_ADDR_VAR 0 8
53407: PUSH
53408: LD_VAR 0 2
53412: PPUSH
53413: CALL_OW 251
53417: ST_TO_ADDR
// if not x or not y then
53418: LD_VAR 0 7
53422: NOT
53423: PUSH
53424: LD_VAR 0 8
53428: NOT
53429: OR
53430: IFFALSE 53434
// exit ;
53432: GO 53829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53434: LD_ADDR_VAR 0 6
53438: PUSH
53439: LD_VAR 0 7
53443: PPUSH
53444: LD_INT 0
53446: PPUSH
53447: LD_INT 4
53449: PPUSH
53450: CALL_OW 272
53454: PUSH
53455: LD_VAR 0 8
53459: PPUSH
53460: LD_INT 0
53462: PPUSH
53463: LD_INT 4
53465: PPUSH
53466: CALL_OW 273
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_VAR 0 7
53479: PPUSH
53480: LD_INT 1
53482: PPUSH
53483: LD_INT 4
53485: PPUSH
53486: CALL_OW 272
53490: PUSH
53491: LD_VAR 0 8
53495: PPUSH
53496: LD_INT 1
53498: PPUSH
53499: LD_INT 4
53501: PPUSH
53502: CALL_OW 273
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_VAR 0 7
53515: PPUSH
53516: LD_INT 2
53518: PPUSH
53519: LD_INT 4
53521: PPUSH
53522: CALL_OW 272
53526: PUSH
53527: LD_VAR 0 8
53531: PPUSH
53532: LD_INT 2
53534: PPUSH
53535: LD_INT 4
53537: PPUSH
53538: CALL_OW 273
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_VAR 0 7
53551: PPUSH
53552: LD_INT 3
53554: PPUSH
53555: LD_INT 4
53557: PPUSH
53558: CALL_OW 272
53562: PUSH
53563: LD_VAR 0 8
53567: PPUSH
53568: LD_INT 3
53570: PPUSH
53571: LD_INT 4
53573: PPUSH
53574: CALL_OW 273
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_VAR 0 7
53587: PPUSH
53588: LD_INT 4
53590: PPUSH
53591: LD_INT 4
53593: PPUSH
53594: CALL_OW 272
53598: PUSH
53599: LD_VAR 0 8
53603: PPUSH
53604: LD_INT 4
53606: PPUSH
53607: LD_INT 4
53609: PPUSH
53610: CALL_OW 273
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_VAR 0 7
53623: PPUSH
53624: LD_INT 5
53626: PPUSH
53627: LD_INT 4
53629: PPUSH
53630: CALL_OW 272
53634: PUSH
53635: LD_VAR 0 8
53639: PPUSH
53640: LD_INT 5
53642: PPUSH
53643: LD_INT 4
53645: PPUSH
53646: CALL_OW 273
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// for i = tmp downto 1 do
53663: LD_ADDR_VAR 0 4
53667: PUSH
53668: DOUBLE
53669: LD_VAR 0 6
53673: INC
53674: ST_TO_ADDR
53675: LD_INT 1
53677: PUSH
53678: FOR_DOWNTO
53679: IFFALSE 53780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53681: LD_VAR 0 6
53685: PUSH
53686: LD_VAR 0 4
53690: ARRAY
53691: PUSH
53692: LD_INT 1
53694: ARRAY
53695: PPUSH
53696: LD_VAR 0 6
53700: PUSH
53701: LD_VAR 0 4
53705: ARRAY
53706: PUSH
53707: LD_INT 2
53709: ARRAY
53710: PPUSH
53711: CALL_OW 488
53715: NOT
53716: PUSH
53717: LD_VAR 0 6
53721: PUSH
53722: LD_VAR 0 4
53726: ARRAY
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: PPUSH
53732: LD_VAR 0 6
53736: PUSH
53737: LD_VAR 0 4
53741: ARRAY
53742: PUSH
53743: LD_INT 2
53745: ARRAY
53746: PPUSH
53747: CALL_OW 428
53751: PUSH
53752: LD_INT 0
53754: NONEQUAL
53755: OR
53756: IFFALSE 53778
// tmp := Delete ( tmp , i ) ;
53758: LD_ADDR_VAR 0 6
53762: PUSH
53763: LD_VAR 0 6
53767: PPUSH
53768: LD_VAR 0 4
53772: PPUSH
53773: CALL_OW 3
53777: ST_TO_ADDR
53778: GO 53678
53780: POP
53781: POP
// j := GetClosestHex ( unit , tmp ) ;
53782: LD_ADDR_VAR 0 5
53786: PUSH
53787: LD_VAR 0 1
53791: PPUSH
53792: LD_VAR 0 6
53796: PPUSH
53797: CALL 53082 0 2
53801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53802: LD_VAR 0 1
53806: PPUSH
53807: LD_VAR 0 5
53811: PUSH
53812: LD_INT 1
53814: ARRAY
53815: PPUSH
53816: LD_VAR 0 5
53820: PUSH
53821: LD_INT 2
53823: ARRAY
53824: PPUSH
53825: CALL_OW 111
// end ;
53829: LD_VAR 0 3
53833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53834: LD_INT 0
53836: PPUSH
53837: PPUSH
53838: PPUSH
// uc_side = 0 ;
53839: LD_ADDR_OWVAR 20
53843: PUSH
53844: LD_INT 0
53846: ST_TO_ADDR
// uc_nation = 0 ;
53847: LD_ADDR_OWVAR 21
53851: PUSH
53852: LD_INT 0
53854: ST_TO_ADDR
// InitHc_All ( ) ;
53855: CALL_OW 584
// InitVc ;
53859: CALL_OW 20
// if mastodonts then
53863: LD_VAR 0 6
53867: IFFALSE 53934
// for i = 1 to mastodonts do
53869: LD_ADDR_VAR 0 11
53873: PUSH
53874: DOUBLE
53875: LD_INT 1
53877: DEC
53878: ST_TO_ADDR
53879: LD_VAR 0 6
53883: PUSH
53884: FOR_TO
53885: IFFALSE 53932
// begin vc_chassis := 31 ;
53887: LD_ADDR_OWVAR 37
53891: PUSH
53892: LD_INT 31
53894: ST_TO_ADDR
// vc_control := control_rider ;
53895: LD_ADDR_OWVAR 38
53899: PUSH
53900: LD_INT 4
53902: ST_TO_ADDR
// animal := CreateVehicle ;
53903: LD_ADDR_VAR 0 12
53907: PUSH
53908: CALL_OW 45
53912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53913: LD_VAR 0 12
53917: PPUSH
53918: LD_VAR 0 8
53922: PPUSH
53923: LD_INT 0
53925: PPUSH
53926: CALL 56122 0 3
// end ;
53930: GO 53884
53932: POP
53933: POP
// if horses then
53934: LD_VAR 0 5
53938: IFFALSE 54005
// for i = 1 to horses do
53940: LD_ADDR_VAR 0 11
53944: PUSH
53945: DOUBLE
53946: LD_INT 1
53948: DEC
53949: ST_TO_ADDR
53950: LD_VAR 0 5
53954: PUSH
53955: FOR_TO
53956: IFFALSE 54003
// begin hc_class := 21 ;
53958: LD_ADDR_OWVAR 28
53962: PUSH
53963: LD_INT 21
53965: ST_TO_ADDR
// hc_gallery :=  ;
53966: LD_ADDR_OWVAR 33
53970: PUSH
53971: LD_STRING 
53973: ST_TO_ADDR
// animal := CreateHuman ;
53974: LD_ADDR_VAR 0 12
53978: PUSH
53979: CALL_OW 44
53983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53984: LD_VAR 0 12
53988: PPUSH
53989: LD_VAR 0 8
53993: PPUSH
53994: LD_INT 0
53996: PPUSH
53997: CALL 56122 0 3
// end ;
54001: GO 53955
54003: POP
54004: POP
// if birds then
54005: LD_VAR 0 1
54009: IFFALSE 54076
// for i = 1 to birds do
54011: LD_ADDR_VAR 0 11
54015: PUSH
54016: DOUBLE
54017: LD_INT 1
54019: DEC
54020: ST_TO_ADDR
54021: LD_VAR 0 1
54025: PUSH
54026: FOR_TO
54027: IFFALSE 54074
// begin hc_class = 18 ;
54029: LD_ADDR_OWVAR 28
54033: PUSH
54034: LD_INT 18
54036: ST_TO_ADDR
// hc_gallery =  ;
54037: LD_ADDR_OWVAR 33
54041: PUSH
54042: LD_STRING 
54044: ST_TO_ADDR
// animal := CreateHuman ;
54045: LD_ADDR_VAR 0 12
54049: PUSH
54050: CALL_OW 44
54054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54055: LD_VAR 0 12
54059: PPUSH
54060: LD_VAR 0 8
54064: PPUSH
54065: LD_INT 0
54067: PPUSH
54068: CALL 56122 0 3
// end ;
54072: GO 54026
54074: POP
54075: POP
// if tigers then
54076: LD_VAR 0 2
54080: IFFALSE 54164
// for i = 1 to tigers do
54082: LD_ADDR_VAR 0 11
54086: PUSH
54087: DOUBLE
54088: LD_INT 1
54090: DEC
54091: ST_TO_ADDR
54092: LD_VAR 0 2
54096: PUSH
54097: FOR_TO
54098: IFFALSE 54162
// begin hc_class = class_tiger ;
54100: LD_ADDR_OWVAR 28
54104: PUSH
54105: LD_INT 14
54107: ST_TO_ADDR
// hc_gallery =  ;
54108: LD_ADDR_OWVAR 33
54112: PUSH
54113: LD_STRING 
54115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54116: LD_ADDR_OWVAR 35
54120: PUSH
54121: LD_INT 7
54123: NEG
54124: PPUSH
54125: LD_INT 7
54127: PPUSH
54128: CALL_OW 12
54132: ST_TO_ADDR
// animal := CreateHuman ;
54133: LD_ADDR_VAR 0 12
54137: PUSH
54138: CALL_OW 44
54142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54143: LD_VAR 0 12
54147: PPUSH
54148: LD_VAR 0 8
54152: PPUSH
54153: LD_INT 0
54155: PPUSH
54156: CALL 56122 0 3
// end ;
54160: GO 54097
54162: POP
54163: POP
// if apemans then
54164: LD_VAR 0 3
54168: IFFALSE 54291
// for i = 1 to apemans do
54170: LD_ADDR_VAR 0 11
54174: PUSH
54175: DOUBLE
54176: LD_INT 1
54178: DEC
54179: ST_TO_ADDR
54180: LD_VAR 0 3
54184: PUSH
54185: FOR_TO
54186: IFFALSE 54289
// begin hc_class = class_apeman ;
54188: LD_ADDR_OWVAR 28
54192: PUSH
54193: LD_INT 12
54195: ST_TO_ADDR
// hc_gallery =  ;
54196: LD_ADDR_OWVAR 33
54200: PUSH
54201: LD_STRING 
54203: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54204: LD_ADDR_OWVAR 35
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PPUSH
54213: LD_INT 5
54215: PPUSH
54216: CALL_OW 12
54220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54221: LD_ADDR_OWVAR 31
54225: PUSH
54226: LD_INT 1
54228: PPUSH
54229: LD_INT 3
54231: PPUSH
54232: CALL_OW 12
54236: PUSH
54237: LD_INT 1
54239: PPUSH
54240: LD_INT 3
54242: PPUSH
54243: CALL_OW 12
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// animal := CreateHuman ;
54260: LD_ADDR_VAR 0 12
54264: PUSH
54265: CALL_OW 44
54269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54270: LD_VAR 0 12
54274: PPUSH
54275: LD_VAR 0 8
54279: PPUSH
54280: LD_INT 0
54282: PPUSH
54283: CALL 56122 0 3
// end ;
54287: GO 54185
54289: POP
54290: POP
// if enchidnas then
54291: LD_VAR 0 4
54295: IFFALSE 54362
// for i = 1 to enchidnas do
54297: LD_ADDR_VAR 0 11
54301: PUSH
54302: DOUBLE
54303: LD_INT 1
54305: DEC
54306: ST_TO_ADDR
54307: LD_VAR 0 4
54311: PUSH
54312: FOR_TO
54313: IFFALSE 54360
// begin hc_class = 13 ;
54315: LD_ADDR_OWVAR 28
54319: PUSH
54320: LD_INT 13
54322: ST_TO_ADDR
// hc_gallery =  ;
54323: LD_ADDR_OWVAR 33
54327: PUSH
54328: LD_STRING 
54330: ST_TO_ADDR
// animal := CreateHuman ;
54331: LD_ADDR_VAR 0 12
54335: PUSH
54336: CALL_OW 44
54340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54341: LD_VAR 0 12
54345: PPUSH
54346: LD_VAR 0 8
54350: PPUSH
54351: LD_INT 0
54353: PPUSH
54354: CALL 56122 0 3
// end ;
54358: GO 54312
54360: POP
54361: POP
// if fishes then
54362: LD_VAR 0 7
54366: IFFALSE 54433
// for i = 1 to fishes do
54368: LD_ADDR_VAR 0 11
54372: PUSH
54373: DOUBLE
54374: LD_INT 1
54376: DEC
54377: ST_TO_ADDR
54378: LD_VAR 0 7
54382: PUSH
54383: FOR_TO
54384: IFFALSE 54431
// begin hc_class = 20 ;
54386: LD_ADDR_OWVAR 28
54390: PUSH
54391: LD_INT 20
54393: ST_TO_ADDR
// hc_gallery =  ;
54394: LD_ADDR_OWVAR 33
54398: PUSH
54399: LD_STRING 
54401: ST_TO_ADDR
// animal := CreateHuman ;
54402: LD_ADDR_VAR 0 12
54406: PUSH
54407: CALL_OW 44
54411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54412: LD_VAR 0 12
54416: PPUSH
54417: LD_VAR 0 9
54421: PPUSH
54422: LD_INT 0
54424: PPUSH
54425: CALL 56122 0 3
// end ;
54429: GO 54383
54431: POP
54432: POP
// end ;
54433: LD_VAR 0 10
54437: RET
// export function WantHeal ( sci , unit ) ; begin
54438: LD_INT 0
54440: PPUSH
// if GetTaskList ( sci ) > 0 then
54441: LD_VAR 0 1
54445: PPUSH
54446: CALL_OW 437
54450: PUSH
54451: LD_INT 0
54453: GREATER
54454: IFFALSE 54524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54456: LD_VAR 0 1
54460: PPUSH
54461: CALL_OW 437
54465: PUSH
54466: LD_INT 1
54468: ARRAY
54469: PUSH
54470: LD_INT 1
54472: ARRAY
54473: PUSH
54474: LD_STRING l
54476: EQUAL
54477: PUSH
54478: LD_VAR 0 1
54482: PPUSH
54483: CALL_OW 437
54487: PUSH
54488: LD_INT 1
54490: ARRAY
54491: PUSH
54492: LD_INT 4
54494: ARRAY
54495: PUSH
54496: LD_VAR 0 2
54500: EQUAL
54501: AND
54502: IFFALSE 54514
// result := true else
54504: LD_ADDR_VAR 0 3
54508: PUSH
54509: LD_INT 1
54511: ST_TO_ADDR
54512: GO 54522
// result := false ;
54514: LD_ADDR_VAR 0 3
54518: PUSH
54519: LD_INT 0
54521: ST_TO_ADDR
// end else
54522: GO 54532
// result := false ;
54524: LD_ADDR_VAR 0 3
54528: PUSH
54529: LD_INT 0
54531: ST_TO_ADDR
// end ;
54532: LD_VAR 0 3
54536: RET
// export function HealTarget ( sci ) ; begin
54537: LD_INT 0
54539: PPUSH
// if not sci then
54540: LD_VAR 0 1
54544: NOT
54545: IFFALSE 54549
// exit ;
54547: GO 54614
// result := 0 ;
54549: LD_ADDR_VAR 0 2
54553: PUSH
54554: LD_INT 0
54556: ST_TO_ADDR
// if GetTaskList ( sci ) then
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL_OW 437
54566: IFFALSE 54614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54568: LD_VAR 0 1
54572: PPUSH
54573: CALL_OW 437
54577: PUSH
54578: LD_INT 1
54580: ARRAY
54581: PUSH
54582: LD_INT 1
54584: ARRAY
54585: PUSH
54586: LD_STRING l
54588: EQUAL
54589: IFFALSE 54614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54591: LD_ADDR_VAR 0 2
54595: PUSH
54596: LD_VAR 0 1
54600: PPUSH
54601: CALL_OW 437
54605: PUSH
54606: LD_INT 1
54608: ARRAY
54609: PUSH
54610: LD_INT 4
54612: ARRAY
54613: ST_TO_ADDR
// end ;
54614: LD_VAR 0 2
54618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54619: LD_INT 0
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
// if not base_units then
54625: LD_VAR 0 1
54629: NOT
54630: IFFALSE 54634
// exit ;
54632: GO 54721
// result := false ;
54634: LD_ADDR_VAR 0 2
54638: PUSH
54639: LD_INT 0
54641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54642: LD_ADDR_VAR 0 5
54646: PUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_INT 21
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PPUSH
54662: CALL_OW 72
54666: ST_TO_ADDR
// if not tmp then
54667: LD_VAR 0 5
54671: NOT
54672: IFFALSE 54676
// exit ;
54674: GO 54721
// for i in tmp do
54676: LD_ADDR_VAR 0 3
54680: PUSH
54681: LD_VAR 0 5
54685: PUSH
54686: FOR_IN
54687: IFFALSE 54719
// begin result := EnemyInRange ( i , 22 ) ;
54689: LD_ADDR_VAR 0 2
54693: PUSH
54694: LD_VAR 0 3
54698: PPUSH
54699: LD_INT 22
54701: PPUSH
54702: CALL 52957 0 2
54706: ST_TO_ADDR
// if result then
54707: LD_VAR 0 2
54711: IFFALSE 54717
// exit ;
54713: POP
54714: POP
54715: GO 54721
// end ;
54717: GO 54686
54719: POP
54720: POP
// end ;
54721: LD_VAR 0 2
54725: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54726: LD_INT 0
54728: PPUSH
54729: PPUSH
// if not units then
54730: LD_VAR 0 1
54734: NOT
54735: IFFALSE 54739
// exit ;
54737: GO 54809
// result := [ ] ;
54739: LD_ADDR_VAR 0 3
54743: PUSH
54744: EMPTY
54745: ST_TO_ADDR
// for i in units do
54746: LD_ADDR_VAR 0 4
54750: PUSH
54751: LD_VAR 0 1
54755: PUSH
54756: FOR_IN
54757: IFFALSE 54807
// if GetTag ( i ) = tag then
54759: LD_VAR 0 4
54763: PPUSH
54764: CALL_OW 110
54768: PUSH
54769: LD_VAR 0 2
54773: EQUAL
54774: IFFALSE 54805
// result := Insert ( result , result + 1 , i ) ;
54776: LD_ADDR_VAR 0 3
54780: PUSH
54781: LD_VAR 0 3
54785: PPUSH
54786: LD_VAR 0 3
54790: PUSH
54791: LD_INT 1
54793: PLUS
54794: PPUSH
54795: LD_VAR 0 4
54799: PPUSH
54800: CALL_OW 2
54804: ST_TO_ADDR
54805: GO 54756
54807: POP
54808: POP
// end ;
54809: LD_VAR 0 3
54813: RET
// export function IsDriver ( un ) ; begin
54814: LD_INT 0
54816: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54817: LD_ADDR_VAR 0 2
54821: PUSH
54822: LD_VAR 0 1
54826: PUSH
54827: LD_INT 55
54829: PUSH
54830: EMPTY
54831: LIST
54832: PPUSH
54833: CALL_OW 69
54837: IN
54838: ST_TO_ADDR
// end ;
54839: LD_VAR 0 2
54843: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54844: LD_INT 0
54846: PPUSH
54847: PPUSH
// list := [ ] ;
54848: LD_ADDR_VAR 0 5
54852: PUSH
54853: EMPTY
54854: ST_TO_ADDR
// case d of 0 :
54855: LD_VAR 0 3
54859: PUSH
54860: LD_INT 0
54862: DOUBLE
54863: EQUAL
54864: IFTRUE 54868
54866: GO 55001
54868: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54869: LD_ADDR_VAR 0 5
54873: PUSH
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 4
54881: MINUS
54882: PUSH
54883: LD_VAR 0 2
54887: PUSH
54888: LD_INT 4
54890: MINUS
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: PUSH
54900: LD_VAR 0 1
54904: PUSH
54905: LD_INT 3
54907: MINUS
54908: PUSH
54909: LD_VAR 0 2
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: PUSH
54922: LD_VAR 0 1
54926: PUSH
54927: LD_INT 4
54929: PLUS
54930: PUSH
54931: LD_VAR 0 2
54935: PUSH
54936: LD_INT 4
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: PUSH
54944: LD_VAR 0 1
54948: PUSH
54949: LD_INT 3
54951: PLUS
54952: PUSH
54953: LD_VAR 0 2
54957: PUSH
54958: LD_INT 3
54960: PLUS
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: PUSH
54970: LD_VAR 0 1
54974: PUSH
54975: LD_VAR 0 2
54979: PUSH
54980: LD_INT 4
54982: PLUS
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: ST_TO_ADDR
// end ; 1 :
54999: GO 55699
55001: LD_INT 1
55003: DOUBLE
55004: EQUAL
55005: IFTRUE 55009
55007: GO 55142
55009: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55010: LD_ADDR_VAR 0 5
55014: PUSH
55015: LD_VAR 0 1
55019: PUSH
55020: LD_VAR 0 2
55024: PUSH
55025: LD_INT 4
55027: MINUS
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_VAR 0 1
55041: PUSH
55042: LD_INT 3
55044: MINUS
55045: PUSH
55046: LD_VAR 0 2
55050: PUSH
55051: LD_INT 3
55053: MINUS
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: PUSH
55063: LD_VAR 0 1
55067: PUSH
55068: LD_INT 4
55070: MINUS
55071: PUSH
55072: LD_VAR 0 2
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: LD_VAR 0 1
55089: PUSH
55090: LD_VAR 0 2
55094: PUSH
55095: LD_INT 3
55097: PLUS
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: PUSH
55107: LD_VAR 0 1
55111: PUSH
55112: LD_INT 4
55114: PLUS
55115: PUSH
55116: LD_VAR 0 2
55120: PUSH
55121: LD_INT 4
55123: PLUS
55124: PUSH
55125: LD_INT 5
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// end ; 2 :
55140: GO 55699
55142: LD_INT 2
55144: DOUBLE
55145: EQUAL
55146: IFTRUE 55150
55148: GO 55279
55150: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55151: LD_ADDR_VAR 0 5
55155: PUSH
55156: LD_VAR 0 1
55160: PUSH
55161: LD_VAR 0 2
55165: PUSH
55166: LD_INT 3
55168: MINUS
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: PUSH
55178: LD_VAR 0 1
55182: PUSH
55183: LD_INT 4
55185: PLUS
55186: PUSH
55187: LD_VAR 0 2
55191: PUSH
55192: LD_INT 4
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: PUSH
55200: LD_VAR 0 1
55204: PUSH
55205: LD_VAR 0 2
55209: PUSH
55210: LD_INT 4
55212: PLUS
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: PUSH
55222: LD_VAR 0 1
55226: PUSH
55227: LD_INT 3
55229: MINUS
55230: PUSH
55231: LD_VAR 0 2
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: PUSH
55244: LD_VAR 0 1
55248: PUSH
55249: LD_INT 4
55251: MINUS
55252: PUSH
55253: LD_VAR 0 2
55257: PUSH
55258: LD_INT 4
55260: MINUS
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// end ; 3 :
55277: GO 55699
55279: LD_INT 3
55281: DOUBLE
55282: EQUAL
55283: IFTRUE 55287
55285: GO 55420
55287: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55288: LD_ADDR_VAR 0 5
55292: PUSH
55293: LD_VAR 0 1
55297: PUSH
55298: LD_INT 3
55300: PLUS
55301: PUSH
55302: LD_VAR 0 2
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: PUSH
55315: LD_VAR 0 1
55319: PUSH
55320: LD_INT 4
55322: PLUS
55323: PUSH
55324: LD_VAR 0 2
55328: PUSH
55329: LD_INT 4
55331: PLUS
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: PUSH
55341: LD_VAR 0 1
55345: PUSH
55346: LD_INT 4
55348: MINUS
55349: PUSH
55350: LD_VAR 0 2
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: PUSH
55363: LD_VAR 0 1
55367: PUSH
55368: LD_VAR 0 2
55372: PUSH
55373: LD_INT 4
55375: MINUS
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: PUSH
55385: LD_VAR 0 1
55389: PUSH
55390: LD_INT 3
55392: MINUS
55393: PUSH
55394: LD_VAR 0 2
55398: PUSH
55399: LD_INT 3
55401: MINUS
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// end ; 4 :
55418: GO 55699
55420: LD_INT 4
55422: DOUBLE
55423: EQUAL
55424: IFTRUE 55428
55426: GO 55561
55428: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55429: LD_ADDR_VAR 0 5
55433: PUSH
55434: LD_VAR 0 1
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 4
55446: PLUS
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: PUSH
55456: LD_VAR 0 1
55460: PUSH
55461: LD_INT 3
55463: PLUS
55464: PUSH
55465: LD_VAR 0 2
55469: PUSH
55470: LD_INT 3
55472: PLUS
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: PUSH
55482: LD_VAR 0 1
55486: PUSH
55487: LD_INT 4
55489: PLUS
55490: PUSH
55491: LD_VAR 0 2
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: PUSH
55504: LD_VAR 0 1
55508: PUSH
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 3
55516: MINUS
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: PUSH
55526: LD_VAR 0 1
55530: PUSH
55531: LD_INT 4
55533: MINUS
55534: PUSH
55535: LD_VAR 0 2
55539: PUSH
55540: LD_INT 4
55542: MINUS
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// end ; 5 :
55559: GO 55699
55561: LD_INT 5
55563: DOUBLE
55564: EQUAL
55565: IFTRUE 55569
55567: GO 55698
55569: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55570: LD_ADDR_VAR 0 5
55574: PUSH
55575: LD_VAR 0 1
55579: PUSH
55580: LD_INT 4
55582: MINUS
55583: PUSH
55584: LD_VAR 0 2
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: PUSH
55597: LD_VAR 0 1
55601: PUSH
55602: LD_VAR 0 2
55606: PUSH
55607: LD_INT 4
55609: MINUS
55610: PUSH
55611: LD_INT 3
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: PUSH
55619: LD_VAR 0 1
55623: PUSH
55624: LD_INT 4
55626: PLUS
55627: PUSH
55628: LD_VAR 0 2
55632: PUSH
55633: LD_INT 4
55635: PLUS
55636: PUSH
55637: LD_INT 5
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: PUSH
55645: LD_VAR 0 1
55649: PUSH
55650: LD_INT 3
55652: PLUS
55653: PUSH
55654: LD_VAR 0 2
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: PUSH
55667: LD_VAR 0 1
55671: PUSH
55672: LD_VAR 0 2
55676: PUSH
55677: LD_INT 3
55679: PLUS
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// end ; end ;
55696: GO 55699
55698: POP
// result := list ;
55699: LD_ADDR_VAR 0 4
55703: PUSH
55704: LD_VAR 0 5
55708: ST_TO_ADDR
// end ;
55709: LD_VAR 0 4
55713: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55714: LD_INT 0
55716: PPUSH
55717: PPUSH
55718: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55719: LD_VAR 0 1
55723: NOT
55724: PUSH
55725: LD_VAR 0 2
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: IN
55748: NOT
55749: OR
55750: IFFALSE 55754
// exit ;
55752: GO 55846
// tmp := [ ] ;
55754: LD_ADDR_VAR 0 5
55758: PUSH
55759: EMPTY
55760: ST_TO_ADDR
// for i in units do
55761: LD_ADDR_VAR 0 4
55765: PUSH
55766: LD_VAR 0 1
55770: PUSH
55771: FOR_IN
55772: IFFALSE 55815
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55774: LD_ADDR_VAR 0 5
55778: PUSH
55779: LD_VAR 0 5
55783: PPUSH
55784: LD_VAR 0 5
55788: PUSH
55789: LD_INT 1
55791: PLUS
55792: PPUSH
55793: LD_VAR 0 4
55797: PPUSH
55798: LD_VAR 0 2
55802: PPUSH
55803: CALL_OW 259
55807: PPUSH
55808: CALL_OW 2
55812: ST_TO_ADDR
55813: GO 55771
55815: POP
55816: POP
// if not tmp then
55817: LD_VAR 0 5
55821: NOT
55822: IFFALSE 55826
// exit ;
55824: GO 55846
// result := SortListByListDesc ( units , tmp ) ;
55826: LD_ADDR_VAR 0 3
55830: PUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: LD_VAR 0 5
55840: PPUSH
55841: CALL_OW 77
55845: ST_TO_ADDR
// end ;
55846: LD_VAR 0 3
55850: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55851: LD_INT 0
55853: PPUSH
55854: PPUSH
55855: PPUSH
// result := false ;
55856: LD_ADDR_VAR 0 3
55860: PUSH
55861: LD_INT 0
55863: ST_TO_ADDR
// x := GetX ( building ) ;
55864: LD_ADDR_VAR 0 4
55868: PUSH
55869: LD_VAR 0 2
55873: PPUSH
55874: CALL_OW 250
55878: ST_TO_ADDR
// y := GetY ( building ) ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_VAR 0 2
55888: PPUSH
55889: CALL_OW 251
55893: ST_TO_ADDR
// if not building or not x or not y then
55894: LD_VAR 0 2
55898: NOT
55899: PUSH
55900: LD_VAR 0 4
55904: NOT
55905: OR
55906: PUSH
55907: LD_VAR 0 5
55911: NOT
55912: OR
55913: IFFALSE 55917
// exit ;
55915: GO 56009
// if GetTaskList ( unit ) then
55917: LD_VAR 0 1
55921: PPUSH
55922: CALL_OW 437
55926: IFFALSE 56009
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55928: LD_STRING e
55930: PUSH
55931: LD_VAR 0 1
55935: PPUSH
55936: CALL_OW 437
55940: PUSH
55941: LD_INT 1
55943: ARRAY
55944: PUSH
55945: LD_INT 1
55947: ARRAY
55948: EQUAL
55949: PUSH
55950: LD_VAR 0 4
55954: PUSH
55955: LD_VAR 0 1
55959: PPUSH
55960: CALL_OW 437
55964: PUSH
55965: LD_INT 1
55967: ARRAY
55968: PUSH
55969: LD_INT 2
55971: ARRAY
55972: EQUAL
55973: AND
55974: PUSH
55975: LD_VAR 0 5
55979: PUSH
55980: LD_VAR 0 1
55984: PPUSH
55985: CALL_OW 437
55989: PUSH
55990: LD_INT 1
55992: ARRAY
55993: PUSH
55994: LD_INT 3
55996: ARRAY
55997: EQUAL
55998: AND
55999: IFFALSE 56009
// result := true end ;
56001: LD_ADDR_VAR 0 3
56005: PUSH
56006: LD_INT 1
56008: ST_TO_ADDR
// end ;
56009: LD_VAR 0 3
56013: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56014: LD_INT 0
56016: PPUSH
// result := false ;
56017: LD_ADDR_VAR 0 4
56021: PUSH
56022: LD_INT 0
56024: ST_TO_ADDR
// if GetTaskList ( unit ) then
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL_OW 437
56034: IFFALSE 56117
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56036: LD_STRING M
56038: PUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL_OW 437
56048: PUSH
56049: LD_INT 1
56051: ARRAY
56052: PUSH
56053: LD_INT 1
56055: ARRAY
56056: EQUAL
56057: PUSH
56058: LD_VAR 0 2
56062: PUSH
56063: LD_VAR 0 1
56067: PPUSH
56068: CALL_OW 437
56072: PUSH
56073: LD_INT 1
56075: ARRAY
56076: PUSH
56077: LD_INT 2
56079: ARRAY
56080: EQUAL
56081: AND
56082: PUSH
56083: LD_VAR 0 3
56087: PUSH
56088: LD_VAR 0 1
56092: PPUSH
56093: CALL_OW 437
56097: PUSH
56098: LD_INT 1
56100: ARRAY
56101: PUSH
56102: LD_INT 3
56104: ARRAY
56105: EQUAL
56106: AND
56107: IFFALSE 56117
// result := true ;
56109: LD_ADDR_VAR 0 4
56113: PUSH
56114: LD_INT 1
56116: ST_TO_ADDR
// end ; end ;
56117: LD_VAR 0 4
56121: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56122: LD_INT 0
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
// if not unit or not area then
56128: LD_VAR 0 1
56132: NOT
56133: PUSH
56134: LD_VAR 0 2
56138: NOT
56139: OR
56140: IFFALSE 56144
// exit ;
56142: GO 56308
// tmp := AreaToList ( area , i ) ;
56144: LD_ADDR_VAR 0 6
56148: PUSH
56149: LD_VAR 0 2
56153: PPUSH
56154: LD_VAR 0 5
56158: PPUSH
56159: CALL_OW 517
56163: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56164: LD_ADDR_VAR 0 5
56168: PUSH
56169: DOUBLE
56170: LD_INT 1
56172: DEC
56173: ST_TO_ADDR
56174: LD_VAR 0 6
56178: PUSH
56179: LD_INT 1
56181: ARRAY
56182: PUSH
56183: FOR_TO
56184: IFFALSE 56306
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56186: LD_ADDR_VAR 0 7
56190: PUSH
56191: LD_VAR 0 6
56195: PUSH
56196: LD_INT 1
56198: ARRAY
56199: PUSH
56200: LD_VAR 0 5
56204: ARRAY
56205: PUSH
56206: LD_VAR 0 6
56210: PUSH
56211: LD_INT 2
56213: ARRAY
56214: PUSH
56215: LD_VAR 0 5
56219: ARRAY
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56225: LD_VAR 0 7
56229: PUSH
56230: LD_INT 1
56232: ARRAY
56233: PPUSH
56234: LD_VAR 0 7
56238: PUSH
56239: LD_INT 2
56241: ARRAY
56242: PPUSH
56243: CALL_OW 428
56247: PUSH
56248: LD_INT 0
56250: EQUAL
56251: IFFALSE 56304
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56253: LD_VAR 0 1
56257: PPUSH
56258: LD_VAR 0 7
56262: PUSH
56263: LD_INT 1
56265: ARRAY
56266: PPUSH
56267: LD_VAR 0 7
56271: PUSH
56272: LD_INT 2
56274: ARRAY
56275: PPUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: CALL_OW 48
// result := IsPlaced ( unit ) ;
56285: LD_ADDR_VAR 0 4
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: CALL_OW 305
56299: ST_TO_ADDR
// exit ;
56300: POP
56301: POP
56302: GO 56308
// end ; end ;
56304: GO 56183
56306: POP
56307: POP
// end ;
56308: LD_VAR 0 4
56312: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56313: LD_INT 0
56315: PPUSH
56316: PPUSH
56317: PPUSH
// if not side or side > 8 then
56318: LD_VAR 0 1
56322: NOT
56323: PUSH
56324: LD_VAR 0 1
56328: PUSH
56329: LD_INT 8
56331: GREATER
56332: OR
56333: IFFALSE 56337
// exit ;
56335: GO 56524
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56337: LD_ADDR_VAR 0 4
56341: PUSH
56342: LD_INT 22
56344: PUSH
56345: LD_VAR 0 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 21
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PPUSH
56368: CALL_OW 69
56372: ST_TO_ADDR
// if not tmp then
56373: LD_VAR 0 4
56377: NOT
56378: IFFALSE 56382
// exit ;
56380: GO 56524
// enable_addtolog := true ;
56382: LD_ADDR_OWVAR 81
56386: PUSH
56387: LD_INT 1
56389: ST_TO_ADDR
// AddToLog ( [ ) ;
56390: LD_STRING [
56392: PPUSH
56393: CALL_OW 561
// for i in tmp do
56397: LD_ADDR_VAR 0 3
56401: PUSH
56402: LD_VAR 0 4
56406: PUSH
56407: FOR_IN
56408: IFFALSE 56515
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56410: LD_STRING [
56412: PUSH
56413: LD_VAR 0 3
56417: PPUSH
56418: CALL_OW 266
56422: STR
56423: PUSH
56424: LD_STRING , 
56426: STR
56427: PUSH
56428: LD_VAR 0 3
56432: PPUSH
56433: CALL_OW 250
56437: STR
56438: PUSH
56439: LD_STRING , 
56441: STR
56442: PUSH
56443: LD_VAR 0 3
56447: PPUSH
56448: CALL_OW 251
56452: STR
56453: PUSH
56454: LD_STRING , 
56456: STR
56457: PUSH
56458: LD_VAR 0 3
56462: PPUSH
56463: CALL_OW 254
56467: STR
56468: PUSH
56469: LD_STRING , 
56471: STR
56472: PUSH
56473: LD_VAR 0 3
56477: PPUSH
56478: LD_INT 1
56480: PPUSH
56481: CALL_OW 268
56485: STR
56486: PUSH
56487: LD_STRING , 
56489: STR
56490: PUSH
56491: LD_VAR 0 3
56495: PPUSH
56496: LD_INT 2
56498: PPUSH
56499: CALL_OW 268
56503: STR
56504: PUSH
56505: LD_STRING ],
56507: STR
56508: PPUSH
56509: CALL_OW 561
// end ;
56513: GO 56407
56515: POP
56516: POP
// AddToLog ( ]; ) ;
56517: LD_STRING ];
56519: PPUSH
56520: CALL_OW 561
// end ;
56524: LD_VAR 0 2
56528: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56529: LD_INT 0
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
// if not area or not rate or not max then
56536: LD_VAR 0 1
56540: NOT
56541: PUSH
56542: LD_VAR 0 2
56546: NOT
56547: OR
56548: PUSH
56549: LD_VAR 0 4
56553: NOT
56554: OR
56555: IFFALSE 56559
// exit ;
56557: GO 56751
// while 1 do
56559: LD_INT 1
56561: IFFALSE 56751
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56563: LD_ADDR_VAR 0 9
56567: PUSH
56568: LD_VAR 0 1
56572: PPUSH
56573: LD_INT 1
56575: PPUSH
56576: CALL_OW 287
56580: PUSH
56581: LD_INT 10
56583: MUL
56584: ST_TO_ADDR
// r := rate / 10 ;
56585: LD_ADDR_VAR 0 7
56589: PUSH
56590: LD_VAR 0 2
56594: PUSH
56595: LD_INT 10
56597: DIVREAL
56598: ST_TO_ADDR
// time := 1 1$00 ;
56599: LD_ADDR_VAR 0 8
56603: PUSH
56604: LD_INT 2100
56606: ST_TO_ADDR
// if amount < min then
56607: LD_VAR 0 9
56611: PUSH
56612: LD_VAR 0 3
56616: LESS
56617: IFFALSE 56635
// r := r * 2 else
56619: LD_ADDR_VAR 0 7
56623: PUSH
56624: LD_VAR 0 7
56628: PUSH
56629: LD_INT 2
56631: MUL
56632: ST_TO_ADDR
56633: GO 56661
// if amount > max then
56635: LD_VAR 0 9
56639: PUSH
56640: LD_VAR 0 4
56644: GREATER
56645: IFFALSE 56661
// r := r / 2 ;
56647: LD_ADDR_VAR 0 7
56651: PUSH
56652: LD_VAR 0 7
56656: PUSH
56657: LD_INT 2
56659: DIVREAL
56660: ST_TO_ADDR
// time := time / r ;
56661: LD_ADDR_VAR 0 8
56665: PUSH
56666: LD_VAR 0 8
56670: PUSH
56671: LD_VAR 0 7
56675: DIVREAL
56676: ST_TO_ADDR
// if time < 0 then
56677: LD_VAR 0 8
56681: PUSH
56682: LD_INT 0
56684: LESS
56685: IFFALSE 56702
// time := time * - 1 ;
56687: LD_ADDR_VAR 0 8
56691: PUSH
56692: LD_VAR 0 8
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: MUL
56701: ST_TO_ADDR
// wait ( time ) ;
56702: LD_VAR 0 8
56706: PPUSH
56707: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56711: LD_INT 35
56713: PPUSH
56714: LD_INT 875
56716: PPUSH
56717: CALL_OW 12
56721: PPUSH
56722: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56726: LD_INT 1
56728: PPUSH
56729: LD_INT 5
56731: PPUSH
56732: CALL_OW 12
56736: PPUSH
56737: LD_VAR 0 1
56741: PPUSH
56742: LD_INT 1
56744: PPUSH
56745: CALL_OW 55
// end ;
56749: GO 56559
// end ;
56751: LD_VAR 0 5
56755: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56756: LD_INT 0
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
// if not turrets or not factories then
56766: LD_VAR 0 1
56770: NOT
56771: PUSH
56772: LD_VAR 0 2
56776: NOT
56777: OR
56778: IFFALSE 56782
// exit ;
56780: GO 57089
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56782: LD_ADDR_VAR 0 10
56786: PUSH
56787: LD_INT 5
56789: PUSH
56790: LD_INT 6
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 4
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 5
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 24
56824: PUSH
56825: LD_INT 25
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 23
56834: PUSH
56835: LD_INT 27
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 42
56848: PUSH
56849: LD_INT 43
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 44
56858: PUSH
56859: LD_INT 46
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 45
56868: PUSH
56869: LD_INT 47
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// result := [ ] ;
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: EMPTY
56892: ST_TO_ADDR
// for i in turrets do
56893: LD_ADDR_VAR 0 4
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: FOR_IN
56904: IFFALSE 57087
// begin nat := GetNation ( i ) ;
56906: LD_ADDR_VAR 0 7
56910: PUSH
56911: LD_VAR 0 4
56915: PPUSH
56916: CALL_OW 248
56920: ST_TO_ADDR
// weapon := 0 ;
56921: LD_ADDR_VAR 0 8
56925: PUSH
56926: LD_INT 0
56928: ST_TO_ADDR
// if not nat then
56929: LD_VAR 0 7
56933: NOT
56934: IFFALSE 56938
// continue ;
56936: GO 56903
// for j in list [ nat ] do
56938: LD_ADDR_VAR 0 5
56942: PUSH
56943: LD_VAR 0 10
56947: PUSH
56948: LD_VAR 0 7
56952: ARRAY
56953: PUSH
56954: FOR_IN
56955: IFFALSE 56996
// if GetBWeapon ( i ) = j [ 1 ] then
56957: LD_VAR 0 4
56961: PPUSH
56962: CALL_OW 269
56966: PUSH
56967: LD_VAR 0 5
56971: PUSH
56972: LD_INT 1
56974: ARRAY
56975: EQUAL
56976: IFFALSE 56994
// begin weapon := j [ 2 ] ;
56978: LD_ADDR_VAR 0 8
56982: PUSH
56983: LD_VAR 0 5
56987: PUSH
56988: LD_INT 2
56990: ARRAY
56991: ST_TO_ADDR
// break ;
56992: GO 56996
// end ;
56994: GO 56954
56996: POP
56997: POP
// if not weapon then
56998: LD_VAR 0 8
57002: NOT
57003: IFFALSE 57007
// continue ;
57005: GO 56903
// for k in factories do
57007: LD_ADDR_VAR 0 6
57011: PUSH
57012: LD_VAR 0 2
57016: PUSH
57017: FOR_IN
57018: IFFALSE 57083
// begin weapons := AvailableWeaponList ( k ) ;
57020: LD_ADDR_VAR 0 9
57024: PUSH
57025: LD_VAR 0 6
57029: PPUSH
57030: CALL_OW 478
57034: ST_TO_ADDR
// if not weapons then
57035: LD_VAR 0 9
57039: NOT
57040: IFFALSE 57044
// continue ;
57042: GO 57017
// if weapon in weapons then
57044: LD_VAR 0 8
57048: PUSH
57049: LD_VAR 0 9
57053: IN
57054: IFFALSE 57081
// begin result := [ i , weapon ] ;
57056: LD_ADDR_VAR 0 3
57060: PUSH
57061: LD_VAR 0 4
57065: PUSH
57066: LD_VAR 0 8
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// exit ;
57075: POP
57076: POP
57077: POP
57078: POP
57079: GO 57089
// end ; end ;
57081: GO 57017
57083: POP
57084: POP
// end ;
57085: GO 56903
57087: POP
57088: POP
// end ;
57089: LD_VAR 0 3
57093: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57094: LD_INT 0
57096: PPUSH
// if not side or side > 8 then
57097: LD_VAR 0 3
57101: NOT
57102: PUSH
57103: LD_VAR 0 3
57107: PUSH
57108: LD_INT 8
57110: GREATER
57111: OR
57112: IFFALSE 57116
// exit ;
57114: GO 57175
// if not range then
57116: LD_VAR 0 4
57120: NOT
57121: IFFALSE 57132
// range := - 12 ;
57123: LD_ADDR_VAR 0 4
57127: PUSH
57128: LD_INT 12
57130: NEG
57131: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57132: LD_VAR 0 1
57136: PPUSH
57137: LD_VAR 0 2
57141: PPUSH
57142: LD_VAR 0 3
57146: PPUSH
57147: LD_VAR 0 4
57151: PPUSH
57152: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57156: LD_VAR 0 1
57160: PPUSH
57161: LD_VAR 0 2
57165: PPUSH
57166: LD_VAR 0 3
57170: PPUSH
57171: CALL_OW 331
// end ;
57175: LD_VAR 0 5
57179: RET
// export function Video ( mode ) ; begin
57180: LD_INT 0
57182: PPUSH
// ingame_video = mode ;
57183: LD_ADDR_OWVAR 52
57187: PUSH
57188: LD_VAR 0 1
57192: ST_TO_ADDR
// interface_hidden = mode ;
57193: LD_ADDR_OWVAR 54
57197: PUSH
57198: LD_VAR 0 1
57202: ST_TO_ADDR
// end ;
57203: LD_VAR 0 2
57207: RET
// export function Join ( array , element ) ; begin
57208: LD_INT 0
57210: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57211: LD_ADDR_VAR 0 3
57215: PUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: LD_VAR 0 1
57225: PUSH
57226: LD_INT 1
57228: PLUS
57229: PPUSH
57230: LD_VAR 0 2
57234: PPUSH
57235: CALL_OW 1
57239: ST_TO_ADDR
// end ;
57240: LD_VAR 0 3
57244: RET
// export function JoinUnion ( array , element ) ; begin
57245: LD_INT 0
57247: PPUSH
// result := array union element ;
57248: LD_ADDR_VAR 0 3
57252: PUSH
57253: LD_VAR 0 1
57257: PUSH
57258: LD_VAR 0 2
57262: UNION
57263: ST_TO_ADDR
// end ;
57264: LD_VAR 0 3
57268: RET
// export function GetBehemoths ( side ) ; begin
57269: LD_INT 0
57271: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57272: LD_ADDR_VAR 0 2
57276: PUSH
57277: LD_INT 22
57279: PUSH
57280: LD_VAR 0 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 31
57291: PUSH
57292: LD_INT 25
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PPUSH
57303: CALL_OW 69
57307: ST_TO_ADDR
// end ;
57308: LD_VAR 0 2
57312: RET
// export function Shuffle ( array ) ; var i , index ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
57317: PPUSH
// result := [ ] ;
57318: LD_ADDR_VAR 0 2
57322: PUSH
57323: EMPTY
57324: ST_TO_ADDR
// if not array then
57325: LD_VAR 0 1
57329: NOT
57330: IFFALSE 57334
// exit ;
57332: GO 57433
// Randomize ;
57334: CALL_OW 10
// for i = array downto 1 do
57338: LD_ADDR_VAR 0 3
57342: PUSH
57343: DOUBLE
57344: LD_VAR 0 1
57348: INC
57349: ST_TO_ADDR
57350: LD_INT 1
57352: PUSH
57353: FOR_DOWNTO
57354: IFFALSE 57431
// begin index := rand ( 1 , array ) ;
57356: LD_ADDR_VAR 0 4
57360: PUSH
57361: LD_INT 1
57363: PPUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 12
57373: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57374: LD_ADDR_VAR 0 2
57378: PUSH
57379: LD_VAR 0 2
57383: PPUSH
57384: LD_VAR 0 2
57388: PUSH
57389: LD_INT 1
57391: PLUS
57392: PPUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_VAR 0 4
57402: ARRAY
57403: PPUSH
57404: CALL_OW 2
57408: ST_TO_ADDR
// array := Delete ( array , index ) ;
57409: LD_ADDR_VAR 0 1
57413: PUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: LD_VAR 0 4
57423: PPUSH
57424: CALL_OW 3
57428: ST_TO_ADDR
// end ;
57429: GO 57353
57431: POP
57432: POP
// end ;
57433: LD_VAR 0 2
57437: RET
// export function GetBaseMaterials ( base ) ; begin
57438: LD_INT 0
57440: PPUSH
// result := [ 0 , 0 , 0 ] ;
57441: LD_ADDR_VAR 0 2
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// if not base then
57460: LD_VAR 0 1
57464: NOT
57465: IFFALSE 57469
// exit ;
57467: GO 57518
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57469: LD_ADDR_VAR 0 2
57473: PUSH
57474: LD_VAR 0 1
57478: PPUSH
57479: LD_INT 1
57481: PPUSH
57482: CALL_OW 275
57486: PUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: LD_INT 2
57494: PPUSH
57495: CALL_OW 275
57499: PUSH
57500: LD_VAR 0 1
57504: PPUSH
57505: LD_INT 3
57507: PPUSH
57508: CALL_OW 275
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: ST_TO_ADDR
// end ;
57518: LD_VAR 0 2
57522: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57523: LD_INT 0
57525: PPUSH
57526: PPUSH
// result := array ;
57527: LD_ADDR_VAR 0 3
57531: PUSH
57532: LD_VAR 0 1
57536: ST_TO_ADDR
// if size > 0 then
57537: LD_VAR 0 2
57541: PUSH
57542: LD_INT 0
57544: GREATER
57545: IFFALSE 57591
// for i := array downto size do
57547: LD_ADDR_VAR 0 4
57551: PUSH
57552: DOUBLE
57553: LD_VAR 0 1
57557: INC
57558: ST_TO_ADDR
57559: LD_VAR 0 2
57563: PUSH
57564: FOR_DOWNTO
57565: IFFALSE 57589
// result := Delete ( result , result ) ;
57567: LD_ADDR_VAR 0 3
57571: PUSH
57572: LD_VAR 0 3
57576: PPUSH
57577: LD_VAR 0 3
57581: PPUSH
57582: CALL_OW 3
57586: ST_TO_ADDR
57587: GO 57564
57589: POP
57590: POP
// end ;
57591: LD_VAR 0 3
57595: RET
// export function ComExit ( unit ) ; var tmp ; begin
57596: LD_INT 0
57598: PPUSH
57599: PPUSH
// if not IsInUnit ( unit ) then
57600: LD_VAR 0 1
57604: PPUSH
57605: CALL_OW 310
57609: NOT
57610: IFFALSE 57614
// exit ;
57612: GO 57674
// tmp := IsInUnit ( unit ) ;
57614: LD_ADDR_VAR 0 3
57618: PUSH
57619: LD_VAR 0 1
57623: PPUSH
57624: CALL_OW 310
57628: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57629: LD_VAR 0 3
57633: PPUSH
57634: CALL_OW 247
57638: PUSH
57639: LD_INT 2
57641: EQUAL
57642: IFFALSE 57655
// ComExitVehicle ( unit ) else
57644: LD_VAR 0 1
57648: PPUSH
57649: CALL_OW 121
57653: GO 57664
// ComExitBuilding ( unit ) ;
57655: LD_VAR 0 1
57659: PPUSH
57660: CALL_OW 122
// result := tmp ;
57664: LD_ADDR_VAR 0 2
57668: PUSH
57669: LD_VAR 0 3
57673: ST_TO_ADDR
// end ;
57674: LD_VAR 0 2
57678: RET
// export function ComExitAll ( units ) ; var i ; begin
57679: LD_INT 0
57681: PPUSH
57682: PPUSH
// if not units then
57683: LD_VAR 0 1
57687: NOT
57688: IFFALSE 57692
// exit ;
57690: GO 57718
// for i in units do
57692: LD_ADDR_VAR 0 3
57696: PUSH
57697: LD_VAR 0 1
57701: PUSH
57702: FOR_IN
57703: IFFALSE 57716
// ComExit ( i ) ;
57705: LD_VAR 0 3
57709: PPUSH
57710: CALL 57596 0 1
57714: GO 57702
57716: POP
57717: POP
// end ;
57718: LD_VAR 0 2
57722: RET
// export function ResetHc ; begin
57723: LD_INT 0
57725: PPUSH
// InitHc ;
57726: CALL_OW 19
// hc_importance := 0 ;
57730: LD_ADDR_OWVAR 32
57734: PUSH
57735: LD_INT 0
57737: ST_TO_ADDR
// end ;
57738: LD_VAR 0 1
57742: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57743: LD_INT 0
57745: PPUSH
57746: PPUSH
57747: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57748: LD_ADDR_VAR 0 6
57752: PUSH
57753: LD_VAR 0 1
57757: PUSH
57758: LD_VAR 0 3
57762: PLUS
57763: PUSH
57764: LD_INT 2
57766: DIV
57767: ST_TO_ADDR
// if _x < 0 then
57768: LD_VAR 0 6
57772: PUSH
57773: LD_INT 0
57775: LESS
57776: IFFALSE 57793
// _x := _x * - 1 ;
57778: LD_ADDR_VAR 0 6
57782: PUSH
57783: LD_VAR 0 6
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: MUL
57792: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57793: LD_ADDR_VAR 0 7
57797: PUSH
57798: LD_VAR 0 2
57802: PUSH
57803: LD_VAR 0 4
57807: PLUS
57808: PUSH
57809: LD_INT 2
57811: DIV
57812: ST_TO_ADDR
// if _y < 0 then
57813: LD_VAR 0 7
57817: PUSH
57818: LD_INT 0
57820: LESS
57821: IFFALSE 57838
// _y := _y * - 1 ;
57823: LD_ADDR_VAR 0 7
57827: PUSH
57828: LD_VAR 0 7
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: MUL
57837: ST_TO_ADDR
// result := [ _x , _y ] ;
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: LD_VAR 0 6
57847: PUSH
57848: LD_VAR 0 7
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// end ;
57857: LD_VAR 0 5
57861: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57862: LD_INT 0
57864: PPUSH
57865: PPUSH
57866: PPUSH
57867: PPUSH
// task := GetTaskList ( unit ) ;
57868: LD_ADDR_VAR 0 7
57872: PUSH
57873: LD_VAR 0 1
57877: PPUSH
57878: CALL_OW 437
57882: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57883: LD_VAR 0 7
57887: NOT
57888: PUSH
57889: LD_VAR 0 1
57893: PPUSH
57894: LD_VAR 0 2
57898: PPUSH
57899: CALL_OW 308
57903: NOT
57904: AND
57905: IFFALSE 57909
// exit ;
57907: GO 58027
// if IsInArea ( unit , area ) then
57909: LD_VAR 0 1
57913: PPUSH
57914: LD_VAR 0 2
57918: PPUSH
57919: CALL_OW 308
57923: IFFALSE 57941
// begin ComMoveToArea ( unit , goAway ) ;
57925: LD_VAR 0 1
57929: PPUSH
57930: LD_VAR 0 3
57934: PPUSH
57935: CALL_OW 113
// exit ;
57939: GO 58027
// end ; if task [ 1 ] [ 1 ] <> M then
57941: LD_VAR 0 7
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: PUSH
57954: LD_STRING M
57956: NONEQUAL
57957: IFFALSE 57961
// exit ;
57959: GO 58027
// x := task [ 1 ] [ 2 ] ;
57961: LD_ADDR_VAR 0 5
57965: PUSH
57966: LD_VAR 0 7
57970: PUSH
57971: LD_INT 1
57973: ARRAY
57974: PUSH
57975: LD_INT 2
57977: ARRAY
57978: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57979: LD_ADDR_VAR 0 6
57983: PUSH
57984: LD_VAR 0 7
57988: PUSH
57989: LD_INT 1
57991: ARRAY
57992: PUSH
57993: LD_INT 3
57995: ARRAY
57996: ST_TO_ADDR
// if InArea ( x , y , area ) then
57997: LD_VAR 0 5
58001: PPUSH
58002: LD_VAR 0 6
58006: PPUSH
58007: LD_VAR 0 2
58011: PPUSH
58012: CALL_OW 309
58016: IFFALSE 58027
// ComStop ( unit ) ;
58018: LD_VAR 0 1
58022: PPUSH
58023: CALL_OW 141
// end ;
58027: LD_VAR 0 4
58031: RET
// export function Abs ( value ) ; begin
58032: LD_INT 0
58034: PPUSH
// result := value ;
58035: LD_ADDR_VAR 0 2
58039: PUSH
58040: LD_VAR 0 1
58044: ST_TO_ADDR
// if value < 0 then
58045: LD_VAR 0 1
58049: PUSH
58050: LD_INT 0
58052: LESS
58053: IFFALSE 58070
// result := value * - 1 ;
58055: LD_ADDR_VAR 0 2
58059: PUSH
58060: LD_VAR 0 1
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: MUL
58069: ST_TO_ADDR
// end ;
58070: LD_VAR 0 2
58074: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58075: LD_INT 0
58077: PPUSH
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
// if not unit or not building then
58085: LD_VAR 0 1
58089: NOT
58090: PUSH
58091: LD_VAR 0 2
58095: NOT
58096: OR
58097: IFFALSE 58101
// exit ;
58099: GO 58327
// x := GetX ( building ) ;
58101: LD_ADDR_VAR 0 4
58105: PUSH
58106: LD_VAR 0 2
58110: PPUSH
58111: CALL_OW 250
58115: ST_TO_ADDR
// y := GetY ( building ) ;
58116: LD_ADDR_VAR 0 6
58120: PUSH
58121: LD_VAR 0 2
58125: PPUSH
58126: CALL_OW 251
58130: ST_TO_ADDR
// d := GetDir ( building ) ;
58131: LD_ADDR_VAR 0 8
58135: PUSH
58136: LD_VAR 0 2
58140: PPUSH
58141: CALL_OW 254
58145: ST_TO_ADDR
// r := 4 ;
58146: LD_ADDR_VAR 0 9
58150: PUSH
58151: LD_INT 4
58153: ST_TO_ADDR
// for i := 1 to 5 do
58154: LD_ADDR_VAR 0 10
58158: PUSH
58159: DOUBLE
58160: LD_INT 1
58162: DEC
58163: ST_TO_ADDR
58164: LD_INT 5
58166: PUSH
58167: FOR_TO
58168: IFFALSE 58325
// begin _x := ShiftX ( x , d , r + i ) ;
58170: LD_ADDR_VAR 0 5
58174: PUSH
58175: LD_VAR 0 4
58179: PPUSH
58180: LD_VAR 0 8
58184: PPUSH
58185: LD_VAR 0 9
58189: PUSH
58190: LD_VAR 0 10
58194: PLUS
58195: PPUSH
58196: CALL_OW 272
58200: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58201: LD_ADDR_VAR 0 7
58205: PUSH
58206: LD_VAR 0 6
58210: PPUSH
58211: LD_VAR 0 8
58215: PPUSH
58216: LD_VAR 0 9
58220: PUSH
58221: LD_VAR 0 10
58225: PLUS
58226: PPUSH
58227: CALL_OW 273
58231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58232: LD_VAR 0 5
58236: PPUSH
58237: LD_VAR 0 7
58241: PPUSH
58242: CALL_OW 488
58246: PUSH
58247: LD_VAR 0 5
58251: PPUSH
58252: LD_VAR 0 7
58256: PPUSH
58257: CALL_OW 428
58261: PPUSH
58262: CALL_OW 247
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: IN
58277: NOT
58278: AND
58279: IFFALSE 58323
// begin ComMoveXY ( unit , _x , _y ) ;
58281: LD_VAR 0 1
58285: PPUSH
58286: LD_VAR 0 5
58290: PPUSH
58291: LD_VAR 0 7
58295: PPUSH
58296: CALL_OW 111
// result := [ _x , _y ] ;
58300: LD_ADDR_VAR 0 3
58304: PUSH
58305: LD_VAR 0 5
58309: PUSH
58310: LD_VAR 0 7
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: ST_TO_ADDR
// exit ;
58319: POP
58320: POP
58321: GO 58327
// end ; end ;
58323: GO 58167
58325: POP
58326: POP
// end ;
58327: LD_VAR 0 3
58331: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
58336: PPUSH
// result := 0 ;
58337: LD_ADDR_VAR 0 3
58341: PUSH
58342: LD_INT 0
58344: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58345: LD_VAR 0 1
58349: PUSH
58350: LD_INT 0
58352: LESS
58353: PUSH
58354: LD_VAR 0 1
58358: PUSH
58359: LD_INT 8
58361: GREATER
58362: OR
58363: PUSH
58364: LD_VAR 0 2
58368: PUSH
58369: LD_INT 0
58371: LESS
58372: OR
58373: PUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_INT 8
58381: GREATER
58382: OR
58383: IFFALSE 58387
// exit ;
58385: GO 58462
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58387: LD_ADDR_VAR 0 4
58391: PUSH
58392: LD_INT 22
58394: PUSH
58395: LD_VAR 0 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PPUSH
58404: CALL_OW 69
58408: PUSH
58409: FOR_IN
58410: IFFALSE 58460
// begin un := UnitShoot ( i ) ;
58412: LD_ADDR_VAR 0 5
58416: PUSH
58417: LD_VAR 0 4
58421: PPUSH
58422: CALL_OW 504
58426: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58427: LD_VAR 0 5
58431: PPUSH
58432: CALL_OW 255
58436: PUSH
58437: LD_VAR 0 1
58441: EQUAL
58442: IFFALSE 58458
// begin result := un ;
58444: LD_ADDR_VAR 0 3
58448: PUSH
58449: LD_VAR 0 5
58453: ST_TO_ADDR
// exit ;
58454: POP
58455: POP
58456: GO 58462
// end ; end ;
58458: GO 58409
58460: POP
58461: POP
// end ;
58462: LD_VAR 0 3
58466: RET
// export function GetCargoBay ( units ) ; begin
58467: LD_INT 0
58469: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58470: LD_ADDR_VAR 0 2
58474: PUSH
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 34
58485: PUSH
58486: LD_INT 12
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 34
58495: PUSH
58496: LD_INT 51
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 34
58505: PUSH
58506: LD_INT 32
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 34
58515: PUSH
58516: LD_EXP 75
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: PPUSH
58532: CALL_OW 72
58536: ST_TO_ADDR
// end ; end_of_file
58537: LD_VAR 0 2
58541: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
58542: LD_INT 0
58544: PPUSH
// ar_miner := 81 ;
58545: LD_ADDR_EXP 81
58549: PUSH
58550: LD_INT 81
58552: ST_TO_ADDR
// ar_crane := 88 ;
58553: LD_ADDR_EXP 80
58557: PUSH
58558: LD_INT 88
58560: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
58561: LD_ADDR_EXP 75
58565: PUSH
58566: LD_INT 89
58568: ST_TO_ADDR
// us_hack := 99 ;
58569: LD_ADDR_EXP 76
58573: PUSH
58574: LD_INT 99
58576: ST_TO_ADDR
// us_artillery := 97 ;
58577: LD_ADDR_EXP 77
58581: PUSH
58582: LD_INT 97
58584: ST_TO_ADDR
// ar_bio_bomb := 91 ;
58585: LD_ADDR_EXP 78
58589: PUSH
58590: LD_INT 91
58592: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
58593: LD_ADDR_EXP 79
58597: PUSH
58598: LD_INT 92
58600: ST_TO_ADDR
// ru_radar := 98 ;
58601: LD_ADDR_EXP 74
58605: PUSH
58606: LD_INT 98
58608: ST_TO_ADDR
// tech_Artillery := 80 ;
58609: LD_ADDR_EXP 82
58613: PUSH
58614: LD_INT 80
58616: ST_TO_ADDR
// tech_RadMat := 81 ;
58617: LD_ADDR_EXP 83
58621: PUSH
58622: LD_INT 81
58624: ST_TO_ADDR
// tech_BasicTools := 82 ;
58625: LD_ADDR_EXP 84
58629: PUSH
58630: LD_INT 82
58632: ST_TO_ADDR
// tech_Cargo := 83 ;
58633: LD_ADDR_EXP 85
58637: PUSH
58638: LD_INT 83
58640: ST_TO_ADDR
// tech_Track := 84 ;
58641: LD_ADDR_EXP 86
58645: PUSH
58646: LD_INT 84
58648: ST_TO_ADDR
// tech_Crane := 85 ;
58649: LD_ADDR_EXP 87
58653: PUSH
58654: LD_INT 85
58656: ST_TO_ADDR
// tech_Bulldozer := 86 ;
58657: LD_ADDR_EXP 88
58661: PUSH
58662: LD_INT 86
58664: ST_TO_ADDR
// tech_Hovercraft := 87 ;
58665: LD_ADDR_EXP 89
58669: PUSH
58670: LD_INT 87
58672: ST_TO_ADDR
// class_mastodont := 31 ;
58673: LD_ADDR_EXP 90
58677: PUSH
58678: LD_INT 31
58680: ST_TO_ADDR
// class_horse := 21 ;
58681: LD_ADDR_EXP 91
58685: PUSH
58686: LD_INT 21
58688: ST_TO_ADDR
// end ;
58689: LD_VAR 0 1
58693: RET
// every 1 do
58694: GO 58696
58696: DISABLE
// InitGlobalVariables ; end_of_file
58697: CALL 58542 0 0
58701: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
58702: LD_VAR 0 1
58706: PUSH
58707: LD_INT 200
58709: DOUBLE
58710: GREATEREQUAL
58711: IFFALSE 58719
58713: LD_INT 299
58715: DOUBLE
58716: LESSEQUAL
58717: IFTRUE 58721
58719: GO 58753
58721: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
58722: LD_VAR 0 1
58726: PPUSH
58727: LD_VAR 0 2
58731: PPUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: LD_VAR 0 4
58741: PPUSH
58742: LD_VAR 0 5
58746: PPUSH
58747: CALL 58997 0 5
58751: GO 58830
58753: LD_INT 300
58755: DOUBLE
58756: GREATEREQUAL
58757: IFFALSE 58765
58759: LD_INT 399
58761: DOUBLE
58762: LESSEQUAL
58763: IFTRUE 58767
58765: GO 58829
58767: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
58768: LD_VAR 0 1
58772: PPUSH
58773: LD_VAR 0 2
58777: PPUSH
58778: LD_VAR 0 3
58782: PPUSH
58783: LD_VAR 0 4
58787: PPUSH
58788: LD_VAR 0 5
58792: PPUSH
58793: LD_VAR 0 6
58797: PPUSH
58798: LD_VAR 0 7
58802: PPUSH
58803: LD_VAR 0 8
58807: PPUSH
58808: LD_VAR 0 9
58812: PPUSH
58813: LD_VAR 0 10
58817: PPUSH
58818: LD_VAR 0 11
58822: PPUSH
58823: CALL 18906 0 11
58827: GO 58830
58829: POP
// end ;
58830: PPOPN 11
58832: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
58833: LD_VAR 0 1
58837: PPUSH
58838: LD_VAR 0 2
58842: PPUSH
58843: LD_VAR 0 3
58847: PPUSH
58848: LD_VAR 0 4
58852: PPUSH
58853: LD_VAR 0 5
58857: PPUSH
58858: CALL 58979 0 5
// end ; end_of_file
58862: PPOPN 5
58864: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58865: LD_INT 0
58867: PPUSH
58868: PPUSH
58869: PPUSH
58870: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58871: LD_VAR 0 1
58875: PPUSH
58876: CALL_OW 264
58880: PUSH
58881: LD_EXP 78
58885: EQUAL
58886: IFFALSE 58958
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58888: LD_INT 68
58890: PPUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: CALL_OW 255
58900: PPUSH
58901: CALL_OW 321
58905: PUSH
58906: LD_INT 2
58908: EQUAL
58909: IFFALSE 58921
// eff := 70 else
58911: LD_ADDR_VAR 0 4
58915: PUSH
58916: LD_INT 70
58918: ST_TO_ADDR
58919: GO 58929
// eff := 30 ;
58921: LD_ADDR_VAR 0 4
58925: PUSH
58926: LD_INT 30
58928: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58929: LD_VAR 0 1
58933: PPUSH
58934: CALL_OW 250
58938: PPUSH
58939: LD_VAR 0 1
58943: PPUSH
58944: CALL_OW 251
58948: PPUSH
58949: LD_VAR 0 4
58953: PPUSH
58954: CALL_OW 495
// end ; end ;
58958: LD_VAR 0 2
58962: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58963: LD_INT 0
58965: PPUSH
// end ;
58966: LD_VAR 0 4
58970: RET
// export function SOS_Command ( cmd ) ; begin
58971: LD_INT 0
58973: PPUSH
// end ;
58974: LD_VAR 0 2
58978: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58979: LD_INT 0
58981: PPUSH
// if cmd = 121 then
58982: LD_VAR 0 1
58986: PUSH
58987: LD_INT 121
58989: EQUAL
58990: IFFALSE 58992
// end ;
58992: LD_VAR 0 6
58996: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58997: LD_INT 0
58999: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59000: LD_VAR 0 1
59004: PUSH
59005: LD_INT 250
59007: EQUAL
59008: PUSH
59009: LD_VAR 0 2
59013: PPUSH
59014: CALL_OW 264
59018: PUSH
59019: LD_EXP 81
59023: EQUAL
59024: AND
59025: IFFALSE 59046
// MinerPlaceMine ( unit , x , y ) ;
59027: LD_VAR 0 2
59031: PPUSH
59032: LD_VAR 0 4
59036: PPUSH
59037: LD_VAR 0 5
59041: PPUSH
59042: CALL 61395 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59046: LD_VAR 0 1
59050: PUSH
59051: LD_INT 251
59053: EQUAL
59054: PUSH
59055: LD_VAR 0 2
59059: PPUSH
59060: CALL_OW 264
59064: PUSH
59065: LD_EXP 81
59069: EQUAL
59070: AND
59071: IFFALSE 59092
// MinerDetonateMine ( unit , x , y ) ;
59073: LD_VAR 0 2
59077: PPUSH
59078: LD_VAR 0 4
59082: PPUSH
59083: LD_VAR 0 5
59087: PPUSH
59088: CALL 61672 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59092: LD_VAR 0 1
59096: PUSH
59097: LD_INT 252
59099: EQUAL
59100: PUSH
59101: LD_VAR 0 2
59105: PPUSH
59106: CALL_OW 264
59110: PUSH
59111: LD_EXP 81
59115: EQUAL
59116: AND
59117: IFFALSE 59138
// MinerCreateMinefield ( unit , x , y ) ;
59119: LD_VAR 0 2
59123: PPUSH
59124: LD_VAR 0 4
59128: PPUSH
59129: LD_VAR 0 5
59133: PPUSH
59134: CALL 62089 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59138: LD_VAR 0 1
59142: PUSH
59143: LD_INT 253
59145: EQUAL
59146: PUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: CALL_OW 257
59156: PUSH
59157: LD_INT 5
59159: EQUAL
59160: AND
59161: IFFALSE 59182
// ComBinocular ( unit , x , y ) ;
59163: LD_VAR 0 2
59167: PPUSH
59168: LD_VAR 0 4
59172: PPUSH
59173: LD_VAR 0 5
59177: PPUSH
59178: CALL 62460 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59182: LD_VAR 0 1
59186: PUSH
59187: LD_INT 254
59189: EQUAL
59190: PUSH
59191: LD_VAR 0 2
59195: PPUSH
59196: CALL_OW 264
59200: PUSH
59201: LD_EXP 76
59205: EQUAL
59206: AND
59207: PUSH
59208: LD_VAR 0 3
59212: PPUSH
59213: CALL_OW 263
59217: PUSH
59218: LD_INT 3
59220: EQUAL
59221: AND
59222: IFFALSE 59238
// HackDestroyVehicle ( unit , selectedUnit ) ;
59224: LD_VAR 0 2
59228: PPUSH
59229: LD_VAR 0 3
59233: PPUSH
59234: CALL 60755 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59238: LD_VAR 0 1
59242: PUSH
59243: LD_INT 255
59245: EQUAL
59246: PUSH
59247: LD_VAR 0 2
59251: PPUSH
59252: CALL_OW 264
59256: PUSH
59257: LD_INT 14
59259: PUSH
59260: LD_INT 53
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: IN
59267: AND
59268: PUSH
59269: LD_VAR 0 4
59273: PPUSH
59274: LD_VAR 0 5
59278: PPUSH
59279: CALL_OW 488
59283: AND
59284: IFFALSE 59308
// CutTreeXYR ( unit , x , y , 12 ) ;
59286: LD_VAR 0 2
59290: PPUSH
59291: LD_VAR 0 4
59295: PPUSH
59296: LD_VAR 0 5
59300: PPUSH
59301: LD_INT 12
59303: PPUSH
59304: CALL 59321 0 4
// end ;
59308: LD_VAR 0 6
59312: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
59313: LD_INT 0
59315: PPUSH
// end ;
59316: LD_VAR 0 4
59320: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
59325: PPUSH
59326: PPUSH
59327: PPUSH
59328: PPUSH
59329: PPUSH
59330: PPUSH
59331: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59332: LD_VAR 0 1
59336: NOT
59337: PUSH
59338: LD_VAR 0 2
59342: PPUSH
59343: LD_VAR 0 3
59347: PPUSH
59348: CALL_OW 488
59352: NOT
59353: OR
59354: PUSH
59355: LD_VAR 0 4
59359: NOT
59360: OR
59361: IFFALSE 59365
// exit ;
59363: GO 59705
// list := [ ] ;
59365: LD_ADDR_VAR 0 13
59369: PUSH
59370: EMPTY
59371: ST_TO_ADDR
// if x - r < 0 then
59372: LD_VAR 0 2
59376: PUSH
59377: LD_VAR 0 4
59381: MINUS
59382: PUSH
59383: LD_INT 0
59385: LESS
59386: IFFALSE 59398
// min_x := 0 else
59388: LD_ADDR_VAR 0 7
59392: PUSH
59393: LD_INT 0
59395: ST_TO_ADDR
59396: GO 59414
// min_x := x - r ;
59398: LD_ADDR_VAR 0 7
59402: PUSH
59403: LD_VAR 0 2
59407: PUSH
59408: LD_VAR 0 4
59412: MINUS
59413: ST_TO_ADDR
// if y - r < 0 then
59414: LD_VAR 0 3
59418: PUSH
59419: LD_VAR 0 4
59423: MINUS
59424: PUSH
59425: LD_INT 0
59427: LESS
59428: IFFALSE 59440
// min_y := 0 else
59430: LD_ADDR_VAR 0 8
59434: PUSH
59435: LD_INT 0
59437: ST_TO_ADDR
59438: GO 59456
// min_y := y - r ;
59440: LD_ADDR_VAR 0 8
59444: PUSH
59445: LD_VAR 0 3
59449: PUSH
59450: LD_VAR 0 4
59454: MINUS
59455: ST_TO_ADDR
// max_x := x + r ;
59456: LD_ADDR_VAR 0 9
59460: PUSH
59461: LD_VAR 0 2
59465: PUSH
59466: LD_VAR 0 4
59470: PLUS
59471: ST_TO_ADDR
// max_y := y + r ;
59472: LD_ADDR_VAR 0 10
59476: PUSH
59477: LD_VAR 0 3
59481: PUSH
59482: LD_VAR 0 4
59486: PLUS
59487: ST_TO_ADDR
// for _x = min_x to max_x do
59488: LD_ADDR_VAR 0 11
59492: PUSH
59493: DOUBLE
59494: LD_VAR 0 7
59498: DEC
59499: ST_TO_ADDR
59500: LD_VAR 0 9
59504: PUSH
59505: FOR_TO
59506: IFFALSE 59623
// for _y = min_y to max_y do
59508: LD_ADDR_VAR 0 12
59512: PUSH
59513: DOUBLE
59514: LD_VAR 0 8
59518: DEC
59519: ST_TO_ADDR
59520: LD_VAR 0 10
59524: PUSH
59525: FOR_TO
59526: IFFALSE 59619
// begin if not ValidHex ( _x , _y ) then
59528: LD_VAR 0 11
59532: PPUSH
59533: LD_VAR 0 12
59537: PPUSH
59538: CALL_OW 488
59542: NOT
59543: IFFALSE 59547
// continue ;
59545: GO 59525
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59547: LD_VAR 0 11
59551: PPUSH
59552: LD_VAR 0 12
59556: PPUSH
59557: CALL_OW 351
59561: PUSH
59562: LD_VAR 0 11
59566: PPUSH
59567: LD_VAR 0 12
59571: PPUSH
59572: CALL_OW 554
59576: AND
59577: IFFALSE 59617
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59579: LD_ADDR_VAR 0 13
59583: PUSH
59584: LD_VAR 0 13
59588: PPUSH
59589: LD_VAR 0 13
59593: PUSH
59594: LD_INT 1
59596: PLUS
59597: PPUSH
59598: LD_VAR 0 11
59602: PUSH
59603: LD_VAR 0 12
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PPUSH
59612: CALL_OW 2
59616: ST_TO_ADDR
// end ;
59617: GO 59525
59619: POP
59620: POP
59621: GO 59505
59623: POP
59624: POP
// if not list then
59625: LD_VAR 0 13
59629: NOT
59630: IFFALSE 59634
// exit ;
59632: GO 59705
// for i in list do
59634: LD_ADDR_VAR 0 6
59638: PUSH
59639: LD_VAR 0 13
59643: PUSH
59644: FOR_IN
59645: IFFALSE 59703
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59647: LD_VAR 0 1
59651: PPUSH
59652: LD_STRING M
59654: PUSH
59655: LD_VAR 0 6
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: PUSH
59664: LD_VAR 0 6
59668: PUSH
59669: LD_INT 2
59671: ARRAY
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: PPUSH
59697: CALL_OW 447
59701: GO 59644
59703: POP
59704: POP
// end ;
59705: LD_VAR 0 5
59709: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59710: LD_EXP 94
59714: NOT
59715: IFFALSE 59765
59717: GO 59719
59719: DISABLE
// begin initHack := true ;
59720: LD_ADDR_EXP 94
59724: PUSH
59725: LD_INT 1
59727: ST_TO_ADDR
// hackTanks := [ ] ;
59728: LD_ADDR_EXP 95
59732: PUSH
59733: EMPTY
59734: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59735: LD_ADDR_EXP 96
59739: PUSH
59740: EMPTY
59741: ST_TO_ADDR
// hackLimit := 3 ;
59742: LD_ADDR_EXP 97
59746: PUSH
59747: LD_INT 3
59749: ST_TO_ADDR
// hackDist := 12 ;
59750: LD_ADDR_EXP 98
59754: PUSH
59755: LD_INT 12
59757: ST_TO_ADDR
// hackCounter := [ ] ;
59758: LD_ADDR_EXP 99
59762: PUSH
59763: EMPTY
59764: ST_TO_ADDR
// end ;
59765: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59766: LD_EXP 94
59770: PUSH
59771: LD_INT 34
59773: PUSH
59774: LD_EXP 76
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PPUSH
59783: CALL_OW 69
59787: AND
59788: IFFALSE 60043
59790: GO 59792
59792: DISABLE
59793: LD_INT 0
59795: PPUSH
59796: PPUSH
// begin enable ;
59797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59798: LD_ADDR_VAR 0 1
59802: PUSH
59803: LD_INT 34
59805: PUSH
59806: LD_EXP 76
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PPUSH
59815: CALL_OW 69
59819: PUSH
59820: FOR_IN
59821: IFFALSE 60041
// begin if not i in hackTanks then
59823: LD_VAR 0 1
59827: PUSH
59828: LD_EXP 95
59832: IN
59833: NOT
59834: IFFALSE 59917
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59836: LD_ADDR_EXP 95
59840: PUSH
59841: LD_EXP 95
59845: PPUSH
59846: LD_EXP 95
59850: PUSH
59851: LD_INT 1
59853: PLUS
59854: PPUSH
59855: LD_VAR 0 1
59859: PPUSH
59860: CALL_OW 1
59864: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59865: LD_ADDR_EXP 96
59869: PUSH
59870: LD_EXP 96
59874: PPUSH
59875: LD_EXP 96
59879: PUSH
59880: LD_INT 1
59882: PLUS
59883: PPUSH
59884: EMPTY
59885: PPUSH
59886: CALL_OW 1
59890: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59891: LD_ADDR_EXP 99
59895: PUSH
59896: LD_EXP 99
59900: PPUSH
59901: LD_EXP 99
59905: PUSH
59906: LD_INT 1
59908: PLUS
59909: PPUSH
59910: EMPTY
59911: PPUSH
59912: CALL_OW 1
59916: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59917: LD_VAR 0 1
59921: PPUSH
59922: CALL_OW 302
59926: NOT
59927: IFFALSE 59940
// begin HackUnlinkAll ( i ) ;
59929: LD_VAR 0 1
59933: PPUSH
59934: CALL 60046 0 1
// continue ;
59938: GO 59820
// end ; HackCheckCapturedStatus ( i ) ;
59940: LD_VAR 0 1
59944: PPUSH
59945: CALL 60489 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59949: LD_ADDR_VAR 0 2
59953: PUSH
59954: LD_INT 81
59956: PUSH
59957: LD_VAR 0 1
59961: PPUSH
59962: CALL_OW 255
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 33
59973: PUSH
59974: LD_INT 3
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 91
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: LD_EXP 98
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 50
60001: PUSH
60002: EMPTY
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: PPUSH
60011: CALL_OW 69
60015: ST_TO_ADDR
// if not tmp then
60016: LD_VAR 0 2
60020: NOT
60021: IFFALSE 60025
// continue ;
60023: GO 59820
// HackLink ( i , tmp ) ;
60025: LD_VAR 0 1
60029: PPUSH
60030: LD_VAR 0 2
60034: PPUSH
60035: CALL 60182 0 2
// end ;
60039: GO 59820
60041: POP
60042: POP
// end ;
60043: PPOPN 2
60045: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60046: LD_INT 0
60048: PPUSH
60049: PPUSH
60050: PPUSH
// if not hack in hackTanks then
60051: LD_VAR 0 1
60055: PUSH
60056: LD_EXP 95
60060: IN
60061: NOT
60062: IFFALSE 60066
// exit ;
60064: GO 60177
// index := GetElementIndex ( hackTanks , hack ) ;
60066: LD_ADDR_VAR 0 4
60070: PUSH
60071: LD_EXP 95
60075: PPUSH
60076: LD_VAR 0 1
60080: PPUSH
60081: CALL 25617 0 2
60085: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60086: LD_EXP 96
60090: PUSH
60091: LD_VAR 0 4
60095: ARRAY
60096: IFFALSE 60177
// begin for i in hackTanksCaptured [ index ] do
60098: LD_ADDR_VAR 0 3
60102: PUSH
60103: LD_EXP 96
60107: PUSH
60108: LD_VAR 0 4
60112: ARRAY
60113: PUSH
60114: FOR_IN
60115: IFFALSE 60141
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60117: LD_VAR 0 3
60121: PUSH
60122: LD_INT 1
60124: ARRAY
60125: PPUSH
60126: LD_VAR 0 3
60130: PUSH
60131: LD_INT 2
60133: ARRAY
60134: PPUSH
60135: CALL_OW 235
60139: GO 60114
60141: POP
60142: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60143: LD_ADDR_EXP 96
60147: PUSH
60148: LD_EXP 96
60152: PPUSH
60153: LD_VAR 0 4
60157: PPUSH
60158: EMPTY
60159: PPUSH
60160: CALL_OW 1
60164: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60165: LD_VAR 0 1
60169: PPUSH
60170: LD_INT 0
60172: PPUSH
60173: CALL_OW 505
// end ; end ;
60177: LD_VAR 0 2
60181: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60182: LD_INT 0
60184: PPUSH
60185: PPUSH
60186: PPUSH
// if not hack in hackTanks or not vehicles then
60187: LD_VAR 0 1
60191: PUSH
60192: LD_EXP 95
60196: IN
60197: NOT
60198: PUSH
60199: LD_VAR 0 2
60203: NOT
60204: OR
60205: IFFALSE 60209
// exit ;
60207: GO 60484
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60209: LD_ADDR_VAR 0 2
60213: PUSH
60214: LD_VAR 0 1
60218: PPUSH
60219: LD_VAR 0 2
60223: PPUSH
60224: LD_INT 1
60226: PPUSH
60227: LD_INT 1
60229: PPUSH
60230: CALL 26267 0 4
60234: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60235: LD_ADDR_VAR 0 5
60239: PUSH
60240: LD_EXP 95
60244: PPUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL 25617 0 2
60254: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60255: LD_EXP 96
60259: PUSH
60260: LD_VAR 0 5
60264: ARRAY
60265: PUSH
60266: LD_EXP 97
60270: LESS
60271: IFFALSE 60460
// begin for i := 1 to vehicles do
60273: LD_ADDR_VAR 0 4
60277: PUSH
60278: DOUBLE
60279: LD_INT 1
60281: DEC
60282: ST_TO_ADDR
60283: LD_VAR 0 2
60287: PUSH
60288: FOR_TO
60289: IFFALSE 60458
// begin if hackTanksCaptured [ index ] = hackLimit then
60291: LD_EXP 96
60295: PUSH
60296: LD_VAR 0 5
60300: ARRAY
60301: PUSH
60302: LD_EXP 97
60306: EQUAL
60307: IFFALSE 60311
// break ;
60309: GO 60458
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60311: LD_ADDR_EXP 99
60315: PUSH
60316: LD_EXP 99
60320: PPUSH
60321: LD_VAR 0 5
60325: PPUSH
60326: LD_EXP 99
60330: PUSH
60331: LD_VAR 0 5
60335: ARRAY
60336: PUSH
60337: LD_INT 1
60339: PLUS
60340: PPUSH
60341: CALL_OW 1
60345: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60346: LD_ADDR_EXP 96
60350: PUSH
60351: LD_EXP 96
60355: PPUSH
60356: LD_VAR 0 5
60360: PUSH
60361: LD_EXP 96
60365: PUSH
60366: LD_VAR 0 5
60370: ARRAY
60371: PUSH
60372: LD_INT 1
60374: PLUS
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PPUSH
60380: LD_VAR 0 2
60384: PUSH
60385: LD_VAR 0 4
60389: ARRAY
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_VAR 0 4
60400: ARRAY
60401: PPUSH
60402: CALL_OW 255
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PPUSH
60411: CALL 25832 0 3
60415: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60416: LD_VAR 0 2
60420: PUSH
60421: LD_VAR 0 4
60425: ARRAY
60426: PPUSH
60427: LD_VAR 0 1
60431: PPUSH
60432: CALL_OW 255
60436: PPUSH
60437: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60441: LD_VAR 0 2
60445: PUSH
60446: LD_VAR 0 4
60450: ARRAY
60451: PPUSH
60452: CALL_OW 141
// end ;
60456: GO 60288
60458: POP
60459: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60460: LD_VAR 0 1
60464: PPUSH
60465: LD_EXP 96
60469: PUSH
60470: LD_VAR 0 5
60474: ARRAY
60475: PUSH
60476: LD_INT 0
60478: PLUS
60479: PPUSH
60480: CALL_OW 505
// end ;
60484: LD_VAR 0 3
60488: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60489: LD_INT 0
60491: PPUSH
60492: PPUSH
60493: PPUSH
60494: PPUSH
// if not hack in hackTanks then
60495: LD_VAR 0 1
60499: PUSH
60500: LD_EXP 95
60504: IN
60505: NOT
60506: IFFALSE 60510
// exit ;
60508: GO 60750
// index := GetElementIndex ( hackTanks , hack ) ;
60510: LD_ADDR_VAR 0 4
60514: PUSH
60515: LD_EXP 95
60519: PPUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL 25617 0 2
60529: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60530: LD_ADDR_VAR 0 3
60534: PUSH
60535: DOUBLE
60536: LD_EXP 96
60540: PUSH
60541: LD_VAR 0 4
60545: ARRAY
60546: INC
60547: ST_TO_ADDR
60548: LD_INT 1
60550: PUSH
60551: FOR_DOWNTO
60552: IFFALSE 60724
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60554: LD_ADDR_VAR 0 5
60558: PUSH
60559: LD_EXP 96
60563: PUSH
60564: LD_VAR 0 4
60568: ARRAY
60569: PUSH
60570: LD_VAR 0 3
60574: ARRAY
60575: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60576: LD_VAR 0 5
60580: PUSH
60581: LD_INT 1
60583: ARRAY
60584: PPUSH
60585: CALL_OW 302
60589: NOT
60590: PUSH
60591: LD_VAR 0 5
60595: PUSH
60596: LD_INT 1
60598: ARRAY
60599: PPUSH
60600: CALL_OW 255
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: CALL_OW 255
60614: NONEQUAL
60615: OR
60616: IFFALSE 60722
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60618: LD_VAR 0 5
60622: PUSH
60623: LD_INT 1
60625: ARRAY
60626: PPUSH
60627: CALL_OW 305
60631: PUSH
60632: LD_VAR 0 5
60636: PUSH
60637: LD_INT 1
60639: ARRAY
60640: PPUSH
60641: CALL_OW 255
60645: PUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: CALL_OW 255
60655: EQUAL
60656: AND
60657: IFFALSE 60681
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60659: LD_VAR 0 5
60663: PUSH
60664: LD_INT 1
60666: ARRAY
60667: PPUSH
60668: LD_VAR 0 5
60672: PUSH
60673: LD_INT 2
60675: ARRAY
60676: PPUSH
60677: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60681: LD_ADDR_EXP 96
60685: PUSH
60686: LD_EXP 96
60690: PPUSH
60691: LD_VAR 0 4
60695: PPUSH
60696: LD_EXP 96
60700: PUSH
60701: LD_VAR 0 4
60705: ARRAY
60706: PPUSH
60707: LD_VAR 0 3
60711: PPUSH
60712: CALL_OW 3
60716: PPUSH
60717: CALL_OW 1
60721: ST_TO_ADDR
// end ; end ;
60722: GO 60551
60724: POP
60725: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_EXP 96
60735: PUSH
60736: LD_VAR 0 4
60740: ARRAY
60741: PUSH
60742: LD_INT 0
60744: PLUS
60745: PPUSH
60746: CALL_OW 505
// end ;
60750: LD_VAR 0 2
60754: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60755: LD_INT 0
60757: PPUSH
60758: PPUSH
60759: PPUSH
60760: PPUSH
// if not hack in hackTanks then
60761: LD_VAR 0 1
60765: PUSH
60766: LD_EXP 95
60770: IN
60771: NOT
60772: IFFALSE 60776
// exit ;
60774: GO 60861
// index := GetElementIndex ( hackTanks , hack ) ;
60776: LD_ADDR_VAR 0 5
60780: PUSH
60781: LD_EXP 95
60785: PPUSH
60786: LD_VAR 0 1
60790: PPUSH
60791: CALL 25617 0 2
60795: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60796: LD_ADDR_VAR 0 4
60800: PUSH
60801: DOUBLE
60802: LD_INT 1
60804: DEC
60805: ST_TO_ADDR
60806: LD_EXP 96
60810: PUSH
60811: LD_VAR 0 5
60815: ARRAY
60816: PUSH
60817: FOR_TO
60818: IFFALSE 60859
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60820: LD_EXP 96
60824: PUSH
60825: LD_VAR 0 5
60829: ARRAY
60830: PUSH
60831: LD_VAR 0 4
60835: ARRAY
60836: PUSH
60837: LD_INT 1
60839: ARRAY
60840: PUSH
60841: LD_VAR 0 2
60845: EQUAL
60846: IFFALSE 60857
// KillUnit ( vehicle ) ;
60848: LD_VAR 0 2
60852: PPUSH
60853: CALL_OW 66
60857: GO 60817
60859: POP
60860: POP
// end ;
60861: LD_VAR 0 3
60865: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60866: LD_EXP 100
60870: NOT
60871: IFFALSE 60906
60873: GO 60875
60875: DISABLE
// begin initMiner := true ;
60876: LD_ADDR_EXP 100
60880: PUSH
60881: LD_INT 1
60883: ST_TO_ADDR
// minersList := [ ] ;
60884: LD_ADDR_EXP 101
60888: PUSH
60889: EMPTY
60890: ST_TO_ADDR
// minerMinesList := [ ] ;
60891: LD_ADDR_EXP 102
60895: PUSH
60896: EMPTY
60897: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60898: LD_ADDR_EXP 103
60902: PUSH
60903: LD_INT 5
60905: ST_TO_ADDR
// end ;
60906: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60907: LD_EXP 100
60911: PUSH
60912: LD_INT 34
60914: PUSH
60915: LD_EXP 81
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PPUSH
60924: CALL_OW 69
60928: AND
60929: IFFALSE 61392
60931: GO 60933
60933: DISABLE
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
// begin enable ;
60940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60941: LD_ADDR_VAR 0 1
60945: PUSH
60946: LD_INT 34
60948: PUSH
60949: LD_EXP 81
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PPUSH
60958: CALL_OW 69
60962: PUSH
60963: FOR_IN
60964: IFFALSE 61036
// begin if not i in minersList then
60966: LD_VAR 0 1
60970: PUSH
60971: LD_EXP 101
60975: IN
60976: NOT
60977: IFFALSE 61034
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60979: LD_ADDR_EXP 101
60983: PUSH
60984: LD_EXP 101
60988: PPUSH
60989: LD_EXP 101
60993: PUSH
60994: LD_INT 1
60996: PLUS
60997: PPUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: CALL_OW 1
61007: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61008: LD_ADDR_EXP 102
61012: PUSH
61013: LD_EXP 102
61017: PPUSH
61018: LD_EXP 102
61022: PUSH
61023: LD_INT 1
61025: PLUS
61026: PPUSH
61027: EMPTY
61028: PPUSH
61029: CALL_OW 1
61033: ST_TO_ADDR
// end end ;
61034: GO 60963
61036: POP
61037: POP
// for i := minerMinesList downto 1 do
61038: LD_ADDR_VAR 0 1
61042: PUSH
61043: DOUBLE
61044: LD_EXP 102
61048: INC
61049: ST_TO_ADDR
61050: LD_INT 1
61052: PUSH
61053: FOR_DOWNTO
61054: IFFALSE 61390
// begin if IsLive ( minersList [ i ] ) then
61056: LD_EXP 101
61060: PUSH
61061: LD_VAR 0 1
61065: ARRAY
61066: PPUSH
61067: CALL_OW 300
61071: IFFALSE 61099
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61073: LD_EXP 101
61077: PUSH
61078: LD_VAR 0 1
61082: ARRAY
61083: PPUSH
61084: LD_EXP 102
61088: PUSH
61089: LD_VAR 0 1
61093: ARRAY
61094: PPUSH
61095: CALL_OW 505
// if not minerMinesList [ i ] then
61099: LD_EXP 102
61103: PUSH
61104: LD_VAR 0 1
61108: ARRAY
61109: NOT
61110: IFFALSE 61114
// continue ;
61112: GO 61053
// for j := minerMinesList [ i ] downto 1 do
61114: LD_ADDR_VAR 0 2
61118: PUSH
61119: DOUBLE
61120: LD_EXP 102
61124: PUSH
61125: LD_VAR 0 1
61129: ARRAY
61130: INC
61131: ST_TO_ADDR
61132: LD_INT 1
61134: PUSH
61135: FOR_DOWNTO
61136: IFFALSE 61386
// begin side := GetSide ( minersList [ i ] ) ;
61138: LD_ADDR_VAR 0 3
61142: PUSH
61143: LD_EXP 101
61147: PUSH
61148: LD_VAR 0 1
61152: ARRAY
61153: PPUSH
61154: CALL_OW 255
61158: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61159: LD_ADDR_VAR 0 4
61163: PUSH
61164: LD_EXP 102
61168: PUSH
61169: LD_VAR 0 1
61173: ARRAY
61174: PUSH
61175: LD_VAR 0 2
61179: ARRAY
61180: PUSH
61181: LD_INT 1
61183: ARRAY
61184: PPUSH
61185: LD_EXP 102
61189: PUSH
61190: LD_VAR 0 1
61194: ARRAY
61195: PUSH
61196: LD_VAR 0 2
61200: ARRAY
61201: PUSH
61202: LD_INT 2
61204: ARRAY
61205: PPUSH
61206: CALL_OW 428
61210: ST_TO_ADDR
// if not tmp then
61211: LD_VAR 0 4
61215: NOT
61216: IFFALSE 61220
// continue ;
61218: GO 61135
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61220: LD_VAR 0 4
61224: PUSH
61225: LD_INT 81
61227: PUSH
61228: LD_VAR 0 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PPUSH
61237: CALL_OW 69
61241: IN
61242: PUSH
61243: LD_EXP 102
61247: PUSH
61248: LD_VAR 0 1
61252: ARRAY
61253: PUSH
61254: LD_VAR 0 2
61258: ARRAY
61259: PUSH
61260: LD_INT 1
61262: ARRAY
61263: PPUSH
61264: LD_EXP 102
61268: PUSH
61269: LD_VAR 0 1
61273: ARRAY
61274: PUSH
61275: LD_VAR 0 2
61279: ARRAY
61280: PUSH
61281: LD_INT 2
61283: ARRAY
61284: PPUSH
61285: CALL_OW 458
61289: AND
61290: IFFALSE 61384
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61292: LD_EXP 102
61296: PUSH
61297: LD_VAR 0 1
61301: ARRAY
61302: PUSH
61303: LD_VAR 0 2
61307: ARRAY
61308: PUSH
61309: LD_INT 1
61311: ARRAY
61312: PPUSH
61313: LD_EXP 102
61317: PUSH
61318: LD_VAR 0 1
61322: ARRAY
61323: PUSH
61324: LD_VAR 0 2
61328: ARRAY
61329: PUSH
61330: LD_INT 2
61332: ARRAY
61333: PPUSH
61334: LD_VAR 0 3
61338: PPUSH
61339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61343: LD_ADDR_EXP 102
61347: PUSH
61348: LD_EXP 102
61352: PPUSH
61353: LD_VAR 0 1
61357: PPUSH
61358: LD_EXP 102
61362: PUSH
61363: LD_VAR 0 1
61367: ARRAY
61368: PPUSH
61369: LD_VAR 0 2
61373: PPUSH
61374: CALL_OW 3
61378: PPUSH
61379: CALL_OW 1
61383: ST_TO_ADDR
// end ; end ;
61384: GO 61135
61386: POP
61387: POP
// end ;
61388: GO 61053
61390: POP
61391: POP
// end ;
61392: PPOPN 4
61394: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61395: LD_INT 0
61397: PPUSH
61398: PPUSH
// result := false ;
61399: LD_ADDR_VAR 0 4
61403: PUSH
61404: LD_INT 0
61406: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61407: LD_VAR 0 1
61411: PPUSH
61412: CALL_OW 264
61416: PUSH
61417: LD_EXP 81
61421: EQUAL
61422: NOT
61423: IFFALSE 61427
// exit ;
61425: GO 61667
// index := GetElementIndex ( minersList , unit ) ;
61427: LD_ADDR_VAR 0 5
61431: PUSH
61432: LD_EXP 101
61436: PPUSH
61437: LD_VAR 0 1
61441: PPUSH
61442: CALL 25617 0 2
61446: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61447: LD_EXP 102
61451: PUSH
61452: LD_VAR 0 5
61456: ARRAY
61457: PUSH
61458: LD_EXP 103
61462: GREATEREQUAL
61463: IFFALSE 61467
// exit ;
61465: GO 61667
// ComMoveXY ( unit , x , y ) ;
61467: LD_VAR 0 1
61471: PPUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61486: LD_INT 35
61488: PPUSH
61489: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: LD_VAR 0 3
61507: PPUSH
61508: CALL 56014 0 3
61512: NOT
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 314
61523: AND
61524: IFFALSE 61528
// exit ;
61526: GO 61667
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61528: LD_VAR 0 2
61532: PPUSH
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL_OW 428
61542: PUSH
61543: LD_VAR 0 1
61547: EQUAL
61548: PUSH
61549: LD_VAR 0 1
61553: PPUSH
61554: CALL_OW 314
61558: NOT
61559: AND
61560: IFFALSE 61486
// PlaySoundXY ( x , y , PlantMine ) ;
61562: LD_VAR 0 2
61566: PPUSH
61567: LD_VAR 0 3
61571: PPUSH
61572: LD_STRING PlantMine
61574: PPUSH
61575: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61579: LD_VAR 0 2
61583: PPUSH
61584: LD_VAR 0 3
61588: PPUSH
61589: LD_VAR 0 1
61593: PPUSH
61594: CALL_OW 255
61598: PPUSH
61599: LD_INT 0
61601: PPUSH
61602: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61606: LD_ADDR_EXP 102
61610: PUSH
61611: LD_EXP 102
61615: PPUSH
61616: LD_VAR 0 5
61620: PUSH
61621: LD_EXP 102
61625: PUSH
61626: LD_VAR 0 5
61630: ARRAY
61631: PUSH
61632: LD_INT 1
61634: PLUS
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PPUSH
61640: LD_VAR 0 2
61644: PUSH
61645: LD_VAR 0 3
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PPUSH
61654: CALL 25832 0 3
61658: ST_TO_ADDR
// result := true ;
61659: LD_ADDR_VAR 0 4
61663: PUSH
61664: LD_INT 1
61666: ST_TO_ADDR
// end ;
61667: LD_VAR 0 4
61671: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61672: LD_INT 0
61674: PPUSH
61675: PPUSH
61676: PPUSH
// if not unit in minersList then
61677: LD_VAR 0 1
61681: PUSH
61682: LD_EXP 101
61686: IN
61687: NOT
61688: IFFALSE 61692
// exit ;
61690: GO 62084
// index := GetElementIndex ( minersList , unit ) ;
61692: LD_ADDR_VAR 0 6
61696: PUSH
61697: LD_EXP 101
61701: PPUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL 25617 0 2
61711: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61712: LD_ADDR_VAR 0 5
61716: PUSH
61717: DOUBLE
61718: LD_EXP 102
61722: PUSH
61723: LD_VAR 0 6
61727: ARRAY
61728: INC
61729: ST_TO_ADDR
61730: LD_INT 1
61732: PUSH
61733: FOR_DOWNTO
61734: IFFALSE 61895
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61736: LD_EXP 102
61740: PUSH
61741: LD_VAR 0 6
61745: ARRAY
61746: PUSH
61747: LD_VAR 0 5
61751: ARRAY
61752: PUSH
61753: LD_INT 1
61755: ARRAY
61756: PUSH
61757: LD_VAR 0 2
61761: EQUAL
61762: PUSH
61763: LD_EXP 102
61767: PUSH
61768: LD_VAR 0 6
61772: ARRAY
61773: PUSH
61774: LD_VAR 0 5
61778: ARRAY
61779: PUSH
61780: LD_INT 2
61782: ARRAY
61783: PUSH
61784: LD_VAR 0 3
61788: EQUAL
61789: AND
61790: IFFALSE 61893
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61792: LD_EXP 102
61796: PUSH
61797: LD_VAR 0 6
61801: ARRAY
61802: PUSH
61803: LD_VAR 0 5
61807: ARRAY
61808: PUSH
61809: LD_INT 1
61811: ARRAY
61812: PPUSH
61813: LD_EXP 102
61817: PUSH
61818: LD_VAR 0 6
61822: ARRAY
61823: PUSH
61824: LD_VAR 0 5
61828: ARRAY
61829: PUSH
61830: LD_INT 2
61832: ARRAY
61833: PPUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 255
61843: PPUSH
61844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61848: LD_ADDR_EXP 102
61852: PUSH
61853: LD_EXP 102
61857: PPUSH
61858: LD_VAR 0 6
61862: PPUSH
61863: LD_EXP 102
61867: PUSH
61868: LD_VAR 0 6
61872: ARRAY
61873: PPUSH
61874: LD_VAR 0 5
61878: PPUSH
61879: CALL_OW 3
61883: PPUSH
61884: CALL_OW 1
61888: ST_TO_ADDR
// exit ;
61889: POP
61890: POP
61891: GO 62084
// end ; end ;
61893: GO 61733
61895: POP
61896: POP
// for i := minerMinesList [ index ] downto 1 do
61897: LD_ADDR_VAR 0 5
61901: PUSH
61902: DOUBLE
61903: LD_EXP 102
61907: PUSH
61908: LD_VAR 0 6
61912: ARRAY
61913: INC
61914: ST_TO_ADDR
61915: LD_INT 1
61917: PUSH
61918: FOR_DOWNTO
61919: IFFALSE 62082
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61921: LD_EXP 102
61925: PUSH
61926: LD_VAR 0 6
61930: ARRAY
61931: PUSH
61932: LD_VAR 0 5
61936: ARRAY
61937: PUSH
61938: LD_INT 1
61940: ARRAY
61941: PPUSH
61942: LD_EXP 102
61946: PUSH
61947: LD_VAR 0 6
61951: ARRAY
61952: PUSH
61953: LD_VAR 0 5
61957: ARRAY
61958: PUSH
61959: LD_INT 2
61961: ARRAY
61962: PPUSH
61963: LD_VAR 0 2
61967: PPUSH
61968: LD_VAR 0 3
61972: PPUSH
61973: CALL_OW 298
61977: PUSH
61978: LD_INT 6
61980: LESS
61981: IFFALSE 62080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61983: LD_EXP 102
61987: PUSH
61988: LD_VAR 0 6
61992: ARRAY
61993: PUSH
61994: LD_VAR 0 5
61998: ARRAY
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PPUSH
62004: LD_EXP 102
62008: PUSH
62009: LD_VAR 0 6
62013: ARRAY
62014: PUSH
62015: LD_VAR 0 5
62019: ARRAY
62020: PUSH
62021: LD_INT 2
62023: ARRAY
62024: PPUSH
62025: LD_VAR 0 1
62029: PPUSH
62030: CALL_OW 255
62034: PPUSH
62035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62039: LD_ADDR_EXP 102
62043: PUSH
62044: LD_EXP 102
62048: PPUSH
62049: LD_VAR 0 6
62053: PPUSH
62054: LD_EXP 102
62058: PUSH
62059: LD_VAR 0 6
62063: ARRAY
62064: PPUSH
62065: LD_VAR 0 5
62069: PPUSH
62070: CALL_OW 3
62074: PPUSH
62075: CALL_OW 1
62079: ST_TO_ADDR
// end ; end ;
62080: GO 61918
62082: POP
62083: POP
// end ;
62084: LD_VAR 0 4
62088: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62089: LD_INT 0
62091: PPUSH
62092: PPUSH
62093: PPUSH
62094: PPUSH
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 264
62109: PUSH
62110: LD_EXP 81
62114: EQUAL
62115: NOT
62116: PUSH
62117: LD_VAR 0 1
62121: PUSH
62122: LD_EXP 101
62126: IN
62127: NOT
62128: OR
62129: IFFALSE 62133
// exit ;
62131: GO 62455
// index := GetElementIndex ( minersList , unit ) ;
62133: LD_ADDR_VAR 0 6
62137: PUSH
62138: LD_EXP 101
62142: PPUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: CALL 25617 0 2
62152: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62153: LD_ADDR_VAR 0 8
62157: PUSH
62158: LD_EXP 103
62162: PUSH
62163: LD_EXP 102
62167: PUSH
62168: LD_VAR 0 6
62172: ARRAY
62173: MINUS
62174: ST_TO_ADDR
// if not minesFreeAmount then
62175: LD_VAR 0 8
62179: NOT
62180: IFFALSE 62184
// exit ;
62182: GO 62455
// tmp := [ ] ;
62184: LD_ADDR_VAR 0 7
62188: PUSH
62189: EMPTY
62190: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62191: LD_ADDR_VAR 0 5
62195: PUSH
62196: DOUBLE
62197: LD_INT 1
62199: DEC
62200: ST_TO_ADDR
62201: LD_VAR 0 8
62205: PUSH
62206: FOR_TO
62207: IFFALSE 62402
// begin _d := rand ( 0 , 5 ) ;
62209: LD_ADDR_VAR 0 11
62213: PUSH
62214: LD_INT 0
62216: PPUSH
62217: LD_INT 5
62219: PPUSH
62220: CALL_OW 12
62224: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62225: LD_ADDR_VAR 0 12
62229: PUSH
62230: LD_INT 2
62232: PPUSH
62233: LD_INT 6
62235: PPUSH
62236: CALL_OW 12
62240: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62241: LD_ADDR_VAR 0 9
62245: PUSH
62246: LD_VAR 0 2
62250: PPUSH
62251: LD_VAR 0 11
62255: PPUSH
62256: LD_VAR 0 12
62260: PPUSH
62261: CALL_OW 272
62265: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62266: LD_ADDR_VAR 0 10
62270: PUSH
62271: LD_VAR 0 3
62275: PPUSH
62276: LD_VAR 0 11
62280: PPUSH
62281: LD_VAR 0 12
62285: PPUSH
62286: CALL_OW 273
62290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62291: LD_VAR 0 9
62295: PPUSH
62296: LD_VAR 0 10
62300: PPUSH
62301: CALL_OW 488
62305: PUSH
62306: LD_VAR 0 9
62310: PUSH
62311: LD_VAR 0 10
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_VAR 0 7
62324: IN
62325: NOT
62326: AND
62327: PUSH
62328: LD_VAR 0 9
62332: PPUSH
62333: LD_VAR 0 10
62337: PPUSH
62338: CALL_OW 458
62342: NOT
62343: AND
62344: IFFALSE 62386
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62346: LD_ADDR_VAR 0 7
62350: PUSH
62351: LD_VAR 0 7
62355: PPUSH
62356: LD_VAR 0 7
62360: PUSH
62361: LD_INT 1
62363: PLUS
62364: PPUSH
62365: LD_VAR 0 9
62369: PUSH
62370: LD_VAR 0 10
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PPUSH
62379: CALL_OW 1
62383: ST_TO_ADDR
62384: GO 62400
// i := i - 1 ;
62386: LD_ADDR_VAR 0 5
62390: PUSH
62391: LD_VAR 0 5
62395: PUSH
62396: LD_INT 1
62398: MINUS
62399: ST_TO_ADDR
// end ;
62400: GO 62206
62402: POP
62403: POP
// for i in tmp do
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: LD_VAR 0 7
62413: PUSH
62414: FOR_IN
62415: IFFALSE 62453
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62417: LD_VAR 0 1
62421: PPUSH
62422: LD_VAR 0 5
62426: PUSH
62427: LD_INT 1
62429: ARRAY
62430: PPUSH
62431: LD_VAR 0 5
62435: PUSH
62436: LD_INT 2
62438: ARRAY
62439: PPUSH
62440: CALL 61395 0 3
62444: NOT
62445: IFFALSE 62451
// exit ;
62447: POP
62448: POP
62449: GO 62455
62451: GO 62414
62453: POP
62454: POP
// end ;
62455: LD_VAR 0 4
62459: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
62468: PPUSH
// if not GetClass ( unit ) = class_sniper then
62469: LD_VAR 0 1
62473: PPUSH
62474: CALL_OW 257
62478: PUSH
62479: LD_INT 5
62481: EQUAL
62482: NOT
62483: IFFALSE 62487
// exit ;
62485: GO 62875
// dist := 8 ;
62487: LD_ADDR_VAR 0 5
62491: PUSH
62492: LD_INT 8
62494: ST_TO_ADDR
// viewRange := 12 ;
62495: LD_ADDR_VAR 0 7
62499: PUSH
62500: LD_INT 12
62502: ST_TO_ADDR
// side := GetSide ( unit ) ;
62503: LD_ADDR_VAR 0 6
62507: PUSH
62508: LD_VAR 0 1
62512: PPUSH
62513: CALL_OW 255
62517: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62518: LD_INT 61
62520: PPUSH
62521: LD_VAR 0 6
62525: PPUSH
62526: CALL_OW 321
62530: PUSH
62531: LD_INT 2
62533: EQUAL
62534: IFFALSE 62544
// viewRange := 16 ;
62536: LD_ADDR_VAR 0 7
62540: PUSH
62541: LD_INT 16
62543: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62544: LD_VAR 0 1
62548: PPUSH
62549: LD_VAR 0 2
62553: PPUSH
62554: LD_VAR 0 3
62558: PPUSH
62559: CALL_OW 297
62563: PUSH
62564: LD_VAR 0 5
62568: GREATER
62569: IFFALSE 62648
// begin ComMoveXY ( unit , x , y ) ;
62571: LD_VAR 0 1
62575: PPUSH
62576: LD_VAR 0 2
62580: PPUSH
62581: LD_VAR 0 3
62585: PPUSH
62586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62590: LD_INT 35
62592: PPUSH
62593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62597: LD_VAR 0 1
62601: PPUSH
62602: LD_VAR 0 2
62606: PPUSH
62607: LD_VAR 0 3
62611: PPUSH
62612: CALL 56014 0 3
62616: NOT
62617: IFFALSE 62621
// exit ;
62619: GO 62875
// until GetDistUnitXY ( unit , x , y ) < dist ;
62621: LD_VAR 0 1
62625: PPUSH
62626: LD_VAR 0 2
62630: PPUSH
62631: LD_VAR 0 3
62635: PPUSH
62636: CALL_OW 297
62640: PUSH
62641: LD_VAR 0 5
62645: LESS
62646: IFFALSE 62590
// end ; ComTurnXY ( unit , x , y ) ;
62648: LD_VAR 0 1
62652: PPUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: CALL_OW 118
// wait ( 5 ) ;
62667: LD_INT 5
62669: PPUSH
62670: CALL_OW 67
// _d := GetDir ( unit ) ;
62674: LD_ADDR_VAR 0 10
62678: PUSH
62679: LD_VAR 0 1
62683: PPUSH
62684: CALL_OW 254
62688: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62689: LD_ADDR_VAR 0 8
62693: PUSH
62694: LD_VAR 0 1
62698: PPUSH
62699: CALL_OW 250
62703: PPUSH
62704: LD_VAR 0 10
62708: PPUSH
62709: LD_VAR 0 5
62713: PPUSH
62714: CALL_OW 272
62718: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62719: LD_ADDR_VAR 0 9
62723: PUSH
62724: LD_VAR 0 1
62728: PPUSH
62729: CALL_OW 251
62733: PPUSH
62734: LD_VAR 0 10
62738: PPUSH
62739: LD_VAR 0 5
62743: PPUSH
62744: CALL_OW 273
62748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62749: LD_VAR 0 8
62753: PPUSH
62754: LD_VAR 0 9
62758: PPUSH
62759: CALL_OW 488
62763: NOT
62764: IFFALSE 62768
// exit ;
62766: GO 62875
// ComAnimCustom ( unit , 1 ) ;
62768: LD_VAR 0 1
62772: PPUSH
62773: LD_INT 1
62775: PPUSH
62776: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62780: LD_VAR 0 8
62784: PPUSH
62785: LD_VAR 0 9
62789: PPUSH
62790: LD_VAR 0 6
62794: PPUSH
62795: LD_VAR 0 7
62799: PPUSH
62800: CALL_OW 330
// repeat wait ( 1 ) ;
62804: LD_INT 1
62806: PPUSH
62807: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62811: LD_VAR 0 1
62815: PPUSH
62816: CALL_OW 316
62820: PUSH
62821: LD_VAR 0 1
62825: PPUSH
62826: CALL_OW 314
62830: OR
62831: PUSH
62832: LD_VAR 0 1
62836: PPUSH
62837: CALL_OW 302
62841: NOT
62842: OR
62843: PUSH
62844: LD_VAR 0 1
62848: PPUSH
62849: CALL_OW 301
62853: OR
62854: IFFALSE 62804
// RemoveSeeing ( _x , _y , side ) ;
62856: LD_VAR 0 8
62860: PPUSH
62861: LD_VAR 0 9
62865: PPUSH
62866: LD_VAR 0 6
62870: PPUSH
62871: CALL_OW 331
// end ; end_of_file
62875: LD_VAR 0 4
62879: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62880: LD_VAR 0 1
62884: PPUSH
62885: LD_VAR 0 2
62889: PPUSH
62890: LD_VAR 0 3
62894: PPUSH
62895: LD_VAR 0 4
62899: PPUSH
62900: LD_VAR 0 5
62904: PPUSH
62905: LD_VAR 0 6
62909: PPUSH
62910: CALL 7714 0 6
// end ;
62914: PPOPN 6
62916: END
