// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin enable ;
7717: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7718: LD_STRING updateTimer(
7720: PUSH
7721: LD_OWVAR 1
7725: STR
7726: PUSH
7727: LD_STRING );
7729: STR
7730: PPUSH
7731: CALL_OW 559
// end ;
7735: END
// export function SOS_MapStart ( ) ; begin
7736: LD_INT 0
7738: PPUSH
// if streamModeActive then
7739: LD_EXP 19
7743: IFFALSE 7752
// DefineStreamItems ( true ) ;
7745: LD_INT 1
7747: PPUSH
7748: CALL 9406 0 1
// UpdateFactoryWaypoints ( ) ;
7752: CALL 22267 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7756: CALL 22524 0 0
// end ;
7760: LD_VAR 0 1
7764: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7765: LD_INT 0
7767: PPUSH
// if p2 = 100 then
7768: LD_VAR 0 2
7772: PUSH
7773: LD_INT 100
7775: EQUAL
7776: IFFALSE 8779
// begin if not StreamModeActive then
7778: LD_EXP 19
7782: NOT
7783: IFFALSE 7793
// StreamModeActive := true ;
7785: LD_ADDR_EXP 19
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// if p3 = 0 then
7793: LD_VAR 0 3
7797: PUSH
7798: LD_INT 0
7800: EQUAL
7801: IFFALSE 7807
// InitStreamMode ;
7803: CALL 8942 0 0
// if p3 = 1 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 1
7814: EQUAL
7815: IFFALSE 7825
// sRocket := true ;
7817: LD_ADDR_EXP 24
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 2 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 2
7832: EQUAL
7833: IFFALSE 7843
// sSpeed := true ;
7835: LD_ADDR_EXP 23
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 3 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 3
7850: EQUAL
7851: IFFALSE 7861
// sEngine := true ;
7853: LD_ADDR_EXP 25
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 4 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 4
7868: EQUAL
7869: IFFALSE 7879
// sSpec := true ;
7871: LD_ADDR_EXP 22
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 5 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 5
7886: EQUAL
7887: IFFALSE 7897
// sLevel := true ;
7889: LD_ADDR_EXP 26
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 6 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 6
7904: EQUAL
7905: IFFALSE 7915
// sArmoury := true ;
7907: LD_ADDR_EXP 27
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 7 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 7
7922: EQUAL
7923: IFFALSE 7933
// sRadar := true ;
7925: LD_ADDR_EXP 28
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 8 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 8
7940: EQUAL
7941: IFFALSE 7951
// sBunker := true ;
7943: LD_ADDR_EXP 29
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 9 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 9
7958: EQUAL
7959: IFFALSE 7969
// sHack := true ;
7961: LD_ADDR_EXP 30
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 10 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 10
7976: EQUAL
7977: IFFALSE 7987
// sFire := true ;
7979: LD_ADDR_EXP 31
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 11 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 11
7994: EQUAL
7995: IFFALSE 8005
// sRefresh := true ;
7997: LD_ADDR_EXP 32
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 12 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 12
8012: EQUAL
8013: IFFALSE 8023
// sExp := true ;
8015: LD_ADDR_EXP 33
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 13 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 13
8030: EQUAL
8031: IFFALSE 8041
// sDepot := true ;
8033: LD_ADDR_EXP 34
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 14 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 14
8048: EQUAL
8049: IFFALSE 8059
// sFlag := true ;
8051: LD_ADDR_EXP 35
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 15 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 15
8066: EQUAL
8067: IFFALSE 8077
// sKamikadze := true ;
8069: LD_ADDR_EXP 43
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 16 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 16
8084: EQUAL
8085: IFFALSE 8095
// sTroll := true ;
8087: LD_ADDR_EXP 44
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 17 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 17
8102: EQUAL
8103: IFFALSE 8113
// sSlow := true ;
8105: LD_ADDR_EXP 45
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 18 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 18
8120: EQUAL
8121: IFFALSE 8131
// sLack := true ;
8123: LD_ADDR_EXP 46
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 19 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 19
8138: EQUAL
8139: IFFALSE 8149
// sTank := true ;
8141: LD_ADDR_EXP 48
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 20 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 20
8156: EQUAL
8157: IFFALSE 8167
// sRemote := true ;
8159: LD_ADDR_EXP 49
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 21 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 21
8174: EQUAL
8175: IFFALSE 8185
// sPowell := true ;
8177: LD_ADDR_EXP 50
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 22 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 22
8192: EQUAL
8193: IFFALSE 8203
// sTeleport := true ;
8195: LD_ADDR_EXP 53
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 23 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 23
8210: EQUAL
8211: IFFALSE 8221
// sOilTower := true ;
8213: LD_ADDR_EXP 55
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 24 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 24
8228: EQUAL
8229: IFFALSE 8239
// sShovel := true ;
8231: LD_ADDR_EXP 56
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 25 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 25
8246: EQUAL
8247: IFFALSE 8257
// sSheik := true ;
8249: LD_ADDR_EXP 57
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 26 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 26
8264: EQUAL
8265: IFFALSE 8275
// sEarthquake := true ;
8267: LD_ADDR_EXP 59
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 27 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 27
8282: EQUAL
8283: IFFALSE 8293
// sAI := true ;
8285: LD_ADDR_EXP 60
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 28 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 28
8300: EQUAL
8301: IFFALSE 8311
// sCargo := true ;
8303: LD_ADDR_EXP 63
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 29 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 29
8318: EQUAL
8319: IFFALSE 8329
// sDLaser := true ;
8321: LD_ADDR_EXP 64
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 30 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 30
8336: EQUAL
8337: IFFALSE 8347
// sExchange := true ;
8339: LD_ADDR_EXP 65
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 31 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 31
8354: EQUAL
8355: IFFALSE 8365
// sFac := true ;
8357: LD_ADDR_EXP 66
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 32 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 32
8372: EQUAL
8373: IFFALSE 8383
// sPower := true ;
8375: LD_ADDR_EXP 67
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 33 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 33
8390: EQUAL
8391: IFFALSE 8401
// sRandom := true ;
8393: LD_ADDR_EXP 68
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 34 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 34
8408: EQUAL
8409: IFFALSE 8419
// sShield := true ;
8411: LD_ADDR_EXP 69
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 35 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 35
8426: EQUAL
8427: IFFALSE 8437
// sTime := true ;
8429: LD_ADDR_EXP 70
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 36 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 36
8444: EQUAL
8445: IFFALSE 8455
// sTools := true ;
8447: LD_ADDR_EXP 71
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 101 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 101
8462: EQUAL
8463: IFFALSE 8473
// sSold := true ;
8465: LD_ADDR_EXP 36
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 102 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 102
8480: EQUAL
8481: IFFALSE 8491
// sDiff := true ;
8483: LD_ADDR_EXP 37
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 103 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 103
8498: EQUAL
8499: IFFALSE 8509
// sFog := true ;
8501: LD_ADDR_EXP 40
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 104 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 104
8516: EQUAL
8517: IFFALSE 8527
// sReset := true ;
8519: LD_ADDR_EXP 41
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 105 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 105
8534: EQUAL
8535: IFFALSE 8545
// sSun := true ;
8537: LD_ADDR_EXP 42
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 106 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 106
8552: EQUAL
8553: IFFALSE 8563
// sTiger := true ;
8555: LD_ADDR_EXP 38
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 107 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 107
8570: EQUAL
8571: IFFALSE 8581
// sBomb := true ;
8573: LD_ADDR_EXP 39
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 108 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 108
8588: EQUAL
8589: IFFALSE 8599
// sWound := true ;
8591: LD_ADDR_EXP 47
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 109 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 109
8606: EQUAL
8607: IFFALSE 8617
// sBetray := true ;
8609: LD_ADDR_EXP 51
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 110 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 110
8624: EQUAL
8625: IFFALSE 8635
// sContamin := true ;
8627: LD_ADDR_EXP 52
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 111 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 111
8642: EQUAL
8643: IFFALSE 8653
// sOil := true ;
8645: LD_ADDR_EXP 54
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 112 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 112
8660: EQUAL
8661: IFFALSE 8671
// sStu := true ;
8663: LD_ADDR_EXP 58
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 113 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 113
8678: EQUAL
8679: IFFALSE 8689
// sBazooka := true ;
8681: LD_ADDR_EXP 61
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 114 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 114
8696: EQUAL
8697: IFFALSE 8707
// sMortar := true ;
8699: LD_ADDR_EXP 62
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 115 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 115
8714: EQUAL
8715: IFFALSE 8725
// sRanger := true ;
8717: LD_ADDR_EXP 72
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 116 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 116
8732: EQUAL
8733: IFFALSE 8743
// sComputer := true ;
8735: LD_ADDR_EXP 73
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 117 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 117
8750: EQUAL
8751: IFFALSE 8761
// s30 := true ;
8753: LD_ADDR_EXP 74
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 118 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 118
8768: EQUAL
8769: IFFALSE 8779
// s60 := true ;
8771: LD_ADDR_EXP 75
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// end ; if p2 = 101 then
8779: LD_VAR 0 2
8783: PUSH
8784: LD_INT 101
8786: EQUAL
8787: IFFALSE 8915
// begin case p3 of 1 :
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 1
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8809
8802: POP
// hHackUnlimitedResources ; 2 :
8803: CALL 21013 0 0
8807: GO 8915
8809: LD_INT 2
8811: DOUBLE
8812: EQUAL
8813: IFTRUE 8817
8815: GO 8824
8817: POP
// hHackSetLevel10 ; 3 :
8818: CALL 21146 0 0
8822: GO 8915
8824: LD_INT 3
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 8839
8832: POP
// hHackSetLevel10YourUnits ; 4 :
8833: CALL 21231 0 0
8837: GO 8915
8839: LD_INT 4
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8854
8847: POP
// hHackInvincible ; 5 :
8848: CALL 21679 0 0
8852: GO 8915
8854: LD_INT 5
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8869
8862: POP
// hHackInvisible ; 6 :
8863: CALL 21790 0 0
8867: GO 8915
8869: LD_INT 6
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8884
8877: POP
// hHackChangeYourSide ; 7 :
8878: CALL 21847 0 0
8882: GO 8915
8884: LD_INT 7
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8899
8892: POP
// hHackChangeUnitSide ; 8 :
8893: CALL 21889 0 0
8897: GO 8915
8899: LD_INT 8
8901: DOUBLE
8902: EQUAL
8903: IFTRUE 8907
8905: GO 8914
8907: POP
// hHackFog ; end ;
8908: CALL 21990 0 0
8912: GO 8915
8914: POP
// end ; end ;
8915: LD_VAR 0 7
8919: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8920: GO 8922
8922: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8923: LD_STRING initStreamRollete();
8925: PPUSH
8926: CALL_OW 559
// InitStreamMode ;
8930: CALL 8942 0 0
// DefineStreamItems ( false ) ;
8934: LD_INT 0
8936: PPUSH
8937: CALL 9406 0 1
// end ;
8941: END
// function InitStreamMode ; begin
8942: LD_INT 0
8944: PPUSH
// streamModeActive := false ;
8945: LD_ADDR_EXP 19
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// normalCounter := 36 ;
8953: LD_ADDR_EXP 20
8957: PUSH
8958: LD_INT 36
8960: ST_TO_ADDR
// hardcoreCounter := 18 ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_INT 18
8968: ST_TO_ADDR
// sRocket := false ;
8969: LD_ADDR_EXP 24
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sSpeed := false ;
8977: LD_ADDR_EXP 23
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sEngine := false ;
8985: LD_ADDR_EXP 25
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sSpec := false ;
8993: LD_ADDR_EXP 22
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sLevel := false ;
9001: LD_ADDR_EXP 26
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sArmoury := false ;
9009: LD_ADDR_EXP 27
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sRadar := false ;
9017: LD_ADDR_EXP 28
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sBunker := false ;
9025: LD_ADDR_EXP 29
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sHack := false ;
9033: LD_ADDR_EXP 30
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sFire := false ;
9041: LD_ADDR_EXP 31
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sRefresh := false ;
9049: LD_ADDR_EXP 32
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sExp := false ;
9057: LD_ADDR_EXP 33
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sDepot := false ;
9065: LD_ADDR_EXP 34
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sFlag := false ;
9073: LD_ADDR_EXP 35
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// sKamikadze := false ;
9081: LD_ADDR_EXP 43
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// sTroll := false ;
9089: LD_ADDR_EXP 44
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// sSlow := false ;
9097: LD_ADDR_EXP 45
9101: PUSH
9102: LD_INT 0
9104: ST_TO_ADDR
// sLack := false ;
9105: LD_ADDR_EXP 46
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// sTank := false ;
9113: LD_ADDR_EXP 48
9117: PUSH
9118: LD_INT 0
9120: ST_TO_ADDR
// sRemote := false ;
9121: LD_ADDR_EXP 49
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// sPowell := false ;
9129: LD_ADDR_EXP 50
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// sTeleport := false ;
9137: LD_ADDR_EXP 53
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// sOilTower := false ;
9145: LD_ADDR_EXP 55
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// sShovel := false ;
9153: LD_ADDR_EXP 56
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// sSheik := false ;
9161: LD_ADDR_EXP 57
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// sEarthquake := false ;
9169: LD_ADDR_EXP 59
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// sAI := false ;
9177: LD_ADDR_EXP 60
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// sCargo := false ;
9185: LD_ADDR_EXP 63
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// sDLaser := false ;
9193: LD_ADDR_EXP 64
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// sExchange := false ;
9201: LD_ADDR_EXP 65
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// sFac := false ;
9209: LD_ADDR_EXP 66
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// sPower := false ;
9217: LD_ADDR_EXP 67
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// sRandom := false ;
9225: LD_ADDR_EXP 68
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// sShield := false ;
9233: LD_ADDR_EXP 69
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// sTime := false ;
9241: LD_ADDR_EXP 70
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// sTools := false ;
9249: LD_ADDR_EXP 71
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// sSold := false ;
9257: LD_ADDR_EXP 36
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// sDiff := false ;
9265: LD_ADDR_EXP 37
9269: PUSH
9270: LD_INT 0
9272: ST_TO_ADDR
// sFog := false ;
9273: LD_ADDR_EXP 40
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// sReset := false ;
9281: LD_ADDR_EXP 41
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// sSun := false ;
9289: LD_ADDR_EXP 42
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// sTiger := false ;
9297: LD_ADDR_EXP 38
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// sBomb := false ;
9305: LD_ADDR_EXP 39
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// sWound := false ;
9313: LD_ADDR_EXP 47
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// sBetray := false ;
9321: LD_ADDR_EXP 51
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// sContamin := false ;
9329: LD_ADDR_EXP 52
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// sOil := false ;
9337: LD_ADDR_EXP 54
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// sStu := false ;
9345: LD_ADDR_EXP 58
9349: PUSH
9350: LD_INT 0
9352: ST_TO_ADDR
// sBazooka := false ;
9353: LD_ADDR_EXP 61
9357: PUSH
9358: LD_INT 0
9360: ST_TO_ADDR
// sMortar := false ;
9361: LD_ADDR_EXP 62
9365: PUSH
9366: LD_INT 0
9368: ST_TO_ADDR
// sRanger := false ;
9369: LD_ADDR_EXP 72
9373: PUSH
9374: LD_INT 0
9376: ST_TO_ADDR
// sComputer := false ;
9377: LD_ADDR_EXP 73
9381: PUSH
9382: LD_INT 0
9384: ST_TO_ADDR
// s30 := false ;
9385: LD_ADDR_EXP 74
9389: PUSH
9390: LD_INT 0
9392: ST_TO_ADDR
// s60 := false ;
9393: LD_ADDR_EXP 75
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
// end ;
9401: LD_VAR 0 1
9405: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9406: LD_INT 0
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
// result := [ ] ;
9415: LD_ADDR_VAR 0 2
9419: PUSH
9420: EMPTY
9421: ST_TO_ADDR
// if campaign_id = 1 then
9422: LD_OWVAR 69
9426: PUSH
9427: LD_INT 1
9429: EQUAL
9430: IFFALSE 12596
// begin case mission_number of 1 :
9432: LD_OWVAR 70
9436: PUSH
9437: LD_INT 1
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9521
9445: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 4
9456: PUSH
9457: LD_INT 11
9459: PUSH
9460: LD_INT 12
9462: PUSH
9463: LD_INT 15
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 23
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: PUSH
9489: LD_INT 101
9491: PUSH
9492: LD_INT 102
9494: PUSH
9495: LD_INT 106
9497: PUSH
9498: LD_INT 116
9500: PUSH
9501: LD_INT 117
9503: PUSH
9504: LD_INT 118
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
9519: GO 12594
9521: LD_INT 2
9523: DOUBLE
9524: EQUAL
9525: IFTRUE 9529
9527: GO 9613
9529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_INT 2
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: LD_INT 11
9543: PUSH
9544: LD_INT 12
9546: PUSH
9547: LD_INT 15
9549: PUSH
9550: LD_INT 16
9552: PUSH
9553: LD_INT 22
9555: PUSH
9556: LD_INT 23
9558: PUSH
9559: LD_INT 26
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 101
9575: PUSH
9576: LD_INT 102
9578: PUSH
9579: LD_INT 105
9581: PUSH
9582: LD_INT 106
9584: PUSH
9585: LD_INT 108
9587: PUSH
9588: LD_INT 116
9590: PUSH
9591: LD_INT 117
9593: PUSH
9594: LD_INT 118
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: ST_TO_ADDR
9611: GO 12594
9613: LD_INT 3
9615: DOUBLE
9616: EQUAL
9617: IFTRUE 9621
9619: GO 9709
9621: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 4
9632: PUSH
9633: LD_INT 5
9635: PUSH
9636: LD_INT 11
9638: PUSH
9639: LD_INT 12
9641: PUSH
9642: LD_INT 15
9644: PUSH
9645: LD_INT 16
9647: PUSH
9648: LD_INT 22
9650: PUSH
9651: LD_INT 26
9653: PUSH
9654: LD_INT 36
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 101
9671: PUSH
9672: LD_INT 102
9674: PUSH
9675: LD_INT 105
9677: PUSH
9678: LD_INT 106
9680: PUSH
9681: LD_INT 108
9683: PUSH
9684: LD_INT 116
9686: PUSH
9687: LD_INT 117
9689: PUSH
9690: LD_INT 118
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: ST_TO_ADDR
9707: GO 12594
9709: LD_INT 4
9711: DOUBLE
9712: EQUAL
9713: IFTRUE 9717
9715: GO 9813
9717: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: LD_INT 5
9731: PUSH
9732: LD_INT 8
9734: PUSH
9735: LD_INT 11
9737: PUSH
9738: LD_INT 12
9740: PUSH
9741: LD_INT 15
9743: PUSH
9744: LD_INT 16
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 23
9752: PUSH
9753: LD_INT 26
9755: PUSH
9756: LD_INT 36
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 101
9775: PUSH
9776: LD_INT 102
9778: PUSH
9779: LD_INT 105
9781: PUSH
9782: LD_INT 106
9784: PUSH
9785: LD_INT 108
9787: PUSH
9788: LD_INT 116
9790: PUSH
9791: LD_INT 117
9793: PUSH
9794: LD_INT 118
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: ST_TO_ADDR
9811: GO 12594
9813: LD_INT 5
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9933
9821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9822: LD_ADDR_VAR 0 2
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: LD_INT 5
9835: PUSH
9836: LD_INT 6
9838: PUSH
9839: LD_INT 8
9841: PUSH
9842: LD_INT 11
9844: PUSH
9845: LD_INT 12
9847: PUSH
9848: LD_INT 15
9850: PUSH
9851: LD_INT 16
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_INT 25
9862: PUSH
9863: LD_INT 26
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 101
9887: PUSH
9888: LD_INT 102
9890: PUSH
9891: LD_INT 105
9893: PUSH
9894: LD_INT 106
9896: PUSH
9897: LD_INT 108
9899: PUSH
9900: LD_INT 109
9902: PUSH
9903: LD_INT 112
9905: PUSH
9906: LD_INT 116
9908: PUSH
9909: LD_INT 117
9911: PUSH
9912: LD_INT 118
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: ST_TO_ADDR
9931: GO 12594
9933: LD_INT 6
9935: DOUBLE
9936: EQUAL
9937: IFTRUE 9941
9939: GO 10073
9941: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 4
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 6
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: LD_INT 11
9964: PUSH
9965: LD_INT 12
9967: PUSH
9968: LD_INT 15
9970: PUSH
9971: LD_INT 16
9973: PUSH
9974: LD_INT 20
9976: PUSH
9977: LD_INT 21
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_INT 23
9985: PUSH
9986: LD_INT 25
9988: PUSH
9989: LD_INT 26
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 36
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 101
10027: PUSH
10028: LD_INT 102
10030: PUSH
10031: LD_INT 105
10033: PUSH
10034: LD_INT 106
10036: PUSH
10037: LD_INT 108
10039: PUSH
10040: LD_INT 109
10042: PUSH
10043: LD_INT 112
10045: PUSH
10046: LD_INT 116
10048: PUSH
10049: LD_INT 117
10051: PUSH
10052: LD_INT 118
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: ST_TO_ADDR
10071: GO 12594
10073: LD_INT 7
10075: DOUBLE
10076: EQUAL
10077: IFTRUE 10081
10079: GO 10193
10081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: LD_INT 5
10095: PUSH
10096: LD_INT 7
10098: PUSH
10099: LD_INT 11
10101: PUSH
10102: LD_INT 12
10104: PUSH
10105: LD_INT 15
10107: PUSH
10108: LD_INT 16
10110: PUSH
10111: LD_INT 20
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 26
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 101
10147: PUSH
10148: LD_INT 102
10150: PUSH
10151: LD_INT 103
10153: PUSH
10154: LD_INT 105
10156: PUSH
10157: LD_INT 106
10159: PUSH
10160: LD_INT 108
10162: PUSH
10163: LD_INT 112
10165: PUSH
10166: LD_INT 116
10168: PUSH
10169: LD_INT 117
10171: PUSH
10172: LD_INT 118
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: ST_TO_ADDR
10191: GO 12594
10193: LD_INT 8
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 10341
10201: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10202: LD_ADDR_VAR 0 2
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: LD_INT 4
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: LD_INT 6
10218: PUSH
10219: LD_INT 7
10221: PUSH
10222: LD_INT 8
10224: PUSH
10225: LD_INT 11
10227: PUSH
10228: LD_INT 12
10230: PUSH
10231: LD_INT 15
10233: PUSH
10234: LD_INT 16
10236: PUSH
10237: LD_INT 20
10239: PUSH
10240: LD_INT 21
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 23
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 26
10254: PUSH
10255: LD_INT 30
10257: PUSH
10258: LD_INT 31
10260: PUSH
10261: LD_INT 32
10263: PUSH
10264: LD_INT 36
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 101
10291: PUSH
10292: LD_INT 102
10294: PUSH
10295: LD_INT 103
10297: PUSH
10298: LD_INT 105
10300: PUSH
10301: LD_INT 106
10303: PUSH
10304: LD_INT 108
10306: PUSH
10307: LD_INT 109
10309: PUSH
10310: LD_INT 112
10312: PUSH
10313: LD_INT 116
10315: PUSH
10316: LD_INT 117
10318: PUSH
10319: LD_INT 118
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: ST_TO_ADDR
10339: GO 12594
10341: LD_INT 9
10343: DOUBLE
10344: EQUAL
10345: IFTRUE 10349
10347: GO 10497
10349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: LD_INT 4
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: LD_INT 6
10366: PUSH
10367: LD_INT 7
10369: PUSH
10370: LD_INT 8
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 15
10381: PUSH
10382: LD_INT 16
10384: PUSH
10385: LD_INT 20
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 22
10393: PUSH
10394: LD_INT 23
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 26
10402: PUSH
10403: LD_INT 28
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: LD_INT 31
10411: PUSH
10412: LD_INT 32
10414: PUSH
10415: LD_INT 36
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 101
10443: PUSH
10444: LD_INT 102
10446: PUSH
10447: LD_INT 103
10449: PUSH
10450: LD_INT 105
10452: PUSH
10453: LD_INT 106
10455: PUSH
10456: LD_INT 108
10458: PUSH
10459: LD_INT 109
10461: PUSH
10462: LD_INT 112
10464: PUSH
10465: LD_INT 114
10467: PUSH
10468: LD_INT 116
10470: PUSH
10471: LD_INT 117
10473: PUSH
10474: LD_INT 118
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: ST_TO_ADDR
10495: GO 12594
10497: LD_INT 10
10499: DOUBLE
10500: EQUAL
10501: IFTRUE 10505
10503: GO 10701
10505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: LD_INT 4
10516: PUSH
10517: LD_INT 5
10519: PUSH
10520: LD_INT 6
10522: PUSH
10523: LD_INT 7
10525: PUSH
10526: LD_INT 8
10528: PUSH
10529: LD_INT 9
10531: PUSH
10532: LD_INT 10
10534: PUSH
10535: LD_INT 11
10537: PUSH
10538: LD_INT 12
10540: PUSH
10541: LD_INT 13
10543: PUSH
10544: LD_INT 14
10546: PUSH
10547: LD_INT 15
10549: PUSH
10550: LD_INT 16
10552: PUSH
10553: LD_INT 17
10555: PUSH
10556: LD_INT 18
10558: PUSH
10559: LD_INT 19
10561: PUSH
10562: LD_INT 20
10564: PUSH
10565: LD_INT 21
10567: PUSH
10568: LD_INT 22
10570: PUSH
10571: LD_INT 23
10573: PUSH
10574: LD_INT 24
10576: PUSH
10577: LD_INT 25
10579: PUSH
10580: LD_INT 26
10582: PUSH
10583: LD_INT 28
10585: PUSH
10586: LD_INT 30
10588: PUSH
10589: LD_INT 31
10591: PUSH
10592: LD_INT 32
10594: PUSH
10595: LD_INT 36
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 101
10631: PUSH
10632: LD_INT 102
10634: PUSH
10635: LD_INT 103
10637: PUSH
10638: LD_INT 104
10640: PUSH
10641: LD_INT 105
10643: PUSH
10644: LD_INT 106
10646: PUSH
10647: LD_INT 107
10649: PUSH
10650: LD_INT 108
10652: PUSH
10653: LD_INT 109
10655: PUSH
10656: LD_INT 110
10658: PUSH
10659: LD_INT 111
10661: PUSH
10662: LD_INT 112
10664: PUSH
10665: LD_INT 114
10667: PUSH
10668: LD_INT 116
10670: PUSH
10671: LD_INT 117
10673: PUSH
10674: LD_INT 118
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: ST_TO_ADDR
10699: GO 12594
10701: LD_INT 11
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10913
10709: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10710: LD_ADDR_VAR 0 2
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: LD_INT 3
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: LD_INT 9
10738: PUSH
10739: LD_INT 10
10741: PUSH
10742: LD_INT 11
10744: PUSH
10745: LD_INT 12
10747: PUSH
10748: LD_INT 13
10750: PUSH
10751: LD_INT 14
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: LD_INT 17
10762: PUSH
10763: LD_INT 18
10765: PUSH
10766: LD_INT 19
10768: PUSH
10769: LD_INT 20
10771: PUSH
10772: LD_INT 21
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 26
10789: PUSH
10790: LD_INT 28
10792: PUSH
10793: LD_INT 30
10795: PUSH
10796: LD_INT 31
10798: PUSH
10799: LD_INT 32
10801: PUSH
10802: LD_INT 34
10804: PUSH
10805: LD_INT 36
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 103
10849: PUSH
10850: LD_INT 104
10852: PUSH
10853: LD_INT 105
10855: PUSH
10856: LD_INT 106
10858: PUSH
10859: LD_INT 107
10861: PUSH
10862: LD_INT 108
10864: PUSH
10865: LD_INT 109
10867: PUSH
10868: LD_INT 110
10870: PUSH
10871: LD_INT 111
10873: PUSH
10874: LD_INT 112
10876: PUSH
10877: LD_INT 114
10879: PUSH
10880: LD_INT 116
10882: PUSH
10883: LD_INT 117
10885: PUSH
10886: LD_INT 118
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: ST_TO_ADDR
10911: GO 12594
10913: LD_INT 12
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 11141
10921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: LD_INT 3
10935: PUSH
10936: LD_INT 4
10938: PUSH
10939: LD_INT 5
10941: PUSH
10942: LD_INT 6
10944: PUSH
10945: LD_INT 7
10947: PUSH
10948: LD_INT 8
10950: PUSH
10951: LD_INT 9
10953: PUSH
10954: LD_INT 10
10956: PUSH
10957: LD_INT 11
10959: PUSH
10960: LD_INT 12
10962: PUSH
10963: LD_INT 13
10965: PUSH
10966: LD_INT 14
10968: PUSH
10969: LD_INT 15
10971: PUSH
10972: LD_INT 16
10974: PUSH
10975: LD_INT 17
10977: PUSH
10978: LD_INT 18
10980: PUSH
10981: LD_INT 19
10983: PUSH
10984: LD_INT 20
10986: PUSH
10987: LD_INT 21
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_INT 23
10995: PUSH
10996: LD_INT 24
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 26
11004: PUSH
11005: LD_INT 27
11007: PUSH
11008: LD_INT 28
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: LD_INT 31
11016: PUSH
11017: LD_INT 32
11019: PUSH
11020: LD_INT 33
11022: PUSH
11023: LD_INT 34
11025: PUSH
11026: LD_INT 36
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 101
11067: PUSH
11068: LD_INT 102
11070: PUSH
11071: LD_INT 103
11073: PUSH
11074: LD_INT 104
11076: PUSH
11077: LD_INT 105
11079: PUSH
11080: LD_INT 106
11082: PUSH
11083: LD_INT 107
11085: PUSH
11086: LD_INT 108
11088: PUSH
11089: LD_INT 109
11091: PUSH
11092: LD_INT 110
11094: PUSH
11095: LD_INT 111
11097: PUSH
11098: LD_INT 112
11100: PUSH
11101: LD_INT 113
11103: PUSH
11104: LD_INT 114
11106: PUSH
11107: LD_INT 116
11109: PUSH
11110: LD_INT 117
11112: PUSH
11113: LD_INT 118
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: ST_TO_ADDR
11139: GO 12594
11141: LD_INT 13
11143: DOUBLE
11144: EQUAL
11145: IFTRUE 11149
11147: GO 11357
11149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: LD_INT 3
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: LD_INT 5
11169: PUSH
11170: LD_INT 8
11172: PUSH
11173: LD_INT 9
11175: PUSH
11176: LD_INT 10
11178: PUSH
11179: LD_INT 11
11181: PUSH
11182: LD_INT 12
11184: PUSH
11185: LD_INT 14
11187: PUSH
11188: LD_INT 15
11190: PUSH
11191: LD_INT 16
11193: PUSH
11194: LD_INT 17
11196: PUSH
11197: LD_INT 18
11199: PUSH
11200: LD_INT 19
11202: PUSH
11203: LD_INT 20
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 23
11214: PUSH
11215: LD_INT 24
11217: PUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 26
11223: PUSH
11224: LD_INT 27
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: LD_INT 30
11232: PUSH
11233: LD_INT 31
11235: PUSH
11236: LD_INT 32
11238: PUSH
11239: LD_INT 33
11241: PUSH
11242: LD_INT 34
11244: PUSH
11245: LD_INT 36
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 101
11283: PUSH
11284: LD_INT 102
11286: PUSH
11287: LD_INT 103
11289: PUSH
11290: LD_INT 104
11292: PUSH
11293: LD_INT 105
11295: PUSH
11296: LD_INT 106
11298: PUSH
11299: LD_INT 107
11301: PUSH
11302: LD_INT 108
11304: PUSH
11305: LD_INT 109
11307: PUSH
11308: LD_INT 110
11310: PUSH
11311: LD_INT 111
11313: PUSH
11314: LD_INT 112
11316: PUSH
11317: LD_INT 113
11319: PUSH
11320: LD_INT 114
11322: PUSH
11323: LD_INT 116
11325: PUSH
11326: LD_INT 117
11328: PUSH
11329: LD_INT 118
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: ST_TO_ADDR
11355: GO 12594
11357: LD_INT 14
11359: DOUBLE
11360: EQUAL
11361: IFTRUE 11365
11363: GO 11589
11365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: LD_INT 4
11382: PUSH
11383: LD_INT 5
11385: PUSH
11386: LD_INT 6
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: LD_INT 8
11394: PUSH
11395: LD_INT 9
11397: PUSH
11398: LD_INT 10
11400: PUSH
11401: LD_INT 11
11403: PUSH
11404: LD_INT 12
11406: PUSH
11407: LD_INT 13
11409: PUSH
11410: LD_INT 14
11412: PUSH
11413: LD_INT 15
11415: PUSH
11416: LD_INT 16
11418: PUSH
11419: LD_INT 17
11421: PUSH
11422: LD_INT 18
11424: PUSH
11425: LD_INT 19
11427: PUSH
11428: LD_INT 20
11430: PUSH
11431: LD_INT 21
11433: PUSH
11434: LD_INT 22
11436: PUSH
11437: LD_INT 23
11439: PUSH
11440: LD_INT 24
11442: PUSH
11443: LD_INT 25
11445: PUSH
11446: LD_INT 26
11448: PUSH
11449: LD_INT 27
11451: PUSH
11452: LD_INT 28
11454: PUSH
11455: LD_INT 29
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 31
11463: PUSH
11464: LD_INT 32
11466: PUSH
11467: LD_INT 33
11469: PUSH
11470: LD_INT 34
11472: PUSH
11473: LD_INT 36
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 101
11515: PUSH
11516: LD_INT 102
11518: PUSH
11519: LD_INT 103
11521: PUSH
11522: LD_INT 104
11524: PUSH
11525: LD_INT 105
11527: PUSH
11528: LD_INT 106
11530: PUSH
11531: LD_INT 107
11533: PUSH
11534: LD_INT 108
11536: PUSH
11537: LD_INT 109
11539: PUSH
11540: LD_INT 110
11542: PUSH
11543: LD_INT 111
11545: PUSH
11546: LD_INT 112
11548: PUSH
11549: LD_INT 113
11551: PUSH
11552: LD_INT 114
11554: PUSH
11555: LD_INT 116
11557: PUSH
11558: LD_INT 117
11560: PUSH
11561: LD_INT 118
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 12594
11589: LD_INT 15
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11821
11597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: LD_INT 3
11611: PUSH
11612: LD_INT 4
11614: PUSH
11615: LD_INT 5
11617: PUSH
11618: LD_INT 6
11620: PUSH
11621: LD_INT 7
11623: PUSH
11624: LD_INT 8
11626: PUSH
11627: LD_INT 9
11629: PUSH
11630: LD_INT 10
11632: PUSH
11633: LD_INT 11
11635: PUSH
11636: LD_INT 12
11638: PUSH
11639: LD_INT 13
11641: PUSH
11642: LD_INT 14
11644: PUSH
11645: LD_INT 15
11647: PUSH
11648: LD_INT 16
11650: PUSH
11651: LD_INT 17
11653: PUSH
11654: LD_INT 18
11656: PUSH
11657: LD_INT 19
11659: PUSH
11660: LD_INT 20
11662: PUSH
11663: LD_INT 21
11665: PUSH
11666: LD_INT 22
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 24
11674: PUSH
11675: LD_INT 25
11677: PUSH
11678: LD_INT 26
11680: PUSH
11681: LD_INT 27
11683: PUSH
11684: LD_INT 28
11686: PUSH
11687: LD_INT 29
11689: PUSH
11690: LD_INT 30
11692: PUSH
11693: LD_INT 31
11695: PUSH
11696: LD_INT 32
11698: PUSH
11699: LD_INT 33
11701: PUSH
11702: LD_INT 34
11704: PUSH
11705: LD_INT 36
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 101
11747: PUSH
11748: LD_INT 102
11750: PUSH
11751: LD_INT 103
11753: PUSH
11754: LD_INT 104
11756: PUSH
11757: LD_INT 105
11759: PUSH
11760: LD_INT 106
11762: PUSH
11763: LD_INT 107
11765: PUSH
11766: LD_INT 108
11768: PUSH
11769: LD_INT 109
11771: PUSH
11772: LD_INT 110
11774: PUSH
11775: LD_INT 111
11777: PUSH
11778: LD_INT 112
11780: PUSH
11781: LD_INT 113
11783: PUSH
11784: LD_INT 114
11786: PUSH
11787: LD_INT 116
11789: PUSH
11790: LD_INT 117
11792: PUSH
11793: LD_INT 118
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: ST_TO_ADDR
11819: GO 12594
11821: LD_INT 16
11823: DOUBLE
11824: EQUAL
11825: IFTRUE 11829
11827: GO 11965
11829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: LD_INT 4
11840: PUSH
11841: LD_INT 5
11843: PUSH
11844: LD_INT 7
11846: PUSH
11847: LD_INT 11
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: LD_INT 15
11855: PUSH
11856: LD_INT 16
11858: PUSH
11859: LD_INT 20
11861: PUSH
11862: LD_INT 21
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_INT 23
11870: PUSH
11871: LD_INT 25
11873: PUSH
11874: LD_INT 26
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 31
11882: PUSH
11883: LD_INT 32
11885: PUSH
11886: LD_INT 33
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 101
11915: PUSH
11916: LD_INT 102
11918: PUSH
11919: LD_INT 103
11921: PUSH
11922: LD_INT 106
11924: PUSH
11925: LD_INT 108
11927: PUSH
11928: LD_INT 112
11930: PUSH
11931: LD_INT 113
11933: PUSH
11934: LD_INT 114
11936: PUSH
11937: LD_INT 116
11939: PUSH
11940: LD_INT 117
11942: PUSH
11943: LD_INT 118
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: ST_TO_ADDR
11963: GO 12594
11965: LD_INT 17
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12197
11973: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: LD_INT 3
11987: PUSH
11988: LD_INT 4
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: LD_INT 6
11996: PUSH
11997: LD_INT 7
11999: PUSH
12000: LD_INT 8
12002: PUSH
12003: LD_INT 9
12005: PUSH
12006: LD_INT 10
12008: PUSH
12009: LD_INT 11
12011: PUSH
12012: LD_INT 12
12014: PUSH
12015: LD_INT 13
12017: PUSH
12018: LD_INT 14
12020: PUSH
12021: LD_INT 15
12023: PUSH
12024: LD_INT 16
12026: PUSH
12027: LD_INT 17
12029: PUSH
12030: LD_INT 18
12032: PUSH
12033: LD_INT 19
12035: PUSH
12036: LD_INT 20
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_INT 23
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 26
12056: PUSH
12057: LD_INT 27
12059: PUSH
12060: LD_INT 28
12062: PUSH
12063: LD_INT 29
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 31
12071: PUSH
12072: LD_INT 32
12074: PUSH
12075: LD_INT 33
12077: PUSH
12078: LD_INT 34
12080: PUSH
12081: LD_INT 36
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 101
12123: PUSH
12124: LD_INT 102
12126: PUSH
12127: LD_INT 103
12129: PUSH
12130: LD_INT 104
12132: PUSH
12133: LD_INT 105
12135: PUSH
12136: LD_INT 106
12138: PUSH
12139: LD_INT 107
12141: PUSH
12142: LD_INT 108
12144: PUSH
12145: LD_INT 109
12147: PUSH
12148: LD_INT 110
12150: PUSH
12151: LD_INT 111
12153: PUSH
12154: LD_INT 112
12156: PUSH
12157: LD_INT 113
12159: PUSH
12160: LD_INT 114
12162: PUSH
12163: LD_INT 116
12165: PUSH
12166: LD_INT 117
12168: PUSH
12169: LD_INT 118
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: ST_TO_ADDR
12195: GO 12594
12197: LD_INT 18
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12353
12205: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: LD_INT 5
12219: PUSH
12220: LD_INT 7
12222: PUSH
12223: LD_INT 11
12225: PUSH
12226: LD_INT 12
12228: PUSH
12229: LD_INT 15
12231: PUSH
12232: LD_INT 16
12234: PUSH
12235: LD_INT 20
12237: PUSH
12238: LD_INT 21
12240: PUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 23
12246: PUSH
12247: LD_INT 25
12249: PUSH
12250: LD_INT 26
12252: PUSH
12253: LD_INT 30
12255: PUSH
12256: LD_INT 31
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: LD_INT 33
12264: PUSH
12265: LD_INT 34
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 36
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 101
12299: PUSH
12300: LD_INT 102
12302: PUSH
12303: LD_INT 103
12305: PUSH
12306: LD_INT 106
12308: PUSH
12309: LD_INT 108
12311: PUSH
12312: LD_INT 112
12314: PUSH
12315: LD_INT 113
12317: PUSH
12318: LD_INT 114
12320: PUSH
12321: LD_INT 115
12323: PUSH
12324: LD_INT 116
12326: PUSH
12327: LD_INT 117
12329: PUSH
12330: LD_INT 118
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: ST_TO_ADDR
12351: GO 12594
12353: LD_INT 19
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12593
12361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12362: LD_ADDR_VAR 0 2
12366: PUSH
12367: LD_INT 1
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 3
12375: PUSH
12376: LD_INT 4
12378: PUSH
12379: LD_INT 5
12381: PUSH
12382: LD_INT 6
12384: PUSH
12385: LD_INT 7
12387: PUSH
12388: LD_INT 8
12390: PUSH
12391: LD_INT 9
12393: PUSH
12394: LD_INT 10
12396: PUSH
12397: LD_INT 11
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: LD_INT 13
12405: PUSH
12406: LD_INT 14
12408: PUSH
12409: LD_INT 15
12411: PUSH
12412: LD_INT 16
12414: PUSH
12415: LD_INT 17
12417: PUSH
12418: LD_INT 18
12420: PUSH
12421: LD_INT 19
12423: PUSH
12424: LD_INT 20
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 23
12435: PUSH
12436: LD_INT 24
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 26
12444: PUSH
12445: LD_INT 27
12447: PUSH
12448: LD_INT 28
12450: PUSH
12451: LD_INT 29
12453: PUSH
12454: LD_INT 30
12456: PUSH
12457: LD_INT 31
12459: PUSH
12460: LD_INT 32
12462: PUSH
12463: LD_INT 33
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 35
12471: PUSH
12472: LD_INT 36
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 101
12515: PUSH
12516: LD_INT 102
12518: PUSH
12519: LD_INT 103
12521: PUSH
12522: LD_INT 104
12524: PUSH
12525: LD_INT 105
12527: PUSH
12528: LD_INT 106
12530: PUSH
12531: LD_INT 107
12533: PUSH
12534: LD_INT 108
12536: PUSH
12537: LD_INT 109
12539: PUSH
12540: LD_INT 110
12542: PUSH
12543: LD_INT 111
12545: PUSH
12546: LD_INT 112
12548: PUSH
12549: LD_INT 113
12551: PUSH
12552: LD_INT 114
12554: PUSH
12555: LD_INT 115
12557: PUSH
12558: LD_INT 116
12560: PUSH
12561: LD_INT 117
12563: PUSH
12564: LD_INT 118
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12594
12593: POP
// end else
12594: GO 12825
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: LD_INT 4
12612: PUSH
12613: LD_INT 5
12615: PUSH
12616: LD_INT 6
12618: PUSH
12619: LD_INT 7
12621: PUSH
12622: LD_INT 8
12624: PUSH
12625: LD_INT 9
12627: PUSH
12628: LD_INT 10
12630: PUSH
12631: LD_INT 11
12633: PUSH
12634: LD_INT 12
12636: PUSH
12637: LD_INT 13
12639: PUSH
12640: LD_INT 14
12642: PUSH
12643: LD_INT 15
12645: PUSH
12646: LD_INT 16
12648: PUSH
12649: LD_INT 17
12651: PUSH
12652: LD_INT 18
12654: PUSH
12655: LD_INT 19
12657: PUSH
12658: LD_INT 20
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 22
12666: PUSH
12667: LD_INT 23
12669: PUSH
12670: LD_INT 24
12672: PUSH
12673: LD_INT 25
12675: PUSH
12676: LD_INT 26
12678: PUSH
12679: LD_INT 27
12681: PUSH
12682: LD_INT 28
12684: PUSH
12685: LD_INT 29
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 31
12693: PUSH
12694: LD_INT 32
12696: PUSH
12697: LD_INT 33
12699: PUSH
12700: LD_INT 34
12702: PUSH
12703: LD_INT 35
12705: PUSH
12706: LD_INT 36
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 101
12749: PUSH
12750: LD_INT 102
12752: PUSH
12753: LD_INT 103
12755: PUSH
12756: LD_INT 104
12758: PUSH
12759: LD_INT 105
12761: PUSH
12762: LD_INT 106
12764: PUSH
12765: LD_INT 107
12767: PUSH
12768: LD_INT 108
12770: PUSH
12771: LD_INT 109
12773: PUSH
12774: LD_INT 110
12776: PUSH
12777: LD_INT 111
12779: PUSH
12780: LD_INT 112
12782: PUSH
12783: LD_INT 113
12785: PUSH
12786: LD_INT 114
12788: PUSH
12789: LD_INT 115
12791: PUSH
12792: LD_INT 116
12794: PUSH
12795: LD_INT 117
12797: PUSH
12798: LD_INT 118
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: ST_TO_ADDR
// if result then
12825: LD_VAR 0 2
12829: IFFALSE 13615
// begin normal :=  ;
12831: LD_ADDR_VAR 0 5
12835: PUSH
12836: LD_STRING 
12838: ST_TO_ADDR
// hardcore :=  ;
12839: LD_ADDR_VAR 0 6
12843: PUSH
12844: LD_STRING 
12846: ST_TO_ADDR
// active :=  ;
12847: LD_ADDR_VAR 0 7
12851: PUSH
12852: LD_STRING 
12854: ST_TO_ADDR
// for i = 1 to normalCounter do
12855: LD_ADDR_VAR 0 8
12859: PUSH
12860: DOUBLE
12861: LD_INT 1
12863: DEC
12864: ST_TO_ADDR
12865: LD_EXP 20
12869: PUSH
12870: FOR_TO
12871: IFFALSE 12972
// begin tmp := 0 ;
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_STRING 0
12880: ST_TO_ADDR
// if result [ 1 ] then
12881: LD_VAR 0 2
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: IFFALSE 12954
// if result [ 1 ] [ 1 ] = i then
12891: LD_VAR 0 2
12895: PUSH
12896: LD_INT 1
12898: ARRAY
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_VAR 0 8
12908: EQUAL
12909: IFFALSE 12954
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_VAR 0 2
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 3
12940: PPUSH
12941: CALL_OW 1
12945: ST_TO_ADDR
// tmp := 1 ;
12946: LD_ADDR_VAR 0 3
12950: PUSH
12951: LD_STRING 1
12953: ST_TO_ADDR
// end ; normal := normal & tmp ;
12954: LD_ADDR_VAR 0 5
12958: PUSH
12959: LD_VAR 0 5
12963: PUSH
12964: LD_VAR 0 3
12968: STR
12969: ST_TO_ADDR
// end ;
12970: GO 12870
12972: POP
12973: POP
// for i = 1 to hardcoreCounter do
12974: LD_ADDR_VAR 0 8
12978: PUSH
12979: DOUBLE
12980: LD_INT 1
12982: DEC
12983: ST_TO_ADDR
12984: LD_EXP 21
12988: PUSH
12989: FOR_TO
12990: IFFALSE 13095
// begin tmp := 0 ;
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_STRING 0
12999: ST_TO_ADDR
// if result [ 2 ] then
13000: LD_VAR 0 2
13004: PUSH
13005: LD_INT 2
13007: ARRAY
13008: IFFALSE 13077
// if result [ 2 ] [ 1 ] = 100 + i then
13010: LD_VAR 0 2
13014: PUSH
13015: LD_INT 2
13017: ARRAY
13018: PUSH
13019: LD_INT 1
13021: ARRAY
13022: PUSH
13023: LD_INT 100
13025: PUSH
13026: LD_VAR 0 8
13030: PLUS
13031: EQUAL
13032: IFFALSE 13077
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13034: LD_ADDR_VAR 0 2
13038: PUSH
13039: LD_VAR 0 2
13043: PPUSH
13044: LD_INT 2
13046: PPUSH
13047: LD_VAR 0 2
13051: PUSH
13052: LD_INT 2
13054: ARRAY
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 3
13063: PPUSH
13064: CALL_OW 1
13068: ST_TO_ADDR
// tmp := 1 ;
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: LD_STRING 1
13076: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13077: LD_ADDR_VAR 0 6
13081: PUSH
13082: LD_VAR 0 6
13086: PUSH
13087: LD_VAR 0 3
13091: STR
13092: ST_TO_ADDR
// end ;
13093: GO 12989
13095: POP
13096: POP
// if isGameLoad then
13097: LD_VAR 0 1
13101: IFFALSE 13576
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13103: LD_ADDR_VAR 0 4
13107: PUSH
13108: LD_EXP 24
13112: PUSH
13113: LD_EXP 23
13117: PUSH
13118: LD_EXP 25
13122: PUSH
13123: LD_EXP 22
13127: PUSH
13128: LD_EXP 26
13132: PUSH
13133: LD_EXP 27
13137: PUSH
13138: LD_EXP 28
13142: PUSH
13143: LD_EXP 29
13147: PUSH
13148: LD_EXP 30
13152: PUSH
13153: LD_EXP 31
13157: PUSH
13158: LD_EXP 32
13162: PUSH
13163: LD_EXP 33
13167: PUSH
13168: LD_EXP 34
13172: PUSH
13173: LD_EXP 35
13177: PUSH
13178: LD_EXP 43
13182: PUSH
13183: LD_EXP 44
13187: PUSH
13188: LD_EXP 45
13192: PUSH
13193: LD_EXP 46
13197: PUSH
13198: LD_EXP 48
13202: PUSH
13203: LD_EXP 49
13207: PUSH
13208: LD_EXP 50
13212: PUSH
13213: LD_EXP 53
13217: PUSH
13218: LD_EXP 55
13222: PUSH
13223: LD_EXP 56
13227: PUSH
13228: LD_EXP 57
13232: PUSH
13233: LD_EXP 59
13237: PUSH
13238: LD_EXP 60
13242: PUSH
13243: LD_EXP 63
13247: PUSH
13248: LD_EXP 64
13252: PUSH
13253: LD_EXP 65
13257: PUSH
13258: LD_EXP 66
13262: PUSH
13263: LD_EXP 67
13267: PUSH
13268: LD_EXP 68
13272: PUSH
13273: LD_EXP 69
13277: PUSH
13278: LD_EXP 70
13282: PUSH
13283: LD_EXP 71
13287: PUSH
13288: LD_EXP 36
13292: PUSH
13293: LD_EXP 37
13297: PUSH
13298: LD_EXP 40
13302: PUSH
13303: LD_EXP 41
13307: PUSH
13308: LD_EXP 42
13312: PUSH
13313: LD_EXP 38
13317: PUSH
13318: LD_EXP 39
13322: PUSH
13323: LD_EXP 47
13327: PUSH
13328: LD_EXP 51
13332: PUSH
13333: LD_EXP 52
13337: PUSH
13338: LD_EXP 54
13342: PUSH
13343: LD_EXP 58
13347: PUSH
13348: LD_EXP 61
13352: PUSH
13353: LD_EXP 62
13357: PUSH
13358: LD_EXP 72
13362: PUSH
13363: LD_EXP 73
13367: PUSH
13368: LD_EXP 74
13372: PUSH
13373: LD_EXP 75
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: ST_TO_ADDR
// tmp :=  ;
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_STRING 
13441: ST_TO_ADDR
// for i = 1 to normalCounter do
13442: LD_ADDR_VAR 0 8
13446: PUSH
13447: DOUBLE
13448: LD_INT 1
13450: DEC
13451: ST_TO_ADDR
13452: LD_EXP 20
13456: PUSH
13457: FOR_TO
13458: IFFALSE 13494
// begin if flags [ i ] then
13460: LD_VAR 0 4
13464: PUSH
13465: LD_VAR 0 8
13469: ARRAY
13470: IFFALSE 13492
// tmp := tmp & i & ; ;
13472: LD_ADDR_VAR 0 3
13476: PUSH
13477: LD_VAR 0 3
13481: PUSH
13482: LD_VAR 0 8
13486: STR
13487: PUSH
13488: LD_STRING ;
13490: STR
13491: ST_TO_ADDR
// end ;
13492: GO 13457
13494: POP
13495: POP
// for i = 1 to hardcoreCounter do
13496: LD_ADDR_VAR 0 8
13500: PUSH
13501: DOUBLE
13502: LD_INT 1
13504: DEC
13505: ST_TO_ADDR
13506: LD_EXP 21
13510: PUSH
13511: FOR_TO
13512: IFFALSE 13558
// begin if flags [ normalCounter + i ] then
13514: LD_VAR 0 4
13518: PUSH
13519: LD_EXP 20
13523: PUSH
13524: LD_VAR 0 8
13528: PLUS
13529: ARRAY
13530: IFFALSE 13556
// tmp := tmp & ( 100 + i ) & ; ;
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 100
13544: PUSH
13545: LD_VAR 0 8
13549: PLUS
13550: STR
13551: PUSH
13552: LD_STRING ;
13554: STR
13555: ST_TO_ADDR
// end ;
13556: GO 13511
13558: POP
13559: POP
// if tmp then
13560: LD_VAR 0 3
13564: IFFALSE 13576
// active := tmp ;
13566: LD_ADDR_VAR 0 7
13570: PUSH
13571: LD_VAR 0 3
13575: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13576: LD_STRING getStreamItemsFromMission("
13578: PUSH
13579: LD_VAR 0 5
13583: STR
13584: PUSH
13585: LD_STRING ","
13587: STR
13588: PUSH
13589: LD_VAR 0 6
13593: STR
13594: PUSH
13595: LD_STRING ","
13597: STR
13598: PUSH
13599: LD_VAR 0 7
13603: STR
13604: PUSH
13605: LD_STRING ")
13607: STR
13608: PPUSH
13609: CALL_OW 559
// end else
13613: GO 13622
// ToLua ( getStreamItemsFromMission("","","") ) ;
13615: LD_STRING getStreamItemsFromMission("","","")
13617: PPUSH
13618: CALL_OW 559
// end ;
13622: LD_VAR 0 2
13626: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13627: LD_EXP 19
13631: PUSH
13632: LD_EXP 24
13636: AND
13637: IFFALSE 13761
13639: GO 13641
13641: DISABLE
13642: LD_INT 0
13644: PPUSH
13645: PPUSH
// begin enable ;
13646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13647: LD_ADDR_VAR 0 2
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_OWVAR 2
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 34
13669: PUSH
13670: LD_INT 7
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 34
13679: PUSH
13680: LD_INT 45
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 34
13689: PUSH
13690: LD_INT 28
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 34
13699: PUSH
13700: LD_INT 47
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if not tmp then
13723: LD_VAR 0 2
13727: NOT
13728: IFFALSE 13732
// exit ;
13730: GO 13761
// for i in tmp do
13732: LD_ADDR_VAR 0 1
13736: PUSH
13737: LD_VAR 0 2
13741: PUSH
13742: FOR_IN
13743: IFFALSE 13759
// begin SetLives ( i , 0 ) ;
13745: LD_VAR 0 1
13749: PPUSH
13750: LD_INT 0
13752: PPUSH
13753: CALL_OW 234
// end ;
13757: GO 13742
13759: POP
13760: POP
// end ;
13761: PPOPN 2
13763: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13764: LD_EXP 19
13768: PUSH
13769: LD_EXP 25
13773: AND
13774: IFFALSE 13858
13776: GO 13778
13778: DISABLE
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
// begin enable ;
13783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_OWVAR 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: ST_TO_ADDR
// if not tmp then
13820: LD_VAR 0 2
13824: NOT
13825: IFFALSE 13829
// exit ;
13827: GO 13858
// for i in tmp do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_VAR 0 2
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13856
// begin SetLives ( i , 0 ) ;
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_INT 0
13849: PPUSH
13850: CALL_OW 234
// end ;
13854: GO 13839
13856: POP
13857: POP
// end ;
13858: PPOPN 2
13860: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13861: LD_EXP 19
13865: PUSH
13866: LD_EXP 22
13870: AND
13871: IFFALSE 13964
13873: GO 13875
13875: DISABLE
13876: LD_INT 0
13878: PPUSH
// begin enable ;
13879: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 25
13902: PUSH
13903: LD_INT 5
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 8
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: PUSH
13945: FOR_IN
13946: IFFALSE 13962
// begin SetClass ( i , 1 ) ;
13948: LD_VAR 0 1
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 336
// end ;
13960: GO 13945
13962: POP
13963: POP
// end ;
13964: PPOPN 1
13966: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13967: LD_EXP 19
13971: PUSH
13972: LD_EXP 23
13976: AND
13977: PUSH
13978: LD_OWVAR 65
13982: PUSH
13983: LD_INT 7
13985: LESS
13986: AND
13987: IFFALSE 14001
13989: GO 13991
13991: DISABLE
// begin enable ;
13992: ENABLE
// game_speed := 7 ;
13993: LD_ADDR_OWVAR 65
13997: PUSH
13998: LD_INT 7
14000: ST_TO_ADDR
// end ;
14001: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14002: LD_EXP 19
14006: PUSH
14007: LD_EXP 26
14011: AND
14012: IFFALSE 14214
14014: GO 14016
14016: DISABLE
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
14021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 81
14029: PUSH
14030: LD_OWVAR 2
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 21
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PPUSH
14053: CALL_OW 69
14057: ST_TO_ADDR
// if not tmp then
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14214
// if tmp > 5 then
14067: LD_VAR 0 3
14071: PUSH
14072: LD_INT 5
14074: GREATER
14075: IFFALSE 14087
// k := 5 else
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_INT 5
14084: ST_TO_ADDR
14085: GO 14097
// k := tmp ;
14087: LD_ADDR_VAR 0 2
14091: PUSH
14092: LD_VAR 0 3
14096: ST_TO_ADDR
// for i := 1 to k do
14097: LD_ADDR_VAR 0 1
14101: PUSH
14102: DOUBLE
14103: LD_INT 1
14105: DEC
14106: ST_TO_ADDR
14107: LD_VAR 0 2
14111: PUSH
14112: FOR_TO
14113: IFFALSE 14212
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14115: LD_VAR 0 3
14119: PUSH
14120: LD_VAR 0 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 4
14133: MOD
14134: PUSH
14135: LD_INT 1
14137: PLUS
14138: PPUSH
14139: CALL_OW 259
14143: PUSH
14144: LD_INT 10
14146: LESS
14147: IFFALSE 14210
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14149: LD_VAR 0 3
14153: PUSH
14154: LD_VAR 0 1
14158: ARRAY
14159: PPUSH
14160: LD_VAR 0 1
14164: PUSH
14165: LD_INT 4
14167: MOD
14168: PUSH
14169: LD_INT 1
14171: PLUS
14172: PPUSH
14173: LD_VAR 0 3
14177: PUSH
14178: LD_VAR 0 1
14182: ARRAY
14183: PPUSH
14184: LD_VAR 0 1
14188: PUSH
14189: LD_INT 4
14191: MOD
14192: PUSH
14193: LD_INT 1
14195: PLUS
14196: PPUSH
14197: CALL_OW 259
14201: PUSH
14202: LD_INT 1
14204: PLUS
14205: PPUSH
14206: CALL_OW 237
14210: GO 14112
14212: POP
14213: POP
// end ;
14214: PPOPN 3
14216: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14217: LD_EXP 19
14221: PUSH
14222: LD_EXP 27
14226: AND
14227: IFFALSE 14247
14229: GO 14231
14231: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14232: LD_INT 4
14234: PPUSH
14235: LD_OWVAR 2
14239: PPUSH
14240: LD_INT 0
14242: PPUSH
14243: CALL_OW 324
14247: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14248: LD_EXP 19
14252: PUSH
14253: LD_EXP 56
14257: AND
14258: IFFALSE 14278
14260: GO 14262
14262: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14263: LD_INT 19
14265: PPUSH
14266: LD_OWVAR 2
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 324
14278: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14279: LD_EXP 19
14283: PUSH
14284: LD_EXP 28
14288: AND
14289: IFFALSE 14391
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
// begin enable ;
14298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14299: LD_ADDR_VAR 0 2
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_OWVAR 2
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: LD_INT 34
14321: PUSH
14322: LD_INT 11
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 34
14331: PUSH
14332: LD_INT 30
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PPUSH
14348: CALL_OW 69
14352: ST_TO_ADDR
// if not tmp then
14353: LD_VAR 0 2
14357: NOT
14358: IFFALSE 14362
// exit ;
14360: GO 14391
// for i in tmp do
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_VAR 0 2
14371: PUSH
14372: FOR_IN
14373: IFFALSE 14389
// begin SetLives ( i , 0 ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_INT 0
14382: PPUSH
14383: CALL_OW 234
// end ;
14387: GO 14372
14389: POP
14390: POP
// end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14394: LD_EXP 19
14398: PUSH
14399: LD_EXP 29
14403: AND
14404: IFFALSE 14424
14406: GO 14408
14408: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14409: LD_INT 32
14411: PPUSH
14412: LD_OWVAR 2
14416: PPUSH
14417: LD_INT 0
14419: PPUSH
14420: CALL_OW 324
14424: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14425: LD_EXP 19
14429: PUSH
14430: LD_EXP 30
14434: AND
14435: IFFALSE 14616
14437: GO 14439
14439: DISABLE
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: LD_INT 22
14452: PUSH
14453: LD_OWVAR 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 33
14464: PUSH
14465: LD_INT 3
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if not tmp then
14481: LD_VAR 0 2
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14616
// side := 0 ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// for i := 1 to 8 do
14498: LD_ADDR_VAR 0 1
14502: PUSH
14503: DOUBLE
14504: LD_INT 1
14506: DEC
14507: ST_TO_ADDR
14508: LD_INT 8
14510: PUSH
14511: FOR_TO
14512: IFFALSE 14560
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14514: LD_OWVAR 2
14518: PUSH
14519: LD_VAR 0 1
14523: NONEQUAL
14524: PUSH
14525: LD_OWVAR 2
14529: PPUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 81
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: AND
14544: IFFALSE 14558
// begin side := i ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ST_TO_ADDR
// break ;
14556: GO 14560
// end ;
14558: GO 14511
14560: POP
14561: POP
// if not side then
14562: LD_VAR 0 3
14566: NOT
14567: IFFALSE 14571
// exit ;
14569: GO 14616
// for i := 1 to tmp do
14571: LD_ADDR_VAR 0 1
14575: PUSH
14576: DOUBLE
14577: LD_INT 1
14579: DEC
14580: ST_TO_ADDR
14581: LD_VAR 0 2
14585: PUSH
14586: FOR_TO
14587: IFFALSE 14614
// if Prob ( 60 ) then
14589: LD_INT 60
14591: PPUSH
14592: CALL_OW 13
14596: IFFALSE 14612
// SetSide ( i , side ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: CALL_OW 235
14612: GO 14586
14614: POP
14615: POP
// end ;
14616: PPOPN 3
14618: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14619: LD_EXP 19
14623: PUSH
14624: LD_EXP 32
14628: AND
14629: IFFALSE 14748
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14637: LD_ADDR_VAR 0 1
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_OWVAR 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 21
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 3
14666: PUSH
14667: LD_INT 23
14669: PUSH
14670: LD_INT 0
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL_OW 69
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14746
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 257
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: LD_INT 2
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: LD_INT 4
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: IN
14722: IFFALSE 14744
// SetClass ( un , rand ( 1 , 4 ) ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: LD_INT 4
14734: PPUSH
14735: CALL_OW 12
14739: PPUSH
14740: CALL_OW 336
14744: GO 14691
14746: POP
14747: POP
// end ;
14748: PPOPN 1
14750: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14751: LD_EXP 19
14755: PUSH
14756: LD_EXP 31
14760: AND
14761: IFFALSE 14840
14763: GO 14765
14765: DISABLE
14766: LD_INT 0
14768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_OWVAR 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 21
14788: PUSH
14789: LD_INT 3
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: ST_TO_ADDR
// if not tmp then
14805: LD_VAR 0 1
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 14840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14814: LD_VAR 0 1
14818: PUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 12
14831: ARRAY
14832: PPUSH
14833: LD_INT 100
14835: PPUSH
14836: CALL_OW 234
// end ;
14840: PPOPN 1
14842: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14843: LD_EXP 19
14847: PUSH
14848: LD_EXP 33
14852: AND
14853: IFFALSE 14951
14855: GO 14857
14857: DISABLE
14858: LD_INT 0
14860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14861: LD_ADDR_VAR 0 1
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_OWVAR 2
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: ST_TO_ADDR
// if not tmp then
14897: LD_VAR 0 1
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 14951
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14906: LD_VAR 0 1
14910: PUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 12
14923: ARRAY
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_INT 4
14930: PPUSH
14931: CALL_OW 12
14935: PPUSH
14936: LD_INT 3000
14938: PPUSH
14939: LD_INT 9000
14941: PPUSH
14942: CALL_OW 12
14946: PPUSH
14947: CALL_OW 492
// end ;
14951: PPOPN 1
14953: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14954: LD_EXP 19
14958: PUSH
14959: LD_EXP 34
14963: AND
14964: IFFALSE 14984
14966: GO 14968
14968: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14969: LD_INT 1
14971: PPUSH
14972: LD_OWVAR 2
14976: PPUSH
14977: LD_INT 0
14979: PPUSH
14980: CALL_OW 324
14984: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14985: LD_EXP 19
14989: PUSH
14990: LD_EXP 35
14994: AND
14995: IFFALSE 15078
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15004: LD_ADDR_VAR 0 2
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 2
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15078
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 2
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15076
// SetBLevel ( i , 10 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 10
15069: PPUSH
15070: CALL_OW 241
15074: GO 15059
15076: POP
15077: POP
// end ;
15078: PPOPN 2
15080: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 36
15090: AND
15091: IFFALSE 15202
15093: GO 15095
15095: DISABLE
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15101: LD_ADDR_VAR 0 3
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_OWVAR 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 25
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 3
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15202
// un := tmp [ rand ( 1 , tmp ) ] ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_VAR 0 3
15155: PUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: CALL_OW 12
15168: ARRAY
15169: ST_TO_ADDR
// if Crawls ( un ) then
15170: LD_VAR 0 2
15174: PPUSH
15175: CALL_OW 318
15179: IFFALSE 15190
// ComWalk ( un ) ;
15181: LD_VAR 0 2
15185: PPUSH
15186: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15190: LD_VAR 0 2
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 336
// end ;
15202: PPOPN 3
15204: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15205: LD_EXP 19
15209: PUSH
15210: LD_EXP 37
15214: AND
15215: PUSH
15216: LD_OWVAR 67
15220: PUSH
15221: LD_INT 4
15223: LESS
15224: AND
15225: IFFALSE 15244
15227: GO 15229
15229: DISABLE
// begin Difficulty := Difficulty + 1 ;
15230: LD_ADDR_OWVAR 67
15234: PUSH
15235: LD_OWVAR 67
15239: PUSH
15240: LD_INT 1
15242: PLUS
15243: ST_TO_ADDR
// end ;
15244: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15245: LD_EXP 19
15249: PUSH
15250: LD_EXP 38
15254: AND
15255: IFFALSE 15358
15257: GO 15259
15259: DISABLE
15260: LD_INT 0
15262: PPUSH
// begin for i := 1 to 5 do
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: DOUBLE
15269: LD_INT 1
15271: DEC
15272: ST_TO_ADDR
15273: LD_INT 5
15275: PUSH
15276: FOR_TO
15277: IFFALSE 15356
// begin uc_nation := nation_nature ;
15279: LD_ADDR_OWVAR 21
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// uc_side := 0 ;
15287: LD_ADDR_OWVAR 20
15291: PUSH
15292: LD_INT 0
15294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15295: LD_ADDR_OWVAR 29
15299: PUSH
15300: LD_INT 12
15302: PUSH
15303: LD_INT 12
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: ST_TO_ADDR
// hc_agressivity := 20 ;
15310: LD_ADDR_OWVAR 35
15314: PUSH
15315: LD_INT 20
15317: ST_TO_ADDR
// hc_class := class_tiger ;
15318: LD_ADDR_OWVAR 28
15322: PUSH
15323: LD_INT 14
15325: ST_TO_ADDR
// hc_gallery :=  ;
15326: LD_ADDR_OWVAR 33
15330: PUSH
15331: LD_STRING 
15333: ST_TO_ADDR
// hc_name :=  ;
15334: LD_ADDR_OWVAR 26
15338: PUSH
15339: LD_STRING 
15341: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15342: CALL_OW 44
15346: PPUSH
15347: LD_INT 0
15349: PPUSH
15350: CALL_OW 51
// end ;
15354: GO 15276
15356: POP
15357: POP
// end ;
15358: PPOPN 1
15360: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15361: LD_EXP 19
15365: PUSH
15366: LD_EXP 39
15370: AND
15371: IFFALSE 15380
15373: GO 15375
15375: DISABLE
// StreamSibBomb ;
15376: CALL 15381 0 0
15380: END
// export function StreamSibBomb ; var i , x , y ; begin
15381: LD_INT 0
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
// result := false ;
15387: LD_ADDR_VAR 0 1
15391: PUSH
15392: LD_INT 0
15394: ST_TO_ADDR
// for i := 1 to 16 do
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: DOUBLE
15401: LD_INT 1
15403: DEC
15404: ST_TO_ADDR
15405: LD_INT 16
15407: PUSH
15408: FOR_TO
15409: IFFALSE 15608
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15411: LD_ADDR_VAR 0 3
15415: PUSH
15416: LD_INT 10
15418: PUSH
15419: LD_INT 20
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 40
15427: PUSH
15428: LD_INT 50
15430: PUSH
15431: LD_INT 60
15433: PUSH
15434: LD_INT 70
15436: PUSH
15437: LD_INT 80
15439: PUSH
15440: LD_INT 90
15442: PUSH
15443: LD_INT 100
15445: PUSH
15446: LD_INT 110
15448: PUSH
15449: LD_INT 120
15451: PUSH
15452: LD_INT 130
15454: PUSH
15455: LD_INT 140
15457: PUSH
15458: LD_INT 150
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: PPUSH
15481: LD_INT 15
15483: PPUSH
15484: CALL_OW 12
15488: ARRAY
15489: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15490: LD_ADDR_VAR 0 4
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 20
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 40
15506: PUSH
15507: LD_INT 50
15509: PUSH
15510: LD_INT 60
15512: PUSH
15513: LD_INT 70
15515: PUSH
15516: LD_INT 80
15518: PUSH
15519: LD_INT 90
15521: PUSH
15522: LD_INT 100
15524: PUSH
15525: LD_INT 110
15527: PUSH
15528: LD_INT 120
15530: PUSH
15531: LD_INT 130
15533: PUSH
15534: LD_INT 140
15536: PUSH
15537: LD_INT 150
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_INT 15
15562: PPUSH
15563: CALL_OW 12
15567: ARRAY
15568: ST_TO_ADDR
// if ValidHex ( x , y ) then
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: CALL_OW 488
15583: IFFALSE 15606
// begin result := [ x , y ] ;
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_VAR 0 3
15594: PUSH
15595: LD_VAR 0 4
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: ST_TO_ADDR
// break ;
15604: GO 15608
// end ; end ;
15606: GO 15408
15608: POP
15609: POP
// if result then
15610: LD_VAR 0 1
15614: IFFALSE 15674
// begin ToLua ( playSibBomb() ) ;
15616: LD_STRING playSibBomb()
15618: PPUSH
15619: CALL_OW 559
// wait ( 0 0$14 ) ;
15623: LD_INT 490
15625: PPUSH
15626: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PPUSH
15639: LD_VAR 0 1
15643: PUSH
15644: LD_INT 2
15646: ARRAY
15647: PPUSH
15648: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 1
15665: PUSH
15666: LD_INT 2
15668: ARRAY
15669: PPUSH
15670: CALL_OW 429
// end ; end ;
15674: LD_VAR 0 1
15678: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15679: LD_EXP 19
15683: PUSH
15684: LD_EXP 41
15688: AND
15689: IFFALSE 15701
15691: GO 15693
15693: DISABLE
// YouLost (  ) ;
15694: LD_STRING 
15696: PPUSH
15697: CALL_OW 104
15701: END
// every 0 0$1 trigger StreamModeActive and sFog do
15702: LD_EXP 19
15706: PUSH
15707: LD_EXP 40
15711: AND
15712: IFFALSE 15726
15714: GO 15716
15716: DISABLE
// FogOff ( your_side ) ;
15717: LD_OWVAR 2
15721: PPUSH
15722: CALL_OW 344
15726: END
// every 0 0$1 trigger StreamModeActive and sSun do
15727: LD_EXP 19
15731: PUSH
15732: LD_EXP 42
15736: AND
15737: IFFALSE 15765
15739: GO 15741
15741: DISABLE
// begin solar_recharge_percent := 0 ;
15742: LD_ADDR_OWVAR 79
15746: PUSH
15747: LD_INT 0
15749: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15750: LD_INT 10500
15752: PPUSH
15753: CALL_OW 67
// solar_recharge_percent := 100 ;
15757: LD_ADDR_OWVAR 79
15761: PUSH
15762: LD_INT 100
15764: ST_TO_ADDR
// end ;
15765: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15766: LD_EXP 19
15770: PUSH
15771: LD_EXP 43
15775: AND
15776: IFFALSE 16015
15778: GO 15780
15780: DISABLE
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
15785: PPUSH
// begin tmp := [ ] ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: EMPTY
15792: ST_TO_ADDR
// for i := 1 to 6 do
15793: LD_ADDR_VAR 0 1
15797: PUSH
15798: DOUBLE
15799: LD_INT 1
15801: DEC
15802: ST_TO_ADDR
15803: LD_INT 6
15805: PUSH
15806: FOR_TO
15807: IFFALSE 15912
// begin uc_nation := nation_nature ;
15809: LD_ADDR_OWVAR 21
15813: PUSH
15814: LD_INT 0
15816: ST_TO_ADDR
// uc_side := 0 ;
15817: LD_ADDR_OWVAR 20
15821: PUSH
15822: LD_INT 0
15824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15825: LD_ADDR_OWVAR 29
15829: PUSH
15830: LD_INT 12
15832: PUSH
15833: LD_INT 12
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: ST_TO_ADDR
// hc_agressivity := 20 ;
15840: LD_ADDR_OWVAR 35
15844: PUSH
15845: LD_INT 20
15847: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15848: LD_ADDR_OWVAR 28
15852: PUSH
15853: LD_INT 17
15855: ST_TO_ADDR
// hc_gallery :=  ;
15856: LD_ADDR_OWVAR 33
15860: PUSH
15861: LD_STRING 
15863: ST_TO_ADDR
// hc_name :=  ;
15864: LD_ADDR_OWVAR 26
15868: PUSH
15869: LD_STRING 
15871: ST_TO_ADDR
// un := CreateHuman ;
15872: LD_ADDR_VAR 0 2
15876: PUSH
15877: CALL_OW 44
15881: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15882: LD_VAR 0 2
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 51
// tmp := tmp ^ un ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 2
15908: ADD
15909: ST_TO_ADDR
// end ;
15910: GO 15806
15912: POP
15913: POP
// repeat wait ( 0 0$1 ) ;
15914: LD_INT 35
15916: PPUSH
15917: CALL_OW 67
// for un in tmp do
15921: LD_ADDR_VAR 0 2
15925: PUSH
15926: LD_VAR 0 3
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16006
// begin if IsDead ( un ) then
15934: LD_VAR 0 2
15938: PPUSH
15939: CALL_OW 301
15943: IFFALSE 15963
// begin tmp := tmp diff un ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_VAR 0 3
15954: PUSH
15955: LD_VAR 0 2
15959: DIFF
15960: ST_TO_ADDR
// continue ;
15961: GO 15931
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15963: LD_VAR 0 2
15967: PPUSH
15968: LD_INT 3
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 69
15989: PPUSH
15990: LD_VAR 0 2
15994: PPUSH
15995: CALL_OW 74
15999: PPUSH
16000: CALL_OW 115
// end ;
16004: GO 15931
16006: POP
16007: POP
// until not tmp ;
16008: LD_VAR 0 3
16012: NOT
16013: IFFALSE 15914
// end ;
16015: PPOPN 3
16017: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16018: LD_EXP 19
16022: PUSH
16023: LD_EXP 44
16027: AND
16028: IFFALSE 16082
16030: GO 16032
16032: DISABLE
// begin ToLua ( displayTroll(); ) ;
16033: LD_STRING displayTroll();
16035: PPUSH
16036: CALL_OW 559
// wait ( 3 3$00 ) ;
16040: LD_INT 6300
16042: PPUSH
16043: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16047: LD_STRING hideTroll();
16049: PPUSH
16050: CALL_OW 559
// wait ( 1 1$00 ) ;
16054: LD_INT 2100
16056: PPUSH
16057: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16061: LD_STRING displayTroll();
16063: PPUSH
16064: CALL_OW 559
// wait ( 1 1$00 ) ;
16068: LD_INT 2100
16070: PPUSH
16071: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16075: LD_STRING hideTroll();
16077: PPUSH
16078: CALL_OW 559
// end ;
16082: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16083: LD_EXP 19
16087: PUSH
16088: LD_EXP 45
16092: AND
16093: IFFALSE 16156
16095: GO 16097
16097: DISABLE
16098: LD_INT 0
16100: PPUSH
// begin p := 0 ;
16101: LD_ADDR_VAR 0 1
16105: PUSH
16106: LD_INT 0
16108: ST_TO_ADDR
// repeat game_speed := 1 ;
16109: LD_ADDR_OWVAR 65
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16117: LD_INT 35
16119: PPUSH
16120: CALL_OW 67
// p := p + 1 ;
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_VAR 0 1
16133: PUSH
16134: LD_INT 1
16136: PLUS
16137: ST_TO_ADDR
// until p >= 60 ;
16138: LD_VAR 0 1
16142: PUSH
16143: LD_INT 60
16145: GREATEREQUAL
16146: IFFALSE 16109
// game_speed := 4 ;
16148: LD_ADDR_OWVAR 65
16152: PUSH
16153: LD_INT 4
16155: ST_TO_ADDR
// end ;
16156: PPOPN 1
16158: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16159: LD_EXP 19
16163: PUSH
16164: LD_EXP 46
16168: AND
16169: IFFALSE 16315
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16178: LD_ADDR_VAR 0 1
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_OWVAR 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 30
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 30
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PPUSH
16227: CALL_OW 69
16231: ST_TO_ADDR
// if not depot then
16232: LD_VAR 0 1
16236: NOT
16237: IFFALSE 16241
// exit ;
16239: GO 16315
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16241: LD_ADDR_VAR 0 2
16245: PUSH
16246: LD_VAR 0 1
16250: PUSH
16251: LD_INT 1
16253: PPUSH
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 12
16263: ARRAY
16264: PPUSH
16265: CALL_OW 274
16269: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: LD_INT 0
16280: PPUSH
16281: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16285: LD_VAR 0 2
16289: PPUSH
16290: LD_INT 2
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16300: LD_VAR 0 2
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: LD_INT 0
16310: PPUSH
16311: CALL_OW 277
// end ;
16315: PPOPN 2
16317: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16318: LD_EXP 19
16322: PUSH
16323: LD_EXP 47
16327: AND
16328: IFFALSE 16425
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16336: LD_ADDR_VAR 0 1
16340: PUSH
16341: LD_INT 22
16343: PUSH
16344: LD_OWVAR 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 21
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: LD_INT 23
16368: PUSH
16369: LD_INT 0
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL_OW 69
16389: ST_TO_ADDR
// if not tmp then
16390: LD_VAR 0 1
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16425
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 12
16416: ARRAY
16417: PPUSH
16418: LD_INT 200
16420: PPUSH
16421: CALL_OW 234
// end ;
16425: PPOPN 1
16427: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16428: LD_EXP 19
16432: PUSH
16433: LD_EXP 48
16437: AND
16438: IFFALSE 16517
16440: GO 16442
16442: DISABLE
16443: LD_INT 0
16445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16446: LD_ADDR_VAR 0 1
16450: PUSH
16451: LD_INT 22
16453: PUSH
16454: LD_OWVAR 2
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 21
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: ST_TO_ADDR
// if not tmp then
16482: LD_VAR 0 1
16486: NOT
16487: IFFALSE 16491
// exit ;
16489: GO 16517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16491: LD_VAR 0 1
16495: PUSH
16496: LD_INT 1
16498: PPUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 12
16508: ARRAY
16509: PPUSH
16510: LD_INT 60
16512: PPUSH
16513: CALL_OW 234
// end ;
16517: PPOPN 1
16519: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16520: LD_EXP 19
16524: PUSH
16525: LD_EXP 49
16529: AND
16530: IFFALSE 16629
16532: GO 16534
16534: DISABLE
16535: LD_INT 0
16537: PPUSH
16538: PPUSH
// begin enable ;
16539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 61
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: LD_INT 33
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: ST_TO_ADDR
// if not tmp then
16583: LD_VAR 0 1
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16629
// for i in tmp do
16592: LD_ADDR_VAR 0 2
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: FOR_IN
16603: IFFALSE 16627
// if IsControledBy ( i ) then
16605: LD_VAR 0 2
16609: PPUSH
16610: CALL_OW 312
16614: IFFALSE 16625
// ComUnlink ( i ) ;
16616: LD_VAR 0 2
16620: PPUSH
16621: CALL_OW 136
16625: GO 16602
16627: POP
16628: POP
// end ;
16629: PPOPN 2
16631: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16632: LD_EXP 19
16636: PUSH
16637: LD_EXP 50
16641: AND
16642: IFFALSE 16782
16644: GO 16646
16646: DISABLE
16647: LD_INT 0
16649: PPUSH
16650: PPUSH
// begin ToLua ( displayPowell(); ) ;
16651: LD_STRING displayPowell();
16653: PPUSH
16654: CALL_OW 559
// uc_side := 0 ;
16658: LD_ADDR_OWVAR 20
16662: PUSH
16663: LD_INT 0
16665: ST_TO_ADDR
// uc_nation := 2 ;
16666: LD_ADDR_OWVAR 21
16670: PUSH
16671: LD_INT 2
16673: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16674: LD_ADDR_OWVAR 37
16678: PUSH
16679: LD_INT 14
16681: ST_TO_ADDR
// vc_engine := engine_siberite ;
16682: LD_ADDR_OWVAR 39
16686: PUSH
16687: LD_INT 3
16689: ST_TO_ADDR
// vc_control := control_apeman ;
16690: LD_ADDR_OWVAR 38
16694: PUSH
16695: LD_INT 5
16697: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16698: LD_ADDR_OWVAR 40
16702: PUSH
16703: LD_INT 29
16705: ST_TO_ADDR
// un := CreateVehicle ;
16706: LD_ADDR_VAR 0 2
16710: PUSH
16711: CALL_OW 45
16715: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16728: LD_INT 35
16730: PPUSH
16731: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16735: LD_VAR 0 2
16739: PPUSH
16740: LD_INT 22
16742: PUSH
16743: LD_OWVAR 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PPUSH
16752: CALL_OW 69
16756: PPUSH
16757: LD_VAR 0 2
16761: PPUSH
16762: CALL_OW 74
16766: PPUSH
16767: CALL_OW 115
// until IsDead ( un ) ;
16771: LD_VAR 0 2
16775: PPUSH
16776: CALL_OW 301
16780: IFFALSE 16728
// end ;
16782: PPOPN 2
16784: END
// every 0 0$1 trigger StreamModeActive and sStu do
16785: LD_EXP 19
16789: PUSH
16790: LD_EXP 58
16794: AND
16795: IFFALSE 16811
16797: GO 16799
16799: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16800: LD_STRING displayStucuk();
16802: PPUSH
16803: CALL_OW 559
// ResetFog ;
16807: CALL_OW 335
// end ;
16811: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16812: LD_EXP 19
16816: PUSH
16817: LD_EXP 51
16821: AND
16822: IFFALSE 16963
16824: GO 16826
16826: DISABLE
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_OWVAR 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 21
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PPUSH
16862: CALL_OW 69
16866: ST_TO_ADDR
// if not tmp then
16867: LD_VAR 0 2
16871: NOT
16872: IFFALSE 16876
// exit ;
16874: GO 16963
// un := tmp [ rand ( 1 , tmp ) ] ;
16876: LD_ADDR_VAR 0 1
16880: PUSH
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 1
16888: PPUSH
16889: LD_VAR 0 2
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16912: LD_VAR 0 1
16916: PPUSH
16917: LD_OWVAR 3
16921: PUSH
16922: LD_VAR 0 1
16926: DIFF
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 74
16937: PPUSH
16938: CALL_OW 115
// wait ( 0 0$20 ) ;
16942: LD_INT 700
16944: PPUSH
16945: CALL_OW 67
// SetSide ( un , your_side ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_OWVAR 2
16958: PPUSH
16959: CALL_OW 235
// end ;
16963: PPOPN 2
16965: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16966: LD_EXP 19
16970: PUSH
16971: LD_EXP 52
16975: AND
16976: IFFALSE 17082
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16984: LD_ADDR_VAR 0 1
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_OWVAR 2
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 30
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 69
17037: ST_TO_ADDR
// if not depot then
17038: LD_VAR 0 1
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17082
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17047: LD_VAR 0 1
17051: PUSH
17052: LD_INT 1
17054: ARRAY
17055: PPUSH
17056: CALL_OW 250
17060: PPUSH
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 1
17068: ARRAY
17069: PPUSH
17070: CALL_OW 251
17074: PPUSH
17075: LD_INT 70
17077: PPUSH
17078: CALL_OW 495
// end ;
17082: PPOPN 1
17084: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17085: LD_EXP 19
17089: PUSH
17090: LD_EXP 53
17094: AND
17095: IFFALSE 17306
17097: GO 17099
17099: DISABLE
17100: LD_INT 0
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17107: LD_ADDR_VAR 0 5
17111: PUSH
17112: LD_INT 22
17114: PUSH
17115: LD_OWVAR 2
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 21
17126: PUSH
17127: LD_INT 1
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: ST_TO_ADDR
// if not tmp then
17143: LD_VAR 0 5
17147: NOT
17148: IFFALSE 17152
// exit ;
17150: GO 17306
// for i in tmp do
17152: LD_ADDR_VAR 0 1
17156: PUSH
17157: LD_VAR 0 5
17161: PUSH
17162: FOR_IN
17163: IFFALSE 17304
// begin d := rand ( 0 , 5 ) ;
17165: LD_ADDR_VAR 0 4
17169: PUSH
17170: LD_INT 0
17172: PPUSH
17173: LD_INT 5
17175: PPUSH
17176: CALL_OW 12
17180: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 250
17195: PPUSH
17196: LD_VAR 0 4
17200: PPUSH
17201: LD_INT 3
17203: PPUSH
17204: LD_INT 12
17206: PPUSH
17207: CALL_OW 12
17211: PPUSH
17212: CALL_OW 272
17216: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 251
17231: PPUSH
17232: LD_VAR 0 4
17236: PPUSH
17237: LD_INT 3
17239: PPUSH
17240: LD_INT 12
17242: PPUSH
17243: CALL_OW 12
17247: PPUSH
17248: CALL_OW 273
17252: ST_TO_ADDR
// if ValidHex ( x , y ) then
17253: LD_VAR 0 2
17257: PPUSH
17258: LD_VAR 0 3
17262: PPUSH
17263: CALL_OW 488
17267: IFFALSE 17302
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_VAR 0 2
17278: PPUSH
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_INT 3
17286: PPUSH
17287: LD_INT 6
17289: PPUSH
17290: CALL_OW 12
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: CALL_OW 483
// end ;
17302: GO 17162
17304: POP
17305: POP
// end ;
17306: PPOPN 5
17308: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17309: LD_EXP 19
17313: PUSH
17314: LD_EXP 54
17318: AND
17319: IFFALSE 17413
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17328: LD_ADDR_VAR 0 2
17332: PUSH
17333: LD_INT 22
17335: PUSH
17336: LD_OWVAR 2
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 32
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 21
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// if not tmp then
17375: LD_VAR 0 2
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17413
// for i in tmp do
17384: LD_ADDR_VAR 0 1
17388: PUSH
17389: LD_VAR 0 2
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17411
// SetFuel ( i , 0 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 0
17404: PPUSH
17405: CALL_OW 240
17409: GO 17394
17411: POP
17412: POP
// end ;
17413: PPOPN 2
17415: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17416: LD_EXP 19
17420: PUSH
17421: LD_EXP 55
17425: AND
17426: IFFALSE 17492
17428: GO 17430
17430: DISABLE
17431: LD_INT 0
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 29
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 1
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17492
// DestroyUnit ( tmp [ 1 ] ) ;
17479: LD_VAR 0 1
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PPUSH
17488: CALL_OW 65
// end ;
17492: PPOPN 1
17494: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17495: LD_EXP 19
17499: PUSH
17500: LD_EXP 57
17504: AND
17505: IFFALSE 17634
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
// begin uc_side := 0 ;
17513: LD_ADDR_OWVAR 20
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// uc_nation := nation_arabian ;
17521: LD_ADDR_OWVAR 21
17525: PUSH
17526: LD_INT 2
17528: ST_TO_ADDR
// hc_gallery :=  ;
17529: LD_ADDR_OWVAR 33
17533: PUSH
17534: LD_STRING 
17536: ST_TO_ADDR
// hc_name :=  ;
17537: LD_ADDR_OWVAR 26
17541: PUSH
17542: LD_STRING 
17544: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17545: LD_INT 1
17547: PPUSH
17548: LD_INT 11
17550: PPUSH
17551: LD_INT 10
17553: PPUSH
17554: CALL_OW 380
// un := CreateHuman ;
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: CALL_OW 44
17567: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_INT 22
17594: PUSH
17595: LD_OWVAR 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: PPUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 74
17618: PPUSH
17619: CALL_OW 115
// until IsDead ( un ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL_OW 301
17632: IFFALSE 17580
// end ;
17634: PPOPN 1
17636: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17637: LD_EXP 19
17641: PUSH
17642: LD_EXP 59
17646: AND
17647: IFFALSE 17659
17649: GO 17651
17651: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17652: LD_STRING earthquake(getX(game), 0, 32)
17654: PPUSH
17655: CALL_OW 559
17659: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17660: LD_EXP 19
17664: PUSH
17665: LD_EXP 60
17669: AND
17670: IFFALSE 17761
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
// begin enable ;
17678: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_OWVAR 2
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 21
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 33
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 1
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 1
17742: PPUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 12
17752: ARRAY
17753: PPUSH
17754: LD_INT 1
17756: PPUSH
17757: CALL_OW 234
// end ;
17761: PPOPN 1
17763: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17764: LD_EXP 19
17768: PUSH
17769: LD_EXP 61
17773: AND
17774: IFFALSE 17915
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
17782: PPUSH
17783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_INT 22
17791: PUSH
17792: LD_OWVAR 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 25
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 3
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17915
// un := tmp [ rand ( 1 , tmp ) ] ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_VAR 0 3
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: ST_TO_ADDR
// if Crawls ( un ) then
17853: LD_VAR 0 2
17857: PPUSH
17858: CALL_OW 318
17862: IFFALSE 17873
// ComWalk ( un ) ;
17864: LD_VAR 0 2
17868: PPUSH
17869: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17873: LD_VAR 0 2
17877: PPUSH
17878: LD_INT 9
17880: PPUSH
17881: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17885: LD_INT 28
17887: PPUSH
17888: LD_OWVAR 2
17892: PPUSH
17893: LD_INT 2
17895: PPUSH
17896: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17900: LD_INT 29
17902: PPUSH
17903: LD_OWVAR 2
17907: PPUSH
17908: LD_INT 2
17910: PPUSH
17911: CALL_OW 322
// end ;
17915: PPOPN 3
17917: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17918: LD_EXP 19
17922: PUSH
17923: LD_EXP 62
17927: AND
17928: IFFALSE 18039
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 3
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18039
// un := tmp [ rand ( 1 , tmp ) ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
// if Crawls ( un ) then
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 318
18016: IFFALSE 18027
// ComWalk ( un ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_INT 8
18034: PPUSH
18035: CALL_OW 336
// end ;
18039: PPOPN 3
18041: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18042: LD_EXP 19
18046: PUSH
18047: LD_EXP 63
18051: AND
18052: IFFALSE 18196
18054: GO 18056
18056: DISABLE
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 34
18093: PUSH
18094: LD_INT 12
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 34
18103: PUSH
18104: LD_INT 51
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 34
18113: PUSH
18114: LD_INT 32
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: ST_TO_ADDR
// if not tmp then
18137: LD_VAR 0 2
18141: NOT
18142: IFFALSE 18146
// exit ;
18144: GO 18196
// for i in tmp do
18146: LD_ADDR_VAR 0 1
18150: PUSH
18151: LD_VAR 0 2
18155: PUSH
18156: FOR_IN
18157: IFFALSE 18194
// if GetCargo ( i , mat_artifact ) = 0 then
18159: LD_VAR 0 1
18163: PPUSH
18164: LD_INT 4
18166: PPUSH
18167: CALL_OW 289
18171: PUSH
18172: LD_INT 0
18174: EQUAL
18175: IFFALSE 18192
// SetCargo ( i , mat_siberit , 100 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 3
18184: PPUSH
18185: LD_INT 100
18187: PPUSH
18188: CALL_OW 290
18192: GO 18156
18194: POP
18195: POP
// end ;
18196: PPOPN 2
18198: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18199: LD_EXP 19
18203: PUSH
18204: LD_EXP 64
18208: AND
18209: IFFALSE 18392
18211: GO 18213
18213: DISABLE
18214: LD_INT 0
18216: PPUSH
18217: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 22
18225: PUSH
18226: LD_OWVAR 2
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: ST_TO_ADDR
// if not tmp then
18240: LD_VAR 0 2
18244: NOT
18245: IFFALSE 18249
// exit ;
18247: GO 18392
// for i := 1 to 2 do
18249: LD_ADDR_VAR 0 1
18253: PUSH
18254: DOUBLE
18255: LD_INT 1
18257: DEC
18258: ST_TO_ADDR
18259: LD_INT 2
18261: PUSH
18262: FOR_TO
18263: IFFALSE 18390
// begin uc_side := your_side ;
18265: LD_ADDR_OWVAR 20
18269: PUSH
18270: LD_OWVAR 2
18274: ST_TO_ADDR
// uc_nation := nation_american ;
18275: LD_ADDR_OWVAR 21
18279: PUSH
18280: LD_INT 1
18282: ST_TO_ADDR
// vc_chassis := us_morphling ;
18283: LD_ADDR_OWVAR 37
18287: PUSH
18288: LD_INT 5
18290: ST_TO_ADDR
// vc_engine := engine_siberite ;
18291: LD_ADDR_OWVAR 39
18295: PUSH
18296: LD_INT 3
18298: ST_TO_ADDR
// vc_control := control_computer ;
18299: LD_ADDR_OWVAR 38
18303: PUSH
18304: LD_INT 3
18306: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18307: LD_ADDR_OWVAR 40
18311: PUSH
18312: LD_INT 10
18314: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18315: LD_VAR 0 2
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PPUSH
18324: CALL_OW 310
18328: NOT
18329: IFFALSE 18376
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18331: CALL_OW 45
18335: PPUSH
18336: LD_VAR 0 2
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL_OW 250
18349: PPUSH
18350: LD_VAR 0 2
18354: PUSH
18355: LD_INT 1
18357: ARRAY
18358: PPUSH
18359: CALL_OW 251
18363: PPUSH
18364: LD_INT 12
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 50
18374: GO 18388
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18376: CALL_OW 45
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL_OW 51
// end ;
18388: GO 18262
18390: POP
18391: POP
// end ;
18392: PPOPN 2
18394: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18395: LD_EXP 19
18399: PUSH
18400: LD_EXP 65
18404: AND
18405: IFFALSE 18627
18407: GO 18409
18409: DISABLE
18410: LD_INT 0
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18418: LD_ADDR_VAR 0 6
18422: PUSH
18423: LD_INT 22
18425: PUSH
18426: LD_OWVAR 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 21
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 3
18447: PUSH
18448: LD_INT 23
18450: PUSH
18451: LD_INT 0
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 6
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18627
// s1 := rand ( 1 , 4 ) ;
18481: LD_ADDR_VAR 0 2
18485: PUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 4
18491: PPUSH
18492: CALL_OW 12
18496: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18497: LD_ADDR_VAR 0 4
18501: PUSH
18502: LD_VAR 0 6
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: PPUSH
18511: LD_VAR 0 2
18515: PPUSH
18516: CALL_OW 259
18520: ST_TO_ADDR
// if s1 = 1 then
18521: LD_VAR 0 2
18525: PUSH
18526: LD_INT 1
18528: EQUAL
18529: IFFALSE 18549
// s2 := rand ( 2 , 4 ) else
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_INT 2
18538: PPUSH
18539: LD_INT 4
18541: PPUSH
18542: CALL_OW 12
18546: ST_TO_ADDR
18547: GO 18557
// s2 := 1 ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 1
18556: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18557: LD_ADDR_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_INT 1
18569: ARRAY
18570: PPUSH
18571: LD_VAR 0 3
18575: PPUSH
18576: CALL_OW 259
18580: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18581: LD_VAR 0 6
18585: PUSH
18586: LD_INT 1
18588: ARRAY
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_VAR 0 5
18599: PPUSH
18600: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18604: LD_VAR 0 6
18608: PUSH
18609: LD_INT 1
18611: ARRAY
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: LD_VAR 0 4
18622: PPUSH
18623: CALL_OW 237
// end ;
18627: PPOPN 6
18629: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18630: LD_EXP 19
18634: PUSH
18635: LD_EXP 66
18639: AND
18640: IFFALSE 18719
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_OWVAR 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 30
18667: PUSH
18668: LD_INT 3
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 12
18710: ARRAY
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 234
// end ;
18719: PPOPN 1
18721: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18722: LD_EXP 19
18726: PUSH
18727: LD_EXP 67
18731: AND
18732: IFFALSE 18844
18734: GO 18736
18736: DISABLE
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18741: LD_ADDR_VAR 0 2
18745: PUSH
18746: LD_INT 22
18748: PUSH
18749: LD_OWVAR 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 30
18763: PUSH
18764: LD_INT 27
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 30
18773: PUSH
18774: LD_INT 26
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 30
18783: PUSH
18784: LD_INT 28
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: ST_TO_ADDR
// if not tmp then
18806: LD_VAR 0 2
18810: NOT
18811: IFFALSE 18815
// exit ;
18813: GO 18844
// for i in tmp do
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_VAR 0 2
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18842
// SetLives ( i , 1 ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: CALL_OW 234
18840: GO 18825
18842: POP
18843: POP
// end ;
18844: PPOPN 2
18846: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18847: LD_EXP 19
18851: PUSH
18852: LD_EXP 68
18856: AND
18857: IFFALSE 19144
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
// begin i := rand ( 1 , 7 ) ;
18867: LD_ADDR_VAR 0 1
18871: PUSH
18872: LD_INT 1
18874: PPUSH
18875: LD_INT 7
18877: PPUSH
18878: CALL_OW 12
18882: ST_TO_ADDR
// case i of 1 :
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 1
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18906
18896: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18897: LD_STRING earthquake(getX(game), 0, 32)
18899: PPUSH
18900: CALL_OW 559
18904: GO 19144
18906: LD_INT 2
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18928
18914: POP
// begin ToLua ( displayStucuk(); ) ;
18915: LD_STRING displayStucuk();
18917: PPUSH
18918: CALL_OW 559
// ResetFog ;
18922: CALL_OW 335
// end ; 3 :
18926: GO 19144
18928: LD_INT 3
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 19040
18936: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18937: LD_ADDR_VAR 0 2
18941: PUSH
18942: LD_INT 22
18944: PUSH
18945: LD_OWVAR 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 25
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 69
18972: ST_TO_ADDR
// if not tmp then
18973: LD_VAR 0 2
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 19144
// un := tmp [ rand ( 1 , tmp ) ] ;
18982: LD_ADDR_VAR 0 3
18986: PUSH
18987: LD_VAR 0 2
18991: PUSH
18992: LD_INT 1
18994: PPUSH
18995: LD_VAR 0 2
18999: PPUSH
19000: CALL_OW 12
19004: ARRAY
19005: ST_TO_ADDR
// if Crawls ( un ) then
19006: LD_VAR 0 3
19010: PPUSH
19011: CALL_OW 318
19015: IFFALSE 19026
// ComWalk ( un ) ;
19017: LD_VAR 0 3
19021: PPUSH
19022: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19026: LD_VAR 0 3
19030: PPUSH
19031: LD_INT 8
19033: PPUSH
19034: CALL_OW 336
// end ; 4 :
19038: GO 19144
19040: LD_INT 4
19042: DOUBLE
19043: EQUAL
19044: IFTRUE 19048
19046: GO 19122
19048: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 29
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: ST_TO_ADDR
// if not tmp then
19085: LD_VAR 0 2
19089: NOT
19090: IFFALSE 19094
// exit ;
19092: GO 19144
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19094: LD_VAR 0 2
19098: PUSH
19099: LD_INT 1
19101: ARRAY
19102: PPUSH
19103: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19107: LD_VAR 0 2
19111: PUSH
19112: LD_INT 1
19114: ARRAY
19115: PPUSH
19116: CALL_OW 65
// end ; 5 .. 7 :
19120: GO 19144
19122: LD_INT 5
19124: DOUBLE
19125: GREATEREQUAL
19126: IFFALSE 19134
19128: LD_INT 7
19130: DOUBLE
19131: LESSEQUAL
19132: IFTRUE 19136
19134: GO 19143
19136: POP
// StreamSibBomb ; end ;
19137: CALL 15381 0 0
19141: GO 19144
19143: POP
// end ;
19144: PPOPN 3
19146: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19147: LD_EXP 19
19151: PUSH
19152: LD_EXP 69
19156: AND
19157: IFFALSE 19313
19159: GO 19161
19161: DISABLE
19162: LD_INT 0
19164: PPUSH
19165: PPUSH
19166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19167: LD_ADDR_VAR 0 2
19171: PUSH
19172: LD_INT 81
19174: PUSH
19175: LD_OWVAR 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 21
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: ST_TO_ADDR
// if not tmp then
19221: LD_VAR 0 2
19225: NOT
19226: IFFALSE 19230
// exit ;
19228: GO 19313
// p := 0 ;
19230: LD_ADDR_VAR 0 3
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19238: LD_INT 35
19240: PPUSH
19241: CALL_OW 67
// p := p + 1 ;
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 1
19257: PLUS
19258: ST_TO_ADDR
// for i in tmp do
19259: LD_ADDR_VAR 0 1
19263: PUSH
19264: LD_VAR 0 2
19268: PUSH
19269: FOR_IN
19270: IFFALSE 19301
// if GetLives ( i ) < 1000 then
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL_OW 256
19281: PUSH
19282: LD_INT 1000
19284: LESS
19285: IFFALSE 19299
// SetLives ( i , 1000 ) ;
19287: LD_VAR 0 1
19291: PPUSH
19292: LD_INT 1000
19294: PPUSH
19295: CALL_OW 234
19299: GO 19269
19301: POP
19302: POP
// until p > 20 ;
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 20
19310: GREATER
19311: IFFALSE 19238
// end ;
19313: PPOPN 3
19315: END
// every 0 0$1 trigger StreamModeActive and sTime do
19316: LD_EXP 19
19320: PUSH
19321: LD_EXP 70
19325: AND
19326: IFFALSE 19361
19328: GO 19330
19330: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19331: LD_INT 28
19333: PPUSH
19334: LD_OWVAR 2
19338: PPUSH
19339: LD_INT 2
19341: PPUSH
19342: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19346: LD_INT 30
19348: PPUSH
19349: LD_OWVAR 2
19353: PPUSH
19354: LD_INT 2
19356: PPUSH
19357: CALL_OW 322
// end ;
19361: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19362: LD_EXP 19
19366: PUSH
19367: LD_EXP 71
19371: AND
19372: IFFALSE 19493
19374: GO 19376
19376: DISABLE
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 23
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: ST_TO_ADDR
// if not tmp then
19435: LD_VAR 0 2
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19493
// for i in tmp do
19444: LD_ADDR_VAR 0 1
19448: PUSH
19449: LD_VAR 0 2
19453: PUSH
19454: FOR_IN
19455: IFFALSE 19491
// begin if Crawls ( i ) then
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 318
19466: IFFALSE 19477
// ComWalk ( i ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: CALL_OW 138
// SetClass ( i , 2 ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_INT 2
19484: PPUSH
19485: CALL_OW 336
// end ;
19489: GO 19454
19491: POP
19492: POP
// end ;
19493: PPOPN 2
19495: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19496: LD_EXP 19
19500: PUSH
19501: LD_EXP 72
19505: AND
19506: IFFALSE 19794
19508: GO 19510
19510: DISABLE
19511: LD_INT 0
19513: PPUSH
19514: PPUSH
19515: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19516: LD_OWVAR 2
19520: PPUSH
19521: LD_INT 9
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19534: LD_INT 9
19536: PPUSH
19537: LD_OWVAR 2
19541: PPUSH
19542: CALL_OW 343
// uc_side := 9 ;
19546: LD_ADDR_OWVAR 20
19550: PUSH
19551: LD_INT 9
19553: ST_TO_ADDR
// uc_nation := 2 ;
19554: LD_ADDR_OWVAR 21
19558: PUSH
19559: LD_INT 2
19561: ST_TO_ADDR
// hc_name := Dark Warrior ;
19562: LD_ADDR_OWVAR 26
19566: PUSH
19567: LD_STRING Dark Warrior
19569: ST_TO_ADDR
// hc_gallery :=  ;
19570: LD_ADDR_OWVAR 33
19574: PUSH
19575: LD_STRING 
19577: ST_TO_ADDR
// hc_noskilllimit := true ;
19578: LD_ADDR_OWVAR 76
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19586: LD_ADDR_OWVAR 31
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: ST_TO_ADDR
// un := CreateHuman ;
19609: LD_ADDR_VAR 0 3
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// hc_noskilllimit := false ;
19619: LD_ADDR_OWVAR 76
19623: PUSH
19624: LD_INT 0
19626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19627: LD_VAR 0 3
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: CALL_OW 51
// ToLua ( playRanger() ) ;
19639: LD_STRING playRanger()
19641: PPUSH
19642: CALL_OW 559
// p := 0 ;
19646: LD_ADDR_VAR 0 2
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19654: LD_INT 35
19656: PPUSH
19657: CALL_OW 67
// p := p + 1 ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_VAR 0 2
19670: PUSH
19671: LD_INT 1
19673: PLUS
19674: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19675: LD_VAR 0 3
19679: PPUSH
19680: CALL_OW 256
19684: PUSH
19685: LD_INT 1000
19687: LESS
19688: IFFALSE 19702
// SetLives ( un , 1000 ) ;
19690: LD_VAR 0 3
19694: PPUSH
19695: LD_INT 1000
19697: PPUSH
19698: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19702: LD_VAR 0 3
19706: PPUSH
19707: LD_INT 81
19709: PUSH
19710: LD_OWVAR 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 91
19721: PUSH
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 30
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PPUSH
19739: CALL_OW 69
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL_OW 74
19753: PPUSH
19754: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19758: LD_VAR 0 2
19762: PUSH
19763: LD_INT 80
19765: GREATER
19766: PUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: CALL_OW 301
19776: OR
19777: IFFALSE 19654
// if un then
19779: LD_VAR 0 3
19783: IFFALSE 19794
// RemoveUnit ( un ) ;
19785: LD_VAR 0 3
19789: PPUSH
19790: CALL_OW 64
// end ;
19794: PPOPN 3
19796: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19797: LD_EXP 73
19801: IFFALSE 19917
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
19809: PPUSH
19810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_INT 81
19818: PUSH
19819: LD_OWVAR 2
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 21
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19847: LD_STRING playComputer()
19849: PPUSH
19850: CALL_OW 559
// if not tmp then
19854: LD_VAR 0 2
19858: NOT
19859: IFFALSE 19863
// exit ;
19861: GO 19917
// for i in tmp do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: LD_VAR 0 2
19872: PUSH
19873: FOR_IN
19874: IFFALSE 19915
// for j := 1 to 4 do
19876: LD_ADDR_VAR 0 3
19880: PUSH
19881: DOUBLE
19882: LD_INT 1
19884: DEC
19885: ST_TO_ADDR
19886: LD_INT 4
19888: PUSH
19889: FOR_TO
19890: IFFALSE 19911
// SetSkill ( i , j , 10 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: LD_INT 10
19904: PPUSH
19905: CALL_OW 237
19909: GO 19889
19911: POP
19912: POP
19913: GO 19873
19915: POP
19916: POP
// end ;
19917: PPOPN 3
19919: END
// every 0 0$1 trigger s30 do var i , tmp ;
19920: LD_EXP 74
19924: IFFALSE 19993
19926: GO 19928
19928: DISABLE
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_OWVAR 2
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: ST_TO_ADDR
// if not tmp then
19955: LD_VAR 0 2
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 19993
// for i in tmp do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_VAR 0 2
19973: PUSH
19974: FOR_IN
19975: IFFALSE 19991
// SetLives ( i , 300 ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: LD_INT 300
19984: PPUSH
19985: CALL_OW 234
19989: GO 19974
19991: POP
19992: POP
// end ;
19993: PPOPN 2
19995: END
// every 0 0$1 trigger s60 do var i , tmp ;
19996: LD_EXP 75
20000: IFFALSE 20069
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// if not tmp then
20031: LD_VAR 0 2
20035: NOT
20036: IFFALSE 20040
// exit ;
20038: GO 20069
// for i in tmp do
20040: LD_ADDR_VAR 0 1
20044: PUSH
20045: LD_VAR 0 2
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20067
// SetLives ( i , 600 ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: LD_INT 600
20060: PPUSH
20061: CALL_OW 234
20065: GO 20050
20067: POP
20068: POP
// end ;
20069: PPOPN 2
20071: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20072: LD_INT 0
20074: PPUSH
// case cmd of 301 :
20075: LD_VAR 0 1
20079: PUSH
20080: LD_INT 301
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20120
20088: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20089: LD_VAR 0 6
20093: PPUSH
20094: LD_VAR 0 7
20098: PPUSH
20099: LD_VAR 0 8
20103: PPUSH
20104: LD_VAR 0 4
20108: PPUSH
20109: LD_VAR 0 5
20113: PPUSH
20114: CALL 21321 0 5
20118: GO 20241
20120: LD_INT 302
20122: DOUBLE
20123: EQUAL
20124: IFTRUE 20128
20126: GO 20165
20128: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20129: LD_VAR 0 6
20133: PPUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: LD_VAR 0 8
20143: PPUSH
20144: LD_VAR 0 9
20148: PPUSH
20149: LD_VAR 0 4
20153: PPUSH
20154: LD_VAR 0 5
20158: PPUSH
20159: CALL 21412 0 6
20163: GO 20241
20165: LD_INT 303
20167: DOUBLE
20168: EQUAL
20169: IFTRUE 20173
20171: GO 20210
20173: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20174: LD_VAR 0 6
20178: PPUSH
20179: LD_VAR 0 7
20183: PPUSH
20184: LD_VAR 0 8
20188: PPUSH
20189: LD_VAR 0 9
20193: PPUSH
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL 20246 0 6
20208: GO 20241
20210: LD_INT 304
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20240
20218: POP
// hHackTeleport ( unit , x , y ) ; end ;
20219: LD_VAR 0 2
20223: PPUSH
20224: LD_VAR 0 4
20228: PPUSH
20229: LD_VAR 0 5
20233: PPUSH
20234: CALL 22005 0 3
20238: GO 20241
20240: POP
// end ;
20241: LD_VAR 0 12
20245: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 1
20257: LESS
20258: PUSH
20259: LD_VAR 0 1
20263: PUSH
20264: LD_INT 3
20266: GREATER
20267: OR
20268: PUSH
20269: LD_VAR 0 5
20273: PPUSH
20274: LD_VAR 0 6
20278: PPUSH
20279: CALL_OW 428
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 21008
// uc_side := your_side ;
20288: LD_ADDR_OWVAR 20
20292: PUSH
20293: LD_OWVAR 2
20297: ST_TO_ADDR
// uc_nation := nation ;
20298: LD_ADDR_OWVAR 21
20302: PUSH
20303: LD_VAR 0 1
20307: ST_TO_ADDR
// bc_level = 1 ;
20308: LD_ADDR_OWVAR 43
20312: PUSH
20313: LD_INT 1
20315: ST_TO_ADDR
// case btype of 1 :
20316: LD_VAR 0 2
20320: PUSH
20321: LD_INT 1
20323: DOUBLE
20324: EQUAL
20325: IFTRUE 20329
20327: GO 20340
20329: POP
// bc_type := b_depot ; 2 :
20330: LD_ADDR_OWVAR 42
20334: PUSH
20335: LD_INT 0
20337: ST_TO_ADDR
20338: GO 20952
20340: LD_INT 2
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20359
20348: POP
// bc_type := b_warehouse ; 3 :
20349: LD_ADDR_OWVAR 42
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
20357: GO 20952
20359: LD_INT 3
20361: DOUBLE
20362: EQUAL
20363: IFTRUE 20367
20365: GO 20378
20367: POP
// bc_type := b_lab ; 4 .. 9 :
20368: LD_ADDR_OWVAR 42
20372: PUSH
20373: LD_INT 6
20375: ST_TO_ADDR
20376: GO 20952
20378: LD_INT 4
20380: DOUBLE
20381: GREATEREQUAL
20382: IFFALSE 20390
20384: LD_INT 9
20386: DOUBLE
20387: LESSEQUAL
20388: IFTRUE 20392
20390: GO 20444
20392: POP
// begin bc_type := b_lab_half ;
20393: LD_ADDR_OWVAR 42
20397: PUSH
20398: LD_INT 7
20400: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20401: LD_ADDR_OWVAR 44
20405: PUSH
20406: LD_INT 10
20408: PUSH
20409: LD_INT 11
20411: PUSH
20412: LD_INT 12
20414: PUSH
20415: LD_INT 15
20417: PUSH
20418: LD_INT 14
20420: PUSH
20421: LD_INT 13
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: LD_VAR 0 2
20436: PUSH
20437: LD_INT 3
20439: MINUS
20440: ARRAY
20441: ST_TO_ADDR
// end ; 10 .. 13 :
20442: GO 20952
20444: LD_INT 10
20446: DOUBLE
20447: GREATEREQUAL
20448: IFFALSE 20456
20450: LD_INT 13
20452: DOUBLE
20453: LESSEQUAL
20454: IFTRUE 20458
20456: GO 20535
20458: POP
// begin bc_type := b_lab_full ;
20459: LD_ADDR_OWVAR 42
20463: PUSH
20464: LD_INT 8
20466: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20467: LD_ADDR_OWVAR 44
20471: PUSH
20472: LD_INT 10
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 14
20480: PUSH
20481: LD_INT 13
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: LD_VAR 0 2
20494: PUSH
20495: LD_INT 9
20497: MINUS
20498: ARRAY
20499: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20500: LD_ADDR_OWVAR 45
20504: PUSH
20505: LD_INT 11
20507: PUSH
20508: LD_INT 15
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: LD_INT 15
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: PUSH
20523: LD_VAR 0 2
20527: PUSH
20528: LD_INT 9
20530: MINUS
20531: ARRAY
20532: ST_TO_ADDR
// end ; 14 :
20533: GO 20952
20535: LD_INT 14
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20554
20543: POP
// bc_type := b_workshop ; 15 :
20544: LD_ADDR_OWVAR 42
20548: PUSH
20549: LD_INT 2
20551: ST_TO_ADDR
20552: GO 20952
20554: LD_INT 15
20556: DOUBLE
20557: EQUAL
20558: IFTRUE 20562
20560: GO 20573
20562: POP
// bc_type := b_factory ; 16 :
20563: LD_ADDR_OWVAR 42
20567: PUSH
20568: LD_INT 3
20570: ST_TO_ADDR
20571: GO 20952
20573: LD_INT 16
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20592
20581: POP
// bc_type := b_ext_gun ; 17 :
20582: LD_ADDR_OWVAR 42
20586: PUSH
20587: LD_INT 17
20589: ST_TO_ADDR
20590: GO 20952
20592: LD_INT 17
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20628
20600: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20601: LD_ADDR_OWVAR 42
20605: PUSH
20606: LD_INT 19
20608: PUSH
20609: LD_INT 23
20611: PUSH
20612: LD_INT 19
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: PUSH
20620: LD_VAR 0 1
20624: ARRAY
20625: ST_TO_ADDR
20626: GO 20952
20628: LD_INT 18
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_ext_radar ; 19 :
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 20
20644: ST_TO_ADDR
20645: GO 20952
20647: LD_INT 19
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20666
20655: POP
// bc_type := b_ext_radio ; 20 :
20656: LD_ADDR_OWVAR 42
20660: PUSH
20661: LD_INT 22
20663: ST_TO_ADDR
20664: GO 20952
20666: LD_INT 20
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20685
20674: POP
// bc_type := b_ext_siberium ; 21 :
20675: LD_ADDR_OWVAR 42
20679: PUSH
20680: LD_INT 21
20682: ST_TO_ADDR
20683: GO 20952
20685: LD_INT 21
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20704
20693: POP
// bc_type := b_ext_computer ; 22 :
20694: LD_ADDR_OWVAR 42
20698: PUSH
20699: LD_INT 24
20701: ST_TO_ADDR
20702: GO 20952
20704: LD_INT 22
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20723
20712: POP
// bc_type := b_ext_track ; 23 :
20713: LD_ADDR_OWVAR 42
20717: PUSH
20718: LD_INT 16
20720: ST_TO_ADDR
20721: GO 20952
20723: LD_INT 23
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20742
20731: POP
// bc_type := b_ext_laser ; 24 :
20732: LD_ADDR_OWVAR 42
20736: PUSH
20737: LD_INT 25
20739: ST_TO_ADDR
20740: GO 20952
20742: LD_INT 24
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20761
20750: POP
// bc_type := b_control_tower ; 25 :
20751: LD_ADDR_OWVAR 42
20755: PUSH
20756: LD_INT 36
20758: ST_TO_ADDR
20759: GO 20952
20761: LD_INT 25
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20769
20767: GO 20780
20769: POP
// bc_type := b_breastwork ; 26 :
20770: LD_ADDR_OWVAR 42
20774: PUSH
20775: LD_INT 31
20777: ST_TO_ADDR
20778: GO 20952
20780: LD_INT 26
20782: DOUBLE
20783: EQUAL
20784: IFTRUE 20788
20786: GO 20799
20788: POP
// bc_type := b_bunker ; 27 :
20789: LD_ADDR_OWVAR 42
20793: PUSH
20794: LD_INT 32
20796: ST_TO_ADDR
20797: GO 20952
20799: LD_INT 27
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20818
20807: POP
// bc_type := b_turret ; 28 :
20808: LD_ADDR_OWVAR 42
20812: PUSH
20813: LD_INT 33
20815: ST_TO_ADDR
20816: GO 20952
20818: LD_INT 28
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 20837
20826: POP
// bc_type := b_armoury ; 29 :
20827: LD_ADDR_OWVAR 42
20831: PUSH
20832: LD_INT 4
20834: ST_TO_ADDR
20835: GO 20952
20837: LD_INT 29
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20856
20845: POP
// bc_type := b_barracks ; 30 :
20846: LD_ADDR_OWVAR 42
20850: PUSH
20851: LD_INT 5
20853: ST_TO_ADDR
20854: GO 20952
20856: LD_INT 30
20858: DOUBLE
20859: EQUAL
20860: IFTRUE 20864
20862: GO 20875
20864: POP
// bc_type := b_solar_power ; 31 :
20865: LD_ADDR_OWVAR 42
20869: PUSH
20870: LD_INT 27
20872: ST_TO_ADDR
20873: GO 20952
20875: LD_INT 31
20877: DOUBLE
20878: EQUAL
20879: IFTRUE 20883
20881: GO 20894
20883: POP
// bc_type := b_oil_power ; 32 :
20884: LD_ADDR_OWVAR 42
20888: PUSH
20889: LD_INT 26
20891: ST_TO_ADDR
20892: GO 20952
20894: LD_INT 32
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20913
20902: POP
// bc_type := b_siberite_power ; 33 :
20903: LD_ADDR_OWVAR 42
20907: PUSH
20908: LD_INT 28
20910: ST_TO_ADDR
20911: GO 20952
20913: LD_INT 33
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20932
20921: POP
// bc_type := b_oil_mine ; 34 :
20922: LD_ADDR_OWVAR 42
20926: PUSH
20927: LD_INT 29
20929: ST_TO_ADDR
20930: GO 20952
20932: LD_INT 34
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20951
20940: POP
// bc_type := b_siberite_mine ; end ;
20941: LD_ADDR_OWVAR 42
20945: PUSH
20946: LD_INT 30
20948: ST_TO_ADDR
20949: GO 20952
20951: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: LD_VAR 0 5
20961: PPUSH
20962: LD_VAR 0 6
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: CALL_OW 47
20976: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20977: LD_OWVAR 42
20981: PUSH
20982: LD_INT 32
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: IN
20992: IFFALSE 21008
// PlaceWeaponTurret ( b , weapon ) ;
20994: LD_VAR 0 8
20998: PPUSH
20999: LD_VAR 0 4
21003: PPUSH
21004: CALL_OW 431
// end ;
21008: LD_VAR 0 7
21012: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21019: LD_ADDR_VAR 0 4
21023: PUSH
21024: LD_INT 22
21026: PUSH
21027: LD_OWVAR 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 30
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PPUSH
21068: CALL_OW 69
21072: ST_TO_ADDR
// if not tmp then
21073: LD_VAR 0 4
21077: NOT
21078: IFFALSE 21082
// exit ;
21080: GO 21141
// for i in tmp do
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_VAR 0 4
21091: PUSH
21092: FOR_IN
21093: IFFALSE 21139
// for j = 1 to 3 do
21095: LD_ADDR_VAR 0 3
21099: PUSH
21100: DOUBLE
21101: LD_INT 1
21103: DEC
21104: ST_TO_ADDR
21105: LD_INT 3
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21135
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21111: LD_VAR 0 2
21115: PPUSH
21116: CALL_OW 274
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: LD_INT 99999
21128: PPUSH
21129: CALL_OW 277
21133: GO 21108
21135: POP
21136: POP
21137: GO 21092
21139: POP
21140: POP
// end ;
21141: LD_VAR 0 1
21145: RET
// export function hHackSetLevel10 ; var i , j ; begin
21146: LD_INT 0
21148: PPUSH
21149: PPUSH
21150: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21151: LD_ADDR_VAR 0 2
21155: PUSH
21156: LD_INT 21
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21224
// if IsSelected ( i ) then
21174: LD_VAR 0 2
21178: PPUSH
21179: CALL_OW 306
21183: IFFALSE 21222
// begin for j := 1 to 4 do
21185: LD_ADDR_VAR 0 3
21189: PUSH
21190: DOUBLE
21191: LD_INT 1
21193: DEC
21194: ST_TO_ADDR
21195: LD_INT 4
21197: PUSH
21198: FOR_TO
21199: IFFALSE 21220
// SetSkill ( i , j , 10 ) ;
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: LD_INT 10
21213: PPUSH
21214: CALL_OW 237
21218: GO 21198
21220: POP
21221: POP
// end ;
21222: GO 21171
21224: POP
21225: POP
// end ;
21226: LD_VAR 0 1
21230: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21231: LD_INT 0
21233: PPUSH
21234: PPUSH
21235: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_OWVAR 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 21
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PPUSH
21267: CALL_OW 69
21271: PUSH
21272: FOR_IN
21273: IFFALSE 21314
// begin for j := 1 to 4 do
21275: LD_ADDR_VAR 0 3
21279: PUSH
21280: DOUBLE
21281: LD_INT 1
21283: DEC
21284: ST_TO_ADDR
21285: LD_INT 4
21287: PUSH
21288: FOR_TO
21289: IFFALSE 21310
// SetSkill ( i , j , 10 ) ;
21291: LD_VAR 0 2
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_INT 10
21303: PPUSH
21304: CALL_OW 237
21308: GO 21288
21310: POP
21311: POP
// end ;
21312: GO 21272
21314: POP
21315: POP
// end ;
21316: LD_VAR 0 1
21320: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21321: LD_INT 0
21323: PPUSH
// uc_side := your_side ;
21324: LD_ADDR_OWVAR 20
21328: PUSH
21329: LD_OWVAR 2
21333: ST_TO_ADDR
// uc_nation := nation ;
21334: LD_ADDR_OWVAR 21
21338: PUSH
21339: LD_VAR 0 1
21343: ST_TO_ADDR
// InitHc ;
21344: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21348: LD_INT 0
21350: PPUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21365: LD_VAR 0 4
21369: PPUSH
21370: LD_VAR 0 5
21374: PPUSH
21375: CALL_OW 428
21379: PUSH
21380: LD_INT 0
21382: EQUAL
21383: IFFALSE 21407
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21385: CALL_OW 44
21389: PPUSH
21390: LD_VAR 0 4
21394: PPUSH
21395: LD_VAR 0 5
21399: PPUSH
21400: LD_INT 1
21402: PPUSH
21403: CALL_OW 48
// end ;
21407: LD_VAR 0 6
21411: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21412: LD_INT 0
21414: PPUSH
21415: PPUSH
// uc_side := your_side ;
21416: LD_ADDR_OWVAR 20
21420: PUSH
21421: LD_OWVAR 2
21425: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21426: LD_VAR 0 1
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: LD_INT 4
21442: PUSH
21443: LD_INT 5
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: IN
21453: IFFALSE 21465
// uc_nation := nation_american else
21455: LD_ADDR_OWVAR 21
21459: PUSH
21460: LD_INT 1
21462: ST_TO_ADDR
21463: GO 21508
// if chassis in [ 11 , 12 , 13 , 14 ] then
21465: LD_VAR 0 1
21469: PUSH
21470: LD_INT 11
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: LD_INT 13
21478: PUSH
21479: LD_INT 14
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: IN
21488: IFFALSE 21500
// uc_nation := nation_arabian else
21490: LD_ADDR_OWVAR 21
21494: PUSH
21495: LD_INT 2
21497: ST_TO_ADDR
21498: GO 21508
// uc_nation := nation_russian ;
21500: LD_ADDR_OWVAR 21
21504: PUSH
21505: LD_INT 3
21507: ST_TO_ADDR
// vc_chassis := chassis ;
21508: LD_ADDR_OWVAR 37
21512: PUSH
21513: LD_VAR 0 1
21517: ST_TO_ADDR
// vc_engine := engine ;
21518: LD_ADDR_OWVAR 39
21522: PUSH
21523: LD_VAR 0 2
21527: ST_TO_ADDR
// vc_control := control ;
21528: LD_ADDR_OWVAR 38
21532: PUSH
21533: LD_VAR 0 3
21537: ST_TO_ADDR
// vc_weapon := weapon ;
21538: LD_ADDR_OWVAR 40
21542: PUSH
21543: LD_VAR 0 4
21547: ST_TO_ADDR
// un := CreateVehicle ;
21548: LD_ADDR_VAR 0 8
21552: PUSH
21553: CALL_OW 45
21557: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21558: LD_VAR 0 8
21562: PPUSH
21563: LD_INT 0
21565: PPUSH
21566: LD_INT 5
21568: PPUSH
21569: CALL_OW 12
21573: PPUSH
21574: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21578: LD_VAR 0 8
21582: PPUSH
21583: LD_VAR 0 5
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL_OW 48
// end ;
21600: LD_VAR 0 7
21604: RET
// export hInvincible ; every 1 do
21605: GO 21607
21607: DISABLE
// hInvincible := [ ] ;
21608: LD_ADDR_EXP 76
21612: PUSH
21613: EMPTY
21614: ST_TO_ADDR
21615: END
// every 10 do var i ;
21616: GO 21618
21618: DISABLE
21619: LD_INT 0
21621: PPUSH
// begin enable ;
21622: ENABLE
// if not hInvincible then
21623: LD_EXP 76
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21676
// for i in hInvincible do
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_EXP 76
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21674
// if GetLives ( i ) < 1000 then
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 256
21654: PUSH
21655: LD_INT 1000
21657: LESS
21658: IFFALSE 21672
// SetLives ( i , 1000 ) ;
21660: LD_VAR 0 1
21664: PPUSH
21665: LD_INT 1000
21667: PPUSH
21668: CALL_OW 234
21672: GO 21642
21674: POP
21675: POP
// end ;
21676: PPOPN 1
21678: END
// export function hHackInvincible ; var i ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21683: LD_ADDR_VAR 0 2
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: LD_INT 21
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 21
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: PUSH
21721: FOR_IN
21722: IFFALSE 21783
// if IsSelected ( i ) then
21724: LD_VAR 0 2
21728: PPUSH
21729: CALL_OW 306
21733: IFFALSE 21781
// begin if i in hInvincible then
21735: LD_VAR 0 2
21739: PUSH
21740: LD_EXP 76
21744: IN
21745: IFFALSE 21765
// hInvincible := hInvincible diff i else
21747: LD_ADDR_EXP 76
21751: PUSH
21752: LD_EXP 76
21756: PUSH
21757: LD_VAR 0 2
21761: DIFF
21762: ST_TO_ADDR
21763: GO 21781
// hInvincible := hInvincible union i ;
21765: LD_ADDR_EXP 76
21769: PUSH
21770: LD_EXP 76
21774: PUSH
21775: LD_VAR 0 2
21779: UNION
21780: ST_TO_ADDR
// end ;
21781: GO 21721
21783: POP
21784: POP
// end ;
21785: LD_VAR 0 1
21789: RET
// export function hHackInvisible ; var i , j ; begin
21790: LD_INT 0
21792: PPUSH
21793: PPUSH
21794: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21795: LD_ADDR_VAR 0 2
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: PUSH
21815: FOR_IN
21816: IFFALSE 21840
// if IsSelected ( i ) then
21818: LD_VAR 0 2
21822: PPUSH
21823: CALL_OW 306
21827: IFFALSE 21838
// ComForceInvisible ( i ) ;
21829: LD_VAR 0 2
21833: PPUSH
21834: CALL_OW 496
21838: GO 21815
21840: POP
21841: POP
// end ;
21842: LD_VAR 0 1
21846: RET
// export function hHackChangeYourSide ; begin
21847: LD_INT 0
21849: PPUSH
// if your_side = 8 then
21850: LD_OWVAR 2
21854: PUSH
21855: LD_INT 8
21857: EQUAL
21858: IFFALSE 21870
// your_side := 0 else
21860: LD_ADDR_OWVAR 2
21864: PUSH
21865: LD_INT 0
21867: ST_TO_ADDR
21868: GO 21884
// your_side := your_side + 1 ;
21870: LD_ADDR_OWVAR 2
21874: PUSH
21875: LD_OWVAR 2
21879: PUSH
21880: LD_INT 1
21882: PLUS
21883: ST_TO_ADDR
// end ;
21884: LD_VAR 0 1
21888: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// for i in all_units do
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_OWVAR 3
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21983
// if IsSelected ( i ) then
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 306
21916: IFFALSE 21981
// begin j := GetSide ( i ) ;
21918: LD_ADDR_VAR 0 3
21922: PUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: CALL_OW 255
21932: ST_TO_ADDR
// if j = 8 then
21933: LD_VAR 0 3
21937: PUSH
21938: LD_INT 8
21940: EQUAL
21941: IFFALSE 21953
// j := 0 else
21943: LD_ADDR_VAR 0 3
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
21951: GO 21967
// j := j + 1 ;
21953: LD_ADDR_VAR 0 3
21957: PUSH
21958: LD_VAR 0 3
21962: PUSH
21963: LD_INT 1
21965: PLUS
21966: ST_TO_ADDR
// SetSide ( i , j ) ;
21967: LD_VAR 0 2
21971: PPUSH
21972: LD_VAR 0 3
21976: PPUSH
21977: CALL_OW 235
// end ;
21981: GO 21904
21983: POP
21984: POP
// end ;
21985: LD_VAR 0 1
21989: RET
// export function hHackFog ; begin
21990: LD_INT 0
21992: PPUSH
// FogOff ( true ) ;
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 344
// end ;
22000: LD_VAR 0 1
22004: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22005: LD_INT 0
22007: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_VAR 0 2
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: CALL_OW 483
// CenterOnXY ( x , y ) ;
22033: LD_VAR 0 2
22037: PPUSH
22038: LD_VAR 0 3
22042: PPUSH
22043: CALL_OW 84
// end ;
22047: LD_VAR 0 4
22051: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22052: LD_INT 0
22054: PPUSH
22055: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22056: LD_VAR 0 1
22060: NOT
22061: PUSH
22062: LD_VAR 0 2
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: CALL_OW 488
22076: NOT
22077: OR
22078: PUSH
22079: LD_VAR 0 1
22083: PPUSH
22084: CALL_OW 266
22088: PUSH
22089: LD_INT 3
22091: NONEQUAL
22092: PUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 247
22102: PUSH
22103: LD_INT 1
22105: EQUAL
22106: NOT
22107: AND
22108: OR
22109: IFFALSE 22113
// exit ;
22111: GO 22262
// if GetType ( factory ) = unit_human then
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 247
22122: PUSH
22123: LD_INT 1
22125: EQUAL
22126: IFFALSE 22143
// factory := IsInUnit ( factory ) ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 310
22142: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22143: LD_VAR 0 1
22147: PPUSH
22148: CALL_OW 266
22152: PUSH
22153: LD_INT 3
22155: NONEQUAL
22156: IFFALSE 22160
// exit ;
22158: GO 22262
// if HexInfo ( x , y ) = factory then
22160: LD_VAR 0 2
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: CALL_OW 428
22174: PUSH
22175: LD_VAR 0 1
22179: EQUAL
22180: IFFALSE 22207
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22182: LD_ADDR_EXP 77
22186: PUSH
22187: LD_EXP 77
22191: PPUSH
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_INT 0
22199: PPUSH
22200: CALL_OW 1
22204: ST_TO_ADDR
22205: GO 22258
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22207: LD_ADDR_EXP 77
22211: PUSH
22212: LD_EXP 77
22216: PPUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 255
22231: PUSH
22232: LD_VAR 0 1
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_VAR 0 3
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: PPUSH
22253: CALL_OW 1
22257: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22258: CALL 22267 0 0
// end ;
22262: LD_VAR 0 4
22266: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22272: LD_STRING resetFactoryWaypoint();
22274: PPUSH
22275: CALL_OW 559
// if factoryWaypoints then
22279: LD_EXP 77
22283: IFFALSE 22409
// begin list := PrepareArray ( factoryWaypoints ) ;
22285: LD_ADDR_VAR 0 3
22289: PUSH
22290: LD_EXP 77
22294: PPUSH
22295: CALL 64530 0 1
22299: ST_TO_ADDR
// for i := 1 to list do
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: DOUBLE
22306: LD_INT 1
22308: DEC
22309: ST_TO_ADDR
22310: LD_VAR 0 3
22314: PUSH
22315: FOR_TO
22316: IFFALSE 22407
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22318: LD_STRING setFactoryWaypointXY(
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_VAR 0 2
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: STR
22336: PUSH
22337: LD_STRING ,
22339: STR
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: LD_VAR 0 2
22350: ARRAY
22351: PUSH
22352: LD_INT 2
22354: ARRAY
22355: STR
22356: PUSH
22357: LD_STRING ,
22359: STR
22360: PUSH
22361: LD_VAR 0 3
22365: PUSH
22366: LD_VAR 0 2
22370: ARRAY
22371: PUSH
22372: LD_INT 3
22374: ARRAY
22375: STR
22376: PUSH
22377: LD_STRING ,
22379: STR
22380: PUSH
22381: LD_VAR 0 3
22385: PUSH
22386: LD_VAR 0 2
22390: ARRAY
22391: PUSH
22392: LD_INT 4
22394: ARRAY
22395: STR
22396: PUSH
22397: LD_STRING )
22399: STR
22400: PPUSH
22401: CALL_OW 559
22405: GO 22315
22407: POP
22408: POP
// end ; end ;
22409: LD_VAR 0 1
22413: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22414: LD_INT 0
22416: PPUSH
// if HexInfo ( x , y ) = warehouse then
22417: LD_VAR 0 2
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: CALL_OW 428
22431: PUSH
22432: LD_VAR 0 1
22436: EQUAL
22437: IFFALSE 22464
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22439: LD_ADDR_EXP 78
22443: PUSH
22444: LD_EXP 78
22448: PPUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 0
22456: PPUSH
22457: CALL_OW 1
22461: ST_TO_ADDR
22462: GO 22515
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22464: LD_ADDR_EXP 78
22468: PUSH
22469: LD_EXP 78
22473: PPUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 255
22488: PUSH
22489: LD_VAR 0 1
22493: PUSH
22494: LD_VAR 0 2
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: PPUSH
22510: CALL_OW 1
22514: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22515: CALL 22524 0 0
// end ;
22519: LD_VAR 0 4
22523: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22529: LD_STRING resetWarehouseGatheringPoints();
22531: PPUSH
22532: CALL_OW 559
// if warehouseGatheringPoints then
22536: LD_EXP 78
22540: IFFALSE 22666
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_EXP 78
22551: PPUSH
22552: CALL 64530 0 1
22556: ST_TO_ADDR
// for i := 1 to list do
22557: LD_ADDR_VAR 0 2
22561: PUSH
22562: DOUBLE
22563: LD_INT 1
22565: DEC
22566: ST_TO_ADDR
22567: LD_VAR 0 3
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22664
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22575: LD_STRING setWarehouseGatheringPointXY(
22577: PUSH
22578: LD_VAR 0 3
22582: PUSH
22583: LD_VAR 0 2
22587: ARRAY
22588: PUSH
22589: LD_INT 1
22591: ARRAY
22592: STR
22593: PUSH
22594: LD_STRING ,
22596: STR
22597: PUSH
22598: LD_VAR 0 3
22602: PUSH
22603: LD_VAR 0 2
22607: ARRAY
22608: PUSH
22609: LD_INT 2
22611: ARRAY
22612: STR
22613: PUSH
22614: LD_STRING ,
22616: STR
22617: PUSH
22618: LD_VAR 0 3
22622: PUSH
22623: LD_VAR 0 2
22627: ARRAY
22628: PUSH
22629: LD_INT 3
22631: ARRAY
22632: STR
22633: PUSH
22634: LD_STRING ,
22636: STR
22637: PUSH
22638: LD_VAR 0 3
22642: PUSH
22643: LD_VAR 0 2
22647: ARRAY
22648: PUSH
22649: LD_INT 4
22651: ARRAY
22652: STR
22653: PUSH
22654: LD_STRING )
22656: STR
22657: PPUSH
22658: CALL_OW 559
22662: GO 22572
22664: POP
22665: POP
// end ; end ;
22666: LD_VAR 0 1
22670: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22671: LD_EXP 78
22675: IFFALSE 23362
22677: GO 22679
22679: DISABLE
22680: LD_INT 0
22682: PPUSH
22683: PPUSH
22684: PPUSH
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
// begin enable ;
22691: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22692: LD_ADDR_VAR 0 3
22696: PUSH
22697: LD_EXP 78
22701: PPUSH
22702: CALL 64530 0 1
22706: ST_TO_ADDR
// if not list then
22707: LD_VAR 0 3
22711: NOT
22712: IFFALSE 22716
// exit ;
22714: GO 23362
// for i := 1 to list do
22716: LD_ADDR_VAR 0 1
22720: PUSH
22721: DOUBLE
22722: LD_INT 1
22724: DEC
22725: ST_TO_ADDR
22726: LD_VAR 0 3
22730: PUSH
22731: FOR_TO
22732: IFFALSE 23360
// begin depot := list [ i ] [ 2 ] ;
22734: LD_ADDR_VAR 0 8
22738: PUSH
22739: LD_VAR 0 3
22743: PUSH
22744: LD_VAR 0 1
22748: ARRAY
22749: PUSH
22750: LD_INT 2
22752: ARRAY
22753: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22754: LD_ADDR_VAR 0 5
22758: PUSH
22759: LD_VAR 0 3
22763: PUSH
22764: LD_VAR 0 1
22768: ARRAY
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22774: LD_VAR 0 8
22778: PPUSH
22779: CALL_OW 301
22783: PUSH
22784: LD_VAR 0 5
22788: PUSH
22789: LD_VAR 0 8
22793: PPUSH
22794: CALL_OW 255
22798: NONEQUAL
22799: OR
22800: IFFALSE 22829
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22802: LD_ADDR_EXP 78
22806: PUSH
22807: LD_EXP 78
22811: PPUSH
22812: LD_VAR 0 8
22816: PPUSH
22817: LD_INT 0
22819: PPUSH
22820: CALL_OW 1
22824: ST_TO_ADDR
// exit ;
22825: POP
22826: POP
22827: GO 23362
// end ; x := list [ i ] [ 3 ] ;
22829: LD_ADDR_VAR 0 6
22833: PUSH
22834: LD_VAR 0 3
22838: PUSH
22839: LD_VAR 0 1
22843: ARRAY
22844: PUSH
22845: LD_INT 3
22847: ARRAY
22848: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22849: LD_ADDR_VAR 0 7
22853: PUSH
22854: LD_VAR 0 3
22858: PUSH
22859: LD_VAR 0 1
22863: ARRAY
22864: PUSH
22865: LD_INT 4
22867: ARRAY
22868: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22869: LD_ADDR_VAR 0 9
22873: PUSH
22874: LD_VAR 0 6
22878: PPUSH
22879: LD_VAR 0 7
22883: PPUSH
22884: LD_INT 16
22886: PPUSH
22887: CALL 63114 0 3
22891: ST_TO_ADDR
// if not cratesNearbyPoint then
22892: LD_VAR 0 9
22896: NOT
22897: IFFALSE 22903
// exit ;
22899: POP
22900: POP
22901: GO 23362
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22903: LD_ADDR_VAR 0 4
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_VAR 0 5
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 3
22922: PUSH
22923: LD_INT 60
22925: PUSH
22926: EMPTY
22927: LIST
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 91
22935: PUSH
22936: LD_VAR 0 8
22940: PUSH
22941: LD_INT 6
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 25
22964: PUSH
22965: LD_INT 16
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: PUSH
22988: LD_VAR 0 8
22992: PPUSH
22993: CALL_OW 313
22997: PPUSH
22998: LD_INT 3
23000: PUSH
23001: LD_INT 60
23003: PUSH
23004: EMPTY
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 25
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 25
23026: PUSH
23027: LD_INT 16
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL_OW 72
23047: UNION
23048: ST_TO_ADDR
// if tmp then
23049: LD_VAR 0 4
23053: IFFALSE 23133
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23055: LD_ADDR_VAR 0 4
23059: PUSH
23060: LD_VAR 0 4
23064: PPUSH
23065: LD_INT 3
23067: PPUSH
23068: CALL 61081 0 2
23072: ST_TO_ADDR
// for j in tmp do
23073: LD_ADDR_VAR 0 2
23077: PUSH
23078: LD_VAR 0 4
23082: PUSH
23083: FOR_IN
23084: IFFALSE 23127
// begin if IsInUnit ( j ) then
23086: LD_VAR 0 2
23090: PPUSH
23091: CALL_OW 310
23095: IFFALSE 23106
// ComExit ( j ) ;
23097: LD_VAR 0 2
23101: PPUSH
23102: CALL 61164 0 1
// AddComCollect ( j , x , y ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 6
23115: PPUSH
23116: LD_VAR 0 7
23120: PPUSH
23121: CALL_OW 177
// end ;
23125: GO 23083
23127: POP
23128: POP
// exit ;
23129: POP
23130: POP
23131: GO 23362
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23133: LD_ADDR_VAR 0 4
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: LD_VAR 0 5
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 91
23152: PUSH
23153: LD_VAR 0 8
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 34
23171: PUSH
23172: LD_INT 12
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 34
23181: PUSH
23182: LD_INT 51
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 34
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 34
23201: PUSH
23202: LD_EXP 81
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if tmp then
23228: LD_VAR 0 4
23232: IFFALSE 23358
// begin for j in tmp do
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_VAR 0 4
23243: PUSH
23244: FOR_IN
23245: IFFALSE 23356
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23247: LD_VAR 0 2
23251: PPUSH
23252: CALL_OW 262
23256: PUSH
23257: LD_INT 3
23259: EQUAL
23260: PUSH
23261: LD_VAR 0 2
23265: PPUSH
23266: CALL_OW 261
23270: PUSH
23271: LD_INT 20
23273: GREATER
23274: OR
23275: PUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: CALL_OW 314
23285: NOT
23286: AND
23287: PUSH
23288: LD_VAR 0 2
23292: PPUSH
23293: CALL_OW 263
23297: PUSH
23298: LD_INT 1
23300: NONEQUAL
23301: PUSH
23302: LD_VAR 0 2
23306: PPUSH
23307: CALL_OW 311
23311: OR
23312: AND
23313: IFFALSE 23354
// begin ComCollect ( j , x , y ) ;
23315: LD_VAR 0 2
23319: PPUSH
23320: LD_VAR 0 6
23324: PPUSH
23325: LD_VAR 0 7
23329: PPUSH
23330: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23334: LD_VAR 0 2
23338: PPUSH
23339: LD_VAR 0 8
23343: PPUSH
23344: CALL_OW 172
// exit ;
23348: POP
23349: POP
23350: POP
23351: POP
23352: GO 23362
// end ;
23354: GO 23244
23356: POP
23357: POP
// end ; end ;
23358: GO 22731
23360: POP
23361: POP
// end ; end_of_file
23362: PPOPN 9
23364: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23365: LD_INT 0
23367: PPUSH
23368: PPUSH
// if exist_mode then
23369: LD_VAR 0 2
23373: IFFALSE 23398
// unit := CreateCharacter ( prefix & ident ) else
23375: LD_ADDR_VAR 0 5
23379: PUSH
23380: LD_VAR 0 3
23384: PUSH
23385: LD_VAR 0 1
23389: STR
23390: PPUSH
23391: CALL_OW 34
23395: ST_TO_ADDR
23396: GO 23413
// unit := NewCharacter ( ident ) ;
23398: LD_ADDR_VAR 0 5
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 25
23412: ST_TO_ADDR
// result := unit ;
23413: LD_ADDR_VAR 0 4
23417: PUSH
23418: LD_VAR 0 5
23422: ST_TO_ADDR
// end ;
23423: LD_VAR 0 4
23427: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23428: LD_INT 0
23430: PPUSH
23431: PPUSH
// if not side or not nation then
23432: LD_VAR 0 1
23436: NOT
23437: PUSH
23438: LD_VAR 0 2
23442: NOT
23443: OR
23444: IFFALSE 23448
// exit ;
23446: GO 24216
// case nation of nation_american :
23448: LD_VAR 0 2
23452: PUSH
23453: LD_INT 1
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23675
23461: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23462: LD_ADDR_VAR 0 4
23466: PUSH
23467: LD_INT 35
23469: PUSH
23470: LD_INT 45
23472: PUSH
23473: LD_INT 46
23475: PUSH
23476: LD_INT 47
23478: PUSH
23479: LD_INT 82
23481: PUSH
23482: LD_INT 83
23484: PUSH
23485: LD_INT 84
23487: PUSH
23488: LD_INT 85
23490: PUSH
23491: LD_INT 86
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 6
23502: PUSH
23503: LD_INT 15
23505: PUSH
23506: LD_INT 16
23508: PUSH
23509: LD_INT 7
23511: PUSH
23512: LD_INT 12
23514: PUSH
23515: LD_INT 13
23517: PUSH
23518: LD_INT 10
23520: PUSH
23521: LD_INT 14
23523: PUSH
23524: LD_INT 20
23526: PUSH
23527: LD_INT 21
23529: PUSH
23530: LD_INT 22
23532: PUSH
23533: LD_INT 25
23535: PUSH
23536: LD_INT 32
23538: PUSH
23539: LD_INT 27
23541: PUSH
23542: LD_INT 36
23544: PUSH
23545: LD_INT 69
23547: PUSH
23548: LD_INT 39
23550: PUSH
23551: LD_INT 34
23553: PUSH
23554: LD_INT 40
23556: PUSH
23557: LD_INT 48
23559: PUSH
23560: LD_INT 49
23562: PUSH
23563: LD_INT 50
23565: PUSH
23566: LD_INT 51
23568: PUSH
23569: LD_INT 52
23571: PUSH
23572: LD_INT 53
23574: PUSH
23575: LD_INT 54
23577: PUSH
23578: LD_INT 55
23580: PUSH
23581: LD_INT 56
23583: PUSH
23584: LD_INT 57
23586: PUSH
23587: LD_INT 58
23589: PUSH
23590: LD_INT 59
23592: PUSH
23593: LD_INT 60
23595: PUSH
23596: LD_INT 61
23598: PUSH
23599: LD_INT 62
23601: PUSH
23602: LD_INT 80
23604: PUSH
23605: LD_INT 82
23607: PUSH
23608: LD_INT 83
23610: PUSH
23611: LD_INT 84
23613: PUSH
23614: LD_INT 85
23616: PUSH
23617: LD_INT 86
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
23673: GO 24140
23675: LD_INT 2
23677: DOUBLE
23678: EQUAL
23679: IFTRUE 23683
23681: GO 23909
23683: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 35
23691: PUSH
23692: LD_INT 45
23694: PUSH
23695: LD_INT 46
23697: PUSH
23698: LD_INT 47
23700: PUSH
23701: LD_INT 82
23703: PUSH
23704: LD_INT 83
23706: PUSH
23707: LD_INT 84
23709: PUSH
23710: LD_INT 85
23712: PUSH
23713: LD_INT 87
23715: PUSH
23716: LD_INT 70
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 11
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: LD_INT 4
23730: PUSH
23731: LD_INT 5
23733: PUSH
23734: LD_INT 6
23736: PUSH
23737: LD_INT 15
23739: PUSH
23740: LD_INT 18
23742: PUSH
23743: LD_INT 7
23745: PUSH
23746: LD_INT 17
23748: PUSH
23749: LD_INT 8
23751: PUSH
23752: LD_INT 20
23754: PUSH
23755: LD_INT 21
23757: PUSH
23758: LD_INT 22
23760: PUSH
23761: LD_INT 72
23763: PUSH
23764: LD_INT 26
23766: PUSH
23767: LD_INT 69
23769: PUSH
23770: LD_INT 39
23772: PUSH
23773: LD_INT 40
23775: PUSH
23776: LD_INT 41
23778: PUSH
23779: LD_INT 42
23781: PUSH
23782: LD_INT 43
23784: PUSH
23785: LD_INT 48
23787: PUSH
23788: LD_INT 49
23790: PUSH
23791: LD_INT 50
23793: PUSH
23794: LD_INT 51
23796: PUSH
23797: LD_INT 52
23799: PUSH
23800: LD_INT 53
23802: PUSH
23803: LD_INT 54
23805: PUSH
23806: LD_INT 55
23808: PUSH
23809: LD_INT 56
23811: PUSH
23812: LD_INT 60
23814: PUSH
23815: LD_INT 61
23817: PUSH
23818: LD_INT 62
23820: PUSH
23821: LD_INT 66
23823: PUSH
23824: LD_INT 67
23826: PUSH
23827: LD_INT 68
23829: PUSH
23830: LD_INT 81
23832: PUSH
23833: LD_INT 82
23835: PUSH
23836: LD_INT 83
23838: PUSH
23839: LD_INT 84
23841: PUSH
23842: LD_INT 85
23844: PUSH
23845: LD_INT 87
23847: PUSH
23848: LD_INT 88
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: ST_TO_ADDR
23907: GO 24140
23909: LD_INT 3
23911: DOUBLE
23912: EQUAL
23913: IFTRUE 23917
23915: GO 24139
23917: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_INT 46
23925: PUSH
23926: LD_INT 47
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: LD_INT 82
23937: PUSH
23938: LD_INT 83
23940: PUSH
23941: LD_INT 84
23943: PUSH
23944: LD_INT 85
23946: PUSH
23947: LD_INT 86
23949: PUSH
23950: LD_INT 11
23952: PUSH
23953: LD_INT 9
23955: PUSH
23956: LD_INT 20
23958: PUSH
23959: LD_INT 19
23961: PUSH
23962: LD_INT 21
23964: PUSH
23965: LD_INT 24
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_INT 25
23973: PUSH
23974: LD_INT 28
23976: PUSH
23977: LD_INT 29
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 31
23985: PUSH
23986: LD_INT 37
23988: PUSH
23989: LD_INT 38
23991: PUSH
23992: LD_INT 32
23994: PUSH
23995: LD_INT 27
23997: PUSH
23998: LD_INT 33
24000: PUSH
24001: LD_INT 69
24003: PUSH
24004: LD_INT 39
24006: PUSH
24007: LD_INT 34
24009: PUSH
24010: LD_INT 40
24012: PUSH
24013: LD_INT 71
24015: PUSH
24016: LD_INT 23
24018: PUSH
24019: LD_INT 44
24021: PUSH
24022: LD_INT 48
24024: PUSH
24025: LD_INT 49
24027: PUSH
24028: LD_INT 50
24030: PUSH
24031: LD_INT 51
24033: PUSH
24034: LD_INT 52
24036: PUSH
24037: LD_INT 53
24039: PUSH
24040: LD_INT 54
24042: PUSH
24043: LD_INT 55
24045: PUSH
24046: LD_INT 56
24048: PUSH
24049: LD_INT 57
24051: PUSH
24052: LD_INT 58
24054: PUSH
24055: LD_INT 59
24057: PUSH
24058: LD_INT 63
24060: PUSH
24061: LD_INT 64
24063: PUSH
24064: LD_INT 65
24066: PUSH
24067: LD_INT 82
24069: PUSH
24070: LD_INT 83
24072: PUSH
24073: LD_INT 84
24075: PUSH
24076: LD_INT 85
24078: PUSH
24079: LD_INT 86
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: ST_TO_ADDR
24137: GO 24140
24139: POP
// if state > - 1 and state < 3 then
24140: LD_VAR 0 3
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: GREATER
24149: PUSH
24150: LD_VAR 0 3
24154: PUSH
24155: LD_INT 3
24157: LESS
24158: AND
24159: IFFALSE 24216
// for i in result do
24161: LD_ADDR_VAR 0 5
24165: PUSH
24166: LD_VAR 0 4
24170: PUSH
24171: FOR_IN
24172: IFFALSE 24214
// if GetTech ( i , side ) <> state then
24174: LD_VAR 0 5
24178: PPUSH
24179: LD_VAR 0 1
24183: PPUSH
24184: CALL_OW 321
24188: PUSH
24189: LD_VAR 0 3
24193: NONEQUAL
24194: IFFALSE 24212
// result := result diff i ;
24196: LD_ADDR_VAR 0 4
24200: PUSH
24201: LD_VAR 0 4
24205: PUSH
24206: LD_VAR 0 5
24210: DIFF
24211: ST_TO_ADDR
24212: GO 24171
24214: POP
24215: POP
// end ;
24216: LD_VAR 0 4
24220: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24221: LD_INT 0
24223: PPUSH
24224: PPUSH
24225: PPUSH
// result := true ;
24226: LD_ADDR_VAR 0 3
24230: PUSH
24231: LD_INT 1
24233: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: CALL_OW 480
24248: ST_TO_ADDR
// if not tmp then
24249: LD_VAR 0 5
24253: NOT
24254: IFFALSE 24258
// exit ;
24256: GO 24307
// for i in tmp do
24258: LD_ADDR_VAR 0 4
24262: PUSH
24263: LD_VAR 0 5
24267: PUSH
24268: FOR_IN
24269: IFFALSE 24305
// if GetTech ( i , side ) <> state_researched then
24271: LD_VAR 0 4
24275: PPUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 321
24285: PUSH
24286: LD_INT 2
24288: NONEQUAL
24289: IFFALSE 24303
// begin result := false ;
24291: LD_ADDR_VAR 0 3
24295: PUSH
24296: LD_INT 0
24298: ST_TO_ADDR
// exit ;
24299: POP
24300: POP
24301: GO 24307
// end ;
24303: GO 24268
24305: POP
24306: POP
// end ;
24307: LD_VAR 0 3
24311: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
24316: PPUSH
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
24326: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24327: LD_VAR 0 1
24331: NOT
24332: PUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 257
24342: PUSH
24343: LD_INT 9
24345: NONEQUAL
24346: OR
24347: IFFALSE 24351
// exit ;
24349: GO 24924
// side := GetSide ( unit ) ;
24351: LD_ADDR_VAR 0 9
24355: PUSH
24356: LD_VAR 0 1
24360: PPUSH
24361: CALL_OW 255
24365: ST_TO_ADDR
// tech_space := tech_spacanom ;
24366: LD_ADDR_VAR 0 12
24370: PUSH
24371: LD_INT 29
24373: ST_TO_ADDR
// tech_time := tech_taurad ;
24374: LD_ADDR_VAR 0 13
24378: PUSH
24379: LD_INT 28
24381: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24382: LD_ADDR_VAR 0 11
24386: PUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 310
24396: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24397: LD_VAR 0 11
24401: PPUSH
24402: CALL_OW 247
24406: PUSH
24407: LD_INT 2
24409: EQUAL
24410: IFFALSE 24414
// exit ;
24412: GO 24924
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24414: LD_ADDR_VAR 0 8
24418: PUSH
24419: LD_INT 81
24421: PUSH
24422: LD_VAR 0 9
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: LD_INT 21
24436: PUSH
24437: LD_INT 3
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: ST_TO_ADDR
// if not tmp then
24457: LD_VAR 0 8
24461: NOT
24462: IFFALSE 24466
// exit ;
24464: GO 24924
// if in_unit then
24466: LD_VAR 0 11
24470: IFFALSE 24494
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24472: LD_ADDR_VAR 0 10
24476: PUSH
24477: LD_VAR 0 8
24481: PPUSH
24482: LD_VAR 0 11
24486: PPUSH
24487: CALL_OW 74
24491: ST_TO_ADDR
24492: GO 24514
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24494: LD_ADDR_VAR 0 10
24498: PUSH
24499: LD_VAR 0 8
24503: PPUSH
24504: LD_VAR 0 1
24508: PPUSH
24509: CALL_OW 74
24513: ST_TO_ADDR
// if not enemy then
24514: LD_VAR 0 10
24518: NOT
24519: IFFALSE 24523
// exit ;
24521: GO 24924
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24523: LD_VAR 0 11
24527: PUSH
24528: LD_VAR 0 11
24532: PPUSH
24533: LD_VAR 0 10
24537: PPUSH
24538: CALL_OW 296
24542: PUSH
24543: LD_INT 13
24545: GREATER
24546: AND
24547: PUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: LD_VAR 0 10
24557: PPUSH
24558: CALL_OW 296
24562: PUSH
24563: LD_INT 12
24565: GREATER
24566: OR
24567: IFFALSE 24571
// exit ;
24569: GO 24924
// missile := [ 1 ] ;
24571: LD_ADDR_VAR 0 14
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24582: LD_VAR 0 9
24586: PPUSH
24587: LD_VAR 0 12
24591: PPUSH
24592: CALL_OW 325
24596: IFFALSE 24625
// missile := Replace ( missile , missile + 1 , 2 ) ;
24598: LD_ADDR_VAR 0 14
24602: PUSH
24603: LD_VAR 0 14
24607: PPUSH
24608: LD_VAR 0 14
24612: PUSH
24613: LD_INT 1
24615: PLUS
24616: PPUSH
24617: LD_INT 2
24619: PPUSH
24620: CALL_OW 1
24624: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24625: LD_VAR 0 9
24629: PPUSH
24630: LD_VAR 0 13
24634: PPUSH
24635: CALL_OW 325
24639: PUSH
24640: LD_VAR 0 10
24644: PPUSH
24645: CALL_OW 255
24649: PPUSH
24650: LD_VAR 0 13
24654: PPUSH
24655: CALL_OW 325
24659: NOT
24660: AND
24661: IFFALSE 24690
// missile := Replace ( missile , missile + 1 , 3 ) ;
24663: LD_ADDR_VAR 0 14
24667: PUSH
24668: LD_VAR 0 14
24672: PPUSH
24673: LD_VAR 0 14
24677: PUSH
24678: LD_INT 1
24680: PLUS
24681: PPUSH
24682: LD_INT 3
24684: PPUSH
24685: CALL_OW 1
24689: ST_TO_ADDR
// if missile < 2 then
24690: LD_VAR 0 14
24694: PUSH
24695: LD_INT 2
24697: LESS
24698: IFFALSE 24702
// exit ;
24700: GO 24924
// x := GetX ( enemy ) ;
24702: LD_ADDR_VAR 0 4
24706: PUSH
24707: LD_VAR 0 10
24711: PPUSH
24712: CALL_OW 250
24716: ST_TO_ADDR
// y := GetY ( enemy ) ;
24717: LD_ADDR_VAR 0 5
24721: PUSH
24722: LD_VAR 0 10
24726: PPUSH
24727: CALL_OW 251
24731: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24732: LD_ADDR_VAR 0 6
24736: PUSH
24737: LD_VAR 0 4
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL_OW 12
24753: PLUS
24754: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24755: LD_ADDR_VAR 0 7
24759: PUSH
24760: LD_VAR 0 5
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PPUSH
24769: LD_INT 1
24771: PPUSH
24772: CALL_OW 12
24776: PLUS
24777: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24778: LD_VAR 0 6
24782: PPUSH
24783: LD_VAR 0 7
24787: PPUSH
24788: CALL_OW 488
24792: NOT
24793: IFFALSE 24815
// begin _x := x ;
24795: LD_ADDR_VAR 0 6
24799: PUSH
24800: LD_VAR 0 4
24804: ST_TO_ADDR
// _y := y ;
24805: LD_ADDR_VAR 0 7
24809: PUSH
24810: LD_VAR 0 5
24814: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: LD_INT 1
24822: PPUSH
24823: LD_VAR 0 14
24827: PPUSH
24828: CALL_OW 12
24832: ST_TO_ADDR
// case i of 1 :
24833: LD_VAR 0 3
24837: PUSH
24838: LD_INT 1
24840: DOUBLE
24841: EQUAL
24842: IFTRUE 24846
24844: GO 24863
24846: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24847: LD_VAR 0 1
24851: PPUSH
24852: LD_VAR 0 10
24856: PPUSH
24857: CALL_OW 115
24861: GO 24924
24863: LD_INT 2
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24893
24871: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24872: LD_VAR 0 1
24876: PPUSH
24877: LD_VAR 0 6
24881: PPUSH
24882: LD_VAR 0 7
24886: PPUSH
24887: CALL_OW 153
24891: GO 24924
24893: LD_INT 3
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 24923
24901: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24902: LD_VAR 0 1
24906: PPUSH
24907: LD_VAR 0 6
24911: PPUSH
24912: LD_VAR 0 7
24916: PPUSH
24917: CALL_OW 154
24921: GO 24924
24923: POP
// end ;
24924: LD_VAR 0 2
24928: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24929: LD_INT 0
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
// if not unit or not building then
24937: LD_VAR 0 1
24941: NOT
24942: PUSH
24943: LD_VAR 0 2
24947: NOT
24948: OR
24949: IFFALSE 24953
// exit ;
24951: GO 25111
// x := GetX ( building ) ;
24953: LD_ADDR_VAR 0 5
24957: PUSH
24958: LD_VAR 0 2
24962: PPUSH
24963: CALL_OW 250
24967: ST_TO_ADDR
// y := GetY ( building ) ;
24968: LD_ADDR_VAR 0 6
24972: PUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: CALL_OW 251
24982: ST_TO_ADDR
// for i = 0 to 5 do
24983: LD_ADDR_VAR 0 4
24987: PUSH
24988: DOUBLE
24989: LD_INT 0
24991: DEC
24992: ST_TO_ADDR
24993: LD_INT 5
24995: PUSH
24996: FOR_TO
24997: IFFALSE 25109
// begin _x := ShiftX ( x , i , 3 ) ;
24999: LD_ADDR_VAR 0 7
25003: PUSH
25004: LD_VAR 0 5
25008: PPUSH
25009: LD_VAR 0 4
25013: PPUSH
25014: LD_INT 3
25016: PPUSH
25017: CALL_OW 272
25021: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25022: LD_ADDR_VAR 0 8
25026: PUSH
25027: LD_VAR 0 6
25031: PPUSH
25032: LD_VAR 0 4
25036: PPUSH
25037: LD_INT 3
25039: PPUSH
25040: CALL_OW 273
25044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25045: LD_VAR 0 7
25049: PPUSH
25050: LD_VAR 0 8
25054: PPUSH
25055: CALL_OW 488
25059: NOT
25060: IFFALSE 25064
// continue ;
25062: GO 24996
// if HexInfo ( _x , _y ) = 0 then
25064: LD_VAR 0 7
25068: PPUSH
25069: LD_VAR 0 8
25073: PPUSH
25074: CALL_OW 428
25078: PUSH
25079: LD_INT 0
25081: EQUAL
25082: IFFALSE 25107
// begin ComMoveXY ( unit , _x , _y ) ;
25084: LD_VAR 0 1
25088: PPUSH
25089: LD_VAR 0 7
25093: PPUSH
25094: LD_VAR 0 8
25098: PPUSH
25099: CALL_OW 111
// exit ;
25103: POP
25104: POP
25105: GO 25111
// end ; end ;
25107: GO 24996
25109: POP
25110: POP
// end ;
25111: LD_VAR 0 3
25115: RET
// export function ScanBase ( side , base_area ) ; begin
25116: LD_INT 0
25118: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25119: LD_ADDR_VAR 0 3
25123: PUSH
25124: LD_VAR 0 2
25128: PPUSH
25129: LD_INT 81
25131: PUSH
25132: LD_VAR 0 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 70
25145: ST_TO_ADDR
// end ;
25146: LD_VAR 0 3
25150: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25151: LD_INT 0
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
// result := false ;
25157: LD_ADDR_VAR 0 2
25161: PUSH
25162: LD_INT 0
25164: ST_TO_ADDR
// side := GetSide ( unit ) ;
25165: LD_ADDR_VAR 0 3
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 255
25179: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25180: LD_ADDR_VAR 0 4
25184: PUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 248
25194: ST_TO_ADDR
// case nat of 1 :
25195: LD_VAR 0 4
25199: PUSH
25200: LD_INT 1
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25219
25208: POP
// tech := tech_lassight ; 2 :
25209: LD_ADDR_VAR 0 5
25213: PUSH
25214: LD_INT 12
25216: ST_TO_ADDR
25217: GO 25258
25219: LD_INT 2
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25238
25227: POP
// tech := tech_mortar ; 3 :
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: LD_INT 41
25235: ST_TO_ADDR
25236: GO 25258
25238: LD_INT 3
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25257
25246: POP
// tech := tech_bazooka ; end ;
25247: LD_ADDR_VAR 0 5
25251: PUSH
25252: LD_INT 44
25254: ST_TO_ADDR
25255: GO 25258
25257: POP
// if Researched ( side , tech ) then
25258: LD_VAR 0 3
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL_OW 325
25272: IFFALSE 25299
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_INT 5
25281: PUSH
25282: LD_INT 8
25284: PUSH
25285: LD_INT 9
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: PUSH
25293: LD_VAR 0 4
25297: ARRAY
25298: ST_TO_ADDR
// end ;
25299: LD_VAR 0 2
25303: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25304: LD_INT 0
25306: PPUSH
25307: PPUSH
25308: PPUSH
// if not mines then
25309: LD_VAR 0 2
25313: NOT
25314: IFFALSE 25318
// exit ;
25316: GO 25462
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25318: LD_ADDR_VAR 0 5
25322: PUSH
25323: LD_INT 81
25325: PUSH
25326: LD_VAR 0 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 69
25360: ST_TO_ADDR
// for i in mines do
25361: LD_ADDR_VAR 0 4
25365: PUSH
25366: LD_VAR 0 2
25370: PUSH
25371: FOR_IN
25372: IFFALSE 25460
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25374: LD_VAR 0 4
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: LD_VAR 0 4
25387: PUSH
25388: LD_INT 2
25390: ARRAY
25391: PPUSH
25392: CALL_OW 458
25396: NOT
25397: IFFALSE 25401
// continue ;
25399: GO 25371
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25401: LD_VAR 0 4
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PPUSH
25410: LD_VAR 0 4
25414: PUSH
25415: LD_INT 2
25417: ARRAY
25418: PPUSH
25419: CALL_OW 428
25423: PUSH
25424: LD_VAR 0 5
25428: IN
25429: IFFALSE 25458
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25431: LD_VAR 0 4
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: LD_VAR 0 4
25444: PUSH
25445: LD_INT 2
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 1
25453: PPUSH
25454: CALL_OW 456
// end ;
25458: GO 25371
25460: POP
25461: POP
// end ;
25462: LD_VAR 0 3
25466: RET
// export function Count ( array ) ; var i ; begin
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
// result := 0 ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_INT 0
25478: ST_TO_ADDR
// for i in array do
25479: LD_ADDR_VAR 0 3
25483: PUSH
25484: LD_VAR 0 1
25488: PUSH
25489: FOR_IN
25490: IFFALSE 25514
// if i then
25492: LD_VAR 0 3
25496: IFFALSE 25512
// result := result + 1 ;
25498: LD_ADDR_VAR 0 2
25502: PUSH
25503: LD_VAR 0 2
25507: PUSH
25508: LD_INT 1
25510: PLUS
25511: ST_TO_ADDR
25512: GO 25489
25514: POP
25515: POP
// end ;
25516: LD_VAR 0 2
25520: RET
// export function IsEmpty ( building ) ; begin
25521: LD_INT 0
25523: PPUSH
// if not building then
25524: LD_VAR 0 1
25528: NOT
25529: IFFALSE 25533
// exit ;
25531: GO 25576
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25533: LD_ADDR_VAR 0 2
25537: PUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_INT 22
25545: PUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 255
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 58
25562: PUSH
25563: EMPTY
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PPUSH
25570: CALL_OW 69
25574: IN
25575: ST_TO_ADDR
// end ;
25576: LD_VAR 0 2
25580: RET
// export function IsNotFull ( building ) ; var places ; begin
25581: LD_INT 0
25583: PPUSH
25584: PPUSH
// if not building then
25585: LD_VAR 0 1
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25765
// result := false ;
25594: LD_ADDR_VAR 0 2
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
// places := 0 ;
25602: LD_ADDR_VAR 0 3
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25610: LD_VAR 0 1
25614: PPUSH
25615: CALL_OW 266
25619: PUSH
25620: LD_INT 0
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25682
25626: LD_INT 1
25628: DOUBLE
25629: EQUAL
25630: IFTRUE 25682
25632: LD_INT 6
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25682
25638: LD_INT 7
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25682
25644: LD_INT 8
25646: DOUBLE
25647: EQUAL
25648: IFTRUE 25682
25650: LD_INT 4
25652: DOUBLE
25653: EQUAL
25654: IFTRUE 25682
25656: LD_INT 5
25658: DOUBLE
25659: EQUAL
25660: IFTRUE 25682
25662: LD_INT 2
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25682
25668: LD_INT 3
25670: DOUBLE
25671: EQUAL
25672: IFTRUE 25682
25674: LD_INT 35
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25693
25682: POP
// places := 6 ; b_bunker , b_breastwork :
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_INT 6
25690: ST_TO_ADDR
25691: GO 25738
25693: LD_INT 32
25695: DOUBLE
25696: EQUAL
25697: IFTRUE 25707
25699: LD_INT 31
25701: DOUBLE
25702: EQUAL
25703: IFTRUE 25707
25705: GO 25718
25707: POP
// places := 1 ; b_control_tower :
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 1
25715: ST_TO_ADDR
25716: GO 25738
25718: LD_INT 36
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25737
25726: POP
// places := 3 ; end ;
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_INT 3
25734: ST_TO_ADDR
25735: GO 25738
25737: POP
// if places then
25738: LD_VAR 0 3
25742: IFFALSE 25765
// result := UnitsInside ( building ) < places ;
25744: LD_ADDR_VAR 0 2
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 313
25758: PUSH
25759: LD_VAR 0 3
25763: LESS
25764: ST_TO_ADDR
// end ;
25765: LD_VAR 0 2
25769: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25770: LD_INT 0
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
// tmp := [ ] ;
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// list := [ ] ;
25783: LD_ADDR_VAR 0 5
25787: PUSH
25788: EMPTY
25789: ST_TO_ADDR
// for i = 16 to 25 do
25790: LD_ADDR_VAR 0 4
25794: PUSH
25795: DOUBLE
25796: LD_INT 16
25798: DEC
25799: ST_TO_ADDR
25800: LD_INT 25
25802: PUSH
25803: FOR_TO
25804: IFFALSE 25877
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_VAR 0 3
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 255
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 91
25835: PUSH
25836: LD_VAR 0 1
25840: PUSH
25841: LD_INT 6
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 30
25851: PUSH
25852: LD_VAR 0 4
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: PPUSH
25869: CALL_OW 69
25873: ADD
25874: ST_TO_ADDR
25875: GO 25803
25877: POP
25878: POP
// for i = 1 to tmp do
25879: LD_ADDR_VAR 0 4
25883: PUSH
25884: DOUBLE
25885: LD_INT 1
25887: DEC
25888: ST_TO_ADDR
25889: LD_VAR 0 3
25893: PUSH
25894: FOR_TO
25895: IFFALSE 25983
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25897: LD_ADDR_VAR 0 5
25901: PUSH
25902: LD_VAR 0 5
25906: PUSH
25907: LD_VAR 0 3
25911: PUSH
25912: LD_VAR 0 4
25916: ARRAY
25917: PPUSH
25918: CALL_OW 266
25922: PUSH
25923: LD_VAR 0 3
25927: PUSH
25928: LD_VAR 0 4
25932: ARRAY
25933: PPUSH
25934: CALL_OW 250
25938: PUSH
25939: LD_VAR 0 3
25943: PUSH
25944: LD_VAR 0 4
25948: ARRAY
25949: PPUSH
25950: CALL_OW 251
25954: PUSH
25955: LD_VAR 0 3
25959: PUSH
25960: LD_VAR 0 4
25964: ARRAY
25965: PPUSH
25966: CALL_OW 254
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: ADD
25980: ST_TO_ADDR
25981: GO 25894
25983: POP
25984: POP
// result := list ;
25985: LD_ADDR_VAR 0 2
25989: PUSH
25990: LD_VAR 0 5
25994: ST_TO_ADDR
// end ;
25995: LD_VAR 0 2
25999: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26000: LD_INT 0
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
// if not factory then
26009: LD_VAR 0 1
26013: NOT
26014: IFFALSE 26018
// exit ;
26016: GO 26611
// if control = control_apeman then
26018: LD_VAR 0 4
26022: PUSH
26023: LD_INT 5
26025: EQUAL
26026: IFFALSE 26135
// begin tmp := UnitsInside ( factory ) ;
26028: LD_ADDR_VAR 0 8
26032: PUSH
26033: LD_VAR 0 1
26037: PPUSH
26038: CALL_OW 313
26042: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26043: LD_VAR 0 8
26047: PPUSH
26048: LD_INT 25
26050: PUSH
26051: LD_INT 12
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PPUSH
26058: CALL_OW 72
26062: NOT
26063: IFFALSE 26073
// control := control_manual ;
26065: LD_ADDR_VAR 0 4
26069: PUSH
26070: LD_INT 1
26072: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26073: LD_ADDR_VAR 0 8
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL 25770 0 1
26087: ST_TO_ADDR
// if tmp then
26088: LD_VAR 0 8
26092: IFFALSE 26135
// begin for i in tmp do
26094: LD_ADDR_VAR 0 7
26098: PUSH
26099: LD_VAR 0 8
26103: PUSH
26104: FOR_IN
26105: IFFALSE 26133
// if i [ 1 ] = b_ext_radio then
26107: LD_VAR 0 7
26111: PUSH
26112: LD_INT 1
26114: ARRAY
26115: PUSH
26116: LD_INT 22
26118: EQUAL
26119: IFFALSE 26131
// begin control := control_remote ;
26121: LD_ADDR_VAR 0 4
26125: PUSH
26126: LD_INT 2
26128: ST_TO_ADDR
// break ;
26129: GO 26133
// end ;
26131: GO 26104
26133: POP
26134: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26135: LD_VAR 0 1
26139: PPUSH
26140: LD_VAR 0 2
26144: PPUSH
26145: LD_VAR 0 3
26149: PPUSH
26150: LD_VAR 0 4
26154: PPUSH
26155: LD_VAR 0 5
26159: PPUSH
26160: CALL_OW 448
26164: IFFALSE 26199
// begin result := [ chassis , engine , control , weapon ] ;
26166: LD_ADDR_VAR 0 6
26170: PUSH
26171: LD_VAR 0 2
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: LD_VAR 0 4
26185: PUSH
26186: LD_VAR 0 5
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
// exit ;
26197: GO 26611
// end ; _chassis := AvailableChassisList ( factory ) ;
26199: LD_ADDR_VAR 0 9
26203: PUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 475
26213: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26214: LD_ADDR_VAR 0 11
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 476
26228: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26229: LD_ADDR_VAR 0 12
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 477
26243: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26244: LD_ADDR_VAR 0 10
26248: PUSH
26249: LD_VAR 0 1
26253: PPUSH
26254: CALL_OW 478
26258: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26259: LD_VAR 0 9
26263: NOT
26264: PUSH
26265: LD_VAR 0 11
26269: NOT
26270: OR
26271: PUSH
26272: LD_VAR 0 12
26276: NOT
26277: OR
26278: PUSH
26279: LD_VAR 0 10
26283: NOT
26284: OR
26285: IFFALSE 26320
// begin result := [ chassis , engine , control , weapon ] ;
26287: LD_ADDR_VAR 0 6
26291: PUSH
26292: LD_VAR 0 2
26296: PUSH
26297: LD_VAR 0 3
26301: PUSH
26302: LD_VAR 0 4
26306: PUSH
26307: LD_VAR 0 5
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: ST_TO_ADDR
// exit ;
26318: GO 26611
// end ; if not chassis in _chassis then
26320: LD_VAR 0 2
26324: PUSH
26325: LD_VAR 0 9
26329: IN
26330: NOT
26331: IFFALSE 26357
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26333: LD_ADDR_VAR 0 2
26337: PUSH
26338: LD_VAR 0 9
26342: PUSH
26343: LD_INT 1
26345: PPUSH
26346: LD_VAR 0 9
26350: PPUSH
26351: CALL_OW 12
26355: ARRAY
26356: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26357: LD_VAR 0 2
26361: PPUSH
26362: LD_VAR 0 3
26366: PPUSH
26367: CALL 26616 0 2
26371: NOT
26372: IFFALSE 26431
// repeat engine := _engine [ 1 ] ;
26374: LD_ADDR_VAR 0 3
26378: PUSH
26379: LD_VAR 0 11
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26388: LD_ADDR_VAR 0 11
26392: PUSH
26393: LD_VAR 0 11
26397: PPUSH
26398: LD_INT 1
26400: PPUSH
26401: CALL_OW 3
26405: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26406: LD_VAR 0 2
26410: PPUSH
26411: LD_VAR 0 3
26415: PPUSH
26416: CALL 26616 0 2
26420: PUSH
26421: LD_VAR 0 11
26425: PUSH
26426: EMPTY
26427: EQUAL
26428: OR
26429: IFFALSE 26374
// if not control in _control then
26431: LD_VAR 0 4
26435: PUSH
26436: LD_VAR 0 12
26440: IN
26441: NOT
26442: IFFALSE 26468
// control := _control [ rand ( 1 , _control ) ] ;
26444: LD_ADDR_VAR 0 4
26448: PUSH
26449: LD_VAR 0 12
26453: PUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_VAR 0 12
26461: PPUSH
26462: CALL_OW 12
26466: ARRAY
26467: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26468: LD_VAR 0 2
26472: PPUSH
26473: LD_VAR 0 5
26477: PPUSH
26478: CALL 26836 0 2
26482: NOT
26483: IFFALSE 26542
// repeat weapon := _weapon [ 1 ] ;
26485: LD_ADDR_VAR 0 5
26489: PUSH
26490: LD_VAR 0 10
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26499: LD_ADDR_VAR 0 10
26503: PUSH
26504: LD_VAR 0 10
26508: PPUSH
26509: LD_INT 1
26511: PPUSH
26512: CALL_OW 3
26516: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26517: LD_VAR 0 2
26521: PPUSH
26522: LD_VAR 0 5
26526: PPUSH
26527: CALL 26836 0 2
26531: PUSH
26532: LD_VAR 0 10
26536: PUSH
26537: EMPTY
26538: EQUAL
26539: OR
26540: IFFALSE 26485
// result := [ ] ;
26542: LD_ADDR_VAR 0 6
26546: PUSH
26547: EMPTY
26548: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26549: LD_VAR 0 1
26553: PPUSH
26554: LD_VAR 0 2
26558: PPUSH
26559: LD_VAR 0 3
26563: PPUSH
26564: LD_VAR 0 4
26568: PPUSH
26569: LD_VAR 0 5
26573: PPUSH
26574: CALL_OW 448
26578: IFFALSE 26611
// result := [ chassis , engine , control , weapon ] ;
26580: LD_ADDR_VAR 0 6
26584: PUSH
26585: LD_VAR 0 2
26589: PUSH
26590: LD_VAR 0 3
26594: PUSH
26595: LD_VAR 0 4
26599: PUSH
26600: LD_VAR 0 5
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: ST_TO_ADDR
// end ;
26611: LD_VAR 0 6
26615: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26616: LD_INT 0
26618: PPUSH
// if not chassis or not engine then
26619: LD_VAR 0 1
26623: NOT
26624: PUSH
26625: LD_VAR 0 2
26629: NOT
26630: OR
26631: IFFALSE 26635
// exit ;
26633: GO 26831
// case engine of engine_solar :
26635: LD_VAR 0 2
26639: PUSH
26640: LD_INT 2
26642: DOUBLE
26643: EQUAL
26644: IFTRUE 26648
26646: GO 26686
26648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26649: LD_ADDR_VAR 0 3
26653: PUSH
26654: LD_INT 11
26656: PUSH
26657: LD_INT 12
26659: PUSH
26660: LD_INT 13
26662: PUSH
26663: LD_INT 14
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 3
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: ST_TO_ADDR
26684: GO 26815
26686: LD_INT 1
26688: DOUBLE
26689: EQUAL
26690: IFTRUE 26694
26692: GO 26756
26694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: LD_INT 11
26702: PUSH
26703: LD_INT 12
26705: PUSH
26706: LD_INT 13
26708: PUSH
26709: LD_INT 14
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: LD_INT 3
26720: PUSH
26721: LD_INT 4
26723: PUSH
26724: LD_INT 5
26726: PUSH
26727: LD_INT 21
26729: PUSH
26730: LD_INT 23
26732: PUSH
26733: LD_INT 22
26735: PUSH
26736: LD_INT 24
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: ST_TO_ADDR
26754: GO 26815
26756: LD_INT 3
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26814
26764: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_INT 13
26772: PUSH
26773: LD_INT 14
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 3
26781: PUSH
26782: LD_INT 4
26784: PUSH
26785: LD_INT 5
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_INT 23
26796: PUSH
26797: LD_INT 24
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
26812: GO 26815
26814: POP
// result := ( chassis in result ) ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_VAR 0 1
26824: PUSH
26825: LD_VAR 0 3
26829: IN
26830: ST_TO_ADDR
// end ;
26831: LD_VAR 0 3
26835: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26836: LD_INT 0
26838: PPUSH
// if not chassis or not weapon then
26839: LD_VAR 0 1
26843: NOT
26844: PUSH
26845: LD_VAR 0 2
26849: NOT
26850: OR
26851: IFFALSE 26855
// exit ;
26853: GO 27917
// case weapon of us_machine_gun :
26855: LD_VAR 0 2
26859: PUSH
26860: LD_INT 2
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26868
26866: GO 26898
26868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 3
26882: PUSH
26883: LD_INT 4
26885: PUSH
26886: LD_INT 5
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: ST_TO_ADDR
26896: GO 27901
26898: LD_INT 3
26900: DOUBLE
26901: EQUAL
26902: IFTRUE 26906
26904: GO 26936
26906: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 3
26920: PUSH
26921: LD_INT 4
26923: PUSH
26924: LD_INT 5
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: ST_TO_ADDR
26934: GO 27901
26936: LD_INT 11
26938: DOUBLE
26939: EQUAL
26940: IFTRUE 26944
26942: GO 26974
26944: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26945: LD_ADDR_VAR 0 3
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: LD_INT 4
26961: PUSH
26962: LD_INT 5
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
26972: GO 27901
26974: LD_INT 4
26976: DOUBLE
26977: EQUAL
26978: IFTRUE 26982
26980: GO 27008
26982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: LD_INT 4
26996: PUSH
26997: LD_INT 5
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
27006: GO 27901
27008: LD_INT 5
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27042
27016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: LD_INT 5
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
27040: GO 27901
27042: LD_INT 9
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27076
27050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: LD_INT 4
27064: PUSH
27065: LD_INT 5
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
27074: GO 27901
27076: LD_INT 7
27078: DOUBLE
27079: EQUAL
27080: IFTRUE 27084
27082: GO 27110
27084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27085: LD_ADDR_VAR 0 3
27089: PUSH
27090: LD_INT 2
27092: PUSH
27093: LD_INT 3
27095: PUSH
27096: LD_INT 4
27098: PUSH
27099: LD_INT 5
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
27108: GO 27901
27110: LD_INT 12
27112: DOUBLE
27113: EQUAL
27114: IFTRUE 27118
27116: GO 27144
27118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 4
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
27142: GO 27901
27144: LD_INT 13
27146: DOUBLE
27147: EQUAL
27148: IFTRUE 27152
27150: GO 27178
27152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27153: LD_ADDR_VAR 0 3
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: LD_INT 3
27163: PUSH
27164: LD_INT 4
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
27176: GO 27901
27178: LD_INT 14
27180: DOUBLE
27181: EQUAL
27182: IFTRUE 27186
27184: GO 27204
27186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27187: LD_ADDR_VAR 0 3
27191: PUSH
27192: LD_INT 4
27194: PUSH
27195: LD_INT 5
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: ST_TO_ADDR
27202: GO 27901
27204: LD_INT 6
27206: DOUBLE
27207: EQUAL
27208: IFTRUE 27212
27210: GO 27230
27212: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_INT 4
27220: PUSH
27221: LD_INT 5
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: ST_TO_ADDR
27228: GO 27901
27230: LD_INT 10
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27256
27238: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 4
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: ST_TO_ADDR
27254: GO 27901
27256: LD_INT 22
27258: DOUBLE
27259: EQUAL
27260: IFTRUE 27264
27262: GO 27290
27264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27265: LD_ADDR_VAR 0 3
27269: PUSH
27270: LD_INT 11
27272: PUSH
27273: LD_INT 12
27275: PUSH
27276: LD_INT 13
27278: PUSH
27279: LD_INT 14
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: ST_TO_ADDR
27288: GO 27901
27290: LD_INT 23
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27324
27298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_INT 11
27306: PUSH
27307: LD_INT 12
27309: PUSH
27310: LD_INT 13
27312: PUSH
27313: LD_INT 14
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: ST_TO_ADDR
27322: GO 27901
27324: LD_INT 24
27326: DOUBLE
27327: EQUAL
27328: IFTRUE 27332
27330: GO 27358
27332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27333: LD_ADDR_VAR 0 3
27337: PUSH
27338: LD_INT 11
27340: PUSH
27341: LD_INT 12
27343: PUSH
27344: LD_INT 13
27346: PUSH
27347: LD_INT 14
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
27356: GO 27901
27358: LD_INT 30
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27392
27366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_INT 11
27374: PUSH
27375: LD_INT 12
27377: PUSH
27378: LD_INT 13
27380: PUSH
27381: LD_INT 14
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: ST_TO_ADDR
27390: GO 27901
27392: LD_INT 25
27394: DOUBLE
27395: EQUAL
27396: IFTRUE 27400
27398: GO 27418
27400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 13
27408: PUSH
27409: LD_INT 14
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: ST_TO_ADDR
27416: GO 27901
27418: LD_INT 27
27420: DOUBLE
27421: EQUAL
27422: IFTRUE 27426
27424: GO 27444
27426: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27427: LD_ADDR_VAR 0 3
27431: PUSH
27432: LD_INT 13
27434: PUSH
27435: LD_INT 14
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: ST_TO_ADDR
27442: GO 27901
27444: LD_EXP 85
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27480
27454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27455: LD_ADDR_VAR 0 3
27459: PUSH
27460: LD_INT 11
27462: PUSH
27463: LD_INT 12
27465: PUSH
27466: LD_INT 13
27468: PUSH
27469: LD_INT 14
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
27478: GO 27901
27480: LD_INT 28
27482: DOUBLE
27483: EQUAL
27484: IFTRUE 27488
27486: GO 27506
27488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27489: LD_ADDR_VAR 0 3
27493: PUSH
27494: LD_INT 13
27496: PUSH
27497: LD_INT 14
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 27901
27506: LD_INT 29
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27532
27514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_INT 13
27522: PUSH
27523: LD_INT 14
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27901
27532: LD_INT 31
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27558
27540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 13
27548: PUSH
27549: LD_INT 14
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: ST_TO_ADDR
27556: GO 27901
27558: LD_INT 26
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27566
27564: GO 27584
27566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27567: LD_ADDR_VAR 0 3
27571: PUSH
27572: LD_INT 13
27574: PUSH
27575: LD_INT 14
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 27901
27584: LD_INT 42
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27618
27592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_INT 23
27606: PUSH
27607: LD_INT 24
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 27901
27618: LD_INT 43
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27652
27626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27627: LD_ADDR_VAR 0 3
27631: PUSH
27632: LD_INT 21
27634: PUSH
27635: LD_INT 22
27637: PUSH
27638: LD_INT 23
27640: PUSH
27641: LD_INT 24
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: ST_TO_ADDR
27650: GO 27901
27652: LD_INT 44
27654: DOUBLE
27655: EQUAL
27656: IFTRUE 27660
27658: GO 27686
27660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 21
27668: PUSH
27669: LD_INT 22
27671: PUSH
27672: LD_INT 23
27674: PUSH
27675: LD_INT 24
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: ST_TO_ADDR
27684: GO 27901
27686: LD_INT 45
27688: DOUBLE
27689: EQUAL
27690: IFTRUE 27694
27692: GO 27720
27694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27695: LD_ADDR_VAR 0 3
27699: PUSH
27700: LD_INT 21
27702: PUSH
27703: LD_INT 22
27705: PUSH
27706: LD_INT 23
27708: PUSH
27709: LD_INT 24
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
27718: GO 27901
27720: LD_INT 49
27722: DOUBLE
27723: EQUAL
27724: IFTRUE 27728
27726: GO 27754
27728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27729: LD_ADDR_VAR 0 3
27733: PUSH
27734: LD_INT 21
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_INT 23
27742: PUSH
27743: LD_INT 24
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
27752: GO 27901
27754: LD_INT 51
27756: DOUBLE
27757: EQUAL
27758: IFTRUE 27762
27760: GO 27788
27762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27763: LD_ADDR_VAR 0 3
27767: PUSH
27768: LD_INT 21
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_INT 23
27776: PUSH
27777: LD_INT 24
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
27786: GO 27901
27788: LD_INT 52
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 27822
27796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27797: LD_ADDR_VAR 0 3
27801: PUSH
27802: LD_INT 21
27804: PUSH
27805: LD_INT 22
27807: PUSH
27808: LD_INT 23
27810: PUSH
27811: LD_INT 24
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
27820: GO 27901
27822: LD_INT 53
27824: DOUBLE
27825: EQUAL
27826: IFTRUE 27830
27828: GO 27848
27830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_INT 23
27838: PUSH
27839: LD_INT 24
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: ST_TO_ADDR
27846: GO 27901
27848: LD_INT 46
27850: DOUBLE
27851: EQUAL
27852: IFTRUE 27856
27854: GO 27874
27856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27857: LD_ADDR_VAR 0 3
27861: PUSH
27862: LD_INT 23
27864: PUSH
27865: LD_INT 24
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: ST_TO_ADDR
27872: GO 27901
27874: LD_INT 47
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27900
27882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 23
27890: PUSH
27891: LD_INT 24
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: ST_TO_ADDR
27898: GO 27901
27900: POP
// result := ( chassis in result ) ;
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: LD_VAR 0 1
27910: PUSH
27911: LD_VAR 0 3
27915: IN
27916: ST_TO_ADDR
// end ;
27917: LD_VAR 0 3
27921: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27922: LD_INT 0
27924: PPUSH
27925: PPUSH
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
// result := array ;
27931: LD_ADDR_VAR 0 5
27935: PUSH
27936: LD_VAR 0 1
27940: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27941: LD_VAR 0 1
27945: NOT
27946: PUSH
27947: LD_VAR 0 2
27951: NOT
27952: OR
27953: PUSH
27954: LD_VAR 0 3
27958: NOT
27959: OR
27960: PUSH
27961: LD_VAR 0 2
27965: PUSH
27966: LD_VAR 0 1
27970: GREATER
27971: OR
27972: PUSH
27973: LD_VAR 0 3
27977: PUSH
27978: LD_VAR 0 1
27982: GREATER
27983: OR
27984: IFFALSE 27988
// exit ;
27986: GO 28284
// if direction then
27988: LD_VAR 0 4
27992: IFFALSE 28056
// begin d := 1 ;
27994: LD_ADDR_VAR 0 9
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// if i_from > i_to then
28002: LD_VAR 0 2
28006: PUSH
28007: LD_VAR 0 3
28011: GREATER
28012: IFFALSE 28038
// length := ( array - i_from ) + i_to else
28014: LD_ADDR_VAR 0 11
28018: PUSH
28019: LD_VAR 0 1
28023: PUSH
28024: LD_VAR 0 2
28028: MINUS
28029: PUSH
28030: LD_VAR 0 3
28034: PLUS
28035: ST_TO_ADDR
28036: GO 28054
// length := i_to - i_from ;
28038: LD_ADDR_VAR 0 11
28042: PUSH
28043: LD_VAR 0 3
28047: PUSH
28048: LD_VAR 0 2
28052: MINUS
28053: ST_TO_ADDR
// end else
28054: GO 28117
// begin d := - 1 ;
28056: LD_ADDR_VAR 0 9
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: ST_TO_ADDR
// if i_from > i_to then
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: GREATER
28075: IFFALSE 28095
// length := i_from - i_to else
28077: LD_ADDR_VAR 0 11
28081: PUSH
28082: LD_VAR 0 2
28086: PUSH
28087: LD_VAR 0 3
28091: MINUS
28092: ST_TO_ADDR
28093: GO 28117
// length := ( array - i_to ) + i_from ;
28095: LD_ADDR_VAR 0 11
28099: PUSH
28100: LD_VAR 0 1
28104: PUSH
28105: LD_VAR 0 3
28109: MINUS
28110: PUSH
28111: LD_VAR 0 2
28115: PLUS
28116: ST_TO_ADDR
// end ; if not length then
28117: LD_VAR 0 11
28121: NOT
28122: IFFALSE 28126
// exit ;
28124: GO 28284
// tmp := array ;
28126: LD_ADDR_VAR 0 10
28130: PUSH
28131: LD_VAR 0 1
28135: ST_TO_ADDR
// for i = 1 to length do
28136: LD_ADDR_VAR 0 6
28140: PUSH
28141: DOUBLE
28142: LD_INT 1
28144: DEC
28145: ST_TO_ADDR
28146: LD_VAR 0 11
28150: PUSH
28151: FOR_TO
28152: IFFALSE 28272
// begin for j = 1 to array do
28154: LD_ADDR_VAR 0 7
28158: PUSH
28159: DOUBLE
28160: LD_INT 1
28162: DEC
28163: ST_TO_ADDR
28164: LD_VAR 0 1
28168: PUSH
28169: FOR_TO
28170: IFFALSE 28258
// begin k := j + d ;
28172: LD_ADDR_VAR 0 8
28176: PUSH
28177: LD_VAR 0 7
28181: PUSH
28182: LD_VAR 0 9
28186: PLUS
28187: ST_TO_ADDR
// if k > array then
28188: LD_VAR 0 8
28192: PUSH
28193: LD_VAR 0 1
28197: GREATER
28198: IFFALSE 28208
// k := 1 ;
28200: LD_ADDR_VAR 0 8
28204: PUSH
28205: LD_INT 1
28207: ST_TO_ADDR
// if not k then
28208: LD_VAR 0 8
28212: NOT
28213: IFFALSE 28225
// k := array ;
28215: LD_ADDR_VAR 0 8
28219: PUSH
28220: LD_VAR 0 1
28224: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28225: LD_ADDR_VAR 0 10
28229: PUSH
28230: LD_VAR 0 10
28234: PPUSH
28235: LD_VAR 0 8
28239: PPUSH
28240: LD_VAR 0 1
28244: PUSH
28245: LD_VAR 0 7
28249: ARRAY
28250: PPUSH
28251: CALL_OW 1
28255: ST_TO_ADDR
// end ;
28256: GO 28169
28258: POP
28259: POP
// array := tmp ;
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: LD_VAR 0 10
28269: ST_TO_ADDR
// end ;
28270: GO 28151
28272: POP
28273: POP
// result := array ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_VAR 0 1
28283: ST_TO_ADDR
// end ;
28284: LD_VAR 0 5
28288: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
// result := 0 ;
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 0
28300: ST_TO_ADDR
// if not array or not value in array then
28301: LD_VAR 0 1
28305: NOT
28306: PUSH
28307: LD_VAR 0 2
28311: PUSH
28312: LD_VAR 0 1
28316: IN
28317: NOT
28318: OR
28319: IFFALSE 28323
// exit ;
28321: GO 28377
// for i = 1 to array do
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: DOUBLE
28329: LD_INT 1
28331: DEC
28332: ST_TO_ADDR
28333: LD_VAR 0 1
28337: PUSH
28338: FOR_TO
28339: IFFALSE 28375
// if value = array [ i ] then
28341: LD_VAR 0 2
28345: PUSH
28346: LD_VAR 0 1
28350: PUSH
28351: LD_VAR 0 4
28355: ARRAY
28356: EQUAL
28357: IFFALSE 28373
// begin result := i ;
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_VAR 0 4
28368: ST_TO_ADDR
// exit ;
28369: POP
28370: POP
28371: GO 28377
// end ;
28373: GO 28338
28375: POP
28376: POP
// end ;
28377: LD_VAR 0 3
28381: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28382: LD_INT 0
28384: PPUSH
// vc_chassis := chassis ;
28385: LD_ADDR_OWVAR 37
28389: PUSH
28390: LD_VAR 0 1
28394: ST_TO_ADDR
// vc_engine := engine ;
28395: LD_ADDR_OWVAR 39
28399: PUSH
28400: LD_VAR 0 2
28404: ST_TO_ADDR
// vc_control := control ;
28405: LD_ADDR_OWVAR 38
28409: PUSH
28410: LD_VAR 0 3
28414: ST_TO_ADDR
// vc_weapon := weapon ;
28415: LD_ADDR_OWVAR 40
28419: PUSH
28420: LD_VAR 0 4
28424: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28425: LD_ADDR_OWVAR 41
28429: PUSH
28430: LD_VAR 0 5
28434: ST_TO_ADDR
// end ;
28435: LD_VAR 0 6
28439: RET
// export function WantPlant ( unit ) ; var task ; begin
28440: LD_INT 0
28442: PPUSH
28443: PPUSH
// result := false ;
28444: LD_ADDR_VAR 0 2
28448: PUSH
28449: LD_INT 0
28451: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28452: LD_ADDR_VAR 0 3
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL_OW 437
28466: ST_TO_ADDR
// if task then
28467: LD_VAR 0 3
28471: IFFALSE 28499
// if task [ 1 ] [ 1 ] = p then
28473: LD_VAR 0 3
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PUSH
28486: LD_STRING p
28488: EQUAL
28489: IFFALSE 28499
// result := true ;
28491: LD_ADDR_VAR 0 2
28495: PUSH
28496: LD_INT 1
28498: ST_TO_ADDR
// end ;
28499: LD_VAR 0 2
28503: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28504: LD_INT 0
28506: PPUSH
28507: PPUSH
28508: PPUSH
28509: PPUSH
// if pos < 1 then
28510: LD_VAR 0 2
28514: PUSH
28515: LD_INT 1
28517: LESS
28518: IFFALSE 28522
// exit ;
28520: GO 28825
// if pos = 1 then
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: EQUAL
28530: IFFALSE 28563
// result := Replace ( arr , pos [ 1 ] , value ) else
28532: LD_ADDR_VAR 0 4
28536: PUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: LD_VAR 0 2
28546: PUSH
28547: LD_INT 1
28549: ARRAY
28550: PPUSH
28551: LD_VAR 0 3
28555: PPUSH
28556: CALL_OW 1
28560: ST_TO_ADDR
28561: GO 28825
// begin tmp := arr ;
28563: LD_ADDR_VAR 0 6
28567: PUSH
28568: LD_VAR 0 1
28572: ST_TO_ADDR
// s_arr := [ tmp ] ;
28573: LD_ADDR_VAR 0 7
28577: PUSH
28578: LD_VAR 0 6
28582: PUSH
28583: EMPTY
28584: LIST
28585: ST_TO_ADDR
// for i = 1 to pos - 1 do
28586: LD_ADDR_VAR 0 5
28590: PUSH
28591: DOUBLE
28592: LD_INT 1
28594: DEC
28595: ST_TO_ADDR
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: MINUS
28604: PUSH
28605: FOR_TO
28606: IFFALSE 28651
// begin tmp := tmp [ pos [ i ] ] ;
28608: LD_ADDR_VAR 0 6
28612: PUSH
28613: LD_VAR 0 6
28617: PUSH
28618: LD_VAR 0 2
28622: PUSH
28623: LD_VAR 0 5
28627: ARRAY
28628: ARRAY
28629: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28630: LD_ADDR_VAR 0 7
28634: PUSH
28635: LD_VAR 0 7
28639: PUSH
28640: LD_VAR 0 6
28644: PUSH
28645: EMPTY
28646: LIST
28647: ADD
28648: ST_TO_ADDR
// end ;
28649: GO 28605
28651: POP
28652: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_VAR 0 6
28662: PPUSH
28663: LD_VAR 0 2
28667: PUSH
28668: LD_VAR 0 2
28672: ARRAY
28673: PPUSH
28674: LD_VAR 0 3
28678: PPUSH
28679: CALL_OW 1
28683: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28684: LD_ADDR_VAR 0 7
28688: PUSH
28689: LD_VAR 0 7
28693: PPUSH
28694: LD_VAR 0 7
28698: PPUSH
28699: LD_VAR 0 6
28703: PPUSH
28704: CALL_OW 1
28708: ST_TO_ADDR
// for i = s_arr downto 2 do
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: DOUBLE
28715: LD_VAR 0 7
28719: INC
28720: ST_TO_ADDR
28721: LD_INT 2
28723: PUSH
28724: FOR_DOWNTO
28725: IFFALSE 28809
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28727: LD_ADDR_VAR 0 6
28731: PUSH
28732: LD_VAR 0 7
28736: PUSH
28737: LD_VAR 0 5
28741: PUSH
28742: LD_INT 1
28744: MINUS
28745: ARRAY
28746: PPUSH
28747: LD_VAR 0 2
28751: PUSH
28752: LD_VAR 0 5
28756: PUSH
28757: LD_INT 1
28759: MINUS
28760: ARRAY
28761: PPUSH
28762: LD_VAR 0 7
28766: PUSH
28767: LD_VAR 0 5
28771: ARRAY
28772: PPUSH
28773: CALL_OW 1
28777: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28778: LD_ADDR_VAR 0 7
28782: PUSH
28783: LD_VAR 0 7
28787: PPUSH
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: MINUS
28796: PPUSH
28797: LD_VAR 0 6
28801: PPUSH
28802: CALL_OW 1
28806: ST_TO_ADDR
// end ;
28807: GO 28724
28809: POP
28810: POP
// result := s_arr [ 1 ] ;
28811: LD_ADDR_VAR 0 4
28815: PUSH
28816: LD_VAR 0 7
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: ST_TO_ADDR
// end ; end ;
28825: LD_VAR 0 4
28829: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
// if not list then
28834: LD_VAR 0 1
28838: NOT
28839: IFFALSE 28843
// exit ;
28841: GO 28934
// i := list [ pos1 ] ;
28843: LD_ADDR_VAR 0 5
28847: PUSH
28848: LD_VAR 0 1
28852: PUSH
28853: LD_VAR 0 2
28857: ARRAY
28858: ST_TO_ADDR
// if not i then
28859: LD_VAR 0 5
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28934
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28868: LD_ADDR_VAR 0 1
28872: PUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: LD_VAR 0 2
28882: PPUSH
28883: LD_VAR 0 1
28887: PUSH
28888: LD_VAR 0 3
28892: ARRAY
28893: PPUSH
28894: CALL_OW 1
28898: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28899: LD_ADDR_VAR 0 1
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: LD_VAR 0 3
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 1
28923: ST_TO_ADDR
// result := list ;
28924: LD_ADDR_VAR 0 4
28928: PUSH
28929: LD_VAR 0 1
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 4
28938: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28939: LD_INT 0
28941: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28942: LD_ADDR_VAR 0 5
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 250
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 251
28966: PPUSH
28967: LD_VAR 0 2
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: LD_VAR 0 4
28981: PPUSH
28982: CALL 28992 0 5
28986: ST_TO_ADDR
// end ;
28987: LD_VAR 0 5
28991: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
// if not list then
28998: LD_VAR 0 3
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29395
// result := [ ] ;
29007: LD_ADDR_VAR 0 6
29011: PUSH
29012: EMPTY
29013: ST_TO_ADDR
// for i in list do
29014: LD_ADDR_VAR 0 7
29018: PUSH
29019: LD_VAR 0 3
29023: PUSH
29024: FOR_IN
29025: IFFALSE 29227
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29027: LD_ADDR_VAR 0 9
29031: PUSH
29032: LD_VAR 0 7
29036: PPUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_VAR 0 2
29046: PPUSH
29047: CALL_OW 297
29051: ST_TO_ADDR
// if not result then
29052: LD_VAR 0 6
29056: NOT
29057: IFFALSE 29083
// result := [ [ i , tmp ] ] else
29059: LD_ADDR_VAR 0 6
29063: PUSH
29064: LD_VAR 0 7
29068: PUSH
29069: LD_VAR 0 9
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: ST_TO_ADDR
29081: GO 29225
// begin if result [ result ] [ 2 ] < tmp then
29083: LD_VAR 0 6
29087: PUSH
29088: LD_VAR 0 6
29092: ARRAY
29093: PUSH
29094: LD_INT 2
29096: ARRAY
29097: PUSH
29098: LD_VAR 0 9
29102: LESS
29103: IFFALSE 29145
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29105: LD_ADDR_VAR 0 6
29109: PUSH
29110: LD_VAR 0 6
29114: PPUSH
29115: LD_VAR 0 6
29119: PUSH
29120: LD_INT 1
29122: PLUS
29123: PPUSH
29124: LD_VAR 0 7
29128: PUSH
29129: LD_VAR 0 9
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 2
29142: ST_TO_ADDR
29143: GO 29225
// for j = 1 to result do
29145: LD_ADDR_VAR 0 8
29149: PUSH
29150: DOUBLE
29151: LD_INT 1
29153: DEC
29154: ST_TO_ADDR
29155: LD_VAR 0 6
29159: PUSH
29160: FOR_TO
29161: IFFALSE 29223
// begin if tmp < result [ j ] [ 2 ] then
29163: LD_VAR 0 9
29167: PUSH
29168: LD_VAR 0 6
29172: PUSH
29173: LD_VAR 0 8
29177: ARRAY
29178: PUSH
29179: LD_INT 2
29181: ARRAY
29182: LESS
29183: IFFALSE 29221
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29185: LD_ADDR_VAR 0 6
29189: PUSH
29190: LD_VAR 0 6
29194: PPUSH
29195: LD_VAR 0 8
29199: PPUSH
29200: LD_VAR 0 7
29204: PUSH
29205: LD_VAR 0 9
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 2
29218: ST_TO_ADDR
// break ;
29219: GO 29223
// end ; end ;
29221: GO 29160
29223: POP
29224: POP
// end ; end ;
29225: GO 29024
29227: POP
29228: POP
// if result and not asc then
29229: LD_VAR 0 6
29233: PUSH
29234: LD_VAR 0 4
29238: NOT
29239: AND
29240: IFFALSE 29315
// begin tmp := result ;
29242: LD_ADDR_VAR 0 9
29246: PUSH
29247: LD_VAR 0 6
29251: ST_TO_ADDR
// for i = tmp downto 1 do
29252: LD_ADDR_VAR 0 7
29256: PUSH
29257: DOUBLE
29258: LD_VAR 0 9
29262: INC
29263: ST_TO_ADDR
29264: LD_INT 1
29266: PUSH
29267: FOR_DOWNTO
29268: IFFALSE 29313
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29270: LD_ADDR_VAR 0 6
29274: PUSH
29275: LD_VAR 0 6
29279: PPUSH
29280: LD_VAR 0 9
29284: PUSH
29285: LD_VAR 0 7
29289: MINUS
29290: PUSH
29291: LD_INT 1
29293: PLUS
29294: PPUSH
29295: LD_VAR 0 9
29299: PUSH
29300: LD_VAR 0 7
29304: ARRAY
29305: PPUSH
29306: CALL_OW 1
29310: ST_TO_ADDR
29311: GO 29267
29313: POP
29314: POP
// end ; tmp := [ ] ;
29315: LD_ADDR_VAR 0 9
29319: PUSH
29320: EMPTY
29321: ST_TO_ADDR
// if mode then
29322: LD_VAR 0 5
29326: IFFALSE 29395
// begin for i = 1 to result do
29328: LD_ADDR_VAR 0 7
29332: PUSH
29333: DOUBLE
29334: LD_INT 1
29336: DEC
29337: ST_TO_ADDR
29338: LD_VAR 0 6
29342: PUSH
29343: FOR_TO
29344: IFFALSE 29383
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29346: LD_ADDR_VAR 0 9
29350: PUSH
29351: LD_VAR 0 9
29355: PPUSH
29356: LD_VAR 0 7
29360: PPUSH
29361: LD_VAR 0 6
29365: PUSH
29366: LD_VAR 0 7
29370: ARRAY
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PPUSH
29376: CALL_OW 1
29380: ST_TO_ADDR
29381: GO 29343
29383: POP
29384: POP
// result := tmp ;
29385: LD_ADDR_VAR 0 6
29389: PUSH
29390: LD_VAR 0 9
29394: ST_TO_ADDR
// end ; end ;
29395: LD_VAR 0 6
29399: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// if not x or not y then
29430: LD_VAR 0 2
29434: NOT
29435: PUSH
29436: LD_VAR 0 3
29440: NOT
29441: OR
29442: IFFALSE 29446
// exit ;
29444: GO 31098
// if not range then
29446: LD_VAR 0 4
29450: NOT
29451: IFFALSE 29461
// range := 10 ;
29453: LD_ADDR_VAR 0 4
29457: PUSH
29458: LD_INT 10
29460: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29461: LD_ADDR_VAR 0 8
29465: PUSH
29466: LD_INT 81
29468: PUSH
29469: LD_VAR 0 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 92
29480: PUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_VAR 0 3
29490: PUSH
29491: LD_VAR 0 4
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 21
29507: PUSH
29508: LD_INT 3
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: PPUSH
29524: CALL_OW 69
29528: ST_TO_ADDR
// if not tmp then
29529: LD_VAR 0 8
29533: NOT
29534: IFFALSE 29538
// exit ;
29536: GO 31098
// for i in tmp do
29538: LD_ADDR_VAR 0 6
29542: PUSH
29543: LD_VAR 0 8
29547: PUSH
29548: FOR_IN
29549: IFFALSE 31073
// begin points := [ 0 , 0 , 0 ] ;
29551: LD_ADDR_VAR 0 9
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// bpoints := 1 ;
29570: LD_ADDR_VAR 0 10
29574: PUSH
29575: LD_INT 1
29577: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29578: LD_VAR 0 6
29582: PPUSH
29583: CALL_OW 247
29587: PUSH
29588: LD_INT 1
29590: DOUBLE
29591: EQUAL
29592: IFTRUE 29596
29594: GO 30174
29596: POP
// begin if GetClass ( i ) = 1 then
29597: LD_VAR 0 6
29601: PPUSH
29602: CALL_OW 257
29606: PUSH
29607: LD_INT 1
29609: EQUAL
29610: IFFALSE 29631
// points := [ 10 , 5 , 3 ] ;
29612: LD_ADDR_VAR 0 9
29616: PUSH
29617: LD_INT 10
29619: PUSH
29620: LD_INT 5
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29631: LD_VAR 0 6
29635: PPUSH
29636: CALL_OW 257
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: LD_INT 4
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: IN
29655: IFFALSE 29676
// points := [ 3 , 2 , 1 ] ;
29657: LD_ADDR_VAR 0 9
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29676: LD_VAR 0 6
29680: PPUSH
29681: CALL_OW 257
29685: PUSH
29686: LD_INT 5
29688: EQUAL
29689: IFFALSE 29710
// points := [ 130 , 5 , 2 ] ;
29691: LD_ADDR_VAR 0 9
29695: PUSH
29696: LD_INT 130
29698: PUSH
29699: LD_INT 5
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29710: LD_VAR 0 6
29714: PPUSH
29715: CALL_OW 257
29719: PUSH
29720: LD_INT 8
29722: EQUAL
29723: IFFALSE 29744
// points := [ 35 , 35 , 30 ] ;
29725: LD_ADDR_VAR 0 9
29729: PUSH
29730: LD_INT 35
29732: PUSH
29733: LD_INT 35
29735: PUSH
29736: LD_INT 30
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29744: LD_VAR 0 6
29748: PPUSH
29749: CALL_OW 257
29753: PUSH
29754: LD_INT 9
29756: EQUAL
29757: IFFALSE 29778
// points := [ 20 , 55 , 40 ] ;
29759: LD_ADDR_VAR 0 9
29763: PUSH
29764: LD_INT 20
29766: PUSH
29767: LD_INT 55
29769: PUSH
29770: LD_INT 40
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29778: LD_VAR 0 6
29782: PPUSH
29783: CALL_OW 257
29787: PUSH
29788: LD_INT 12
29790: PUSH
29791: LD_INT 16
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: IN
29798: IFFALSE 29819
// points := [ 5 , 3 , 2 ] ;
29800: LD_ADDR_VAR 0 9
29804: PUSH
29805: LD_INT 5
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29819: LD_VAR 0 6
29823: PPUSH
29824: CALL_OW 257
29828: PUSH
29829: LD_INT 17
29831: EQUAL
29832: IFFALSE 29853
// points := [ 100 , 50 , 75 ] ;
29834: LD_ADDR_VAR 0 9
29838: PUSH
29839: LD_INT 100
29841: PUSH
29842: LD_INT 50
29844: PUSH
29845: LD_INT 75
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29853: LD_VAR 0 6
29857: PPUSH
29858: CALL_OW 257
29862: PUSH
29863: LD_INT 15
29865: EQUAL
29866: IFFALSE 29887
// points := [ 10 , 5 , 3 ] ;
29868: LD_ADDR_VAR 0 9
29872: PUSH
29873: LD_INT 10
29875: PUSH
29876: LD_INT 5
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29887: LD_VAR 0 6
29891: PPUSH
29892: CALL_OW 257
29896: PUSH
29897: LD_INT 14
29899: EQUAL
29900: IFFALSE 29921
// points := [ 10 , 0 , 0 ] ;
29902: LD_ADDR_VAR 0 9
29906: PUSH
29907: LD_INT 10
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29921: LD_VAR 0 6
29925: PPUSH
29926: CALL_OW 257
29930: PUSH
29931: LD_INT 11
29933: EQUAL
29934: IFFALSE 29955
// points := [ 30 , 10 , 5 ] ;
29936: LD_ADDR_VAR 0 9
29940: PUSH
29941: LD_INT 30
29943: PUSH
29944: LD_INT 10
29946: PUSH
29947: LD_INT 5
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29955: LD_VAR 0 1
29959: PPUSH
29960: LD_INT 5
29962: PPUSH
29963: CALL_OW 321
29967: PUSH
29968: LD_INT 2
29970: EQUAL
29971: IFFALSE 29988
// bpoints := bpoints * 1.8 ;
29973: LD_ADDR_VAR 0 10
29977: PUSH
29978: LD_VAR 0 10
29982: PUSH
29983: LD_REAL  1.80000000000000E+0000
29986: MUL
29987: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29988: LD_VAR 0 6
29992: PPUSH
29993: CALL_OW 257
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: LD_INT 4
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: IN
30016: PUSH
30017: LD_VAR 0 1
30021: PPUSH
30022: LD_INT 51
30024: PPUSH
30025: CALL_OW 321
30029: PUSH
30030: LD_INT 2
30032: EQUAL
30033: AND
30034: IFFALSE 30051
// bpoints := bpoints * 1.2 ;
30036: LD_ADDR_VAR 0 10
30040: PUSH
30041: LD_VAR 0 10
30045: PUSH
30046: LD_REAL  1.20000000000000E+0000
30049: MUL
30050: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30051: LD_VAR 0 6
30055: PPUSH
30056: CALL_OW 257
30060: PUSH
30061: LD_INT 5
30063: PUSH
30064: LD_INT 7
30066: PUSH
30067: LD_INT 9
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: LIST
30074: IN
30075: PUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: LD_INT 52
30083: PPUSH
30084: CALL_OW 321
30088: PUSH
30089: LD_INT 2
30091: EQUAL
30092: AND
30093: IFFALSE 30110
// bpoints := bpoints * 1.5 ;
30095: LD_ADDR_VAR 0 10
30099: PUSH
30100: LD_VAR 0 10
30104: PUSH
30105: LD_REAL  1.50000000000000E+0000
30108: MUL
30109: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30110: LD_VAR 0 1
30114: PPUSH
30115: LD_INT 66
30117: PPUSH
30118: CALL_OW 321
30122: PUSH
30123: LD_INT 2
30125: EQUAL
30126: IFFALSE 30143
// bpoints := bpoints * 1.1 ;
30128: LD_ADDR_VAR 0 10
30132: PUSH
30133: LD_VAR 0 10
30137: PUSH
30138: LD_REAL  1.10000000000000E+0000
30141: MUL
30142: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30143: LD_ADDR_VAR 0 10
30147: PUSH
30148: LD_VAR 0 10
30152: PUSH
30153: LD_VAR 0 6
30157: PPUSH
30158: LD_INT 1
30160: PPUSH
30161: CALL_OW 259
30165: PUSH
30166: LD_REAL  1.15000000000000E+0000
30169: MUL
30170: MUL
30171: ST_TO_ADDR
// end ; unit_vehicle :
30172: GO 31002
30174: LD_INT 2
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30990
30182: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30183: LD_VAR 0 6
30187: PPUSH
30188: CALL_OW 264
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 42
30198: PUSH
30199: LD_INT 24
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: IN
30207: IFFALSE 30228
// points := [ 25 , 5 , 3 ] ;
30209: LD_ADDR_VAR 0 9
30213: PUSH
30214: LD_INT 25
30216: PUSH
30217: LD_INT 5
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30228: LD_VAR 0 6
30232: PPUSH
30233: CALL_OW 264
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: LD_INT 43
30243: PUSH
30244: LD_INT 25
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: IN
30252: IFFALSE 30273
// points := [ 40 , 15 , 5 ] ;
30254: LD_ADDR_VAR 0 9
30258: PUSH
30259: LD_INT 40
30261: PUSH
30262: LD_INT 15
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30273: LD_VAR 0 6
30277: PPUSH
30278: CALL_OW 264
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: LD_INT 23
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: IN
30293: IFFALSE 30314
// points := [ 7 , 25 , 8 ] ;
30295: LD_ADDR_VAR 0 9
30299: PUSH
30300: LD_INT 7
30302: PUSH
30303: LD_INT 25
30305: PUSH
30306: LD_INT 8
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30314: LD_VAR 0 6
30318: PPUSH
30319: CALL_OW 264
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: LD_INT 27
30329: PUSH
30330: LD_INT 44
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: IN
30338: IFFALSE 30359
// points := [ 14 , 50 , 16 ] ;
30340: LD_ADDR_VAR 0 9
30344: PUSH
30345: LD_INT 14
30347: PUSH
30348: LD_INT 50
30350: PUSH
30351: LD_INT 16
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30359: LD_VAR 0 6
30363: PPUSH
30364: CALL_OW 264
30368: PUSH
30369: LD_INT 6
30371: PUSH
30372: LD_INT 46
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: IN
30379: IFFALSE 30400
// points := [ 32 , 120 , 70 ] ;
30381: LD_ADDR_VAR 0 9
30385: PUSH
30386: LD_INT 32
30388: PUSH
30389: LD_INT 120
30391: PUSH
30392: LD_INT 70
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30400: LD_VAR 0 6
30404: PPUSH
30405: CALL_OW 264
30409: PUSH
30410: LD_INT 7
30412: PUSH
30413: LD_INT 28
30415: PUSH
30416: LD_INT 45
30418: PUSH
30419: LD_EXP 85
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: IN
30430: IFFALSE 30451
// points := [ 35 , 20 , 45 ] ;
30432: LD_ADDR_VAR 0 9
30436: PUSH
30437: LD_INT 35
30439: PUSH
30440: LD_INT 20
30442: PUSH
30443: LD_INT 45
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30451: LD_VAR 0 6
30455: PPUSH
30456: CALL_OW 264
30460: PUSH
30461: LD_INT 47
30463: PUSH
30464: EMPTY
30465: LIST
30466: IN
30467: IFFALSE 30488
// points := [ 67 , 45 , 75 ] ;
30469: LD_ADDR_VAR 0 9
30473: PUSH
30474: LD_INT 67
30476: PUSH
30477: LD_INT 45
30479: PUSH
30480: LD_INT 75
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30488: LD_VAR 0 6
30492: PPUSH
30493: CALL_OW 264
30497: PUSH
30498: LD_INT 26
30500: PUSH
30501: EMPTY
30502: LIST
30503: IN
30504: IFFALSE 30525
// points := [ 120 , 30 , 80 ] ;
30506: LD_ADDR_VAR 0 9
30510: PUSH
30511: LD_INT 120
30513: PUSH
30514: LD_INT 30
30516: PUSH
30517: LD_INT 80
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30525: LD_VAR 0 6
30529: PPUSH
30530: CALL_OW 264
30534: PUSH
30535: LD_INT 22
30537: PUSH
30538: EMPTY
30539: LIST
30540: IN
30541: IFFALSE 30562
// points := [ 40 , 1 , 1 ] ;
30543: LD_ADDR_VAR 0 9
30547: PUSH
30548: LD_INT 40
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30562: LD_VAR 0 6
30566: PPUSH
30567: CALL_OW 264
30571: PUSH
30572: LD_INT 29
30574: PUSH
30575: EMPTY
30576: LIST
30577: IN
30578: IFFALSE 30599
// points := [ 70 , 200 , 400 ] ;
30580: LD_ADDR_VAR 0 9
30584: PUSH
30585: LD_INT 70
30587: PUSH
30588: LD_INT 200
30590: PUSH
30591: LD_INT 400
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30599: LD_VAR 0 6
30603: PPUSH
30604: CALL_OW 264
30608: PUSH
30609: LD_INT 14
30611: PUSH
30612: LD_INT 53
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: IN
30619: IFFALSE 30640
// points := [ 40 , 10 , 20 ] ;
30621: LD_ADDR_VAR 0 9
30625: PUSH
30626: LD_INT 40
30628: PUSH
30629: LD_INT 10
30631: PUSH
30632: LD_INT 20
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30640: LD_VAR 0 6
30644: PPUSH
30645: CALL_OW 264
30649: PUSH
30650: LD_INT 9
30652: PUSH
30653: EMPTY
30654: LIST
30655: IN
30656: IFFALSE 30677
// points := [ 5 , 70 , 20 ] ;
30658: LD_ADDR_VAR 0 9
30662: PUSH
30663: LD_INT 5
30665: PUSH
30666: LD_INT 70
30668: PUSH
30669: LD_INT 20
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30677: LD_VAR 0 6
30681: PPUSH
30682: CALL_OW 264
30686: PUSH
30687: LD_INT 10
30689: PUSH
30690: EMPTY
30691: LIST
30692: IN
30693: IFFALSE 30714
// points := [ 35 , 110 , 70 ] ;
30695: LD_ADDR_VAR 0 9
30699: PUSH
30700: LD_INT 35
30702: PUSH
30703: LD_INT 110
30705: PUSH
30706: LD_INT 70
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30714: LD_VAR 0 6
30718: PPUSH
30719: CALL_OW 265
30723: PUSH
30724: LD_INT 25
30726: EQUAL
30727: IFFALSE 30748
// points := [ 80 , 65 , 100 ] ;
30729: LD_ADDR_VAR 0 9
30733: PUSH
30734: LD_INT 80
30736: PUSH
30737: LD_INT 65
30739: PUSH
30740: LD_INT 100
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30748: LD_VAR 0 6
30752: PPUSH
30753: CALL_OW 263
30757: PUSH
30758: LD_INT 1
30760: EQUAL
30761: IFFALSE 30796
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30763: LD_ADDR_VAR 0 10
30767: PUSH
30768: LD_VAR 0 10
30772: PUSH
30773: LD_VAR 0 6
30777: PPUSH
30778: CALL_OW 311
30782: PPUSH
30783: LD_INT 3
30785: PPUSH
30786: CALL_OW 259
30790: PUSH
30791: LD_INT 4
30793: MUL
30794: MUL
30795: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30796: LD_VAR 0 6
30800: PPUSH
30801: CALL_OW 263
30805: PUSH
30806: LD_INT 2
30808: EQUAL
30809: IFFALSE 30860
// begin j := IsControledBy ( i ) ;
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: LD_VAR 0 6
30820: PPUSH
30821: CALL_OW 312
30825: ST_TO_ADDR
// if j then
30826: LD_VAR 0 7
30830: IFFALSE 30860
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30832: LD_ADDR_VAR 0 10
30836: PUSH
30837: LD_VAR 0 10
30841: PUSH
30842: LD_VAR 0 7
30846: PPUSH
30847: LD_INT 3
30849: PPUSH
30850: CALL_OW 259
30854: PUSH
30855: LD_INT 3
30857: MUL
30858: MUL
30859: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30860: LD_VAR 0 6
30864: PPUSH
30865: CALL_OW 264
30869: PUSH
30870: LD_INT 5
30872: PUSH
30873: LD_INT 6
30875: PUSH
30876: LD_INT 46
30878: PUSH
30879: LD_INT 44
30881: PUSH
30882: LD_INT 47
30884: PUSH
30885: LD_INT 45
30887: PUSH
30888: LD_INT 28
30890: PUSH
30891: LD_INT 7
30893: PUSH
30894: LD_INT 27
30896: PUSH
30897: LD_INT 29
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: IN
30912: PUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: LD_INT 52
30920: PPUSH
30921: CALL_OW 321
30925: PUSH
30926: LD_INT 2
30928: EQUAL
30929: AND
30930: IFFALSE 30947
// bpoints := bpoints * 1.2 ;
30932: LD_ADDR_VAR 0 10
30936: PUSH
30937: LD_VAR 0 10
30941: PUSH
30942: LD_REAL  1.20000000000000E+0000
30945: MUL
30946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30947: LD_VAR 0 6
30951: PPUSH
30952: CALL_OW 264
30956: PUSH
30957: LD_INT 6
30959: PUSH
30960: LD_INT 46
30962: PUSH
30963: LD_INT 47
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: IN
30971: IFFALSE 30988
// bpoints := bpoints * 1.2 ;
30973: LD_ADDR_VAR 0 10
30977: PUSH
30978: LD_VAR 0 10
30982: PUSH
30983: LD_REAL  1.20000000000000E+0000
30986: MUL
30987: ST_TO_ADDR
// end ; unit_building :
30988: GO 31002
30990: LD_INT 3
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31001
30998: POP
// ; end ;
30999: GO 31002
31001: POP
// for j = 1 to 3 do
31002: LD_ADDR_VAR 0 7
31006: PUSH
31007: DOUBLE
31008: LD_INT 1
31010: DEC
31011: ST_TO_ADDR
31012: LD_INT 3
31014: PUSH
31015: FOR_TO
31016: IFFALSE 31069
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: LD_VAR 0 7
31032: PPUSH
31033: LD_VAR 0 5
31037: PUSH
31038: LD_VAR 0 7
31042: ARRAY
31043: PUSH
31044: LD_VAR 0 9
31048: PUSH
31049: LD_VAR 0 7
31053: ARRAY
31054: PUSH
31055: LD_VAR 0 10
31059: MUL
31060: PLUS
31061: PPUSH
31062: CALL_OW 1
31066: ST_TO_ADDR
31067: GO 31015
31069: POP
31070: POP
// end ;
31071: GO 29548
31073: POP
31074: POP
// result := Replace ( result , 4 , tmp ) ;
31075: LD_ADDR_VAR 0 5
31079: PUSH
31080: LD_VAR 0 5
31084: PPUSH
31085: LD_INT 4
31087: PPUSH
31088: LD_VAR 0 8
31092: PPUSH
31093: CALL_OW 1
31097: ST_TO_ADDR
// end ;
31098: LD_VAR 0 5
31102: RET
// export function DangerAtRange ( unit , range ) ; begin
31103: LD_INT 0
31105: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 255
31120: PPUSH
31121: LD_VAR 0 1
31125: PPUSH
31126: CALL_OW 250
31130: PPUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 251
31140: PPUSH
31141: LD_VAR 0 2
31145: PPUSH
31146: CALL 29400 0 4
31150: ST_TO_ADDR
// end ;
31151: LD_VAR 0 3
31155: RET
// export function DangerInArea ( side , area ) ; begin
31156: LD_INT 0
31158: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31159: LD_ADDR_VAR 0 3
31163: PUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: LD_INT 81
31171: PUSH
31172: LD_VAR 0 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PPUSH
31181: CALL_OW 70
31185: ST_TO_ADDR
// end ;
31186: LD_VAR 0 3
31190: RET
// export function IsExtension ( b ) ; begin
31191: LD_INT 0
31193: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31194: LD_ADDR_VAR 0 2
31198: PUSH
31199: LD_VAR 0 1
31203: PUSH
31204: LD_INT 23
31206: PUSH
31207: LD_INT 20
31209: PUSH
31210: LD_INT 22
31212: PUSH
31213: LD_INT 17
31215: PUSH
31216: LD_INT 24
31218: PUSH
31219: LD_INT 21
31221: PUSH
31222: LD_INT 19
31224: PUSH
31225: LD_INT 16
31227: PUSH
31228: LD_INT 25
31230: PUSH
31231: LD_INT 18
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: IN
31246: ST_TO_ADDR
// end ;
31247: LD_VAR 0 2
31251: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31252: LD_INT 0
31254: PPUSH
31255: PPUSH
31256: PPUSH
// result := [ ] ;
31257: LD_ADDR_VAR 0 4
31261: PUSH
31262: EMPTY
31263: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31264: LD_ADDR_VAR 0 5
31268: PUSH
31269: LD_VAR 0 2
31273: PPUSH
31274: LD_INT 21
31276: PUSH
31277: LD_INT 3
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PPUSH
31284: CALL_OW 70
31288: ST_TO_ADDR
// if not tmp then
31289: LD_VAR 0 5
31293: NOT
31294: IFFALSE 31298
// exit ;
31296: GO 31362
// if checkLink then
31298: LD_VAR 0 3
31302: IFFALSE 31352
// begin for i in tmp do
31304: LD_ADDR_VAR 0 6
31308: PUSH
31309: LD_VAR 0 5
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31350
// if GetBase ( i ) <> base then
31317: LD_VAR 0 6
31321: PPUSH
31322: CALL_OW 274
31326: PUSH
31327: LD_VAR 0 1
31331: NONEQUAL
31332: IFFALSE 31348
// ComLinkToBase ( base , i ) ;
31334: LD_VAR 0 1
31338: PPUSH
31339: LD_VAR 0 6
31343: PPUSH
31344: CALL_OW 169
31348: GO 31314
31350: POP
31351: POP
// end ; result := tmp ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_VAR 0 5
31361: ST_TO_ADDR
// end ;
31362: LD_VAR 0 4
31366: RET
// export function ComComplete ( units , b ) ; var i ; begin
31367: LD_INT 0
31369: PPUSH
31370: PPUSH
// if not units then
31371: LD_VAR 0 1
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31470
// for i in units do
31380: LD_ADDR_VAR 0 4
31384: PUSH
31385: LD_VAR 0 1
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31468
// if BuildingStatus ( b ) = bs_build then
31393: LD_VAR 0 2
31397: PPUSH
31398: CALL_OW 461
31402: PUSH
31403: LD_INT 1
31405: EQUAL
31406: IFFALSE 31466
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31408: LD_VAR 0 4
31412: PPUSH
31413: LD_STRING h
31415: PUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: CALL_OW 250
31425: PUSH
31426: LD_VAR 0 2
31430: PPUSH
31431: CALL_OW 251
31435: PUSH
31436: LD_VAR 0 2
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: PPUSH
31462: CALL_OW 446
31466: GO 31390
31468: POP
31469: POP
// end ;
31470: LD_VAR 0 3
31474: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31475: LD_INT 0
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31483: LD_VAR 0 1
31487: NOT
31488: PUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 263
31498: PUSH
31499: LD_INT 2
31501: NONEQUAL
31502: OR
31503: IFFALSE 31507
// exit ;
31505: GO 31823
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31507: LD_ADDR_VAR 0 6
31511: PUSH
31512: LD_INT 22
31514: PUSH
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL_OW 255
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 30
31534: PUSH
31535: LD_INT 36
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 34
31544: PUSH
31545: LD_INT 31
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PPUSH
31561: CALL_OW 69
31565: ST_TO_ADDR
// if not tmp then
31566: LD_VAR 0 6
31570: NOT
31571: IFFALSE 31575
// exit ;
31573: GO 31823
// result := [ ] ;
31575: LD_ADDR_VAR 0 2
31579: PUSH
31580: EMPTY
31581: ST_TO_ADDR
// for i in tmp do
31582: LD_ADDR_VAR 0 3
31586: PUSH
31587: LD_VAR 0 6
31591: PUSH
31592: FOR_IN
31593: IFFALSE 31664
// begin t := UnitsInside ( i ) ;
31595: LD_ADDR_VAR 0 4
31599: PUSH
31600: LD_VAR 0 3
31604: PPUSH
31605: CALL_OW 313
31609: ST_TO_ADDR
// if t then
31610: LD_VAR 0 4
31614: IFFALSE 31662
// for j in t do
31616: LD_ADDR_VAR 0 7
31620: PUSH
31621: LD_VAR 0 4
31625: PUSH
31626: FOR_IN
31627: IFFALSE 31660
// result := Replace ( result , result + 1 , j ) ;
31629: LD_ADDR_VAR 0 2
31633: PUSH
31634: LD_VAR 0 2
31638: PPUSH
31639: LD_VAR 0 2
31643: PUSH
31644: LD_INT 1
31646: PLUS
31647: PPUSH
31648: LD_VAR 0 7
31652: PPUSH
31653: CALL_OW 1
31657: ST_TO_ADDR
31658: GO 31626
31660: POP
31661: POP
// end ;
31662: GO 31592
31664: POP
31665: POP
// if not result then
31666: LD_VAR 0 2
31670: NOT
31671: IFFALSE 31675
// exit ;
31673: GO 31823
// mech := result [ 1 ] ;
31675: LD_ADDR_VAR 0 5
31679: PUSH
31680: LD_VAR 0 2
31684: PUSH
31685: LD_INT 1
31687: ARRAY
31688: ST_TO_ADDR
// if result > 1 then
31689: LD_VAR 0 2
31693: PUSH
31694: LD_INT 1
31696: GREATER
31697: IFFALSE 31809
// begin for i = 2 to result do
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: DOUBLE
31705: LD_INT 2
31707: DEC
31708: ST_TO_ADDR
31709: LD_VAR 0 2
31713: PUSH
31714: FOR_TO
31715: IFFALSE 31807
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31717: LD_ADDR_VAR 0 4
31721: PUSH
31722: LD_VAR 0 2
31726: PUSH
31727: LD_VAR 0 3
31731: ARRAY
31732: PPUSH
31733: LD_INT 3
31735: PPUSH
31736: CALL_OW 259
31740: PUSH
31741: LD_VAR 0 2
31745: PUSH
31746: LD_VAR 0 3
31750: ARRAY
31751: PPUSH
31752: CALL_OW 432
31756: MINUS
31757: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31758: LD_VAR 0 4
31762: PUSH
31763: LD_VAR 0 5
31767: PPUSH
31768: LD_INT 3
31770: PPUSH
31771: CALL_OW 259
31775: PUSH
31776: LD_VAR 0 5
31780: PPUSH
31781: CALL_OW 432
31785: MINUS
31786: GREATEREQUAL
31787: IFFALSE 31805
// mech := result [ i ] ;
31789: LD_ADDR_VAR 0 5
31793: PUSH
31794: LD_VAR 0 2
31798: PUSH
31799: LD_VAR 0 3
31803: ARRAY
31804: ST_TO_ADDR
// end ;
31805: GO 31714
31807: POP
31808: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31809: LD_VAR 0 1
31813: PPUSH
31814: LD_VAR 0 5
31818: PPUSH
31819: CALL_OW 135
// end ;
31823: LD_VAR 0 2
31827: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31828: LD_INT 0
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
// result := [ ] ;
31843: LD_ADDR_VAR 0 7
31847: PUSH
31848: EMPTY
31849: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31850: LD_VAR 0 1
31854: PPUSH
31855: CALL_OW 266
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: IN
31870: NOT
31871: IFFALSE 31875
// exit ;
31873: GO 33509
// if name then
31875: LD_VAR 0 3
31879: IFFALSE 31895
// SetBName ( base_dep , name ) ;
31881: LD_VAR 0 1
31885: PPUSH
31886: LD_VAR 0 3
31890: PPUSH
31891: CALL_OW 500
// base := GetBase ( base_dep ) ;
31895: LD_ADDR_VAR 0 15
31899: PUSH
31900: LD_VAR 0 1
31904: PPUSH
31905: CALL_OW 274
31909: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31910: LD_ADDR_VAR 0 16
31914: PUSH
31915: LD_VAR 0 1
31919: PPUSH
31920: CALL_OW 255
31924: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31925: LD_ADDR_VAR 0 17
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 248
31939: ST_TO_ADDR
// if sources then
31940: LD_VAR 0 5
31944: IFFALSE 31991
// for i = 1 to 3 do
31946: LD_ADDR_VAR 0 8
31950: PUSH
31951: DOUBLE
31952: LD_INT 1
31954: DEC
31955: ST_TO_ADDR
31956: LD_INT 3
31958: PUSH
31959: FOR_TO
31960: IFFALSE 31989
// AddResourceType ( base , i , sources [ i ] ) ;
31962: LD_VAR 0 15
31966: PPUSH
31967: LD_VAR 0 8
31971: PPUSH
31972: LD_VAR 0 5
31976: PUSH
31977: LD_VAR 0 8
31981: ARRAY
31982: PPUSH
31983: CALL_OW 276
31987: GO 31959
31989: POP
31990: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31991: LD_ADDR_VAR 0 18
31995: PUSH
31996: LD_VAR 0 15
32000: PPUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_INT 1
32008: PPUSH
32009: CALL 31252 0 3
32013: ST_TO_ADDR
// InitHc ;
32014: CALL_OW 19
// InitUc ;
32018: CALL_OW 18
// uc_side := side ;
32022: LD_ADDR_OWVAR 20
32026: PUSH
32027: LD_VAR 0 16
32031: ST_TO_ADDR
// uc_nation := nation ;
32032: LD_ADDR_OWVAR 21
32036: PUSH
32037: LD_VAR 0 17
32041: ST_TO_ADDR
// if buildings then
32042: LD_VAR 0 18
32046: IFFALSE 33368
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32048: LD_ADDR_VAR 0 19
32052: PUSH
32053: LD_VAR 0 18
32057: PPUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: LD_INT 29
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 30
32073: PUSH
32074: LD_INT 30
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: PPUSH
32086: CALL_OW 72
32090: ST_TO_ADDR
// if tmp then
32091: LD_VAR 0 19
32095: IFFALSE 32143
// for i in tmp do
32097: LD_ADDR_VAR 0 8
32101: PUSH
32102: LD_VAR 0 19
32106: PUSH
32107: FOR_IN
32108: IFFALSE 32141
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32110: LD_VAR 0 8
32114: PPUSH
32115: CALL_OW 250
32119: PPUSH
32120: LD_VAR 0 8
32124: PPUSH
32125: CALL_OW 251
32129: PPUSH
32130: LD_VAR 0 16
32134: PPUSH
32135: CALL_OW 441
32139: GO 32107
32141: POP
32142: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32143: LD_VAR 0 18
32147: PPUSH
32148: LD_INT 2
32150: PUSH
32151: LD_INT 30
32153: PUSH
32154: LD_INT 32
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 30
32163: PUSH
32164: LD_INT 33
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 72
32180: IFFALSE 32268
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32182: LD_ADDR_VAR 0 8
32186: PUSH
32187: LD_VAR 0 18
32191: PPUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 30
32197: PUSH
32198: LD_INT 32
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 33
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL_OW 72
32224: PUSH
32225: FOR_IN
32226: IFFALSE 32266
// begin if not GetBWeapon ( i ) then
32228: LD_VAR 0 8
32232: PPUSH
32233: CALL_OW 269
32237: NOT
32238: IFFALSE 32264
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32240: LD_VAR 0 8
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 2
32254: PPUSH
32255: CALL 33514 0 2
32259: PPUSH
32260: CALL_OW 431
// end ;
32264: GO 32225
32266: POP
32267: POP
// end ; for i = 1 to personel do
32268: LD_ADDR_VAR 0 8
32272: PUSH
32273: DOUBLE
32274: LD_INT 1
32276: DEC
32277: ST_TO_ADDR
32278: LD_VAR 0 6
32282: PUSH
32283: FOR_TO
32284: IFFALSE 33348
// begin if i > 4 then
32286: LD_VAR 0 8
32290: PUSH
32291: LD_INT 4
32293: GREATER
32294: IFFALSE 32298
// break ;
32296: GO 33348
// case i of 1 :
32298: LD_VAR 0 8
32302: PUSH
32303: LD_INT 1
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32391
32311: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32312: LD_ADDR_VAR 0 12
32316: PUSH
32317: LD_VAR 0 18
32321: PPUSH
32322: LD_INT 22
32324: PUSH
32325: LD_VAR 0 16
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 58
32336: PUSH
32337: EMPTY
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 30
32345: PUSH
32346: LD_INT 32
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 30
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 30
32365: PUSH
32366: LD_INT 5
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: PPUSH
32384: CALL_OW 72
32388: ST_TO_ADDR
32389: GO 32613
32391: LD_INT 2
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32461
32399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32400: LD_ADDR_VAR 0 12
32404: PUSH
32405: LD_VAR 0 18
32409: PPUSH
32410: LD_INT 22
32412: PUSH
32413: LD_VAR 0 16
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 30
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 30
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PPUSH
32454: CALL_OW 72
32458: ST_TO_ADDR
32459: GO 32613
32461: LD_INT 3
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32531
32469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32470: LD_ADDR_VAR 0 12
32474: PUSH
32475: LD_VAR 0 18
32479: PPUSH
32480: LD_INT 22
32482: PUSH
32483: LD_VAR 0 16
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 30
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PPUSH
32524: CALL_OW 72
32528: ST_TO_ADDR
32529: GO 32613
32531: LD_INT 4
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32612
32539: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32540: LD_ADDR_VAR 0 12
32544: PUSH
32545: LD_VAR 0 18
32549: PPUSH
32550: LD_INT 22
32552: PUSH
32553: LD_VAR 0 16
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 30
32567: PUSH
32568: LD_INT 6
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 30
32577: PUSH
32578: LD_INT 7
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_INT 8
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 72
32609: ST_TO_ADDR
32610: GO 32613
32612: POP
// if i = 1 then
32613: LD_VAR 0 8
32617: PUSH
32618: LD_INT 1
32620: EQUAL
32621: IFFALSE 32732
// begin tmp := [ ] ;
32623: LD_ADDR_VAR 0 19
32627: PUSH
32628: EMPTY
32629: ST_TO_ADDR
// for j in f do
32630: LD_ADDR_VAR 0 9
32634: PUSH
32635: LD_VAR 0 12
32639: PUSH
32640: FOR_IN
32641: IFFALSE 32714
// if GetBType ( j ) = b_bunker then
32643: LD_VAR 0 9
32647: PPUSH
32648: CALL_OW 266
32652: PUSH
32653: LD_INT 32
32655: EQUAL
32656: IFFALSE 32683
// tmp := Insert ( tmp , 1 , j ) else
32658: LD_ADDR_VAR 0 19
32662: PUSH
32663: LD_VAR 0 19
32667: PPUSH
32668: LD_INT 1
32670: PPUSH
32671: LD_VAR 0 9
32675: PPUSH
32676: CALL_OW 2
32680: ST_TO_ADDR
32681: GO 32712
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32683: LD_ADDR_VAR 0 19
32687: PUSH
32688: LD_VAR 0 19
32692: PPUSH
32693: LD_VAR 0 19
32697: PUSH
32698: LD_INT 1
32700: PLUS
32701: PPUSH
32702: LD_VAR 0 9
32706: PPUSH
32707: CALL_OW 2
32711: ST_TO_ADDR
32712: GO 32640
32714: POP
32715: POP
// if tmp then
32716: LD_VAR 0 19
32720: IFFALSE 32732
// f := tmp ;
32722: LD_ADDR_VAR 0 12
32726: PUSH
32727: LD_VAR 0 19
32731: ST_TO_ADDR
// end ; x := personel [ i ] ;
32732: LD_ADDR_VAR 0 13
32736: PUSH
32737: LD_VAR 0 6
32741: PUSH
32742: LD_VAR 0 8
32746: ARRAY
32747: ST_TO_ADDR
// if x = - 1 then
32748: LD_VAR 0 13
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: EQUAL
32757: IFFALSE 32966
// begin for j in f do
32759: LD_ADDR_VAR 0 9
32763: PUSH
32764: LD_VAR 0 12
32768: PUSH
32769: FOR_IN
32770: IFFALSE 32962
// repeat InitHc ;
32772: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32776: LD_VAR 0 9
32780: PPUSH
32781: CALL_OW 266
32785: PUSH
32786: LD_INT 5
32788: EQUAL
32789: IFFALSE 32859
// begin if UnitsInside ( j ) < 3 then
32791: LD_VAR 0 9
32795: PPUSH
32796: CALL_OW 313
32800: PUSH
32801: LD_INT 3
32803: LESS
32804: IFFALSE 32840
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32806: LD_INT 0
32808: PPUSH
32809: LD_INT 5
32811: PUSH
32812: LD_INT 8
32814: PUSH
32815: LD_INT 9
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PUSH
32823: LD_VAR 0 17
32827: ARRAY
32828: PPUSH
32829: LD_VAR 0 4
32833: PPUSH
32834: CALL_OW 380
32838: GO 32857
// PrepareHuman ( false , i , skill ) ;
32840: LD_INT 0
32842: PPUSH
32843: LD_VAR 0 8
32847: PPUSH
32848: LD_VAR 0 4
32852: PPUSH
32853: CALL_OW 380
// end else
32857: GO 32876
// PrepareHuman ( false , i , skill ) ;
32859: LD_INT 0
32861: PPUSH
32862: LD_VAR 0 8
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: CALL_OW 380
// un := CreateHuman ;
32876: LD_ADDR_VAR 0 14
32880: PUSH
32881: CALL_OW 44
32885: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32886: LD_ADDR_VAR 0 7
32890: PUSH
32891: LD_VAR 0 7
32895: PPUSH
32896: LD_INT 1
32898: PPUSH
32899: LD_VAR 0 14
32903: PPUSH
32904: CALL_OW 2
32908: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32909: LD_VAR 0 14
32913: PPUSH
32914: LD_VAR 0 9
32918: PPUSH
32919: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32923: LD_VAR 0 9
32927: PPUSH
32928: CALL_OW 313
32932: PUSH
32933: LD_INT 6
32935: EQUAL
32936: PUSH
32937: LD_VAR 0 9
32941: PPUSH
32942: CALL_OW 266
32946: PUSH
32947: LD_INT 32
32949: PUSH
32950: LD_INT 31
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: IN
32957: OR
32958: IFFALSE 32772
32960: GO 32769
32962: POP
32963: POP
// end else
32964: GO 33346
// for j = 1 to x do
32966: LD_ADDR_VAR 0 9
32970: PUSH
32971: DOUBLE
32972: LD_INT 1
32974: DEC
32975: ST_TO_ADDR
32976: LD_VAR 0 13
32980: PUSH
32981: FOR_TO
32982: IFFALSE 33344
// begin InitHc ;
32984: CALL_OW 19
// if not f then
32988: LD_VAR 0 12
32992: NOT
32993: IFFALSE 33082
// begin PrepareHuman ( false , i , skill ) ;
32995: LD_INT 0
32997: PPUSH
32998: LD_VAR 0 8
33002: PPUSH
33003: LD_VAR 0 4
33007: PPUSH
33008: CALL_OW 380
// un := CreateHuman ;
33012: LD_ADDR_VAR 0 14
33016: PUSH
33017: CALL_OW 44
33021: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33022: LD_ADDR_VAR 0 7
33026: PUSH
33027: LD_VAR 0 7
33031: PPUSH
33032: LD_INT 1
33034: PPUSH
33035: LD_VAR 0 14
33039: PPUSH
33040: CALL_OW 2
33044: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33045: LD_VAR 0 14
33049: PPUSH
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 250
33059: PPUSH
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 251
33069: PPUSH
33070: LD_INT 10
33072: PPUSH
33073: LD_INT 0
33075: PPUSH
33076: CALL_OW 50
// continue ;
33080: GO 32981
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33082: LD_VAR 0 12
33086: PUSH
33087: LD_INT 1
33089: ARRAY
33090: PPUSH
33091: CALL_OW 313
33095: PUSH
33096: LD_VAR 0 12
33100: PUSH
33101: LD_INT 1
33103: ARRAY
33104: PPUSH
33105: CALL_OW 266
33109: PUSH
33110: LD_INT 32
33112: PUSH
33113: LD_INT 31
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: IN
33120: AND
33121: PUSH
33122: LD_VAR 0 12
33126: PUSH
33127: LD_INT 1
33129: ARRAY
33130: PPUSH
33131: CALL_OW 313
33135: PUSH
33136: LD_INT 6
33138: EQUAL
33139: OR
33140: IFFALSE 33160
// f := Delete ( f , 1 ) ;
33142: LD_ADDR_VAR 0 12
33146: PUSH
33147: LD_VAR 0 12
33151: PPUSH
33152: LD_INT 1
33154: PPUSH
33155: CALL_OW 3
33159: ST_TO_ADDR
// if not f then
33160: LD_VAR 0 12
33164: NOT
33165: IFFALSE 33183
// begin x := x + 2 ;
33167: LD_ADDR_VAR 0 13
33171: PUSH
33172: LD_VAR 0 13
33176: PUSH
33177: LD_INT 2
33179: PLUS
33180: ST_TO_ADDR
// continue ;
33181: GO 32981
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33183: LD_VAR 0 12
33187: PUSH
33188: LD_INT 1
33190: ARRAY
33191: PPUSH
33192: CALL_OW 266
33196: PUSH
33197: LD_INT 5
33199: EQUAL
33200: IFFALSE 33274
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33202: LD_VAR 0 12
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PPUSH
33211: CALL_OW 313
33215: PUSH
33216: LD_INT 3
33218: LESS
33219: IFFALSE 33255
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33221: LD_INT 0
33223: PPUSH
33224: LD_INT 5
33226: PUSH
33227: LD_INT 8
33229: PUSH
33230: LD_INT 9
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: PUSH
33238: LD_VAR 0 17
33242: ARRAY
33243: PPUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: CALL_OW 380
33253: GO 33272
// PrepareHuman ( false , i , skill ) ;
33255: LD_INT 0
33257: PPUSH
33258: LD_VAR 0 8
33262: PPUSH
33263: LD_VAR 0 4
33267: PPUSH
33268: CALL_OW 380
// end else
33272: GO 33291
// PrepareHuman ( false , i , skill ) ;
33274: LD_INT 0
33276: PPUSH
33277: LD_VAR 0 8
33281: PPUSH
33282: LD_VAR 0 4
33286: PPUSH
33287: CALL_OW 380
// un := CreateHuman ;
33291: LD_ADDR_VAR 0 14
33295: PUSH
33296: CALL_OW 44
33300: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33301: LD_ADDR_VAR 0 7
33305: PUSH
33306: LD_VAR 0 7
33310: PPUSH
33311: LD_INT 1
33313: PPUSH
33314: LD_VAR 0 14
33318: PPUSH
33319: CALL_OW 2
33323: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33324: LD_VAR 0 14
33328: PPUSH
33329: LD_VAR 0 12
33333: PUSH
33334: LD_INT 1
33336: ARRAY
33337: PPUSH
33338: CALL_OW 52
// end ;
33342: GO 32981
33344: POP
33345: POP
// end ;
33346: GO 32283
33348: POP
33349: POP
// result := result ^ buildings ;
33350: LD_ADDR_VAR 0 7
33354: PUSH
33355: LD_VAR 0 7
33359: PUSH
33360: LD_VAR 0 18
33364: ADD
33365: ST_TO_ADDR
// end else
33366: GO 33509
// begin for i = 1 to personel do
33368: LD_ADDR_VAR 0 8
33372: PUSH
33373: DOUBLE
33374: LD_INT 1
33376: DEC
33377: ST_TO_ADDR
33378: LD_VAR 0 6
33382: PUSH
33383: FOR_TO
33384: IFFALSE 33507
// begin if i > 4 then
33386: LD_VAR 0 8
33390: PUSH
33391: LD_INT 4
33393: GREATER
33394: IFFALSE 33398
// break ;
33396: GO 33507
// x := personel [ i ] ;
33398: LD_ADDR_VAR 0 13
33402: PUSH
33403: LD_VAR 0 6
33407: PUSH
33408: LD_VAR 0 8
33412: ARRAY
33413: ST_TO_ADDR
// if x = - 1 then
33414: LD_VAR 0 13
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: EQUAL
33423: IFFALSE 33427
// continue ;
33425: GO 33383
// PrepareHuman ( false , i , skill ) ;
33427: LD_INT 0
33429: PPUSH
33430: LD_VAR 0 8
33434: PPUSH
33435: LD_VAR 0 4
33439: PPUSH
33440: CALL_OW 380
// un := CreateHuman ;
33444: LD_ADDR_VAR 0 14
33448: PUSH
33449: CALL_OW 44
33453: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33454: LD_VAR 0 14
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 250
33468: PPUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 251
33478: PPUSH
33479: LD_INT 10
33481: PPUSH
33482: LD_INT 0
33484: PPUSH
33485: CALL_OW 50
// result := result ^ un ;
33489: LD_ADDR_VAR 0 7
33493: PUSH
33494: LD_VAR 0 7
33498: PUSH
33499: LD_VAR 0 14
33503: ADD
33504: ST_TO_ADDR
// end ;
33505: GO 33383
33507: POP
33508: POP
// end ; end ;
33509: LD_VAR 0 7
33513: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33514: LD_INT 0
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
// result := false ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_INT 0
33539: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33540: LD_VAR 0 1
33544: NOT
33545: PUSH
33546: LD_VAR 0 1
33550: PPUSH
33551: CALL_OW 266
33555: PUSH
33556: LD_INT 32
33558: PUSH
33559: LD_INT 33
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: IN
33566: NOT
33567: OR
33568: IFFALSE 33572
// exit ;
33570: GO 34681
// nat := GetNation ( tower ) ;
33572: LD_ADDR_VAR 0 12
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 248
33586: ST_TO_ADDR
// side := GetSide ( tower ) ;
33587: LD_ADDR_VAR 0 16
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 255
33601: ST_TO_ADDR
// x := GetX ( tower ) ;
33602: LD_ADDR_VAR 0 10
33606: PUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 250
33616: ST_TO_ADDR
// y := GetY ( tower ) ;
33617: LD_ADDR_VAR 0 11
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 251
33631: ST_TO_ADDR
// if not x or not y then
33632: LD_VAR 0 10
33636: NOT
33637: PUSH
33638: LD_VAR 0 11
33642: NOT
33643: OR
33644: IFFALSE 33648
// exit ;
33646: GO 34681
// weapon := 0 ;
33648: LD_ADDR_VAR 0 18
33652: PUSH
33653: LD_INT 0
33655: ST_TO_ADDR
// fac_list := [ ] ;
33656: LD_ADDR_VAR 0 17
33660: PUSH
33661: EMPTY
33662: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33663: LD_ADDR_VAR 0 6
33667: PUSH
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL_OW 274
33677: PPUSH
33678: LD_VAR 0 2
33682: PPUSH
33683: LD_INT 0
33685: PPUSH
33686: CALL 31252 0 3
33690: PPUSH
33691: LD_INT 30
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 72
33705: ST_TO_ADDR
// if not factories then
33706: LD_VAR 0 6
33710: NOT
33711: IFFALSE 33715
// exit ;
33713: GO 34681
// for i in factories do
33715: LD_ADDR_VAR 0 8
33719: PUSH
33720: LD_VAR 0 6
33724: PUSH
33725: FOR_IN
33726: IFFALSE 33751
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33728: LD_ADDR_VAR 0 17
33732: PUSH
33733: LD_VAR 0 17
33737: PUSH
33738: LD_VAR 0 8
33742: PPUSH
33743: CALL_OW 478
33747: UNION
33748: ST_TO_ADDR
33749: GO 33725
33751: POP
33752: POP
// if not fac_list then
33753: LD_VAR 0 17
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 34681
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33762: LD_ADDR_VAR 0 5
33766: PUSH
33767: LD_INT 4
33769: PUSH
33770: LD_INT 5
33772: PUSH
33773: LD_INT 9
33775: PUSH
33776: LD_INT 10
33778: PUSH
33779: LD_INT 6
33781: PUSH
33782: LD_INT 7
33784: PUSH
33785: LD_INT 11
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 27
33799: PUSH
33800: LD_INT 28
33802: PUSH
33803: LD_INT 26
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 43
33817: PUSH
33818: LD_INT 44
33820: PUSH
33821: LD_INT 46
33823: PUSH
33824: LD_INT 45
33826: PUSH
33827: LD_INT 47
33829: PUSH
33830: LD_INT 49
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: PUSH
33846: LD_VAR 0 12
33850: ARRAY
33851: ST_TO_ADDR
// list := list isect fac_list ;
33852: LD_ADDR_VAR 0 5
33856: PUSH
33857: LD_VAR 0 5
33861: PUSH
33862: LD_VAR 0 17
33866: ISECT
33867: ST_TO_ADDR
// if not list then
33868: LD_VAR 0 5
33872: NOT
33873: IFFALSE 33877
// exit ;
33875: GO 34681
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33877: LD_VAR 0 12
33881: PUSH
33882: LD_INT 3
33884: EQUAL
33885: PUSH
33886: LD_INT 49
33888: PUSH
33889: LD_VAR 0 5
33893: IN
33894: AND
33895: PUSH
33896: LD_INT 31
33898: PPUSH
33899: LD_VAR 0 16
33903: PPUSH
33904: CALL_OW 321
33908: PUSH
33909: LD_INT 2
33911: EQUAL
33912: AND
33913: IFFALSE 33973
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33915: LD_INT 22
33917: PUSH
33918: LD_VAR 0 16
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 35
33929: PUSH
33930: LD_INT 49
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 91
33939: PUSH
33940: LD_VAR 0 1
33944: PUSH
33945: LD_INT 10
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: PPUSH
33958: CALL_OW 69
33962: NOT
33963: IFFALSE 33973
// weapon := ru_time_lapser ;
33965: LD_ADDR_VAR 0 18
33969: PUSH
33970: LD_INT 49
33972: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33973: LD_VAR 0 12
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: IN
33988: PUSH
33989: LD_INT 11
33991: PUSH
33992: LD_VAR 0 5
33996: IN
33997: PUSH
33998: LD_INT 30
34000: PUSH
34001: LD_VAR 0 5
34005: IN
34006: OR
34007: AND
34008: PUSH
34009: LD_INT 6
34011: PPUSH
34012: LD_VAR 0 16
34016: PPUSH
34017: CALL_OW 321
34021: PUSH
34022: LD_INT 2
34024: EQUAL
34025: AND
34026: IFFALSE 34191
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34028: LD_INT 22
34030: PUSH
34031: LD_VAR 0 16
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 35
34045: PUSH
34046: LD_INT 11
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 35
34055: PUSH
34056: LD_INT 30
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 91
34070: PUSH
34071: LD_VAR 0 1
34075: PUSH
34076: LD_INT 18
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 69
34093: NOT
34094: PUSH
34095: LD_INT 22
34097: PUSH
34098: LD_VAR 0 16
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 32
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 30
34122: PUSH
34123: LD_INT 33
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 91
34137: PUSH
34138: LD_VAR 0 1
34142: PUSH
34143: LD_INT 12
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: PPUSH
34159: CALL_OW 69
34163: PUSH
34164: LD_INT 2
34166: GREATER
34167: AND
34168: IFFALSE 34191
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34170: LD_ADDR_VAR 0 18
34174: PUSH
34175: LD_INT 11
34177: PUSH
34178: LD_INT 30
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_VAR 0 12
34189: ARRAY
34190: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34191: LD_VAR 0 18
34195: NOT
34196: PUSH
34197: LD_INT 40
34199: PPUSH
34200: LD_VAR 0 16
34204: PPUSH
34205: CALL_OW 321
34209: PUSH
34210: LD_INT 2
34212: EQUAL
34213: AND
34214: PUSH
34215: LD_INT 7
34217: PUSH
34218: LD_VAR 0 5
34222: IN
34223: PUSH
34224: LD_INT 28
34226: PUSH
34227: LD_VAR 0 5
34231: IN
34232: OR
34233: PUSH
34234: LD_INT 45
34236: PUSH
34237: LD_VAR 0 5
34241: IN
34242: OR
34243: AND
34244: IFFALSE 34498
// begin hex := GetHexInfo ( x , y ) ;
34246: LD_ADDR_VAR 0 4
34250: PUSH
34251: LD_VAR 0 10
34255: PPUSH
34256: LD_VAR 0 11
34260: PPUSH
34261: CALL_OW 546
34265: ST_TO_ADDR
// if hex [ 1 ] then
34266: LD_VAR 0 4
34270: PUSH
34271: LD_INT 1
34273: ARRAY
34274: IFFALSE 34278
// exit ;
34276: GO 34681
// height := hex [ 2 ] ;
34278: LD_ADDR_VAR 0 15
34282: PUSH
34283: LD_VAR 0 4
34287: PUSH
34288: LD_INT 2
34290: ARRAY
34291: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34292: LD_ADDR_VAR 0 14
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: LD_INT 5
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: ST_TO_ADDR
// for i in tmp do
34315: LD_ADDR_VAR 0 8
34319: PUSH
34320: LD_VAR 0 14
34324: PUSH
34325: FOR_IN
34326: IFFALSE 34496
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34328: LD_ADDR_VAR 0 9
34332: PUSH
34333: LD_VAR 0 10
34337: PPUSH
34338: LD_VAR 0 8
34342: PPUSH
34343: LD_INT 5
34345: PPUSH
34346: CALL_OW 272
34350: PUSH
34351: LD_VAR 0 11
34355: PPUSH
34356: LD_VAR 0 8
34360: PPUSH
34361: LD_INT 5
34363: PPUSH
34364: CALL_OW 273
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34373: LD_VAR 0 9
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: PPUSH
34382: LD_VAR 0 9
34386: PUSH
34387: LD_INT 2
34389: ARRAY
34390: PPUSH
34391: CALL_OW 488
34395: IFFALSE 34494
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 9
34406: PUSH
34407: LD_INT 1
34409: ARRAY
34410: PPUSH
34411: LD_VAR 0 9
34415: PUSH
34416: LD_INT 2
34418: ARRAY
34419: PPUSH
34420: CALL_OW 546
34424: ST_TO_ADDR
// if hex [ 1 ] then
34425: LD_VAR 0 4
34429: PUSH
34430: LD_INT 1
34432: ARRAY
34433: IFFALSE 34437
// continue ;
34435: GO 34325
// h := hex [ 2 ] ;
34437: LD_ADDR_VAR 0 13
34441: PUSH
34442: LD_VAR 0 4
34446: PUSH
34447: LD_INT 2
34449: ARRAY
34450: ST_TO_ADDR
// if h + 7 < height then
34451: LD_VAR 0 13
34455: PUSH
34456: LD_INT 7
34458: PLUS
34459: PUSH
34460: LD_VAR 0 15
34464: LESS
34465: IFFALSE 34494
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34467: LD_ADDR_VAR 0 18
34471: PUSH
34472: LD_INT 7
34474: PUSH
34475: LD_INT 28
34477: PUSH
34478: LD_INT 45
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: PUSH
34486: LD_VAR 0 12
34490: ARRAY
34491: ST_TO_ADDR
// break ;
34492: GO 34496
// end ; end ; end ;
34494: GO 34325
34496: POP
34497: POP
// end ; if not weapon then
34498: LD_VAR 0 18
34502: NOT
34503: IFFALSE 34563
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34505: LD_ADDR_VAR 0 5
34509: PUSH
34510: LD_VAR 0 5
34514: PUSH
34515: LD_INT 11
34517: PUSH
34518: LD_INT 30
34520: PUSH
34521: LD_INT 49
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: DIFF
34529: ST_TO_ADDR
// if not list then
34530: LD_VAR 0 5
34534: NOT
34535: IFFALSE 34539
// exit ;
34537: GO 34681
// weapon := list [ rand ( 1 , list ) ] ;
34539: LD_ADDR_VAR 0 18
34543: PUSH
34544: LD_VAR 0 5
34548: PUSH
34549: LD_INT 1
34551: PPUSH
34552: LD_VAR 0 5
34556: PPUSH
34557: CALL_OW 12
34561: ARRAY
34562: ST_TO_ADDR
// end ; if weapon then
34563: LD_VAR 0 18
34567: IFFALSE 34681
// begin tmp := CostOfWeapon ( weapon ) ;
34569: LD_ADDR_VAR 0 14
34573: PUSH
34574: LD_VAR 0 18
34578: PPUSH
34579: CALL_OW 451
34583: ST_TO_ADDR
// j := GetBase ( tower ) ;
34584: LD_ADDR_VAR 0 9
34588: PUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 274
34598: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34599: LD_VAR 0 9
34603: PPUSH
34604: LD_INT 1
34606: PPUSH
34607: CALL_OW 275
34611: PUSH
34612: LD_VAR 0 14
34616: PUSH
34617: LD_INT 1
34619: ARRAY
34620: GREATEREQUAL
34621: PUSH
34622: LD_VAR 0 9
34626: PPUSH
34627: LD_INT 2
34629: PPUSH
34630: CALL_OW 275
34634: PUSH
34635: LD_VAR 0 14
34639: PUSH
34640: LD_INT 2
34642: ARRAY
34643: GREATEREQUAL
34644: AND
34645: PUSH
34646: LD_VAR 0 9
34650: PPUSH
34651: LD_INT 3
34653: PPUSH
34654: CALL_OW 275
34658: PUSH
34659: LD_VAR 0 14
34663: PUSH
34664: LD_INT 3
34666: ARRAY
34667: GREATEREQUAL
34668: AND
34669: IFFALSE 34681
// result := weapon ;
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_VAR 0 18
34680: ST_TO_ADDR
// end ; end ;
34681: LD_VAR 0 3
34685: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
// result := true ;
34690: LD_ADDR_VAR 0 3
34694: PUSH
34695: LD_INT 1
34697: ST_TO_ADDR
// if array1 = array2 then
34698: LD_VAR 0 1
34702: PUSH
34703: LD_VAR 0 2
34707: EQUAL
34708: IFFALSE 34768
// begin for i = 1 to array1 do
34710: LD_ADDR_VAR 0 4
34714: PUSH
34715: DOUBLE
34716: LD_INT 1
34718: DEC
34719: ST_TO_ADDR
34720: LD_VAR 0 1
34724: PUSH
34725: FOR_TO
34726: IFFALSE 34764
// if array1 [ i ] <> array2 [ i ] then
34728: LD_VAR 0 1
34732: PUSH
34733: LD_VAR 0 4
34737: ARRAY
34738: PUSH
34739: LD_VAR 0 2
34743: PUSH
34744: LD_VAR 0 4
34748: ARRAY
34749: NONEQUAL
34750: IFFALSE 34762
// begin result := false ;
34752: LD_ADDR_VAR 0 3
34756: PUSH
34757: LD_INT 0
34759: ST_TO_ADDR
// break ;
34760: GO 34764
// end ;
34762: GO 34725
34764: POP
34765: POP
// end else
34766: GO 34776
// result := false ;
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_INT 0
34775: ST_TO_ADDR
// end ;
34776: LD_VAR 0 3
34780: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34781: LD_INT 0
34783: PPUSH
34784: PPUSH
// if not array1 or not array2 then
34785: LD_VAR 0 1
34789: NOT
34790: PUSH
34791: LD_VAR 0 2
34795: NOT
34796: OR
34797: IFFALSE 34801
// exit ;
34799: GO 34865
// result := true ;
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 1
34808: ST_TO_ADDR
// for i = 1 to array1 do
34809: LD_ADDR_VAR 0 4
34813: PUSH
34814: DOUBLE
34815: LD_INT 1
34817: DEC
34818: ST_TO_ADDR
34819: LD_VAR 0 1
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34863
// if array1 [ i ] <> array2 [ i ] then
34827: LD_VAR 0 1
34831: PUSH
34832: LD_VAR 0 4
34836: ARRAY
34837: PUSH
34838: LD_VAR 0 2
34842: PUSH
34843: LD_VAR 0 4
34847: ARRAY
34848: NONEQUAL
34849: IFFALSE 34861
// begin result := false ;
34851: LD_ADDR_VAR 0 3
34855: PUSH
34856: LD_INT 0
34858: ST_TO_ADDR
// break ;
34859: GO 34863
// end ;
34861: GO 34824
34863: POP
34864: POP
// end ;
34865: LD_VAR 0 3
34869: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34870: LD_INT 0
34872: PPUSH
34873: PPUSH
34874: PPUSH
// pom := GetBase ( fac ) ;
34875: LD_ADDR_VAR 0 5
34879: PUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 274
34889: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34890: LD_ADDR_VAR 0 4
34894: PUSH
34895: LD_VAR 0 2
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: PPUSH
34904: LD_VAR 0 2
34908: PUSH
34909: LD_INT 2
34911: ARRAY
34912: PPUSH
34913: LD_VAR 0 2
34917: PUSH
34918: LD_INT 3
34920: ARRAY
34921: PPUSH
34922: LD_VAR 0 2
34926: PUSH
34927: LD_INT 4
34929: ARRAY
34930: PPUSH
34931: CALL_OW 449
34935: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34936: LD_ADDR_VAR 0 3
34940: PUSH
34941: LD_VAR 0 5
34945: PPUSH
34946: LD_INT 1
34948: PPUSH
34949: CALL_OW 275
34953: PUSH
34954: LD_VAR 0 4
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: GREATEREQUAL
34963: PUSH
34964: LD_VAR 0 5
34968: PPUSH
34969: LD_INT 2
34971: PPUSH
34972: CALL_OW 275
34976: PUSH
34977: LD_VAR 0 4
34981: PUSH
34982: LD_INT 2
34984: ARRAY
34985: GREATEREQUAL
34986: AND
34987: PUSH
34988: LD_VAR 0 5
34992: PPUSH
34993: LD_INT 3
34995: PPUSH
34996: CALL_OW 275
35000: PUSH
35001: LD_VAR 0 4
35005: PUSH
35006: LD_INT 3
35008: ARRAY
35009: GREATEREQUAL
35010: AND
35011: ST_TO_ADDR
// end ;
35012: LD_VAR 0 3
35016: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35017: LD_INT 0
35019: PPUSH
35020: PPUSH
35021: PPUSH
35022: PPUSH
// pom := GetBase ( building ) ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 274
35037: ST_TO_ADDR
// if not pom then
35038: LD_VAR 0 3
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 35217
// btype := GetBType ( building ) ;
35047: LD_ADDR_VAR 0 5
35051: PUSH
35052: LD_VAR 0 1
35056: PPUSH
35057: CALL_OW 266
35061: ST_TO_ADDR
// if btype = b_armoury then
35062: LD_VAR 0 5
35066: PUSH
35067: LD_INT 4
35069: EQUAL
35070: IFFALSE 35080
// btype := b_barracks ;
35072: LD_ADDR_VAR 0 5
35076: PUSH
35077: LD_INT 5
35079: ST_TO_ADDR
// if btype = b_depot then
35080: LD_VAR 0 5
35084: PUSH
35085: LD_INT 0
35087: EQUAL
35088: IFFALSE 35098
// btype := b_warehouse ;
35090: LD_ADDR_VAR 0 5
35094: PUSH
35095: LD_INT 1
35097: ST_TO_ADDR
// if btype = b_workshop then
35098: LD_VAR 0 5
35102: PUSH
35103: LD_INT 2
35105: EQUAL
35106: IFFALSE 35116
// btype := b_factory ;
35108: LD_ADDR_VAR 0 5
35112: PUSH
35113: LD_INT 3
35115: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: LD_VAR 0 5
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 248
35135: PPUSH
35136: CALL_OW 450
35140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35141: LD_ADDR_VAR 0 2
35145: PUSH
35146: LD_VAR 0 3
35150: PPUSH
35151: LD_INT 1
35153: PPUSH
35154: CALL_OW 275
35158: PUSH
35159: LD_VAR 0 4
35163: PUSH
35164: LD_INT 1
35166: ARRAY
35167: GREATEREQUAL
35168: PUSH
35169: LD_VAR 0 3
35173: PPUSH
35174: LD_INT 2
35176: PPUSH
35177: CALL_OW 275
35181: PUSH
35182: LD_VAR 0 4
35186: PUSH
35187: LD_INT 2
35189: ARRAY
35190: GREATEREQUAL
35191: AND
35192: PUSH
35193: LD_VAR 0 3
35197: PPUSH
35198: LD_INT 3
35200: PPUSH
35201: CALL_OW 275
35205: PUSH
35206: LD_VAR 0 4
35210: PUSH
35211: LD_INT 3
35213: ARRAY
35214: GREATEREQUAL
35215: AND
35216: ST_TO_ADDR
// end ;
35217: LD_VAR 0 2
35221: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35222: LD_INT 0
35224: PPUSH
35225: PPUSH
35226: PPUSH
// pom := GetBase ( building ) ;
35227: LD_ADDR_VAR 0 4
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 274
35241: ST_TO_ADDR
// if not pom then
35242: LD_VAR 0 4
35246: NOT
35247: IFFALSE 35251
// exit ;
35249: GO 35352
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35251: LD_ADDR_VAR 0 5
35255: PUSH
35256: LD_VAR 0 2
35260: PPUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 248
35270: PPUSH
35271: CALL_OW 450
35275: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35276: LD_ADDR_VAR 0 3
35280: PUSH
35281: LD_VAR 0 4
35285: PPUSH
35286: LD_INT 1
35288: PPUSH
35289: CALL_OW 275
35293: PUSH
35294: LD_VAR 0 5
35298: PUSH
35299: LD_INT 1
35301: ARRAY
35302: GREATEREQUAL
35303: PUSH
35304: LD_VAR 0 4
35308: PPUSH
35309: LD_INT 2
35311: PPUSH
35312: CALL_OW 275
35316: PUSH
35317: LD_VAR 0 5
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: GREATEREQUAL
35326: AND
35327: PUSH
35328: LD_VAR 0 4
35332: PPUSH
35333: LD_INT 3
35335: PPUSH
35336: CALL_OW 275
35340: PUSH
35341: LD_VAR 0 5
35345: PUSH
35346: LD_INT 3
35348: ARRAY
35349: GREATEREQUAL
35350: AND
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 3
35356: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35357: LD_INT 0
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
// result := false ;
35370: LD_ADDR_VAR 0 8
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35378: LD_VAR 0 5
35382: NOT
35383: PUSH
35384: LD_VAR 0 1
35388: NOT
35389: OR
35390: PUSH
35391: LD_VAR 0 2
35395: NOT
35396: OR
35397: PUSH
35398: LD_VAR 0 3
35402: NOT
35403: OR
35404: IFFALSE 35408
// exit ;
35406: GO 36222
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35408: LD_ADDR_VAR 0 14
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: LD_VAR 0 2
35422: PPUSH
35423: LD_VAR 0 3
35427: PPUSH
35428: LD_VAR 0 4
35432: PPUSH
35433: LD_VAR 0 5
35437: PUSH
35438: LD_INT 1
35440: ARRAY
35441: PPUSH
35442: CALL_OW 248
35446: PPUSH
35447: LD_INT 0
35449: PPUSH
35450: CALL 37459 0 6
35454: ST_TO_ADDR
// if not hexes then
35455: LD_VAR 0 14
35459: NOT
35460: IFFALSE 35464
// exit ;
35462: GO 36222
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35464: LD_ADDR_VAR 0 17
35468: PUSH
35469: LD_VAR 0 5
35473: PPUSH
35474: LD_INT 22
35476: PUSH
35477: LD_VAR 0 13
35481: PPUSH
35482: CALL_OW 255
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 30
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 30
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PPUSH
35523: CALL_OW 72
35527: ST_TO_ADDR
// for i = 1 to hexes do
35528: LD_ADDR_VAR 0 9
35532: PUSH
35533: DOUBLE
35534: LD_INT 1
35536: DEC
35537: ST_TO_ADDR
35538: LD_VAR 0 14
35542: PUSH
35543: FOR_TO
35544: IFFALSE 36220
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35546: LD_ADDR_VAR 0 13
35550: PUSH
35551: LD_VAR 0 14
35555: PUSH
35556: LD_VAR 0 9
35560: ARRAY
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: LD_VAR 0 14
35570: PUSH
35571: LD_VAR 0 9
35575: ARRAY
35576: PUSH
35577: LD_INT 2
35579: ARRAY
35580: PPUSH
35581: CALL_OW 428
35585: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35586: LD_VAR 0 14
35590: PUSH
35591: LD_VAR 0 9
35595: ARRAY
35596: PUSH
35597: LD_INT 1
35599: ARRAY
35600: PPUSH
35601: LD_VAR 0 14
35605: PUSH
35606: LD_VAR 0 9
35610: ARRAY
35611: PUSH
35612: LD_INT 2
35614: ARRAY
35615: PPUSH
35616: CALL_OW 351
35620: PUSH
35621: LD_VAR 0 14
35625: PUSH
35626: LD_VAR 0 9
35630: ARRAY
35631: PUSH
35632: LD_INT 1
35634: ARRAY
35635: PPUSH
35636: LD_VAR 0 14
35640: PUSH
35641: LD_VAR 0 9
35645: ARRAY
35646: PUSH
35647: LD_INT 2
35649: ARRAY
35650: PPUSH
35651: CALL_OW 488
35655: NOT
35656: OR
35657: PUSH
35658: LD_VAR 0 13
35662: PPUSH
35663: CALL_OW 247
35667: PUSH
35668: LD_INT 3
35670: EQUAL
35671: OR
35672: IFFALSE 35678
// exit ;
35674: POP
35675: POP
35676: GO 36222
// if not tmp then
35678: LD_VAR 0 13
35682: NOT
35683: IFFALSE 35687
// continue ;
35685: GO 35543
// result := true ;
35687: LD_ADDR_VAR 0 8
35691: PUSH
35692: LD_INT 1
35694: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35695: LD_VAR 0 6
35699: PUSH
35700: LD_VAR 0 13
35704: PPUSH
35705: CALL_OW 247
35709: PUSH
35710: LD_INT 2
35712: EQUAL
35713: AND
35714: PUSH
35715: LD_VAR 0 13
35719: PPUSH
35720: CALL_OW 263
35724: PUSH
35725: LD_INT 1
35727: EQUAL
35728: AND
35729: IFFALSE 35893
// begin if IsDrivenBy ( tmp ) then
35731: LD_VAR 0 13
35735: PPUSH
35736: CALL_OW 311
35740: IFFALSE 35744
// continue ;
35742: GO 35543
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35744: LD_VAR 0 6
35748: PPUSH
35749: LD_INT 3
35751: PUSH
35752: LD_INT 60
35754: PUSH
35755: EMPTY
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: PUSH
35765: LD_INT 55
35767: PUSH
35768: EMPTY
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PPUSH
35779: CALL_OW 72
35783: IFFALSE 35891
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35785: LD_ADDR_VAR 0 18
35789: PUSH
35790: LD_VAR 0 6
35794: PPUSH
35795: LD_INT 3
35797: PUSH
35798: LD_INT 60
35800: PUSH
35801: EMPTY
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: LD_INT 55
35813: PUSH
35814: EMPTY
35815: LIST
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PPUSH
35825: CALL_OW 72
35829: PUSH
35830: LD_INT 1
35832: ARRAY
35833: ST_TO_ADDR
// if IsInUnit ( driver ) then
35834: LD_VAR 0 18
35838: PPUSH
35839: CALL_OW 310
35843: IFFALSE 35854
// ComExit ( driver ) ;
35845: LD_VAR 0 18
35849: PPUSH
35850: CALL 61164 0 1
// AddComEnterUnit ( driver , tmp ) ;
35854: LD_VAR 0 18
35858: PPUSH
35859: LD_VAR 0 13
35863: PPUSH
35864: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35868: LD_VAR 0 18
35872: PPUSH
35873: LD_VAR 0 7
35877: PPUSH
35878: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35882: LD_VAR 0 18
35886: PPUSH
35887: CALL_OW 181
// end ; continue ;
35891: GO 35543
// end ; if not cleaners or not tmp in cleaners then
35893: LD_VAR 0 6
35897: NOT
35898: PUSH
35899: LD_VAR 0 13
35903: PUSH
35904: LD_VAR 0 6
35908: IN
35909: NOT
35910: OR
35911: IFFALSE 36218
// begin if dep then
35913: LD_VAR 0 17
35917: IFFALSE 36053
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35919: LD_ADDR_VAR 0 16
35923: PUSH
35924: LD_VAR 0 17
35928: PUSH
35929: LD_INT 1
35931: ARRAY
35932: PPUSH
35933: CALL_OW 250
35937: PPUSH
35938: LD_VAR 0 17
35942: PUSH
35943: LD_INT 1
35945: ARRAY
35946: PPUSH
35947: CALL_OW 254
35951: PPUSH
35952: LD_INT 5
35954: PPUSH
35955: CALL_OW 272
35959: PUSH
35960: LD_VAR 0 17
35964: PUSH
35965: LD_INT 1
35967: ARRAY
35968: PPUSH
35969: CALL_OW 251
35973: PPUSH
35974: LD_VAR 0 17
35978: PUSH
35979: LD_INT 1
35981: ARRAY
35982: PPUSH
35983: CALL_OW 254
35987: PPUSH
35988: LD_INT 5
35990: PPUSH
35991: CALL_OW 273
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36000: LD_VAR 0 16
36004: PUSH
36005: LD_INT 1
36007: ARRAY
36008: PPUSH
36009: LD_VAR 0 16
36013: PUSH
36014: LD_INT 2
36016: ARRAY
36017: PPUSH
36018: CALL_OW 488
36022: IFFALSE 36053
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36024: LD_VAR 0 13
36028: PPUSH
36029: LD_VAR 0 16
36033: PUSH
36034: LD_INT 1
36036: ARRAY
36037: PPUSH
36038: LD_VAR 0 16
36042: PUSH
36043: LD_INT 2
36045: ARRAY
36046: PPUSH
36047: CALL_OW 111
// continue ;
36051: GO 35543
// end ; end ; r := GetDir ( tmp ) ;
36053: LD_ADDR_VAR 0 15
36057: PUSH
36058: LD_VAR 0 13
36062: PPUSH
36063: CALL_OW 254
36067: ST_TO_ADDR
// if r = 5 then
36068: LD_VAR 0 15
36072: PUSH
36073: LD_INT 5
36075: EQUAL
36076: IFFALSE 36086
// r := 0 ;
36078: LD_ADDR_VAR 0 15
36082: PUSH
36083: LD_INT 0
36085: ST_TO_ADDR
// for j = r to 5 do
36086: LD_ADDR_VAR 0 10
36090: PUSH
36091: DOUBLE
36092: LD_VAR 0 15
36096: DEC
36097: ST_TO_ADDR
36098: LD_INT 5
36100: PUSH
36101: FOR_TO
36102: IFFALSE 36216
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36104: LD_ADDR_VAR 0 11
36108: PUSH
36109: LD_VAR 0 13
36113: PPUSH
36114: CALL_OW 250
36118: PPUSH
36119: LD_VAR 0 10
36123: PPUSH
36124: LD_INT 2
36126: PPUSH
36127: CALL_OW 272
36131: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36132: LD_ADDR_VAR 0 12
36136: PUSH
36137: LD_VAR 0 13
36141: PPUSH
36142: CALL_OW 251
36146: PPUSH
36147: LD_VAR 0 10
36151: PPUSH
36152: LD_INT 2
36154: PPUSH
36155: CALL_OW 273
36159: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36160: LD_VAR 0 11
36164: PPUSH
36165: LD_VAR 0 12
36169: PPUSH
36170: CALL_OW 488
36174: PUSH
36175: LD_VAR 0 11
36179: PPUSH
36180: LD_VAR 0 12
36184: PPUSH
36185: CALL_OW 428
36189: NOT
36190: AND
36191: IFFALSE 36214
// begin ComMoveXY ( tmp , _x , _y ) ;
36193: LD_VAR 0 13
36197: PPUSH
36198: LD_VAR 0 11
36202: PPUSH
36203: LD_VAR 0 12
36207: PPUSH
36208: CALL_OW 111
// break ;
36212: GO 36216
// end ; end ;
36214: GO 36101
36216: POP
36217: POP
// end ; end ;
36218: GO 35543
36220: POP
36221: POP
// end ;
36222: LD_VAR 0 8
36226: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36227: LD_INT 0
36229: PPUSH
// result := true ;
36230: LD_ADDR_VAR 0 3
36234: PUSH
36235: LD_INT 1
36237: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36238: LD_VAR 0 2
36242: PUSH
36243: LD_INT 24
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36257
36249: LD_INT 33
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36282
36257: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 32
36265: PPUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 321
36275: PUSH
36276: LD_INT 2
36278: EQUAL
36279: ST_TO_ADDR
36280: GO 36602
36282: LD_INT 20
36284: DOUBLE
36285: EQUAL
36286: IFTRUE 36290
36288: GO 36315
36290: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_INT 6
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 321
36308: PUSH
36309: LD_INT 2
36311: EQUAL
36312: ST_TO_ADDR
36313: GO 36602
36315: LD_INT 22
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36329
36321: LD_INT 36
36323: DOUBLE
36324: EQUAL
36325: IFTRUE 36329
36327: GO 36354
36329: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 15
36337: PPUSH
36338: LD_VAR 0 1
36342: PPUSH
36343: CALL_OW 321
36347: PUSH
36348: LD_INT 2
36350: EQUAL
36351: ST_TO_ADDR
36352: GO 36602
36354: LD_INT 30
36356: DOUBLE
36357: EQUAL
36358: IFTRUE 36362
36360: GO 36387
36362: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36363: LD_ADDR_VAR 0 3
36367: PUSH
36368: LD_INT 20
36370: PPUSH
36371: LD_VAR 0 1
36375: PPUSH
36376: CALL_OW 321
36380: PUSH
36381: LD_INT 2
36383: EQUAL
36384: ST_TO_ADDR
36385: GO 36602
36387: LD_INT 28
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36401
36393: LD_INT 21
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36401
36399: GO 36426
36401: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36402: LD_ADDR_VAR 0 3
36406: PUSH
36407: LD_INT 21
36409: PPUSH
36410: LD_VAR 0 1
36414: PPUSH
36415: CALL_OW 321
36419: PUSH
36420: LD_INT 2
36422: EQUAL
36423: ST_TO_ADDR
36424: GO 36602
36426: LD_INT 16
36428: DOUBLE
36429: EQUAL
36430: IFTRUE 36434
36432: GO 36461
36434: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36435: LD_ADDR_VAR 0 3
36439: PUSH
36440: LD_EXP 93
36444: PPUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 321
36454: PUSH
36455: LD_INT 2
36457: EQUAL
36458: ST_TO_ADDR
36459: GO 36602
36461: LD_INT 19
36463: DOUBLE
36464: EQUAL
36465: IFTRUE 36475
36467: LD_INT 23
36469: DOUBLE
36470: EQUAL
36471: IFTRUE 36475
36473: GO 36502
36475: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36476: LD_ADDR_VAR 0 3
36480: PUSH
36481: LD_EXP 92
36485: PPUSH
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL_OW 321
36495: PUSH
36496: LD_INT 2
36498: EQUAL
36499: ST_TO_ADDR
36500: GO 36602
36502: LD_INT 17
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36535
36510: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 39
36518: PPUSH
36519: LD_VAR 0 1
36523: PPUSH
36524: CALL_OW 321
36528: PUSH
36529: LD_INT 2
36531: EQUAL
36532: ST_TO_ADDR
36533: GO 36602
36535: LD_INT 18
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36543
36541: GO 36568
36543: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36544: LD_ADDR_VAR 0 3
36548: PUSH
36549: LD_INT 40
36551: PPUSH
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 321
36561: PUSH
36562: LD_INT 2
36564: EQUAL
36565: ST_TO_ADDR
36566: GO 36602
36568: LD_INT 27
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36576
36574: GO 36601
36576: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_INT 35
36584: PPUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 321
36594: PUSH
36595: LD_INT 2
36597: EQUAL
36598: ST_TO_ADDR
36599: GO 36602
36601: POP
// end ;
36602: LD_VAR 0 3
36606: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36607: LD_INT 0
36609: PPUSH
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
// result := false ;
36620: LD_ADDR_VAR 0 6
36624: PUSH
36625: LD_INT 0
36627: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36628: LD_VAR 0 1
36632: NOT
36633: PUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 266
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: IN
36654: NOT
36655: OR
36656: PUSH
36657: LD_VAR 0 2
36661: NOT
36662: OR
36663: PUSH
36664: LD_VAR 0 5
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 3
36680: PUSH
36681: LD_INT 4
36683: PUSH
36684: LD_INT 5
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: IN
36695: NOT
36696: OR
36697: PUSH
36698: LD_VAR 0 3
36702: PPUSH
36703: LD_VAR 0 4
36707: PPUSH
36708: CALL_OW 488
36712: NOT
36713: OR
36714: IFFALSE 36718
// exit ;
36716: GO 37454
// side := GetSide ( depot ) ;
36718: LD_ADDR_VAR 0 9
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 255
36732: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36733: LD_VAR 0 9
36737: PPUSH
36738: LD_VAR 0 2
36742: PPUSH
36743: CALL 36227 0 2
36747: NOT
36748: IFFALSE 36752
// exit ;
36750: GO 37454
// pom := GetBase ( depot ) ;
36752: LD_ADDR_VAR 0 10
36756: PUSH
36757: LD_VAR 0 1
36761: PPUSH
36762: CALL_OW 274
36766: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36767: LD_ADDR_VAR 0 11
36771: PUSH
36772: LD_VAR 0 2
36776: PPUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: CALL_OW 248
36786: PPUSH
36787: CALL_OW 450
36791: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36792: LD_VAR 0 10
36796: PPUSH
36797: LD_INT 1
36799: PPUSH
36800: CALL_OW 275
36804: PUSH
36805: LD_VAR 0 11
36809: PUSH
36810: LD_INT 1
36812: ARRAY
36813: GREATEREQUAL
36814: PUSH
36815: LD_VAR 0 10
36819: PPUSH
36820: LD_INT 2
36822: PPUSH
36823: CALL_OW 275
36827: PUSH
36828: LD_VAR 0 11
36832: PUSH
36833: LD_INT 2
36835: ARRAY
36836: GREATEREQUAL
36837: AND
36838: PUSH
36839: LD_VAR 0 10
36843: PPUSH
36844: LD_INT 3
36846: PPUSH
36847: CALL_OW 275
36851: PUSH
36852: LD_VAR 0 11
36856: PUSH
36857: LD_INT 3
36859: ARRAY
36860: GREATEREQUAL
36861: AND
36862: NOT
36863: IFFALSE 36867
// exit ;
36865: GO 37454
// if GetBType ( depot ) = b_depot then
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 266
36876: PUSH
36877: LD_INT 0
36879: EQUAL
36880: IFFALSE 36892
// dist := 28 else
36882: LD_ADDR_VAR 0 14
36886: PUSH
36887: LD_INT 28
36889: ST_TO_ADDR
36890: GO 36900
// dist := 36 ;
36892: LD_ADDR_VAR 0 14
36896: PUSH
36897: LD_INT 36
36899: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_VAR 0 3
36909: PPUSH
36910: LD_VAR 0 4
36914: PPUSH
36915: CALL_OW 297
36919: PUSH
36920: LD_VAR 0 14
36924: GREATER
36925: IFFALSE 36929
// exit ;
36927: GO 37454
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36929: LD_ADDR_VAR 0 12
36933: PUSH
36934: LD_VAR 0 2
36938: PPUSH
36939: LD_VAR 0 3
36943: PPUSH
36944: LD_VAR 0 4
36948: PPUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 248
36963: PPUSH
36964: LD_INT 0
36966: PPUSH
36967: CALL 37459 0 6
36971: ST_TO_ADDR
// if not hexes then
36972: LD_VAR 0 12
36976: NOT
36977: IFFALSE 36981
// exit ;
36979: GO 37454
// hex := GetHexInfo ( x , y ) ;
36981: LD_ADDR_VAR 0 15
36985: PUSH
36986: LD_VAR 0 3
36990: PPUSH
36991: LD_VAR 0 4
36995: PPUSH
36996: CALL_OW 546
37000: ST_TO_ADDR
// if hex [ 1 ] then
37001: LD_VAR 0 15
37005: PUSH
37006: LD_INT 1
37008: ARRAY
37009: IFFALSE 37013
// exit ;
37011: GO 37454
// height := hex [ 2 ] ;
37013: LD_ADDR_VAR 0 13
37017: PUSH
37018: LD_VAR 0 15
37022: PUSH
37023: LD_INT 2
37025: ARRAY
37026: ST_TO_ADDR
// for i = 1 to hexes do
37027: LD_ADDR_VAR 0 7
37031: PUSH
37032: DOUBLE
37033: LD_INT 1
37035: DEC
37036: ST_TO_ADDR
37037: LD_VAR 0 12
37041: PUSH
37042: FOR_TO
37043: IFFALSE 37373
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37045: LD_VAR 0 12
37049: PUSH
37050: LD_VAR 0 7
37054: ARRAY
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: PPUSH
37060: LD_VAR 0 12
37064: PUSH
37065: LD_VAR 0 7
37069: ARRAY
37070: PUSH
37071: LD_INT 2
37073: ARRAY
37074: PPUSH
37075: CALL_OW 488
37079: NOT
37080: PUSH
37081: LD_VAR 0 12
37085: PUSH
37086: LD_VAR 0 7
37090: ARRAY
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_VAR 0 12
37100: PUSH
37101: LD_VAR 0 7
37105: ARRAY
37106: PUSH
37107: LD_INT 2
37109: ARRAY
37110: PPUSH
37111: CALL_OW 428
37115: PUSH
37116: LD_INT 0
37118: GREATER
37119: OR
37120: PUSH
37121: LD_VAR 0 12
37125: PUSH
37126: LD_VAR 0 7
37130: ARRAY
37131: PUSH
37132: LD_INT 1
37134: ARRAY
37135: PPUSH
37136: LD_VAR 0 12
37140: PUSH
37141: LD_VAR 0 7
37145: ARRAY
37146: PUSH
37147: LD_INT 2
37149: ARRAY
37150: PPUSH
37151: CALL_OW 351
37155: OR
37156: IFFALSE 37162
// exit ;
37158: POP
37159: POP
37160: GO 37454
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37162: LD_ADDR_VAR 0 8
37166: PUSH
37167: LD_VAR 0 12
37171: PUSH
37172: LD_VAR 0 7
37176: ARRAY
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: PPUSH
37182: LD_VAR 0 12
37186: PUSH
37187: LD_VAR 0 7
37191: ARRAY
37192: PUSH
37193: LD_INT 2
37195: ARRAY
37196: PPUSH
37197: CALL_OW 546
37201: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37202: LD_VAR 0 8
37206: PUSH
37207: LD_INT 1
37209: ARRAY
37210: PUSH
37211: LD_VAR 0 8
37215: PUSH
37216: LD_INT 2
37218: ARRAY
37219: PUSH
37220: LD_VAR 0 13
37224: PUSH
37225: LD_INT 2
37227: PLUS
37228: GREATER
37229: OR
37230: PUSH
37231: LD_VAR 0 8
37235: PUSH
37236: LD_INT 2
37238: ARRAY
37239: PUSH
37240: LD_VAR 0 13
37244: PUSH
37245: LD_INT 2
37247: MINUS
37248: LESS
37249: OR
37250: PUSH
37251: LD_VAR 0 8
37255: PUSH
37256: LD_INT 3
37258: ARRAY
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 8
37265: PUSH
37266: LD_INT 9
37268: PUSH
37269: LD_INT 10
37271: PUSH
37272: LD_INT 11
37274: PUSH
37275: LD_INT 12
37277: PUSH
37278: LD_INT 13
37280: PUSH
37281: LD_INT 16
37283: PUSH
37284: LD_INT 17
37286: PUSH
37287: LD_INT 18
37289: PUSH
37290: LD_INT 19
37292: PUSH
37293: LD_INT 20
37295: PUSH
37296: LD_INT 21
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: IN
37314: NOT
37315: OR
37316: PUSH
37317: LD_VAR 0 8
37321: PUSH
37322: LD_INT 5
37324: ARRAY
37325: NOT
37326: OR
37327: PUSH
37328: LD_VAR 0 8
37332: PUSH
37333: LD_INT 6
37335: ARRAY
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: LD_INT 7
37345: PUSH
37346: LD_INT 9
37348: PUSH
37349: LD_INT 10
37351: PUSH
37352: LD_INT 11
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: IN
37363: NOT
37364: OR
37365: IFFALSE 37371
// exit ;
37367: POP
37368: POP
37369: GO 37454
// end ;
37371: GO 37042
37373: POP
37374: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37375: LD_VAR 0 9
37379: PPUSH
37380: LD_VAR 0 3
37384: PPUSH
37385: LD_VAR 0 4
37389: PPUSH
37390: LD_INT 20
37392: PPUSH
37393: CALL 29400 0 4
37397: PUSH
37398: LD_INT 4
37400: ARRAY
37401: IFFALSE 37405
// exit ;
37403: GO 37454
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37405: LD_VAR 0 2
37409: PUSH
37410: LD_INT 29
37412: PUSH
37413: LD_INT 30
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: IN
37420: PUSH
37421: LD_VAR 0 3
37425: PPUSH
37426: LD_VAR 0 4
37430: PPUSH
37431: LD_VAR 0 9
37435: PPUSH
37436: CALL_OW 440
37440: NOT
37441: AND
37442: IFFALSE 37446
// exit ;
37444: GO 37454
// result := true ;
37446: LD_ADDR_VAR 0 6
37450: PUSH
37451: LD_INT 1
37453: ST_TO_ADDR
// end ;
37454: LD_VAR 0 6
37458: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37459: LD_INT 0
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
// result = [ ] ;
37519: LD_ADDR_VAR 0 7
37523: PUSH
37524: EMPTY
37525: ST_TO_ADDR
// temp_list = [ ] ;
37526: LD_ADDR_VAR 0 9
37530: PUSH
37531: EMPTY
37532: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37533: LD_VAR 0 4
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: LD_INT 3
37549: PUSH
37550: LD_INT 4
37552: PUSH
37553: LD_INT 5
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: IN
37564: NOT
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: IN
37581: PUSH
37582: LD_VAR 0 5
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: IN
37601: NOT
37602: AND
37603: OR
37604: IFFALSE 37608
// exit ;
37606: GO 55999
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37608: LD_VAR 0 1
37612: PUSH
37613: LD_INT 6
37615: PUSH
37616: LD_INT 7
37618: PUSH
37619: LD_INT 8
37621: PUSH
37622: LD_INT 13
37624: PUSH
37625: LD_INT 12
37627: PUSH
37628: LD_INT 15
37630: PUSH
37631: LD_INT 11
37633: PUSH
37634: LD_INT 14
37636: PUSH
37637: LD_INT 10
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: IN
37651: IFFALSE 37661
// btype = b_lab ;
37653: LD_ADDR_VAR 0 1
37657: PUSH
37658: LD_INT 6
37660: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37661: LD_VAR 0 6
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 2
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: IN
37680: NOT
37681: PUSH
37682: LD_VAR 0 1
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 6
37701: PUSH
37702: LD_INT 36
37704: PUSH
37705: LD_INT 4
37707: PUSH
37708: LD_INT 5
37710: PUSH
37711: LD_INT 31
37713: PUSH
37714: LD_INT 32
37716: PUSH
37717: LD_INT 33
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: IN
37733: NOT
37734: PUSH
37735: LD_VAR 0 6
37739: PUSH
37740: LD_INT 1
37742: EQUAL
37743: AND
37744: OR
37745: PUSH
37746: LD_VAR 0 1
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 3
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: IN
37761: NOT
37762: PUSH
37763: LD_VAR 0 6
37767: PUSH
37768: LD_INT 2
37770: EQUAL
37771: AND
37772: OR
37773: IFFALSE 37783
// mode = 0 ;
37775: LD_ADDR_VAR 0 6
37779: PUSH
37780: LD_INT 0
37782: ST_TO_ADDR
// case mode of 0 :
37783: LD_VAR 0 6
37787: PUSH
37788: LD_INT 0
37790: DOUBLE
37791: EQUAL
37792: IFTRUE 37796
37794: GO 49249
37796: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37797: LD_ADDR_VAR 0 11
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37990: LD_ADDR_VAR 0 12
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 3
38147: NEG
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38186: LD_ADDR_VAR 0 13
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: LD_INT 3
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 3
38345: NEG
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 3
38357: NEG
38358: PUSH
38359: LD_INT 3
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38385: LD_ADDR_VAR 0 14
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 3
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38581: LD_ADDR_VAR 0 15
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38774: LD_ADDR_VAR 0 16
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: LD_INT 3
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38967: LD_ADDR_VAR 0 17
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39197: LD_ADDR_VAR 0 18
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39427: LD_ADDR_VAR 0 19
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39657: LD_ADDR_VAR 0 20
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39887: LD_ADDR_VAR 0 21
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40117: LD_ADDR_VAR 0 22
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40347: LD_ADDR_VAR 0 23
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 2
40534: NEG
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40627: LD_ADDR_VAR 0 24
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 3
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40903: LD_ADDR_VAR 0 25
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 3
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41177: LD_ADDR_VAR 0 26
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41453: LD_ADDR_VAR 0 27
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41733: LD_ADDR_VAR 0 28
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 3
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42015: LD_ADDR_VAR 0 29
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 3
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 3
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42294: LD_ADDR_VAR 0 30
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 3
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42572: LD_ADDR_VAR 0 31
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42850: LD_ADDR_VAR 0 32
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43128: LD_ADDR_VAR 0 33
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 3
43372: NEG
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43407: LD_ADDR_VAR 0 34
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 3
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43687: LD_ADDR_VAR 0 35
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43799: LD_ADDR_VAR 0 36
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43911: LD_ADDR_VAR 0 37
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44023: LD_ADDR_VAR 0 38
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44135: LD_ADDR_VAR 0 39
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44247: LD_ADDR_VAR 0 40
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44359: LD_ADDR_VAR 0 41
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 3
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 3
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44709: LD_ADDR_VAR 0 42
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 3
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45059: LD_ADDR_VAR 0 43
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 3
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45407: LD_ADDR_VAR 0 44
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 3
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: LD_INT 3
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 3
45704: NEG
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: NEG
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45757: LD_ADDR_VAR 0 45
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46107: LD_ADDR_VAR 0 46
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46455: LD_ADDR_VAR 0 47
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46606: LD_ADDR_VAR 0 48
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46753: LD_ADDR_VAR 0 49
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46897: LD_ADDR_VAR 0 50
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47041: LD_ADDR_VAR 0 51
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47188: LD_ADDR_VAR 0 52
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47339: LD_ADDR_VAR 0 53
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47569: LD_ADDR_VAR 0 54
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47799: LD_ADDR_VAR 0 55
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48029: LD_ADDR_VAR 0 56
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48259: LD_ADDR_VAR 0 57
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48489: LD_ADDR_VAR 0 58
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48719: LD_ADDR_VAR 0 59
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48807: LD_ADDR_VAR 0 60
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48895: LD_ADDR_VAR 0 61
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48983: LD_ADDR_VAR 0 62
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49071: LD_ADDR_VAR 0 63
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49159: LD_ADDR_VAR 0 64
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// end ; 1 :
49247: GO 55144
49249: LD_INT 1
49251: DOUBLE
49252: EQUAL
49253: IFTRUE 49257
49255: GO 51880
49257: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49258: LD_ADDR_VAR 0 11
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 3
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 3
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49302: LD_ADDR_VAR 0 12
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49343: LD_ADDR_VAR 0 13
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49383: LD_ADDR_VAR 0 14
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49424: LD_ADDR_VAR 0 15
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49468: LD_ADDR_VAR 0 16
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49514: LD_ADDR_VAR 0 17
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49558: LD_ADDR_VAR 0 18
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49599: LD_ADDR_VAR 0 19
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49639: LD_ADDR_VAR 0 20
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49680: LD_ADDR_VAR 0 21
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49724: LD_ADDR_VAR 0 22
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49770: LD_ADDR_VAR 0 23
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 4
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49814: LD_ADDR_VAR 0 24
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 4
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49855: LD_ADDR_VAR 0 25
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 4
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49895: LD_ADDR_VAR 0 26
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 4
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49936: LD_ADDR_VAR 0 27
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 4
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49980: LD_ADDR_VAR 0 28
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 4
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 4
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50026: LD_ADDR_VAR 0 29
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 4
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 4
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 5
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 5
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 4
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 6
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 6
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 5
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50181: LD_ADDR_VAR 0 30
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 4
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 4
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 5
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 5
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 5
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 6
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 6
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50324: LD_ADDR_VAR 0 31
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 4
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 5
50391: PUSH
50392: LD_INT 4
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 5
50401: PUSH
50402: LD_INT 5
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: LD_INT 5
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 6
50421: PUSH
50422: LD_INT 5
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 6
50431: PUSH
50432: LD_INT 6
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 5
50441: PUSH
50442: LD_INT 6
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50463: LD_ADDR_VAR 0 32
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 5
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 4
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 6
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 6
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50606: LD_ADDR_VAR 0 33
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 4
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 5
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 5
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 6
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 6
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50761: LD_ADDR_VAR 0 34
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 4
50816: NEG
50817: PUSH
50818: LD_INT 3
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 4
50828: NEG
50829: PUSH
50830: LD_INT 4
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 4
50840: NEG
50841: PUSH
50842: LD_INT 5
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 5
50852: NEG
50853: PUSH
50854: LD_INT 4
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 5
50864: NEG
50865: PUSH
50866: LD_INT 5
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 5
50876: NEG
50877: PUSH
50878: LD_INT 6
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 6
50888: NEG
50889: PUSH
50890: LD_INT 5
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 6
50900: NEG
50901: PUSH
50902: LD_INT 6
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50924: LD_ADDR_VAR 0 41
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50968: LD_ADDR_VAR 0 42
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51009: LD_ADDR_VAR 0 43
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51049: LD_ADDR_VAR 0 44
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51090: LD_ADDR_VAR 0 45
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51134: LD_ADDR_VAR 0 46
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51180: LD_ADDR_VAR 0 47
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51213: LD_ADDR_VAR 0 48
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51244: LD_ADDR_VAR 0 49
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51273: LD_ADDR_VAR 0 50
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51302: LD_ADDR_VAR 0 51
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51333: LD_ADDR_VAR 0 52
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51366: LD_ADDR_VAR 0 53
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51410: LD_ADDR_VAR 0 54
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51451: LD_ADDR_VAR 0 55
51455: PUSH
51456: LD_INT 3
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51491: LD_ADDR_VAR 0 56
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51532: LD_ADDR_VAR 0 57
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51576: LD_ADDR_VAR 0 58
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51622: LD_ADDR_VAR 0 59
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51666: LD_ADDR_VAR 0 60
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51707: LD_ADDR_VAR 0 61
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51747: LD_ADDR_VAR 0 62
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51788: LD_ADDR_VAR 0 63
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51832: LD_ADDR_VAR 0 64
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// end ; 2 :
51878: GO 55144
51880: LD_INT 2
51882: DOUBLE
51883: EQUAL
51884: IFTRUE 51888
51886: GO 55143
51888: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51889: LD_ADDR_VAR 0 29
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 5
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 5
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 4
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 4
52019: PUSH
52020: LD_INT 4
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 4
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 4
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 5
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 5
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 4
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 4
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: NEG
52275: PUSH
52276: LD_INT 4
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: LD_INT 5
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: LD_INT 4
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 4
52322: NEG
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 5
52334: NEG
52335: PUSH
52336: LD_INT 4
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 5
52346: NEG
52347: PUSH
52348: LD_INT 5
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 5
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 5
52370: NEG
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52427: LD_ADDR_VAR 0 30
52431: PUSH
52432: LD_INT 4
52434: PUSH
52435: LD_INT 4
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 4
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 5
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 5
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 4
52474: PUSH
52475: LD_INT 5
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: LD_INT 4
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 5
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: LD_INT 5
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 4
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 4
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 4
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 4
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 5
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 5
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 5
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: NEG
52732: PUSH
52733: LD_INT 4
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: NEG
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 4
52791: NEG
52792: PUSH
52793: LD_INT 4
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: LD_INT 4
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 5
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 4
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 4
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 5
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 5
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52974: LD_ADDR_VAR 0 31
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 4
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 5
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 5
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 4
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 3
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 5
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 4
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 4
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 4
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 4
53176: NEG
53177: PUSH
53178: LD_INT 4
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 4
53188: NEG
53189: PUSH
53190: LD_INT 5
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 4
53224: NEG
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 5
53236: NEG
53237: PUSH
53238: LD_INT 4
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 5
53248: NEG
53249: PUSH
53250: LD_INT 5
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 5
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 4
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 4
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 4
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 5
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53524: LD_ADDR_VAR 0 32
53528: PUSH
53529: LD_INT 4
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 4
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 5
53587: NEG
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 5
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 5
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 3
53633: NEG
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 4
53693: NEG
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 4
53705: NEG
53706: PUSH
53707: LD_INT 4
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 4
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 5
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 4
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 5
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 4
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 4
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 4
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 4
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 5
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 5
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 4
53976: PUSH
53977: LD_INT 5
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 3
53986: PUSH
53987: LD_INT 4
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 5
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54071: LD_ADDR_VAR 0 33
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: LD_INT 4
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 4
54090: NEG
54091: PUSH
54092: LD_INT 5
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 4
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: LD_INT 3
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 5
54138: NEG
54139: PUSH
54140: LD_INT 4
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 5
54150: NEG
54151: PUSH
54152: LD_INT 5
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: LD_INT 5
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 5
54174: NEG
54175: PUSH
54176: LD_INT 3
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 4
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 4
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 4
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 4
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 5
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 5
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 4
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 5
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 4
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 5
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 5
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 3
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54609: LD_ADDR_VAR 0 34
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 5
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 4
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 5
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 3
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 4
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: LD_INT 4
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: PUSH
54842: LD_INT 5
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: LD_INT 4
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 5
54881: PUSH
54882: LD_INT 3
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 5
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 4
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 4
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 4
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 4
54994: NEG
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 4
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 5
55050: NEG
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 5
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// end ; end ;
55141: GO 55144
55143: POP
// case btype of b_depot , b_warehouse :
55144: LD_VAR 0 1
55148: PUSH
55149: LD_INT 0
55151: DOUBLE
55152: EQUAL
55153: IFTRUE 55163
55155: LD_INT 1
55157: DOUBLE
55158: EQUAL
55159: IFTRUE 55163
55161: GO 55364
55163: POP
// case nation of nation_american :
55164: LD_VAR 0 5
55168: PUSH
55169: LD_INT 1
55171: DOUBLE
55172: EQUAL
55173: IFTRUE 55177
55175: GO 55233
55177: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55178: LD_ADDR_VAR 0 9
55182: PUSH
55183: LD_VAR 0 11
55187: PUSH
55188: LD_VAR 0 12
55192: PUSH
55193: LD_VAR 0 13
55197: PUSH
55198: LD_VAR 0 14
55202: PUSH
55203: LD_VAR 0 15
55207: PUSH
55208: LD_VAR 0 16
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: PUSH
55221: LD_VAR 0 4
55225: PUSH
55226: LD_INT 1
55228: PLUS
55229: ARRAY
55230: ST_TO_ADDR
55231: GO 55362
55233: LD_INT 2
55235: DOUBLE
55236: EQUAL
55237: IFTRUE 55241
55239: GO 55297
55241: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55242: LD_ADDR_VAR 0 9
55246: PUSH
55247: LD_VAR 0 17
55251: PUSH
55252: LD_VAR 0 18
55256: PUSH
55257: LD_VAR 0 19
55261: PUSH
55262: LD_VAR 0 20
55266: PUSH
55267: LD_VAR 0 21
55271: PUSH
55272: LD_VAR 0 22
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: PUSH
55285: LD_VAR 0 4
55289: PUSH
55290: LD_INT 1
55292: PLUS
55293: ARRAY
55294: ST_TO_ADDR
55295: GO 55362
55297: LD_INT 3
55299: DOUBLE
55300: EQUAL
55301: IFTRUE 55305
55303: GO 55361
55305: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55306: LD_ADDR_VAR 0 9
55310: PUSH
55311: LD_VAR 0 23
55315: PUSH
55316: LD_VAR 0 24
55320: PUSH
55321: LD_VAR 0 25
55325: PUSH
55326: LD_VAR 0 26
55330: PUSH
55331: LD_VAR 0 27
55335: PUSH
55336: LD_VAR 0 28
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: PUSH
55349: LD_VAR 0 4
55353: PUSH
55354: LD_INT 1
55356: PLUS
55357: ARRAY
55358: ST_TO_ADDR
55359: GO 55362
55361: POP
55362: GO 55917
55364: LD_INT 2
55366: DOUBLE
55367: EQUAL
55368: IFTRUE 55378
55370: LD_INT 3
55372: DOUBLE
55373: EQUAL
55374: IFTRUE 55378
55376: GO 55434
55378: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55379: LD_ADDR_VAR 0 9
55383: PUSH
55384: LD_VAR 0 29
55388: PUSH
55389: LD_VAR 0 30
55393: PUSH
55394: LD_VAR 0 31
55398: PUSH
55399: LD_VAR 0 32
55403: PUSH
55404: LD_VAR 0 33
55408: PUSH
55409: LD_VAR 0 34
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: PUSH
55422: LD_VAR 0 4
55426: PUSH
55427: LD_INT 1
55429: PLUS
55430: ARRAY
55431: ST_TO_ADDR
55432: GO 55917
55434: LD_INT 16
55436: DOUBLE
55437: EQUAL
55438: IFTRUE 55496
55440: LD_INT 17
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55496
55446: LD_INT 18
55448: DOUBLE
55449: EQUAL
55450: IFTRUE 55496
55452: LD_INT 19
55454: DOUBLE
55455: EQUAL
55456: IFTRUE 55496
55458: LD_INT 22
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55496
55464: LD_INT 20
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55496
55470: LD_INT 21
55472: DOUBLE
55473: EQUAL
55474: IFTRUE 55496
55476: LD_INT 23
55478: DOUBLE
55479: EQUAL
55480: IFTRUE 55496
55482: LD_INT 24
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55496
55488: LD_INT 25
55490: DOUBLE
55491: EQUAL
55492: IFTRUE 55496
55494: GO 55552
55496: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55497: LD_ADDR_VAR 0 9
55501: PUSH
55502: LD_VAR 0 35
55506: PUSH
55507: LD_VAR 0 36
55511: PUSH
55512: LD_VAR 0 37
55516: PUSH
55517: LD_VAR 0 38
55521: PUSH
55522: LD_VAR 0 39
55526: PUSH
55527: LD_VAR 0 40
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: PUSH
55540: LD_VAR 0 4
55544: PUSH
55545: LD_INT 1
55547: PLUS
55548: ARRAY
55549: ST_TO_ADDR
55550: GO 55917
55552: LD_INT 6
55554: DOUBLE
55555: EQUAL
55556: IFTRUE 55608
55558: LD_INT 7
55560: DOUBLE
55561: EQUAL
55562: IFTRUE 55608
55564: LD_INT 8
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55608
55570: LD_INT 13
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55608
55576: LD_INT 12
55578: DOUBLE
55579: EQUAL
55580: IFTRUE 55608
55582: LD_INT 15
55584: DOUBLE
55585: EQUAL
55586: IFTRUE 55608
55588: LD_INT 11
55590: DOUBLE
55591: EQUAL
55592: IFTRUE 55608
55594: LD_INT 14
55596: DOUBLE
55597: EQUAL
55598: IFTRUE 55608
55600: LD_INT 10
55602: DOUBLE
55603: EQUAL
55604: IFTRUE 55608
55606: GO 55664
55608: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55609: LD_ADDR_VAR 0 9
55613: PUSH
55614: LD_VAR 0 41
55618: PUSH
55619: LD_VAR 0 42
55623: PUSH
55624: LD_VAR 0 43
55628: PUSH
55629: LD_VAR 0 44
55633: PUSH
55634: LD_VAR 0 45
55638: PUSH
55639: LD_VAR 0 46
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: PUSH
55652: LD_VAR 0 4
55656: PUSH
55657: LD_INT 1
55659: PLUS
55660: ARRAY
55661: ST_TO_ADDR
55662: GO 55917
55664: LD_INT 36
55666: DOUBLE
55667: EQUAL
55668: IFTRUE 55672
55670: GO 55728
55672: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55673: LD_ADDR_VAR 0 9
55677: PUSH
55678: LD_VAR 0 47
55682: PUSH
55683: LD_VAR 0 48
55687: PUSH
55688: LD_VAR 0 49
55692: PUSH
55693: LD_VAR 0 50
55697: PUSH
55698: LD_VAR 0 51
55702: PUSH
55703: LD_VAR 0 52
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: LD_VAR 0 4
55720: PUSH
55721: LD_INT 1
55723: PLUS
55724: ARRAY
55725: ST_TO_ADDR
55726: GO 55917
55728: LD_INT 4
55730: DOUBLE
55731: EQUAL
55732: IFTRUE 55754
55734: LD_INT 5
55736: DOUBLE
55737: EQUAL
55738: IFTRUE 55754
55740: LD_INT 34
55742: DOUBLE
55743: EQUAL
55744: IFTRUE 55754
55746: LD_INT 37
55748: DOUBLE
55749: EQUAL
55750: IFTRUE 55754
55752: GO 55810
55754: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55755: LD_ADDR_VAR 0 9
55759: PUSH
55760: LD_VAR 0 53
55764: PUSH
55765: LD_VAR 0 54
55769: PUSH
55770: LD_VAR 0 55
55774: PUSH
55775: LD_VAR 0 56
55779: PUSH
55780: LD_VAR 0 57
55784: PUSH
55785: LD_VAR 0 58
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: LD_VAR 0 4
55802: PUSH
55803: LD_INT 1
55805: PLUS
55806: ARRAY
55807: ST_TO_ADDR
55808: GO 55917
55810: LD_INT 31
55812: DOUBLE
55813: EQUAL
55814: IFTRUE 55860
55816: LD_INT 32
55818: DOUBLE
55819: EQUAL
55820: IFTRUE 55860
55822: LD_INT 33
55824: DOUBLE
55825: EQUAL
55826: IFTRUE 55860
55828: LD_INT 27
55830: DOUBLE
55831: EQUAL
55832: IFTRUE 55860
55834: LD_INT 26
55836: DOUBLE
55837: EQUAL
55838: IFTRUE 55860
55840: LD_INT 28
55842: DOUBLE
55843: EQUAL
55844: IFTRUE 55860
55846: LD_INT 29
55848: DOUBLE
55849: EQUAL
55850: IFTRUE 55860
55852: LD_INT 30
55854: DOUBLE
55855: EQUAL
55856: IFTRUE 55860
55858: GO 55916
55860: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55861: LD_ADDR_VAR 0 9
55865: PUSH
55866: LD_VAR 0 59
55870: PUSH
55871: LD_VAR 0 60
55875: PUSH
55876: LD_VAR 0 61
55880: PUSH
55881: LD_VAR 0 62
55885: PUSH
55886: LD_VAR 0 63
55890: PUSH
55891: LD_VAR 0 64
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: PUSH
55904: LD_VAR 0 4
55908: PUSH
55909: LD_INT 1
55911: PLUS
55912: ARRAY
55913: ST_TO_ADDR
55914: GO 55917
55916: POP
// temp_list2 = [ ] ;
55917: LD_ADDR_VAR 0 10
55921: PUSH
55922: EMPTY
55923: ST_TO_ADDR
// for i in temp_list do
55924: LD_ADDR_VAR 0 8
55928: PUSH
55929: LD_VAR 0 9
55933: PUSH
55934: FOR_IN
55935: IFFALSE 55987
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55937: LD_ADDR_VAR 0 10
55941: PUSH
55942: LD_VAR 0 10
55946: PUSH
55947: LD_VAR 0 8
55951: PUSH
55952: LD_INT 1
55954: ARRAY
55955: PUSH
55956: LD_VAR 0 2
55960: PLUS
55961: PUSH
55962: LD_VAR 0 8
55966: PUSH
55967: LD_INT 2
55969: ARRAY
55970: PUSH
55971: LD_VAR 0 3
55975: PLUS
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: ADD
55984: ST_TO_ADDR
55985: GO 55934
55987: POP
55988: POP
// result = temp_list2 ;
55989: LD_ADDR_VAR 0 7
55993: PUSH
55994: LD_VAR 0 10
55998: ST_TO_ADDR
// end ;
55999: LD_VAR 0 7
56003: RET
// export function EnemyInRange ( unit , dist ) ; begin
56004: LD_INT 0
56006: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56007: LD_ADDR_VAR 0 3
56011: PUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 255
56021: PPUSH
56022: LD_VAR 0 1
56026: PPUSH
56027: CALL_OW 250
56031: PPUSH
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 251
56041: PPUSH
56042: LD_VAR 0 2
56046: PPUSH
56047: CALL 29400 0 4
56051: PUSH
56052: LD_INT 4
56054: ARRAY
56055: ST_TO_ADDR
// end ;
56056: LD_VAR 0 3
56060: RET
// export function PlayerSeeMe ( unit ) ; begin
56061: LD_INT 0
56063: PPUSH
// result := See ( your_side , unit ) ;
56064: LD_ADDR_VAR 0 2
56068: PUSH
56069: LD_OWVAR 2
56073: PPUSH
56074: LD_VAR 0 1
56078: PPUSH
56079: CALL_OW 292
56083: ST_TO_ADDR
// end ;
56084: LD_VAR 0 2
56088: RET
// export function ReverseDir ( unit ) ; begin
56089: LD_INT 0
56091: PPUSH
// if not unit then
56092: LD_VAR 0 1
56096: NOT
56097: IFFALSE 56101
// exit ;
56099: GO 56124
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56101: LD_ADDR_VAR 0 2
56105: PUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL_OW 254
56115: PUSH
56116: LD_INT 3
56118: PLUS
56119: PUSH
56120: LD_INT 6
56122: MOD
56123: ST_TO_ADDR
// end ;
56124: LD_VAR 0 2
56128: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56129: LD_INT 0
56131: PPUSH
56132: PPUSH
56133: PPUSH
56134: PPUSH
56135: PPUSH
// if not hexes then
56136: LD_VAR 0 2
56140: NOT
56141: IFFALSE 56145
// exit ;
56143: GO 56293
// dist := 9999 ;
56145: LD_ADDR_VAR 0 5
56149: PUSH
56150: LD_INT 9999
56152: ST_TO_ADDR
// for i = 1 to hexes do
56153: LD_ADDR_VAR 0 4
56157: PUSH
56158: DOUBLE
56159: LD_INT 1
56161: DEC
56162: ST_TO_ADDR
56163: LD_VAR 0 2
56167: PUSH
56168: FOR_TO
56169: IFFALSE 56281
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56171: LD_VAR 0 1
56175: PPUSH
56176: LD_VAR 0 2
56180: PUSH
56181: LD_VAR 0 4
56185: ARRAY
56186: PUSH
56187: LD_INT 1
56189: ARRAY
56190: PPUSH
56191: LD_VAR 0 2
56195: PUSH
56196: LD_VAR 0 4
56200: ARRAY
56201: PUSH
56202: LD_INT 2
56204: ARRAY
56205: PPUSH
56206: CALL_OW 297
56210: PUSH
56211: LD_VAR 0 5
56215: LESS
56216: IFFALSE 56279
// begin hex := hexes [ i ] ;
56218: LD_ADDR_VAR 0 7
56222: PUSH
56223: LD_VAR 0 2
56227: PUSH
56228: LD_VAR 0 4
56232: ARRAY
56233: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56234: LD_ADDR_VAR 0 5
56238: PUSH
56239: LD_VAR 0 1
56243: PPUSH
56244: LD_VAR 0 2
56248: PUSH
56249: LD_VAR 0 4
56253: ARRAY
56254: PUSH
56255: LD_INT 1
56257: ARRAY
56258: PPUSH
56259: LD_VAR 0 2
56263: PUSH
56264: LD_VAR 0 4
56268: ARRAY
56269: PUSH
56270: LD_INT 2
56272: ARRAY
56273: PPUSH
56274: CALL_OW 297
56278: ST_TO_ADDR
// end ; end ;
56279: GO 56168
56281: POP
56282: POP
// result := hex ;
56283: LD_ADDR_VAR 0 3
56287: PUSH
56288: LD_VAR 0 7
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 3
56297: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56302: LD_VAR 0 1
56306: NOT
56307: PUSH
56308: LD_VAR 0 1
56312: PUSH
56313: LD_INT 21
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 23
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PPUSH
56337: CALL_OW 69
56341: IN
56342: NOT
56343: OR
56344: IFFALSE 56348
// exit ;
56346: GO 56395
// for i = 1 to 3 do
56348: LD_ADDR_VAR 0 3
56352: PUSH
56353: DOUBLE
56354: LD_INT 1
56356: DEC
56357: ST_TO_ADDR
56358: LD_INT 3
56360: PUSH
56361: FOR_TO
56362: IFFALSE 56393
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56364: LD_VAR 0 1
56368: PPUSH
56369: CALL_OW 250
56373: PPUSH
56374: LD_VAR 0 1
56378: PPUSH
56379: CALL_OW 251
56383: PPUSH
56384: LD_INT 1
56386: PPUSH
56387: CALL_OW 453
56391: GO 56361
56393: POP
56394: POP
// end ;
56395: LD_VAR 0 2
56399: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56400: LD_INT 0
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56408: LD_VAR 0 1
56412: NOT
56413: PUSH
56414: LD_VAR 0 2
56418: NOT
56419: OR
56420: PUSH
56421: LD_VAR 0 1
56425: PPUSH
56426: CALL_OW 314
56430: OR
56431: IFFALSE 56435
// exit ;
56433: GO 56876
// x := GetX ( enemy_unit ) ;
56435: LD_ADDR_VAR 0 7
56439: PUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: CALL_OW 250
56449: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56450: LD_ADDR_VAR 0 8
56454: PUSH
56455: LD_VAR 0 2
56459: PPUSH
56460: CALL_OW 251
56464: ST_TO_ADDR
// if not x or not y then
56465: LD_VAR 0 7
56469: NOT
56470: PUSH
56471: LD_VAR 0 8
56475: NOT
56476: OR
56477: IFFALSE 56481
// exit ;
56479: GO 56876
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56481: LD_ADDR_VAR 0 6
56485: PUSH
56486: LD_VAR 0 7
56490: PPUSH
56491: LD_INT 0
56493: PPUSH
56494: LD_INT 4
56496: PPUSH
56497: CALL_OW 272
56501: PUSH
56502: LD_VAR 0 8
56506: PPUSH
56507: LD_INT 0
56509: PPUSH
56510: LD_INT 4
56512: PPUSH
56513: CALL_OW 273
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_VAR 0 7
56526: PPUSH
56527: LD_INT 1
56529: PPUSH
56530: LD_INT 4
56532: PPUSH
56533: CALL_OW 272
56537: PUSH
56538: LD_VAR 0 8
56542: PPUSH
56543: LD_INT 1
56545: PPUSH
56546: LD_INT 4
56548: PPUSH
56549: CALL_OW 273
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_VAR 0 7
56562: PPUSH
56563: LD_INT 2
56565: PPUSH
56566: LD_INT 4
56568: PPUSH
56569: CALL_OW 272
56573: PUSH
56574: LD_VAR 0 8
56578: PPUSH
56579: LD_INT 2
56581: PPUSH
56582: LD_INT 4
56584: PPUSH
56585: CALL_OW 273
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_VAR 0 7
56598: PPUSH
56599: LD_INT 3
56601: PPUSH
56602: LD_INT 4
56604: PPUSH
56605: CALL_OW 272
56609: PUSH
56610: LD_VAR 0 8
56614: PPUSH
56615: LD_INT 3
56617: PPUSH
56618: LD_INT 4
56620: PPUSH
56621: CALL_OW 273
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_VAR 0 7
56634: PPUSH
56635: LD_INT 4
56637: PPUSH
56638: LD_INT 4
56640: PPUSH
56641: CALL_OW 272
56645: PUSH
56646: LD_VAR 0 8
56650: PPUSH
56651: LD_INT 4
56653: PPUSH
56654: LD_INT 4
56656: PPUSH
56657: CALL_OW 273
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_VAR 0 7
56670: PPUSH
56671: LD_INT 5
56673: PPUSH
56674: LD_INT 4
56676: PPUSH
56677: CALL_OW 272
56681: PUSH
56682: LD_VAR 0 8
56686: PPUSH
56687: LD_INT 5
56689: PPUSH
56690: LD_INT 4
56692: PPUSH
56693: CALL_OW 273
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// for i = tmp downto 1 do
56710: LD_ADDR_VAR 0 4
56714: PUSH
56715: DOUBLE
56716: LD_VAR 0 6
56720: INC
56721: ST_TO_ADDR
56722: LD_INT 1
56724: PUSH
56725: FOR_DOWNTO
56726: IFFALSE 56827
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56728: LD_VAR 0 6
56732: PUSH
56733: LD_VAR 0 4
56737: ARRAY
56738: PUSH
56739: LD_INT 1
56741: ARRAY
56742: PPUSH
56743: LD_VAR 0 6
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: PUSH
56754: LD_INT 2
56756: ARRAY
56757: PPUSH
56758: CALL_OW 488
56762: NOT
56763: PUSH
56764: LD_VAR 0 6
56768: PUSH
56769: LD_VAR 0 4
56773: ARRAY
56774: PUSH
56775: LD_INT 1
56777: ARRAY
56778: PPUSH
56779: LD_VAR 0 6
56783: PUSH
56784: LD_VAR 0 4
56788: ARRAY
56789: PUSH
56790: LD_INT 2
56792: ARRAY
56793: PPUSH
56794: CALL_OW 428
56798: PUSH
56799: LD_INT 0
56801: NONEQUAL
56802: OR
56803: IFFALSE 56825
// tmp := Delete ( tmp , i ) ;
56805: LD_ADDR_VAR 0 6
56809: PUSH
56810: LD_VAR 0 6
56814: PPUSH
56815: LD_VAR 0 4
56819: PPUSH
56820: CALL_OW 3
56824: ST_TO_ADDR
56825: GO 56725
56827: POP
56828: POP
// j := GetClosestHex ( unit , tmp ) ;
56829: LD_ADDR_VAR 0 5
56833: PUSH
56834: LD_VAR 0 1
56838: PPUSH
56839: LD_VAR 0 6
56843: PPUSH
56844: CALL 56129 0 2
56848: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56849: LD_VAR 0 1
56853: PPUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: PPUSH
56863: LD_VAR 0 5
56867: PUSH
56868: LD_INT 2
56870: ARRAY
56871: PPUSH
56872: CALL_OW 111
// end ;
56876: LD_VAR 0 3
56880: RET
// export function PrepareApemanSoldier ( ) ; begin
56881: LD_INT 0
56883: PPUSH
// uc_nation := 0 ;
56884: LD_ADDR_OWVAR 21
56888: PUSH
56889: LD_INT 0
56891: ST_TO_ADDR
// hc_sex := sex_male ;
56892: LD_ADDR_OWVAR 27
56896: PUSH
56897: LD_INT 1
56899: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56900: LD_ADDR_OWVAR 28
56904: PUSH
56905: LD_INT 15
56907: ST_TO_ADDR
// hc_gallery :=  ;
56908: LD_ADDR_OWVAR 33
56912: PUSH
56913: LD_STRING 
56915: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56916: LD_ADDR_OWVAR 31
56920: PUSH
56921: LD_INT 0
56923: PPUSH
56924: LD_INT 3
56926: PPUSH
56927: CALL_OW 12
56931: PUSH
56932: LD_INT 0
56934: PPUSH
56935: LD_INT 3
56937: PPUSH
56938: CALL_OW 12
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// end ;
56955: LD_VAR 0 1
56959: RET
// export function PrepareApemanEngineer ( ) ; begin
56960: LD_INT 0
56962: PPUSH
// uc_nation := 0 ;
56963: LD_ADDR_OWVAR 21
56967: PUSH
56968: LD_INT 0
56970: ST_TO_ADDR
// hc_sex := sex_male ;
56971: LD_ADDR_OWVAR 27
56975: PUSH
56976: LD_INT 1
56978: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56979: LD_ADDR_OWVAR 28
56983: PUSH
56984: LD_INT 16
56986: ST_TO_ADDR
// hc_gallery :=  ;
56987: LD_ADDR_OWVAR 33
56991: PUSH
56992: LD_STRING 
56994: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56995: LD_ADDR_OWVAR 31
56999: PUSH
57000: LD_INT 0
57002: PPUSH
57003: LD_INT 3
57005: PPUSH
57006: CALL_OW 12
57010: PUSH
57011: LD_INT 0
57013: PPUSH
57014: LD_INT 3
57016: PPUSH
57017: CALL_OW 12
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: ST_TO_ADDR
// end ;
57034: LD_VAR 0 1
57038: RET
// export function PrepareApeman ( agressivity ) ; begin
57039: LD_INT 0
57041: PPUSH
// uc_side := 0 ;
57042: LD_ADDR_OWVAR 20
57046: PUSH
57047: LD_INT 0
57049: ST_TO_ADDR
// uc_nation := 0 ;
57050: LD_ADDR_OWVAR 21
57054: PUSH
57055: LD_INT 0
57057: ST_TO_ADDR
// hc_sex := sex_male ;
57058: LD_ADDR_OWVAR 27
57062: PUSH
57063: LD_INT 1
57065: ST_TO_ADDR
// hc_class := class_apeman ;
57066: LD_ADDR_OWVAR 28
57070: PUSH
57071: LD_INT 12
57073: ST_TO_ADDR
// hc_gallery :=  ;
57074: LD_ADDR_OWVAR 33
57078: PUSH
57079: LD_STRING 
57081: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57082: LD_ADDR_OWVAR 35
57086: PUSH
57087: LD_VAR 0 1
57091: NEG
57092: PPUSH
57093: LD_VAR 0 1
57097: PPUSH
57098: CALL_OW 12
57102: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57103: LD_ADDR_OWVAR 31
57107: PUSH
57108: LD_INT 0
57110: PPUSH
57111: LD_INT 3
57113: PPUSH
57114: CALL_OW 12
57118: PUSH
57119: LD_INT 0
57121: PPUSH
57122: LD_INT 3
57124: PPUSH
57125: CALL_OW 12
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: ST_TO_ADDR
// end ;
57142: LD_VAR 0 2
57146: RET
// export function PrepareTiger ( agressivity ) ; begin
57147: LD_INT 0
57149: PPUSH
// uc_side := 0 ;
57150: LD_ADDR_OWVAR 20
57154: PUSH
57155: LD_INT 0
57157: ST_TO_ADDR
// uc_nation := 0 ;
57158: LD_ADDR_OWVAR 21
57162: PUSH
57163: LD_INT 0
57165: ST_TO_ADDR
// hc_class := class_tiger ;
57166: LD_ADDR_OWVAR 28
57170: PUSH
57171: LD_INT 14
57173: ST_TO_ADDR
// hc_gallery :=  ;
57174: LD_ADDR_OWVAR 33
57178: PUSH
57179: LD_STRING 
57181: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57182: LD_ADDR_OWVAR 35
57186: PUSH
57187: LD_VAR 0 1
57191: NEG
57192: PPUSH
57193: LD_VAR 0 1
57197: PPUSH
57198: CALL_OW 12
57202: ST_TO_ADDR
// end ;
57203: LD_VAR 0 2
57207: RET
// export function PrepareEnchidna ( ) ; begin
57208: LD_INT 0
57210: PPUSH
// uc_side := 0 ;
57211: LD_ADDR_OWVAR 20
57215: PUSH
57216: LD_INT 0
57218: ST_TO_ADDR
// uc_nation := 0 ;
57219: LD_ADDR_OWVAR 21
57223: PUSH
57224: LD_INT 0
57226: ST_TO_ADDR
// hc_class := class_baggie ;
57227: LD_ADDR_OWVAR 28
57231: PUSH
57232: LD_INT 13
57234: ST_TO_ADDR
// hc_gallery :=  ;
57235: LD_ADDR_OWVAR 33
57239: PUSH
57240: LD_STRING 
57242: ST_TO_ADDR
// end ;
57243: LD_VAR 0 1
57247: RET
// export function PrepareFrog ( ) ; begin
57248: LD_INT 0
57250: PPUSH
// uc_side := 0 ;
57251: LD_ADDR_OWVAR 20
57255: PUSH
57256: LD_INT 0
57258: ST_TO_ADDR
// uc_nation := 0 ;
57259: LD_ADDR_OWVAR 21
57263: PUSH
57264: LD_INT 0
57266: ST_TO_ADDR
// hc_class := class_frog ;
57267: LD_ADDR_OWVAR 28
57271: PUSH
57272: LD_INT 19
57274: ST_TO_ADDR
// hc_gallery :=  ;
57275: LD_ADDR_OWVAR 33
57279: PUSH
57280: LD_STRING 
57282: ST_TO_ADDR
// end ;
57283: LD_VAR 0 1
57287: RET
// export function PrepareFish ( ) ; begin
57288: LD_INT 0
57290: PPUSH
// uc_side := 0 ;
57291: LD_ADDR_OWVAR 20
57295: PUSH
57296: LD_INT 0
57298: ST_TO_ADDR
// uc_nation := 0 ;
57299: LD_ADDR_OWVAR 21
57303: PUSH
57304: LD_INT 0
57306: ST_TO_ADDR
// hc_class := class_fish ;
57307: LD_ADDR_OWVAR 28
57311: PUSH
57312: LD_INT 20
57314: ST_TO_ADDR
// hc_gallery :=  ;
57315: LD_ADDR_OWVAR 33
57319: PUSH
57320: LD_STRING 
57322: ST_TO_ADDR
// end ;
57323: LD_VAR 0 1
57327: RET
// export function PrepareBird ( ) ; begin
57328: LD_INT 0
57330: PPUSH
// uc_side := 0 ;
57331: LD_ADDR_OWVAR 20
57335: PUSH
57336: LD_INT 0
57338: ST_TO_ADDR
// uc_nation := 0 ;
57339: LD_ADDR_OWVAR 21
57343: PUSH
57344: LD_INT 0
57346: ST_TO_ADDR
// hc_class := class_phororhacos ;
57347: LD_ADDR_OWVAR 28
57351: PUSH
57352: LD_INT 18
57354: ST_TO_ADDR
// hc_gallery :=  ;
57355: LD_ADDR_OWVAR 33
57359: PUSH
57360: LD_STRING 
57362: ST_TO_ADDR
// end ;
57363: LD_VAR 0 1
57367: RET
// export function PrepareHorse ( ) ; begin
57368: LD_INT 0
57370: PPUSH
// uc_side := 0 ;
57371: LD_ADDR_OWVAR 20
57375: PUSH
57376: LD_INT 0
57378: ST_TO_ADDR
// uc_nation := 0 ;
57379: LD_ADDR_OWVAR 21
57383: PUSH
57384: LD_INT 0
57386: ST_TO_ADDR
// hc_class := class_horse ;
57387: LD_ADDR_OWVAR 28
57391: PUSH
57392: LD_INT 21
57394: ST_TO_ADDR
// hc_gallery :=  ;
57395: LD_ADDR_OWVAR 33
57399: PUSH
57400: LD_STRING 
57402: ST_TO_ADDR
// end ;
57403: LD_VAR 0 1
57407: RET
// export function PrepareMastodont ( ) ; begin
57408: LD_INT 0
57410: PPUSH
// uc_side := 0 ;
57411: LD_ADDR_OWVAR 20
57415: PUSH
57416: LD_INT 0
57418: ST_TO_ADDR
// uc_nation := 0 ;
57419: LD_ADDR_OWVAR 21
57423: PUSH
57424: LD_INT 0
57426: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57427: LD_ADDR_OWVAR 37
57431: PUSH
57432: LD_INT 31
57434: ST_TO_ADDR
// vc_control := control_rider ;
57435: LD_ADDR_OWVAR 38
57439: PUSH
57440: LD_INT 4
57442: ST_TO_ADDR
// end ;
57443: LD_VAR 0 1
57447: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57448: LD_INT 0
57450: PPUSH
57451: PPUSH
57452: PPUSH
// uc_side = 0 ;
57453: LD_ADDR_OWVAR 20
57457: PUSH
57458: LD_INT 0
57460: ST_TO_ADDR
// uc_nation = 0 ;
57461: LD_ADDR_OWVAR 21
57465: PUSH
57466: LD_INT 0
57468: ST_TO_ADDR
// InitHc_All ( ) ;
57469: CALL_OW 584
// InitVc ;
57473: CALL_OW 20
// if mastodonts then
57477: LD_VAR 0 6
57481: IFFALSE 57548
// for i = 1 to mastodonts do
57483: LD_ADDR_VAR 0 11
57487: PUSH
57488: DOUBLE
57489: LD_INT 1
57491: DEC
57492: ST_TO_ADDR
57493: LD_VAR 0 6
57497: PUSH
57498: FOR_TO
57499: IFFALSE 57546
// begin vc_chassis := 31 ;
57501: LD_ADDR_OWVAR 37
57505: PUSH
57506: LD_INT 31
57508: ST_TO_ADDR
// vc_control := control_rider ;
57509: LD_ADDR_OWVAR 38
57513: PUSH
57514: LD_INT 4
57516: ST_TO_ADDR
// animal := CreateVehicle ;
57517: LD_ADDR_VAR 0 12
57521: PUSH
57522: CALL_OW 45
57526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57527: LD_VAR 0 12
57531: PPUSH
57532: LD_VAR 0 8
57536: PPUSH
57537: LD_INT 0
57539: PPUSH
57540: CALL 59683 0 3
// end ;
57544: GO 57498
57546: POP
57547: POP
// if horses then
57548: LD_VAR 0 5
57552: IFFALSE 57619
// for i = 1 to horses do
57554: LD_ADDR_VAR 0 11
57558: PUSH
57559: DOUBLE
57560: LD_INT 1
57562: DEC
57563: ST_TO_ADDR
57564: LD_VAR 0 5
57568: PUSH
57569: FOR_TO
57570: IFFALSE 57617
// begin hc_class := 21 ;
57572: LD_ADDR_OWVAR 28
57576: PUSH
57577: LD_INT 21
57579: ST_TO_ADDR
// hc_gallery :=  ;
57580: LD_ADDR_OWVAR 33
57584: PUSH
57585: LD_STRING 
57587: ST_TO_ADDR
// animal := CreateHuman ;
57588: LD_ADDR_VAR 0 12
57592: PUSH
57593: CALL_OW 44
57597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57598: LD_VAR 0 12
57602: PPUSH
57603: LD_VAR 0 8
57607: PPUSH
57608: LD_INT 0
57610: PPUSH
57611: CALL 59683 0 3
// end ;
57615: GO 57569
57617: POP
57618: POP
// if birds then
57619: LD_VAR 0 1
57623: IFFALSE 57690
// for i = 1 to birds do
57625: LD_ADDR_VAR 0 11
57629: PUSH
57630: DOUBLE
57631: LD_INT 1
57633: DEC
57634: ST_TO_ADDR
57635: LD_VAR 0 1
57639: PUSH
57640: FOR_TO
57641: IFFALSE 57688
// begin hc_class = 18 ;
57643: LD_ADDR_OWVAR 28
57647: PUSH
57648: LD_INT 18
57650: ST_TO_ADDR
// hc_gallery =  ;
57651: LD_ADDR_OWVAR 33
57655: PUSH
57656: LD_STRING 
57658: ST_TO_ADDR
// animal := CreateHuman ;
57659: LD_ADDR_VAR 0 12
57663: PUSH
57664: CALL_OW 44
57668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57669: LD_VAR 0 12
57673: PPUSH
57674: LD_VAR 0 8
57678: PPUSH
57679: LD_INT 0
57681: PPUSH
57682: CALL 59683 0 3
// end ;
57686: GO 57640
57688: POP
57689: POP
// if tigers then
57690: LD_VAR 0 2
57694: IFFALSE 57778
// for i = 1 to tigers do
57696: LD_ADDR_VAR 0 11
57700: PUSH
57701: DOUBLE
57702: LD_INT 1
57704: DEC
57705: ST_TO_ADDR
57706: LD_VAR 0 2
57710: PUSH
57711: FOR_TO
57712: IFFALSE 57776
// begin hc_class = class_tiger ;
57714: LD_ADDR_OWVAR 28
57718: PUSH
57719: LD_INT 14
57721: ST_TO_ADDR
// hc_gallery =  ;
57722: LD_ADDR_OWVAR 33
57726: PUSH
57727: LD_STRING 
57729: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57730: LD_ADDR_OWVAR 35
57734: PUSH
57735: LD_INT 7
57737: NEG
57738: PPUSH
57739: LD_INT 7
57741: PPUSH
57742: CALL_OW 12
57746: ST_TO_ADDR
// animal := CreateHuman ;
57747: LD_ADDR_VAR 0 12
57751: PUSH
57752: CALL_OW 44
57756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57757: LD_VAR 0 12
57761: PPUSH
57762: LD_VAR 0 8
57766: PPUSH
57767: LD_INT 0
57769: PPUSH
57770: CALL 59683 0 3
// end ;
57774: GO 57711
57776: POP
57777: POP
// if apemans then
57778: LD_VAR 0 3
57782: IFFALSE 57905
// for i = 1 to apemans do
57784: LD_ADDR_VAR 0 11
57788: PUSH
57789: DOUBLE
57790: LD_INT 1
57792: DEC
57793: ST_TO_ADDR
57794: LD_VAR 0 3
57798: PUSH
57799: FOR_TO
57800: IFFALSE 57903
// begin hc_class = class_apeman ;
57802: LD_ADDR_OWVAR 28
57806: PUSH
57807: LD_INT 12
57809: ST_TO_ADDR
// hc_gallery =  ;
57810: LD_ADDR_OWVAR 33
57814: PUSH
57815: LD_STRING 
57817: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57818: LD_ADDR_OWVAR 35
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PPUSH
57827: LD_INT 2
57829: PPUSH
57830: CALL_OW 12
57834: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57835: LD_ADDR_OWVAR 31
57839: PUSH
57840: LD_INT 1
57842: PPUSH
57843: LD_INT 3
57845: PPUSH
57846: CALL_OW 12
57850: PUSH
57851: LD_INT 1
57853: PPUSH
57854: LD_INT 3
57856: PPUSH
57857: CALL_OW 12
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// animal := CreateHuman ;
57874: LD_ADDR_VAR 0 12
57878: PUSH
57879: CALL_OW 44
57883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57884: LD_VAR 0 12
57888: PPUSH
57889: LD_VAR 0 8
57893: PPUSH
57894: LD_INT 0
57896: PPUSH
57897: CALL 59683 0 3
// end ;
57901: GO 57799
57903: POP
57904: POP
// if enchidnas then
57905: LD_VAR 0 4
57909: IFFALSE 57976
// for i = 1 to enchidnas do
57911: LD_ADDR_VAR 0 11
57915: PUSH
57916: DOUBLE
57917: LD_INT 1
57919: DEC
57920: ST_TO_ADDR
57921: LD_VAR 0 4
57925: PUSH
57926: FOR_TO
57927: IFFALSE 57974
// begin hc_class = 13 ;
57929: LD_ADDR_OWVAR 28
57933: PUSH
57934: LD_INT 13
57936: ST_TO_ADDR
// hc_gallery =  ;
57937: LD_ADDR_OWVAR 33
57941: PUSH
57942: LD_STRING 
57944: ST_TO_ADDR
// animal := CreateHuman ;
57945: LD_ADDR_VAR 0 12
57949: PUSH
57950: CALL_OW 44
57954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57955: LD_VAR 0 12
57959: PPUSH
57960: LD_VAR 0 8
57964: PPUSH
57965: LD_INT 0
57967: PPUSH
57968: CALL 59683 0 3
// end ;
57972: GO 57926
57974: POP
57975: POP
// if fishes then
57976: LD_VAR 0 7
57980: IFFALSE 58047
// for i = 1 to fishes do
57982: LD_ADDR_VAR 0 11
57986: PUSH
57987: DOUBLE
57988: LD_INT 1
57990: DEC
57991: ST_TO_ADDR
57992: LD_VAR 0 7
57996: PUSH
57997: FOR_TO
57998: IFFALSE 58045
// begin hc_class = 20 ;
58000: LD_ADDR_OWVAR 28
58004: PUSH
58005: LD_INT 20
58007: ST_TO_ADDR
// hc_gallery =  ;
58008: LD_ADDR_OWVAR 33
58012: PUSH
58013: LD_STRING 
58015: ST_TO_ADDR
// animal := CreateHuman ;
58016: LD_ADDR_VAR 0 12
58020: PUSH
58021: CALL_OW 44
58025: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58026: LD_VAR 0 12
58030: PPUSH
58031: LD_VAR 0 9
58035: PPUSH
58036: LD_INT 0
58038: PPUSH
58039: CALL 59683 0 3
// end ;
58043: GO 57997
58045: POP
58046: POP
// end ;
58047: LD_VAR 0 10
58051: RET
// export function WantHeal ( sci , unit ) ; begin
58052: LD_INT 0
58054: PPUSH
// if GetTaskList ( sci ) > 0 then
58055: LD_VAR 0 1
58059: PPUSH
58060: CALL_OW 437
58064: PUSH
58065: LD_INT 0
58067: GREATER
58068: IFFALSE 58138
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 437
58079: PUSH
58080: LD_INT 1
58082: ARRAY
58083: PUSH
58084: LD_INT 1
58086: ARRAY
58087: PUSH
58088: LD_STRING l
58090: EQUAL
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 437
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PUSH
58106: LD_INT 4
58108: ARRAY
58109: PUSH
58110: LD_VAR 0 2
58114: EQUAL
58115: AND
58116: IFFALSE 58128
// result := true else
58118: LD_ADDR_VAR 0 3
58122: PUSH
58123: LD_INT 1
58125: ST_TO_ADDR
58126: GO 58136
// result := false ;
58128: LD_ADDR_VAR 0 3
58132: PUSH
58133: LD_INT 0
58135: ST_TO_ADDR
// end else
58136: GO 58146
// result := false ;
58138: LD_ADDR_VAR 0 3
58142: PUSH
58143: LD_INT 0
58145: ST_TO_ADDR
// end ;
58146: LD_VAR 0 3
58150: RET
// export function HealTarget ( sci ) ; begin
58151: LD_INT 0
58153: PPUSH
// if not sci then
58154: LD_VAR 0 1
58158: NOT
58159: IFFALSE 58163
// exit ;
58161: GO 58228
// result := 0 ;
58163: LD_ADDR_VAR 0 2
58167: PUSH
58168: LD_INT 0
58170: ST_TO_ADDR
// if GetTaskList ( sci ) then
58171: LD_VAR 0 1
58175: PPUSH
58176: CALL_OW 437
58180: IFFALSE 58228
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL_OW 437
58191: PUSH
58192: LD_INT 1
58194: ARRAY
58195: PUSH
58196: LD_INT 1
58198: ARRAY
58199: PUSH
58200: LD_STRING l
58202: EQUAL
58203: IFFALSE 58228
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58205: LD_ADDR_VAR 0 2
58209: PUSH
58210: LD_VAR 0 1
58214: PPUSH
58215: CALL_OW 437
58219: PUSH
58220: LD_INT 1
58222: ARRAY
58223: PUSH
58224: LD_INT 4
58226: ARRAY
58227: ST_TO_ADDR
// end ;
58228: LD_VAR 0 2
58232: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58233: LD_INT 0
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
// if not base_units then
58239: LD_VAR 0 1
58243: NOT
58244: IFFALSE 58248
// exit ;
58246: GO 58335
// result := false ;
58248: LD_ADDR_VAR 0 2
58252: PUSH
58253: LD_INT 0
58255: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58256: LD_ADDR_VAR 0 5
58260: PUSH
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_INT 21
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PPUSH
58276: CALL_OW 72
58280: ST_TO_ADDR
// if not tmp then
58281: LD_VAR 0 5
58285: NOT
58286: IFFALSE 58290
// exit ;
58288: GO 58335
// for i in tmp do
58290: LD_ADDR_VAR 0 3
58294: PUSH
58295: LD_VAR 0 5
58299: PUSH
58300: FOR_IN
58301: IFFALSE 58333
// begin result := EnemyInRange ( i , 22 ) ;
58303: LD_ADDR_VAR 0 2
58307: PUSH
58308: LD_VAR 0 3
58312: PPUSH
58313: LD_INT 22
58315: PPUSH
58316: CALL 56004 0 2
58320: ST_TO_ADDR
// if result then
58321: LD_VAR 0 2
58325: IFFALSE 58331
// exit ;
58327: POP
58328: POP
58329: GO 58335
// end ;
58331: GO 58300
58333: POP
58334: POP
// end ;
58335: LD_VAR 0 2
58339: RET
// export function FilterByTag ( units , tag ) ; begin
58340: LD_INT 0
58342: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58343: LD_ADDR_VAR 0 3
58347: PUSH
58348: LD_VAR 0 1
58352: PPUSH
58353: LD_INT 120
58355: PUSH
58356: LD_VAR 0 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PPUSH
58365: CALL_OW 72
58369: ST_TO_ADDR
// end ;
58370: LD_VAR 0 3
58374: RET
// export function IsDriver ( un ) ; begin
58375: LD_INT 0
58377: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58378: LD_ADDR_VAR 0 2
58382: PUSH
58383: LD_VAR 0 1
58387: PUSH
58388: LD_INT 55
58390: PUSH
58391: EMPTY
58392: LIST
58393: PPUSH
58394: CALL_OW 69
58398: IN
58399: ST_TO_ADDR
// end ;
58400: LD_VAR 0 2
58404: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
// list := [ ] ;
58409: LD_ADDR_VAR 0 5
58413: PUSH
58414: EMPTY
58415: ST_TO_ADDR
// case d of 0 :
58416: LD_VAR 0 3
58420: PUSH
58421: LD_INT 0
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58429
58427: GO 58562
58429: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58430: LD_ADDR_VAR 0 5
58434: PUSH
58435: LD_VAR 0 1
58439: PUSH
58440: LD_INT 4
58442: MINUS
58443: PUSH
58444: LD_VAR 0 2
58448: PUSH
58449: LD_INT 4
58451: MINUS
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: PUSH
58461: LD_VAR 0 1
58465: PUSH
58466: LD_INT 3
58468: MINUS
58469: PUSH
58470: LD_VAR 0 2
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: PUSH
58483: LD_VAR 0 1
58487: PUSH
58488: LD_INT 4
58490: PLUS
58491: PUSH
58492: LD_VAR 0 2
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: PUSH
58505: LD_VAR 0 1
58509: PUSH
58510: LD_INT 3
58512: PLUS
58513: PUSH
58514: LD_VAR 0 2
58518: PUSH
58519: LD_INT 3
58521: PLUS
58522: PUSH
58523: LD_INT 5
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: PUSH
58531: LD_VAR 0 1
58535: PUSH
58536: LD_VAR 0 2
58540: PUSH
58541: LD_INT 4
58543: PLUS
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// end ; 1 :
58560: GO 59260
58562: LD_INT 1
58564: DOUBLE
58565: EQUAL
58566: IFTRUE 58570
58568: GO 58703
58570: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58571: LD_ADDR_VAR 0 5
58575: PUSH
58576: LD_VAR 0 1
58580: PUSH
58581: LD_VAR 0 2
58585: PUSH
58586: LD_INT 4
58588: MINUS
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: PUSH
58598: LD_VAR 0 1
58602: PUSH
58603: LD_INT 3
58605: MINUS
58606: PUSH
58607: LD_VAR 0 2
58611: PUSH
58612: LD_INT 3
58614: MINUS
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: PUSH
58624: LD_VAR 0 1
58628: PUSH
58629: LD_INT 4
58631: MINUS
58632: PUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: PUSH
58646: LD_VAR 0 1
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 3
58658: PLUS
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: LD_VAR 0 1
58672: PUSH
58673: LD_INT 4
58675: PLUS
58676: PUSH
58677: LD_VAR 0 2
58681: PUSH
58682: LD_INT 4
58684: PLUS
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// end ; 2 :
58701: GO 59260
58703: LD_INT 2
58705: DOUBLE
58706: EQUAL
58707: IFTRUE 58711
58709: GO 58840
58711: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58712: LD_ADDR_VAR 0 5
58716: PUSH
58717: LD_VAR 0 1
58721: PUSH
58722: LD_VAR 0 2
58726: PUSH
58727: LD_INT 3
58729: MINUS
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: LIST
58738: PUSH
58739: LD_VAR 0 1
58743: PUSH
58744: LD_INT 4
58746: PLUS
58747: PUSH
58748: LD_VAR 0 2
58752: PUSH
58753: LD_INT 4
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: PUSH
58761: LD_VAR 0 1
58765: PUSH
58766: LD_VAR 0 2
58770: PUSH
58771: LD_INT 4
58773: PLUS
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_VAR 0 1
58787: PUSH
58788: LD_INT 3
58790: MINUS
58791: PUSH
58792: LD_VAR 0 2
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: PUSH
58805: LD_VAR 0 1
58809: PUSH
58810: LD_INT 4
58812: MINUS
58813: PUSH
58814: LD_VAR 0 2
58818: PUSH
58819: LD_INT 4
58821: MINUS
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: ST_TO_ADDR
// end ; 3 :
58838: GO 59260
58840: LD_INT 3
58842: DOUBLE
58843: EQUAL
58844: IFTRUE 58848
58846: GO 58981
58848: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58849: LD_ADDR_VAR 0 5
58853: PUSH
58854: LD_VAR 0 1
58858: PUSH
58859: LD_INT 3
58861: PLUS
58862: PUSH
58863: LD_VAR 0 2
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: PUSH
58876: LD_VAR 0 1
58880: PUSH
58881: LD_INT 4
58883: PLUS
58884: PUSH
58885: LD_VAR 0 2
58889: PUSH
58890: LD_INT 4
58892: PLUS
58893: PUSH
58894: LD_INT 5
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: PUSH
58902: LD_VAR 0 1
58906: PUSH
58907: LD_INT 4
58909: MINUS
58910: PUSH
58911: LD_VAR 0 2
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: PUSH
58924: LD_VAR 0 1
58928: PUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_INT 4
58936: MINUS
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: PUSH
58946: LD_VAR 0 1
58950: PUSH
58951: LD_INT 3
58953: MINUS
58954: PUSH
58955: LD_VAR 0 2
58959: PUSH
58960: LD_INT 3
58962: MINUS
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// end ; 4 :
58979: GO 59260
58981: LD_INT 4
58983: DOUBLE
58984: EQUAL
58985: IFTRUE 58989
58987: GO 59122
58989: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58990: LD_ADDR_VAR 0 5
58994: PUSH
58995: LD_VAR 0 1
58999: PUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_INT 4
59007: PLUS
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: PUSH
59017: LD_VAR 0 1
59021: PUSH
59022: LD_INT 3
59024: PLUS
59025: PUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_INT 3
59033: PLUS
59034: PUSH
59035: LD_INT 5
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: PUSH
59043: LD_VAR 0 1
59047: PUSH
59048: LD_INT 4
59050: PLUS
59051: PUSH
59052: LD_VAR 0 2
59056: PUSH
59057: LD_INT 4
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: LIST
59064: PUSH
59065: LD_VAR 0 1
59069: PUSH
59070: LD_VAR 0 2
59074: PUSH
59075: LD_INT 3
59077: MINUS
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: PUSH
59087: LD_VAR 0 1
59091: PUSH
59092: LD_INT 4
59094: MINUS
59095: PUSH
59096: LD_VAR 0 2
59100: PUSH
59101: LD_INT 4
59103: MINUS
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: ST_TO_ADDR
// end ; 5 :
59120: GO 59260
59122: LD_INT 5
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59130
59128: GO 59259
59130: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59131: LD_ADDR_VAR 0 5
59135: PUSH
59136: LD_VAR 0 1
59140: PUSH
59141: LD_INT 4
59143: MINUS
59144: PUSH
59145: LD_VAR 0 2
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: PUSH
59158: LD_VAR 0 1
59162: PUSH
59163: LD_VAR 0 2
59167: PUSH
59168: LD_INT 4
59170: MINUS
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: PUSH
59180: LD_VAR 0 1
59184: PUSH
59185: LD_INT 4
59187: PLUS
59188: PUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 4
59196: PLUS
59197: PUSH
59198: LD_INT 5
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: PUSH
59206: LD_VAR 0 1
59210: PUSH
59211: LD_INT 3
59213: PLUS
59214: PUSH
59215: LD_VAR 0 2
59219: PUSH
59220: LD_INT 4
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: PUSH
59228: LD_VAR 0 1
59232: PUSH
59233: LD_VAR 0 2
59237: PUSH
59238: LD_INT 3
59240: PLUS
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// end ; end ;
59257: GO 59260
59259: POP
// result := list ;
59260: LD_ADDR_VAR 0 4
59264: PUSH
59265: LD_VAR 0 5
59269: ST_TO_ADDR
// end ;
59270: LD_VAR 0 4
59274: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59275: LD_INT 0
59277: PPUSH
59278: PPUSH
59279: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59280: LD_VAR 0 1
59284: NOT
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: IN
59309: NOT
59310: OR
59311: IFFALSE 59315
// exit ;
59313: GO 59407
// tmp := [ ] ;
59315: LD_ADDR_VAR 0 5
59319: PUSH
59320: EMPTY
59321: ST_TO_ADDR
// for i in units do
59322: LD_ADDR_VAR 0 4
59326: PUSH
59327: LD_VAR 0 1
59331: PUSH
59332: FOR_IN
59333: IFFALSE 59376
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59335: LD_ADDR_VAR 0 5
59339: PUSH
59340: LD_VAR 0 5
59344: PPUSH
59345: LD_VAR 0 5
59349: PUSH
59350: LD_INT 1
59352: PLUS
59353: PPUSH
59354: LD_VAR 0 4
59358: PPUSH
59359: LD_VAR 0 2
59363: PPUSH
59364: CALL_OW 259
59368: PPUSH
59369: CALL_OW 2
59373: ST_TO_ADDR
59374: GO 59332
59376: POP
59377: POP
// if not tmp then
59378: LD_VAR 0 5
59382: NOT
59383: IFFALSE 59387
// exit ;
59385: GO 59407
// result := SortListByListDesc ( units , tmp ) ;
59387: LD_ADDR_VAR 0 3
59391: PUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: LD_VAR 0 5
59401: PPUSH
59402: CALL_OW 77
59406: ST_TO_ADDR
// end ;
59407: LD_VAR 0 3
59411: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
59416: PPUSH
// result := false ;
59417: LD_ADDR_VAR 0 3
59421: PUSH
59422: LD_INT 0
59424: ST_TO_ADDR
// x := GetX ( building ) ;
59425: LD_ADDR_VAR 0 4
59429: PUSH
59430: LD_VAR 0 2
59434: PPUSH
59435: CALL_OW 250
59439: ST_TO_ADDR
// y := GetY ( building ) ;
59440: LD_ADDR_VAR 0 5
59444: PUSH
59445: LD_VAR 0 2
59449: PPUSH
59450: CALL_OW 251
59454: ST_TO_ADDR
// if not building or not x or not y then
59455: LD_VAR 0 2
59459: NOT
59460: PUSH
59461: LD_VAR 0 4
59465: NOT
59466: OR
59467: PUSH
59468: LD_VAR 0 5
59472: NOT
59473: OR
59474: IFFALSE 59478
// exit ;
59476: GO 59570
// if GetTaskList ( unit ) then
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL_OW 437
59487: IFFALSE 59570
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59489: LD_STRING e
59491: PUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: CALL_OW 437
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: PUSH
59506: LD_INT 1
59508: ARRAY
59509: EQUAL
59510: PUSH
59511: LD_VAR 0 4
59515: PUSH
59516: LD_VAR 0 1
59520: PPUSH
59521: CALL_OW 437
59525: PUSH
59526: LD_INT 1
59528: ARRAY
59529: PUSH
59530: LD_INT 2
59532: ARRAY
59533: EQUAL
59534: AND
59535: PUSH
59536: LD_VAR 0 5
59540: PUSH
59541: LD_VAR 0 1
59545: PPUSH
59546: CALL_OW 437
59550: PUSH
59551: LD_INT 1
59553: ARRAY
59554: PUSH
59555: LD_INT 3
59557: ARRAY
59558: EQUAL
59559: AND
59560: IFFALSE 59570
// result := true end ;
59562: LD_ADDR_VAR 0 3
59566: PUSH
59567: LD_INT 1
59569: ST_TO_ADDR
// end ;
59570: LD_VAR 0 3
59574: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59575: LD_INT 0
59577: PPUSH
// result := false ;
59578: LD_ADDR_VAR 0 4
59582: PUSH
59583: LD_INT 0
59585: ST_TO_ADDR
// if GetTaskList ( unit ) then
59586: LD_VAR 0 1
59590: PPUSH
59591: CALL_OW 437
59595: IFFALSE 59678
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59597: LD_STRING M
59599: PUSH
59600: LD_VAR 0 1
59604: PPUSH
59605: CALL_OW 437
59609: PUSH
59610: LD_INT 1
59612: ARRAY
59613: PUSH
59614: LD_INT 1
59616: ARRAY
59617: EQUAL
59618: PUSH
59619: LD_VAR 0 2
59623: PUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: CALL_OW 437
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: PUSH
59638: LD_INT 2
59640: ARRAY
59641: EQUAL
59642: AND
59643: PUSH
59644: LD_VAR 0 3
59648: PUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: CALL_OW 437
59658: PUSH
59659: LD_INT 1
59661: ARRAY
59662: PUSH
59663: LD_INT 3
59665: ARRAY
59666: EQUAL
59667: AND
59668: IFFALSE 59678
// result := true ;
59670: LD_ADDR_VAR 0 4
59674: PUSH
59675: LD_INT 1
59677: ST_TO_ADDR
// end ; end ;
59678: LD_VAR 0 4
59682: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59683: LD_INT 0
59685: PPUSH
59686: PPUSH
59687: PPUSH
59688: PPUSH
// if not unit or not area then
59689: LD_VAR 0 1
59693: NOT
59694: PUSH
59695: LD_VAR 0 2
59699: NOT
59700: OR
59701: IFFALSE 59705
// exit ;
59703: GO 59869
// tmp := AreaToList ( area , i ) ;
59705: LD_ADDR_VAR 0 6
59709: PUSH
59710: LD_VAR 0 2
59714: PPUSH
59715: LD_VAR 0 5
59719: PPUSH
59720: CALL_OW 517
59724: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59725: LD_ADDR_VAR 0 5
59729: PUSH
59730: DOUBLE
59731: LD_INT 1
59733: DEC
59734: ST_TO_ADDR
59735: LD_VAR 0 6
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: FOR_TO
59745: IFFALSE 59867
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59747: LD_ADDR_VAR 0 7
59751: PUSH
59752: LD_VAR 0 6
59756: PUSH
59757: LD_INT 1
59759: ARRAY
59760: PUSH
59761: LD_VAR 0 5
59765: ARRAY
59766: PUSH
59767: LD_VAR 0 6
59771: PUSH
59772: LD_INT 2
59774: ARRAY
59775: PUSH
59776: LD_VAR 0 5
59780: ARRAY
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59786: LD_VAR 0 7
59790: PUSH
59791: LD_INT 1
59793: ARRAY
59794: PPUSH
59795: LD_VAR 0 7
59799: PUSH
59800: LD_INT 2
59802: ARRAY
59803: PPUSH
59804: CALL_OW 428
59808: PUSH
59809: LD_INT 0
59811: EQUAL
59812: IFFALSE 59865
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59814: LD_VAR 0 1
59818: PPUSH
59819: LD_VAR 0 7
59823: PUSH
59824: LD_INT 1
59826: ARRAY
59827: PPUSH
59828: LD_VAR 0 7
59832: PUSH
59833: LD_INT 2
59835: ARRAY
59836: PPUSH
59837: LD_VAR 0 3
59841: PPUSH
59842: CALL_OW 48
// result := IsPlaced ( unit ) ;
59846: LD_ADDR_VAR 0 4
59850: PUSH
59851: LD_VAR 0 1
59855: PPUSH
59856: CALL_OW 305
59860: ST_TO_ADDR
// exit ;
59861: POP
59862: POP
59863: GO 59869
// end ; end ;
59865: GO 59744
59867: POP
59868: POP
// end ;
59869: LD_VAR 0 4
59873: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59874: LD_INT 0
59876: PPUSH
59877: PPUSH
59878: PPUSH
// if not side or side > 8 then
59879: LD_VAR 0 1
59883: NOT
59884: PUSH
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 8
59892: GREATER
59893: OR
59894: IFFALSE 59898
// exit ;
59896: GO 60085
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59898: LD_ADDR_VAR 0 4
59902: PUSH
59903: LD_INT 22
59905: PUSH
59906: LD_VAR 0 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 21
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PPUSH
59929: CALL_OW 69
59933: ST_TO_ADDR
// if not tmp then
59934: LD_VAR 0 4
59938: NOT
59939: IFFALSE 59943
// exit ;
59941: GO 60085
// enable_addtolog := true ;
59943: LD_ADDR_OWVAR 81
59947: PUSH
59948: LD_INT 1
59950: ST_TO_ADDR
// AddToLog ( [ ) ;
59951: LD_STRING [
59953: PPUSH
59954: CALL_OW 561
// for i in tmp do
59958: LD_ADDR_VAR 0 3
59962: PUSH
59963: LD_VAR 0 4
59967: PUSH
59968: FOR_IN
59969: IFFALSE 60076
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59971: LD_STRING [
59973: PUSH
59974: LD_VAR 0 3
59978: PPUSH
59979: CALL_OW 266
59983: STR
59984: PUSH
59985: LD_STRING , 
59987: STR
59988: PUSH
59989: LD_VAR 0 3
59993: PPUSH
59994: CALL_OW 250
59998: STR
59999: PUSH
60000: LD_STRING , 
60002: STR
60003: PUSH
60004: LD_VAR 0 3
60008: PPUSH
60009: CALL_OW 251
60013: STR
60014: PUSH
60015: LD_STRING , 
60017: STR
60018: PUSH
60019: LD_VAR 0 3
60023: PPUSH
60024: CALL_OW 254
60028: STR
60029: PUSH
60030: LD_STRING , 
60032: STR
60033: PUSH
60034: LD_VAR 0 3
60038: PPUSH
60039: LD_INT 1
60041: PPUSH
60042: CALL_OW 268
60046: STR
60047: PUSH
60048: LD_STRING , 
60050: STR
60051: PUSH
60052: LD_VAR 0 3
60056: PPUSH
60057: LD_INT 2
60059: PPUSH
60060: CALL_OW 268
60064: STR
60065: PUSH
60066: LD_STRING ],
60068: STR
60069: PPUSH
60070: CALL_OW 561
// end ;
60074: GO 59968
60076: POP
60077: POP
// AddToLog ( ]; ) ;
60078: LD_STRING ];
60080: PPUSH
60081: CALL_OW 561
// end ;
60085: LD_VAR 0 2
60089: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60090: LD_INT 0
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
60096: PPUSH
// if not area or not rate or not max then
60097: LD_VAR 0 1
60101: NOT
60102: PUSH
60103: LD_VAR 0 2
60107: NOT
60108: OR
60109: PUSH
60110: LD_VAR 0 4
60114: NOT
60115: OR
60116: IFFALSE 60120
// exit ;
60118: GO 60309
// while 1 do
60120: LD_INT 1
60122: IFFALSE 60309
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60124: LD_ADDR_VAR 0 9
60128: PUSH
60129: LD_VAR 0 1
60133: PPUSH
60134: LD_INT 1
60136: PPUSH
60137: CALL_OW 287
60141: PUSH
60142: LD_INT 10
60144: MUL
60145: ST_TO_ADDR
// r := rate / 10 ;
60146: LD_ADDR_VAR 0 7
60150: PUSH
60151: LD_VAR 0 2
60155: PUSH
60156: LD_INT 10
60158: DIVREAL
60159: ST_TO_ADDR
// time := 1 1$00 ;
60160: LD_ADDR_VAR 0 8
60164: PUSH
60165: LD_INT 2100
60167: ST_TO_ADDR
// if amount < min then
60168: LD_VAR 0 9
60172: PUSH
60173: LD_VAR 0 3
60177: LESS
60178: IFFALSE 60196
// r := r * 2 else
60180: LD_ADDR_VAR 0 7
60184: PUSH
60185: LD_VAR 0 7
60189: PUSH
60190: LD_INT 2
60192: MUL
60193: ST_TO_ADDR
60194: GO 60222
// if amount > max then
60196: LD_VAR 0 9
60200: PUSH
60201: LD_VAR 0 4
60205: GREATER
60206: IFFALSE 60222
// r := r / 2 ;
60208: LD_ADDR_VAR 0 7
60212: PUSH
60213: LD_VAR 0 7
60217: PUSH
60218: LD_INT 2
60220: DIVREAL
60221: ST_TO_ADDR
// time := time / r ;
60222: LD_ADDR_VAR 0 8
60226: PUSH
60227: LD_VAR 0 8
60231: PUSH
60232: LD_VAR 0 7
60236: DIVREAL
60237: ST_TO_ADDR
// if time < 0 then
60238: LD_VAR 0 8
60242: PUSH
60243: LD_INT 0
60245: LESS
60246: IFFALSE 60263
// time := time * - 1 ;
60248: LD_ADDR_VAR 0 8
60252: PUSH
60253: LD_VAR 0 8
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: MUL
60262: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60263: LD_VAR 0 8
60267: PUSH
60268: LD_INT 35
60270: PPUSH
60271: LD_INT 875
60273: PPUSH
60274: CALL_OW 12
60278: PLUS
60279: PPUSH
60280: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60284: LD_INT 1
60286: PPUSH
60287: LD_INT 5
60289: PPUSH
60290: CALL_OW 12
60294: PPUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: LD_INT 1
60302: PPUSH
60303: CALL_OW 55
// end ;
60307: GO 60120
// end ;
60309: LD_VAR 0 5
60313: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60314: LD_INT 0
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
60320: PPUSH
60321: PPUSH
60322: PPUSH
60323: PPUSH
// if not turrets or not factories then
60324: LD_VAR 0 1
60328: NOT
60329: PUSH
60330: LD_VAR 0 2
60334: NOT
60335: OR
60336: IFFALSE 60340
// exit ;
60338: GO 60647
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60340: LD_ADDR_VAR 0 10
60344: PUSH
60345: LD_INT 5
60347: PUSH
60348: LD_INT 6
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 4
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: PUSH
60368: LD_INT 5
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 24
60382: PUSH
60383: LD_INT 25
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 23
60392: PUSH
60393: LD_INT 27
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 42
60406: PUSH
60407: LD_INT 43
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 44
60416: PUSH
60417: LD_INT 46
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 45
60426: PUSH
60427: LD_INT 47
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// result := [ ] ;
60444: LD_ADDR_VAR 0 3
60448: PUSH
60449: EMPTY
60450: ST_TO_ADDR
// for i in turrets do
60451: LD_ADDR_VAR 0 4
60455: PUSH
60456: LD_VAR 0 1
60460: PUSH
60461: FOR_IN
60462: IFFALSE 60645
// begin nat := GetNation ( i ) ;
60464: LD_ADDR_VAR 0 7
60468: PUSH
60469: LD_VAR 0 4
60473: PPUSH
60474: CALL_OW 248
60478: ST_TO_ADDR
// weapon := 0 ;
60479: LD_ADDR_VAR 0 8
60483: PUSH
60484: LD_INT 0
60486: ST_TO_ADDR
// if not nat then
60487: LD_VAR 0 7
60491: NOT
60492: IFFALSE 60496
// continue ;
60494: GO 60461
// for j in list [ nat ] do
60496: LD_ADDR_VAR 0 5
60500: PUSH
60501: LD_VAR 0 10
60505: PUSH
60506: LD_VAR 0 7
60510: ARRAY
60511: PUSH
60512: FOR_IN
60513: IFFALSE 60554
// if GetBWeapon ( i ) = j [ 1 ] then
60515: LD_VAR 0 4
60519: PPUSH
60520: CALL_OW 269
60524: PUSH
60525: LD_VAR 0 5
60529: PUSH
60530: LD_INT 1
60532: ARRAY
60533: EQUAL
60534: IFFALSE 60552
// begin weapon := j [ 2 ] ;
60536: LD_ADDR_VAR 0 8
60540: PUSH
60541: LD_VAR 0 5
60545: PUSH
60546: LD_INT 2
60548: ARRAY
60549: ST_TO_ADDR
// break ;
60550: GO 60554
// end ;
60552: GO 60512
60554: POP
60555: POP
// if not weapon then
60556: LD_VAR 0 8
60560: NOT
60561: IFFALSE 60565
// continue ;
60563: GO 60461
// for k in factories do
60565: LD_ADDR_VAR 0 6
60569: PUSH
60570: LD_VAR 0 2
60574: PUSH
60575: FOR_IN
60576: IFFALSE 60641
// begin weapons := AvailableWeaponList ( k ) ;
60578: LD_ADDR_VAR 0 9
60582: PUSH
60583: LD_VAR 0 6
60587: PPUSH
60588: CALL_OW 478
60592: ST_TO_ADDR
// if not weapons then
60593: LD_VAR 0 9
60597: NOT
60598: IFFALSE 60602
// continue ;
60600: GO 60575
// if weapon in weapons then
60602: LD_VAR 0 8
60606: PUSH
60607: LD_VAR 0 9
60611: IN
60612: IFFALSE 60639
// begin result := [ i , weapon ] ;
60614: LD_ADDR_VAR 0 3
60618: PUSH
60619: LD_VAR 0 4
60623: PUSH
60624: LD_VAR 0 8
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// exit ;
60633: POP
60634: POP
60635: POP
60636: POP
60637: GO 60647
// end ; end ;
60639: GO 60575
60641: POP
60642: POP
// end ;
60643: GO 60461
60645: POP
60646: POP
// end ;
60647: LD_VAR 0 3
60651: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60652: LD_INT 0
60654: PPUSH
// if not side or side > 8 then
60655: LD_VAR 0 3
60659: NOT
60660: PUSH
60661: LD_VAR 0 3
60665: PUSH
60666: LD_INT 8
60668: GREATER
60669: OR
60670: IFFALSE 60674
// exit ;
60672: GO 60733
// if not range then
60674: LD_VAR 0 4
60678: NOT
60679: IFFALSE 60690
// range := - 12 ;
60681: LD_ADDR_VAR 0 4
60685: PUSH
60686: LD_INT 12
60688: NEG
60689: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60690: LD_VAR 0 1
60694: PPUSH
60695: LD_VAR 0 2
60699: PPUSH
60700: LD_VAR 0 3
60704: PPUSH
60705: LD_VAR 0 4
60709: PPUSH
60710: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60714: LD_VAR 0 1
60718: PPUSH
60719: LD_VAR 0 2
60723: PPUSH
60724: LD_VAR 0 3
60728: PPUSH
60729: CALL_OW 331
// end ;
60733: LD_VAR 0 5
60737: RET
// export function Video ( mode ) ; begin
60738: LD_INT 0
60740: PPUSH
// ingame_video = mode ;
60741: LD_ADDR_OWVAR 52
60745: PUSH
60746: LD_VAR 0 1
60750: ST_TO_ADDR
// interface_hidden = mode ;
60751: LD_ADDR_OWVAR 54
60755: PUSH
60756: LD_VAR 0 1
60760: ST_TO_ADDR
// end ;
60761: LD_VAR 0 2
60765: RET
// export function Join ( array , element ) ; begin
60766: LD_INT 0
60768: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60769: LD_ADDR_VAR 0 3
60773: PUSH
60774: LD_VAR 0 1
60778: PPUSH
60779: LD_VAR 0 1
60783: PUSH
60784: LD_INT 1
60786: PLUS
60787: PPUSH
60788: LD_VAR 0 2
60792: PPUSH
60793: CALL_OW 1
60797: ST_TO_ADDR
// end ;
60798: LD_VAR 0 3
60802: RET
// export function JoinUnion ( array , element ) ; begin
60803: LD_INT 0
60805: PPUSH
// result := array union element ;
60806: LD_ADDR_VAR 0 3
60810: PUSH
60811: LD_VAR 0 1
60815: PUSH
60816: LD_VAR 0 2
60820: UNION
60821: ST_TO_ADDR
// end ;
60822: LD_VAR 0 3
60826: RET
// export function GetBehemoths ( side ) ; begin
60827: LD_INT 0
60829: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60830: LD_ADDR_VAR 0 2
60834: PUSH
60835: LD_INT 22
60837: PUSH
60838: LD_VAR 0 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 31
60849: PUSH
60850: LD_INT 25
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PPUSH
60861: CALL_OW 69
60865: ST_TO_ADDR
// end ;
60866: LD_VAR 0 2
60870: RET
// export function Shuffle ( array ) ; var i , index ; begin
60871: LD_INT 0
60873: PPUSH
60874: PPUSH
60875: PPUSH
// result := [ ] ;
60876: LD_ADDR_VAR 0 2
60880: PUSH
60881: EMPTY
60882: ST_TO_ADDR
// if not array then
60883: LD_VAR 0 1
60887: NOT
60888: IFFALSE 60892
// exit ;
60890: GO 60991
// Randomize ;
60892: CALL_OW 10
// for i = array downto 1 do
60896: LD_ADDR_VAR 0 3
60900: PUSH
60901: DOUBLE
60902: LD_VAR 0 1
60906: INC
60907: ST_TO_ADDR
60908: LD_INT 1
60910: PUSH
60911: FOR_DOWNTO
60912: IFFALSE 60989
// begin index := rand ( 1 , array ) ;
60914: LD_ADDR_VAR 0 4
60918: PUSH
60919: LD_INT 1
60921: PPUSH
60922: LD_VAR 0 1
60926: PPUSH
60927: CALL_OW 12
60931: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60932: LD_ADDR_VAR 0 2
60936: PUSH
60937: LD_VAR 0 2
60941: PPUSH
60942: LD_VAR 0 2
60946: PUSH
60947: LD_INT 1
60949: PLUS
60950: PPUSH
60951: LD_VAR 0 1
60955: PUSH
60956: LD_VAR 0 4
60960: ARRAY
60961: PPUSH
60962: CALL_OW 2
60966: ST_TO_ADDR
// array := Delete ( array , index ) ;
60967: LD_ADDR_VAR 0 1
60971: PUSH
60972: LD_VAR 0 1
60976: PPUSH
60977: LD_VAR 0 4
60981: PPUSH
60982: CALL_OW 3
60986: ST_TO_ADDR
// end ;
60987: GO 60911
60989: POP
60990: POP
// end ;
60991: LD_VAR 0 2
60995: RET
// export function GetBaseMaterials ( base ) ; begin
60996: LD_INT 0
60998: PPUSH
// result := [ 0 , 0 , 0 ] ;
60999: LD_ADDR_VAR 0 2
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// if not base then
61018: LD_VAR 0 1
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61076
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61027: LD_ADDR_VAR 0 2
61031: PUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: LD_INT 1
61039: PPUSH
61040: CALL_OW 275
61044: PUSH
61045: LD_VAR 0 1
61049: PPUSH
61050: LD_INT 2
61052: PPUSH
61053: CALL_OW 275
61057: PUSH
61058: LD_VAR 0 1
61062: PPUSH
61063: LD_INT 3
61065: PPUSH
61066: CALL_OW 275
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// end ;
61076: LD_VAR 0 2
61080: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61081: LD_INT 0
61083: PPUSH
61084: PPUSH
// result := array ;
61085: LD_ADDR_VAR 0 3
61089: PUSH
61090: LD_VAR 0 1
61094: ST_TO_ADDR
// if size >= result then
61095: LD_VAR 0 2
61099: PUSH
61100: LD_VAR 0 3
61104: GREATEREQUAL
61105: IFFALSE 61109
// exit ;
61107: GO 61159
// if size then
61109: LD_VAR 0 2
61113: IFFALSE 61159
// for i := array downto size do
61115: LD_ADDR_VAR 0 4
61119: PUSH
61120: DOUBLE
61121: LD_VAR 0 1
61125: INC
61126: ST_TO_ADDR
61127: LD_VAR 0 2
61131: PUSH
61132: FOR_DOWNTO
61133: IFFALSE 61157
// result := Delete ( result , result ) ;
61135: LD_ADDR_VAR 0 3
61139: PUSH
61140: LD_VAR 0 3
61144: PPUSH
61145: LD_VAR 0 3
61149: PPUSH
61150: CALL_OW 3
61154: ST_TO_ADDR
61155: GO 61132
61157: POP
61158: POP
// end ;
61159: LD_VAR 0 3
61163: RET
// export function ComExit ( unit ) ; var tmp ; begin
61164: LD_INT 0
61166: PPUSH
61167: PPUSH
// if not IsInUnit ( unit ) then
61168: LD_VAR 0 1
61172: PPUSH
61173: CALL_OW 310
61177: NOT
61178: IFFALSE 61182
// exit ;
61180: GO 61242
// tmp := IsInUnit ( unit ) ;
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: LD_VAR 0 1
61191: PPUSH
61192: CALL_OW 310
61196: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61197: LD_VAR 0 3
61201: PPUSH
61202: CALL_OW 247
61206: PUSH
61207: LD_INT 2
61209: EQUAL
61210: IFFALSE 61223
// ComExitVehicle ( unit ) else
61212: LD_VAR 0 1
61216: PPUSH
61217: CALL_OW 121
61221: GO 61232
// ComExitBuilding ( unit ) ;
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 122
// result := tmp ;
61232: LD_ADDR_VAR 0 2
61236: PUSH
61237: LD_VAR 0 3
61241: ST_TO_ADDR
// end ;
61242: LD_VAR 0 2
61246: RET
// export function ComExitAll ( units ) ; var i ; begin
61247: LD_INT 0
61249: PPUSH
61250: PPUSH
// if not units then
61251: LD_VAR 0 1
61255: NOT
61256: IFFALSE 61260
// exit ;
61258: GO 61286
// for i in units do
61260: LD_ADDR_VAR 0 3
61264: PUSH
61265: LD_VAR 0 1
61269: PUSH
61270: FOR_IN
61271: IFFALSE 61284
// ComExit ( i ) ;
61273: LD_VAR 0 3
61277: PPUSH
61278: CALL 61164 0 1
61282: GO 61270
61284: POP
61285: POP
// end ;
61286: LD_VAR 0 2
61290: RET
// export function ResetHc ; begin
61291: LD_INT 0
61293: PPUSH
// InitHc ;
61294: CALL_OW 19
// hc_importance := 0 ;
61298: LD_ADDR_OWVAR 32
61302: PUSH
61303: LD_INT 0
61305: ST_TO_ADDR
// end ;
61306: LD_VAR 0 1
61310: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61311: LD_INT 0
61313: PPUSH
61314: PPUSH
61315: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61316: LD_ADDR_VAR 0 6
61320: PUSH
61321: LD_VAR 0 1
61325: PUSH
61326: LD_VAR 0 3
61330: PLUS
61331: PUSH
61332: LD_INT 2
61334: DIV
61335: ST_TO_ADDR
// if _x < 0 then
61336: LD_VAR 0 6
61340: PUSH
61341: LD_INT 0
61343: LESS
61344: IFFALSE 61361
// _x := _x * - 1 ;
61346: LD_ADDR_VAR 0 6
61350: PUSH
61351: LD_VAR 0 6
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: MUL
61360: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61361: LD_ADDR_VAR 0 7
61365: PUSH
61366: LD_VAR 0 2
61370: PUSH
61371: LD_VAR 0 4
61375: PLUS
61376: PUSH
61377: LD_INT 2
61379: DIV
61380: ST_TO_ADDR
// if _y < 0 then
61381: LD_VAR 0 7
61385: PUSH
61386: LD_INT 0
61388: LESS
61389: IFFALSE 61406
// _y := _y * - 1 ;
61391: LD_ADDR_VAR 0 7
61395: PUSH
61396: LD_VAR 0 7
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: MUL
61405: ST_TO_ADDR
// result := [ _x , _y ] ;
61406: LD_ADDR_VAR 0 5
61410: PUSH
61411: LD_VAR 0 6
61415: PUSH
61416: LD_VAR 0 7
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// end ;
61425: LD_VAR 0 5
61429: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61430: LD_INT 0
61432: PPUSH
61433: PPUSH
61434: PPUSH
61435: PPUSH
// task := GetTaskList ( unit ) ;
61436: LD_ADDR_VAR 0 7
61440: PUSH
61441: LD_VAR 0 1
61445: PPUSH
61446: CALL_OW 437
61450: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61451: LD_VAR 0 7
61455: NOT
61456: PUSH
61457: LD_VAR 0 1
61461: PPUSH
61462: LD_VAR 0 2
61466: PPUSH
61467: CALL_OW 308
61471: NOT
61472: AND
61473: IFFALSE 61477
// exit ;
61475: GO 61595
// if IsInArea ( unit , area ) then
61477: LD_VAR 0 1
61481: PPUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: CALL_OW 308
61491: IFFALSE 61509
// begin ComMoveToArea ( unit , goAway ) ;
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_VAR 0 3
61502: PPUSH
61503: CALL_OW 113
// exit ;
61507: GO 61595
// end ; if task [ 1 ] [ 1 ] <> M then
61509: LD_VAR 0 7
61513: PUSH
61514: LD_INT 1
61516: ARRAY
61517: PUSH
61518: LD_INT 1
61520: ARRAY
61521: PUSH
61522: LD_STRING M
61524: NONEQUAL
61525: IFFALSE 61529
// exit ;
61527: GO 61595
// x := task [ 1 ] [ 2 ] ;
61529: LD_ADDR_VAR 0 5
61533: PUSH
61534: LD_VAR 0 7
61538: PUSH
61539: LD_INT 1
61541: ARRAY
61542: PUSH
61543: LD_INT 2
61545: ARRAY
61546: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61547: LD_ADDR_VAR 0 6
61551: PUSH
61552: LD_VAR 0 7
61556: PUSH
61557: LD_INT 1
61559: ARRAY
61560: PUSH
61561: LD_INT 3
61563: ARRAY
61564: ST_TO_ADDR
// if InArea ( x , y , area ) then
61565: LD_VAR 0 5
61569: PPUSH
61570: LD_VAR 0 6
61574: PPUSH
61575: LD_VAR 0 2
61579: PPUSH
61580: CALL_OW 309
61584: IFFALSE 61595
// ComStop ( unit ) ;
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 141
// end ;
61595: LD_VAR 0 4
61599: RET
// export function Abs ( value ) ; begin
61600: LD_INT 0
61602: PPUSH
// result := value ;
61603: LD_ADDR_VAR 0 2
61607: PUSH
61608: LD_VAR 0 1
61612: ST_TO_ADDR
// if value < 0 then
61613: LD_VAR 0 1
61617: PUSH
61618: LD_INT 0
61620: LESS
61621: IFFALSE 61638
// result := value * - 1 ;
61623: LD_ADDR_VAR 0 2
61627: PUSH
61628: LD_VAR 0 1
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: MUL
61637: ST_TO_ADDR
// end ;
61638: LD_VAR 0 2
61642: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61643: LD_INT 0
61645: PPUSH
61646: PPUSH
61647: PPUSH
61648: PPUSH
61649: PPUSH
61650: PPUSH
61651: PPUSH
61652: PPUSH
// if not unit or not building then
61653: LD_VAR 0 1
61657: NOT
61658: PUSH
61659: LD_VAR 0 2
61663: NOT
61664: OR
61665: IFFALSE 61669
// exit ;
61667: GO 61895
// x := GetX ( building ) ;
61669: LD_ADDR_VAR 0 4
61673: PUSH
61674: LD_VAR 0 2
61678: PPUSH
61679: CALL_OW 250
61683: ST_TO_ADDR
// y := GetY ( building ) ;
61684: LD_ADDR_VAR 0 6
61688: PUSH
61689: LD_VAR 0 2
61693: PPUSH
61694: CALL_OW 251
61698: ST_TO_ADDR
// d := GetDir ( building ) ;
61699: LD_ADDR_VAR 0 8
61703: PUSH
61704: LD_VAR 0 2
61708: PPUSH
61709: CALL_OW 254
61713: ST_TO_ADDR
// r := 4 ;
61714: LD_ADDR_VAR 0 9
61718: PUSH
61719: LD_INT 4
61721: ST_TO_ADDR
// for i := 1 to 5 do
61722: LD_ADDR_VAR 0 10
61726: PUSH
61727: DOUBLE
61728: LD_INT 1
61730: DEC
61731: ST_TO_ADDR
61732: LD_INT 5
61734: PUSH
61735: FOR_TO
61736: IFFALSE 61893
// begin _x := ShiftX ( x , d , r + i ) ;
61738: LD_ADDR_VAR 0 5
61742: PUSH
61743: LD_VAR 0 4
61747: PPUSH
61748: LD_VAR 0 8
61752: PPUSH
61753: LD_VAR 0 9
61757: PUSH
61758: LD_VAR 0 10
61762: PLUS
61763: PPUSH
61764: CALL_OW 272
61768: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61769: LD_ADDR_VAR 0 7
61773: PUSH
61774: LD_VAR 0 6
61778: PPUSH
61779: LD_VAR 0 8
61783: PPUSH
61784: LD_VAR 0 9
61788: PUSH
61789: LD_VAR 0 10
61793: PLUS
61794: PPUSH
61795: CALL_OW 273
61799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61800: LD_VAR 0 5
61804: PPUSH
61805: LD_VAR 0 7
61809: PPUSH
61810: CALL_OW 488
61814: PUSH
61815: LD_VAR 0 5
61819: PPUSH
61820: LD_VAR 0 7
61824: PPUSH
61825: CALL_OW 428
61829: PPUSH
61830: CALL_OW 247
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: IN
61845: NOT
61846: AND
61847: IFFALSE 61891
// begin ComMoveXY ( unit , _x , _y ) ;
61849: LD_VAR 0 1
61853: PPUSH
61854: LD_VAR 0 5
61858: PPUSH
61859: LD_VAR 0 7
61863: PPUSH
61864: CALL_OW 111
// result := [ _x , _y ] ;
61868: LD_ADDR_VAR 0 3
61872: PUSH
61873: LD_VAR 0 5
61877: PUSH
61878: LD_VAR 0 7
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: ST_TO_ADDR
// exit ;
61887: POP
61888: POP
61889: GO 61895
// end ; end ;
61891: GO 61735
61893: POP
61894: POP
// end ;
61895: LD_VAR 0 3
61899: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
61904: PPUSH
// result := 0 ;
61905: LD_ADDR_VAR 0 3
61909: PUSH
61910: LD_INT 0
61912: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 0
61920: LESS
61921: PUSH
61922: LD_VAR 0 1
61926: PUSH
61927: LD_INT 8
61929: GREATER
61930: OR
61931: PUSH
61932: LD_VAR 0 2
61936: PUSH
61937: LD_INT 0
61939: LESS
61940: OR
61941: PUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_INT 8
61949: GREATER
61950: OR
61951: IFFALSE 61955
// exit ;
61953: GO 62030
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61955: LD_ADDR_VAR 0 4
61959: PUSH
61960: LD_INT 22
61962: PUSH
61963: LD_VAR 0 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PPUSH
61972: CALL_OW 69
61976: PUSH
61977: FOR_IN
61978: IFFALSE 62028
// begin un := UnitShoot ( i ) ;
61980: LD_ADDR_VAR 0 5
61984: PUSH
61985: LD_VAR 0 4
61989: PPUSH
61990: CALL_OW 504
61994: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61995: LD_VAR 0 5
61999: PPUSH
62000: CALL_OW 255
62004: PUSH
62005: LD_VAR 0 1
62009: EQUAL
62010: IFFALSE 62026
// begin result := un ;
62012: LD_ADDR_VAR 0 3
62016: PUSH
62017: LD_VAR 0 5
62021: ST_TO_ADDR
// exit ;
62022: POP
62023: POP
62024: GO 62030
// end ; end ;
62026: GO 61977
62028: POP
62029: POP
// end ;
62030: LD_VAR 0 3
62034: RET
// export function GetCargoBay ( units ) ; begin
62035: LD_INT 0
62037: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62038: LD_ADDR_VAR 0 2
62042: PUSH
62043: LD_VAR 0 1
62047: PPUSH
62048: LD_INT 2
62050: PUSH
62051: LD_INT 34
62053: PUSH
62054: LD_INT 12
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 34
62063: PUSH
62064: LD_INT 51
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 34
62073: PUSH
62074: LD_INT 32
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 34
62083: PUSH
62084: LD_EXP 81
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: PPUSH
62100: CALL_OW 72
62104: ST_TO_ADDR
// end ;
62105: LD_VAR 0 2
62109: RET
// export function Negate ( value ) ; begin
62110: LD_INT 0
62112: PPUSH
// result := not value ;
62113: LD_ADDR_VAR 0 2
62117: PUSH
62118: LD_VAR 0 1
62122: NOT
62123: ST_TO_ADDR
// end ;
62124: LD_VAR 0 2
62128: RET
// export function Inc ( value ) ; begin
62129: LD_INT 0
62131: PPUSH
// result := value + 1 ;
62132: LD_ADDR_VAR 0 2
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 1
62144: PLUS
62145: ST_TO_ADDR
// end ;
62146: LD_VAR 0 2
62150: RET
// export function Dec ( value ) ; begin
62151: LD_INT 0
62153: PPUSH
// result := value - 1 ;
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_INT 1
62166: MINUS
62167: ST_TO_ADDR
// end ;
62168: LD_VAR 0 2
62172: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
62177: PPUSH
62178: PPUSH
62179: PPUSH
62180: PPUSH
62181: PPUSH
62182: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62183: LD_VAR 0 1
62187: PPUSH
62188: LD_VAR 0 2
62192: PPUSH
62193: CALL_OW 488
62197: NOT
62198: PUSH
62199: LD_VAR 0 3
62203: PPUSH
62204: LD_VAR 0 4
62208: PPUSH
62209: CALL_OW 488
62213: NOT
62214: OR
62215: IFFALSE 62228
// begin result := - 1 ;
62217: LD_ADDR_VAR 0 5
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: ST_TO_ADDR
// exit ;
62226: GO 62463
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62228: LD_ADDR_VAR 0 12
62232: PUSH
62233: LD_VAR 0 1
62237: PPUSH
62238: LD_VAR 0 2
62242: PPUSH
62243: LD_VAR 0 3
62247: PPUSH
62248: LD_VAR 0 4
62252: PPUSH
62253: CALL 61311 0 4
62257: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62258: LD_ADDR_VAR 0 11
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: LD_VAR 0 2
62272: PPUSH
62273: LD_VAR 0 12
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: PPUSH
62282: LD_VAR 0 12
62286: PUSH
62287: LD_INT 2
62289: ARRAY
62290: PPUSH
62291: CALL_OW 298
62295: ST_TO_ADDR
// distance := 9999 ;
62296: LD_ADDR_VAR 0 10
62300: PUSH
62301: LD_INT 9999
62303: ST_TO_ADDR
// for i := 0 to 5 do
62304: LD_ADDR_VAR 0 6
62308: PUSH
62309: DOUBLE
62310: LD_INT 0
62312: DEC
62313: ST_TO_ADDR
62314: LD_INT 5
62316: PUSH
62317: FOR_TO
62318: IFFALSE 62461
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62320: LD_ADDR_VAR 0 7
62324: PUSH
62325: LD_VAR 0 1
62329: PPUSH
62330: LD_VAR 0 6
62334: PPUSH
62335: LD_VAR 0 11
62339: PPUSH
62340: CALL_OW 272
62344: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62345: LD_ADDR_VAR 0 8
62349: PUSH
62350: LD_VAR 0 2
62354: PPUSH
62355: LD_VAR 0 6
62359: PPUSH
62360: LD_VAR 0 11
62364: PPUSH
62365: CALL_OW 273
62369: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62370: LD_VAR 0 7
62374: PPUSH
62375: LD_VAR 0 8
62379: PPUSH
62380: CALL_OW 488
62384: NOT
62385: IFFALSE 62389
// continue ;
62387: GO 62317
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62389: LD_ADDR_VAR 0 9
62393: PUSH
62394: LD_VAR 0 12
62398: PUSH
62399: LD_INT 1
62401: ARRAY
62402: PPUSH
62403: LD_VAR 0 12
62407: PUSH
62408: LD_INT 2
62410: ARRAY
62411: PPUSH
62412: LD_VAR 0 7
62416: PPUSH
62417: LD_VAR 0 8
62421: PPUSH
62422: CALL_OW 298
62426: ST_TO_ADDR
// if tmp < distance then
62427: LD_VAR 0 9
62431: PUSH
62432: LD_VAR 0 10
62436: LESS
62437: IFFALSE 62459
// begin result := i ;
62439: LD_ADDR_VAR 0 5
62443: PUSH
62444: LD_VAR 0 6
62448: ST_TO_ADDR
// distance := tmp ;
62449: LD_ADDR_VAR 0 10
62453: PUSH
62454: LD_VAR 0 9
62458: ST_TO_ADDR
// end ; end ;
62459: GO 62317
62461: POP
62462: POP
// end ;
62463: LD_VAR 0 5
62467: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62468: LD_INT 0
62470: PPUSH
62471: PPUSH
// if not driver or not IsInUnit ( driver ) then
62472: LD_VAR 0 1
62476: NOT
62477: PUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 310
62487: NOT
62488: OR
62489: IFFALSE 62493
// exit ;
62491: GO 62583
// vehicle := IsInUnit ( driver ) ;
62493: LD_ADDR_VAR 0 3
62497: PUSH
62498: LD_VAR 0 1
62502: PPUSH
62503: CALL_OW 310
62507: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62508: LD_VAR 0 1
62512: PPUSH
62513: LD_STRING \
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: PUSH
62543: LD_STRING E
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_VAR 0 3
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PPUSH
62579: CALL_OW 446
// end ;
62583: LD_VAR 0 2
62587: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62588: LD_INT 0
62590: PPUSH
62591: PPUSH
// if not driver or not IsInUnit ( driver ) then
62592: LD_VAR 0 1
62596: NOT
62597: PUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: CALL_OW 310
62607: NOT
62608: OR
62609: IFFALSE 62613
// exit ;
62611: GO 62703
// vehicle := IsInUnit ( driver ) ;
62613: LD_ADDR_VAR 0 3
62617: PUSH
62618: LD_VAR 0 1
62622: PPUSH
62623: CALL_OW 310
62627: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62628: LD_VAR 0 1
62632: PPUSH
62633: LD_STRING \
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: PUSH
62663: LD_STRING E
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_VAR 0 3
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PPUSH
62699: CALL_OW 447
// end ;
62703: LD_VAR 0 2
62707: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62708: LD_INT 0
62710: PPUSH
62711: PPUSH
62712: PPUSH
// tmp := [ ] ;
62713: LD_ADDR_VAR 0 5
62717: PUSH
62718: EMPTY
62719: ST_TO_ADDR
// for i in units do
62720: LD_ADDR_VAR 0 4
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: FOR_IN
62731: IFFALSE 62769
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62733: LD_ADDR_VAR 0 5
62737: PUSH
62738: LD_VAR 0 5
62742: PPUSH
62743: LD_VAR 0 5
62747: PUSH
62748: LD_INT 1
62750: PLUS
62751: PPUSH
62752: LD_VAR 0 4
62756: PPUSH
62757: CALL_OW 256
62761: PPUSH
62762: CALL_OW 2
62766: ST_TO_ADDR
62767: GO 62730
62769: POP
62770: POP
// if not tmp then
62771: LD_VAR 0 5
62775: NOT
62776: IFFALSE 62780
// exit ;
62778: GO 62828
// if asc then
62780: LD_VAR 0 2
62784: IFFALSE 62808
// result := SortListByListAsc ( units , tmp ) else
62786: LD_ADDR_VAR 0 3
62790: PUSH
62791: LD_VAR 0 1
62795: PPUSH
62796: LD_VAR 0 5
62800: PPUSH
62801: CALL_OW 76
62805: ST_TO_ADDR
62806: GO 62828
// result := SortListByListDesc ( units , tmp ) ;
62808: LD_ADDR_VAR 0 3
62812: PUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: LD_VAR 0 5
62822: PPUSH
62823: CALL_OW 77
62827: ST_TO_ADDR
// end ;
62828: LD_VAR 0 3
62832: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62833: LD_INT 0
62835: PPUSH
62836: PPUSH
// task := GetTaskList ( mech ) ;
62837: LD_ADDR_VAR 0 4
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 437
62851: ST_TO_ADDR
// if not task then
62852: LD_VAR 0 4
62856: NOT
62857: IFFALSE 62861
// exit ;
62859: GO 62903
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62861: LD_ADDR_VAR 0 3
62865: PUSH
62866: LD_VAR 0 4
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: PUSH
62879: LD_STRING r
62881: EQUAL
62882: PUSH
62883: LD_VAR 0 4
62887: PUSH
62888: LD_INT 1
62890: ARRAY
62891: PUSH
62892: LD_INT 4
62894: ARRAY
62895: PUSH
62896: LD_VAR 0 2
62900: EQUAL
62901: AND
62902: ST_TO_ADDR
// end ;
62903: LD_VAR 0 3
62907: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62908: LD_INT 0
62910: PPUSH
// SetDir ( unit , d ) ;
62911: LD_VAR 0 1
62915: PPUSH
62916: LD_VAR 0 4
62920: PPUSH
62921: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62925: LD_VAR 0 1
62929: PPUSH
62930: LD_VAR 0 2
62934: PPUSH
62935: LD_VAR 0 3
62939: PPUSH
62940: LD_VAR 0 5
62944: PPUSH
62945: CALL_OW 48
// end ;
62949: LD_VAR 0 6
62953: RET
// export function ToNaturalNumber ( number ) ; begin
62954: LD_INT 0
62956: PPUSH
// result := number div 1 ;
62957: LD_ADDR_VAR 0 2
62961: PUSH
62962: LD_VAR 0 1
62966: PUSH
62967: LD_INT 1
62969: DIV
62970: ST_TO_ADDR
// if number < 0 then
62971: LD_VAR 0 1
62975: PUSH
62976: LD_INT 0
62978: LESS
62979: IFFALSE 62989
// result := 0 ;
62981: LD_ADDR_VAR 0 2
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// end ;
62989: LD_VAR 0 2
62993: RET
// export function SortByClass ( units , class ) ; var un ; begin
62994: LD_INT 0
62996: PPUSH
62997: PPUSH
// if not units or not class then
62998: LD_VAR 0 1
63002: NOT
63003: PUSH
63004: LD_VAR 0 2
63008: NOT
63009: OR
63010: IFFALSE 63014
// exit ;
63012: GO 63109
// result := [ ] ;
63014: LD_ADDR_VAR 0 3
63018: PUSH
63019: EMPTY
63020: ST_TO_ADDR
// for un in units do
63021: LD_ADDR_VAR 0 4
63025: PUSH
63026: LD_VAR 0 1
63030: PUSH
63031: FOR_IN
63032: IFFALSE 63107
// if GetClass ( un ) = class then
63034: LD_VAR 0 4
63038: PPUSH
63039: CALL_OW 257
63043: PUSH
63044: LD_VAR 0 2
63048: EQUAL
63049: IFFALSE 63076
// result := Insert ( result , 1 , un ) else
63051: LD_ADDR_VAR 0 3
63055: PUSH
63056: LD_VAR 0 3
63060: PPUSH
63061: LD_INT 1
63063: PPUSH
63064: LD_VAR 0 4
63068: PPUSH
63069: CALL_OW 2
63073: ST_TO_ADDR
63074: GO 63105
// result := Replace ( result , result + 1 , un ) ;
63076: LD_ADDR_VAR 0 3
63080: PUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: LD_VAR 0 3
63090: PUSH
63091: LD_INT 1
63093: PLUS
63094: PPUSH
63095: LD_VAR 0 4
63099: PPUSH
63100: CALL_OW 1
63104: ST_TO_ADDR
63105: GO 63031
63107: POP
63108: POP
// end ;
63109: LD_VAR 0 3
63113: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
63119: PPUSH
63120: PPUSH
63121: PPUSH
63122: PPUSH
// result := [ ] ;
63123: LD_ADDR_VAR 0 4
63127: PUSH
63128: EMPTY
63129: ST_TO_ADDR
// if x - r < 0 then
63130: LD_VAR 0 1
63134: PUSH
63135: LD_VAR 0 3
63139: MINUS
63140: PUSH
63141: LD_INT 0
63143: LESS
63144: IFFALSE 63156
// min_x := 0 else
63146: LD_ADDR_VAR 0 8
63150: PUSH
63151: LD_INT 0
63153: ST_TO_ADDR
63154: GO 63172
// min_x := x - r ;
63156: LD_ADDR_VAR 0 8
63160: PUSH
63161: LD_VAR 0 1
63165: PUSH
63166: LD_VAR 0 3
63170: MINUS
63171: ST_TO_ADDR
// if y - r < 0 then
63172: LD_VAR 0 2
63176: PUSH
63177: LD_VAR 0 3
63181: MINUS
63182: PUSH
63183: LD_INT 0
63185: LESS
63186: IFFALSE 63198
// min_y := 0 else
63188: LD_ADDR_VAR 0 7
63192: PUSH
63193: LD_INT 0
63195: ST_TO_ADDR
63196: GO 63214
// min_y := y - r ;
63198: LD_ADDR_VAR 0 7
63202: PUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_VAR 0 3
63212: MINUS
63213: ST_TO_ADDR
// max_x := x + r ;
63214: LD_ADDR_VAR 0 9
63218: PUSH
63219: LD_VAR 0 1
63223: PUSH
63224: LD_VAR 0 3
63228: PLUS
63229: ST_TO_ADDR
// max_y := y + r ;
63230: LD_ADDR_VAR 0 10
63234: PUSH
63235: LD_VAR 0 2
63239: PUSH
63240: LD_VAR 0 3
63244: PLUS
63245: ST_TO_ADDR
// for _x = min_x to max_x do
63246: LD_ADDR_VAR 0 5
63250: PUSH
63251: DOUBLE
63252: LD_VAR 0 8
63256: DEC
63257: ST_TO_ADDR
63258: LD_VAR 0 9
63262: PUSH
63263: FOR_TO
63264: IFFALSE 63365
// for _y = min_y to max_y do
63266: LD_ADDR_VAR 0 6
63270: PUSH
63271: DOUBLE
63272: LD_VAR 0 7
63276: DEC
63277: ST_TO_ADDR
63278: LD_VAR 0 10
63282: PUSH
63283: FOR_TO
63284: IFFALSE 63361
// begin if not ValidHex ( _x , _y ) then
63286: LD_VAR 0 5
63290: PPUSH
63291: LD_VAR 0 6
63295: PPUSH
63296: CALL_OW 488
63300: NOT
63301: IFFALSE 63305
// continue ;
63303: GO 63283
// if GetResourceTypeXY ( _x , _y ) then
63305: LD_VAR 0 5
63309: PPUSH
63310: LD_VAR 0 6
63314: PPUSH
63315: CALL_OW 283
63319: IFFALSE 63359
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63321: LD_ADDR_VAR 0 4
63325: PUSH
63326: LD_VAR 0 4
63330: PPUSH
63331: LD_VAR 0 4
63335: PUSH
63336: LD_INT 1
63338: PLUS
63339: PPUSH
63340: LD_VAR 0 5
63344: PUSH
63345: LD_VAR 0 6
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PPUSH
63354: CALL_OW 1
63358: ST_TO_ADDR
// end ;
63359: GO 63283
63361: POP
63362: POP
63363: GO 63263
63365: POP
63366: POP
// end ;
63367: LD_VAR 0 4
63371: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63372: LD_INT 0
63374: PPUSH
63375: PPUSH
63376: PPUSH
63377: PPUSH
63378: PPUSH
63379: PPUSH
63380: PPUSH
63381: PPUSH
// if not units then
63382: LD_VAR 0 1
63386: NOT
63387: IFFALSE 63391
// exit ;
63389: GO 63917
// result := UnitFilter ( units , [ f_ok ] ) ;
63391: LD_ADDR_VAR 0 3
63395: PUSH
63396: LD_VAR 0 1
63400: PPUSH
63401: LD_INT 50
63403: PUSH
63404: EMPTY
63405: LIST
63406: PPUSH
63407: CALL_OW 72
63411: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63412: LD_ADDR_VAR 0 8
63416: PUSH
63417: LD_VAR 0 1
63421: PUSH
63422: LD_INT 1
63424: ARRAY
63425: PPUSH
63426: CALL_OW 255
63430: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63431: LD_ADDR_VAR 0 10
63435: PUSH
63436: LD_INT 29
63438: PUSH
63439: LD_EXP 84
63443: PUSH
63444: LD_INT 49
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// if not result then
63452: LD_VAR 0 3
63456: NOT
63457: IFFALSE 63461
// exit ;
63459: GO 63917
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63461: LD_ADDR_VAR 0 5
63465: PUSH
63466: LD_INT 81
63468: PUSH
63469: LD_VAR 0 8
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PPUSH
63478: CALL_OW 69
63482: ST_TO_ADDR
// for i in result do
63483: LD_ADDR_VAR 0 4
63487: PUSH
63488: LD_VAR 0 3
63492: PUSH
63493: FOR_IN
63494: IFFALSE 63915
// begin tag := GetTag ( i ) + 1 ;
63496: LD_ADDR_VAR 0 9
63500: PUSH
63501: LD_VAR 0 4
63505: PPUSH
63506: CALL_OW 110
63510: PUSH
63511: LD_INT 1
63513: PLUS
63514: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63515: LD_ADDR_VAR 0 7
63519: PUSH
63520: LD_VAR 0 4
63524: PPUSH
63525: CALL_OW 250
63529: PPUSH
63530: LD_VAR 0 4
63534: PPUSH
63535: CALL_OW 251
63539: PPUSH
63540: LD_INT 6
63542: PPUSH
63543: CALL 63114 0 3
63547: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63548: LD_VAR 0 4
63552: PPUSH
63553: CALL_OW 247
63557: PUSH
63558: LD_INT 2
63560: EQUAL
63561: PUSH
63562: LD_VAR 0 7
63566: AND
63567: PUSH
63568: LD_VAR 0 4
63572: PPUSH
63573: CALL_OW 264
63577: PUSH
63578: LD_VAR 0 10
63582: IN
63583: NOT
63584: AND
63585: IFFALSE 63624
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63587: LD_VAR 0 4
63591: PPUSH
63592: LD_VAR 0 7
63596: PUSH
63597: LD_INT 1
63599: ARRAY
63600: PUSH
63601: LD_INT 1
63603: ARRAY
63604: PPUSH
63605: LD_VAR 0 7
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: PUSH
63614: LD_INT 2
63616: ARRAY
63617: PPUSH
63618: CALL_OW 116
63622: GO 63913
// if path > tag then
63624: LD_VAR 0 2
63628: PUSH
63629: LD_VAR 0 9
63633: GREATER
63634: IFFALSE 63842
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63636: LD_ADDR_VAR 0 6
63640: PUSH
63641: LD_VAR 0 5
63645: PPUSH
63646: LD_INT 91
63648: PUSH
63649: LD_VAR 0 4
63653: PUSH
63654: LD_INT 8
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: PPUSH
63662: CALL_OW 72
63666: ST_TO_ADDR
// if nearEnemy then
63667: LD_VAR 0 6
63671: IFFALSE 63740
// begin if GetWeapon ( i ) = ru_time_lapser then
63673: LD_VAR 0 4
63677: PPUSH
63678: CALL_OW 264
63682: PUSH
63683: LD_INT 49
63685: EQUAL
63686: IFFALSE 63714
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63688: LD_VAR 0 4
63692: PPUSH
63693: LD_VAR 0 6
63697: PPUSH
63698: LD_VAR 0 4
63702: PPUSH
63703: CALL_OW 74
63707: PPUSH
63708: CALL_OW 112
63712: GO 63738
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63714: LD_VAR 0 4
63718: PPUSH
63719: LD_VAR 0 6
63723: PPUSH
63724: LD_VAR 0 4
63728: PPUSH
63729: CALL_OW 74
63733: PPUSH
63734: CALL_OW 115
// end else
63738: GO 63840
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63740: LD_VAR 0 4
63744: PPUSH
63745: LD_VAR 0 2
63749: PUSH
63750: LD_VAR 0 9
63754: ARRAY
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PPUSH
63760: LD_VAR 0 2
63764: PUSH
63765: LD_VAR 0 9
63769: ARRAY
63770: PUSH
63771: LD_INT 2
63773: ARRAY
63774: PPUSH
63775: CALL_OW 297
63779: PUSH
63780: LD_INT 6
63782: GREATER
63783: IFFALSE 63826
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63785: LD_VAR 0 4
63789: PPUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_VAR 0 9
63799: ARRAY
63800: PUSH
63801: LD_INT 1
63803: ARRAY
63804: PPUSH
63805: LD_VAR 0 2
63809: PUSH
63810: LD_VAR 0 9
63814: ARRAY
63815: PUSH
63816: LD_INT 2
63818: ARRAY
63819: PPUSH
63820: CALL_OW 114
63824: GO 63840
// SetTag ( i , tag ) ;
63826: LD_VAR 0 4
63830: PPUSH
63831: LD_VAR 0 9
63835: PPUSH
63836: CALL_OW 109
// end else
63840: GO 63913
// if enemy then
63842: LD_VAR 0 5
63846: IFFALSE 63913
// begin if GetWeapon ( i ) = ru_time_lapser then
63848: LD_VAR 0 4
63852: PPUSH
63853: CALL_OW 264
63857: PUSH
63858: LD_INT 49
63860: EQUAL
63861: IFFALSE 63889
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63863: LD_VAR 0 4
63867: PPUSH
63868: LD_VAR 0 5
63872: PPUSH
63873: LD_VAR 0 4
63877: PPUSH
63878: CALL_OW 74
63882: PPUSH
63883: CALL_OW 112
63887: GO 63913
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63889: LD_VAR 0 4
63893: PPUSH
63894: LD_VAR 0 5
63898: PPUSH
63899: LD_VAR 0 4
63903: PPUSH
63904: CALL_OW 74
63908: PPUSH
63909: CALL_OW 115
// end ; end ;
63913: GO 63493
63915: POP
63916: POP
// end ;
63917: LD_VAR 0 3
63921: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63922: LD_INT 0
63924: PPUSH
63925: PPUSH
63926: PPUSH
// if not unit or IsInUnit ( unit ) then
63927: LD_VAR 0 1
63931: NOT
63932: PUSH
63933: LD_VAR 0 1
63937: PPUSH
63938: CALL_OW 310
63942: OR
63943: IFFALSE 63947
// exit ;
63945: GO 64038
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63947: LD_ADDR_VAR 0 4
63951: PUSH
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 250
63961: PPUSH
63962: LD_VAR 0 2
63966: PPUSH
63967: LD_INT 1
63969: PPUSH
63970: CALL_OW 272
63974: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63975: LD_ADDR_VAR 0 5
63979: PUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 251
63989: PPUSH
63990: LD_VAR 0 2
63994: PPUSH
63995: LD_INT 1
63997: PPUSH
63998: CALL_OW 273
64002: ST_TO_ADDR
// if ValidHex ( x , y ) then
64003: LD_VAR 0 4
64007: PPUSH
64008: LD_VAR 0 5
64012: PPUSH
64013: CALL_OW 488
64017: IFFALSE 64038
// ComTurnXY ( unit , x , y ) ;
64019: LD_VAR 0 1
64023: PPUSH
64024: LD_VAR 0 4
64028: PPUSH
64029: LD_VAR 0 5
64033: PPUSH
64034: CALL_OW 118
// end ;
64038: LD_VAR 0 3
64042: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64043: LD_INT 0
64045: PPUSH
64046: PPUSH
// result := false ;
64047: LD_ADDR_VAR 0 3
64051: PUSH
64052: LD_INT 0
64054: ST_TO_ADDR
// if not units then
64055: LD_VAR 0 2
64059: NOT
64060: IFFALSE 64064
// exit ;
64062: GO 64109
// for i in units do
64064: LD_ADDR_VAR 0 4
64068: PUSH
64069: LD_VAR 0 2
64073: PUSH
64074: FOR_IN
64075: IFFALSE 64107
// if See ( side , i ) then
64077: LD_VAR 0 1
64081: PPUSH
64082: LD_VAR 0 4
64086: PPUSH
64087: CALL_OW 292
64091: IFFALSE 64105
// begin result := true ;
64093: LD_ADDR_VAR 0 3
64097: PUSH
64098: LD_INT 1
64100: ST_TO_ADDR
// exit ;
64101: POP
64102: POP
64103: GO 64109
// end ;
64105: GO 64074
64107: POP
64108: POP
// end ;
64109: LD_VAR 0 3
64113: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64114: LD_INT 0
64116: PPUSH
64117: PPUSH
64118: PPUSH
64119: PPUSH
// if not unit or not points then
64120: LD_VAR 0 1
64124: NOT
64125: PUSH
64126: LD_VAR 0 2
64130: NOT
64131: OR
64132: IFFALSE 64136
// exit ;
64134: GO 64226
// dist := 99999 ;
64136: LD_ADDR_VAR 0 5
64140: PUSH
64141: LD_INT 99999
64143: ST_TO_ADDR
// for i in points do
64144: LD_ADDR_VAR 0 4
64148: PUSH
64149: LD_VAR 0 2
64153: PUSH
64154: FOR_IN
64155: IFFALSE 64224
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64157: LD_ADDR_VAR 0 6
64161: PUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_VAR 0 4
64171: PUSH
64172: LD_INT 1
64174: ARRAY
64175: PPUSH
64176: LD_VAR 0 4
64180: PUSH
64181: LD_INT 2
64183: ARRAY
64184: PPUSH
64185: CALL_OW 297
64189: ST_TO_ADDR
// if tmpDist < dist then
64190: LD_VAR 0 6
64194: PUSH
64195: LD_VAR 0 5
64199: LESS
64200: IFFALSE 64222
// begin result := i ;
64202: LD_ADDR_VAR 0 3
64206: PUSH
64207: LD_VAR 0 4
64211: ST_TO_ADDR
// dist := tmpDist ;
64212: LD_ADDR_VAR 0 5
64216: PUSH
64217: LD_VAR 0 6
64221: ST_TO_ADDR
// end ; end ;
64222: GO 64154
64224: POP
64225: POP
// end ;
64226: LD_VAR 0 3
64230: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64231: LD_INT 0
64233: PPUSH
// uc_side := side ;
64234: LD_ADDR_OWVAR 20
64238: PUSH
64239: LD_VAR 0 1
64243: ST_TO_ADDR
// uc_nation := 3 ;
64244: LD_ADDR_OWVAR 21
64248: PUSH
64249: LD_INT 3
64251: ST_TO_ADDR
// vc_chassis := 25 ;
64252: LD_ADDR_OWVAR 37
64256: PUSH
64257: LD_INT 25
64259: ST_TO_ADDR
// vc_engine := engine_siberite ;
64260: LD_ADDR_OWVAR 39
64264: PUSH
64265: LD_INT 3
64267: ST_TO_ADDR
// vc_control := control_computer ;
64268: LD_ADDR_OWVAR 38
64272: PUSH
64273: LD_INT 3
64275: ST_TO_ADDR
// vc_weapon := 59 ;
64276: LD_ADDR_OWVAR 40
64280: PUSH
64281: LD_INT 59
64283: ST_TO_ADDR
// result := CreateVehicle ;
64284: LD_ADDR_VAR 0 5
64288: PUSH
64289: CALL_OW 45
64293: ST_TO_ADDR
// SetDir ( result , d ) ;
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_VAR 0 4
64303: PPUSH
64304: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64308: LD_VAR 0 5
64312: PPUSH
64313: LD_VAR 0 2
64317: PPUSH
64318: LD_VAR 0 3
64322: PPUSH
64323: LD_INT 0
64325: PPUSH
64326: CALL_OW 48
// end ;
64330: LD_VAR 0 5
64334: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64335: LD_INT 0
64337: PPUSH
64338: PPUSH
64339: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64340: LD_ADDR_VAR 0 2
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64363: LD_VAR 0 1
64367: NOT
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 264
64378: PUSH
64379: LD_INT 12
64381: PUSH
64382: LD_INT 51
64384: PUSH
64385: LD_INT 32
64387: PUSH
64388: LD_EXP 81
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: IN
64399: NOT
64400: OR
64401: IFFALSE 64405
// exit ;
64403: GO 64503
// for i := 1 to 3 do
64405: LD_ADDR_VAR 0 3
64409: PUSH
64410: DOUBLE
64411: LD_INT 1
64413: DEC
64414: ST_TO_ADDR
64415: LD_INT 3
64417: PUSH
64418: FOR_TO
64419: IFFALSE 64501
// begin tmp := GetCargo ( cargo , i ) ;
64421: LD_ADDR_VAR 0 4
64425: PUSH
64426: LD_VAR 0 1
64430: PPUSH
64431: LD_VAR 0 3
64435: PPUSH
64436: CALL_OW 289
64440: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: LD_VAR 0 2
64450: PPUSH
64451: LD_VAR 0 3
64455: PPUSH
64456: LD_VAR 0 4
64460: PPUSH
64461: CALL_OW 1
64465: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64466: LD_ADDR_VAR 0 2
64470: PUSH
64471: LD_VAR 0 2
64475: PPUSH
64476: LD_INT 4
64478: PPUSH
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 4
64486: ARRAY
64487: PUSH
64488: LD_VAR 0 4
64492: PLUS
64493: PPUSH
64494: CALL_OW 1
64498: ST_TO_ADDR
// end ;
64499: GO 64418
64501: POP
64502: POP
// end ;
64503: LD_VAR 0 2
64507: RET
// export function Length ( array ) ; begin
64508: LD_INT 0
64510: PPUSH
// result := array + 0 ;
64511: LD_ADDR_VAR 0 2
64515: PUSH
64516: LD_VAR 0 1
64520: PUSH
64521: LD_INT 0
64523: PLUS
64524: ST_TO_ADDR
// end ;
64525: LD_VAR 0 2
64529: RET
// export function PrepareArray ( array ) ; begin
64530: LD_INT 0
64532: PPUSH
// result := array diff 0 ;
64533: LD_ADDR_VAR 0 2
64537: PUSH
64538: LD_VAR 0 1
64542: PUSH
64543: LD_INT 0
64545: DIFF
64546: ST_TO_ADDR
// if not result [ 1 ] then
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 1
64554: ARRAY
64555: NOT
64556: IFFALSE 64576
// result := Delete ( result , 1 ) ;
64558: LD_ADDR_VAR 0 2
64562: PUSH
64563: LD_VAR 0 2
64567: PPUSH
64568: LD_INT 1
64570: PPUSH
64571: CALL_OW 3
64575: ST_TO_ADDR
// end ; end_of_file
64576: LD_VAR 0 2
64580: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
64581: LD_INT 0
64583: PPUSH
// ar_miner := 81 ;
64584: LD_ADDR_EXP 87
64588: PUSH
64589: LD_INT 81
64591: ST_TO_ADDR
// ar_crane := 88 ;
64592: LD_ADDR_EXP 86
64596: PUSH
64597: LD_INT 88
64599: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64600: LD_ADDR_EXP 81
64604: PUSH
64605: LD_INT 89
64607: ST_TO_ADDR
// us_hack := 99 ;
64608: LD_ADDR_EXP 82
64612: PUSH
64613: LD_INT 99
64615: ST_TO_ADDR
// us_artillery := 97 ;
64616: LD_ADDR_EXP 83
64620: PUSH
64621: LD_INT 97
64623: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64624: LD_ADDR_EXP 84
64628: PUSH
64629: LD_INT 91
64631: ST_TO_ADDR
// ar_mortar := 92 ;
64632: LD_ADDR_EXP 85
64636: PUSH
64637: LD_INT 92
64639: ST_TO_ADDR
// ru_flamethrower := 93 ;
64640: LD_ADDR_EXP 88
64644: PUSH
64645: LD_INT 93
64647: ST_TO_ADDR
// ru_radar := 98 ;
64648: LD_ADDR_EXP 80
64652: PUSH
64653: LD_INT 98
64655: ST_TO_ADDR
// tech_Artillery := 80 ;
64656: LD_ADDR_EXP 89
64660: PUSH
64661: LD_INT 80
64663: ST_TO_ADDR
// tech_RadMat := 81 ;
64664: LD_ADDR_EXP 90
64668: PUSH
64669: LD_INT 81
64671: ST_TO_ADDR
// tech_BasicTools := 82 ;
64672: LD_ADDR_EXP 91
64676: PUSH
64677: LD_INT 82
64679: ST_TO_ADDR
// tech_Cargo := 83 ;
64680: LD_ADDR_EXP 92
64684: PUSH
64685: LD_INT 83
64687: ST_TO_ADDR
// tech_Track := 84 ;
64688: LD_ADDR_EXP 93
64692: PUSH
64693: LD_INT 84
64695: ST_TO_ADDR
// tech_Crane := 85 ;
64696: LD_ADDR_EXP 94
64700: PUSH
64701: LD_INT 85
64703: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64704: LD_ADDR_EXP 95
64708: PUSH
64709: LD_INT 86
64711: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64712: LD_ADDR_EXP 96
64716: PUSH
64717: LD_INT 87
64719: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
64720: LD_ADDR_EXP 97
64724: PUSH
64725: LD_INT 88
64727: ST_TO_ADDR
// end ;
64728: LD_VAR 0 1
64732: RET
// every 1 do
64733: GO 64735
64735: DISABLE
// InitGlobalVariables ; end_of_file
64736: CALL 64581 0 0
64740: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 200
64748: DOUBLE
64749: GREATEREQUAL
64750: IFFALSE 64758
64752: LD_INT 299
64754: DOUBLE
64755: LESSEQUAL
64756: IFTRUE 64760
64758: GO 64792
64760: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64761: LD_VAR 0 1
64765: PPUSH
64766: LD_VAR 0 2
64770: PPUSH
64771: LD_VAR 0 3
64775: PPUSH
64776: LD_VAR 0 4
64780: PPUSH
64781: LD_VAR 0 5
64785: PPUSH
64786: CALL 65282 0 5
64790: GO 64869
64792: LD_INT 300
64794: DOUBLE
64795: GREATEREQUAL
64796: IFFALSE 64804
64798: LD_INT 399
64800: DOUBLE
64801: LESSEQUAL
64802: IFTRUE 64806
64804: GO 64868
64806: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: LD_VAR 0 3
64821: PPUSH
64822: LD_VAR 0 4
64826: PPUSH
64827: LD_VAR 0 5
64831: PPUSH
64832: LD_VAR 0 6
64836: PPUSH
64837: LD_VAR 0 7
64841: PPUSH
64842: LD_VAR 0 8
64846: PPUSH
64847: LD_VAR 0 9
64851: PPUSH
64852: LD_VAR 0 10
64856: PPUSH
64857: LD_VAR 0 11
64861: PPUSH
64862: CALL 20072 0 11
64866: GO 64869
64868: POP
// end ;
64869: PPOPN 11
64871: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64872: LD_VAR 0 1
64876: PPUSH
64877: LD_VAR 0 2
64881: PPUSH
64882: LD_VAR 0 3
64886: PPUSH
64887: LD_VAR 0 4
64891: PPUSH
64892: LD_VAR 0 5
64896: PPUSH
64897: CALL 65018 0 5
// end ; end_of_file
64901: PPOPN 5
64903: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
64904: LD_INT 0
64906: PPUSH
64907: PPUSH
64908: PPUSH
64909: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
64910: LD_VAR 0 1
64914: PPUSH
64915: CALL_OW 264
64919: PUSH
64920: LD_EXP 84
64924: EQUAL
64925: IFFALSE 64997
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64927: LD_INT 68
64929: PPUSH
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 255
64939: PPUSH
64940: CALL_OW 321
64944: PUSH
64945: LD_INT 2
64947: EQUAL
64948: IFFALSE 64960
// eff := 70 else
64950: LD_ADDR_VAR 0 4
64954: PUSH
64955: LD_INT 70
64957: ST_TO_ADDR
64958: GO 64968
// eff := 30 ;
64960: LD_ADDR_VAR 0 4
64964: PUSH
64965: LD_INT 30
64967: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64968: LD_VAR 0 1
64972: PPUSH
64973: CALL_OW 250
64977: PPUSH
64978: LD_VAR 0 1
64982: PPUSH
64983: CALL_OW 251
64987: PPUSH
64988: LD_VAR 0 4
64992: PPUSH
64993: CALL_OW 495
// end ; end ;
64997: LD_VAR 0 2
65001: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65002: LD_INT 0
65004: PPUSH
// end ;
65005: LD_VAR 0 4
65009: RET
// export function SOS_Command ( cmd ) ; begin
65010: LD_INT 0
65012: PPUSH
// end ;
65013: LD_VAR 0 2
65017: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65018: LD_INT 0
65020: PPUSH
// end ;
65021: LD_VAR 0 6
65025: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65026: LD_INT 0
65028: PPUSH
65029: PPUSH
// if not vehicle or not factory then
65030: LD_VAR 0 1
65034: NOT
65035: PUSH
65036: LD_VAR 0 2
65040: NOT
65041: OR
65042: IFFALSE 65046
// exit ;
65044: GO 65277
// if factoryWaypoints >= factory then
65046: LD_EXP 77
65050: PUSH
65051: LD_VAR 0 2
65055: GREATEREQUAL
65056: IFFALSE 65277
// if factoryWaypoints [ factory ] then
65058: LD_EXP 77
65062: PUSH
65063: LD_VAR 0 2
65067: ARRAY
65068: IFFALSE 65277
// begin if GetControl ( vehicle ) = control_manual then
65070: LD_VAR 0 1
65074: PPUSH
65075: CALL_OW 263
65079: PUSH
65080: LD_INT 1
65082: EQUAL
65083: IFFALSE 65164
// begin driver := IsDrivenBy ( vehicle ) ;
65085: LD_ADDR_VAR 0 4
65089: PUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: CALL_OW 311
65099: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65100: LD_VAR 0 4
65104: PPUSH
65105: LD_EXP 77
65109: PUSH
65110: LD_VAR 0 2
65114: ARRAY
65115: PUSH
65116: LD_INT 3
65118: ARRAY
65119: PPUSH
65120: LD_EXP 77
65124: PUSH
65125: LD_VAR 0 2
65129: ARRAY
65130: PUSH
65131: LD_INT 4
65133: ARRAY
65134: PPUSH
65135: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65139: LD_VAR 0 4
65143: PPUSH
65144: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65148: LD_VAR 0 4
65152: PPUSH
65153: LD_VAR 0 2
65157: PPUSH
65158: CALL_OW 180
// end else
65162: GO 65277
// if GetControl ( vehicle ) = control_remote then
65164: LD_VAR 0 1
65168: PPUSH
65169: CALL_OW 263
65173: PUSH
65174: LD_INT 2
65176: EQUAL
65177: IFFALSE 65238
// begin wait ( 0 0$2 ) ;
65179: LD_INT 70
65181: PPUSH
65182: CALL_OW 67
// if Connect ( vehicle ) then
65186: LD_VAR 0 1
65190: PPUSH
65191: CALL 31475 0 1
65195: IFFALSE 65236
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65197: LD_VAR 0 1
65201: PPUSH
65202: LD_EXP 77
65206: PUSH
65207: LD_VAR 0 2
65211: ARRAY
65212: PUSH
65213: LD_INT 3
65215: ARRAY
65216: PPUSH
65217: LD_EXP 77
65221: PUSH
65222: LD_VAR 0 2
65226: ARRAY
65227: PUSH
65228: LD_INT 4
65230: ARRAY
65231: PPUSH
65232: CALL_OW 171
// end else
65236: GO 65277
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_EXP 77
65247: PUSH
65248: LD_VAR 0 2
65252: ARRAY
65253: PUSH
65254: LD_INT 3
65256: ARRAY
65257: PPUSH
65258: LD_EXP 77
65262: PUSH
65263: LD_VAR 0 2
65267: ARRAY
65268: PUSH
65269: LD_INT 4
65271: ARRAY
65272: PPUSH
65273: CALL_OW 171
// end ; end ;
65277: LD_VAR 0 3
65281: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65282: LD_INT 0
65284: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65285: LD_VAR 0 1
65289: PUSH
65290: LD_INT 250
65292: EQUAL
65293: PUSH
65294: LD_VAR 0 2
65298: PPUSH
65299: CALL_OW 264
65303: PUSH
65304: LD_EXP 87
65308: EQUAL
65309: AND
65310: IFFALSE 65331
// MinerPlaceMine ( unit , x , y ) ;
65312: LD_VAR 0 2
65316: PPUSH
65317: LD_VAR 0 4
65321: PPUSH
65322: LD_VAR 0 5
65326: PPUSH
65327: CALL 67730 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65331: LD_VAR 0 1
65335: PUSH
65336: LD_INT 251
65338: EQUAL
65339: PUSH
65340: LD_VAR 0 2
65344: PPUSH
65345: CALL_OW 264
65349: PUSH
65350: LD_EXP 87
65354: EQUAL
65355: AND
65356: IFFALSE 65377
// MinerDetonateMine ( unit , x , y ) ;
65358: LD_VAR 0 2
65362: PPUSH
65363: LD_VAR 0 4
65367: PPUSH
65368: LD_VAR 0 5
65372: PPUSH
65373: CALL 68007 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65377: LD_VAR 0 1
65381: PUSH
65382: LD_INT 252
65384: EQUAL
65385: PUSH
65386: LD_VAR 0 2
65390: PPUSH
65391: CALL_OW 264
65395: PUSH
65396: LD_EXP 87
65400: EQUAL
65401: AND
65402: IFFALSE 65423
// MinerCreateMinefield ( unit , x , y ) ;
65404: LD_VAR 0 2
65408: PPUSH
65409: LD_VAR 0 4
65413: PPUSH
65414: LD_VAR 0 5
65418: PPUSH
65419: CALL 68424 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65423: LD_VAR 0 1
65427: PUSH
65428: LD_INT 253
65430: EQUAL
65431: PUSH
65432: LD_VAR 0 2
65436: PPUSH
65437: CALL_OW 257
65441: PUSH
65442: LD_INT 5
65444: EQUAL
65445: AND
65446: IFFALSE 65467
// ComBinocular ( unit , x , y ) ;
65448: LD_VAR 0 2
65452: PPUSH
65453: LD_VAR 0 4
65457: PPUSH
65458: LD_VAR 0 5
65462: PPUSH
65463: CALL 68795 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65467: LD_VAR 0 1
65471: PUSH
65472: LD_INT 254
65474: EQUAL
65475: PUSH
65476: LD_VAR 0 2
65480: PPUSH
65481: CALL_OW 264
65485: PUSH
65486: LD_EXP 82
65490: EQUAL
65491: AND
65492: PUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: CALL_OW 263
65502: PUSH
65503: LD_INT 3
65505: EQUAL
65506: AND
65507: IFFALSE 65523
// HackDestroyVehicle ( unit , selectedUnit ) ;
65509: LD_VAR 0 2
65513: PPUSH
65514: LD_VAR 0 3
65518: PPUSH
65519: CALL 67090 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 255
65530: EQUAL
65531: PUSH
65532: LD_VAR 0 2
65536: PPUSH
65537: CALL_OW 264
65541: PUSH
65542: LD_INT 14
65544: PUSH
65545: LD_INT 53
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: IN
65552: AND
65553: PUSH
65554: LD_VAR 0 4
65558: PPUSH
65559: LD_VAR 0 5
65563: PPUSH
65564: CALL_OW 488
65568: AND
65569: IFFALSE 65593
// CutTreeXYR ( unit , x , y , 12 ) ;
65571: LD_VAR 0 2
65575: PPUSH
65576: LD_VAR 0 4
65580: PPUSH
65581: LD_VAR 0 5
65585: PPUSH
65586: LD_INT 12
65588: PPUSH
65589: CALL 65656 0 4
// if cmd = 256 then
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 256
65600: EQUAL
65601: IFFALSE 65622
// SetFactoryWaypoint ( unit , x , y ) ;
65603: LD_VAR 0 2
65607: PPUSH
65608: LD_VAR 0 4
65612: PPUSH
65613: LD_VAR 0 5
65617: PPUSH
65618: CALL 22052 0 3
// if cmd = 257 then
65622: LD_VAR 0 1
65626: PUSH
65627: LD_INT 257
65629: EQUAL
65630: IFFALSE 65651
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65632: LD_VAR 0 2
65636: PPUSH
65637: LD_VAR 0 4
65641: PPUSH
65642: LD_VAR 0 5
65646: PPUSH
65647: CALL 22414 0 3
// end ;
65651: LD_VAR 0 6
65655: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65656: LD_INT 0
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
65663: PPUSH
65664: PPUSH
65665: PPUSH
65666: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65667: LD_VAR 0 1
65671: NOT
65672: PUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: LD_VAR 0 3
65682: PPUSH
65683: CALL_OW 488
65687: NOT
65688: OR
65689: PUSH
65690: LD_VAR 0 4
65694: NOT
65695: OR
65696: IFFALSE 65700
// exit ;
65698: GO 66040
// list := [ ] ;
65700: LD_ADDR_VAR 0 13
65704: PUSH
65705: EMPTY
65706: ST_TO_ADDR
// if x - r < 0 then
65707: LD_VAR 0 2
65711: PUSH
65712: LD_VAR 0 4
65716: MINUS
65717: PUSH
65718: LD_INT 0
65720: LESS
65721: IFFALSE 65733
// min_x := 0 else
65723: LD_ADDR_VAR 0 7
65727: PUSH
65728: LD_INT 0
65730: ST_TO_ADDR
65731: GO 65749
// min_x := x - r ;
65733: LD_ADDR_VAR 0 7
65737: PUSH
65738: LD_VAR 0 2
65742: PUSH
65743: LD_VAR 0 4
65747: MINUS
65748: ST_TO_ADDR
// if y - r < 0 then
65749: LD_VAR 0 3
65753: PUSH
65754: LD_VAR 0 4
65758: MINUS
65759: PUSH
65760: LD_INT 0
65762: LESS
65763: IFFALSE 65775
// min_y := 0 else
65765: LD_ADDR_VAR 0 8
65769: PUSH
65770: LD_INT 0
65772: ST_TO_ADDR
65773: GO 65791
// min_y := y - r ;
65775: LD_ADDR_VAR 0 8
65779: PUSH
65780: LD_VAR 0 3
65784: PUSH
65785: LD_VAR 0 4
65789: MINUS
65790: ST_TO_ADDR
// max_x := x + r ;
65791: LD_ADDR_VAR 0 9
65795: PUSH
65796: LD_VAR 0 2
65800: PUSH
65801: LD_VAR 0 4
65805: PLUS
65806: ST_TO_ADDR
// max_y := y + r ;
65807: LD_ADDR_VAR 0 10
65811: PUSH
65812: LD_VAR 0 3
65816: PUSH
65817: LD_VAR 0 4
65821: PLUS
65822: ST_TO_ADDR
// for _x = min_x to max_x do
65823: LD_ADDR_VAR 0 11
65827: PUSH
65828: DOUBLE
65829: LD_VAR 0 7
65833: DEC
65834: ST_TO_ADDR
65835: LD_VAR 0 9
65839: PUSH
65840: FOR_TO
65841: IFFALSE 65958
// for _y = min_y to max_y do
65843: LD_ADDR_VAR 0 12
65847: PUSH
65848: DOUBLE
65849: LD_VAR 0 8
65853: DEC
65854: ST_TO_ADDR
65855: LD_VAR 0 10
65859: PUSH
65860: FOR_TO
65861: IFFALSE 65954
// begin if not ValidHex ( _x , _y ) then
65863: LD_VAR 0 11
65867: PPUSH
65868: LD_VAR 0 12
65872: PPUSH
65873: CALL_OW 488
65877: NOT
65878: IFFALSE 65882
// continue ;
65880: GO 65860
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65882: LD_VAR 0 11
65886: PPUSH
65887: LD_VAR 0 12
65891: PPUSH
65892: CALL_OW 351
65896: PUSH
65897: LD_VAR 0 11
65901: PPUSH
65902: LD_VAR 0 12
65906: PPUSH
65907: CALL_OW 554
65911: AND
65912: IFFALSE 65952
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65914: LD_ADDR_VAR 0 13
65918: PUSH
65919: LD_VAR 0 13
65923: PPUSH
65924: LD_VAR 0 13
65928: PUSH
65929: LD_INT 1
65931: PLUS
65932: PPUSH
65933: LD_VAR 0 11
65937: PUSH
65938: LD_VAR 0 12
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PPUSH
65947: CALL_OW 2
65951: ST_TO_ADDR
// end ;
65952: GO 65860
65954: POP
65955: POP
65956: GO 65840
65958: POP
65959: POP
// if not list then
65960: LD_VAR 0 13
65964: NOT
65965: IFFALSE 65969
// exit ;
65967: GO 66040
// for i in list do
65969: LD_ADDR_VAR 0 6
65973: PUSH
65974: LD_VAR 0 13
65978: PUSH
65979: FOR_IN
65980: IFFALSE 66038
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65982: LD_VAR 0 1
65986: PPUSH
65987: LD_STRING M
65989: PUSH
65990: LD_VAR 0 6
65994: PUSH
65995: LD_INT 1
65997: ARRAY
65998: PUSH
65999: LD_VAR 0 6
66003: PUSH
66004: LD_INT 2
66006: ARRAY
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: PPUSH
66032: CALL_OW 447
66036: GO 65979
66038: POP
66039: POP
// end ;
66040: LD_VAR 0 5
66044: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66045: LD_EXP 98
66049: NOT
66050: IFFALSE 66100
66052: GO 66054
66054: DISABLE
// begin initHack := true ;
66055: LD_ADDR_EXP 98
66059: PUSH
66060: LD_INT 1
66062: ST_TO_ADDR
// hackTanks := [ ] ;
66063: LD_ADDR_EXP 99
66067: PUSH
66068: EMPTY
66069: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66070: LD_ADDR_EXP 100
66074: PUSH
66075: EMPTY
66076: ST_TO_ADDR
// hackLimit := 3 ;
66077: LD_ADDR_EXP 101
66081: PUSH
66082: LD_INT 3
66084: ST_TO_ADDR
// hackDist := 12 ;
66085: LD_ADDR_EXP 102
66089: PUSH
66090: LD_INT 12
66092: ST_TO_ADDR
// hackCounter := [ ] ;
66093: LD_ADDR_EXP 103
66097: PUSH
66098: EMPTY
66099: ST_TO_ADDR
// end ;
66100: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66101: LD_EXP 98
66105: PUSH
66106: LD_INT 34
66108: PUSH
66109: LD_EXP 82
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PPUSH
66118: CALL_OW 69
66122: AND
66123: IFFALSE 66378
66125: GO 66127
66127: DISABLE
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
// begin enable ;
66132: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66133: LD_ADDR_VAR 0 1
66137: PUSH
66138: LD_INT 34
66140: PUSH
66141: LD_EXP 82
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PPUSH
66150: CALL_OW 69
66154: PUSH
66155: FOR_IN
66156: IFFALSE 66376
// begin if not i in hackTanks then
66158: LD_VAR 0 1
66162: PUSH
66163: LD_EXP 99
66167: IN
66168: NOT
66169: IFFALSE 66252
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66171: LD_ADDR_EXP 99
66175: PUSH
66176: LD_EXP 99
66180: PPUSH
66181: LD_EXP 99
66185: PUSH
66186: LD_INT 1
66188: PLUS
66189: PPUSH
66190: LD_VAR 0 1
66194: PPUSH
66195: CALL_OW 1
66199: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66200: LD_ADDR_EXP 100
66204: PUSH
66205: LD_EXP 100
66209: PPUSH
66210: LD_EXP 100
66214: PUSH
66215: LD_INT 1
66217: PLUS
66218: PPUSH
66219: EMPTY
66220: PPUSH
66221: CALL_OW 1
66225: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66226: LD_ADDR_EXP 103
66230: PUSH
66231: LD_EXP 103
66235: PPUSH
66236: LD_EXP 103
66240: PUSH
66241: LD_INT 1
66243: PLUS
66244: PPUSH
66245: EMPTY
66246: PPUSH
66247: CALL_OW 1
66251: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66252: LD_VAR 0 1
66256: PPUSH
66257: CALL_OW 302
66261: NOT
66262: IFFALSE 66275
// begin HackUnlinkAll ( i ) ;
66264: LD_VAR 0 1
66268: PPUSH
66269: CALL 66381 0 1
// continue ;
66273: GO 66155
// end ; HackCheckCapturedStatus ( i ) ;
66275: LD_VAR 0 1
66279: PPUSH
66280: CALL 66824 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66284: LD_ADDR_VAR 0 2
66288: PUSH
66289: LD_INT 81
66291: PUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL_OW 255
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 33
66308: PUSH
66309: LD_INT 3
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 91
66318: PUSH
66319: LD_VAR 0 1
66323: PUSH
66324: LD_EXP 102
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 50
66336: PUSH
66337: EMPTY
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: PPUSH
66346: CALL_OW 69
66350: ST_TO_ADDR
// if not tmp then
66351: LD_VAR 0 2
66355: NOT
66356: IFFALSE 66360
// continue ;
66358: GO 66155
// HackLink ( i , tmp ) ;
66360: LD_VAR 0 1
66364: PPUSH
66365: LD_VAR 0 2
66369: PPUSH
66370: CALL 66517 0 2
// end ;
66374: GO 66155
66376: POP
66377: POP
// end ;
66378: PPOPN 2
66380: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66381: LD_INT 0
66383: PPUSH
66384: PPUSH
66385: PPUSH
// if not hack in hackTanks then
66386: LD_VAR 0 1
66390: PUSH
66391: LD_EXP 99
66395: IN
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 66512
// index := GetElementIndex ( hackTanks , hack ) ;
66401: LD_ADDR_VAR 0 4
66405: PUSH
66406: LD_EXP 99
66410: PPUSH
66411: LD_VAR 0 1
66415: PPUSH
66416: CALL 28289 0 2
66420: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66421: LD_EXP 100
66425: PUSH
66426: LD_VAR 0 4
66430: ARRAY
66431: IFFALSE 66512
// begin for i in hackTanksCaptured [ index ] do
66433: LD_ADDR_VAR 0 3
66437: PUSH
66438: LD_EXP 100
66442: PUSH
66443: LD_VAR 0 4
66447: ARRAY
66448: PUSH
66449: FOR_IN
66450: IFFALSE 66476
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66452: LD_VAR 0 3
66456: PUSH
66457: LD_INT 1
66459: ARRAY
66460: PPUSH
66461: LD_VAR 0 3
66465: PUSH
66466: LD_INT 2
66468: ARRAY
66469: PPUSH
66470: CALL_OW 235
66474: GO 66449
66476: POP
66477: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66478: LD_ADDR_EXP 100
66482: PUSH
66483: LD_EXP 100
66487: PPUSH
66488: LD_VAR 0 4
66492: PPUSH
66493: EMPTY
66494: PPUSH
66495: CALL_OW 1
66499: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66500: LD_VAR 0 1
66504: PPUSH
66505: LD_INT 0
66507: PPUSH
66508: CALL_OW 505
// end ; end ;
66512: LD_VAR 0 2
66516: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
66521: PPUSH
// if not hack in hackTanks or not vehicles then
66522: LD_VAR 0 1
66526: PUSH
66527: LD_EXP 99
66531: IN
66532: NOT
66533: PUSH
66534: LD_VAR 0 2
66538: NOT
66539: OR
66540: IFFALSE 66544
// exit ;
66542: GO 66819
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66544: LD_ADDR_VAR 0 2
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_VAR 0 2
66558: PPUSH
66559: LD_INT 1
66561: PPUSH
66562: LD_INT 1
66564: PPUSH
66565: CALL 28939 0 4
66569: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66570: LD_ADDR_VAR 0 5
66574: PUSH
66575: LD_EXP 99
66579: PPUSH
66580: LD_VAR 0 1
66584: PPUSH
66585: CALL 28289 0 2
66589: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66590: LD_EXP 100
66594: PUSH
66595: LD_VAR 0 5
66599: ARRAY
66600: PUSH
66601: LD_EXP 101
66605: LESS
66606: IFFALSE 66795
// begin for i := 1 to vehicles do
66608: LD_ADDR_VAR 0 4
66612: PUSH
66613: DOUBLE
66614: LD_INT 1
66616: DEC
66617: ST_TO_ADDR
66618: LD_VAR 0 2
66622: PUSH
66623: FOR_TO
66624: IFFALSE 66793
// begin if hackTanksCaptured [ index ] = hackLimit then
66626: LD_EXP 100
66630: PUSH
66631: LD_VAR 0 5
66635: ARRAY
66636: PUSH
66637: LD_EXP 101
66641: EQUAL
66642: IFFALSE 66646
// break ;
66644: GO 66793
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66646: LD_ADDR_EXP 103
66650: PUSH
66651: LD_EXP 103
66655: PPUSH
66656: LD_VAR 0 5
66660: PPUSH
66661: LD_EXP 103
66665: PUSH
66666: LD_VAR 0 5
66670: ARRAY
66671: PUSH
66672: LD_INT 1
66674: PLUS
66675: PPUSH
66676: CALL_OW 1
66680: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66681: LD_ADDR_EXP 100
66685: PUSH
66686: LD_EXP 100
66690: PPUSH
66691: LD_VAR 0 5
66695: PUSH
66696: LD_EXP 100
66700: PUSH
66701: LD_VAR 0 5
66705: ARRAY
66706: PUSH
66707: LD_INT 1
66709: PLUS
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PPUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_VAR 0 4
66724: ARRAY
66725: PUSH
66726: LD_VAR 0 2
66730: PUSH
66731: LD_VAR 0 4
66735: ARRAY
66736: PPUSH
66737: CALL_OW 255
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PPUSH
66746: CALL 28504 0 3
66750: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66751: LD_VAR 0 2
66755: PUSH
66756: LD_VAR 0 4
66760: ARRAY
66761: PPUSH
66762: LD_VAR 0 1
66766: PPUSH
66767: CALL_OW 255
66771: PPUSH
66772: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66776: LD_VAR 0 2
66780: PUSH
66781: LD_VAR 0 4
66785: ARRAY
66786: PPUSH
66787: CALL_OW 141
// end ;
66791: GO 66623
66793: POP
66794: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66795: LD_VAR 0 1
66799: PPUSH
66800: LD_EXP 100
66804: PUSH
66805: LD_VAR 0 5
66809: ARRAY
66810: PUSH
66811: LD_INT 0
66813: PLUS
66814: PPUSH
66815: CALL_OW 505
// end ;
66819: LD_VAR 0 3
66823: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66824: LD_INT 0
66826: PPUSH
66827: PPUSH
66828: PPUSH
66829: PPUSH
// if not hack in hackTanks then
66830: LD_VAR 0 1
66834: PUSH
66835: LD_EXP 99
66839: IN
66840: NOT
66841: IFFALSE 66845
// exit ;
66843: GO 67085
// index := GetElementIndex ( hackTanks , hack ) ;
66845: LD_ADDR_VAR 0 4
66849: PUSH
66850: LD_EXP 99
66854: PPUSH
66855: LD_VAR 0 1
66859: PPUSH
66860: CALL 28289 0 2
66864: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66865: LD_ADDR_VAR 0 3
66869: PUSH
66870: DOUBLE
66871: LD_EXP 100
66875: PUSH
66876: LD_VAR 0 4
66880: ARRAY
66881: INC
66882: ST_TO_ADDR
66883: LD_INT 1
66885: PUSH
66886: FOR_DOWNTO
66887: IFFALSE 67059
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: LD_EXP 100
66898: PUSH
66899: LD_VAR 0 4
66903: ARRAY
66904: PUSH
66905: LD_VAR 0 3
66909: ARRAY
66910: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66911: LD_VAR 0 5
66915: PUSH
66916: LD_INT 1
66918: ARRAY
66919: PPUSH
66920: CALL_OW 302
66924: NOT
66925: PUSH
66926: LD_VAR 0 5
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: PPUSH
66935: CALL_OW 255
66939: PUSH
66940: LD_VAR 0 1
66944: PPUSH
66945: CALL_OW 255
66949: NONEQUAL
66950: OR
66951: IFFALSE 67057
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66953: LD_VAR 0 5
66957: PUSH
66958: LD_INT 1
66960: ARRAY
66961: PPUSH
66962: CALL_OW 305
66966: PUSH
66967: LD_VAR 0 5
66971: PUSH
66972: LD_INT 1
66974: ARRAY
66975: PPUSH
66976: CALL_OW 255
66980: PUSH
66981: LD_VAR 0 1
66985: PPUSH
66986: CALL_OW 255
66990: EQUAL
66991: AND
66992: IFFALSE 67016
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66994: LD_VAR 0 5
66998: PUSH
66999: LD_INT 1
67001: ARRAY
67002: PPUSH
67003: LD_VAR 0 5
67007: PUSH
67008: LD_INT 2
67010: ARRAY
67011: PPUSH
67012: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67016: LD_ADDR_EXP 100
67020: PUSH
67021: LD_EXP 100
67025: PPUSH
67026: LD_VAR 0 4
67030: PPUSH
67031: LD_EXP 100
67035: PUSH
67036: LD_VAR 0 4
67040: ARRAY
67041: PPUSH
67042: LD_VAR 0 3
67046: PPUSH
67047: CALL_OW 3
67051: PPUSH
67052: CALL_OW 1
67056: ST_TO_ADDR
// end ; end ;
67057: GO 66886
67059: POP
67060: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67061: LD_VAR 0 1
67065: PPUSH
67066: LD_EXP 100
67070: PUSH
67071: LD_VAR 0 4
67075: ARRAY
67076: PUSH
67077: LD_INT 0
67079: PLUS
67080: PPUSH
67081: CALL_OW 505
// end ;
67085: LD_VAR 0 2
67089: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67090: LD_INT 0
67092: PPUSH
67093: PPUSH
67094: PPUSH
67095: PPUSH
// if not hack in hackTanks then
67096: LD_VAR 0 1
67100: PUSH
67101: LD_EXP 99
67105: IN
67106: NOT
67107: IFFALSE 67111
// exit ;
67109: GO 67196
// index := GetElementIndex ( hackTanks , hack ) ;
67111: LD_ADDR_VAR 0 5
67115: PUSH
67116: LD_EXP 99
67120: PPUSH
67121: LD_VAR 0 1
67125: PPUSH
67126: CALL 28289 0 2
67130: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67131: LD_ADDR_VAR 0 4
67135: PUSH
67136: DOUBLE
67137: LD_INT 1
67139: DEC
67140: ST_TO_ADDR
67141: LD_EXP 100
67145: PUSH
67146: LD_VAR 0 5
67150: ARRAY
67151: PUSH
67152: FOR_TO
67153: IFFALSE 67194
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67155: LD_EXP 100
67159: PUSH
67160: LD_VAR 0 5
67164: ARRAY
67165: PUSH
67166: LD_VAR 0 4
67170: ARRAY
67171: PUSH
67172: LD_INT 1
67174: ARRAY
67175: PUSH
67176: LD_VAR 0 2
67180: EQUAL
67181: IFFALSE 67192
// KillUnit ( vehicle ) ;
67183: LD_VAR 0 2
67187: PPUSH
67188: CALL_OW 66
67192: GO 67152
67194: POP
67195: POP
// end ;
67196: LD_VAR 0 3
67200: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67201: LD_EXP 104
67205: NOT
67206: IFFALSE 67241
67208: GO 67210
67210: DISABLE
// begin initMiner := true ;
67211: LD_ADDR_EXP 104
67215: PUSH
67216: LD_INT 1
67218: ST_TO_ADDR
// minersList := [ ] ;
67219: LD_ADDR_EXP 105
67223: PUSH
67224: EMPTY
67225: ST_TO_ADDR
// minerMinesList := [ ] ;
67226: LD_ADDR_EXP 106
67230: PUSH
67231: EMPTY
67232: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67233: LD_ADDR_EXP 107
67237: PUSH
67238: LD_INT 5
67240: ST_TO_ADDR
// end ;
67241: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67242: LD_EXP 104
67246: PUSH
67247: LD_INT 34
67249: PUSH
67250: LD_EXP 87
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PPUSH
67259: CALL_OW 69
67263: AND
67264: IFFALSE 67727
67266: GO 67268
67268: DISABLE
67269: LD_INT 0
67271: PPUSH
67272: PPUSH
67273: PPUSH
67274: PPUSH
// begin enable ;
67275: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67276: LD_ADDR_VAR 0 1
67280: PUSH
67281: LD_INT 34
67283: PUSH
67284: LD_EXP 87
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PPUSH
67293: CALL_OW 69
67297: PUSH
67298: FOR_IN
67299: IFFALSE 67371
// begin if not i in minersList then
67301: LD_VAR 0 1
67305: PUSH
67306: LD_EXP 105
67310: IN
67311: NOT
67312: IFFALSE 67369
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67314: LD_ADDR_EXP 105
67318: PUSH
67319: LD_EXP 105
67323: PPUSH
67324: LD_EXP 105
67328: PUSH
67329: LD_INT 1
67331: PLUS
67332: PPUSH
67333: LD_VAR 0 1
67337: PPUSH
67338: CALL_OW 1
67342: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67343: LD_ADDR_EXP 106
67347: PUSH
67348: LD_EXP 106
67352: PPUSH
67353: LD_EXP 106
67357: PUSH
67358: LD_INT 1
67360: PLUS
67361: PPUSH
67362: EMPTY
67363: PPUSH
67364: CALL_OW 1
67368: ST_TO_ADDR
// end end ;
67369: GO 67298
67371: POP
67372: POP
// for i := minerMinesList downto 1 do
67373: LD_ADDR_VAR 0 1
67377: PUSH
67378: DOUBLE
67379: LD_EXP 106
67383: INC
67384: ST_TO_ADDR
67385: LD_INT 1
67387: PUSH
67388: FOR_DOWNTO
67389: IFFALSE 67725
// begin if IsLive ( minersList [ i ] ) then
67391: LD_EXP 105
67395: PUSH
67396: LD_VAR 0 1
67400: ARRAY
67401: PPUSH
67402: CALL_OW 300
67406: IFFALSE 67434
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67408: LD_EXP 105
67412: PUSH
67413: LD_VAR 0 1
67417: ARRAY
67418: PPUSH
67419: LD_EXP 106
67423: PUSH
67424: LD_VAR 0 1
67428: ARRAY
67429: PPUSH
67430: CALL_OW 505
// if not minerMinesList [ i ] then
67434: LD_EXP 106
67438: PUSH
67439: LD_VAR 0 1
67443: ARRAY
67444: NOT
67445: IFFALSE 67449
// continue ;
67447: GO 67388
// for j := minerMinesList [ i ] downto 1 do
67449: LD_ADDR_VAR 0 2
67453: PUSH
67454: DOUBLE
67455: LD_EXP 106
67459: PUSH
67460: LD_VAR 0 1
67464: ARRAY
67465: INC
67466: ST_TO_ADDR
67467: LD_INT 1
67469: PUSH
67470: FOR_DOWNTO
67471: IFFALSE 67721
// begin side := GetSide ( minersList [ i ] ) ;
67473: LD_ADDR_VAR 0 3
67477: PUSH
67478: LD_EXP 105
67482: PUSH
67483: LD_VAR 0 1
67487: ARRAY
67488: PPUSH
67489: CALL_OW 255
67493: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67494: LD_ADDR_VAR 0 4
67498: PUSH
67499: LD_EXP 106
67503: PUSH
67504: LD_VAR 0 1
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 2
67514: ARRAY
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PPUSH
67520: LD_EXP 106
67524: PUSH
67525: LD_VAR 0 1
67529: ARRAY
67530: PUSH
67531: LD_VAR 0 2
67535: ARRAY
67536: PUSH
67537: LD_INT 2
67539: ARRAY
67540: PPUSH
67541: CALL_OW 428
67545: ST_TO_ADDR
// if not tmp then
67546: LD_VAR 0 4
67550: NOT
67551: IFFALSE 67555
// continue ;
67553: GO 67470
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67555: LD_VAR 0 4
67559: PUSH
67560: LD_INT 81
67562: PUSH
67563: LD_VAR 0 3
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PPUSH
67572: CALL_OW 69
67576: IN
67577: PUSH
67578: LD_EXP 106
67582: PUSH
67583: LD_VAR 0 1
67587: ARRAY
67588: PUSH
67589: LD_VAR 0 2
67593: ARRAY
67594: PUSH
67595: LD_INT 1
67597: ARRAY
67598: PPUSH
67599: LD_EXP 106
67603: PUSH
67604: LD_VAR 0 1
67608: ARRAY
67609: PUSH
67610: LD_VAR 0 2
67614: ARRAY
67615: PUSH
67616: LD_INT 2
67618: ARRAY
67619: PPUSH
67620: CALL_OW 458
67624: AND
67625: IFFALSE 67719
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67627: LD_EXP 106
67631: PUSH
67632: LD_VAR 0 1
67636: ARRAY
67637: PUSH
67638: LD_VAR 0 2
67642: ARRAY
67643: PUSH
67644: LD_INT 1
67646: ARRAY
67647: PPUSH
67648: LD_EXP 106
67652: PUSH
67653: LD_VAR 0 1
67657: ARRAY
67658: PUSH
67659: LD_VAR 0 2
67663: ARRAY
67664: PUSH
67665: LD_INT 2
67667: ARRAY
67668: PPUSH
67669: LD_VAR 0 3
67673: PPUSH
67674: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67678: LD_ADDR_EXP 106
67682: PUSH
67683: LD_EXP 106
67687: PPUSH
67688: LD_VAR 0 1
67692: PPUSH
67693: LD_EXP 106
67697: PUSH
67698: LD_VAR 0 1
67702: ARRAY
67703: PPUSH
67704: LD_VAR 0 2
67708: PPUSH
67709: CALL_OW 3
67713: PPUSH
67714: CALL_OW 1
67718: ST_TO_ADDR
// end ; end ;
67719: GO 67470
67721: POP
67722: POP
// end ;
67723: GO 67388
67725: POP
67726: POP
// end ;
67727: PPOPN 4
67729: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67730: LD_INT 0
67732: PPUSH
67733: PPUSH
// result := false ;
67734: LD_ADDR_VAR 0 4
67738: PUSH
67739: LD_INT 0
67741: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 264
67751: PUSH
67752: LD_EXP 87
67756: EQUAL
67757: NOT
67758: IFFALSE 67762
// exit ;
67760: GO 68002
// index := GetElementIndex ( minersList , unit ) ;
67762: LD_ADDR_VAR 0 5
67766: PUSH
67767: LD_EXP 105
67771: PPUSH
67772: LD_VAR 0 1
67776: PPUSH
67777: CALL 28289 0 2
67781: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67782: LD_EXP 106
67786: PUSH
67787: LD_VAR 0 5
67791: ARRAY
67792: PUSH
67793: LD_EXP 107
67797: GREATEREQUAL
67798: IFFALSE 67802
// exit ;
67800: GO 68002
// ComMoveXY ( unit , x , y ) ;
67802: LD_VAR 0 1
67806: PPUSH
67807: LD_VAR 0 2
67811: PPUSH
67812: LD_VAR 0 3
67816: PPUSH
67817: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67821: LD_INT 35
67823: PPUSH
67824: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67828: LD_VAR 0 1
67832: PPUSH
67833: LD_VAR 0 2
67837: PPUSH
67838: LD_VAR 0 3
67842: PPUSH
67843: CALL 59575 0 3
67847: NOT
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: CALL_OW 314
67858: AND
67859: IFFALSE 67863
// exit ;
67861: GO 68002
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67863: LD_VAR 0 2
67867: PPUSH
67868: LD_VAR 0 3
67872: PPUSH
67873: CALL_OW 428
67877: PUSH
67878: LD_VAR 0 1
67882: EQUAL
67883: PUSH
67884: LD_VAR 0 1
67888: PPUSH
67889: CALL_OW 314
67893: NOT
67894: AND
67895: IFFALSE 67821
// PlaySoundXY ( x , y , PlantMine ) ;
67897: LD_VAR 0 2
67901: PPUSH
67902: LD_VAR 0 3
67906: PPUSH
67907: LD_STRING PlantMine
67909: PPUSH
67910: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67914: LD_VAR 0 2
67918: PPUSH
67919: LD_VAR 0 3
67923: PPUSH
67924: LD_VAR 0 1
67928: PPUSH
67929: CALL_OW 255
67933: PPUSH
67934: LD_INT 0
67936: PPUSH
67937: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67941: LD_ADDR_EXP 106
67945: PUSH
67946: LD_EXP 106
67950: PPUSH
67951: LD_VAR 0 5
67955: PUSH
67956: LD_EXP 106
67960: PUSH
67961: LD_VAR 0 5
67965: ARRAY
67966: PUSH
67967: LD_INT 1
67969: PLUS
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PPUSH
67975: LD_VAR 0 2
67979: PUSH
67980: LD_VAR 0 3
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PPUSH
67989: CALL 28504 0 3
67993: ST_TO_ADDR
// result := true ;
67994: LD_ADDR_VAR 0 4
67998: PUSH
67999: LD_INT 1
68001: ST_TO_ADDR
// end ;
68002: LD_VAR 0 4
68006: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68007: LD_INT 0
68009: PPUSH
68010: PPUSH
68011: PPUSH
// if not unit in minersList then
68012: LD_VAR 0 1
68016: PUSH
68017: LD_EXP 105
68021: IN
68022: NOT
68023: IFFALSE 68027
// exit ;
68025: GO 68419
// index := GetElementIndex ( minersList , unit ) ;
68027: LD_ADDR_VAR 0 6
68031: PUSH
68032: LD_EXP 105
68036: PPUSH
68037: LD_VAR 0 1
68041: PPUSH
68042: CALL 28289 0 2
68046: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68047: LD_ADDR_VAR 0 5
68051: PUSH
68052: DOUBLE
68053: LD_EXP 106
68057: PUSH
68058: LD_VAR 0 6
68062: ARRAY
68063: INC
68064: ST_TO_ADDR
68065: LD_INT 1
68067: PUSH
68068: FOR_DOWNTO
68069: IFFALSE 68230
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68071: LD_EXP 106
68075: PUSH
68076: LD_VAR 0 6
68080: ARRAY
68081: PUSH
68082: LD_VAR 0 5
68086: ARRAY
68087: PUSH
68088: LD_INT 1
68090: ARRAY
68091: PUSH
68092: LD_VAR 0 2
68096: EQUAL
68097: PUSH
68098: LD_EXP 106
68102: PUSH
68103: LD_VAR 0 6
68107: ARRAY
68108: PUSH
68109: LD_VAR 0 5
68113: ARRAY
68114: PUSH
68115: LD_INT 2
68117: ARRAY
68118: PUSH
68119: LD_VAR 0 3
68123: EQUAL
68124: AND
68125: IFFALSE 68228
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68127: LD_EXP 106
68131: PUSH
68132: LD_VAR 0 6
68136: ARRAY
68137: PUSH
68138: LD_VAR 0 5
68142: ARRAY
68143: PUSH
68144: LD_INT 1
68146: ARRAY
68147: PPUSH
68148: LD_EXP 106
68152: PUSH
68153: LD_VAR 0 6
68157: ARRAY
68158: PUSH
68159: LD_VAR 0 5
68163: ARRAY
68164: PUSH
68165: LD_INT 2
68167: ARRAY
68168: PPUSH
68169: LD_VAR 0 1
68173: PPUSH
68174: CALL_OW 255
68178: PPUSH
68179: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68183: LD_ADDR_EXP 106
68187: PUSH
68188: LD_EXP 106
68192: PPUSH
68193: LD_VAR 0 6
68197: PPUSH
68198: LD_EXP 106
68202: PUSH
68203: LD_VAR 0 6
68207: ARRAY
68208: PPUSH
68209: LD_VAR 0 5
68213: PPUSH
68214: CALL_OW 3
68218: PPUSH
68219: CALL_OW 1
68223: ST_TO_ADDR
// exit ;
68224: POP
68225: POP
68226: GO 68419
// end ; end ;
68228: GO 68068
68230: POP
68231: POP
// for i := minerMinesList [ index ] downto 1 do
68232: LD_ADDR_VAR 0 5
68236: PUSH
68237: DOUBLE
68238: LD_EXP 106
68242: PUSH
68243: LD_VAR 0 6
68247: ARRAY
68248: INC
68249: ST_TO_ADDR
68250: LD_INT 1
68252: PUSH
68253: FOR_DOWNTO
68254: IFFALSE 68417
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68256: LD_EXP 106
68260: PUSH
68261: LD_VAR 0 6
68265: ARRAY
68266: PUSH
68267: LD_VAR 0 5
68271: ARRAY
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: PPUSH
68277: LD_EXP 106
68281: PUSH
68282: LD_VAR 0 6
68286: ARRAY
68287: PUSH
68288: LD_VAR 0 5
68292: ARRAY
68293: PUSH
68294: LD_INT 2
68296: ARRAY
68297: PPUSH
68298: LD_VAR 0 2
68302: PPUSH
68303: LD_VAR 0 3
68307: PPUSH
68308: CALL_OW 298
68312: PUSH
68313: LD_INT 6
68315: LESS
68316: IFFALSE 68415
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68318: LD_EXP 106
68322: PUSH
68323: LD_VAR 0 6
68327: ARRAY
68328: PUSH
68329: LD_VAR 0 5
68333: ARRAY
68334: PUSH
68335: LD_INT 1
68337: ARRAY
68338: PPUSH
68339: LD_EXP 106
68343: PUSH
68344: LD_VAR 0 6
68348: ARRAY
68349: PUSH
68350: LD_VAR 0 5
68354: ARRAY
68355: PUSH
68356: LD_INT 2
68358: ARRAY
68359: PPUSH
68360: LD_VAR 0 1
68364: PPUSH
68365: CALL_OW 255
68369: PPUSH
68370: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68374: LD_ADDR_EXP 106
68378: PUSH
68379: LD_EXP 106
68383: PPUSH
68384: LD_VAR 0 6
68388: PPUSH
68389: LD_EXP 106
68393: PUSH
68394: LD_VAR 0 6
68398: ARRAY
68399: PPUSH
68400: LD_VAR 0 5
68404: PPUSH
68405: CALL_OW 3
68409: PPUSH
68410: CALL_OW 1
68414: ST_TO_ADDR
// end ; end ;
68415: GO 68253
68417: POP
68418: POP
// end ;
68419: LD_VAR 0 4
68423: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68424: LD_INT 0
68426: PPUSH
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
68433: PPUSH
68434: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68435: LD_VAR 0 1
68439: PPUSH
68440: CALL_OW 264
68444: PUSH
68445: LD_EXP 87
68449: EQUAL
68450: NOT
68451: PUSH
68452: LD_VAR 0 1
68456: PUSH
68457: LD_EXP 105
68461: IN
68462: NOT
68463: OR
68464: IFFALSE 68468
// exit ;
68466: GO 68790
// index := GetElementIndex ( minersList , unit ) ;
68468: LD_ADDR_VAR 0 6
68472: PUSH
68473: LD_EXP 105
68477: PPUSH
68478: LD_VAR 0 1
68482: PPUSH
68483: CALL 28289 0 2
68487: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68488: LD_ADDR_VAR 0 8
68492: PUSH
68493: LD_EXP 107
68497: PUSH
68498: LD_EXP 106
68502: PUSH
68503: LD_VAR 0 6
68507: ARRAY
68508: MINUS
68509: ST_TO_ADDR
// if not minesFreeAmount then
68510: LD_VAR 0 8
68514: NOT
68515: IFFALSE 68519
// exit ;
68517: GO 68790
// tmp := [ ] ;
68519: LD_ADDR_VAR 0 7
68523: PUSH
68524: EMPTY
68525: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68526: LD_ADDR_VAR 0 5
68530: PUSH
68531: DOUBLE
68532: LD_INT 1
68534: DEC
68535: ST_TO_ADDR
68536: LD_VAR 0 8
68540: PUSH
68541: FOR_TO
68542: IFFALSE 68737
// begin _d := rand ( 0 , 5 ) ;
68544: LD_ADDR_VAR 0 11
68548: PUSH
68549: LD_INT 0
68551: PPUSH
68552: LD_INT 5
68554: PPUSH
68555: CALL_OW 12
68559: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68560: LD_ADDR_VAR 0 12
68564: PUSH
68565: LD_INT 2
68567: PPUSH
68568: LD_INT 6
68570: PPUSH
68571: CALL_OW 12
68575: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68576: LD_ADDR_VAR 0 9
68580: PUSH
68581: LD_VAR 0 2
68585: PPUSH
68586: LD_VAR 0 11
68590: PPUSH
68591: LD_VAR 0 12
68595: PPUSH
68596: CALL_OW 272
68600: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68601: LD_ADDR_VAR 0 10
68605: PUSH
68606: LD_VAR 0 3
68610: PPUSH
68611: LD_VAR 0 11
68615: PPUSH
68616: LD_VAR 0 12
68620: PPUSH
68621: CALL_OW 273
68625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68626: LD_VAR 0 9
68630: PPUSH
68631: LD_VAR 0 10
68635: PPUSH
68636: CALL_OW 488
68640: PUSH
68641: LD_VAR 0 9
68645: PUSH
68646: LD_VAR 0 10
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 7
68659: IN
68660: NOT
68661: AND
68662: PUSH
68663: LD_VAR 0 9
68667: PPUSH
68668: LD_VAR 0 10
68672: PPUSH
68673: CALL_OW 458
68677: NOT
68678: AND
68679: IFFALSE 68721
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68681: LD_ADDR_VAR 0 7
68685: PUSH
68686: LD_VAR 0 7
68690: PPUSH
68691: LD_VAR 0 7
68695: PUSH
68696: LD_INT 1
68698: PLUS
68699: PPUSH
68700: LD_VAR 0 9
68704: PUSH
68705: LD_VAR 0 10
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PPUSH
68714: CALL_OW 1
68718: ST_TO_ADDR
68719: GO 68735
// i := i - 1 ;
68721: LD_ADDR_VAR 0 5
68725: PUSH
68726: LD_VAR 0 5
68730: PUSH
68731: LD_INT 1
68733: MINUS
68734: ST_TO_ADDR
// end ;
68735: GO 68541
68737: POP
68738: POP
// for i in tmp do
68739: LD_ADDR_VAR 0 5
68743: PUSH
68744: LD_VAR 0 7
68748: PUSH
68749: FOR_IN
68750: IFFALSE 68788
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68752: LD_VAR 0 1
68756: PPUSH
68757: LD_VAR 0 5
68761: PUSH
68762: LD_INT 1
68764: ARRAY
68765: PPUSH
68766: LD_VAR 0 5
68770: PUSH
68771: LD_INT 2
68773: ARRAY
68774: PPUSH
68775: CALL 67730 0 3
68779: NOT
68780: IFFALSE 68786
// exit ;
68782: POP
68783: POP
68784: GO 68790
68786: GO 68749
68788: POP
68789: POP
// end ;
68790: LD_VAR 0 4
68794: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68795: LD_INT 0
68797: PPUSH
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
// if not GetClass ( unit ) = class_sniper then
68804: LD_VAR 0 1
68808: PPUSH
68809: CALL_OW 257
68813: PUSH
68814: LD_INT 5
68816: EQUAL
68817: NOT
68818: IFFALSE 68822
// exit ;
68820: GO 69210
// dist := 8 ;
68822: LD_ADDR_VAR 0 5
68826: PUSH
68827: LD_INT 8
68829: ST_TO_ADDR
// viewRange := 12 ;
68830: LD_ADDR_VAR 0 7
68834: PUSH
68835: LD_INT 12
68837: ST_TO_ADDR
// side := GetSide ( unit ) ;
68838: LD_ADDR_VAR 0 6
68842: PUSH
68843: LD_VAR 0 1
68847: PPUSH
68848: CALL_OW 255
68852: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68853: LD_INT 61
68855: PPUSH
68856: LD_VAR 0 6
68860: PPUSH
68861: CALL_OW 321
68865: PUSH
68866: LD_INT 2
68868: EQUAL
68869: IFFALSE 68879
// viewRange := 16 ;
68871: LD_ADDR_VAR 0 7
68875: PUSH
68876: LD_INT 16
68878: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68879: LD_VAR 0 1
68883: PPUSH
68884: LD_VAR 0 2
68888: PPUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: CALL_OW 297
68898: PUSH
68899: LD_VAR 0 5
68903: GREATER
68904: IFFALSE 68983
// begin ComMoveXY ( unit , x , y ) ;
68906: LD_VAR 0 1
68910: PPUSH
68911: LD_VAR 0 2
68915: PPUSH
68916: LD_VAR 0 3
68920: PPUSH
68921: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68925: LD_INT 35
68927: PPUSH
68928: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68932: LD_VAR 0 1
68936: PPUSH
68937: LD_VAR 0 2
68941: PPUSH
68942: LD_VAR 0 3
68946: PPUSH
68947: CALL 59575 0 3
68951: NOT
68952: IFFALSE 68956
// exit ;
68954: GO 69210
// until GetDistUnitXY ( unit , x , y ) < dist ;
68956: LD_VAR 0 1
68960: PPUSH
68961: LD_VAR 0 2
68965: PPUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: CALL_OW 297
68975: PUSH
68976: LD_VAR 0 5
68980: LESS
68981: IFFALSE 68925
// end ; ComTurnXY ( unit , x , y ) ;
68983: LD_VAR 0 1
68987: PPUSH
68988: LD_VAR 0 2
68992: PPUSH
68993: LD_VAR 0 3
68997: PPUSH
68998: CALL_OW 118
// wait ( 5 ) ;
69002: LD_INT 5
69004: PPUSH
69005: CALL_OW 67
// _d := GetDir ( unit ) ;
69009: LD_ADDR_VAR 0 10
69013: PUSH
69014: LD_VAR 0 1
69018: PPUSH
69019: CALL_OW 254
69023: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69024: LD_ADDR_VAR 0 8
69028: PUSH
69029: LD_VAR 0 1
69033: PPUSH
69034: CALL_OW 250
69038: PPUSH
69039: LD_VAR 0 10
69043: PPUSH
69044: LD_VAR 0 5
69048: PPUSH
69049: CALL_OW 272
69053: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69054: LD_ADDR_VAR 0 9
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: CALL_OW 251
69068: PPUSH
69069: LD_VAR 0 10
69073: PPUSH
69074: LD_VAR 0 5
69078: PPUSH
69079: CALL_OW 273
69083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69084: LD_VAR 0 8
69088: PPUSH
69089: LD_VAR 0 9
69093: PPUSH
69094: CALL_OW 488
69098: NOT
69099: IFFALSE 69103
// exit ;
69101: GO 69210
// ComAnimCustom ( unit , 1 ) ;
69103: LD_VAR 0 1
69107: PPUSH
69108: LD_INT 1
69110: PPUSH
69111: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69115: LD_VAR 0 8
69119: PPUSH
69120: LD_VAR 0 9
69124: PPUSH
69125: LD_VAR 0 6
69129: PPUSH
69130: LD_VAR 0 7
69134: PPUSH
69135: CALL_OW 330
// repeat wait ( 1 ) ;
69139: LD_INT 1
69141: PPUSH
69142: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69146: LD_VAR 0 1
69150: PPUSH
69151: CALL_OW 316
69155: PUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL_OW 314
69165: OR
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 302
69176: NOT
69177: OR
69178: PUSH
69179: LD_VAR 0 1
69183: PPUSH
69184: CALL_OW 301
69188: OR
69189: IFFALSE 69139
// RemoveSeeing ( _x , _y , side ) ;
69191: LD_VAR 0 8
69195: PPUSH
69196: LD_VAR 0 9
69200: PPUSH
69201: LD_VAR 0 6
69205: PPUSH
69206: CALL_OW 331
// end ; end_of_file
69210: LD_VAR 0 4
69214: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69215: LD_VAR 0 1
69219: PPUSH
69220: LD_VAR 0 2
69224: PPUSH
69225: LD_VAR 0 3
69229: PPUSH
69230: LD_VAR 0 4
69234: PPUSH
69235: LD_VAR 0 5
69239: PPUSH
69240: LD_VAR 0 6
69244: PPUSH
69245: CALL 7765 0 6
// end ;
69249: PPOPN 6
69251: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69252: LD_INT 0
69254: PPUSH
// begin if not units then
69255: LD_VAR 0 1
69259: NOT
69260: IFFALSE 69264
// exit ;
69262: GO 69264
// end ;
69264: PPOPN 7
69266: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69267: CALL 7736 0 0
// end ;
69271: PPOPN 1
69273: END
