// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// export globalGameSaveCounter ; every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// every 0 0$1 do
7745: GO 7747
7747: DISABLE
// begin globalGameSaveCounter := 0 ;
7748: LD_ADDR_EXP 19
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7756: LD_STRING setGameSaveCounter(0)
7758: PPUSH
7759: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7763: LD_STRING initStreamRollete();
7765: PPUSH
7766: CALL_OW 559
// InitStreamMode ;
7770: CALL 9096 0 0
// DefineStreamItems ( false ) ;
7774: LD_INT 0
7776: PPUSH
7777: CALL 9560 0 1
// end ;
7781: END
// export function SOS_MapStart ( ) ; begin
7782: LD_INT 0
7784: PPUSH
// if streamModeActive then
7785: LD_EXP 20
7789: IFFALSE 7798
// DefineStreamItems ( true ) ;
7791: LD_INT 1
7793: PPUSH
7794: CALL 9560 0 1
// UpdateLuaVariables ( ) ;
7798: CALL 7815 0 0
// UpdateFactoryWaypoints ( ) ;
7802: CALL 22421 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7806: CALL 22678 0 0
// end ;
7810: LD_VAR 0 1
7814: RET
// function UpdateLuaVariables ( ) ; begin
7815: LD_INT 0
7817: PPUSH
// if globalGameSaveCounter then
7818: LD_EXP 19
7822: IFFALSE 7856
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7824: LD_ADDR_EXP 19
7828: PUSH
7829: LD_EXP 19
7833: PPUSH
7834: CALL 62346 0 1
7838: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7839: LD_STRING setGameSaveCounter(
7841: PUSH
7842: LD_EXP 19
7846: STR
7847: PUSH
7848: LD_STRING )
7850: STR
7851: PPUSH
7852: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7856: LD_STRING setGameDifficulty(
7858: PUSH
7859: LD_OWVAR 67
7863: STR
7864: PUSH
7865: LD_STRING )
7867: STR
7868: PPUSH
7869: CALL_OW 559
// end ;
7873: LD_VAR 0 1
7877: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7878: LD_INT 0
7880: PPUSH
// if p2 = stream_mode then
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 100
7888: EQUAL
7889: IFFALSE 8892
// begin if not StreamModeActive then
7891: LD_EXP 20
7895: NOT
7896: IFFALSE 7906
// StreamModeActive := true ;
7898: LD_ADDR_EXP 20
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 0 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 0
7913: EQUAL
7914: IFFALSE 7920
// InitStreamMode ;
7916: CALL 9096 0 0
// if p3 = 1 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: EQUAL
7928: IFFALSE 7938
// sRocket := true ;
7930: LD_ADDR_EXP 25
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 2 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 7956
// sSpeed := true ;
7948: LD_ADDR_EXP 24
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 3 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: IFFALSE 7974
// sEngine := true ;
7966: LD_ADDR_EXP 26
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 4 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 4
7981: EQUAL
7982: IFFALSE 7992
// sSpec := true ;
7984: LD_ADDR_EXP 23
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 5 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 5
7999: EQUAL
8000: IFFALSE 8010
// sLevel := true ;
8002: LD_ADDR_EXP 27
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 6 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 6
8017: EQUAL
8018: IFFALSE 8028
// sArmoury := true ;
8020: LD_ADDR_EXP 28
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 7 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 7
8035: EQUAL
8036: IFFALSE 8046
// sRadar := true ;
8038: LD_ADDR_EXP 29
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 8 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 8
8053: EQUAL
8054: IFFALSE 8064
// sBunker := true ;
8056: LD_ADDR_EXP 30
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 9 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 9
8071: EQUAL
8072: IFFALSE 8082
// sHack := true ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 10 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 10
8089: EQUAL
8090: IFFALSE 8100
// sFire := true ;
8092: LD_ADDR_EXP 32
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 11 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 11
8107: EQUAL
8108: IFFALSE 8118
// sRefresh := true ;
8110: LD_ADDR_EXP 33
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 12 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 12
8125: EQUAL
8126: IFFALSE 8136
// sExp := true ;
8128: LD_ADDR_EXP 34
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 13 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 13
8143: EQUAL
8144: IFFALSE 8154
// sDepot := true ;
8146: LD_ADDR_EXP 35
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 14 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 14
8161: EQUAL
8162: IFFALSE 8172
// sFlag := true ;
8164: LD_ADDR_EXP 36
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// if p3 = 15 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 15
8179: EQUAL
8180: IFFALSE 8190
// sKamikadze := true ;
8182: LD_ADDR_EXP 44
8186: PUSH
8187: LD_INT 1
8189: ST_TO_ADDR
// if p3 = 16 then
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 16
8197: EQUAL
8198: IFFALSE 8208
// sTroll := true ;
8200: LD_ADDR_EXP 45
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// if p3 = 17 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 17
8215: EQUAL
8216: IFFALSE 8226
// sSlow := true ;
8218: LD_ADDR_EXP 46
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// if p3 = 18 then
8226: LD_VAR 0 3
8230: PUSH
8231: LD_INT 18
8233: EQUAL
8234: IFFALSE 8244
// sLack := true ;
8236: LD_ADDR_EXP 47
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// if p3 = 19 then
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 19
8251: EQUAL
8252: IFFALSE 8262
// sTank := true ;
8254: LD_ADDR_EXP 49
8258: PUSH
8259: LD_INT 1
8261: ST_TO_ADDR
// if p3 = 20 then
8262: LD_VAR 0 3
8266: PUSH
8267: LD_INT 20
8269: EQUAL
8270: IFFALSE 8280
// sRemote := true ;
8272: LD_ADDR_EXP 50
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// if p3 = 21 then
8280: LD_VAR 0 3
8284: PUSH
8285: LD_INT 21
8287: EQUAL
8288: IFFALSE 8298
// sPowell := true ;
8290: LD_ADDR_EXP 51
8294: PUSH
8295: LD_INT 1
8297: ST_TO_ADDR
// if p3 = 22 then
8298: LD_VAR 0 3
8302: PUSH
8303: LD_INT 22
8305: EQUAL
8306: IFFALSE 8316
// sTeleport := true ;
8308: LD_ADDR_EXP 54
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if p3 = 23 then
8316: LD_VAR 0 3
8320: PUSH
8321: LD_INT 23
8323: EQUAL
8324: IFFALSE 8334
// sOilTower := true ;
8326: LD_ADDR_EXP 56
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// if p3 = 24 then
8334: LD_VAR 0 3
8338: PUSH
8339: LD_INT 24
8341: EQUAL
8342: IFFALSE 8352
// sShovel := true ;
8344: LD_ADDR_EXP 57
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// if p3 = 25 then
8352: LD_VAR 0 3
8356: PUSH
8357: LD_INT 25
8359: EQUAL
8360: IFFALSE 8370
// sSheik := true ;
8362: LD_ADDR_EXP 58
8366: PUSH
8367: LD_INT 1
8369: ST_TO_ADDR
// if p3 = 26 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 26
8377: EQUAL
8378: IFFALSE 8388
// sEarthquake := true ;
8380: LD_ADDR_EXP 60
8384: PUSH
8385: LD_INT 1
8387: ST_TO_ADDR
// if p3 = 27 then
8388: LD_VAR 0 3
8392: PUSH
8393: LD_INT 27
8395: EQUAL
8396: IFFALSE 8406
// sAI := true ;
8398: LD_ADDR_EXP 61
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// if p3 = 28 then
8406: LD_VAR 0 3
8410: PUSH
8411: LD_INT 28
8413: EQUAL
8414: IFFALSE 8424
// sCargo := true ;
8416: LD_ADDR_EXP 64
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// if p3 = 29 then
8424: LD_VAR 0 3
8428: PUSH
8429: LD_INT 29
8431: EQUAL
8432: IFFALSE 8442
// sDLaser := true ;
8434: LD_ADDR_EXP 65
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// if p3 = 30 then
8442: LD_VAR 0 3
8446: PUSH
8447: LD_INT 30
8449: EQUAL
8450: IFFALSE 8460
// sExchange := true ;
8452: LD_ADDR_EXP 66
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// if p3 = 31 then
8460: LD_VAR 0 3
8464: PUSH
8465: LD_INT 31
8467: EQUAL
8468: IFFALSE 8478
// sFac := true ;
8470: LD_ADDR_EXP 67
8474: PUSH
8475: LD_INT 1
8477: ST_TO_ADDR
// if p3 = 32 then
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 32
8485: EQUAL
8486: IFFALSE 8496
// sPower := true ;
8488: LD_ADDR_EXP 68
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// if p3 = 33 then
8496: LD_VAR 0 3
8500: PUSH
8501: LD_INT 33
8503: EQUAL
8504: IFFALSE 8514
// sRandom := true ;
8506: LD_ADDR_EXP 69
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// if p3 = 34 then
8514: LD_VAR 0 3
8518: PUSH
8519: LD_INT 34
8521: EQUAL
8522: IFFALSE 8532
// sShield := true ;
8524: LD_ADDR_EXP 70
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// if p3 = 35 then
8532: LD_VAR 0 3
8536: PUSH
8537: LD_INT 35
8539: EQUAL
8540: IFFALSE 8550
// sTime := true ;
8542: LD_ADDR_EXP 71
8546: PUSH
8547: LD_INT 1
8549: ST_TO_ADDR
// if p3 = 36 then
8550: LD_VAR 0 3
8554: PUSH
8555: LD_INT 36
8557: EQUAL
8558: IFFALSE 8568
// sTools := true ;
8560: LD_ADDR_EXP 72
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// if p3 = 101 then
8568: LD_VAR 0 3
8572: PUSH
8573: LD_INT 101
8575: EQUAL
8576: IFFALSE 8586
// sSold := true ;
8578: LD_ADDR_EXP 37
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// if p3 = 102 then
8586: LD_VAR 0 3
8590: PUSH
8591: LD_INT 102
8593: EQUAL
8594: IFFALSE 8604
// sDiff := true ;
8596: LD_ADDR_EXP 38
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// if p3 = 103 then
8604: LD_VAR 0 3
8608: PUSH
8609: LD_INT 103
8611: EQUAL
8612: IFFALSE 8622
// sFog := true ;
8614: LD_ADDR_EXP 41
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// if p3 = 104 then
8622: LD_VAR 0 3
8626: PUSH
8627: LD_INT 104
8629: EQUAL
8630: IFFALSE 8640
// sReset := true ;
8632: LD_ADDR_EXP 42
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
// if p3 = 105 then
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 105
8647: EQUAL
8648: IFFALSE 8658
// sSun := true ;
8650: LD_ADDR_EXP 43
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// if p3 = 106 then
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 106
8665: EQUAL
8666: IFFALSE 8676
// sTiger := true ;
8668: LD_ADDR_EXP 39
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// if p3 = 107 then
8676: LD_VAR 0 3
8680: PUSH
8681: LD_INT 107
8683: EQUAL
8684: IFFALSE 8694
// sBomb := true ;
8686: LD_ADDR_EXP 40
8690: PUSH
8691: LD_INT 1
8693: ST_TO_ADDR
// if p3 = 108 then
8694: LD_VAR 0 3
8698: PUSH
8699: LD_INT 108
8701: EQUAL
8702: IFFALSE 8712
// sWound := true ;
8704: LD_ADDR_EXP 48
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// if p3 = 109 then
8712: LD_VAR 0 3
8716: PUSH
8717: LD_INT 109
8719: EQUAL
8720: IFFALSE 8730
// sBetray := true ;
8722: LD_ADDR_EXP 52
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// if p3 = 110 then
8730: LD_VAR 0 3
8734: PUSH
8735: LD_INT 110
8737: EQUAL
8738: IFFALSE 8748
// sContamin := true ;
8740: LD_ADDR_EXP 53
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if p3 = 111 then
8748: LD_VAR 0 3
8752: PUSH
8753: LD_INT 111
8755: EQUAL
8756: IFFALSE 8766
// sOil := true ;
8758: LD_ADDR_EXP 55
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// if p3 = 112 then
8766: LD_VAR 0 3
8770: PUSH
8771: LD_INT 112
8773: EQUAL
8774: IFFALSE 8784
// sStu := true ;
8776: LD_ADDR_EXP 59
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// if p3 = 113 then
8784: LD_VAR 0 3
8788: PUSH
8789: LD_INT 113
8791: EQUAL
8792: IFFALSE 8802
// sBazooka := true ;
8794: LD_ADDR_EXP 62
8798: PUSH
8799: LD_INT 1
8801: ST_TO_ADDR
// if p3 = 114 then
8802: LD_VAR 0 3
8806: PUSH
8807: LD_INT 114
8809: EQUAL
8810: IFFALSE 8820
// sMortar := true ;
8812: LD_ADDR_EXP 63
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// if p3 = 115 then
8820: LD_VAR 0 3
8824: PUSH
8825: LD_INT 115
8827: EQUAL
8828: IFFALSE 8838
// sRanger := true ;
8830: LD_ADDR_EXP 73
8834: PUSH
8835: LD_INT 1
8837: ST_TO_ADDR
// if p3 = 116 then
8838: LD_VAR 0 3
8842: PUSH
8843: LD_INT 116
8845: EQUAL
8846: IFFALSE 8856
// sComputer := true ;
8848: LD_ADDR_EXP 74
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// if p3 = 117 then
8856: LD_VAR 0 3
8860: PUSH
8861: LD_INT 117
8863: EQUAL
8864: IFFALSE 8874
// s30 := true ;
8866: LD_ADDR_EXP 75
8870: PUSH
8871: LD_INT 1
8873: ST_TO_ADDR
// if p3 = 118 then
8874: LD_VAR 0 3
8878: PUSH
8879: LD_INT 118
8881: EQUAL
8882: IFFALSE 8892
// s60 := true ;
8884: LD_ADDR_EXP 76
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// end ; if p2 = hack_mode then
8892: LD_VAR 0 2
8896: PUSH
8897: LD_INT 101
8899: EQUAL
8900: IFFALSE 9028
// begin case p3 of 1 :
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 1
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8922
8915: POP
// hHackUnlimitedResources ; 2 :
8916: CALL 21167 0 0
8920: GO 9028
8922: LD_INT 2
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8937
8930: POP
// hHackSetLevel10 ; 3 :
8931: CALL 21300 0 0
8935: GO 9028
8937: LD_INT 3
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8952
8945: POP
// hHackSetLevel10YourUnits ; 4 :
8946: CALL 21385 0 0
8950: GO 9028
8952: LD_INT 4
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8967
8960: POP
// hHackInvincible ; 5 :
8961: CALL 21833 0 0
8965: GO 9028
8967: LD_INT 5
8969: DOUBLE
8970: EQUAL
8971: IFTRUE 8975
8973: GO 8982
8975: POP
// hHackInvisible ; 6 :
8976: CALL 21944 0 0
8980: GO 9028
8982: LD_INT 6
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 8997
8990: POP
// hHackChangeYourSide ; 7 :
8991: CALL 22001 0 0
8995: GO 9028
8997: LD_INT 7
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9012
9005: POP
// hHackChangeUnitSide ; 8 :
9006: CALL 22043 0 0
9010: GO 9028
9012: LD_INT 8
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9027
9020: POP
// hHackFog ; end ;
9021: CALL 22144 0 0
9025: GO 9028
9027: POP
// end ; if p2 = game_save_mode then
9028: LD_VAR 0 2
9032: PUSH
9033: LD_INT 102
9035: EQUAL
9036: IFFALSE 9091
// begin if p3 = 1 then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_INT 1
9045: EQUAL
9046: IFFALSE 9058
// globalGameSaveCounter := p4 ;
9048: LD_ADDR_EXP 19
9052: PUSH
9053: LD_VAR 0 4
9057: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 2
9065: EQUAL
9066: PUSH
9067: LD_EXP 19
9071: AND
9072: IFFALSE 9091
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9074: LD_STRING setGameSaveCounter(
9076: PUSH
9077: LD_EXP 19
9081: STR
9082: PUSH
9083: LD_STRING )
9085: STR
9086: PPUSH
9087: CALL_OW 559
// end ; end ;
9091: LD_VAR 0 7
9095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9096: LD_INT 0
9098: PPUSH
// streamModeActive := false ;
9099: LD_ADDR_EXP 20
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// normalCounter := 36 ;
9107: LD_ADDR_EXP 21
9111: PUSH
9112: LD_INT 36
9114: ST_TO_ADDR
// hardcoreCounter := 18 ;
9115: LD_ADDR_EXP 22
9119: PUSH
9120: LD_INT 18
9122: ST_TO_ADDR
// sRocket := false ;
9123: LD_ADDR_EXP 25
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sSpeed := false ;
9131: LD_ADDR_EXP 24
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sEngine := false ;
9139: LD_ADDR_EXP 26
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sSpec := false ;
9147: LD_ADDR_EXP 23
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sLevel := false ;
9155: LD_ADDR_EXP 27
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sArmoury := false ;
9163: LD_ADDR_EXP 28
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sRadar := false ;
9171: LD_ADDR_EXP 29
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sBunker := false ;
9179: LD_ADDR_EXP 30
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sHack := false ;
9187: LD_ADDR_EXP 31
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sFire := false ;
9195: LD_ADDR_EXP 32
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sRefresh := false ;
9203: LD_ADDR_EXP 33
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sExp := false ;
9211: LD_ADDR_EXP 34
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sDepot := false ;
9219: LD_ADDR_EXP 35
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sFlag := false ;
9227: LD_ADDR_EXP 36
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sKamikadze := false ;
9235: LD_ADDR_EXP 44
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sTroll := false ;
9243: LD_ADDR_EXP 45
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sSlow := false ;
9251: LD_ADDR_EXP 46
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sLack := false ;
9259: LD_ADDR_EXP 47
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sTank := false ;
9267: LD_ADDR_EXP 49
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sRemote := false ;
9275: LD_ADDR_EXP 50
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sPowell := false ;
9283: LD_ADDR_EXP 51
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sTeleport := false ;
9291: LD_ADDR_EXP 54
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sOilTower := false ;
9299: LD_ADDR_EXP 56
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sShovel := false ;
9307: LD_ADDR_EXP 57
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sSheik := false ;
9315: LD_ADDR_EXP 58
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sEarthquake := false ;
9323: LD_ADDR_EXP 60
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// sAI := false ;
9331: LD_ADDR_EXP 61
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// sCargo := false ;
9339: LD_ADDR_EXP 64
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// sDLaser := false ;
9347: LD_ADDR_EXP 65
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// sExchange := false ;
9355: LD_ADDR_EXP 66
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// sFac := false ;
9363: LD_ADDR_EXP 67
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// sPower := false ;
9371: LD_ADDR_EXP 68
9375: PUSH
9376: LD_INT 0
9378: ST_TO_ADDR
// sRandom := false ;
9379: LD_ADDR_EXP 69
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// sShield := false ;
9387: LD_ADDR_EXP 70
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// sTime := false ;
9395: LD_ADDR_EXP 71
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// sTools := false ;
9403: LD_ADDR_EXP 72
9407: PUSH
9408: LD_INT 0
9410: ST_TO_ADDR
// sSold := false ;
9411: LD_ADDR_EXP 37
9415: PUSH
9416: LD_INT 0
9418: ST_TO_ADDR
// sDiff := false ;
9419: LD_ADDR_EXP 38
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// sFog := false ;
9427: LD_ADDR_EXP 41
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// sReset := false ;
9435: LD_ADDR_EXP 42
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// sSun := false ;
9443: LD_ADDR_EXP 43
9447: PUSH
9448: LD_INT 0
9450: ST_TO_ADDR
// sTiger := false ;
9451: LD_ADDR_EXP 39
9455: PUSH
9456: LD_INT 0
9458: ST_TO_ADDR
// sBomb := false ;
9459: LD_ADDR_EXP 40
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// sWound := false ;
9467: LD_ADDR_EXP 48
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// sBetray := false ;
9475: LD_ADDR_EXP 52
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// sContamin := false ;
9483: LD_ADDR_EXP 53
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// sOil := false ;
9491: LD_ADDR_EXP 55
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// sStu := false ;
9499: LD_ADDR_EXP 59
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// sBazooka := false ;
9507: LD_ADDR_EXP 62
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// sMortar := false ;
9515: LD_ADDR_EXP 63
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// sRanger := false ;
9523: LD_ADDR_EXP 73
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// sComputer := false ;
9531: LD_ADDR_EXP 74
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// s30 := false ;
9539: LD_ADDR_EXP 75
9543: PUSH
9544: LD_INT 0
9546: ST_TO_ADDR
// s60 := false ;
9547: LD_ADDR_EXP 76
9551: PUSH
9552: LD_INT 0
9554: ST_TO_ADDR
// end ;
9555: LD_VAR 0 1
9559: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
// result := [ ] ;
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: EMPTY
9575: ST_TO_ADDR
// if campaign_id = 1 then
9576: LD_OWVAR 69
9580: PUSH
9581: LD_INT 1
9583: EQUAL
9584: IFFALSE 12750
// begin case mission_number of 1 :
9586: LD_OWVAR 70
9590: PUSH
9591: LD_INT 1
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9675
9599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 11
9613: PUSH
9614: LD_INT 12
9616: PUSH
9617: LD_INT 15
9619: PUSH
9620: LD_INT 16
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 26
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: ST_TO_ADDR
9673: GO 12748
9675: LD_INT 2
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9767
9683: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9684: LD_ADDR_VAR 0 2
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 15
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 101
9729: PUSH
9730: LD_INT 102
9732: PUSH
9733: LD_INT 105
9735: PUSH
9736: LD_INT 106
9738: PUSH
9739: LD_INT 108
9741: PUSH
9742: LD_INT 116
9744: PUSH
9745: LD_INT 117
9747: PUSH
9748: LD_INT 118
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: ST_TO_ADDR
9765: GO 12748
9767: LD_INT 3
9769: DOUBLE
9770: EQUAL
9771: IFTRUE 9775
9773: GO 9863
9775: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 11
9792: PUSH
9793: LD_INT 12
9795: PUSH
9796: LD_INT 15
9798: PUSH
9799: LD_INT 16
9801: PUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 36
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 101
9825: PUSH
9826: LD_INT 102
9828: PUSH
9829: LD_INT 105
9831: PUSH
9832: LD_INT 106
9834: PUSH
9835: LD_INT 108
9837: PUSH
9838: LD_INT 116
9840: PUSH
9841: LD_INT 117
9843: PUSH
9844: LD_INT 118
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: ST_TO_ADDR
9861: GO 12748
9863: LD_INT 4
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9967
9871: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9872: LD_ADDR_VAR 0 2
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 4
9882: PUSH
9883: LD_INT 5
9885: PUSH
9886: LD_INT 8
9888: PUSH
9889: LD_INT 11
9891: PUSH
9892: LD_INT 12
9894: PUSH
9895: LD_INT 15
9897: PUSH
9898: LD_INT 16
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 23
9906: PUSH
9907: LD_INT 26
9909: PUSH
9910: LD_INT 36
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 105
9935: PUSH
9936: LD_INT 106
9938: PUSH
9939: LD_INT 108
9941: PUSH
9942: LD_INT 116
9944: PUSH
9945: LD_INT 117
9947: PUSH
9948: LD_INT 118
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: ST_TO_ADDR
9965: GO 12748
9967: LD_INT 5
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10087
9975: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 4
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 8
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 15
10004: PUSH
10005: LD_INT 16
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 23
10013: PUSH
10014: LD_INT 25
10016: PUSH
10017: LD_INT 26
10019: PUSH
10020: LD_INT 36
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 101
10041: PUSH
10042: LD_INT 102
10044: PUSH
10045: LD_INT 105
10047: PUSH
10048: LD_INT 106
10050: PUSH
10051: LD_INT 108
10053: PUSH
10054: LD_INT 109
10056: PUSH
10057: LD_INT 112
10059: PUSH
10060: LD_INT 116
10062: PUSH
10063: LD_INT 117
10065: PUSH
10066: LD_INT 118
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: ST_TO_ADDR
10085: GO 12748
10087: LD_INT 6
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10227
10095: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10096: LD_ADDR_VAR 0 2
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 4
10106: PUSH
10107: LD_INT 5
10109: PUSH
10110: LD_INT 6
10112: PUSH
10113: LD_INT 8
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 15
10124: PUSH
10125: LD_INT 16
10127: PUSH
10128: LD_INT 20
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 22
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 26
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 31
10151: PUSH
10152: LD_INT 32
10154: PUSH
10155: LD_INT 36
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 101
10181: PUSH
10182: LD_INT 102
10184: PUSH
10185: LD_INT 105
10187: PUSH
10188: LD_INT 106
10190: PUSH
10191: LD_INT 108
10193: PUSH
10194: LD_INT 109
10196: PUSH
10197: LD_INT 112
10199: PUSH
10200: LD_INT 116
10202: PUSH
10203: LD_INT 117
10205: PUSH
10206: LD_INT 118
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: ST_TO_ADDR
10225: GO 12748
10227: LD_INT 7
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10347
10235: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: LD_INT 5
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: LD_INT 11
10255: PUSH
10256: LD_INT 12
10258: PUSH
10259: LD_INT 15
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 101
10301: PUSH
10302: LD_INT 102
10304: PUSH
10305: LD_INT 103
10307: PUSH
10308: LD_INT 105
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 112
10319: PUSH
10320: LD_INT 116
10322: PUSH
10323: LD_INT 117
10325: PUSH
10326: LD_INT 118
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 12748
10347: LD_INT 8
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10495
10355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 4
10366: PUSH
10367: LD_INT 5
10369: PUSH
10370: LD_INT 6
10372: PUSH
10373: LD_INT 7
10375: PUSH
10376: LD_INT 8
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 12
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 20
10393: PUSH
10394: LD_INT 21
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 23
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: LD_INT 30
10411: PUSH
10412: LD_INT 31
10414: PUSH
10415: LD_INT 32
10417: PUSH
10418: LD_INT 36
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 101
10445: PUSH
10446: LD_INT 102
10448: PUSH
10449: LD_INT 103
10451: PUSH
10452: LD_INT 105
10454: PUSH
10455: LD_INT 106
10457: PUSH
10458: LD_INT 108
10460: PUSH
10461: LD_INT 109
10463: PUSH
10464: LD_INT 112
10466: PUSH
10467: LD_INT 116
10469: PUSH
10470: LD_INT 117
10472: PUSH
10473: LD_INT 118
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: ST_TO_ADDR
10493: GO 12748
10495: LD_INT 9
10497: DOUBLE
10498: EQUAL
10499: IFTRUE 10503
10501: GO 10651
10503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: LD_INT 6
10520: PUSH
10521: LD_INT 7
10523: PUSH
10524: LD_INT 8
10526: PUSH
10527: LD_INT 11
10529: PUSH
10530: LD_INT 12
10532: PUSH
10533: LD_INT 15
10535: PUSH
10536: LD_INT 16
10538: PUSH
10539: LD_INT 20
10541: PUSH
10542: LD_INT 21
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 25
10553: PUSH
10554: LD_INT 26
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 30
10562: PUSH
10563: LD_INT 31
10565: PUSH
10566: LD_INT 32
10568: PUSH
10569: LD_INT 36
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 103
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 109
10615: PUSH
10616: LD_INT 112
10618: PUSH
10619: LD_INT 114
10621: PUSH
10622: LD_INT 116
10624: PUSH
10625: LD_INT 117
10627: PUSH
10628: LD_INT 118
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 12748
10651: LD_INT 10
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10855
10659: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10660: LD_ADDR_VAR 0 2
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 6
10676: PUSH
10677: LD_INT 7
10679: PUSH
10680: LD_INT 8
10682: PUSH
10683: LD_INT 9
10685: PUSH
10686: LD_INT 10
10688: PUSH
10689: LD_INT 11
10691: PUSH
10692: LD_INT 12
10694: PUSH
10695: LD_INT 13
10697: PUSH
10698: LD_INT 14
10700: PUSH
10701: LD_INT 15
10703: PUSH
10704: LD_INT 16
10706: PUSH
10707: LD_INT 17
10709: PUSH
10710: LD_INT 18
10712: PUSH
10713: LD_INT 19
10715: PUSH
10716: LD_INT 20
10718: PUSH
10719: LD_INT 21
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_INT 23
10727: PUSH
10728: LD_INT 24
10730: PUSH
10731: LD_INT 25
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: LD_INT 32
10748: PUSH
10749: LD_INT 36
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 101
10785: PUSH
10786: LD_INT 102
10788: PUSH
10789: LD_INT 103
10791: PUSH
10792: LD_INT 104
10794: PUSH
10795: LD_INT 105
10797: PUSH
10798: LD_INT 106
10800: PUSH
10801: LD_INT 107
10803: PUSH
10804: LD_INT 108
10806: PUSH
10807: LD_INT 109
10809: PUSH
10810: LD_INT 110
10812: PUSH
10813: LD_INT 111
10815: PUSH
10816: LD_INT 112
10818: PUSH
10819: LD_INT 114
10821: PUSH
10822: LD_INT 116
10824: PUSH
10825: LD_INT 117
10827: PUSH
10828: LD_INT 118
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: ST_TO_ADDR
10853: GO 12748
10855: LD_INT 11
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 11067
10863: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 3
10874: PUSH
10875: LD_INT 4
10877: PUSH
10878: LD_INT 5
10880: PUSH
10881: LD_INT 6
10883: PUSH
10884: LD_INT 7
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: LD_INT 9
10892: PUSH
10893: LD_INT 10
10895: PUSH
10896: LD_INT 11
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: LD_INT 13
10904: PUSH
10905: LD_INT 14
10907: PUSH
10908: LD_INT 15
10910: PUSH
10911: LD_INT 16
10913: PUSH
10914: LD_INT 17
10916: PUSH
10917: LD_INT 18
10919: PUSH
10920: LD_INT 19
10922: PUSH
10923: LD_INT 20
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 23
10934: PUSH
10935: LD_INT 24
10937: PUSH
10938: LD_INT 25
10940: PUSH
10941: LD_INT 26
10943: PUSH
10944: LD_INT 28
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 102
11000: PUSH
11001: LD_INT 103
11003: PUSH
11004: LD_INT 104
11006: PUSH
11007: LD_INT 105
11009: PUSH
11010: LD_INT 106
11012: PUSH
11013: LD_INT 107
11015: PUSH
11016: LD_INT 108
11018: PUSH
11019: LD_INT 109
11021: PUSH
11022: LD_INT 110
11024: PUSH
11025: LD_INT 111
11027: PUSH
11028: LD_INT 112
11030: PUSH
11031: LD_INT 114
11033: PUSH
11034: LD_INT 116
11036: PUSH
11037: LD_INT 117
11039: PUSH
11040: LD_INT 118
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: ST_TO_ADDR
11065: GO 12748
11067: LD_INT 12
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11295
11075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: LD_INT 4
11092: PUSH
11093: LD_INT 5
11095: PUSH
11096: LD_INT 6
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: LD_INT 8
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: LD_INT 10
11110: PUSH
11111: LD_INT 11
11113: PUSH
11114: LD_INT 12
11116: PUSH
11117: LD_INT 13
11119: PUSH
11120: LD_INT 14
11122: PUSH
11123: LD_INT 15
11125: PUSH
11126: LD_INT 16
11128: PUSH
11129: LD_INT 17
11131: PUSH
11132: LD_INT 18
11134: PUSH
11135: LD_INT 19
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_INT 23
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 26
11158: PUSH
11159: LD_INT 27
11161: PUSH
11162: LD_INT 28
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 31
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: LD_INT 33
11176: PUSH
11177: LD_INT 34
11179: PUSH
11180: LD_INT 36
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 102
11224: PUSH
11225: LD_INT 103
11227: PUSH
11228: LD_INT 104
11230: PUSH
11231: LD_INT 105
11233: PUSH
11234: LD_INT 106
11236: PUSH
11237: LD_INT 107
11239: PUSH
11240: LD_INT 108
11242: PUSH
11243: LD_INT 109
11245: PUSH
11246: LD_INT 110
11248: PUSH
11249: LD_INT 111
11251: PUSH
11252: LD_INT 112
11254: PUSH
11255: LD_INT 113
11257: PUSH
11258: LD_INT 114
11260: PUSH
11261: LD_INT 116
11263: PUSH
11264: LD_INT 117
11266: PUSH
11267: LD_INT 118
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: ST_TO_ADDR
11293: GO 12748
11295: LD_INT 13
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11511
11303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: LD_INT 5
11323: PUSH
11324: LD_INT 8
11326: PUSH
11327: LD_INT 9
11329: PUSH
11330: LD_INT 10
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 15
11344: PUSH
11345: LD_INT 16
11347: PUSH
11348: LD_INT 17
11350: PUSH
11351: LD_INT 18
11353: PUSH
11354: LD_INT 19
11356: PUSH
11357: LD_INT 20
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 23
11368: PUSH
11369: LD_INT 24
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: LD_INT 27
11380: PUSH
11381: LD_INT 28
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 36
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 101
11437: PUSH
11438: LD_INT 102
11440: PUSH
11441: LD_INT 103
11443: PUSH
11444: LD_INT 104
11446: PUSH
11447: LD_INT 105
11449: PUSH
11450: LD_INT 106
11452: PUSH
11453: LD_INT 107
11455: PUSH
11456: LD_INT 108
11458: PUSH
11459: LD_INT 109
11461: PUSH
11462: LD_INT 110
11464: PUSH
11465: LD_INT 111
11467: PUSH
11468: LD_INT 112
11470: PUSH
11471: LD_INT 113
11473: PUSH
11474: LD_INT 114
11476: PUSH
11477: LD_INT 116
11479: PUSH
11480: LD_INT 117
11482: PUSH
11483: LD_INT 118
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 12748
11511: LD_INT 14
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11743
11519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: LD_INT 5
11539: PUSH
11540: LD_INT 6
11542: PUSH
11543: LD_INT 7
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: LD_INT 9
11551: PUSH
11552: LD_INT 10
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: LD_INT 12
11560: PUSH
11561: LD_INT 13
11563: PUSH
11564: LD_INT 14
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 17
11575: PUSH
11576: LD_INT 18
11578: PUSH
11579: LD_INT 19
11581: PUSH
11582: LD_INT 20
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 23
11593: PUSH
11594: LD_INT 24
11596: PUSH
11597: LD_INT 25
11599: PUSH
11600: LD_INT 26
11602: PUSH
11603: LD_INT 27
11605: PUSH
11606: LD_INT 28
11608: PUSH
11609: LD_INT 29
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 31
11617: PUSH
11618: LD_INT 32
11620: PUSH
11621: LD_INT 33
11623: PUSH
11624: LD_INT 34
11626: PUSH
11627: LD_INT 36
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 101
11669: PUSH
11670: LD_INT 102
11672: PUSH
11673: LD_INT 103
11675: PUSH
11676: LD_INT 104
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 107
11687: PUSH
11688: LD_INT 108
11690: PUSH
11691: LD_INT 109
11693: PUSH
11694: LD_INT 110
11696: PUSH
11697: LD_INT 111
11699: PUSH
11700: LD_INT 112
11702: PUSH
11703: LD_INT 113
11705: PUSH
11706: LD_INT 114
11708: PUSH
11709: LD_INT 116
11711: PUSH
11712: LD_INT 117
11714: PUSH
11715: LD_INT 118
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: ST_TO_ADDR
11741: GO 12748
11743: LD_INT 15
11745: DOUBLE
11746: EQUAL
11747: IFTRUE 11751
11749: GO 11975
11751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11752: LD_ADDR_VAR 0 2
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: LD_INT 3
11765: PUSH
11766: LD_INT 4
11768: PUSH
11769: LD_INT 5
11771: PUSH
11772: LD_INT 6
11774: PUSH
11775: LD_INT 7
11777: PUSH
11778: LD_INT 8
11780: PUSH
11781: LD_INT 9
11783: PUSH
11784: LD_INT 10
11786: PUSH
11787: LD_INT 11
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: LD_INT 13
11795: PUSH
11796: LD_INT 14
11798: PUSH
11799: LD_INT 15
11801: PUSH
11802: LD_INT 16
11804: PUSH
11805: LD_INT 17
11807: PUSH
11808: LD_INT 18
11810: PUSH
11811: LD_INT 19
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 23
11825: PUSH
11826: LD_INT 24
11828: PUSH
11829: LD_INT 25
11831: PUSH
11832: LD_INT 26
11834: PUSH
11835: LD_INT 27
11837: PUSH
11838: LD_INT 28
11840: PUSH
11841: LD_INT 29
11843: PUSH
11844: LD_INT 30
11846: PUSH
11847: LD_INT 31
11849: PUSH
11850: LD_INT 32
11852: PUSH
11853: LD_INT 33
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_INT 36
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 101
11901: PUSH
11902: LD_INT 102
11904: PUSH
11905: LD_INT 103
11907: PUSH
11908: LD_INT 104
11910: PUSH
11911: LD_INT 105
11913: PUSH
11914: LD_INT 106
11916: PUSH
11917: LD_INT 107
11919: PUSH
11920: LD_INT 108
11922: PUSH
11923: LD_INT 109
11925: PUSH
11926: LD_INT 110
11928: PUSH
11929: LD_INT 111
11931: PUSH
11932: LD_INT 112
11934: PUSH
11935: LD_INT 113
11937: PUSH
11938: LD_INT 114
11940: PUSH
11941: LD_INT 116
11943: PUSH
11944: LD_INT 117
11946: PUSH
11947: LD_INT 118
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: ST_TO_ADDR
11973: GO 12748
11975: LD_INT 16
11977: DOUBLE
11978: EQUAL
11979: IFTRUE 11983
11981: GO 12119
11983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 4
11994: PUSH
11995: LD_INT 5
11997: PUSH
11998: LD_INT 7
12000: PUSH
12001: LD_INT 11
12003: PUSH
12004: LD_INT 12
12006: PUSH
12007: LD_INT 15
12009: PUSH
12010: LD_INT 16
12012: PUSH
12013: LD_INT 20
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 23
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 26
12030: PUSH
12031: LD_INT 30
12033: PUSH
12034: LD_INT 31
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: LD_INT 33
12042: PUSH
12043: LD_INT 34
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 101
12069: PUSH
12070: LD_INT 102
12072: PUSH
12073: LD_INT 103
12075: PUSH
12076: LD_INT 106
12078: PUSH
12079: LD_INT 108
12081: PUSH
12082: LD_INT 112
12084: PUSH
12085: LD_INT 113
12087: PUSH
12088: LD_INT 114
12090: PUSH
12091: LD_INT 116
12093: PUSH
12094: LD_INT 117
12096: PUSH
12097: LD_INT 118
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: ST_TO_ADDR
12117: GO 12748
12119: LD_INT 17
12121: DOUBLE
12122: EQUAL
12123: IFTRUE 12127
12125: GO 12351
12127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 6
12150: PUSH
12151: LD_INT 7
12153: PUSH
12154: LD_INT 8
12156: PUSH
12157: LD_INT 9
12159: PUSH
12160: LD_INT 10
12162: PUSH
12163: LD_INT 11
12165: PUSH
12166: LD_INT 12
12168: PUSH
12169: LD_INT 13
12171: PUSH
12172: LD_INT 14
12174: PUSH
12175: LD_INT 15
12177: PUSH
12178: LD_INT 16
12180: PUSH
12181: LD_INT 17
12183: PUSH
12184: LD_INT 18
12186: PUSH
12187: LD_INT 19
12189: PUSH
12190: LD_INT 20
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 23
12201: PUSH
12202: LD_INT 24
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 26
12210: PUSH
12211: LD_INT 27
12213: PUSH
12214: LD_INT 28
12216: PUSH
12217: LD_INT 29
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 31
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 36
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 101
12277: PUSH
12278: LD_INT 102
12280: PUSH
12281: LD_INT 103
12283: PUSH
12284: LD_INT 104
12286: PUSH
12287: LD_INT 105
12289: PUSH
12290: LD_INT 106
12292: PUSH
12293: LD_INT 107
12295: PUSH
12296: LD_INT 108
12298: PUSH
12299: LD_INT 109
12301: PUSH
12302: LD_INT 110
12304: PUSH
12305: LD_INT 111
12307: PUSH
12308: LD_INT 112
12310: PUSH
12311: LD_INT 113
12313: PUSH
12314: LD_INT 114
12316: PUSH
12317: LD_INT 116
12319: PUSH
12320: LD_INT 117
12322: PUSH
12323: LD_INT 118
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
12349: GO 12748
12351: LD_INT 18
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12507
12359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: LD_INT 4
12370: PUSH
12371: LD_INT 5
12373: PUSH
12374: LD_INT 7
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 33
12418: PUSH
12419: LD_INT 34
12421: PUSH
12422: LD_INT 35
12424: PUSH
12425: LD_INT 36
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 101
12453: PUSH
12454: LD_INT 102
12456: PUSH
12457: LD_INT 103
12459: PUSH
12460: LD_INT 106
12462: PUSH
12463: LD_INT 108
12465: PUSH
12466: LD_INT 112
12468: PUSH
12469: LD_INT 113
12471: PUSH
12472: LD_INT 114
12474: PUSH
12475: LD_INT 115
12477: PUSH
12478: LD_INT 116
12480: PUSH
12481: LD_INT 117
12483: PUSH
12484: LD_INT 118
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12748
12507: LD_INT 19
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12747
12515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 7
12541: PUSH
12542: LD_INT 8
12544: PUSH
12545: LD_INT 9
12547: PUSH
12548: LD_INT 10
12550: PUSH
12551: LD_INT 11
12553: PUSH
12554: LD_INT 12
12556: PUSH
12557: LD_INT 13
12559: PUSH
12560: LD_INT 14
12562: PUSH
12563: LD_INT 15
12565: PUSH
12566: LD_INT 16
12568: PUSH
12569: LD_INT 17
12571: PUSH
12572: LD_INT 18
12574: PUSH
12575: LD_INT 19
12577: PUSH
12578: LD_INT 20
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_INT 23
12589: PUSH
12590: LD_INT 24
12592: PUSH
12593: LD_INT 25
12595: PUSH
12596: LD_INT 26
12598: PUSH
12599: LD_INT 27
12601: PUSH
12602: LD_INT 28
12604: PUSH
12605: LD_INT 29
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 31
12613: PUSH
12614: LD_INT 32
12616: PUSH
12617: LD_INT 33
12619: PUSH
12620: LD_INT 34
12622: PUSH
12623: LD_INT 35
12625: PUSH
12626: LD_INT 36
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 101
12669: PUSH
12670: LD_INT 102
12672: PUSH
12673: LD_INT 103
12675: PUSH
12676: LD_INT 104
12678: PUSH
12679: LD_INT 105
12681: PUSH
12682: LD_INT 106
12684: PUSH
12685: LD_INT 107
12687: PUSH
12688: LD_INT 108
12690: PUSH
12691: LD_INT 109
12693: PUSH
12694: LD_INT 110
12696: PUSH
12697: LD_INT 111
12699: PUSH
12700: LD_INT 112
12702: PUSH
12703: LD_INT 113
12705: PUSH
12706: LD_INT 114
12708: PUSH
12709: LD_INT 115
12711: PUSH
12712: LD_INT 116
12714: PUSH
12715: LD_INT 117
12717: PUSH
12718: LD_INT 118
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: ST_TO_ADDR
12745: GO 12748
12747: POP
// end else
12748: GO 12979
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 3
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: LD_INT 5
12769: PUSH
12770: LD_INT 6
12772: PUSH
12773: LD_INT 7
12775: PUSH
12776: LD_INT 8
12778: PUSH
12779: LD_INT 9
12781: PUSH
12782: LD_INT 10
12784: PUSH
12785: LD_INT 11
12787: PUSH
12788: LD_INT 12
12790: PUSH
12791: LD_INT 13
12793: PUSH
12794: LD_INT 14
12796: PUSH
12797: LD_INT 15
12799: PUSH
12800: LD_INT 16
12802: PUSH
12803: LD_INT 17
12805: PUSH
12806: LD_INT 18
12808: PUSH
12809: LD_INT 19
12811: PUSH
12812: LD_INT 20
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 23
12823: PUSH
12824: LD_INT 24
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: LD_INT 27
12835: PUSH
12836: LD_INT 28
12838: PUSH
12839: LD_INT 29
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 31
12847: PUSH
12848: LD_INT 32
12850: PUSH
12851: LD_INT 33
12853: PUSH
12854: LD_INT 34
12856: PUSH
12857: LD_INT 35
12859: PUSH
12860: LD_INT 36
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 101
12903: PUSH
12904: LD_INT 102
12906: PUSH
12907: LD_INT 103
12909: PUSH
12910: LD_INT 104
12912: PUSH
12913: LD_INT 105
12915: PUSH
12916: LD_INT 106
12918: PUSH
12919: LD_INT 107
12921: PUSH
12922: LD_INT 108
12924: PUSH
12925: LD_INT 109
12927: PUSH
12928: LD_INT 110
12930: PUSH
12931: LD_INT 111
12933: PUSH
12934: LD_INT 112
12936: PUSH
12937: LD_INT 113
12939: PUSH
12940: LD_INT 114
12942: PUSH
12943: LD_INT 115
12945: PUSH
12946: LD_INT 116
12948: PUSH
12949: LD_INT 117
12951: PUSH
12952: LD_INT 118
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: ST_TO_ADDR
// if result then
12979: LD_VAR 0 2
12983: IFFALSE 13769
// begin normal :=  ;
12985: LD_ADDR_VAR 0 5
12989: PUSH
12990: LD_STRING 
12992: ST_TO_ADDR
// hardcore :=  ;
12993: LD_ADDR_VAR 0 6
12997: PUSH
12998: LD_STRING 
13000: ST_TO_ADDR
// active :=  ;
13001: LD_ADDR_VAR 0 7
13005: PUSH
13006: LD_STRING 
13008: ST_TO_ADDR
// for i = 1 to normalCounter do
13009: LD_ADDR_VAR 0 8
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_EXP 21
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13126
// begin tmp := 0 ;
13027: LD_ADDR_VAR 0 3
13031: PUSH
13032: LD_STRING 0
13034: ST_TO_ADDR
// if result [ 1 ] then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: IFFALSE 13108
// if result [ 1 ] [ 1 ] = i then
13045: LD_VAR 0 2
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PUSH
13058: LD_VAR 0 8
13062: EQUAL
13063: IFFALSE 13108
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: LD_VAR 0 2
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 3
13094: PPUSH
13095: CALL_OW 1
13099: ST_TO_ADDR
// tmp := 1 ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_STRING 1
13107: ST_TO_ADDR
// end ; normal := normal & tmp ;
13108: LD_ADDR_VAR 0 5
13112: PUSH
13113: LD_VAR 0 5
13117: PUSH
13118: LD_VAR 0 3
13122: STR
13123: ST_TO_ADDR
// end ;
13124: GO 13024
13126: POP
13127: POP
// for i = 1 to hardcoreCounter do
13128: LD_ADDR_VAR 0 8
13132: PUSH
13133: DOUBLE
13134: LD_INT 1
13136: DEC
13137: ST_TO_ADDR
13138: LD_EXP 22
13142: PUSH
13143: FOR_TO
13144: IFFALSE 13249
// begin tmp := 0 ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_STRING 0
13153: ST_TO_ADDR
// if result [ 2 ] then
13154: LD_VAR 0 2
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: IFFALSE 13231
// if result [ 2 ] [ 1 ] = 100 + i then
13164: LD_VAR 0 2
13168: PUSH
13169: LD_INT 2
13171: ARRAY
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PUSH
13177: LD_INT 100
13179: PUSH
13180: LD_VAR 0 8
13184: PLUS
13185: EQUAL
13186: IFFALSE 13231
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 2
13197: PPUSH
13198: LD_INT 2
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 2
13208: ARRAY
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 3
13217: PPUSH
13218: CALL_OW 1
13222: ST_TO_ADDR
// tmp := 1 ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_STRING 1
13230: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13231: LD_ADDR_VAR 0 6
13235: PUSH
13236: LD_VAR 0 6
13240: PUSH
13241: LD_VAR 0 3
13245: STR
13246: ST_TO_ADDR
// end ;
13247: GO 13143
13249: POP
13250: POP
// if isGameLoad then
13251: LD_VAR 0 1
13255: IFFALSE 13730
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_EXP 25
13266: PUSH
13267: LD_EXP 24
13271: PUSH
13272: LD_EXP 26
13276: PUSH
13277: LD_EXP 23
13281: PUSH
13282: LD_EXP 27
13286: PUSH
13287: LD_EXP 28
13291: PUSH
13292: LD_EXP 29
13296: PUSH
13297: LD_EXP 30
13301: PUSH
13302: LD_EXP 31
13306: PUSH
13307: LD_EXP 32
13311: PUSH
13312: LD_EXP 33
13316: PUSH
13317: LD_EXP 34
13321: PUSH
13322: LD_EXP 35
13326: PUSH
13327: LD_EXP 36
13331: PUSH
13332: LD_EXP 44
13336: PUSH
13337: LD_EXP 45
13341: PUSH
13342: LD_EXP 46
13346: PUSH
13347: LD_EXP 47
13351: PUSH
13352: LD_EXP 49
13356: PUSH
13357: LD_EXP 50
13361: PUSH
13362: LD_EXP 51
13366: PUSH
13367: LD_EXP 54
13371: PUSH
13372: LD_EXP 56
13376: PUSH
13377: LD_EXP 57
13381: PUSH
13382: LD_EXP 58
13386: PUSH
13387: LD_EXP 60
13391: PUSH
13392: LD_EXP 61
13396: PUSH
13397: LD_EXP 64
13401: PUSH
13402: LD_EXP 65
13406: PUSH
13407: LD_EXP 66
13411: PUSH
13412: LD_EXP 67
13416: PUSH
13417: LD_EXP 68
13421: PUSH
13422: LD_EXP 69
13426: PUSH
13427: LD_EXP 70
13431: PUSH
13432: LD_EXP 71
13436: PUSH
13437: LD_EXP 72
13441: PUSH
13442: LD_EXP 37
13446: PUSH
13447: LD_EXP 38
13451: PUSH
13452: LD_EXP 41
13456: PUSH
13457: LD_EXP 42
13461: PUSH
13462: LD_EXP 43
13466: PUSH
13467: LD_EXP 39
13471: PUSH
13472: LD_EXP 40
13476: PUSH
13477: LD_EXP 48
13481: PUSH
13482: LD_EXP 52
13486: PUSH
13487: LD_EXP 53
13491: PUSH
13492: LD_EXP 55
13496: PUSH
13497: LD_EXP 59
13501: PUSH
13502: LD_EXP 62
13506: PUSH
13507: LD_EXP 63
13511: PUSH
13512: LD_EXP 73
13516: PUSH
13517: LD_EXP 74
13521: PUSH
13522: LD_EXP 75
13526: PUSH
13527: LD_EXP 76
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// tmp :=  ;
13588: LD_ADDR_VAR 0 3
13592: PUSH
13593: LD_STRING 
13595: ST_TO_ADDR
// for i = 1 to normalCounter do
13596: LD_ADDR_VAR 0 8
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_EXP 21
13610: PUSH
13611: FOR_TO
13612: IFFALSE 13648
// begin if flags [ i ] then
13614: LD_VAR 0 4
13618: PUSH
13619: LD_VAR 0 8
13623: ARRAY
13624: IFFALSE 13646
// tmp := tmp & i & ; ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: LD_VAR 0 8
13640: STR
13641: PUSH
13642: LD_STRING ;
13644: STR
13645: ST_TO_ADDR
// end ;
13646: GO 13611
13648: POP
13649: POP
// for i = 1 to hardcoreCounter do
13650: LD_ADDR_VAR 0 8
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_EXP 22
13664: PUSH
13665: FOR_TO
13666: IFFALSE 13712
// begin if flags [ normalCounter + i ] then
13668: LD_VAR 0 4
13672: PUSH
13673: LD_EXP 21
13677: PUSH
13678: LD_VAR 0 8
13682: PLUS
13683: ARRAY
13684: IFFALSE 13710
// tmp := tmp & ( 100 + i ) & ; ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_VAR 0 3
13695: PUSH
13696: LD_INT 100
13698: PUSH
13699: LD_VAR 0 8
13703: PLUS
13704: STR
13705: PUSH
13706: LD_STRING ;
13708: STR
13709: ST_TO_ADDR
// end ;
13710: GO 13665
13712: POP
13713: POP
// if tmp then
13714: LD_VAR 0 3
13718: IFFALSE 13730
// active := tmp ;
13720: LD_ADDR_VAR 0 7
13724: PUSH
13725: LD_VAR 0 3
13729: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13730: LD_STRING getStreamItemsFromMission("
13732: PUSH
13733: LD_VAR 0 5
13737: STR
13738: PUSH
13739: LD_STRING ","
13741: STR
13742: PUSH
13743: LD_VAR 0 6
13747: STR
13748: PUSH
13749: LD_STRING ","
13751: STR
13752: PUSH
13753: LD_VAR 0 7
13757: STR
13758: PUSH
13759: LD_STRING ")
13761: STR
13762: PPUSH
13763: CALL_OW 559
// end else
13767: GO 13776
// ToLua ( getStreamItemsFromMission("","","") ) ;
13769: LD_STRING getStreamItemsFromMission("","","")
13771: PPUSH
13772: CALL_OW 559
// end ;
13776: LD_VAR 0 2
13780: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13781: LD_EXP 20
13785: PUSH
13786: LD_EXP 25
13790: AND
13791: IFFALSE 13915
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
// begin enable ;
13800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_OWVAR 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 2
13820: PUSH
13821: LD_INT 34
13823: PUSH
13824: LD_INT 7
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 34
13833: PUSH
13834: LD_INT 45
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 34
13843: PUSH
13844: LD_INT 28
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 34
13853: PUSH
13854: LD_INT 47
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: ST_TO_ADDR
// if not tmp then
13877: LD_VAR 0 2
13881: NOT
13882: IFFALSE 13886
// exit ;
13884: GO 13915
// for i in tmp do
13886: LD_ADDR_VAR 0 1
13890: PUSH
13891: LD_VAR 0 2
13895: PUSH
13896: FOR_IN
13897: IFFALSE 13913
// begin SetLives ( i , 0 ) ;
13899: LD_VAR 0 1
13903: PPUSH
13904: LD_INT 0
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: GO 13896
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13918: LD_EXP 20
13922: PUSH
13923: LD_EXP 26
13927: AND
13928: IFFALSE 14012
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin enable ;
13937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: ST_TO_ADDR
// if not tmp then
13974: LD_VAR 0 2
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14012
// for i in tmp do
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: LD_VAR 0 2
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14010
// begin SetLives ( i , 0 ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL_OW 234
// end ;
14008: GO 13993
14010: POP
14011: POP
// end ;
14012: PPOPN 2
14014: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14015: LD_EXP 20
14019: PUSH
14020: LD_EXP 23
14024: AND
14025: IFFALSE 14118
14027: GO 14029
14029: DISABLE
14030: LD_INT 0
14032: PPUSH
// begin enable ;
14033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_OWVAR 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 25
14066: PUSH
14067: LD_INT 9
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 25
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PUSH
14099: FOR_IN
14100: IFFALSE 14116
// begin SetClass ( i , 1 ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 336
// end ;
14114: GO 14099
14116: POP
14117: POP
// end ;
14118: PPOPN 1
14120: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14121: LD_EXP 20
14125: PUSH
14126: LD_EXP 24
14130: AND
14131: PUSH
14132: LD_OWVAR 65
14136: PUSH
14137: LD_INT 7
14139: LESS
14140: AND
14141: IFFALSE 14155
14143: GO 14145
14145: DISABLE
// begin enable ;
14146: ENABLE
// game_speed := 7 ;
14147: LD_ADDR_OWVAR 65
14151: PUSH
14152: LD_INT 7
14154: ST_TO_ADDR
// end ;
14155: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14156: LD_EXP 20
14160: PUSH
14161: LD_EXP 27
14165: AND
14166: IFFALSE 14368
14168: GO 14170
14170: DISABLE
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
14175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 81
14183: PUSH
14184: LD_OWVAR 2
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: ST_TO_ADDR
// if not tmp then
14212: LD_VAR 0 3
14216: NOT
14217: IFFALSE 14221
// exit ;
14219: GO 14368
// if tmp > 5 then
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 5
14228: GREATER
14229: IFFALSE 14241
// k := 5 else
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_INT 5
14238: ST_TO_ADDR
14239: GO 14251
// k := tmp ;
14241: LD_ADDR_VAR 0 2
14245: PUSH
14246: LD_VAR 0 3
14250: ST_TO_ADDR
// for i := 1 to k do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_VAR 0 2
14265: PUSH
14266: FOR_TO
14267: IFFALSE 14366
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14269: LD_VAR 0 3
14273: PUSH
14274: LD_VAR 0 1
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 1
14284: PUSH
14285: LD_INT 4
14287: MOD
14288: PUSH
14289: LD_INT 1
14291: PLUS
14292: PPUSH
14293: CALL_OW 259
14297: PUSH
14298: LD_INT 10
14300: LESS
14301: IFFALSE 14364
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14303: LD_VAR 0 3
14307: PUSH
14308: LD_VAR 0 1
14312: ARRAY
14313: PPUSH
14314: LD_VAR 0 1
14318: PUSH
14319: LD_INT 4
14321: MOD
14322: PUSH
14323: LD_INT 1
14325: PLUS
14326: PPUSH
14327: LD_VAR 0 3
14331: PUSH
14332: LD_VAR 0 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 4
14345: MOD
14346: PUSH
14347: LD_INT 1
14349: PLUS
14350: PPUSH
14351: CALL_OW 259
14355: PUSH
14356: LD_INT 1
14358: PLUS
14359: PPUSH
14360: CALL_OW 237
14364: GO 14266
14366: POP
14367: POP
// end ;
14368: PPOPN 3
14370: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14371: LD_EXP 20
14375: PUSH
14376: LD_EXP 28
14380: AND
14381: IFFALSE 14401
14383: GO 14385
14385: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14386: LD_INT 4
14388: PPUSH
14389: LD_OWVAR 2
14393: PPUSH
14394: LD_INT 0
14396: PPUSH
14397: CALL_OW 324
14401: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14402: LD_EXP 20
14406: PUSH
14407: LD_EXP 57
14411: AND
14412: IFFALSE 14432
14414: GO 14416
14416: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14417: LD_INT 19
14419: PPUSH
14420: LD_OWVAR 2
14424: PPUSH
14425: LD_INT 0
14427: PPUSH
14428: CALL_OW 324
14432: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14433: LD_EXP 20
14437: PUSH
14438: LD_EXP 29
14442: AND
14443: IFFALSE 14545
14445: GO 14447
14447: DISABLE
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// begin enable ;
14452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_INT 22
14460: PUSH
14461: LD_OWVAR 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: LD_INT 34
14475: PUSH
14476: LD_INT 11
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 34
14485: PUSH
14486: LD_INT 30
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: ST_TO_ADDR
// if not tmp then
14507: LD_VAR 0 2
14511: NOT
14512: IFFALSE 14516
// exit ;
14514: GO 14545
// for i in tmp do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: LD_VAR 0 2
14525: PUSH
14526: FOR_IN
14527: IFFALSE 14543
// begin SetLives ( i , 0 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 0
14536: PPUSH
14537: CALL_OW 234
// end ;
14541: GO 14526
14543: POP
14544: POP
// end ;
14545: PPOPN 2
14547: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14548: LD_EXP 20
14552: PUSH
14553: LD_EXP 30
14557: AND
14558: IFFALSE 14578
14560: GO 14562
14562: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14563: LD_INT 32
14565: PPUSH
14566: LD_OWVAR 2
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 324
14578: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14579: LD_EXP 20
14583: PUSH
14584: LD_EXP 31
14588: AND
14589: IFFALSE 14770
14591: GO 14593
14593: DISABLE
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
14598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_OWVAR 2
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 33
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: ST_TO_ADDR
// if not tmp then
14635: LD_VAR 0 2
14639: NOT
14640: IFFALSE 14644
// exit ;
14642: GO 14770
// side := 0 ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 0
14651: ST_TO_ADDR
// for i := 1 to 8 do
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: DOUBLE
14658: LD_INT 1
14660: DEC
14661: ST_TO_ADDR
14662: LD_INT 8
14664: PUSH
14665: FOR_TO
14666: IFFALSE 14714
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14668: LD_OWVAR 2
14672: PUSH
14673: LD_VAR 0 1
14677: NONEQUAL
14678: PUSH
14679: LD_OWVAR 2
14683: PPUSH
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 81
14693: PUSH
14694: LD_INT 2
14696: EQUAL
14697: AND
14698: IFFALSE 14712
// begin side := i ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_VAR 0 1
14709: ST_TO_ADDR
// break ;
14710: GO 14714
// end ;
14712: GO 14665
14714: POP
14715: POP
// if not side then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14770
// for i := 1 to tmp do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: DOUBLE
14731: LD_INT 1
14733: DEC
14734: ST_TO_ADDR
14735: LD_VAR 0 2
14739: PUSH
14740: FOR_TO
14741: IFFALSE 14768
// if Prob ( 60 ) then
14743: LD_INT 60
14745: PPUSH
14746: CALL_OW 13
14750: IFFALSE 14766
// SetSide ( i , side ) ;
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: CALL_OW 235
14766: GO 14740
14768: POP
14769: POP
// end ;
14770: PPOPN 3
14772: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14773: LD_EXP 20
14777: PUSH
14778: LD_EXP 33
14782: AND
14783: IFFALSE 14902
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14900
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: LD_INT 4
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: IN
14876: IFFALSE 14898
// SetClass ( un , rand ( 1 , 4 ) ) ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 4
14888: PPUSH
14889: CALL_OW 12
14893: PPUSH
14894: CALL_OW 336
14898: GO 14845
14900: POP
14901: POP
// end ;
14902: PPOPN 1
14904: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14905: LD_EXP 20
14909: PUSH
14910: LD_EXP 32
14914: AND
14915: IFFALSE 14994
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_OWVAR 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: ST_TO_ADDR
// if not tmp then
14959: LD_VAR 0 1
14963: NOT
14964: IFFALSE 14968
// exit ;
14966: GO 14994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: PPUSH
14987: LD_INT 100
14989: PPUSH
14990: CALL_OW 234
// end ;
14994: PPOPN 1
14996: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14997: LD_EXP 20
15001: PUSH
15002: LD_EXP 34
15006: AND
15007: IFFALSE 15105
15009: GO 15011
15011: DISABLE
15012: LD_INT 0
15014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_OWVAR 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: ST_TO_ADDR
// if not tmp then
15051: LD_VAR 0 1
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15105
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15060: LD_VAR 0 1
15064: PUSH
15065: LD_INT 1
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL_OW 12
15077: ARRAY
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 4
15084: PPUSH
15085: CALL_OW 12
15089: PPUSH
15090: LD_INT 3000
15092: PPUSH
15093: LD_INT 9000
15095: PPUSH
15096: CALL_OW 12
15100: PPUSH
15101: CALL_OW 492
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15108: LD_EXP 20
15112: PUSH
15113: LD_EXP 35
15117: AND
15118: IFFALSE 15138
15120: GO 15122
15122: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15123: LD_INT 1
15125: PPUSH
15126: LD_OWVAR 2
15130: PPUSH
15131: LD_INT 0
15133: PPUSH
15134: CALL_OW 324
15138: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15139: LD_EXP 20
15143: PUSH
15144: LD_EXP 36
15148: AND
15149: IFFALSE 15232
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15158: LD_ADDR_VAR 0 2
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_OWVAR 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 21
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not tmp then
15194: LD_VAR 0 2
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15232
// for i in tmp do
15203: LD_ADDR_VAR 0 1
15207: PUSH
15208: LD_VAR 0 2
15212: PUSH
15213: FOR_IN
15214: IFFALSE 15230
// SetBLevel ( i , 10 ) ;
15216: LD_VAR 0 1
15220: PPUSH
15221: LD_INT 10
15223: PPUSH
15224: CALL_OW 241
15228: GO 15213
15230: POP
15231: POP
// end ;
15232: PPOPN 2
15234: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15235: LD_EXP 20
15239: PUSH
15240: LD_EXP 37
15244: AND
15245: IFFALSE 15356
15247: GO 15249
15249: DISABLE
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
15254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15255: LD_ADDR_VAR 0 3
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_OWVAR 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: ST_TO_ADDR
// if not tmp then
15291: LD_VAR 0 3
15295: NOT
15296: IFFALSE 15300
// exit ;
15298: GO 15356
// un := tmp [ rand ( 1 , tmp ) ] ;
15300: LD_ADDR_VAR 0 2
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: ST_TO_ADDR
// if Crawls ( un ) then
15324: LD_VAR 0 2
15328: PPUSH
15329: CALL_OW 318
15333: IFFALSE 15344
// ComWalk ( un ) ;
15335: LD_VAR 0 2
15339: PPUSH
15340: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15344: LD_VAR 0 2
15348: PPUSH
15349: LD_INT 5
15351: PPUSH
15352: CALL_OW 336
// end ;
15356: PPOPN 3
15358: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15359: LD_EXP 20
15363: PUSH
15364: LD_EXP 38
15368: AND
15369: PUSH
15370: LD_OWVAR 67
15374: PUSH
15375: LD_INT 4
15377: LESS
15378: AND
15379: IFFALSE 15398
15381: GO 15383
15383: DISABLE
// begin Difficulty := Difficulty + 1 ;
15384: LD_ADDR_OWVAR 67
15388: PUSH
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 1
15396: PLUS
15397: ST_TO_ADDR
// end ;
15398: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15399: LD_EXP 20
15403: PUSH
15404: LD_EXP 39
15408: AND
15409: IFFALSE 15512
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
// begin for i := 1 to 5 do
15417: LD_ADDR_VAR 0 1
15421: PUSH
15422: DOUBLE
15423: LD_INT 1
15425: DEC
15426: ST_TO_ADDR
15427: LD_INT 5
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15510
// begin uc_nation := nation_nature ;
15433: LD_ADDR_OWVAR 21
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_side := 0 ;
15441: LD_ADDR_OWVAR 20
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15449: LD_ADDR_OWVAR 29
15453: PUSH
15454: LD_INT 12
15456: PUSH
15457: LD_INT 12
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: ST_TO_ADDR
// hc_agressivity := 20 ;
15464: LD_ADDR_OWVAR 35
15468: PUSH
15469: LD_INT 20
15471: ST_TO_ADDR
// hc_class := class_tiger ;
15472: LD_ADDR_OWVAR 28
15476: PUSH
15477: LD_INT 14
15479: ST_TO_ADDR
// hc_gallery :=  ;
15480: LD_ADDR_OWVAR 33
15484: PUSH
15485: LD_STRING 
15487: ST_TO_ADDR
// hc_name :=  ;
15488: LD_ADDR_OWVAR 26
15492: PUSH
15493: LD_STRING 
15495: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15496: CALL_OW 44
15500: PPUSH
15501: LD_INT 0
15503: PPUSH
15504: CALL_OW 51
// end ;
15508: GO 15430
15510: POP
15511: POP
// end ;
15512: PPOPN 1
15514: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15515: LD_EXP 20
15519: PUSH
15520: LD_EXP 40
15524: AND
15525: IFFALSE 15534
15527: GO 15529
15529: DISABLE
// StreamSibBomb ;
15530: CALL 15535 0 0
15534: END
// export function StreamSibBomb ; var i , x , y ; begin
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
// result := false ;
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
// for i := 1 to 16 do
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_INT 16
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15762
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 10
15572: PUSH
15573: LD_INT 20
15575: PUSH
15576: LD_INT 30
15578: PUSH
15579: LD_INT 40
15581: PUSH
15582: LD_INT 50
15584: PUSH
15585: LD_INT 60
15587: PUSH
15588: LD_INT 70
15590: PUSH
15591: LD_INT 80
15593: PUSH
15594: LD_INT 90
15596: PUSH
15597: LD_INT 100
15599: PUSH
15600: LD_INT 110
15602: PUSH
15603: LD_INT 120
15605: PUSH
15606: LD_INT 130
15608: PUSH
15609: LD_INT 140
15611: PUSH
15612: LD_INT 150
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_INT 15
15637: PPUSH
15638: CALL_OW 12
15642: ARRAY
15643: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15644: LD_ADDR_VAR 0 4
15648: PUSH
15649: LD_INT 10
15651: PUSH
15652: LD_INT 20
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 40
15660: PUSH
15661: LD_INT 50
15663: PUSH
15664: LD_INT 60
15666: PUSH
15667: LD_INT 70
15669: PUSH
15670: LD_INT 80
15672: PUSH
15673: LD_INT 90
15675: PUSH
15676: LD_INT 100
15678: PUSH
15679: LD_INT 110
15681: PUSH
15682: LD_INT 120
15684: PUSH
15685: LD_INT 130
15687: PUSH
15688: LD_INT 140
15690: PUSH
15691: LD_INT 150
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_INT 15
15716: PPUSH
15717: CALL_OW 12
15721: ARRAY
15722: ST_TO_ADDR
// if ValidHex ( x , y ) then
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_VAR 0 4
15732: PPUSH
15733: CALL_OW 488
15737: IFFALSE 15760
// begin result := [ x , y ] ;
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_VAR 0 3
15748: PUSH
15749: LD_VAR 0 4
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: ST_TO_ADDR
// break ;
15758: GO 15762
// end ; end ;
15760: GO 15562
15762: POP
15763: POP
// if result then
15764: LD_VAR 0 1
15768: IFFALSE 15828
// begin ToLua ( playSibBomb() ) ;
15770: LD_STRING playSibBomb()
15772: PPUSH
15773: CALL_OW 559
// wait ( 0 0$14 ) ;
15777: LD_INT 490
15779: PPUSH
15780: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: PPUSH
15802: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15806: LD_VAR 0 1
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: LD_VAR 0 1
15819: PUSH
15820: LD_INT 2
15822: ARRAY
15823: PPUSH
15824: CALL_OW 429
// end ; end ;
15828: LD_VAR 0 1
15832: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15833: LD_EXP 20
15837: PUSH
15838: LD_EXP 42
15842: AND
15843: IFFALSE 15855
15845: GO 15847
15847: DISABLE
// YouLost (  ) ;
15848: LD_STRING 
15850: PPUSH
15851: CALL_OW 104
15855: END
// every 0 0$1 trigger StreamModeActive and sFog do
15856: LD_EXP 20
15860: PUSH
15861: LD_EXP 41
15865: AND
15866: IFFALSE 15880
15868: GO 15870
15870: DISABLE
// FogOff ( your_side ) ;
15871: LD_OWVAR 2
15875: PPUSH
15876: CALL_OW 344
15880: END
// every 0 0$1 trigger StreamModeActive and sSun do
15881: LD_EXP 20
15885: PUSH
15886: LD_EXP 43
15890: AND
15891: IFFALSE 15919
15893: GO 15895
15895: DISABLE
// begin solar_recharge_percent := 0 ;
15896: LD_ADDR_OWVAR 79
15900: PUSH
15901: LD_INT 0
15903: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15904: LD_INT 10500
15906: PPUSH
15907: CALL_OW 67
// solar_recharge_percent := 100 ;
15911: LD_ADDR_OWVAR 79
15915: PUSH
15916: LD_INT 100
15918: ST_TO_ADDR
// end ;
15919: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15920: LD_EXP 20
15924: PUSH
15925: LD_EXP 44
15929: AND
15930: IFFALSE 16169
15932: GO 15934
15934: DISABLE
15935: LD_INT 0
15937: PPUSH
15938: PPUSH
15939: PPUSH
// begin tmp := [ ] ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: EMPTY
15946: ST_TO_ADDR
// for i := 1 to 6 do
15947: LD_ADDR_VAR 0 1
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_INT 6
15959: PUSH
15960: FOR_TO
15961: IFFALSE 16066
// begin uc_nation := nation_nature ;
15963: LD_ADDR_OWVAR 21
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// uc_side := 0 ;
15971: LD_ADDR_OWVAR 20
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15979: LD_ADDR_OWVAR 29
15983: PUSH
15984: LD_INT 12
15986: PUSH
15987: LD_INT 12
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: ST_TO_ADDR
// hc_agressivity := 20 ;
15994: LD_ADDR_OWVAR 35
15998: PUSH
15999: LD_INT 20
16001: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16002: LD_ADDR_OWVAR 28
16006: PUSH
16007: LD_INT 17
16009: ST_TO_ADDR
// hc_gallery :=  ;
16010: LD_ADDR_OWVAR 33
16014: PUSH
16015: LD_STRING 
16017: ST_TO_ADDR
// hc_name :=  ;
16018: LD_ADDR_OWVAR 26
16022: PUSH
16023: LD_STRING 
16025: ST_TO_ADDR
// un := CreateHuman ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: CALL_OW 44
16035: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16036: LD_VAR 0 2
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 51
// tmp := tmp ^ un ;
16048: LD_ADDR_VAR 0 3
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_VAR 0 2
16062: ADD
16063: ST_TO_ADDR
// end ;
16064: GO 15960
16066: POP
16067: POP
// repeat wait ( 0 0$1 ) ;
16068: LD_INT 35
16070: PPUSH
16071: CALL_OW 67
// for un in tmp do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: FOR_IN
16086: IFFALSE 16160
// begin if IsDead ( un ) then
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 301
16097: IFFALSE 16117
// begin tmp := tmp diff un ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_VAR 0 3
16108: PUSH
16109: LD_VAR 0 2
16113: DIFF
16114: ST_TO_ADDR
// continue ;
16115: GO 16085
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 22
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: PPUSH
16144: LD_VAR 0 2
16148: PPUSH
16149: CALL_OW 74
16153: PPUSH
16154: CALL_OW 115
// end ;
16158: GO 16085
16160: POP
16161: POP
// until not tmp ;
16162: LD_VAR 0 3
16166: NOT
16167: IFFALSE 16068
// end ;
16169: PPOPN 3
16171: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16172: LD_EXP 20
16176: PUSH
16177: LD_EXP 45
16181: AND
16182: IFFALSE 16236
16184: GO 16186
16186: DISABLE
// begin ToLua ( displayTroll(); ) ;
16187: LD_STRING displayTroll();
16189: PPUSH
16190: CALL_OW 559
// wait ( 3 3$00 ) ;
16194: LD_INT 6300
16196: PPUSH
16197: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16201: LD_STRING hideTroll();
16203: PPUSH
16204: CALL_OW 559
// wait ( 1 1$00 ) ;
16208: LD_INT 2100
16210: PPUSH
16211: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16215: LD_STRING displayTroll();
16217: PPUSH
16218: CALL_OW 559
// wait ( 1 1$00 ) ;
16222: LD_INT 2100
16224: PPUSH
16225: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16229: LD_STRING hideTroll();
16231: PPUSH
16232: CALL_OW 559
// end ;
16236: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16237: LD_EXP 20
16241: PUSH
16242: LD_EXP 46
16246: AND
16247: IFFALSE 16310
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
// begin p := 0 ;
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// repeat game_speed := 1 ;
16263: LD_ADDR_OWVAR 65
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16271: LD_INT 35
16273: PPUSH
16274: CALL_OW 67
// p := p + 1 ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: PLUS
16291: ST_TO_ADDR
// until p >= 60 ;
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 60
16299: GREATEREQUAL
16300: IFFALSE 16263
// game_speed := 4 ;
16302: LD_ADDR_OWVAR 65
16306: PUSH
16307: LD_INT 4
16309: ST_TO_ADDR
// end ;
16310: PPOPN 1
16312: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16313: LD_EXP 20
16317: PUSH
16318: LD_EXP 47
16322: AND
16323: IFFALSE 16469
16325: GO 16327
16327: DISABLE
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: LD_INT 22
16339: PUSH
16340: LD_OWVAR 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: LD_INT 30
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 30
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not depot then
16386: LD_VAR 0 1
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16469
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 0
16434: PPUSH
16435: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16439: LD_VAR 0 2
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: LD_INT 0
16449: PPUSH
16450: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 3
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 277
// end ;
16469: PPOPN 2
16471: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16472: LD_EXP 20
16476: PUSH
16477: LD_EXP 48
16481: AND
16482: IFFALSE 16579
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_OWVAR 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not tmp then
16544: LD_VAR 0 1
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16553: LD_VAR 0 1
16557: PUSH
16558: LD_INT 1
16560: PPUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 12
16570: ARRAY
16571: PPUSH
16572: LD_INT 200
16574: PPUSH
16575: CALL_OW 234
// end ;
16579: PPOPN 1
16581: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16582: LD_EXP 20
16586: PUSH
16587: LD_EXP 49
16591: AND
16592: IFFALSE 16671
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_OWVAR 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 21
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PPUSH
16631: CALL_OW 69
16635: ST_TO_ADDR
// if not tmp then
16636: LD_VAR 0 1
16640: NOT
16641: IFFALSE 16645
// exit ;
16643: GO 16671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16645: LD_VAR 0 1
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 12
16662: ARRAY
16663: PPUSH
16664: LD_INT 60
16666: PPUSH
16667: CALL_OW 234
// end ;
16671: PPOPN 1
16673: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16674: LD_EXP 20
16678: PUSH
16679: LD_EXP 50
16683: AND
16684: IFFALSE 16783
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
// begin enable ;
16693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 61
16713: PUSH
16714: EMPTY
16715: LIST
16716: PUSH
16717: LD_INT 33
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 1
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16783
// for i in tmp do
16746: LD_ADDR_VAR 0 2
16750: PUSH
16751: LD_VAR 0 1
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16781
// if IsControledBy ( i ) then
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 312
16768: IFFALSE 16779
// ComUnlink ( i ) ;
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 136
16779: GO 16756
16781: POP
16782: POP
// end ;
16783: PPOPN 2
16785: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16786: LD_EXP 20
16790: PUSH
16791: LD_EXP 51
16795: AND
16796: IFFALSE 16936
16798: GO 16800
16800: DISABLE
16801: LD_INT 0
16803: PPUSH
16804: PPUSH
// begin ToLua ( displayPowell(); ) ;
16805: LD_STRING displayPowell();
16807: PPUSH
16808: CALL_OW 559
// uc_side := 0 ;
16812: LD_ADDR_OWVAR 20
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// uc_nation := 2 ;
16820: LD_ADDR_OWVAR 21
16824: PUSH
16825: LD_INT 2
16827: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16828: LD_ADDR_OWVAR 37
16832: PUSH
16833: LD_INT 14
16835: ST_TO_ADDR
// vc_engine := engine_siberite ;
16836: LD_ADDR_OWVAR 39
16840: PUSH
16841: LD_INT 3
16843: ST_TO_ADDR
// vc_control := control_apeman ;
16844: LD_ADDR_OWVAR 38
16848: PUSH
16849: LD_INT 5
16851: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16852: LD_ADDR_OWVAR 40
16856: PUSH
16857: LD_INT 29
16859: ST_TO_ADDR
// un := CreateVehicle ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: CALL_OW 45
16869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16870: LD_VAR 0 2
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16882: LD_INT 35
16884: PPUSH
16885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 22
16896: PUSH
16897: LD_OWVAR 2
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: PPUSH
16911: LD_VAR 0 2
16915: PPUSH
16916: CALL_OW 74
16920: PPUSH
16921: CALL_OW 115
// until IsDead ( un ) ;
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL_OW 301
16934: IFFALSE 16882
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sStu do
16939: LD_EXP 20
16943: PUSH
16944: LD_EXP 59
16948: AND
16949: IFFALSE 16965
16951: GO 16953
16953: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16954: LD_STRING displayStucuk();
16956: PPUSH
16957: CALL_OW 559
// ResetFog ;
16961: CALL_OW 335
// end ;
16965: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16966: LD_EXP 20
16970: PUSH
16971: LD_EXP 52
16975: AND
16976: IFFALSE 17117
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_OWVAR 2
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// if not tmp then
17021: LD_VAR 0 2
17025: NOT
17026: IFFALSE 17030
// exit ;
17028: GO 17117
// un := tmp [ rand ( 1 , tmp ) ] ;
17030: LD_ADDR_VAR 0 1
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_VAR 0 2
17047: PPUSH
17048: CALL_OW 12
17052: ARRAY
17053: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 0
17061: PPUSH
17062: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_OWVAR 3
17075: PUSH
17076: LD_VAR 0 1
17080: DIFF
17081: PPUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 74
17091: PPUSH
17092: CALL_OW 115
// wait ( 0 0$20 ) ;
17096: LD_INT 700
17098: PPUSH
17099: CALL_OW 67
// SetSide ( un , your_side ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_OWVAR 2
17112: PPUSH
17113: CALL_OW 235
// end ;
17117: PPOPN 2
17119: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17120: LD_EXP 20
17124: PUSH
17125: LD_EXP 53
17129: AND
17130: IFFALSE 17236
17132: GO 17134
17134: DISABLE
17135: LD_INT 0
17137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not depot then
17192: LD_VAR 0 1
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17236
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17201: LD_VAR 0 1
17205: PUSH
17206: LD_INT 1
17208: ARRAY
17209: PPUSH
17210: CALL_OW 250
17214: PPUSH
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 1
17222: ARRAY
17223: PPUSH
17224: CALL_OW 251
17228: PPUSH
17229: LD_INT 70
17231: PPUSH
17232: CALL_OW 495
// end ;
17236: PPOPN 1
17238: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17239: LD_EXP 20
17243: PUSH
17244: LD_EXP 54
17248: AND
17249: IFFALSE 17460
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17261: LD_ADDR_VAR 0 5
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 5
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17460
// for i in tmp do
17306: LD_ADDR_VAR 0 1
17310: PUSH
17311: LD_VAR 0 5
17315: PUSH
17316: FOR_IN
17317: IFFALSE 17458
// begin d := rand ( 0 , 5 ) ;
17319: LD_ADDR_VAR 0 4
17323: PUSH
17324: LD_INT 0
17326: PPUSH
17327: LD_INT 5
17329: PPUSH
17330: CALL_OW 12
17334: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 250
17349: PPUSH
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 3
17357: PPUSH
17358: LD_INT 12
17360: PPUSH
17361: CALL_OW 12
17365: PPUSH
17366: CALL_OW 272
17370: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 251
17385: PPUSH
17386: LD_VAR 0 4
17390: PPUSH
17391: LD_INT 3
17393: PPUSH
17394: LD_INT 12
17396: PPUSH
17397: CALL_OW 12
17401: PPUSH
17402: CALL_OW 273
17406: ST_TO_ADDR
// if ValidHex ( x , y ) then
17407: LD_VAR 0 2
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: CALL_OW 488
17421: IFFALSE 17456
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_INT 3
17440: PPUSH
17441: LD_INT 6
17443: PPUSH
17444: CALL_OW 12
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 483
// end ;
17456: GO 17316
17458: POP
17459: POP
// end ;
17460: PPOPN 5
17462: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17463: LD_EXP 20
17467: PUSH
17468: LD_EXP 55
17472: AND
17473: IFFALSE 17567
17475: GO 17477
17477: DISABLE
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_OWVAR 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 32
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 21
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 2
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17567
// for i in tmp do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_VAR 0 2
17547: PUSH
17548: FOR_IN
17549: IFFALSE 17565
// SetFuel ( i , 0 ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_INT 0
17558: PPUSH
17559: CALL_OW 240
17563: GO 17548
17565: POP
17566: POP
// end ;
17567: PPOPN 2
17569: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17570: LD_EXP 20
17574: PUSH
17575: LD_EXP 56
17579: AND
17580: IFFALSE 17646
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17588: LD_ADDR_VAR 0 1
17592: PUSH
17593: LD_INT 22
17595: PUSH
17596: LD_OWVAR 2
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 29
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: ST_TO_ADDR
// if not tmp then
17624: LD_VAR 0 1
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17646
// DestroyUnit ( tmp [ 1 ] ) ;
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 1
17640: ARRAY
17641: PPUSH
17642: CALL_OW 65
// end ;
17646: PPOPN 1
17648: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17649: LD_EXP 20
17653: PUSH
17654: LD_EXP 58
17658: AND
17659: IFFALSE 17788
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
// begin uc_side := 0 ;
17667: LD_ADDR_OWVAR 20
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// uc_nation := nation_arabian ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// hc_gallery :=  ;
17683: LD_ADDR_OWVAR 33
17687: PUSH
17688: LD_STRING 
17690: ST_TO_ADDR
// hc_name :=  ;
17691: LD_ADDR_OWVAR 26
17695: PUSH
17696: LD_STRING 
17698: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17699: LD_INT 1
17701: PPUSH
17702: LD_INT 11
17704: PPUSH
17705: LD_INT 10
17707: PPUSH
17708: CALL_OW 380
// un := CreateHuman ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: CALL_OW 44
17721: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17722: LD_VAR 0 1
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17734: LD_INT 35
17736: PPUSH
17737: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 74
17772: PPUSH
17773: CALL_OW 115
// until IsDead ( un ) ;
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 301
17786: IFFALSE 17734
// end ;
17788: PPOPN 1
17790: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17791: LD_EXP 20
17795: PUSH
17796: LD_EXP 60
17800: AND
17801: IFFALSE 17813
17803: GO 17805
17805: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17806: LD_STRING earthquake(getX(game), 0, 32)
17808: PPUSH
17809: CALL_OW 559
17813: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17814: LD_EXP 20
17818: PUSH
17819: LD_EXP 61
17823: AND
17824: IFFALSE 17915
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
// begin enable ;
17832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_OWVAR 2
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 21
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 33
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: CALL_OW 69
17879: ST_TO_ADDR
// if not tmp then
17880: LD_VAR 0 1
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 12
17906: ARRAY
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 234
// end ;
17915: PPOPN 1
17917: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17918: LD_EXP 20
17922: PUSH
17923: LD_EXP 62
17927: AND
17928: IFFALSE 18069
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 3
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18069
// un := tmp [ rand ( 1 , tmp ) ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
// if Crawls ( un ) then
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 318
18016: IFFALSE 18027
// ComWalk ( un ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_INT 9
18034: PPUSH
18035: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18039: LD_INT 28
18041: PPUSH
18042: LD_OWVAR 2
18046: PPUSH
18047: LD_INT 2
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18054: LD_INT 29
18056: PPUSH
18057: LD_OWVAR 2
18061: PPUSH
18062: LD_INT 2
18064: PPUSH
18065: CALL_OW 322
// end ;
18069: PPOPN 3
18071: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18072: LD_EXP 20
18076: PUSH
18077: LD_EXP 63
18081: AND
18082: IFFALSE 18193
18084: GO 18086
18086: DISABLE
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18092: LD_ADDR_VAR 0 3
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_OWVAR 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 25
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: ST_TO_ADDR
// if not tmp then
18128: LD_VAR 0 3
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 18193
// un := tmp [ rand ( 1 , tmp ) ] ;
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: LD_VAR 0 3
18146: PUSH
18147: LD_INT 1
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: CALL_OW 12
18159: ARRAY
18160: ST_TO_ADDR
// if Crawls ( un ) then
18161: LD_VAR 0 2
18165: PPUSH
18166: CALL_OW 318
18170: IFFALSE 18181
// ComWalk ( un ) ;
18172: LD_VAR 0 2
18176: PPUSH
18177: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18181: LD_VAR 0 2
18185: PPUSH
18186: LD_INT 8
18188: PPUSH
18189: CALL_OW 336
// end ;
18193: PPOPN 3
18195: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18196: LD_EXP 20
18200: PUSH
18201: LD_EXP 64
18205: AND
18206: IFFALSE 18350
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_INT 22
18222: PUSH
18223: LD_OWVAR 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 34
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 34
18257: PUSH
18258: LD_INT 51
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 34
18267: PUSH
18268: LD_INT 32
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: PPUSH
18286: CALL_OW 69
18290: ST_TO_ADDR
// if not tmp then
18291: LD_VAR 0 2
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18350
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 2
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18348
// if GetCargo ( i , mat_artifact ) = 0 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 4
18320: PPUSH
18321: CALL_OW 289
18325: PUSH
18326: LD_INT 0
18328: EQUAL
18329: IFFALSE 18346
// SetCargo ( i , mat_siberit , 100 ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 100
18341: PPUSH
18342: CALL_OW 290
18346: GO 18310
18348: POP
18349: POP
// end ;
18350: PPOPN 2
18352: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18353: LD_EXP 20
18357: PUSH
18358: LD_EXP 65
18362: AND
18363: IFFALSE 18546
18365: GO 18367
18367: DISABLE
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18372: LD_ADDR_VAR 0 2
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_OWVAR 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PPUSH
18389: CALL_OW 69
18393: ST_TO_ADDR
// if not tmp then
18394: LD_VAR 0 2
18398: NOT
18399: IFFALSE 18403
// exit ;
18401: GO 18546
// for i := 1 to 2 do
18403: LD_ADDR_VAR 0 1
18407: PUSH
18408: DOUBLE
18409: LD_INT 1
18411: DEC
18412: ST_TO_ADDR
18413: LD_INT 2
18415: PUSH
18416: FOR_TO
18417: IFFALSE 18544
// begin uc_side := your_side ;
18419: LD_ADDR_OWVAR 20
18423: PUSH
18424: LD_OWVAR 2
18428: ST_TO_ADDR
// uc_nation := nation_american ;
18429: LD_ADDR_OWVAR 21
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// vc_chassis := us_morphling ;
18437: LD_ADDR_OWVAR 37
18441: PUSH
18442: LD_INT 5
18444: ST_TO_ADDR
// vc_engine := engine_siberite ;
18445: LD_ADDR_OWVAR 39
18449: PUSH
18450: LD_INT 3
18452: ST_TO_ADDR
// vc_control := control_computer ;
18453: LD_ADDR_OWVAR 38
18457: PUSH
18458: LD_INT 3
18460: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18461: LD_ADDR_OWVAR 40
18465: PUSH
18466: LD_INT 10
18468: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18469: LD_VAR 0 2
18473: PUSH
18474: LD_INT 1
18476: ARRAY
18477: PPUSH
18478: CALL_OW 310
18482: NOT
18483: IFFALSE 18530
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18485: CALL_OW 45
18489: PPUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 250
18503: PPUSH
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 251
18517: PPUSH
18518: LD_INT 12
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 50
18528: GO 18542
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18530: CALL_OW 45
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: CALL_OW 51
// end ;
18542: GO 18416
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18549: LD_EXP 20
18553: PUSH
18554: LD_EXP 66
18558: AND
18559: IFFALSE 18781
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18572: LD_ADDR_VAR 0 6
18576: PUSH
18577: LD_INT 22
18579: PUSH
18580: LD_OWVAR 2
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: LD_INT 23
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if not tmp then
18626: LD_VAR 0 6
18630: NOT
18631: IFFALSE 18635
// exit ;
18633: GO 18781
// s1 := rand ( 1 , 4 ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 4
18645: PPUSH
18646: CALL_OW 12
18650: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18651: LD_ADDR_VAR 0 4
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 259
18674: ST_TO_ADDR
// if s1 = 1 then
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 1
18682: EQUAL
18683: IFFALSE 18703
// s2 := rand ( 2 , 4 ) else
18685: LD_ADDR_VAR 0 3
18689: PUSH
18690: LD_INT 2
18692: PPUSH
18693: LD_INT 4
18695: PPUSH
18696: CALL_OW 12
18700: ST_TO_ADDR
18701: GO 18711
// s2 := 1 ;
18703: LD_ADDR_VAR 0 3
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18711: LD_ADDR_VAR 0 5
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_INT 1
18723: ARRAY
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: CALL_OW 259
18734: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18735: LD_VAR 0 6
18739: PUSH
18740: LD_INT 1
18742: ARRAY
18743: PPUSH
18744: LD_VAR 0 2
18748: PPUSH
18749: LD_VAR 0 5
18753: PPUSH
18754: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18758: LD_VAR 0 6
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_VAR 0 4
18776: PPUSH
18777: CALL_OW 237
// end ;
18781: PPOPN 6
18783: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18784: LD_EXP 20
18788: PUSH
18789: LD_EXP 67
18793: AND
18794: IFFALSE 18873
18796: GO 18798
18798: DISABLE
18799: LD_INT 0
18801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18802: LD_ADDR_VAR 0 1
18806: PUSH
18807: LD_INT 22
18809: PUSH
18810: LD_OWVAR 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: LD_INT 3
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PPUSH
18833: CALL_OW 69
18837: ST_TO_ADDR
// if not tmp then
18838: LD_VAR 0 1
18842: NOT
18843: IFFALSE 18847
// exit ;
18845: GO 18873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18847: LD_VAR 0 1
18851: PUSH
18852: LD_INT 1
18854: PPUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 12
18864: ARRAY
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: CALL_OW 234
// end ;
18873: PPOPN 1
18875: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18876: LD_EXP 20
18880: PUSH
18881: LD_EXP 68
18885: AND
18886: IFFALSE 18998
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18895: LD_ADDR_VAR 0 2
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 30
18917: PUSH
18918: LD_INT 27
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 26
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 28
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: ST_TO_ADDR
// if not tmp then
18960: LD_VAR 0 2
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 18998
// for i in tmp do
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 2
18978: PUSH
18979: FOR_IN
18980: IFFALSE 18996
// SetLives ( i , 1 ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 234
18994: GO 18979
18996: POP
18997: POP
// end ;
18998: PPOPN 2
19000: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19001: LD_EXP 20
19005: PUSH
19006: LD_EXP 69
19010: AND
19011: IFFALSE 19298
19013: GO 19015
19015: DISABLE
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
// begin i := rand ( 1 , 7 ) ;
19021: LD_ADDR_VAR 0 1
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 7
19031: PPUSH
19032: CALL_OW 12
19036: ST_TO_ADDR
// case i of 1 :
19037: LD_VAR 0 1
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19060
19050: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19051: LD_STRING earthquake(getX(game), 0, 32)
19053: PPUSH
19054: CALL_OW 559
19058: GO 19298
19060: LD_INT 2
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19082
19068: POP
// begin ToLua ( displayStucuk(); ) ;
19069: LD_STRING displayStucuk();
19071: PPUSH
19072: CALL_OW 559
// ResetFog ;
19076: CALL_OW 335
// end ; 3 :
19080: GO 19298
19082: LD_INT 3
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19194
19090: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_OWVAR 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: ST_TO_ADDR
// if not tmp then
19127: LD_VAR 0 2
19131: NOT
19132: IFFALSE 19136
// exit ;
19134: GO 19298
// un := tmp [ rand ( 1 , tmp ) ] ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_VAR 0 2
19153: PPUSH
19154: CALL_OW 12
19158: ARRAY
19159: ST_TO_ADDR
// if Crawls ( un ) then
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 318
19169: IFFALSE 19180
// ComWalk ( un ) ;
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19180: LD_VAR 0 3
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 336
// end ; 4 :
19192: GO 19298
19194: LD_INT 4
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19276
19202: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_OWVAR 2
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 30
19222: PUSH
19223: LD_INT 29
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: ST_TO_ADDR
// if not tmp then
19239: LD_VAR 0 2
19243: NOT
19244: IFFALSE 19248
// exit ;
19246: GO 19298
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19248: LD_VAR 0 2
19252: PUSH
19253: LD_INT 1
19255: ARRAY
19256: PPUSH
19257: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: CALL_OW 65
// end ; 5 .. 7 :
19274: GO 19298
19276: LD_INT 5
19278: DOUBLE
19279: GREATEREQUAL
19280: IFFALSE 19288
19282: LD_INT 7
19284: DOUBLE
19285: LESSEQUAL
19286: IFTRUE 19290
19288: GO 19297
19290: POP
// StreamSibBomb ; end ;
19291: CALL 15535 0 0
19295: GO 19298
19297: POP
// end ;
19298: PPOPN 3
19300: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19301: LD_EXP 20
19305: PUSH
19306: LD_EXP 70
19310: AND
19311: IFFALSE 19467
19313: GO 19315
19315: DISABLE
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 81
19328: PUSH
19329: LD_OWVAR 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 21
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 2
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19467
// p := 0 ;
19384: LD_ADDR_VAR 0 3
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19392: LD_INT 35
19394: PPUSH
19395: CALL_OW 67
// p := p + 1 ;
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 1
19411: PLUS
19412: ST_TO_ADDR
// for i in tmp do
19413: LD_ADDR_VAR 0 1
19417: PUSH
19418: LD_VAR 0 2
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19455
// if GetLives ( i ) < 1000 then
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 256
19435: PUSH
19436: LD_INT 1000
19438: LESS
19439: IFFALSE 19453
// SetLives ( i , 1000 ) ;
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 1000
19448: PPUSH
19449: CALL_OW 234
19453: GO 19423
19455: POP
19456: POP
// until p > 20 ;
19457: LD_VAR 0 3
19461: PUSH
19462: LD_INT 20
19464: GREATER
19465: IFFALSE 19392
// end ;
19467: PPOPN 3
19469: END
// every 0 0$1 trigger StreamModeActive and sTime do
19470: LD_EXP 20
19474: PUSH
19475: LD_EXP 71
19479: AND
19480: IFFALSE 19515
19482: GO 19484
19484: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19485: LD_INT 28
19487: PPUSH
19488: LD_OWVAR 2
19492: PPUSH
19493: LD_INT 2
19495: PPUSH
19496: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19500: LD_INT 30
19502: PPUSH
19503: LD_OWVAR 2
19507: PPUSH
19508: LD_INT 2
19510: PPUSH
19511: CALL_OW 322
// end ;
19515: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19516: LD_EXP 20
19520: PUSH
19521: LD_EXP 72
19525: AND
19526: IFFALSE 19647
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 21
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: ST_TO_ADDR
// if not tmp then
19589: LD_VAR 0 2
19593: NOT
19594: IFFALSE 19598
// exit ;
19596: GO 19647
// for i in tmp do
19598: LD_ADDR_VAR 0 1
19602: PUSH
19603: LD_VAR 0 2
19607: PUSH
19608: FOR_IN
19609: IFFALSE 19645
// begin if Crawls ( i ) then
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 318
19620: IFFALSE 19631
// ComWalk ( i ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 138
// SetClass ( i , 2 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 2
19638: PPUSH
19639: CALL_OW 336
// end ;
19643: GO 19608
19645: POP
19646: POP
// end ;
19647: PPOPN 2
19649: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19650: LD_EXP 20
19654: PUSH
19655: LD_EXP 73
19659: AND
19660: IFFALSE 19948
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
19669: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19670: LD_OWVAR 2
19674: PPUSH
19675: LD_INT 9
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19688: LD_INT 9
19690: PPUSH
19691: LD_OWVAR 2
19695: PPUSH
19696: CALL_OW 343
// uc_side := 9 ;
19700: LD_ADDR_OWVAR 20
19704: PUSH
19705: LD_INT 9
19707: ST_TO_ADDR
// uc_nation := 2 ;
19708: LD_ADDR_OWVAR 21
19712: PUSH
19713: LD_INT 2
19715: ST_TO_ADDR
// hc_name := Dark Warrior ;
19716: LD_ADDR_OWVAR 26
19720: PUSH
19721: LD_STRING Dark Warrior
19723: ST_TO_ADDR
// hc_gallery :=  ;
19724: LD_ADDR_OWVAR 33
19728: PUSH
19729: LD_STRING 
19731: ST_TO_ADDR
// hc_noskilllimit := true ;
19732: LD_ADDR_OWVAR 76
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19740: LD_ADDR_OWVAR 31
19744: PUSH
19745: LD_INT 30
19747: PUSH
19748: LD_INT 30
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 30
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// un := CreateHuman ;
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: CALL_OW 44
19772: ST_TO_ADDR
// hc_noskilllimit := false ;
19773: LD_ADDR_OWVAR 76
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 51
// ToLua ( playRanger() ) ;
19793: LD_STRING playRanger()
19795: PPUSH
19796: CALL_OW 559
// p := 0 ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19808: LD_INT 35
19810: PPUSH
19811: CALL_OW 67
// p := p + 1 ;
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_VAR 0 2
19824: PUSH
19825: LD_INT 1
19827: PLUS
19828: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19829: LD_VAR 0 3
19833: PPUSH
19834: CALL_OW 256
19838: PUSH
19839: LD_INT 1000
19841: LESS
19842: IFFALSE 19856
// SetLives ( un , 1000 ) ;
19844: LD_VAR 0 3
19848: PPUSH
19849: LD_INT 1000
19851: PPUSH
19852: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_INT 81
19863: PUSH
19864: LD_OWVAR 2
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 91
19875: PUSH
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 30
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PPUSH
19893: CALL_OW 69
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 74
19907: PPUSH
19908: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19912: LD_VAR 0 2
19916: PUSH
19917: LD_INT 80
19919: GREATER
19920: PUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 301
19930: OR
19931: IFFALSE 19808
// if un then
19933: LD_VAR 0 3
19937: IFFALSE 19948
// RemoveUnit ( un ) ;
19939: LD_VAR 0 3
19943: PPUSH
19944: CALL_OW 64
// end ;
19948: PPOPN 3
19950: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19951: LD_EXP 74
19955: IFFALSE 20071
19957: GO 19959
19959: DISABLE
19960: LD_INT 0
19962: PPUSH
19963: PPUSH
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19965: LD_ADDR_VAR 0 2
19969: PUSH
19970: LD_INT 81
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 21
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20001: LD_STRING playComputer()
20003: PPUSH
20004: CALL_OW 559
// if not tmp then
20008: LD_VAR 0 2
20012: NOT
20013: IFFALSE 20017
// exit ;
20015: GO 20071
// for i in tmp do
20017: LD_ADDR_VAR 0 1
20021: PUSH
20022: LD_VAR 0 2
20026: PUSH
20027: FOR_IN
20028: IFFALSE 20069
// for j := 1 to 4 do
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: DOUBLE
20036: LD_INT 1
20038: DEC
20039: ST_TO_ADDR
20040: LD_INT 4
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20065
// SetSkill ( i , j , 10 ) ;
20046: LD_VAR 0 1
20050: PPUSH
20051: LD_VAR 0 3
20055: PPUSH
20056: LD_INT 10
20058: PPUSH
20059: CALL_OW 237
20063: GO 20043
20065: POP
20066: POP
20067: GO 20027
20069: POP
20070: POP
// end ;
20071: PPOPN 3
20073: END
// every 0 0$1 trigger s30 do var i , tmp ;
20074: LD_EXP 75
20078: IFFALSE 20147
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_INT 22
20094: PUSH
20095: LD_OWVAR 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PPUSH
20104: CALL_OW 69
20108: ST_TO_ADDR
// if not tmp then
20109: LD_VAR 0 2
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20147
// for i in tmp do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: LD_VAR 0 2
20127: PUSH
20128: FOR_IN
20129: IFFALSE 20145
// SetLives ( i , 300 ) ;
20131: LD_VAR 0 1
20135: PPUSH
20136: LD_INT 300
20138: PPUSH
20139: CALL_OW 234
20143: GO 20128
20145: POP
20146: POP
// end ;
20147: PPOPN 2
20149: END
// every 0 0$1 trigger s60 do var i , tmp ;
20150: LD_EXP 76
20154: IFFALSE 20223
20156: GO 20158
20158: DISABLE
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: ST_TO_ADDR
// if not tmp then
20185: LD_VAR 0 2
20189: NOT
20190: IFFALSE 20194
// exit ;
20192: GO 20223
// for i in tmp do
20194: LD_ADDR_VAR 0 1
20198: PUSH
20199: LD_VAR 0 2
20203: PUSH
20204: FOR_IN
20205: IFFALSE 20221
// SetLives ( i , 600 ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_INT 600
20214: PPUSH
20215: CALL_OW 234
20219: GO 20204
20221: POP
20222: POP
// end ;
20223: PPOPN 2
20225: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20226: LD_INT 0
20228: PPUSH
// case cmd of 301 :
20229: LD_VAR 0 1
20233: PUSH
20234: LD_INT 301
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20274
20242: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20243: LD_VAR 0 6
20247: PPUSH
20248: LD_VAR 0 7
20252: PPUSH
20253: LD_VAR 0 8
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: LD_VAR 0 5
20267: PPUSH
20268: CALL 21475 0 5
20272: GO 20395
20274: LD_INT 302
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20319
20282: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20283: LD_VAR 0 6
20287: PPUSH
20288: LD_VAR 0 7
20292: PPUSH
20293: LD_VAR 0 8
20297: PPUSH
20298: LD_VAR 0 9
20302: PPUSH
20303: LD_VAR 0 4
20307: PPUSH
20308: LD_VAR 0 5
20312: PPUSH
20313: CALL 21566 0 6
20317: GO 20395
20319: LD_INT 303
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20364
20327: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20328: LD_VAR 0 6
20332: PPUSH
20333: LD_VAR 0 7
20337: PPUSH
20338: LD_VAR 0 8
20342: PPUSH
20343: LD_VAR 0 9
20347: PPUSH
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_VAR 0 5
20357: PPUSH
20358: CALL 20400 0 6
20362: GO 20395
20364: LD_INT 304
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20394
20372: POP
// hHackTeleport ( unit , x , y ) ; end ;
20373: LD_VAR 0 2
20377: PPUSH
20378: LD_VAR 0 4
20382: PPUSH
20383: LD_VAR 0 5
20387: PPUSH
20388: CALL 22159 0 3
20392: GO 20395
20394: POP
// end ;
20395: LD_VAR 0 12
20399: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20400: LD_INT 0
20402: PPUSH
20403: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20404: LD_VAR 0 1
20408: PUSH
20409: LD_INT 1
20411: LESS
20412: PUSH
20413: LD_VAR 0 1
20417: PUSH
20418: LD_INT 3
20420: GREATER
20421: OR
20422: PUSH
20423: LD_VAR 0 5
20427: PPUSH
20428: LD_VAR 0 6
20432: PPUSH
20433: CALL_OW 428
20437: OR
20438: IFFALSE 20442
// exit ;
20440: GO 21162
// uc_side := your_side ;
20442: LD_ADDR_OWVAR 20
20446: PUSH
20447: LD_OWVAR 2
20451: ST_TO_ADDR
// uc_nation := nation ;
20452: LD_ADDR_OWVAR 21
20456: PUSH
20457: LD_VAR 0 1
20461: ST_TO_ADDR
// bc_level = 1 ;
20462: LD_ADDR_OWVAR 43
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// case btype of 1 :
20470: LD_VAR 0 2
20474: PUSH
20475: LD_INT 1
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20494
20483: POP
// bc_type := b_depot ; 2 :
20484: LD_ADDR_OWVAR 42
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
20492: GO 21106
20494: LD_INT 2
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20513
20502: POP
// bc_type := b_warehouse ; 3 :
20503: LD_ADDR_OWVAR 42
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
20511: GO 21106
20513: LD_INT 3
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20532
20521: POP
// bc_type := b_lab ; 4 .. 9 :
20522: LD_ADDR_OWVAR 42
20526: PUSH
20527: LD_INT 6
20529: ST_TO_ADDR
20530: GO 21106
20532: LD_INT 4
20534: DOUBLE
20535: GREATEREQUAL
20536: IFFALSE 20544
20538: LD_INT 9
20540: DOUBLE
20541: LESSEQUAL
20542: IFTRUE 20546
20544: GO 20598
20546: POP
// begin bc_type := b_lab_half ;
20547: LD_ADDR_OWVAR 42
20551: PUSH
20552: LD_INT 7
20554: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20555: LD_ADDR_OWVAR 44
20559: PUSH
20560: LD_INT 10
20562: PUSH
20563: LD_INT 11
20565: PUSH
20566: LD_INT 12
20568: PUSH
20569: LD_INT 15
20571: PUSH
20572: LD_INT 14
20574: PUSH
20575: LD_INT 13
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: LD_INT 3
20593: MINUS
20594: ARRAY
20595: ST_TO_ADDR
// end ; 10 .. 13 :
20596: GO 21106
20598: LD_INT 10
20600: DOUBLE
20601: GREATEREQUAL
20602: IFFALSE 20610
20604: LD_INT 13
20606: DOUBLE
20607: LESSEQUAL
20608: IFTRUE 20612
20610: GO 20689
20612: POP
// begin bc_type := b_lab_full ;
20613: LD_ADDR_OWVAR 42
20617: PUSH
20618: LD_INT 8
20620: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20621: LD_ADDR_OWVAR 44
20625: PUSH
20626: LD_INT 10
20628: PUSH
20629: LD_INT 12
20631: PUSH
20632: LD_INT 14
20634: PUSH
20635: LD_INT 13
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: LD_VAR 0 2
20648: PUSH
20649: LD_INT 9
20651: MINUS
20652: ARRAY
20653: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20654: LD_ADDR_OWVAR 45
20658: PUSH
20659: LD_INT 11
20661: PUSH
20662: LD_INT 15
20664: PUSH
20665: LD_INT 12
20667: PUSH
20668: LD_INT 15
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: LD_VAR 0 2
20681: PUSH
20682: LD_INT 9
20684: MINUS
20685: ARRAY
20686: ST_TO_ADDR
// end ; 14 :
20687: GO 21106
20689: LD_INT 14
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20708
20697: POP
// bc_type := b_workshop ; 15 :
20698: LD_ADDR_OWVAR 42
20702: PUSH
20703: LD_INT 2
20705: ST_TO_ADDR
20706: GO 21106
20708: LD_INT 15
20710: DOUBLE
20711: EQUAL
20712: IFTRUE 20716
20714: GO 20727
20716: POP
// bc_type := b_factory ; 16 :
20717: LD_ADDR_OWVAR 42
20721: PUSH
20722: LD_INT 3
20724: ST_TO_ADDR
20725: GO 21106
20727: LD_INT 16
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20746
20735: POP
// bc_type := b_ext_gun ; 17 :
20736: LD_ADDR_OWVAR 42
20740: PUSH
20741: LD_INT 17
20743: ST_TO_ADDR
20744: GO 21106
20746: LD_INT 17
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20782
20754: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20755: LD_ADDR_OWVAR 42
20759: PUSH
20760: LD_INT 19
20762: PUSH
20763: LD_INT 23
20765: PUSH
20766: LD_INT 19
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: PUSH
20774: LD_VAR 0 1
20778: ARRAY
20779: ST_TO_ADDR
20780: GO 21106
20782: LD_INT 18
20784: DOUBLE
20785: EQUAL
20786: IFTRUE 20790
20788: GO 20801
20790: POP
// bc_type := b_ext_radar ; 19 :
20791: LD_ADDR_OWVAR 42
20795: PUSH
20796: LD_INT 20
20798: ST_TO_ADDR
20799: GO 21106
20801: LD_INT 19
20803: DOUBLE
20804: EQUAL
20805: IFTRUE 20809
20807: GO 20820
20809: POP
// bc_type := b_ext_radio ; 20 :
20810: LD_ADDR_OWVAR 42
20814: PUSH
20815: LD_INT 22
20817: ST_TO_ADDR
20818: GO 21106
20820: LD_INT 20
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 20839
20828: POP
// bc_type := b_ext_siberium ; 21 :
20829: LD_ADDR_OWVAR 42
20833: PUSH
20834: LD_INT 21
20836: ST_TO_ADDR
20837: GO 21106
20839: LD_INT 21
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20858
20847: POP
// bc_type := b_ext_computer ; 22 :
20848: LD_ADDR_OWVAR 42
20852: PUSH
20853: LD_INT 24
20855: ST_TO_ADDR
20856: GO 21106
20858: LD_INT 22
20860: DOUBLE
20861: EQUAL
20862: IFTRUE 20866
20864: GO 20877
20866: POP
// bc_type := b_ext_track ; 23 :
20867: LD_ADDR_OWVAR 42
20871: PUSH
20872: LD_INT 16
20874: ST_TO_ADDR
20875: GO 21106
20877: LD_INT 23
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20896
20885: POP
// bc_type := b_ext_laser ; 24 :
20886: LD_ADDR_OWVAR 42
20890: PUSH
20891: LD_INT 25
20893: ST_TO_ADDR
20894: GO 21106
20896: LD_INT 24
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20915
20904: POP
// bc_type := b_control_tower ; 25 :
20905: LD_ADDR_OWVAR 42
20909: PUSH
20910: LD_INT 36
20912: ST_TO_ADDR
20913: GO 21106
20915: LD_INT 25
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20934
20923: POP
// bc_type := b_breastwork ; 26 :
20924: LD_ADDR_OWVAR 42
20928: PUSH
20929: LD_INT 31
20931: ST_TO_ADDR
20932: GO 21106
20934: LD_INT 26
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20953
20942: POP
// bc_type := b_bunker ; 27 :
20943: LD_ADDR_OWVAR 42
20947: PUSH
20948: LD_INT 32
20950: ST_TO_ADDR
20951: GO 21106
20953: LD_INT 27
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20972
20961: POP
// bc_type := b_turret ; 28 :
20962: LD_ADDR_OWVAR 42
20966: PUSH
20967: LD_INT 33
20969: ST_TO_ADDR
20970: GO 21106
20972: LD_INT 28
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20991
20980: POP
// bc_type := b_armoury ; 29 :
20981: LD_ADDR_OWVAR 42
20985: PUSH
20986: LD_INT 4
20988: ST_TO_ADDR
20989: GO 21106
20991: LD_INT 29
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21010
20999: POP
// bc_type := b_barracks ; 30 :
21000: LD_ADDR_OWVAR 42
21004: PUSH
21005: LD_INT 5
21007: ST_TO_ADDR
21008: GO 21106
21010: LD_INT 30
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21029
21018: POP
// bc_type := b_solar_power ; 31 :
21019: LD_ADDR_OWVAR 42
21023: PUSH
21024: LD_INT 27
21026: ST_TO_ADDR
21027: GO 21106
21029: LD_INT 31
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21048
21037: POP
// bc_type := b_oil_power ; 32 :
21038: LD_ADDR_OWVAR 42
21042: PUSH
21043: LD_INT 26
21045: ST_TO_ADDR
21046: GO 21106
21048: LD_INT 32
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21067
21056: POP
// bc_type := b_siberite_power ; 33 :
21057: LD_ADDR_OWVAR 42
21061: PUSH
21062: LD_INT 28
21064: ST_TO_ADDR
21065: GO 21106
21067: LD_INT 33
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21086
21075: POP
// bc_type := b_oil_mine ; 34 :
21076: LD_ADDR_OWVAR 42
21080: PUSH
21081: LD_INT 29
21083: ST_TO_ADDR
21084: GO 21106
21086: LD_INT 34
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21105
21094: POP
// bc_type := b_siberite_mine ; end ;
21095: LD_ADDR_OWVAR 42
21099: PUSH
21100: LD_INT 30
21102: ST_TO_ADDR
21103: GO 21106
21105: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21106: LD_ADDR_VAR 0 8
21110: PUSH
21111: LD_VAR 0 5
21115: PPUSH
21116: LD_VAR 0 6
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 47
21130: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21131: LD_OWVAR 42
21135: PUSH
21136: LD_INT 32
21138: PUSH
21139: LD_INT 33
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: IN
21146: IFFALSE 21162
// PlaceWeaponTurret ( b , weapon ) ;
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: CALL_OW 431
// end ;
21162: LD_VAR 0 7
21166: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
21171: PPUSH
21172: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_OWVAR 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 30
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PPUSH
21222: CALL_OW 69
21226: ST_TO_ADDR
// if not tmp then
21227: LD_VAR 0 4
21231: NOT
21232: IFFALSE 21236
// exit ;
21234: GO 21295
// for i in tmp do
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: LD_VAR 0 4
21245: PUSH
21246: FOR_IN
21247: IFFALSE 21293
// for j = 1 to 3 do
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: DOUBLE
21255: LD_INT 1
21257: DEC
21258: ST_TO_ADDR
21259: LD_INT 3
21261: PUSH
21262: FOR_TO
21263: IFFALSE 21289
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: CALL_OW 274
21274: PPUSH
21275: LD_VAR 0 3
21279: PPUSH
21280: LD_INT 99999
21282: PPUSH
21283: CALL_OW 277
21287: GO 21262
21289: POP
21290: POP
21291: GO 21246
21293: POP
21294: POP
// end ;
21295: LD_VAR 0 1
21299: RET
// export function hHackSetLevel10 ; var i , j ; begin
21300: LD_INT 0
21302: PPUSH
21303: PPUSH
21304: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 21
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: PUSH
21325: FOR_IN
21326: IFFALSE 21378
// if IsSelected ( i ) then
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 306
21337: IFFALSE 21376
// begin for j := 1 to 4 do
21339: LD_ADDR_VAR 0 3
21343: PUSH
21344: DOUBLE
21345: LD_INT 1
21347: DEC
21348: ST_TO_ADDR
21349: LD_INT 4
21351: PUSH
21352: FOR_TO
21353: IFFALSE 21374
// SetSkill ( i , j , 10 ) ;
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_VAR 0 3
21364: PPUSH
21365: LD_INT 10
21367: PPUSH
21368: CALL_OW 237
21372: GO 21352
21374: POP
21375: POP
// end ;
21376: GO 21325
21378: POP
21379: POP
// end ;
21380: LD_VAR 0 1
21384: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21385: LD_INT 0
21387: PPUSH
21388: PPUSH
21389: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_INT 22
21397: PUSH
21398: LD_OWVAR 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: CALL_OW 69
21425: PUSH
21426: FOR_IN
21427: IFFALSE 21468
// begin for j := 1 to 4 do
21429: LD_ADDR_VAR 0 3
21433: PUSH
21434: DOUBLE
21435: LD_INT 1
21437: DEC
21438: ST_TO_ADDR
21439: LD_INT 4
21441: PUSH
21442: FOR_TO
21443: IFFALSE 21464
// SetSkill ( i , j , 10 ) ;
21445: LD_VAR 0 2
21449: PPUSH
21450: LD_VAR 0 3
21454: PPUSH
21455: LD_INT 10
21457: PPUSH
21458: CALL_OW 237
21462: GO 21442
21464: POP
21465: POP
// end ;
21466: GO 21426
21468: POP
21469: POP
// end ;
21470: LD_VAR 0 1
21474: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21475: LD_INT 0
21477: PPUSH
// uc_side := your_side ;
21478: LD_ADDR_OWVAR 20
21482: PUSH
21483: LD_OWVAR 2
21487: ST_TO_ADDR
// uc_nation := nation ;
21488: LD_ADDR_OWVAR 21
21492: PUSH
21493: LD_VAR 0 1
21497: ST_TO_ADDR
// InitHc ;
21498: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21502: LD_INT 0
21504: PPUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21519: LD_VAR 0 4
21523: PPUSH
21524: LD_VAR 0 5
21528: PPUSH
21529: CALL_OW 428
21533: PUSH
21534: LD_INT 0
21536: EQUAL
21537: IFFALSE 21561
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21539: CALL_OW 44
21543: PPUSH
21544: LD_VAR 0 4
21548: PPUSH
21549: LD_VAR 0 5
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: CALL_OW 48
// end ;
21561: LD_VAR 0 6
21565: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
// uc_side := your_side ;
21570: LD_ADDR_OWVAR 20
21574: PUSH
21575: LD_OWVAR 2
21579: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21580: LD_VAR 0 1
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: LD_INT 4
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: IN
21607: IFFALSE 21619
// uc_nation := nation_american else
21609: LD_ADDR_OWVAR 21
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
21617: GO 21662
// if chassis in [ 11 , 12 , 13 , 14 ] then
21619: LD_VAR 0 1
21623: PUSH
21624: LD_INT 11
21626: PUSH
21627: LD_INT 12
21629: PUSH
21630: LD_INT 13
21632: PUSH
21633: LD_INT 14
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: IN
21642: IFFALSE 21654
// uc_nation := nation_arabian else
21644: LD_ADDR_OWVAR 21
21648: PUSH
21649: LD_INT 2
21651: ST_TO_ADDR
21652: GO 21662
// uc_nation := nation_russian ;
21654: LD_ADDR_OWVAR 21
21658: PUSH
21659: LD_INT 3
21661: ST_TO_ADDR
// vc_chassis := chassis ;
21662: LD_ADDR_OWVAR 37
21666: PUSH
21667: LD_VAR 0 1
21671: ST_TO_ADDR
// vc_engine := engine ;
21672: LD_ADDR_OWVAR 39
21676: PUSH
21677: LD_VAR 0 2
21681: ST_TO_ADDR
// vc_control := control ;
21682: LD_ADDR_OWVAR 38
21686: PUSH
21687: LD_VAR 0 3
21691: ST_TO_ADDR
// vc_weapon := weapon ;
21692: LD_ADDR_OWVAR 40
21696: PUSH
21697: LD_VAR 0 4
21701: ST_TO_ADDR
// un := CreateVehicle ;
21702: LD_ADDR_VAR 0 8
21706: PUSH
21707: CALL_OW 45
21711: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21712: LD_VAR 0 8
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: LD_INT 5
21722: PPUSH
21723: CALL_OW 12
21727: PPUSH
21728: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21732: LD_VAR 0 8
21736: PPUSH
21737: LD_VAR 0 5
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: LD_INT 1
21749: PPUSH
21750: CALL_OW 48
// end ;
21754: LD_VAR 0 7
21758: RET
// export hInvincible ; every 1 do
21759: GO 21761
21761: DISABLE
// hInvincible := [ ] ;
21762: LD_ADDR_EXP 77
21766: PUSH
21767: EMPTY
21768: ST_TO_ADDR
21769: END
// every 10 do var i ;
21770: GO 21772
21772: DISABLE
21773: LD_INT 0
21775: PPUSH
// begin enable ;
21776: ENABLE
// if not hInvincible then
21777: LD_EXP 77
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21830
// for i in hInvincible do
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: LD_EXP 77
21795: PUSH
21796: FOR_IN
21797: IFFALSE 21828
// if GetLives ( i ) < 1000 then
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 256
21808: PUSH
21809: LD_INT 1000
21811: LESS
21812: IFFALSE 21826
// SetLives ( i , 1000 ) ;
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_INT 1000
21821: PPUSH
21822: CALL_OW 234
21826: GO 21796
21828: POP
21829: POP
// end ;
21830: PPOPN 1
21832: END
// export function hHackInvincible ; var i ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_INT 2
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 21
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: PPUSH
21870: CALL_OW 69
21874: PUSH
21875: FOR_IN
21876: IFFALSE 21937
// if IsSelected ( i ) then
21878: LD_VAR 0 2
21882: PPUSH
21883: CALL_OW 306
21887: IFFALSE 21935
// begin if i in hInvincible then
21889: LD_VAR 0 2
21893: PUSH
21894: LD_EXP 77
21898: IN
21899: IFFALSE 21919
// hInvincible := hInvincible diff i else
21901: LD_ADDR_EXP 77
21905: PUSH
21906: LD_EXP 77
21910: PUSH
21911: LD_VAR 0 2
21915: DIFF
21916: ST_TO_ADDR
21917: GO 21935
// hInvincible := hInvincible union i ;
21919: LD_ADDR_EXP 77
21923: PUSH
21924: LD_EXP 77
21928: PUSH
21929: LD_VAR 0 2
21933: UNION
21934: ST_TO_ADDR
// end ;
21935: GO 21875
21937: POP
21938: POP
// end ;
21939: LD_VAR 0 1
21943: RET
// export function hHackInvisible ; var i , j ; begin
21944: LD_INT 0
21946: PPUSH
21947: PPUSH
21948: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 21
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: CALL_OW 69
21968: PUSH
21969: FOR_IN
21970: IFFALSE 21994
// if IsSelected ( i ) then
21972: LD_VAR 0 2
21976: PPUSH
21977: CALL_OW 306
21981: IFFALSE 21992
// ComForceInvisible ( i ) ;
21983: LD_VAR 0 2
21987: PPUSH
21988: CALL_OW 496
21992: GO 21969
21994: POP
21995: POP
// end ;
21996: LD_VAR 0 1
22000: RET
// export function hHackChangeYourSide ; begin
22001: LD_INT 0
22003: PPUSH
// if your_side = 8 then
22004: LD_OWVAR 2
22008: PUSH
22009: LD_INT 8
22011: EQUAL
22012: IFFALSE 22024
// your_side := 0 else
22014: LD_ADDR_OWVAR 2
22018: PUSH
22019: LD_INT 0
22021: ST_TO_ADDR
22022: GO 22038
// your_side := your_side + 1 ;
22024: LD_ADDR_OWVAR 2
22028: PUSH
22029: LD_OWVAR 2
22033: PUSH
22034: LD_INT 1
22036: PLUS
22037: ST_TO_ADDR
// end ;
22038: LD_VAR 0 1
22042: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
22047: PPUSH
// for i in all_units do
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_OWVAR 3
22057: PUSH
22058: FOR_IN
22059: IFFALSE 22137
// if IsSelected ( i ) then
22061: LD_VAR 0 2
22065: PPUSH
22066: CALL_OW 306
22070: IFFALSE 22135
// begin j := GetSide ( i ) ;
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_VAR 0 2
22081: PPUSH
22082: CALL_OW 255
22086: ST_TO_ADDR
// if j = 8 then
22087: LD_VAR 0 3
22091: PUSH
22092: LD_INT 8
22094: EQUAL
22095: IFFALSE 22107
// j := 0 else
22097: LD_ADDR_VAR 0 3
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
22105: GO 22121
// j := j + 1 ;
22107: LD_ADDR_VAR 0 3
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 1
22119: PLUS
22120: ST_TO_ADDR
// SetSide ( i , j ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: CALL_OW 235
// end ;
22135: GO 22058
22137: POP
22138: POP
// end ;
22139: LD_VAR 0 1
22143: RET
// export function hHackFog ; begin
22144: LD_INT 0
22146: PPUSH
// FogOff ( true ) ;
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 344
// end ;
22154: LD_VAR 0 1
22158: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22159: LD_INT 0
22161: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_VAR 0 2
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: CALL_OW 483
// CenterOnXY ( x , y ) ;
22187: LD_VAR 0 2
22191: PPUSH
22192: LD_VAR 0 3
22196: PPUSH
22197: CALL_OW 84
// end ;
22201: LD_VAR 0 4
22205: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22206: LD_INT 0
22208: PPUSH
22209: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22210: LD_VAR 0 1
22214: NOT
22215: PUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: CALL_OW 488
22230: NOT
22231: OR
22232: PUSH
22233: LD_VAR 0 1
22237: PPUSH
22238: CALL_OW 266
22242: PUSH
22243: LD_INT 3
22245: NONEQUAL
22246: PUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 247
22256: PUSH
22257: LD_INT 1
22259: EQUAL
22260: NOT
22261: AND
22262: OR
22263: IFFALSE 22267
// exit ;
22265: GO 22416
// if GetType ( factory ) = unit_human then
22267: LD_VAR 0 1
22271: PPUSH
22272: CALL_OW 247
22276: PUSH
22277: LD_INT 1
22279: EQUAL
22280: IFFALSE 22297
// factory := IsInUnit ( factory ) ;
22282: LD_ADDR_VAR 0 1
22286: PUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 310
22296: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 266
22306: PUSH
22307: LD_INT 3
22309: NONEQUAL
22310: IFFALSE 22314
// exit ;
22312: GO 22416
// if HexInfo ( x , y ) = factory then
22314: LD_VAR 0 2
22318: PPUSH
22319: LD_VAR 0 3
22323: PPUSH
22324: CALL_OW 428
22328: PUSH
22329: LD_VAR 0 1
22333: EQUAL
22334: IFFALSE 22361
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22336: LD_ADDR_EXP 78
22340: PUSH
22341: LD_EXP 78
22345: PPUSH
22346: LD_VAR 0 1
22350: PPUSH
22351: LD_INT 0
22353: PPUSH
22354: CALL_OW 1
22358: ST_TO_ADDR
22359: GO 22412
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22361: LD_ADDR_EXP 78
22365: PUSH
22366: LD_EXP 78
22370: PPUSH
22371: LD_VAR 0 1
22375: PPUSH
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 255
22385: PUSH
22386: LD_VAR 0 1
22390: PUSH
22391: LD_VAR 0 2
22395: PUSH
22396: LD_VAR 0 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 1
22411: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22412: CALL 22421 0 0
// end ;
22416: LD_VAR 0 4
22420: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22421: LD_INT 0
22423: PPUSH
22424: PPUSH
22425: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22426: LD_STRING resetFactoryWaypoint();
22428: PPUSH
22429: CALL_OW 559
// if factoryWaypoints then
22433: LD_EXP 78
22437: IFFALSE 22563
// begin list := PrepareArray ( factoryWaypoints ) ;
22439: LD_ADDR_VAR 0 3
22443: PUSH
22444: LD_EXP 78
22448: PPUSH
22449: CALL 64743 0 1
22453: ST_TO_ADDR
// for i := 1 to list do
22454: LD_ADDR_VAR 0 2
22458: PUSH
22459: DOUBLE
22460: LD_INT 1
22462: DEC
22463: ST_TO_ADDR
22464: LD_VAR 0 3
22468: PUSH
22469: FOR_TO
22470: IFFALSE 22561
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22472: LD_STRING setFactoryWaypointXY(
22474: PUSH
22475: LD_VAR 0 3
22479: PUSH
22480: LD_VAR 0 2
22484: ARRAY
22485: PUSH
22486: LD_INT 1
22488: ARRAY
22489: STR
22490: PUSH
22491: LD_STRING ,
22493: STR
22494: PUSH
22495: LD_VAR 0 3
22499: PUSH
22500: LD_VAR 0 2
22504: ARRAY
22505: PUSH
22506: LD_INT 2
22508: ARRAY
22509: STR
22510: PUSH
22511: LD_STRING ,
22513: STR
22514: PUSH
22515: LD_VAR 0 3
22519: PUSH
22520: LD_VAR 0 2
22524: ARRAY
22525: PUSH
22526: LD_INT 3
22528: ARRAY
22529: STR
22530: PUSH
22531: LD_STRING ,
22533: STR
22534: PUSH
22535: LD_VAR 0 3
22539: PUSH
22540: LD_VAR 0 2
22544: ARRAY
22545: PUSH
22546: LD_INT 4
22548: ARRAY
22549: STR
22550: PUSH
22551: LD_STRING )
22553: STR
22554: PPUSH
22555: CALL_OW 559
22559: GO 22469
22561: POP
22562: POP
// end ; end ;
22563: LD_VAR 0 1
22567: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22568: LD_INT 0
22570: PPUSH
// if HexInfo ( x , y ) = warehouse then
22571: LD_VAR 0 2
22575: PPUSH
22576: LD_VAR 0 3
22580: PPUSH
22581: CALL_OW 428
22585: PUSH
22586: LD_VAR 0 1
22590: EQUAL
22591: IFFALSE 22618
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22593: LD_ADDR_EXP 79
22597: PUSH
22598: LD_EXP 79
22602: PPUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: LD_INT 0
22610: PPUSH
22611: CALL_OW 1
22615: ST_TO_ADDR
22616: GO 22669
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22618: LD_ADDR_EXP 79
22622: PUSH
22623: LD_EXP 79
22627: PPUSH
22628: LD_VAR 0 1
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 255
22642: PUSH
22643: LD_VAR 0 1
22647: PUSH
22648: LD_VAR 0 2
22652: PUSH
22653: LD_VAR 0 3
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 1
22668: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22669: CALL 22678 0 0
// end ;
22673: LD_VAR 0 4
22677: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22678: LD_INT 0
22680: PPUSH
22681: PPUSH
22682: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22683: LD_STRING resetWarehouseGatheringPoints();
22685: PPUSH
22686: CALL_OW 559
// if warehouseGatheringPoints then
22690: LD_EXP 79
22694: IFFALSE 22820
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22696: LD_ADDR_VAR 0 3
22700: PUSH
22701: LD_EXP 79
22705: PPUSH
22706: CALL 64743 0 1
22710: ST_TO_ADDR
// for i := 1 to list do
22711: LD_ADDR_VAR 0 2
22715: PUSH
22716: DOUBLE
22717: LD_INT 1
22719: DEC
22720: ST_TO_ADDR
22721: LD_VAR 0 3
22725: PUSH
22726: FOR_TO
22727: IFFALSE 22818
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22729: LD_STRING setWarehouseGatheringPointXY(
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 2
22741: ARRAY
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: STR
22747: PUSH
22748: LD_STRING ,
22750: STR
22751: PUSH
22752: LD_VAR 0 3
22756: PUSH
22757: LD_VAR 0 2
22761: ARRAY
22762: PUSH
22763: LD_INT 2
22765: ARRAY
22766: STR
22767: PUSH
22768: LD_STRING ,
22770: STR
22771: PUSH
22772: LD_VAR 0 3
22776: PUSH
22777: LD_VAR 0 2
22781: ARRAY
22782: PUSH
22783: LD_INT 3
22785: ARRAY
22786: STR
22787: PUSH
22788: LD_STRING ,
22790: STR
22791: PUSH
22792: LD_VAR 0 3
22796: PUSH
22797: LD_VAR 0 2
22801: ARRAY
22802: PUSH
22803: LD_INT 4
22805: ARRAY
22806: STR
22807: PUSH
22808: LD_STRING )
22810: STR
22811: PPUSH
22812: CALL_OW 559
22816: GO 22726
22818: POP
22819: POP
// end ; end ;
22820: LD_VAR 0 1
22824: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22825: LD_EXP 79
22829: IFFALSE 23514
22831: GO 22833
22833: DISABLE
22834: LD_INT 0
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
22840: PPUSH
22841: PPUSH
22842: PPUSH
22843: PPUSH
22844: PPUSH
// begin enable ;
22845: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22846: LD_ADDR_VAR 0 3
22850: PUSH
22851: LD_EXP 79
22855: PPUSH
22856: CALL 64743 0 1
22860: ST_TO_ADDR
// if not list then
22861: LD_VAR 0 3
22865: NOT
22866: IFFALSE 22870
// exit ;
22868: GO 23514
// for i := 1 to list do
22870: LD_ADDR_VAR 0 1
22874: PUSH
22875: DOUBLE
22876: LD_INT 1
22878: DEC
22879: ST_TO_ADDR
22880: LD_VAR 0 3
22884: PUSH
22885: FOR_TO
22886: IFFALSE 23512
// begin depot := list [ i ] [ 2 ] ;
22888: LD_ADDR_VAR 0 8
22892: PUSH
22893: LD_VAR 0 3
22897: PUSH
22898: LD_VAR 0 1
22902: ARRAY
22903: PUSH
22904: LD_INT 2
22906: ARRAY
22907: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22908: LD_ADDR_VAR 0 5
22912: PUSH
22913: LD_VAR 0 3
22917: PUSH
22918: LD_VAR 0 1
22922: ARRAY
22923: PUSH
22924: LD_INT 1
22926: ARRAY
22927: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22928: LD_VAR 0 8
22932: PPUSH
22933: CALL_OW 301
22937: PUSH
22938: LD_VAR 0 5
22942: PUSH
22943: LD_VAR 0 8
22947: PPUSH
22948: CALL_OW 255
22952: NONEQUAL
22953: OR
22954: IFFALSE 22983
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22956: LD_ADDR_EXP 79
22960: PUSH
22961: LD_EXP 79
22965: PPUSH
22966: LD_VAR 0 8
22970: PPUSH
22971: LD_INT 0
22973: PPUSH
22974: CALL_OW 1
22978: ST_TO_ADDR
// exit ;
22979: POP
22980: POP
22981: GO 23514
// end ; x := list [ i ] [ 3 ] ;
22983: LD_ADDR_VAR 0 6
22987: PUSH
22988: LD_VAR 0 3
22992: PUSH
22993: LD_VAR 0 1
22997: ARRAY
22998: PUSH
22999: LD_INT 3
23001: ARRAY
23002: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23003: LD_ADDR_VAR 0 7
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: LD_VAR 0 1
23017: ARRAY
23018: PUSH
23019: LD_INT 4
23021: ARRAY
23022: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23023: LD_ADDR_VAR 0 9
23027: PUSH
23028: LD_VAR 0 6
23032: PPUSH
23033: LD_VAR 0 7
23037: PPUSH
23038: LD_INT 16
23040: PPUSH
23041: CALL 63331 0 3
23045: ST_TO_ADDR
// if not cratesNearbyPoint then
23046: LD_VAR 0 9
23050: NOT
23051: IFFALSE 23057
// exit ;
23053: POP
23054: POP
23055: GO 23514
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23057: LD_ADDR_VAR 0 4
23061: PUSH
23062: LD_INT 22
23064: PUSH
23065: LD_VAR 0 5
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: LD_INT 60
23079: PUSH
23080: EMPTY
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 91
23089: PUSH
23090: LD_VAR 0 8
23094: PUSH
23095: LD_INT 6
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 25
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 25
23118: PUSH
23119: LD_INT 16
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 69
23141: PUSH
23142: LD_VAR 0 8
23146: PPUSH
23147: CALL_OW 313
23151: PPUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 60
23157: PUSH
23158: EMPTY
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 25
23180: PUSH
23181: LD_INT 16
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PPUSH
23197: CALL_OW 72
23201: UNION
23202: ST_TO_ADDR
// if tmp then
23203: LD_VAR 0 4
23207: IFFALSE 23287
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_VAR 0 4
23218: PPUSH
23219: LD_INT 3
23221: PPUSH
23222: CALL 61300 0 2
23226: ST_TO_ADDR
// for j in tmp do
23227: LD_ADDR_VAR 0 2
23231: PUSH
23232: LD_VAR 0 4
23236: PUSH
23237: FOR_IN
23238: IFFALSE 23281
// begin if IsInUnit ( j ) then
23240: LD_VAR 0 2
23244: PPUSH
23245: CALL_OW 310
23249: IFFALSE 23260
// ComExit ( j ) ;
23251: LD_VAR 0 2
23255: PPUSH
23256: CALL 61383 0 1
// AddComCollect ( j , x , y ) ;
23260: LD_VAR 0 2
23264: PPUSH
23265: LD_VAR 0 6
23269: PPUSH
23270: LD_VAR 0 7
23274: PPUSH
23275: CALL_OW 177
// end ;
23279: GO 23237
23281: POP
23282: POP
// exit ;
23283: POP
23284: POP
23285: GO 23514
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23287: LD_ADDR_VAR 0 4
23291: PUSH
23292: LD_INT 22
23294: PUSH
23295: LD_VAR 0 5
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 91
23306: PUSH
23307: LD_VAR 0 8
23311: PUSH
23312: LD_INT 8
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: LD_INT 34
23325: PUSH
23326: LD_INT 12
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 34
23335: PUSH
23336: LD_INT 51
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 34
23345: PUSH
23346: LD_INT 32
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: LD_INT 89
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: PPUSH
23375: CALL_OW 69
23379: ST_TO_ADDR
// if tmp then
23380: LD_VAR 0 4
23384: IFFALSE 23510
// begin for j in tmp do
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_VAR 0 4
23395: PUSH
23396: FOR_IN
23397: IFFALSE 23508
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23399: LD_VAR 0 2
23403: PPUSH
23404: CALL_OW 262
23408: PUSH
23409: LD_INT 3
23411: EQUAL
23412: PUSH
23413: LD_VAR 0 2
23417: PPUSH
23418: CALL_OW 261
23422: PUSH
23423: LD_INT 20
23425: GREATER
23426: OR
23427: PUSH
23428: LD_VAR 0 2
23432: PPUSH
23433: CALL_OW 314
23437: NOT
23438: AND
23439: PUSH
23440: LD_VAR 0 2
23444: PPUSH
23445: CALL_OW 263
23449: PUSH
23450: LD_INT 1
23452: NONEQUAL
23453: PUSH
23454: LD_VAR 0 2
23458: PPUSH
23459: CALL_OW 311
23463: OR
23464: AND
23465: IFFALSE 23506
// begin ComCollect ( j , x , y ) ;
23467: LD_VAR 0 2
23471: PPUSH
23472: LD_VAR 0 6
23476: PPUSH
23477: LD_VAR 0 7
23481: PPUSH
23482: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23486: LD_VAR 0 2
23490: PPUSH
23491: LD_VAR 0 8
23495: PPUSH
23496: CALL_OW 172
// exit ;
23500: POP
23501: POP
23502: POP
23503: POP
23504: GO 23514
// end ;
23506: GO 23396
23508: POP
23509: POP
// end ; end ;
23510: GO 22885
23512: POP
23513: POP
// end ; end_of_file
23514: PPOPN 9
23516: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23517: LD_INT 0
23519: PPUSH
23520: PPUSH
// if exist_mode then
23521: LD_VAR 0 2
23525: IFFALSE 23550
// unit := CreateCharacter ( prefix & ident ) else
23527: LD_ADDR_VAR 0 5
23531: PUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 1
23541: STR
23542: PPUSH
23543: CALL_OW 34
23547: ST_TO_ADDR
23548: GO 23565
// unit := NewCharacter ( ident ) ;
23550: LD_ADDR_VAR 0 5
23554: PUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 25
23564: ST_TO_ADDR
// result := unit ;
23565: LD_ADDR_VAR 0 4
23569: PUSH
23570: LD_VAR 0 5
23574: ST_TO_ADDR
// end ;
23575: LD_VAR 0 4
23579: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23580: LD_INT 0
23582: PPUSH
23583: PPUSH
// if not side or not nation then
23584: LD_VAR 0 1
23588: NOT
23589: PUSH
23590: LD_VAR 0 2
23594: NOT
23595: OR
23596: IFFALSE 23600
// exit ;
23598: GO 24368
// case nation of nation_american :
23600: LD_VAR 0 2
23604: PUSH
23605: LD_INT 1
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23827
23613: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23614: LD_ADDR_VAR 0 4
23618: PUSH
23619: LD_INT 35
23621: PUSH
23622: LD_INT 45
23624: PUSH
23625: LD_INT 46
23627: PUSH
23628: LD_INT 47
23630: PUSH
23631: LD_INT 82
23633: PUSH
23634: LD_INT 83
23636: PUSH
23637: LD_INT 84
23639: PUSH
23640: LD_INT 85
23642: PUSH
23643: LD_INT 86
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: LD_INT 6
23654: PUSH
23655: LD_INT 15
23657: PUSH
23658: LD_INT 16
23660: PUSH
23661: LD_INT 7
23663: PUSH
23664: LD_INT 12
23666: PUSH
23667: LD_INT 13
23669: PUSH
23670: LD_INT 10
23672: PUSH
23673: LD_INT 14
23675: PUSH
23676: LD_INT 20
23678: PUSH
23679: LD_INT 21
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 25
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 27
23693: PUSH
23694: LD_INT 36
23696: PUSH
23697: LD_INT 69
23699: PUSH
23700: LD_INT 39
23702: PUSH
23703: LD_INT 34
23705: PUSH
23706: LD_INT 40
23708: PUSH
23709: LD_INT 48
23711: PUSH
23712: LD_INT 49
23714: PUSH
23715: LD_INT 50
23717: PUSH
23718: LD_INT 51
23720: PUSH
23721: LD_INT 52
23723: PUSH
23724: LD_INT 53
23726: PUSH
23727: LD_INT 54
23729: PUSH
23730: LD_INT 55
23732: PUSH
23733: LD_INT 56
23735: PUSH
23736: LD_INT 57
23738: PUSH
23739: LD_INT 58
23741: PUSH
23742: LD_INT 59
23744: PUSH
23745: LD_INT 60
23747: PUSH
23748: LD_INT 61
23750: PUSH
23751: LD_INT 62
23753: PUSH
23754: LD_INT 80
23756: PUSH
23757: LD_INT 82
23759: PUSH
23760: LD_INT 83
23762: PUSH
23763: LD_INT 84
23765: PUSH
23766: LD_INT 85
23768: PUSH
23769: LD_INT 86
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
23825: GO 24292
23827: LD_INT 2
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 24061
23835: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23836: LD_ADDR_VAR 0 4
23840: PUSH
23841: LD_INT 35
23843: PUSH
23844: LD_INT 45
23846: PUSH
23847: LD_INT 46
23849: PUSH
23850: LD_INT 47
23852: PUSH
23853: LD_INT 82
23855: PUSH
23856: LD_INT 83
23858: PUSH
23859: LD_INT 84
23861: PUSH
23862: LD_INT 85
23864: PUSH
23865: LD_INT 87
23867: PUSH
23868: LD_INT 70
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: LD_INT 11
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 4
23882: PUSH
23883: LD_INT 5
23885: PUSH
23886: LD_INT 6
23888: PUSH
23889: LD_INT 15
23891: PUSH
23892: LD_INT 18
23894: PUSH
23895: LD_INT 7
23897: PUSH
23898: LD_INT 17
23900: PUSH
23901: LD_INT 8
23903: PUSH
23904: LD_INT 20
23906: PUSH
23907: LD_INT 21
23909: PUSH
23910: LD_INT 22
23912: PUSH
23913: LD_INT 72
23915: PUSH
23916: LD_INT 26
23918: PUSH
23919: LD_INT 69
23921: PUSH
23922: LD_INT 39
23924: PUSH
23925: LD_INT 40
23927: PUSH
23928: LD_INT 41
23930: PUSH
23931: LD_INT 42
23933: PUSH
23934: LD_INT 43
23936: PUSH
23937: LD_INT 48
23939: PUSH
23940: LD_INT 49
23942: PUSH
23943: LD_INT 50
23945: PUSH
23946: LD_INT 51
23948: PUSH
23949: LD_INT 52
23951: PUSH
23952: LD_INT 53
23954: PUSH
23955: LD_INT 54
23957: PUSH
23958: LD_INT 55
23960: PUSH
23961: LD_INT 56
23963: PUSH
23964: LD_INT 60
23966: PUSH
23967: LD_INT 61
23969: PUSH
23970: LD_INT 62
23972: PUSH
23973: LD_INT 66
23975: PUSH
23976: LD_INT 67
23978: PUSH
23979: LD_INT 68
23981: PUSH
23982: LD_INT 81
23984: PUSH
23985: LD_INT 82
23987: PUSH
23988: LD_INT 83
23990: PUSH
23991: LD_INT 84
23993: PUSH
23994: LD_INT 85
23996: PUSH
23997: LD_INT 87
23999: PUSH
24000: LD_INT 88
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: ST_TO_ADDR
24059: GO 24292
24061: LD_INT 3
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24291
24069: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24070: LD_ADDR_VAR 0 4
24074: PUSH
24075: LD_INT 46
24077: PUSH
24078: LD_INT 47
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 82
24089: PUSH
24090: LD_INT 83
24092: PUSH
24093: LD_INT 84
24095: PUSH
24096: LD_INT 85
24098: PUSH
24099: LD_INT 86
24101: PUSH
24102: LD_INT 11
24104: PUSH
24105: LD_INT 9
24107: PUSH
24108: LD_INT 20
24110: PUSH
24111: LD_INT 19
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 24
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 28
24128: PUSH
24129: LD_INT 29
24131: PUSH
24132: LD_INT 30
24134: PUSH
24135: LD_INT 31
24137: PUSH
24138: LD_INT 37
24140: PUSH
24141: LD_INT 38
24143: PUSH
24144: LD_INT 32
24146: PUSH
24147: LD_INT 27
24149: PUSH
24150: LD_INT 33
24152: PUSH
24153: LD_INT 69
24155: PUSH
24156: LD_INT 39
24158: PUSH
24159: LD_INT 34
24161: PUSH
24162: LD_INT 40
24164: PUSH
24165: LD_INT 71
24167: PUSH
24168: LD_INT 23
24170: PUSH
24171: LD_INT 44
24173: PUSH
24174: LD_INT 48
24176: PUSH
24177: LD_INT 49
24179: PUSH
24180: LD_INT 50
24182: PUSH
24183: LD_INT 51
24185: PUSH
24186: LD_INT 52
24188: PUSH
24189: LD_INT 53
24191: PUSH
24192: LD_INT 54
24194: PUSH
24195: LD_INT 55
24197: PUSH
24198: LD_INT 56
24200: PUSH
24201: LD_INT 57
24203: PUSH
24204: LD_INT 58
24206: PUSH
24207: LD_INT 59
24209: PUSH
24210: LD_INT 63
24212: PUSH
24213: LD_INT 64
24215: PUSH
24216: LD_INT 65
24218: PUSH
24219: LD_INT 82
24221: PUSH
24222: LD_INT 83
24224: PUSH
24225: LD_INT 84
24227: PUSH
24228: LD_INT 85
24230: PUSH
24231: LD_INT 86
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: ST_TO_ADDR
24289: GO 24292
24291: POP
// if state > - 1 and state < 3 then
24292: LD_VAR 0 3
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: GREATER
24301: PUSH
24302: LD_VAR 0 3
24306: PUSH
24307: LD_INT 3
24309: LESS
24310: AND
24311: IFFALSE 24368
// for i in result do
24313: LD_ADDR_VAR 0 5
24317: PUSH
24318: LD_VAR 0 4
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24366
// if GetTech ( i , side ) <> state then
24326: LD_VAR 0 5
24330: PPUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 321
24340: PUSH
24341: LD_VAR 0 3
24345: NONEQUAL
24346: IFFALSE 24364
// result := result diff i ;
24348: LD_ADDR_VAR 0 4
24352: PUSH
24353: LD_VAR 0 4
24357: PUSH
24358: LD_VAR 0 5
24362: DIFF
24363: ST_TO_ADDR
24364: GO 24323
24366: POP
24367: POP
// end ;
24368: LD_VAR 0 4
24372: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24373: LD_INT 0
24375: PPUSH
24376: PPUSH
24377: PPUSH
// result := true ;
24378: LD_ADDR_VAR 0 3
24382: PUSH
24383: LD_INT 1
24385: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24386: LD_ADDR_VAR 0 5
24390: PUSH
24391: LD_VAR 0 2
24395: PPUSH
24396: CALL_OW 480
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 5
24405: NOT
24406: IFFALSE 24410
// exit ;
24408: GO 24459
// for i in tmp do
24410: LD_ADDR_VAR 0 4
24414: PUSH
24415: LD_VAR 0 5
24419: PUSH
24420: FOR_IN
24421: IFFALSE 24457
// if GetTech ( i , side ) <> state_researched then
24423: LD_VAR 0 4
24427: PPUSH
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL_OW 321
24437: PUSH
24438: LD_INT 2
24440: NONEQUAL
24441: IFFALSE 24455
// begin result := false ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 0
24450: ST_TO_ADDR
// exit ;
24451: POP
24452: POP
24453: GO 24459
// end ;
24455: GO 24420
24457: POP
24458: POP
// end ;
24459: LD_VAR 0 3
24463: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24479: LD_VAR 0 1
24483: NOT
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 257
24494: PUSH
24495: LD_INT 9
24497: NONEQUAL
24498: OR
24499: IFFALSE 24503
// exit ;
24501: GO 25076
// side := GetSide ( unit ) ;
24503: LD_ADDR_VAR 0 9
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 255
24517: ST_TO_ADDR
// tech_space := tech_spacanom ;
24518: LD_ADDR_VAR 0 12
24522: PUSH
24523: LD_INT 29
24525: ST_TO_ADDR
// tech_time := tech_taurad ;
24526: LD_ADDR_VAR 0 13
24530: PUSH
24531: LD_INT 28
24533: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24534: LD_ADDR_VAR 0 11
24538: PUSH
24539: LD_VAR 0 1
24543: PPUSH
24544: CALL_OW 310
24548: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24549: LD_VAR 0 11
24553: PPUSH
24554: CALL_OW 247
24558: PUSH
24559: LD_INT 2
24561: EQUAL
24562: IFFALSE 24566
// exit ;
24564: GO 25076
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24566: LD_ADDR_VAR 0 8
24570: PUSH
24571: LD_INT 81
24573: PUSH
24574: LD_VAR 0 9
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PPUSH
24604: CALL_OW 69
24608: ST_TO_ADDR
// if not tmp then
24609: LD_VAR 0 8
24613: NOT
24614: IFFALSE 24618
// exit ;
24616: GO 25076
// if in_unit then
24618: LD_VAR 0 11
24622: IFFALSE 24646
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24624: LD_ADDR_VAR 0 10
24628: PUSH
24629: LD_VAR 0 8
24633: PPUSH
24634: LD_VAR 0 11
24638: PPUSH
24639: CALL_OW 74
24643: ST_TO_ADDR
24644: GO 24666
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24646: LD_ADDR_VAR 0 10
24650: PUSH
24651: LD_VAR 0 8
24655: PPUSH
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL_OW 74
24665: ST_TO_ADDR
// if not enemy then
24666: LD_VAR 0 10
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 25076
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24675: LD_VAR 0 11
24679: PUSH
24680: LD_VAR 0 11
24684: PPUSH
24685: LD_VAR 0 10
24689: PPUSH
24690: CALL_OW 296
24694: PUSH
24695: LD_INT 13
24697: GREATER
24698: AND
24699: PUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_VAR 0 10
24709: PPUSH
24710: CALL_OW 296
24714: PUSH
24715: LD_INT 12
24717: GREATER
24718: OR
24719: IFFALSE 24723
// exit ;
24721: GO 25076
// missile := [ 1 ] ;
24723: LD_ADDR_VAR 0 14
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24734: LD_VAR 0 9
24738: PPUSH
24739: LD_VAR 0 12
24743: PPUSH
24744: CALL_OW 325
24748: IFFALSE 24777
// missile := Replace ( missile , missile + 1 , 2 ) ;
24750: LD_ADDR_VAR 0 14
24754: PUSH
24755: LD_VAR 0 14
24759: PPUSH
24760: LD_VAR 0 14
24764: PUSH
24765: LD_INT 1
24767: PLUS
24768: PPUSH
24769: LD_INT 2
24771: PPUSH
24772: CALL_OW 1
24776: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24777: LD_VAR 0 9
24781: PPUSH
24782: LD_VAR 0 13
24786: PPUSH
24787: CALL_OW 325
24791: PUSH
24792: LD_VAR 0 10
24796: PPUSH
24797: CALL_OW 255
24801: PPUSH
24802: LD_VAR 0 13
24806: PPUSH
24807: CALL_OW 325
24811: NOT
24812: AND
24813: IFFALSE 24842
// missile := Replace ( missile , missile + 1 , 3 ) ;
24815: LD_ADDR_VAR 0 14
24819: PUSH
24820: LD_VAR 0 14
24824: PPUSH
24825: LD_VAR 0 14
24829: PUSH
24830: LD_INT 1
24832: PLUS
24833: PPUSH
24834: LD_INT 3
24836: PPUSH
24837: CALL_OW 1
24841: ST_TO_ADDR
// if missile < 2 then
24842: LD_VAR 0 14
24846: PUSH
24847: LD_INT 2
24849: LESS
24850: IFFALSE 24854
// exit ;
24852: GO 25076
// x := GetX ( enemy ) ;
24854: LD_ADDR_VAR 0 4
24858: PUSH
24859: LD_VAR 0 10
24863: PPUSH
24864: CALL_OW 250
24868: ST_TO_ADDR
// y := GetY ( enemy ) ;
24869: LD_ADDR_VAR 0 5
24873: PUSH
24874: LD_VAR 0 10
24878: PPUSH
24879: CALL_OW 251
24883: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24884: LD_ADDR_VAR 0 6
24888: PUSH
24889: LD_VAR 0 4
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PPUSH
24898: LD_INT 1
24900: PPUSH
24901: CALL_OW 12
24905: PLUS
24906: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24907: LD_ADDR_VAR 0 7
24911: PUSH
24912: LD_VAR 0 5
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PPUSH
24921: LD_INT 1
24923: PPUSH
24924: CALL_OW 12
24928: PLUS
24929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24930: LD_VAR 0 6
24934: PPUSH
24935: LD_VAR 0 7
24939: PPUSH
24940: CALL_OW 488
24944: NOT
24945: IFFALSE 24967
// begin _x := x ;
24947: LD_ADDR_VAR 0 6
24951: PUSH
24952: LD_VAR 0 4
24956: ST_TO_ADDR
// _y := y ;
24957: LD_ADDR_VAR 0 7
24961: PUSH
24962: LD_VAR 0 5
24966: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_INT 1
24974: PPUSH
24975: LD_VAR 0 14
24979: PPUSH
24980: CALL_OW 12
24984: ST_TO_ADDR
// case i of 1 :
24985: LD_VAR 0 3
24989: PUSH
24990: LD_INT 1
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25015
24998: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_VAR 0 10
25008: PPUSH
25009: CALL_OW 115
25013: GO 25076
25015: LD_INT 2
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25045
25023: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_VAR 0 6
25033: PPUSH
25034: LD_VAR 0 7
25038: PPUSH
25039: CALL_OW 153
25043: GO 25076
25045: LD_INT 3
25047: DOUBLE
25048: EQUAL
25049: IFTRUE 25053
25051: GO 25075
25053: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_VAR 0 6
25063: PPUSH
25064: LD_VAR 0 7
25068: PPUSH
25069: CALL_OW 154
25073: GO 25076
25075: POP
// end ;
25076: LD_VAR 0 2
25080: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
// if not unit or not building then
25089: LD_VAR 0 1
25093: NOT
25094: PUSH
25095: LD_VAR 0 2
25099: NOT
25100: OR
25101: IFFALSE 25105
// exit ;
25103: GO 25263
// x := GetX ( building ) ;
25105: LD_ADDR_VAR 0 5
25109: PUSH
25110: LD_VAR 0 2
25114: PPUSH
25115: CALL_OW 250
25119: ST_TO_ADDR
// y := GetY ( building ) ;
25120: LD_ADDR_VAR 0 6
25124: PUSH
25125: LD_VAR 0 2
25129: PPUSH
25130: CALL_OW 251
25134: ST_TO_ADDR
// for i = 0 to 5 do
25135: LD_ADDR_VAR 0 4
25139: PUSH
25140: DOUBLE
25141: LD_INT 0
25143: DEC
25144: ST_TO_ADDR
25145: LD_INT 5
25147: PUSH
25148: FOR_TO
25149: IFFALSE 25261
// begin _x := ShiftX ( x , i , 3 ) ;
25151: LD_ADDR_VAR 0 7
25155: PUSH
25156: LD_VAR 0 5
25160: PPUSH
25161: LD_VAR 0 4
25165: PPUSH
25166: LD_INT 3
25168: PPUSH
25169: CALL_OW 272
25173: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25174: LD_ADDR_VAR 0 8
25178: PUSH
25179: LD_VAR 0 6
25183: PPUSH
25184: LD_VAR 0 4
25188: PPUSH
25189: LD_INT 3
25191: PPUSH
25192: CALL_OW 273
25196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25197: LD_VAR 0 7
25201: PPUSH
25202: LD_VAR 0 8
25206: PPUSH
25207: CALL_OW 488
25211: NOT
25212: IFFALSE 25216
// continue ;
25214: GO 25148
// if HexInfo ( _x , _y ) = 0 then
25216: LD_VAR 0 7
25220: PPUSH
25221: LD_VAR 0 8
25225: PPUSH
25226: CALL_OW 428
25230: PUSH
25231: LD_INT 0
25233: EQUAL
25234: IFFALSE 25259
// begin ComMoveXY ( unit , _x , _y ) ;
25236: LD_VAR 0 1
25240: PPUSH
25241: LD_VAR 0 7
25245: PPUSH
25246: LD_VAR 0 8
25250: PPUSH
25251: CALL_OW 111
// exit ;
25255: POP
25256: POP
25257: GO 25263
// end ; end ;
25259: GO 25148
25261: POP
25262: POP
// end ;
25263: LD_VAR 0 3
25267: RET
// export function ScanBase ( side , base_area ) ; begin
25268: LD_INT 0
25270: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25271: LD_ADDR_VAR 0 3
25275: PUSH
25276: LD_VAR 0 2
25280: PPUSH
25281: LD_INT 81
25283: PUSH
25284: LD_VAR 0 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 70
25297: ST_TO_ADDR
// end ;
25298: LD_VAR 0 3
25302: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25303: LD_INT 0
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
// result := false ;
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: LD_INT 0
25316: ST_TO_ADDR
// side := GetSide ( unit ) ;
25317: LD_ADDR_VAR 0 3
25321: PUSH
25322: LD_VAR 0 1
25326: PPUSH
25327: CALL_OW 255
25331: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25332: LD_ADDR_VAR 0 4
25336: PUSH
25337: LD_VAR 0 1
25341: PPUSH
25342: CALL_OW 248
25346: ST_TO_ADDR
// case nat of 1 :
25347: LD_VAR 0 4
25351: PUSH
25352: LD_INT 1
25354: DOUBLE
25355: EQUAL
25356: IFTRUE 25360
25358: GO 25371
25360: POP
// tech := tech_lassight ; 2 :
25361: LD_ADDR_VAR 0 5
25365: PUSH
25366: LD_INT 12
25368: ST_TO_ADDR
25369: GO 25410
25371: LD_INT 2
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25390
25379: POP
// tech := tech_mortar ; 3 :
25380: LD_ADDR_VAR 0 5
25384: PUSH
25385: LD_INT 41
25387: ST_TO_ADDR
25388: GO 25410
25390: LD_INT 3
25392: DOUBLE
25393: EQUAL
25394: IFTRUE 25398
25396: GO 25409
25398: POP
// tech := tech_bazooka ; end ;
25399: LD_ADDR_VAR 0 5
25403: PUSH
25404: LD_INT 44
25406: ST_TO_ADDR
25407: GO 25410
25409: POP
// if Researched ( side , tech ) then
25410: LD_VAR 0 3
25414: PPUSH
25415: LD_VAR 0 5
25419: PPUSH
25420: CALL_OW 325
25424: IFFALSE 25451
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25426: LD_ADDR_VAR 0 2
25430: PUSH
25431: LD_INT 5
25433: PUSH
25434: LD_INT 8
25436: PUSH
25437: LD_INT 9
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: PUSH
25445: LD_VAR 0 4
25449: ARRAY
25450: ST_TO_ADDR
// end ;
25451: LD_VAR 0 2
25455: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25456: LD_INT 0
25458: PPUSH
25459: PPUSH
25460: PPUSH
// if not mines then
25461: LD_VAR 0 2
25465: NOT
25466: IFFALSE 25470
// exit ;
25468: GO 25614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25470: LD_ADDR_VAR 0 5
25474: PUSH
25475: LD_INT 81
25477: PUSH
25478: LD_VAR 0 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 3
25489: PUSH
25490: LD_INT 21
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// for i in mines do
25513: LD_ADDR_VAR 0 4
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25612
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25526: LD_VAR 0 4
25530: PUSH
25531: LD_INT 1
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 4
25539: PUSH
25540: LD_INT 2
25542: ARRAY
25543: PPUSH
25544: CALL_OW 458
25548: NOT
25549: IFFALSE 25553
// continue ;
25551: GO 25523
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25553: LD_VAR 0 4
25557: PUSH
25558: LD_INT 1
25560: ARRAY
25561: PPUSH
25562: LD_VAR 0 4
25566: PUSH
25567: LD_INT 2
25569: ARRAY
25570: PPUSH
25571: CALL_OW 428
25575: PUSH
25576: LD_VAR 0 5
25580: IN
25581: IFFALSE 25610
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25583: LD_VAR 0 4
25587: PUSH
25588: LD_INT 1
25590: ARRAY
25591: PPUSH
25592: LD_VAR 0 4
25596: PUSH
25597: LD_INT 2
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 456
// end ;
25610: GO 25523
25612: POP
25613: POP
// end ;
25614: LD_VAR 0 3
25618: RET
// export function Count ( array ) ; var i ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
// result := 0 ;
25623: LD_ADDR_VAR 0 2
25627: PUSH
25628: LD_INT 0
25630: ST_TO_ADDR
// for i in array do
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_VAR 0 1
25640: PUSH
25641: FOR_IN
25642: IFFALSE 25666
// if i then
25644: LD_VAR 0 3
25648: IFFALSE 25664
// result := result + 1 ;
25650: LD_ADDR_VAR 0 2
25654: PUSH
25655: LD_VAR 0 2
25659: PUSH
25660: LD_INT 1
25662: PLUS
25663: ST_TO_ADDR
25664: GO 25641
25666: POP
25667: POP
// end ;
25668: LD_VAR 0 2
25672: RET
// export function IsEmpty ( building ) ; begin
25673: LD_INT 0
25675: PPUSH
// if not building then
25676: LD_VAR 0 1
25680: NOT
25681: IFFALSE 25685
// exit ;
25683: GO 25728
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25685: LD_ADDR_VAR 0 2
25689: PUSH
25690: LD_VAR 0 1
25694: PUSH
25695: LD_INT 22
25697: PUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 255
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 58
25714: PUSH
25715: EMPTY
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PPUSH
25722: CALL_OW 69
25726: IN
25727: ST_TO_ADDR
// end ;
25728: LD_VAR 0 2
25732: RET
// export function IsNotFull ( building ) ; var places ; begin
25733: LD_INT 0
25735: PPUSH
25736: PPUSH
// if not building then
25737: LD_VAR 0 1
25741: NOT
25742: IFFALSE 25746
// exit ;
25744: GO 25917
// result := false ;
25746: LD_ADDR_VAR 0 2
25750: PUSH
25751: LD_INT 0
25753: ST_TO_ADDR
// places := 0 ;
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_INT 0
25761: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 266
25771: PUSH
25772: LD_INT 0
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25834
25778: LD_INT 1
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25834
25784: LD_INT 6
25786: DOUBLE
25787: EQUAL
25788: IFTRUE 25834
25790: LD_INT 7
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25834
25796: LD_INT 8
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25834
25802: LD_INT 4
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25834
25808: LD_INT 5
25810: DOUBLE
25811: EQUAL
25812: IFTRUE 25834
25814: LD_INT 2
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25834
25820: LD_INT 3
25822: DOUBLE
25823: EQUAL
25824: IFTRUE 25834
25826: LD_INT 35
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25845
25834: POP
// places := 6 ; b_bunker , b_breastwork :
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 6
25842: ST_TO_ADDR
25843: GO 25890
25845: LD_INT 32
25847: DOUBLE
25848: EQUAL
25849: IFTRUE 25859
25851: LD_INT 31
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25870
25859: POP
// places := 1 ; b_control_tower :
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 1
25867: ST_TO_ADDR
25868: GO 25890
25870: LD_INT 36
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25889
25878: POP
// places := 3 ; end ;
25879: LD_ADDR_VAR 0 3
25883: PUSH
25884: LD_INT 3
25886: ST_TO_ADDR
25887: GO 25890
25889: POP
// if places then
25890: LD_VAR 0 3
25894: IFFALSE 25917
// result := UnitsInside ( building ) < places ;
25896: LD_ADDR_VAR 0 2
25900: PUSH
25901: LD_VAR 0 1
25905: PPUSH
25906: CALL_OW 313
25910: PUSH
25911: LD_VAR 0 3
25915: LESS
25916: ST_TO_ADDR
// end ;
25917: LD_VAR 0 2
25921: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
// tmp := [ ] ;
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: EMPTY
25934: ST_TO_ADDR
// list := [ ] ;
25935: LD_ADDR_VAR 0 5
25939: PUSH
25940: EMPTY
25941: ST_TO_ADDR
// for i = 16 to 25 do
25942: LD_ADDR_VAR 0 4
25946: PUSH
25947: DOUBLE
25948: LD_INT 16
25950: DEC
25951: ST_TO_ADDR
25952: LD_INT 25
25954: PUSH
25955: FOR_TO
25956: IFFALSE 26029
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_VAR 0 3
25967: PUSH
25968: LD_INT 22
25970: PUSH
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 255
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 91
25987: PUSH
25988: LD_VAR 0 1
25992: PUSH
25993: LD_INT 6
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 30
26003: PUSH
26004: LD_VAR 0 4
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: PPUSH
26021: CALL_OW 69
26025: ADD
26026: ST_TO_ADDR
26027: GO 25955
26029: POP
26030: POP
// for i = 1 to tmp do
26031: LD_ADDR_VAR 0 4
26035: PUSH
26036: DOUBLE
26037: LD_INT 1
26039: DEC
26040: ST_TO_ADDR
26041: LD_VAR 0 3
26045: PUSH
26046: FOR_TO
26047: IFFALSE 26135
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26049: LD_ADDR_VAR 0 5
26053: PUSH
26054: LD_VAR 0 5
26058: PUSH
26059: LD_VAR 0 3
26063: PUSH
26064: LD_VAR 0 4
26068: ARRAY
26069: PPUSH
26070: CALL_OW 266
26074: PUSH
26075: LD_VAR 0 3
26079: PUSH
26080: LD_VAR 0 4
26084: ARRAY
26085: PPUSH
26086: CALL_OW 250
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_VAR 0 4
26100: ARRAY
26101: PPUSH
26102: CALL_OW 251
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: LD_VAR 0 4
26116: ARRAY
26117: PPUSH
26118: CALL_OW 254
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: ADD
26132: ST_TO_ADDR
26133: GO 26046
26135: POP
26136: POP
// result := list ;
26137: LD_ADDR_VAR 0 2
26141: PUSH
26142: LD_VAR 0 5
26146: ST_TO_ADDR
// end ;
26147: LD_VAR 0 2
26151: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
// if not factory then
26161: LD_VAR 0 1
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26763
// if control = control_apeman then
26170: LD_VAR 0 4
26174: PUSH
26175: LD_INT 5
26177: EQUAL
26178: IFFALSE 26287
// begin tmp := UnitsInside ( factory ) ;
26180: LD_ADDR_VAR 0 8
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 313
26194: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26195: LD_VAR 0 8
26199: PPUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 12
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PPUSH
26210: CALL_OW 72
26214: NOT
26215: IFFALSE 26225
// control := control_manual ;
26217: LD_ADDR_VAR 0 4
26221: PUSH
26222: LD_INT 1
26224: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26225: LD_ADDR_VAR 0 8
26229: PUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL 25922 0 1
26239: ST_TO_ADDR
// if tmp then
26240: LD_VAR 0 8
26244: IFFALSE 26287
// begin for i in tmp do
26246: LD_ADDR_VAR 0 7
26250: PUSH
26251: LD_VAR 0 8
26255: PUSH
26256: FOR_IN
26257: IFFALSE 26285
// if i [ 1 ] = b_ext_radio then
26259: LD_VAR 0 7
26263: PUSH
26264: LD_INT 1
26266: ARRAY
26267: PUSH
26268: LD_INT 22
26270: EQUAL
26271: IFFALSE 26283
// begin control := control_remote ;
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_INT 2
26280: ST_TO_ADDR
// break ;
26281: GO 26285
// end ;
26283: GO 26256
26285: POP
26286: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26287: LD_VAR 0 1
26291: PPUSH
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_VAR 0 3
26301: PPUSH
26302: LD_VAR 0 4
26306: PPUSH
26307: LD_VAR 0 5
26311: PPUSH
26312: CALL_OW 448
26316: IFFALSE 26351
// begin result := [ chassis , engine , control , weapon ] ;
26318: LD_ADDR_VAR 0 6
26322: PUSH
26323: LD_VAR 0 2
26327: PUSH
26328: LD_VAR 0 3
26332: PUSH
26333: LD_VAR 0 4
26337: PUSH
26338: LD_VAR 0 5
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: ST_TO_ADDR
// exit ;
26349: GO 26763
// end ; _chassis := AvailableChassisList ( factory ) ;
26351: LD_ADDR_VAR 0 9
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 475
26365: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26366: LD_ADDR_VAR 0 11
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 476
26380: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26381: LD_ADDR_VAR 0 12
26385: PUSH
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL_OW 477
26395: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26396: LD_ADDR_VAR 0 10
26400: PUSH
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 478
26410: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26411: LD_VAR 0 9
26415: NOT
26416: PUSH
26417: LD_VAR 0 11
26421: NOT
26422: OR
26423: PUSH
26424: LD_VAR 0 12
26428: NOT
26429: OR
26430: PUSH
26431: LD_VAR 0 10
26435: NOT
26436: OR
26437: IFFALSE 26472
// begin result := [ chassis , engine , control , weapon ] ;
26439: LD_ADDR_VAR 0 6
26443: PUSH
26444: LD_VAR 0 2
26448: PUSH
26449: LD_VAR 0 3
26453: PUSH
26454: LD_VAR 0 4
26458: PUSH
26459: LD_VAR 0 5
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: ST_TO_ADDR
// exit ;
26470: GO 26763
// end ; if not chassis in _chassis then
26472: LD_VAR 0 2
26476: PUSH
26477: LD_VAR 0 9
26481: IN
26482: NOT
26483: IFFALSE 26509
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26485: LD_ADDR_VAR 0 2
26489: PUSH
26490: LD_VAR 0 9
26494: PUSH
26495: LD_INT 1
26497: PPUSH
26498: LD_VAR 0 9
26502: PPUSH
26503: CALL_OW 12
26507: ARRAY
26508: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26509: LD_VAR 0 2
26513: PPUSH
26514: LD_VAR 0 3
26518: PPUSH
26519: CALL 26768 0 2
26523: NOT
26524: IFFALSE 26583
// repeat engine := _engine [ 1 ] ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_VAR 0 11
26535: PUSH
26536: LD_INT 1
26538: ARRAY
26539: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26540: LD_ADDR_VAR 0 11
26544: PUSH
26545: LD_VAR 0 11
26549: PPUSH
26550: LD_INT 1
26552: PPUSH
26553: CALL_OW 3
26557: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26558: LD_VAR 0 2
26562: PPUSH
26563: LD_VAR 0 3
26567: PPUSH
26568: CALL 26768 0 2
26572: PUSH
26573: LD_VAR 0 11
26577: PUSH
26578: EMPTY
26579: EQUAL
26580: OR
26581: IFFALSE 26526
// if not control in _control then
26583: LD_VAR 0 4
26587: PUSH
26588: LD_VAR 0 12
26592: IN
26593: NOT
26594: IFFALSE 26620
// control := _control [ rand ( 1 , _control ) ] ;
26596: LD_ADDR_VAR 0 4
26600: PUSH
26601: LD_VAR 0 12
26605: PUSH
26606: LD_INT 1
26608: PPUSH
26609: LD_VAR 0 12
26613: PPUSH
26614: CALL_OW 12
26618: ARRAY
26619: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26620: LD_VAR 0 2
26624: PPUSH
26625: LD_VAR 0 5
26629: PPUSH
26630: CALL 26988 0 2
26634: NOT
26635: IFFALSE 26694
// repeat weapon := _weapon [ 1 ] ;
26637: LD_ADDR_VAR 0 5
26641: PUSH
26642: LD_VAR 0 10
26646: PUSH
26647: LD_INT 1
26649: ARRAY
26650: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26651: LD_ADDR_VAR 0 10
26655: PUSH
26656: LD_VAR 0 10
26660: PPUSH
26661: LD_INT 1
26663: PPUSH
26664: CALL_OW 3
26668: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26669: LD_VAR 0 2
26673: PPUSH
26674: LD_VAR 0 5
26678: PPUSH
26679: CALL 26988 0 2
26683: PUSH
26684: LD_VAR 0 10
26688: PUSH
26689: EMPTY
26690: EQUAL
26691: OR
26692: IFFALSE 26637
// result := [ ] ;
26694: LD_ADDR_VAR 0 6
26698: PUSH
26699: EMPTY
26700: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: LD_VAR 0 4
26720: PPUSH
26721: LD_VAR 0 5
26725: PPUSH
26726: CALL_OW 448
26730: IFFALSE 26763
// result := [ chassis , engine , control , weapon ] ;
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 2
26741: PUSH
26742: LD_VAR 0 3
26746: PUSH
26747: LD_VAR 0 4
26751: PUSH
26752: LD_VAR 0 5
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: ST_TO_ADDR
// end ;
26763: LD_VAR 0 6
26767: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26768: LD_INT 0
26770: PPUSH
// if not chassis or not engine then
26771: LD_VAR 0 1
26775: NOT
26776: PUSH
26777: LD_VAR 0 2
26781: NOT
26782: OR
26783: IFFALSE 26787
// exit ;
26785: GO 26983
// case engine of engine_solar :
26787: LD_VAR 0 2
26791: PUSH
26792: LD_INT 2
26794: DOUBLE
26795: EQUAL
26796: IFTRUE 26800
26798: GO 26838
26800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26801: LD_ADDR_VAR 0 3
26805: PUSH
26806: LD_INT 11
26808: PUSH
26809: LD_INT 12
26811: PUSH
26812: LD_INT 13
26814: PUSH
26815: LD_INT 14
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: ST_TO_ADDR
26836: GO 26967
26838: LD_INT 1
26840: DOUBLE
26841: EQUAL
26842: IFTRUE 26846
26844: GO 26908
26846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26847: LD_ADDR_VAR 0 3
26851: PUSH
26852: LD_INT 11
26854: PUSH
26855: LD_INT 12
26857: PUSH
26858: LD_INT 13
26860: PUSH
26861: LD_INT 14
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: LD_INT 3
26872: PUSH
26873: LD_INT 4
26875: PUSH
26876: LD_INT 5
26878: PUSH
26879: LD_INT 21
26881: PUSH
26882: LD_INT 23
26884: PUSH
26885: LD_INT 22
26887: PUSH
26888: LD_INT 24
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: ST_TO_ADDR
26906: GO 26967
26908: LD_INT 3
26910: DOUBLE
26911: EQUAL
26912: IFTRUE 26916
26914: GO 26966
26916: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: LD_INT 13
26924: PUSH
26925: LD_INT 14
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: LD_INT 3
26933: PUSH
26934: LD_INT 4
26936: PUSH
26937: LD_INT 5
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_INT 23
26948: PUSH
26949: LD_INT 24
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
26964: GO 26967
26966: POP
// result := ( chassis in result ) ;
26967: LD_ADDR_VAR 0 3
26971: PUSH
26972: LD_VAR 0 1
26976: PUSH
26977: LD_VAR 0 3
26981: IN
26982: ST_TO_ADDR
// end ;
26983: LD_VAR 0 3
26987: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26988: LD_INT 0
26990: PPUSH
// if not chassis or not weapon then
26991: LD_VAR 0 1
26995: NOT
26996: PUSH
26997: LD_VAR 0 2
27001: NOT
27002: OR
27003: IFFALSE 27007
// exit ;
27005: GO 28067
// case weapon of us_machine_gun :
27007: LD_VAR 0 2
27011: PUSH
27012: LD_INT 2
27014: DOUBLE
27015: EQUAL
27016: IFTRUE 27020
27018: GO 27050
27020: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27021: LD_ADDR_VAR 0 3
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: LD_INT 4
27037: PUSH
27038: LD_INT 5
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
27048: GO 28051
27050: LD_INT 3
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27088
27058: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27059: LD_ADDR_VAR 0 3
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 2
27069: PUSH
27070: LD_INT 3
27072: PUSH
27073: LD_INT 4
27075: PUSH
27076: LD_INT 5
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: ST_TO_ADDR
27086: GO 28051
27088: LD_INT 11
27090: DOUBLE
27091: EQUAL
27092: IFTRUE 27096
27094: GO 27126
27096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: LD_INT 4
27113: PUSH
27114: LD_INT 5
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: ST_TO_ADDR
27124: GO 28051
27126: LD_INT 4
27128: DOUBLE
27129: EQUAL
27130: IFTRUE 27134
27132: GO 27160
27134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27135: LD_ADDR_VAR 0 3
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: LD_INT 4
27148: PUSH
27149: LD_INT 5
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: ST_TO_ADDR
27158: GO 28051
27160: LD_INT 5
27162: DOUBLE
27163: EQUAL
27164: IFTRUE 27168
27166: GO 27194
27168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27169: LD_ADDR_VAR 0 3
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: LD_INT 3
27179: PUSH
27180: LD_INT 4
27182: PUSH
27183: LD_INT 5
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: ST_TO_ADDR
27192: GO 28051
27194: LD_INT 9
27196: DOUBLE
27197: EQUAL
27198: IFTRUE 27202
27200: GO 27228
27202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: LD_INT 4
27216: PUSH
27217: LD_INT 5
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: ST_TO_ADDR
27226: GO 28051
27228: LD_INT 7
27230: DOUBLE
27231: EQUAL
27232: IFTRUE 27236
27234: GO 27262
27236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27237: LD_ADDR_VAR 0 3
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 3
27247: PUSH
27248: LD_INT 4
27250: PUSH
27251: LD_INT 5
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
27260: GO 28051
27262: LD_INT 12
27264: DOUBLE
27265: EQUAL
27266: IFTRUE 27270
27268: GO 27296
27270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: LD_INT 3
27281: PUSH
27282: LD_INT 4
27284: PUSH
27285: LD_INT 5
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: ST_TO_ADDR
27294: GO 28051
27296: LD_INT 13
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27330
27304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27305: LD_ADDR_VAR 0 3
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: LD_INT 3
27315: PUSH
27316: LD_INT 4
27318: PUSH
27319: LD_INT 5
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: ST_TO_ADDR
27328: GO 28051
27330: LD_INT 14
27332: DOUBLE
27333: EQUAL
27334: IFTRUE 27338
27336: GO 27356
27338: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27339: LD_ADDR_VAR 0 3
27343: PUSH
27344: LD_INT 4
27346: PUSH
27347: LD_INT 5
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: ST_TO_ADDR
27354: GO 28051
27356: LD_INT 6
27358: DOUBLE
27359: EQUAL
27360: IFTRUE 27364
27362: GO 27382
27364: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_INT 4
27372: PUSH
27373: LD_INT 5
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: ST_TO_ADDR
27380: GO 28051
27382: LD_INT 10
27384: DOUBLE
27385: EQUAL
27386: IFTRUE 27390
27388: GO 27408
27390: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27391: LD_ADDR_VAR 0 3
27395: PUSH
27396: LD_INT 4
27398: PUSH
27399: LD_INT 5
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: ST_TO_ADDR
27406: GO 28051
27408: LD_INT 22
27410: DOUBLE
27411: EQUAL
27412: IFTRUE 27416
27414: GO 27442
27416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27417: LD_ADDR_VAR 0 3
27421: PUSH
27422: LD_INT 11
27424: PUSH
27425: LD_INT 12
27427: PUSH
27428: LD_INT 13
27430: PUSH
27431: LD_INT 14
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: ST_TO_ADDR
27440: GO 28051
27442: LD_INT 23
27444: DOUBLE
27445: EQUAL
27446: IFTRUE 27450
27448: GO 27476
27450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 11
27458: PUSH
27459: LD_INT 12
27461: PUSH
27462: LD_INT 13
27464: PUSH
27465: LD_INT 14
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
27474: GO 28051
27476: LD_INT 24
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27484
27482: GO 27510
27484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27485: LD_ADDR_VAR 0 3
27489: PUSH
27490: LD_INT 11
27492: PUSH
27493: LD_INT 12
27495: PUSH
27496: LD_INT 13
27498: PUSH
27499: LD_INT 14
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
27508: GO 28051
27510: LD_INT 30
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 27544
27518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27519: LD_ADDR_VAR 0 3
27523: PUSH
27524: LD_INT 11
27526: PUSH
27527: LD_INT 12
27529: PUSH
27530: LD_INT 13
27532: PUSH
27533: LD_INT 14
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
27542: GO 28051
27544: LD_INT 25
27546: DOUBLE
27547: EQUAL
27548: IFTRUE 27552
27550: GO 27570
27552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27553: LD_ADDR_VAR 0 3
27557: PUSH
27558: LD_INT 13
27560: PUSH
27561: LD_INT 14
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: ST_TO_ADDR
27568: GO 28051
27570: LD_INT 27
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 27596
27578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27579: LD_ADDR_VAR 0 3
27583: PUSH
27584: LD_INT 13
27586: PUSH
27587: LD_INT 14
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: ST_TO_ADDR
27594: GO 28051
27596: LD_INT 92
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27630
27604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27605: LD_ADDR_VAR 0 3
27609: PUSH
27610: LD_INT 11
27612: PUSH
27613: LD_INT 12
27615: PUSH
27616: LD_INT 13
27618: PUSH
27619: LD_INT 14
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
27628: GO 28051
27630: LD_INT 28
27632: DOUBLE
27633: EQUAL
27634: IFTRUE 27638
27636: GO 27656
27638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27639: LD_ADDR_VAR 0 3
27643: PUSH
27644: LD_INT 13
27646: PUSH
27647: LD_INT 14
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: ST_TO_ADDR
27654: GO 28051
27656: LD_INT 29
27658: DOUBLE
27659: EQUAL
27660: IFTRUE 27664
27662: GO 27682
27664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27665: LD_ADDR_VAR 0 3
27669: PUSH
27670: LD_INT 13
27672: PUSH
27673: LD_INT 14
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: ST_TO_ADDR
27680: GO 28051
27682: LD_INT 31
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27690
27688: GO 27708
27690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27691: LD_ADDR_VAR 0 3
27695: PUSH
27696: LD_INT 13
27698: PUSH
27699: LD_INT 14
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: ST_TO_ADDR
27706: GO 28051
27708: LD_INT 26
27710: DOUBLE
27711: EQUAL
27712: IFTRUE 27716
27714: GO 27734
27716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_INT 13
27724: PUSH
27725: LD_INT 14
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: ST_TO_ADDR
27732: GO 28051
27734: LD_INT 42
27736: DOUBLE
27737: EQUAL
27738: IFTRUE 27742
27740: GO 27768
27742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27743: LD_ADDR_VAR 0 3
27747: PUSH
27748: LD_INT 21
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_INT 23
27756: PUSH
27757: LD_INT 24
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: ST_TO_ADDR
27766: GO 28051
27768: LD_INT 43
27770: DOUBLE
27771: EQUAL
27772: IFTRUE 27776
27774: GO 27802
27776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27777: LD_ADDR_VAR 0 3
27781: PUSH
27782: LD_INT 21
27784: PUSH
27785: LD_INT 22
27787: PUSH
27788: LD_INT 23
27790: PUSH
27791: LD_INT 24
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: ST_TO_ADDR
27800: GO 28051
27802: LD_INT 44
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 27836
27810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27811: LD_ADDR_VAR 0 3
27815: PUSH
27816: LD_INT 21
27818: PUSH
27819: LD_INT 22
27821: PUSH
27822: LD_INT 23
27824: PUSH
27825: LD_INT 24
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
27834: GO 28051
27836: LD_INT 45
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27870
27844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27845: LD_ADDR_VAR 0 3
27849: PUSH
27850: LD_INT 21
27852: PUSH
27853: LD_INT 22
27855: PUSH
27856: LD_INT 23
27858: PUSH
27859: LD_INT 24
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
27868: GO 28051
27870: LD_INT 49
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 27904
27878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_INT 21
27886: PUSH
27887: LD_INT 22
27889: PUSH
27890: LD_INT 23
27892: PUSH
27893: LD_INT 24
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
27902: GO 28051
27904: LD_INT 51
27906: DOUBLE
27907: EQUAL
27908: IFTRUE 27912
27910: GO 27938
27912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: LD_INT 21
27920: PUSH
27921: LD_INT 22
27923: PUSH
27924: LD_INT 23
27926: PUSH
27927: LD_INT 24
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
27936: GO 28051
27938: LD_INT 52
27940: DOUBLE
27941: EQUAL
27942: IFTRUE 27946
27944: GO 27972
27946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27947: LD_ADDR_VAR 0 3
27951: PUSH
27952: LD_INT 21
27954: PUSH
27955: LD_INT 22
27957: PUSH
27958: LD_INT 23
27960: PUSH
27961: LD_INT 24
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: ST_TO_ADDR
27970: GO 28051
27972: LD_INT 53
27974: DOUBLE
27975: EQUAL
27976: IFTRUE 27980
27978: GO 27998
27980: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_INT 23
27988: PUSH
27989: LD_INT 24
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: ST_TO_ADDR
27996: GO 28051
27998: LD_INT 46
28000: DOUBLE
28001: EQUAL
28002: IFTRUE 28006
28004: GO 28024
28006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 23
28014: PUSH
28015: LD_INT 24
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: ST_TO_ADDR
28022: GO 28051
28024: LD_INT 47
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28050
28032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_INT 23
28040: PUSH
28041: LD_INT 24
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: ST_TO_ADDR
28048: GO 28051
28050: POP
// result := ( chassis in result ) ;
28051: LD_ADDR_VAR 0 3
28055: PUSH
28056: LD_VAR 0 1
28060: PUSH
28061: LD_VAR 0 3
28065: IN
28066: ST_TO_ADDR
// end ;
28067: LD_VAR 0 3
28071: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
// result := array ;
28081: LD_ADDR_VAR 0 5
28085: PUSH
28086: LD_VAR 0 1
28090: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28091: LD_VAR 0 1
28095: NOT
28096: PUSH
28097: LD_VAR 0 2
28101: NOT
28102: OR
28103: PUSH
28104: LD_VAR 0 3
28108: NOT
28109: OR
28110: PUSH
28111: LD_VAR 0 2
28115: PUSH
28116: LD_VAR 0 1
28120: GREATER
28121: OR
28122: PUSH
28123: LD_VAR 0 3
28127: PUSH
28128: LD_VAR 0 1
28132: GREATER
28133: OR
28134: IFFALSE 28138
// exit ;
28136: GO 28434
// if direction then
28138: LD_VAR 0 4
28142: IFFALSE 28206
// begin d := 1 ;
28144: LD_ADDR_VAR 0 9
28148: PUSH
28149: LD_INT 1
28151: ST_TO_ADDR
// if i_from > i_to then
28152: LD_VAR 0 2
28156: PUSH
28157: LD_VAR 0 3
28161: GREATER
28162: IFFALSE 28188
// length := ( array - i_from ) + i_to else
28164: LD_ADDR_VAR 0 11
28168: PUSH
28169: LD_VAR 0 1
28173: PUSH
28174: LD_VAR 0 2
28178: MINUS
28179: PUSH
28180: LD_VAR 0 3
28184: PLUS
28185: ST_TO_ADDR
28186: GO 28204
// length := i_to - i_from ;
28188: LD_ADDR_VAR 0 11
28192: PUSH
28193: LD_VAR 0 3
28197: PUSH
28198: LD_VAR 0 2
28202: MINUS
28203: ST_TO_ADDR
// end else
28204: GO 28267
// begin d := - 1 ;
28206: LD_ADDR_VAR 0 9
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: ST_TO_ADDR
// if i_from > i_to then
28215: LD_VAR 0 2
28219: PUSH
28220: LD_VAR 0 3
28224: GREATER
28225: IFFALSE 28245
// length := i_from - i_to else
28227: LD_ADDR_VAR 0 11
28231: PUSH
28232: LD_VAR 0 2
28236: PUSH
28237: LD_VAR 0 3
28241: MINUS
28242: ST_TO_ADDR
28243: GO 28267
// length := ( array - i_to ) + i_from ;
28245: LD_ADDR_VAR 0 11
28249: PUSH
28250: LD_VAR 0 1
28254: PUSH
28255: LD_VAR 0 3
28259: MINUS
28260: PUSH
28261: LD_VAR 0 2
28265: PLUS
28266: ST_TO_ADDR
// end ; if not length then
28267: LD_VAR 0 11
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28434
// tmp := array ;
28276: LD_ADDR_VAR 0 10
28280: PUSH
28281: LD_VAR 0 1
28285: ST_TO_ADDR
// for i = 1 to length do
28286: LD_ADDR_VAR 0 6
28290: PUSH
28291: DOUBLE
28292: LD_INT 1
28294: DEC
28295: ST_TO_ADDR
28296: LD_VAR 0 11
28300: PUSH
28301: FOR_TO
28302: IFFALSE 28422
// begin for j = 1 to array do
28304: LD_ADDR_VAR 0 7
28308: PUSH
28309: DOUBLE
28310: LD_INT 1
28312: DEC
28313: ST_TO_ADDR
28314: LD_VAR 0 1
28318: PUSH
28319: FOR_TO
28320: IFFALSE 28408
// begin k := j + d ;
28322: LD_ADDR_VAR 0 8
28326: PUSH
28327: LD_VAR 0 7
28331: PUSH
28332: LD_VAR 0 9
28336: PLUS
28337: ST_TO_ADDR
// if k > array then
28338: LD_VAR 0 8
28342: PUSH
28343: LD_VAR 0 1
28347: GREATER
28348: IFFALSE 28358
// k := 1 ;
28350: LD_ADDR_VAR 0 8
28354: PUSH
28355: LD_INT 1
28357: ST_TO_ADDR
// if not k then
28358: LD_VAR 0 8
28362: NOT
28363: IFFALSE 28375
// k := array ;
28365: LD_ADDR_VAR 0 8
28369: PUSH
28370: LD_VAR 0 1
28374: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28375: LD_ADDR_VAR 0 10
28379: PUSH
28380: LD_VAR 0 10
28384: PPUSH
28385: LD_VAR 0 8
28389: PPUSH
28390: LD_VAR 0 1
28394: PUSH
28395: LD_VAR 0 7
28399: ARRAY
28400: PPUSH
28401: CALL_OW 1
28405: ST_TO_ADDR
// end ;
28406: GO 28319
28408: POP
28409: POP
// array := tmp ;
28410: LD_ADDR_VAR 0 1
28414: PUSH
28415: LD_VAR 0 10
28419: ST_TO_ADDR
// end ;
28420: GO 28301
28422: POP
28423: POP
// result := array ;
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_VAR 0 1
28433: ST_TO_ADDR
// end ;
28434: LD_VAR 0 5
28438: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28439: LD_INT 0
28441: PPUSH
28442: PPUSH
// result := 0 ;
28443: LD_ADDR_VAR 0 3
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// if not array or not value in array then
28451: LD_VAR 0 1
28455: NOT
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_VAR 0 1
28466: IN
28467: NOT
28468: OR
28469: IFFALSE 28473
// exit ;
28471: GO 28527
// for i = 1 to array do
28473: LD_ADDR_VAR 0 4
28477: PUSH
28478: DOUBLE
28479: LD_INT 1
28481: DEC
28482: ST_TO_ADDR
28483: LD_VAR 0 1
28487: PUSH
28488: FOR_TO
28489: IFFALSE 28525
// if value = array [ i ] then
28491: LD_VAR 0 2
28495: PUSH
28496: LD_VAR 0 1
28500: PUSH
28501: LD_VAR 0 4
28505: ARRAY
28506: EQUAL
28507: IFFALSE 28523
// begin result := i ;
28509: LD_ADDR_VAR 0 3
28513: PUSH
28514: LD_VAR 0 4
28518: ST_TO_ADDR
// exit ;
28519: POP
28520: POP
28521: GO 28527
// end ;
28523: GO 28488
28525: POP
28526: POP
// end ;
28527: LD_VAR 0 3
28531: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28532: LD_INT 0
28534: PPUSH
// vc_chassis := chassis ;
28535: LD_ADDR_OWVAR 37
28539: PUSH
28540: LD_VAR 0 1
28544: ST_TO_ADDR
// vc_engine := engine ;
28545: LD_ADDR_OWVAR 39
28549: PUSH
28550: LD_VAR 0 2
28554: ST_TO_ADDR
// vc_control := control ;
28555: LD_ADDR_OWVAR 38
28559: PUSH
28560: LD_VAR 0 3
28564: ST_TO_ADDR
// vc_weapon := weapon ;
28565: LD_ADDR_OWVAR 40
28569: PUSH
28570: LD_VAR 0 4
28574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28575: LD_ADDR_OWVAR 41
28579: PUSH
28580: LD_VAR 0 5
28584: ST_TO_ADDR
// end ;
28585: LD_VAR 0 6
28589: RET
// export function WantPlant ( unit ) ; var task ; begin
28590: LD_INT 0
28592: PPUSH
28593: PPUSH
// result := false ;
28594: LD_ADDR_VAR 0 2
28598: PUSH
28599: LD_INT 0
28601: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL_OW 437
28616: ST_TO_ADDR
// if task then
28617: LD_VAR 0 3
28621: IFFALSE 28649
// if task [ 1 ] [ 1 ] = p then
28623: LD_VAR 0 3
28627: PUSH
28628: LD_INT 1
28630: ARRAY
28631: PUSH
28632: LD_INT 1
28634: ARRAY
28635: PUSH
28636: LD_STRING p
28638: EQUAL
28639: IFFALSE 28649
// result := true ;
28641: LD_ADDR_VAR 0 2
28645: PUSH
28646: LD_INT 1
28648: ST_TO_ADDR
// end ;
28649: LD_VAR 0 2
28653: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
// if pos < 1 then
28660: LD_VAR 0 2
28664: PUSH
28665: LD_INT 1
28667: LESS
28668: IFFALSE 28672
// exit ;
28670: GO 28975
// if pos = 1 then
28672: LD_VAR 0 2
28676: PUSH
28677: LD_INT 1
28679: EQUAL
28680: IFFALSE 28713
// result := Replace ( arr , pos [ 1 ] , value ) else
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: LD_VAR 0 2
28696: PUSH
28697: LD_INT 1
28699: ARRAY
28700: PPUSH
28701: LD_VAR 0 3
28705: PPUSH
28706: CALL_OW 1
28710: ST_TO_ADDR
28711: GO 28975
// begin tmp := arr ;
28713: LD_ADDR_VAR 0 6
28717: PUSH
28718: LD_VAR 0 1
28722: ST_TO_ADDR
// s_arr := [ tmp ] ;
28723: LD_ADDR_VAR 0 7
28727: PUSH
28728: LD_VAR 0 6
28732: PUSH
28733: EMPTY
28734: LIST
28735: ST_TO_ADDR
// for i = 1 to pos - 1 do
28736: LD_ADDR_VAR 0 5
28740: PUSH
28741: DOUBLE
28742: LD_INT 1
28744: DEC
28745: ST_TO_ADDR
28746: LD_VAR 0 2
28750: PUSH
28751: LD_INT 1
28753: MINUS
28754: PUSH
28755: FOR_TO
28756: IFFALSE 28801
// begin tmp := tmp [ pos [ i ] ] ;
28758: LD_ADDR_VAR 0 6
28762: PUSH
28763: LD_VAR 0 6
28767: PUSH
28768: LD_VAR 0 2
28772: PUSH
28773: LD_VAR 0 5
28777: ARRAY
28778: ARRAY
28779: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: LD_VAR 0 7
28789: PUSH
28790: LD_VAR 0 6
28794: PUSH
28795: EMPTY
28796: LIST
28797: ADD
28798: ST_TO_ADDR
// end ;
28799: GO 28755
28801: POP
28802: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28803: LD_ADDR_VAR 0 6
28807: PUSH
28808: LD_VAR 0 6
28812: PPUSH
28813: LD_VAR 0 2
28817: PUSH
28818: LD_VAR 0 2
28822: ARRAY
28823: PPUSH
28824: LD_VAR 0 3
28828: PPUSH
28829: CALL_OW 1
28833: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28834: LD_ADDR_VAR 0 7
28838: PUSH
28839: LD_VAR 0 7
28843: PPUSH
28844: LD_VAR 0 7
28848: PPUSH
28849: LD_VAR 0 6
28853: PPUSH
28854: CALL_OW 1
28858: ST_TO_ADDR
// for i = s_arr downto 2 do
28859: LD_ADDR_VAR 0 5
28863: PUSH
28864: DOUBLE
28865: LD_VAR 0 7
28869: INC
28870: ST_TO_ADDR
28871: LD_INT 2
28873: PUSH
28874: FOR_DOWNTO
28875: IFFALSE 28959
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28877: LD_ADDR_VAR 0 6
28881: PUSH
28882: LD_VAR 0 7
28886: PUSH
28887: LD_VAR 0 5
28891: PUSH
28892: LD_INT 1
28894: MINUS
28895: ARRAY
28896: PPUSH
28897: LD_VAR 0 2
28901: PUSH
28902: LD_VAR 0 5
28906: PUSH
28907: LD_INT 1
28909: MINUS
28910: ARRAY
28911: PPUSH
28912: LD_VAR 0 7
28916: PUSH
28917: LD_VAR 0 5
28921: ARRAY
28922: PPUSH
28923: CALL_OW 1
28927: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28928: LD_ADDR_VAR 0 7
28932: PUSH
28933: LD_VAR 0 7
28937: PPUSH
28938: LD_VAR 0 5
28942: PUSH
28943: LD_INT 1
28945: MINUS
28946: PPUSH
28947: LD_VAR 0 6
28951: PPUSH
28952: CALL_OW 1
28956: ST_TO_ADDR
// end ;
28957: GO 28874
28959: POP
28960: POP
// result := s_arr [ 1 ] ;
28961: LD_ADDR_VAR 0 4
28965: PUSH
28966: LD_VAR 0 7
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: ST_TO_ADDR
// end ; end ;
28975: LD_VAR 0 4
28979: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
// if not list then
28984: LD_VAR 0 1
28988: NOT
28989: IFFALSE 28993
// exit ;
28991: GO 29084
// i := list [ pos1 ] ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_VAR 0 1
29002: PUSH
29003: LD_VAR 0 2
29007: ARRAY
29008: ST_TO_ADDR
// if not i then
29009: LD_VAR 0 5
29013: NOT
29014: IFFALSE 29018
// exit ;
29016: GO 29084
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29018: LD_ADDR_VAR 0 1
29022: PUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: LD_VAR 0 2
29032: PPUSH
29033: LD_VAR 0 1
29037: PUSH
29038: LD_VAR 0 3
29042: ARRAY
29043: PPUSH
29044: CALL_OW 1
29048: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29049: LD_ADDR_VAR 0 1
29053: PUSH
29054: LD_VAR 0 1
29058: PPUSH
29059: LD_VAR 0 3
29063: PPUSH
29064: LD_VAR 0 5
29068: PPUSH
29069: CALL_OW 1
29073: ST_TO_ADDR
// result := list ;
29074: LD_ADDR_VAR 0 4
29078: PUSH
29079: LD_VAR 0 1
29083: ST_TO_ADDR
// end ;
29084: LD_VAR 0 4
29088: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29089: LD_INT 0
29091: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29092: LD_ADDR_VAR 0 5
29096: PUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 250
29106: PPUSH
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 251
29116: PPUSH
29117: LD_VAR 0 2
29121: PPUSH
29122: LD_VAR 0 3
29126: PPUSH
29127: LD_VAR 0 4
29131: PPUSH
29132: CALL 29142 0 5
29136: ST_TO_ADDR
// end ;
29137: LD_VAR 0 5
29141: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29142: LD_INT 0
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
// if not list then
29148: LD_VAR 0 3
29152: NOT
29153: IFFALSE 29157
// exit ;
29155: GO 29545
// result := [ ] ;
29157: LD_ADDR_VAR 0 6
29161: PUSH
29162: EMPTY
29163: ST_TO_ADDR
// for i in list do
29164: LD_ADDR_VAR 0 7
29168: PUSH
29169: LD_VAR 0 3
29173: PUSH
29174: FOR_IN
29175: IFFALSE 29377
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29177: LD_ADDR_VAR 0 9
29181: PUSH
29182: LD_VAR 0 7
29186: PPUSH
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 297
29201: ST_TO_ADDR
// if not result then
29202: LD_VAR 0 6
29206: NOT
29207: IFFALSE 29233
// result := [ [ i , tmp ] ] else
29209: LD_ADDR_VAR 0 6
29213: PUSH
29214: LD_VAR 0 7
29218: PUSH
29219: LD_VAR 0 9
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: ST_TO_ADDR
29231: GO 29375
// begin if result [ result ] [ 2 ] < tmp then
29233: LD_VAR 0 6
29237: PUSH
29238: LD_VAR 0 6
29242: ARRAY
29243: PUSH
29244: LD_INT 2
29246: ARRAY
29247: PUSH
29248: LD_VAR 0 9
29252: LESS
29253: IFFALSE 29295
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29255: LD_ADDR_VAR 0 6
29259: PUSH
29260: LD_VAR 0 6
29264: PPUSH
29265: LD_VAR 0 6
29269: PUSH
29270: LD_INT 1
29272: PLUS
29273: PPUSH
29274: LD_VAR 0 7
29278: PUSH
29279: LD_VAR 0 9
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 2
29292: ST_TO_ADDR
29293: GO 29375
// for j = 1 to result do
29295: LD_ADDR_VAR 0 8
29299: PUSH
29300: DOUBLE
29301: LD_INT 1
29303: DEC
29304: ST_TO_ADDR
29305: LD_VAR 0 6
29309: PUSH
29310: FOR_TO
29311: IFFALSE 29373
// begin if tmp < result [ j ] [ 2 ] then
29313: LD_VAR 0 9
29317: PUSH
29318: LD_VAR 0 6
29322: PUSH
29323: LD_VAR 0 8
29327: ARRAY
29328: PUSH
29329: LD_INT 2
29331: ARRAY
29332: LESS
29333: IFFALSE 29371
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29335: LD_ADDR_VAR 0 6
29339: PUSH
29340: LD_VAR 0 6
29344: PPUSH
29345: LD_VAR 0 8
29349: PPUSH
29350: LD_VAR 0 7
29354: PUSH
29355: LD_VAR 0 9
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PPUSH
29364: CALL_OW 2
29368: ST_TO_ADDR
// break ;
29369: GO 29373
// end ; end ;
29371: GO 29310
29373: POP
29374: POP
// end ; end ;
29375: GO 29174
29377: POP
29378: POP
// if result and not asc then
29379: LD_VAR 0 6
29383: PUSH
29384: LD_VAR 0 4
29388: NOT
29389: AND
29390: IFFALSE 29465
// begin tmp := result ;
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_VAR 0 6
29401: ST_TO_ADDR
// for i = tmp downto 1 do
29402: LD_ADDR_VAR 0 7
29406: PUSH
29407: DOUBLE
29408: LD_VAR 0 9
29412: INC
29413: ST_TO_ADDR
29414: LD_INT 1
29416: PUSH
29417: FOR_DOWNTO
29418: IFFALSE 29463
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29420: LD_ADDR_VAR 0 6
29424: PUSH
29425: LD_VAR 0 6
29429: PPUSH
29430: LD_VAR 0 9
29434: PUSH
29435: LD_VAR 0 7
29439: MINUS
29440: PUSH
29441: LD_INT 1
29443: PLUS
29444: PPUSH
29445: LD_VAR 0 9
29449: PUSH
29450: LD_VAR 0 7
29454: ARRAY
29455: PPUSH
29456: CALL_OW 1
29460: ST_TO_ADDR
29461: GO 29417
29463: POP
29464: POP
// end ; tmp := [ ] ;
29465: LD_ADDR_VAR 0 9
29469: PUSH
29470: EMPTY
29471: ST_TO_ADDR
// if mode then
29472: LD_VAR 0 5
29476: IFFALSE 29545
// begin for i = 1 to result do
29478: LD_ADDR_VAR 0 7
29482: PUSH
29483: DOUBLE
29484: LD_INT 1
29486: DEC
29487: ST_TO_ADDR
29488: LD_VAR 0 6
29492: PUSH
29493: FOR_TO
29494: IFFALSE 29533
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29496: LD_ADDR_VAR 0 9
29500: PUSH
29501: LD_VAR 0 9
29505: PPUSH
29506: LD_VAR 0 7
29510: PPUSH
29511: LD_VAR 0 6
29515: PUSH
29516: LD_VAR 0 7
29520: ARRAY
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: CALL_OW 1
29530: ST_TO_ADDR
29531: GO 29493
29533: POP
29534: POP
// result := tmp ;
29535: LD_ADDR_VAR 0 6
29539: PUSH
29540: LD_VAR 0 9
29544: ST_TO_ADDR
// end ; end ;
29545: LD_VAR 0 6
29549: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29550: LD_INT 0
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29558: LD_ADDR_VAR 0 5
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: ST_TO_ADDR
// if not x or not y then
29580: LD_VAR 0 2
29584: NOT
29585: PUSH
29586: LD_VAR 0 3
29590: NOT
29591: OR
29592: IFFALSE 29596
// exit ;
29594: GO 31246
// if not range then
29596: LD_VAR 0 4
29600: NOT
29601: IFFALSE 29611
// range := 10 ;
29603: LD_ADDR_VAR 0 4
29607: PUSH
29608: LD_INT 10
29610: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29611: LD_ADDR_VAR 0 8
29615: PUSH
29616: LD_INT 81
29618: PUSH
29619: LD_VAR 0 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 92
29630: PUSH
29631: LD_VAR 0 2
29635: PUSH
29636: LD_VAR 0 3
29640: PUSH
29641: LD_VAR 0 4
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 3
29654: PUSH
29655: LD_INT 21
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: PPUSH
29674: CALL_OW 69
29678: ST_TO_ADDR
// if not tmp then
29679: LD_VAR 0 8
29683: NOT
29684: IFFALSE 29688
// exit ;
29686: GO 31246
// for i in tmp do
29688: LD_ADDR_VAR 0 6
29692: PUSH
29693: LD_VAR 0 8
29697: PUSH
29698: FOR_IN
29699: IFFALSE 31221
// begin points := [ 0 , 0 , 0 ] ;
29701: LD_ADDR_VAR 0 9
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: ST_TO_ADDR
// bpoints := 1 ;
29720: LD_ADDR_VAR 0 10
29724: PUSH
29725: LD_INT 1
29727: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29728: LD_VAR 0 6
29732: PPUSH
29733: CALL_OW 247
29737: PUSH
29738: LD_INT 1
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 30324
29746: POP
// begin if GetClass ( i ) = 1 then
29747: LD_VAR 0 6
29751: PPUSH
29752: CALL_OW 257
29756: PUSH
29757: LD_INT 1
29759: EQUAL
29760: IFFALSE 29781
// points := [ 10 , 5 , 3 ] ;
29762: LD_ADDR_VAR 0 9
29766: PUSH
29767: LD_INT 10
29769: PUSH
29770: LD_INT 5
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29781: LD_VAR 0 6
29785: PPUSH
29786: CALL_OW 257
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: IN
29805: IFFALSE 29826
// points := [ 3 , 2 , 1 ] ;
29807: LD_ADDR_VAR 0 9
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29826: LD_VAR 0 6
29830: PPUSH
29831: CALL_OW 257
29835: PUSH
29836: LD_INT 5
29838: EQUAL
29839: IFFALSE 29860
// points := [ 130 , 5 , 2 ] ;
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: LD_INT 130
29848: PUSH
29849: LD_INT 5
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29860: LD_VAR 0 6
29864: PPUSH
29865: CALL_OW 257
29869: PUSH
29870: LD_INT 8
29872: EQUAL
29873: IFFALSE 29894
// points := [ 35 , 35 , 30 ] ;
29875: LD_ADDR_VAR 0 9
29879: PUSH
29880: LD_INT 35
29882: PUSH
29883: LD_INT 35
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29894: LD_VAR 0 6
29898: PPUSH
29899: CALL_OW 257
29903: PUSH
29904: LD_INT 9
29906: EQUAL
29907: IFFALSE 29928
// points := [ 20 , 55 , 40 ] ;
29909: LD_ADDR_VAR 0 9
29913: PUSH
29914: LD_INT 20
29916: PUSH
29917: LD_INT 55
29919: PUSH
29920: LD_INT 40
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29928: LD_VAR 0 6
29932: PPUSH
29933: CALL_OW 257
29937: PUSH
29938: LD_INT 12
29940: PUSH
29941: LD_INT 16
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: IN
29948: IFFALSE 29969
// points := [ 5 , 3 , 2 ] ;
29950: LD_ADDR_VAR 0 9
29954: PUSH
29955: LD_INT 5
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29969: LD_VAR 0 6
29973: PPUSH
29974: CALL_OW 257
29978: PUSH
29979: LD_INT 17
29981: EQUAL
29982: IFFALSE 30003
// points := [ 100 , 50 , 75 ] ;
29984: LD_ADDR_VAR 0 9
29988: PUSH
29989: LD_INT 100
29991: PUSH
29992: LD_INT 50
29994: PUSH
29995: LD_INT 75
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30003: LD_VAR 0 6
30007: PPUSH
30008: CALL_OW 257
30012: PUSH
30013: LD_INT 15
30015: EQUAL
30016: IFFALSE 30037
// points := [ 10 , 5 , 3 ] ;
30018: LD_ADDR_VAR 0 9
30022: PUSH
30023: LD_INT 10
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30037: LD_VAR 0 6
30041: PPUSH
30042: CALL_OW 257
30046: PUSH
30047: LD_INT 14
30049: EQUAL
30050: IFFALSE 30071
// points := [ 10 , 0 , 0 ] ;
30052: LD_ADDR_VAR 0 9
30056: PUSH
30057: LD_INT 10
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30071: LD_VAR 0 6
30075: PPUSH
30076: CALL_OW 257
30080: PUSH
30081: LD_INT 11
30083: EQUAL
30084: IFFALSE 30105
// points := [ 30 , 10 , 5 ] ;
30086: LD_ADDR_VAR 0 9
30090: PUSH
30091: LD_INT 30
30093: PUSH
30094: LD_INT 10
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_INT 5
30112: PPUSH
30113: CALL_OW 321
30117: PUSH
30118: LD_INT 2
30120: EQUAL
30121: IFFALSE 30138
// bpoints := bpoints * 1.8 ;
30123: LD_ADDR_VAR 0 10
30127: PUSH
30128: LD_VAR 0 10
30132: PUSH
30133: LD_REAL  1.80000000000000E+0000
30136: MUL
30137: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30138: LD_VAR 0 6
30142: PPUSH
30143: CALL_OW 257
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: LD_INT 4
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: IN
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_INT 51
30174: PPUSH
30175: CALL_OW 321
30179: PUSH
30180: LD_INT 2
30182: EQUAL
30183: AND
30184: IFFALSE 30201
// bpoints := bpoints * 1.2 ;
30186: LD_ADDR_VAR 0 10
30190: PUSH
30191: LD_VAR 0 10
30195: PUSH
30196: LD_REAL  1.20000000000000E+0000
30199: MUL
30200: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30201: LD_VAR 0 6
30205: PPUSH
30206: CALL_OW 257
30210: PUSH
30211: LD_INT 5
30213: PUSH
30214: LD_INT 7
30216: PUSH
30217: LD_INT 9
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: IN
30225: PUSH
30226: LD_VAR 0 1
30230: PPUSH
30231: LD_INT 52
30233: PPUSH
30234: CALL_OW 321
30238: PUSH
30239: LD_INT 2
30241: EQUAL
30242: AND
30243: IFFALSE 30260
// bpoints := bpoints * 1.5 ;
30245: LD_ADDR_VAR 0 10
30249: PUSH
30250: LD_VAR 0 10
30254: PUSH
30255: LD_REAL  1.50000000000000E+0000
30258: MUL
30259: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30260: LD_VAR 0 1
30264: PPUSH
30265: LD_INT 66
30267: PPUSH
30268: CALL_OW 321
30272: PUSH
30273: LD_INT 2
30275: EQUAL
30276: IFFALSE 30293
// bpoints := bpoints * 1.1 ;
30278: LD_ADDR_VAR 0 10
30282: PUSH
30283: LD_VAR 0 10
30287: PUSH
30288: LD_REAL  1.10000000000000E+0000
30291: MUL
30292: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30293: LD_ADDR_VAR 0 10
30297: PUSH
30298: LD_VAR 0 10
30302: PUSH
30303: LD_VAR 0 6
30307: PPUSH
30308: LD_INT 1
30310: PPUSH
30311: CALL_OW 259
30315: PUSH
30316: LD_REAL  1.15000000000000E+0000
30319: MUL
30320: MUL
30321: ST_TO_ADDR
// end ; unit_vehicle :
30322: GO 31150
30324: LD_INT 2
30326: DOUBLE
30327: EQUAL
30328: IFTRUE 30332
30330: GO 31138
30332: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30333: LD_VAR 0 6
30337: PPUSH
30338: CALL_OW 264
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 42
30348: PUSH
30349: LD_INT 24
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: IN
30357: IFFALSE 30378
// points := [ 25 , 5 , 3 ] ;
30359: LD_ADDR_VAR 0 9
30363: PUSH
30364: LD_INT 25
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30378: LD_VAR 0 6
30382: PPUSH
30383: CALL_OW 264
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 43
30393: PUSH
30394: LD_INT 25
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: IN
30402: IFFALSE 30423
// points := [ 40 , 15 , 5 ] ;
30404: LD_ADDR_VAR 0 9
30408: PUSH
30409: LD_INT 40
30411: PUSH
30412: LD_INT 15
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30423: LD_VAR 0 6
30427: PPUSH
30428: CALL_OW 264
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: LD_INT 23
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: IN
30443: IFFALSE 30464
// points := [ 7 , 25 , 8 ] ;
30445: LD_ADDR_VAR 0 9
30449: PUSH
30450: LD_INT 7
30452: PUSH
30453: LD_INT 25
30455: PUSH
30456: LD_INT 8
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30464: LD_VAR 0 6
30468: PPUSH
30469: CALL_OW 264
30473: PUSH
30474: LD_INT 5
30476: PUSH
30477: LD_INT 27
30479: PUSH
30480: LD_INT 44
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: IN
30488: IFFALSE 30509
// points := [ 14 , 50 , 16 ] ;
30490: LD_ADDR_VAR 0 9
30494: PUSH
30495: LD_INT 14
30497: PUSH
30498: LD_INT 50
30500: PUSH
30501: LD_INT 16
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30509: LD_VAR 0 6
30513: PPUSH
30514: CALL_OW 264
30518: PUSH
30519: LD_INT 6
30521: PUSH
30522: LD_INT 46
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: IN
30529: IFFALSE 30550
// points := [ 32 , 120 , 70 ] ;
30531: LD_ADDR_VAR 0 9
30535: PUSH
30536: LD_INT 32
30538: PUSH
30539: LD_INT 120
30541: PUSH
30542: LD_INT 70
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30550: LD_VAR 0 6
30554: PPUSH
30555: CALL_OW 264
30559: PUSH
30560: LD_INT 7
30562: PUSH
30563: LD_INT 28
30565: PUSH
30566: LD_INT 45
30568: PUSH
30569: LD_INT 92
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: IN
30578: IFFALSE 30599
// points := [ 35 , 20 , 45 ] ;
30580: LD_ADDR_VAR 0 9
30584: PUSH
30585: LD_INT 35
30587: PUSH
30588: LD_INT 20
30590: PUSH
30591: LD_INT 45
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30599: LD_VAR 0 6
30603: PPUSH
30604: CALL_OW 264
30608: PUSH
30609: LD_INT 47
30611: PUSH
30612: EMPTY
30613: LIST
30614: IN
30615: IFFALSE 30636
// points := [ 67 , 45 , 75 ] ;
30617: LD_ADDR_VAR 0 9
30621: PUSH
30622: LD_INT 67
30624: PUSH
30625: LD_INT 45
30627: PUSH
30628: LD_INT 75
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30636: LD_VAR 0 6
30640: PPUSH
30641: CALL_OW 264
30645: PUSH
30646: LD_INT 26
30648: PUSH
30649: EMPTY
30650: LIST
30651: IN
30652: IFFALSE 30673
// points := [ 120 , 30 , 80 ] ;
30654: LD_ADDR_VAR 0 9
30658: PUSH
30659: LD_INT 120
30661: PUSH
30662: LD_INT 30
30664: PUSH
30665: LD_INT 80
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30673: LD_VAR 0 6
30677: PPUSH
30678: CALL_OW 264
30682: PUSH
30683: LD_INT 22
30685: PUSH
30686: EMPTY
30687: LIST
30688: IN
30689: IFFALSE 30710
// points := [ 40 , 1 , 1 ] ;
30691: LD_ADDR_VAR 0 9
30695: PUSH
30696: LD_INT 40
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 264
30719: PUSH
30720: LD_INT 29
30722: PUSH
30723: EMPTY
30724: LIST
30725: IN
30726: IFFALSE 30747
// points := [ 70 , 200 , 400 ] ;
30728: LD_ADDR_VAR 0 9
30732: PUSH
30733: LD_INT 70
30735: PUSH
30736: LD_INT 200
30738: PUSH
30739: LD_INT 400
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30747: LD_VAR 0 6
30751: PPUSH
30752: CALL_OW 264
30756: PUSH
30757: LD_INT 14
30759: PUSH
30760: LD_INT 53
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: IN
30767: IFFALSE 30788
// points := [ 40 , 10 , 20 ] ;
30769: LD_ADDR_VAR 0 9
30773: PUSH
30774: LD_INT 40
30776: PUSH
30777: LD_INT 10
30779: PUSH
30780: LD_INT 20
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30788: LD_VAR 0 6
30792: PPUSH
30793: CALL_OW 264
30797: PUSH
30798: LD_INT 9
30800: PUSH
30801: EMPTY
30802: LIST
30803: IN
30804: IFFALSE 30825
// points := [ 5 , 70 , 20 ] ;
30806: LD_ADDR_VAR 0 9
30810: PUSH
30811: LD_INT 5
30813: PUSH
30814: LD_INT 70
30816: PUSH
30817: LD_INT 20
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30825: LD_VAR 0 6
30829: PPUSH
30830: CALL_OW 264
30834: PUSH
30835: LD_INT 10
30837: PUSH
30838: EMPTY
30839: LIST
30840: IN
30841: IFFALSE 30862
// points := [ 35 , 110 , 70 ] ;
30843: LD_ADDR_VAR 0 9
30847: PUSH
30848: LD_INT 35
30850: PUSH
30851: LD_INT 110
30853: PUSH
30854: LD_INT 70
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30862: LD_VAR 0 6
30866: PPUSH
30867: CALL_OW 265
30871: PUSH
30872: LD_INT 25
30874: EQUAL
30875: IFFALSE 30896
// points := [ 80 , 65 , 100 ] ;
30877: LD_ADDR_VAR 0 9
30881: PUSH
30882: LD_INT 80
30884: PUSH
30885: LD_INT 65
30887: PUSH
30888: LD_INT 100
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30896: LD_VAR 0 6
30900: PPUSH
30901: CALL_OW 263
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30944
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30911: LD_ADDR_VAR 0 10
30915: PUSH
30916: LD_VAR 0 10
30920: PUSH
30921: LD_VAR 0 6
30925: PPUSH
30926: CALL_OW 311
30930: PPUSH
30931: LD_INT 3
30933: PPUSH
30934: CALL_OW 259
30938: PUSH
30939: LD_INT 4
30941: MUL
30942: MUL
30943: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30944: LD_VAR 0 6
30948: PPUSH
30949: CALL_OW 263
30953: PUSH
30954: LD_INT 2
30956: EQUAL
30957: IFFALSE 31008
// begin j := IsControledBy ( i ) ;
30959: LD_ADDR_VAR 0 7
30963: PUSH
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 312
30973: ST_TO_ADDR
// if j then
30974: LD_VAR 0 7
30978: IFFALSE 31008
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30980: LD_ADDR_VAR 0 10
30984: PUSH
30985: LD_VAR 0 10
30989: PUSH
30990: LD_VAR 0 7
30994: PPUSH
30995: LD_INT 3
30997: PPUSH
30998: CALL_OW 259
31002: PUSH
31003: LD_INT 3
31005: MUL
31006: MUL
31007: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31008: LD_VAR 0 6
31012: PPUSH
31013: CALL_OW 264
31017: PUSH
31018: LD_INT 5
31020: PUSH
31021: LD_INT 6
31023: PUSH
31024: LD_INT 46
31026: PUSH
31027: LD_INT 44
31029: PUSH
31030: LD_INT 47
31032: PUSH
31033: LD_INT 45
31035: PUSH
31036: LD_INT 28
31038: PUSH
31039: LD_INT 7
31041: PUSH
31042: LD_INT 27
31044: PUSH
31045: LD_INT 29
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: IN
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: LD_INT 52
31068: PPUSH
31069: CALL_OW 321
31073: PUSH
31074: LD_INT 2
31076: EQUAL
31077: AND
31078: IFFALSE 31095
// bpoints := bpoints * 1.2 ;
31080: LD_ADDR_VAR 0 10
31084: PUSH
31085: LD_VAR 0 10
31089: PUSH
31090: LD_REAL  1.20000000000000E+0000
31093: MUL
31094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31095: LD_VAR 0 6
31099: PPUSH
31100: CALL_OW 264
31104: PUSH
31105: LD_INT 6
31107: PUSH
31108: LD_INT 46
31110: PUSH
31111: LD_INT 47
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: IN
31119: IFFALSE 31136
// bpoints := bpoints * 1.2 ;
31121: LD_ADDR_VAR 0 10
31125: PUSH
31126: LD_VAR 0 10
31130: PUSH
31131: LD_REAL  1.20000000000000E+0000
31134: MUL
31135: ST_TO_ADDR
// end ; unit_building :
31136: GO 31150
31138: LD_INT 3
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31149
31146: POP
// ; end ;
31147: GO 31150
31149: POP
// for j = 1 to 3 do
31150: LD_ADDR_VAR 0 7
31154: PUSH
31155: DOUBLE
31156: LD_INT 1
31158: DEC
31159: ST_TO_ADDR
31160: LD_INT 3
31162: PUSH
31163: FOR_TO
31164: IFFALSE 31217
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31166: LD_ADDR_VAR 0 5
31170: PUSH
31171: LD_VAR 0 5
31175: PPUSH
31176: LD_VAR 0 7
31180: PPUSH
31181: LD_VAR 0 5
31185: PUSH
31186: LD_VAR 0 7
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 9
31196: PUSH
31197: LD_VAR 0 7
31201: ARRAY
31202: PUSH
31203: LD_VAR 0 10
31207: MUL
31208: PLUS
31209: PPUSH
31210: CALL_OW 1
31214: ST_TO_ADDR
31215: GO 31163
31217: POP
31218: POP
// end ;
31219: GO 29698
31221: POP
31222: POP
// result := Replace ( result , 4 , tmp ) ;
31223: LD_ADDR_VAR 0 5
31227: PUSH
31228: LD_VAR 0 5
31232: PPUSH
31233: LD_INT 4
31235: PPUSH
31236: LD_VAR 0 8
31240: PPUSH
31241: CALL_OW 1
31245: ST_TO_ADDR
// end ;
31246: LD_VAR 0 5
31250: RET
// export function DangerAtRange ( unit , range ) ; begin
31251: LD_INT 0
31253: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31254: LD_ADDR_VAR 0 3
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 255
31268: PPUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 250
31278: PPUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 251
31288: PPUSH
31289: LD_VAR 0 2
31293: PPUSH
31294: CALL 29550 0 4
31298: ST_TO_ADDR
// end ;
31299: LD_VAR 0 3
31303: RET
// export function DangerInArea ( side , area ) ; begin
31304: LD_INT 0
31306: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_VAR 0 2
31316: PPUSH
31317: LD_INT 81
31319: PUSH
31320: LD_VAR 0 1
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PPUSH
31329: CALL_OW 70
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 3
31338: RET
// export function IsExtension ( b ) ; begin
31339: LD_INT 0
31341: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31342: LD_ADDR_VAR 0 2
31346: PUSH
31347: LD_VAR 0 1
31351: PUSH
31352: LD_INT 23
31354: PUSH
31355: LD_INT 20
31357: PUSH
31358: LD_INT 22
31360: PUSH
31361: LD_INT 17
31363: PUSH
31364: LD_INT 24
31366: PUSH
31367: LD_INT 21
31369: PUSH
31370: LD_INT 19
31372: PUSH
31373: LD_INT 16
31375: PUSH
31376: LD_INT 25
31378: PUSH
31379: LD_INT 18
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: IN
31394: ST_TO_ADDR
// end ;
31395: LD_VAR 0 2
31399: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// result := [ ] ;
31405: LD_ADDR_VAR 0 4
31409: PUSH
31410: EMPTY
31411: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31412: LD_ADDR_VAR 0 5
31416: PUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: LD_INT 21
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PPUSH
31432: CALL_OW 70
31436: ST_TO_ADDR
// if not tmp then
31437: LD_VAR 0 5
31441: NOT
31442: IFFALSE 31446
// exit ;
31444: GO 31510
// if checkLink then
31446: LD_VAR 0 3
31450: IFFALSE 31500
// begin for i in tmp do
31452: LD_ADDR_VAR 0 6
31456: PUSH
31457: LD_VAR 0 5
31461: PUSH
31462: FOR_IN
31463: IFFALSE 31498
// if GetBase ( i ) <> base then
31465: LD_VAR 0 6
31469: PPUSH
31470: CALL_OW 274
31474: PUSH
31475: LD_VAR 0 1
31479: NONEQUAL
31480: IFFALSE 31496
// ComLinkToBase ( base , i ) ;
31482: LD_VAR 0 1
31486: PPUSH
31487: LD_VAR 0 6
31491: PPUSH
31492: CALL_OW 169
31496: GO 31462
31498: POP
31499: POP
// end ; result := tmp ;
31500: LD_ADDR_VAR 0 4
31504: PUSH
31505: LD_VAR 0 5
31509: ST_TO_ADDR
// end ;
31510: LD_VAR 0 4
31514: RET
// export function ComComplete ( units , b ) ; var i ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
// if not units then
31519: LD_VAR 0 1
31523: NOT
31524: IFFALSE 31528
// exit ;
31526: GO 31618
// for i in units do
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: LD_VAR 0 1
31537: PUSH
31538: FOR_IN
31539: IFFALSE 31616
// if BuildingStatus ( b ) = bs_build then
31541: LD_VAR 0 2
31545: PPUSH
31546: CALL_OW 461
31550: PUSH
31551: LD_INT 1
31553: EQUAL
31554: IFFALSE 31614
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31556: LD_VAR 0 4
31560: PPUSH
31561: LD_STRING h
31563: PUSH
31564: LD_VAR 0 2
31568: PPUSH
31569: CALL_OW 250
31573: PUSH
31574: LD_VAR 0 2
31578: PPUSH
31579: CALL_OW 251
31583: PUSH
31584: LD_VAR 0 2
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: PPUSH
31610: CALL_OW 446
31614: GO 31538
31616: POP
31617: POP
// end ;
31618: LD_VAR 0 3
31622: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31623: LD_INT 0
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31631: LD_VAR 0 1
31635: NOT
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 263
31646: PUSH
31647: LD_INT 2
31649: NONEQUAL
31650: OR
31651: IFFALSE 31655
// exit ;
31653: GO 31971
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31655: LD_ADDR_VAR 0 6
31659: PUSH
31660: LD_INT 22
31662: PUSH
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 255
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 36
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 34
31692: PUSH
31693: LD_INT 31
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PPUSH
31709: CALL_OW 69
31713: ST_TO_ADDR
// if not tmp then
31714: LD_VAR 0 6
31718: NOT
31719: IFFALSE 31723
// exit ;
31721: GO 31971
// result := [ ] ;
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: EMPTY
31729: ST_TO_ADDR
// for i in tmp do
31730: LD_ADDR_VAR 0 3
31734: PUSH
31735: LD_VAR 0 6
31739: PUSH
31740: FOR_IN
31741: IFFALSE 31812
// begin t := UnitsInside ( i ) ;
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: LD_VAR 0 3
31752: PPUSH
31753: CALL_OW 313
31757: ST_TO_ADDR
// if t then
31758: LD_VAR 0 4
31762: IFFALSE 31810
// for j in t do
31764: LD_ADDR_VAR 0 7
31768: PUSH
31769: LD_VAR 0 4
31773: PUSH
31774: FOR_IN
31775: IFFALSE 31808
// result := Replace ( result , result + 1 , j ) ;
31777: LD_ADDR_VAR 0 2
31781: PUSH
31782: LD_VAR 0 2
31786: PPUSH
31787: LD_VAR 0 2
31791: PUSH
31792: LD_INT 1
31794: PLUS
31795: PPUSH
31796: LD_VAR 0 7
31800: PPUSH
31801: CALL_OW 1
31805: ST_TO_ADDR
31806: GO 31774
31808: POP
31809: POP
// end ;
31810: GO 31740
31812: POP
31813: POP
// if not result then
31814: LD_VAR 0 2
31818: NOT
31819: IFFALSE 31823
// exit ;
31821: GO 31971
// mech := result [ 1 ] ;
31823: LD_ADDR_VAR 0 5
31827: PUSH
31828: LD_VAR 0 2
31832: PUSH
31833: LD_INT 1
31835: ARRAY
31836: ST_TO_ADDR
// if result > 1 then
31837: LD_VAR 0 2
31841: PUSH
31842: LD_INT 1
31844: GREATER
31845: IFFALSE 31957
// begin for i = 2 to result do
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: DOUBLE
31853: LD_INT 2
31855: DEC
31856: ST_TO_ADDR
31857: LD_VAR 0 2
31861: PUSH
31862: FOR_TO
31863: IFFALSE 31955
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_VAR 0 2
31874: PUSH
31875: LD_VAR 0 3
31879: ARRAY
31880: PPUSH
31881: LD_INT 3
31883: PPUSH
31884: CALL_OW 259
31888: PUSH
31889: LD_VAR 0 2
31893: PUSH
31894: LD_VAR 0 3
31898: ARRAY
31899: PPUSH
31900: CALL_OW 432
31904: MINUS
31905: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31906: LD_VAR 0 4
31910: PUSH
31911: LD_VAR 0 5
31915: PPUSH
31916: LD_INT 3
31918: PPUSH
31919: CALL_OW 259
31923: PUSH
31924: LD_VAR 0 5
31928: PPUSH
31929: CALL_OW 432
31933: MINUS
31934: GREATEREQUAL
31935: IFFALSE 31953
// mech := result [ i ] ;
31937: LD_ADDR_VAR 0 5
31941: PUSH
31942: LD_VAR 0 2
31946: PUSH
31947: LD_VAR 0 3
31951: ARRAY
31952: ST_TO_ADDR
// end ;
31953: GO 31862
31955: POP
31956: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31957: LD_VAR 0 1
31961: PPUSH
31962: LD_VAR 0 5
31966: PPUSH
31967: CALL_OW 135
// end ;
31971: LD_VAR 0 2
31975: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31976: LD_INT 0
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
// result := [ ] ;
31991: LD_ADDR_VAR 0 7
31995: PUSH
31996: EMPTY
31997: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 266
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: IN
32018: NOT
32019: IFFALSE 32023
// exit ;
32021: GO 33657
// if name then
32023: LD_VAR 0 3
32027: IFFALSE 32043
// SetBName ( base_dep , name ) ;
32029: LD_VAR 0 1
32033: PPUSH
32034: LD_VAR 0 3
32038: PPUSH
32039: CALL_OW 500
// base := GetBase ( base_dep ) ;
32043: LD_ADDR_VAR 0 15
32047: PUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: CALL_OW 274
32057: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32058: LD_ADDR_VAR 0 16
32062: PUSH
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 255
32072: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32073: LD_ADDR_VAR 0 17
32077: PUSH
32078: LD_VAR 0 1
32082: PPUSH
32083: CALL_OW 248
32087: ST_TO_ADDR
// if sources then
32088: LD_VAR 0 5
32092: IFFALSE 32139
// for i = 1 to 3 do
32094: LD_ADDR_VAR 0 8
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_INT 3
32106: PUSH
32107: FOR_TO
32108: IFFALSE 32137
// AddResourceType ( base , i , sources [ i ] ) ;
32110: LD_VAR 0 15
32114: PPUSH
32115: LD_VAR 0 8
32119: PPUSH
32120: LD_VAR 0 5
32124: PUSH
32125: LD_VAR 0 8
32129: ARRAY
32130: PPUSH
32131: CALL_OW 276
32135: GO 32107
32137: POP
32138: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32139: LD_ADDR_VAR 0 18
32143: PUSH
32144: LD_VAR 0 15
32148: PPUSH
32149: LD_VAR 0 2
32153: PPUSH
32154: LD_INT 1
32156: PPUSH
32157: CALL 31400 0 3
32161: ST_TO_ADDR
// InitHc ;
32162: CALL_OW 19
// InitUc ;
32166: CALL_OW 18
// uc_side := side ;
32170: LD_ADDR_OWVAR 20
32174: PUSH
32175: LD_VAR 0 16
32179: ST_TO_ADDR
// uc_nation := nation ;
32180: LD_ADDR_OWVAR 21
32184: PUSH
32185: LD_VAR 0 17
32189: ST_TO_ADDR
// if buildings then
32190: LD_VAR 0 18
32194: IFFALSE 33516
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32196: LD_ADDR_VAR 0 19
32200: PUSH
32201: LD_VAR 0 18
32205: PPUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 30
32211: PUSH
32212: LD_INT 29
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 30
32221: PUSH
32222: LD_INT 30
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: PPUSH
32234: CALL_OW 72
32238: ST_TO_ADDR
// if tmp then
32239: LD_VAR 0 19
32243: IFFALSE 32291
// for i in tmp do
32245: LD_ADDR_VAR 0 8
32249: PUSH
32250: LD_VAR 0 19
32254: PUSH
32255: FOR_IN
32256: IFFALSE 32289
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32258: LD_VAR 0 8
32262: PPUSH
32263: CALL_OW 250
32267: PPUSH
32268: LD_VAR 0 8
32272: PPUSH
32273: CALL_OW 251
32277: PPUSH
32278: LD_VAR 0 16
32282: PPUSH
32283: CALL_OW 441
32287: GO 32255
32289: POP
32290: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32291: LD_VAR 0 18
32295: PPUSH
32296: LD_INT 2
32298: PUSH
32299: LD_INT 30
32301: PUSH
32302: LD_INT 32
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 30
32311: PUSH
32312: LD_INT 33
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: PPUSH
32324: CALL_OW 72
32328: IFFALSE 32416
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32330: LD_ADDR_VAR 0 8
32334: PUSH
32335: LD_VAR 0 18
32339: PPUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 30
32345: PUSH
32346: LD_INT 32
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 30
32355: PUSH
32356: LD_INT 33
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: PPUSH
32368: CALL_OW 72
32372: PUSH
32373: FOR_IN
32374: IFFALSE 32414
// begin if not GetBWeapon ( i ) then
32376: LD_VAR 0 8
32380: PPUSH
32381: CALL_OW 269
32385: NOT
32386: IFFALSE 32412
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32388: LD_VAR 0 8
32392: PPUSH
32393: LD_VAR 0 8
32397: PPUSH
32398: LD_VAR 0 2
32402: PPUSH
32403: CALL 33662 0 2
32407: PPUSH
32408: CALL_OW 431
// end ;
32412: GO 32373
32414: POP
32415: POP
// end ; for i = 1 to personel do
32416: LD_ADDR_VAR 0 8
32420: PUSH
32421: DOUBLE
32422: LD_INT 1
32424: DEC
32425: ST_TO_ADDR
32426: LD_VAR 0 6
32430: PUSH
32431: FOR_TO
32432: IFFALSE 33496
// begin if i > 4 then
32434: LD_VAR 0 8
32438: PUSH
32439: LD_INT 4
32441: GREATER
32442: IFFALSE 32446
// break ;
32444: GO 33496
// case i of 1 :
32446: LD_VAR 0 8
32450: PUSH
32451: LD_INT 1
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32459
32457: GO 32539
32459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32460: LD_ADDR_VAR 0 12
32464: PUSH
32465: LD_VAR 0 18
32469: PPUSH
32470: LD_INT 22
32472: PUSH
32473: LD_VAR 0 16
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 58
32484: PUSH
32485: EMPTY
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: LD_INT 30
32493: PUSH
32494: LD_INT 32
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 30
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 30
32513: PUSH
32514: LD_INT 5
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 72
32536: ST_TO_ADDR
32537: GO 32761
32539: LD_INT 2
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32609
32547: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32548: LD_ADDR_VAR 0 12
32552: PUSH
32553: LD_VAR 0 18
32557: PPUSH
32558: LD_INT 22
32560: PUSH
32561: LD_VAR 0 16
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: LD_INT 30
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 30
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PPUSH
32602: CALL_OW 72
32606: ST_TO_ADDR
32607: GO 32761
32609: LD_INT 3
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32679
32617: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32618: LD_ADDR_VAR 0 12
32622: PUSH
32623: LD_VAR 0 18
32627: PPUSH
32628: LD_INT 22
32630: PUSH
32631: LD_VAR 0 16
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 2
32642: PUSH
32643: LD_INT 30
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 30
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PPUSH
32672: CALL_OW 72
32676: ST_TO_ADDR
32677: GO 32761
32679: LD_INT 4
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32760
32687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32688: LD_ADDR_VAR 0 12
32692: PUSH
32693: LD_VAR 0 18
32697: PPUSH
32698: LD_INT 22
32700: PUSH
32701: LD_VAR 0 16
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: LD_INT 30
32715: PUSH
32716: LD_INT 6
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 30
32725: PUSH
32726: LD_INT 7
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 30
32735: PUSH
32736: LD_INT 8
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PPUSH
32753: CALL_OW 72
32757: ST_TO_ADDR
32758: GO 32761
32760: POP
// if i = 1 then
32761: LD_VAR 0 8
32765: PUSH
32766: LD_INT 1
32768: EQUAL
32769: IFFALSE 32880
// begin tmp := [ ] ;
32771: LD_ADDR_VAR 0 19
32775: PUSH
32776: EMPTY
32777: ST_TO_ADDR
// for j in f do
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_VAR 0 12
32787: PUSH
32788: FOR_IN
32789: IFFALSE 32862
// if GetBType ( j ) = b_bunker then
32791: LD_VAR 0 9
32795: PPUSH
32796: CALL_OW 266
32800: PUSH
32801: LD_INT 32
32803: EQUAL
32804: IFFALSE 32831
// tmp := Insert ( tmp , 1 , j ) else
32806: LD_ADDR_VAR 0 19
32810: PUSH
32811: LD_VAR 0 19
32815: PPUSH
32816: LD_INT 1
32818: PPUSH
32819: LD_VAR 0 9
32823: PPUSH
32824: CALL_OW 2
32828: ST_TO_ADDR
32829: GO 32860
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32831: LD_ADDR_VAR 0 19
32835: PUSH
32836: LD_VAR 0 19
32840: PPUSH
32841: LD_VAR 0 19
32845: PUSH
32846: LD_INT 1
32848: PLUS
32849: PPUSH
32850: LD_VAR 0 9
32854: PPUSH
32855: CALL_OW 2
32859: ST_TO_ADDR
32860: GO 32788
32862: POP
32863: POP
// if tmp then
32864: LD_VAR 0 19
32868: IFFALSE 32880
// f := tmp ;
32870: LD_ADDR_VAR 0 12
32874: PUSH
32875: LD_VAR 0 19
32879: ST_TO_ADDR
// end ; x := personel [ i ] ;
32880: LD_ADDR_VAR 0 13
32884: PUSH
32885: LD_VAR 0 6
32889: PUSH
32890: LD_VAR 0 8
32894: ARRAY
32895: ST_TO_ADDR
// if x = - 1 then
32896: LD_VAR 0 13
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: EQUAL
32905: IFFALSE 33114
// begin for j in f do
32907: LD_ADDR_VAR 0 9
32911: PUSH
32912: LD_VAR 0 12
32916: PUSH
32917: FOR_IN
32918: IFFALSE 33110
// repeat InitHc ;
32920: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32924: LD_VAR 0 9
32928: PPUSH
32929: CALL_OW 266
32933: PUSH
32934: LD_INT 5
32936: EQUAL
32937: IFFALSE 33007
// begin if UnitsInside ( j ) < 3 then
32939: LD_VAR 0 9
32943: PPUSH
32944: CALL_OW 313
32948: PUSH
32949: LD_INT 3
32951: LESS
32952: IFFALSE 32988
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32954: LD_INT 0
32956: PPUSH
32957: LD_INT 5
32959: PUSH
32960: LD_INT 8
32962: PUSH
32963: LD_INT 9
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: PUSH
32971: LD_VAR 0 17
32975: ARRAY
32976: PPUSH
32977: LD_VAR 0 4
32981: PPUSH
32982: CALL_OW 380
32986: GO 33005
// PrepareHuman ( false , i , skill ) ;
32988: LD_INT 0
32990: PPUSH
32991: LD_VAR 0 8
32995: PPUSH
32996: LD_VAR 0 4
33000: PPUSH
33001: CALL_OW 380
// end else
33005: GO 33024
// PrepareHuman ( false , i , skill ) ;
33007: LD_INT 0
33009: PPUSH
33010: LD_VAR 0 8
33014: PPUSH
33015: LD_VAR 0 4
33019: PPUSH
33020: CALL_OW 380
// un := CreateHuman ;
33024: LD_ADDR_VAR 0 14
33028: PUSH
33029: CALL_OW 44
33033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33034: LD_ADDR_VAR 0 7
33038: PUSH
33039: LD_VAR 0 7
33043: PPUSH
33044: LD_INT 1
33046: PPUSH
33047: LD_VAR 0 14
33051: PPUSH
33052: CALL_OW 2
33056: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33057: LD_VAR 0 14
33061: PPUSH
33062: LD_VAR 0 9
33066: PPUSH
33067: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33071: LD_VAR 0 9
33075: PPUSH
33076: CALL_OW 313
33080: PUSH
33081: LD_INT 6
33083: EQUAL
33084: PUSH
33085: LD_VAR 0 9
33089: PPUSH
33090: CALL_OW 266
33094: PUSH
33095: LD_INT 32
33097: PUSH
33098: LD_INT 31
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: IN
33105: OR
33106: IFFALSE 32920
33108: GO 32917
33110: POP
33111: POP
// end else
33112: GO 33494
// for j = 1 to x do
33114: LD_ADDR_VAR 0 9
33118: PUSH
33119: DOUBLE
33120: LD_INT 1
33122: DEC
33123: ST_TO_ADDR
33124: LD_VAR 0 13
33128: PUSH
33129: FOR_TO
33130: IFFALSE 33492
// begin InitHc ;
33132: CALL_OW 19
// if not f then
33136: LD_VAR 0 12
33140: NOT
33141: IFFALSE 33230
// begin PrepareHuman ( false , i , skill ) ;
33143: LD_INT 0
33145: PPUSH
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: CALL_OW 380
// un := CreateHuman ;
33160: LD_ADDR_VAR 0 14
33164: PUSH
33165: CALL_OW 44
33169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33170: LD_ADDR_VAR 0 7
33174: PUSH
33175: LD_VAR 0 7
33179: PPUSH
33180: LD_INT 1
33182: PPUSH
33183: LD_VAR 0 14
33187: PPUSH
33188: CALL_OW 2
33192: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33193: LD_VAR 0 14
33197: PPUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL_OW 250
33207: PPUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: CALL_OW 251
33217: PPUSH
33218: LD_INT 10
33220: PPUSH
33221: LD_INT 0
33223: PPUSH
33224: CALL_OW 50
// continue ;
33228: GO 33129
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33230: LD_VAR 0 12
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 313
33243: PUSH
33244: LD_VAR 0 12
33248: PUSH
33249: LD_INT 1
33251: ARRAY
33252: PPUSH
33253: CALL_OW 266
33257: PUSH
33258: LD_INT 32
33260: PUSH
33261: LD_INT 31
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: IN
33268: AND
33269: PUSH
33270: LD_VAR 0 12
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: PPUSH
33279: CALL_OW 313
33283: PUSH
33284: LD_INT 6
33286: EQUAL
33287: OR
33288: IFFALSE 33308
// f := Delete ( f , 1 ) ;
33290: LD_ADDR_VAR 0 12
33294: PUSH
33295: LD_VAR 0 12
33299: PPUSH
33300: LD_INT 1
33302: PPUSH
33303: CALL_OW 3
33307: ST_TO_ADDR
// if not f then
33308: LD_VAR 0 12
33312: NOT
33313: IFFALSE 33331
// begin x := x + 2 ;
33315: LD_ADDR_VAR 0 13
33319: PUSH
33320: LD_VAR 0 13
33324: PUSH
33325: LD_INT 2
33327: PLUS
33328: ST_TO_ADDR
// continue ;
33329: GO 33129
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33331: LD_VAR 0 12
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PPUSH
33340: CALL_OW 266
33344: PUSH
33345: LD_INT 5
33347: EQUAL
33348: IFFALSE 33422
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33350: LD_VAR 0 12
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: PPUSH
33359: CALL_OW 313
33363: PUSH
33364: LD_INT 3
33366: LESS
33367: IFFALSE 33403
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33369: LD_INT 0
33371: PPUSH
33372: LD_INT 5
33374: PUSH
33375: LD_INT 8
33377: PUSH
33378: LD_INT 9
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: PUSH
33386: LD_VAR 0 17
33390: ARRAY
33391: PPUSH
33392: LD_VAR 0 4
33396: PPUSH
33397: CALL_OW 380
33401: GO 33420
// PrepareHuman ( false , i , skill ) ;
33403: LD_INT 0
33405: PPUSH
33406: LD_VAR 0 8
33410: PPUSH
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 380
// end else
33420: GO 33439
// PrepareHuman ( false , i , skill ) ;
33422: LD_INT 0
33424: PPUSH
33425: LD_VAR 0 8
33429: PPUSH
33430: LD_VAR 0 4
33434: PPUSH
33435: CALL_OW 380
// un := CreateHuman ;
33439: LD_ADDR_VAR 0 14
33443: PUSH
33444: CALL_OW 44
33448: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33449: LD_ADDR_VAR 0 7
33453: PUSH
33454: LD_VAR 0 7
33458: PPUSH
33459: LD_INT 1
33461: PPUSH
33462: LD_VAR 0 14
33466: PPUSH
33467: CALL_OW 2
33471: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33472: LD_VAR 0 14
33476: PPUSH
33477: LD_VAR 0 12
33481: PUSH
33482: LD_INT 1
33484: ARRAY
33485: PPUSH
33486: CALL_OW 52
// end ;
33490: GO 33129
33492: POP
33493: POP
// end ;
33494: GO 32431
33496: POP
33497: POP
// result := result ^ buildings ;
33498: LD_ADDR_VAR 0 7
33502: PUSH
33503: LD_VAR 0 7
33507: PUSH
33508: LD_VAR 0 18
33512: ADD
33513: ST_TO_ADDR
// end else
33514: GO 33657
// begin for i = 1 to personel do
33516: LD_ADDR_VAR 0 8
33520: PUSH
33521: DOUBLE
33522: LD_INT 1
33524: DEC
33525: ST_TO_ADDR
33526: LD_VAR 0 6
33530: PUSH
33531: FOR_TO
33532: IFFALSE 33655
// begin if i > 4 then
33534: LD_VAR 0 8
33538: PUSH
33539: LD_INT 4
33541: GREATER
33542: IFFALSE 33546
// break ;
33544: GO 33655
// x := personel [ i ] ;
33546: LD_ADDR_VAR 0 13
33550: PUSH
33551: LD_VAR 0 6
33555: PUSH
33556: LD_VAR 0 8
33560: ARRAY
33561: ST_TO_ADDR
// if x = - 1 then
33562: LD_VAR 0 13
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: EQUAL
33571: IFFALSE 33575
// continue ;
33573: GO 33531
// PrepareHuman ( false , i , skill ) ;
33575: LD_INT 0
33577: PPUSH
33578: LD_VAR 0 8
33582: PPUSH
33583: LD_VAR 0 4
33587: PPUSH
33588: CALL_OW 380
// un := CreateHuman ;
33592: LD_ADDR_VAR 0 14
33596: PUSH
33597: CALL_OW 44
33601: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33602: LD_VAR 0 14
33606: PPUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 250
33616: PPUSH
33617: LD_VAR 0 1
33621: PPUSH
33622: CALL_OW 251
33626: PPUSH
33627: LD_INT 10
33629: PPUSH
33630: LD_INT 0
33632: PPUSH
33633: CALL_OW 50
// result := result ^ un ;
33637: LD_ADDR_VAR 0 7
33641: PUSH
33642: LD_VAR 0 7
33646: PUSH
33647: LD_VAR 0 14
33651: ADD
33652: ST_TO_ADDR
// end ;
33653: GO 33531
33655: POP
33656: POP
// end ; end ;
33657: LD_VAR 0 7
33661: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
// result := false ;
33680: LD_ADDR_VAR 0 3
33684: PUSH
33685: LD_INT 0
33687: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33688: LD_VAR 0 1
33692: NOT
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: CALL_OW 266
33703: PUSH
33704: LD_INT 32
33706: PUSH
33707: LD_INT 33
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: IN
33714: NOT
33715: OR
33716: IFFALSE 33720
// exit ;
33718: GO 34829
// nat := GetNation ( tower ) ;
33720: LD_ADDR_VAR 0 12
33724: PUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 248
33734: ST_TO_ADDR
// side := GetSide ( tower ) ;
33735: LD_ADDR_VAR 0 16
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 255
33749: ST_TO_ADDR
// x := GetX ( tower ) ;
33750: LD_ADDR_VAR 0 10
33754: PUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 250
33764: ST_TO_ADDR
// y := GetY ( tower ) ;
33765: LD_ADDR_VAR 0 11
33769: PUSH
33770: LD_VAR 0 1
33774: PPUSH
33775: CALL_OW 251
33779: ST_TO_ADDR
// if not x or not y then
33780: LD_VAR 0 10
33784: NOT
33785: PUSH
33786: LD_VAR 0 11
33790: NOT
33791: OR
33792: IFFALSE 33796
// exit ;
33794: GO 34829
// weapon := 0 ;
33796: LD_ADDR_VAR 0 18
33800: PUSH
33801: LD_INT 0
33803: ST_TO_ADDR
// fac_list := [ ] ;
33804: LD_ADDR_VAR 0 17
33808: PUSH
33809: EMPTY
33810: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33811: LD_ADDR_VAR 0 6
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 274
33825: PPUSH
33826: LD_VAR 0 2
33830: PPUSH
33831: LD_INT 0
33833: PPUSH
33834: CALL 31400 0 3
33838: PPUSH
33839: LD_INT 30
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PPUSH
33849: CALL_OW 72
33853: ST_TO_ADDR
// if not factories then
33854: LD_VAR 0 6
33858: NOT
33859: IFFALSE 33863
// exit ;
33861: GO 34829
// for i in factories do
33863: LD_ADDR_VAR 0 8
33867: PUSH
33868: LD_VAR 0 6
33872: PUSH
33873: FOR_IN
33874: IFFALSE 33899
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33876: LD_ADDR_VAR 0 17
33880: PUSH
33881: LD_VAR 0 17
33885: PUSH
33886: LD_VAR 0 8
33890: PPUSH
33891: CALL_OW 478
33895: UNION
33896: ST_TO_ADDR
33897: GO 33873
33899: POP
33900: POP
// if not fac_list then
33901: LD_VAR 0 17
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 34829
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33910: LD_ADDR_VAR 0 5
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 5
33920: PUSH
33921: LD_INT 9
33923: PUSH
33924: LD_INT 10
33926: PUSH
33927: LD_INT 6
33929: PUSH
33930: LD_INT 7
33932: PUSH
33933: LD_INT 11
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 27
33947: PUSH
33948: LD_INT 28
33950: PUSH
33951: LD_INT 26
33953: PUSH
33954: LD_INT 30
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 43
33965: PUSH
33966: LD_INT 44
33968: PUSH
33969: LD_INT 46
33971: PUSH
33972: LD_INT 45
33974: PUSH
33975: LD_INT 47
33977: PUSH
33978: LD_INT 49
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: PUSH
33994: LD_VAR 0 12
33998: ARRAY
33999: ST_TO_ADDR
// list := list isect fac_list ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_VAR 0 5
34009: PUSH
34010: LD_VAR 0 17
34014: ISECT
34015: ST_TO_ADDR
// if not list then
34016: LD_VAR 0 5
34020: NOT
34021: IFFALSE 34025
// exit ;
34023: GO 34829
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34025: LD_VAR 0 12
34029: PUSH
34030: LD_INT 3
34032: EQUAL
34033: PUSH
34034: LD_INT 49
34036: PUSH
34037: LD_VAR 0 5
34041: IN
34042: AND
34043: PUSH
34044: LD_INT 31
34046: PPUSH
34047: LD_VAR 0 16
34051: PPUSH
34052: CALL_OW 321
34056: PUSH
34057: LD_INT 2
34059: EQUAL
34060: AND
34061: IFFALSE 34121
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34063: LD_INT 22
34065: PUSH
34066: LD_VAR 0 16
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 35
34077: PUSH
34078: LD_INT 49
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 91
34087: PUSH
34088: LD_VAR 0 1
34092: PUSH
34093: LD_INT 10
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: PPUSH
34106: CALL_OW 69
34110: NOT
34111: IFFALSE 34121
// weapon := ru_time_lapser ;
34113: LD_ADDR_VAR 0 18
34117: PUSH
34118: LD_INT 49
34120: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34121: LD_VAR 0 12
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: IN
34136: PUSH
34137: LD_INT 11
34139: PUSH
34140: LD_VAR 0 5
34144: IN
34145: PUSH
34146: LD_INT 30
34148: PUSH
34149: LD_VAR 0 5
34153: IN
34154: OR
34155: AND
34156: PUSH
34157: LD_INT 6
34159: PPUSH
34160: LD_VAR 0 16
34164: PPUSH
34165: CALL_OW 321
34169: PUSH
34170: LD_INT 2
34172: EQUAL
34173: AND
34174: IFFALSE 34339
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34176: LD_INT 22
34178: PUSH
34179: LD_VAR 0 16
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: LD_INT 35
34193: PUSH
34194: LD_INT 11
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 35
34203: PUSH
34204: LD_INT 30
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 91
34218: PUSH
34219: LD_VAR 0 1
34223: PUSH
34224: LD_INT 18
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PPUSH
34237: CALL_OW 69
34241: NOT
34242: PUSH
34243: LD_INT 22
34245: PUSH
34246: LD_VAR 0 16
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 30
34260: PUSH
34261: LD_INT 32
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 30
34270: PUSH
34271: LD_INT 33
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 91
34285: PUSH
34286: LD_VAR 0 1
34290: PUSH
34291: LD_INT 12
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: PPUSH
34307: CALL_OW 69
34311: PUSH
34312: LD_INT 2
34314: GREATER
34315: AND
34316: IFFALSE 34339
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34318: LD_ADDR_VAR 0 18
34322: PUSH
34323: LD_INT 11
34325: PUSH
34326: LD_INT 30
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_VAR 0 12
34337: ARRAY
34338: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34339: LD_VAR 0 18
34343: NOT
34344: PUSH
34345: LD_INT 40
34347: PPUSH
34348: LD_VAR 0 16
34352: PPUSH
34353: CALL_OW 321
34357: PUSH
34358: LD_INT 2
34360: EQUAL
34361: AND
34362: PUSH
34363: LD_INT 7
34365: PUSH
34366: LD_VAR 0 5
34370: IN
34371: PUSH
34372: LD_INT 28
34374: PUSH
34375: LD_VAR 0 5
34379: IN
34380: OR
34381: PUSH
34382: LD_INT 45
34384: PUSH
34385: LD_VAR 0 5
34389: IN
34390: OR
34391: AND
34392: IFFALSE 34646
// begin hex := GetHexInfo ( x , y ) ;
34394: LD_ADDR_VAR 0 4
34398: PUSH
34399: LD_VAR 0 10
34403: PPUSH
34404: LD_VAR 0 11
34408: PPUSH
34409: CALL_OW 546
34413: ST_TO_ADDR
// if hex [ 1 ] then
34414: LD_VAR 0 4
34418: PUSH
34419: LD_INT 1
34421: ARRAY
34422: IFFALSE 34426
// exit ;
34424: GO 34829
// height := hex [ 2 ] ;
34426: LD_ADDR_VAR 0 15
34430: PUSH
34431: LD_VAR 0 4
34435: PUSH
34436: LD_INT 2
34438: ARRAY
34439: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34440: LD_ADDR_VAR 0 14
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: LD_INT 5
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: ST_TO_ADDR
// for i in tmp do
34463: LD_ADDR_VAR 0 8
34467: PUSH
34468: LD_VAR 0 14
34472: PUSH
34473: FOR_IN
34474: IFFALSE 34644
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_VAR 0 10
34485: PPUSH
34486: LD_VAR 0 8
34490: PPUSH
34491: LD_INT 5
34493: PPUSH
34494: CALL_OW 272
34498: PUSH
34499: LD_VAR 0 11
34503: PPUSH
34504: LD_VAR 0 8
34508: PPUSH
34509: LD_INT 5
34511: PPUSH
34512: CALL_OW 273
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34521: LD_VAR 0 9
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: LD_VAR 0 9
34534: PUSH
34535: LD_INT 2
34537: ARRAY
34538: PPUSH
34539: CALL_OW 488
34543: IFFALSE 34642
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34545: LD_ADDR_VAR 0 4
34549: PUSH
34550: LD_VAR 0 9
34554: PUSH
34555: LD_INT 1
34557: ARRAY
34558: PPUSH
34559: LD_VAR 0 9
34563: PUSH
34564: LD_INT 2
34566: ARRAY
34567: PPUSH
34568: CALL_OW 546
34572: ST_TO_ADDR
// if hex [ 1 ] then
34573: LD_VAR 0 4
34577: PUSH
34578: LD_INT 1
34580: ARRAY
34581: IFFALSE 34585
// continue ;
34583: GO 34473
// h := hex [ 2 ] ;
34585: LD_ADDR_VAR 0 13
34589: PUSH
34590: LD_VAR 0 4
34594: PUSH
34595: LD_INT 2
34597: ARRAY
34598: ST_TO_ADDR
// if h + 7 < height then
34599: LD_VAR 0 13
34603: PUSH
34604: LD_INT 7
34606: PLUS
34607: PUSH
34608: LD_VAR 0 15
34612: LESS
34613: IFFALSE 34642
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34615: LD_ADDR_VAR 0 18
34619: PUSH
34620: LD_INT 7
34622: PUSH
34623: LD_INT 28
34625: PUSH
34626: LD_INT 45
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: PUSH
34634: LD_VAR 0 12
34638: ARRAY
34639: ST_TO_ADDR
// break ;
34640: GO 34644
// end ; end ; end ;
34642: GO 34473
34644: POP
34645: POP
// end ; if not weapon then
34646: LD_VAR 0 18
34650: NOT
34651: IFFALSE 34711
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34653: LD_ADDR_VAR 0 5
34657: PUSH
34658: LD_VAR 0 5
34662: PUSH
34663: LD_INT 11
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: LD_INT 49
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: DIFF
34677: ST_TO_ADDR
// if not list then
34678: LD_VAR 0 5
34682: NOT
34683: IFFALSE 34687
// exit ;
34685: GO 34829
// weapon := list [ rand ( 1 , list ) ] ;
34687: LD_ADDR_VAR 0 18
34691: PUSH
34692: LD_VAR 0 5
34696: PUSH
34697: LD_INT 1
34699: PPUSH
34700: LD_VAR 0 5
34704: PPUSH
34705: CALL_OW 12
34709: ARRAY
34710: ST_TO_ADDR
// end ; if weapon then
34711: LD_VAR 0 18
34715: IFFALSE 34829
// begin tmp := CostOfWeapon ( weapon ) ;
34717: LD_ADDR_VAR 0 14
34721: PUSH
34722: LD_VAR 0 18
34726: PPUSH
34727: CALL_OW 451
34731: ST_TO_ADDR
// j := GetBase ( tower ) ;
34732: LD_ADDR_VAR 0 9
34736: PUSH
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL_OW 274
34746: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34747: LD_VAR 0 9
34751: PPUSH
34752: LD_INT 1
34754: PPUSH
34755: CALL_OW 275
34759: PUSH
34760: LD_VAR 0 14
34764: PUSH
34765: LD_INT 1
34767: ARRAY
34768: GREATEREQUAL
34769: PUSH
34770: LD_VAR 0 9
34774: PPUSH
34775: LD_INT 2
34777: PPUSH
34778: CALL_OW 275
34782: PUSH
34783: LD_VAR 0 14
34787: PUSH
34788: LD_INT 2
34790: ARRAY
34791: GREATEREQUAL
34792: AND
34793: PUSH
34794: LD_VAR 0 9
34798: PPUSH
34799: LD_INT 3
34801: PPUSH
34802: CALL_OW 275
34806: PUSH
34807: LD_VAR 0 14
34811: PUSH
34812: LD_INT 3
34814: ARRAY
34815: GREATEREQUAL
34816: AND
34817: IFFALSE 34829
// result := weapon ;
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_VAR 0 18
34828: ST_TO_ADDR
// end ; end ;
34829: LD_VAR 0 3
34833: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34834: LD_INT 0
34836: PPUSH
34837: PPUSH
// result := true ;
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 1
34845: ST_TO_ADDR
// if array1 = array2 then
34846: LD_VAR 0 1
34850: PUSH
34851: LD_VAR 0 2
34855: EQUAL
34856: IFFALSE 34916
// begin for i = 1 to array1 do
34858: LD_ADDR_VAR 0 4
34862: PUSH
34863: DOUBLE
34864: LD_INT 1
34866: DEC
34867: ST_TO_ADDR
34868: LD_VAR 0 1
34872: PUSH
34873: FOR_TO
34874: IFFALSE 34912
// if array1 [ i ] <> array2 [ i ] then
34876: LD_VAR 0 1
34880: PUSH
34881: LD_VAR 0 4
34885: ARRAY
34886: PUSH
34887: LD_VAR 0 2
34891: PUSH
34892: LD_VAR 0 4
34896: ARRAY
34897: NONEQUAL
34898: IFFALSE 34910
// begin result := false ;
34900: LD_ADDR_VAR 0 3
34904: PUSH
34905: LD_INT 0
34907: ST_TO_ADDR
// break ;
34908: GO 34912
// end ;
34910: GO 34873
34912: POP
34913: POP
// end else
34914: GO 34924
// result := false ;
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_INT 0
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 3
34928: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
// if not array1 or not array2 then
34933: LD_VAR 0 1
34937: NOT
34938: PUSH
34939: LD_VAR 0 2
34943: NOT
34944: OR
34945: IFFALSE 34949
// exit ;
34947: GO 35013
// result := true ;
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_INT 1
34956: ST_TO_ADDR
// for i = 1 to array1 do
34957: LD_ADDR_VAR 0 4
34961: PUSH
34962: DOUBLE
34963: LD_INT 1
34965: DEC
34966: ST_TO_ADDR
34967: LD_VAR 0 1
34971: PUSH
34972: FOR_TO
34973: IFFALSE 35011
// if array1 [ i ] <> array2 [ i ] then
34975: LD_VAR 0 1
34979: PUSH
34980: LD_VAR 0 4
34984: ARRAY
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 4
34995: ARRAY
34996: NONEQUAL
34997: IFFALSE 35009
// begin result := false ;
34999: LD_ADDR_VAR 0 3
35003: PUSH
35004: LD_INT 0
35006: ST_TO_ADDR
// break ;
35007: GO 35011
// end ;
35009: GO 34972
35011: POP
35012: POP
// end ;
35013: LD_VAR 0 3
35017: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35018: LD_INT 0
35020: PPUSH
35021: PPUSH
35022: PPUSH
// pom := GetBase ( fac ) ;
35023: LD_ADDR_VAR 0 5
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 274
35037: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35038: LD_ADDR_VAR 0 4
35042: PUSH
35043: LD_VAR 0 2
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: PPUSH
35052: LD_VAR 0 2
35056: PUSH
35057: LD_INT 2
35059: ARRAY
35060: PPUSH
35061: LD_VAR 0 2
35065: PUSH
35066: LD_INT 3
35068: ARRAY
35069: PPUSH
35070: LD_VAR 0 2
35074: PUSH
35075: LD_INT 4
35077: ARRAY
35078: PPUSH
35079: CALL_OW 449
35083: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_VAR 0 5
35093: PPUSH
35094: LD_INT 1
35096: PPUSH
35097: CALL_OW 275
35101: PUSH
35102: LD_VAR 0 4
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: GREATEREQUAL
35111: PUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: LD_INT 2
35119: PPUSH
35120: CALL_OW 275
35124: PUSH
35125: LD_VAR 0 4
35129: PUSH
35130: LD_INT 2
35132: ARRAY
35133: GREATEREQUAL
35134: AND
35135: PUSH
35136: LD_VAR 0 5
35140: PPUSH
35141: LD_INT 3
35143: PPUSH
35144: CALL_OW 275
35148: PUSH
35149: LD_VAR 0 4
35153: PUSH
35154: LD_INT 3
35156: ARRAY
35157: GREATEREQUAL
35158: AND
35159: ST_TO_ADDR
// end ;
35160: LD_VAR 0 3
35164: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35165: LD_INT 0
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
// pom := GetBase ( building ) ;
35171: LD_ADDR_VAR 0 3
35175: PUSH
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL_OW 274
35185: ST_TO_ADDR
// if not pom then
35186: LD_VAR 0 3
35190: NOT
35191: IFFALSE 35195
// exit ;
35193: GO 35365
// btype := GetBType ( building ) ;
35195: LD_ADDR_VAR 0 5
35199: PUSH
35200: LD_VAR 0 1
35204: PPUSH
35205: CALL_OW 266
35209: ST_TO_ADDR
// if btype = b_armoury then
35210: LD_VAR 0 5
35214: PUSH
35215: LD_INT 4
35217: EQUAL
35218: IFFALSE 35228
// btype := b_barracks ;
35220: LD_ADDR_VAR 0 5
35224: PUSH
35225: LD_INT 5
35227: ST_TO_ADDR
// if btype = b_depot then
35228: LD_VAR 0 5
35232: PUSH
35233: LD_INT 0
35235: EQUAL
35236: IFFALSE 35246
// btype := b_warehouse ;
35238: LD_ADDR_VAR 0 5
35242: PUSH
35243: LD_INT 1
35245: ST_TO_ADDR
// if btype = b_workshop then
35246: LD_VAR 0 5
35250: PUSH
35251: LD_INT 2
35253: EQUAL
35254: IFFALSE 35264
// btype := b_factory ;
35256: LD_ADDR_VAR 0 5
35260: PUSH
35261: LD_INT 3
35263: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35264: LD_ADDR_VAR 0 4
35268: PUSH
35269: LD_VAR 0 5
35273: PPUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 248
35283: PPUSH
35284: CALL_OW 450
35288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35289: LD_ADDR_VAR 0 2
35293: PUSH
35294: LD_VAR 0 3
35298: PPUSH
35299: LD_INT 1
35301: PPUSH
35302: CALL_OW 275
35306: PUSH
35307: LD_VAR 0 4
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: GREATEREQUAL
35316: PUSH
35317: LD_VAR 0 3
35321: PPUSH
35322: LD_INT 2
35324: PPUSH
35325: CALL_OW 275
35329: PUSH
35330: LD_VAR 0 4
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: GREATEREQUAL
35339: AND
35340: PUSH
35341: LD_VAR 0 3
35345: PPUSH
35346: LD_INT 3
35348: PPUSH
35349: CALL_OW 275
35353: PUSH
35354: LD_VAR 0 4
35358: PUSH
35359: LD_INT 3
35361: ARRAY
35362: GREATEREQUAL
35363: AND
35364: ST_TO_ADDR
// end ;
35365: LD_VAR 0 2
35369: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35370: LD_INT 0
35372: PPUSH
35373: PPUSH
35374: PPUSH
// pom := GetBase ( building ) ;
35375: LD_ADDR_VAR 0 4
35379: PUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 274
35389: ST_TO_ADDR
// if not pom then
35390: LD_VAR 0 4
35394: NOT
35395: IFFALSE 35399
// exit ;
35397: GO 35500
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35399: LD_ADDR_VAR 0 5
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 248
35418: PPUSH
35419: CALL_OW 450
35423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_VAR 0 4
35433: PPUSH
35434: LD_INT 1
35436: PPUSH
35437: CALL_OW 275
35441: PUSH
35442: LD_VAR 0 5
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: GREATEREQUAL
35451: PUSH
35452: LD_VAR 0 4
35456: PPUSH
35457: LD_INT 2
35459: PPUSH
35460: CALL_OW 275
35464: PUSH
35465: LD_VAR 0 5
35469: PUSH
35470: LD_INT 2
35472: ARRAY
35473: GREATEREQUAL
35474: AND
35475: PUSH
35476: LD_VAR 0 4
35480: PPUSH
35481: LD_INT 3
35483: PPUSH
35484: CALL_OW 275
35488: PUSH
35489: LD_VAR 0 5
35493: PUSH
35494: LD_INT 3
35496: ARRAY
35497: GREATEREQUAL
35498: AND
35499: ST_TO_ADDR
// end ;
35500: LD_VAR 0 3
35504: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35505: LD_INT 0
35507: PPUSH
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
// result := false ;
35518: LD_ADDR_VAR 0 8
35522: PUSH
35523: LD_INT 0
35525: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35526: LD_VAR 0 5
35530: NOT
35531: PUSH
35532: LD_VAR 0 1
35536: NOT
35537: OR
35538: PUSH
35539: LD_VAR 0 2
35543: NOT
35544: OR
35545: PUSH
35546: LD_VAR 0 3
35550: NOT
35551: OR
35552: IFFALSE 35556
// exit ;
35554: GO 36370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35556: LD_ADDR_VAR 0 14
35560: PUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: LD_VAR 0 2
35570: PPUSH
35571: LD_VAR 0 3
35575: PPUSH
35576: LD_VAR 0 4
35580: PPUSH
35581: LD_VAR 0 5
35585: PUSH
35586: LD_INT 1
35588: ARRAY
35589: PPUSH
35590: CALL_OW 248
35594: PPUSH
35595: LD_INT 0
35597: PPUSH
35598: CALL 37603 0 6
35602: ST_TO_ADDR
// if not hexes then
35603: LD_VAR 0 14
35607: NOT
35608: IFFALSE 35612
// exit ;
35610: GO 36370
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35612: LD_ADDR_VAR 0 17
35616: PUSH
35617: LD_VAR 0 5
35621: PPUSH
35622: LD_INT 22
35624: PUSH
35625: LD_VAR 0 13
35629: PPUSH
35630: CALL_OW 255
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 30
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 30
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PPUSH
35671: CALL_OW 72
35675: ST_TO_ADDR
// for i = 1 to hexes do
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: DOUBLE
35682: LD_INT 1
35684: DEC
35685: ST_TO_ADDR
35686: LD_VAR 0 14
35690: PUSH
35691: FOR_TO
35692: IFFALSE 36368
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35694: LD_ADDR_VAR 0 13
35698: PUSH
35699: LD_VAR 0 14
35703: PUSH
35704: LD_VAR 0 9
35708: ARRAY
35709: PUSH
35710: LD_INT 1
35712: ARRAY
35713: PPUSH
35714: LD_VAR 0 14
35718: PUSH
35719: LD_VAR 0 9
35723: ARRAY
35724: PUSH
35725: LD_INT 2
35727: ARRAY
35728: PPUSH
35729: CALL_OW 428
35733: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35734: LD_VAR 0 14
35738: PUSH
35739: LD_VAR 0 9
35743: ARRAY
35744: PUSH
35745: LD_INT 1
35747: ARRAY
35748: PPUSH
35749: LD_VAR 0 14
35753: PUSH
35754: LD_VAR 0 9
35758: ARRAY
35759: PUSH
35760: LD_INT 2
35762: ARRAY
35763: PPUSH
35764: CALL_OW 351
35768: PUSH
35769: LD_VAR 0 14
35773: PUSH
35774: LD_VAR 0 9
35778: ARRAY
35779: PUSH
35780: LD_INT 1
35782: ARRAY
35783: PPUSH
35784: LD_VAR 0 14
35788: PUSH
35789: LD_VAR 0 9
35793: ARRAY
35794: PUSH
35795: LD_INT 2
35797: ARRAY
35798: PPUSH
35799: CALL_OW 488
35803: NOT
35804: OR
35805: PUSH
35806: LD_VAR 0 13
35810: PPUSH
35811: CALL_OW 247
35815: PUSH
35816: LD_INT 3
35818: EQUAL
35819: OR
35820: IFFALSE 35826
// exit ;
35822: POP
35823: POP
35824: GO 36370
// if not tmp then
35826: LD_VAR 0 13
35830: NOT
35831: IFFALSE 35835
// continue ;
35833: GO 35691
// result := true ;
35835: LD_ADDR_VAR 0 8
35839: PUSH
35840: LD_INT 1
35842: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35843: LD_VAR 0 6
35847: PUSH
35848: LD_VAR 0 13
35852: PPUSH
35853: CALL_OW 247
35857: PUSH
35858: LD_INT 2
35860: EQUAL
35861: AND
35862: PUSH
35863: LD_VAR 0 13
35867: PPUSH
35868: CALL_OW 263
35872: PUSH
35873: LD_INT 1
35875: EQUAL
35876: AND
35877: IFFALSE 36041
// begin if IsDrivenBy ( tmp ) then
35879: LD_VAR 0 13
35883: PPUSH
35884: CALL_OW 311
35888: IFFALSE 35892
// continue ;
35890: GO 35691
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35892: LD_VAR 0 6
35896: PPUSH
35897: LD_INT 3
35899: PUSH
35900: LD_INT 60
35902: PUSH
35903: EMPTY
35904: LIST
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 55
35915: PUSH
35916: EMPTY
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 72
35931: IFFALSE 36039
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35933: LD_ADDR_VAR 0 18
35937: PUSH
35938: LD_VAR 0 6
35942: PPUSH
35943: LD_INT 3
35945: PUSH
35946: LD_INT 60
35948: PUSH
35949: EMPTY
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: LD_INT 55
35961: PUSH
35962: EMPTY
35963: LIST
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PPUSH
35973: CALL_OW 72
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: ST_TO_ADDR
// if IsInUnit ( driver ) then
35982: LD_VAR 0 18
35986: PPUSH
35987: CALL_OW 310
35991: IFFALSE 36002
// ComExit ( driver ) ;
35993: LD_VAR 0 18
35997: PPUSH
35998: CALL 61383 0 1
// AddComEnterUnit ( driver , tmp ) ;
36002: LD_VAR 0 18
36006: PPUSH
36007: LD_VAR 0 13
36011: PPUSH
36012: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36016: LD_VAR 0 18
36020: PPUSH
36021: LD_VAR 0 7
36025: PPUSH
36026: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36030: LD_VAR 0 18
36034: PPUSH
36035: CALL_OW 181
// end ; continue ;
36039: GO 35691
// end ; if not cleaners or not tmp in cleaners then
36041: LD_VAR 0 6
36045: NOT
36046: PUSH
36047: LD_VAR 0 13
36051: PUSH
36052: LD_VAR 0 6
36056: IN
36057: NOT
36058: OR
36059: IFFALSE 36366
// begin if dep then
36061: LD_VAR 0 17
36065: IFFALSE 36201
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36067: LD_ADDR_VAR 0 16
36071: PUSH
36072: LD_VAR 0 17
36076: PUSH
36077: LD_INT 1
36079: ARRAY
36080: PPUSH
36081: CALL_OW 250
36085: PPUSH
36086: LD_VAR 0 17
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: CALL_OW 254
36099: PPUSH
36100: LD_INT 5
36102: PPUSH
36103: CALL_OW 272
36107: PUSH
36108: LD_VAR 0 17
36112: PUSH
36113: LD_INT 1
36115: ARRAY
36116: PPUSH
36117: CALL_OW 251
36121: PPUSH
36122: LD_VAR 0 17
36126: PUSH
36127: LD_INT 1
36129: ARRAY
36130: PPUSH
36131: CALL_OW 254
36135: PPUSH
36136: LD_INT 5
36138: PPUSH
36139: CALL_OW 273
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36148: LD_VAR 0 16
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 16
36161: PUSH
36162: LD_INT 2
36164: ARRAY
36165: PPUSH
36166: CALL_OW 488
36170: IFFALSE 36201
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36172: LD_VAR 0 13
36176: PPUSH
36177: LD_VAR 0 16
36181: PUSH
36182: LD_INT 1
36184: ARRAY
36185: PPUSH
36186: LD_VAR 0 16
36190: PUSH
36191: LD_INT 2
36193: ARRAY
36194: PPUSH
36195: CALL_OW 111
// continue ;
36199: GO 35691
// end ; end ; r := GetDir ( tmp ) ;
36201: LD_ADDR_VAR 0 15
36205: PUSH
36206: LD_VAR 0 13
36210: PPUSH
36211: CALL_OW 254
36215: ST_TO_ADDR
// if r = 5 then
36216: LD_VAR 0 15
36220: PUSH
36221: LD_INT 5
36223: EQUAL
36224: IFFALSE 36234
// r := 0 ;
36226: LD_ADDR_VAR 0 15
36230: PUSH
36231: LD_INT 0
36233: ST_TO_ADDR
// for j = r to 5 do
36234: LD_ADDR_VAR 0 10
36238: PUSH
36239: DOUBLE
36240: LD_VAR 0 15
36244: DEC
36245: ST_TO_ADDR
36246: LD_INT 5
36248: PUSH
36249: FOR_TO
36250: IFFALSE 36364
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36252: LD_ADDR_VAR 0 11
36256: PUSH
36257: LD_VAR 0 13
36261: PPUSH
36262: CALL_OW 250
36266: PPUSH
36267: LD_VAR 0 10
36271: PPUSH
36272: LD_INT 2
36274: PPUSH
36275: CALL_OW 272
36279: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36280: LD_ADDR_VAR 0 12
36284: PUSH
36285: LD_VAR 0 13
36289: PPUSH
36290: CALL_OW 251
36294: PPUSH
36295: LD_VAR 0 10
36299: PPUSH
36300: LD_INT 2
36302: PPUSH
36303: CALL_OW 273
36307: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36308: LD_VAR 0 11
36312: PPUSH
36313: LD_VAR 0 12
36317: PPUSH
36318: CALL_OW 488
36322: PUSH
36323: LD_VAR 0 11
36327: PPUSH
36328: LD_VAR 0 12
36332: PPUSH
36333: CALL_OW 428
36337: NOT
36338: AND
36339: IFFALSE 36362
// begin ComMoveXY ( tmp , _x , _y ) ;
36341: LD_VAR 0 13
36345: PPUSH
36346: LD_VAR 0 11
36350: PPUSH
36351: LD_VAR 0 12
36355: PPUSH
36356: CALL_OW 111
// break ;
36360: GO 36364
// end ; end ;
36362: GO 36249
36364: POP
36365: POP
// end ; end ;
36366: GO 35691
36368: POP
36369: POP
// end ;
36370: LD_VAR 0 8
36374: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36375: LD_INT 0
36377: PPUSH
// result := true ;
36378: LD_ADDR_VAR 0 3
36382: PUSH
36383: LD_INT 1
36385: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36386: LD_VAR 0 2
36390: PUSH
36391: LD_INT 24
36393: DOUBLE
36394: EQUAL
36395: IFTRUE 36405
36397: LD_INT 33
36399: DOUBLE
36400: EQUAL
36401: IFTRUE 36405
36403: GO 36430
36405: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_INT 32
36413: PPUSH
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 321
36423: PUSH
36424: LD_INT 2
36426: EQUAL
36427: ST_TO_ADDR
36428: GO 36746
36430: LD_INT 20
36432: DOUBLE
36433: EQUAL
36434: IFTRUE 36438
36436: GO 36463
36438: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_INT 6
36446: PPUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 321
36456: PUSH
36457: LD_INT 2
36459: EQUAL
36460: ST_TO_ADDR
36461: GO 36746
36463: LD_INT 22
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36477
36469: LD_INT 36
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36477
36475: GO 36502
36477: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_INT 15
36485: PPUSH
36486: LD_VAR 0 1
36490: PPUSH
36491: CALL_OW 321
36495: PUSH
36496: LD_INT 2
36498: EQUAL
36499: ST_TO_ADDR
36500: GO 36746
36502: LD_INT 30
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36535
36510: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 20
36518: PPUSH
36519: LD_VAR 0 1
36523: PPUSH
36524: CALL_OW 321
36528: PUSH
36529: LD_INT 2
36531: EQUAL
36532: ST_TO_ADDR
36533: GO 36746
36535: LD_INT 28
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36549
36541: LD_INT 21
36543: DOUBLE
36544: EQUAL
36545: IFTRUE 36549
36547: GO 36574
36549: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36550: LD_ADDR_VAR 0 3
36554: PUSH
36555: LD_INT 21
36557: PPUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 321
36567: PUSH
36568: LD_INT 2
36570: EQUAL
36571: ST_TO_ADDR
36572: GO 36746
36574: LD_INT 16
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36582
36580: GO 36607
36582: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36583: LD_ADDR_VAR 0 3
36587: PUSH
36588: LD_INT 84
36590: PPUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 321
36600: PUSH
36601: LD_INT 2
36603: EQUAL
36604: ST_TO_ADDR
36605: GO 36746
36607: LD_INT 19
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36621
36613: LD_INT 23
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36621
36619: GO 36646
36621: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36622: LD_ADDR_VAR 0 3
36626: PUSH
36627: LD_INT 83
36629: PPUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 321
36639: PUSH
36640: LD_INT 2
36642: EQUAL
36643: ST_TO_ADDR
36644: GO 36746
36646: LD_INT 17
36648: DOUBLE
36649: EQUAL
36650: IFTRUE 36654
36652: GO 36679
36654: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36655: LD_ADDR_VAR 0 3
36659: PUSH
36660: LD_INT 39
36662: PPUSH
36663: LD_VAR 0 1
36667: PPUSH
36668: CALL_OW 321
36672: PUSH
36673: LD_INT 2
36675: EQUAL
36676: ST_TO_ADDR
36677: GO 36746
36679: LD_INT 18
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 36712
36687: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: LD_INT 40
36695: PPUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 321
36705: PUSH
36706: LD_INT 2
36708: EQUAL
36709: ST_TO_ADDR
36710: GO 36746
36712: LD_INT 27
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36745
36720: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36721: LD_ADDR_VAR 0 3
36725: PUSH
36726: LD_INT 35
36728: PPUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 321
36738: PUSH
36739: LD_INT 2
36741: EQUAL
36742: ST_TO_ADDR
36743: GO 36746
36745: POP
// end ;
36746: LD_VAR 0 3
36750: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
// result := false ;
36764: LD_ADDR_VAR 0 6
36768: PUSH
36769: LD_INT 0
36771: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36772: LD_VAR 0 1
36776: NOT
36777: PUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 266
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: IN
36798: NOT
36799: OR
36800: PUSH
36801: LD_VAR 0 2
36805: NOT
36806: OR
36807: PUSH
36808: LD_VAR 0 5
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 3
36824: PUSH
36825: LD_INT 4
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: IN
36839: NOT
36840: OR
36841: PUSH
36842: LD_VAR 0 3
36846: PPUSH
36847: LD_VAR 0 4
36851: PPUSH
36852: CALL_OW 488
36856: NOT
36857: OR
36858: IFFALSE 36862
// exit ;
36860: GO 37598
// side := GetSide ( depot ) ;
36862: LD_ADDR_VAR 0 9
36866: PUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 255
36876: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36877: LD_VAR 0 9
36881: PPUSH
36882: LD_VAR 0 2
36886: PPUSH
36887: CALL 36375 0 2
36891: NOT
36892: IFFALSE 36896
// exit ;
36894: GO 37598
// pom := GetBase ( depot ) ;
36896: LD_ADDR_VAR 0 10
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 274
36910: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36911: LD_ADDR_VAR 0 11
36915: PUSH
36916: LD_VAR 0 2
36920: PPUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 248
36930: PPUSH
36931: CALL_OW 450
36935: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36936: LD_VAR 0 10
36940: PPUSH
36941: LD_INT 1
36943: PPUSH
36944: CALL_OW 275
36948: PUSH
36949: LD_VAR 0 11
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: GREATEREQUAL
36958: PUSH
36959: LD_VAR 0 10
36963: PPUSH
36964: LD_INT 2
36966: PPUSH
36967: CALL_OW 275
36971: PUSH
36972: LD_VAR 0 11
36976: PUSH
36977: LD_INT 2
36979: ARRAY
36980: GREATEREQUAL
36981: AND
36982: PUSH
36983: LD_VAR 0 10
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 275
36995: PUSH
36996: LD_VAR 0 11
37000: PUSH
37001: LD_INT 3
37003: ARRAY
37004: GREATEREQUAL
37005: AND
37006: NOT
37007: IFFALSE 37011
// exit ;
37009: GO 37598
// if GetBType ( depot ) = b_depot then
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 266
37020: PUSH
37021: LD_INT 0
37023: EQUAL
37024: IFFALSE 37036
// dist := 28 else
37026: LD_ADDR_VAR 0 14
37030: PUSH
37031: LD_INT 28
37033: ST_TO_ADDR
37034: GO 37044
// dist := 36 ;
37036: LD_ADDR_VAR 0 14
37040: PUSH
37041: LD_INT 36
37043: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37044: LD_VAR 0 1
37048: PPUSH
37049: LD_VAR 0 3
37053: PPUSH
37054: LD_VAR 0 4
37058: PPUSH
37059: CALL_OW 297
37063: PUSH
37064: LD_VAR 0 14
37068: GREATER
37069: IFFALSE 37073
// exit ;
37071: GO 37598
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37073: LD_ADDR_VAR 0 12
37077: PUSH
37078: LD_VAR 0 2
37082: PPUSH
37083: LD_VAR 0 3
37087: PPUSH
37088: LD_VAR 0 4
37092: PPUSH
37093: LD_VAR 0 5
37097: PPUSH
37098: LD_VAR 0 1
37102: PPUSH
37103: CALL_OW 248
37107: PPUSH
37108: LD_INT 0
37110: PPUSH
37111: CALL 37603 0 6
37115: ST_TO_ADDR
// if not hexes then
37116: LD_VAR 0 12
37120: NOT
37121: IFFALSE 37125
// exit ;
37123: GO 37598
// hex := GetHexInfo ( x , y ) ;
37125: LD_ADDR_VAR 0 15
37129: PUSH
37130: LD_VAR 0 3
37134: PPUSH
37135: LD_VAR 0 4
37139: PPUSH
37140: CALL_OW 546
37144: ST_TO_ADDR
// if hex [ 1 ] then
37145: LD_VAR 0 15
37149: PUSH
37150: LD_INT 1
37152: ARRAY
37153: IFFALSE 37157
// exit ;
37155: GO 37598
// height := hex [ 2 ] ;
37157: LD_ADDR_VAR 0 13
37161: PUSH
37162: LD_VAR 0 15
37166: PUSH
37167: LD_INT 2
37169: ARRAY
37170: ST_TO_ADDR
// for i = 1 to hexes do
37171: LD_ADDR_VAR 0 7
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_VAR 0 12
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37517
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37189: LD_VAR 0 12
37193: PUSH
37194: LD_VAR 0 7
37198: ARRAY
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: PPUSH
37204: LD_VAR 0 12
37208: PUSH
37209: LD_VAR 0 7
37213: ARRAY
37214: PUSH
37215: LD_INT 2
37217: ARRAY
37218: PPUSH
37219: CALL_OW 488
37223: NOT
37224: PUSH
37225: LD_VAR 0 12
37229: PUSH
37230: LD_VAR 0 7
37234: ARRAY
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PPUSH
37240: LD_VAR 0 12
37244: PUSH
37245: LD_VAR 0 7
37249: ARRAY
37250: PUSH
37251: LD_INT 2
37253: ARRAY
37254: PPUSH
37255: CALL_OW 428
37259: PUSH
37260: LD_INT 0
37262: GREATER
37263: OR
37264: PUSH
37265: LD_VAR 0 12
37269: PUSH
37270: LD_VAR 0 7
37274: ARRAY
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PPUSH
37280: LD_VAR 0 12
37284: PUSH
37285: LD_VAR 0 7
37289: ARRAY
37290: PUSH
37291: LD_INT 2
37293: ARRAY
37294: PPUSH
37295: CALL_OW 351
37299: OR
37300: IFFALSE 37306
// exit ;
37302: POP
37303: POP
37304: GO 37598
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37306: LD_ADDR_VAR 0 8
37310: PUSH
37311: LD_VAR 0 12
37315: PUSH
37316: LD_VAR 0 7
37320: ARRAY
37321: PUSH
37322: LD_INT 1
37324: ARRAY
37325: PPUSH
37326: LD_VAR 0 12
37330: PUSH
37331: LD_VAR 0 7
37335: ARRAY
37336: PUSH
37337: LD_INT 2
37339: ARRAY
37340: PPUSH
37341: CALL_OW 546
37345: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37346: LD_VAR 0 8
37350: PUSH
37351: LD_INT 1
37353: ARRAY
37354: PUSH
37355: LD_VAR 0 8
37359: PUSH
37360: LD_INT 2
37362: ARRAY
37363: PUSH
37364: LD_VAR 0 13
37368: PUSH
37369: LD_INT 2
37371: PLUS
37372: GREATER
37373: OR
37374: PUSH
37375: LD_VAR 0 8
37379: PUSH
37380: LD_INT 2
37382: ARRAY
37383: PUSH
37384: LD_VAR 0 13
37388: PUSH
37389: LD_INT 2
37391: MINUS
37392: LESS
37393: OR
37394: PUSH
37395: LD_VAR 0 8
37399: PUSH
37400: LD_INT 3
37402: ARRAY
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 8
37409: PUSH
37410: LD_INT 9
37412: PUSH
37413: LD_INT 10
37415: PUSH
37416: LD_INT 11
37418: PUSH
37419: LD_INT 12
37421: PUSH
37422: LD_INT 13
37424: PUSH
37425: LD_INT 16
37427: PUSH
37428: LD_INT 17
37430: PUSH
37431: LD_INT 18
37433: PUSH
37434: LD_INT 19
37436: PUSH
37437: LD_INT 20
37439: PUSH
37440: LD_INT 21
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: IN
37458: NOT
37459: OR
37460: PUSH
37461: LD_VAR 0 8
37465: PUSH
37466: LD_INT 5
37468: ARRAY
37469: NOT
37470: OR
37471: PUSH
37472: LD_VAR 0 8
37476: PUSH
37477: LD_INT 6
37479: ARRAY
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 7
37489: PUSH
37490: LD_INT 9
37492: PUSH
37493: LD_INT 10
37495: PUSH
37496: LD_INT 11
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: IN
37507: NOT
37508: OR
37509: IFFALSE 37515
// exit ;
37511: POP
37512: POP
37513: GO 37598
// end ;
37515: GO 37186
37517: POP
37518: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37519: LD_VAR 0 9
37523: PPUSH
37524: LD_VAR 0 3
37528: PPUSH
37529: LD_VAR 0 4
37533: PPUSH
37534: LD_INT 20
37536: PPUSH
37537: CALL 29550 0 4
37541: PUSH
37542: LD_INT 4
37544: ARRAY
37545: IFFALSE 37549
// exit ;
37547: GO 37598
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37549: LD_VAR 0 2
37553: PUSH
37554: LD_INT 29
37556: PUSH
37557: LD_INT 30
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: IN
37564: PUSH
37565: LD_VAR 0 3
37569: PPUSH
37570: LD_VAR 0 4
37574: PPUSH
37575: LD_VAR 0 9
37579: PPUSH
37580: CALL_OW 440
37584: NOT
37585: AND
37586: IFFALSE 37590
// exit ;
37588: GO 37598
// result := true ;
37590: LD_ADDR_VAR 0 6
37594: PUSH
37595: LD_INT 1
37597: ST_TO_ADDR
// end ;
37598: LD_VAR 0 6
37602: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37603: LD_INT 0
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
37659: PPUSH
37660: PPUSH
37661: PPUSH
37662: PPUSH
// result = [ ] ;
37663: LD_ADDR_VAR 0 7
37667: PUSH
37668: EMPTY
37669: ST_TO_ADDR
// temp_list = [ ] ;
37670: LD_ADDR_VAR 0 9
37674: PUSH
37675: EMPTY
37676: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37677: LD_VAR 0 4
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 4
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: IN
37708: NOT
37709: PUSH
37710: LD_VAR 0 1
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: IN
37725: PUSH
37726: LD_VAR 0 5
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: IN
37745: NOT
37746: AND
37747: OR
37748: IFFALSE 37752
// exit ;
37750: GO 56143
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37752: LD_VAR 0 1
37756: PUSH
37757: LD_INT 6
37759: PUSH
37760: LD_INT 7
37762: PUSH
37763: LD_INT 8
37765: PUSH
37766: LD_INT 13
37768: PUSH
37769: LD_INT 12
37771: PUSH
37772: LD_INT 15
37774: PUSH
37775: LD_INT 11
37777: PUSH
37778: LD_INT 14
37780: PUSH
37781: LD_INT 10
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: IN
37795: IFFALSE 37805
// btype = b_lab ;
37797: LD_ADDR_VAR 0 1
37801: PUSH
37802: LD_INT 6
37804: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37805: LD_VAR 0 6
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: IN
37824: NOT
37825: PUSH
37826: LD_VAR 0 1
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 6
37845: PUSH
37846: LD_INT 36
37848: PUSH
37849: LD_INT 4
37851: PUSH
37852: LD_INT 5
37854: PUSH
37855: LD_INT 31
37857: PUSH
37858: LD_INT 32
37860: PUSH
37861: LD_INT 33
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: IN
37877: NOT
37878: PUSH
37879: LD_VAR 0 6
37883: PUSH
37884: LD_INT 1
37886: EQUAL
37887: AND
37888: OR
37889: PUSH
37890: LD_VAR 0 1
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: IN
37905: NOT
37906: PUSH
37907: LD_VAR 0 6
37911: PUSH
37912: LD_INT 2
37914: EQUAL
37915: AND
37916: OR
37917: IFFALSE 37927
// mode = 0 ;
37919: LD_ADDR_VAR 0 6
37923: PUSH
37924: LD_INT 0
37926: ST_TO_ADDR
// case mode of 0 :
37927: LD_VAR 0 6
37931: PUSH
37932: LD_INT 0
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 49393
37940: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37941: LD_ADDR_VAR 0 11
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38134: LD_ADDR_VAR 0 12
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38330: LD_ADDR_VAR 0 13
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: LD_INT 2
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 2
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: NEG
38490: PUSH
38491: LD_INT 2
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: LD_INT 3
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38529: LD_ADDR_VAR 0 14
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38725: LD_ADDR_VAR 0 15
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38918: LD_ADDR_VAR 0 16
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39111: LD_ADDR_VAR 0 17
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39341: LD_ADDR_VAR 0 18
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39571: LD_ADDR_VAR 0 19
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39801: LD_ADDR_VAR 0 20
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40031: LD_ADDR_VAR 0 21
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40261: LD_ADDR_VAR 0 22
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40491: LD_ADDR_VAR 0 23
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: NEG
40703: PUSH
40704: LD_INT 3
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 3
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40771: LD_ADDR_VAR 0 24
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41047: LD_ADDR_VAR 0 25
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41321: LD_ADDR_VAR 0 26
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41597: LD_ADDR_VAR 0 27
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41877: LD_ADDR_VAR 0 28
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 3
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42159: LD_ADDR_VAR 0 29
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: LD_INT 3
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42438: LD_ADDR_VAR 0 30
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42716: LD_ADDR_VAR 0 31
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 3
42959: NEG
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42994: LD_ADDR_VAR 0 32
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 3
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43272: LD_ADDR_VAR 0 33
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43551: LD_ADDR_VAR 0 34
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 3
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43831: LD_ADDR_VAR 0 35
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43943: LD_ADDR_VAR 0 36
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44055: LD_ADDR_VAR 0 37
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44167: LD_ADDR_VAR 0 38
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44279: LD_ADDR_VAR 0 39
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44391: LD_ADDR_VAR 0 40
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44503: LD_ADDR_VAR 0 41
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 3
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 3
44812: NEG
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44853: LD_ADDR_VAR 0 42
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 3
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 3
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 3
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 3
45162: NEG
45163: PUSH
45164: LD_INT 3
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45203: LD_ADDR_VAR 0 43
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 3
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45551: LD_ADDR_VAR 0 44
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 3
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 3
45825: NEG
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 3
45860: NEG
45861: PUSH
45862: LD_INT 3
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45901: LD_ADDR_VAR 0 45
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: LD_INT 3
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46251: LD_ADDR_VAR 0 46
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46599: LD_ADDR_VAR 0 47
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46750: LD_ADDR_VAR 0 48
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46897: LD_ADDR_VAR 0 49
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47041: LD_ADDR_VAR 0 50
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47185: LD_ADDR_VAR 0 51
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 52
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47483: LD_ADDR_VAR 0 53
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47713: LD_ADDR_VAR 0 54
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47943: LD_ADDR_VAR 0 55
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48173: LD_ADDR_VAR 0 56
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48403: LD_ADDR_VAR 0 57
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48633: LD_ADDR_VAR 0 58
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48863: LD_ADDR_VAR 0 59
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48951: LD_ADDR_VAR 0 60
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49039: LD_ADDR_VAR 0 61
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49127: LD_ADDR_VAR 0 62
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49215: LD_ADDR_VAR 0 63
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49303: LD_ADDR_VAR 0 64
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// end ; 1 :
49391: GO 55288
49393: LD_INT 1
49395: DOUBLE
49396: EQUAL
49397: IFTRUE 49401
49399: GO 52024
49401: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49402: LD_ADDR_VAR 0 11
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49446: LD_ADDR_VAR 0 12
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49487: LD_ADDR_VAR 0 13
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49527: LD_ADDR_VAR 0 14
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49568: LD_ADDR_VAR 0 15
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49612: LD_ADDR_VAR 0 16
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49658: LD_ADDR_VAR 0 17
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49702: LD_ADDR_VAR 0 18
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49743: LD_ADDR_VAR 0 19
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49783: LD_ADDR_VAR 0 20
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49824: LD_ADDR_VAR 0 21
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49868: LD_ADDR_VAR 0 22
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49914: LD_ADDR_VAR 0 23
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 4
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49958: LD_ADDR_VAR 0 24
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49999: LD_ADDR_VAR 0 25
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: LD_INT 3
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: LD_INT 4
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50039: LD_ADDR_VAR 0 26
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 4
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50080: LD_ADDR_VAR 0 27
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50124: LD_ADDR_VAR 0 28
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: LD_INT 4
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 4
50155: NEG
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50170: LD_ADDR_VAR 0 29
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 4
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 4
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 5
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 5
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 4
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 6
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 6
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 5
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50325: LD_ADDR_VAR 0 30
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 4
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 4
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 5
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 5
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 5
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 6
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 6
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50468: LD_ADDR_VAR 0 31
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 4
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 4
50515: PUSH
50516: LD_INT 4
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: LD_INT 4
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 5
50535: PUSH
50536: LD_INT 4
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: LD_INT 5
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 4
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 6
50565: PUSH
50566: LD_INT 5
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 6
50575: PUSH
50576: LD_INT 6
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 5
50585: PUSH
50586: LD_INT 6
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50607: LD_ADDR_VAR 0 32
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 4
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 4
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 6
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 6
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 5
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50750: LD_ADDR_VAR 0 33
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 4
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 4
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 4
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 5
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 5
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 5
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 6
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 6
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50905: LD_ADDR_VAR 0 34
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 4
50960: NEG
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 4
50972: NEG
50973: PUSH
50974: LD_INT 4
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 4
50984: NEG
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 5
50996: NEG
50997: PUSH
50998: LD_INT 4
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 5
51008: NEG
51009: PUSH
51010: LD_INT 5
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 5
51020: NEG
51021: PUSH
51022: LD_INT 6
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 6
51032: NEG
51033: PUSH
51034: LD_INT 5
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 6
51044: NEG
51045: PUSH
51046: LD_INT 6
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51068: LD_ADDR_VAR 0 41
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51112: LD_ADDR_VAR 0 42
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51153: LD_ADDR_VAR 0 43
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51193: LD_ADDR_VAR 0 44
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51234: LD_ADDR_VAR 0 45
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51278: LD_ADDR_VAR 0 46
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51324: LD_ADDR_VAR 0 47
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51357: LD_ADDR_VAR 0 48
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51388: LD_ADDR_VAR 0 49
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51417: LD_ADDR_VAR 0 50
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51446: LD_ADDR_VAR 0 51
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51477: LD_ADDR_VAR 0 52
51481: PUSH
51482: LD_INT 3
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51510: LD_ADDR_VAR 0 53
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51554: LD_ADDR_VAR 0 54
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51595: LD_ADDR_VAR 0 55
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51635: LD_ADDR_VAR 0 56
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51676: LD_ADDR_VAR 0 57
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51720: LD_ADDR_VAR 0 58
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 3
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51766: LD_ADDR_VAR 0 59
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51810: LD_ADDR_VAR 0 60
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51851: LD_ADDR_VAR 0 61
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51891: LD_ADDR_VAR 0 62
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51932: LD_ADDR_VAR 0 63
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51976: LD_ADDR_VAR 0 64
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: ST_TO_ADDR
// end ; 2 :
52022: GO 55288
52024: LD_INT 2
52026: DOUBLE
52027: EQUAL
52028: IFTRUE 52032
52030: GO 55287
52032: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52033: LD_ADDR_VAR 0 29
52037: PUSH
52038: LD_INT 4
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 4
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 5
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 5
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: LD_INT 4
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: LD_INT 4
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 4
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 4
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 4
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 4
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 5
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 5
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 5
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 4
52418: NEG
52419: PUSH
52420: LD_INT 4
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 4
52430: NEG
52431: PUSH
52432: LD_INT 5
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 5
52478: NEG
52479: PUSH
52480: LD_INT 4
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 5
52490: NEG
52491: PUSH
52492: LD_INT 5
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 5
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 5
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52571: LD_ADDR_VAR 0 30
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 5
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 5
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: PUSH
52629: LD_INT 4
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 5
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: LD_INT 5
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 4
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 4
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 4
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 4
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 5
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: LD_INT 4
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 4
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 4
52935: NEG
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 4
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 4
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 5
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 4
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 4
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 5
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 5
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53118: LD_ADDR_VAR 0 31
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 4
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 4
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 5
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 5
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 5
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 4
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 4
53320: NEG
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: LD_INT 5
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: LD_INT 4
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 4
53368: NEG
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 5
53380: NEG
53381: PUSH
53382: LD_INT 4
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 5
53392: NEG
53393: PUSH
53394: LD_INT 5
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 5
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 5
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 4
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 4
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 4
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 5
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 5
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 4
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 5
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53668: LD_ADDR_VAR 0 32
53672: PUSH
53673: LD_INT 4
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 4
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 5
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 5
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: LD_INT 4
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 4
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 4
53849: NEG
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 4
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: NEG
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 4
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 5
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 4
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 4
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 5
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 5
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 4
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 4
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 4
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: PUSH
54081: LD_INT 4
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 4
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 5
54100: PUSH
54101: LD_INT 4
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: LD_INT 5
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 4
54120: PUSH
54121: LD_INT 5
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 4
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 5
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: LD_INT 5
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54215: LD_ADDR_VAR 0 33
54219: PUSH
54220: LD_INT 4
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: LD_INT 5
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: LD_INT 4
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 5
54282: NEG
54283: PUSH
54284: LD_INT 4
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 5
54294: NEG
54295: PUSH
54296: LD_INT 5
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 5
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 5
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 4
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 4
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 4
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 5
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 5
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 5
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: LD_INT 4
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 4
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 4
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 5
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 4
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 5
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54753: LD_ADDR_VAR 0 34
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 4
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 5
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 5
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 4
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: PUSH
54956: LD_INT 4
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 4
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: LD_INT 5
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 4
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 4
55138: NEG
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 4
55183: NEG
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 5
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 5
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 5
55217: NEG
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// end ; end ;
55285: GO 55288
55287: POP
// case btype of b_depot , b_warehouse :
55288: LD_VAR 0 1
55292: PUSH
55293: LD_INT 0
55295: DOUBLE
55296: EQUAL
55297: IFTRUE 55307
55299: LD_INT 1
55301: DOUBLE
55302: EQUAL
55303: IFTRUE 55307
55305: GO 55508
55307: POP
// case nation of nation_american :
55308: LD_VAR 0 5
55312: PUSH
55313: LD_INT 1
55315: DOUBLE
55316: EQUAL
55317: IFTRUE 55321
55319: GO 55377
55321: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55322: LD_ADDR_VAR 0 9
55326: PUSH
55327: LD_VAR 0 11
55331: PUSH
55332: LD_VAR 0 12
55336: PUSH
55337: LD_VAR 0 13
55341: PUSH
55342: LD_VAR 0 14
55346: PUSH
55347: LD_VAR 0 15
55351: PUSH
55352: LD_VAR 0 16
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: PUSH
55365: LD_VAR 0 4
55369: PUSH
55370: LD_INT 1
55372: PLUS
55373: ARRAY
55374: ST_TO_ADDR
55375: GO 55506
55377: LD_INT 2
55379: DOUBLE
55380: EQUAL
55381: IFTRUE 55385
55383: GO 55441
55385: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55386: LD_ADDR_VAR 0 9
55390: PUSH
55391: LD_VAR 0 17
55395: PUSH
55396: LD_VAR 0 18
55400: PUSH
55401: LD_VAR 0 19
55405: PUSH
55406: LD_VAR 0 20
55410: PUSH
55411: LD_VAR 0 21
55415: PUSH
55416: LD_VAR 0 22
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: PUSH
55429: LD_VAR 0 4
55433: PUSH
55434: LD_INT 1
55436: PLUS
55437: ARRAY
55438: ST_TO_ADDR
55439: GO 55506
55441: LD_INT 3
55443: DOUBLE
55444: EQUAL
55445: IFTRUE 55449
55447: GO 55505
55449: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55450: LD_ADDR_VAR 0 9
55454: PUSH
55455: LD_VAR 0 23
55459: PUSH
55460: LD_VAR 0 24
55464: PUSH
55465: LD_VAR 0 25
55469: PUSH
55470: LD_VAR 0 26
55474: PUSH
55475: LD_VAR 0 27
55479: PUSH
55480: LD_VAR 0 28
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: PUSH
55493: LD_VAR 0 4
55497: PUSH
55498: LD_INT 1
55500: PLUS
55501: ARRAY
55502: ST_TO_ADDR
55503: GO 55506
55505: POP
55506: GO 56061
55508: LD_INT 2
55510: DOUBLE
55511: EQUAL
55512: IFTRUE 55522
55514: LD_INT 3
55516: DOUBLE
55517: EQUAL
55518: IFTRUE 55522
55520: GO 55578
55522: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55523: LD_ADDR_VAR 0 9
55527: PUSH
55528: LD_VAR 0 29
55532: PUSH
55533: LD_VAR 0 30
55537: PUSH
55538: LD_VAR 0 31
55542: PUSH
55543: LD_VAR 0 32
55547: PUSH
55548: LD_VAR 0 33
55552: PUSH
55553: LD_VAR 0 34
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: PUSH
55566: LD_VAR 0 4
55570: PUSH
55571: LD_INT 1
55573: PLUS
55574: ARRAY
55575: ST_TO_ADDR
55576: GO 56061
55578: LD_INT 16
55580: DOUBLE
55581: EQUAL
55582: IFTRUE 55640
55584: LD_INT 17
55586: DOUBLE
55587: EQUAL
55588: IFTRUE 55640
55590: LD_INT 18
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55640
55596: LD_INT 19
55598: DOUBLE
55599: EQUAL
55600: IFTRUE 55640
55602: LD_INT 22
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55640
55608: LD_INT 20
55610: DOUBLE
55611: EQUAL
55612: IFTRUE 55640
55614: LD_INT 21
55616: DOUBLE
55617: EQUAL
55618: IFTRUE 55640
55620: LD_INT 23
55622: DOUBLE
55623: EQUAL
55624: IFTRUE 55640
55626: LD_INT 24
55628: DOUBLE
55629: EQUAL
55630: IFTRUE 55640
55632: LD_INT 25
55634: DOUBLE
55635: EQUAL
55636: IFTRUE 55640
55638: GO 55696
55640: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55641: LD_ADDR_VAR 0 9
55645: PUSH
55646: LD_VAR 0 35
55650: PUSH
55651: LD_VAR 0 36
55655: PUSH
55656: LD_VAR 0 37
55660: PUSH
55661: LD_VAR 0 38
55665: PUSH
55666: LD_VAR 0 39
55670: PUSH
55671: LD_VAR 0 40
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: LD_VAR 0 4
55688: PUSH
55689: LD_INT 1
55691: PLUS
55692: ARRAY
55693: ST_TO_ADDR
55694: GO 56061
55696: LD_INT 6
55698: DOUBLE
55699: EQUAL
55700: IFTRUE 55752
55702: LD_INT 7
55704: DOUBLE
55705: EQUAL
55706: IFTRUE 55752
55708: LD_INT 8
55710: DOUBLE
55711: EQUAL
55712: IFTRUE 55752
55714: LD_INT 13
55716: DOUBLE
55717: EQUAL
55718: IFTRUE 55752
55720: LD_INT 12
55722: DOUBLE
55723: EQUAL
55724: IFTRUE 55752
55726: LD_INT 15
55728: DOUBLE
55729: EQUAL
55730: IFTRUE 55752
55732: LD_INT 11
55734: DOUBLE
55735: EQUAL
55736: IFTRUE 55752
55738: LD_INT 14
55740: DOUBLE
55741: EQUAL
55742: IFTRUE 55752
55744: LD_INT 10
55746: DOUBLE
55747: EQUAL
55748: IFTRUE 55752
55750: GO 55808
55752: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55753: LD_ADDR_VAR 0 9
55757: PUSH
55758: LD_VAR 0 41
55762: PUSH
55763: LD_VAR 0 42
55767: PUSH
55768: LD_VAR 0 43
55772: PUSH
55773: LD_VAR 0 44
55777: PUSH
55778: LD_VAR 0 45
55782: PUSH
55783: LD_VAR 0 46
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: PUSH
55796: LD_VAR 0 4
55800: PUSH
55801: LD_INT 1
55803: PLUS
55804: ARRAY
55805: ST_TO_ADDR
55806: GO 56061
55808: LD_INT 36
55810: DOUBLE
55811: EQUAL
55812: IFTRUE 55816
55814: GO 55872
55816: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55817: LD_ADDR_VAR 0 9
55821: PUSH
55822: LD_VAR 0 47
55826: PUSH
55827: LD_VAR 0 48
55831: PUSH
55832: LD_VAR 0 49
55836: PUSH
55837: LD_VAR 0 50
55841: PUSH
55842: LD_VAR 0 51
55846: PUSH
55847: LD_VAR 0 52
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: PUSH
55860: LD_VAR 0 4
55864: PUSH
55865: LD_INT 1
55867: PLUS
55868: ARRAY
55869: ST_TO_ADDR
55870: GO 56061
55872: LD_INT 4
55874: DOUBLE
55875: EQUAL
55876: IFTRUE 55898
55878: LD_INT 5
55880: DOUBLE
55881: EQUAL
55882: IFTRUE 55898
55884: LD_INT 34
55886: DOUBLE
55887: EQUAL
55888: IFTRUE 55898
55890: LD_INT 37
55892: DOUBLE
55893: EQUAL
55894: IFTRUE 55898
55896: GO 55954
55898: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55899: LD_ADDR_VAR 0 9
55903: PUSH
55904: LD_VAR 0 53
55908: PUSH
55909: LD_VAR 0 54
55913: PUSH
55914: LD_VAR 0 55
55918: PUSH
55919: LD_VAR 0 56
55923: PUSH
55924: LD_VAR 0 57
55928: PUSH
55929: LD_VAR 0 58
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: PUSH
55942: LD_VAR 0 4
55946: PUSH
55947: LD_INT 1
55949: PLUS
55950: ARRAY
55951: ST_TO_ADDR
55952: GO 56061
55954: LD_INT 31
55956: DOUBLE
55957: EQUAL
55958: IFTRUE 56004
55960: LD_INT 32
55962: DOUBLE
55963: EQUAL
55964: IFTRUE 56004
55966: LD_INT 33
55968: DOUBLE
55969: EQUAL
55970: IFTRUE 56004
55972: LD_INT 27
55974: DOUBLE
55975: EQUAL
55976: IFTRUE 56004
55978: LD_INT 26
55980: DOUBLE
55981: EQUAL
55982: IFTRUE 56004
55984: LD_INT 28
55986: DOUBLE
55987: EQUAL
55988: IFTRUE 56004
55990: LD_INT 29
55992: DOUBLE
55993: EQUAL
55994: IFTRUE 56004
55996: LD_INT 30
55998: DOUBLE
55999: EQUAL
56000: IFTRUE 56004
56002: GO 56060
56004: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56005: LD_ADDR_VAR 0 9
56009: PUSH
56010: LD_VAR 0 59
56014: PUSH
56015: LD_VAR 0 60
56019: PUSH
56020: LD_VAR 0 61
56024: PUSH
56025: LD_VAR 0 62
56029: PUSH
56030: LD_VAR 0 63
56034: PUSH
56035: LD_VAR 0 64
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: PUSH
56048: LD_VAR 0 4
56052: PUSH
56053: LD_INT 1
56055: PLUS
56056: ARRAY
56057: ST_TO_ADDR
56058: GO 56061
56060: POP
// temp_list2 = [ ] ;
56061: LD_ADDR_VAR 0 10
56065: PUSH
56066: EMPTY
56067: ST_TO_ADDR
// for i in temp_list do
56068: LD_ADDR_VAR 0 8
56072: PUSH
56073: LD_VAR 0 9
56077: PUSH
56078: FOR_IN
56079: IFFALSE 56131
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56081: LD_ADDR_VAR 0 10
56085: PUSH
56086: LD_VAR 0 10
56090: PUSH
56091: LD_VAR 0 8
56095: PUSH
56096: LD_INT 1
56098: ARRAY
56099: PUSH
56100: LD_VAR 0 2
56104: PLUS
56105: PUSH
56106: LD_VAR 0 8
56110: PUSH
56111: LD_INT 2
56113: ARRAY
56114: PUSH
56115: LD_VAR 0 3
56119: PLUS
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: ADD
56128: ST_TO_ADDR
56129: GO 56078
56131: POP
56132: POP
// result = temp_list2 ;
56133: LD_ADDR_VAR 0 7
56137: PUSH
56138: LD_VAR 0 10
56142: ST_TO_ADDR
// end ;
56143: LD_VAR 0 7
56147: RET
// export function EnemyInRange ( unit , dist ) ; begin
56148: LD_INT 0
56150: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56151: LD_ADDR_VAR 0 3
56155: PUSH
56156: LD_VAR 0 1
56160: PPUSH
56161: CALL_OW 255
56165: PPUSH
56166: LD_VAR 0 1
56170: PPUSH
56171: CALL_OW 250
56175: PPUSH
56176: LD_VAR 0 1
56180: PPUSH
56181: CALL_OW 251
56185: PPUSH
56186: LD_VAR 0 2
56190: PPUSH
56191: CALL 29550 0 4
56195: PUSH
56196: LD_INT 4
56198: ARRAY
56199: ST_TO_ADDR
// end ;
56200: LD_VAR 0 3
56204: RET
// export function PlayerSeeMe ( unit ) ; begin
56205: LD_INT 0
56207: PPUSH
// result := See ( your_side , unit ) ;
56208: LD_ADDR_VAR 0 2
56212: PUSH
56213: LD_OWVAR 2
56217: PPUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: CALL_OW 292
56227: ST_TO_ADDR
// end ;
56228: LD_VAR 0 2
56232: RET
// export function ReverseDir ( unit ) ; begin
56233: LD_INT 0
56235: PPUSH
// if not unit then
56236: LD_VAR 0 1
56240: NOT
56241: IFFALSE 56245
// exit ;
56243: GO 56268
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56245: LD_ADDR_VAR 0 2
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: CALL_OW 254
56259: PUSH
56260: LD_INT 3
56262: PLUS
56263: PUSH
56264: LD_INT 6
56266: MOD
56267: ST_TO_ADDR
// end ;
56268: LD_VAR 0 2
56272: RET
// export function ReverseArray ( array ) ; var i ; begin
56273: LD_INT 0
56275: PPUSH
56276: PPUSH
// if not array then
56277: LD_VAR 0 1
56281: NOT
56282: IFFALSE 56286
// exit ;
56284: GO 56341
// result := [ ] ;
56286: LD_ADDR_VAR 0 2
56290: PUSH
56291: EMPTY
56292: ST_TO_ADDR
// for i := array downto 1 do
56293: LD_ADDR_VAR 0 3
56297: PUSH
56298: DOUBLE
56299: LD_VAR 0 1
56303: INC
56304: ST_TO_ADDR
56305: LD_INT 1
56307: PUSH
56308: FOR_DOWNTO
56309: IFFALSE 56339
// result := Join ( result , array [ i ] ) ;
56311: LD_ADDR_VAR 0 2
56315: PUSH
56316: LD_VAR 0 2
56320: PPUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_VAR 0 3
56330: ARRAY
56331: PPUSH
56332: CALL 60985 0 2
56336: ST_TO_ADDR
56337: GO 56308
56339: POP
56340: POP
// end ;
56341: LD_VAR 0 2
56345: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56346: LD_INT 0
56348: PPUSH
56349: PPUSH
56350: PPUSH
56351: PPUSH
56352: PPUSH
56353: PPUSH
// if not unit or not hexes then
56354: LD_VAR 0 1
56358: NOT
56359: PUSH
56360: LD_VAR 0 2
56364: NOT
56365: OR
56366: IFFALSE 56370
// exit ;
56368: GO 56493
// dist := 9999 ;
56370: LD_ADDR_VAR 0 5
56374: PUSH
56375: LD_INT 9999
56377: ST_TO_ADDR
// for i = 1 to hexes do
56378: LD_ADDR_VAR 0 4
56382: PUSH
56383: DOUBLE
56384: LD_INT 1
56386: DEC
56387: ST_TO_ADDR
56388: LD_VAR 0 2
56392: PUSH
56393: FOR_TO
56394: IFFALSE 56481
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56396: LD_ADDR_VAR 0 6
56400: PUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: LD_VAR 0 2
56410: PUSH
56411: LD_VAR 0 4
56415: ARRAY
56416: PUSH
56417: LD_INT 1
56419: ARRAY
56420: PPUSH
56421: LD_VAR 0 2
56425: PUSH
56426: LD_VAR 0 4
56430: ARRAY
56431: PUSH
56432: LD_INT 2
56434: ARRAY
56435: PPUSH
56436: CALL_OW 297
56440: ST_TO_ADDR
// if tdist < dist then
56441: LD_VAR 0 6
56445: PUSH
56446: LD_VAR 0 5
56450: LESS
56451: IFFALSE 56479
// begin hex := hexes [ i ] ;
56453: LD_ADDR_VAR 0 8
56457: PUSH
56458: LD_VAR 0 2
56462: PUSH
56463: LD_VAR 0 4
56467: ARRAY
56468: ST_TO_ADDR
// dist := tdist ;
56469: LD_ADDR_VAR 0 5
56473: PUSH
56474: LD_VAR 0 6
56478: ST_TO_ADDR
// end ; end ;
56479: GO 56393
56481: POP
56482: POP
// result := hex ;
56483: LD_ADDR_VAR 0 3
56487: PUSH
56488: LD_VAR 0 8
56492: ST_TO_ADDR
// end ;
56493: LD_VAR 0 3
56497: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56498: LD_INT 0
56500: PPUSH
56501: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56502: LD_VAR 0 1
56506: NOT
56507: PUSH
56508: LD_VAR 0 1
56512: PUSH
56513: LD_INT 21
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 23
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PPUSH
56537: CALL_OW 69
56541: IN
56542: NOT
56543: OR
56544: IFFALSE 56548
// exit ;
56546: GO 56595
// for i = 1 to 3 do
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: DOUBLE
56554: LD_INT 1
56556: DEC
56557: ST_TO_ADDR
56558: LD_INT 3
56560: PUSH
56561: FOR_TO
56562: IFFALSE 56593
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 250
56573: PPUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 251
56583: PPUSH
56584: LD_INT 1
56586: PPUSH
56587: CALL_OW 453
56591: GO 56561
56593: POP
56594: POP
// end ;
56595: LD_VAR 0 2
56599: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56600: LD_INT 0
56602: PPUSH
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56608: LD_VAR 0 1
56612: NOT
56613: PUSH
56614: LD_VAR 0 2
56618: NOT
56619: OR
56620: PUSH
56621: LD_VAR 0 1
56625: PPUSH
56626: CALL_OW 314
56630: OR
56631: IFFALSE 56635
// exit ;
56633: GO 57102
// if GetLives ( i ) < 250 then
56635: LD_VAR 0 4
56639: PPUSH
56640: CALL_OW 256
56644: PUSH
56645: LD_INT 250
56647: LESS
56648: IFFALSE 56661
// begin ComAutodestruct ( i ) ;
56650: LD_VAR 0 4
56654: PPUSH
56655: CALL 56498 0 1
// exit ;
56659: GO 57102
// end ; x := GetX ( enemy_unit ) ;
56661: LD_ADDR_VAR 0 7
56665: PUSH
56666: LD_VAR 0 2
56670: PPUSH
56671: CALL_OW 250
56675: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56676: LD_ADDR_VAR 0 8
56680: PUSH
56681: LD_VAR 0 2
56685: PPUSH
56686: CALL_OW 251
56690: ST_TO_ADDR
// if not x or not y then
56691: LD_VAR 0 7
56695: NOT
56696: PUSH
56697: LD_VAR 0 8
56701: NOT
56702: OR
56703: IFFALSE 56707
// exit ;
56705: GO 57102
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56707: LD_ADDR_VAR 0 6
56711: PUSH
56712: LD_VAR 0 7
56716: PPUSH
56717: LD_INT 0
56719: PPUSH
56720: LD_INT 4
56722: PPUSH
56723: CALL_OW 272
56727: PUSH
56728: LD_VAR 0 8
56732: PPUSH
56733: LD_INT 0
56735: PPUSH
56736: LD_INT 4
56738: PPUSH
56739: CALL_OW 273
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_VAR 0 7
56752: PPUSH
56753: LD_INT 1
56755: PPUSH
56756: LD_INT 4
56758: PPUSH
56759: CALL_OW 272
56763: PUSH
56764: LD_VAR 0 8
56768: PPUSH
56769: LD_INT 1
56771: PPUSH
56772: LD_INT 4
56774: PPUSH
56775: CALL_OW 273
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_VAR 0 7
56788: PPUSH
56789: LD_INT 2
56791: PPUSH
56792: LD_INT 4
56794: PPUSH
56795: CALL_OW 272
56799: PUSH
56800: LD_VAR 0 8
56804: PPUSH
56805: LD_INT 2
56807: PPUSH
56808: LD_INT 4
56810: PPUSH
56811: CALL_OW 273
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_VAR 0 7
56824: PPUSH
56825: LD_INT 3
56827: PPUSH
56828: LD_INT 4
56830: PPUSH
56831: CALL_OW 272
56835: PUSH
56836: LD_VAR 0 8
56840: PPUSH
56841: LD_INT 3
56843: PPUSH
56844: LD_INT 4
56846: PPUSH
56847: CALL_OW 273
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_VAR 0 7
56860: PPUSH
56861: LD_INT 4
56863: PPUSH
56864: LD_INT 4
56866: PPUSH
56867: CALL_OW 272
56871: PUSH
56872: LD_VAR 0 8
56876: PPUSH
56877: LD_INT 4
56879: PPUSH
56880: LD_INT 4
56882: PPUSH
56883: CALL_OW 273
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_VAR 0 7
56896: PPUSH
56897: LD_INT 5
56899: PPUSH
56900: LD_INT 4
56902: PPUSH
56903: CALL_OW 272
56907: PUSH
56908: LD_VAR 0 8
56912: PPUSH
56913: LD_INT 5
56915: PPUSH
56916: LD_INT 4
56918: PPUSH
56919: CALL_OW 273
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// for i = tmp downto 1 do
56936: LD_ADDR_VAR 0 4
56940: PUSH
56941: DOUBLE
56942: LD_VAR 0 6
56946: INC
56947: ST_TO_ADDR
56948: LD_INT 1
56950: PUSH
56951: FOR_DOWNTO
56952: IFFALSE 57053
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56954: LD_VAR 0 6
56958: PUSH
56959: LD_VAR 0 4
56963: ARRAY
56964: PUSH
56965: LD_INT 1
56967: ARRAY
56968: PPUSH
56969: LD_VAR 0 6
56973: PUSH
56974: LD_VAR 0 4
56978: ARRAY
56979: PUSH
56980: LD_INT 2
56982: ARRAY
56983: PPUSH
56984: CALL_OW 488
56988: NOT
56989: PUSH
56990: LD_VAR 0 6
56994: PUSH
56995: LD_VAR 0 4
56999: ARRAY
57000: PUSH
57001: LD_INT 1
57003: ARRAY
57004: PPUSH
57005: LD_VAR 0 6
57009: PUSH
57010: LD_VAR 0 4
57014: ARRAY
57015: PUSH
57016: LD_INT 2
57018: ARRAY
57019: PPUSH
57020: CALL_OW 428
57024: PUSH
57025: LD_INT 0
57027: NONEQUAL
57028: OR
57029: IFFALSE 57051
// tmp := Delete ( tmp , i ) ;
57031: LD_ADDR_VAR 0 6
57035: PUSH
57036: LD_VAR 0 6
57040: PPUSH
57041: LD_VAR 0 4
57045: PPUSH
57046: CALL_OW 3
57050: ST_TO_ADDR
57051: GO 56951
57053: POP
57054: POP
// j := GetClosestHex ( unit , tmp ) ;
57055: LD_ADDR_VAR 0 5
57059: PUSH
57060: LD_VAR 0 1
57064: PPUSH
57065: LD_VAR 0 6
57069: PPUSH
57070: CALL 56346 0 2
57074: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57075: LD_VAR 0 1
57079: PPUSH
57080: LD_VAR 0 5
57084: PUSH
57085: LD_INT 1
57087: ARRAY
57088: PPUSH
57089: LD_VAR 0 5
57093: PUSH
57094: LD_INT 2
57096: ARRAY
57097: PPUSH
57098: CALL_OW 111
// end ;
57102: LD_VAR 0 3
57106: RET
// export function PrepareApemanSoldier ( ) ; begin
57107: LD_INT 0
57109: PPUSH
// uc_nation := 0 ;
57110: LD_ADDR_OWVAR 21
57114: PUSH
57115: LD_INT 0
57117: ST_TO_ADDR
// hc_sex := sex_male ;
57118: LD_ADDR_OWVAR 27
57122: PUSH
57123: LD_INT 1
57125: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57126: LD_ADDR_OWVAR 28
57130: PUSH
57131: LD_INT 15
57133: ST_TO_ADDR
// hc_gallery :=  ;
57134: LD_ADDR_OWVAR 33
57138: PUSH
57139: LD_STRING 
57141: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57142: LD_ADDR_OWVAR 31
57146: PUSH
57147: LD_INT 0
57149: PPUSH
57150: LD_INT 3
57152: PPUSH
57153: CALL_OW 12
57157: PUSH
57158: LD_INT 0
57160: PPUSH
57161: LD_INT 3
57163: PPUSH
57164: CALL_OW 12
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// end ;
57181: LD_VAR 0 1
57185: RET
// export function PrepareApemanEngineer ( ) ; begin
57186: LD_INT 0
57188: PPUSH
// uc_nation := 0 ;
57189: LD_ADDR_OWVAR 21
57193: PUSH
57194: LD_INT 0
57196: ST_TO_ADDR
// hc_sex := sex_male ;
57197: LD_ADDR_OWVAR 27
57201: PUSH
57202: LD_INT 1
57204: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57205: LD_ADDR_OWVAR 28
57209: PUSH
57210: LD_INT 16
57212: ST_TO_ADDR
// hc_gallery :=  ;
57213: LD_ADDR_OWVAR 33
57217: PUSH
57218: LD_STRING 
57220: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57221: LD_ADDR_OWVAR 31
57225: PUSH
57226: LD_INT 0
57228: PPUSH
57229: LD_INT 3
57231: PPUSH
57232: CALL_OW 12
57236: PUSH
57237: LD_INT 0
57239: PPUSH
57240: LD_INT 3
57242: PPUSH
57243: CALL_OW 12
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// end ;
57260: LD_VAR 0 1
57264: RET
// export function PrepareApeman ( agressivity ) ; begin
57265: LD_INT 0
57267: PPUSH
// uc_side := 0 ;
57268: LD_ADDR_OWVAR 20
57272: PUSH
57273: LD_INT 0
57275: ST_TO_ADDR
// uc_nation := 0 ;
57276: LD_ADDR_OWVAR 21
57280: PUSH
57281: LD_INT 0
57283: ST_TO_ADDR
// hc_sex := sex_male ;
57284: LD_ADDR_OWVAR 27
57288: PUSH
57289: LD_INT 1
57291: ST_TO_ADDR
// hc_class := class_apeman ;
57292: LD_ADDR_OWVAR 28
57296: PUSH
57297: LD_INT 12
57299: ST_TO_ADDR
// hc_gallery :=  ;
57300: LD_ADDR_OWVAR 33
57304: PUSH
57305: LD_STRING 
57307: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57308: LD_ADDR_OWVAR 35
57312: PUSH
57313: LD_VAR 0 1
57317: NEG
57318: PPUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 12
57328: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57329: LD_ADDR_OWVAR 31
57333: PUSH
57334: LD_INT 0
57336: PPUSH
57337: LD_INT 3
57339: PPUSH
57340: CALL_OW 12
57344: PUSH
57345: LD_INT 0
57347: PPUSH
57348: LD_INT 3
57350: PPUSH
57351: CALL_OW 12
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: ST_TO_ADDR
// end ;
57368: LD_VAR 0 2
57372: RET
// export function PrepareTiger ( agressivity ) ; begin
57373: LD_INT 0
57375: PPUSH
// uc_side := 0 ;
57376: LD_ADDR_OWVAR 20
57380: PUSH
57381: LD_INT 0
57383: ST_TO_ADDR
// uc_nation := 0 ;
57384: LD_ADDR_OWVAR 21
57388: PUSH
57389: LD_INT 0
57391: ST_TO_ADDR
// hc_class := class_tiger ;
57392: LD_ADDR_OWVAR 28
57396: PUSH
57397: LD_INT 14
57399: ST_TO_ADDR
// hc_gallery :=  ;
57400: LD_ADDR_OWVAR 33
57404: PUSH
57405: LD_STRING 
57407: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57408: LD_ADDR_OWVAR 35
57412: PUSH
57413: LD_VAR 0 1
57417: NEG
57418: PPUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: CALL_OW 12
57428: ST_TO_ADDR
// end ;
57429: LD_VAR 0 2
57433: RET
// export function PrepareEnchidna ( ) ; begin
57434: LD_INT 0
57436: PPUSH
// uc_side := 0 ;
57437: LD_ADDR_OWVAR 20
57441: PUSH
57442: LD_INT 0
57444: ST_TO_ADDR
// uc_nation := 0 ;
57445: LD_ADDR_OWVAR 21
57449: PUSH
57450: LD_INT 0
57452: ST_TO_ADDR
// hc_class := class_baggie ;
57453: LD_ADDR_OWVAR 28
57457: PUSH
57458: LD_INT 13
57460: ST_TO_ADDR
// hc_gallery :=  ;
57461: LD_ADDR_OWVAR 33
57465: PUSH
57466: LD_STRING 
57468: ST_TO_ADDR
// end ;
57469: LD_VAR 0 1
57473: RET
// export function PrepareFrog ( ) ; begin
57474: LD_INT 0
57476: PPUSH
// uc_side := 0 ;
57477: LD_ADDR_OWVAR 20
57481: PUSH
57482: LD_INT 0
57484: ST_TO_ADDR
// uc_nation := 0 ;
57485: LD_ADDR_OWVAR 21
57489: PUSH
57490: LD_INT 0
57492: ST_TO_ADDR
// hc_class := class_frog ;
57493: LD_ADDR_OWVAR 28
57497: PUSH
57498: LD_INT 19
57500: ST_TO_ADDR
// hc_gallery :=  ;
57501: LD_ADDR_OWVAR 33
57505: PUSH
57506: LD_STRING 
57508: ST_TO_ADDR
// end ;
57509: LD_VAR 0 1
57513: RET
// export function PrepareFish ( ) ; begin
57514: LD_INT 0
57516: PPUSH
// uc_side := 0 ;
57517: LD_ADDR_OWVAR 20
57521: PUSH
57522: LD_INT 0
57524: ST_TO_ADDR
// uc_nation := 0 ;
57525: LD_ADDR_OWVAR 21
57529: PUSH
57530: LD_INT 0
57532: ST_TO_ADDR
// hc_class := class_fish ;
57533: LD_ADDR_OWVAR 28
57537: PUSH
57538: LD_INT 20
57540: ST_TO_ADDR
// hc_gallery :=  ;
57541: LD_ADDR_OWVAR 33
57545: PUSH
57546: LD_STRING 
57548: ST_TO_ADDR
// end ;
57549: LD_VAR 0 1
57553: RET
// export function PrepareBird ( ) ; begin
57554: LD_INT 0
57556: PPUSH
// uc_side := 0 ;
57557: LD_ADDR_OWVAR 20
57561: PUSH
57562: LD_INT 0
57564: ST_TO_ADDR
// uc_nation := 0 ;
57565: LD_ADDR_OWVAR 21
57569: PUSH
57570: LD_INT 0
57572: ST_TO_ADDR
// hc_class := class_phororhacos ;
57573: LD_ADDR_OWVAR 28
57577: PUSH
57578: LD_INT 18
57580: ST_TO_ADDR
// hc_gallery :=  ;
57581: LD_ADDR_OWVAR 33
57585: PUSH
57586: LD_STRING 
57588: ST_TO_ADDR
// end ;
57589: LD_VAR 0 1
57593: RET
// export function PrepareHorse ( ) ; begin
57594: LD_INT 0
57596: PPUSH
// uc_side := 0 ;
57597: LD_ADDR_OWVAR 20
57601: PUSH
57602: LD_INT 0
57604: ST_TO_ADDR
// uc_nation := 0 ;
57605: LD_ADDR_OWVAR 21
57609: PUSH
57610: LD_INT 0
57612: ST_TO_ADDR
// hc_class := class_horse ;
57613: LD_ADDR_OWVAR 28
57617: PUSH
57618: LD_INT 21
57620: ST_TO_ADDR
// hc_gallery :=  ;
57621: LD_ADDR_OWVAR 33
57625: PUSH
57626: LD_STRING 
57628: ST_TO_ADDR
// end ;
57629: LD_VAR 0 1
57633: RET
// export function PrepareMastodont ( ) ; begin
57634: LD_INT 0
57636: PPUSH
// uc_side := 0 ;
57637: LD_ADDR_OWVAR 20
57641: PUSH
57642: LD_INT 0
57644: ST_TO_ADDR
// uc_nation := 0 ;
57645: LD_ADDR_OWVAR 21
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57653: LD_ADDR_OWVAR 37
57657: PUSH
57658: LD_INT 31
57660: ST_TO_ADDR
// vc_control := control_rider ;
57661: LD_ADDR_OWVAR 38
57665: PUSH
57666: LD_INT 4
57668: ST_TO_ADDR
// end ;
57669: LD_VAR 0 1
57673: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57674: LD_INT 0
57676: PPUSH
57677: PPUSH
57678: PPUSH
// uc_side = 0 ;
57679: LD_ADDR_OWVAR 20
57683: PUSH
57684: LD_INT 0
57686: ST_TO_ADDR
// uc_nation = 0 ;
57687: LD_ADDR_OWVAR 21
57691: PUSH
57692: LD_INT 0
57694: ST_TO_ADDR
// InitHc_All ( ) ;
57695: CALL_OW 584
// InitVc ;
57699: CALL_OW 20
// if mastodonts then
57703: LD_VAR 0 6
57707: IFFALSE 57774
// for i = 1 to mastodonts do
57709: LD_ADDR_VAR 0 11
57713: PUSH
57714: DOUBLE
57715: LD_INT 1
57717: DEC
57718: ST_TO_ADDR
57719: LD_VAR 0 6
57723: PUSH
57724: FOR_TO
57725: IFFALSE 57772
// begin vc_chassis := 31 ;
57727: LD_ADDR_OWVAR 37
57731: PUSH
57732: LD_INT 31
57734: ST_TO_ADDR
// vc_control := control_rider ;
57735: LD_ADDR_OWVAR 38
57739: PUSH
57740: LD_INT 4
57742: ST_TO_ADDR
// animal := CreateVehicle ;
57743: LD_ADDR_VAR 0 12
57747: PUSH
57748: CALL_OW 45
57752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57753: LD_VAR 0 12
57757: PPUSH
57758: LD_VAR 0 8
57762: PPUSH
57763: LD_INT 0
57765: PPUSH
57766: CALL 59902 0 3
// end ;
57770: GO 57724
57772: POP
57773: POP
// if horses then
57774: LD_VAR 0 5
57778: IFFALSE 57845
// for i = 1 to horses do
57780: LD_ADDR_VAR 0 11
57784: PUSH
57785: DOUBLE
57786: LD_INT 1
57788: DEC
57789: ST_TO_ADDR
57790: LD_VAR 0 5
57794: PUSH
57795: FOR_TO
57796: IFFALSE 57843
// begin hc_class := 21 ;
57798: LD_ADDR_OWVAR 28
57802: PUSH
57803: LD_INT 21
57805: ST_TO_ADDR
// hc_gallery :=  ;
57806: LD_ADDR_OWVAR 33
57810: PUSH
57811: LD_STRING 
57813: ST_TO_ADDR
// animal := CreateHuman ;
57814: LD_ADDR_VAR 0 12
57818: PUSH
57819: CALL_OW 44
57823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57824: LD_VAR 0 12
57828: PPUSH
57829: LD_VAR 0 8
57833: PPUSH
57834: LD_INT 0
57836: PPUSH
57837: CALL 59902 0 3
// end ;
57841: GO 57795
57843: POP
57844: POP
// if birds then
57845: LD_VAR 0 1
57849: IFFALSE 57916
// for i = 1 to birds do
57851: LD_ADDR_VAR 0 11
57855: PUSH
57856: DOUBLE
57857: LD_INT 1
57859: DEC
57860: ST_TO_ADDR
57861: LD_VAR 0 1
57865: PUSH
57866: FOR_TO
57867: IFFALSE 57914
// begin hc_class = 18 ;
57869: LD_ADDR_OWVAR 28
57873: PUSH
57874: LD_INT 18
57876: ST_TO_ADDR
// hc_gallery =  ;
57877: LD_ADDR_OWVAR 33
57881: PUSH
57882: LD_STRING 
57884: ST_TO_ADDR
// animal := CreateHuman ;
57885: LD_ADDR_VAR 0 12
57889: PUSH
57890: CALL_OW 44
57894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57895: LD_VAR 0 12
57899: PPUSH
57900: LD_VAR 0 8
57904: PPUSH
57905: LD_INT 0
57907: PPUSH
57908: CALL 59902 0 3
// end ;
57912: GO 57866
57914: POP
57915: POP
// if tigers then
57916: LD_VAR 0 2
57920: IFFALSE 58004
// for i = 1 to tigers do
57922: LD_ADDR_VAR 0 11
57926: PUSH
57927: DOUBLE
57928: LD_INT 1
57930: DEC
57931: ST_TO_ADDR
57932: LD_VAR 0 2
57936: PUSH
57937: FOR_TO
57938: IFFALSE 58002
// begin hc_class = class_tiger ;
57940: LD_ADDR_OWVAR 28
57944: PUSH
57945: LD_INT 14
57947: ST_TO_ADDR
// hc_gallery =  ;
57948: LD_ADDR_OWVAR 33
57952: PUSH
57953: LD_STRING 
57955: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57956: LD_ADDR_OWVAR 35
57960: PUSH
57961: LD_INT 7
57963: NEG
57964: PPUSH
57965: LD_INT 7
57967: PPUSH
57968: CALL_OW 12
57972: ST_TO_ADDR
// animal := CreateHuman ;
57973: LD_ADDR_VAR 0 12
57977: PUSH
57978: CALL_OW 44
57982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57983: LD_VAR 0 12
57987: PPUSH
57988: LD_VAR 0 8
57992: PPUSH
57993: LD_INT 0
57995: PPUSH
57996: CALL 59902 0 3
// end ;
58000: GO 57937
58002: POP
58003: POP
// if apemans then
58004: LD_VAR 0 3
58008: IFFALSE 58131
// for i = 1 to apemans do
58010: LD_ADDR_VAR 0 11
58014: PUSH
58015: DOUBLE
58016: LD_INT 1
58018: DEC
58019: ST_TO_ADDR
58020: LD_VAR 0 3
58024: PUSH
58025: FOR_TO
58026: IFFALSE 58129
// begin hc_class = class_apeman ;
58028: LD_ADDR_OWVAR 28
58032: PUSH
58033: LD_INT 12
58035: ST_TO_ADDR
// hc_gallery =  ;
58036: LD_ADDR_OWVAR 33
58040: PUSH
58041: LD_STRING 
58043: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58044: LD_ADDR_OWVAR 35
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PPUSH
58053: LD_INT 2
58055: PPUSH
58056: CALL_OW 12
58060: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58061: LD_ADDR_OWVAR 31
58065: PUSH
58066: LD_INT 1
58068: PPUSH
58069: LD_INT 3
58071: PPUSH
58072: CALL_OW 12
58076: PUSH
58077: LD_INT 1
58079: PPUSH
58080: LD_INT 3
58082: PPUSH
58083: CALL_OW 12
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: ST_TO_ADDR
// animal := CreateHuman ;
58100: LD_ADDR_VAR 0 12
58104: PUSH
58105: CALL_OW 44
58109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58110: LD_VAR 0 12
58114: PPUSH
58115: LD_VAR 0 8
58119: PPUSH
58120: LD_INT 0
58122: PPUSH
58123: CALL 59902 0 3
// end ;
58127: GO 58025
58129: POP
58130: POP
// if enchidnas then
58131: LD_VAR 0 4
58135: IFFALSE 58202
// for i = 1 to enchidnas do
58137: LD_ADDR_VAR 0 11
58141: PUSH
58142: DOUBLE
58143: LD_INT 1
58145: DEC
58146: ST_TO_ADDR
58147: LD_VAR 0 4
58151: PUSH
58152: FOR_TO
58153: IFFALSE 58200
// begin hc_class = 13 ;
58155: LD_ADDR_OWVAR 28
58159: PUSH
58160: LD_INT 13
58162: ST_TO_ADDR
// hc_gallery =  ;
58163: LD_ADDR_OWVAR 33
58167: PUSH
58168: LD_STRING 
58170: ST_TO_ADDR
// animal := CreateHuman ;
58171: LD_ADDR_VAR 0 12
58175: PUSH
58176: CALL_OW 44
58180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58181: LD_VAR 0 12
58185: PPUSH
58186: LD_VAR 0 8
58190: PPUSH
58191: LD_INT 0
58193: PPUSH
58194: CALL 59902 0 3
// end ;
58198: GO 58152
58200: POP
58201: POP
// if fishes then
58202: LD_VAR 0 7
58206: IFFALSE 58273
// for i = 1 to fishes do
58208: LD_ADDR_VAR 0 11
58212: PUSH
58213: DOUBLE
58214: LD_INT 1
58216: DEC
58217: ST_TO_ADDR
58218: LD_VAR 0 7
58222: PUSH
58223: FOR_TO
58224: IFFALSE 58271
// begin hc_class = 20 ;
58226: LD_ADDR_OWVAR 28
58230: PUSH
58231: LD_INT 20
58233: ST_TO_ADDR
// hc_gallery =  ;
58234: LD_ADDR_OWVAR 33
58238: PUSH
58239: LD_STRING 
58241: ST_TO_ADDR
// animal := CreateHuman ;
58242: LD_ADDR_VAR 0 12
58246: PUSH
58247: CALL_OW 44
58251: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58252: LD_VAR 0 12
58256: PPUSH
58257: LD_VAR 0 9
58261: PPUSH
58262: LD_INT 0
58264: PPUSH
58265: CALL 59902 0 3
// end ;
58269: GO 58223
58271: POP
58272: POP
// end ;
58273: LD_VAR 0 10
58277: RET
// export function WantHeal ( sci , unit ) ; begin
58278: LD_INT 0
58280: PPUSH
// if GetTaskList ( sci ) > 0 then
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL_OW 437
58290: PUSH
58291: LD_INT 0
58293: GREATER
58294: IFFALSE 58364
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 437
58305: PUSH
58306: LD_INT 1
58308: ARRAY
58309: PUSH
58310: LD_INT 1
58312: ARRAY
58313: PUSH
58314: LD_STRING l
58316: EQUAL
58317: PUSH
58318: LD_VAR 0 1
58322: PPUSH
58323: CALL_OW 437
58327: PUSH
58328: LD_INT 1
58330: ARRAY
58331: PUSH
58332: LD_INT 4
58334: ARRAY
58335: PUSH
58336: LD_VAR 0 2
58340: EQUAL
58341: AND
58342: IFFALSE 58354
// result := true else
58344: LD_ADDR_VAR 0 3
58348: PUSH
58349: LD_INT 1
58351: ST_TO_ADDR
58352: GO 58362
// result := false ;
58354: LD_ADDR_VAR 0 3
58358: PUSH
58359: LD_INT 0
58361: ST_TO_ADDR
// end else
58362: GO 58372
// result := false ;
58364: LD_ADDR_VAR 0 3
58368: PUSH
58369: LD_INT 0
58371: ST_TO_ADDR
// end ;
58372: LD_VAR 0 3
58376: RET
// export function HealTarget ( sci ) ; begin
58377: LD_INT 0
58379: PPUSH
// if not sci then
58380: LD_VAR 0 1
58384: NOT
58385: IFFALSE 58389
// exit ;
58387: GO 58454
// result := 0 ;
58389: LD_ADDR_VAR 0 2
58393: PUSH
58394: LD_INT 0
58396: ST_TO_ADDR
// if GetTaskList ( sci ) then
58397: LD_VAR 0 1
58401: PPUSH
58402: CALL_OW 437
58406: IFFALSE 58454
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58408: LD_VAR 0 1
58412: PPUSH
58413: CALL_OW 437
58417: PUSH
58418: LD_INT 1
58420: ARRAY
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PUSH
58426: LD_STRING l
58428: EQUAL
58429: IFFALSE 58454
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58431: LD_ADDR_VAR 0 2
58435: PUSH
58436: LD_VAR 0 1
58440: PPUSH
58441: CALL_OW 437
58445: PUSH
58446: LD_INT 1
58448: ARRAY
58449: PUSH
58450: LD_INT 4
58452: ARRAY
58453: ST_TO_ADDR
// end ;
58454: LD_VAR 0 2
58458: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58459: LD_INT 0
58461: PPUSH
58462: PPUSH
58463: PPUSH
58464: PPUSH
// if not base_units then
58465: LD_VAR 0 1
58469: NOT
58470: IFFALSE 58474
// exit ;
58472: GO 58561
// result := false ;
58474: LD_ADDR_VAR 0 2
58478: PUSH
58479: LD_INT 0
58481: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58482: LD_ADDR_VAR 0 5
58486: PUSH
58487: LD_VAR 0 1
58491: PPUSH
58492: LD_INT 21
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PPUSH
58502: CALL_OW 72
58506: ST_TO_ADDR
// if not tmp then
58507: LD_VAR 0 5
58511: NOT
58512: IFFALSE 58516
// exit ;
58514: GO 58561
// for i in tmp do
58516: LD_ADDR_VAR 0 3
58520: PUSH
58521: LD_VAR 0 5
58525: PUSH
58526: FOR_IN
58527: IFFALSE 58559
// begin result := EnemyInRange ( i , 22 ) ;
58529: LD_ADDR_VAR 0 2
58533: PUSH
58534: LD_VAR 0 3
58538: PPUSH
58539: LD_INT 22
58541: PPUSH
58542: CALL 56148 0 2
58546: ST_TO_ADDR
// if result then
58547: LD_VAR 0 2
58551: IFFALSE 58557
// exit ;
58553: POP
58554: POP
58555: GO 58561
// end ;
58557: GO 58526
58559: POP
58560: POP
// end ;
58561: LD_VAR 0 2
58565: RET
// export function FilterByTag ( units , tag ) ; begin
58566: LD_INT 0
58568: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58569: LD_ADDR_VAR 0 3
58573: PUSH
58574: LD_VAR 0 1
58578: PPUSH
58579: LD_INT 120
58581: PUSH
58582: LD_VAR 0 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PPUSH
58591: CALL_OW 72
58595: ST_TO_ADDR
// end ;
58596: LD_VAR 0 3
58600: RET
// export function IsDriver ( un ) ; begin
58601: LD_INT 0
58603: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58604: LD_ADDR_VAR 0 2
58608: PUSH
58609: LD_VAR 0 1
58613: PUSH
58614: LD_INT 55
58616: PUSH
58617: EMPTY
58618: LIST
58619: PPUSH
58620: CALL_OW 69
58624: IN
58625: ST_TO_ADDR
// end ;
58626: LD_VAR 0 2
58630: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58631: LD_INT 0
58633: PPUSH
58634: PPUSH
// list := [ ] ;
58635: LD_ADDR_VAR 0 5
58639: PUSH
58640: EMPTY
58641: ST_TO_ADDR
// case d of 0 :
58642: LD_VAR 0 3
58646: PUSH
58647: LD_INT 0
58649: DOUBLE
58650: EQUAL
58651: IFTRUE 58655
58653: GO 58788
58655: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58656: LD_ADDR_VAR 0 5
58660: PUSH
58661: LD_VAR 0 1
58665: PUSH
58666: LD_INT 4
58668: MINUS
58669: PUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_INT 4
58677: MINUS
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: PUSH
58687: LD_VAR 0 1
58691: PUSH
58692: LD_INT 3
58694: MINUS
58695: PUSH
58696: LD_VAR 0 2
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: LIST
58708: PUSH
58709: LD_VAR 0 1
58713: PUSH
58714: LD_INT 4
58716: PLUS
58717: PUSH
58718: LD_VAR 0 2
58722: PUSH
58723: LD_INT 4
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: PUSH
58731: LD_VAR 0 1
58735: PUSH
58736: LD_INT 3
58738: PLUS
58739: PUSH
58740: LD_VAR 0 2
58744: PUSH
58745: LD_INT 3
58747: PLUS
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: PUSH
58757: LD_VAR 0 1
58761: PUSH
58762: LD_VAR 0 2
58766: PUSH
58767: LD_INT 4
58769: PLUS
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: ST_TO_ADDR
// end ; 1 :
58786: GO 59486
58788: LD_INT 1
58790: DOUBLE
58791: EQUAL
58792: IFTRUE 58796
58794: GO 58929
58796: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58797: LD_ADDR_VAR 0 5
58801: PUSH
58802: LD_VAR 0 1
58806: PUSH
58807: LD_VAR 0 2
58811: PUSH
58812: LD_INT 4
58814: MINUS
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: PUSH
58824: LD_VAR 0 1
58828: PUSH
58829: LD_INT 3
58831: MINUS
58832: PUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_INT 3
58840: MINUS
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: PUSH
58850: LD_VAR 0 1
58854: PUSH
58855: LD_INT 4
58857: MINUS
58858: PUSH
58859: LD_VAR 0 2
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: PUSH
58872: LD_VAR 0 1
58876: PUSH
58877: LD_VAR 0 2
58881: PUSH
58882: LD_INT 3
58884: PLUS
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: PUSH
58894: LD_VAR 0 1
58898: PUSH
58899: LD_INT 4
58901: PLUS
58902: PUSH
58903: LD_VAR 0 2
58907: PUSH
58908: LD_INT 4
58910: PLUS
58911: PUSH
58912: LD_INT 5
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// end ; 2 :
58927: GO 59486
58929: LD_INT 2
58931: DOUBLE
58932: EQUAL
58933: IFTRUE 58937
58935: GO 59066
58937: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58938: LD_ADDR_VAR 0 5
58942: PUSH
58943: LD_VAR 0 1
58947: PUSH
58948: LD_VAR 0 2
58952: PUSH
58953: LD_INT 3
58955: MINUS
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: PUSH
58965: LD_VAR 0 1
58969: PUSH
58970: LD_INT 4
58972: PLUS
58973: PUSH
58974: LD_VAR 0 2
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: LD_VAR 0 1
58991: PUSH
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 4
58999: PLUS
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: LD_VAR 0 1
59013: PUSH
59014: LD_INT 3
59016: MINUS
59017: PUSH
59018: LD_VAR 0 2
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: PUSH
59031: LD_VAR 0 1
59035: PUSH
59036: LD_INT 4
59038: MINUS
59039: PUSH
59040: LD_VAR 0 2
59044: PUSH
59045: LD_INT 4
59047: MINUS
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// end ; 3 :
59064: GO 59486
59066: LD_INT 3
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59074
59072: GO 59207
59074: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59075: LD_ADDR_VAR 0 5
59079: PUSH
59080: LD_VAR 0 1
59084: PUSH
59085: LD_INT 3
59087: PLUS
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_INT 4
59109: PLUS
59110: PUSH
59111: LD_VAR 0 2
59115: PUSH
59116: LD_INT 4
59118: PLUS
59119: PUSH
59120: LD_INT 5
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: PUSH
59128: LD_VAR 0 1
59132: PUSH
59133: LD_INT 4
59135: MINUS
59136: PUSH
59137: LD_VAR 0 2
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: PUSH
59150: LD_VAR 0 1
59154: PUSH
59155: LD_VAR 0 2
59159: PUSH
59160: LD_INT 4
59162: MINUS
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: PUSH
59172: LD_VAR 0 1
59176: PUSH
59177: LD_INT 3
59179: MINUS
59180: PUSH
59181: LD_VAR 0 2
59185: PUSH
59186: LD_INT 3
59188: MINUS
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: ST_TO_ADDR
// end ; 4 :
59205: GO 59486
59207: LD_INT 4
59209: DOUBLE
59210: EQUAL
59211: IFTRUE 59215
59213: GO 59348
59215: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59216: LD_ADDR_VAR 0 5
59220: PUSH
59221: LD_VAR 0 1
59225: PUSH
59226: LD_VAR 0 2
59230: PUSH
59231: LD_INT 4
59233: PLUS
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: PUSH
59243: LD_VAR 0 1
59247: PUSH
59248: LD_INT 3
59250: PLUS
59251: PUSH
59252: LD_VAR 0 2
59256: PUSH
59257: LD_INT 3
59259: PLUS
59260: PUSH
59261: LD_INT 5
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: PUSH
59269: LD_VAR 0 1
59273: PUSH
59274: LD_INT 4
59276: PLUS
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: PUSH
59291: LD_VAR 0 1
59295: PUSH
59296: LD_VAR 0 2
59300: PUSH
59301: LD_INT 3
59303: MINUS
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: PUSH
59313: LD_VAR 0 1
59317: PUSH
59318: LD_INT 4
59320: MINUS
59321: PUSH
59322: LD_VAR 0 2
59326: PUSH
59327: LD_INT 4
59329: MINUS
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// end ; 5 :
59346: GO 59486
59348: LD_INT 5
59350: DOUBLE
59351: EQUAL
59352: IFTRUE 59356
59354: GO 59485
59356: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59357: LD_ADDR_VAR 0 5
59361: PUSH
59362: LD_VAR 0 1
59366: PUSH
59367: LD_INT 4
59369: MINUS
59370: PUSH
59371: LD_VAR 0 2
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: PUSH
59384: LD_VAR 0 1
59388: PUSH
59389: LD_VAR 0 2
59393: PUSH
59394: LD_INT 4
59396: MINUS
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: PUSH
59406: LD_VAR 0 1
59410: PUSH
59411: LD_INT 4
59413: PLUS
59414: PUSH
59415: LD_VAR 0 2
59419: PUSH
59420: LD_INT 4
59422: PLUS
59423: PUSH
59424: LD_INT 5
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: PUSH
59432: LD_VAR 0 1
59436: PUSH
59437: LD_INT 3
59439: PLUS
59440: PUSH
59441: LD_VAR 0 2
59445: PUSH
59446: LD_INT 4
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: PUSH
59454: LD_VAR 0 1
59458: PUSH
59459: LD_VAR 0 2
59463: PUSH
59464: LD_INT 3
59466: PLUS
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// end ; end ;
59483: GO 59486
59485: POP
// result := list ;
59486: LD_ADDR_VAR 0 4
59490: PUSH
59491: LD_VAR 0 5
59495: ST_TO_ADDR
// end ;
59496: LD_VAR 0 4
59500: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59501: LD_INT 0
59503: PPUSH
59504: PPUSH
59505: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59506: LD_VAR 0 1
59510: NOT
59511: PUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: LD_INT 4
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: IN
59535: NOT
59536: OR
59537: IFFALSE 59541
// exit ;
59539: GO 59624
// tmp := [ ] ;
59541: LD_ADDR_VAR 0 5
59545: PUSH
59546: EMPTY
59547: ST_TO_ADDR
// for i in units do
59548: LD_ADDR_VAR 0 4
59552: PUSH
59553: LD_VAR 0 1
59557: PUSH
59558: FOR_IN
59559: IFFALSE 59593
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59561: LD_ADDR_VAR 0 5
59565: PUSH
59566: LD_VAR 0 5
59570: PPUSH
59571: LD_VAR 0 4
59575: PPUSH
59576: LD_VAR 0 2
59580: PPUSH
59581: CALL_OW 259
59585: PPUSH
59586: CALL 60985 0 2
59590: ST_TO_ADDR
59591: GO 59558
59593: POP
59594: POP
// if not tmp then
59595: LD_VAR 0 5
59599: NOT
59600: IFFALSE 59604
// exit ;
59602: GO 59624
// result := SortListByListDesc ( units , tmp ) ;
59604: LD_ADDR_VAR 0 3
59608: PUSH
59609: LD_VAR 0 1
59613: PPUSH
59614: LD_VAR 0 5
59618: PPUSH
59619: CALL_OW 77
59623: ST_TO_ADDR
// end ;
59624: LD_VAR 0 3
59628: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59629: LD_INT 0
59631: PPUSH
59632: PPUSH
59633: PPUSH
// result := false ;
59634: LD_ADDR_VAR 0 3
59638: PUSH
59639: LD_INT 0
59641: ST_TO_ADDR
// if not building then
59642: LD_VAR 0 2
59646: NOT
59647: IFFALSE 59651
// exit ;
59649: GO 59789
// x := GetX ( building ) ;
59651: LD_ADDR_VAR 0 4
59655: PUSH
59656: LD_VAR 0 2
59660: PPUSH
59661: CALL_OW 250
59665: ST_TO_ADDR
// y := GetY ( building ) ;
59666: LD_ADDR_VAR 0 5
59670: PUSH
59671: LD_VAR 0 2
59675: PPUSH
59676: CALL_OW 251
59680: ST_TO_ADDR
// if not x or not y then
59681: LD_VAR 0 4
59685: NOT
59686: PUSH
59687: LD_VAR 0 5
59691: NOT
59692: OR
59693: IFFALSE 59697
// exit ;
59695: GO 59789
// if GetTaskList ( unit ) then
59697: LD_VAR 0 1
59701: PPUSH
59702: CALL_OW 437
59706: IFFALSE 59789
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59708: LD_STRING e
59710: PUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 437
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: EQUAL
59729: PUSH
59730: LD_VAR 0 4
59734: PUSH
59735: LD_VAR 0 1
59739: PPUSH
59740: CALL_OW 437
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: PUSH
59749: LD_INT 2
59751: ARRAY
59752: EQUAL
59753: AND
59754: PUSH
59755: LD_VAR 0 5
59759: PUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: CALL_OW 437
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PUSH
59774: LD_INT 3
59776: ARRAY
59777: EQUAL
59778: AND
59779: IFFALSE 59789
// result := true end ;
59781: LD_ADDR_VAR 0 3
59785: PUSH
59786: LD_INT 1
59788: ST_TO_ADDR
// end ;
59789: LD_VAR 0 3
59793: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59794: LD_INT 0
59796: PPUSH
// result := false ;
59797: LD_ADDR_VAR 0 4
59801: PUSH
59802: LD_INT 0
59804: ST_TO_ADDR
// if GetTaskList ( unit ) then
59805: LD_VAR 0 1
59809: PPUSH
59810: CALL_OW 437
59814: IFFALSE 59897
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59816: LD_STRING M
59818: PUSH
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 437
59828: PUSH
59829: LD_INT 1
59831: ARRAY
59832: PUSH
59833: LD_INT 1
59835: ARRAY
59836: EQUAL
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: CALL_OW 437
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PUSH
59857: LD_INT 2
59859: ARRAY
59860: EQUAL
59861: AND
59862: PUSH
59863: LD_VAR 0 3
59867: PUSH
59868: LD_VAR 0 1
59872: PPUSH
59873: CALL_OW 437
59877: PUSH
59878: LD_INT 1
59880: ARRAY
59881: PUSH
59882: LD_INT 3
59884: ARRAY
59885: EQUAL
59886: AND
59887: IFFALSE 59897
// result := true ;
59889: LD_ADDR_VAR 0 4
59893: PUSH
59894: LD_INT 1
59896: ST_TO_ADDR
// end ; end ;
59897: LD_VAR 0 4
59901: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59902: LD_INT 0
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
// if not unit or not area then
59908: LD_VAR 0 1
59912: NOT
59913: PUSH
59914: LD_VAR 0 2
59918: NOT
59919: OR
59920: IFFALSE 59924
// exit ;
59922: GO 60088
// tmp := AreaToList ( area , i ) ;
59924: LD_ADDR_VAR 0 6
59928: PUSH
59929: LD_VAR 0 2
59933: PPUSH
59934: LD_VAR 0 5
59938: PPUSH
59939: CALL_OW 517
59943: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59944: LD_ADDR_VAR 0 5
59948: PUSH
59949: DOUBLE
59950: LD_INT 1
59952: DEC
59953: ST_TO_ADDR
59954: LD_VAR 0 6
59958: PUSH
59959: LD_INT 1
59961: ARRAY
59962: PUSH
59963: FOR_TO
59964: IFFALSE 60086
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59966: LD_ADDR_VAR 0 7
59970: PUSH
59971: LD_VAR 0 6
59975: PUSH
59976: LD_INT 1
59978: ARRAY
59979: PUSH
59980: LD_VAR 0 5
59984: ARRAY
59985: PUSH
59986: LD_VAR 0 6
59990: PUSH
59991: LD_INT 2
59993: ARRAY
59994: PUSH
59995: LD_VAR 0 5
59999: ARRAY
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60005: LD_VAR 0 7
60009: PUSH
60010: LD_INT 1
60012: ARRAY
60013: PPUSH
60014: LD_VAR 0 7
60018: PUSH
60019: LD_INT 2
60021: ARRAY
60022: PPUSH
60023: CALL_OW 428
60027: PUSH
60028: LD_INT 0
60030: EQUAL
60031: IFFALSE 60084
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60033: LD_VAR 0 1
60037: PPUSH
60038: LD_VAR 0 7
60042: PUSH
60043: LD_INT 1
60045: ARRAY
60046: PPUSH
60047: LD_VAR 0 7
60051: PUSH
60052: LD_INT 2
60054: ARRAY
60055: PPUSH
60056: LD_VAR 0 3
60060: PPUSH
60061: CALL_OW 48
// result := IsPlaced ( unit ) ;
60065: LD_ADDR_VAR 0 4
60069: PUSH
60070: LD_VAR 0 1
60074: PPUSH
60075: CALL_OW 305
60079: ST_TO_ADDR
// exit ;
60080: POP
60081: POP
60082: GO 60088
// end ; end ;
60084: GO 59963
60086: POP
60087: POP
// end ;
60088: LD_VAR 0 4
60092: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60093: LD_INT 0
60095: PPUSH
60096: PPUSH
60097: PPUSH
// if not side or side > 8 then
60098: LD_VAR 0 1
60102: NOT
60103: PUSH
60104: LD_VAR 0 1
60108: PUSH
60109: LD_INT 8
60111: GREATER
60112: OR
60113: IFFALSE 60117
// exit ;
60115: GO 60304
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60117: LD_ADDR_VAR 0 4
60121: PUSH
60122: LD_INT 22
60124: PUSH
60125: LD_VAR 0 1
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 21
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PPUSH
60148: CALL_OW 69
60152: ST_TO_ADDR
// if not tmp then
60153: LD_VAR 0 4
60157: NOT
60158: IFFALSE 60162
// exit ;
60160: GO 60304
// enable_addtolog := true ;
60162: LD_ADDR_OWVAR 81
60166: PUSH
60167: LD_INT 1
60169: ST_TO_ADDR
// AddToLog ( [ ) ;
60170: LD_STRING [
60172: PPUSH
60173: CALL_OW 561
// for i in tmp do
60177: LD_ADDR_VAR 0 3
60181: PUSH
60182: LD_VAR 0 4
60186: PUSH
60187: FOR_IN
60188: IFFALSE 60295
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60190: LD_STRING [
60192: PUSH
60193: LD_VAR 0 3
60197: PPUSH
60198: CALL_OW 266
60202: STR
60203: PUSH
60204: LD_STRING , 
60206: STR
60207: PUSH
60208: LD_VAR 0 3
60212: PPUSH
60213: CALL_OW 250
60217: STR
60218: PUSH
60219: LD_STRING , 
60221: STR
60222: PUSH
60223: LD_VAR 0 3
60227: PPUSH
60228: CALL_OW 251
60232: STR
60233: PUSH
60234: LD_STRING , 
60236: STR
60237: PUSH
60238: LD_VAR 0 3
60242: PPUSH
60243: CALL_OW 254
60247: STR
60248: PUSH
60249: LD_STRING , 
60251: STR
60252: PUSH
60253: LD_VAR 0 3
60257: PPUSH
60258: LD_INT 1
60260: PPUSH
60261: CALL_OW 268
60265: STR
60266: PUSH
60267: LD_STRING , 
60269: STR
60270: PUSH
60271: LD_VAR 0 3
60275: PPUSH
60276: LD_INT 2
60278: PPUSH
60279: CALL_OW 268
60283: STR
60284: PUSH
60285: LD_STRING ],
60287: STR
60288: PPUSH
60289: CALL_OW 561
// end ;
60293: GO 60187
60295: POP
60296: POP
// AddToLog ( ]; ) ;
60297: LD_STRING ];
60299: PPUSH
60300: CALL_OW 561
// end ;
60304: LD_VAR 0 2
60308: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60309: LD_INT 0
60311: PPUSH
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
// if not area or not rate or not max then
60316: LD_VAR 0 1
60320: NOT
60321: PUSH
60322: LD_VAR 0 2
60326: NOT
60327: OR
60328: PUSH
60329: LD_VAR 0 4
60333: NOT
60334: OR
60335: IFFALSE 60339
// exit ;
60337: GO 60528
// while 1 do
60339: LD_INT 1
60341: IFFALSE 60528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60343: LD_ADDR_VAR 0 9
60347: PUSH
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_INT 1
60355: PPUSH
60356: CALL_OW 287
60360: PUSH
60361: LD_INT 10
60363: MUL
60364: ST_TO_ADDR
// r := rate / 10 ;
60365: LD_ADDR_VAR 0 7
60369: PUSH
60370: LD_VAR 0 2
60374: PUSH
60375: LD_INT 10
60377: DIVREAL
60378: ST_TO_ADDR
// time := 1 1$00 ;
60379: LD_ADDR_VAR 0 8
60383: PUSH
60384: LD_INT 2100
60386: ST_TO_ADDR
// if amount < min then
60387: LD_VAR 0 9
60391: PUSH
60392: LD_VAR 0 3
60396: LESS
60397: IFFALSE 60415
// r := r * 2 else
60399: LD_ADDR_VAR 0 7
60403: PUSH
60404: LD_VAR 0 7
60408: PUSH
60409: LD_INT 2
60411: MUL
60412: ST_TO_ADDR
60413: GO 60441
// if amount > max then
60415: LD_VAR 0 9
60419: PUSH
60420: LD_VAR 0 4
60424: GREATER
60425: IFFALSE 60441
// r := r / 2 ;
60427: LD_ADDR_VAR 0 7
60431: PUSH
60432: LD_VAR 0 7
60436: PUSH
60437: LD_INT 2
60439: DIVREAL
60440: ST_TO_ADDR
// time := time / r ;
60441: LD_ADDR_VAR 0 8
60445: PUSH
60446: LD_VAR 0 8
60450: PUSH
60451: LD_VAR 0 7
60455: DIVREAL
60456: ST_TO_ADDR
// if time < 0 then
60457: LD_VAR 0 8
60461: PUSH
60462: LD_INT 0
60464: LESS
60465: IFFALSE 60482
// time := time * - 1 ;
60467: LD_ADDR_VAR 0 8
60471: PUSH
60472: LD_VAR 0 8
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: MUL
60481: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60482: LD_VAR 0 8
60486: PUSH
60487: LD_INT 35
60489: PPUSH
60490: LD_INT 875
60492: PPUSH
60493: CALL_OW 12
60497: PLUS
60498: PPUSH
60499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60503: LD_INT 1
60505: PPUSH
60506: LD_INT 5
60508: PPUSH
60509: CALL_OW 12
60513: PPUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: LD_INT 1
60521: PPUSH
60522: CALL_OW 55
// end ;
60526: GO 60339
// end ;
60528: LD_VAR 0 5
60532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60533: LD_INT 0
60535: PPUSH
60536: PPUSH
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
60542: PPUSH
// if not turrets or not factories then
60543: LD_VAR 0 1
60547: NOT
60548: PUSH
60549: LD_VAR 0 2
60553: NOT
60554: OR
60555: IFFALSE 60559
// exit ;
60557: GO 60866
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60559: LD_ADDR_VAR 0 10
60563: PUSH
60564: LD_INT 5
60566: PUSH
60567: LD_INT 6
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 5
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 24
60601: PUSH
60602: LD_INT 25
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 23
60611: PUSH
60612: LD_INT 27
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 42
60625: PUSH
60626: LD_INT 43
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 44
60635: PUSH
60636: LD_INT 46
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 45
60645: PUSH
60646: LD_INT 47
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// result := [ ] ;
60663: LD_ADDR_VAR 0 3
60667: PUSH
60668: EMPTY
60669: ST_TO_ADDR
// for i in turrets do
60670: LD_ADDR_VAR 0 4
60674: PUSH
60675: LD_VAR 0 1
60679: PUSH
60680: FOR_IN
60681: IFFALSE 60864
// begin nat := GetNation ( i ) ;
60683: LD_ADDR_VAR 0 7
60687: PUSH
60688: LD_VAR 0 4
60692: PPUSH
60693: CALL_OW 248
60697: ST_TO_ADDR
// weapon := 0 ;
60698: LD_ADDR_VAR 0 8
60702: PUSH
60703: LD_INT 0
60705: ST_TO_ADDR
// if not nat then
60706: LD_VAR 0 7
60710: NOT
60711: IFFALSE 60715
// continue ;
60713: GO 60680
// for j in list [ nat ] do
60715: LD_ADDR_VAR 0 5
60719: PUSH
60720: LD_VAR 0 10
60724: PUSH
60725: LD_VAR 0 7
60729: ARRAY
60730: PUSH
60731: FOR_IN
60732: IFFALSE 60773
// if GetBWeapon ( i ) = j [ 1 ] then
60734: LD_VAR 0 4
60738: PPUSH
60739: CALL_OW 269
60743: PUSH
60744: LD_VAR 0 5
60748: PUSH
60749: LD_INT 1
60751: ARRAY
60752: EQUAL
60753: IFFALSE 60771
// begin weapon := j [ 2 ] ;
60755: LD_ADDR_VAR 0 8
60759: PUSH
60760: LD_VAR 0 5
60764: PUSH
60765: LD_INT 2
60767: ARRAY
60768: ST_TO_ADDR
// break ;
60769: GO 60773
// end ;
60771: GO 60731
60773: POP
60774: POP
// if not weapon then
60775: LD_VAR 0 8
60779: NOT
60780: IFFALSE 60784
// continue ;
60782: GO 60680
// for k in factories do
60784: LD_ADDR_VAR 0 6
60788: PUSH
60789: LD_VAR 0 2
60793: PUSH
60794: FOR_IN
60795: IFFALSE 60860
// begin weapons := AvailableWeaponList ( k ) ;
60797: LD_ADDR_VAR 0 9
60801: PUSH
60802: LD_VAR 0 6
60806: PPUSH
60807: CALL_OW 478
60811: ST_TO_ADDR
// if not weapons then
60812: LD_VAR 0 9
60816: NOT
60817: IFFALSE 60821
// continue ;
60819: GO 60794
// if weapon in weapons then
60821: LD_VAR 0 8
60825: PUSH
60826: LD_VAR 0 9
60830: IN
60831: IFFALSE 60858
// begin result := [ i , weapon ] ;
60833: LD_ADDR_VAR 0 3
60837: PUSH
60838: LD_VAR 0 4
60842: PUSH
60843: LD_VAR 0 8
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// exit ;
60852: POP
60853: POP
60854: POP
60855: POP
60856: GO 60866
// end ; end ;
60858: GO 60794
60860: POP
60861: POP
// end ;
60862: GO 60680
60864: POP
60865: POP
// end ;
60866: LD_VAR 0 3
60870: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60871: LD_INT 0
60873: PPUSH
// if not side or side > 8 then
60874: LD_VAR 0 3
60878: NOT
60879: PUSH
60880: LD_VAR 0 3
60884: PUSH
60885: LD_INT 8
60887: GREATER
60888: OR
60889: IFFALSE 60893
// exit ;
60891: GO 60952
// if not range then
60893: LD_VAR 0 4
60897: NOT
60898: IFFALSE 60909
// range := - 12 ;
60900: LD_ADDR_VAR 0 4
60904: PUSH
60905: LD_INT 12
60907: NEG
60908: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60909: LD_VAR 0 1
60913: PPUSH
60914: LD_VAR 0 2
60918: PPUSH
60919: LD_VAR 0 3
60923: PPUSH
60924: LD_VAR 0 4
60928: PPUSH
60929: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60933: LD_VAR 0 1
60937: PPUSH
60938: LD_VAR 0 2
60942: PPUSH
60943: LD_VAR 0 3
60947: PPUSH
60948: CALL_OW 331
// end ;
60952: LD_VAR 0 5
60956: RET
// export function Video ( mode ) ; begin
60957: LD_INT 0
60959: PPUSH
// ingame_video = mode ;
60960: LD_ADDR_OWVAR 52
60964: PUSH
60965: LD_VAR 0 1
60969: ST_TO_ADDR
// interface_hidden = mode ;
60970: LD_ADDR_OWVAR 54
60974: PUSH
60975: LD_VAR 0 1
60979: ST_TO_ADDR
// end ;
60980: LD_VAR 0 2
60984: RET
// export function Join ( array , element ) ; begin
60985: LD_INT 0
60987: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_VAR 0 1
60997: PPUSH
60998: LD_VAR 0 1
61002: PUSH
61003: LD_INT 1
61005: PLUS
61006: PPUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: CALL_OW 1
61016: ST_TO_ADDR
// end ;
61017: LD_VAR 0 3
61021: RET
// export function JoinUnion ( array , element ) ; begin
61022: LD_INT 0
61024: PPUSH
// result := array union element ;
61025: LD_ADDR_VAR 0 3
61029: PUSH
61030: LD_VAR 0 1
61034: PUSH
61035: LD_VAR 0 2
61039: UNION
61040: ST_TO_ADDR
// end ;
61041: LD_VAR 0 3
61045: RET
// export function GetBehemoths ( side ) ; begin
61046: LD_INT 0
61048: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61049: LD_ADDR_VAR 0 2
61053: PUSH
61054: LD_INT 22
61056: PUSH
61057: LD_VAR 0 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 31
61068: PUSH
61069: LD_INT 25
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PPUSH
61080: CALL_OW 69
61084: ST_TO_ADDR
// end ;
61085: LD_VAR 0 2
61089: RET
// export function Shuffle ( array ) ; var i , index ; begin
61090: LD_INT 0
61092: PPUSH
61093: PPUSH
61094: PPUSH
// result := [ ] ;
61095: LD_ADDR_VAR 0 2
61099: PUSH
61100: EMPTY
61101: ST_TO_ADDR
// if not array then
61102: LD_VAR 0 1
61106: NOT
61107: IFFALSE 61111
// exit ;
61109: GO 61210
// Randomize ;
61111: CALL_OW 10
// for i = array downto 1 do
61115: LD_ADDR_VAR 0 3
61119: PUSH
61120: DOUBLE
61121: LD_VAR 0 1
61125: INC
61126: ST_TO_ADDR
61127: LD_INT 1
61129: PUSH
61130: FOR_DOWNTO
61131: IFFALSE 61208
// begin index := rand ( 1 , array ) ;
61133: LD_ADDR_VAR 0 4
61137: PUSH
61138: LD_INT 1
61140: PPUSH
61141: LD_VAR 0 1
61145: PPUSH
61146: CALL_OW 12
61150: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61151: LD_ADDR_VAR 0 2
61155: PUSH
61156: LD_VAR 0 2
61160: PPUSH
61161: LD_VAR 0 2
61165: PUSH
61166: LD_INT 1
61168: PLUS
61169: PPUSH
61170: LD_VAR 0 1
61174: PUSH
61175: LD_VAR 0 4
61179: ARRAY
61180: PPUSH
61181: CALL_OW 2
61185: ST_TO_ADDR
// array := Delete ( array , index ) ;
61186: LD_ADDR_VAR 0 1
61190: PUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: LD_VAR 0 4
61200: PPUSH
61201: CALL_OW 3
61205: ST_TO_ADDR
// end ;
61206: GO 61130
61208: POP
61209: POP
// end ;
61210: LD_VAR 0 2
61214: RET
// export function GetBaseMaterials ( base ) ; begin
61215: LD_INT 0
61217: PPUSH
// result := [ 0 , 0 , 0 ] ;
61218: LD_ADDR_VAR 0 2
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// if not base then
61237: LD_VAR 0 1
61241: NOT
61242: IFFALSE 61246
// exit ;
61244: GO 61295
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61246: LD_ADDR_VAR 0 2
61250: PUSH
61251: LD_VAR 0 1
61255: PPUSH
61256: LD_INT 1
61258: PPUSH
61259: CALL_OW 275
61263: PUSH
61264: LD_VAR 0 1
61268: PPUSH
61269: LD_INT 2
61271: PPUSH
61272: CALL_OW 275
61276: PUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: LD_INT 3
61284: PPUSH
61285: CALL_OW 275
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: LIST
61294: ST_TO_ADDR
// end ;
61295: LD_VAR 0 2
61299: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
// result := array ;
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_VAR 0 1
61313: ST_TO_ADDR
// if size >= result then
61314: LD_VAR 0 2
61318: PUSH
61319: LD_VAR 0 3
61323: GREATEREQUAL
61324: IFFALSE 61328
// exit ;
61326: GO 61378
// if size then
61328: LD_VAR 0 2
61332: IFFALSE 61378
// for i := array downto size do
61334: LD_ADDR_VAR 0 4
61338: PUSH
61339: DOUBLE
61340: LD_VAR 0 1
61344: INC
61345: ST_TO_ADDR
61346: LD_VAR 0 2
61350: PUSH
61351: FOR_DOWNTO
61352: IFFALSE 61376
// result := Delete ( result , result ) ;
61354: LD_ADDR_VAR 0 3
61358: PUSH
61359: LD_VAR 0 3
61363: PPUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: CALL_OW 3
61373: ST_TO_ADDR
61374: GO 61351
61376: POP
61377: POP
// end ;
61378: LD_VAR 0 3
61382: RET
// export function ComExit ( unit ) ; var tmp ; begin
61383: LD_INT 0
61385: PPUSH
61386: PPUSH
// if not IsInUnit ( unit ) then
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 310
61396: NOT
61397: IFFALSE 61401
// exit ;
61399: GO 61461
// tmp := IsInUnit ( unit ) ;
61401: LD_ADDR_VAR 0 3
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 310
61415: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 247
61425: PUSH
61426: LD_INT 2
61428: EQUAL
61429: IFFALSE 61442
// ComExitVehicle ( unit ) else
61431: LD_VAR 0 1
61435: PPUSH
61436: CALL_OW 121
61440: GO 61451
// ComExitBuilding ( unit ) ;
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 122
// result := tmp ;
61451: LD_ADDR_VAR 0 2
61455: PUSH
61456: LD_VAR 0 3
61460: ST_TO_ADDR
// end ;
61461: LD_VAR 0 2
61465: RET
// export function ComExitAll ( units ) ; var i ; begin
61466: LD_INT 0
61468: PPUSH
61469: PPUSH
// if not units then
61470: LD_VAR 0 1
61474: NOT
61475: IFFALSE 61479
// exit ;
61477: GO 61505
// for i in units do
61479: LD_ADDR_VAR 0 3
61483: PUSH
61484: LD_VAR 0 1
61488: PUSH
61489: FOR_IN
61490: IFFALSE 61503
// ComExit ( i ) ;
61492: LD_VAR 0 3
61496: PPUSH
61497: CALL 61383 0 1
61501: GO 61489
61503: POP
61504: POP
// end ;
61505: LD_VAR 0 2
61509: RET
// export function ResetHc ; begin
61510: LD_INT 0
61512: PPUSH
// InitHc ;
61513: CALL_OW 19
// hc_importance := 0 ;
61517: LD_ADDR_OWVAR 32
61521: PUSH
61522: LD_INT 0
61524: ST_TO_ADDR
// end ;
61525: LD_VAR 0 1
61529: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61530: LD_INT 0
61532: PPUSH
61533: PPUSH
61534: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61535: LD_ADDR_VAR 0 6
61539: PUSH
61540: LD_VAR 0 1
61544: PUSH
61545: LD_VAR 0 3
61549: PLUS
61550: PUSH
61551: LD_INT 2
61553: DIV
61554: ST_TO_ADDR
// if _x < 0 then
61555: LD_VAR 0 6
61559: PUSH
61560: LD_INT 0
61562: LESS
61563: IFFALSE 61580
// _x := _x * - 1 ;
61565: LD_ADDR_VAR 0 6
61569: PUSH
61570: LD_VAR 0 6
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: MUL
61579: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61580: LD_ADDR_VAR 0 7
61584: PUSH
61585: LD_VAR 0 2
61589: PUSH
61590: LD_VAR 0 4
61594: PLUS
61595: PUSH
61596: LD_INT 2
61598: DIV
61599: ST_TO_ADDR
// if _y < 0 then
61600: LD_VAR 0 7
61604: PUSH
61605: LD_INT 0
61607: LESS
61608: IFFALSE 61625
// _y := _y * - 1 ;
61610: LD_ADDR_VAR 0 7
61614: PUSH
61615: LD_VAR 0 7
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: MUL
61624: ST_TO_ADDR
// result := [ _x , _y ] ;
61625: LD_ADDR_VAR 0 5
61629: PUSH
61630: LD_VAR 0 6
61634: PUSH
61635: LD_VAR 0 7
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: ST_TO_ADDR
// end ;
61644: LD_VAR 0 5
61648: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61649: LD_INT 0
61651: PPUSH
61652: PPUSH
61653: PPUSH
61654: PPUSH
// task := GetTaskList ( unit ) ;
61655: LD_ADDR_VAR 0 7
61659: PUSH
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 437
61669: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61670: LD_VAR 0 7
61674: NOT
61675: PUSH
61676: LD_VAR 0 1
61680: PPUSH
61681: LD_VAR 0 2
61685: PPUSH
61686: CALL_OW 308
61690: NOT
61691: AND
61692: IFFALSE 61696
// exit ;
61694: GO 61814
// if IsInArea ( unit , area ) then
61696: LD_VAR 0 1
61700: PPUSH
61701: LD_VAR 0 2
61705: PPUSH
61706: CALL_OW 308
61710: IFFALSE 61728
// begin ComMoveToArea ( unit , goAway ) ;
61712: LD_VAR 0 1
61716: PPUSH
61717: LD_VAR 0 3
61721: PPUSH
61722: CALL_OW 113
// exit ;
61726: GO 61814
// end ; if task [ 1 ] [ 1 ] <> M then
61728: LD_VAR 0 7
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PUSH
61737: LD_INT 1
61739: ARRAY
61740: PUSH
61741: LD_STRING M
61743: NONEQUAL
61744: IFFALSE 61748
// exit ;
61746: GO 61814
// x := task [ 1 ] [ 2 ] ;
61748: LD_ADDR_VAR 0 5
61752: PUSH
61753: LD_VAR 0 7
61757: PUSH
61758: LD_INT 1
61760: ARRAY
61761: PUSH
61762: LD_INT 2
61764: ARRAY
61765: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61766: LD_ADDR_VAR 0 6
61770: PUSH
61771: LD_VAR 0 7
61775: PUSH
61776: LD_INT 1
61778: ARRAY
61779: PUSH
61780: LD_INT 3
61782: ARRAY
61783: ST_TO_ADDR
// if InArea ( x , y , area ) then
61784: LD_VAR 0 5
61788: PPUSH
61789: LD_VAR 0 6
61793: PPUSH
61794: LD_VAR 0 2
61798: PPUSH
61799: CALL_OW 309
61803: IFFALSE 61814
// ComStop ( unit ) ;
61805: LD_VAR 0 1
61809: PPUSH
61810: CALL_OW 141
// end ;
61814: LD_VAR 0 4
61818: RET
// export function Abs ( value ) ; begin
61819: LD_INT 0
61821: PPUSH
// result := value ;
61822: LD_ADDR_VAR 0 2
61826: PUSH
61827: LD_VAR 0 1
61831: ST_TO_ADDR
// if value < 0 then
61832: LD_VAR 0 1
61836: PUSH
61837: LD_INT 0
61839: LESS
61840: IFFALSE 61857
// result := value * - 1 ;
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: LD_VAR 0 1
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: MUL
61856: ST_TO_ADDR
// end ;
61857: LD_VAR 0 2
61861: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61862: LD_INT 0
61864: PPUSH
61865: PPUSH
61866: PPUSH
61867: PPUSH
61868: PPUSH
61869: PPUSH
61870: PPUSH
61871: PPUSH
// if not unit or not building then
61872: LD_VAR 0 1
61876: NOT
61877: PUSH
61878: LD_VAR 0 2
61882: NOT
61883: OR
61884: IFFALSE 61888
// exit ;
61886: GO 62114
// x := GetX ( building ) ;
61888: LD_ADDR_VAR 0 4
61892: PUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: CALL_OW 250
61902: ST_TO_ADDR
// y := GetY ( building ) ;
61903: LD_ADDR_VAR 0 6
61907: PUSH
61908: LD_VAR 0 2
61912: PPUSH
61913: CALL_OW 251
61917: ST_TO_ADDR
// d := GetDir ( building ) ;
61918: LD_ADDR_VAR 0 8
61922: PUSH
61923: LD_VAR 0 2
61927: PPUSH
61928: CALL_OW 254
61932: ST_TO_ADDR
// r := 4 ;
61933: LD_ADDR_VAR 0 9
61937: PUSH
61938: LD_INT 4
61940: ST_TO_ADDR
// for i := 1 to 5 do
61941: LD_ADDR_VAR 0 10
61945: PUSH
61946: DOUBLE
61947: LD_INT 1
61949: DEC
61950: ST_TO_ADDR
61951: LD_INT 5
61953: PUSH
61954: FOR_TO
61955: IFFALSE 62112
// begin _x := ShiftX ( x , d , r + i ) ;
61957: LD_ADDR_VAR 0 5
61961: PUSH
61962: LD_VAR 0 4
61966: PPUSH
61967: LD_VAR 0 8
61971: PPUSH
61972: LD_VAR 0 9
61976: PUSH
61977: LD_VAR 0 10
61981: PLUS
61982: PPUSH
61983: CALL_OW 272
61987: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61988: LD_ADDR_VAR 0 7
61992: PUSH
61993: LD_VAR 0 6
61997: PPUSH
61998: LD_VAR 0 8
62002: PPUSH
62003: LD_VAR 0 9
62007: PUSH
62008: LD_VAR 0 10
62012: PLUS
62013: PPUSH
62014: CALL_OW 273
62018: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62019: LD_VAR 0 5
62023: PPUSH
62024: LD_VAR 0 7
62028: PPUSH
62029: CALL_OW 488
62033: PUSH
62034: LD_VAR 0 5
62038: PPUSH
62039: LD_VAR 0 7
62043: PPUSH
62044: CALL_OW 428
62048: PPUSH
62049: CALL_OW 247
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: IN
62064: NOT
62065: AND
62066: IFFALSE 62110
// begin ComMoveXY ( unit , _x , _y ) ;
62068: LD_VAR 0 1
62072: PPUSH
62073: LD_VAR 0 5
62077: PPUSH
62078: LD_VAR 0 7
62082: PPUSH
62083: CALL_OW 111
// result := [ _x , _y ] ;
62087: LD_ADDR_VAR 0 3
62091: PUSH
62092: LD_VAR 0 5
62096: PUSH
62097: LD_VAR 0 7
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// exit ;
62106: POP
62107: POP
62108: GO 62114
// end ; end ;
62110: GO 61954
62112: POP
62113: POP
// end ;
62114: LD_VAR 0 3
62118: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62119: LD_INT 0
62121: PPUSH
62122: PPUSH
62123: PPUSH
// result := 0 ;
62124: LD_ADDR_VAR 0 3
62128: PUSH
62129: LD_INT 0
62131: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62132: LD_VAR 0 1
62136: PUSH
62137: LD_INT 0
62139: LESS
62140: PUSH
62141: LD_VAR 0 1
62145: PUSH
62146: LD_INT 8
62148: GREATER
62149: OR
62150: PUSH
62151: LD_VAR 0 2
62155: PUSH
62156: LD_INT 0
62158: LESS
62159: OR
62160: PUSH
62161: LD_VAR 0 2
62165: PUSH
62166: LD_INT 8
62168: GREATER
62169: OR
62170: IFFALSE 62174
// exit ;
62172: GO 62249
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62174: LD_ADDR_VAR 0 4
62178: PUSH
62179: LD_INT 22
62181: PUSH
62182: LD_VAR 0 2
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 69
62195: PUSH
62196: FOR_IN
62197: IFFALSE 62247
// begin un := UnitShoot ( i ) ;
62199: LD_ADDR_VAR 0 5
62203: PUSH
62204: LD_VAR 0 4
62208: PPUSH
62209: CALL_OW 504
62213: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62214: LD_VAR 0 5
62218: PPUSH
62219: CALL_OW 255
62223: PUSH
62224: LD_VAR 0 1
62228: EQUAL
62229: IFFALSE 62245
// begin result := un ;
62231: LD_ADDR_VAR 0 3
62235: PUSH
62236: LD_VAR 0 5
62240: ST_TO_ADDR
// exit ;
62241: POP
62242: POP
62243: GO 62249
// end ; end ;
62245: GO 62196
62247: POP
62248: POP
// end ;
62249: LD_VAR 0 3
62253: RET
// export function GetCargoBay ( units ) ; begin
62254: LD_INT 0
62256: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62257: LD_ADDR_VAR 0 2
62261: PUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: LD_INT 2
62269: PUSH
62270: LD_INT 34
62272: PUSH
62273: LD_INT 12
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 34
62282: PUSH
62283: LD_INT 51
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 34
62292: PUSH
62293: LD_INT 32
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 34
62302: PUSH
62303: LD_INT 89
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: PPUSH
62317: CALL_OW 72
62321: ST_TO_ADDR
// end ;
62322: LD_VAR 0 2
62326: RET
// export function Negate ( value ) ; begin
62327: LD_INT 0
62329: PPUSH
// result := not value ;
62330: LD_ADDR_VAR 0 2
62334: PUSH
62335: LD_VAR 0 1
62339: NOT
62340: ST_TO_ADDR
// end ;
62341: LD_VAR 0 2
62345: RET
// export function Inc ( value ) ; begin
62346: LD_INT 0
62348: PPUSH
// result := value + 1 ;
62349: LD_ADDR_VAR 0 2
62353: PUSH
62354: LD_VAR 0 1
62358: PUSH
62359: LD_INT 1
62361: PLUS
62362: ST_TO_ADDR
// end ;
62363: LD_VAR 0 2
62367: RET
// export function Dec ( value ) ; begin
62368: LD_INT 0
62370: PPUSH
// result := value - 1 ;
62371: LD_ADDR_VAR 0 2
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_INT 1
62383: MINUS
62384: ST_TO_ADDR
// end ;
62385: LD_VAR 0 2
62389: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62390: LD_INT 0
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
62399: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62400: LD_VAR 0 1
62404: PPUSH
62405: LD_VAR 0 2
62409: PPUSH
62410: CALL_OW 488
62414: NOT
62415: PUSH
62416: LD_VAR 0 3
62420: PPUSH
62421: LD_VAR 0 4
62425: PPUSH
62426: CALL_OW 488
62430: NOT
62431: OR
62432: IFFALSE 62445
// begin result := - 1 ;
62434: LD_ADDR_VAR 0 5
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: ST_TO_ADDR
// exit ;
62443: GO 62680
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62445: LD_ADDR_VAR 0 12
62449: PUSH
62450: LD_VAR 0 1
62454: PPUSH
62455: LD_VAR 0 2
62459: PPUSH
62460: LD_VAR 0 3
62464: PPUSH
62465: LD_VAR 0 4
62469: PPUSH
62470: CALL 61530 0 4
62474: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62475: LD_ADDR_VAR 0 11
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_VAR 0 2
62489: PPUSH
62490: LD_VAR 0 12
62494: PUSH
62495: LD_INT 1
62497: ARRAY
62498: PPUSH
62499: LD_VAR 0 12
62503: PUSH
62504: LD_INT 2
62506: ARRAY
62507: PPUSH
62508: CALL_OW 298
62512: ST_TO_ADDR
// distance := 9999 ;
62513: LD_ADDR_VAR 0 10
62517: PUSH
62518: LD_INT 9999
62520: ST_TO_ADDR
// for i := 0 to 5 do
62521: LD_ADDR_VAR 0 6
62525: PUSH
62526: DOUBLE
62527: LD_INT 0
62529: DEC
62530: ST_TO_ADDR
62531: LD_INT 5
62533: PUSH
62534: FOR_TO
62535: IFFALSE 62678
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62537: LD_ADDR_VAR 0 7
62541: PUSH
62542: LD_VAR 0 1
62546: PPUSH
62547: LD_VAR 0 6
62551: PPUSH
62552: LD_VAR 0 11
62556: PPUSH
62557: CALL_OW 272
62561: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62562: LD_ADDR_VAR 0 8
62566: PUSH
62567: LD_VAR 0 2
62571: PPUSH
62572: LD_VAR 0 6
62576: PPUSH
62577: LD_VAR 0 11
62581: PPUSH
62582: CALL_OW 273
62586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62587: LD_VAR 0 7
62591: PPUSH
62592: LD_VAR 0 8
62596: PPUSH
62597: CALL_OW 488
62601: NOT
62602: IFFALSE 62606
// continue ;
62604: GO 62534
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62606: LD_ADDR_VAR 0 9
62610: PUSH
62611: LD_VAR 0 12
62615: PUSH
62616: LD_INT 1
62618: ARRAY
62619: PPUSH
62620: LD_VAR 0 12
62624: PUSH
62625: LD_INT 2
62627: ARRAY
62628: PPUSH
62629: LD_VAR 0 7
62633: PPUSH
62634: LD_VAR 0 8
62638: PPUSH
62639: CALL_OW 298
62643: ST_TO_ADDR
// if tmp < distance then
62644: LD_VAR 0 9
62648: PUSH
62649: LD_VAR 0 10
62653: LESS
62654: IFFALSE 62676
// begin result := i ;
62656: LD_ADDR_VAR 0 5
62660: PUSH
62661: LD_VAR 0 6
62665: ST_TO_ADDR
// distance := tmp ;
62666: LD_ADDR_VAR 0 10
62670: PUSH
62671: LD_VAR 0 9
62675: ST_TO_ADDR
// end ; end ;
62676: GO 62534
62678: POP
62679: POP
// end ;
62680: LD_VAR 0 5
62684: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
// if not driver or not IsInUnit ( driver ) then
62689: LD_VAR 0 1
62693: NOT
62694: PUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: CALL_OW 310
62704: NOT
62705: OR
62706: IFFALSE 62710
// exit ;
62708: GO 62800
// vehicle := IsInUnit ( driver ) ;
62710: LD_ADDR_VAR 0 3
62714: PUSH
62715: LD_VAR 0 1
62719: PPUSH
62720: CALL_OW 310
62724: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62725: LD_VAR 0 1
62729: PPUSH
62730: LD_STRING \
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: PUSH
62760: LD_STRING E
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_VAR 0 3
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PPUSH
62796: CALL_OW 446
// end ;
62800: LD_VAR 0 2
62804: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62805: LD_INT 0
62807: PPUSH
62808: PPUSH
// if not driver or not IsInUnit ( driver ) then
62809: LD_VAR 0 1
62813: NOT
62814: PUSH
62815: LD_VAR 0 1
62819: PPUSH
62820: CALL_OW 310
62824: NOT
62825: OR
62826: IFFALSE 62830
// exit ;
62828: GO 62920
// vehicle := IsInUnit ( driver ) ;
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 310
62844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_STRING \
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: PUSH
62880: LD_STRING E
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_VAR 0 3
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PPUSH
62916: CALL_OW 447
// end ;
62920: LD_VAR 0 2
62924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62925: LD_INT 0
62927: PPUSH
62928: PPUSH
62929: PPUSH
// tmp := [ ] ;
62930: LD_ADDR_VAR 0 5
62934: PUSH
62935: EMPTY
62936: ST_TO_ADDR
// for i in units do
62937: LD_ADDR_VAR 0 4
62941: PUSH
62942: LD_VAR 0 1
62946: PUSH
62947: FOR_IN
62948: IFFALSE 62986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62950: LD_ADDR_VAR 0 5
62954: PUSH
62955: LD_VAR 0 5
62959: PPUSH
62960: LD_VAR 0 5
62964: PUSH
62965: LD_INT 1
62967: PLUS
62968: PPUSH
62969: LD_VAR 0 4
62973: PPUSH
62974: CALL_OW 256
62978: PPUSH
62979: CALL_OW 2
62983: ST_TO_ADDR
62984: GO 62947
62986: POP
62987: POP
// if not tmp then
62988: LD_VAR 0 5
62992: NOT
62993: IFFALSE 62997
// exit ;
62995: GO 63045
// if asc then
62997: LD_VAR 0 2
63001: IFFALSE 63025
// result := SortListByListAsc ( units , tmp ) else
63003: LD_ADDR_VAR 0 3
63007: PUSH
63008: LD_VAR 0 1
63012: PPUSH
63013: LD_VAR 0 5
63017: PPUSH
63018: CALL_OW 76
63022: ST_TO_ADDR
63023: GO 63045
// result := SortListByListDesc ( units , tmp ) ;
63025: LD_ADDR_VAR 0 3
63029: PUSH
63030: LD_VAR 0 1
63034: PPUSH
63035: LD_VAR 0 5
63039: PPUSH
63040: CALL_OW 77
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 3
63049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
// task := GetTaskList ( mech ) ;
63054: LD_ADDR_VAR 0 4
63058: PUSH
63059: LD_VAR 0 1
63063: PPUSH
63064: CALL_OW 437
63068: ST_TO_ADDR
// if not task then
63069: LD_VAR 0 4
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63120
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63078: LD_ADDR_VAR 0 3
63082: PUSH
63083: LD_VAR 0 4
63087: PUSH
63088: LD_INT 1
63090: ARRAY
63091: PUSH
63092: LD_INT 1
63094: ARRAY
63095: PUSH
63096: LD_STRING r
63098: EQUAL
63099: PUSH
63100: LD_VAR 0 4
63104: PUSH
63105: LD_INT 1
63107: ARRAY
63108: PUSH
63109: LD_INT 4
63111: ARRAY
63112: PUSH
63113: LD_VAR 0 2
63117: EQUAL
63118: AND
63119: ST_TO_ADDR
// end ;
63120: LD_VAR 0 3
63124: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63125: LD_INT 0
63127: PPUSH
// SetDir ( unit , d ) ;
63128: LD_VAR 0 1
63132: PPUSH
63133: LD_VAR 0 4
63137: PPUSH
63138: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63142: LD_VAR 0 1
63146: PPUSH
63147: LD_VAR 0 2
63151: PPUSH
63152: LD_VAR 0 3
63156: PPUSH
63157: LD_VAR 0 5
63161: PPUSH
63162: CALL_OW 48
// end ;
63166: LD_VAR 0 6
63170: RET
// export function ToNaturalNumber ( number ) ; begin
63171: LD_INT 0
63173: PPUSH
// result := number div 1 ;
63174: LD_ADDR_VAR 0 2
63178: PUSH
63179: LD_VAR 0 1
63183: PUSH
63184: LD_INT 1
63186: DIV
63187: ST_TO_ADDR
// if number < 0 then
63188: LD_VAR 0 1
63192: PUSH
63193: LD_INT 0
63195: LESS
63196: IFFALSE 63206
// result := 0 ;
63198: LD_ADDR_VAR 0 2
63202: PUSH
63203: LD_INT 0
63205: ST_TO_ADDR
// end ;
63206: LD_VAR 0 2
63210: RET
// export function SortByClass ( units , class ) ; var un ; begin
63211: LD_INT 0
63213: PPUSH
63214: PPUSH
// if not units or not class then
63215: LD_VAR 0 1
63219: NOT
63220: PUSH
63221: LD_VAR 0 2
63225: NOT
63226: OR
63227: IFFALSE 63231
// exit ;
63229: GO 63326
// result := [ ] ;
63231: LD_ADDR_VAR 0 3
63235: PUSH
63236: EMPTY
63237: ST_TO_ADDR
// for un in units do
63238: LD_ADDR_VAR 0 4
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: FOR_IN
63249: IFFALSE 63324
// if GetClass ( un ) = class then
63251: LD_VAR 0 4
63255: PPUSH
63256: CALL_OW 257
63260: PUSH
63261: LD_VAR 0 2
63265: EQUAL
63266: IFFALSE 63293
// result := Insert ( result , 1 , un ) else
63268: LD_ADDR_VAR 0 3
63272: PUSH
63273: LD_VAR 0 3
63277: PPUSH
63278: LD_INT 1
63280: PPUSH
63281: LD_VAR 0 4
63285: PPUSH
63286: CALL_OW 2
63290: ST_TO_ADDR
63291: GO 63322
// result := Replace ( result , result + 1 , un ) ;
63293: LD_ADDR_VAR 0 3
63297: PUSH
63298: LD_VAR 0 3
63302: PPUSH
63303: LD_VAR 0 3
63307: PUSH
63308: LD_INT 1
63310: PLUS
63311: PPUSH
63312: LD_VAR 0 4
63316: PPUSH
63317: CALL_OW 1
63321: ST_TO_ADDR
63322: GO 63248
63324: POP
63325: POP
// end ;
63326: LD_VAR 0 3
63330: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63331: LD_INT 0
63333: PPUSH
63334: PPUSH
63335: PPUSH
63336: PPUSH
63337: PPUSH
63338: PPUSH
63339: PPUSH
// result := [ ] ;
63340: LD_ADDR_VAR 0 4
63344: PUSH
63345: EMPTY
63346: ST_TO_ADDR
// if x - r < 0 then
63347: LD_VAR 0 1
63351: PUSH
63352: LD_VAR 0 3
63356: MINUS
63357: PUSH
63358: LD_INT 0
63360: LESS
63361: IFFALSE 63373
// min_x := 0 else
63363: LD_ADDR_VAR 0 8
63367: PUSH
63368: LD_INT 0
63370: ST_TO_ADDR
63371: GO 63389
// min_x := x - r ;
63373: LD_ADDR_VAR 0 8
63377: PUSH
63378: LD_VAR 0 1
63382: PUSH
63383: LD_VAR 0 3
63387: MINUS
63388: ST_TO_ADDR
// if y - r < 0 then
63389: LD_VAR 0 2
63393: PUSH
63394: LD_VAR 0 3
63398: MINUS
63399: PUSH
63400: LD_INT 0
63402: LESS
63403: IFFALSE 63415
// min_y := 0 else
63405: LD_ADDR_VAR 0 7
63409: PUSH
63410: LD_INT 0
63412: ST_TO_ADDR
63413: GO 63431
// min_y := y - r ;
63415: LD_ADDR_VAR 0 7
63419: PUSH
63420: LD_VAR 0 2
63424: PUSH
63425: LD_VAR 0 3
63429: MINUS
63430: ST_TO_ADDR
// max_x := x + r ;
63431: LD_ADDR_VAR 0 9
63435: PUSH
63436: LD_VAR 0 1
63440: PUSH
63441: LD_VAR 0 3
63445: PLUS
63446: ST_TO_ADDR
// max_y := y + r ;
63447: LD_ADDR_VAR 0 10
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_VAR 0 3
63461: PLUS
63462: ST_TO_ADDR
// for _x = min_x to max_x do
63463: LD_ADDR_VAR 0 5
63467: PUSH
63468: DOUBLE
63469: LD_VAR 0 8
63473: DEC
63474: ST_TO_ADDR
63475: LD_VAR 0 9
63479: PUSH
63480: FOR_TO
63481: IFFALSE 63582
// for _y = min_y to max_y do
63483: LD_ADDR_VAR 0 6
63487: PUSH
63488: DOUBLE
63489: LD_VAR 0 7
63493: DEC
63494: ST_TO_ADDR
63495: LD_VAR 0 10
63499: PUSH
63500: FOR_TO
63501: IFFALSE 63578
// begin if not ValidHex ( _x , _y ) then
63503: LD_VAR 0 5
63507: PPUSH
63508: LD_VAR 0 6
63512: PPUSH
63513: CALL_OW 488
63517: NOT
63518: IFFALSE 63522
// continue ;
63520: GO 63500
// if GetResourceTypeXY ( _x , _y ) then
63522: LD_VAR 0 5
63526: PPUSH
63527: LD_VAR 0 6
63531: PPUSH
63532: CALL_OW 283
63536: IFFALSE 63576
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63538: LD_ADDR_VAR 0 4
63542: PUSH
63543: LD_VAR 0 4
63547: PPUSH
63548: LD_VAR 0 4
63552: PUSH
63553: LD_INT 1
63555: PLUS
63556: PPUSH
63557: LD_VAR 0 5
63561: PUSH
63562: LD_VAR 0 6
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PPUSH
63571: CALL_OW 1
63575: ST_TO_ADDR
// end ;
63576: GO 63500
63578: POP
63579: POP
63580: GO 63480
63582: POP
63583: POP
// end ;
63584: LD_VAR 0 4
63588: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63589: LD_INT 0
63591: PPUSH
63592: PPUSH
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
// if not units then
63599: LD_VAR 0 1
63603: NOT
63604: IFFALSE 63608
// exit ;
63606: GO 64132
// result := UnitFilter ( units , [ f_ok ] ) ;
63608: LD_ADDR_VAR 0 3
63612: PUSH
63613: LD_VAR 0 1
63617: PPUSH
63618: LD_INT 50
63620: PUSH
63621: EMPTY
63622: LIST
63623: PPUSH
63624: CALL_OW 72
63628: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63629: LD_ADDR_VAR 0 8
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_INT 1
63641: ARRAY
63642: PPUSH
63643: CALL_OW 255
63647: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63648: LD_ADDR_VAR 0 10
63652: PUSH
63653: LD_INT 29
63655: PUSH
63656: LD_INT 91
63658: PUSH
63659: LD_INT 49
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// if not result then
63667: LD_VAR 0 3
63671: NOT
63672: IFFALSE 63676
// exit ;
63674: GO 64132
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63676: LD_ADDR_VAR 0 5
63680: PUSH
63681: LD_INT 81
63683: PUSH
63684: LD_VAR 0 8
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PPUSH
63693: CALL_OW 69
63697: ST_TO_ADDR
// for i in result do
63698: LD_ADDR_VAR 0 4
63702: PUSH
63703: LD_VAR 0 3
63707: PUSH
63708: FOR_IN
63709: IFFALSE 64130
// begin tag := GetTag ( i ) + 1 ;
63711: LD_ADDR_VAR 0 9
63715: PUSH
63716: LD_VAR 0 4
63720: PPUSH
63721: CALL_OW 110
63725: PUSH
63726: LD_INT 1
63728: PLUS
63729: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63730: LD_ADDR_VAR 0 7
63734: PUSH
63735: LD_VAR 0 4
63739: PPUSH
63740: CALL_OW 250
63744: PPUSH
63745: LD_VAR 0 4
63749: PPUSH
63750: CALL_OW 251
63754: PPUSH
63755: LD_INT 6
63757: PPUSH
63758: CALL 63331 0 3
63762: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL_OW 247
63772: PUSH
63773: LD_INT 2
63775: EQUAL
63776: PUSH
63777: LD_VAR 0 7
63781: AND
63782: PUSH
63783: LD_VAR 0 4
63787: PPUSH
63788: CALL_OW 264
63792: PUSH
63793: LD_VAR 0 10
63797: IN
63798: NOT
63799: AND
63800: IFFALSE 63839
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63802: LD_VAR 0 4
63806: PPUSH
63807: LD_VAR 0 7
63811: PUSH
63812: LD_INT 1
63814: ARRAY
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: PPUSH
63820: LD_VAR 0 7
63824: PUSH
63825: LD_INT 1
63827: ARRAY
63828: PUSH
63829: LD_INT 2
63831: ARRAY
63832: PPUSH
63833: CALL_OW 116
63837: GO 64128
// if path > tag then
63839: LD_VAR 0 2
63843: PUSH
63844: LD_VAR 0 9
63848: GREATER
63849: IFFALSE 64057
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63851: LD_ADDR_VAR 0 6
63855: PUSH
63856: LD_VAR 0 5
63860: PPUSH
63861: LD_INT 91
63863: PUSH
63864: LD_VAR 0 4
63868: PUSH
63869: LD_INT 8
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: PPUSH
63877: CALL_OW 72
63881: ST_TO_ADDR
// if nearEnemy then
63882: LD_VAR 0 6
63886: IFFALSE 63955
// begin if GetWeapon ( i ) = ru_time_lapser then
63888: LD_VAR 0 4
63892: PPUSH
63893: CALL_OW 264
63897: PUSH
63898: LD_INT 49
63900: EQUAL
63901: IFFALSE 63929
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63903: LD_VAR 0 4
63907: PPUSH
63908: LD_VAR 0 6
63912: PPUSH
63913: LD_VAR 0 4
63917: PPUSH
63918: CALL_OW 74
63922: PPUSH
63923: CALL_OW 112
63927: GO 63953
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63929: LD_VAR 0 4
63933: PPUSH
63934: LD_VAR 0 6
63938: PPUSH
63939: LD_VAR 0 4
63943: PPUSH
63944: CALL_OW 74
63948: PPUSH
63949: CALL_OW 115
// end else
63953: GO 64055
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63955: LD_VAR 0 4
63959: PPUSH
63960: LD_VAR 0 2
63964: PUSH
63965: LD_VAR 0 9
63969: ARRAY
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: PPUSH
63975: LD_VAR 0 2
63979: PUSH
63980: LD_VAR 0 9
63984: ARRAY
63985: PUSH
63986: LD_INT 2
63988: ARRAY
63989: PPUSH
63990: CALL_OW 297
63994: PUSH
63995: LD_INT 6
63997: GREATER
63998: IFFALSE 64041
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64000: LD_VAR 0 4
64004: PPUSH
64005: LD_VAR 0 2
64009: PUSH
64010: LD_VAR 0 9
64014: ARRAY
64015: PUSH
64016: LD_INT 1
64018: ARRAY
64019: PPUSH
64020: LD_VAR 0 2
64024: PUSH
64025: LD_VAR 0 9
64029: ARRAY
64030: PUSH
64031: LD_INT 2
64033: ARRAY
64034: PPUSH
64035: CALL_OW 114
64039: GO 64055
// SetTag ( i , tag ) ;
64041: LD_VAR 0 4
64045: PPUSH
64046: LD_VAR 0 9
64050: PPUSH
64051: CALL_OW 109
// end else
64055: GO 64128
// if enemy then
64057: LD_VAR 0 5
64061: IFFALSE 64128
// begin if GetWeapon ( i ) = ru_time_lapser then
64063: LD_VAR 0 4
64067: PPUSH
64068: CALL_OW 264
64072: PUSH
64073: LD_INT 49
64075: EQUAL
64076: IFFALSE 64104
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64078: LD_VAR 0 4
64082: PPUSH
64083: LD_VAR 0 5
64087: PPUSH
64088: LD_VAR 0 4
64092: PPUSH
64093: CALL_OW 74
64097: PPUSH
64098: CALL_OW 112
64102: GO 64128
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64104: LD_VAR 0 4
64108: PPUSH
64109: LD_VAR 0 5
64113: PPUSH
64114: LD_VAR 0 4
64118: PPUSH
64119: CALL_OW 74
64123: PPUSH
64124: CALL_OW 115
// end ; end ;
64128: GO 63708
64130: POP
64131: POP
// end ;
64132: LD_VAR 0 3
64136: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64137: LD_INT 0
64139: PPUSH
64140: PPUSH
64141: PPUSH
// if not unit or IsInUnit ( unit ) then
64142: LD_VAR 0 1
64146: NOT
64147: PUSH
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 310
64157: OR
64158: IFFALSE 64162
// exit ;
64160: GO 64253
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64162: LD_ADDR_VAR 0 4
64166: PUSH
64167: LD_VAR 0 1
64171: PPUSH
64172: CALL_OW 250
64176: PPUSH
64177: LD_VAR 0 2
64181: PPUSH
64182: LD_INT 1
64184: PPUSH
64185: CALL_OW 272
64189: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64190: LD_ADDR_VAR 0 5
64194: PUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 251
64204: PPUSH
64205: LD_VAR 0 2
64209: PPUSH
64210: LD_INT 1
64212: PPUSH
64213: CALL_OW 273
64217: ST_TO_ADDR
// if ValidHex ( x , y ) then
64218: LD_VAR 0 4
64222: PPUSH
64223: LD_VAR 0 5
64227: PPUSH
64228: CALL_OW 488
64232: IFFALSE 64253
// ComTurnXY ( unit , x , y ) ;
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_VAR 0 4
64243: PPUSH
64244: LD_VAR 0 5
64248: PPUSH
64249: CALL_OW 118
// end ;
64253: LD_VAR 0 3
64257: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64258: LD_INT 0
64260: PPUSH
64261: PPUSH
// result := false ;
64262: LD_ADDR_VAR 0 3
64266: PUSH
64267: LD_INT 0
64269: ST_TO_ADDR
// if not units then
64270: LD_VAR 0 2
64274: NOT
64275: IFFALSE 64279
// exit ;
64277: GO 64324
// for i in units do
64279: LD_ADDR_VAR 0 4
64283: PUSH
64284: LD_VAR 0 2
64288: PUSH
64289: FOR_IN
64290: IFFALSE 64322
// if See ( side , i ) then
64292: LD_VAR 0 1
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: CALL_OW 292
64306: IFFALSE 64320
// begin result := true ;
64308: LD_ADDR_VAR 0 3
64312: PUSH
64313: LD_INT 1
64315: ST_TO_ADDR
// exit ;
64316: POP
64317: POP
64318: GO 64324
// end ;
64320: GO 64289
64322: POP
64323: POP
// end ;
64324: LD_VAR 0 3
64328: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64329: LD_INT 0
64331: PPUSH
64332: PPUSH
64333: PPUSH
64334: PPUSH
// if not unit or not points then
64335: LD_VAR 0 1
64339: NOT
64340: PUSH
64341: LD_VAR 0 2
64345: NOT
64346: OR
64347: IFFALSE 64351
// exit ;
64349: GO 64441
// dist := 99999 ;
64351: LD_ADDR_VAR 0 5
64355: PUSH
64356: LD_INT 99999
64358: ST_TO_ADDR
// for i in points do
64359: LD_ADDR_VAR 0 4
64363: PUSH
64364: LD_VAR 0 2
64368: PUSH
64369: FOR_IN
64370: IFFALSE 64439
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64372: LD_ADDR_VAR 0 6
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: LD_VAR 0 4
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PPUSH
64391: LD_VAR 0 4
64395: PUSH
64396: LD_INT 2
64398: ARRAY
64399: PPUSH
64400: CALL_OW 297
64404: ST_TO_ADDR
// if tmpDist < dist then
64405: LD_VAR 0 6
64409: PUSH
64410: LD_VAR 0 5
64414: LESS
64415: IFFALSE 64437
// begin result := i ;
64417: LD_ADDR_VAR 0 3
64421: PUSH
64422: LD_VAR 0 4
64426: ST_TO_ADDR
// dist := tmpDist ;
64427: LD_ADDR_VAR 0 5
64431: PUSH
64432: LD_VAR 0 6
64436: ST_TO_ADDR
// end ; end ;
64437: GO 64369
64439: POP
64440: POP
// end ;
64441: LD_VAR 0 3
64445: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64446: LD_INT 0
64448: PPUSH
// uc_side := side ;
64449: LD_ADDR_OWVAR 20
64453: PUSH
64454: LD_VAR 0 1
64458: ST_TO_ADDR
// uc_nation := 3 ;
64459: LD_ADDR_OWVAR 21
64463: PUSH
64464: LD_INT 3
64466: ST_TO_ADDR
// vc_chassis := 25 ;
64467: LD_ADDR_OWVAR 37
64471: PUSH
64472: LD_INT 25
64474: ST_TO_ADDR
// vc_engine := engine_siberite ;
64475: LD_ADDR_OWVAR 39
64479: PUSH
64480: LD_INT 3
64482: ST_TO_ADDR
// vc_control := control_computer ;
64483: LD_ADDR_OWVAR 38
64487: PUSH
64488: LD_INT 3
64490: ST_TO_ADDR
// vc_weapon := 59 ;
64491: LD_ADDR_OWVAR 40
64495: PUSH
64496: LD_INT 59
64498: ST_TO_ADDR
// result := CreateVehicle ;
64499: LD_ADDR_VAR 0 5
64503: PUSH
64504: CALL_OW 45
64508: ST_TO_ADDR
// SetDir ( result , d ) ;
64509: LD_VAR 0 5
64513: PPUSH
64514: LD_VAR 0 4
64518: PPUSH
64519: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64523: LD_VAR 0 5
64527: PPUSH
64528: LD_VAR 0 2
64532: PPUSH
64533: LD_VAR 0 3
64537: PPUSH
64538: LD_INT 0
64540: PPUSH
64541: CALL_OW 48
// end ;
64545: LD_VAR 0 5
64549: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64550: LD_INT 0
64552: PPUSH
64553: PPUSH
64554: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64555: LD_ADDR_VAR 0 2
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64578: LD_VAR 0 1
64582: NOT
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 264
64593: PUSH
64594: LD_INT 12
64596: PUSH
64597: LD_INT 51
64599: PUSH
64600: LD_INT 32
64602: PUSH
64603: LD_INT 89
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: IN
64612: NOT
64613: OR
64614: IFFALSE 64618
// exit ;
64616: GO 64716
// for i := 1 to 3 do
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: DOUBLE
64624: LD_INT 1
64626: DEC
64627: ST_TO_ADDR
64628: LD_INT 3
64630: PUSH
64631: FOR_TO
64632: IFFALSE 64714
// begin tmp := GetCargo ( cargo , i ) ;
64634: LD_ADDR_VAR 0 4
64638: PUSH
64639: LD_VAR 0 1
64643: PPUSH
64644: LD_VAR 0 3
64648: PPUSH
64649: CALL_OW 289
64653: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64654: LD_ADDR_VAR 0 2
64658: PUSH
64659: LD_VAR 0 2
64663: PPUSH
64664: LD_VAR 0 3
64668: PPUSH
64669: LD_VAR 0 4
64673: PPUSH
64674: CALL_OW 1
64678: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64679: LD_ADDR_VAR 0 2
64683: PUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: LD_INT 4
64691: PPUSH
64692: LD_VAR 0 2
64696: PUSH
64697: LD_INT 4
64699: ARRAY
64700: PUSH
64701: LD_VAR 0 4
64705: PLUS
64706: PPUSH
64707: CALL_OW 1
64711: ST_TO_ADDR
// end ;
64712: GO 64631
64714: POP
64715: POP
// end ;
64716: LD_VAR 0 2
64720: RET
// export function Length ( array ) ; begin
64721: LD_INT 0
64723: PPUSH
// result := array + 0 ;
64724: LD_ADDR_VAR 0 2
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_INT 0
64736: PLUS
64737: ST_TO_ADDR
// end ;
64738: LD_VAR 0 2
64742: RET
// export function PrepareArray ( array ) ; begin
64743: LD_INT 0
64745: PPUSH
// result := array diff 0 ;
64746: LD_ADDR_VAR 0 2
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 0
64758: DIFF
64759: ST_TO_ADDR
// if not result [ 1 ] then
64760: LD_VAR 0 2
64764: PUSH
64765: LD_INT 1
64767: ARRAY
64768: NOT
64769: IFFALSE 64789
// result := Delete ( result , 1 ) ;
64771: LD_ADDR_VAR 0 2
64775: PUSH
64776: LD_VAR 0 2
64780: PPUSH
64781: LD_INT 1
64783: PPUSH
64784: CALL_OW 3
64788: ST_TO_ADDR
// end ;
64789: LD_VAR 0 2
64793: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64794: LD_INT 0
64796: PPUSH
64797: PPUSH
64798: PPUSH
64799: PPUSH
// sibRocketRange := 25 ;
64800: LD_ADDR_VAR 0 6
64804: PUSH
64805: LD_INT 25
64807: ST_TO_ADDR
// result := false ;
64808: LD_ADDR_VAR 0 4
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// for i := 0 to 5 do
64816: LD_ADDR_VAR 0 5
64820: PUSH
64821: DOUBLE
64822: LD_INT 0
64824: DEC
64825: ST_TO_ADDR
64826: LD_INT 5
64828: PUSH
64829: FOR_TO
64830: IFFALSE 64897
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64832: LD_VAR 0 1
64836: PPUSH
64837: LD_VAR 0 5
64841: PPUSH
64842: LD_VAR 0 6
64846: PPUSH
64847: CALL_OW 272
64851: PPUSH
64852: LD_VAR 0 2
64856: PPUSH
64857: LD_VAR 0 5
64861: PPUSH
64862: LD_VAR 0 6
64866: PPUSH
64867: CALL_OW 273
64871: PPUSH
64872: LD_VAR 0 3
64876: PPUSH
64877: CALL_OW 309
64881: IFFALSE 64895
// begin result := true ;
64883: LD_ADDR_VAR 0 4
64887: PUSH
64888: LD_INT 1
64890: ST_TO_ADDR
// exit ;
64891: POP
64892: POP
64893: GO 64899
// end ;
64895: GO 64829
64897: POP
64898: POP
// end ;
64899: LD_VAR 0 4
64903: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64904: LD_INT 0
64906: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_VAR 0 2
64916: PPUSH
64917: LD_INT 0
64919: PPUSH
64920: LD_INT 0
64922: PPUSH
64923: LD_INT 1
64925: PPUSH
64926: LD_INT 0
64928: PPUSH
64929: CALL_OW 587
// end ; end_of_file
64933: LD_VAR 0 3
64937: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64938: LD_VAR 0 1
64942: PUSH
64943: LD_INT 200
64945: DOUBLE
64946: GREATEREQUAL
64947: IFFALSE 64955
64949: LD_INT 299
64951: DOUBLE
64952: LESSEQUAL
64953: IFTRUE 64957
64955: GO 64989
64957: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64958: LD_VAR 0 1
64962: PPUSH
64963: LD_VAR 0 2
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: LD_VAR 0 4
64977: PPUSH
64978: LD_VAR 0 5
64982: PPUSH
64983: CALL 65477 0 5
64987: GO 65066
64989: LD_INT 300
64991: DOUBLE
64992: GREATEREQUAL
64993: IFFALSE 65001
64995: LD_INT 399
64997: DOUBLE
64998: LESSEQUAL
64999: IFTRUE 65003
65001: GO 65065
65003: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65004: LD_VAR 0 1
65008: PPUSH
65009: LD_VAR 0 2
65013: PPUSH
65014: LD_VAR 0 3
65018: PPUSH
65019: LD_VAR 0 4
65023: PPUSH
65024: LD_VAR 0 5
65028: PPUSH
65029: LD_VAR 0 6
65033: PPUSH
65034: LD_VAR 0 7
65038: PPUSH
65039: LD_VAR 0 8
65043: PPUSH
65044: LD_VAR 0 9
65048: PPUSH
65049: LD_VAR 0 10
65053: PPUSH
65054: LD_VAR 0 11
65058: PPUSH
65059: CALL 20226 0 11
65063: GO 65066
65065: POP
// end ;
65066: PPOPN 11
65068: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65069: LD_VAR 0 1
65073: PPUSH
65074: LD_VAR 0 2
65078: PPUSH
65079: LD_VAR 0 3
65083: PPUSH
65084: LD_VAR 0 4
65088: PPUSH
65089: LD_VAR 0 5
65093: PPUSH
65094: CALL 65213 0 5
// end ; end_of_file
65098: PPOPN 5
65100: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65101: LD_INT 0
65103: PPUSH
65104: PPUSH
65105: PPUSH
65106: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65107: LD_VAR 0 1
65111: PPUSH
65112: CALL_OW 264
65116: PUSH
65117: LD_INT 91
65119: EQUAL
65120: IFFALSE 65192
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65122: LD_INT 68
65124: PPUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 255
65134: PPUSH
65135: CALL_OW 321
65139: PUSH
65140: LD_INT 2
65142: EQUAL
65143: IFFALSE 65155
// eff := 70 else
65145: LD_ADDR_VAR 0 4
65149: PUSH
65150: LD_INT 70
65152: ST_TO_ADDR
65153: GO 65163
// eff := 30 ;
65155: LD_ADDR_VAR 0 4
65159: PUSH
65160: LD_INT 30
65162: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65163: LD_VAR 0 1
65167: PPUSH
65168: CALL_OW 250
65172: PPUSH
65173: LD_VAR 0 1
65177: PPUSH
65178: CALL_OW 251
65182: PPUSH
65183: LD_VAR 0 4
65187: PPUSH
65188: CALL_OW 495
// end ; end ;
65192: LD_VAR 0 2
65196: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65197: LD_INT 0
65199: PPUSH
// end ;
65200: LD_VAR 0 4
65204: RET
// export function SOS_Command ( cmd ) ; begin
65205: LD_INT 0
65207: PPUSH
// end ;
65208: LD_VAR 0 2
65212: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65213: LD_INT 0
65215: PPUSH
// end ;
65216: LD_VAR 0 6
65220: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65221: LD_INT 0
65223: PPUSH
65224: PPUSH
// if not vehicle or not factory then
65225: LD_VAR 0 1
65229: NOT
65230: PUSH
65231: LD_VAR 0 2
65235: NOT
65236: OR
65237: IFFALSE 65241
// exit ;
65239: GO 65472
// if factoryWaypoints >= factory then
65241: LD_EXP 78
65245: PUSH
65246: LD_VAR 0 2
65250: GREATEREQUAL
65251: IFFALSE 65472
// if factoryWaypoints [ factory ] then
65253: LD_EXP 78
65257: PUSH
65258: LD_VAR 0 2
65262: ARRAY
65263: IFFALSE 65472
// begin if GetControl ( vehicle ) = control_manual then
65265: LD_VAR 0 1
65269: PPUSH
65270: CALL_OW 263
65274: PUSH
65275: LD_INT 1
65277: EQUAL
65278: IFFALSE 65359
// begin driver := IsDrivenBy ( vehicle ) ;
65280: LD_ADDR_VAR 0 4
65284: PUSH
65285: LD_VAR 0 1
65289: PPUSH
65290: CALL_OW 311
65294: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65295: LD_VAR 0 4
65299: PPUSH
65300: LD_EXP 78
65304: PUSH
65305: LD_VAR 0 2
65309: ARRAY
65310: PUSH
65311: LD_INT 3
65313: ARRAY
65314: PPUSH
65315: LD_EXP 78
65319: PUSH
65320: LD_VAR 0 2
65324: ARRAY
65325: PUSH
65326: LD_INT 4
65328: ARRAY
65329: PPUSH
65330: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65334: LD_VAR 0 4
65338: PPUSH
65339: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65343: LD_VAR 0 4
65347: PPUSH
65348: LD_VAR 0 2
65352: PPUSH
65353: CALL_OW 180
// end else
65357: GO 65472
// if GetControl ( vehicle ) = control_remote then
65359: LD_VAR 0 1
65363: PPUSH
65364: CALL_OW 263
65368: PUSH
65369: LD_INT 2
65371: EQUAL
65372: IFFALSE 65433
// begin wait ( 0 0$2 ) ;
65374: LD_INT 70
65376: PPUSH
65377: CALL_OW 67
// if Connect ( vehicle ) then
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL 31623 0 1
65390: IFFALSE 65431
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65392: LD_VAR 0 1
65396: PPUSH
65397: LD_EXP 78
65401: PUSH
65402: LD_VAR 0 2
65406: ARRAY
65407: PUSH
65408: LD_INT 3
65410: ARRAY
65411: PPUSH
65412: LD_EXP 78
65416: PUSH
65417: LD_VAR 0 2
65421: ARRAY
65422: PUSH
65423: LD_INT 4
65425: ARRAY
65426: PPUSH
65427: CALL_OW 171
// end else
65431: GO 65472
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65433: LD_VAR 0 1
65437: PPUSH
65438: LD_EXP 78
65442: PUSH
65443: LD_VAR 0 2
65447: ARRAY
65448: PUSH
65449: LD_INT 3
65451: ARRAY
65452: PPUSH
65453: LD_EXP 78
65457: PUSH
65458: LD_VAR 0 2
65462: ARRAY
65463: PUSH
65464: LD_INT 4
65466: ARRAY
65467: PPUSH
65468: CALL_OW 171
// end ; end ;
65472: LD_VAR 0 3
65476: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65477: LD_INT 0
65479: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65480: LD_VAR 0 1
65484: PUSH
65485: LD_INT 250
65487: EQUAL
65488: PUSH
65489: LD_VAR 0 2
65493: PPUSH
65494: CALL_OW 264
65498: PUSH
65499: LD_INT 81
65501: EQUAL
65502: AND
65503: IFFALSE 65524
// MinerPlaceMine ( unit , x , y ) ;
65505: LD_VAR 0 2
65509: PPUSH
65510: LD_VAR 0 4
65514: PPUSH
65515: LD_VAR 0 5
65519: PPUSH
65520: CALL 67909 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65524: LD_VAR 0 1
65528: PUSH
65529: LD_INT 251
65531: EQUAL
65532: PUSH
65533: LD_VAR 0 2
65537: PPUSH
65538: CALL_OW 264
65542: PUSH
65543: LD_INT 81
65545: EQUAL
65546: AND
65547: IFFALSE 65568
// MinerDetonateMine ( unit , x , y ) ;
65549: LD_VAR 0 2
65553: PPUSH
65554: LD_VAR 0 4
65558: PPUSH
65559: LD_VAR 0 5
65563: PPUSH
65564: CALL 68184 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65568: LD_VAR 0 1
65572: PUSH
65573: LD_INT 252
65575: EQUAL
65576: PUSH
65577: LD_VAR 0 2
65581: PPUSH
65582: CALL_OW 264
65586: PUSH
65587: LD_INT 81
65589: EQUAL
65590: AND
65591: IFFALSE 65612
// MinerCreateMinefield ( unit , x , y ) ;
65593: LD_VAR 0 2
65597: PPUSH
65598: LD_VAR 0 4
65602: PPUSH
65603: LD_VAR 0 5
65607: PPUSH
65608: CALL 68601 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65612: LD_VAR 0 1
65616: PUSH
65617: LD_INT 253
65619: EQUAL
65620: PUSH
65621: LD_VAR 0 2
65625: PPUSH
65626: CALL_OW 257
65630: PUSH
65631: LD_INT 5
65633: EQUAL
65634: AND
65635: IFFALSE 65656
// ComBinocular ( unit , x , y ) ;
65637: LD_VAR 0 2
65641: PPUSH
65642: LD_VAR 0 4
65646: PPUSH
65647: LD_VAR 0 5
65651: PPUSH
65652: CALL 68970 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65656: LD_VAR 0 1
65660: PUSH
65661: LD_INT 254
65663: EQUAL
65664: PUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: CALL_OW 264
65674: PUSH
65675: LD_INT 99
65677: EQUAL
65678: AND
65679: PUSH
65680: LD_VAR 0 3
65684: PPUSH
65685: CALL_OW 263
65689: PUSH
65690: LD_INT 3
65692: EQUAL
65693: AND
65694: IFFALSE 65710
// HackDestroyVehicle ( unit , selectedUnit ) ;
65696: LD_VAR 0 2
65700: PPUSH
65701: LD_VAR 0 3
65705: PPUSH
65706: CALL 67273 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65710: LD_VAR 0 1
65714: PUSH
65715: LD_INT 255
65717: EQUAL
65718: PUSH
65719: LD_VAR 0 2
65723: PPUSH
65724: CALL_OW 264
65728: PUSH
65729: LD_INT 14
65731: PUSH
65732: LD_INT 53
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: IN
65739: AND
65740: PUSH
65741: LD_VAR 0 4
65745: PPUSH
65746: LD_VAR 0 5
65750: PPUSH
65751: CALL_OW 488
65755: AND
65756: IFFALSE 65780
// CutTreeXYR ( unit , x , y , 12 ) ;
65758: LD_VAR 0 2
65762: PPUSH
65763: LD_VAR 0 4
65767: PPUSH
65768: LD_VAR 0 5
65772: PPUSH
65773: LD_INT 12
65775: PPUSH
65776: CALL 65843 0 4
// if cmd = 256 then
65780: LD_VAR 0 1
65784: PUSH
65785: LD_INT 256
65787: EQUAL
65788: IFFALSE 65809
// SetFactoryWaypoint ( unit , x , y ) ;
65790: LD_VAR 0 2
65794: PPUSH
65795: LD_VAR 0 4
65799: PPUSH
65800: LD_VAR 0 5
65804: PPUSH
65805: CALL 22206 0 3
// if cmd = 257 then
65809: LD_VAR 0 1
65813: PUSH
65814: LD_INT 257
65816: EQUAL
65817: IFFALSE 65838
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65819: LD_VAR 0 2
65823: PPUSH
65824: LD_VAR 0 4
65828: PPUSH
65829: LD_VAR 0 5
65833: PPUSH
65834: CALL 22568 0 3
// end ;
65838: LD_VAR 0 6
65842: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65843: LD_INT 0
65845: PPUSH
65846: PPUSH
65847: PPUSH
65848: PPUSH
65849: PPUSH
65850: PPUSH
65851: PPUSH
65852: PPUSH
65853: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65854: LD_VAR 0 1
65858: NOT
65859: PUSH
65860: LD_VAR 0 2
65864: PPUSH
65865: LD_VAR 0 3
65869: PPUSH
65870: CALL_OW 488
65874: NOT
65875: OR
65876: PUSH
65877: LD_VAR 0 4
65881: NOT
65882: OR
65883: IFFALSE 65887
// exit ;
65885: GO 66227
// list := [ ] ;
65887: LD_ADDR_VAR 0 13
65891: PUSH
65892: EMPTY
65893: ST_TO_ADDR
// if x - r < 0 then
65894: LD_VAR 0 2
65898: PUSH
65899: LD_VAR 0 4
65903: MINUS
65904: PUSH
65905: LD_INT 0
65907: LESS
65908: IFFALSE 65920
// min_x := 0 else
65910: LD_ADDR_VAR 0 7
65914: PUSH
65915: LD_INT 0
65917: ST_TO_ADDR
65918: GO 65936
// min_x := x - r ;
65920: LD_ADDR_VAR 0 7
65924: PUSH
65925: LD_VAR 0 2
65929: PUSH
65930: LD_VAR 0 4
65934: MINUS
65935: ST_TO_ADDR
// if y - r < 0 then
65936: LD_VAR 0 3
65940: PUSH
65941: LD_VAR 0 4
65945: MINUS
65946: PUSH
65947: LD_INT 0
65949: LESS
65950: IFFALSE 65962
// min_y := 0 else
65952: LD_ADDR_VAR 0 8
65956: PUSH
65957: LD_INT 0
65959: ST_TO_ADDR
65960: GO 65978
// min_y := y - r ;
65962: LD_ADDR_VAR 0 8
65966: PUSH
65967: LD_VAR 0 3
65971: PUSH
65972: LD_VAR 0 4
65976: MINUS
65977: ST_TO_ADDR
// max_x := x + r ;
65978: LD_ADDR_VAR 0 9
65982: PUSH
65983: LD_VAR 0 2
65987: PUSH
65988: LD_VAR 0 4
65992: PLUS
65993: ST_TO_ADDR
// max_y := y + r ;
65994: LD_ADDR_VAR 0 10
65998: PUSH
65999: LD_VAR 0 3
66003: PUSH
66004: LD_VAR 0 4
66008: PLUS
66009: ST_TO_ADDR
// for _x = min_x to max_x do
66010: LD_ADDR_VAR 0 11
66014: PUSH
66015: DOUBLE
66016: LD_VAR 0 7
66020: DEC
66021: ST_TO_ADDR
66022: LD_VAR 0 9
66026: PUSH
66027: FOR_TO
66028: IFFALSE 66145
// for _y = min_y to max_y do
66030: LD_ADDR_VAR 0 12
66034: PUSH
66035: DOUBLE
66036: LD_VAR 0 8
66040: DEC
66041: ST_TO_ADDR
66042: LD_VAR 0 10
66046: PUSH
66047: FOR_TO
66048: IFFALSE 66141
// begin if not ValidHex ( _x , _y ) then
66050: LD_VAR 0 11
66054: PPUSH
66055: LD_VAR 0 12
66059: PPUSH
66060: CALL_OW 488
66064: NOT
66065: IFFALSE 66069
// continue ;
66067: GO 66047
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66069: LD_VAR 0 11
66073: PPUSH
66074: LD_VAR 0 12
66078: PPUSH
66079: CALL_OW 351
66083: PUSH
66084: LD_VAR 0 11
66088: PPUSH
66089: LD_VAR 0 12
66093: PPUSH
66094: CALL_OW 554
66098: AND
66099: IFFALSE 66139
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66101: LD_ADDR_VAR 0 13
66105: PUSH
66106: LD_VAR 0 13
66110: PPUSH
66111: LD_VAR 0 13
66115: PUSH
66116: LD_INT 1
66118: PLUS
66119: PPUSH
66120: LD_VAR 0 11
66124: PUSH
66125: LD_VAR 0 12
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PPUSH
66134: CALL_OW 2
66138: ST_TO_ADDR
// end ;
66139: GO 66047
66141: POP
66142: POP
66143: GO 66027
66145: POP
66146: POP
// if not list then
66147: LD_VAR 0 13
66151: NOT
66152: IFFALSE 66156
// exit ;
66154: GO 66227
// for i in list do
66156: LD_ADDR_VAR 0 6
66160: PUSH
66161: LD_VAR 0 13
66165: PUSH
66166: FOR_IN
66167: IFFALSE 66225
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66169: LD_VAR 0 1
66173: PPUSH
66174: LD_STRING M
66176: PUSH
66177: LD_VAR 0 6
66181: PUSH
66182: LD_INT 1
66184: ARRAY
66185: PUSH
66186: LD_VAR 0 6
66190: PUSH
66191: LD_INT 2
66193: ARRAY
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: PPUSH
66219: CALL_OW 447
66223: GO 66166
66225: POP
66226: POP
// end ;
66227: LD_VAR 0 5
66231: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66232: LD_EXP 81
66236: NOT
66237: IFFALSE 66287
66239: GO 66241
66241: DISABLE
// begin initHack := true ;
66242: LD_ADDR_EXP 81
66246: PUSH
66247: LD_INT 1
66249: ST_TO_ADDR
// hackTanks := [ ] ;
66250: LD_ADDR_EXP 82
66254: PUSH
66255: EMPTY
66256: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66257: LD_ADDR_EXP 83
66261: PUSH
66262: EMPTY
66263: ST_TO_ADDR
// hackLimit := 3 ;
66264: LD_ADDR_EXP 84
66268: PUSH
66269: LD_INT 3
66271: ST_TO_ADDR
// hackDist := 12 ;
66272: LD_ADDR_EXP 85
66276: PUSH
66277: LD_INT 12
66279: ST_TO_ADDR
// hackCounter := [ ] ;
66280: LD_ADDR_EXP 86
66284: PUSH
66285: EMPTY
66286: ST_TO_ADDR
// end ;
66287: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66288: LD_EXP 81
66292: PUSH
66293: LD_INT 34
66295: PUSH
66296: LD_INT 99
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PPUSH
66303: CALL_OW 69
66307: AND
66308: IFFALSE 66561
66310: GO 66312
66312: DISABLE
66313: LD_INT 0
66315: PPUSH
66316: PPUSH
// begin enable ;
66317: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66318: LD_ADDR_VAR 0 1
66322: PUSH
66323: LD_INT 34
66325: PUSH
66326: LD_INT 99
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PPUSH
66333: CALL_OW 69
66337: PUSH
66338: FOR_IN
66339: IFFALSE 66559
// begin if not i in hackTanks then
66341: LD_VAR 0 1
66345: PUSH
66346: LD_EXP 82
66350: IN
66351: NOT
66352: IFFALSE 66435
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66354: LD_ADDR_EXP 82
66358: PUSH
66359: LD_EXP 82
66363: PPUSH
66364: LD_EXP 82
66368: PUSH
66369: LD_INT 1
66371: PLUS
66372: PPUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: CALL_OW 1
66382: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66383: LD_ADDR_EXP 83
66387: PUSH
66388: LD_EXP 83
66392: PPUSH
66393: LD_EXP 83
66397: PUSH
66398: LD_INT 1
66400: PLUS
66401: PPUSH
66402: EMPTY
66403: PPUSH
66404: CALL_OW 1
66408: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66409: LD_ADDR_EXP 86
66413: PUSH
66414: LD_EXP 86
66418: PPUSH
66419: LD_EXP 86
66423: PUSH
66424: LD_INT 1
66426: PLUS
66427: PPUSH
66428: EMPTY
66429: PPUSH
66430: CALL_OW 1
66434: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66435: LD_VAR 0 1
66439: PPUSH
66440: CALL_OW 302
66444: NOT
66445: IFFALSE 66458
// begin HackUnlinkAll ( i ) ;
66447: LD_VAR 0 1
66451: PPUSH
66452: CALL 66564 0 1
// continue ;
66456: GO 66338
// end ; HackCheckCapturedStatus ( i ) ;
66458: LD_VAR 0 1
66462: PPUSH
66463: CALL 67007 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66467: LD_ADDR_VAR 0 2
66471: PUSH
66472: LD_INT 81
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: CALL_OW 255
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 33
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 91
66501: PUSH
66502: LD_VAR 0 1
66506: PUSH
66507: LD_EXP 85
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 50
66519: PUSH
66520: EMPTY
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: PPUSH
66529: CALL_OW 69
66533: ST_TO_ADDR
// if not tmp then
66534: LD_VAR 0 2
66538: NOT
66539: IFFALSE 66543
// continue ;
66541: GO 66338
// HackLink ( i , tmp ) ;
66543: LD_VAR 0 1
66547: PPUSH
66548: LD_VAR 0 2
66552: PPUSH
66553: CALL 66700 0 2
// end ;
66557: GO 66338
66559: POP
66560: POP
// end ;
66561: PPOPN 2
66563: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66564: LD_INT 0
66566: PPUSH
66567: PPUSH
66568: PPUSH
// if not hack in hackTanks then
66569: LD_VAR 0 1
66573: PUSH
66574: LD_EXP 82
66578: IN
66579: NOT
66580: IFFALSE 66584
// exit ;
66582: GO 66695
// index := GetElementIndex ( hackTanks , hack ) ;
66584: LD_ADDR_VAR 0 4
66588: PUSH
66589: LD_EXP 82
66593: PPUSH
66594: LD_VAR 0 1
66598: PPUSH
66599: CALL 28439 0 2
66603: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66604: LD_EXP 83
66608: PUSH
66609: LD_VAR 0 4
66613: ARRAY
66614: IFFALSE 66695
// begin for i in hackTanksCaptured [ index ] do
66616: LD_ADDR_VAR 0 3
66620: PUSH
66621: LD_EXP 83
66625: PUSH
66626: LD_VAR 0 4
66630: ARRAY
66631: PUSH
66632: FOR_IN
66633: IFFALSE 66659
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66635: LD_VAR 0 3
66639: PUSH
66640: LD_INT 1
66642: ARRAY
66643: PPUSH
66644: LD_VAR 0 3
66648: PUSH
66649: LD_INT 2
66651: ARRAY
66652: PPUSH
66653: CALL_OW 235
66657: GO 66632
66659: POP
66660: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66661: LD_ADDR_EXP 83
66665: PUSH
66666: LD_EXP 83
66670: PPUSH
66671: LD_VAR 0 4
66675: PPUSH
66676: EMPTY
66677: PPUSH
66678: CALL_OW 1
66682: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66683: LD_VAR 0 1
66687: PPUSH
66688: LD_INT 0
66690: PPUSH
66691: CALL_OW 505
// end ; end ;
66695: LD_VAR 0 2
66699: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66700: LD_INT 0
66702: PPUSH
66703: PPUSH
66704: PPUSH
// if not hack in hackTanks or not vehicles then
66705: LD_VAR 0 1
66709: PUSH
66710: LD_EXP 82
66714: IN
66715: NOT
66716: PUSH
66717: LD_VAR 0 2
66721: NOT
66722: OR
66723: IFFALSE 66727
// exit ;
66725: GO 67002
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66727: LD_ADDR_VAR 0 2
66731: PUSH
66732: LD_VAR 0 1
66736: PPUSH
66737: LD_VAR 0 2
66741: PPUSH
66742: LD_INT 1
66744: PPUSH
66745: LD_INT 1
66747: PPUSH
66748: CALL 29089 0 4
66752: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66753: LD_ADDR_VAR 0 5
66757: PUSH
66758: LD_EXP 82
66762: PPUSH
66763: LD_VAR 0 1
66767: PPUSH
66768: CALL 28439 0 2
66772: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66773: LD_EXP 83
66777: PUSH
66778: LD_VAR 0 5
66782: ARRAY
66783: PUSH
66784: LD_EXP 84
66788: LESS
66789: IFFALSE 66978
// begin for i := 1 to vehicles do
66791: LD_ADDR_VAR 0 4
66795: PUSH
66796: DOUBLE
66797: LD_INT 1
66799: DEC
66800: ST_TO_ADDR
66801: LD_VAR 0 2
66805: PUSH
66806: FOR_TO
66807: IFFALSE 66976
// begin if hackTanksCaptured [ index ] = hackLimit then
66809: LD_EXP 83
66813: PUSH
66814: LD_VAR 0 5
66818: ARRAY
66819: PUSH
66820: LD_EXP 84
66824: EQUAL
66825: IFFALSE 66829
// break ;
66827: GO 66976
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66829: LD_ADDR_EXP 86
66833: PUSH
66834: LD_EXP 86
66838: PPUSH
66839: LD_VAR 0 5
66843: PPUSH
66844: LD_EXP 86
66848: PUSH
66849: LD_VAR 0 5
66853: ARRAY
66854: PUSH
66855: LD_INT 1
66857: PLUS
66858: PPUSH
66859: CALL_OW 1
66863: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66864: LD_ADDR_EXP 83
66868: PUSH
66869: LD_EXP 83
66873: PPUSH
66874: LD_VAR 0 5
66878: PUSH
66879: LD_EXP 83
66883: PUSH
66884: LD_VAR 0 5
66888: ARRAY
66889: PUSH
66890: LD_INT 1
66892: PLUS
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PPUSH
66898: LD_VAR 0 2
66902: PUSH
66903: LD_VAR 0 4
66907: ARRAY
66908: PUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_VAR 0 4
66918: ARRAY
66919: PPUSH
66920: CALL_OW 255
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PPUSH
66929: CALL 28654 0 3
66933: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66934: LD_VAR 0 2
66938: PUSH
66939: LD_VAR 0 4
66943: ARRAY
66944: PPUSH
66945: LD_VAR 0 1
66949: PPUSH
66950: CALL_OW 255
66954: PPUSH
66955: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66959: LD_VAR 0 2
66963: PUSH
66964: LD_VAR 0 4
66968: ARRAY
66969: PPUSH
66970: CALL_OW 141
// end ;
66974: GO 66806
66976: POP
66977: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66978: LD_VAR 0 1
66982: PPUSH
66983: LD_EXP 83
66987: PUSH
66988: LD_VAR 0 5
66992: ARRAY
66993: PUSH
66994: LD_INT 0
66996: PLUS
66997: PPUSH
66998: CALL_OW 505
// end ;
67002: LD_VAR 0 3
67006: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67007: LD_INT 0
67009: PPUSH
67010: PPUSH
67011: PPUSH
67012: PPUSH
// if not hack in hackTanks then
67013: LD_VAR 0 1
67017: PUSH
67018: LD_EXP 82
67022: IN
67023: NOT
67024: IFFALSE 67028
// exit ;
67026: GO 67268
// index := GetElementIndex ( hackTanks , hack ) ;
67028: LD_ADDR_VAR 0 4
67032: PUSH
67033: LD_EXP 82
67037: PPUSH
67038: LD_VAR 0 1
67042: PPUSH
67043: CALL 28439 0 2
67047: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67048: LD_ADDR_VAR 0 3
67052: PUSH
67053: DOUBLE
67054: LD_EXP 83
67058: PUSH
67059: LD_VAR 0 4
67063: ARRAY
67064: INC
67065: ST_TO_ADDR
67066: LD_INT 1
67068: PUSH
67069: FOR_DOWNTO
67070: IFFALSE 67242
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67072: LD_ADDR_VAR 0 5
67076: PUSH
67077: LD_EXP 83
67081: PUSH
67082: LD_VAR 0 4
67086: ARRAY
67087: PUSH
67088: LD_VAR 0 3
67092: ARRAY
67093: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67094: LD_VAR 0 5
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PPUSH
67103: CALL_OW 302
67107: NOT
67108: PUSH
67109: LD_VAR 0 5
67113: PUSH
67114: LD_INT 1
67116: ARRAY
67117: PPUSH
67118: CALL_OW 255
67122: PUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: CALL_OW 255
67132: NONEQUAL
67133: OR
67134: IFFALSE 67240
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67136: LD_VAR 0 5
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PPUSH
67145: CALL_OW 305
67149: PUSH
67150: LD_VAR 0 5
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PPUSH
67159: CALL_OW 255
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: CALL_OW 255
67173: EQUAL
67174: AND
67175: IFFALSE 67199
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67177: LD_VAR 0 5
67181: PUSH
67182: LD_INT 1
67184: ARRAY
67185: PPUSH
67186: LD_VAR 0 5
67190: PUSH
67191: LD_INT 2
67193: ARRAY
67194: PPUSH
67195: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67199: LD_ADDR_EXP 83
67203: PUSH
67204: LD_EXP 83
67208: PPUSH
67209: LD_VAR 0 4
67213: PPUSH
67214: LD_EXP 83
67218: PUSH
67219: LD_VAR 0 4
67223: ARRAY
67224: PPUSH
67225: LD_VAR 0 3
67229: PPUSH
67230: CALL_OW 3
67234: PPUSH
67235: CALL_OW 1
67239: ST_TO_ADDR
// end ; end ;
67240: GO 67069
67242: POP
67243: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67244: LD_VAR 0 1
67248: PPUSH
67249: LD_EXP 83
67253: PUSH
67254: LD_VAR 0 4
67258: ARRAY
67259: PUSH
67260: LD_INT 0
67262: PLUS
67263: PPUSH
67264: CALL_OW 505
// end ;
67268: LD_VAR 0 2
67272: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67273: LD_INT 0
67275: PPUSH
67276: PPUSH
67277: PPUSH
67278: PPUSH
// if not hack in hackTanks then
67279: LD_VAR 0 1
67283: PUSH
67284: LD_EXP 82
67288: IN
67289: NOT
67290: IFFALSE 67294
// exit ;
67292: GO 67379
// index := GetElementIndex ( hackTanks , hack ) ;
67294: LD_ADDR_VAR 0 5
67298: PUSH
67299: LD_EXP 82
67303: PPUSH
67304: LD_VAR 0 1
67308: PPUSH
67309: CALL 28439 0 2
67313: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67314: LD_ADDR_VAR 0 4
67318: PUSH
67319: DOUBLE
67320: LD_INT 1
67322: DEC
67323: ST_TO_ADDR
67324: LD_EXP 83
67328: PUSH
67329: LD_VAR 0 5
67333: ARRAY
67334: PUSH
67335: FOR_TO
67336: IFFALSE 67377
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67338: LD_EXP 83
67342: PUSH
67343: LD_VAR 0 5
67347: ARRAY
67348: PUSH
67349: LD_VAR 0 4
67353: ARRAY
67354: PUSH
67355: LD_INT 1
67357: ARRAY
67358: PUSH
67359: LD_VAR 0 2
67363: EQUAL
67364: IFFALSE 67375
// KillUnit ( vehicle ) ;
67366: LD_VAR 0 2
67370: PPUSH
67371: CALL_OW 66
67375: GO 67335
67377: POP
67378: POP
// end ;
67379: LD_VAR 0 3
67383: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67384: LD_EXP 87
67388: NOT
67389: IFFALSE 67424
67391: GO 67393
67393: DISABLE
// begin initMiner := true ;
67394: LD_ADDR_EXP 87
67398: PUSH
67399: LD_INT 1
67401: ST_TO_ADDR
// minersList := [ ] ;
67402: LD_ADDR_EXP 88
67406: PUSH
67407: EMPTY
67408: ST_TO_ADDR
// minerMinesList := [ ] ;
67409: LD_ADDR_EXP 89
67413: PUSH
67414: EMPTY
67415: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67416: LD_ADDR_EXP 90
67420: PUSH
67421: LD_INT 5
67423: ST_TO_ADDR
// end ;
67424: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67425: LD_EXP 87
67429: PUSH
67430: LD_INT 34
67432: PUSH
67433: LD_INT 81
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PPUSH
67440: CALL_OW 69
67444: AND
67445: IFFALSE 67906
67447: GO 67449
67449: DISABLE
67450: LD_INT 0
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
// begin enable ;
67456: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67457: LD_ADDR_VAR 0 1
67461: PUSH
67462: LD_INT 34
67464: PUSH
67465: LD_INT 81
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PPUSH
67472: CALL_OW 69
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67550
// begin if not i in minersList then
67480: LD_VAR 0 1
67484: PUSH
67485: LD_EXP 88
67489: IN
67490: NOT
67491: IFFALSE 67548
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67493: LD_ADDR_EXP 88
67497: PUSH
67498: LD_EXP 88
67502: PPUSH
67503: LD_EXP 88
67507: PUSH
67508: LD_INT 1
67510: PLUS
67511: PPUSH
67512: LD_VAR 0 1
67516: PPUSH
67517: CALL_OW 1
67521: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67522: LD_ADDR_EXP 89
67526: PUSH
67527: LD_EXP 89
67531: PPUSH
67532: LD_EXP 89
67536: PUSH
67537: LD_INT 1
67539: PLUS
67540: PPUSH
67541: EMPTY
67542: PPUSH
67543: CALL_OW 1
67547: ST_TO_ADDR
// end end ;
67548: GO 67477
67550: POP
67551: POP
// for i := minerMinesList downto 1 do
67552: LD_ADDR_VAR 0 1
67556: PUSH
67557: DOUBLE
67558: LD_EXP 89
67562: INC
67563: ST_TO_ADDR
67564: LD_INT 1
67566: PUSH
67567: FOR_DOWNTO
67568: IFFALSE 67904
// begin if IsLive ( minersList [ i ] ) then
67570: LD_EXP 88
67574: PUSH
67575: LD_VAR 0 1
67579: ARRAY
67580: PPUSH
67581: CALL_OW 300
67585: IFFALSE 67613
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67587: LD_EXP 88
67591: PUSH
67592: LD_VAR 0 1
67596: ARRAY
67597: PPUSH
67598: LD_EXP 89
67602: PUSH
67603: LD_VAR 0 1
67607: ARRAY
67608: PPUSH
67609: CALL_OW 505
// if not minerMinesList [ i ] then
67613: LD_EXP 89
67617: PUSH
67618: LD_VAR 0 1
67622: ARRAY
67623: NOT
67624: IFFALSE 67628
// continue ;
67626: GO 67567
// for j := minerMinesList [ i ] downto 1 do
67628: LD_ADDR_VAR 0 2
67632: PUSH
67633: DOUBLE
67634: LD_EXP 89
67638: PUSH
67639: LD_VAR 0 1
67643: ARRAY
67644: INC
67645: ST_TO_ADDR
67646: LD_INT 1
67648: PUSH
67649: FOR_DOWNTO
67650: IFFALSE 67900
// begin side := GetSide ( minersList [ i ] ) ;
67652: LD_ADDR_VAR 0 3
67656: PUSH
67657: LD_EXP 88
67661: PUSH
67662: LD_VAR 0 1
67666: ARRAY
67667: PPUSH
67668: CALL_OW 255
67672: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67673: LD_ADDR_VAR 0 4
67677: PUSH
67678: LD_EXP 89
67682: PUSH
67683: LD_VAR 0 1
67687: ARRAY
67688: PUSH
67689: LD_VAR 0 2
67693: ARRAY
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PPUSH
67699: LD_EXP 89
67703: PUSH
67704: LD_VAR 0 1
67708: ARRAY
67709: PUSH
67710: LD_VAR 0 2
67714: ARRAY
67715: PUSH
67716: LD_INT 2
67718: ARRAY
67719: PPUSH
67720: CALL_OW 428
67724: ST_TO_ADDR
// if not tmp then
67725: LD_VAR 0 4
67729: NOT
67730: IFFALSE 67734
// continue ;
67732: GO 67649
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67734: LD_VAR 0 4
67738: PUSH
67739: LD_INT 81
67741: PUSH
67742: LD_VAR 0 3
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PPUSH
67751: CALL_OW 69
67755: IN
67756: PUSH
67757: LD_EXP 89
67761: PUSH
67762: LD_VAR 0 1
67766: ARRAY
67767: PUSH
67768: LD_VAR 0 2
67772: ARRAY
67773: PUSH
67774: LD_INT 1
67776: ARRAY
67777: PPUSH
67778: LD_EXP 89
67782: PUSH
67783: LD_VAR 0 1
67787: ARRAY
67788: PUSH
67789: LD_VAR 0 2
67793: ARRAY
67794: PUSH
67795: LD_INT 2
67797: ARRAY
67798: PPUSH
67799: CALL_OW 458
67803: AND
67804: IFFALSE 67898
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67806: LD_EXP 89
67810: PUSH
67811: LD_VAR 0 1
67815: ARRAY
67816: PUSH
67817: LD_VAR 0 2
67821: ARRAY
67822: PUSH
67823: LD_INT 1
67825: ARRAY
67826: PPUSH
67827: LD_EXP 89
67831: PUSH
67832: LD_VAR 0 1
67836: ARRAY
67837: PUSH
67838: LD_VAR 0 2
67842: ARRAY
67843: PUSH
67844: LD_INT 2
67846: ARRAY
67847: PPUSH
67848: LD_VAR 0 3
67852: PPUSH
67853: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67857: LD_ADDR_EXP 89
67861: PUSH
67862: LD_EXP 89
67866: PPUSH
67867: LD_VAR 0 1
67871: PPUSH
67872: LD_EXP 89
67876: PUSH
67877: LD_VAR 0 1
67881: ARRAY
67882: PPUSH
67883: LD_VAR 0 2
67887: PPUSH
67888: CALL_OW 3
67892: PPUSH
67893: CALL_OW 1
67897: ST_TO_ADDR
// end ; end ;
67898: GO 67649
67900: POP
67901: POP
// end ;
67902: GO 67567
67904: POP
67905: POP
// end ;
67906: PPOPN 4
67908: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67909: LD_INT 0
67911: PPUSH
67912: PPUSH
// result := false ;
67913: LD_ADDR_VAR 0 4
67917: PUSH
67918: LD_INT 0
67920: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 264
67930: PUSH
67931: LD_INT 81
67933: EQUAL
67934: NOT
67935: IFFALSE 67939
// exit ;
67937: GO 68179
// index := GetElementIndex ( minersList , unit ) ;
67939: LD_ADDR_VAR 0 5
67943: PUSH
67944: LD_EXP 88
67948: PPUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL 28439 0 2
67958: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67959: LD_EXP 89
67963: PUSH
67964: LD_VAR 0 5
67968: ARRAY
67969: PUSH
67970: LD_EXP 90
67974: GREATEREQUAL
67975: IFFALSE 67979
// exit ;
67977: GO 68179
// ComMoveXY ( unit , x , y ) ;
67979: LD_VAR 0 1
67983: PPUSH
67984: LD_VAR 0 2
67988: PPUSH
67989: LD_VAR 0 3
67993: PPUSH
67994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67998: LD_INT 35
68000: PPUSH
68001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68005: LD_VAR 0 1
68009: PPUSH
68010: LD_VAR 0 2
68014: PPUSH
68015: LD_VAR 0 3
68019: PPUSH
68020: CALL 59794 0 3
68024: NOT
68025: PUSH
68026: LD_VAR 0 1
68030: PPUSH
68031: CALL_OW 314
68035: AND
68036: IFFALSE 68040
// exit ;
68038: GO 68179
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68040: LD_VAR 0 2
68044: PPUSH
68045: LD_VAR 0 3
68049: PPUSH
68050: CALL_OW 428
68054: PUSH
68055: LD_VAR 0 1
68059: EQUAL
68060: PUSH
68061: LD_VAR 0 1
68065: PPUSH
68066: CALL_OW 314
68070: NOT
68071: AND
68072: IFFALSE 67998
// PlaySoundXY ( x , y , PlantMine ) ;
68074: LD_VAR 0 2
68078: PPUSH
68079: LD_VAR 0 3
68083: PPUSH
68084: LD_STRING PlantMine
68086: PPUSH
68087: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68091: LD_VAR 0 2
68095: PPUSH
68096: LD_VAR 0 3
68100: PPUSH
68101: LD_VAR 0 1
68105: PPUSH
68106: CALL_OW 255
68110: PPUSH
68111: LD_INT 0
68113: PPUSH
68114: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68118: LD_ADDR_EXP 89
68122: PUSH
68123: LD_EXP 89
68127: PPUSH
68128: LD_VAR 0 5
68132: PUSH
68133: LD_EXP 89
68137: PUSH
68138: LD_VAR 0 5
68142: ARRAY
68143: PUSH
68144: LD_INT 1
68146: PLUS
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PPUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_VAR 0 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL 28654 0 3
68170: ST_TO_ADDR
// result := true ;
68171: LD_ADDR_VAR 0 4
68175: PUSH
68176: LD_INT 1
68178: ST_TO_ADDR
// end ;
68179: LD_VAR 0 4
68183: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68184: LD_INT 0
68186: PPUSH
68187: PPUSH
68188: PPUSH
// if not unit in minersList then
68189: LD_VAR 0 1
68193: PUSH
68194: LD_EXP 88
68198: IN
68199: NOT
68200: IFFALSE 68204
// exit ;
68202: GO 68596
// index := GetElementIndex ( minersList , unit ) ;
68204: LD_ADDR_VAR 0 6
68208: PUSH
68209: LD_EXP 88
68213: PPUSH
68214: LD_VAR 0 1
68218: PPUSH
68219: CALL 28439 0 2
68223: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68224: LD_ADDR_VAR 0 5
68228: PUSH
68229: DOUBLE
68230: LD_EXP 89
68234: PUSH
68235: LD_VAR 0 6
68239: ARRAY
68240: INC
68241: ST_TO_ADDR
68242: LD_INT 1
68244: PUSH
68245: FOR_DOWNTO
68246: IFFALSE 68407
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68248: LD_EXP 89
68252: PUSH
68253: LD_VAR 0 6
68257: ARRAY
68258: PUSH
68259: LD_VAR 0 5
68263: ARRAY
68264: PUSH
68265: LD_INT 1
68267: ARRAY
68268: PUSH
68269: LD_VAR 0 2
68273: EQUAL
68274: PUSH
68275: LD_EXP 89
68279: PUSH
68280: LD_VAR 0 6
68284: ARRAY
68285: PUSH
68286: LD_VAR 0 5
68290: ARRAY
68291: PUSH
68292: LD_INT 2
68294: ARRAY
68295: PUSH
68296: LD_VAR 0 3
68300: EQUAL
68301: AND
68302: IFFALSE 68405
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68304: LD_EXP 89
68308: PUSH
68309: LD_VAR 0 6
68313: ARRAY
68314: PUSH
68315: LD_VAR 0 5
68319: ARRAY
68320: PUSH
68321: LD_INT 1
68323: ARRAY
68324: PPUSH
68325: LD_EXP 89
68329: PUSH
68330: LD_VAR 0 6
68334: ARRAY
68335: PUSH
68336: LD_VAR 0 5
68340: ARRAY
68341: PUSH
68342: LD_INT 2
68344: ARRAY
68345: PPUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: CALL_OW 255
68355: PPUSH
68356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68360: LD_ADDR_EXP 89
68364: PUSH
68365: LD_EXP 89
68369: PPUSH
68370: LD_VAR 0 6
68374: PPUSH
68375: LD_EXP 89
68379: PUSH
68380: LD_VAR 0 6
68384: ARRAY
68385: PPUSH
68386: LD_VAR 0 5
68390: PPUSH
68391: CALL_OW 3
68395: PPUSH
68396: CALL_OW 1
68400: ST_TO_ADDR
// exit ;
68401: POP
68402: POP
68403: GO 68596
// end ; end ;
68405: GO 68245
68407: POP
68408: POP
// for i := minerMinesList [ index ] downto 1 do
68409: LD_ADDR_VAR 0 5
68413: PUSH
68414: DOUBLE
68415: LD_EXP 89
68419: PUSH
68420: LD_VAR 0 6
68424: ARRAY
68425: INC
68426: ST_TO_ADDR
68427: LD_INT 1
68429: PUSH
68430: FOR_DOWNTO
68431: IFFALSE 68594
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68433: LD_EXP 89
68437: PUSH
68438: LD_VAR 0 6
68442: ARRAY
68443: PUSH
68444: LD_VAR 0 5
68448: ARRAY
68449: PUSH
68450: LD_INT 1
68452: ARRAY
68453: PPUSH
68454: LD_EXP 89
68458: PUSH
68459: LD_VAR 0 6
68463: ARRAY
68464: PUSH
68465: LD_VAR 0 5
68469: ARRAY
68470: PUSH
68471: LD_INT 2
68473: ARRAY
68474: PPUSH
68475: LD_VAR 0 2
68479: PPUSH
68480: LD_VAR 0 3
68484: PPUSH
68485: CALL_OW 298
68489: PUSH
68490: LD_INT 6
68492: LESS
68493: IFFALSE 68592
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68495: LD_EXP 89
68499: PUSH
68500: LD_VAR 0 6
68504: ARRAY
68505: PUSH
68506: LD_VAR 0 5
68510: ARRAY
68511: PUSH
68512: LD_INT 1
68514: ARRAY
68515: PPUSH
68516: LD_EXP 89
68520: PUSH
68521: LD_VAR 0 6
68525: ARRAY
68526: PUSH
68527: LD_VAR 0 5
68531: ARRAY
68532: PUSH
68533: LD_INT 2
68535: ARRAY
68536: PPUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 255
68546: PPUSH
68547: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68551: LD_ADDR_EXP 89
68555: PUSH
68556: LD_EXP 89
68560: PPUSH
68561: LD_VAR 0 6
68565: PPUSH
68566: LD_EXP 89
68570: PUSH
68571: LD_VAR 0 6
68575: ARRAY
68576: PPUSH
68577: LD_VAR 0 5
68581: PPUSH
68582: CALL_OW 3
68586: PPUSH
68587: CALL_OW 1
68591: ST_TO_ADDR
// end ; end ;
68592: GO 68430
68594: POP
68595: POP
// end ;
68596: LD_VAR 0 4
68600: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68601: LD_INT 0
68603: PPUSH
68604: PPUSH
68605: PPUSH
68606: PPUSH
68607: PPUSH
68608: PPUSH
68609: PPUSH
68610: PPUSH
68611: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68612: LD_VAR 0 1
68616: PPUSH
68617: CALL_OW 264
68621: PUSH
68622: LD_INT 81
68624: EQUAL
68625: NOT
68626: PUSH
68627: LD_VAR 0 1
68631: PUSH
68632: LD_EXP 88
68636: IN
68637: NOT
68638: OR
68639: IFFALSE 68643
// exit ;
68641: GO 68965
// index := GetElementIndex ( minersList , unit ) ;
68643: LD_ADDR_VAR 0 6
68647: PUSH
68648: LD_EXP 88
68652: PPUSH
68653: LD_VAR 0 1
68657: PPUSH
68658: CALL 28439 0 2
68662: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68663: LD_ADDR_VAR 0 8
68667: PUSH
68668: LD_EXP 90
68672: PUSH
68673: LD_EXP 89
68677: PUSH
68678: LD_VAR 0 6
68682: ARRAY
68683: MINUS
68684: ST_TO_ADDR
// if not minesFreeAmount then
68685: LD_VAR 0 8
68689: NOT
68690: IFFALSE 68694
// exit ;
68692: GO 68965
// tmp := [ ] ;
68694: LD_ADDR_VAR 0 7
68698: PUSH
68699: EMPTY
68700: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68701: LD_ADDR_VAR 0 5
68705: PUSH
68706: DOUBLE
68707: LD_INT 1
68709: DEC
68710: ST_TO_ADDR
68711: LD_VAR 0 8
68715: PUSH
68716: FOR_TO
68717: IFFALSE 68912
// begin _d := rand ( 0 , 5 ) ;
68719: LD_ADDR_VAR 0 11
68723: PUSH
68724: LD_INT 0
68726: PPUSH
68727: LD_INT 5
68729: PPUSH
68730: CALL_OW 12
68734: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68735: LD_ADDR_VAR 0 12
68739: PUSH
68740: LD_INT 2
68742: PPUSH
68743: LD_INT 6
68745: PPUSH
68746: CALL_OW 12
68750: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68751: LD_ADDR_VAR 0 9
68755: PUSH
68756: LD_VAR 0 2
68760: PPUSH
68761: LD_VAR 0 11
68765: PPUSH
68766: LD_VAR 0 12
68770: PPUSH
68771: CALL_OW 272
68775: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68776: LD_ADDR_VAR 0 10
68780: PUSH
68781: LD_VAR 0 3
68785: PPUSH
68786: LD_VAR 0 11
68790: PPUSH
68791: LD_VAR 0 12
68795: PPUSH
68796: CALL_OW 273
68800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68801: LD_VAR 0 9
68805: PPUSH
68806: LD_VAR 0 10
68810: PPUSH
68811: CALL_OW 488
68815: PUSH
68816: LD_VAR 0 9
68820: PUSH
68821: LD_VAR 0 10
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_VAR 0 7
68834: IN
68835: NOT
68836: AND
68837: PUSH
68838: LD_VAR 0 9
68842: PPUSH
68843: LD_VAR 0 10
68847: PPUSH
68848: CALL_OW 458
68852: NOT
68853: AND
68854: IFFALSE 68896
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68856: LD_ADDR_VAR 0 7
68860: PUSH
68861: LD_VAR 0 7
68865: PPUSH
68866: LD_VAR 0 7
68870: PUSH
68871: LD_INT 1
68873: PLUS
68874: PPUSH
68875: LD_VAR 0 9
68879: PUSH
68880: LD_VAR 0 10
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PPUSH
68889: CALL_OW 1
68893: ST_TO_ADDR
68894: GO 68910
// i := i - 1 ;
68896: LD_ADDR_VAR 0 5
68900: PUSH
68901: LD_VAR 0 5
68905: PUSH
68906: LD_INT 1
68908: MINUS
68909: ST_TO_ADDR
// end ;
68910: GO 68716
68912: POP
68913: POP
// for i in tmp do
68914: LD_ADDR_VAR 0 5
68918: PUSH
68919: LD_VAR 0 7
68923: PUSH
68924: FOR_IN
68925: IFFALSE 68963
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68927: LD_VAR 0 1
68931: PPUSH
68932: LD_VAR 0 5
68936: PUSH
68937: LD_INT 1
68939: ARRAY
68940: PPUSH
68941: LD_VAR 0 5
68945: PUSH
68946: LD_INT 2
68948: ARRAY
68949: PPUSH
68950: CALL 67909 0 3
68954: NOT
68955: IFFALSE 68961
// exit ;
68957: POP
68958: POP
68959: GO 68965
68961: GO 68924
68963: POP
68964: POP
// end ;
68965: LD_VAR 0 4
68969: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68970: LD_INT 0
68972: PPUSH
68973: PPUSH
68974: PPUSH
68975: PPUSH
68976: PPUSH
68977: PPUSH
68978: PPUSH
// if not GetClass ( unit ) = class_sniper then
68979: LD_VAR 0 1
68983: PPUSH
68984: CALL_OW 257
68988: PUSH
68989: LD_INT 5
68991: EQUAL
68992: NOT
68993: IFFALSE 68997
// exit ;
68995: GO 69385
// dist := 8 ;
68997: LD_ADDR_VAR 0 5
69001: PUSH
69002: LD_INT 8
69004: ST_TO_ADDR
// viewRange := 12 ;
69005: LD_ADDR_VAR 0 7
69009: PUSH
69010: LD_INT 12
69012: ST_TO_ADDR
// side := GetSide ( unit ) ;
69013: LD_ADDR_VAR 0 6
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL_OW 255
69027: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69028: LD_INT 61
69030: PPUSH
69031: LD_VAR 0 6
69035: PPUSH
69036: CALL_OW 321
69040: PUSH
69041: LD_INT 2
69043: EQUAL
69044: IFFALSE 69054
// viewRange := 16 ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_INT 16
69053: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_VAR 0 2
69063: PPUSH
69064: LD_VAR 0 3
69068: PPUSH
69069: CALL_OW 297
69073: PUSH
69074: LD_VAR 0 5
69078: GREATER
69079: IFFALSE 69158
// begin ComMoveXY ( unit , x , y ) ;
69081: LD_VAR 0 1
69085: PPUSH
69086: LD_VAR 0 2
69090: PPUSH
69091: LD_VAR 0 3
69095: PPUSH
69096: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69100: LD_INT 35
69102: PPUSH
69103: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69107: LD_VAR 0 1
69111: PPUSH
69112: LD_VAR 0 2
69116: PPUSH
69117: LD_VAR 0 3
69121: PPUSH
69122: CALL 59794 0 3
69126: NOT
69127: IFFALSE 69131
// exit ;
69129: GO 69385
// until GetDistUnitXY ( unit , x , y ) < dist ;
69131: LD_VAR 0 1
69135: PPUSH
69136: LD_VAR 0 2
69140: PPUSH
69141: LD_VAR 0 3
69145: PPUSH
69146: CALL_OW 297
69150: PUSH
69151: LD_VAR 0 5
69155: LESS
69156: IFFALSE 69100
// end ; ComTurnXY ( unit , x , y ) ;
69158: LD_VAR 0 1
69162: PPUSH
69163: LD_VAR 0 2
69167: PPUSH
69168: LD_VAR 0 3
69172: PPUSH
69173: CALL_OW 118
// wait ( 5 ) ;
69177: LD_INT 5
69179: PPUSH
69180: CALL_OW 67
// _d := GetDir ( unit ) ;
69184: LD_ADDR_VAR 0 10
69188: PUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: CALL_OW 254
69198: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69199: LD_ADDR_VAR 0 8
69203: PUSH
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 250
69213: PPUSH
69214: LD_VAR 0 10
69218: PPUSH
69219: LD_VAR 0 5
69223: PPUSH
69224: CALL_OW 272
69228: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69229: LD_ADDR_VAR 0 9
69233: PUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 251
69243: PPUSH
69244: LD_VAR 0 10
69248: PPUSH
69249: LD_VAR 0 5
69253: PPUSH
69254: CALL_OW 273
69258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69259: LD_VAR 0 8
69263: PPUSH
69264: LD_VAR 0 9
69268: PPUSH
69269: CALL_OW 488
69273: NOT
69274: IFFALSE 69278
// exit ;
69276: GO 69385
// ComAnimCustom ( unit , 1 ) ;
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_INT 1
69285: PPUSH
69286: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69290: LD_VAR 0 8
69294: PPUSH
69295: LD_VAR 0 9
69299: PPUSH
69300: LD_VAR 0 6
69304: PPUSH
69305: LD_VAR 0 7
69309: PPUSH
69310: CALL_OW 330
// repeat wait ( 1 ) ;
69314: LD_INT 1
69316: PPUSH
69317: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69321: LD_VAR 0 1
69325: PPUSH
69326: CALL_OW 316
69330: PUSH
69331: LD_VAR 0 1
69335: PPUSH
69336: CALL_OW 314
69340: OR
69341: PUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 302
69351: NOT
69352: OR
69353: PUSH
69354: LD_VAR 0 1
69358: PPUSH
69359: CALL_OW 301
69363: OR
69364: IFFALSE 69314
// RemoveSeeing ( _x , _y , side ) ;
69366: LD_VAR 0 8
69370: PPUSH
69371: LD_VAR 0 9
69375: PPUSH
69376: LD_VAR 0 6
69380: PPUSH
69381: CALL_OW 331
// end ; end_of_file
69385: LD_VAR 0 4
69389: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 2
69399: PPUSH
69400: LD_VAR 0 3
69404: PPUSH
69405: LD_VAR 0 4
69409: PPUSH
69410: LD_VAR 0 5
69414: PPUSH
69415: LD_VAR 0 6
69419: PPUSH
69420: CALL 7878 0 6
// end ;
69424: PPOPN 6
69426: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69427: LD_INT 0
69429: PPUSH
// begin if not units then
69430: LD_VAR 0 1
69434: NOT
69435: IFFALSE 69439
// exit ;
69437: GO 69439
// end ;
69439: PPOPN 7
69441: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69442: CALL 7782 0 0
// end ;
69446: PPOPN 1
69448: END
