// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// export function SOS_MapStart ( ) ; begin
7745: LD_INT 0
7747: PPUSH
// if streamModeActive then
7748: LD_EXP 19
7752: IFFALSE 7761
// DefineStreamItems ( true ) ;
7754: LD_INT 1
7756: PPUSH
7757: CALL 9415 0 1
// UpdateFactoryWaypoints ( ) ;
7761: CALL 22276 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7765: CALL 22533 0 0
// end ;
7769: LD_VAR 0 1
7773: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7774: LD_INT 0
7776: PPUSH
// if p2 = hack_mode then
7777: LD_VAR 0 2
7781: PUSH
7782: LD_INT 100
7784: EQUAL
7785: IFFALSE 8788
// begin if not StreamModeActive then
7787: LD_EXP 19
7791: NOT
7792: IFFALSE 7802
// StreamModeActive := true ;
7794: LD_ADDR_EXP 19
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// if p3 = 0 then
7802: LD_VAR 0 3
7806: PUSH
7807: LD_INT 0
7809: EQUAL
7810: IFFALSE 7816
// InitStreamMode ;
7812: CALL 8951 0 0
// if p3 = 1 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 1
7823: EQUAL
7824: IFFALSE 7834
// sRocket := true ;
7826: LD_ADDR_EXP 24
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 2 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 2
7841: EQUAL
7842: IFFALSE 7852
// sSpeed := true ;
7844: LD_ADDR_EXP 23
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 3 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 3
7859: EQUAL
7860: IFFALSE 7870
// sEngine := true ;
7862: LD_ADDR_EXP 25
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 4 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 4
7877: EQUAL
7878: IFFALSE 7888
// sSpec := true ;
7880: LD_ADDR_EXP 22
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 5 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 5
7895: EQUAL
7896: IFFALSE 7906
// sLevel := true ;
7898: LD_ADDR_EXP 26
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 6 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 6
7913: EQUAL
7914: IFFALSE 7924
// sArmoury := true ;
7916: LD_ADDR_EXP 27
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 7 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 7
7931: EQUAL
7932: IFFALSE 7942
// sRadar := true ;
7934: LD_ADDR_EXP 28
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 8 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 8
7949: EQUAL
7950: IFFALSE 7960
// sBunker := true ;
7952: LD_ADDR_EXP 29
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 9 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 9
7967: EQUAL
7968: IFFALSE 7978
// sHack := true ;
7970: LD_ADDR_EXP 30
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 10 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 10
7985: EQUAL
7986: IFFALSE 7996
// sFire := true ;
7988: LD_ADDR_EXP 31
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 11 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 11
8003: EQUAL
8004: IFFALSE 8014
// sRefresh := true ;
8006: LD_ADDR_EXP 32
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 12 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 12
8021: EQUAL
8022: IFFALSE 8032
// sExp := true ;
8024: LD_ADDR_EXP 33
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 13 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 13
8039: EQUAL
8040: IFFALSE 8050
// sDepot := true ;
8042: LD_ADDR_EXP 34
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 14 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 14
8057: EQUAL
8058: IFFALSE 8068
// sFlag := true ;
8060: LD_ADDR_EXP 35
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 15 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 15
8075: EQUAL
8076: IFFALSE 8086
// sKamikadze := true ;
8078: LD_ADDR_EXP 43
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 16 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 16
8093: EQUAL
8094: IFFALSE 8104
// sTroll := true ;
8096: LD_ADDR_EXP 44
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 17 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 17
8111: EQUAL
8112: IFFALSE 8122
// sSlow := true ;
8114: LD_ADDR_EXP 45
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 18 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 18
8129: EQUAL
8130: IFFALSE 8140
// sLack := true ;
8132: LD_ADDR_EXP 46
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 19 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 19
8147: EQUAL
8148: IFFALSE 8158
// sTank := true ;
8150: LD_ADDR_EXP 48
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 20 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 20
8165: EQUAL
8166: IFFALSE 8176
// sRemote := true ;
8168: LD_ADDR_EXP 49
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 21 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 21
8183: EQUAL
8184: IFFALSE 8194
// sPowell := true ;
8186: LD_ADDR_EXP 50
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 22 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 22
8201: EQUAL
8202: IFFALSE 8212
// sTeleport := true ;
8204: LD_ADDR_EXP 53
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 23 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 23
8219: EQUAL
8220: IFFALSE 8230
// sOilTower := true ;
8222: LD_ADDR_EXP 55
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 24 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 24
8237: EQUAL
8238: IFFALSE 8248
// sShovel := true ;
8240: LD_ADDR_EXP 56
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 25 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 25
8255: EQUAL
8256: IFFALSE 8266
// sSheik := true ;
8258: LD_ADDR_EXP 57
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 26 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 26
8273: EQUAL
8274: IFFALSE 8284
// sEarthquake := true ;
8276: LD_ADDR_EXP 59
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 27 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 27
8291: EQUAL
8292: IFFALSE 8302
// sAI := true ;
8294: LD_ADDR_EXP 60
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 28 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 28
8309: EQUAL
8310: IFFALSE 8320
// sCargo := true ;
8312: LD_ADDR_EXP 63
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 29 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 29
8327: EQUAL
8328: IFFALSE 8338
// sDLaser := true ;
8330: LD_ADDR_EXP 64
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 30 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 30
8345: EQUAL
8346: IFFALSE 8356
// sExchange := true ;
8348: LD_ADDR_EXP 65
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 31 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 31
8363: EQUAL
8364: IFFALSE 8374
// sFac := true ;
8366: LD_ADDR_EXP 66
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 32 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 32
8381: EQUAL
8382: IFFALSE 8392
// sPower := true ;
8384: LD_ADDR_EXP 67
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 33 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 33
8399: EQUAL
8400: IFFALSE 8410
// sRandom := true ;
8402: LD_ADDR_EXP 68
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 34 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 34
8417: EQUAL
8418: IFFALSE 8428
// sShield := true ;
8420: LD_ADDR_EXP 69
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 35 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 35
8435: EQUAL
8436: IFFALSE 8446
// sTime := true ;
8438: LD_ADDR_EXP 70
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 36 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 36
8453: EQUAL
8454: IFFALSE 8464
// sTools := true ;
8456: LD_ADDR_EXP 71
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 101 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 101
8471: EQUAL
8472: IFFALSE 8482
// sSold := true ;
8474: LD_ADDR_EXP 36
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 102 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 102
8489: EQUAL
8490: IFFALSE 8500
// sDiff := true ;
8492: LD_ADDR_EXP 37
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 103 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 103
8507: EQUAL
8508: IFFALSE 8518
// sFog := true ;
8510: LD_ADDR_EXP 40
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 104 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 104
8525: EQUAL
8526: IFFALSE 8536
// sReset := true ;
8528: LD_ADDR_EXP 41
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 105 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 105
8543: EQUAL
8544: IFFALSE 8554
// sSun := true ;
8546: LD_ADDR_EXP 42
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 106 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 106
8561: EQUAL
8562: IFFALSE 8572
// sTiger := true ;
8564: LD_ADDR_EXP 38
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 107 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 107
8579: EQUAL
8580: IFFALSE 8590
// sBomb := true ;
8582: LD_ADDR_EXP 39
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 108 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 108
8597: EQUAL
8598: IFFALSE 8608
// sWound := true ;
8600: LD_ADDR_EXP 47
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 109 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 109
8615: EQUAL
8616: IFFALSE 8626
// sBetray := true ;
8618: LD_ADDR_EXP 51
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 110 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 110
8633: EQUAL
8634: IFFALSE 8644
// sContamin := true ;
8636: LD_ADDR_EXP 52
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 111 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 111
8651: EQUAL
8652: IFFALSE 8662
// sOil := true ;
8654: LD_ADDR_EXP 54
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 112 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 112
8669: EQUAL
8670: IFFALSE 8680
// sStu := true ;
8672: LD_ADDR_EXP 58
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 113 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 113
8687: EQUAL
8688: IFFALSE 8698
// sBazooka := true ;
8690: LD_ADDR_EXP 61
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 114 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 114
8705: EQUAL
8706: IFFALSE 8716
// sMortar := true ;
8708: LD_ADDR_EXP 62
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 115 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 115
8723: EQUAL
8724: IFFALSE 8734
// sRanger := true ;
8726: LD_ADDR_EXP 72
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 116 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 116
8741: EQUAL
8742: IFFALSE 8752
// sComputer := true ;
8744: LD_ADDR_EXP 73
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 117 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 117
8759: EQUAL
8760: IFFALSE 8770
// s30 := true ;
8762: LD_ADDR_EXP 74
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if p3 = 118 then
8770: LD_VAR 0 3
8774: PUSH
8775: LD_INT 118
8777: EQUAL
8778: IFFALSE 8788
// s60 := true ;
8780: LD_ADDR_EXP 75
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// end ; if p2 = stream_mode then
8788: LD_VAR 0 2
8792: PUSH
8793: LD_INT 101
8795: EQUAL
8796: IFFALSE 8924
// begin case p3 of 1 :
8798: LD_VAR 0 3
8802: PUSH
8803: LD_INT 1
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 8818
8811: POP
// hHackUnlimitedResources ; 2 :
8812: CALL 21022 0 0
8816: GO 8924
8818: LD_INT 2
8820: DOUBLE
8821: EQUAL
8822: IFTRUE 8826
8824: GO 8833
8826: POP
// hHackSetLevel10 ; 3 :
8827: CALL 21155 0 0
8831: GO 8924
8833: LD_INT 3
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8848
8841: POP
// hHackSetLevel10YourUnits ; 4 :
8842: CALL 21240 0 0
8846: GO 8924
8848: LD_INT 4
8850: DOUBLE
8851: EQUAL
8852: IFTRUE 8856
8854: GO 8863
8856: POP
// hHackInvincible ; 5 :
8857: CALL 21688 0 0
8861: GO 8924
8863: LD_INT 5
8865: DOUBLE
8866: EQUAL
8867: IFTRUE 8871
8869: GO 8878
8871: POP
// hHackInvisible ; 6 :
8872: CALL 21799 0 0
8876: GO 8924
8878: LD_INT 6
8880: DOUBLE
8881: EQUAL
8882: IFTRUE 8886
8884: GO 8893
8886: POP
// hHackChangeYourSide ; 7 :
8887: CALL 21856 0 0
8891: GO 8924
8893: LD_INT 7
8895: DOUBLE
8896: EQUAL
8897: IFTRUE 8901
8899: GO 8908
8901: POP
// hHackChangeUnitSide ; 8 :
8902: CALL 21898 0 0
8906: GO 8924
8908: LD_INT 8
8910: DOUBLE
8911: EQUAL
8912: IFTRUE 8916
8914: GO 8923
8916: POP
// hHackFog ; end ;
8917: CALL 21999 0 0
8921: GO 8924
8923: POP
// end ; end ;
8924: LD_VAR 0 7
8928: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8929: GO 8931
8931: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8932: LD_STRING initStreamRollete();
8934: PPUSH
8935: CALL_OW 559
// InitStreamMode ;
8939: CALL 8951 0 0
// DefineStreamItems ( false ) ;
8943: LD_INT 0
8945: PPUSH
8946: CALL 9415 0 1
// end ;
8950: END
// function InitStreamMode ; begin
8951: LD_INT 0
8953: PPUSH
// streamModeActive := false ;
8954: LD_ADDR_EXP 19
8958: PUSH
8959: LD_INT 0
8961: ST_TO_ADDR
// normalCounter := 36 ;
8962: LD_ADDR_EXP 20
8966: PUSH
8967: LD_INT 36
8969: ST_TO_ADDR
// hardcoreCounter := 18 ;
8970: LD_ADDR_EXP 21
8974: PUSH
8975: LD_INT 18
8977: ST_TO_ADDR
// sRocket := false ;
8978: LD_ADDR_EXP 24
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// sSpeed := false ;
8986: LD_ADDR_EXP 23
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// sEngine := false ;
8994: LD_ADDR_EXP 25
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// sSpec := false ;
9002: LD_ADDR_EXP 22
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// sLevel := false ;
9010: LD_ADDR_EXP 26
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// sArmoury := false ;
9018: LD_ADDR_EXP 27
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// sRadar := false ;
9026: LD_ADDR_EXP 28
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// sBunker := false ;
9034: LD_ADDR_EXP 29
9038: PUSH
9039: LD_INT 0
9041: ST_TO_ADDR
// sHack := false ;
9042: LD_ADDR_EXP 30
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// sFire := false ;
9050: LD_ADDR_EXP 31
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// sRefresh := false ;
9058: LD_ADDR_EXP 32
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// sExp := false ;
9066: LD_ADDR_EXP 33
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// sDepot := false ;
9074: LD_ADDR_EXP 34
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// sFlag := false ;
9082: LD_ADDR_EXP 35
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// sKamikadze := false ;
9090: LD_ADDR_EXP 43
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// sTroll := false ;
9098: LD_ADDR_EXP 44
9102: PUSH
9103: LD_INT 0
9105: ST_TO_ADDR
// sSlow := false ;
9106: LD_ADDR_EXP 45
9110: PUSH
9111: LD_INT 0
9113: ST_TO_ADDR
// sLack := false ;
9114: LD_ADDR_EXP 46
9118: PUSH
9119: LD_INT 0
9121: ST_TO_ADDR
// sTank := false ;
9122: LD_ADDR_EXP 48
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// sRemote := false ;
9130: LD_ADDR_EXP 49
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// sPowell := false ;
9138: LD_ADDR_EXP 50
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// sTeleport := false ;
9146: LD_ADDR_EXP 53
9150: PUSH
9151: LD_INT 0
9153: ST_TO_ADDR
// sOilTower := false ;
9154: LD_ADDR_EXP 55
9158: PUSH
9159: LD_INT 0
9161: ST_TO_ADDR
// sShovel := false ;
9162: LD_ADDR_EXP 56
9166: PUSH
9167: LD_INT 0
9169: ST_TO_ADDR
// sSheik := false ;
9170: LD_ADDR_EXP 57
9174: PUSH
9175: LD_INT 0
9177: ST_TO_ADDR
// sEarthquake := false ;
9178: LD_ADDR_EXP 59
9182: PUSH
9183: LD_INT 0
9185: ST_TO_ADDR
// sAI := false ;
9186: LD_ADDR_EXP 60
9190: PUSH
9191: LD_INT 0
9193: ST_TO_ADDR
// sCargo := false ;
9194: LD_ADDR_EXP 63
9198: PUSH
9199: LD_INT 0
9201: ST_TO_ADDR
// sDLaser := false ;
9202: LD_ADDR_EXP 64
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// sExchange := false ;
9210: LD_ADDR_EXP 65
9214: PUSH
9215: LD_INT 0
9217: ST_TO_ADDR
// sFac := false ;
9218: LD_ADDR_EXP 66
9222: PUSH
9223: LD_INT 0
9225: ST_TO_ADDR
// sPower := false ;
9226: LD_ADDR_EXP 67
9230: PUSH
9231: LD_INT 0
9233: ST_TO_ADDR
// sRandom := false ;
9234: LD_ADDR_EXP 68
9238: PUSH
9239: LD_INT 0
9241: ST_TO_ADDR
// sShield := false ;
9242: LD_ADDR_EXP 69
9246: PUSH
9247: LD_INT 0
9249: ST_TO_ADDR
// sTime := false ;
9250: LD_ADDR_EXP 70
9254: PUSH
9255: LD_INT 0
9257: ST_TO_ADDR
// sTools := false ;
9258: LD_ADDR_EXP 71
9262: PUSH
9263: LD_INT 0
9265: ST_TO_ADDR
// sSold := false ;
9266: LD_ADDR_EXP 36
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// sDiff := false ;
9274: LD_ADDR_EXP 37
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// sFog := false ;
9282: LD_ADDR_EXP 40
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// sReset := false ;
9290: LD_ADDR_EXP 41
9294: PUSH
9295: LD_INT 0
9297: ST_TO_ADDR
// sSun := false ;
9298: LD_ADDR_EXP 42
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// sTiger := false ;
9306: LD_ADDR_EXP 38
9310: PUSH
9311: LD_INT 0
9313: ST_TO_ADDR
// sBomb := false ;
9314: LD_ADDR_EXP 39
9318: PUSH
9319: LD_INT 0
9321: ST_TO_ADDR
// sWound := false ;
9322: LD_ADDR_EXP 47
9326: PUSH
9327: LD_INT 0
9329: ST_TO_ADDR
// sBetray := false ;
9330: LD_ADDR_EXP 51
9334: PUSH
9335: LD_INT 0
9337: ST_TO_ADDR
// sContamin := false ;
9338: LD_ADDR_EXP 52
9342: PUSH
9343: LD_INT 0
9345: ST_TO_ADDR
// sOil := false ;
9346: LD_ADDR_EXP 54
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// sStu := false ;
9354: LD_ADDR_EXP 58
9358: PUSH
9359: LD_INT 0
9361: ST_TO_ADDR
// sBazooka := false ;
9362: LD_ADDR_EXP 61
9366: PUSH
9367: LD_INT 0
9369: ST_TO_ADDR
// sMortar := false ;
9370: LD_ADDR_EXP 62
9374: PUSH
9375: LD_INT 0
9377: ST_TO_ADDR
// sRanger := false ;
9378: LD_ADDR_EXP 72
9382: PUSH
9383: LD_INT 0
9385: ST_TO_ADDR
// sComputer := false ;
9386: LD_ADDR_EXP 73
9390: PUSH
9391: LD_INT 0
9393: ST_TO_ADDR
// s30 := false ;
9394: LD_ADDR_EXP 74
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// s60 := false ;
9402: LD_ADDR_EXP 75
9406: PUSH
9407: LD_INT 0
9409: ST_TO_ADDR
// end ;
9410: LD_VAR 0 1
9414: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
9421: PPUSH
9422: PPUSH
9423: PPUSH
// result := [ ] ;
9424: LD_ADDR_VAR 0 2
9428: PUSH
9429: EMPTY
9430: ST_TO_ADDR
// if campaign_id = 1 then
9431: LD_OWVAR 69
9435: PUSH
9436: LD_INT 1
9438: EQUAL
9439: IFFALSE 12605
// begin case mission_number of 1 :
9441: LD_OWVAR 70
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9530
9454: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9455: LD_ADDR_VAR 0 2
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 4
9465: PUSH
9466: LD_INT 11
9468: PUSH
9469: LD_INT 12
9471: PUSH
9472: LD_INT 15
9474: PUSH
9475: LD_INT 16
9477: PUSH
9478: LD_INT 22
9480: PUSH
9481: LD_INT 23
9483: PUSH
9484: LD_INT 26
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 101
9500: PUSH
9501: LD_INT 102
9503: PUSH
9504: LD_INT 106
9506: PUSH
9507: LD_INT 116
9509: PUSH
9510: LD_INT 117
9512: PUSH
9513: LD_INT 118
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: ST_TO_ADDR
9528: GO 12603
9530: LD_INT 2
9532: DOUBLE
9533: EQUAL
9534: IFTRUE 9538
9536: GO 9622
9538: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: LD_INT 2
9546: PUSH
9547: LD_INT 4
9549: PUSH
9550: LD_INT 11
9552: PUSH
9553: LD_INT 12
9555: PUSH
9556: LD_INT 15
9558: PUSH
9559: LD_INT 16
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 23
9567: PUSH
9568: LD_INT 26
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 101
9584: PUSH
9585: LD_INT 102
9587: PUSH
9588: LD_INT 105
9590: PUSH
9591: LD_INT 106
9593: PUSH
9594: LD_INT 108
9596: PUSH
9597: LD_INT 116
9599: PUSH
9600: LD_INT 117
9602: PUSH
9603: LD_INT 118
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: ST_TO_ADDR
9620: GO 12603
9622: LD_INT 3
9624: DOUBLE
9625: EQUAL
9626: IFTRUE 9630
9628: GO 9718
9630: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9631: LD_ADDR_VAR 0 2
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: LD_INT 4
9641: PUSH
9642: LD_INT 5
9644: PUSH
9645: LD_INT 11
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: LD_INT 15
9653: PUSH
9654: LD_INT 16
9656: PUSH
9657: LD_INT 22
9659: PUSH
9660: LD_INT 26
9662: PUSH
9663: LD_INT 36
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 101
9680: PUSH
9681: LD_INT 102
9683: PUSH
9684: LD_INT 105
9686: PUSH
9687: LD_INT 106
9689: PUSH
9690: LD_INT 108
9692: PUSH
9693: LD_INT 116
9695: PUSH
9696: LD_INT 117
9698: PUSH
9699: LD_INT 118
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: ST_TO_ADDR
9716: GO 12603
9718: LD_INT 4
9720: DOUBLE
9721: EQUAL
9722: IFTRUE 9726
9724: GO 9822
9726: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9727: LD_ADDR_VAR 0 2
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: LD_INT 4
9737: PUSH
9738: LD_INT 5
9740: PUSH
9741: LD_INT 8
9743: PUSH
9744: LD_INT 11
9746: PUSH
9747: LD_INT 12
9749: PUSH
9750: LD_INT 15
9752: PUSH
9753: LD_INT 16
9755: PUSH
9756: LD_INT 22
9758: PUSH
9759: LD_INT 23
9761: PUSH
9762: LD_INT 26
9764: PUSH
9765: LD_INT 36
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 101
9784: PUSH
9785: LD_INT 102
9787: PUSH
9788: LD_INT 105
9790: PUSH
9791: LD_INT 106
9793: PUSH
9794: LD_INT 108
9796: PUSH
9797: LD_INT 116
9799: PUSH
9800: LD_INT 117
9802: PUSH
9803: LD_INT 118
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: ST_TO_ADDR
9820: GO 12603
9822: LD_INT 5
9824: DOUBLE
9825: EQUAL
9826: IFTRUE 9830
9828: GO 9942
9830: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9831: LD_ADDR_VAR 0 2
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: LD_INT 4
9841: PUSH
9842: LD_INT 5
9844: PUSH
9845: LD_INT 6
9847: PUSH
9848: LD_INT 8
9850: PUSH
9851: LD_INT 11
9853: PUSH
9854: LD_INT 12
9856: PUSH
9857: LD_INT 15
9859: PUSH
9860: LD_INT 16
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 23
9868: PUSH
9869: LD_INT 25
9871: PUSH
9872: LD_INT 26
9874: PUSH
9875: LD_INT 36
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 101
9896: PUSH
9897: LD_INT 102
9899: PUSH
9900: LD_INT 105
9902: PUSH
9903: LD_INT 106
9905: PUSH
9906: LD_INT 108
9908: PUSH
9909: LD_INT 109
9911: PUSH
9912: LD_INT 112
9914: PUSH
9915: LD_INT 116
9917: PUSH
9918: LD_INT 117
9920: PUSH
9921: LD_INT 118
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: ST_TO_ADDR
9940: GO 12603
9942: LD_INT 6
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10082
9950: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9951: LD_ADDR_VAR 0 2
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 4
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: LD_INT 6
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: LD_INT 11
9973: PUSH
9974: LD_INT 12
9976: PUSH
9977: LD_INT 15
9979: PUSH
9980: LD_INT 16
9982: PUSH
9983: LD_INT 20
9985: PUSH
9986: LD_INT 21
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 23
9994: PUSH
9995: LD_INT 25
9997: PUSH
9998: LD_INT 26
10000: PUSH
10001: LD_INT 30
10003: PUSH
10004: LD_INT 31
10006: PUSH
10007: LD_INT 32
10009: PUSH
10010: LD_INT 36
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 101
10036: PUSH
10037: LD_INT 102
10039: PUSH
10040: LD_INT 105
10042: PUSH
10043: LD_INT 106
10045: PUSH
10046: LD_INT 108
10048: PUSH
10049: LD_INT 109
10051: PUSH
10052: LD_INT 112
10054: PUSH
10055: LD_INT 116
10057: PUSH
10058: LD_INT 117
10060: PUSH
10061: LD_INT 118
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: ST_TO_ADDR
10080: GO 12603
10082: LD_INT 7
10084: DOUBLE
10085: EQUAL
10086: IFTRUE 10090
10088: GO 10202
10090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 2
10098: PUSH
10099: LD_INT 4
10101: PUSH
10102: LD_INT 5
10104: PUSH
10105: LD_INT 7
10107: PUSH
10108: LD_INT 11
10110: PUSH
10111: LD_INT 12
10113: PUSH
10114: LD_INT 15
10116: PUSH
10117: LD_INT 16
10119: PUSH
10120: LD_INT 20
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 22
10128: PUSH
10129: LD_INT 23
10131: PUSH
10132: LD_INT 25
10134: PUSH
10135: LD_INT 26
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 101
10156: PUSH
10157: LD_INT 102
10159: PUSH
10160: LD_INT 103
10162: PUSH
10163: LD_INT 105
10165: PUSH
10166: LD_INT 106
10168: PUSH
10169: LD_INT 108
10171: PUSH
10172: LD_INT 112
10174: PUSH
10175: LD_INT 116
10177: PUSH
10178: LD_INT 117
10180: PUSH
10181: LD_INT 118
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: ST_TO_ADDR
10200: GO 12603
10202: LD_INT 8
10204: DOUBLE
10205: EQUAL
10206: IFTRUE 10210
10208: GO 10350
10210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: LD_INT 4
10221: PUSH
10222: LD_INT 5
10224: PUSH
10225: LD_INT 6
10227: PUSH
10228: LD_INT 7
10230: PUSH
10231: LD_INT 8
10233: PUSH
10234: LD_INT 11
10236: PUSH
10237: LD_INT 12
10239: PUSH
10240: LD_INT 15
10242: PUSH
10243: LD_INT 16
10245: PUSH
10246: LD_INT 20
10248: PUSH
10249: LD_INT 21
10251: PUSH
10252: LD_INT 22
10254: PUSH
10255: LD_INT 23
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 26
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 31
10269: PUSH
10270: LD_INT 32
10272: PUSH
10273: LD_INT 36
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 101
10300: PUSH
10301: LD_INT 102
10303: PUSH
10304: LD_INT 103
10306: PUSH
10307: LD_INT 105
10309: PUSH
10310: LD_INT 106
10312: PUSH
10313: LD_INT 108
10315: PUSH
10316: LD_INT 109
10318: PUSH
10319: LD_INT 112
10321: PUSH
10322: LD_INT 116
10324: PUSH
10325: LD_INT 117
10327: PUSH
10328: LD_INT 118
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: ST_TO_ADDR
10348: GO 12603
10350: LD_INT 9
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10506
10358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: LD_INT 5
10372: PUSH
10373: LD_INT 6
10375: PUSH
10376: LD_INT 7
10378: PUSH
10379: LD_INT 8
10381: PUSH
10382: LD_INT 11
10384: PUSH
10385: LD_INT 12
10387: PUSH
10388: LD_INT 15
10390: PUSH
10391: LD_INT 16
10393: PUSH
10394: LD_INT 20
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 23
10405: PUSH
10406: LD_INT 25
10408: PUSH
10409: LD_INT 26
10411: PUSH
10412: LD_INT 28
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 31
10420: PUSH
10421: LD_INT 32
10423: PUSH
10424: LD_INT 36
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 101
10452: PUSH
10453: LD_INT 102
10455: PUSH
10456: LD_INT 103
10458: PUSH
10459: LD_INT 105
10461: PUSH
10462: LD_INT 106
10464: PUSH
10465: LD_INT 108
10467: PUSH
10468: LD_INT 109
10470: PUSH
10471: LD_INT 112
10473: PUSH
10474: LD_INT 114
10476: PUSH
10477: LD_INT 116
10479: PUSH
10480: LD_INT 117
10482: PUSH
10483: LD_INT 118
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: ST_TO_ADDR
10504: GO 12603
10506: LD_INT 10
10508: DOUBLE
10509: EQUAL
10510: IFTRUE 10514
10512: GO 10710
10514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 6
10531: PUSH
10532: LD_INT 7
10534: PUSH
10535: LD_INT 8
10537: PUSH
10538: LD_INT 9
10540: PUSH
10541: LD_INT 10
10543: PUSH
10544: LD_INT 11
10546: PUSH
10547: LD_INT 12
10549: PUSH
10550: LD_INT 13
10552: PUSH
10553: LD_INT 14
10555: PUSH
10556: LD_INT 15
10558: PUSH
10559: LD_INT 16
10561: PUSH
10562: LD_INT 17
10564: PUSH
10565: LD_INT 18
10567: PUSH
10568: LD_INT 19
10570: PUSH
10571: LD_INT 20
10573: PUSH
10574: LD_INT 21
10576: PUSH
10577: LD_INT 22
10579: PUSH
10580: LD_INT 23
10582: PUSH
10583: LD_INT 24
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 26
10591: PUSH
10592: LD_INT 28
10594: PUSH
10595: LD_INT 30
10597: PUSH
10598: LD_INT 31
10600: PUSH
10601: LD_INT 32
10603: PUSH
10604: LD_INT 36
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 101
10640: PUSH
10641: LD_INT 102
10643: PUSH
10644: LD_INT 103
10646: PUSH
10647: LD_INT 104
10649: PUSH
10650: LD_INT 105
10652: PUSH
10653: LD_INT 106
10655: PUSH
10656: LD_INT 107
10658: PUSH
10659: LD_INT 108
10661: PUSH
10662: LD_INT 109
10664: PUSH
10665: LD_INT 110
10667: PUSH
10668: LD_INT 111
10670: PUSH
10671: LD_INT 112
10673: PUSH
10674: LD_INT 114
10676: PUSH
10677: LD_INT 116
10679: PUSH
10680: LD_INT 117
10682: PUSH
10683: LD_INT 118
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: ST_TO_ADDR
10708: GO 12603
10710: LD_INT 11
10712: DOUBLE
10713: EQUAL
10714: IFTRUE 10718
10716: GO 10922
10718: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: LD_INT 2
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: LD_INT 6
10738: PUSH
10739: LD_INT 7
10741: PUSH
10742: LD_INT 8
10744: PUSH
10745: LD_INT 9
10747: PUSH
10748: LD_INT 10
10750: PUSH
10751: LD_INT 11
10753: PUSH
10754: LD_INT 12
10756: PUSH
10757: LD_INT 13
10759: PUSH
10760: LD_INT 14
10762: PUSH
10763: LD_INT 15
10765: PUSH
10766: LD_INT 16
10768: PUSH
10769: LD_INT 17
10771: PUSH
10772: LD_INT 18
10774: PUSH
10775: LD_INT 19
10777: PUSH
10778: LD_INT 20
10780: PUSH
10781: LD_INT 21
10783: PUSH
10784: LD_INT 22
10786: PUSH
10787: LD_INT 23
10789: PUSH
10790: LD_INT 24
10792: PUSH
10793: LD_INT 25
10795: PUSH
10796: LD_INT 26
10798: PUSH
10799: LD_INT 28
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 31
10807: PUSH
10808: LD_INT 32
10810: PUSH
10811: LD_INT 34
10813: PUSH
10814: LD_INT 36
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 101
10852: PUSH
10853: LD_INT 102
10855: PUSH
10856: LD_INT 103
10858: PUSH
10859: LD_INT 104
10861: PUSH
10862: LD_INT 105
10864: PUSH
10865: LD_INT 106
10867: PUSH
10868: LD_INT 107
10870: PUSH
10871: LD_INT 108
10873: PUSH
10874: LD_INT 109
10876: PUSH
10877: LD_INT 110
10879: PUSH
10880: LD_INT 111
10882: PUSH
10883: LD_INT 112
10885: PUSH
10886: LD_INT 114
10888: PUSH
10889: LD_INT 116
10891: PUSH
10892: LD_INT 117
10894: PUSH
10895: LD_INT 118
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: ST_TO_ADDR
10920: GO 12603
10922: LD_INT 12
10924: DOUBLE
10925: EQUAL
10926: IFTRUE 10930
10928: GO 11150
10930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10931: LD_ADDR_VAR 0 2
10935: PUSH
10936: LD_INT 1
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: LD_INT 5
10950: PUSH
10951: LD_INT 6
10953: PUSH
10954: LD_INT 7
10956: PUSH
10957: LD_INT 8
10959: PUSH
10960: LD_INT 9
10962: PUSH
10963: LD_INT 10
10965: PUSH
10966: LD_INT 11
10968: PUSH
10969: LD_INT 12
10971: PUSH
10972: LD_INT 13
10974: PUSH
10975: LD_INT 14
10977: PUSH
10978: LD_INT 15
10980: PUSH
10981: LD_INT 16
10983: PUSH
10984: LD_INT 17
10986: PUSH
10987: LD_INT 18
10989: PUSH
10990: LD_INT 19
10992: PUSH
10993: LD_INT 20
10995: PUSH
10996: LD_INT 21
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_INT 23
11004: PUSH
11005: LD_INT 24
11007: PUSH
11008: LD_INT 25
11010: PUSH
11011: LD_INT 26
11013: PUSH
11014: LD_INT 27
11016: PUSH
11017: LD_INT 28
11019: PUSH
11020: LD_INT 30
11022: PUSH
11023: LD_INT 31
11025: PUSH
11026: LD_INT 32
11028: PUSH
11029: LD_INT 33
11031: PUSH
11032: LD_INT 34
11034: PUSH
11035: LD_INT 36
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 102
11079: PUSH
11080: LD_INT 103
11082: PUSH
11083: LD_INT 104
11085: PUSH
11086: LD_INT 105
11088: PUSH
11089: LD_INT 106
11091: PUSH
11092: LD_INT 107
11094: PUSH
11095: LD_INT 108
11097: PUSH
11098: LD_INT 109
11100: PUSH
11101: LD_INT 110
11103: PUSH
11104: LD_INT 111
11106: PUSH
11107: LD_INT 112
11109: PUSH
11110: LD_INT 113
11112: PUSH
11113: LD_INT 114
11115: PUSH
11116: LD_INT 116
11118: PUSH
11119: LD_INT 117
11121: PUSH
11122: LD_INT 118
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: ST_TO_ADDR
11148: GO 12603
11150: LD_INT 13
11152: DOUBLE
11153: EQUAL
11154: IFTRUE 11158
11156: GO 11366
11158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11159: LD_ADDR_VAR 0 2
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 3
11172: PUSH
11173: LD_INT 4
11175: PUSH
11176: LD_INT 5
11178: PUSH
11179: LD_INT 8
11181: PUSH
11182: LD_INT 9
11184: PUSH
11185: LD_INT 10
11187: PUSH
11188: LD_INT 11
11190: PUSH
11191: LD_INT 12
11193: PUSH
11194: LD_INT 14
11196: PUSH
11197: LD_INT 15
11199: PUSH
11200: LD_INT 16
11202: PUSH
11203: LD_INT 17
11205: PUSH
11206: LD_INT 18
11208: PUSH
11209: LD_INT 19
11211: PUSH
11212: LD_INT 20
11214: PUSH
11215: LD_INT 21
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_INT 23
11223: PUSH
11224: LD_INT 24
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 26
11232: PUSH
11233: LD_INT 27
11235: PUSH
11236: LD_INT 28
11238: PUSH
11239: LD_INT 30
11241: PUSH
11242: LD_INT 31
11244: PUSH
11245: LD_INT 32
11247: PUSH
11248: LD_INT 33
11250: PUSH
11251: LD_INT 34
11253: PUSH
11254: LD_INT 36
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 101
11292: PUSH
11293: LD_INT 102
11295: PUSH
11296: LD_INT 103
11298: PUSH
11299: LD_INT 104
11301: PUSH
11302: LD_INT 105
11304: PUSH
11305: LD_INT 106
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: LD_INT 108
11313: PUSH
11314: LD_INT 109
11316: PUSH
11317: LD_INT 110
11319: PUSH
11320: LD_INT 111
11322: PUSH
11323: LD_INT 112
11325: PUSH
11326: LD_INT 113
11328: PUSH
11329: LD_INT 114
11331: PUSH
11332: LD_INT 116
11334: PUSH
11335: LD_INT 117
11337: PUSH
11338: LD_INT 118
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: ST_TO_ADDR
11364: GO 12603
11366: LD_INT 14
11368: DOUBLE
11369: EQUAL
11370: IFTRUE 11374
11372: GO 11598
11374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 1
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: LD_INT 4
11391: PUSH
11392: LD_INT 5
11394: PUSH
11395: LD_INT 6
11397: PUSH
11398: LD_INT 7
11400: PUSH
11401: LD_INT 8
11403: PUSH
11404: LD_INT 9
11406: PUSH
11407: LD_INT 10
11409: PUSH
11410: LD_INT 11
11412: PUSH
11413: LD_INT 12
11415: PUSH
11416: LD_INT 13
11418: PUSH
11419: LD_INT 14
11421: PUSH
11422: LD_INT 15
11424: PUSH
11425: LD_INT 16
11427: PUSH
11428: LD_INT 17
11430: PUSH
11431: LD_INT 18
11433: PUSH
11434: LD_INT 19
11436: PUSH
11437: LD_INT 20
11439: PUSH
11440: LD_INT 21
11442: PUSH
11443: LD_INT 22
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 24
11451: PUSH
11452: LD_INT 25
11454: PUSH
11455: LD_INT 26
11457: PUSH
11458: LD_INT 27
11460: PUSH
11461: LD_INT 28
11463: PUSH
11464: LD_INT 29
11466: PUSH
11467: LD_INT 30
11469: PUSH
11470: LD_INT 31
11472: PUSH
11473: LD_INT 32
11475: PUSH
11476: LD_INT 33
11478: PUSH
11479: LD_INT 34
11481: PUSH
11482: LD_INT 36
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 101
11524: PUSH
11525: LD_INT 102
11527: PUSH
11528: LD_INT 103
11530: PUSH
11531: LD_INT 104
11533: PUSH
11534: LD_INT 105
11536: PUSH
11537: LD_INT 106
11539: PUSH
11540: LD_INT 107
11542: PUSH
11543: LD_INT 108
11545: PUSH
11546: LD_INT 109
11548: PUSH
11549: LD_INT 110
11551: PUSH
11552: LD_INT 111
11554: PUSH
11555: LD_INT 112
11557: PUSH
11558: LD_INT 113
11560: PUSH
11561: LD_INT 114
11563: PUSH
11564: LD_INT 116
11566: PUSH
11567: LD_INT 117
11569: PUSH
11570: LD_INT 118
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: ST_TO_ADDR
11596: GO 12603
11598: LD_INT 15
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11830
11606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11607: LD_ADDR_VAR 0 2
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: LD_INT 2
11617: PUSH
11618: LD_INT 3
11620: PUSH
11621: LD_INT 4
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: LD_INT 6
11629: PUSH
11630: LD_INT 7
11632: PUSH
11633: LD_INT 8
11635: PUSH
11636: LD_INT 9
11638: PUSH
11639: LD_INT 10
11641: PUSH
11642: LD_INT 11
11644: PUSH
11645: LD_INT 12
11647: PUSH
11648: LD_INT 13
11650: PUSH
11651: LD_INT 14
11653: PUSH
11654: LD_INT 15
11656: PUSH
11657: LD_INT 16
11659: PUSH
11660: LD_INT 17
11662: PUSH
11663: LD_INT 18
11665: PUSH
11666: LD_INT 19
11668: PUSH
11669: LD_INT 20
11671: PUSH
11672: LD_INT 21
11674: PUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 23
11680: PUSH
11681: LD_INT 24
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 26
11689: PUSH
11690: LD_INT 27
11692: PUSH
11693: LD_INT 28
11695: PUSH
11696: LD_INT 29
11698: PUSH
11699: LD_INT 30
11701: PUSH
11702: LD_INT 31
11704: PUSH
11705: LD_INT 32
11707: PUSH
11708: LD_INT 33
11710: PUSH
11711: LD_INT 34
11713: PUSH
11714: LD_INT 36
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 101
11756: PUSH
11757: LD_INT 102
11759: PUSH
11760: LD_INT 103
11762: PUSH
11763: LD_INT 104
11765: PUSH
11766: LD_INT 105
11768: PUSH
11769: LD_INT 106
11771: PUSH
11772: LD_INT 107
11774: PUSH
11775: LD_INT 108
11777: PUSH
11778: LD_INT 109
11780: PUSH
11781: LD_INT 110
11783: PUSH
11784: LD_INT 111
11786: PUSH
11787: LD_INT 112
11789: PUSH
11790: LD_INT 113
11792: PUSH
11793: LD_INT 114
11795: PUSH
11796: LD_INT 116
11798: PUSH
11799: LD_INT 117
11801: PUSH
11802: LD_INT 118
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: ST_TO_ADDR
11828: GO 12603
11830: LD_INT 16
11832: DOUBLE
11833: EQUAL
11834: IFTRUE 11838
11836: GO 11974
11838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: LD_INT 4
11849: PUSH
11850: LD_INT 5
11852: PUSH
11853: LD_INT 7
11855: PUSH
11856: LD_INT 11
11858: PUSH
11859: LD_INT 12
11861: PUSH
11862: LD_INT 15
11864: PUSH
11865: LD_INT 16
11867: PUSH
11868: LD_INT 20
11870: PUSH
11871: LD_INT 21
11873: PUSH
11874: LD_INT 22
11876: PUSH
11877: LD_INT 23
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 26
11885: PUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 31
11891: PUSH
11892: LD_INT 32
11894: PUSH
11895: LD_INT 33
11897: PUSH
11898: LD_INT 34
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 101
11924: PUSH
11925: LD_INT 102
11927: PUSH
11928: LD_INT 103
11930: PUSH
11931: LD_INT 106
11933: PUSH
11934: LD_INT 108
11936: PUSH
11937: LD_INT 112
11939: PUSH
11940: LD_INT 113
11942: PUSH
11943: LD_INT 114
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: ST_TO_ADDR
11972: GO 12603
11974: LD_INT 17
11976: DOUBLE
11977: EQUAL
11978: IFTRUE 11982
11980: GO 12206
11982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11983: LD_ADDR_VAR 0 2
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: LD_INT 5
12002: PUSH
12003: LD_INT 6
12005: PUSH
12006: LD_INT 7
12008: PUSH
12009: LD_INT 8
12011: PUSH
12012: LD_INT 9
12014: PUSH
12015: LD_INT 10
12017: PUSH
12018: LD_INT 11
12020: PUSH
12021: LD_INT 12
12023: PUSH
12024: LD_INT 13
12026: PUSH
12027: LD_INT 14
12029: PUSH
12030: LD_INT 15
12032: PUSH
12033: LD_INT 16
12035: PUSH
12036: LD_INT 17
12038: PUSH
12039: LD_INT 18
12041: PUSH
12042: LD_INT 19
12044: PUSH
12045: LD_INT 20
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 23
12056: PUSH
12057: LD_INT 24
12059: PUSH
12060: LD_INT 25
12062: PUSH
12063: LD_INT 26
12065: PUSH
12066: LD_INT 27
12068: PUSH
12069: LD_INT 28
12071: PUSH
12072: LD_INT 29
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 31
12080: PUSH
12081: LD_INT 32
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 34
12089: PUSH
12090: LD_INT 36
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 101
12132: PUSH
12133: LD_INT 102
12135: PUSH
12136: LD_INT 103
12138: PUSH
12139: LD_INT 104
12141: PUSH
12142: LD_INT 105
12144: PUSH
12145: LD_INT 106
12147: PUSH
12148: LD_INT 107
12150: PUSH
12151: LD_INT 108
12153: PUSH
12154: LD_INT 109
12156: PUSH
12157: LD_INT 110
12159: PUSH
12160: LD_INT 111
12162: PUSH
12163: LD_INT 112
12165: PUSH
12166: LD_INT 113
12168: PUSH
12169: LD_INT 114
12171: PUSH
12172: LD_INT 116
12174: PUSH
12175: LD_INT 117
12177: PUSH
12178: LD_INT 118
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: ST_TO_ADDR
12204: GO 12603
12206: LD_INT 18
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12362
12214: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_INT 2
12222: PUSH
12223: LD_INT 4
12225: PUSH
12226: LD_INT 5
12228: PUSH
12229: LD_INT 7
12231: PUSH
12232: LD_INT 11
12234: PUSH
12235: LD_INT 12
12237: PUSH
12238: LD_INT 15
12240: PUSH
12241: LD_INT 16
12243: PUSH
12244: LD_INT 20
12246: PUSH
12247: LD_INT 21
12249: PUSH
12250: LD_INT 22
12252: PUSH
12253: LD_INT 23
12255: PUSH
12256: LD_INT 25
12258: PUSH
12259: LD_INT 26
12261: PUSH
12262: LD_INT 30
12264: PUSH
12265: LD_INT 31
12267: PUSH
12268: LD_INT 32
12270: PUSH
12271: LD_INT 33
12273: PUSH
12274: LD_INT 34
12276: PUSH
12277: LD_INT 35
12279: PUSH
12280: LD_INT 36
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 101
12308: PUSH
12309: LD_INT 102
12311: PUSH
12312: LD_INT 103
12314: PUSH
12315: LD_INT 106
12317: PUSH
12318: LD_INT 108
12320: PUSH
12321: LD_INT 112
12323: PUSH
12324: LD_INT 113
12326: PUSH
12327: LD_INT 114
12329: PUSH
12330: LD_INT 115
12332: PUSH
12333: LD_INT 116
12335: PUSH
12336: LD_INT 117
12338: PUSH
12339: LD_INT 118
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: ST_TO_ADDR
12360: GO 12603
12362: LD_INT 19
12364: DOUBLE
12365: EQUAL
12366: IFTRUE 12370
12368: GO 12602
12370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12371: LD_ADDR_VAR 0 2
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: LD_INT 3
12384: PUSH
12385: LD_INT 4
12387: PUSH
12388: LD_INT 5
12390: PUSH
12391: LD_INT 6
12393: PUSH
12394: LD_INT 7
12396: PUSH
12397: LD_INT 8
12399: PUSH
12400: LD_INT 9
12402: PUSH
12403: LD_INT 10
12405: PUSH
12406: LD_INT 11
12408: PUSH
12409: LD_INT 12
12411: PUSH
12412: LD_INT 13
12414: PUSH
12415: LD_INT 14
12417: PUSH
12418: LD_INT 15
12420: PUSH
12421: LD_INT 16
12423: PUSH
12424: LD_INT 17
12426: PUSH
12427: LD_INT 18
12429: PUSH
12430: LD_INT 19
12432: PUSH
12433: LD_INT 20
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 22
12441: PUSH
12442: LD_INT 23
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 26
12453: PUSH
12454: LD_INT 27
12456: PUSH
12457: LD_INT 28
12459: PUSH
12460: LD_INT 29
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 31
12468: PUSH
12469: LD_INT 32
12471: PUSH
12472: LD_INT 33
12474: PUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 35
12480: PUSH
12481: LD_INT 36
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 101
12524: PUSH
12525: LD_INT 102
12527: PUSH
12528: LD_INT 103
12530: PUSH
12531: LD_INT 104
12533: PUSH
12534: LD_INT 105
12536: PUSH
12537: LD_INT 106
12539: PUSH
12540: LD_INT 107
12542: PUSH
12543: LD_INT 108
12545: PUSH
12546: LD_INT 109
12548: PUSH
12549: LD_INT 110
12551: PUSH
12552: LD_INT 111
12554: PUSH
12555: LD_INT 112
12557: PUSH
12558: LD_INT 113
12560: PUSH
12561: LD_INT 114
12563: PUSH
12564: LD_INT 115
12566: PUSH
12567: LD_INT 116
12569: PUSH
12570: LD_INT 117
12572: PUSH
12573: LD_INT 118
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 12603
12602: POP
// end else
12603: GO 12834
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: LD_INT 6
12627: PUSH
12628: LD_INT 7
12630: PUSH
12631: LD_INT 8
12633: PUSH
12634: LD_INT 9
12636: PUSH
12637: LD_INT 10
12639: PUSH
12640: LD_INT 11
12642: PUSH
12643: LD_INT 12
12645: PUSH
12646: LD_INT 13
12648: PUSH
12649: LD_INT 14
12651: PUSH
12652: LD_INT 15
12654: PUSH
12655: LD_INT 16
12657: PUSH
12658: LD_INT 17
12660: PUSH
12661: LD_INT 18
12663: PUSH
12664: LD_INT 19
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 24
12681: PUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 26
12687: PUSH
12688: LD_INT 27
12690: PUSH
12691: LD_INT 28
12693: PUSH
12694: LD_INT 29
12696: PUSH
12697: LD_INT 30
12699: PUSH
12700: LD_INT 31
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 33
12708: PUSH
12709: LD_INT 34
12711: PUSH
12712: LD_INT 35
12714: PUSH
12715: LD_INT 36
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 101
12758: PUSH
12759: LD_INT 102
12761: PUSH
12762: LD_INT 103
12764: PUSH
12765: LD_INT 104
12767: PUSH
12768: LD_INT 105
12770: PUSH
12771: LD_INT 106
12773: PUSH
12774: LD_INT 107
12776: PUSH
12777: LD_INT 108
12779: PUSH
12780: LD_INT 109
12782: PUSH
12783: LD_INT 110
12785: PUSH
12786: LD_INT 111
12788: PUSH
12789: LD_INT 112
12791: PUSH
12792: LD_INT 113
12794: PUSH
12795: LD_INT 114
12797: PUSH
12798: LD_INT 115
12800: PUSH
12801: LD_INT 116
12803: PUSH
12804: LD_INT 117
12806: PUSH
12807: LD_INT 118
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: ST_TO_ADDR
// if result then
12834: LD_VAR 0 2
12838: IFFALSE 13624
// begin normal :=  ;
12840: LD_ADDR_VAR 0 5
12844: PUSH
12845: LD_STRING 
12847: ST_TO_ADDR
// hardcore :=  ;
12848: LD_ADDR_VAR 0 6
12852: PUSH
12853: LD_STRING 
12855: ST_TO_ADDR
// active :=  ;
12856: LD_ADDR_VAR 0 7
12860: PUSH
12861: LD_STRING 
12863: ST_TO_ADDR
// for i = 1 to normalCounter do
12864: LD_ADDR_VAR 0 8
12868: PUSH
12869: DOUBLE
12870: LD_INT 1
12872: DEC
12873: ST_TO_ADDR
12874: LD_EXP 20
12878: PUSH
12879: FOR_TO
12880: IFFALSE 12981
// begin tmp := 0 ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_STRING 0
12889: ST_TO_ADDR
// if result [ 1 ] then
12890: LD_VAR 0 2
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: IFFALSE 12963
// if result [ 1 ] [ 1 ] = i then
12900: LD_VAR 0 2
12904: PUSH
12905: LD_INT 1
12907: ARRAY
12908: PUSH
12909: LD_INT 1
12911: ARRAY
12912: PUSH
12913: LD_VAR 0 8
12917: EQUAL
12918: IFFALSE 12963
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12920: LD_ADDR_VAR 0 2
12924: PUSH
12925: LD_VAR 0 2
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: LD_VAR 0 2
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: LD_INT 1
12944: PPUSH
12945: CALL_OW 3
12949: PPUSH
12950: CALL_OW 1
12954: ST_TO_ADDR
// tmp := 1 ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_STRING 1
12962: ST_TO_ADDR
// end ; normal := normal & tmp ;
12963: LD_ADDR_VAR 0 5
12967: PUSH
12968: LD_VAR 0 5
12972: PUSH
12973: LD_VAR 0 3
12977: STR
12978: ST_TO_ADDR
// end ;
12979: GO 12879
12981: POP
12982: POP
// for i = 1 to hardcoreCounter do
12983: LD_ADDR_VAR 0 8
12987: PUSH
12988: DOUBLE
12989: LD_INT 1
12991: DEC
12992: ST_TO_ADDR
12993: LD_EXP 21
12997: PUSH
12998: FOR_TO
12999: IFFALSE 13104
// begin tmp := 0 ;
13001: LD_ADDR_VAR 0 3
13005: PUSH
13006: LD_STRING 0
13008: ST_TO_ADDR
// if result [ 2 ] then
13009: LD_VAR 0 2
13013: PUSH
13014: LD_INT 2
13016: ARRAY
13017: IFFALSE 13086
// if result [ 2 ] [ 1 ] = 100 + i then
13019: LD_VAR 0 2
13023: PUSH
13024: LD_INT 2
13026: ARRAY
13027: PUSH
13028: LD_INT 1
13030: ARRAY
13031: PUSH
13032: LD_INT 100
13034: PUSH
13035: LD_VAR 0 8
13039: PLUS
13040: EQUAL
13041: IFFALSE 13086
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_VAR 0 2
13052: PPUSH
13053: LD_INT 2
13055: PPUSH
13056: LD_VAR 0 2
13060: PUSH
13061: LD_INT 2
13063: ARRAY
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 3
13072: PPUSH
13073: CALL_OW 1
13077: ST_TO_ADDR
// tmp := 1 ;
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_STRING 1
13085: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13086: LD_ADDR_VAR 0 6
13090: PUSH
13091: LD_VAR 0 6
13095: PUSH
13096: LD_VAR 0 3
13100: STR
13101: ST_TO_ADDR
// end ;
13102: GO 12998
13104: POP
13105: POP
// if isGameLoad then
13106: LD_VAR 0 1
13110: IFFALSE 13585
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13112: LD_ADDR_VAR 0 4
13116: PUSH
13117: LD_EXP 24
13121: PUSH
13122: LD_EXP 23
13126: PUSH
13127: LD_EXP 25
13131: PUSH
13132: LD_EXP 22
13136: PUSH
13137: LD_EXP 26
13141: PUSH
13142: LD_EXP 27
13146: PUSH
13147: LD_EXP 28
13151: PUSH
13152: LD_EXP 29
13156: PUSH
13157: LD_EXP 30
13161: PUSH
13162: LD_EXP 31
13166: PUSH
13167: LD_EXP 32
13171: PUSH
13172: LD_EXP 33
13176: PUSH
13177: LD_EXP 34
13181: PUSH
13182: LD_EXP 35
13186: PUSH
13187: LD_EXP 43
13191: PUSH
13192: LD_EXP 44
13196: PUSH
13197: LD_EXP 45
13201: PUSH
13202: LD_EXP 46
13206: PUSH
13207: LD_EXP 48
13211: PUSH
13212: LD_EXP 49
13216: PUSH
13217: LD_EXP 50
13221: PUSH
13222: LD_EXP 53
13226: PUSH
13227: LD_EXP 55
13231: PUSH
13232: LD_EXP 56
13236: PUSH
13237: LD_EXP 57
13241: PUSH
13242: LD_EXP 59
13246: PUSH
13247: LD_EXP 60
13251: PUSH
13252: LD_EXP 63
13256: PUSH
13257: LD_EXP 64
13261: PUSH
13262: LD_EXP 65
13266: PUSH
13267: LD_EXP 66
13271: PUSH
13272: LD_EXP 67
13276: PUSH
13277: LD_EXP 68
13281: PUSH
13282: LD_EXP 69
13286: PUSH
13287: LD_EXP 70
13291: PUSH
13292: LD_EXP 71
13296: PUSH
13297: LD_EXP 36
13301: PUSH
13302: LD_EXP 37
13306: PUSH
13307: LD_EXP 40
13311: PUSH
13312: LD_EXP 41
13316: PUSH
13317: LD_EXP 42
13321: PUSH
13322: LD_EXP 38
13326: PUSH
13327: LD_EXP 39
13331: PUSH
13332: LD_EXP 47
13336: PUSH
13337: LD_EXP 51
13341: PUSH
13342: LD_EXP 52
13346: PUSH
13347: LD_EXP 54
13351: PUSH
13352: LD_EXP 58
13356: PUSH
13357: LD_EXP 61
13361: PUSH
13362: LD_EXP 62
13366: PUSH
13367: LD_EXP 72
13371: PUSH
13372: LD_EXP 73
13376: PUSH
13377: LD_EXP 74
13381: PUSH
13382: LD_EXP 75
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: ST_TO_ADDR
// tmp :=  ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_STRING 
13450: ST_TO_ADDR
// for i = 1 to normalCounter do
13451: LD_ADDR_VAR 0 8
13455: PUSH
13456: DOUBLE
13457: LD_INT 1
13459: DEC
13460: ST_TO_ADDR
13461: LD_EXP 20
13465: PUSH
13466: FOR_TO
13467: IFFALSE 13503
// begin if flags [ i ] then
13469: LD_VAR 0 4
13473: PUSH
13474: LD_VAR 0 8
13478: ARRAY
13479: IFFALSE 13501
// tmp := tmp & i & ; ;
13481: LD_ADDR_VAR 0 3
13485: PUSH
13486: LD_VAR 0 3
13490: PUSH
13491: LD_VAR 0 8
13495: STR
13496: PUSH
13497: LD_STRING ;
13499: STR
13500: ST_TO_ADDR
// end ;
13501: GO 13466
13503: POP
13504: POP
// for i = 1 to hardcoreCounter do
13505: LD_ADDR_VAR 0 8
13509: PUSH
13510: DOUBLE
13511: LD_INT 1
13513: DEC
13514: ST_TO_ADDR
13515: LD_EXP 21
13519: PUSH
13520: FOR_TO
13521: IFFALSE 13567
// begin if flags [ normalCounter + i ] then
13523: LD_VAR 0 4
13527: PUSH
13528: LD_EXP 20
13532: PUSH
13533: LD_VAR 0 8
13537: PLUS
13538: ARRAY
13539: IFFALSE 13565
// tmp := tmp & ( 100 + i ) & ; ;
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 100
13553: PUSH
13554: LD_VAR 0 8
13558: PLUS
13559: STR
13560: PUSH
13561: LD_STRING ;
13563: STR
13564: ST_TO_ADDR
// end ;
13565: GO 13520
13567: POP
13568: POP
// if tmp then
13569: LD_VAR 0 3
13573: IFFALSE 13585
// active := tmp ;
13575: LD_ADDR_VAR 0 7
13579: PUSH
13580: LD_VAR 0 3
13584: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13585: LD_STRING getStreamItemsFromMission("
13587: PUSH
13588: LD_VAR 0 5
13592: STR
13593: PUSH
13594: LD_STRING ","
13596: STR
13597: PUSH
13598: LD_VAR 0 6
13602: STR
13603: PUSH
13604: LD_STRING ","
13606: STR
13607: PUSH
13608: LD_VAR 0 7
13612: STR
13613: PUSH
13614: LD_STRING ")
13616: STR
13617: PPUSH
13618: CALL_OW 559
// end else
13622: GO 13631
// ToLua ( getStreamItemsFromMission("","","") ) ;
13624: LD_STRING getStreamItemsFromMission("","","")
13626: PPUSH
13627: CALL_OW 559
// end ;
13631: LD_VAR 0 2
13635: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13636: LD_EXP 19
13640: PUSH
13641: LD_EXP 24
13645: AND
13646: IFFALSE 13770
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
// begin enable ;
13655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_INT 22
13663: PUSH
13664: LD_OWVAR 2
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: LD_INT 34
13678: PUSH
13679: LD_INT 7
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 34
13688: PUSH
13689: LD_INT 45
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 34
13698: PUSH
13699: LD_INT 28
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 47
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 2
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13770
// for i in tmp do
13741: LD_ADDR_VAR 0 1
13745: PUSH
13746: LD_VAR 0 2
13750: PUSH
13751: FOR_IN
13752: IFFALSE 13768
// begin SetLives ( i , 0 ) ;
13754: LD_VAR 0 1
13758: PPUSH
13759: LD_INT 0
13761: PPUSH
13762: CALL_OW 234
// end ;
13766: GO 13751
13768: POP
13769: POP
// end ;
13770: PPOPN 2
13772: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13773: LD_EXP 19
13777: PUSH
13778: LD_EXP 25
13782: AND
13783: IFFALSE 13867
13785: GO 13787
13787: DISABLE
13788: LD_INT 0
13790: PPUSH
13791: PPUSH
// begin enable ;
13792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_OWVAR 2
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 32
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// begin SetLives ( i , 0 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 0
13858: PPUSH
13859: CALL_OW 234
// end ;
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13870: LD_EXP 19
13874: PUSH
13875: LD_EXP 22
13879: AND
13880: IFFALSE 13973
13882: GO 13884
13884: DISABLE
13885: LD_INT 0
13887: PPUSH
// begin enable ;
13888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13889: LD_ADDR_VAR 0 1
13893: PUSH
13894: LD_INT 22
13896: PUSH
13897: LD_OWVAR 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: LD_INT 25
13911: PUSH
13912: LD_INT 5
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 25
13921: PUSH
13922: LD_INT 9
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 25
13931: PUSH
13932: LD_INT 8
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PPUSH
13949: CALL_OW 69
13953: PUSH
13954: FOR_IN
13955: IFFALSE 13971
// begin SetClass ( i , 1 ) ;
13957: LD_VAR 0 1
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: CALL_OW 336
// end ;
13969: GO 13954
13971: POP
13972: POP
// end ;
13973: PPOPN 1
13975: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13976: LD_EXP 19
13980: PUSH
13981: LD_EXP 23
13985: AND
13986: PUSH
13987: LD_OWVAR 65
13991: PUSH
13992: LD_INT 7
13994: LESS
13995: AND
13996: IFFALSE 14010
13998: GO 14000
14000: DISABLE
// begin enable ;
14001: ENABLE
// game_speed := 7 ;
14002: LD_ADDR_OWVAR 65
14006: PUSH
14007: LD_INT 7
14009: ST_TO_ADDR
// end ;
14010: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14011: LD_EXP 19
14015: PUSH
14016: LD_EXP 26
14020: AND
14021: IFFALSE 14223
14023: GO 14025
14025: DISABLE
14026: LD_INT 0
14028: PPUSH
14029: PPUSH
14030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 81
14038: PUSH
14039: LD_OWVAR 2
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 21
14050: PUSH
14051: LD_INT 1
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 69
14066: ST_TO_ADDR
// if not tmp then
14067: LD_VAR 0 3
14071: NOT
14072: IFFALSE 14076
// exit ;
14074: GO 14223
// if tmp > 5 then
14076: LD_VAR 0 3
14080: PUSH
14081: LD_INT 5
14083: GREATER
14084: IFFALSE 14096
// k := 5 else
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_INT 5
14093: ST_TO_ADDR
14094: GO 14106
// k := tmp ;
14096: LD_ADDR_VAR 0 2
14100: PUSH
14101: LD_VAR 0 3
14105: ST_TO_ADDR
// for i := 1 to k do
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: DOUBLE
14112: LD_INT 1
14114: DEC
14115: ST_TO_ADDR
14116: LD_VAR 0 2
14120: PUSH
14121: FOR_TO
14122: IFFALSE 14221
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14124: LD_VAR 0 3
14128: PUSH
14129: LD_VAR 0 1
14133: ARRAY
14134: PPUSH
14135: LD_VAR 0 1
14139: PUSH
14140: LD_INT 4
14142: MOD
14143: PUSH
14144: LD_INT 1
14146: PLUS
14147: PPUSH
14148: CALL_OW 259
14152: PUSH
14153: LD_INT 10
14155: LESS
14156: IFFALSE 14219
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14158: LD_VAR 0 3
14162: PUSH
14163: LD_VAR 0 1
14167: ARRAY
14168: PPUSH
14169: LD_VAR 0 1
14173: PUSH
14174: LD_INT 4
14176: MOD
14177: PUSH
14178: LD_INT 1
14180: PLUS
14181: PPUSH
14182: LD_VAR 0 3
14186: PUSH
14187: LD_VAR 0 1
14191: ARRAY
14192: PPUSH
14193: LD_VAR 0 1
14197: PUSH
14198: LD_INT 4
14200: MOD
14201: PUSH
14202: LD_INT 1
14204: PLUS
14205: PPUSH
14206: CALL_OW 259
14210: PUSH
14211: LD_INT 1
14213: PLUS
14214: PPUSH
14215: CALL_OW 237
14219: GO 14121
14221: POP
14222: POP
// end ;
14223: PPOPN 3
14225: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14226: LD_EXP 19
14230: PUSH
14231: LD_EXP 27
14235: AND
14236: IFFALSE 14256
14238: GO 14240
14240: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14241: LD_INT 4
14243: PPUSH
14244: LD_OWVAR 2
14248: PPUSH
14249: LD_INT 0
14251: PPUSH
14252: CALL_OW 324
14256: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14257: LD_EXP 19
14261: PUSH
14262: LD_EXP 56
14266: AND
14267: IFFALSE 14287
14269: GO 14271
14271: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14272: LD_INT 19
14274: PPUSH
14275: LD_OWVAR 2
14279: PPUSH
14280: LD_INT 0
14282: PPUSH
14283: CALL_OW 324
14287: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14288: LD_EXP 19
14292: PUSH
14293: LD_EXP 28
14297: AND
14298: IFFALSE 14400
14300: GO 14302
14302: DISABLE
14303: LD_INT 0
14305: PPUSH
14306: PPUSH
// begin enable ;
14307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14308: LD_ADDR_VAR 0 2
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_OWVAR 2
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 34
14330: PUSH
14331: LD_INT 11
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 34
14340: PUSH
14341: LD_INT 30
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 69
14361: ST_TO_ADDR
// if not tmp then
14362: LD_VAR 0 2
14366: NOT
14367: IFFALSE 14371
// exit ;
14369: GO 14400
// for i in tmp do
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_VAR 0 2
14380: PUSH
14381: FOR_IN
14382: IFFALSE 14398
// begin SetLives ( i , 0 ) ;
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_INT 0
14391: PPUSH
14392: CALL_OW 234
// end ;
14396: GO 14381
14398: POP
14399: POP
// end ;
14400: PPOPN 2
14402: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14403: LD_EXP 19
14407: PUSH
14408: LD_EXP 29
14412: AND
14413: IFFALSE 14433
14415: GO 14417
14417: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14418: LD_INT 32
14420: PPUSH
14421: LD_OWVAR 2
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 324
14433: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14434: LD_EXP 19
14438: PUSH
14439: LD_EXP 30
14443: AND
14444: IFFALSE 14625
14446: GO 14448
14448: DISABLE
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
14453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14454: LD_ADDR_VAR 0 2
14458: PUSH
14459: LD_INT 22
14461: PUSH
14462: LD_OWVAR 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 33
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PPUSH
14485: CALL_OW 69
14489: ST_TO_ADDR
// if not tmp then
14490: LD_VAR 0 2
14494: NOT
14495: IFFALSE 14499
// exit ;
14497: GO 14625
// side := 0 ;
14499: LD_ADDR_VAR 0 3
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// for i := 1 to 8 do
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: DOUBLE
14513: LD_INT 1
14515: DEC
14516: ST_TO_ADDR
14517: LD_INT 8
14519: PUSH
14520: FOR_TO
14521: IFFALSE 14569
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14523: LD_OWVAR 2
14527: PUSH
14528: LD_VAR 0 1
14532: NONEQUAL
14533: PUSH
14534: LD_OWVAR 2
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 81
14548: PUSH
14549: LD_INT 2
14551: EQUAL
14552: AND
14553: IFFALSE 14567
// begin side := i ;
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: LD_VAR 0 1
14564: ST_TO_ADDR
// break ;
14565: GO 14569
// end ;
14567: GO 14520
14569: POP
14570: POP
// if not side then
14571: LD_VAR 0 3
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 14625
// for i := 1 to tmp do
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: DOUBLE
14586: LD_INT 1
14588: DEC
14589: ST_TO_ADDR
14590: LD_VAR 0 2
14594: PUSH
14595: FOR_TO
14596: IFFALSE 14623
// if Prob ( 60 ) then
14598: LD_INT 60
14600: PPUSH
14601: CALL_OW 13
14605: IFFALSE 14621
// SetSide ( i , side ) ;
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 235
14621: GO 14595
14623: POP
14624: POP
// end ;
14625: PPOPN 3
14627: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14628: LD_EXP 19
14632: PUSH
14633: LD_EXP 32
14637: AND
14638: IFFALSE 14757
14640: GO 14642
14642: DISABLE
14643: LD_INT 0
14645: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 22
14653: PUSH
14654: LD_OWVAR 2
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 21
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 3
14675: PUSH
14676: LD_INT 23
14678: PUSH
14679: LD_INT 0
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: FOR_IN
14701: IFFALSE 14755
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 257
14712: PUSH
14713: LD_INT 1
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: IN
14731: IFFALSE 14753
// SetClass ( un , rand ( 1 , 4 ) ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 1
14740: PPUSH
14741: LD_INT 4
14743: PPUSH
14744: CALL_OW 12
14748: PPUSH
14749: CALL_OW 336
14753: GO 14700
14755: POP
14756: POP
// end ;
14757: PPOPN 1
14759: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14760: LD_EXP 19
14764: PUSH
14765: LD_EXP 31
14769: AND
14770: IFFALSE 14849
14772: GO 14774
14774: DISABLE
14775: LD_INT 0
14777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_OWVAR 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PPUSH
14809: CALL_OW 69
14813: ST_TO_ADDR
// if not tmp then
14814: LD_VAR 0 1
14818: NOT
14819: IFFALSE 14823
// exit ;
14821: GO 14849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14823: LD_VAR 0 1
14827: PUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 12
14840: ARRAY
14841: PPUSH
14842: LD_INT 100
14844: PPUSH
14845: CALL_OW 234
// end ;
14849: PPOPN 1
14851: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14852: LD_EXP 19
14856: PUSH
14857: LD_EXP 33
14861: AND
14862: IFFALSE 14960
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_OWVAR 2
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// if not tmp then
14906: LD_VAR 0 1
14910: NOT
14911: IFFALSE 14915
// exit ;
14913: GO 14960
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14915: LD_VAR 0 1
14919: PUSH
14920: LD_INT 1
14922: PPUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 12
14932: ARRAY
14933: PPUSH
14934: LD_INT 1
14936: PPUSH
14937: LD_INT 4
14939: PPUSH
14940: CALL_OW 12
14944: PPUSH
14945: LD_INT 3000
14947: PPUSH
14948: LD_INT 9000
14950: PPUSH
14951: CALL_OW 12
14955: PPUSH
14956: CALL_OW 492
// end ;
14960: PPOPN 1
14962: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14963: LD_EXP 19
14967: PUSH
14968: LD_EXP 34
14972: AND
14973: IFFALSE 14993
14975: GO 14977
14977: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14978: LD_INT 1
14980: PPUSH
14981: LD_OWVAR 2
14985: PPUSH
14986: LD_INT 0
14988: PPUSH
14989: CALL_OW 324
14993: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14994: LD_EXP 19
14998: PUSH
14999: LD_EXP 35
15003: AND
15004: IFFALSE 15087
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_OWVAR 2
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 21
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: ST_TO_ADDR
// if not tmp then
15049: LD_VAR 0 2
15053: NOT
15054: IFFALSE 15058
// exit ;
15056: GO 15087
// for i in tmp do
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_VAR 0 2
15067: PUSH
15068: FOR_IN
15069: IFFALSE 15085
// SetBLevel ( i , 10 ) ;
15071: LD_VAR 0 1
15075: PPUSH
15076: LD_INT 10
15078: PPUSH
15079: CALL_OW 241
15083: GO 15068
15085: POP
15086: POP
// end ;
15087: PPOPN 2
15089: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15090: LD_EXP 19
15094: PUSH
15095: LD_EXP 36
15099: AND
15100: IFFALSE 15211
15102: GO 15104
15104: DISABLE
15105: LD_INT 0
15107: PPUSH
15108: PPUSH
15109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15110: LD_ADDR_VAR 0 3
15114: PUSH
15115: LD_INT 22
15117: PUSH
15118: LD_OWVAR 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 25
15129: PUSH
15130: LD_INT 1
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PPUSH
15141: CALL_OW 69
15145: ST_TO_ADDR
// if not tmp then
15146: LD_VAR 0 3
15150: NOT
15151: IFFALSE 15155
// exit ;
15153: GO 15211
// un := tmp [ rand ( 1 , tmp ) ] ;
15155: LD_ADDR_VAR 0 2
15159: PUSH
15160: LD_VAR 0 3
15164: PUSH
15165: LD_INT 1
15167: PPUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: CALL_OW 12
15177: ARRAY
15178: ST_TO_ADDR
// if Crawls ( un ) then
15179: LD_VAR 0 2
15183: PPUSH
15184: CALL_OW 318
15188: IFFALSE 15199
// ComWalk ( un ) ;
15190: LD_VAR 0 2
15194: PPUSH
15195: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15199: LD_VAR 0 2
15203: PPUSH
15204: LD_INT 5
15206: PPUSH
15207: CALL_OW 336
// end ;
15211: PPOPN 3
15213: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15214: LD_EXP 19
15218: PUSH
15219: LD_EXP 37
15223: AND
15224: PUSH
15225: LD_OWVAR 67
15229: PUSH
15230: LD_INT 4
15232: LESS
15233: AND
15234: IFFALSE 15253
15236: GO 15238
15238: DISABLE
// begin Difficulty := Difficulty + 1 ;
15239: LD_ADDR_OWVAR 67
15243: PUSH
15244: LD_OWVAR 67
15248: PUSH
15249: LD_INT 1
15251: PLUS
15252: ST_TO_ADDR
// end ;
15253: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15254: LD_EXP 19
15258: PUSH
15259: LD_EXP 38
15263: AND
15264: IFFALSE 15367
15266: GO 15268
15268: DISABLE
15269: LD_INT 0
15271: PPUSH
// begin for i := 1 to 5 do
15272: LD_ADDR_VAR 0 1
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_INT 5
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15365
// begin uc_nation := nation_nature ;
15288: LD_ADDR_OWVAR 21
15292: PUSH
15293: LD_INT 0
15295: ST_TO_ADDR
// uc_side := 0 ;
15296: LD_ADDR_OWVAR 20
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15304: LD_ADDR_OWVAR 29
15308: PUSH
15309: LD_INT 12
15311: PUSH
15312: LD_INT 12
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: ST_TO_ADDR
// hc_agressivity := 20 ;
15319: LD_ADDR_OWVAR 35
15323: PUSH
15324: LD_INT 20
15326: ST_TO_ADDR
// hc_class := class_tiger ;
15327: LD_ADDR_OWVAR 28
15331: PUSH
15332: LD_INT 14
15334: ST_TO_ADDR
// hc_gallery :=  ;
15335: LD_ADDR_OWVAR 33
15339: PUSH
15340: LD_STRING 
15342: ST_TO_ADDR
// hc_name :=  ;
15343: LD_ADDR_OWVAR 26
15347: PUSH
15348: LD_STRING 
15350: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15351: CALL_OW 44
15355: PPUSH
15356: LD_INT 0
15358: PPUSH
15359: CALL_OW 51
// end ;
15363: GO 15285
15365: POP
15366: POP
// end ;
15367: PPOPN 1
15369: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15370: LD_EXP 19
15374: PUSH
15375: LD_EXP 39
15379: AND
15380: IFFALSE 15389
15382: GO 15384
15384: DISABLE
// StreamSibBomb ;
15385: CALL 15390 0 0
15389: END
// export function StreamSibBomb ; var i , x , y ; begin
15390: LD_INT 0
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
// result := false ;
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// for i := 1 to 16 do
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: DOUBLE
15410: LD_INT 1
15412: DEC
15413: ST_TO_ADDR
15414: LD_INT 16
15416: PUSH
15417: FOR_TO
15418: IFFALSE 15617
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15420: LD_ADDR_VAR 0 3
15424: PUSH
15425: LD_INT 10
15427: PUSH
15428: LD_INT 20
15430: PUSH
15431: LD_INT 30
15433: PUSH
15434: LD_INT 40
15436: PUSH
15437: LD_INT 50
15439: PUSH
15440: LD_INT 60
15442: PUSH
15443: LD_INT 70
15445: PUSH
15446: LD_INT 80
15448: PUSH
15449: LD_INT 90
15451: PUSH
15452: LD_INT 100
15454: PUSH
15455: LD_INT 110
15457: PUSH
15458: LD_INT 120
15460: PUSH
15461: LD_INT 130
15463: PUSH
15464: LD_INT 140
15466: PUSH
15467: LD_INT 150
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 1
15489: PPUSH
15490: LD_INT 15
15492: PPUSH
15493: CALL_OW 12
15497: ARRAY
15498: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15499: LD_ADDR_VAR 0 4
15503: PUSH
15504: LD_INT 10
15506: PUSH
15507: LD_INT 20
15509: PUSH
15510: LD_INT 30
15512: PUSH
15513: LD_INT 40
15515: PUSH
15516: LD_INT 50
15518: PUSH
15519: LD_INT 60
15521: PUSH
15522: LD_INT 70
15524: PUSH
15525: LD_INT 80
15527: PUSH
15528: LD_INT 90
15530: PUSH
15531: LD_INT 100
15533: PUSH
15534: LD_INT 110
15536: PUSH
15537: LD_INT 120
15539: PUSH
15540: LD_INT 130
15542: PUSH
15543: LD_INT 140
15545: PUSH
15546: LD_INT 150
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 1
15568: PPUSH
15569: LD_INT 15
15571: PPUSH
15572: CALL_OW 12
15576: ARRAY
15577: ST_TO_ADDR
// if ValidHex ( x , y ) then
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_VAR 0 4
15587: PPUSH
15588: CALL_OW 488
15592: IFFALSE 15615
// begin result := [ x , y ] ;
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: LD_VAR 0 3
15603: PUSH
15604: LD_VAR 0 4
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: ST_TO_ADDR
// break ;
15613: GO 15617
// end ; end ;
15615: GO 15417
15617: POP
15618: POP
// if result then
15619: LD_VAR 0 1
15623: IFFALSE 15683
// begin ToLua ( playSibBomb() ) ;
15625: LD_STRING playSibBomb()
15627: PPUSH
15628: CALL_OW 559
// wait ( 0 0$14 ) ;
15632: LD_INT 490
15634: PPUSH
15635: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15639: LD_VAR 0 1
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: PPUSH
15657: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15661: LD_VAR 0 1
15665: PUSH
15666: LD_INT 1
15668: ARRAY
15669: PPUSH
15670: LD_VAR 0 1
15674: PUSH
15675: LD_INT 2
15677: ARRAY
15678: PPUSH
15679: CALL_OW 429
// end ; end ;
15683: LD_VAR 0 1
15687: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15688: LD_EXP 19
15692: PUSH
15693: LD_EXP 41
15697: AND
15698: IFFALSE 15710
15700: GO 15702
15702: DISABLE
// YouLost (  ) ;
15703: LD_STRING 
15705: PPUSH
15706: CALL_OW 104
15710: END
// every 0 0$1 trigger StreamModeActive and sFog do
15711: LD_EXP 19
15715: PUSH
15716: LD_EXP 40
15720: AND
15721: IFFALSE 15735
15723: GO 15725
15725: DISABLE
// FogOff ( your_side ) ;
15726: LD_OWVAR 2
15730: PPUSH
15731: CALL_OW 344
15735: END
// every 0 0$1 trigger StreamModeActive and sSun do
15736: LD_EXP 19
15740: PUSH
15741: LD_EXP 42
15745: AND
15746: IFFALSE 15774
15748: GO 15750
15750: DISABLE
// begin solar_recharge_percent := 0 ;
15751: LD_ADDR_OWVAR 79
15755: PUSH
15756: LD_INT 0
15758: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15759: LD_INT 10500
15761: PPUSH
15762: CALL_OW 67
// solar_recharge_percent := 100 ;
15766: LD_ADDR_OWVAR 79
15770: PUSH
15771: LD_INT 100
15773: ST_TO_ADDR
// end ;
15774: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15775: LD_EXP 19
15779: PUSH
15780: LD_EXP 43
15784: AND
15785: IFFALSE 16024
15787: GO 15789
15789: DISABLE
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
15794: PPUSH
// begin tmp := [ ] ;
15795: LD_ADDR_VAR 0 3
15799: PUSH
15800: EMPTY
15801: ST_TO_ADDR
// for i := 1 to 6 do
15802: LD_ADDR_VAR 0 1
15806: PUSH
15807: DOUBLE
15808: LD_INT 1
15810: DEC
15811: ST_TO_ADDR
15812: LD_INT 6
15814: PUSH
15815: FOR_TO
15816: IFFALSE 15921
// begin uc_nation := nation_nature ;
15818: LD_ADDR_OWVAR 21
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// uc_side := 0 ;
15826: LD_ADDR_OWVAR 20
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15834: LD_ADDR_OWVAR 29
15838: PUSH
15839: LD_INT 12
15841: PUSH
15842: LD_INT 12
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// hc_agressivity := 20 ;
15849: LD_ADDR_OWVAR 35
15853: PUSH
15854: LD_INT 20
15856: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15857: LD_ADDR_OWVAR 28
15861: PUSH
15862: LD_INT 17
15864: ST_TO_ADDR
// hc_gallery :=  ;
15865: LD_ADDR_OWVAR 33
15869: PUSH
15870: LD_STRING 
15872: ST_TO_ADDR
// hc_name :=  ;
15873: LD_ADDR_OWVAR 26
15877: PUSH
15878: LD_STRING 
15880: ST_TO_ADDR
// un := CreateHuman ;
15881: LD_ADDR_VAR 0 2
15885: PUSH
15886: CALL_OW 44
15890: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15891: LD_VAR 0 2
15895: PPUSH
15896: LD_INT 1
15898: PPUSH
15899: CALL_OW 51
// tmp := tmp ^ un ;
15903: LD_ADDR_VAR 0 3
15907: PUSH
15908: LD_VAR 0 3
15912: PUSH
15913: LD_VAR 0 2
15917: ADD
15918: ST_TO_ADDR
// end ;
15919: GO 15815
15921: POP
15922: POP
// repeat wait ( 0 0$1 ) ;
15923: LD_INT 35
15925: PPUSH
15926: CALL_OW 67
// for un in tmp do
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: LD_VAR 0 3
15939: PUSH
15940: FOR_IN
15941: IFFALSE 16015
// begin if IsDead ( un ) then
15943: LD_VAR 0 2
15947: PPUSH
15948: CALL_OW 301
15952: IFFALSE 15972
// begin tmp := tmp diff un ;
15954: LD_ADDR_VAR 0 3
15958: PUSH
15959: LD_VAR 0 3
15963: PUSH
15964: LD_VAR 0 2
15968: DIFF
15969: ST_TO_ADDR
// continue ;
15970: GO 15940
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15972: LD_VAR 0 2
15976: PPUSH
15977: LD_INT 3
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 69
15998: PPUSH
15999: LD_VAR 0 2
16003: PPUSH
16004: CALL_OW 74
16008: PPUSH
16009: CALL_OW 115
// end ;
16013: GO 15940
16015: POP
16016: POP
// until not tmp ;
16017: LD_VAR 0 3
16021: NOT
16022: IFFALSE 15923
// end ;
16024: PPOPN 3
16026: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16027: LD_EXP 19
16031: PUSH
16032: LD_EXP 44
16036: AND
16037: IFFALSE 16091
16039: GO 16041
16041: DISABLE
// begin ToLua ( displayTroll(); ) ;
16042: LD_STRING displayTroll();
16044: PPUSH
16045: CALL_OW 559
// wait ( 3 3$00 ) ;
16049: LD_INT 6300
16051: PPUSH
16052: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16056: LD_STRING hideTroll();
16058: PPUSH
16059: CALL_OW 559
// wait ( 1 1$00 ) ;
16063: LD_INT 2100
16065: PPUSH
16066: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16070: LD_STRING displayTroll();
16072: PPUSH
16073: CALL_OW 559
// wait ( 1 1$00 ) ;
16077: LD_INT 2100
16079: PPUSH
16080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16084: LD_STRING hideTroll();
16086: PPUSH
16087: CALL_OW 559
// end ;
16091: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16092: LD_EXP 19
16096: PUSH
16097: LD_EXP 45
16101: AND
16102: IFFALSE 16165
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
// begin p := 0 ;
16110: LD_ADDR_VAR 0 1
16114: PUSH
16115: LD_INT 0
16117: ST_TO_ADDR
// repeat game_speed := 1 ;
16118: LD_ADDR_OWVAR 65
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16126: LD_INT 35
16128: PPUSH
16129: CALL_OW 67
// p := p + 1 ;
16133: LD_ADDR_VAR 0 1
16137: PUSH
16138: LD_VAR 0 1
16142: PUSH
16143: LD_INT 1
16145: PLUS
16146: ST_TO_ADDR
// until p >= 60 ;
16147: LD_VAR 0 1
16151: PUSH
16152: LD_INT 60
16154: GREATEREQUAL
16155: IFFALSE 16118
// game_speed := 4 ;
16157: LD_ADDR_OWVAR 65
16161: PUSH
16162: LD_INT 4
16164: ST_TO_ADDR
// end ;
16165: PPOPN 1
16167: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16168: LD_EXP 19
16172: PUSH
16173: LD_EXP 46
16177: AND
16178: IFFALSE 16324
16180: GO 16182
16182: DISABLE
16183: LD_INT 0
16185: PPUSH
16186: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16187: LD_ADDR_VAR 0 1
16191: PUSH
16192: LD_INT 22
16194: PUSH
16195: LD_OWVAR 2
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: LD_INT 30
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 30
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 69
16240: ST_TO_ADDR
// if not depot then
16241: LD_VAR 0 1
16245: NOT
16246: IFFALSE 16250
// exit ;
16248: GO 16324
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16250: LD_ADDR_VAR 0 2
16254: PUSH
16255: LD_VAR 0 1
16259: PUSH
16260: LD_INT 1
16262: PPUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 12
16272: ARRAY
16273: PPUSH
16274: CALL_OW 274
16278: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16279: LD_VAR 0 2
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: LD_INT 0
16289: PPUSH
16290: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16294: LD_VAR 0 2
16298: PPUSH
16299: LD_INT 2
16301: PPUSH
16302: LD_INT 0
16304: PPUSH
16305: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_INT 3
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 277
// end ;
16324: PPOPN 2
16326: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16327: LD_EXP 19
16331: PUSH
16332: LD_EXP 47
16336: AND
16337: IFFALSE 16434
16339: GO 16341
16341: DISABLE
16342: LD_INT 0
16344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16345: LD_ADDR_VAR 0 1
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_OWVAR 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 21
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 3
16374: PUSH
16375: LD_INT 23
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 69
16398: ST_TO_ADDR
// if not tmp then
16399: LD_VAR 0 1
16403: NOT
16404: IFFALSE 16408
// exit ;
16406: GO 16434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16408: LD_VAR 0 1
16412: PUSH
16413: LD_INT 1
16415: PPUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 12
16425: ARRAY
16426: PPUSH
16427: LD_INT 200
16429: PPUSH
16430: CALL_OW 234
// end ;
16434: PPOPN 1
16436: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16437: LD_EXP 19
16441: PUSH
16442: LD_EXP 48
16446: AND
16447: IFFALSE 16526
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16455: LD_ADDR_VAR 0 1
16459: PUSH
16460: LD_INT 22
16462: PUSH
16463: LD_OWVAR 2
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 21
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// if not tmp then
16491: LD_VAR 0 1
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16526
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16500: LD_VAR 0 1
16504: PUSH
16505: LD_INT 1
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 12
16517: ARRAY
16518: PPUSH
16519: LD_INT 60
16521: PPUSH
16522: CALL_OW 234
// end ;
16526: PPOPN 1
16528: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16529: LD_EXP 19
16533: PUSH
16534: LD_EXP 49
16538: AND
16539: IFFALSE 16638
16541: GO 16543
16543: DISABLE
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
// begin enable ;
16548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16549: LD_ADDR_VAR 0 1
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_OWVAR 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 61
16568: PUSH
16569: EMPTY
16570: LIST
16571: PUSH
16572: LD_INT 33
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 69
16591: ST_TO_ADDR
// if not tmp then
16592: LD_VAR 0 1
16596: NOT
16597: IFFALSE 16601
// exit ;
16599: GO 16638
// for i in tmp do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_VAR 0 1
16610: PUSH
16611: FOR_IN
16612: IFFALSE 16636
// if IsControledBy ( i ) then
16614: LD_VAR 0 2
16618: PPUSH
16619: CALL_OW 312
16623: IFFALSE 16634
// ComUnlink ( i ) ;
16625: LD_VAR 0 2
16629: PPUSH
16630: CALL_OW 136
16634: GO 16611
16636: POP
16637: POP
// end ;
16638: PPOPN 2
16640: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16641: LD_EXP 19
16645: PUSH
16646: LD_EXP 50
16650: AND
16651: IFFALSE 16791
16653: GO 16655
16655: DISABLE
16656: LD_INT 0
16658: PPUSH
16659: PPUSH
// begin ToLua ( displayPowell(); ) ;
16660: LD_STRING displayPowell();
16662: PPUSH
16663: CALL_OW 559
// uc_side := 0 ;
16667: LD_ADDR_OWVAR 20
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// uc_nation := 2 ;
16675: LD_ADDR_OWVAR 21
16679: PUSH
16680: LD_INT 2
16682: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16683: LD_ADDR_OWVAR 37
16687: PUSH
16688: LD_INT 14
16690: ST_TO_ADDR
// vc_engine := engine_siberite ;
16691: LD_ADDR_OWVAR 39
16695: PUSH
16696: LD_INT 3
16698: ST_TO_ADDR
// vc_control := control_apeman ;
16699: LD_ADDR_OWVAR 38
16703: PUSH
16704: LD_INT 5
16706: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16707: LD_ADDR_OWVAR 40
16711: PUSH
16712: LD_INT 29
16714: ST_TO_ADDR
// un := CreateVehicle ;
16715: LD_ADDR_VAR 0 2
16719: PUSH
16720: CALL_OW 45
16724: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16725: LD_VAR 0 2
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16737: LD_INT 35
16739: PPUSH
16740: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16744: LD_VAR 0 2
16748: PPUSH
16749: LD_INT 22
16751: PUSH
16752: LD_OWVAR 2
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PPUSH
16761: CALL_OW 69
16765: PPUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: CALL_OW 74
16775: PPUSH
16776: CALL_OW 115
// until IsDead ( un ) ;
16780: LD_VAR 0 2
16784: PPUSH
16785: CALL_OW 301
16789: IFFALSE 16737
// end ;
16791: PPOPN 2
16793: END
// every 0 0$1 trigger StreamModeActive and sStu do
16794: LD_EXP 19
16798: PUSH
16799: LD_EXP 58
16803: AND
16804: IFFALSE 16820
16806: GO 16808
16808: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16809: LD_STRING displayStucuk();
16811: PPUSH
16812: CALL_OW 559
// ResetFog ;
16816: CALL_OW 335
// end ;
16820: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16821: LD_EXP 19
16825: PUSH
16826: LD_EXP 51
16830: AND
16831: IFFALSE 16972
16833: GO 16835
16835: DISABLE
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16840: LD_ADDR_VAR 0 2
16844: PUSH
16845: LD_INT 22
16847: PUSH
16848: LD_OWVAR 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 21
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PPUSH
16871: CALL_OW 69
16875: ST_TO_ADDR
// if not tmp then
16876: LD_VAR 0 2
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 16972
// un := tmp [ rand ( 1 , tmp ) ] ;
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: LD_VAR 0 2
16894: PUSH
16895: LD_INT 1
16897: PPUSH
16898: LD_VAR 0 2
16902: PPUSH
16903: CALL_OW 12
16907: ARRAY
16908: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 0
16916: PPUSH
16917: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_OWVAR 3
16930: PUSH
16931: LD_VAR 0 1
16935: DIFF
16936: PPUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 74
16946: PPUSH
16947: CALL_OW 115
// wait ( 0 0$20 ) ;
16951: LD_INT 700
16953: PPUSH
16954: CALL_OW 67
// SetSide ( un , your_side ) ;
16958: LD_VAR 0 1
16962: PPUSH
16963: LD_OWVAR 2
16967: PPUSH
16968: CALL_OW 235
// end ;
16972: PPOPN 2
16974: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16975: LD_EXP 19
16979: PUSH
16980: LD_EXP 52
16984: AND
16985: IFFALSE 17091
16987: GO 16989
16989: DISABLE
16990: LD_INT 0
16992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: LD_INT 22
17000: PUSH
17001: LD_OWVAR 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: LD_INT 30
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 30
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 69
17046: ST_TO_ADDR
// if not depot then
17047: LD_VAR 0 1
17051: NOT
17052: IFFALSE 17056
// exit ;
17054: GO 17091
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17056: LD_VAR 0 1
17060: PUSH
17061: LD_INT 1
17063: ARRAY
17064: PPUSH
17065: CALL_OW 250
17069: PPUSH
17070: LD_VAR 0 1
17074: PUSH
17075: LD_INT 1
17077: ARRAY
17078: PPUSH
17079: CALL_OW 251
17083: PPUSH
17084: LD_INT 70
17086: PPUSH
17087: CALL_OW 495
// end ;
17091: PPOPN 1
17093: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17094: LD_EXP 19
17098: PUSH
17099: LD_EXP 53
17103: AND
17104: IFFALSE 17315
17106: GO 17108
17108: DISABLE
17109: LD_INT 0
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17116: LD_ADDR_VAR 0 5
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_OWVAR 2
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 69
17151: ST_TO_ADDR
// if not tmp then
17152: LD_VAR 0 5
17156: NOT
17157: IFFALSE 17161
// exit ;
17159: GO 17315
// for i in tmp do
17161: LD_ADDR_VAR 0 1
17165: PUSH
17166: LD_VAR 0 5
17170: PUSH
17171: FOR_IN
17172: IFFALSE 17313
// begin d := rand ( 0 , 5 ) ;
17174: LD_ADDR_VAR 0 4
17178: PUSH
17179: LD_INT 0
17181: PPUSH
17182: LD_INT 5
17184: PPUSH
17185: CALL_OW 12
17189: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 250
17204: PPUSH
17205: LD_VAR 0 4
17209: PPUSH
17210: LD_INT 3
17212: PPUSH
17213: LD_INT 12
17215: PPUSH
17216: CALL_OW 12
17220: PPUSH
17221: CALL_OW 272
17225: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17226: LD_ADDR_VAR 0 3
17230: PUSH
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 251
17240: PPUSH
17241: LD_VAR 0 4
17245: PPUSH
17246: LD_INT 3
17248: PPUSH
17249: LD_INT 12
17251: PPUSH
17252: CALL_OW 12
17256: PPUSH
17257: CALL_OW 273
17261: ST_TO_ADDR
// if ValidHex ( x , y ) then
17262: LD_VAR 0 2
17266: PPUSH
17267: LD_VAR 0 3
17271: PPUSH
17272: CALL_OW 488
17276: IFFALSE 17311
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17278: LD_VAR 0 1
17282: PPUSH
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_INT 3
17295: PPUSH
17296: LD_INT 6
17298: PPUSH
17299: CALL_OW 12
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 483
// end ;
17311: GO 17171
17313: POP
17314: POP
// end ;
17315: PPOPN 5
17317: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17318: LD_EXP 19
17322: PUSH
17323: LD_EXP 54
17327: AND
17328: IFFALSE 17422
17330: GO 17332
17332: DISABLE
17333: LD_INT 0
17335: PPUSH
17336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_OWVAR 2
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 32
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 21
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: ST_TO_ADDR
// if not tmp then
17384: LD_VAR 0 2
17388: NOT
17389: IFFALSE 17393
// exit ;
17391: GO 17422
// for i in tmp do
17393: LD_ADDR_VAR 0 1
17397: PUSH
17398: LD_VAR 0 2
17402: PUSH
17403: FOR_IN
17404: IFFALSE 17420
// SetFuel ( i , 0 ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_INT 0
17413: PPUSH
17414: CALL_OW 240
17418: GO 17403
17420: POP
17421: POP
// end ;
17422: PPOPN 2
17424: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17425: LD_EXP 19
17429: PUSH
17430: LD_EXP 55
17434: AND
17435: IFFALSE 17501
17437: GO 17439
17439: DISABLE
17440: LD_INT 0
17442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17443: LD_ADDR_VAR 0 1
17447: PUSH
17448: LD_INT 22
17450: PUSH
17451: LD_OWVAR 2
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 30
17462: PUSH
17463: LD_INT 29
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PPUSH
17474: CALL_OW 69
17478: ST_TO_ADDR
// if not tmp then
17479: LD_VAR 0 1
17483: NOT
17484: IFFALSE 17488
// exit ;
17486: GO 17501
// DestroyUnit ( tmp [ 1 ] ) ;
17488: LD_VAR 0 1
17492: PUSH
17493: LD_INT 1
17495: ARRAY
17496: PPUSH
17497: CALL_OW 65
// end ;
17501: PPOPN 1
17503: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17504: LD_EXP 19
17508: PUSH
17509: LD_EXP 57
17513: AND
17514: IFFALSE 17643
17516: GO 17518
17518: DISABLE
17519: LD_INT 0
17521: PPUSH
// begin uc_side := 0 ;
17522: LD_ADDR_OWVAR 20
17526: PUSH
17527: LD_INT 0
17529: ST_TO_ADDR
// uc_nation := nation_arabian ;
17530: LD_ADDR_OWVAR 21
17534: PUSH
17535: LD_INT 2
17537: ST_TO_ADDR
// hc_gallery :=  ;
17538: LD_ADDR_OWVAR 33
17542: PUSH
17543: LD_STRING 
17545: ST_TO_ADDR
// hc_name :=  ;
17546: LD_ADDR_OWVAR 26
17550: PUSH
17551: LD_STRING 
17553: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17554: LD_INT 1
17556: PPUSH
17557: LD_INT 11
17559: PPUSH
17560: LD_INT 10
17562: PPUSH
17563: CALL_OW 380
// un := CreateHuman ;
17567: LD_ADDR_VAR 0 1
17571: PUSH
17572: CALL_OW 44
17576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17577: LD_VAR 0 1
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17589: LD_INT 35
17591: PPUSH
17592: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 22
17603: PUSH
17604: LD_OWVAR 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 69
17617: PPUSH
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 74
17627: PPUSH
17628: CALL_OW 115
// until IsDead ( un ) ;
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 301
17641: IFFALSE 17589
// end ;
17643: PPOPN 1
17645: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17646: LD_EXP 19
17650: PUSH
17651: LD_EXP 59
17655: AND
17656: IFFALSE 17668
17658: GO 17660
17660: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17661: LD_STRING earthquake(getX(game), 0, 32)
17663: PPUSH
17664: CALL_OW 559
17668: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17669: LD_EXP 19
17673: PUSH
17674: LD_EXP 60
17678: AND
17679: IFFALSE 17770
17681: GO 17683
17683: DISABLE
17684: LD_INT 0
17686: PPUSH
// begin enable ;
17687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_OWVAR 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 21
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 33
17717: PUSH
17718: LD_INT 3
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: ST_TO_ADDR
// if not tmp then
17735: LD_VAR 0 1
17739: NOT
17740: IFFALSE 17744
// exit ;
17742: GO 17770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: CALL_OW 234
// end ;
17770: PPOPN 1
17772: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17773: LD_EXP 19
17777: PUSH
17778: LD_EXP 61
17782: AND
17783: IFFALSE 17924
17785: GO 17787
17787: DISABLE
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 22
17800: PUSH
17801: LD_OWVAR 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 25
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: ST_TO_ADDR
// if not tmp then
17829: LD_VAR 0 3
17833: NOT
17834: IFFALSE 17838
// exit ;
17836: GO 17924
// un := tmp [ rand ( 1 , tmp ) ] ;
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: ST_TO_ADDR
// if Crawls ( un ) then
17862: LD_VAR 0 2
17866: PPUSH
17867: CALL_OW 318
17871: IFFALSE 17882
// ComWalk ( un ) ;
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17882: LD_VAR 0 2
17886: PPUSH
17887: LD_INT 9
17889: PPUSH
17890: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17894: LD_INT 28
17896: PPUSH
17897: LD_OWVAR 2
17901: PPUSH
17902: LD_INT 2
17904: PPUSH
17905: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17909: LD_INT 29
17911: PPUSH
17912: LD_OWVAR 2
17916: PPUSH
17917: LD_INT 2
17919: PPUSH
17920: CALL_OW 322
// end ;
17924: PPOPN 3
17926: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17927: LD_EXP 19
17931: PUSH
17932: LD_EXP 62
17936: AND
17937: IFFALSE 18048
17939: GO 17941
17941: DISABLE
17942: LD_INT 0
17944: PPUSH
17945: PPUSH
17946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17947: LD_ADDR_VAR 0 3
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_OWVAR 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 25
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: ST_TO_ADDR
// if not tmp then
17983: LD_VAR 0 3
17987: NOT
17988: IFFALSE 17992
// exit ;
17990: GO 18048
// un := tmp [ rand ( 1 , tmp ) ] ;
17992: LD_ADDR_VAR 0 2
17996: PUSH
17997: LD_VAR 0 3
18001: PUSH
18002: LD_INT 1
18004: PPUSH
18005: LD_VAR 0 3
18009: PPUSH
18010: CALL_OW 12
18014: ARRAY
18015: ST_TO_ADDR
// if Crawls ( un ) then
18016: LD_VAR 0 2
18020: PPUSH
18021: CALL_OW 318
18025: IFFALSE 18036
// ComWalk ( un ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18036: LD_VAR 0 2
18040: PPUSH
18041: LD_INT 8
18043: PPUSH
18044: CALL_OW 336
// end ;
18048: PPOPN 3
18050: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18051: LD_EXP 19
18055: PUSH
18056: LD_EXP 63
18060: AND
18061: IFFALSE 18205
18063: GO 18065
18065: DISABLE
18066: LD_INT 0
18068: PPUSH
18069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18070: LD_ADDR_VAR 0 2
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_OWVAR 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 21
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 34
18102: PUSH
18103: LD_INT 12
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 34
18112: PUSH
18113: LD_INT 51
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 32
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 69
18145: ST_TO_ADDR
// if not tmp then
18146: LD_VAR 0 2
18150: NOT
18151: IFFALSE 18155
// exit ;
18153: GO 18205
// for i in tmp do
18155: LD_ADDR_VAR 0 1
18159: PUSH
18160: LD_VAR 0 2
18164: PUSH
18165: FOR_IN
18166: IFFALSE 18203
// if GetCargo ( i , mat_artifact ) = 0 then
18168: LD_VAR 0 1
18172: PPUSH
18173: LD_INT 4
18175: PPUSH
18176: CALL_OW 289
18180: PUSH
18181: LD_INT 0
18183: EQUAL
18184: IFFALSE 18201
// SetCargo ( i , mat_siberit , 100 ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_INT 3
18193: PPUSH
18194: LD_INT 100
18196: PPUSH
18197: CALL_OW 290
18201: GO 18165
18203: POP
18204: POP
// end ;
18205: PPOPN 2
18207: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18208: LD_EXP 19
18212: PUSH
18213: LD_EXP 64
18217: AND
18218: IFFALSE 18401
18220: GO 18222
18222: DISABLE
18223: LD_INT 0
18225: PPUSH
18226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_OWVAR 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: ST_TO_ADDR
// if not tmp then
18249: LD_VAR 0 2
18253: NOT
18254: IFFALSE 18258
// exit ;
18256: GO 18401
// for i := 1 to 2 do
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: DOUBLE
18264: LD_INT 1
18266: DEC
18267: ST_TO_ADDR
18268: LD_INT 2
18270: PUSH
18271: FOR_TO
18272: IFFALSE 18399
// begin uc_side := your_side ;
18274: LD_ADDR_OWVAR 20
18278: PUSH
18279: LD_OWVAR 2
18283: ST_TO_ADDR
// uc_nation := nation_american ;
18284: LD_ADDR_OWVAR 21
18288: PUSH
18289: LD_INT 1
18291: ST_TO_ADDR
// vc_chassis := us_morphling ;
18292: LD_ADDR_OWVAR 37
18296: PUSH
18297: LD_INT 5
18299: ST_TO_ADDR
// vc_engine := engine_siberite ;
18300: LD_ADDR_OWVAR 39
18304: PUSH
18305: LD_INT 3
18307: ST_TO_ADDR
// vc_control := control_computer ;
18308: LD_ADDR_OWVAR 38
18312: PUSH
18313: LD_INT 3
18315: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18316: LD_ADDR_OWVAR 40
18320: PUSH
18321: LD_INT 10
18323: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18324: LD_VAR 0 2
18328: PUSH
18329: LD_INT 1
18331: ARRAY
18332: PPUSH
18333: CALL_OW 310
18337: NOT
18338: IFFALSE 18385
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18340: CALL_OW 45
18344: PPUSH
18345: LD_VAR 0 2
18349: PUSH
18350: LD_INT 1
18352: ARRAY
18353: PPUSH
18354: CALL_OW 250
18358: PPUSH
18359: LD_VAR 0 2
18363: PUSH
18364: LD_INT 1
18366: ARRAY
18367: PPUSH
18368: CALL_OW 251
18372: PPUSH
18373: LD_INT 12
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 50
18383: GO 18397
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18385: CALL_OW 45
18389: PPUSH
18390: LD_INT 1
18392: PPUSH
18393: CALL_OW 51
// end ;
18397: GO 18271
18399: POP
18400: POP
// end ;
18401: PPOPN 2
18403: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18404: LD_EXP 19
18408: PUSH
18409: LD_EXP 65
18413: AND
18414: IFFALSE 18636
18416: GO 18418
18418: DISABLE
18419: LD_INT 0
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
18426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18427: LD_ADDR_VAR 0 6
18431: PUSH
18432: LD_INT 22
18434: PUSH
18435: LD_OWVAR 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 21
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: LD_INT 23
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: ST_TO_ADDR
// if not tmp then
18481: LD_VAR 0 6
18485: NOT
18486: IFFALSE 18490
// exit ;
18488: GO 18636
// s1 := rand ( 1 , 4 ) ;
18490: LD_ADDR_VAR 0 2
18494: PUSH
18495: LD_INT 1
18497: PPUSH
18498: LD_INT 4
18500: PPUSH
18501: CALL_OW 12
18505: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18506: LD_ADDR_VAR 0 4
18510: PUSH
18511: LD_VAR 0 6
18515: PUSH
18516: LD_INT 1
18518: ARRAY
18519: PPUSH
18520: LD_VAR 0 2
18524: PPUSH
18525: CALL_OW 259
18529: ST_TO_ADDR
// if s1 = 1 then
18530: LD_VAR 0 2
18534: PUSH
18535: LD_INT 1
18537: EQUAL
18538: IFFALSE 18558
// s2 := rand ( 2 , 4 ) else
18540: LD_ADDR_VAR 0 3
18544: PUSH
18545: LD_INT 2
18547: PPUSH
18548: LD_INT 4
18550: PPUSH
18551: CALL_OW 12
18555: ST_TO_ADDR
18556: GO 18566
// s2 := 1 ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_INT 1
18565: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18566: LD_ADDR_VAR 0 5
18570: PUSH
18571: LD_VAR 0 6
18575: PUSH
18576: LD_INT 1
18578: ARRAY
18579: PPUSH
18580: LD_VAR 0 3
18584: PPUSH
18585: CALL_OW 259
18589: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18590: LD_VAR 0 6
18594: PUSH
18595: LD_INT 1
18597: ARRAY
18598: PPUSH
18599: LD_VAR 0 2
18603: PPUSH
18604: LD_VAR 0 5
18608: PPUSH
18609: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18613: LD_VAR 0 6
18617: PUSH
18618: LD_INT 1
18620: ARRAY
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: LD_VAR 0 4
18631: PPUSH
18632: CALL_OW 237
// end ;
18636: PPOPN 6
18638: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18639: LD_EXP 19
18643: PUSH
18644: LD_EXP 66
18648: AND
18649: IFFALSE 18728
18651: GO 18653
18653: DISABLE
18654: LD_INT 0
18656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_INT 22
18664: PUSH
18665: LD_OWVAR 2
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 30
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 1
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18728
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18702: LD_VAR 0 1
18706: PUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_VAR 0 1
18714: PPUSH
18715: CALL_OW 12
18719: ARRAY
18720: PPUSH
18721: LD_INT 1
18723: PPUSH
18724: CALL_OW 234
// end ;
18728: PPOPN 1
18730: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18731: LD_EXP 19
18735: PUSH
18736: LD_EXP 67
18740: AND
18741: IFFALSE 18853
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18750: LD_ADDR_VAR 0 2
18754: PUSH
18755: LD_INT 22
18757: PUSH
18758: LD_OWVAR 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: LD_INT 30
18772: PUSH
18773: LD_INT 27
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 30
18782: PUSH
18783: LD_INT 26
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 30
18792: PUSH
18793: LD_INT 28
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: ST_TO_ADDR
// if not tmp then
18815: LD_VAR 0 2
18819: NOT
18820: IFFALSE 18824
// exit ;
18822: GO 18853
// for i in tmp do
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_VAR 0 2
18833: PUSH
18834: FOR_IN
18835: IFFALSE 18851
// SetLives ( i , 1 ) ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 234
18849: GO 18834
18851: POP
18852: POP
// end ;
18853: PPOPN 2
18855: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18856: LD_EXP 19
18860: PUSH
18861: LD_EXP 68
18865: AND
18866: IFFALSE 19153
18868: GO 18870
18870: DISABLE
18871: LD_INT 0
18873: PPUSH
18874: PPUSH
18875: PPUSH
// begin i := rand ( 1 , 7 ) ;
18876: LD_ADDR_VAR 0 1
18880: PUSH
18881: LD_INT 1
18883: PPUSH
18884: LD_INT 7
18886: PPUSH
18887: CALL_OW 12
18891: ST_TO_ADDR
// case i of 1 :
18892: LD_VAR 0 1
18896: PUSH
18897: LD_INT 1
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18915
18905: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18906: LD_STRING earthquake(getX(game), 0, 32)
18908: PPUSH
18909: CALL_OW 559
18913: GO 19153
18915: LD_INT 2
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18937
18923: POP
// begin ToLua ( displayStucuk(); ) ;
18924: LD_STRING displayStucuk();
18926: PPUSH
18927: CALL_OW 559
// ResetFog ;
18931: CALL_OW 335
// end ; 3 :
18935: GO 19153
18937: LD_INT 3
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 19049
18945: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_INT 22
18953: PUSH
18954: LD_OWVAR 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PPUSH
18977: CALL_OW 69
18981: ST_TO_ADDR
// if not tmp then
18982: LD_VAR 0 2
18986: NOT
18987: IFFALSE 18991
// exit ;
18989: GO 19153
// un := tmp [ rand ( 1 , tmp ) ] ;
18991: LD_ADDR_VAR 0 3
18995: PUSH
18996: LD_VAR 0 2
19000: PUSH
19001: LD_INT 1
19003: PPUSH
19004: LD_VAR 0 2
19008: PPUSH
19009: CALL_OW 12
19013: ARRAY
19014: ST_TO_ADDR
// if Crawls ( un ) then
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 318
19024: IFFALSE 19035
// ComWalk ( un ) ;
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19035: LD_VAR 0 3
19039: PPUSH
19040: LD_INT 8
19042: PPUSH
19043: CALL_OW 336
// end ; 4 :
19047: GO 19153
19049: LD_INT 4
19051: DOUBLE
19052: EQUAL
19053: IFTRUE 19057
19055: GO 19131
19057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19058: LD_ADDR_VAR 0 2
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_OWVAR 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 30
19077: PUSH
19078: LD_INT 29
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: ST_TO_ADDR
// if not tmp then
19094: LD_VAR 0 2
19098: NOT
19099: IFFALSE 19103
// exit ;
19101: GO 19153
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19103: LD_VAR 0 2
19107: PUSH
19108: LD_INT 1
19110: ARRAY
19111: PPUSH
19112: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19116: LD_VAR 0 2
19120: PUSH
19121: LD_INT 1
19123: ARRAY
19124: PPUSH
19125: CALL_OW 65
// end ; 5 .. 7 :
19129: GO 19153
19131: LD_INT 5
19133: DOUBLE
19134: GREATEREQUAL
19135: IFFALSE 19143
19137: LD_INT 7
19139: DOUBLE
19140: LESSEQUAL
19141: IFTRUE 19145
19143: GO 19152
19145: POP
// StreamSibBomb ; end ;
19146: CALL 15390 0 0
19150: GO 19153
19152: POP
// end ;
19153: PPOPN 3
19155: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19156: LD_EXP 19
19160: PUSH
19161: LD_EXP 69
19165: AND
19166: IFFALSE 19322
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19176: LD_ADDR_VAR 0 2
19180: PUSH
19181: LD_INT 81
19183: PUSH
19184: LD_OWVAR 2
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: ST_TO_ADDR
// if not tmp then
19230: LD_VAR 0 2
19234: NOT
19235: IFFALSE 19239
// exit ;
19237: GO 19322
// p := 0 ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 0
19246: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19247: LD_INT 35
19249: PPUSH
19250: CALL_OW 67
// p := p + 1 ;
19254: LD_ADDR_VAR 0 3
19258: PUSH
19259: LD_VAR 0 3
19263: PUSH
19264: LD_INT 1
19266: PLUS
19267: ST_TO_ADDR
// for i in tmp do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: LD_VAR 0 2
19277: PUSH
19278: FOR_IN
19279: IFFALSE 19310
// if GetLives ( i ) < 1000 then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 256
19290: PUSH
19291: LD_INT 1000
19293: LESS
19294: IFFALSE 19308
// SetLives ( i , 1000 ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 1000
19303: PPUSH
19304: CALL_OW 234
19308: GO 19278
19310: POP
19311: POP
// until p > 20 ;
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 20
19319: GREATER
19320: IFFALSE 19247
// end ;
19322: PPOPN 3
19324: END
// every 0 0$1 trigger StreamModeActive and sTime do
19325: LD_EXP 19
19329: PUSH
19330: LD_EXP 70
19334: AND
19335: IFFALSE 19370
19337: GO 19339
19339: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19340: LD_INT 28
19342: PPUSH
19343: LD_OWVAR 2
19347: PPUSH
19348: LD_INT 2
19350: PPUSH
19351: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19355: LD_INT 30
19357: PPUSH
19358: LD_OWVAR 2
19362: PPUSH
19363: LD_INT 2
19365: PPUSH
19366: CALL_OW 322
// end ;
19370: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19371: LD_EXP 19
19375: PUSH
19376: LD_EXP 71
19380: AND
19381: IFFALSE 19502
19383: GO 19385
19385: DISABLE
19386: LD_INT 0
19388: PPUSH
19389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 22
19397: PUSH
19398: LD_OWVAR 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 21
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 3
19419: PUSH
19420: LD_INT 23
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 69
19443: ST_TO_ADDR
// if not tmp then
19444: LD_VAR 0 2
19448: NOT
19449: IFFALSE 19453
// exit ;
19451: GO 19502
// for i in tmp do
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_VAR 0 2
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19500
// begin if Crawls ( i ) then
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 318
19475: IFFALSE 19486
// ComWalk ( i ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 138
// SetClass ( i , 2 ) ;
19486: LD_VAR 0 1
19490: PPUSH
19491: LD_INT 2
19493: PPUSH
19494: CALL_OW 336
// end ;
19498: GO 19463
19500: POP
19501: POP
// end ;
19502: PPOPN 2
19504: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19505: LD_EXP 19
19509: PUSH
19510: LD_EXP 72
19514: AND
19515: IFFALSE 19803
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
19524: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19525: LD_OWVAR 2
19529: PPUSH
19530: LD_INT 9
19532: PPUSH
19533: LD_INT 1
19535: PPUSH
19536: LD_INT 1
19538: PPUSH
19539: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19543: LD_INT 9
19545: PPUSH
19546: LD_OWVAR 2
19550: PPUSH
19551: CALL_OW 343
// uc_side := 9 ;
19555: LD_ADDR_OWVAR 20
19559: PUSH
19560: LD_INT 9
19562: ST_TO_ADDR
// uc_nation := 2 ;
19563: LD_ADDR_OWVAR 21
19567: PUSH
19568: LD_INT 2
19570: ST_TO_ADDR
// hc_name := Dark Warrior ;
19571: LD_ADDR_OWVAR 26
19575: PUSH
19576: LD_STRING Dark Warrior
19578: ST_TO_ADDR
// hc_gallery :=  ;
19579: LD_ADDR_OWVAR 33
19583: PUSH
19584: LD_STRING 
19586: ST_TO_ADDR
// hc_noskilllimit := true ;
19587: LD_ADDR_OWVAR 76
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19595: LD_ADDR_OWVAR 31
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: LD_INT 30
19605: PUSH
19606: LD_INT 30
19608: PUSH
19609: LD_INT 30
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// un := CreateHuman ;
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: CALL_OW 44
19627: ST_TO_ADDR
// hc_noskilllimit := false ;
19628: LD_ADDR_OWVAR 76
19632: PUSH
19633: LD_INT 0
19635: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_INT 1
19643: PPUSH
19644: CALL_OW 51
// ToLua ( playRanger() ) ;
19648: LD_STRING playRanger()
19650: PPUSH
19651: CALL_OW 559
// p := 0 ;
19655: LD_ADDR_VAR 0 2
19659: PUSH
19660: LD_INT 0
19662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19663: LD_INT 35
19665: PPUSH
19666: CALL_OW 67
// p := p + 1 ;
19670: LD_ADDR_VAR 0 2
19674: PUSH
19675: LD_VAR 0 2
19679: PUSH
19680: LD_INT 1
19682: PLUS
19683: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19684: LD_VAR 0 3
19688: PPUSH
19689: CALL_OW 256
19693: PUSH
19694: LD_INT 1000
19696: LESS
19697: IFFALSE 19711
// SetLives ( un , 1000 ) ;
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_INT 1000
19706: PPUSH
19707: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19711: LD_VAR 0 3
19715: PPUSH
19716: LD_INT 81
19718: PUSH
19719: LD_OWVAR 2
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 91
19730: PUSH
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 30
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 69
19752: PPUSH
19753: LD_VAR 0 3
19757: PPUSH
19758: CALL_OW 74
19762: PPUSH
19763: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19767: LD_VAR 0 2
19771: PUSH
19772: LD_INT 80
19774: GREATER
19775: PUSH
19776: LD_VAR 0 3
19780: PPUSH
19781: CALL_OW 301
19785: OR
19786: IFFALSE 19663
// if un then
19788: LD_VAR 0 3
19792: IFFALSE 19803
// RemoveUnit ( un ) ;
19794: LD_VAR 0 3
19798: PPUSH
19799: CALL_OW 64
// end ;
19803: PPOPN 3
19805: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19806: LD_EXP 73
19810: IFFALSE 19926
19812: GO 19814
19814: DISABLE
19815: LD_INT 0
19817: PPUSH
19818: PPUSH
19819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19820: LD_ADDR_VAR 0 2
19824: PUSH
19825: LD_INT 81
19827: PUSH
19828: LD_OWVAR 2
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 21
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19856: LD_STRING playComputer()
19858: PPUSH
19859: CALL_OW 559
// if not tmp then
19863: LD_VAR 0 2
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19926
// for i in tmp do
19872: LD_ADDR_VAR 0 1
19876: PUSH
19877: LD_VAR 0 2
19881: PUSH
19882: FOR_IN
19883: IFFALSE 19924
// for j := 1 to 4 do
19885: LD_ADDR_VAR 0 3
19889: PUSH
19890: DOUBLE
19891: LD_INT 1
19893: DEC
19894: ST_TO_ADDR
19895: LD_INT 4
19897: PUSH
19898: FOR_TO
19899: IFFALSE 19920
// SetSkill ( i , j , 10 ) ;
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: LD_INT 10
19913: PPUSH
19914: CALL_OW 237
19918: GO 19898
19920: POP
19921: POP
19922: GO 19882
19924: POP
19925: POP
// end ;
19926: PPOPN 3
19928: END
// every 0 0$1 trigger s30 do var i , tmp ;
19929: LD_EXP 74
19933: IFFALSE 20002
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19942: LD_ADDR_VAR 0 2
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_OWVAR 2
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PPUSH
19959: CALL_OW 69
19963: ST_TO_ADDR
// if not tmp then
19964: LD_VAR 0 2
19968: NOT
19969: IFFALSE 19973
// exit ;
19971: GO 20002
// for i in tmp do
19973: LD_ADDR_VAR 0 1
19977: PUSH
19978: LD_VAR 0 2
19982: PUSH
19983: FOR_IN
19984: IFFALSE 20000
// SetLives ( i , 300 ) ;
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_INT 300
19993: PPUSH
19994: CALL_OW 234
19998: GO 19983
20000: POP
20001: POP
// end ;
20002: PPOPN 2
20004: END
// every 0 0$1 trigger s60 do var i , tmp ;
20005: LD_EXP 75
20009: IFFALSE 20078
20011: GO 20013
20013: DISABLE
20014: LD_INT 0
20016: PPUSH
20017: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20018: LD_ADDR_VAR 0 2
20022: PUSH
20023: LD_INT 22
20025: PUSH
20026: LD_OWVAR 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 2
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20078
// for i in tmp do
20049: LD_ADDR_VAR 0 1
20053: PUSH
20054: LD_VAR 0 2
20058: PUSH
20059: FOR_IN
20060: IFFALSE 20076
// SetLives ( i , 600 ) ;
20062: LD_VAR 0 1
20066: PPUSH
20067: LD_INT 600
20069: PPUSH
20070: CALL_OW 234
20074: GO 20059
20076: POP
20077: POP
// end ;
20078: PPOPN 2
20080: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20081: LD_INT 0
20083: PPUSH
// case cmd of 301 :
20084: LD_VAR 0 1
20088: PUSH
20089: LD_INT 301
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20129
20097: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20098: LD_VAR 0 6
20102: PPUSH
20103: LD_VAR 0 7
20107: PPUSH
20108: LD_VAR 0 8
20112: PPUSH
20113: LD_VAR 0 4
20117: PPUSH
20118: LD_VAR 0 5
20122: PPUSH
20123: CALL 21330 0 5
20127: GO 20250
20129: LD_INT 302
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20174
20137: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20138: LD_VAR 0 6
20142: PPUSH
20143: LD_VAR 0 7
20147: PPUSH
20148: LD_VAR 0 8
20152: PPUSH
20153: LD_VAR 0 9
20157: PPUSH
20158: LD_VAR 0 4
20162: PPUSH
20163: LD_VAR 0 5
20167: PPUSH
20168: CALL 21421 0 6
20172: GO 20250
20174: LD_INT 303
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20219
20182: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20183: LD_VAR 0 6
20187: PPUSH
20188: LD_VAR 0 7
20192: PPUSH
20193: LD_VAR 0 8
20197: PPUSH
20198: LD_VAR 0 9
20202: PPUSH
20203: LD_VAR 0 4
20207: PPUSH
20208: LD_VAR 0 5
20212: PPUSH
20213: CALL 20255 0 6
20217: GO 20250
20219: LD_INT 304
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20249
20227: POP
// hHackTeleport ( unit , x , y ) ; end ;
20228: LD_VAR 0 2
20232: PPUSH
20233: LD_VAR 0 4
20237: PPUSH
20238: LD_VAR 0 5
20242: PPUSH
20243: CALL 22014 0 3
20247: GO 20250
20249: POP
// end ;
20250: LD_VAR 0 12
20254: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20255: LD_INT 0
20257: PPUSH
20258: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20259: LD_VAR 0 1
20263: PUSH
20264: LD_INT 1
20266: LESS
20267: PUSH
20268: LD_VAR 0 1
20272: PUSH
20273: LD_INT 3
20275: GREATER
20276: OR
20277: PUSH
20278: LD_VAR 0 5
20282: PPUSH
20283: LD_VAR 0 6
20287: PPUSH
20288: CALL_OW 428
20292: OR
20293: IFFALSE 20297
// exit ;
20295: GO 21017
// uc_side := your_side ;
20297: LD_ADDR_OWVAR 20
20301: PUSH
20302: LD_OWVAR 2
20306: ST_TO_ADDR
// uc_nation := nation ;
20307: LD_ADDR_OWVAR 21
20311: PUSH
20312: LD_VAR 0 1
20316: ST_TO_ADDR
// bc_level = 1 ;
20317: LD_ADDR_OWVAR 43
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// case btype of 1 :
20325: LD_VAR 0 2
20329: PUSH
20330: LD_INT 1
20332: DOUBLE
20333: EQUAL
20334: IFTRUE 20338
20336: GO 20349
20338: POP
// bc_type := b_depot ; 2 :
20339: LD_ADDR_OWVAR 42
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
20347: GO 20961
20349: LD_INT 2
20351: DOUBLE
20352: EQUAL
20353: IFTRUE 20357
20355: GO 20368
20357: POP
// bc_type := b_warehouse ; 3 :
20358: LD_ADDR_OWVAR 42
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
20366: GO 20961
20368: LD_INT 3
20370: DOUBLE
20371: EQUAL
20372: IFTRUE 20376
20374: GO 20387
20376: POP
// bc_type := b_lab ; 4 .. 9 :
20377: LD_ADDR_OWVAR 42
20381: PUSH
20382: LD_INT 6
20384: ST_TO_ADDR
20385: GO 20961
20387: LD_INT 4
20389: DOUBLE
20390: GREATEREQUAL
20391: IFFALSE 20399
20393: LD_INT 9
20395: DOUBLE
20396: LESSEQUAL
20397: IFTRUE 20401
20399: GO 20453
20401: POP
// begin bc_type := b_lab_half ;
20402: LD_ADDR_OWVAR 42
20406: PUSH
20407: LD_INT 7
20409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20410: LD_ADDR_OWVAR 44
20414: PUSH
20415: LD_INT 10
20417: PUSH
20418: LD_INT 11
20420: PUSH
20421: LD_INT 12
20423: PUSH
20424: LD_INT 15
20426: PUSH
20427: LD_INT 14
20429: PUSH
20430: LD_INT 13
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 3
20448: MINUS
20449: ARRAY
20450: ST_TO_ADDR
// end ; 10 .. 13 :
20451: GO 20961
20453: LD_INT 10
20455: DOUBLE
20456: GREATEREQUAL
20457: IFFALSE 20465
20459: LD_INT 13
20461: DOUBLE
20462: LESSEQUAL
20463: IFTRUE 20467
20465: GO 20544
20467: POP
// begin bc_type := b_lab_full ;
20468: LD_ADDR_OWVAR 42
20472: PUSH
20473: LD_INT 8
20475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20476: LD_ADDR_OWVAR 44
20480: PUSH
20481: LD_INT 10
20483: PUSH
20484: LD_INT 12
20486: PUSH
20487: LD_INT 14
20489: PUSH
20490: LD_INT 13
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: LD_VAR 0 2
20503: PUSH
20504: LD_INT 9
20506: MINUS
20507: ARRAY
20508: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20509: LD_ADDR_OWVAR 45
20513: PUSH
20514: LD_INT 11
20516: PUSH
20517: LD_INT 15
20519: PUSH
20520: LD_INT 12
20522: PUSH
20523: LD_INT 15
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: LD_VAR 0 2
20536: PUSH
20537: LD_INT 9
20539: MINUS
20540: ARRAY
20541: ST_TO_ADDR
// end ; 14 :
20542: GO 20961
20544: LD_INT 14
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_workshop ; 15 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 2
20560: ST_TO_ADDR
20561: GO 20961
20563: LD_INT 15
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_factory ; 16 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 3
20579: ST_TO_ADDR
20580: GO 20961
20582: LD_INT 16
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_ext_gun ; 17 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 17
20598: ST_TO_ADDR
20599: GO 20961
20601: LD_INT 17
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20637
20609: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 19
20617: PUSH
20618: LD_INT 23
20620: PUSH
20621: LD_INT 19
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: PUSH
20629: LD_VAR 0 1
20633: ARRAY
20634: ST_TO_ADDR
20635: GO 20961
20637: LD_INT 18
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20656
20645: POP
// bc_type := b_ext_radar ; 19 :
20646: LD_ADDR_OWVAR 42
20650: PUSH
20651: LD_INT 20
20653: ST_TO_ADDR
20654: GO 20961
20656: LD_INT 19
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20675
20664: POP
// bc_type := b_ext_radio ; 20 :
20665: LD_ADDR_OWVAR 42
20669: PUSH
20670: LD_INT 22
20672: ST_TO_ADDR
20673: GO 20961
20675: LD_INT 20
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20694
20683: POP
// bc_type := b_ext_siberium ; 21 :
20684: LD_ADDR_OWVAR 42
20688: PUSH
20689: LD_INT 21
20691: ST_TO_ADDR
20692: GO 20961
20694: LD_INT 21
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20713
20702: POP
// bc_type := b_ext_computer ; 22 :
20703: LD_ADDR_OWVAR 42
20707: PUSH
20708: LD_INT 24
20710: ST_TO_ADDR
20711: GO 20961
20713: LD_INT 22
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20732
20721: POP
// bc_type := b_ext_track ; 23 :
20722: LD_ADDR_OWVAR 42
20726: PUSH
20727: LD_INT 16
20729: ST_TO_ADDR
20730: GO 20961
20732: LD_INT 23
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20751
20740: POP
// bc_type := b_ext_laser ; 24 :
20741: LD_ADDR_OWVAR 42
20745: PUSH
20746: LD_INT 25
20748: ST_TO_ADDR
20749: GO 20961
20751: LD_INT 24
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20770
20759: POP
// bc_type := b_control_tower ; 25 :
20760: LD_ADDR_OWVAR 42
20764: PUSH
20765: LD_INT 36
20767: ST_TO_ADDR
20768: GO 20961
20770: LD_INT 25
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20789
20778: POP
// bc_type := b_breastwork ; 26 :
20779: LD_ADDR_OWVAR 42
20783: PUSH
20784: LD_INT 31
20786: ST_TO_ADDR
20787: GO 20961
20789: LD_INT 26
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20808
20797: POP
// bc_type := b_bunker ; 27 :
20798: LD_ADDR_OWVAR 42
20802: PUSH
20803: LD_INT 32
20805: ST_TO_ADDR
20806: GO 20961
20808: LD_INT 27
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20827
20816: POP
// bc_type := b_turret ; 28 :
20817: LD_ADDR_OWVAR 42
20821: PUSH
20822: LD_INT 33
20824: ST_TO_ADDR
20825: GO 20961
20827: LD_INT 28
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20846
20835: POP
// bc_type := b_armoury ; 29 :
20836: LD_ADDR_OWVAR 42
20840: PUSH
20841: LD_INT 4
20843: ST_TO_ADDR
20844: GO 20961
20846: LD_INT 29
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20865
20854: POP
// bc_type := b_barracks ; 30 :
20855: LD_ADDR_OWVAR 42
20859: PUSH
20860: LD_INT 5
20862: ST_TO_ADDR
20863: GO 20961
20865: LD_INT 30
20867: DOUBLE
20868: EQUAL
20869: IFTRUE 20873
20871: GO 20884
20873: POP
// bc_type := b_solar_power ; 31 :
20874: LD_ADDR_OWVAR 42
20878: PUSH
20879: LD_INT 27
20881: ST_TO_ADDR
20882: GO 20961
20884: LD_INT 31
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20903
20892: POP
// bc_type := b_oil_power ; 32 :
20893: LD_ADDR_OWVAR 42
20897: PUSH
20898: LD_INT 26
20900: ST_TO_ADDR
20901: GO 20961
20903: LD_INT 32
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20922
20911: POP
// bc_type := b_siberite_power ; 33 :
20912: LD_ADDR_OWVAR 42
20916: PUSH
20917: LD_INT 28
20919: ST_TO_ADDR
20920: GO 20961
20922: LD_INT 33
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20941
20930: POP
// bc_type := b_oil_mine ; 34 :
20931: LD_ADDR_OWVAR 42
20935: PUSH
20936: LD_INT 29
20938: ST_TO_ADDR
20939: GO 20961
20941: LD_INT 34
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 20960
20949: POP
// bc_type := b_siberite_mine ; end ;
20950: LD_ADDR_OWVAR 42
20954: PUSH
20955: LD_INT 30
20957: ST_TO_ADDR
20958: GO 20961
20960: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20961: LD_ADDR_VAR 0 8
20965: PUSH
20966: LD_VAR 0 5
20970: PPUSH
20971: LD_VAR 0 6
20975: PPUSH
20976: LD_VAR 0 3
20980: PPUSH
20981: CALL_OW 47
20985: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20986: LD_OWVAR 42
20990: PUSH
20991: LD_INT 32
20993: PUSH
20994: LD_INT 33
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: IN
21001: IFFALSE 21017
// PlaceWeaponTurret ( b , weapon ) ;
21003: LD_VAR 0 8
21007: PPUSH
21008: LD_VAR 0 4
21012: PPUSH
21013: CALL_OW 431
// end ;
21017: LD_VAR 0 7
21021: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21022: LD_INT 0
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21028: LD_ADDR_VAR 0 4
21032: PUSH
21033: LD_INT 22
21035: PUSH
21036: LD_OWVAR 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 30
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 30
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PPUSH
21077: CALL_OW 69
21081: ST_TO_ADDR
// if not tmp then
21082: LD_VAR 0 4
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21150
// for i in tmp do
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_VAR 0 4
21100: PUSH
21101: FOR_IN
21102: IFFALSE 21148
// for j = 1 to 3 do
21104: LD_ADDR_VAR 0 3
21108: PUSH
21109: DOUBLE
21110: LD_INT 1
21112: DEC
21113: ST_TO_ADDR
21114: LD_INT 3
21116: PUSH
21117: FOR_TO
21118: IFFALSE 21144
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21120: LD_VAR 0 2
21124: PPUSH
21125: CALL_OW 274
21129: PPUSH
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 99999
21137: PPUSH
21138: CALL_OW 277
21142: GO 21117
21144: POP
21145: POP
21146: GO 21101
21148: POP
21149: POP
// end ;
21150: LD_VAR 0 1
21154: RET
// export function hHackSetLevel10 ; var i , j ; begin
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
21159: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21160: LD_ADDR_VAR 0 2
21164: PUSH
21165: LD_INT 21
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PPUSH
21175: CALL_OW 69
21179: PUSH
21180: FOR_IN
21181: IFFALSE 21233
// if IsSelected ( i ) then
21183: LD_VAR 0 2
21187: PPUSH
21188: CALL_OW 306
21192: IFFALSE 21231
// begin for j := 1 to 4 do
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: DOUBLE
21200: LD_INT 1
21202: DEC
21203: ST_TO_ADDR
21204: LD_INT 4
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21229
// SetSkill ( i , j , 10 ) ;
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_INT 10
21222: PPUSH
21223: CALL_OW 237
21227: GO 21207
21229: POP
21230: POP
// end ;
21231: GO 21180
21233: POP
21234: POP
// end ;
21235: LD_VAR 0 1
21239: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 21
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PPUSH
21276: CALL_OW 69
21280: PUSH
21281: FOR_IN
21282: IFFALSE 21323
// begin for j := 1 to 4 do
21284: LD_ADDR_VAR 0 3
21288: PUSH
21289: DOUBLE
21290: LD_INT 1
21292: DEC
21293: ST_TO_ADDR
21294: LD_INT 4
21296: PUSH
21297: FOR_TO
21298: IFFALSE 21319
// SetSkill ( i , j , 10 ) ;
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: LD_INT 10
21312: PPUSH
21313: CALL_OW 237
21317: GO 21297
21319: POP
21320: POP
// end ;
21321: GO 21281
21323: POP
21324: POP
// end ;
21325: LD_VAR 0 1
21329: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21330: LD_INT 0
21332: PPUSH
// uc_side := your_side ;
21333: LD_ADDR_OWVAR 20
21337: PUSH
21338: LD_OWVAR 2
21342: ST_TO_ADDR
// uc_nation := nation ;
21343: LD_ADDR_OWVAR 21
21347: PUSH
21348: LD_VAR 0 1
21352: ST_TO_ADDR
// InitHc ;
21353: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21357: LD_INT 0
21359: PPUSH
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21374: LD_VAR 0 4
21378: PPUSH
21379: LD_VAR 0 5
21383: PPUSH
21384: CALL_OW 428
21388: PUSH
21389: LD_INT 0
21391: EQUAL
21392: IFFALSE 21416
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21394: CALL_OW 44
21398: PPUSH
21399: LD_VAR 0 4
21403: PPUSH
21404: LD_VAR 0 5
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 48
// end ;
21416: LD_VAR 0 6
21420: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21421: LD_INT 0
21423: PPUSH
21424: PPUSH
// uc_side := your_side ;
21425: LD_ADDR_OWVAR 20
21429: PUSH
21430: LD_OWVAR 2
21434: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21435: LD_VAR 0 1
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 3
21448: PUSH
21449: LD_INT 4
21451: PUSH
21452: LD_INT 5
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: IN
21462: IFFALSE 21474
// uc_nation := nation_american else
21464: LD_ADDR_OWVAR 21
21468: PUSH
21469: LD_INT 1
21471: ST_TO_ADDR
21472: GO 21517
// if chassis in [ 11 , 12 , 13 , 14 ] then
21474: LD_VAR 0 1
21478: PUSH
21479: LD_INT 11
21481: PUSH
21482: LD_INT 12
21484: PUSH
21485: LD_INT 13
21487: PUSH
21488: LD_INT 14
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: IN
21497: IFFALSE 21509
// uc_nation := nation_arabian else
21499: LD_ADDR_OWVAR 21
21503: PUSH
21504: LD_INT 2
21506: ST_TO_ADDR
21507: GO 21517
// uc_nation := nation_russian ;
21509: LD_ADDR_OWVAR 21
21513: PUSH
21514: LD_INT 3
21516: ST_TO_ADDR
// vc_chassis := chassis ;
21517: LD_ADDR_OWVAR 37
21521: PUSH
21522: LD_VAR 0 1
21526: ST_TO_ADDR
// vc_engine := engine ;
21527: LD_ADDR_OWVAR 39
21531: PUSH
21532: LD_VAR 0 2
21536: ST_TO_ADDR
// vc_control := control ;
21537: LD_ADDR_OWVAR 38
21541: PUSH
21542: LD_VAR 0 3
21546: ST_TO_ADDR
// vc_weapon := weapon ;
21547: LD_ADDR_OWVAR 40
21551: PUSH
21552: LD_VAR 0 4
21556: ST_TO_ADDR
// un := CreateVehicle ;
21557: LD_ADDR_VAR 0 8
21561: PUSH
21562: CALL_OW 45
21566: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21567: LD_VAR 0 8
21571: PPUSH
21572: LD_INT 0
21574: PPUSH
21575: LD_INT 5
21577: PPUSH
21578: CALL_OW 12
21582: PPUSH
21583: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21587: LD_VAR 0 8
21591: PPUSH
21592: LD_VAR 0 5
21596: PPUSH
21597: LD_VAR 0 6
21601: PPUSH
21602: LD_INT 1
21604: PPUSH
21605: CALL_OW 48
// end ;
21609: LD_VAR 0 7
21613: RET
// export hInvincible ; every 1 do
21614: GO 21616
21616: DISABLE
// hInvincible := [ ] ;
21617: LD_ADDR_EXP 76
21621: PUSH
21622: EMPTY
21623: ST_TO_ADDR
21624: END
// every 10 do var i ;
21625: GO 21627
21627: DISABLE
21628: LD_INT 0
21630: PPUSH
// begin enable ;
21631: ENABLE
// if not hInvincible then
21632: LD_EXP 76
21636: NOT
21637: IFFALSE 21641
// exit ;
21639: GO 21685
// for i in hInvincible do
21641: LD_ADDR_VAR 0 1
21645: PUSH
21646: LD_EXP 76
21650: PUSH
21651: FOR_IN
21652: IFFALSE 21683
// if GetLives ( i ) < 1000 then
21654: LD_VAR 0 1
21658: PPUSH
21659: CALL_OW 256
21663: PUSH
21664: LD_INT 1000
21666: LESS
21667: IFFALSE 21681
// SetLives ( i , 1000 ) ;
21669: LD_VAR 0 1
21673: PPUSH
21674: LD_INT 1000
21676: PPUSH
21677: CALL_OW 234
21681: GO 21651
21683: POP
21684: POP
// end ;
21685: PPOPN 1
21687: END
// export function hHackInvincible ; var i ; begin
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 21
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 21
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 69
21729: PUSH
21730: FOR_IN
21731: IFFALSE 21792
// if IsSelected ( i ) then
21733: LD_VAR 0 2
21737: PPUSH
21738: CALL_OW 306
21742: IFFALSE 21790
// begin if i in hInvincible then
21744: LD_VAR 0 2
21748: PUSH
21749: LD_EXP 76
21753: IN
21754: IFFALSE 21774
// hInvincible := hInvincible diff i else
21756: LD_ADDR_EXP 76
21760: PUSH
21761: LD_EXP 76
21765: PUSH
21766: LD_VAR 0 2
21770: DIFF
21771: ST_TO_ADDR
21772: GO 21790
// hInvincible := hInvincible union i ;
21774: LD_ADDR_EXP 76
21778: PUSH
21779: LD_EXP 76
21783: PUSH
21784: LD_VAR 0 2
21788: UNION
21789: ST_TO_ADDR
// end ;
21790: GO 21730
21792: POP
21793: POP
// end ;
21794: LD_VAR 0 1
21798: RET
// export function hHackInvisible ; var i , j ; begin
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
21803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21804: LD_ADDR_VAR 0 2
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: PUSH
21824: FOR_IN
21825: IFFALSE 21849
// if IsSelected ( i ) then
21827: LD_VAR 0 2
21831: PPUSH
21832: CALL_OW 306
21836: IFFALSE 21847
// ComForceInvisible ( i ) ;
21838: LD_VAR 0 2
21842: PPUSH
21843: CALL_OW 496
21847: GO 21824
21849: POP
21850: POP
// end ;
21851: LD_VAR 0 1
21855: RET
// export function hHackChangeYourSide ; begin
21856: LD_INT 0
21858: PPUSH
// if your_side = 8 then
21859: LD_OWVAR 2
21863: PUSH
21864: LD_INT 8
21866: EQUAL
21867: IFFALSE 21879
// your_side := 0 else
21869: LD_ADDR_OWVAR 2
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
21877: GO 21893
// your_side := your_side + 1 ;
21879: LD_ADDR_OWVAR 2
21883: PUSH
21884: LD_OWVAR 2
21888: PUSH
21889: LD_INT 1
21891: PLUS
21892: ST_TO_ADDR
// end ;
21893: LD_VAR 0 1
21897: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
21902: PPUSH
// for i in all_units do
21903: LD_ADDR_VAR 0 2
21907: PUSH
21908: LD_OWVAR 3
21912: PUSH
21913: FOR_IN
21914: IFFALSE 21992
// if IsSelected ( i ) then
21916: LD_VAR 0 2
21920: PPUSH
21921: CALL_OW 306
21925: IFFALSE 21990
// begin j := GetSide ( i ) ;
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_VAR 0 2
21936: PPUSH
21937: CALL_OW 255
21941: ST_TO_ADDR
// if j = 8 then
21942: LD_VAR 0 3
21946: PUSH
21947: LD_INT 8
21949: EQUAL
21950: IFFALSE 21962
// j := 0 else
21952: LD_ADDR_VAR 0 3
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
21960: GO 21976
// j := j + 1 ;
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: LD_VAR 0 3
21971: PUSH
21972: LD_INT 1
21974: PLUS
21975: ST_TO_ADDR
// SetSide ( i , j ) ;
21976: LD_VAR 0 2
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: CALL_OW 235
// end ;
21990: GO 21913
21992: POP
21993: POP
// end ;
21994: LD_VAR 0 1
21998: RET
// export function hHackFog ; begin
21999: LD_INT 0
22001: PPUSH
// FogOff ( true ) ;
22002: LD_INT 1
22004: PPUSH
22005: CALL_OW 344
// end ;
22009: LD_VAR 0 1
22013: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22014: LD_INT 0
22016: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22017: LD_VAR 0 1
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 3
22031: PPUSH
22032: LD_INT 1
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: CALL_OW 483
// CenterOnXY ( x , y ) ;
22042: LD_VAR 0 2
22046: PPUSH
22047: LD_VAR 0 3
22051: PPUSH
22052: CALL_OW 84
// end ;
22056: LD_VAR 0 4
22060: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22061: LD_INT 0
22063: PPUSH
22064: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22065: LD_VAR 0 1
22069: NOT
22070: PUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: CALL_OW 488
22085: NOT
22086: OR
22087: PUSH
22088: LD_VAR 0 1
22092: PPUSH
22093: CALL_OW 266
22097: PUSH
22098: LD_INT 3
22100: NONEQUAL
22101: PUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 247
22111: PUSH
22112: LD_INT 1
22114: EQUAL
22115: NOT
22116: AND
22117: OR
22118: IFFALSE 22122
// exit ;
22120: GO 22271
// if GetType ( factory ) = unit_human then
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 247
22131: PUSH
22132: LD_INT 1
22134: EQUAL
22135: IFFALSE 22152
// factory := IsInUnit ( factory ) ;
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_VAR 0 1
22146: PPUSH
22147: CALL_OW 310
22151: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22152: LD_VAR 0 1
22156: PPUSH
22157: CALL_OW 266
22161: PUSH
22162: LD_INT 3
22164: NONEQUAL
22165: IFFALSE 22169
// exit ;
22167: GO 22271
// if HexInfo ( x , y ) = factory then
22169: LD_VAR 0 2
22173: PPUSH
22174: LD_VAR 0 3
22178: PPUSH
22179: CALL_OW 428
22183: PUSH
22184: LD_VAR 0 1
22188: EQUAL
22189: IFFALSE 22216
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22191: LD_ADDR_EXP 77
22195: PUSH
22196: LD_EXP 77
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_INT 0
22208: PPUSH
22209: CALL_OW 1
22213: ST_TO_ADDR
22214: GO 22267
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22216: LD_ADDR_EXP 77
22220: PUSH
22221: LD_EXP 77
22225: PPUSH
22226: LD_VAR 0 1
22230: PPUSH
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 255
22240: PUSH
22241: LD_VAR 0 1
22245: PUSH
22246: LD_VAR 0 2
22250: PUSH
22251: LD_VAR 0 3
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 1
22266: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22267: CALL 22276 0 0
// end ;
22271: LD_VAR 0 4
22275: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22276: LD_INT 0
22278: PPUSH
22279: PPUSH
22280: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22281: LD_STRING resetFactoryWaypoint();
22283: PPUSH
22284: CALL_OW 559
// if factoryWaypoints then
22288: LD_EXP 77
22292: IFFALSE 22418
// begin list := PrepareArray ( factoryWaypoints ) ;
22294: LD_ADDR_VAR 0 3
22298: PUSH
22299: LD_EXP 77
22303: PPUSH
22304: CALL 64579 0 1
22308: ST_TO_ADDR
// for i := 1 to list do
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: DOUBLE
22315: LD_INT 1
22317: DEC
22318: ST_TO_ADDR
22319: LD_VAR 0 3
22323: PUSH
22324: FOR_TO
22325: IFFALSE 22416
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22327: LD_STRING setFactoryWaypointXY(
22329: PUSH
22330: LD_VAR 0 3
22334: PUSH
22335: LD_VAR 0 2
22339: ARRAY
22340: PUSH
22341: LD_INT 1
22343: ARRAY
22344: STR
22345: PUSH
22346: LD_STRING ,
22348: STR
22349: PUSH
22350: LD_VAR 0 3
22354: PUSH
22355: LD_VAR 0 2
22359: ARRAY
22360: PUSH
22361: LD_INT 2
22363: ARRAY
22364: STR
22365: PUSH
22366: LD_STRING ,
22368: STR
22369: PUSH
22370: LD_VAR 0 3
22374: PUSH
22375: LD_VAR 0 2
22379: ARRAY
22380: PUSH
22381: LD_INT 3
22383: ARRAY
22384: STR
22385: PUSH
22386: LD_STRING ,
22388: STR
22389: PUSH
22390: LD_VAR 0 3
22394: PUSH
22395: LD_VAR 0 2
22399: ARRAY
22400: PUSH
22401: LD_INT 4
22403: ARRAY
22404: STR
22405: PUSH
22406: LD_STRING )
22408: STR
22409: PPUSH
22410: CALL_OW 559
22414: GO 22324
22416: POP
22417: POP
// end ; end ;
22418: LD_VAR 0 1
22422: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22423: LD_INT 0
22425: PPUSH
// if HexInfo ( x , y ) = warehouse then
22426: LD_VAR 0 2
22430: PPUSH
22431: LD_VAR 0 3
22435: PPUSH
22436: CALL_OW 428
22440: PUSH
22441: LD_VAR 0 1
22445: EQUAL
22446: IFFALSE 22473
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22448: LD_ADDR_EXP 78
22452: PUSH
22453: LD_EXP 78
22457: PPUSH
22458: LD_VAR 0 1
22462: PPUSH
22463: LD_INT 0
22465: PPUSH
22466: CALL_OW 1
22470: ST_TO_ADDR
22471: GO 22524
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22473: LD_ADDR_EXP 78
22477: PUSH
22478: LD_EXP 78
22482: PPUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 255
22497: PUSH
22498: LD_VAR 0 1
22502: PUSH
22503: LD_VAR 0 2
22507: PUSH
22508: LD_VAR 0 3
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PPUSH
22519: CALL_OW 1
22523: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22524: CALL 22533 0 0
// end ;
22528: LD_VAR 0 4
22532: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22538: LD_STRING resetWarehouseGatheringPoints();
22540: PPUSH
22541: CALL_OW 559
// if warehouseGatheringPoints then
22545: LD_EXP 78
22549: IFFALSE 22675
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: LD_EXP 78
22560: PPUSH
22561: CALL 64579 0 1
22565: ST_TO_ADDR
// for i := 1 to list do
22566: LD_ADDR_VAR 0 2
22570: PUSH
22571: DOUBLE
22572: LD_INT 1
22574: DEC
22575: ST_TO_ADDR
22576: LD_VAR 0 3
22580: PUSH
22581: FOR_TO
22582: IFFALSE 22673
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22584: LD_STRING setWarehouseGatheringPointXY(
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_VAR 0 2
22596: ARRAY
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: STR
22602: PUSH
22603: LD_STRING ,
22605: STR
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 2
22616: ARRAY
22617: PUSH
22618: LD_INT 2
22620: ARRAY
22621: STR
22622: PUSH
22623: LD_STRING ,
22625: STR
22626: PUSH
22627: LD_VAR 0 3
22631: PUSH
22632: LD_VAR 0 2
22636: ARRAY
22637: PUSH
22638: LD_INT 3
22640: ARRAY
22641: STR
22642: PUSH
22643: LD_STRING ,
22645: STR
22646: PUSH
22647: LD_VAR 0 3
22651: PUSH
22652: LD_VAR 0 2
22656: ARRAY
22657: PUSH
22658: LD_INT 4
22660: ARRAY
22661: STR
22662: PUSH
22663: LD_STRING )
22665: STR
22666: PPUSH
22667: CALL_OW 559
22671: GO 22581
22673: POP
22674: POP
// end ; end ;
22675: LD_VAR 0 1
22679: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22680: LD_EXP 78
22684: IFFALSE 23369
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
22697: PPUSH
22698: PPUSH
22699: PPUSH
// begin enable ;
22700: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22701: LD_ADDR_VAR 0 3
22705: PUSH
22706: LD_EXP 78
22710: PPUSH
22711: CALL 64579 0 1
22715: ST_TO_ADDR
// if not list then
22716: LD_VAR 0 3
22720: NOT
22721: IFFALSE 22725
// exit ;
22723: GO 23369
// for i := 1 to list do
22725: LD_ADDR_VAR 0 1
22729: PUSH
22730: DOUBLE
22731: LD_INT 1
22733: DEC
22734: ST_TO_ADDR
22735: LD_VAR 0 3
22739: PUSH
22740: FOR_TO
22741: IFFALSE 23367
// begin depot := list [ i ] [ 2 ] ;
22743: LD_ADDR_VAR 0 8
22747: PUSH
22748: LD_VAR 0 3
22752: PUSH
22753: LD_VAR 0 1
22757: ARRAY
22758: PUSH
22759: LD_INT 2
22761: ARRAY
22762: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22763: LD_ADDR_VAR 0 5
22767: PUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_VAR 0 1
22777: ARRAY
22778: PUSH
22779: LD_INT 1
22781: ARRAY
22782: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22783: LD_VAR 0 8
22787: PPUSH
22788: CALL_OW 301
22792: PUSH
22793: LD_VAR 0 5
22797: PUSH
22798: LD_VAR 0 8
22802: PPUSH
22803: CALL_OW 255
22807: NONEQUAL
22808: OR
22809: IFFALSE 22838
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22811: LD_ADDR_EXP 78
22815: PUSH
22816: LD_EXP 78
22820: PPUSH
22821: LD_VAR 0 8
22825: PPUSH
22826: LD_INT 0
22828: PPUSH
22829: CALL_OW 1
22833: ST_TO_ADDR
// exit ;
22834: POP
22835: POP
22836: GO 23369
// end ; x := list [ i ] [ 3 ] ;
22838: LD_ADDR_VAR 0 6
22842: PUSH
22843: LD_VAR 0 3
22847: PUSH
22848: LD_VAR 0 1
22852: ARRAY
22853: PUSH
22854: LD_INT 3
22856: ARRAY
22857: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22858: LD_ADDR_VAR 0 7
22862: PUSH
22863: LD_VAR 0 3
22867: PUSH
22868: LD_VAR 0 1
22872: ARRAY
22873: PUSH
22874: LD_INT 4
22876: ARRAY
22877: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22878: LD_ADDR_VAR 0 9
22882: PUSH
22883: LD_VAR 0 6
22887: PPUSH
22888: LD_VAR 0 7
22892: PPUSH
22893: LD_INT 16
22895: PPUSH
22896: CALL 63167 0 3
22900: ST_TO_ADDR
// if not cratesNearbyPoint then
22901: LD_VAR 0 9
22905: NOT
22906: IFFALSE 22912
// exit ;
22908: POP
22909: POP
22910: GO 23369
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22912: LD_ADDR_VAR 0 4
22916: PUSH
22917: LD_INT 22
22919: PUSH
22920: LD_VAR 0 5
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 60
22934: PUSH
22935: EMPTY
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 91
22944: PUSH
22945: LD_VAR 0 8
22949: PUSH
22950: LD_INT 6
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 25
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 25
22973: PUSH
22974: LD_INT 16
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 69
22996: PUSH
22997: LD_VAR 0 8
23001: PPUSH
23002: CALL_OW 313
23006: PPUSH
23007: LD_INT 3
23009: PUSH
23010: LD_INT 60
23012: PUSH
23013: EMPTY
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: LD_INT 25
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 25
23035: PUSH
23036: LD_INT 16
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 72
23056: UNION
23057: ST_TO_ADDR
// if tmp then
23058: LD_VAR 0 4
23062: IFFALSE 23142
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23064: LD_ADDR_VAR 0 4
23068: PUSH
23069: LD_VAR 0 4
23073: PPUSH
23074: LD_INT 3
23076: PPUSH
23077: CALL 61136 0 2
23081: ST_TO_ADDR
// for j in tmp do
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_VAR 0 4
23091: PUSH
23092: FOR_IN
23093: IFFALSE 23136
// begin if IsInUnit ( j ) then
23095: LD_VAR 0 2
23099: PPUSH
23100: CALL_OW 310
23104: IFFALSE 23115
// ComExit ( j ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: CALL 61219 0 1
// AddComCollect ( j , x , y ) ;
23115: LD_VAR 0 2
23119: PPUSH
23120: LD_VAR 0 6
23124: PPUSH
23125: LD_VAR 0 7
23129: PPUSH
23130: CALL_OW 177
// end ;
23134: GO 23092
23136: POP
23137: POP
// exit ;
23138: POP
23139: POP
23140: GO 23369
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23142: LD_ADDR_VAR 0 4
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_VAR 0 5
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 91
23161: PUSH
23162: LD_VAR 0 8
23166: PUSH
23167: LD_INT 8
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 34
23180: PUSH
23181: LD_INT 12
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 34
23190: PUSH
23191: LD_INT 51
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 34
23200: PUSH
23201: LD_INT 32
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 34
23210: PUSH
23211: LD_INT 89
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: PPUSH
23230: CALL_OW 69
23234: ST_TO_ADDR
// if tmp then
23235: LD_VAR 0 4
23239: IFFALSE 23365
// begin for j in tmp do
23241: LD_ADDR_VAR 0 2
23245: PUSH
23246: LD_VAR 0 4
23250: PUSH
23251: FOR_IN
23252: IFFALSE 23363
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23254: LD_VAR 0 2
23258: PPUSH
23259: CALL_OW 262
23263: PUSH
23264: LD_INT 3
23266: EQUAL
23267: PUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: CALL_OW 261
23277: PUSH
23278: LD_INT 20
23280: GREATER
23281: OR
23282: PUSH
23283: LD_VAR 0 2
23287: PPUSH
23288: CALL_OW 314
23292: NOT
23293: AND
23294: PUSH
23295: LD_VAR 0 2
23299: PPUSH
23300: CALL_OW 263
23304: PUSH
23305: LD_INT 1
23307: NONEQUAL
23308: PUSH
23309: LD_VAR 0 2
23313: PPUSH
23314: CALL_OW 311
23318: OR
23319: AND
23320: IFFALSE 23361
// begin ComCollect ( j , x , y ) ;
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_VAR 0 6
23331: PPUSH
23332: LD_VAR 0 7
23336: PPUSH
23337: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23341: LD_VAR 0 2
23345: PPUSH
23346: LD_VAR 0 8
23350: PPUSH
23351: CALL_OW 172
// exit ;
23355: POP
23356: POP
23357: POP
23358: POP
23359: GO 23369
// end ;
23361: GO 23251
23363: POP
23364: POP
// end ; end ;
23365: GO 22740
23367: POP
23368: POP
// end ; end_of_file
23369: PPOPN 9
23371: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23372: LD_INT 0
23374: PPUSH
23375: PPUSH
// if exist_mode then
23376: LD_VAR 0 2
23380: IFFALSE 23405
// unit := CreateCharacter ( prefix & ident ) else
23382: LD_ADDR_VAR 0 5
23386: PUSH
23387: LD_VAR 0 3
23391: PUSH
23392: LD_VAR 0 1
23396: STR
23397: PPUSH
23398: CALL_OW 34
23402: ST_TO_ADDR
23403: GO 23420
// unit := NewCharacter ( ident ) ;
23405: LD_ADDR_VAR 0 5
23409: PUSH
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 25
23419: ST_TO_ADDR
// result := unit ;
23420: LD_ADDR_VAR 0 4
23424: PUSH
23425: LD_VAR 0 5
23429: ST_TO_ADDR
// end ;
23430: LD_VAR 0 4
23434: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23435: LD_INT 0
23437: PPUSH
23438: PPUSH
// if not side or not nation then
23439: LD_VAR 0 1
23443: NOT
23444: PUSH
23445: LD_VAR 0 2
23449: NOT
23450: OR
23451: IFFALSE 23455
// exit ;
23453: GO 24223
// case nation of nation_american :
23455: LD_VAR 0 2
23459: PUSH
23460: LD_INT 1
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23682
23468: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23469: LD_ADDR_VAR 0 4
23473: PUSH
23474: LD_INT 35
23476: PUSH
23477: LD_INT 45
23479: PUSH
23480: LD_INT 46
23482: PUSH
23483: LD_INT 47
23485: PUSH
23486: LD_INT 82
23488: PUSH
23489: LD_INT 83
23491: PUSH
23492: LD_INT 84
23494: PUSH
23495: LD_INT 85
23497: PUSH
23498: LD_INT 86
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 6
23509: PUSH
23510: LD_INT 15
23512: PUSH
23513: LD_INT 16
23515: PUSH
23516: LD_INT 7
23518: PUSH
23519: LD_INT 12
23521: PUSH
23522: LD_INT 13
23524: PUSH
23525: LD_INT 10
23527: PUSH
23528: LD_INT 14
23530: PUSH
23531: LD_INT 20
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 25
23542: PUSH
23543: LD_INT 32
23545: PUSH
23546: LD_INT 27
23548: PUSH
23549: LD_INT 36
23551: PUSH
23552: LD_INT 69
23554: PUSH
23555: LD_INT 39
23557: PUSH
23558: LD_INT 34
23560: PUSH
23561: LD_INT 40
23563: PUSH
23564: LD_INT 48
23566: PUSH
23567: LD_INT 49
23569: PUSH
23570: LD_INT 50
23572: PUSH
23573: LD_INT 51
23575: PUSH
23576: LD_INT 52
23578: PUSH
23579: LD_INT 53
23581: PUSH
23582: LD_INT 54
23584: PUSH
23585: LD_INT 55
23587: PUSH
23588: LD_INT 56
23590: PUSH
23591: LD_INT 57
23593: PUSH
23594: LD_INT 58
23596: PUSH
23597: LD_INT 59
23599: PUSH
23600: LD_INT 60
23602: PUSH
23603: LD_INT 61
23605: PUSH
23606: LD_INT 62
23608: PUSH
23609: LD_INT 80
23611: PUSH
23612: LD_INT 82
23614: PUSH
23615: LD_INT 83
23617: PUSH
23618: LD_INT 84
23620: PUSH
23621: LD_INT 85
23623: PUSH
23624: LD_INT 86
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
23680: GO 24147
23682: LD_INT 2
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23916
23690: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23691: LD_ADDR_VAR 0 4
23695: PUSH
23696: LD_INT 35
23698: PUSH
23699: LD_INT 45
23701: PUSH
23702: LD_INT 46
23704: PUSH
23705: LD_INT 47
23707: PUSH
23708: LD_INT 82
23710: PUSH
23711: LD_INT 83
23713: PUSH
23714: LD_INT 84
23716: PUSH
23717: LD_INT 85
23719: PUSH
23720: LD_INT 87
23722: PUSH
23723: LD_INT 70
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 11
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: LD_INT 4
23737: PUSH
23738: LD_INT 5
23740: PUSH
23741: LD_INT 6
23743: PUSH
23744: LD_INT 15
23746: PUSH
23747: LD_INT 18
23749: PUSH
23750: LD_INT 7
23752: PUSH
23753: LD_INT 17
23755: PUSH
23756: LD_INT 8
23758: PUSH
23759: LD_INT 20
23761: PUSH
23762: LD_INT 21
23764: PUSH
23765: LD_INT 22
23767: PUSH
23768: LD_INT 72
23770: PUSH
23771: LD_INT 26
23773: PUSH
23774: LD_INT 69
23776: PUSH
23777: LD_INT 39
23779: PUSH
23780: LD_INT 40
23782: PUSH
23783: LD_INT 41
23785: PUSH
23786: LD_INT 42
23788: PUSH
23789: LD_INT 43
23791: PUSH
23792: LD_INT 48
23794: PUSH
23795: LD_INT 49
23797: PUSH
23798: LD_INT 50
23800: PUSH
23801: LD_INT 51
23803: PUSH
23804: LD_INT 52
23806: PUSH
23807: LD_INT 53
23809: PUSH
23810: LD_INT 54
23812: PUSH
23813: LD_INT 55
23815: PUSH
23816: LD_INT 56
23818: PUSH
23819: LD_INT 60
23821: PUSH
23822: LD_INT 61
23824: PUSH
23825: LD_INT 62
23827: PUSH
23828: LD_INT 66
23830: PUSH
23831: LD_INT 67
23833: PUSH
23834: LD_INT 68
23836: PUSH
23837: LD_INT 81
23839: PUSH
23840: LD_INT 82
23842: PUSH
23843: LD_INT 83
23845: PUSH
23846: LD_INT 84
23848: PUSH
23849: LD_INT 85
23851: PUSH
23852: LD_INT 87
23854: PUSH
23855: LD_INT 88
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: ST_TO_ADDR
23914: GO 24147
23916: LD_INT 3
23918: DOUBLE
23919: EQUAL
23920: IFTRUE 23924
23922: GO 24146
23924: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23925: LD_ADDR_VAR 0 4
23929: PUSH
23930: LD_INT 46
23932: PUSH
23933: LD_INT 47
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 82
23944: PUSH
23945: LD_INT 83
23947: PUSH
23948: LD_INT 84
23950: PUSH
23951: LD_INT 85
23953: PUSH
23954: LD_INT 86
23956: PUSH
23957: LD_INT 11
23959: PUSH
23960: LD_INT 9
23962: PUSH
23963: LD_INT 20
23965: PUSH
23966: LD_INT 19
23968: PUSH
23969: LD_INT 21
23971: PUSH
23972: LD_INT 24
23974: PUSH
23975: LD_INT 22
23977: PUSH
23978: LD_INT 25
23980: PUSH
23981: LD_INT 28
23983: PUSH
23984: LD_INT 29
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: LD_INT 31
23992: PUSH
23993: LD_INT 37
23995: PUSH
23996: LD_INT 38
23998: PUSH
23999: LD_INT 32
24001: PUSH
24002: LD_INT 27
24004: PUSH
24005: LD_INT 33
24007: PUSH
24008: LD_INT 69
24010: PUSH
24011: LD_INT 39
24013: PUSH
24014: LD_INT 34
24016: PUSH
24017: LD_INT 40
24019: PUSH
24020: LD_INT 71
24022: PUSH
24023: LD_INT 23
24025: PUSH
24026: LD_INT 44
24028: PUSH
24029: LD_INT 48
24031: PUSH
24032: LD_INT 49
24034: PUSH
24035: LD_INT 50
24037: PUSH
24038: LD_INT 51
24040: PUSH
24041: LD_INT 52
24043: PUSH
24044: LD_INT 53
24046: PUSH
24047: LD_INT 54
24049: PUSH
24050: LD_INT 55
24052: PUSH
24053: LD_INT 56
24055: PUSH
24056: LD_INT 57
24058: PUSH
24059: LD_INT 58
24061: PUSH
24062: LD_INT 59
24064: PUSH
24065: LD_INT 63
24067: PUSH
24068: LD_INT 64
24070: PUSH
24071: LD_INT 65
24073: PUSH
24074: LD_INT 82
24076: PUSH
24077: LD_INT 83
24079: PUSH
24080: LD_INT 84
24082: PUSH
24083: LD_INT 85
24085: PUSH
24086: LD_INT 86
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: ST_TO_ADDR
24144: GO 24147
24146: POP
// if state > - 1 and state < 3 then
24147: LD_VAR 0 3
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: GREATER
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: LD_INT 3
24164: LESS
24165: AND
24166: IFFALSE 24223
// for i in result do
24168: LD_ADDR_VAR 0 5
24172: PUSH
24173: LD_VAR 0 4
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24221
// if GetTech ( i , side ) <> state then
24181: LD_VAR 0 5
24185: PPUSH
24186: LD_VAR 0 1
24190: PPUSH
24191: CALL_OW 321
24195: PUSH
24196: LD_VAR 0 3
24200: NONEQUAL
24201: IFFALSE 24219
// result := result diff i ;
24203: LD_ADDR_VAR 0 4
24207: PUSH
24208: LD_VAR 0 4
24212: PUSH
24213: LD_VAR 0 5
24217: DIFF
24218: ST_TO_ADDR
24219: GO 24178
24221: POP
24222: POP
// end ;
24223: LD_VAR 0 4
24227: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24228: LD_INT 0
24230: PPUSH
24231: PPUSH
24232: PPUSH
// result := true ;
24233: LD_ADDR_VAR 0 3
24237: PUSH
24238: LD_INT 1
24240: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24241: LD_ADDR_VAR 0 5
24245: PUSH
24246: LD_VAR 0 2
24250: PPUSH
24251: CALL_OW 480
24255: ST_TO_ADDR
// if not tmp then
24256: LD_VAR 0 5
24260: NOT
24261: IFFALSE 24265
// exit ;
24263: GO 24314
// for i in tmp do
24265: LD_ADDR_VAR 0 4
24269: PUSH
24270: LD_VAR 0 5
24274: PUSH
24275: FOR_IN
24276: IFFALSE 24312
// if GetTech ( i , side ) <> state_researched then
24278: LD_VAR 0 4
24282: PPUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 321
24292: PUSH
24293: LD_INT 2
24295: NONEQUAL
24296: IFFALSE 24310
// begin result := false ;
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_INT 0
24305: ST_TO_ADDR
// exit ;
24306: POP
24307: POP
24308: GO 24314
// end ;
24310: GO 24275
24312: POP
24313: POP
// end ;
24314: LD_VAR 0 3
24318: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
24326: PPUSH
24327: PPUSH
24328: PPUSH
24329: PPUSH
24330: PPUSH
24331: PPUSH
24332: PPUSH
24333: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24334: LD_VAR 0 1
24338: NOT
24339: PUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 257
24349: PUSH
24350: LD_INT 9
24352: NONEQUAL
24353: OR
24354: IFFALSE 24358
// exit ;
24356: GO 24931
// side := GetSide ( unit ) ;
24358: LD_ADDR_VAR 0 9
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 255
24372: ST_TO_ADDR
// tech_space := tech_spacanom ;
24373: LD_ADDR_VAR 0 12
24377: PUSH
24378: LD_INT 29
24380: ST_TO_ADDR
// tech_time := tech_taurad ;
24381: LD_ADDR_VAR 0 13
24385: PUSH
24386: LD_INT 28
24388: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24389: LD_ADDR_VAR 0 11
24393: PUSH
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL_OW 310
24403: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24404: LD_VAR 0 11
24408: PPUSH
24409: CALL_OW 247
24413: PUSH
24414: LD_INT 2
24416: EQUAL
24417: IFFALSE 24421
// exit ;
24419: GO 24931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24421: LD_ADDR_VAR 0 8
24425: PUSH
24426: LD_INT 81
24428: PUSH
24429: LD_VAR 0 9
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 3
24440: PUSH
24441: LD_INT 21
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PPUSH
24459: CALL_OW 69
24463: ST_TO_ADDR
// if not tmp then
24464: LD_VAR 0 8
24468: NOT
24469: IFFALSE 24473
// exit ;
24471: GO 24931
// if in_unit then
24473: LD_VAR 0 11
24477: IFFALSE 24501
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24479: LD_ADDR_VAR 0 10
24483: PUSH
24484: LD_VAR 0 8
24488: PPUSH
24489: LD_VAR 0 11
24493: PPUSH
24494: CALL_OW 74
24498: ST_TO_ADDR
24499: GO 24521
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24501: LD_ADDR_VAR 0 10
24505: PUSH
24506: LD_VAR 0 8
24510: PPUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL_OW 74
24520: ST_TO_ADDR
// if not enemy then
24521: LD_VAR 0 10
24525: NOT
24526: IFFALSE 24530
// exit ;
24528: GO 24931
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24530: LD_VAR 0 11
24534: PUSH
24535: LD_VAR 0 11
24539: PPUSH
24540: LD_VAR 0 10
24544: PPUSH
24545: CALL_OW 296
24549: PUSH
24550: LD_INT 13
24552: GREATER
24553: AND
24554: PUSH
24555: LD_VAR 0 1
24559: PPUSH
24560: LD_VAR 0 10
24564: PPUSH
24565: CALL_OW 296
24569: PUSH
24570: LD_INT 12
24572: GREATER
24573: OR
24574: IFFALSE 24578
// exit ;
24576: GO 24931
// missile := [ 1 ] ;
24578: LD_ADDR_VAR 0 14
24582: PUSH
24583: LD_INT 1
24585: PUSH
24586: EMPTY
24587: LIST
24588: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24589: LD_VAR 0 9
24593: PPUSH
24594: LD_VAR 0 12
24598: PPUSH
24599: CALL_OW 325
24603: IFFALSE 24632
// missile := Replace ( missile , missile + 1 , 2 ) ;
24605: LD_ADDR_VAR 0 14
24609: PUSH
24610: LD_VAR 0 14
24614: PPUSH
24615: LD_VAR 0 14
24619: PUSH
24620: LD_INT 1
24622: PLUS
24623: PPUSH
24624: LD_INT 2
24626: PPUSH
24627: CALL_OW 1
24631: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24632: LD_VAR 0 9
24636: PPUSH
24637: LD_VAR 0 13
24641: PPUSH
24642: CALL_OW 325
24646: PUSH
24647: LD_VAR 0 10
24651: PPUSH
24652: CALL_OW 255
24656: PPUSH
24657: LD_VAR 0 13
24661: PPUSH
24662: CALL_OW 325
24666: NOT
24667: AND
24668: IFFALSE 24697
// missile := Replace ( missile , missile + 1 , 3 ) ;
24670: LD_ADDR_VAR 0 14
24674: PUSH
24675: LD_VAR 0 14
24679: PPUSH
24680: LD_VAR 0 14
24684: PUSH
24685: LD_INT 1
24687: PLUS
24688: PPUSH
24689: LD_INT 3
24691: PPUSH
24692: CALL_OW 1
24696: ST_TO_ADDR
// if missile < 2 then
24697: LD_VAR 0 14
24701: PUSH
24702: LD_INT 2
24704: LESS
24705: IFFALSE 24709
// exit ;
24707: GO 24931
// x := GetX ( enemy ) ;
24709: LD_ADDR_VAR 0 4
24713: PUSH
24714: LD_VAR 0 10
24718: PPUSH
24719: CALL_OW 250
24723: ST_TO_ADDR
// y := GetY ( enemy ) ;
24724: LD_ADDR_VAR 0 5
24728: PUSH
24729: LD_VAR 0 10
24733: PPUSH
24734: CALL_OW 251
24738: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24739: LD_ADDR_VAR 0 6
24743: PUSH
24744: LD_VAR 0 4
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PPUSH
24753: LD_INT 1
24755: PPUSH
24756: CALL_OW 12
24760: PLUS
24761: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24762: LD_ADDR_VAR 0 7
24766: PUSH
24767: LD_VAR 0 5
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PPUSH
24776: LD_INT 1
24778: PPUSH
24779: CALL_OW 12
24783: PLUS
24784: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24785: LD_VAR 0 6
24789: PPUSH
24790: LD_VAR 0 7
24794: PPUSH
24795: CALL_OW 488
24799: NOT
24800: IFFALSE 24822
// begin _x := x ;
24802: LD_ADDR_VAR 0 6
24806: PUSH
24807: LD_VAR 0 4
24811: ST_TO_ADDR
// _y := y ;
24812: LD_ADDR_VAR 0 7
24816: PUSH
24817: LD_VAR 0 5
24821: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24822: LD_ADDR_VAR 0 3
24826: PUSH
24827: LD_INT 1
24829: PPUSH
24830: LD_VAR 0 14
24834: PPUSH
24835: CALL_OW 12
24839: ST_TO_ADDR
// case i of 1 :
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 1
24847: DOUBLE
24848: EQUAL
24849: IFTRUE 24853
24851: GO 24870
24853: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_VAR 0 10
24863: PPUSH
24864: CALL_OW 115
24868: GO 24931
24870: LD_INT 2
24872: DOUBLE
24873: EQUAL
24874: IFTRUE 24878
24876: GO 24900
24878: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_VAR 0 6
24888: PPUSH
24889: LD_VAR 0 7
24893: PPUSH
24894: CALL_OW 153
24898: GO 24931
24900: LD_INT 3
24902: DOUBLE
24903: EQUAL
24904: IFTRUE 24908
24906: GO 24930
24908: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24909: LD_VAR 0 1
24913: PPUSH
24914: LD_VAR 0 6
24918: PPUSH
24919: LD_VAR 0 7
24923: PPUSH
24924: CALL_OW 154
24928: GO 24931
24930: POP
// end ;
24931: LD_VAR 0 2
24935: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24936: LD_INT 0
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
24942: PPUSH
24943: PPUSH
// if not unit or not building then
24944: LD_VAR 0 1
24948: NOT
24949: PUSH
24950: LD_VAR 0 2
24954: NOT
24955: OR
24956: IFFALSE 24960
// exit ;
24958: GO 25118
// x := GetX ( building ) ;
24960: LD_ADDR_VAR 0 5
24964: PUSH
24965: LD_VAR 0 2
24969: PPUSH
24970: CALL_OW 250
24974: ST_TO_ADDR
// y := GetY ( building ) ;
24975: LD_ADDR_VAR 0 6
24979: PUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: CALL_OW 251
24989: ST_TO_ADDR
// for i = 0 to 5 do
24990: LD_ADDR_VAR 0 4
24994: PUSH
24995: DOUBLE
24996: LD_INT 0
24998: DEC
24999: ST_TO_ADDR
25000: LD_INT 5
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25116
// begin _x := ShiftX ( x , i , 3 ) ;
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: LD_VAR 0 5
25015: PPUSH
25016: LD_VAR 0 4
25020: PPUSH
25021: LD_INT 3
25023: PPUSH
25024: CALL_OW 272
25028: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: LD_VAR 0 6
25038: PPUSH
25039: LD_VAR 0 4
25043: PPUSH
25044: LD_INT 3
25046: PPUSH
25047: CALL_OW 273
25051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25052: LD_VAR 0 7
25056: PPUSH
25057: LD_VAR 0 8
25061: PPUSH
25062: CALL_OW 488
25066: NOT
25067: IFFALSE 25071
// continue ;
25069: GO 25003
// if HexInfo ( _x , _y ) = 0 then
25071: LD_VAR 0 7
25075: PPUSH
25076: LD_VAR 0 8
25080: PPUSH
25081: CALL_OW 428
25085: PUSH
25086: LD_INT 0
25088: EQUAL
25089: IFFALSE 25114
// begin ComMoveXY ( unit , _x , _y ) ;
25091: LD_VAR 0 1
25095: PPUSH
25096: LD_VAR 0 7
25100: PPUSH
25101: LD_VAR 0 8
25105: PPUSH
25106: CALL_OW 111
// exit ;
25110: POP
25111: POP
25112: GO 25118
// end ; end ;
25114: GO 25003
25116: POP
25117: POP
// end ;
25118: LD_VAR 0 3
25122: RET
// export function ScanBase ( side , base_area ) ; begin
25123: LD_INT 0
25125: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_VAR 0 2
25135: PPUSH
25136: LD_INT 81
25138: PUSH
25139: LD_VAR 0 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 70
25152: ST_TO_ADDR
// end ;
25153: LD_VAR 0 3
25157: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25158: LD_INT 0
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
// result := false ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_INT 0
25171: ST_TO_ADDR
// side := GetSide ( unit ) ;
25172: LD_ADDR_VAR 0 3
25176: PUSH
25177: LD_VAR 0 1
25181: PPUSH
25182: CALL_OW 255
25186: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25187: LD_ADDR_VAR 0 4
25191: PUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL_OW 248
25201: ST_TO_ADDR
// case nat of 1 :
25202: LD_VAR 0 4
25206: PUSH
25207: LD_INT 1
25209: DOUBLE
25210: EQUAL
25211: IFTRUE 25215
25213: GO 25226
25215: POP
// tech := tech_lassight ; 2 :
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: LD_INT 12
25223: ST_TO_ADDR
25224: GO 25265
25226: LD_INT 2
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25245
25234: POP
// tech := tech_mortar ; 3 :
25235: LD_ADDR_VAR 0 5
25239: PUSH
25240: LD_INT 41
25242: ST_TO_ADDR
25243: GO 25265
25245: LD_INT 3
25247: DOUBLE
25248: EQUAL
25249: IFTRUE 25253
25251: GO 25264
25253: POP
// tech := tech_bazooka ; end ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_INT 44
25261: ST_TO_ADDR
25262: GO 25265
25264: POP
// if Researched ( side , tech ) then
25265: LD_VAR 0 3
25269: PPUSH
25270: LD_VAR 0 5
25274: PPUSH
25275: CALL_OW 325
25279: IFFALSE 25306
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25281: LD_ADDR_VAR 0 2
25285: PUSH
25286: LD_INT 5
25288: PUSH
25289: LD_INT 8
25291: PUSH
25292: LD_INT 9
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: LD_VAR 0 4
25304: ARRAY
25305: ST_TO_ADDR
// end ;
25306: LD_VAR 0 2
25310: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
// if not mines then
25316: LD_VAR 0 2
25320: NOT
25321: IFFALSE 25325
// exit ;
25323: GO 25469
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25325: LD_ADDR_VAR 0 5
25329: PUSH
25330: LD_INT 81
25332: PUSH
25333: LD_VAR 0 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 3
25344: PUSH
25345: LD_INT 21
25347: PUSH
25348: LD_INT 3
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PPUSH
25363: CALL_OW 69
25367: ST_TO_ADDR
// for i in mines do
25368: LD_ADDR_VAR 0 4
25372: PUSH
25373: LD_VAR 0 2
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25467
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25381: LD_VAR 0 4
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PPUSH
25390: LD_VAR 0 4
25394: PUSH
25395: LD_INT 2
25397: ARRAY
25398: PPUSH
25399: CALL_OW 458
25403: NOT
25404: IFFALSE 25408
// continue ;
25406: GO 25378
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25408: LD_VAR 0 4
25412: PUSH
25413: LD_INT 1
25415: ARRAY
25416: PPUSH
25417: LD_VAR 0 4
25421: PUSH
25422: LD_INT 2
25424: ARRAY
25425: PPUSH
25426: CALL_OW 428
25430: PUSH
25431: LD_VAR 0 5
25435: IN
25436: IFFALSE 25465
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25438: LD_VAR 0 4
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: LD_VAR 0 4
25451: PUSH
25452: LD_INT 2
25454: ARRAY
25455: PPUSH
25456: LD_VAR 0 1
25460: PPUSH
25461: CALL_OW 456
// end ;
25465: GO 25378
25467: POP
25468: POP
// end ;
25469: LD_VAR 0 3
25473: RET
// export function Count ( array ) ; var i ; begin
25474: LD_INT 0
25476: PPUSH
25477: PPUSH
// result := 0 ;
25478: LD_ADDR_VAR 0 2
25482: PUSH
25483: LD_INT 0
25485: ST_TO_ADDR
// for i in array do
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_VAR 0 1
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25521
// if i then
25499: LD_VAR 0 3
25503: IFFALSE 25519
// result := result + 1 ;
25505: LD_ADDR_VAR 0 2
25509: PUSH
25510: LD_VAR 0 2
25514: PUSH
25515: LD_INT 1
25517: PLUS
25518: ST_TO_ADDR
25519: GO 25496
25521: POP
25522: POP
// end ;
25523: LD_VAR 0 2
25527: RET
// export function IsEmpty ( building ) ; begin
25528: LD_INT 0
25530: PPUSH
// if not building then
25531: LD_VAR 0 1
25535: NOT
25536: IFFALSE 25540
// exit ;
25538: GO 25583
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25540: LD_ADDR_VAR 0 2
25544: PUSH
25545: LD_VAR 0 1
25549: PUSH
25550: LD_INT 22
25552: PUSH
25553: LD_VAR 0 1
25557: PPUSH
25558: CALL_OW 255
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 58
25569: PUSH
25570: EMPTY
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PPUSH
25577: CALL_OW 69
25581: IN
25582: ST_TO_ADDR
// end ;
25583: LD_VAR 0 2
25587: RET
// export function IsNotFull ( building ) ; var places ; begin
25588: LD_INT 0
25590: PPUSH
25591: PPUSH
// if not building then
25592: LD_VAR 0 1
25596: NOT
25597: IFFALSE 25601
// exit ;
25599: GO 25772
// result := false ;
25601: LD_ADDR_VAR 0 2
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
// places := 0 ;
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 266
25626: PUSH
25627: LD_INT 0
25629: DOUBLE
25630: EQUAL
25631: IFTRUE 25689
25633: LD_INT 1
25635: DOUBLE
25636: EQUAL
25637: IFTRUE 25689
25639: LD_INT 6
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25689
25645: LD_INT 7
25647: DOUBLE
25648: EQUAL
25649: IFTRUE 25689
25651: LD_INT 8
25653: DOUBLE
25654: EQUAL
25655: IFTRUE 25689
25657: LD_INT 4
25659: DOUBLE
25660: EQUAL
25661: IFTRUE 25689
25663: LD_INT 5
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25689
25669: LD_INT 2
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25689
25675: LD_INT 3
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25689
25681: LD_INT 35
25683: DOUBLE
25684: EQUAL
25685: IFTRUE 25689
25687: GO 25700
25689: POP
// places := 6 ; b_bunker , b_breastwork :
25690: LD_ADDR_VAR 0 3
25694: PUSH
25695: LD_INT 6
25697: ST_TO_ADDR
25698: GO 25745
25700: LD_INT 32
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25714
25706: LD_INT 31
25708: DOUBLE
25709: EQUAL
25710: IFTRUE 25714
25712: GO 25725
25714: POP
// places := 1 ; b_control_tower :
25715: LD_ADDR_VAR 0 3
25719: PUSH
25720: LD_INT 1
25722: ST_TO_ADDR
25723: GO 25745
25725: LD_INT 36
25727: DOUBLE
25728: EQUAL
25729: IFTRUE 25733
25731: GO 25744
25733: POP
// places := 3 ; end ;
25734: LD_ADDR_VAR 0 3
25738: PUSH
25739: LD_INT 3
25741: ST_TO_ADDR
25742: GO 25745
25744: POP
// if places then
25745: LD_VAR 0 3
25749: IFFALSE 25772
// result := UnitsInside ( building ) < places ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 313
25765: PUSH
25766: LD_VAR 0 3
25770: LESS
25771: ST_TO_ADDR
// end ;
25772: LD_VAR 0 2
25776: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// tmp := [ ] ;
25783: LD_ADDR_VAR 0 3
25787: PUSH
25788: EMPTY
25789: ST_TO_ADDR
// list := [ ] ;
25790: LD_ADDR_VAR 0 5
25794: PUSH
25795: EMPTY
25796: ST_TO_ADDR
// for i = 16 to 25 do
25797: LD_ADDR_VAR 0 4
25801: PUSH
25802: DOUBLE
25803: LD_INT 16
25805: DEC
25806: ST_TO_ADDR
25807: LD_INT 25
25809: PUSH
25810: FOR_TO
25811: IFFALSE 25884
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_VAR 0 3
25822: PUSH
25823: LD_INT 22
25825: PUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL_OW 255
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 91
25842: PUSH
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 6
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 30
25858: PUSH
25859: LD_VAR 0 4
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: PPUSH
25876: CALL_OW 69
25880: ADD
25881: ST_TO_ADDR
25882: GO 25810
25884: POP
25885: POP
// for i = 1 to tmp do
25886: LD_ADDR_VAR 0 4
25890: PUSH
25891: DOUBLE
25892: LD_INT 1
25894: DEC
25895: ST_TO_ADDR
25896: LD_VAR 0 3
25900: PUSH
25901: FOR_TO
25902: IFFALSE 25990
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25904: LD_ADDR_VAR 0 5
25908: PUSH
25909: LD_VAR 0 5
25913: PUSH
25914: LD_VAR 0 3
25918: PUSH
25919: LD_VAR 0 4
25923: ARRAY
25924: PPUSH
25925: CALL_OW 266
25929: PUSH
25930: LD_VAR 0 3
25934: PUSH
25935: LD_VAR 0 4
25939: ARRAY
25940: PPUSH
25941: CALL_OW 250
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_VAR 0 4
25955: ARRAY
25956: PPUSH
25957: CALL_OW 251
25961: PUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_VAR 0 4
25971: ARRAY
25972: PPUSH
25973: CALL_OW 254
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: ADD
25987: ST_TO_ADDR
25988: GO 25901
25990: POP
25991: POP
// result := list ;
25992: LD_ADDR_VAR 0 2
25996: PUSH
25997: LD_VAR 0 5
26001: ST_TO_ADDR
// end ;
26002: LD_VAR 0 2
26006: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26007: LD_INT 0
26009: PPUSH
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
// if not factory then
26016: LD_VAR 0 1
26020: NOT
26021: IFFALSE 26025
// exit ;
26023: GO 26618
// if control = control_apeman then
26025: LD_VAR 0 4
26029: PUSH
26030: LD_INT 5
26032: EQUAL
26033: IFFALSE 26142
// begin tmp := UnitsInside ( factory ) ;
26035: LD_ADDR_VAR 0 8
26039: PUSH
26040: LD_VAR 0 1
26044: PPUSH
26045: CALL_OW 313
26049: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26050: LD_VAR 0 8
26054: PPUSH
26055: LD_INT 25
26057: PUSH
26058: LD_INT 12
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PPUSH
26065: CALL_OW 72
26069: NOT
26070: IFFALSE 26080
// control := control_manual ;
26072: LD_ADDR_VAR 0 4
26076: PUSH
26077: LD_INT 1
26079: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26080: LD_ADDR_VAR 0 8
26084: PUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: CALL 25777 0 1
26094: ST_TO_ADDR
// if tmp then
26095: LD_VAR 0 8
26099: IFFALSE 26142
// begin for i in tmp do
26101: LD_ADDR_VAR 0 7
26105: PUSH
26106: LD_VAR 0 8
26110: PUSH
26111: FOR_IN
26112: IFFALSE 26140
// if i [ 1 ] = b_ext_radio then
26114: LD_VAR 0 7
26118: PUSH
26119: LD_INT 1
26121: ARRAY
26122: PUSH
26123: LD_INT 22
26125: EQUAL
26126: IFFALSE 26138
// begin control := control_remote ;
26128: LD_ADDR_VAR 0 4
26132: PUSH
26133: LD_INT 2
26135: ST_TO_ADDR
// break ;
26136: GO 26140
// end ;
26138: GO 26111
26140: POP
26141: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26142: LD_VAR 0 1
26146: PPUSH
26147: LD_VAR 0 2
26151: PPUSH
26152: LD_VAR 0 3
26156: PPUSH
26157: LD_VAR 0 4
26161: PPUSH
26162: LD_VAR 0 5
26166: PPUSH
26167: CALL_OW 448
26171: IFFALSE 26206
// begin result := [ chassis , engine , control , weapon ] ;
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_VAR 0 2
26182: PUSH
26183: LD_VAR 0 3
26187: PUSH
26188: LD_VAR 0 4
26192: PUSH
26193: LD_VAR 0 5
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: ST_TO_ADDR
// exit ;
26204: GO 26618
// end ; _chassis := AvailableChassisList ( factory ) ;
26206: LD_ADDR_VAR 0 9
26210: PUSH
26211: LD_VAR 0 1
26215: PPUSH
26216: CALL_OW 475
26220: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26221: LD_ADDR_VAR 0 11
26225: PUSH
26226: LD_VAR 0 1
26230: PPUSH
26231: CALL_OW 476
26235: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26236: LD_ADDR_VAR 0 12
26240: PUSH
26241: LD_VAR 0 1
26245: PPUSH
26246: CALL_OW 477
26250: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26251: LD_ADDR_VAR 0 10
26255: PUSH
26256: LD_VAR 0 1
26260: PPUSH
26261: CALL_OW 478
26265: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26266: LD_VAR 0 9
26270: NOT
26271: PUSH
26272: LD_VAR 0 11
26276: NOT
26277: OR
26278: PUSH
26279: LD_VAR 0 12
26283: NOT
26284: OR
26285: PUSH
26286: LD_VAR 0 10
26290: NOT
26291: OR
26292: IFFALSE 26327
// begin result := [ chassis , engine , control , weapon ] ;
26294: LD_ADDR_VAR 0 6
26298: PUSH
26299: LD_VAR 0 2
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_VAR 0 4
26313: PUSH
26314: LD_VAR 0 5
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: ST_TO_ADDR
// exit ;
26325: GO 26618
// end ; if not chassis in _chassis then
26327: LD_VAR 0 2
26331: PUSH
26332: LD_VAR 0 9
26336: IN
26337: NOT
26338: IFFALSE 26364
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_VAR 0 9
26349: PUSH
26350: LD_INT 1
26352: PPUSH
26353: LD_VAR 0 9
26357: PPUSH
26358: CALL_OW 12
26362: ARRAY
26363: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_VAR 0 3
26373: PPUSH
26374: CALL 26623 0 2
26378: NOT
26379: IFFALSE 26438
// repeat engine := _engine [ 1 ] ;
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: LD_VAR 0 11
26390: PUSH
26391: LD_INT 1
26393: ARRAY
26394: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26395: LD_ADDR_VAR 0 11
26399: PUSH
26400: LD_VAR 0 11
26404: PPUSH
26405: LD_INT 1
26407: PPUSH
26408: CALL_OW 3
26412: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26413: LD_VAR 0 2
26417: PPUSH
26418: LD_VAR 0 3
26422: PPUSH
26423: CALL 26623 0 2
26427: PUSH
26428: LD_VAR 0 11
26432: PUSH
26433: EMPTY
26434: EQUAL
26435: OR
26436: IFFALSE 26381
// if not control in _control then
26438: LD_VAR 0 4
26442: PUSH
26443: LD_VAR 0 12
26447: IN
26448: NOT
26449: IFFALSE 26475
// control := _control [ rand ( 1 , _control ) ] ;
26451: LD_ADDR_VAR 0 4
26455: PUSH
26456: LD_VAR 0 12
26460: PUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_VAR 0 12
26468: PPUSH
26469: CALL_OW 12
26473: ARRAY
26474: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26475: LD_VAR 0 2
26479: PPUSH
26480: LD_VAR 0 5
26484: PPUSH
26485: CALL 26843 0 2
26489: NOT
26490: IFFALSE 26549
// repeat weapon := _weapon [ 1 ] ;
26492: LD_ADDR_VAR 0 5
26496: PUSH
26497: LD_VAR 0 10
26501: PUSH
26502: LD_INT 1
26504: ARRAY
26505: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26506: LD_ADDR_VAR 0 10
26510: PUSH
26511: LD_VAR 0 10
26515: PPUSH
26516: LD_INT 1
26518: PPUSH
26519: CALL_OW 3
26523: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26524: LD_VAR 0 2
26528: PPUSH
26529: LD_VAR 0 5
26533: PPUSH
26534: CALL 26843 0 2
26538: PUSH
26539: LD_VAR 0 10
26543: PUSH
26544: EMPTY
26545: EQUAL
26546: OR
26547: IFFALSE 26492
// result := [ ] ;
26549: LD_ADDR_VAR 0 6
26553: PUSH
26554: EMPTY
26555: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26556: LD_VAR 0 1
26560: PPUSH
26561: LD_VAR 0 2
26565: PPUSH
26566: LD_VAR 0 3
26570: PPUSH
26571: LD_VAR 0 4
26575: PPUSH
26576: LD_VAR 0 5
26580: PPUSH
26581: CALL_OW 448
26585: IFFALSE 26618
// result := [ chassis , engine , control , weapon ] ;
26587: LD_ADDR_VAR 0 6
26591: PUSH
26592: LD_VAR 0 2
26596: PUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 4
26606: PUSH
26607: LD_VAR 0 5
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: ST_TO_ADDR
// end ;
26618: LD_VAR 0 6
26622: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26623: LD_INT 0
26625: PPUSH
// if not chassis or not engine then
26626: LD_VAR 0 1
26630: NOT
26631: PUSH
26632: LD_VAR 0 2
26636: NOT
26637: OR
26638: IFFALSE 26642
// exit ;
26640: GO 26838
// case engine of engine_solar :
26642: LD_VAR 0 2
26646: PUSH
26647: LD_INT 2
26649: DOUBLE
26650: EQUAL
26651: IFTRUE 26655
26653: GO 26693
26655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26656: LD_ADDR_VAR 0 3
26660: PUSH
26661: LD_INT 11
26663: PUSH
26664: LD_INT 12
26666: PUSH
26667: LD_INT 13
26669: PUSH
26670: LD_INT 14
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: LD_INT 3
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: ST_TO_ADDR
26691: GO 26822
26693: LD_INT 1
26695: DOUBLE
26696: EQUAL
26697: IFTRUE 26701
26699: GO 26763
26701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26702: LD_ADDR_VAR 0 3
26706: PUSH
26707: LD_INT 11
26709: PUSH
26710: LD_INT 12
26712: PUSH
26713: LD_INT 13
26715: PUSH
26716: LD_INT 14
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 3
26727: PUSH
26728: LD_INT 4
26730: PUSH
26731: LD_INT 5
26733: PUSH
26734: LD_INT 21
26736: PUSH
26737: LD_INT 23
26739: PUSH
26740: LD_INT 22
26742: PUSH
26743: LD_INT 24
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: ST_TO_ADDR
26761: GO 26822
26763: LD_INT 3
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26821
26771: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26772: LD_ADDR_VAR 0 3
26776: PUSH
26777: LD_INT 13
26779: PUSH
26780: LD_INT 14
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 4
26791: PUSH
26792: LD_INT 5
26794: PUSH
26795: LD_INT 21
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_INT 23
26803: PUSH
26804: LD_INT 24
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
26819: GO 26822
26821: POP
// result := ( chassis in result ) ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 1
26831: PUSH
26832: LD_VAR 0 3
26836: IN
26837: ST_TO_ADDR
// end ;
26838: LD_VAR 0 3
26842: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26843: LD_INT 0
26845: PPUSH
// if not chassis or not weapon then
26846: LD_VAR 0 1
26850: NOT
26851: PUSH
26852: LD_VAR 0 2
26856: NOT
26857: OR
26858: IFFALSE 26862
// exit ;
26860: GO 27922
// case weapon of us_machine_gun :
26862: LD_VAR 0 2
26866: PUSH
26867: LD_INT 2
26869: DOUBLE
26870: EQUAL
26871: IFTRUE 26875
26873: GO 26905
26875: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26876: LD_ADDR_VAR 0 3
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: LD_INT 4
26892: PUSH
26893: LD_INT 5
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: ST_TO_ADDR
26903: GO 27906
26905: LD_INT 3
26907: DOUBLE
26908: EQUAL
26909: IFTRUE 26913
26911: GO 26943
26913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26914: LD_ADDR_VAR 0 3
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: LD_INT 3
26927: PUSH
26928: LD_INT 4
26930: PUSH
26931: LD_INT 5
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
26941: GO 27906
26943: LD_INT 11
26945: DOUBLE
26946: EQUAL
26947: IFTRUE 26951
26949: GO 26981
26951: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26952: LD_ADDR_VAR 0 3
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 4
26968: PUSH
26969: LD_INT 5
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: ST_TO_ADDR
26979: GO 27906
26981: LD_INT 4
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27015
26989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: LD_INT 4
27003: PUSH
27004: LD_INT 5
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: ST_TO_ADDR
27013: GO 27906
27015: LD_INT 5
27017: DOUBLE
27018: EQUAL
27019: IFTRUE 27023
27021: GO 27049
27023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27024: LD_ADDR_VAR 0 3
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: LD_INT 4
27037: PUSH
27038: LD_INT 5
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: ST_TO_ADDR
27047: GO 27906
27049: LD_INT 9
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27083
27057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: LD_INT 3
27068: PUSH
27069: LD_INT 4
27071: PUSH
27072: LD_INT 5
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
27081: GO 27906
27083: LD_INT 7
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27117
27091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27092: LD_ADDR_VAR 0 3
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: LD_INT 3
27102: PUSH
27103: LD_INT 4
27105: PUSH
27106: LD_INT 5
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: ST_TO_ADDR
27115: GO 27906
27117: LD_INT 12
27119: DOUBLE
27120: EQUAL
27121: IFTRUE 27125
27123: GO 27151
27125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 3
27136: PUSH
27137: LD_INT 4
27139: PUSH
27140: LD_INT 5
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: ST_TO_ADDR
27149: GO 27906
27151: LD_INT 13
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27185
27159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: LD_INT 4
27173: PUSH
27174: LD_INT 5
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
27183: GO 27906
27185: LD_INT 14
27187: DOUBLE
27188: EQUAL
27189: IFTRUE 27193
27191: GO 27211
27193: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_INT 4
27201: PUSH
27202: LD_INT 5
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: ST_TO_ADDR
27209: GO 27906
27211: LD_INT 6
27213: DOUBLE
27214: EQUAL
27215: IFTRUE 27219
27217: GO 27237
27219: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_INT 4
27227: PUSH
27228: LD_INT 5
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: ST_TO_ADDR
27235: GO 27906
27237: LD_INT 10
27239: DOUBLE
27240: EQUAL
27241: IFTRUE 27245
27243: GO 27263
27245: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27246: LD_ADDR_VAR 0 3
27250: PUSH
27251: LD_INT 4
27253: PUSH
27254: LD_INT 5
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: ST_TO_ADDR
27261: GO 27906
27263: LD_INT 22
27265: DOUBLE
27266: EQUAL
27267: IFTRUE 27271
27269: GO 27297
27271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27272: LD_ADDR_VAR 0 3
27276: PUSH
27277: LD_INT 11
27279: PUSH
27280: LD_INT 12
27282: PUSH
27283: LD_INT 13
27285: PUSH
27286: LD_INT 14
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: ST_TO_ADDR
27295: GO 27906
27297: LD_INT 23
27299: DOUBLE
27300: EQUAL
27301: IFTRUE 27305
27303: GO 27331
27305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27306: LD_ADDR_VAR 0 3
27310: PUSH
27311: LD_INT 11
27313: PUSH
27314: LD_INT 12
27316: PUSH
27317: LD_INT 13
27319: PUSH
27320: LD_INT 14
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: ST_TO_ADDR
27329: GO 27906
27331: LD_INT 24
27333: DOUBLE
27334: EQUAL
27335: IFTRUE 27339
27337: GO 27365
27339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27340: LD_ADDR_VAR 0 3
27344: PUSH
27345: LD_INT 11
27347: PUSH
27348: LD_INT 12
27350: PUSH
27351: LD_INT 13
27353: PUSH
27354: LD_INT 14
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: ST_TO_ADDR
27363: GO 27906
27365: LD_INT 30
27367: DOUBLE
27368: EQUAL
27369: IFTRUE 27373
27371: GO 27399
27373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 11
27381: PUSH
27382: LD_INT 12
27384: PUSH
27385: LD_INT 13
27387: PUSH
27388: LD_INT 14
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
27397: GO 27906
27399: LD_INT 25
27401: DOUBLE
27402: EQUAL
27403: IFTRUE 27407
27405: GO 27425
27407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_INT 13
27415: PUSH
27416: LD_INT 14
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: ST_TO_ADDR
27423: GO 27906
27425: LD_INT 27
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27451
27433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_INT 13
27441: PUSH
27442: LD_INT 14
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: ST_TO_ADDR
27449: GO 27906
27451: LD_INT 92
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27485
27459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_INT 11
27467: PUSH
27468: LD_INT 12
27470: PUSH
27471: LD_INT 13
27473: PUSH
27474: LD_INT 14
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
27483: GO 27906
27485: LD_INT 28
27487: DOUBLE
27488: EQUAL
27489: IFTRUE 27493
27491: GO 27511
27493: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27494: LD_ADDR_VAR 0 3
27498: PUSH
27499: LD_INT 13
27501: PUSH
27502: LD_INT 14
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: ST_TO_ADDR
27509: GO 27906
27511: LD_INT 29
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27519
27517: GO 27537
27519: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: LD_INT 13
27527: PUSH
27528: LD_INT 14
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: ST_TO_ADDR
27535: GO 27906
27537: LD_INT 31
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27563
27545: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27546: LD_ADDR_VAR 0 3
27550: PUSH
27551: LD_INT 13
27553: PUSH
27554: LD_INT 14
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: ST_TO_ADDR
27561: GO 27906
27563: LD_INT 26
27565: DOUBLE
27566: EQUAL
27567: IFTRUE 27571
27569: GO 27589
27571: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: LD_INT 13
27579: PUSH
27580: LD_INT 14
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: ST_TO_ADDR
27587: GO 27906
27589: LD_INT 42
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27597
27595: GO 27623
27597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27598: LD_ADDR_VAR 0 3
27602: PUSH
27603: LD_INT 21
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_INT 23
27611: PUSH
27612: LD_INT 24
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
27621: GO 27906
27623: LD_INT 43
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27657
27631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27632: LD_ADDR_VAR 0 3
27636: PUSH
27637: LD_INT 21
27639: PUSH
27640: LD_INT 22
27642: PUSH
27643: LD_INT 23
27645: PUSH
27646: LD_INT 24
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
27655: GO 27906
27657: LD_INT 44
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27665
27663: GO 27691
27665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 21
27673: PUSH
27674: LD_INT 22
27676: PUSH
27677: LD_INT 23
27679: PUSH
27680: LD_INT 24
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
27689: GO 27906
27691: LD_INT 45
27693: DOUBLE
27694: EQUAL
27695: IFTRUE 27699
27697: GO 27725
27699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 22
27710: PUSH
27711: LD_INT 23
27713: PUSH
27714: LD_INT 24
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
27723: GO 27906
27725: LD_INT 49
27727: DOUBLE
27728: EQUAL
27729: IFTRUE 27733
27731: GO 27759
27733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_INT 21
27741: PUSH
27742: LD_INT 22
27744: PUSH
27745: LD_INT 23
27747: PUSH
27748: LD_INT 24
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: ST_TO_ADDR
27757: GO 27906
27759: LD_INT 51
27761: DOUBLE
27762: EQUAL
27763: IFTRUE 27767
27765: GO 27793
27767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_INT 21
27775: PUSH
27776: LD_INT 22
27778: PUSH
27779: LD_INT 23
27781: PUSH
27782: LD_INT 24
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
27791: GO 27906
27793: LD_INT 52
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 27827
27801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 21
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_INT 23
27815: PUSH
27816: LD_INT 24
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
27825: GO 27906
27827: LD_INT 53
27829: DOUBLE
27830: EQUAL
27831: IFTRUE 27835
27833: GO 27853
27835: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27836: LD_ADDR_VAR 0 3
27840: PUSH
27841: LD_INT 23
27843: PUSH
27844: LD_INT 24
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: ST_TO_ADDR
27851: GO 27906
27853: LD_INT 46
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27861
27859: GO 27879
27861: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27862: LD_ADDR_VAR 0 3
27866: PUSH
27867: LD_INT 23
27869: PUSH
27870: LD_INT 24
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: ST_TO_ADDR
27877: GO 27906
27879: LD_INT 47
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27887
27885: GO 27905
27887: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_INT 23
27895: PUSH
27896: LD_INT 24
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: ST_TO_ADDR
27903: GO 27906
27905: POP
// result := ( chassis in result ) ;
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: LD_VAR 0 1
27915: PUSH
27916: LD_VAR 0 3
27920: IN
27921: ST_TO_ADDR
// end ;
27922: LD_VAR 0 3
27926: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27927: LD_INT 0
27929: PPUSH
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
27934: PPUSH
27935: PPUSH
// result := array ;
27936: LD_ADDR_VAR 0 5
27940: PUSH
27941: LD_VAR 0 1
27945: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27946: LD_VAR 0 1
27950: NOT
27951: PUSH
27952: LD_VAR 0 2
27956: NOT
27957: OR
27958: PUSH
27959: LD_VAR 0 3
27963: NOT
27964: OR
27965: PUSH
27966: LD_VAR 0 2
27970: PUSH
27971: LD_VAR 0 1
27975: GREATER
27976: OR
27977: PUSH
27978: LD_VAR 0 3
27982: PUSH
27983: LD_VAR 0 1
27987: GREATER
27988: OR
27989: IFFALSE 27993
// exit ;
27991: GO 28289
// if direction then
27993: LD_VAR 0 4
27997: IFFALSE 28061
// begin d := 1 ;
27999: LD_ADDR_VAR 0 9
28003: PUSH
28004: LD_INT 1
28006: ST_TO_ADDR
// if i_from > i_to then
28007: LD_VAR 0 2
28011: PUSH
28012: LD_VAR 0 3
28016: GREATER
28017: IFFALSE 28043
// length := ( array - i_from ) + i_to else
28019: LD_ADDR_VAR 0 11
28023: PUSH
28024: LD_VAR 0 1
28028: PUSH
28029: LD_VAR 0 2
28033: MINUS
28034: PUSH
28035: LD_VAR 0 3
28039: PLUS
28040: ST_TO_ADDR
28041: GO 28059
// length := i_to - i_from ;
28043: LD_ADDR_VAR 0 11
28047: PUSH
28048: LD_VAR 0 3
28052: PUSH
28053: LD_VAR 0 2
28057: MINUS
28058: ST_TO_ADDR
// end else
28059: GO 28122
// begin d := - 1 ;
28061: LD_ADDR_VAR 0 9
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: ST_TO_ADDR
// if i_from > i_to then
28070: LD_VAR 0 2
28074: PUSH
28075: LD_VAR 0 3
28079: GREATER
28080: IFFALSE 28100
// length := i_from - i_to else
28082: LD_ADDR_VAR 0 11
28086: PUSH
28087: LD_VAR 0 2
28091: PUSH
28092: LD_VAR 0 3
28096: MINUS
28097: ST_TO_ADDR
28098: GO 28122
// length := ( array - i_to ) + i_from ;
28100: LD_ADDR_VAR 0 11
28104: PUSH
28105: LD_VAR 0 1
28109: PUSH
28110: LD_VAR 0 3
28114: MINUS
28115: PUSH
28116: LD_VAR 0 2
28120: PLUS
28121: ST_TO_ADDR
// end ; if not length then
28122: LD_VAR 0 11
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28289
// tmp := array ;
28131: LD_ADDR_VAR 0 10
28135: PUSH
28136: LD_VAR 0 1
28140: ST_TO_ADDR
// for i = 1 to length do
28141: LD_ADDR_VAR 0 6
28145: PUSH
28146: DOUBLE
28147: LD_INT 1
28149: DEC
28150: ST_TO_ADDR
28151: LD_VAR 0 11
28155: PUSH
28156: FOR_TO
28157: IFFALSE 28277
// begin for j = 1 to array do
28159: LD_ADDR_VAR 0 7
28163: PUSH
28164: DOUBLE
28165: LD_INT 1
28167: DEC
28168: ST_TO_ADDR
28169: LD_VAR 0 1
28173: PUSH
28174: FOR_TO
28175: IFFALSE 28263
// begin k := j + d ;
28177: LD_ADDR_VAR 0 8
28181: PUSH
28182: LD_VAR 0 7
28186: PUSH
28187: LD_VAR 0 9
28191: PLUS
28192: ST_TO_ADDR
// if k > array then
28193: LD_VAR 0 8
28197: PUSH
28198: LD_VAR 0 1
28202: GREATER
28203: IFFALSE 28213
// k := 1 ;
28205: LD_ADDR_VAR 0 8
28209: PUSH
28210: LD_INT 1
28212: ST_TO_ADDR
// if not k then
28213: LD_VAR 0 8
28217: NOT
28218: IFFALSE 28230
// k := array ;
28220: LD_ADDR_VAR 0 8
28224: PUSH
28225: LD_VAR 0 1
28229: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28230: LD_ADDR_VAR 0 10
28234: PUSH
28235: LD_VAR 0 10
28239: PPUSH
28240: LD_VAR 0 8
28244: PPUSH
28245: LD_VAR 0 1
28249: PUSH
28250: LD_VAR 0 7
28254: ARRAY
28255: PPUSH
28256: CALL_OW 1
28260: ST_TO_ADDR
// end ;
28261: GO 28174
28263: POP
28264: POP
// array := tmp ;
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: LD_VAR 0 10
28274: ST_TO_ADDR
// end ;
28275: GO 28156
28277: POP
28278: POP
// result := array ;
28279: LD_ADDR_VAR 0 5
28283: PUSH
28284: LD_VAR 0 1
28288: ST_TO_ADDR
// end ;
28289: LD_VAR 0 5
28293: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28294: LD_INT 0
28296: PPUSH
28297: PPUSH
// result := 0 ;
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_INT 0
28305: ST_TO_ADDR
// if not array or not value in array then
28306: LD_VAR 0 1
28310: NOT
28311: PUSH
28312: LD_VAR 0 2
28316: PUSH
28317: LD_VAR 0 1
28321: IN
28322: NOT
28323: OR
28324: IFFALSE 28328
// exit ;
28326: GO 28382
// for i = 1 to array do
28328: LD_ADDR_VAR 0 4
28332: PUSH
28333: DOUBLE
28334: LD_INT 1
28336: DEC
28337: ST_TO_ADDR
28338: LD_VAR 0 1
28342: PUSH
28343: FOR_TO
28344: IFFALSE 28380
// if value = array [ i ] then
28346: LD_VAR 0 2
28350: PUSH
28351: LD_VAR 0 1
28355: PUSH
28356: LD_VAR 0 4
28360: ARRAY
28361: EQUAL
28362: IFFALSE 28378
// begin result := i ;
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_VAR 0 4
28373: ST_TO_ADDR
// exit ;
28374: POP
28375: POP
28376: GO 28382
// end ;
28378: GO 28343
28380: POP
28381: POP
// end ;
28382: LD_VAR 0 3
28386: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28387: LD_INT 0
28389: PPUSH
// vc_chassis := chassis ;
28390: LD_ADDR_OWVAR 37
28394: PUSH
28395: LD_VAR 0 1
28399: ST_TO_ADDR
// vc_engine := engine ;
28400: LD_ADDR_OWVAR 39
28404: PUSH
28405: LD_VAR 0 2
28409: ST_TO_ADDR
// vc_control := control ;
28410: LD_ADDR_OWVAR 38
28414: PUSH
28415: LD_VAR 0 3
28419: ST_TO_ADDR
// vc_weapon := weapon ;
28420: LD_ADDR_OWVAR 40
28424: PUSH
28425: LD_VAR 0 4
28429: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28430: LD_ADDR_OWVAR 41
28434: PUSH
28435: LD_VAR 0 5
28439: ST_TO_ADDR
// end ;
28440: LD_VAR 0 6
28444: RET
// export function WantPlant ( unit ) ; var task ; begin
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
// result := false ;
28449: LD_ADDR_VAR 0 2
28453: PUSH
28454: LD_INT 0
28456: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 437
28471: ST_TO_ADDR
// if task then
28472: LD_VAR 0 3
28476: IFFALSE 28504
// if task [ 1 ] [ 1 ] = p then
28478: LD_VAR 0 3
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PUSH
28491: LD_STRING p
28493: EQUAL
28494: IFFALSE 28504
// result := true ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_INT 1
28503: ST_TO_ADDR
// end ;
28504: LD_VAR 0 2
28508: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
// if pos < 1 then
28515: LD_VAR 0 2
28519: PUSH
28520: LD_INT 1
28522: LESS
28523: IFFALSE 28527
// exit ;
28525: GO 28830
// if pos = 1 then
28527: LD_VAR 0 2
28531: PUSH
28532: LD_INT 1
28534: EQUAL
28535: IFFALSE 28568
// result := Replace ( arr , pos [ 1 ] , value ) else
28537: LD_ADDR_VAR 0 4
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: LD_VAR 0 2
28551: PUSH
28552: LD_INT 1
28554: ARRAY
28555: PPUSH
28556: LD_VAR 0 3
28560: PPUSH
28561: CALL_OW 1
28565: ST_TO_ADDR
28566: GO 28830
// begin tmp := arr ;
28568: LD_ADDR_VAR 0 6
28572: PUSH
28573: LD_VAR 0 1
28577: ST_TO_ADDR
// s_arr := [ tmp ] ;
28578: LD_ADDR_VAR 0 7
28582: PUSH
28583: LD_VAR 0 6
28587: PUSH
28588: EMPTY
28589: LIST
28590: ST_TO_ADDR
// for i = 1 to pos - 1 do
28591: LD_ADDR_VAR 0 5
28595: PUSH
28596: DOUBLE
28597: LD_INT 1
28599: DEC
28600: ST_TO_ADDR
28601: LD_VAR 0 2
28605: PUSH
28606: LD_INT 1
28608: MINUS
28609: PUSH
28610: FOR_TO
28611: IFFALSE 28656
// begin tmp := tmp [ pos [ i ] ] ;
28613: LD_ADDR_VAR 0 6
28617: PUSH
28618: LD_VAR 0 6
28622: PUSH
28623: LD_VAR 0 2
28627: PUSH
28628: LD_VAR 0 5
28632: ARRAY
28633: ARRAY
28634: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28635: LD_ADDR_VAR 0 7
28639: PUSH
28640: LD_VAR 0 7
28644: PUSH
28645: LD_VAR 0 6
28649: PUSH
28650: EMPTY
28651: LIST
28652: ADD
28653: ST_TO_ADDR
// end ;
28654: GO 28610
28656: POP
28657: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28658: LD_ADDR_VAR 0 6
28662: PUSH
28663: LD_VAR 0 6
28667: PPUSH
28668: LD_VAR 0 2
28672: PUSH
28673: LD_VAR 0 2
28677: ARRAY
28678: PPUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: CALL_OW 1
28688: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28689: LD_ADDR_VAR 0 7
28693: PUSH
28694: LD_VAR 0 7
28698: PPUSH
28699: LD_VAR 0 7
28703: PPUSH
28704: LD_VAR 0 6
28708: PPUSH
28709: CALL_OW 1
28713: ST_TO_ADDR
// for i = s_arr downto 2 do
28714: LD_ADDR_VAR 0 5
28718: PUSH
28719: DOUBLE
28720: LD_VAR 0 7
28724: INC
28725: ST_TO_ADDR
28726: LD_INT 2
28728: PUSH
28729: FOR_DOWNTO
28730: IFFALSE 28814
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28732: LD_ADDR_VAR 0 6
28736: PUSH
28737: LD_VAR 0 7
28741: PUSH
28742: LD_VAR 0 5
28746: PUSH
28747: LD_INT 1
28749: MINUS
28750: ARRAY
28751: PPUSH
28752: LD_VAR 0 2
28756: PUSH
28757: LD_VAR 0 5
28761: PUSH
28762: LD_INT 1
28764: MINUS
28765: ARRAY
28766: PPUSH
28767: LD_VAR 0 7
28771: PUSH
28772: LD_VAR 0 5
28776: ARRAY
28777: PPUSH
28778: CALL_OW 1
28782: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28783: LD_ADDR_VAR 0 7
28787: PUSH
28788: LD_VAR 0 7
28792: PPUSH
28793: LD_VAR 0 5
28797: PUSH
28798: LD_INT 1
28800: MINUS
28801: PPUSH
28802: LD_VAR 0 6
28806: PPUSH
28807: CALL_OW 1
28811: ST_TO_ADDR
// end ;
28812: GO 28729
28814: POP
28815: POP
// result := s_arr [ 1 ] ;
28816: LD_ADDR_VAR 0 4
28820: PUSH
28821: LD_VAR 0 7
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: ST_TO_ADDR
// end ; end ;
28830: LD_VAR 0 4
28834: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
// if not list then
28839: LD_VAR 0 1
28843: NOT
28844: IFFALSE 28848
// exit ;
28846: GO 28939
// i := list [ pos1 ] ;
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_VAR 0 1
28857: PUSH
28858: LD_VAR 0 2
28862: ARRAY
28863: ST_TO_ADDR
// if not i then
28864: LD_VAR 0 5
28868: NOT
28869: IFFALSE 28873
// exit ;
28871: GO 28939
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28873: LD_ADDR_VAR 0 1
28877: PUSH
28878: LD_VAR 0 1
28882: PPUSH
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 1
28892: PUSH
28893: LD_VAR 0 3
28897: ARRAY
28898: PPUSH
28899: CALL_OW 1
28903: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28904: LD_ADDR_VAR 0 1
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: LD_VAR 0 3
28918: PPUSH
28919: LD_VAR 0 5
28923: PPUSH
28924: CALL_OW 1
28928: ST_TO_ADDR
// result := list ;
28929: LD_ADDR_VAR 0 4
28933: PUSH
28934: LD_VAR 0 1
28938: ST_TO_ADDR
// end ;
28939: LD_VAR 0 4
28943: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28944: LD_INT 0
28946: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_VAR 0 1
28956: PPUSH
28957: CALL_OW 250
28961: PPUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: CALL_OW 251
28971: PPUSH
28972: LD_VAR 0 2
28976: PPUSH
28977: LD_VAR 0 3
28981: PPUSH
28982: LD_VAR 0 4
28986: PPUSH
28987: CALL 28997 0 5
28991: ST_TO_ADDR
// end ;
28992: LD_VAR 0 5
28996: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28997: LD_INT 0
28999: PPUSH
29000: PPUSH
29001: PPUSH
29002: PPUSH
// if not list then
29003: LD_VAR 0 3
29007: NOT
29008: IFFALSE 29012
// exit ;
29010: GO 29400
// result := [ ] ;
29012: LD_ADDR_VAR 0 6
29016: PUSH
29017: EMPTY
29018: ST_TO_ADDR
// for i in list do
29019: LD_ADDR_VAR 0 7
29023: PUSH
29024: LD_VAR 0 3
29028: PUSH
29029: FOR_IN
29030: IFFALSE 29232
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_VAR 0 7
29041: PPUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: LD_VAR 0 2
29051: PPUSH
29052: CALL_OW 297
29056: ST_TO_ADDR
// if not result then
29057: LD_VAR 0 6
29061: NOT
29062: IFFALSE 29088
// result := [ [ i , tmp ] ] else
29064: LD_ADDR_VAR 0 6
29068: PUSH
29069: LD_VAR 0 7
29073: PUSH
29074: LD_VAR 0 9
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: ST_TO_ADDR
29086: GO 29230
// begin if result [ result ] [ 2 ] < tmp then
29088: LD_VAR 0 6
29092: PUSH
29093: LD_VAR 0 6
29097: ARRAY
29098: PUSH
29099: LD_INT 2
29101: ARRAY
29102: PUSH
29103: LD_VAR 0 9
29107: LESS
29108: IFFALSE 29150
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29110: LD_ADDR_VAR 0 6
29114: PUSH
29115: LD_VAR 0 6
29119: PPUSH
29120: LD_VAR 0 6
29124: PUSH
29125: LD_INT 1
29127: PLUS
29128: PPUSH
29129: LD_VAR 0 7
29133: PUSH
29134: LD_VAR 0 9
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 2
29147: ST_TO_ADDR
29148: GO 29230
// for j = 1 to result do
29150: LD_ADDR_VAR 0 8
29154: PUSH
29155: DOUBLE
29156: LD_INT 1
29158: DEC
29159: ST_TO_ADDR
29160: LD_VAR 0 6
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29228
// begin if tmp < result [ j ] [ 2 ] then
29168: LD_VAR 0 9
29172: PUSH
29173: LD_VAR 0 6
29177: PUSH
29178: LD_VAR 0 8
29182: ARRAY
29183: PUSH
29184: LD_INT 2
29186: ARRAY
29187: LESS
29188: IFFALSE 29226
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29190: LD_ADDR_VAR 0 6
29194: PUSH
29195: LD_VAR 0 6
29199: PPUSH
29200: LD_VAR 0 8
29204: PPUSH
29205: LD_VAR 0 7
29209: PUSH
29210: LD_VAR 0 9
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PPUSH
29219: CALL_OW 2
29223: ST_TO_ADDR
// break ;
29224: GO 29228
// end ; end ;
29226: GO 29165
29228: POP
29229: POP
// end ; end ;
29230: GO 29029
29232: POP
29233: POP
// if result and not asc then
29234: LD_VAR 0 6
29238: PUSH
29239: LD_VAR 0 4
29243: NOT
29244: AND
29245: IFFALSE 29320
// begin tmp := result ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_VAR 0 6
29256: ST_TO_ADDR
// for i = tmp downto 1 do
29257: LD_ADDR_VAR 0 7
29261: PUSH
29262: DOUBLE
29263: LD_VAR 0 9
29267: INC
29268: ST_TO_ADDR
29269: LD_INT 1
29271: PUSH
29272: FOR_DOWNTO
29273: IFFALSE 29318
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29275: LD_ADDR_VAR 0 6
29279: PUSH
29280: LD_VAR 0 6
29284: PPUSH
29285: LD_VAR 0 9
29289: PUSH
29290: LD_VAR 0 7
29294: MINUS
29295: PUSH
29296: LD_INT 1
29298: PLUS
29299: PPUSH
29300: LD_VAR 0 9
29304: PUSH
29305: LD_VAR 0 7
29309: ARRAY
29310: PPUSH
29311: CALL_OW 1
29315: ST_TO_ADDR
29316: GO 29272
29318: POP
29319: POP
// end ; tmp := [ ] ;
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: EMPTY
29326: ST_TO_ADDR
// if mode then
29327: LD_VAR 0 5
29331: IFFALSE 29400
// begin for i = 1 to result do
29333: LD_ADDR_VAR 0 7
29337: PUSH
29338: DOUBLE
29339: LD_INT 1
29341: DEC
29342: ST_TO_ADDR
29343: LD_VAR 0 6
29347: PUSH
29348: FOR_TO
29349: IFFALSE 29388
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29351: LD_ADDR_VAR 0 9
29355: PUSH
29356: LD_VAR 0 9
29360: PPUSH
29361: LD_VAR 0 7
29365: PPUSH
29366: LD_VAR 0 6
29370: PUSH
29371: LD_VAR 0 7
29375: ARRAY
29376: PUSH
29377: LD_INT 1
29379: ARRAY
29380: PPUSH
29381: CALL_OW 1
29385: ST_TO_ADDR
29386: GO 29348
29388: POP
29389: POP
// result := tmp ;
29390: LD_ADDR_VAR 0 6
29394: PUSH
29395: LD_VAR 0 9
29399: ST_TO_ADDR
// end ; end ;
29400: LD_VAR 0 6
29404: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// if not x or not y then
29435: LD_VAR 0 2
29439: NOT
29440: PUSH
29441: LD_VAR 0 3
29445: NOT
29446: OR
29447: IFFALSE 29451
// exit ;
29449: GO 31101
// if not range then
29451: LD_VAR 0 4
29455: NOT
29456: IFFALSE 29466
// range := 10 ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_INT 10
29465: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29466: LD_ADDR_VAR 0 8
29470: PUSH
29471: LD_INT 81
29473: PUSH
29474: LD_VAR 0 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 92
29485: PUSH
29486: LD_VAR 0 2
29490: PUSH
29491: LD_VAR 0 3
29495: PUSH
29496: LD_VAR 0 4
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 21
29512: PUSH
29513: LD_INT 3
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: ST_TO_ADDR
// if not tmp then
29534: LD_VAR 0 8
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 31101
// for i in tmp do
29543: LD_ADDR_VAR 0 6
29547: PUSH
29548: LD_VAR 0 8
29552: PUSH
29553: FOR_IN
29554: IFFALSE 31076
// begin points := [ 0 , 0 , 0 ] ;
29556: LD_ADDR_VAR 0 9
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// bpoints := 1 ;
29575: LD_ADDR_VAR 0 10
29579: PUSH
29580: LD_INT 1
29582: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29583: LD_VAR 0 6
29587: PPUSH
29588: CALL_OW 247
29592: PUSH
29593: LD_INT 1
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 30179
29601: POP
// begin if GetClass ( i ) = 1 then
29602: LD_VAR 0 6
29606: PPUSH
29607: CALL_OW 257
29611: PUSH
29612: LD_INT 1
29614: EQUAL
29615: IFFALSE 29636
// points := [ 10 , 5 , 3 ] ;
29617: LD_ADDR_VAR 0 9
29621: PUSH
29622: LD_INT 10
29624: PUSH
29625: LD_INT 5
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29636: LD_VAR 0 6
29640: PPUSH
29641: CALL_OW 257
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: IN
29660: IFFALSE 29681
// points := [ 3 , 2 , 1 ] ;
29662: LD_ADDR_VAR 0 9
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: LIST
29680: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29681: LD_VAR 0 6
29685: PPUSH
29686: CALL_OW 257
29690: PUSH
29691: LD_INT 5
29693: EQUAL
29694: IFFALSE 29715
// points := [ 130 , 5 , 2 ] ;
29696: LD_ADDR_VAR 0 9
29700: PUSH
29701: LD_INT 130
29703: PUSH
29704: LD_INT 5
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29715: LD_VAR 0 6
29719: PPUSH
29720: CALL_OW 257
29724: PUSH
29725: LD_INT 8
29727: EQUAL
29728: IFFALSE 29749
// points := [ 35 , 35 , 30 ] ;
29730: LD_ADDR_VAR 0 9
29734: PUSH
29735: LD_INT 35
29737: PUSH
29738: LD_INT 35
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29749: LD_VAR 0 6
29753: PPUSH
29754: CALL_OW 257
29758: PUSH
29759: LD_INT 9
29761: EQUAL
29762: IFFALSE 29783
// points := [ 20 , 55 , 40 ] ;
29764: LD_ADDR_VAR 0 9
29768: PUSH
29769: LD_INT 20
29771: PUSH
29772: LD_INT 55
29774: PUSH
29775: LD_INT 40
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29783: LD_VAR 0 6
29787: PPUSH
29788: CALL_OW 257
29792: PUSH
29793: LD_INT 12
29795: PUSH
29796: LD_INT 16
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: IN
29803: IFFALSE 29824
// points := [ 5 , 3 , 2 ] ;
29805: LD_ADDR_VAR 0 9
29809: PUSH
29810: LD_INT 5
29812: PUSH
29813: LD_INT 3
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29824: LD_VAR 0 6
29828: PPUSH
29829: CALL_OW 257
29833: PUSH
29834: LD_INT 17
29836: EQUAL
29837: IFFALSE 29858
// points := [ 100 , 50 , 75 ] ;
29839: LD_ADDR_VAR 0 9
29843: PUSH
29844: LD_INT 100
29846: PUSH
29847: LD_INT 50
29849: PUSH
29850: LD_INT 75
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: LIST
29857: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29858: LD_VAR 0 6
29862: PPUSH
29863: CALL_OW 257
29867: PUSH
29868: LD_INT 15
29870: EQUAL
29871: IFFALSE 29892
// points := [ 10 , 5 , 3 ] ;
29873: LD_ADDR_VAR 0 9
29877: PUSH
29878: LD_INT 10
29880: PUSH
29881: LD_INT 5
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29892: LD_VAR 0 6
29896: PPUSH
29897: CALL_OW 257
29901: PUSH
29902: LD_INT 14
29904: EQUAL
29905: IFFALSE 29926
// points := [ 10 , 0 , 0 ] ;
29907: LD_ADDR_VAR 0 9
29911: PUSH
29912: LD_INT 10
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29926: LD_VAR 0 6
29930: PPUSH
29931: CALL_OW 257
29935: PUSH
29936: LD_INT 11
29938: EQUAL
29939: IFFALSE 29960
// points := [ 30 , 10 , 5 ] ;
29941: LD_ADDR_VAR 0 9
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 10
29951: PUSH
29952: LD_INT 5
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29960: LD_VAR 0 1
29964: PPUSH
29965: LD_INT 5
29967: PPUSH
29968: CALL_OW 321
29972: PUSH
29973: LD_INT 2
29975: EQUAL
29976: IFFALSE 29993
// bpoints := bpoints * 1.8 ;
29978: LD_ADDR_VAR 0 10
29982: PUSH
29983: LD_VAR 0 10
29987: PUSH
29988: LD_REAL  1.80000000000000E+0000
29991: MUL
29992: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29993: LD_VAR 0 6
29997: PPUSH
29998: CALL_OW 257
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: LD_INT 4
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: IN
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_INT 51
30029: PPUSH
30030: CALL_OW 321
30034: PUSH
30035: LD_INT 2
30037: EQUAL
30038: AND
30039: IFFALSE 30056
// bpoints := bpoints * 1.2 ;
30041: LD_ADDR_VAR 0 10
30045: PUSH
30046: LD_VAR 0 10
30050: PUSH
30051: LD_REAL  1.20000000000000E+0000
30054: MUL
30055: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30056: LD_VAR 0 6
30060: PPUSH
30061: CALL_OW 257
30065: PUSH
30066: LD_INT 5
30068: PUSH
30069: LD_INT 7
30071: PUSH
30072: LD_INT 9
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: IN
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: LD_INT 52
30088: PPUSH
30089: CALL_OW 321
30093: PUSH
30094: LD_INT 2
30096: EQUAL
30097: AND
30098: IFFALSE 30115
// bpoints := bpoints * 1.5 ;
30100: LD_ADDR_VAR 0 10
30104: PUSH
30105: LD_VAR 0 10
30109: PUSH
30110: LD_REAL  1.50000000000000E+0000
30113: MUL
30114: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30115: LD_VAR 0 1
30119: PPUSH
30120: LD_INT 66
30122: PPUSH
30123: CALL_OW 321
30127: PUSH
30128: LD_INT 2
30130: EQUAL
30131: IFFALSE 30148
// bpoints := bpoints * 1.1 ;
30133: LD_ADDR_VAR 0 10
30137: PUSH
30138: LD_VAR 0 10
30142: PUSH
30143: LD_REAL  1.10000000000000E+0000
30146: MUL
30147: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30148: LD_ADDR_VAR 0 10
30152: PUSH
30153: LD_VAR 0 10
30157: PUSH
30158: LD_VAR 0 6
30162: PPUSH
30163: LD_INT 1
30165: PPUSH
30166: CALL_OW 259
30170: PUSH
30171: LD_REAL  1.15000000000000E+0000
30174: MUL
30175: MUL
30176: ST_TO_ADDR
// end ; unit_vehicle :
30177: GO 31005
30179: LD_INT 2
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30993
30187: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30188: LD_VAR 0 6
30192: PPUSH
30193: CALL_OW 264
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 42
30203: PUSH
30204: LD_INT 24
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: IN
30212: IFFALSE 30233
// points := [ 25 , 5 , 3 ] ;
30214: LD_ADDR_VAR 0 9
30218: PUSH
30219: LD_INT 25
30221: PUSH
30222: LD_INT 5
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30233: LD_VAR 0 6
30237: PPUSH
30238: CALL_OW 264
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: LD_INT 43
30248: PUSH
30249: LD_INT 25
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: IN
30257: IFFALSE 30278
// points := [ 40 , 15 , 5 ] ;
30259: LD_ADDR_VAR 0 9
30263: PUSH
30264: LD_INT 40
30266: PUSH
30267: LD_INT 15
30269: PUSH
30270: LD_INT 5
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30278: LD_VAR 0 6
30282: PPUSH
30283: CALL_OW 264
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: LD_INT 23
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: IN
30298: IFFALSE 30319
// points := [ 7 , 25 , 8 ] ;
30300: LD_ADDR_VAR 0 9
30304: PUSH
30305: LD_INT 7
30307: PUSH
30308: LD_INT 25
30310: PUSH
30311: LD_INT 8
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30319: LD_VAR 0 6
30323: PPUSH
30324: CALL_OW 264
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: LD_INT 27
30334: PUSH
30335: LD_INT 44
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: IN
30343: IFFALSE 30364
// points := [ 14 , 50 , 16 ] ;
30345: LD_ADDR_VAR 0 9
30349: PUSH
30350: LD_INT 14
30352: PUSH
30353: LD_INT 50
30355: PUSH
30356: LD_INT 16
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30364: LD_VAR 0 6
30368: PPUSH
30369: CALL_OW 264
30373: PUSH
30374: LD_INT 6
30376: PUSH
30377: LD_INT 46
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: IN
30384: IFFALSE 30405
// points := [ 32 , 120 , 70 ] ;
30386: LD_ADDR_VAR 0 9
30390: PUSH
30391: LD_INT 32
30393: PUSH
30394: LD_INT 120
30396: PUSH
30397: LD_INT 70
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30405: LD_VAR 0 6
30409: PPUSH
30410: CALL_OW 264
30414: PUSH
30415: LD_INT 7
30417: PUSH
30418: LD_INT 28
30420: PUSH
30421: LD_INT 45
30423: PUSH
30424: LD_INT 92
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: IN
30433: IFFALSE 30454
// points := [ 35 , 20 , 45 ] ;
30435: LD_ADDR_VAR 0 9
30439: PUSH
30440: LD_INT 35
30442: PUSH
30443: LD_INT 20
30445: PUSH
30446: LD_INT 45
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30454: LD_VAR 0 6
30458: PPUSH
30459: CALL_OW 264
30463: PUSH
30464: LD_INT 47
30466: PUSH
30467: EMPTY
30468: LIST
30469: IN
30470: IFFALSE 30491
// points := [ 67 , 45 , 75 ] ;
30472: LD_ADDR_VAR 0 9
30476: PUSH
30477: LD_INT 67
30479: PUSH
30480: LD_INT 45
30482: PUSH
30483: LD_INT 75
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30491: LD_VAR 0 6
30495: PPUSH
30496: CALL_OW 264
30500: PUSH
30501: LD_INT 26
30503: PUSH
30504: EMPTY
30505: LIST
30506: IN
30507: IFFALSE 30528
// points := [ 120 , 30 , 80 ] ;
30509: LD_ADDR_VAR 0 9
30513: PUSH
30514: LD_INT 120
30516: PUSH
30517: LD_INT 30
30519: PUSH
30520: LD_INT 80
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30528: LD_VAR 0 6
30532: PPUSH
30533: CALL_OW 264
30537: PUSH
30538: LD_INT 22
30540: PUSH
30541: EMPTY
30542: LIST
30543: IN
30544: IFFALSE 30565
// points := [ 40 , 1 , 1 ] ;
30546: LD_ADDR_VAR 0 9
30550: PUSH
30551: LD_INT 40
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30565: LD_VAR 0 6
30569: PPUSH
30570: CALL_OW 264
30574: PUSH
30575: LD_INT 29
30577: PUSH
30578: EMPTY
30579: LIST
30580: IN
30581: IFFALSE 30602
// points := [ 70 , 200 , 400 ] ;
30583: LD_ADDR_VAR 0 9
30587: PUSH
30588: LD_INT 70
30590: PUSH
30591: LD_INT 200
30593: PUSH
30594: LD_INT 400
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: LIST
30601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30602: LD_VAR 0 6
30606: PPUSH
30607: CALL_OW 264
30611: PUSH
30612: LD_INT 14
30614: PUSH
30615: LD_INT 53
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: IN
30622: IFFALSE 30643
// points := [ 40 , 10 , 20 ] ;
30624: LD_ADDR_VAR 0 9
30628: PUSH
30629: LD_INT 40
30631: PUSH
30632: LD_INT 10
30634: PUSH
30635: LD_INT 20
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30643: LD_VAR 0 6
30647: PPUSH
30648: CALL_OW 264
30652: PUSH
30653: LD_INT 9
30655: PUSH
30656: EMPTY
30657: LIST
30658: IN
30659: IFFALSE 30680
// points := [ 5 , 70 , 20 ] ;
30661: LD_ADDR_VAR 0 9
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: LD_INT 70
30671: PUSH
30672: LD_INT 20
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30680: LD_VAR 0 6
30684: PPUSH
30685: CALL_OW 264
30689: PUSH
30690: LD_INT 10
30692: PUSH
30693: EMPTY
30694: LIST
30695: IN
30696: IFFALSE 30717
// points := [ 35 , 110 , 70 ] ;
30698: LD_ADDR_VAR 0 9
30702: PUSH
30703: LD_INT 35
30705: PUSH
30706: LD_INT 110
30708: PUSH
30709: LD_INT 70
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30717: LD_VAR 0 6
30721: PPUSH
30722: CALL_OW 265
30726: PUSH
30727: LD_INT 25
30729: EQUAL
30730: IFFALSE 30751
// points := [ 80 , 65 , 100 ] ;
30732: LD_ADDR_VAR 0 9
30736: PUSH
30737: LD_INT 80
30739: PUSH
30740: LD_INT 65
30742: PUSH
30743: LD_INT 100
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30751: LD_VAR 0 6
30755: PPUSH
30756: CALL_OW 263
30760: PUSH
30761: LD_INT 1
30763: EQUAL
30764: IFFALSE 30799
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30766: LD_ADDR_VAR 0 10
30770: PUSH
30771: LD_VAR 0 10
30775: PUSH
30776: LD_VAR 0 6
30780: PPUSH
30781: CALL_OW 311
30785: PPUSH
30786: LD_INT 3
30788: PPUSH
30789: CALL_OW 259
30793: PUSH
30794: LD_INT 4
30796: MUL
30797: MUL
30798: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30799: LD_VAR 0 6
30803: PPUSH
30804: CALL_OW 263
30808: PUSH
30809: LD_INT 2
30811: EQUAL
30812: IFFALSE 30863
// begin j := IsControledBy ( i ) ;
30814: LD_ADDR_VAR 0 7
30818: PUSH
30819: LD_VAR 0 6
30823: PPUSH
30824: CALL_OW 312
30828: ST_TO_ADDR
// if j then
30829: LD_VAR 0 7
30833: IFFALSE 30863
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30835: LD_ADDR_VAR 0 10
30839: PUSH
30840: LD_VAR 0 10
30844: PUSH
30845: LD_VAR 0 7
30849: PPUSH
30850: LD_INT 3
30852: PPUSH
30853: CALL_OW 259
30857: PUSH
30858: LD_INT 3
30860: MUL
30861: MUL
30862: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30863: LD_VAR 0 6
30867: PPUSH
30868: CALL_OW 264
30872: PUSH
30873: LD_INT 5
30875: PUSH
30876: LD_INT 6
30878: PUSH
30879: LD_INT 46
30881: PUSH
30882: LD_INT 44
30884: PUSH
30885: LD_INT 47
30887: PUSH
30888: LD_INT 45
30890: PUSH
30891: LD_INT 28
30893: PUSH
30894: LD_INT 7
30896: PUSH
30897: LD_INT 27
30899: PUSH
30900: LD_INT 29
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: IN
30915: PUSH
30916: LD_VAR 0 1
30920: PPUSH
30921: LD_INT 52
30923: PPUSH
30924: CALL_OW 321
30928: PUSH
30929: LD_INT 2
30931: EQUAL
30932: AND
30933: IFFALSE 30950
// bpoints := bpoints * 1.2 ;
30935: LD_ADDR_VAR 0 10
30939: PUSH
30940: LD_VAR 0 10
30944: PUSH
30945: LD_REAL  1.20000000000000E+0000
30948: MUL
30949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30950: LD_VAR 0 6
30954: PPUSH
30955: CALL_OW 264
30959: PUSH
30960: LD_INT 6
30962: PUSH
30963: LD_INT 46
30965: PUSH
30966: LD_INT 47
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: IN
30974: IFFALSE 30991
// bpoints := bpoints * 1.2 ;
30976: LD_ADDR_VAR 0 10
30980: PUSH
30981: LD_VAR 0 10
30985: PUSH
30986: LD_REAL  1.20000000000000E+0000
30989: MUL
30990: ST_TO_ADDR
// end ; unit_building :
30991: GO 31005
30993: LD_INT 3
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31001
30999: GO 31004
31001: POP
// ; end ;
31002: GO 31005
31004: POP
// for j = 1 to 3 do
31005: LD_ADDR_VAR 0 7
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_INT 3
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31072
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31021: LD_ADDR_VAR 0 5
31025: PUSH
31026: LD_VAR 0 5
31030: PPUSH
31031: LD_VAR 0 7
31035: PPUSH
31036: LD_VAR 0 5
31040: PUSH
31041: LD_VAR 0 7
31045: ARRAY
31046: PUSH
31047: LD_VAR 0 9
31051: PUSH
31052: LD_VAR 0 7
31056: ARRAY
31057: PUSH
31058: LD_VAR 0 10
31062: MUL
31063: PLUS
31064: PPUSH
31065: CALL_OW 1
31069: ST_TO_ADDR
31070: GO 31018
31072: POP
31073: POP
// end ;
31074: GO 29553
31076: POP
31077: POP
// result := Replace ( result , 4 , tmp ) ;
31078: LD_ADDR_VAR 0 5
31082: PUSH
31083: LD_VAR 0 5
31087: PPUSH
31088: LD_INT 4
31090: PPUSH
31091: LD_VAR 0 8
31095: PPUSH
31096: CALL_OW 1
31100: ST_TO_ADDR
// end ;
31101: LD_VAR 0 5
31105: RET
// export function DangerAtRange ( unit , range ) ; begin
31106: LD_INT 0
31108: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31109: LD_ADDR_VAR 0 3
31113: PUSH
31114: LD_VAR 0 1
31118: PPUSH
31119: CALL_OW 255
31123: PPUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 250
31133: PPUSH
31134: LD_VAR 0 1
31138: PPUSH
31139: CALL_OW 251
31143: PPUSH
31144: LD_VAR 0 2
31148: PPUSH
31149: CALL 29405 0 4
31153: ST_TO_ADDR
// end ;
31154: LD_VAR 0 3
31158: RET
// export function DangerInArea ( side , area ) ; begin
31159: LD_INT 0
31161: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: LD_VAR 0 2
31171: PPUSH
31172: LD_INT 81
31174: PUSH
31175: LD_VAR 0 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PPUSH
31184: CALL_OW 70
31188: ST_TO_ADDR
// end ;
31189: LD_VAR 0 3
31193: RET
// export function IsExtension ( b ) ; begin
31194: LD_INT 0
31196: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31197: LD_ADDR_VAR 0 2
31201: PUSH
31202: LD_VAR 0 1
31206: PUSH
31207: LD_INT 23
31209: PUSH
31210: LD_INT 20
31212: PUSH
31213: LD_INT 22
31215: PUSH
31216: LD_INT 17
31218: PUSH
31219: LD_INT 24
31221: PUSH
31222: LD_INT 21
31224: PUSH
31225: LD_INT 19
31227: PUSH
31228: LD_INT 16
31230: PUSH
31231: LD_INT 25
31233: PUSH
31234: LD_INT 18
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: IN
31249: ST_TO_ADDR
// end ;
31250: LD_VAR 0 2
31254: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31255: LD_INT 0
31257: PPUSH
31258: PPUSH
31259: PPUSH
// result := [ ] ;
31260: LD_ADDR_VAR 0 4
31264: PUSH
31265: EMPTY
31266: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_INT 21
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PPUSH
31287: CALL_OW 70
31291: ST_TO_ADDR
// if not tmp then
31292: LD_VAR 0 5
31296: NOT
31297: IFFALSE 31301
// exit ;
31299: GO 31365
// if checkLink then
31301: LD_VAR 0 3
31305: IFFALSE 31355
// begin for i in tmp do
31307: LD_ADDR_VAR 0 6
31311: PUSH
31312: LD_VAR 0 5
31316: PUSH
31317: FOR_IN
31318: IFFALSE 31353
// if GetBase ( i ) <> base then
31320: LD_VAR 0 6
31324: PPUSH
31325: CALL_OW 274
31329: PUSH
31330: LD_VAR 0 1
31334: NONEQUAL
31335: IFFALSE 31351
// ComLinkToBase ( base , i ) ;
31337: LD_VAR 0 1
31341: PPUSH
31342: LD_VAR 0 6
31346: PPUSH
31347: CALL_OW 169
31351: GO 31317
31353: POP
31354: POP
// end ; result := tmp ;
31355: LD_ADDR_VAR 0 4
31359: PUSH
31360: LD_VAR 0 5
31364: ST_TO_ADDR
// end ;
31365: LD_VAR 0 4
31369: RET
// export function ComComplete ( units , b ) ; var i ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
// if not units then
31374: LD_VAR 0 1
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 31473
// for i in units do
31383: LD_ADDR_VAR 0 4
31387: PUSH
31388: LD_VAR 0 1
31392: PUSH
31393: FOR_IN
31394: IFFALSE 31471
// if BuildingStatus ( b ) = bs_build then
31396: LD_VAR 0 2
31400: PPUSH
31401: CALL_OW 461
31405: PUSH
31406: LD_INT 1
31408: EQUAL
31409: IFFALSE 31469
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31411: LD_VAR 0 4
31415: PPUSH
31416: LD_STRING h
31418: PUSH
31419: LD_VAR 0 2
31423: PPUSH
31424: CALL_OW 250
31428: PUSH
31429: LD_VAR 0 2
31433: PPUSH
31434: CALL_OW 251
31438: PUSH
31439: LD_VAR 0 2
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: PUSH
31462: EMPTY
31463: LIST
31464: PPUSH
31465: CALL_OW 446
31469: GO 31393
31471: POP
31472: POP
// end ;
31473: LD_VAR 0 3
31477: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31478: LD_INT 0
31480: PPUSH
31481: PPUSH
31482: PPUSH
31483: PPUSH
31484: PPUSH
31485: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31486: LD_VAR 0 1
31490: NOT
31491: PUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 263
31501: PUSH
31502: LD_INT 2
31504: NONEQUAL
31505: OR
31506: IFFALSE 31510
// exit ;
31508: GO 31826
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31510: LD_ADDR_VAR 0 6
31514: PUSH
31515: LD_INT 22
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 255
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: LD_INT 36
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 34
31547: PUSH
31548: LD_INT 31
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PPUSH
31564: CALL_OW 69
31568: ST_TO_ADDR
// if not tmp then
31569: LD_VAR 0 6
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31826
// result := [ ] ;
31578: LD_ADDR_VAR 0 2
31582: PUSH
31583: EMPTY
31584: ST_TO_ADDR
// for i in tmp do
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_VAR 0 6
31594: PUSH
31595: FOR_IN
31596: IFFALSE 31667
// begin t := UnitsInside ( i ) ;
31598: LD_ADDR_VAR 0 4
31602: PUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 313
31612: ST_TO_ADDR
// if t then
31613: LD_VAR 0 4
31617: IFFALSE 31665
// for j in t do
31619: LD_ADDR_VAR 0 7
31623: PUSH
31624: LD_VAR 0 4
31628: PUSH
31629: FOR_IN
31630: IFFALSE 31663
// result := Replace ( result , result + 1 , j ) ;
31632: LD_ADDR_VAR 0 2
31636: PUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_VAR 0 2
31646: PUSH
31647: LD_INT 1
31649: PLUS
31650: PPUSH
31651: LD_VAR 0 7
31655: PPUSH
31656: CALL_OW 1
31660: ST_TO_ADDR
31661: GO 31629
31663: POP
31664: POP
// end ;
31665: GO 31595
31667: POP
31668: POP
// if not result then
31669: LD_VAR 0 2
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31826
// mech := result [ 1 ] ;
31678: LD_ADDR_VAR 0 5
31682: PUSH
31683: LD_VAR 0 2
31687: PUSH
31688: LD_INT 1
31690: ARRAY
31691: ST_TO_ADDR
// if result > 1 then
31692: LD_VAR 0 2
31696: PUSH
31697: LD_INT 1
31699: GREATER
31700: IFFALSE 31812
// begin for i = 2 to result do
31702: LD_ADDR_VAR 0 3
31706: PUSH
31707: DOUBLE
31708: LD_INT 2
31710: DEC
31711: ST_TO_ADDR
31712: LD_VAR 0 2
31716: PUSH
31717: FOR_TO
31718: IFFALSE 31810
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31720: LD_ADDR_VAR 0 4
31724: PUSH
31725: LD_VAR 0 2
31729: PUSH
31730: LD_VAR 0 3
31734: ARRAY
31735: PPUSH
31736: LD_INT 3
31738: PPUSH
31739: CALL_OW 259
31743: PUSH
31744: LD_VAR 0 2
31748: PUSH
31749: LD_VAR 0 3
31753: ARRAY
31754: PPUSH
31755: CALL_OW 432
31759: MINUS
31760: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31761: LD_VAR 0 4
31765: PUSH
31766: LD_VAR 0 5
31770: PPUSH
31771: LD_INT 3
31773: PPUSH
31774: CALL_OW 259
31778: PUSH
31779: LD_VAR 0 5
31783: PPUSH
31784: CALL_OW 432
31788: MINUS
31789: GREATEREQUAL
31790: IFFALSE 31808
// mech := result [ i ] ;
31792: LD_ADDR_VAR 0 5
31796: PUSH
31797: LD_VAR 0 2
31801: PUSH
31802: LD_VAR 0 3
31806: ARRAY
31807: ST_TO_ADDR
// end ;
31808: GO 31717
31810: POP
31811: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31812: LD_VAR 0 1
31816: PPUSH
31817: LD_VAR 0 5
31821: PPUSH
31822: CALL_OW 135
// end ;
31826: LD_VAR 0 2
31830: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
31843: PPUSH
31844: PPUSH
31845: PPUSH
// result := [ ] ;
31846: LD_ADDR_VAR 0 7
31850: PUSH
31851: EMPTY
31852: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31853: LD_VAR 0 1
31857: PPUSH
31858: CALL_OW 266
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: IN
31873: NOT
31874: IFFALSE 31878
// exit ;
31876: GO 33512
// if name then
31878: LD_VAR 0 3
31882: IFFALSE 31898
// SetBName ( base_dep , name ) ;
31884: LD_VAR 0 1
31888: PPUSH
31889: LD_VAR 0 3
31893: PPUSH
31894: CALL_OW 500
// base := GetBase ( base_dep ) ;
31898: LD_ADDR_VAR 0 15
31902: PUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 274
31912: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31913: LD_ADDR_VAR 0 16
31917: PUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL_OW 255
31927: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31928: LD_ADDR_VAR 0 17
31932: PUSH
31933: LD_VAR 0 1
31937: PPUSH
31938: CALL_OW 248
31942: ST_TO_ADDR
// if sources then
31943: LD_VAR 0 5
31947: IFFALSE 31994
// for i = 1 to 3 do
31949: LD_ADDR_VAR 0 8
31953: PUSH
31954: DOUBLE
31955: LD_INT 1
31957: DEC
31958: ST_TO_ADDR
31959: LD_INT 3
31961: PUSH
31962: FOR_TO
31963: IFFALSE 31992
// AddResourceType ( base , i , sources [ i ] ) ;
31965: LD_VAR 0 15
31969: PPUSH
31970: LD_VAR 0 8
31974: PPUSH
31975: LD_VAR 0 5
31979: PUSH
31980: LD_VAR 0 8
31984: ARRAY
31985: PPUSH
31986: CALL_OW 276
31990: GO 31962
31992: POP
31993: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31994: LD_ADDR_VAR 0 18
31998: PUSH
31999: LD_VAR 0 15
32003: PPUSH
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_INT 1
32011: PPUSH
32012: CALL 31255 0 3
32016: ST_TO_ADDR
// InitHc ;
32017: CALL_OW 19
// InitUc ;
32021: CALL_OW 18
// uc_side := side ;
32025: LD_ADDR_OWVAR 20
32029: PUSH
32030: LD_VAR 0 16
32034: ST_TO_ADDR
// uc_nation := nation ;
32035: LD_ADDR_OWVAR 21
32039: PUSH
32040: LD_VAR 0 17
32044: ST_TO_ADDR
// if buildings then
32045: LD_VAR 0 18
32049: IFFALSE 33371
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32051: LD_ADDR_VAR 0 19
32055: PUSH
32056: LD_VAR 0 18
32060: PPUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 30
32066: PUSH
32067: LD_INT 29
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 30
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: PPUSH
32089: CALL_OW 72
32093: ST_TO_ADDR
// if tmp then
32094: LD_VAR 0 19
32098: IFFALSE 32146
// for i in tmp do
32100: LD_ADDR_VAR 0 8
32104: PUSH
32105: LD_VAR 0 19
32109: PUSH
32110: FOR_IN
32111: IFFALSE 32144
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32113: LD_VAR 0 8
32117: PPUSH
32118: CALL_OW 250
32122: PPUSH
32123: LD_VAR 0 8
32127: PPUSH
32128: CALL_OW 251
32132: PPUSH
32133: LD_VAR 0 16
32137: PPUSH
32138: CALL_OW 441
32142: GO 32110
32144: POP
32145: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32146: LD_VAR 0 18
32150: PPUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 30
32156: PUSH
32157: LD_INT 32
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 33
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 72
32183: IFFALSE 32271
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32185: LD_ADDR_VAR 0 8
32189: PUSH
32190: LD_VAR 0 18
32194: PPUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 30
32200: PUSH
32201: LD_INT 32
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: LD_INT 33
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: PPUSH
32223: CALL_OW 72
32227: PUSH
32228: FOR_IN
32229: IFFALSE 32269
// begin if not GetBWeapon ( i ) then
32231: LD_VAR 0 8
32235: PPUSH
32236: CALL_OW 269
32240: NOT
32241: IFFALSE 32267
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 8
32252: PPUSH
32253: LD_VAR 0 2
32257: PPUSH
32258: CALL 33517 0 2
32262: PPUSH
32263: CALL_OW 431
// end ;
32267: GO 32228
32269: POP
32270: POP
// end ; for i = 1 to personel do
32271: LD_ADDR_VAR 0 8
32275: PUSH
32276: DOUBLE
32277: LD_INT 1
32279: DEC
32280: ST_TO_ADDR
32281: LD_VAR 0 6
32285: PUSH
32286: FOR_TO
32287: IFFALSE 33351
// begin if i > 4 then
32289: LD_VAR 0 8
32293: PUSH
32294: LD_INT 4
32296: GREATER
32297: IFFALSE 32301
// break ;
32299: GO 33351
// case i of 1 :
32301: LD_VAR 0 8
32305: PUSH
32306: LD_INT 1
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32394
32314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32315: LD_ADDR_VAR 0 12
32319: PUSH
32320: LD_VAR 0 18
32324: PPUSH
32325: LD_INT 22
32327: PUSH
32328: LD_VAR 0 16
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 58
32339: PUSH
32340: EMPTY
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 30
32348: PUSH
32349: LD_INT 32
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 30
32358: PUSH
32359: LD_INT 4
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 30
32368: PUSH
32369: LD_INT 5
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: PPUSH
32387: CALL_OW 72
32391: ST_TO_ADDR
32392: GO 32616
32394: LD_INT 2
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32464
32402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32403: LD_ADDR_VAR 0 12
32407: PUSH
32408: LD_VAR 0 18
32412: PPUSH
32413: LD_INT 22
32415: PUSH
32416: LD_VAR 0 16
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 30
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PPUSH
32457: CALL_OW 72
32461: ST_TO_ADDR
32462: GO 32616
32464: LD_INT 3
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32534
32472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32473: LD_ADDR_VAR 0 12
32477: PUSH
32478: LD_VAR 0 18
32482: PPUSH
32483: LD_INT 22
32485: PUSH
32486: LD_VAR 0 16
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 30
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: LD_INT 3
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PPUSH
32527: CALL_OW 72
32531: ST_TO_ADDR
32532: GO 32616
32534: LD_INT 4
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32615
32542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32543: LD_ADDR_VAR 0 12
32547: PUSH
32548: LD_VAR 0 18
32552: PPUSH
32553: LD_INT 22
32555: PUSH
32556: LD_VAR 0 16
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 30
32570: PUSH
32571: LD_INT 6
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 30
32580: PUSH
32581: LD_INT 7
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 30
32590: PUSH
32591: LD_INT 8
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PPUSH
32608: CALL_OW 72
32612: ST_TO_ADDR
32613: GO 32616
32615: POP
// if i = 1 then
32616: LD_VAR 0 8
32620: PUSH
32621: LD_INT 1
32623: EQUAL
32624: IFFALSE 32735
// begin tmp := [ ] ;
32626: LD_ADDR_VAR 0 19
32630: PUSH
32631: EMPTY
32632: ST_TO_ADDR
// for j in f do
32633: LD_ADDR_VAR 0 9
32637: PUSH
32638: LD_VAR 0 12
32642: PUSH
32643: FOR_IN
32644: IFFALSE 32717
// if GetBType ( j ) = b_bunker then
32646: LD_VAR 0 9
32650: PPUSH
32651: CALL_OW 266
32655: PUSH
32656: LD_INT 32
32658: EQUAL
32659: IFFALSE 32686
// tmp := Insert ( tmp , 1 , j ) else
32661: LD_ADDR_VAR 0 19
32665: PUSH
32666: LD_VAR 0 19
32670: PPUSH
32671: LD_INT 1
32673: PPUSH
32674: LD_VAR 0 9
32678: PPUSH
32679: CALL_OW 2
32683: ST_TO_ADDR
32684: GO 32715
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32686: LD_ADDR_VAR 0 19
32690: PUSH
32691: LD_VAR 0 19
32695: PPUSH
32696: LD_VAR 0 19
32700: PUSH
32701: LD_INT 1
32703: PLUS
32704: PPUSH
32705: LD_VAR 0 9
32709: PPUSH
32710: CALL_OW 2
32714: ST_TO_ADDR
32715: GO 32643
32717: POP
32718: POP
// if tmp then
32719: LD_VAR 0 19
32723: IFFALSE 32735
// f := tmp ;
32725: LD_ADDR_VAR 0 12
32729: PUSH
32730: LD_VAR 0 19
32734: ST_TO_ADDR
// end ; x := personel [ i ] ;
32735: LD_ADDR_VAR 0 13
32739: PUSH
32740: LD_VAR 0 6
32744: PUSH
32745: LD_VAR 0 8
32749: ARRAY
32750: ST_TO_ADDR
// if x = - 1 then
32751: LD_VAR 0 13
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: EQUAL
32760: IFFALSE 32969
// begin for j in f do
32762: LD_ADDR_VAR 0 9
32766: PUSH
32767: LD_VAR 0 12
32771: PUSH
32772: FOR_IN
32773: IFFALSE 32965
// repeat InitHc ;
32775: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32779: LD_VAR 0 9
32783: PPUSH
32784: CALL_OW 266
32788: PUSH
32789: LD_INT 5
32791: EQUAL
32792: IFFALSE 32862
// begin if UnitsInside ( j ) < 3 then
32794: LD_VAR 0 9
32798: PPUSH
32799: CALL_OW 313
32803: PUSH
32804: LD_INT 3
32806: LESS
32807: IFFALSE 32843
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32809: LD_INT 0
32811: PPUSH
32812: LD_INT 5
32814: PUSH
32815: LD_INT 8
32817: PUSH
32818: LD_INT 9
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: PUSH
32826: LD_VAR 0 17
32830: ARRAY
32831: PPUSH
32832: LD_VAR 0 4
32836: PPUSH
32837: CALL_OW 380
32841: GO 32860
// PrepareHuman ( false , i , skill ) ;
32843: LD_INT 0
32845: PPUSH
32846: LD_VAR 0 8
32850: PPUSH
32851: LD_VAR 0 4
32855: PPUSH
32856: CALL_OW 380
// end else
32860: GO 32879
// PrepareHuman ( false , i , skill ) ;
32862: LD_INT 0
32864: PPUSH
32865: LD_VAR 0 8
32869: PPUSH
32870: LD_VAR 0 4
32874: PPUSH
32875: CALL_OW 380
// un := CreateHuman ;
32879: LD_ADDR_VAR 0 14
32883: PUSH
32884: CALL_OW 44
32888: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32889: LD_ADDR_VAR 0 7
32893: PUSH
32894: LD_VAR 0 7
32898: PPUSH
32899: LD_INT 1
32901: PPUSH
32902: LD_VAR 0 14
32906: PPUSH
32907: CALL_OW 2
32911: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32912: LD_VAR 0 14
32916: PPUSH
32917: LD_VAR 0 9
32921: PPUSH
32922: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32926: LD_VAR 0 9
32930: PPUSH
32931: CALL_OW 313
32935: PUSH
32936: LD_INT 6
32938: EQUAL
32939: PUSH
32940: LD_VAR 0 9
32944: PPUSH
32945: CALL_OW 266
32949: PUSH
32950: LD_INT 32
32952: PUSH
32953: LD_INT 31
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: IN
32960: OR
32961: IFFALSE 32775
32963: GO 32772
32965: POP
32966: POP
// end else
32967: GO 33349
// for j = 1 to x do
32969: LD_ADDR_VAR 0 9
32973: PUSH
32974: DOUBLE
32975: LD_INT 1
32977: DEC
32978: ST_TO_ADDR
32979: LD_VAR 0 13
32983: PUSH
32984: FOR_TO
32985: IFFALSE 33347
// begin InitHc ;
32987: CALL_OW 19
// if not f then
32991: LD_VAR 0 12
32995: NOT
32996: IFFALSE 33085
// begin PrepareHuman ( false , i , skill ) ;
32998: LD_INT 0
33000: PPUSH
33001: LD_VAR 0 8
33005: PPUSH
33006: LD_VAR 0 4
33010: PPUSH
33011: CALL_OW 380
// un := CreateHuman ;
33015: LD_ADDR_VAR 0 14
33019: PUSH
33020: CALL_OW 44
33024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33025: LD_ADDR_VAR 0 7
33029: PUSH
33030: LD_VAR 0 7
33034: PPUSH
33035: LD_INT 1
33037: PPUSH
33038: LD_VAR 0 14
33042: PPUSH
33043: CALL_OW 2
33047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33048: LD_VAR 0 14
33052: PPUSH
33053: LD_VAR 0 1
33057: PPUSH
33058: CALL_OW 250
33062: PPUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 251
33072: PPUSH
33073: LD_INT 10
33075: PPUSH
33076: LD_INT 0
33078: PPUSH
33079: CALL_OW 50
// continue ;
33083: GO 32984
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33085: LD_VAR 0 12
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: PPUSH
33094: CALL_OW 313
33098: PUSH
33099: LD_VAR 0 12
33103: PUSH
33104: LD_INT 1
33106: ARRAY
33107: PPUSH
33108: CALL_OW 266
33112: PUSH
33113: LD_INT 32
33115: PUSH
33116: LD_INT 31
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: IN
33123: AND
33124: PUSH
33125: LD_VAR 0 12
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: CALL_OW 313
33138: PUSH
33139: LD_INT 6
33141: EQUAL
33142: OR
33143: IFFALSE 33163
// f := Delete ( f , 1 ) ;
33145: LD_ADDR_VAR 0 12
33149: PUSH
33150: LD_VAR 0 12
33154: PPUSH
33155: LD_INT 1
33157: PPUSH
33158: CALL_OW 3
33162: ST_TO_ADDR
// if not f then
33163: LD_VAR 0 12
33167: NOT
33168: IFFALSE 33186
// begin x := x + 2 ;
33170: LD_ADDR_VAR 0 13
33174: PUSH
33175: LD_VAR 0 13
33179: PUSH
33180: LD_INT 2
33182: PLUS
33183: ST_TO_ADDR
// continue ;
33184: GO 32984
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33186: LD_VAR 0 12
33190: PUSH
33191: LD_INT 1
33193: ARRAY
33194: PPUSH
33195: CALL_OW 266
33199: PUSH
33200: LD_INT 5
33202: EQUAL
33203: IFFALSE 33277
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33205: LD_VAR 0 12
33209: PUSH
33210: LD_INT 1
33212: ARRAY
33213: PPUSH
33214: CALL_OW 313
33218: PUSH
33219: LD_INT 3
33221: LESS
33222: IFFALSE 33258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33224: LD_INT 0
33226: PPUSH
33227: LD_INT 5
33229: PUSH
33230: LD_INT 8
33232: PUSH
33233: LD_INT 9
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: PUSH
33241: LD_VAR 0 17
33245: ARRAY
33246: PPUSH
33247: LD_VAR 0 4
33251: PPUSH
33252: CALL_OW 380
33256: GO 33275
// PrepareHuman ( false , i , skill ) ;
33258: LD_INT 0
33260: PPUSH
33261: LD_VAR 0 8
33265: PPUSH
33266: LD_VAR 0 4
33270: PPUSH
33271: CALL_OW 380
// end else
33275: GO 33294
// PrepareHuman ( false , i , skill ) ;
33277: LD_INT 0
33279: PPUSH
33280: LD_VAR 0 8
33284: PPUSH
33285: LD_VAR 0 4
33289: PPUSH
33290: CALL_OW 380
// un := CreateHuman ;
33294: LD_ADDR_VAR 0 14
33298: PUSH
33299: CALL_OW 44
33303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33304: LD_ADDR_VAR 0 7
33308: PUSH
33309: LD_VAR 0 7
33313: PPUSH
33314: LD_INT 1
33316: PPUSH
33317: LD_VAR 0 14
33321: PPUSH
33322: CALL_OW 2
33326: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33327: LD_VAR 0 14
33331: PPUSH
33332: LD_VAR 0 12
33336: PUSH
33337: LD_INT 1
33339: ARRAY
33340: PPUSH
33341: CALL_OW 52
// end ;
33345: GO 32984
33347: POP
33348: POP
// end ;
33349: GO 32286
33351: POP
33352: POP
// result := result ^ buildings ;
33353: LD_ADDR_VAR 0 7
33357: PUSH
33358: LD_VAR 0 7
33362: PUSH
33363: LD_VAR 0 18
33367: ADD
33368: ST_TO_ADDR
// end else
33369: GO 33512
// begin for i = 1 to personel do
33371: LD_ADDR_VAR 0 8
33375: PUSH
33376: DOUBLE
33377: LD_INT 1
33379: DEC
33380: ST_TO_ADDR
33381: LD_VAR 0 6
33385: PUSH
33386: FOR_TO
33387: IFFALSE 33510
// begin if i > 4 then
33389: LD_VAR 0 8
33393: PUSH
33394: LD_INT 4
33396: GREATER
33397: IFFALSE 33401
// break ;
33399: GO 33510
// x := personel [ i ] ;
33401: LD_ADDR_VAR 0 13
33405: PUSH
33406: LD_VAR 0 6
33410: PUSH
33411: LD_VAR 0 8
33415: ARRAY
33416: ST_TO_ADDR
// if x = - 1 then
33417: LD_VAR 0 13
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: EQUAL
33426: IFFALSE 33430
// continue ;
33428: GO 33386
// PrepareHuman ( false , i , skill ) ;
33430: LD_INT 0
33432: PPUSH
33433: LD_VAR 0 8
33437: PPUSH
33438: LD_VAR 0 4
33442: PPUSH
33443: CALL_OW 380
// un := CreateHuman ;
33447: LD_ADDR_VAR 0 14
33451: PUSH
33452: CALL_OW 44
33456: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33457: LD_VAR 0 14
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 250
33471: PPUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 251
33481: PPUSH
33482: LD_INT 10
33484: PPUSH
33485: LD_INT 0
33487: PPUSH
33488: CALL_OW 50
// result := result ^ un ;
33492: LD_ADDR_VAR 0 7
33496: PUSH
33497: LD_VAR 0 7
33501: PUSH
33502: LD_VAR 0 14
33506: ADD
33507: ST_TO_ADDR
// end ;
33508: GO 33386
33510: POP
33511: POP
// end ; end ;
33512: LD_VAR 0 7
33516: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33517: LD_INT 0
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
33532: PPUSH
33533: PPUSH
33534: PPUSH
// result := false ;
33535: LD_ADDR_VAR 0 3
33539: PUSH
33540: LD_INT 0
33542: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33543: LD_VAR 0 1
33547: NOT
33548: PUSH
33549: LD_VAR 0 1
33553: PPUSH
33554: CALL_OW 266
33558: PUSH
33559: LD_INT 32
33561: PUSH
33562: LD_INT 33
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: IN
33569: NOT
33570: OR
33571: IFFALSE 33575
// exit ;
33573: GO 34684
// nat := GetNation ( tower ) ;
33575: LD_ADDR_VAR 0 12
33579: PUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 248
33589: ST_TO_ADDR
// side := GetSide ( tower ) ;
33590: LD_ADDR_VAR 0 16
33594: PUSH
33595: LD_VAR 0 1
33599: PPUSH
33600: CALL_OW 255
33604: ST_TO_ADDR
// x := GetX ( tower ) ;
33605: LD_ADDR_VAR 0 10
33609: PUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: CALL_OW 250
33619: ST_TO_ADDR
// y := GetY ( tower ) ;
33620: LD_ADDR_VAR 0 11
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: CALL_OW 251
33634: ST_TO_ADDR
// if not x or not y then
33635: LD_VAR 0 10
33639: NOT
33640: PUSH
33641: LD_VAR 0 11
33645: NOT
33646: OR
33647: IFFALSE 33651
// exit ;
33649: GO 34684
// weapon := 0 ;
33651: LD_ADDR_VAR 0 18
33655: PUSH
33656: LD_INT 0
33658: ST_TO_ADDR
// fac_list := [ ] ;
33659: LD_ADDR_VAR 0 17
33663: PUSH
33664: EMPTY
33665: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33666: LD_ADDR_VAR 0 6
33670: PUSH
33671: LD_VAR 0 1
33675: PPUSH
33676: CALL_OW 274
33680: PPUSH
33681: LD_VAR 0 2
33685: PPUSH
33686: LD_INT 0
33688: PPUSH
33689: CALL 31255 0 3
33693: PPUSH
33694: LD_INT 30
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PPUSH
33704: CALL_OW 72
33708: ST_TO_ADDR
// if not factories then
33709: LD_VAR 0 6
33713: NOT
33714: IFFALSE 33718
// exit ;
33716: GO 34684
// for i in factories do
33718: LD_ADDR_VAR 0 8
33722: PUSH
33723: LD_VAR 0 6
33727: PUSH
33728: FOR_IN
33729: IFFALSE 33754
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33731: LD_ADDR_VAR 0 17
33735: PUSH
33736: LD_VAR 0 17
33740: PUSH
33741: LD_VAR 0 8
33745: PPUSH
33746: CALL_OW 478
33750: UNION
33751: ST_TO_ADDR
33752: GO 33728
33754: POP
33755: POP
// if not fac_list then
33756: LD_VAR 0 17
33760: NOT
33761: IFFALSE 33765
// exit ;
33763: GO 34684
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33765: LD_ADDR_VAR 0 5
33769: PUSH
33770: LD_INT 4
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: LD_INT 9
33778: PUSH
33779: LD_INT 10
33781: PUSH
33782: LD_INT 6
33784: PUSH
33785: LD_INT 7
33787: PUSH
33788: LD_INT 11
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 27
33802: PUSH
33803: LD_INT 28
33805: PUSH
33806: LD_INT 26
33808: PUSH
33809: LD_INT 30
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 43
33820: PUSH
33821: LD_INT 44
33823: PUSH
33824: LD_INT 46
33826: PUSH
33827: LD_INT 45
33829: PUSH
33830: LD_INT 47
33832: PUSH
33833: LD_INT 49
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: PUSH
33849: LD_VAR 0 12
33853: ARRAY
33854: ST_TO_ADDR
// list := list isect fac_list ;
33855: LD_ADDR_VAR 0 5
33859: PUSH
33860: LD_VAR 0 5
33864: PUSH
33865: LD_VAR 0 17
33869: ISECT
33870: ST_TO_ADDR
// if not list then
33871: LD_VAR 0 5
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 34684
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33880: LD_VAR 0 12
33884: PUSH
33885: LD_INT 3
33887: EQUAL
33888: PUSH
33889: LD_INT 49
33891: PUSH
33892: LD_VAR 0 5
33896: IN
33897: AND
33898: PUSH
33899: LD_INT 31
33901: PPUSH
33902: LD_VAR 0 16
33906: PPUSH
33907: CALL_OW 321
33911: PUSH
33912: LD_INT 2
33914: EQUAL
33915: AND
33916: IFFALSE 33976
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33918: LD_INT 22
33920: PUSH
33921: LD_VAR 0 16
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 35
33932: PUSH
33933: LD_INT 49
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 91
33942: PUSH
33943: LD_VAR 0 1
33947: PUSH
33948: LD_INT 10
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: PPUSH
33961: CALL_OW 69
33965: NOT
33966: IFFALSE 33976
// weapon := ru_time_lapser ;
33968: LD_ADDR_VAR 0 18
33972: PUSH
33973: LD_INT 49
33975: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33976: LD_VAR 0 12
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: IN
33991: PUSH
33992: LD_INT 11
33994: PUSH
33995: LD_VAR 0 5
33999: IN
34000: PUSH
34001: LD_INT 30
34003: PUSH
34004: LD_VAR 0 5
34008: IN
34009: OR
34010: AND
34011: PUSH
34012: LD_INT 6
34014: PPUSH
34015: LD_VAR 0 16
34019: PPUSH
34020: CALL_OW 321
34024: PUSH
34025: LD_INT 2
34027: EQUAL
34028: AND
34029: IFFALSE 34194
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34031: LD_INT 22
34033: PUSH
34034: LD_VAR 0 16
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: LD_INT 35
34048: PUSH
34049: LD_INT 11
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 35
34058: PUSH
34059: LD_INT 30
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 91
34073: PUSH
34074: LD_VAR 0 1
34078: PUSH
34079: LD_INT 18
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: PPUSH
34092: CALL_OW 69
34096: NOT
34097: PUSH
34098: LD_INT 22
34100: PUSH
34101: LD_VAR 0 16
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 30
34115: PUSH
34116: LD_INT 32
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 30
34125: PUSH
34126: LD_INT 33
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 91
34140: PUSH
34141: LD_VAR 0 1
34145: PUSH
34146: LD_INT 12
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: PUSH
34159: EMPTY
34160: LIST
34161: PPUSH
34162: CALL_OW 69
34166: PUSH
34167: LD_INT 2
34169: GREATER
34170: AND
34171: IFFALSE 34194
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34173: LD_ADDR_VAR 0 18
34177: PUSH
34178: LD_INT 11
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_VAR 0 12
34192: ARRAY
34193: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34194: LD_VAR 0 18
34198: NOT
34199: PUSH
34200: LD_INT 40
34202: PPUSH
34203: LD_VAR 0 16
34207: PPUSH
34208: CALL_OW 321
34212: PUSH
34213: LD_INT 2
34215: EQUAL
34216: AND
34217: PUSH
34218: LD_INT 7
34220: PUSH
34221: LD_VAR 0 5
34225: IN
34226: PUSH
34227: LD_INT 28
34229: PUSH
34230: LD_VAR 0 5
34234: IN
34235: OR
34236: PUSH
34237: LD_INT 45
34239: PUSH
34240: LD_VAR 0 5
34244: IN
34245: OR
34246: AND
34247: IFFALSE 34501
// begin hex := GetHexInfo ( x , y ) ;
34249: LD_ADDR_VAR 0 4
34253: PUSH
34254: LD_VAR 0 10
34258: PPUSH
34259: LD_VAR 0 11
34263: PPUSH
34264: CALL_OW 546
34268: ST_TO_ADDR
// if hex [ 1 ] then
34269: LD_VAR 0 4
34273: PUSH
34274: LD_INT 1
34276: ARRAY
34277: IFFALSE 34281
// exit ;
34279: GO 34684
// height := hex [ 2 ] ;
34281: LD_ADDR_VAR 0 15
34285: PUSH
34286: LD_VAR 0 4
34290: PUSH
34291: LD_INT 2
34293: ARRAY
34294: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34295: LD_ADDR_VAR 0 14
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: LD_INT 5
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
// for i in tmp do
34318: LD_ADDR_VAR 0 8
34322: PUSH
34323: LD_VAR 0 14
34327: PUSH
34328: FOR_IN
34329: IFFALSE 34499
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34331: LD_ADDR_VAR 0 9
34335: PUSH
34336: LD_VAR 0 10
34340: PPUSH
34341: LD_VAR 0 8
34345: PPUSH
34346: LD_INT 5
34348: PPUSH
34349: CALL_OW 272
34353: PUSH
34354: LD_VAR 0 11
34358: PPUSH
34359: LD_VAR 0 8
34363: PPUSH
34364: LD_INT 5
34366: PPUSH
34367: CALL_OW 273
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34376: LD_VAR 0 9
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PPUSH
34385: LD_VAR 0 9
34389: PUSH
34390: LD_INT 2
34392: ARRAY
34393: PPUSH
34394: CALL_OW 488
34398: IFFALSE 34497
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34400: LD_ADDR_VAR 0 4
34404: PUSH
34405: LD_VAR 0 9
34409: PUSH
34410: LD_INT 1
34412: ARRAY
34413: PPUSH
34414: LD_VAR 0 9
34418: PUSH
34419: LD_INT 2
34421: ARRAY
34422: PPUSH
34423: CALL_OW 546
34427: ST_TO_ADDR
// if hex [ 1 ] then
34428: LD_VAR 0 4
34432: PUSH
34433: LD_INT 1
34435: ARRAY
34436: IFFALSE 34440
// continue ;
34438: GO 34328
// h := hex [ 2 ] ;
34440: LD_ADDR_VAR 0 13
34444: PUSH
34445: LD_VAR 0 4
34449: PUSH
34450: LD_INT 2
34452: ARRAY
34453: ST_TO_ADDR
// if h + 7 < height then
34454: LD_VAR 0 13
34458: PUSH
34459: LD_INT 7
34461: PLUS
34462: PUSH
34463: LD_VAR 0 15
34467: LESS
34468: IFFALSE 34497
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34470: LD_ADDR_VAR 0 18
34474: PUSH
34475: LD_INT 7
34477: PUSH
34478: LD_INT 28
34480: PUSH
34481: LD_INT 45
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: PUSH
34489: LD_VAR 0 12
34493: ARRAY
34494: ST_TO_ADDR
// break ;
34495: GO 34499
// end ; end ; end ;
34497: GO 34328
34499: POP
34500: POP
// end ; if not weapon then
34501: LD_VAR 0 18
34505: NOT
34506: IFFALSE 34566
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34508: LD_ADDR_VAR 0 5
34512: PUSH
34513: LD_VAR 0 5
34517: PUSH
34518: LD_INT 11
34520: PUSH
34521: LD_INT 30
34523: PUSH
34524: LD_INT 49
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: DIFF
34532: ST_TO_ADDR
// if not list then
34533: LD_VAR 0 5
34537: NOT
34538: IFFALSE 34542
// exit ;
34540: GO 34684
// weapon := list [ rand ( 1 , list ) ] ;
34542: LD_ADDR_VAR 0 18
34546: PUSH
34547: LD_VAR 0 5
34551: PUSH
34552: LD_INT 1
34554: PPUSH
34555: LD_VAR 0 5
34559: PPUSH
34560: CALL_OW 12
34564: ARRAY
34565: ST_TO_ADDR
// end ; if weapon then
34566: LD_VAR 0 18
34570: IFFALSE 34684
// begin tmp := CostOfWeapon ( weapon ) ;
34572: LD_ADDR_VAR 0 14
34576: PUSH
34577: LD_VAR 0 18
34581: PPUSH
34582: CALL_OW 451
34586: ST_TO_ADDR
// j := GetBase ( tower ) ;
34587: LD_ADDR_VAR 0 9
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 274
34601: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34602: LD_VAR 0 9
34606: PPUSH
34607: LD_INT 1
34609: PPUSH
34610: CALL_OW 275
34614: PUSH
34615: LD_VAR 0 14
34619: PUSH
34620: LD_INT 1
34622: ARRAY
34623: GREATEREQUAL
34624: PUSH
34625: LD_VAR 0 9
34629: PPUSH
34630: LD_INT 2
34632: PPUSH
34633: CALL_OW 275
34637: PUSH
34638: LD_VAR 0 14
34642: PUSH
34643: LD_INT 2
34645: ARRAY
34646: GREATEREQUAL
34647: AND
34648: PUSH
34649: LD_VAR 0 9
34653: PPUSH
34654: LD_INT 3
34656: PPUSH
34657: CALL_OW 275
34661: PUSH
34662: LD_VAR 0 14
34666: PUSH
34667: LD_INT 3
34669: ARRAY
34670: GREATEREQUAL
34671: AND
34672: IFFALSE 34684
// result := weapon ;
34674: LD_ADDR_VAR 0 3
34678: PUSH
34679: LD_VAR 0 18
34683: ST_TO_ADDR
// end ; end ;
34684: LD_VAR 0 3
34688: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34689: LD_INT 0
34691: PPUSH
34692: PPUSH
// result := true ;
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_INT 1
34700: ST_TO_ADDR
// if array1 = array2 then
34701: LD_VAR 0 1
34705: PUSH
34706: LD_VAR 0 2
34710: EQUAL
34711: IFFALSE 34771
// begin for i = 1 to array1 do
34713: LD_ADDR_VAR 0 4
34717: PUSH
34718: DOUBLE
34719: LD_INT 1
34721: DEC
34722: ST_TO_ADDR
34723: LD_VAR 0 1
34727: PUSH
34728: FOR_TO
34729: IFFALSE 34767
// if array1 [ i ] <> array2 [ i ] then
34731: LD_VAR 0 1
34735: PUSH
34736: LD_VAR 0 4
34740: ARRAY
34741: PUSH
34742: LD_VAR 0 2
34746: PUSH
34747: LD_VAR 0 4
34751: ARRAY
34752: NONEQUAL
34753: IFFALSE 34765
// begin result := false ;
34755: LD_ADDR_VAR 0 3
34759: PUSH
34760: LD_INT 0
34762: ST_TO_ADDR
// break ;
34763: GO 34767
// end ;
34765: GO 34728
34767: POP
34768: POP
// end else
34769: GO 34779
// result := false ;
34771: LD_ADDR_VAR 0 3
34775: PUSH
34776: LD_INT 0
34778: ST_TO_ADDR
// end ;
34779: LD_VAR 0 3
34783: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34784: LD_INT 0
34786: PPUSH
34787: PPUSH
// if not array1 or not array2 then
34788: LD_VAR 0 1
34792: NOT
34793: PUSH
34794: LD_VAR 0 2
34798: NOT
34799: OR
34800: IFFALSE 34804
// exit ;
34802: GO 34868
// result := true ;
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 1
34811: ST_TO_ADDR
// for i = 1 to array1 do
34812: LD_ADDR_VAR 0 4
34816: PUSH
34817: DOUBLE
34818: LD_INT 1
34820: DEC
34821: ST_TO_ADDR
34822: LD_VAR 0 1
34826: PUSH
34827: FOR_TO
34828: IFFALSE 34866
// if array1 [ i ] <> array2 [ i ] then
34830: LD_VAR 0 1
34834: PUSH
34835: LD_VAR 0 4
34839: ARRAY
34840: PUSH
34841: LD_VAR 0 2
34845: PUSH
34846: LD_VAR 0 4
34850: ARRAY
34851: NONEQUAL
34852: IFFALSE 34864
// begin result := false ;
34854: LD_ADDR_VAR 0 3
34858: PUSH
34859: LD_INT 0
34861: ST_TO_ADDR
// break ;
34862: GO 34866
// end ;
34864: GO 34827
34866: POP
34867: POP
// end ;
34868: LD_VAR 0 3
34872: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34873: LD_INT 0
34875: PPUSH
34876: PPUSH
34877: PPUSH
// pom := GetBase ( fac ) ;
34878: LD_ADDR_VAR 0 5
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 274
34892: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34893: LD_ADDR_VAR 0 4
34897: PUSH
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 1
34905: ARRAY
34906: PPUSH
34907: LD_VAR 0 2
34911: PUSH
34912: LD_INT 2
34914: ARRAY
34915: PPUSH
34916: LD_VAR 0 2
34920: PUSH
34921: LD_INT 3
34923: ARRAY
34924: PPUSH
34925: LD_VAR 0 2
34929: PUSH
34930: LD_INT 4
34932: ARRAY
34933: PPUSH
34934: CALL_OW 449
34938: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_VAR 0 5
34948: PPUSH
34949: LD_INT 1
34951: PPUSH
34952: CALL_OW 275
34956: PUSH
34957: LD_VAR 0 4
34961: PUSH
34962: LD_INT 1
34964: ARRAY
34965: GREATEREQUAL
34966: PUSH
34967: LD_VAR 0 5
34971: PPUSH
34972: LD_INT 2
34974: PPUSH
34975: CALL_OW 275
34979: PUSH
34980: LD_VAR 0 4
34984: PUSH
34985: LD_INT 2
34987: ARRAY
34988: GREATEREQUAL
34989: AND
34990: PUSH
34991: LD_VAR 0 5
34995: PPUSH
34996: LD_INT 3
34998: PPUSH
34999: CALL_OW 275
35003: PUSH
35004: LD_VAR 0 4
35008: PUSH
35009: LD_INT 3
35011: ARRAY
35012: GREATEREQUAL
35013: AND
35014: ST_TO_ADDR
// end ;
35015: LD_VAR 0 3
35019: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35020: LD_INT 0
35022: PPUSH
35023: PPUSH
35024: PPUSH
35025: PPUSH
// pom := GetBase ( building ) ;
35026: LD_ADDR_VAR 0 3
35030: PUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 274
35040: ST_TO_ADDR
// if not pom then
35041: LD_VAR 0 3
35045: NOT
35046: IFFALSE 35050
// exit ;
35048: GO 35220
// btype := GetBType ( building ) ;
35050: LD_ADDR_VAR 0 5
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: CALL_OW 266
35064: ST_TO_ADDR
// if btype = b_armoury then
35065: LD_VAR 0 5
35069: PUSH
35070: LD_INT 4
35072: EQUAL
35073: IFFALSE 35083
// btype := b_barracks ;
35075: LD_ADDR_VAR 0 5
35079: PUSH
35080: LD_INT 5
35082: ST_TO_ADDR
// if btype = b_depot then
35083: LD_VAR 0 5
35087: PUSH
35088: LD_INT 0
35090: EQUAL
35091: IFFALSE 35101
// btype := b_warehouse ;
35093: LD_ADDR_VAR 0 5
35097: PUSH
35098: LD_INT 1
35100: ST_TO_ADDR
// if btype = b_workshop then
35101: LD_VAR 0 5
35105: PUSH
35106: LD_INT 2
35108: EQUAL
35109: IFFALSE 35119
// btype := b_factory ;
35111: LD_ADDR_VAR 0 5
35115: PUSH
35116: LD_INT 3
35118: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35119: LD_ADDR_VAR 0 4
35123: PUSH
35124: LD_VAR 0 5
35128: PPUSH
35129: LD_VAR 0 1
35133: PPUSH
35134: CALL_OW 248
35138: PPUSH
35139: CALL_OW 450
35143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35144: LD_ADDR_VAR 0 2
35148: PUSH
35149: LD_VAR 0 3
35153: PPUSH
35154: LD_INT 1
35156: PPUSH
35157: CALL_OW 275
35161: PUSH
35162: LD_VAR 0 4
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: GREATEREQUAL
35171: PUSH
35172: LD_VAR 0 3
35176: PPUSH
35177: LD_INT 2
35179: PPUSH
35180: CALL_OW 275
35184: PUSH
35185: LD_VAR 0 4
35189: PUSH
35190: LD_INT 2
35192: ARRAY
35193: GREATEREQUAL
35194: AND
35195: PUSH
35196: LD_VAR 0 3
35200: PPUSH
35201: LD_INT 3
35203: PPUSH
35204: CALL_OW 275
35208: PUSH
35209: LD_VAR 0 4
35213: PUSH
35214: LD_INT 3
35216: ARRAY
35217: GREATEREQUAL
35218: AND
35219: ST_TO_ADDR
// end ;
35220: LD_VAR 0 2
35224: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35225: LD_INT 0
35227: PPUSH
35228: PPUSH
35229: PPUSH
// pom := GetBase ( building ) ;
35230: LD_ADDR_VAR 0 4
35234: PUSH
35235: LD_VAR 0 1
35239: PPUSH
35240: CALL_OW 274
35244: ST_TO_ADDR
// if not pom then
35245: LD_VAR 0 4
35249: NOT
35250: IFFALSE 35254
// exit ;
35252: GO 35355
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35254: LD_ADDR_VAR 0 5
35258: PUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 248
35273: PPUSH
35274: CALL_OW 450
35278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: LD_VAR 0 4
35288: PPUSH
35289: LD_INT 1
35291: PPUSH
35292: CALL_OW 275
35296: PUSH
35297: LD_VAR 0 5
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: GREATEREQUAL
35306: PUSH
35307: LD_VAR 0 4
35311: PPUSH
35312: LD_INT 2
35314: PPUSH
35315: CALL_OW 275
35319: PUSH
35320: LD_VAR 0 5
35324: PUSH
35325: LD_INT 2
35327: ARRAY
35328: GREATEREQUAL
35329: AND
35330: PUSH
35331: LD_VAR 0 4
35335: PPUSH
35336: LD_INT 3
35338: PPUSH
35339: CALL_OW 275
35343: PUSH
35344: LD_VAR 0 5
35348: PUSH
35349: LD_INT 3
35351: ARRAY
35352: GREATEREQUAL
35353: AND
35354: ST_TO_ADDR
// end ;
35355: LD_VAR 0 3
35359: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35360: LD_INT 0
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
// result := false ;
35373: LD_ADDR_VAR 0 8
35377: PUSH
35378: LD_INT 0
35380: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35381: LD_VAR 0 5
35385: NOT
35386: PUSH
35387: LD_VAR 0 1
35391: NOT
35392: OR
35393: PUSH
35394: LD_VAR 0 2
35398: NOT
35399: OR
35400: PUSH
35401: LD_VAR 0 3
35405: NOT
35406: OR
35407: IFFALSE 35411
// exit ;
35409: GO 36225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35411: LD_ADDR_VAR 0 14
35415: PUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: LD_VAR 0 2
35425: PPUSH
35426: LD_VAR 0 3
35430: PPUSH
35431: LD_VAR 0 4
35435: PPUSH
35436: LD_VAR 0 5
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PPUSH
35445: CALL_OW 248
35449: PPUSH
35450: LD_INT 0
35452: PPUSH
35453: CALL 37458 0 6
35457: ST_TO_ADDR
// if not hexes then
35458: LD_VAR 0 14
35462: NOT
35463: IFFALSE 35467
// exit ;
35465: GO 36225
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35467: LD_ADDR_VAR 0 17
35471: PUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: LD_INT 22
35479: PUSH
35480: LD_VAR 0 13
35484: PPUSH
35485: CALL_OW 255
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: LD_INT 30
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 30
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PPUSH
35526: CALL_OW 72
35530: ST_TO_ADDR
// for i = 1 to hexes do
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: DOUBLE
35537: LD_INT 1
35539: DEC
35540: ST_TO_ADDR
35541: LD_VAR 0 14
35545: PUSH
35546: FOR_TO
35547: IFFALSE 36223
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35549: LD_ADDR_VAR 0 13
35553: PUSH
35554: LD_VAR 0 14
35558: PUSH
35559: LD_VAR 0 9
35563: ARRAY
35564: PUSH
35565: LD_INT 1
35567: ARRAY
35568: PPUSH
35569: LD_VAR 0 14
35573: PUSH
35574: LD_VAR 0 9
35578: ARRAY
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: PPUSH
35584: CALL_OW 428
35588: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35589: LD_VAR 0 14
35593: PUSH
35594: LD_VAR 0 9
35598: ARRAY
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: LD_VAR 0 14
35608: PUSH
35609: LD_VAR 0 9
35613: ARRAY
35614: PUSH
35615: LD_INT 2
35617: ARRAY
35618: PPUSH
35619: CALL_OW 351
35623: PUSH
35624: LD_VAR 0 14
35628: PUSH
35629: LD_VAR 0 9
35633: ARRAY
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: PPUSH
35639: LD_VAR 0 14
35643: PUSH
35644: LD_VAR 0 9
35648: ARRAY
35649: PUSH
35650: LD_INT 2
35652: ARRAY
35653: PPUSH
35654: CALL_OW 488
35658: NOT
35659: OR
35660: PUSH
35661: LD_VAR 0 13
35665: PPUSH
35666: CALL_OW 247
35670: PUSH
35671: LD_INT 3
35673: EQUAL
35674: OR
35675: IFFALSE 35681
// exit ;
35677: POP
35678: POP
35679: GO 36225
// if not tmp then
35681: LD_VAR 0 13
35685: NOT
35686: IFFALSE 35690
// continue ;
35688: GO 35546
// result := true ;
35690: LD_ADDR_VAR 0 8
35694: PUSH
35695: LD_INT 1
35697: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35698: LD_VAR 0 6
35702: PUSH
35703: LD_VAR 0 13
35707: PPUSH
35708: CALL_OW 247
35712: PUSH
35713: LD_INT 2
35715: EQUAL
35716: AND
35717: PUSH
35718: LD_VAR 0 13
35722: PPUSH
35723: CALL_OW 263
35727: PUSH
35728: LD_INT 1
35730: EQUAL
35731: AND
35732: IFFALSE 35896
// begin if IsDrivenBy ( tmp ) then
35734: LD_VAR 0 13
35738: PPUSH
35739: CALL_OW 311
35743: IFFALSE 35747
// continue ;
35745: GO 35546
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35747: LD_VAR 0 6
35751: PPUSH
35752: LD_INT 3
35754: PUSH
35755: LD_INT 60
35757: PUSH
35758: EMPTY
35759: LIST
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 55
35770: PUSH
35771: EMPTY
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 72
35786: IFFALSE 35894
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35788: LD_ADDR_VAR 0 18
35792: PUSH
35793: LD_VAR 0 6
35797: PPUSH
35798: LD_INT 3
35800: PUSH
35801: LD_INT 60
35803: PUSH
35804: EMPTY
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 55
35816: PUSH
35817: EMPTY
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PPUSH
35828: CALL_OW 72
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: ST_TO_ADDR
// if IsInUnit ( driver ) then
35837: LD_VAR 0 18
35841: PPUSH
35842: CALL_OW 310
35846: IFFALSE 35857
// ComExit ( driver ) ;
35848: LD_VAR 0 18
35852: PPUSH
35853: CALL 61219 0 1
// AddComEnterUnit ( driver , tmp ) ;
35857: LD_VAR 0 18
35861: PPUSH
35862: LD_VAR 0 13
35866: PPUSH
35867: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35871: LD_VAR 0 18
35875: PPUSH
35876: LD_VAR 0 7
35880: PPUSH
35881: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35885: LD_VAR 0 18
35889: PPUSH
35890: CALL_OW 181
// end ; continue ;
35894: GO 35546
// end ; if not cleaners or not tmp in cleaners then
35896: LD_VAR 0 6
35900: NOT
35901: PUSH
35902: LD_VAR 0 13
35906: PUSH
35907: LD_VAR 0 6
35911: IN
35912: NOT
35913: OR
35914: IFFALSE 36221
// begin if dep then
35916: LD_VAR 0 17
35920: IFFALSE 36056
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35922: LD_ADDR_VAR 0 16
35926: PUSH
35927: LD_VAR 0 17
35931: PUSH
35932: LD_INT 1
35934: ARRAY
35935: PPUSH
35936: CALL_OW 250
35940: PPUSH
35941: LD_VAR 0 17
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: PPUSH
35950: CALL_OW 254
35954: PPUSH
35955: LD_INT 5
35957: PPUSH
35958: CALL_OW 272
35962: PUSH
35963: LD_VAR 0 17
35967: PUSH
35968: LD_INT 1
35970: ARRAY
35971: PPUSH
35972: CALL_OW 251
35976: PPUSH
35977: LD_VAR 0 17
35981: PUSH
35982: LD_INT 1
35984: ARRAY
35985: PPUSH
35986: CALL_OW 254
35990: PPUSH
35991: LD_INT 5
35993: PPUSH
35994: CALL_OW 273
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36003: LD_VAR 0 16
36007: PUSH
36008: LD_INT 1
36010: ARRAY
36011: PPUSH
36012: LD_VAR 0 16
36016: PUSH
36017: LD_INT 2
36019: ARRAY
36020: PPUSH
36021: CALL_OW 488
36025: IFFALSE 36056
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36027: LD_VAR 0 13
36031: PPUSH
36032: LD_VAR 0 16
36036: PUSH
36037: LD_INT 1
36039: ARRAY
36040: PPUSH
36041: LD_VAR 0 16
36045: PUSH
36046: LD_INT 2
36048: ARRAY
36049: PPUSH
36050: CALL_OW 111
// continue ;
36054: GO 35546
// end ; end ; r := GetDir ( tmp ) ;
36056: LD_ADDR_VAR 0 15
36060: PUSH
36061: LD_VAR 0 13
36065: PPUSH
36066: CALL_OW 254
36070: ST_TO_ADDR
// if r = 5 then
36071: LD_VAR 0 15
36075: PUSH
36076: LD_INT 5
36078: EQUAL
36079: IFFALSE 36089
// r := 0 ;
36081: LD_ADDR_VAR 0 15
36085: PUSH
36086: LD_INT 0
36088: ST_TO_ADDR
// for j = r to 5 do
36089: LD_ADDR_VAR 0 10
36093: PUSH
36094: DOUBLE
36095: LD_VAR 0 15
36099: DEC
36100: ST_TO_ADDR
36101: LD_INT 5
36103: PUSH
36104: FOR_TO
36105: IFFALSE 36219
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36107: LD_ADDR_VAR 0 11
36111: PUSH
36112: LD_VAR 0 13
36116: PPUSH
36117: CALL_OW 250
36121: PPUSH
36122: LD_VAR 0 10
36126: PPUSH
36127: LD_INT 2
36129: PPUSH
36130: CALL_OW 272
36134: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36135: LD_ADDR_VAR 0 12
36139: PUSH
36140: LD_VAR 0 13
36144: PPUSH
36145: CALL_OW 251
36149: PPUSH
36150: LD_VAR 0 10
36154: PPUSH
36155: LD_INT 2
36157: PPUSH
36158: CALL_OW 273
36162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36163: LD_VAR 0 11
36167: PPUSH
36168: LD_VAR 0 12
36172: PPUSH
36173: CALL_OW 488
36177: PUSH
36178: LD_VAR 0 11
36182: PPUSH
36183: LD_VAR 0 12
36187: PPUSH
36188: CALL_OW 428
36192: NOT
36193: AND
36194: IFFALSE 36217
// begin ComMoveXY ( tmp , _x , _y ) ;
36196: LD_VAR 0 13
36200: PPUSH
36201: LD_VAR 0 11
36205: PPUSH
36206: LD_VAR 0 12
36210: PPUSH
36211: CALL_OW 111
// break ;
36215: GO 36219
// end ; end ;
36217: GO 36104
36219: POP
36220: POP
// end ; end ;
36221: GO 35546
36223: POP
36224: POP
// end ;
36225: LD_VAR 0 8
36229: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36230: LD_INT 0
36232: PPUSH
// result := true ;
36233: LD_ADDR_VAR 0 3
36237: PUSH
36238: LD_INT 1
36240: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36241: LD_VAR 0 2
36245: PUSH
36246: LD_INT 24
36248: DOUBLE
36249: EQUAL
36250: IFTRUE 36260
36252: LD_INT 33
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36285
36260: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_INT 32
36268: PPUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 321
36278: PUSH
36279: LD_INT 2
36281: EQUAL
36282: ST_TO_ADDR
36283: GO 36601
36285: LD_INT 20
36287: DOUBLE
36288: EQUAL
36289: IFTRUE 36293
36291: GO 36318
36293: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36294: LD_ADDR_VAR 0 3
36298: PUSH
36299: LD_INT 6
36301: PPUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 321
36311: PUSH
36312: LD_INT 2
36314: EQUAL
36315: ST_TO_ADDR
36316: GO 36601
36318: LD_INT 22
36320: DOUBLE
36321: EQUAL
36322: IFTRUE 36332
36324: LD_INT 36
36326: DOUBLE
36327: EQUAL
36328: IFTRUE 36332
36330: GO 36357
36332: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_INT 15
36340: PPUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL_OW 321
36350: PUSH
36351: LD_INT 2
36353: EQUAL
36354: ST_TO_ADDR
36355: GO 36601
36357: LD_INT 30
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36365
36363: GO 36390
36365: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_INT 20
36373: PPUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 321
36383: PUSH
36384: LD_INT 2
36386: EQUAL
36387: ST_TO_ADDR
36388: GO 36601
36390: LD_INT 28
36392: DOUBLE
36393: EQUAL
36394: IFTRUE 36404
36396: LD_INT 21
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 36429
36404: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36405: LD_ADDR_VAR 0 3
36409: PUSH
36410: LD_INT 21
36412: PPUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 321
36422: PUSH
36423: LD_INT 2
36425: EQUAL
36426: ST_TO_ADDR
36427: GO 36601
36429: LD_INT 16
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36437
36435: GO 36462
36437: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36438: LD_ADDR_VAR 0 3
36442: PUSH
36443: LD_INT 84
36445: PPUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 321
36455: PUSH
36456: LD_INT 2
36458: EQUAL
36459: ST_TO_ADDR
36460: GO 36601
36462: LD_INT 19
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36476
36468: LD_INT 23
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36501
36476: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_INT 83
36484: PPUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 321
36494: PUSH
36495: LD_INT 2
36497: EQUAL
36498: ST_TO_ADDR
36499: GO 36601
36501: LD_INT 17
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36509
36507: GO 36534
36509: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_INT 39
36517: PPUSH
36518: LD_VAR 0 1
36522: PPUSH
36523: CALL_OW 321
36527: PUSH
36528: LD_INT 2
36530: EQUAL
36531: ST_TO_ADDR
36532: GO 36601
36534: LD_INT 18
36536: DOUBLE
36537: EQUAL
36538: IFTRUE 36542
36540: GO 36567
36542: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: LD_INT 40
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 321
36560: PUSH
36561: LD_INT 2
36563: EQUAL
36564: ST_TO_ADDR
36565: GO 36601
36567: LD_INT 27
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 36600
36575: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_INT 35
36583: PPUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 321
36593: PUSH
36594: LD_INT 2
36596: EQUAL
36597: ST_TO_ADDR
36598: GO 36601
36600: POP
// end ;
36601: LD_VAR 0 3
36605: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36606: LD_INT 0
36608: PPUSH
36609: PPUSH
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
// result := false ;
36619: LD_ADDR_VAR 0 6
36623: PUSH
36624: LD_INT 0
36626: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36627: LD_VAR 0 1
36631: NOT
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 266
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: IN
36653: NOT
36654: OR
36655: PUSH
36656: LD_VAR 0 2
36660: NOT
36661: OR
36662: PUSH
36663: LD_VAR 0 5
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: LD_INT 4
36682: PUSH
36683: LD_INT 5
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: IN
36694: NOT
36695: OR
36696: PUSH
36697: LD_VAR 0 3
36701: PPUSH
36702: LD_VAR 0 4
36706: PPUSH
36707: CALL_OW 488
36711: NOT
36712: OR
36713: IFFALSE 36717
// exit ;
36715: GO 37453
// side := GetSide ( depot ) ;
36717: LD_ADDR_VAR 0 9
36721: PUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 255
36731: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36732: LD_VAR 0 9
36736: PPUSH
36737: LD_VAR 0 2
36741: PPUSH
36742: CALL 36230 0 2
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 37453
// pom := GetBase ( depot ) ;
36751: LD_ADDR_VAR 0 10
36755: PUSH
36756: LD_VAR 0 1
36760: PPUSH
36761: CALL_OW 274
36765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36766: LD_ADDR_VAR 0 11
36770: PUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 1
36780: PPUSH
36781: CALL_OW 248
36785: PPUSH
36786: CALL_OW 450
36790: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36791: LD_VAR 0 10
36795: PPUSH
36796: LD_INT 1
36798: PPUSH
36799: CALL_OW 275
36803: PUSH
36804: LD_VAR 0 11
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: GREATEREQUAL
36813: PUSH
36814: LD_VAR 0 10
36818: PPUSH
36819: LD_INT 2
36821: PPUSH
36822: CALL_OW 275
36826: PUSH
36827: LD_VAR 0 11
36831: PUSH
36832: LD_INT 2
36834: ARRAY
36835: GREATEREQUAL
36836: AND
36837: PUSH
36838: LD_VAR 0 10
36842: PPUSH
36843: LD_INT 3
36845: PPUSH
36846: CALL_OW 275
36850: PUSH
36851: LD_VAR 0 11
36855: PUSH
36856: LD_INT 3
36858: ARRAY
36859: GREATEREQUAL
36860: AND
36861: NOT
36862: IFFALSE 36866
// exit ;
36864: GO 37453
// if GetBType ( depot ) = b_depot then
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 266
36875: PUSH
36876: LD_INT 0
36878: EQUAL
36879: IFFALSE 36891
// dist := 28 else
36881: LD_ADDR_VAR 0 14
36885: PUSH
36886: LD_INT 28
36888: ST_TO_ADDR
36889: GO 36899
// dist := 36 ;
36891: LD_ADDR_VAR 0 14
36895: PUSH
36896: LD_INT 36
36898: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36899: LD_VAR 0 1
36903: PPUSH
36904: LD_VAR 0 3
36908: PPUSH
36909: LD_VAR 0 4
36913: PPUSH
36914: CALL_OW 297
36918: PUSH
36919: LD_VAR 0 14
36923: GREATER
36924: IFFALSE 36928
// exit ;
36926: GO 37453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36928: LD_ADDR_VAR 0 12
36932: PUSH
36933: LD_VAR 0 2
36937: PPUSH
36938: LD_VAR 0 3
36942: PPUSH
36943: LD_VAR 0 4
36947: PPUSH
36948: LD_VAR 0 5
36952: PPUSH
36953: LD_VAR 0 1
36957: PPUSH
36958: CALL_OW 248
36962: PPUSH
36963: LD_INT 0
36965: PPUSH
36966: CALL 37458 0 6
36970: ST_TO_ADDR
// if not hexes then
36971: LD_VAR 0 12
36975: NOT
36976: IFFALSE 36980
// exit ;
36978: GO 37453
// hex := GetHexInfo ( x , y ) ;
36980: LD_ADDR_VAR 0 15
36984: PUSH
36985: LD_VAR 0 3
36989: PPUSH
36990: LD_VAR 0 4
36994: PPUSH
36995: CALL_OW 546
36999: ST_TO_ADDR
// if hex [ 1 ] then
37000: LD_VAR 0 15
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: IFFALSE 37012
// exit ;
37010: GO 37453
// height := hex [ 2 ] ;
37012: LD_ADDR_VAR 0 13
37016: PUSH
37017: LD_VAR 0 15
37021: PUSH
37022: LD_INT 2
37024: ARRAY
37025: ST_TO_ADDR
// for i = 1 to hexes do
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: DOUBLE
37032: LD_INT 1
37034: DEC
37035: ST_TO_ADDR
37036: LD_VAR 0 12
37040: PUSH
37041: FOR_TO
37042: IFFALSE 37372
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37044: LD_VAR 0 12
37048: PUSH
37049: LD_VAR 0 7
37053: ARRAY
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 12
37063: PUSH
37064: LD_VAR 0 7
37068: ARRAY
37069: PUSH
37070: LD_INT 2
37072: ARRAY
37073: PPUSH
37074: CALL_OW 488
37078: NOT
37079: PUSH
37080: LD_VAR 0 12
37084: PUSH
37085: LD_VAR 0 7
37089: ARRAY
37090: PUSH
37091: LD_INT 1
37093: ARRAY
37094: PPUSH
37095: LD_VAR 0 12
37099: PUSH
37100: LD_VAR 0 7
37104: ARRAY
37105: PUSH
37106: LD_INT 2
37108: ARRAY
37109: PPUSH
37110: CALL_OW 428
37114: PUSH
37115: LD_INT 0
37117: GREATER
37118: OR
37119: PUSH
37120: LD_VAR 0 12
37124: PUSH
37125: LD_VAR 0 7
37129: ARRAY
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: PPUSH
37135: LD_VAR 0 12
37139: PUSH
37140: LD_VAR 0 7
37144: ARRAY
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: PPUSH
37150: CALL_OW 351
37154: OR
37155: IFFALSE 37161
// exit ;
37157: POP
37158: POP
37159: GO 37453
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37161: LD_ADDR_VAR 0 8
37165: PUSH
37166: LD_VAR 0 12
37170: PUSH
37171: LD_VAR 0 7
37175: ARRAY
37176: PUSH
37177: LD_INT 1
37179: ARRAY
37180: PPUSH
37181: LD_VAR 0 12
37185: PUSH
37186: LD_VAR 0 7
37190: ARRAY
37191: PUSH
37192: LD_INT 2
37194: ARRAY
37195: PPUSH
37196: CALL_OW 546
37200: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37201: LD_VAR 0 8
37205: PUSH
37206: LD_INT 1
37208: ARRAY
37209: PUSH
37210: LD_VAR 0 8
37214: PUSH
37215: LD_INT 2
37217: ARRAY
37218: PUSH
37219: LD_VAR 0 13
37223: PUSH
37224: LD_INT 2
37226: PLUS
37227: GREATER
37228: OR
37229: PUSH
37230: LD_VAR 0 8
37234: PUSH
37235: LD_INT 2
37237: ARRAY
37238: PUSH
37239: LD_VAR 0 13
37243: PUSH
37244: LD_INT 2
37246: MINUS
37247: LESS
37248: OR
37249: PUSH
37250: LD_VAR 0 8
37254: PUSH
37255: LD_INT 3
37257: ARRAY
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: LD_INT 8
37264: PUSH
37265: LD_INT 9
37267: PUSH
37268: LD_INT 10
37270: PUSH
37271: LD_INT 11
37273: PUSH
37274: LD_INT 12
37276: PUSH
37277: LD_INT 13
37279: PUSH
37280: LD_INT 16
37282: PUSH
37283: LD_INT 17
37285: PUSH
37286: LD_INT 18
37288: PUSH
37289: LD_INT 19
37291: PUSH
37292: LD_INT 20
37294: PUSH
37295: LD_INT 21
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: IN
37313: NOT
37314: OR
37315: PUSH
37316: LD_VAR 0 8
37320: PUSH
37321: LD_INT 5
37323: ARRAY
37324: NOT
37325: OR
37326: PUSH
37327: LD_VAR 0 8
37331: PUSH
37332: LD_INT 6
37334: ARRAY
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 7
37344: PUSH
37345: LD_INT 9
37347: PUSH
37348: LD_INT 10
37350: PUSH
37351: LD_INT 11
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: IN
37362: NOT
37363: OR
37364: IFFALSE 37370
// exit ;
37366: POP
37367: POP
37368: GO 37453
// end ;
37370: GO 37041
37372: POP
37373: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37374: LD_VAR 0 9
37378: PPUSH
37379: LD_VAR 0 3
37383: PPUSH
37384: LD_VAR 0 4
37388: PPUSH
37389: LD_INT 20
37391: PPUSH
37392: CALL 29405 0 4
37396: PUSH
37397: LD_INT 4
37399: ARRAY
37400: IFFALSE 37404
// exit ;
37402: GO 37453
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37404: LD_VAR 0 2
37408: PUSH
37409: LD_INT 29
37411: PUSH
37412: LD_INT 30
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: IN
37419: PUSH
37420: LD_VAR 0 3
37424: PPUSH
37425: LD_VAR 0 4
37429: PPUSH
37430: LD_VAR 0 9
37434: PPUSH
37435: CALL_OW 440
37439: NOT
37440: AND
37441: IFFALSE 37445
// exit ;
37443: GO 37453
// result := true ;
37445: LD_ADDR_VAR 0 6
37449: PUSH
37450: LD_INT 1
37452: ST_TO_ADDR
// end ;
37453: LD_VAR 0 6
37457: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37458: LD_INT 0
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
// result = [ ] ;
37518: LD_ADDR_VAR 0 7
37522: PUSH
37523: EMPTY
37524: ST_TO_ADDR
// temp_list = [ ] ;
37525: LD_ADDR_VAR 0 9
37529: PUSH
37530: EMPTY
37531: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37532: LD_VAR 0 4
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 3
37548: PUSH
37549: LD_INT 4
37551: PUSH
37552: LD_INT 5
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: IN
37563: NOT
37564: PUSH
37565: LD_VAR 0 1
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: IN
37580: PUSH
37581: LD_VAR 0 5
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: IN
37600: NOT
37601: AND
37602: OR
37603: IFFALSE 37607
// exit ;
37605: GO 55998
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37607: LD_VAR 0 1
37611: PUSH
37612: LD_INT 6
37614: PUSH
37615: LD_INT 7
37617: PUSH
37618: LD_INT 8
37620: PUSH
37621: LD_INT 13
37623: PUSH
37624: LD_INT 12
37626: PUSH
37627: LD_INT 15
37629: PUSH
37630: LD_INT 11
37632: PUSH
37633: LD_INT 14
37635: PUSH
37636: LD_INT 10
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: IN
37650: IFFALSE 37660
// btype = b_lab ;
37652: LD_ADDR_VAR 0 1
37656: PUSH
37657: LD_INT 6
37659: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37660: LD_VAR 0 6
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: IN
37679: NOT
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 3
37697: PUSH
37698: LD_INT 6
37700: PUSH
37701: LD_INT 36
37703: PUSH
37704: LD_INT 4
37706: PUSH
37707: LD_INT 5
37709: PUSH
37710: LD_INT 31
37712: PUSH
37713: LD_INT 32
37715: PUSH
37716: LD_INT 33
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: IN
37732: NOT
37733: PUSH
37734: LD_VAR 0 6
37738: PUSH
37739: LD_INT 1
37741: EQUAL
37742: AND
37743: OR
37744: PUSH
37745: LD_VAR 0 1
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: IN
37760: NOT
37761: PUSH
37762: LD_VAR 0 6
37766: PUSH
37767: LD_INT 2
37769: EQUAL
37770: AND
37771: OR
37772: IFFALSE 37782
// mode = 0 ;
37774: LD_ADDR_VAR 0 6
37778: PUSH
37779: LD_INT 0
37781: ST_TO_ADDR
// case mode of 0 :
37782: LD_VAR 0 6
37786: PUSH
37787: LD_INT 0
37789: DOUBLE
37790: EQUAL
37791: IFTRUE 37795
37793: GO 49248
37795: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37796: LD_ADDR_VAR 0 11
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37989: LD_ADDR_VAR 0 12
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38185: LD_ADDR_VAR 0 13
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: LD_INT 3
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: NEG
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: NEG
38357: PUSH
38358: LD_INT 3
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38384: LD_ADDR_VAR 0 14
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 3
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38580: LD_ADDR_VAR 0 15
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38773: LD_ADDR_VAR 0 16
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 3
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 3
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38966: LD_ADDR_VAR 0 17
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39196: LD_ADDR_VAR 0 18
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39426: LD_ADDR_VAR 0 19
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39656: LD_ADDR_VAR 0 20
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39886: LD_ADDR_VAR 0 21
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40116: LD_ADDR_VAR 0 22
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40346: LD_ADDR_VAR 0 23
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 3
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 3
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40626: LD_ADDR_VAR 0 24
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40902: LD_ADDR_VAR 0 25
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41176: LD_ADDR_VAR 0 26
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41452: LD_ADDR_VAR 0 27
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 3
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: NEG
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41732: LD_ADDR_VAR 0 28
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 3
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42014: LD_ADDR_VAR 0 29
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42293: LD_ADDR_VAR 0 30
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42571: LD_ADDR_VAR 0 31
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: LD_INT 3
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42849: LD_ADDR_VAR 0 32
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 3
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: NEG
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43127: LD_ADDR_VAR 0 33
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43406: LD_ADDR_VAR 0 34
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43686: LD_ADDR_VAR 0 35
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43798: LD_ADDR_VAR 0 36
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43910: LD_ADDR_VAR 0 37
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44022: LD_ADDR_VAR 0 38
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44134: LD_ADDR_VAR 0 39
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44246: LD_ADDR_VAR 0 40
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44358: LD_ADDR_VAR 0 41
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 3
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44708: LD_ADDR_VAR 0 42
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 3
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45058: LD_ADDR_VAR 0 43
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 3
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45406: LD_ADDR_VAR 0 44
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45756: LD_ADDR_VAR 0 45
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 3
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 3
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46106: LD_ADDR_VAR 0 46
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46454: LD_ADDR_VAR 0 47
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46605: LD_ADDR_VAR 0 48
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46752: LD_ADDR_VAR 0 49
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46896: LD_ADDR_VAR 0 50
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47040: LD_ADDR_VAR 0 51
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47187: LD_ADDR_VAR 0 52
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47338: LD_ADDR_VAR 0 53
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47568: LD_ADDR_VAR 0 54
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47798: LD_ADDR_VAR 0 55
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48028: LD_ADDR_VAR 0 56
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48258: LD_ADDR_VAR 0 57
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48488: LD_ADDR_VAR 0 58
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48718: LD_ADDR_VAR 0 59
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48806: LD_ADDR_VAR 0 60
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48894: LD_ADDR_VAR 0 61
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48982: LD_ADDR_VAR 0 62
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49070: LD_ADDR_VAR 0 63
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49158: LD_ADDR_VAR 0 64
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// end ; 1 :
49246: GO 55143
49248: LD_INT 1
49250: DOUBLE
49251: EQUAL
49252: IFTRUE 49256
49254: GO 51879
49256: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49257: LD_ADDR_VAR 0 11
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49301: LD_ADDR_VAR 0 12
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49342: LD_ADDR_VAR 0 13
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49382: LD_ADDR_VAR 0 14
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49423: LD_ADDR_VAR 0 15
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49467: LD_ADDR_VAR 0 16
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49513: LD_ADDR_VAR 0 17
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49557: LD_ADDR_VAR 0 18
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49598: LD_ADDR_VAR 0 19
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 3
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49638: LD_ADDR_VAR 0 20
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49679: LD_ADDR_VAR 0 21
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49723: LD_ADDR_VAR 0 22
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49769: LD_ADDR_VAR 0 23
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49813: LD_ADDR_VAR 0 24
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 4
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49854: LD_ADDR_VAR 0 25
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 4
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49894: LD_ADDR_VAR 0 26
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49935: LD_ADDR_VAR 0 27
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 4
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49979: LD_ADDR_VAR 0 28
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 4
50010: NEG
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50025: LD_ADDR_VAR 0 29
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 4
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 5
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 5
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 4
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 6
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 6
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 5
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50180: LD_ADDR_VAR 0 30
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 4
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 4
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 5
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 5
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 5
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 6
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 6
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50323: LD_ADDR_VAR 0 31
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 4
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 4
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 5
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 5
50400: PUSH
50401: LD_INT 5
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 4
50410: PUSH
50411: LD_INT 5
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 6
50420: PUSH
50421: LD_INT 5
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 6
50430: PUSH
50431: LD_INT 6
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 5
50440: PUSH
50441: LD_INT 6
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50462: LD_ADDR_VAR 0 32
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 4
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 5
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 5
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 4
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 6
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 6
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 5
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50605: LD_ADDR_VAR 0 33
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 4
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 4
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 5
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 5
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 5
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 6
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 6
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50760: LD_ADDR_VAR 0 34
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: LD_INT 4
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 4
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: LD_INT 4
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 4
50839: NEG
50840: PUSH
50841: LD_INT 5
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 5
50851: NEG
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 5
50863: NEG
50864: PUSH
50865: LD_INT 5
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 5
50875: NEG
50876: PUSH
50877: LD_INT 6
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 6
50887: NEG
50888: PUSH
50889: LD_INT 5
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 6
50899: NEG
50900: PUSH
50901: LD_INT 6
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50923: LD_ADDR_VAR 0 41
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50967: LD_ADDR_VAR 0 42
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51008: LD_ADDR_VAR 0 43
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51048: LD_ADDR_VAR 0 44
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51089: LD_ADDR_VAR 0 45
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51133: LD_ADDR_VAR 0 46
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 3
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51179: LD_ADDR_VAR 0 47
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51212: LD_ADDR_VAR 0 48
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51243: LD_ADDR_VAR 0 49
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51272: LD_ADDR_VAR 0 50
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51301: LD_ADDR_VAR 0 51
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51332: LD_ADDR_VAR 0 52
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51365: LD_ADDR_VAR 0 53
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51409: LD_ADDR_VAR 0 54
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51450: LD_ADDR_VAR 0 55
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51490: LD_ADDR_VAR 0 56
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51531: LD_ADDR_VAR 0 57
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51575: LD_ADDR_VAR 0 58
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51621: LD_ADDR_VAR 0 59
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51665: LD_ADDR_VAR 0 60
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51706: LD_ADDR_VAR 0 61
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51746: LD_ADDR_VAR 0 62
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51787: LD_ADDR_VAR 0 63
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51831: LD_ADDR_VAR 0 64
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// end ; 2 :
51877: GO 55143
51879: LD_INT 2
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 55142
51887: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51888: LD_ADDR_VAR 0 29
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 5
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 5
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 4
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 5
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 4
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 4
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 4
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 5
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 5
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 4
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 5
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 4
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 4
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 4
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 4
52273: NEG
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 4
52285: NEG
52286: PUSH
52287: LD_INT 5
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: LD_INT 4
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 5
52333: NEG
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 5
52345: NEG
52346: PUSH
52347: LD_INT 5
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 5
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 5
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52426: LD_ADDR_VAR 0 30
52430: PUSH
52431: LD_INT 4
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 4
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 5
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 5
52463: PUSH
52464: LD_INT 5
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 4
52473: PUSH
52474: LD_INT 5
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: LD_INT 4
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 5
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 5
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 3
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 4
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 4
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 4
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 4
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 4
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 5
52672: NEG
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 5
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 5
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: LD_INT 3
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 4
52778: NEG
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 4
52790: NEG
52791: PUSH
52792: LD_INT 4
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 4
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 4
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 5
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 5
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52973: LD_ADDR_VAR 0 31
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 4
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 5
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 5
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 5
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 4
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 4
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 4
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: LD_INT 5
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 4
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 4
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 5
53235: NEG
53236: PUSH
53237: LD_INT 4
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: LD_INT 5
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: LD_INT 5
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 5
53271: NEG
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 4
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 4
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 5
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 5
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 5
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53523: LD_ADDR_VAR 0 32
53527: PUSH
53528: LD_INT 4
53530: NEG
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 5
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 5
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 4
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 4
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: NEG
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 4
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 4
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 5
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 3
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: LD_INT 4
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 4
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 5
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 5
53965: PUSH
53966: LD_INT 5
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 4
53975: PUSH
53976: LD_INT 5
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 5
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54070: LD_ADDR_VAR 0 33
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: LD_INT 5
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 4
54125: NEG
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 5
54137: NEG
54138: PUSH
54139: LD_INT 4
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: LD_INT 5
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 5
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 5
54173: NEG
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 4
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: LD_INT 4
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 4
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 5
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 4
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: LD_INT 4
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 4
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 5
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 5
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 5
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54608: LD_ADDR_VAR 0 34
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 5
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 4
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 5
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 4
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 4
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 4
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 4
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 5
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: LD_INT 5
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 4
54850: PUSH
54851: LD_INT 5
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: LD_INT 4
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 5
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 5
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 4
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 4
54993: NEG
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 4
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 5
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 5
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 5
55072: NEG
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// end ; end ;
55140: GO 55143
55142: POP
// case btype of b_depot , b_warehouse :
55143: LD_VAR 0 1
55147: PUSH
55148: LD_INT 0
55150: DOUBLE
55151: EQUAL
55152: IFTRUE 55162
55154: LD_INT 1
55156: DOUBLE
55157: EQUAL
55158: IFTRUE 55162
55160: GO 55363
55162: POP
// case nation of nation_american :
55163: LD_VAR 0 5
55167: PUSH
55168: LD_INT 1
55170: DOUBLE
55171: EQUAL
55172: IFTRUE 55176
55174: GO 55232
55176: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55177: LD_ADDR_VAR 0 9
55181: PUSH
55182: LD_VAR 0 11
55186: PUSH
55187: LD_VAR 0 12
55191: PUSH
55192: LD_VAR 0 13
55196: PUSH
55197: LD_VAR 0 14
55201: PUSH
55202: LD_VAR 0 15
55206: PUSH
55207: LD_VAR 0 16
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: PUSH
55220: LD_VAR 0 4
55224: PUSH
55225: LD_INT 1
55227: PLUS
55228: ARRAY
55229: ST_TO_ADDR
55230: GO 55361
55232: LD_INT 2
55234: DOUBLE
55235: EQUAL
55236: IFTRUE 55240
55238: GO 55296
55240: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55241: LD_ADDR_VAR 0 9
55245: PUSH
55246: LD_VAR 0 17
55250: PUSH
55251: LD_VAR 0 18
55255: PUSH
55256: LD_VAR 0 19
55260: PUSH
55261: LD_VAR 0 20
55265: PUSH
55266: LD_VAR 0 21
55270: PUSH
55271: LD_VAR 0 22
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: PUSH
55284: LD_VAR 0 4
55288: PUSH
55289: LD_INT 1
55291: PLUS
55292: ARRAY
55293: ST_TO_ADDR
55294: GO 55361
55296: LD_INT 3
55298: DOUBLE
55299: EQUAL
55300: IFTRUE 55304
55302: GO 55360
55304: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55305: LD_ADDR_VAR 0 9
55309: PUSH
55310: LD_VAR 0 23
55314: PUSH
55315: LD_VAR 0 24
55319: PUSH
55320: LD_VAR 0 25
55324: PUSH
55325: LD_VAR 0 26
55329: PUSH
55330: LD_VAR 0 27
55334: PUSH
55335: LD_VAR 0 28
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: PUSH
55348: LD_VAR 0 4
55352: PUSH
55353: LD_INT 1
55355: PLUS
55356: ARRAY
55357: ST_TO_ADDR
55358: GO 55361
55360: POP
55361: GO 55916
55363: LD_INT 2
55365: DOUBLE
55366: EQUAL
55367: IFTRUE 55377
55369: LD_INT 3
55371: DOUBLE
55372: EQUAL
55373: IFTRUE 55377
55375: GO 55433
55377: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55378: LD_ADDR_VAR 0 9
55382: PUSH
55383: LD_VAR 0 29
55387: PUSH
55388: LD_VAR 0 30
55392: PUSH
55393: LD_VAR 0 31
55397: PUSH
55398: LD_VAR 0 32
55402: PUSH
55403: LD_VAR 0 33
55407: PUSH
55408: LD_VAR 0 34
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: PUSH
55421: LD_VAR 0 4
55425: PUSH
55426: LD_INT 1
55428: PLUS
55429: ARRAY
55430: ST_TO_ADDR
55431: GO 55916
55433: LD_INT 16
55435: DOUBLE
55436: EQUAL
55437: IFTRUE 55495
55439: LD_INT 17
55441: DOUBLE
55442: EQUAL
55443: IFTRUE 55495
55445: LD_INT 18
55447: DOUBLE
55448: EQUAL
55449: IFTRUE 55495
55451: LD_INT 19
55453: DOUBLE
55454: EQUAL
55455: IFTRUE 55495
55457: LD_INT 22
55459: DOUBLE
55460: EQUAL
55461: IFTRUE 55495
55463: LD_INT 20
55465: DOUBLE
55466: EQUAL
55467: IFTRUE 55495
55469: LD_INT 21
55471: DOUBLE
55472: EQUAL
55473: IFTRUE 55495
55475: LD_INT 23
55477: DOUBLE
55478: EQUAL
55479: IFTRUE 55495
55481: LD_INT 24
55483: DOUBLE
55484: EQUAL
55485: IFTRUE 55495
55487: LD_INT 25
55489: DOUBLE
55490: EQUAL
55491: IFTRUE 55495
55493: GO 55551
55495: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55496: LD_ADDR_VAR 0 9
55500: PUSH
55501: LD_VAR 0 35
55505: PUSH
55506: LD_VAR 0 36
55510: PUSH
55511: LD_VAR 0 37
55515: PUSH
55516: LD_VAR 0 38
55520: PUSH
55521: LD_VAR 0 39
55525: PUSH
55526: LD_VAR 0 40
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: PUSH
55539: LD_VAR 0 4
55543: PUSH
55544: LD_INT 1
55546: PLUS
55547: ARRAY
55548: ST_TO_ADDR
55549: GO 55916
55551: LD_INT 6
55553: DOUBLE
55554: EQUAL
55555: IFTRUE 55607
55557: LD_INT 7
55559: DOUBLE
55560: EQUAL
55561: IFTRUE 55607
55563: LD_INT 8
55565: DOUBLE
55566: EQUAL
55567: IFTRUE 55607
55569: LD_INT 13
55571: DOUBLE
55572: EQUAL
55573: IFTRUE 55607
55575: LD_INT 12
55577: DOUBLE
55578: EQUAL
55579: IFTRUE 55607
55581: LD_INT 15
55583: DOUBLE
55584: EQUAL
55585: IFTRUE 55607
55587: LD_INT 11
55589: DOUBLE
55590: EQUAL
55591: IFTRUE 55607
55593: LD_INT 14
55595: DOUBLE
55596: EQUAL
55597: IFTRUE 55607
55599: LD_INT 10
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55607
55605: GO 55663
55607: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55608: LD_ADDR_VAR 0 9
55612: PUSH
55613: LD_VAR 0 41
55617: PUSH
55618: LD_VAR 0 42
55622: PUSH
55623: LD_VAR 0 43
55627: PUSH
55628: LD_VAR 0 44
55632: PUSH
55633: LD_VAR 0 45
55637: PUSH
55638: LD_VAR 0 46
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: PUSH
55651: LD_VAR 0 4
55655: PUSH
55656: LD_INT 1
55658: PLUS
55659: ARRAY
55660: ST_TO_ADDR
55661: GO 55916
55663: LD_INT 36
55665: DOUBLE
55666: EQUAL
55667: IFTRUE 55671
55669: GO 55727
55671: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55672: LD_ADDR_VAR 0 9
55676: PUSH
55677: LD_VAR 0 47
55681: PUSH
55682: LD_VAR 0 48
55686: PUSH
55687: LD_VAR 0 49
55691: PUSH
55692: LD_VAR 0 50
55696: PUSH
55697: LD_VAR 0 51
55701: PUSH
55702: LD_VAR 0 52
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: PUSH
55715: LD_VAR 0 4
55719: PUSH
55720: LD_INT 1
55722: PLUS
55723: ARRAY
55724: ST_TO_ADDR
55725: GO 55916
55727: LD_INT 4
55729: DOUBLE
55730: EQUAL
55731: IFTRUE 55753
55733: LD_INT 5
55735: DOUBLE
55736: EQUAL
55737: IFTRUE 55753
55739: LD_INT 34
55741: DOUBLE
55742: EQUAL
55743: IFTRUE 55753
55745: LD_INT 37
55747: DOUBLE
55748: EQUAL
55749: IFTRUE 55753
55751: GO 55809
55753: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55754: LD_ADDR_VAR 0 9
55758: PUSH
55759: LD_VAR 0 53
55763: PUSH
55764: LD_VAR 0 54
55768: PUSH
55769: LD_VAR 0 55
55773: PUSH
55774: LD_VAR 0 56
55778: PUSH
55779: LD_VAR 0 57
55783: PUSH
55784: LD_VAR 0 58
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: PUSH
55797: LD_VAR 0 4
55801: PUSH
55802: LD_INT 1
55804: PLUS
55805: ARRAY
55806: ST_TO_ADDR
55807: GO 55916
55809: LD_INT 31
55811: DOUBLE
55812: EQUAL
55813: IFTRUE 55859
55815: LD_INT 32
55817: DOUBLE
55818: EQUAL
55819: IFTRUE 55859
55821: LD_INT 33
55823: DOUBLE
55824: EQUAL
55825: IFTRUE 55859
55827: LD_INT 27
55829: DOUBLE
55830: EQUAL
55831: IFTRUE 55859
55833: LD_INT 26
55835: DOUBLE
55836: EQUAL
55837: IFTRUE 55859
55839: LD_INT 28
55841: DOUBLE
55842: EQUAL
55843: IFTRUE 55859
55845: LD_INT 29
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55859
55851: LD_INT 30
55853: DOUBLE
55854: EQUAL
55855: IFTRUE 55859
55857: GO 55915
55859: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55860: LD_ADDR_VAR 0 9
55864: PUSH
55865: LD_VAR 0 59
55869: PUSH
55870: LD_VAR 0 60
55874: PUSH
55875: LD_VAR 0 61
55879: PUSH
55880: LD_VAR 0 62
55884: PUSH
55885: LD_VAR 0 63
55889: PUSH
55890: LD_VAR 0 64
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: PUSH
55903: LD_VAR 0 4
55907: PUSH
55908: LD_INT 1
55910: PLUS
55911: ARRAY
55912: ST_TO_ADDR
55913: GO 55916
55915: POP
// temp_list2 = [ ] ;
55916: LD_ADDR_VAR 0 10
55920: PUSH
55921: EMPTY
55922: ST_TO_ADDR
// for i in temp_list do
55923: LD_ADDR_VAR 0 8
55927: PUSH
55928: LD_VAR 0 9
55932: PUSH
55933: FOR_IN
55934: IFFALSE 55986
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55936: LD_ADDR_VAR 0 10
55940: PUSH
55941: LD_VAR 0 10
55945: PUSH
55946: LD_VAR 0 8
55950: PUSH
55951: LD_INT 1
55953: ARRAY
55954: PUSH
55955: LD_VAR 0 2
55959: PLUS
55960: PUSH
55961: LD_VAR 0 8
55965: PUSH
55966: LD_INT 2
55968: ARRAY
55969: PUSH
55970: LD_VAR 0 3
55974: PLUS
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: ADD
55983: ST_TO_ADDR
55984: GO 55933
55986: POP
55987: POP
// result = temp_list2 ;
55988: LD_ADDR_VAR 0 7
55992: PUSH
55993: LD_VAR 0 10
55997: ST_TO_ADDR
// end ;
55998: LD_VAR 0 7
56002: RET
// export function EnemyInRange ( unit , dist ) ; begin
56003: LD_INT 0
56005: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56006: LD_ADDR_VAR 0 3
56010: PUSH
56011: LD_VAR 0 1
56015: PPUSH
56016: CALL_OW 255
56020: PPUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 250
56030: PPUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 251
56040: PPUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: CALL 29405 0 4
56050: PUSH
56051: LD_INT 4
56053: ARRAY
56054: ST_TO_ADDR
// end ;
56055: LD_VAR 0 3
56059: RET
// export function PlayerSeeMe ( unit ) ; begin
56060: LD_INT 0
56062: PPUSH
// result := See ( your_side , unit ) ;
56063: LD_ADDR_VAR 0 2
56067: PUSH
56068: LD_OWVAR 2
56072: PPUSH
56073: LD_VAR 0 1
56077: PPUSH
56078: CALL_OW 292
56082: ST_TO_ADDR
// end ;
56083: LD_VAR 0 2
56087: RET
// export function ReverseDir ( unit ) ; begin
56088: LD_INT 0
56090: PPUSH
// if not unit then
56091: LD_VAR 0 1
56095: NOT
56096: IFFALSE 56100
// exit ;
56098: GO 56123
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56100: LD_ADDR_VAR 0 2
56104: PUSH
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 254
56114: PUSH
56115: LD_INT 3
56117: PLUS
56118: PUSH
56119: LD_INT 6
56121: MOD
56122: ST_TO_ADDR
// end ;
56123: LD_VAR 0 2
56127: RET
// export function ReverseArray ( array ) ; var i ; begin
56128: LD_INT 0
56130: PPUSH
56131: PPUSH
// if not array then
56132: LD_VAR 0 1
56136: NOT
56137: IFFALSE 56141
// exit ;
56139: GO 56196
// result := [ ] ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: EMPTY
56147: ST_TO_ADDR
// for i := array downto 1 do
56148: LD_ADDR_VAR 0 3
56152: PUSH
56153: DOUBLE
56154: LD_VAR 0 1
56158: INC
56159: ST_TO_ADDR
56160: LD_INT 1
56162: PUSH
56163: FOR_DOWNTO
56164: IFFALSE 56194
// result := Join ( result , array [ i ] ) ;
56166: LD_ADDR_VAR 0 2
56170: PUSH
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 1
56180: PUSH
56181: LD_VAR 0 3
56185: ARRAY
56186: PPUSH
56187: CALL 60821 0 2
56191: ST_TO_ADDR
56192: GO 56163
56194: POP
56195: POP
// end ;
56196: LD_VAR 0 2
56200: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56201: LD_INT 0
56203: PPUSH
56204: PPUSH
56205: PPUSH
56206: PPUSH
56207: PPUSH
56208: PPUSH
// if not unit or not hexes then
56209: LD_VAR 0 1
56213: NOT
56214: PUSH
56215: LD_VAR 0 2
56219: NOT
56220: OR
56221: IFFALSE 56225
// exit ;
56223: GO 56348
// dist := 9999 ;
56225: LD_ADDR_VAR 0 5
56229: PUSH
56230: LD_INT 9999
56232: ST_TO_ADDR
// for i = 1 to hexes do
56233: LD_ADDR_VAR 0 4
56237: PUSH
56238: DOUBLE
56239: LD_INT 1
56241: DEC
56242: ST_TO_ADDR
56243: LD_VAR 0 2
56247: PUSH
56248: FOR_TO
56249: IFFALSE 56336
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56251: LD_ADDR_VAR 0 6
56255: PUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: LD_VAR 0 2
56265: PUSH
56266: LD_VAR 0 4
56270: ARRAY
56271: PUSH
56272: LD_INT 1
56274: ARRAY
56275: PPUSH
56276: LD_VAR 0 2
56280: PUSH
56281: LD_VAR 0 4
56285: ARRAY
56286: PUSH
56287: LD_INT 2
56289: ARRAY
56290: PPUSH
56291: CALL_OW 297
56295: ST_TO_ADDR
// if tdist < dist then
56296: LD_VAR 0 6
56300: PUSH
56301: LD_VAR 0 5
56305: LESS
56306: IFFALSE 56334
// begin hex := hexes [ i ] ;
56308: LD_ADDR_VAR 0 8
56312: PUSH
56313: LD_VAR 0 2
56317: PUSH
56318: LD_VAR 0 4
56322: ARRAY
56323: ST_TO_ADDR
// dist := tdist ;
56324: LD_ADDR_VAR 0 5
56328: PUSH
56329: LD_VAR 0 6
56333: ST_TO_ADDR
// end ; end ;
56334: GO 56248
56336: POP
56337: POP
// result := hex ;
56338: LD_ADDR_VAR 0 3
56342: PUSH
56343: LD_VAR 0 8
56347: ST_TO_ADDR
// end ;
56348: LD_VAR 0 3
56352: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56353: LD_INT 0
56355: PPUSH
56356: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56357: LD_VAR 0 1
56361: NOT
56362: PUSH
56363: LD_VAR 0 1
56367: PUSH
56368: LD_INT 21
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 23
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PPUSH
56392: CALL_OW 69
56396: IN
56397: NOT
56398: OR
56399: IFFALSE 56403
// exit ;
56401: GO 56450
// for i = 1 to 3 do
56403: LD_ADDR_VAR 0 3
56407: PUSH
56408: DOUBLE
56409: LD_INT 1
56411: DEC
56412: ST_TO_ADDR
56413: LD_INT 3
56415: PUSH
56416: FOR_TO
56417: IFFALSE 56448
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56419: LD_VAR 0 1
56423: PPUSH
56424: CALL_OW 250
56428: PPUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL_OW 251
56438: PPUSH
56439: LD_INT 1
56441: PPUSH
56442: CALL_OW 453
56446: GO 56416
56448: POP
56449: POP
// end ;
56450: LD_VAR 0 2
56454: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56455: LD_INT 0
56457: PPUSH
56458: PPUSH
56459: PPUSH
56460: PPUSH
56461: PPUSH
56462: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56463: LD_VAR 0 1
56467: NOT
56468: PUSH
56469: LD_VAR 0 2
56473: NOT
56474: OR
56475: PUSH
56476: LD_VAR 0 1
56480: PPUSH
56481: CALL_OW 314
56485: OR
56486: IFFALSE 56490
// exit ;
56488: GO 56931
// x := GetX ( enemy_unit ) ;
56490: LD_ADDR_VAR 0 7
56494: PUSH
56495: LD_VAR 0 2
56499: PPUSH
56500: CALL_OW 250
56504: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56505: LD_ADDR_VAR 0 8
56509: PUSH
56510: LD_VAR 0 2
56514: PPUSH
56515: CALL_OW 251
56519: ST_TO_ADDR
// if not x or not y then
56520: LD_VAR 0 7
56524: NOT
56525: PUSH
56526: LD_VAR 0 8
56530: NOT
56531: OR
56532: IFFALSE 56536
// exit ;
56534: GO 56931
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56536: LD_ADDR_VAR 0 6
56540: PUSH
56541: LD_VAR 0 7
56545: PPUSH
56546: LD_INT 0
56548: PPUSH
56549: LD_INT 4
56551: PPUSH
56552: CALL_OW 272
56556: PUSH
56557: LD_VAR 0 8
56561: PPUSH
56562: LD_INT 0
56564: PPUSH
56565: LD_INT 4
56567: PPUSH
56568: CALL_OW 273
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_VAR 0 7
56581: PPUSH
56582: LD_INT 1
56584: PPUSH
56585: LD_INT 4
56587: PPUSH
56588: CALL_OW 272
56592: PUSH
56593: LD_VAR 0 8
56597: PPUSH
56598: LD_INT 1
56600: PPUSH
56601: LD_INT 4
56603: PPUSH
56604: CALL_OW 273
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_VAR 0 7
56617: PPUSH
56618: LD_INT 2
56620: PPUSH
56621: LD_INT 4
56623: PPUSH
56624: CALL_OW 272
56628: PUSH
56629: LD_VAR 0 8
56633: PPUSH
56634: LD_INT 2
56636: PPUSH
56637: LD_INT 4
56639: PPUSH
56640: CALL_OW 273
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_VAR 0 7
56653: PPUSH
56654: LD_INT 3
56656: PPUSH
56657: LD_INT 4
56659: PPUSH
56660: CALL_OW 272
56664: PUSH
56665: LD_VAR 0 8
56669: PPUSH
56670: LD_INT 3
56672: PPUSH
56673: LD_INT 4
56675: PPUSH
56676: CALL_OW 273
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_VAR 0 7
56689: PPUSH
56690: LD_INT 4
56692: PPUSH
56693: LD_INT 4
56695: PPUSH
56696: CALL_OW 272
56700: PUSH
56701: LD_VAR 0 8
56705: PPUSH
56706: LD_INT 4
56708: PPUSH
56709: LD_INT 4
56711: PPUSH
56712: CALL_OW 273
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_VAR 0 7
56725: PPUSH
56726: LD_INT 5
56728: PPUSH
56729: LD_INT 4
56731: PPUSH
56732: CALL_OW 272
56736: PUSH
56737: LD_VAR 0 8
56741: PPUSH
56742: LD_INT 5
56744: PPUSH
56745: LD_INT 4
56747: PPUSH
56748: CALL_OW 273
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// for i = tmp downto 1 do
56765: LD_ADDR_VAR 0 4
56769: PUSH
56770: DOUBLE
56771: LD_VAR 0 6
56775: INC
56776: ST_TO_ADDR
56777: LD_INT 1
56779: PUSH
56780: FOR_DOWNTO
56781: IFFALSE 56882
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56783: LD_VAR 0 6
56787: PUSH
56788: LD_VAR 0 4
56792: ARRAY
56793: PUSH
56794: LD_INT 1
56796: ARRAY
56797: PPUSH
56798: LD_VAR 0 6
56802: PUSH
56803: LD_VAR 0 4
56807: ARRAY
56808: PUSH
56809: LD_INT 2
56811: ARRAY
56812: PPUSH
56813: CALL_OW 488
56817: NOT
56818: PUSH
56819: LD_VAR 0 6
56823: PUSH
56824: LD_VAR 0 4
56828: ARRAY
56829: PUSH
56830: LD_INT 1
56832: ARRAY
56833: PPUSH
56834: LD_VAR 0 6
56838: PUSH
56839: LD_VAR 0 4
56843: ARRAY
56844: PUSH
56845: LD_INT 2
56847: ARRAY
56848: PPUSH
56849: CALL_OW 428
56853: PUSH
56854: LD_INT 0
56856: NONEQUAL
56857: OR
56858: IFFALSE 56880
// tmp := Delete ( tmp , i ) ;
56860: LD_ADDR_VAR 0 6
56864: PUSH
56865: LD_VAR 0 6
56869: PPUSH
56870: LD_VAR 0 4
56874: PPUSH
56875: CALL_OW 3
56879: ST_TO_ADDR
56880: GO 56780
56882: POP
56883: POP
// j := GetClosestHex ( unit , tmp ) ;
56884: LD_ADDR_VAR 0 5
56888: PUSH
56889: LD_VAR 0 1
56893: PPUSH
56894: LD_VAR 0 6
56898: PPUSH
56899: CALL 56201 0 2
56903: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56904: LD_VAR 0 1
56908: PPUSH
56909: LD_VAR 0 5
56913: PUSH
56914: LD_INT 1
56916: ARRAY
56917: PPUSH
56918: LD_VAR 0 5
56922: PUSH
56923: LD_INT 2
56925: ARRAY
56926: PPUSH
56927: CALL_OW 111
// end ;
56931: LD_VAR 0 3
56935: RET
// export function PrepareApemanSoldier ( ) ; begin
56936: LD_INT 0
56938: PPUSH
// uc_nation := 0 ;
56939: LD_ADDR_OWVAR 21
56943: PUSH
56944: LD_INT 0
56946: ST_TO_ADDR
// hc_sex := sex_male ;
56947: LD_ADDR_OWVAR 27
56951: PUSH
56952: LD_INT 1
56954: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56955: LD_ADDR_OWVAR 28
56959: PUSH
56960: LD_INT 15
56962: ST_TO_ADDR
// hc_gallery :=  ;
56963: LD_ADDR_OWVAR 33
56967: PUSH
56968: LD_STRING 
56970: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56971: LD_ADDR_OWVAR 31
56975: PUSH
56976: LD_INT 0
56978: PPUSH
56979: LD_INT 3
56981: PPUSH
56982: CALL_OW 12
56986: PUSH
56987: LD_INT 0
56989: PPUSH
56990: LD_INT 3
56992: PPUSH
56993: CALL_OW 12
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// end ;
57010: LD_VAR 0 1
57014: RET
// export function PrepareApemanEngineer ( ) ; begin
57015: LD_INT 0
57017: PPUSH
// uc_nation := 0 ;
57018: LD_ADDR_OWVAR 21
57022: PUSH
57023: LD_INT 0
57025: ST_TO_ADDR
// hc_sex := sex_male ;
57026: LD_ADDR_OWVAR 27
57030: PUSH
57031: LD_INT 1
57033: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57034: LD_ADDR_OWVAR 28
57038: PUSH
57039: LD_INT 16
57041: ST_TO_ADDR
// hc_gallery :=  ;
57042: LD_ADDR_OWVAR 33
57046: PUSH
57047: LD_STRING 
57049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57050: LD_ADDR_OWVAR 31
57054: PUSH
57055: LD_INT 0
57057: PPUSH
57058: LD_INT 3
57060: PPUSH
57061: CALL_OW 12
57065: PUSH
57066: LD_INT 0
57068: PPUSH
57069: LD_INT 3
57071: PPUSH
57072: CALL_OW 12
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// end ;
57089: LD_VAR 0 1
57093: RET
// export function PrepareApeman ( agressivity ) ; begin
57094: LD_INT 0
57096: PPUSH
// uc_side := 0 ;
57097: LD_ADDR_OWVAR 20
57101: PUSH
57102: LD_INT 0
57104: ST_TO_ADDR
// uc_nation := 0 ;
57105: LD_ADDR_OWVAR 21
57109: PUSH
57110: LD_INT 0
57112: ST_TO_ADDR
// hc_sex := sex_male ;
57113: LD_ADDR_OWVAR 27
57117: PUSH
57118: LD_INT 1
57120: ST_TO_ADDR
// hc_class := class_apeman ;
57121: LD_ADDR_OWVAR 28
57125: PUSH
57126: LD_INT 12
57128: ST_TO_ADDR
// hc_gallery :=  ;
57129: LD_ADDR_OWVAR 33
57133: PUSH
57134: LD_STRING 
57136: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57137: LD_ADDR_OWVAR 35
57141: PUSH
57142: LD_VAR 0 1
57146: NEG
57147: PPUSH
57148: LD_VAR 0 1
57152: PPUSH
57153: CALL_OW 12
57157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57158: LD_ADDR_OWVAR 31
57162: PUSH
57163: LD_INT 0
57165: PPUSH
57166: LD_INT 3
57168: PPUSH
57169: CALL_OW 12
57173: PUSH
57174: LD_INT 0
57176: PPUSH
57177: LD_INT 3
57179: PPUSH
57180: CALL_OW 12
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// end ;
57197: LD_VAR 0 2
57201: RET
// export function PrepareTiger ( agressivity ) ; begin
57202: LD_INT 0
57204: PPUSH
// uc_side := 0 ;
57205: LD_ADDR_OWVAR 20
57209: PUSH
57210: LD_INT 0
57212: ST_TO_ADDR
// uc_nation := 0 ;
57213: LD_ADDR_OWVAR 21
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// hc_class := class_tiger ;
57221: LD_ADDR_OWVAR 28
57225: PUSH
57226: LD_INT 14
57228: ST_TO_ADDR
// hc_gallery :=  ;
57229: LD_ADDR_OWVAR 33
57233: PUSH
57234: LD_STRING 
57236: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57237: LD_ADDR_OWVAR 35
57241: PUSH
57242: LD_VAR 0 1
57246: NEG
57247: PPUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: CALL_OW 12
57257: ST_TO_ADDR
// end ;
57258: LD_VAR 0 2
57262: RET
// export function PrepareEnchidna ( ) ; begin
57263: LD_INT 0
57265: PPUSH
// uc_side := 0 ;
57266: LD_ADDR_OWVAR 20
57270: PUSH
57271: LD_INT 0
57273: ST_TO_ADDR
// uc_nation := 0 ;
57274: LD_ADDR_OWVAR 21
57278: PUSH
57279: LD_INT 0
57281: ST_TO_ADDR
// hc_class := class_baggie ;
57282: LD_ADDR_OWVAR 28
57286: PUSH
57287: LD_INT 13
57289: ST_TO_ADDR
// hc_gallery :=  ;
57290: LD_ADDR_OWVAR 33
57294: PUSH
57295: LD_STRING 
57297: ST_TO_ADDR
// end ;
57298: LD_VAR 0 1
57302: RET
// export function PrepareFrog ( ) ; begin
57303: LD_INT 0
57305: PPUSH
// uc_side := 0 ;
57306: LD_ADDR_OWVAR 20
57310: PUSH
57311: LD_INT 0
57313: ST_TO_ADDR
// uc_nation := 0 ;
57314: LD_ADDR_OWVAR 21
57318: PUSH
57319: LD_INT 0
57321: ST_TO_ADDR
// hc_class := class_frog ;
57322: LD_ADDR_OWVAR 28
57326: PUSH
57327: LD_INT 19
57329: ST_TO_ADDR
// hc_gallery :=  ;
57330: LD_ADDR_OWVAR 33
57334: PUSH
57335: LD_STRING 
57337: ST_TO_ADDR
// end ;
57338: LD_VAR 0 1
57342: RET
// export function PrepareFish ( ) ; begin
57343: LD_INT 0
57345: PPUSH
// uc_side := 0 ;
57346: LD_ADDR_OWVAR 20
57350: PUSH
57351: LD_INT 0
57353: ST_TO_ADDR
// uc_nation := 0 ;
57354: LD_ADDR_OWVAR 21
57358: PUSH
57359: LD_INT 0
57361: ST_TO_ADDR
// hc_class := class_fish ;
57362: LD_ADDR_OWVAR 28
57366: PUSH
57367: LD_INT 20
57369: ST_TO_ADDR
// hc_gallery :=  ;
57370: LD_ADDR_OWVAR 33
57374: PUSH
57375: LD_STRING 
57377: ST_TO_ADDR
// end ;
57378: LD_VAR 0 1
57382: RET
// export function PrepareBird ( ) ; begin
57383: LD_INT 0
57385: PPUSH
// uc_side := 0 ;
57386: LD_ADDR_OWVAR 20
57390: PUSH
57391: LD_INT 0
57393: ST_TO_ADDR
// uc_nation := 0 ;
57394: LD_ADDR_OWVAR 21
57398: PUSH
57399: LD_INT 0
57401: ST_TO_ADDR
// hc_class := class_phororhacos ;
57402: LD_ADDR_OWVAR 28
57406: PUSH
57407: LD_INT 18
57409: ST_TO_ADDR
// hc_gallery :=  ;
57410: LD_ADDR_OWVAR 33
57414: PUSH
57415: LD_STRING 
57417: ST_TO_ADDR
// end ;
57418: LD_VAR 0 1
57422: RET
// export function PrepareHorse ( ) ; begin
57423: LD_INT 0
57425: PPUSH
// uc_side := 0 ;
57426: LD_ADDR_OWVAR 20
57430: PUSH
57431: LD_INT 0
57433: ST_TO_ADDR
// uc_nation := 0 ;
57434: LD_ADDR_OWVAR 21
57438: PUSH
57439: LD_INT 0
57441: ST_TO_ADDR
// hc_class := class_horse ;
57442: LD_ADDR_OWVAR 28
57446: PUSH
57447: LD_INT 21
57449: ST_TO_ADDR
// hc_gallery :=  ;
57450: LD_ADDR_OWVAR 33
57454: PUSH
57455: LD_STRING 
57457: ST_TO_ADDR
// end ;
57458: LD_VAR 0 1
57462: RET
// export function PrepareMastodont ( ) ; begin
57463: LD_INT 0
57465: PPUSH
// uc_side := 0 ;
57466: LD_ADDR_OWVAR 20
57470: PUSH
57471: LD_INT 0
57473: ST_TO_ADDR
// uc_nation := 0 ;
57474: LD_ADDR_OWVAR 21
57478: PUSH
57479: LD_INT 0
57481: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57482: LD_ADDR_OWVAR 37
57486: PUSH
57487: LD_INT 31
57489: ST_TO_ADDR
// vc_control := control_rider ;
57490: LD_ADDR_OWVAR 38
57494: PUSH
57495: LD_INT 4
57497: ST_TO_ADDR
// end ;
57498: LD_VAR 0 1
57502: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57503: LD_INT 0
57505: PPUSH
57506: PPUSH
57507: PPUSH
// uc_side = 0 ;
57508: LD_ADDR_OWVAR 20
57512: PUSH
57513: LD_INT 0
57515: ST_TO_ADDR
// uc_nation = 0 ;
57516: LD_ADDR_OWVAR 21
57520: PUSH
57521: LD_INT 0
57523: ST_TO_ADDR
// InitHc_All ( ) ;
57524: CALL_OW 584
// InitVc ;
57528: CALL_OW 20
// if mastodonts then
57532: LD_VAR 0 6
57536: IFFALSE 57603
// for i = 1 to mastodonts do
57538: LD_ADDR_VAR 0 11
57542: PUSH
57543: DOUBLE
57544: LD_INT 1
57546: DEC
57547: ST_TO_ADDR
57548: LD_VAR 0 6
57552: PUSH
57553: FOR_TO
57554: IFFALSE 57601
// begin vc_chassis := 31 ;
57556: LD_ADDR_OWVAR 37
57560: PUSH
57561: LD_INT 31
57563: ST_TO_ADDR
// vc_control := control_rider ;
57564: LD_ADDR_OWVAR 38
57568: PUSH
57569: LD_INT 4
57571: ST_TO_ADDR
// animal := CreateVehicle ;
57572: LD_ADDR_VAR 0 12
57576: PUSH
57577: CALL_OW 45
57581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57582: LD_VAR 0 12
57586: PPUSH
57587: LD_VAR 0 8
57591: PPUSH
57592: LD_INT 0
57594: PPUSH
57595: CALL 59738 0 3
// end ;
57599: GO 57553
57601: POP
57602: POP
// if horses then
57603: LD_VAR 0 5
57607: IFFALSE 57674
// for i = 1 to horses do
57609: LD_ADDR_VAR 0 11
57613: PUSH
57614: DOUBLE
57615: LD_INT 1
57617: DEC
57618: ST_TO_ADDR
57619: LD_VAR 0 5
57623: PUSH
57624: FOR_TO
57625: IFFALSE 57672
// begin hc_class := 21 ;
57627: LD_ADDR_OWVAR 28
57631: PUSH
57632: LD_INT 21
57634: ST_TO_ADDR
// hc_gallery :=  ;
57635: LD_ADDR_OWVAR 33
57639: PUSH
57640: LD_STRING 
57642: ST_TO_ADDR
// animal := CreateHuman ;
57643: LD_ADDR_VAR 0 12
57647: PUSH
57648: CALL_OW 44
57652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57653: LD_VAR 0 12
57657: PPUSH
57658: LD_VAR 0 8
57662: PPUSH
57663: LD_INT 0
57665: PPUSH
57666: CALL 59738 0 3
// end ;
57670: GO 57624
57672: POP
57673: POP
// if birds then
57674: LD_VAR 0 1
57678: IFFALSE 57745
// for i = 1 to birds do
57680: LD_ADDR_VAR 0 11
57684: PUSH
57685: DOUBLE
57686: LD_INT 1
57688: DEC
57689: ST_TO_ADDR
57690: LD_VAR 0 1
57694: PUSH
57695: FOR_TO
57696: IFFALSE 57743
// begin hc_class = 18 ;
57698: LD_ADDR_OWVAR 28
57702: PUSH
57703: LD_INT 18
57705: ST_TO_ADDR
// hc_gallery =  ;
57706: LD_ADDR_OWVAR 33
57710: PUSH
57711: LD_STRING 
57713: ST_TO_ADDR
// animal := CreateHuman ;
57714: LD_ADDR_VAR 0 12
57718: PUSH
57719: CALL_OW 44
57723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57724: LD_VAR 0 12
57728: PPUSH
57729: LD_VAR 0 8
57733: PPUSH
57734: LD_INT 0
57736: PPUSH
57737: CALL 59738 0 3
// end ;
57741: GO 57695
57743: POP
57744: POP
// if tigers then
57745: LD_VAR 0 2
57749: IFFALSE 57833
// for i = 1 to tigers do
57751: LD_ADDR_VAR 0 11
57755: PUSH
57756: DOUBLE
57757: LD_INT 1
57759: DEC
57760: ST_TO_ADDR
57761: LD_VAR 0 2
57765: PUSH
57766: FOR_TO
57767: IFFALSE 57831
// begin hc_class = class_tiger ;
57769: LD_ADDR_OWVAR 28
57773: PUSH
57774: LD_INT 14
57776: ST_TO_ADDR
// hc_gallery =  ;
57777: LD_ADDR_OWVAR 33
57781: PUSH
57782: LD_STRING 
57784: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57785: LD_ADDR_OWVAR 35
57789: PUSH
57790: LD_INT 7
57792: NEG
57793: PPUSH
57794: LD_INT 7
57796: PPUSH
57797: CALL_OW 12
57801: ST_TO_ADDR
// animal := CreateHuman ;
57802: LD_ADDR_VAR 0 12
57806: PUSH
57807: CALL_OW 44
57811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57812: LD_VAR 0 12
57816: PPUSH
57817: LD_VAR 0 8
57821: PPUSH
57822: LD_INT 0
57824: PPUSH
57825: CALL 59738 0 3
// end ;
57829: GO 57766
57831: POP
57832: POP
// if apemans then
57833: LD_VAR 0 3
57837: IFFALSE 57960
// for i = 1 to apemans do
57839: LD_ADDR_VAR 0 11
57843: PUSH
57844: DOUBLE
57845: LD_INT 1
57847: DEC
57848: ST_TO_ADDR
57849: LD_VAR 0 3
57853: PUSH
57854: FOR_TO
57855: IFFALSE 57958
// begin hc_class = class_apeman ;
57857: LD_ADDR_OWVAR 28
57861: PUSH
57862: LD_INT 12
57864: ST_TO_ADDR
// hc_gallery =  ;
57865: LD_ADDR_OWVAR 33
57869: PUSH
57870: LD_STRING 
57872: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57873: LD_ADDR_OWVAR 35
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PPUSH
57882: LD_INT 2
57884: PPUSH
57885: CALL_OW 12
57889: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57890: LD_ADDR_OWVAR 31
57894: PUSH
57895: LD_INT 1
57897: PPUSH
57898: LD_INT 3
57900: PPUSH
57901: CALL_OW 12
57905: PUSH
57906: LD_INT 1
57908: PPUSH
57909: LD_INT 3
57911: PPUSH
57912: CALL_OW 12
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// animal := CreateHuman ;
57929: LD_ADDR_VAR 0 12
57933: PUSH
57934: CALL_OW 44
57938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57939: LD_VAR 0 12
57943: PPUSH
57944: LD_VAR 0 8
57948: PPUSH
57949: LD_INT 0
57951: PPUSH
57952: CALL 59738 0 3
// end ;
57956: GO 57854
57958: POP
57959: POP
// if enchidnas then
57960: LD_VAR 0 4
57964: IFFALSE 58031
// for i = 1 to enchidnas do
57966: LD_ADDR_VAR 0 11
57970: PUSH
57971: DOUBLE
57972: LD_INT 1
57974: DEC
57975: ST_TO_ADDR
57976: LD_VAR 0 4
57980: PUSH
57981: FOR_TO
57982: IFFALSE 58029
// begin hc_class = 13 ;
57984: LD_ADDR_OWVAR 28
57988: PUSH
57989: LD_INT 13
57991: ST_TO_ADDR
// hc_gallery =  ;
57992: LD_ADDR_OWVAR 33
57996: PUSH
57997: LD_STRING 
57999: ST_TO_ADDR
// animal := CreateHuman ;
58000: LD_ADDR_VAR 0 12
58004: PUSH
58005: CALL_OW 44
58009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58010: LD_VAR 0 12
58014: PPUSH
58015: LD_VAR 0 8
58019: PPUSH
58020: LD_INT 0
58022: PPUSH
58023: CALL 59738 0 3
// end ;
58027: GO 57981
58029: POP
58030: POP
// if fishes then
58031: LD_VAR 0 7
58035: IFFALSE 58102
// for i = 1 to fishes do
58037: LD_ADDR_VAR 0 11
58041: PUSH
58042: DOUBLE
58043: LD_INT 1
58045: DEC
58046: ST_TO_ADDR
58047: LD_VAR 0 7
58051: PUSH
58052: FOR_TO
58053: IFFALSE 58100
// begin hc_class = 20 ;
58055: LD_ADDR_OWVAR 28
58059: PUSH
58060: LD_INT 20
58062: ST_TO_ADDR
// hc_gallery =  ;
58063: LD_ADDR_OWVAR 33
58067: PUSH
58068: LD_STRING 
58070: ST_TO_ADDR
// animal := CreateHuman ;
58071: LD_ADDR_VAR 0 12
58075: PUSH
58076: CALL_OW 44
58080: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58081: LD_VAR 0 12
58085: PPUSH
58086: LD_VAR 0 9
58090: PPUSH
58091: LD_INT 0
58093: PPUSH
58094: CALL 59738 0 3
// end ;
58098: GO 58052
58100: POP
58101: POP
// end ;
58102: LD_VAR 0 10
58106: RET
// export function WantHeal ( sci , unit ) ; begin
58107: LD_INT 0
58109: PPUSH
// if GetTaskList ( sci ) > 0 then
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 437
58119: PUSH
58120: LD_INT 0
58122: GREATER
58123: IFFALSE 58193
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58125: LD_VAR 0 1
58129: PPUSH
58130: CALL_OW 437
58134: PUSH
58135: LD_INT 1
58137: ARRAY
58138: PUSH
58139: LD_INT 1
58141: ARRAY
58142: PUSH
58143: LD_STRING l
58145: EQUAL
58146: PUSH
58147: LD_VAR 0 1
58151: PPUSH
58152: CALL_OW 437
58156: PUSH
58157: LD_INT 1
58159: ARRAY
58160: PUSH
58161: LD_INT 4
58163: ARRAY
58164: PUSH
58165: LD_VAR 0 2
58169: EQUAL
58170: AND
58171: IFFALSE 58183
// result := true else
58173: LD_ADDR_VAR 0 3
58177: PUSH
58178: LD_INT 1
58180: ST_TO_ADDR
58181: GO 58191
// result := false ;
58183: LD_ADDR_VAR 0 3
58187: PUSH
58188: LD_INT 0
58190: ST_TO_ADDR
// end else
58191: GO 58201
// result := false ;
58193: LD_ADDR_VAR 0 3
58197: PUSH
58198: LD_INT 0
58200: ST_TO_ADDR
// end ;
58201: LD_VAR 0 3
58205: RET
// export function HealTarget ( sci ) ; begin
58206: LD_INT 0
58208: PPUSH
// if not sci then
58209: LD_VAR 0 1
58213: NOT
58214: IFFALSE 58218
// exit ;
58216: GO 58283
// result := 0 ;
58218: LD_ADDR_VAR 0 2
58222: PUSH
58223: LD_INT 0
58225: ST_TO_ADDR
// if GetTaskList ( sci ) then
58226: LD_VAR 0 1
58230: PPUSH
58231: CALL_OW 437
58235: IFFALSE 58283
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58237: LD_VAR 0 1
58241: PPUSH
58242: CALL_OW 437
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PUSH
58255: LD_STRING l
58257: EQUAL
58258: IFFALSE 58283
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58260: LD_ADDR_VAR 0 2
58264: PUSH
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL_OW 437
58274: PUSH
58275: LD_INT 1
58277: ARRAY
58278: PUSH
58279: LD_INT 4
58281: ARRAY
58282: ST_TO_ADDR
// end ;
58283: LD_VAR 0 2
58287: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58288: LD_INT 0
58290: PPUSH
58291: PPUSH
58292: PPUSH
58293: PPUSH
// if not base_units then
58294: LD_VAR 0 1
58298: NOT
58299: IFFALSE 58303
// exit ;
58301: GO 58390
// result := false ;
58303: LD_ADDR_VAR 0 2
58307: PUSH
58308: LD_INT 0
58310: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58311: LD_ADDR_VAR 0 5
58315: PUSH
58316: LD_VAR 0 1
58320: PPUSH
58321: LD_INT 21
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PPUSH
58331: CALL_OW 72
58335: ST_TO_ADDR
// if not tmp then
58336: LD_VAR 0 5
58340: NOT
58341: IFFALSE 58345
// exit ;
58343: GO 58390
// for i in tmp do
58345: LD_ADDR_VAR 0 3
58349: PUSH
58350: LD_VAR 0 5
58354: PUSH
58355: FOR_IN
58356: IFFALSE 58388
// begin result := EnemyInRange ( i , 22 ) ;
58358: LD_ADDR_VAR 0 2
58362: PUSH
58363: LD_VAR 0 3
58367: PPUSH
58368: LD_INT 22
58370: PPUSH
58371: CALL 56003 0 2
58375: ST_TO_ADDR
// if result then
58376: LD_VAR 0 2
58380: IFFALSE 58386
// exit ;
58382: POP
58383: POP
58384: GO 58390
// end ;
58386: GO 58355
58388: POP
58389: POP
// end ;
58390: LD_VAR 0 2
58394: RET
// export function FilterByTag ( units , tag ) ; begin
58395: LD_INT 0
58397: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: LD_INT 120
58410: PUSH
58411: LD_VAR 0 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PPUSH
58420: CALL_OW 72
58424: ST_TO_ADDR
// end ;
58425: LD_VAR 0 3
58429: RET
// export function IsDriver ( un ) ; begin
58430: LD_INT 0
58432: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58433: LD_ADDR_VAR 0 2
58437: PUSH
58438: LD_VAR 0 1
58442: PUSH
58443: LD_INT 55
58445: PUSH
58446: EMPTY
58447: LIST
58448: PPUSH
58449: CALL_OW 69
58453: IN
58454: ST_TO_ADDR
// end ;
58455: LD_VAR 0 2
58459: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58460: LD_INT 0
58462: PPUSH
58463: PPUSH
// list := [ ] ;
58464: LD_ADDR_VAR 0 5
58468: PUSH
58469: EMPTY
58470: ST_TO_ADDR
// case d of 0 :
58471: LD_VAR 0 3
58475: PUSH
58476: LD_INT 0
58478: DOUBLE
58479: EQUAL
58480: IFTRUE 58484
58482: GO 58617
58484: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58485: LD_ADDR_VAR 0 5
58489: PUSH
58490: LD_VAR 0 1
58494: PUSH
58495: LD_INT 4
58497: MINUS
58498: PUSH
58499: LD_VAR 0 2
58503: PUSH
58504: LD_INT 4
58506: MINUS
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: PUSH
58516: LD_VAR 0 1
58520: PUSH
58521: LD_INT 3
58523: MINUS
58524: PUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: PUSH
58538: LD_VAR 0 1
58542: PUSH
58543: LD_INT 4
58545: PLUS
58546: PUSH
58547: LD_VAR 0 2
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: PUSH
58560: LD_VAR 0 1
58564: PUSH
58565: LD_INT 3
58567: PLUS
58568: PUSH
58569: LD_VAR 0 2
58573: PUSH
58574: LD_INT 3
58576: PLUS
58577: PUSH
58578: LD_INT 5
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: PUSH
58586: LD_VAR 0 1
58590: PUSH
58591: LD_VAR 0 2
58595: PUSH
58596: LD_INT 4
58598: PLUS
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// end ; 1 :
58615: GO 59315
58617: LD_INT 1
58619: DOUBLE
58620: EQUAL
58621: IFTRUE 58625
58623: GO 58758
58625: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58626: LD_ADDR_VAR 0 5
58630: PUSH
58631: LD_VAR 0 1
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 4
58643: MINUS
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: PUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 3
58660: MINUS
58661: PUSH
58662: LD_VAR 0 2
58666: PUSH
58667: LD_INT 3
58669: MINUS
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: PUSH
58679: LD_VAR 0 1
58683: PUSH
58684: LD_INT 4
58686: MINUS
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: PUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_VAR 0 2
58710: PUSH
58711: LD_INT 3
58713: PLUS
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: LD_VAR 0 1
58727: PUSH
58728: LD_INT 4
58730: PLUS
58731: PUSH
58732: LD_VAR 0 2
58736: PUSH
58737: LD_INT 4
58739: PLUS
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// end ; 2 :
58756: GO 59315
58758: LD_INT 2
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58766
58764: GO 58895
58766: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58767: LD_ADDR_VAR 0 5
58771: PUSH
58772: LD_VAR 0 1
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: LD_INT 3
58784: MINUS
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: PUSH
58794: LD_VAR 0 1
58798: PUSH
58799: LD_INT 4
58801: PLUS
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 4
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: LD_VAR 0 2
58825: PUSH
58826: LD_INT 4
58828: PLUS
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_INT 3
58845: MINUS
58846: PUSH
58847: LD_VAR 0 2
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: LD_VAR 0 1
58864: PUSH
58865: LD_INT 4
58867: MINUS
58868: PUSH
58869: LD_VAR 0 2
58873: PUSH
58874: LD_INT 4
58876: MINUS
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// end ; 3 :
58893: GO 59315
58895: LD_INT 3
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 59036
58903: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: LD_VAR 0 1
58913: PUSH
58914: LD_INT 3
58916: PLUS
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: PUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_INT 4
58938: PLUS
58939: PUSH
58940: LD_VAR 0 2
58944: PUSH
58945: LD_INT 4
58947: PLUS
58948: PUSH
58949: LD_INT 5
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 4
58964: MINUS
58965: PUSH
58966: LD_VAR 0 2
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 4
58991: MINUS
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: LD_VAR 0 1
59005: PUSH
59006: LD_INT 3
59008: MINUS
59009: PUSH
59010: LD_VAR 0 2
59014: PUSH
59015: LD_INT 3
59017: MINUS
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// end ; 4 :
59034: GO 59315
59036: LD_INT 4
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59044
59042: GO 59177
59044: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59045: LD_ADDR_VAR 0 5
59049: PUSH
59050: LD_VAR 0 1
59054: PUSH
59055: LD_VAR 0 2
59059: PUSH
59060: LD_INT 4
59062: PLUS
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: PUSH
59072: LD_VAR 0 1
59076: PUSH
59077: LD_INT 3
59079: PLUS
59080: PUSH
59081: LD_VAR 0 2
59085: PUSH
59086: LD_INT 3
59088: PLUS
59089: PUSH
59090: LD_INT 5
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: PUSH
59098: LD_VAR 0 1
59102: PUSH
59103: LD_INT 4
59105: PLUS
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 4
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: PUSH
59120: LD_VAR 0 1
59124: PUSH
59125: LD_VAR 0 2
59129: PUSH
59130: LD_INT 3
59132: MINUS
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: PUSH
59142: LD_VAR 0 1
59146: PUSH
59147: LD_INT 4
59149: MINUS
59150: PUSH
59151: LD_VAR 0 2
59155: PUSH
59156: LD_INT 4
59158: MINUS
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// end ; 5 :
59175: GO 59315
59177: LD_INT 5
59179: DOUBLE
59180: EQUAL
59181: IFTRUE 59185
59183: GO 59314
59185: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59186: LD_ADDR_VAR 0 5
59190: PUSH
59191: LD_VAR 0 1
59195: PUSH
59196: LD_INT 4
59198: MINUS
59199: PUSH
59200: LD_VAR 0 2
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: PUSH
59213: LD_VAR 0 1
59217: PUSH
59218: LD_VAR 0 2
59222: PUSH
59223: LD_INT 4
59225: MINUS
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: PUSH
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 4
59242: PLUS
59243: PUSH
59244: LD_VAR 0 2
59248: PUSH
59249: LD_INT 4
59251: PLUS
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 3
59268: PLUS
59269: PUSH
59270: LD_VAR 0 2
59274: PUSH
59275: LD_INT 4
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: PUSH
59283: LD_VAR 0 1
59287: PUSH
59288: LD_VAR 0 2
59292: PUSH
59293: LD_INT 3
59295: PLUS
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// end ; end ;
59312: GO 59315
59314: POP
// result := list ;
59315: LD_ADDR_VAR 0 4
59319: PUSH
59320: LD_VAR 0 5
59324: ST_TO_ADDR
// end ;
59325: LD_VAR 0 4
59329: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59330: LD_INT 0
59332: PPUSH
59333: PPUSH
59334: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59335: LD_VAR 0 1
59339: NOT
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: LD_INT 4
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: IN
59364: NOT
59365: OR
59366: IFFALSE 59370
// exit ;
59368: GO 59462
// tmp := [ ] ;
59370: LD_ADDR_VAR 0 5
59374: PUSH
59375: EMPTY
59376: ST_TO_ADDR
// for i in units do
59377: LD_ADDR_VAR 0 4
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: FOR_IN
59388: IFFALSE 59431
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59390: LD_ADDR_VAR 0 5
59394: PUSH
59395: LD_VAR 0 5
59399: PPUSH
59400: LD_VAR 0 5
59404: PUSH
59405: LD_INT 1
59407: PLUS
59408: PPUSH
59409: LD_VAR 0 4
59413: PPUSH
59414: LD_VAR 0 2
59418: PPUSH
59419: CALL_OW 259
59423: PPUSH
59424: CALL_OW 2
59428: ST_TO_ADDR
59429: GO 59387
59431: POP
59432: POP
// if not tmp then
59433: LD_VAR 0 5
59437: NOT
59438: IFFALSE 59442
// exit ;
59440: GO 59462
// result := SortListByListDesc ( units , tmp ) ;
59442: LD_ADDR_VAR 0 3
59446: PUSH
59447: LD_VAR 0 1
59451: PPUSH
59452: LD_VAR 0 5
59456: PPUSH
59457: CALL_OW 77
59461: ST_TO_ADDR
// end ;
59462: LD_VAR 0 3
59466: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59467: LD_INT 0
59469: PPUSH
59470: PPUSH
59471: PPUSH
// result := false ;
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: LD_INT 0
59479: ST_TO_ADDR
// x := GetX ( building ) ;
59480: LD_ADDR_VAR 0 4
59484: PUSH
59485: LD_VAR 0 2
59489: PPUSH
59490: CALL_OW 250
59494: ST_TO_ADDR
// y := GetY ( building ) ;
59495: LD_ADDR_VAR 0 5
59499: PUSH
59500: LD_VAR 0 2
59504: PPUSH
59505: CALL_OW 251
59509: ST_TO_ADDR
// if not building or not x or not y then
59510: LD_VAR 0 2
59514: NOT
59515: PUSH
59516: LD_VAR 0 4
59520: NOT
59521: OR
59522: PUSH
59523: LD_VAR 0 5
59527: NOT
59528: OR
59529: IFFALSE 59533
// exit ;
59531: GO 59625
// if GetTaskList ( unit ) then
59533: LD_VAR 0 1
59537: PPUSH
59538: CALL_OW 437
59542: IFFALSE 59625
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59544: LD_STRING e
59546: PUSH
59547: LD_VAR 0 1
59551: PPUSH
59552: CALL_OW 437
59556: PUSH
59557: LD_INT 1
59559: ARRAY
59560: PUSH
59561: LD_INT 1
59563: ARRAY
59564: EQUAL
59565: PUSH
59566: LD_VAR 0 4
59570: PUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL_OW 437
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PUSH
59585: LD_INT 2
59587: ARRAY
59588: EQUAL
59589: AND
59590: PUSH
59591: LD_VAR 0 5
59595: PUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL_OW 437
59605: PUSH
59606: LD_INT 1
59608: ARRAY
59609: PUSH
59610: LD_INT 3
59612: ARRAY
59613: EQUAL
59614: AND
59615: IFFALSE 59625
// result := true end ;
59617: LD_ADDR_VAR 0 3
59621: PUSH
59622: LD_INT 1
59624: ST_TO_ADDR
// end ;
59625: LD_VAR 0 3
59629: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59630: LD_INT 0
59632: PPUSH
// result := false ;
59633: LD_ADDR_VAR 0 4
59637: PUSH
59638: LD_INT 0
59640: ST_TO_ADDR
// if GetTaskList ( unit ) then
59641: LD_VAR 0 1
59645: PPUSH
59646: CALL_OW 437
59650: IFFALSE 59733
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59652: LD_STRING M
59654: PUSH
59655: LD_VAR 0 1
59659: PPUSH
59660: CALL_OW 437
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PUSH
59669: LD_INT 1
59671: ARRAY
59672: EQUAL
59673: PUSH
59674: LD_VAR 0 2
59678: PUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: CALL_OW 437
59688: PUSH
59689: LD_INT 1
59691: ARRAY
59692: PUSH
59693: LD_INT 2
59695: ARRAY
59696: EQUAL
59697: AND
59698: PUSH
59699: LD_VAR 0 3
59703: PUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: CALL_OW 437
59713: PUSH
59714: LD_INT 1
59716: ARRAY
59717: PUSH
59718: LD_INT 3
59720: ARRAY
59721: EQUAL
59722: AND
59723: IFFALSE 59733
// result := true ;
59725: LD_ADDR_VAR 0 4
59729: PUSH
59730: LD_INT 1
59732: ST_TO_ADDR
// end ; end ;
59733: LD_VAR 0 4
59737: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59738: LD_INT 0
59740: PPUSH
59741: PPUSH
59742: PPUSH
59743: PPUSH
// if not unit or not area then
59744: LD_VAR 0 1
59748: NOT
59749: PUSH
59750: LD_VAR 0 2
59754: NOT
59755: OR
59756: IFFALSE 59760
// exit ;
59758: GO 59924
// tmp := AreaToList ( area , i ) ;
59760: LD_ADDR_VAR 0 6
59764: PUSH
59765: LD_VAR 0 2
59769: PPUSH
59770: LD_VAR 0 5
59774: PPUSH
59775: CALL_OW 517
59779: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59780: LD_ADDR_VAR 0 5
59784: PUSH
59785: DOUBLE
59786: LD_INT 1
59788: DEC
59789: ST_TO_ADDR
59790: LD_VAR 0 6
59794: PUSH
59795: LD_INT 1
59797: ARRAY
59798: PUSH
59799: FOR_TO
59800: IFFALSE 59922
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59802: LD_ADDR_VAR 0 7
59806: PUSH
59807: LD_VAR 0 6
59811: PUSH
59812: LD_INT 1
59814: ARRAY
59815: PUSH
59816: LD_VAR 0 5
59820: ARRAY
59821: PUSH
59822: LD_VAR 0 6
59826: PUSH
59827: LD_INT 2
59829: ARRAY
59830: PUSH
59831: LD_VAR 0 5
59835: ARRAY
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59841: LD_VAR 0 7
59845: PUSH
59846: LD_INT 1
59848: ARRAY
59849: PPUSH
59850: LD_VAR 0 7
59854: PUSH
59855: LD_INT 2
59857: ARRAY
59858: PPUSH
59859: CALL_OW 428
59863: PUSH
59864: LD_INT 0
59866: EQUAL
59867: IFFALSE 59920
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59869: LD_VAR 0 1
59873: PPUSH
59874: LD_VAR 0 7
59878: PUSH
59879: LD_INT 1
59881: ARRAY
59882: PPUSH
59883: LD_VAR 0 7
59887: PUSH
59888: LD_INT 2
59890: ARRAY
59891: PPUSH
59892: LD_VAR 0 3
59896: PPUSH
59897: CALL_OW 48
// result := IsPlaced ( unit ) ;
59901: LD_ADDR_VAR 0 4
59905: PUSH
59906: LD_VAR 0 1
59910: PPUSH
59911: CALL_OW 305
59915: ST_TO_ADDR
// exit ;
59916: POP
59917: POP
59918: GO 59924
// end ; end ;
59920: GO 59799
59922: POP
59923: POP
// end ;
59924: LD_VAR 0 4
59928: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59929: LD_INT 0
59931: PPUSH
59932: PPUSH
59933: PPUSH
// if not side or side > 8 then
59934: LD_VAR 0 1
59938: NOT
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: LD_INT 8
59947: GREATER
59948: OR
59949: IFFALSE 59953
// exit ;
59951: GO 60140
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59953: LD_ADDR_VAR 0 4
59957: PUSH
59958: LD_INT 22
59960: PUSH
59961: LD_VAR 0 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 21
59972: PUSH
59973: LD_INT 3
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PPUSH
59984: CALL_OW 69
59988: ST_TO_ADDR
// if not tmp then
59989: LD_VAR 0 4
59993: NOT
59994: IFFALSE 59998
// exit ;
59996: GO 60140
// enable_addtolog := true ;
59998: LD_ADDR_OWVAR 81
60002: PUSH
60003: LD_INT 1
60005: ST_TO_ADDR
// AddToLog ( [ ) ;
60006: LD_STRING [
60008: PPUSH
60009: CALL_OW 561
// for i in tmp do
60013: LD_ADDR_VAR 0 3
60017: PUSH
60018: LD_VAR 0 4
60022: PUSH
60023: FOR_IN
60024: IFFALSE 60131
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60026: LD_STRING [
60028: PUSH
60029: LD_VAR 0 3
60033: PPUSH
60034: CALL_OW 266
60038: STR
60039: PUSH
60040: LD_STRING , 
60042: STR
60043: PUSH
60044: LD_VAR 0 3
60048: PPUSH
60049: CALL_OW 250
60053: STR
60054: PUSH
60055: LD_STRING , 
60057: STR
60058: PUSH
60059: LD_VAR 0 3
60063: PPUSH
60064: CALL_OW 251
60068: STR
60069: PUSH
60070: LD_STRING , 
60072: STR
60073: PUSH
60074: LD_VAR 0 3
60078: PPUSH
60079: CALL_OW 254
60083: STR
60084: PUSH
60085: LD_STRING , 
60087: STR
60088: PUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: LD_INT 1
60096: PPUSH
60097: CALL_OW 268
60101: STR
60102: PUSH
60103: LD_STRING , 
60105: STR
60106: PUSH
60107: LD_VAR 0 3
60111: PPUSH
60112: LD_INT 2
60114: PPUSH
60115: CALL_OW 268
60119: STR
60120: PUSH
60121: LD_STRING ],
60123: STR
60124: PPUSH
60125: CALL_OW 561
// end ;
60129: GO 60023
60131: POP
60132: POP
// AddToLog ( ]; ) ;
60133: LD_STRING ];
60135: PPUSH
60136: CALL_OW 561
// end ;
60140: LD_VAR 0 2
60144: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60145: LD_INT 0
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
60151: PPUSH
// if not area or not rate or not max then
60152: LD_VAR 0 1
60156: NOT
60157: PUSH
60158: LD_VAR 0 2
60162: NOT
60163: OR
60164: PUSH
60165: LD_VAR 0 4
60169: NOT
60170: OR
60171: IFFALSE 60175
// exit ;
60173: GO 60364
// while 1 do
60175: LD_INT 1
60177: IFFALSE 60364
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60179: LD_ADDR_VAR 0 9
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_INT 1
60191: PPUSH
60192: CALL_OW 287
60196: PUSH
60197: LD_INT 10
60199: MUL
60200: ST_TO_ADDR
// r := rate / 10 ;
60201: LD_ADDR_VAR 0 7
60205: PUSH
60206: LD_VAR 0 2
60210: PUSH
60211: LD_INT 10
60213: DIVREAL
60214: ST_TO_ADDR
// time := 1 1$00 ;
60215: LD_ADDR_VAR 0 8
60219: PUSH
60220: LD_INT 2100
60222: ST_TO_ADDR
// if amount < min then
60223: LD_VAR 0 9
60227: PUSH
60228: LD_VAR 0 3
60232: LESS
60233: IFFALSE 60251
// r := r * 2 else
60235: LD_ADDR_VAR 0 7
60239: PUSH
60240: LD_VAR 0 7
60244: PUSH
60245: LD_INT 2
60247: MUL
60248: ST_TO_ADDR
60249: GO 60277
// if amount > max then
60251: LD_VAR 0 9
60255: PUSH
60256: LD_VAR 0 4
60260: GREATER
60261: IFFALSE 60277
// r := r / 2 ;
60263: LD_ADDR_VAR 0 7
60267: PUSH
60268: LD_VAR 0 7
60272: PUSH
60273: LD_INT 2
60275: DIVREAL
60276: ST_TO_ADDR
// time := time / r ;
60277: LD_ADDR_VAR 0 8
60281: PUSH
60282: LD_VAR 0 8
60286: PUSH
60287: LD_VAR 0 7
60291: DIVREAL
60292: ST_TO_ADDR
// if time < 0 then
60293: LD_VAR 0 8
60297: PUSH
60298: LD_INT 0
60300: LESS
60301: IFFALSE 60318
// time := time * - 1 ;
60303: LD_ADDR_VAR 0 8
60307: PUSH
60308: LD_VAR 0 8
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: MUL
60317: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60318: LD_VAR 0 8
60322: PUSH
60323: LD_INT 35
60325: PPUSH
60326: LD_INT 875
60328: PPUSH
60329: CALL_OW 12
60333: PLUS
60334: PPUSH
60335: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60339: LD_INT 1
60341: PPUSH
60342: LD_INT 5
60344: PPUSH
60345: CALL_OW 12
60349: PPUSH
60350: LD_VAR 0 1
60354: PPUSH
60355: LD_INT 1
60357: PPUSH
60358: CALL_OW 55
// end ;
60362: GO 60175
// end ;
60364: LD_VAR 0 5
60368: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60369: LD_INT 0
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
// if not turrets or not factories then
60379: LD_VAR 0 1
60383: NOT
60384: PUSH
60385: LD_VAR 0 2
60389: NOT
60390: OR
60391: IFFALSE 60395
// exit ;
60393: GO 60702
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60395: LD_ADDR_VAR 0 10
60399: PUSH
60400: LD_INT 5
60402: PUSH
60403: LD_INT 6
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: LD_INT 5
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 24
60437: PUSH
60438: LD_INT 25
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 23
60447: PUSH
60448: LD_INT 27
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 42
60461: PUSH
60462: LD_INT 43
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 44
60471: PUSH
60472: LD_INT 46
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 45
60481: PUSH
60482: LD_INT 47
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// result := [ ] ;
60499: LD_ADDR_VAR 0 3
60503: PUSH
60504: EMPTY
60505: ST_TO_ADDR
// for i in turrets do
60506: LD_ADDR_VAR 0 4
60510: PUSH
60511: LD_VAR 0 1
60515: PUSH
60516: FOR_IN
60517: IFFALSE 60700
// begin nat := GetNation ( i ) ;
60519: LD_ADDR_VAR 0 7
60523: PUSH
60524: LD_VAR 0 4
60528: PPUSH
60529: CALL_OW 248
60533: ST_TO_ADDR
// weapon := 0 ;
60534: LD_ADDR_VAR 0 8
60538: PUSH
60539: LD_INT 0
60541: ST_TO_ADDR
// if not nat then
60542: LD_VAR 0 7
60546: NOT
60547: IFFALSE 60551
// continue ;
60549: GO 60516
// for j in list [ nat ] do
60551: LD_ADDR_VAR 0 5
60555: PUSH
60556: LD_VAR 0 10
60560: PUSH
60561: LD_VAR 0 7
60565: ARRAY
60566: PUSH
60567: FOR_IN
60568: IFFALSE 60609
// if GetBWeapon ( i ) = j [ 1 ] then
60570: LD_VAR 0 4
60574: PPUSH
60575: CALL_OW 269
60579: PUSH
60580: LD_VAR 0 5
60584: PUSH
60585: LD_INT 1
60587: ARRAY
60588: EQUAL
60589: IFFALSE 60607
// begin weapon := j [ 2 ] ;
60591: LD_ADDR_VAR 0 8
60595: PUSH
60596: LD_VAR 0 5
60600: PUSH
60601: LD_INT 2
60603: ARRAY
60604: ST_TO_ADDR
// break ;
60605: GO 60609
// end ;
60607: GO 60567
60609: POP
60610: POP
// if not weapon then
60611: LD_VAR 0 8
60615: NOT
60616: IFFALSE 60620
// continue ;
60618: GO 60516
// for k in factories do
60620: LD_ADDR_VAR 0 6
60624: PUSH
60625: LD_VAR 0 2
60629: PUSH
60630: FOR_IN
60631: IFFALSE 60696
// begin weapons := AvailableWeaponList ( k ) ;
60633: LD_ADDR_VAR 0 9
60637: PUSH
60638: LD_VAR 0 6
60642: PPUSH
60643: CALL_OW 478
60647: ST_TO_ADDR
// if not weapons then
60648: LD_VAR 0 9
60652: NOT
60653: IFFALSE 60657
// continue ;
60655: GO 60630
// if weapon in weapons then
60657: LD_VAR 0 8
60661: PUSH
60662: LD_VAR 0 9
60666: IN
60667: IFFALSE 60694
// begin result := [ i , weapon ] ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 4
60678: PUSH
60679: LD_VAR 0 8
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// exit ;
60688: POP
60689: POP
60690: POP
60691: POP
60692: GO 60702
// end ; end ;
60694: GO 60630
60696: POP
60697: POP
// end ;
60698: GO 60516
60700: POP
60701: POP
// end ;
60702: LD_VAR 0 3
60706: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60707: LD_INT 0
60709: PPUSH
// if not side or side > 8 then
60710: LD_VAR 0 3
60714: NOT
60715: PUSH
60716: LD_VAR 0 3
60720: PUSH
60721: LD_INT 8
60723: GREATER
60724: OR
60725: IFFALSE 60729
// exit ;
60727: GO 60788
// if not range then
60729: LD_VAR 0 4
60733: NOT
60734: IFFALSE 60745
// range := - 12 ;
60736: LD_ADDR_VAR 0 4
60740: PUSH
60741: LD_INT 12
60743: NEG
60744: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60745: LD_VAR 0 1
60749: PPUSH
60750: LD_VAR 0 2
60754: PPUSH
60755: LD_VAR 0 3
60759: PPUSH
60760: LD_VAR 0 4
60764: PPUSH
60765: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60769: LD_VAR 0 1
60773: PPUSH
60774: LD_VAR 0 2
60778: PPUSH
60779: LD_VAR 0 3
60783: PPUSH
60784: CALL_OW 331
// end ;
60788: LD_VAR 0 5
60792: RET
// export function Video ( mode ) ; begin
60793: LD_INT 0
60795: PPUSH
// ingame_video = mode ;
60796: LD_ADDR_OWVAR 52
60800: PUSH
60801: LD_VAR 0 1
60805: ST_TO_ADDR
// interface_hidden = mode ;
60806: LD_ADDR_OWVAR 54
60810: PUSH
60811: LD_VAR 0 1
60815: ST_TO_ADDR
// end ;
60816: LD_VAR 0 2
60820: RET
// export function Join ( array , element ) ; begin
60821: LD_INT 0
60823: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60824: LD_ADDR_VAR 0 3
60828: PUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_INT 1
60841: PLUS
60842: PPUSH
60843: LD_VAR 0 2
60847: PPUSH
60848: CALL_OW 1
60852: ST_TO_ADDR
// end ;
60853: LD_VAR 0 3
60857: RET
// export function JoinUnion ( array , element ) ; begin
60858: LD_INT 0
60860: PPUSH
// result := array union element ;
60861: LD_ADDR_VAR 0 3
60865: PUSH
60866: LD_VAR 0 1
60870: PUSH
60871: LD_VAR 0 2
60875: UNION
60876: ST_TO_ADDR
// end ;
60877: LD_VAR 0 3
60881: RET
// export function GetBehemoths ( side ) ; begin
60882: LD_INT 0
60884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60885: LD_ADDR_VAR 0 2
60889: PUSH
60890: LD_INT 22
60892: PUSH
60893: LD_VAR 0 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 31
60904: PUSH
60905: LD_INT 25
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PPUSH
60916: CALL_OW 69
60920: ST_TO_ADDR
// end ;
60921: LD_VAR 0 2
60925: RET
// export function Shuffle ( array ) ; var i , index ; begin
60926: LD_INT 0
60928: PPUSH
60929: PPUSH
60930: PPUSH
// result := [ ] ;
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: EMPTY
60937: ST_TO_ADDR
// if not array then
60938: LD_VAR 0 1
60942: NOT
60943: IFFALSE 60947
// exit ;
60945: GO 61046
// Randomize ;
60947: CALL_OW 10
// for i = array downto 1 do
60951: LD_ADDR_VAR 0 3
60955: PUSH
60956: DOUBLE
60957: LD_VAR 0 1
60961: INC
60962: ST_TO_ADDR
60963: LD_INT 1
60965: PUSH
60966: FOR_DOWNTO
60967: IFFALSE 61044
// begin index := rand ( 1 , array ) ;
60969: LD_ADDR_VAR 0 4
60973: PUSH
60974: LD_INT 1
60976: PPUSH
60977: LD_VAR 0 1
60981: PPUSH
60982: CALL_OW 12
60986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60987: LD_ADDR_VAR 0 2
60991: PUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 1
61004: PLUS
61005: PPUSH
61006: LD_VAR 0 1
61010: PUSH
61011: LD_VAR 0 4
61015: ARRAY
61016: PPUSH
61017: CALL_OW 2
61021: ST_TO_ADDR
// array := Delete ( array , index ) ;
61022: LD_ADDR_VAR 0 1
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: LD_VAR 0 4
61036: PPUSH
61037: CALL_OW 3
61041: ST_TO_ADDR
// end ;
61042: GO 60966
61044: POP
61045: POP
// end ;
61046: LD_VAR 0 2
61050: RET
// export function GetBaseMaterials ( base ) ; begin
61051: LD_INT 0
61053: PPUSH
// result := [ 0 , 0 , 0 ] ;
61054: LD_ADDR_VAR 0 2
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// if not base then
61073: LD_VAR 0 1
61077: NOT
61078: IFFALSE 61082
// exit ;
61080: GO 61131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61082: LD_ADDR_VAR 0 2
61086: PUSH
61087: LD_VAR 0 1
61091: PPUSH
61092: LD_INT 1
61094: PPUSH
61095: CALL_OW 275
61099: PUSH
61100: LD_VAR 0 1
61104: PPUSH
61105: LD_INT 2
61107: PPUSH
61108: CALL_OW 275
61112: PUSH
61113: LD_VAR 0 1
61117: PPUSH
61118: LD_INT 3
61120: PPUSH
61121: CALL_OW 275
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: ST_TO_ADDR
// end ;
61131: LD_VAR 0 2
61135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61136: LD_INT 0
61138: PPUSH
61139: PPUSH
// result := array ;
61140: LD_ADDR_VAR 0 3
61144: PUSH
61145: LD_VAR 0 1
61149: ST_TO_ADDR
// if size >= result then
61150: LD_VAR 0 2
61154: PUSH
61155: LD_VAR 0 3
61159: GREATEREQUAL
61160: IFFALSE 61164
// exit ;
61162: GO 61214
// if size then
61164: LD_VAR 0 2
61168: IFFALSE 61214
// for i := array downto size do
61170: LD_ADDR_VAR 0 4
61174: PUSH
61175: DOUBLE
61176: LD_VAR 0 1
61180: INC
61181: ST_TO_ADDR
61182: LD_VAR 0 2
61186: PUSH
61187: FOR_DOWNTO
61188: IFFALSE 61212
// result := Delete ( result , result ) ;
61190: LD_ADDR_VAR 0 3
61194: PUSH
61195: LD_VAR 0 3
61199: PPUSH
61200: LD_VAR 0 3
61204: PPUSH
61205: CALL_OW 3
61209: ST_TO_ADDR
61210: GO 61187
61212: POP
61213: POP
// end ;
61214: LD_VAR 0 3
61218: RET
// export function ComExit ( unit ) ; var tmp ; begin
61219: LD_INT 0
61221: PPUSH
61222: PPUSH
// if not IsInUnit ( unit ) then
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 310
61232: NOT
61233: IFFALSE 61237
// exit ;
61235: GO 61297
// tmp := IsInUnit ( unit ) ;
61237: LD_ADDR_VAR 0 3
61241: PUSH
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 310
61251: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61252: LD_VAR 0 3
61256: PPUSH
61257: CALL_OW 247
61261: PUSH
61262: LD_INT 2
61264: EQUAL
61265: IFFALSE 61278
// ComExitVehicle ( unit ) else
61267: LD_VAR 0 1
61271: PPUSH
61272: CALL_OW 121
61276: GO 61287
// ComExitBuilding ( unit ) ;
61278: LD_VAR 0 1
61282: PPUSH
61283: CALL_OW 122
// result := tmp ;
61287: LD_ADDR_VAR 0 2
61291: PUSH
61292: LD_VAR 0 3
61296: ST_TO_ADDR
// end ;
61297: LD_VAR 0 2
61301: RET
// export function ComExitAll ( units ) ; var i ; begin
61302: LD_INT 0
61304: PPUSH
61305: PPUSH
// if not units then
61306: LD_VAR 0 1
61310: NOT
61311: IFFALSE 61315
// exit ;
61313: GO 61341
// for i in units do
61315: LD_ADDR_VAR 0 3
61319: PUSH
61320: LD_VAR 0 1
61324: PUSH
61325: FOR_IN
61326: IFFALSE 61339
// ComExit ( i ) ;
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL 61219 0 1
61337: GO 61325
61339: POP
61340: POP
// end ;
61341: LD_VAR 0 2
61345: RET
// export function ResetHc ; begin
61346: LD_INT 0
61348: PPUSH
// InitHc ;
61349: CALL_OW 19
// hc_importance := 0 ;
61353: LD_ADDR_OWVAR 32
61357: PUSH
61358: LD_INT 0
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 1
61365: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61366: LD_INT 0
61368: PPUSH
61369: PPUSH
61370: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61371: LD_ADDR_VAR 0 6
61375: PUSH
61376: LD_VAR 0 1
61380: PUSH
61381: LD_VAR 0 3
61385: PLUS
61386: PUSH
61387: LD_INT 2
61389: DIV
61390: ST_TO_ADDR
// if _x < 0 then
61391: LD_VAR 0 6
61395: PUSH
61396: LD_INT 0
61398: LESS
61399: IFFALSE 61416
// _x := _x * - 1 ;
61401: LD_ADDR_VAR 0 6
61405: PUSH
61406: LD_VAR 0 6
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: MUL
61415: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61416: LD_ADDR_VAR 0 7
61420: PUSH
61421: LD_VAR 0 2
61425: PUSH
61426: LD_VAR 0 4
61430: PLUS
61431: PUSH
61432: LD_INT 2
61434: DIV
61435: ST_TO_ADDR
// if _y < 0 then
61436: LD_VAR 0 7
61440: PUSH
61441: LD_INT 0
61443: LESS
61444: IFFALSE 61461
// _y := _y * - 1 ;
61446: LD_ADDR_VAR 0 7
61450: PUSH
61451: LD_VAR 0 7
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: MUL
61460: ST_TO_ADDR
// result := [ _x , _y ] ;
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: LD_VAR 0 6
61470: PUSH
61471: LD_VAR 0 7
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: ST_TO_ADDR
// end ;
61480: LD_VAR 0 5
61484: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61485: LD_INT 0
61487: PPUSH
61488: PPUSH
61489: PPUSH
61490: PPUSH
// task := GetTaskList ( unit ) ;
61491: LD_ADDR_VAR 0 7
61495: PUSH
61496: LD_VAR 0 1
61500: PPUSH
61501: CALL_OW 437
61505: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61506: LD_VAR 0 7
61510: NOT
61511: PUSH
61512: LD_VAR 0 1
61516: PPUSH
61517: LD_VAR 0 2
61521: PPUSH
61522: CALL_OW 308
61526: NOT
61527: AND
61528: IFFALSE 61532
// exit ;
61530: GO 61650
// if IsInArea ( unit , area ) then
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_VAR 0 2
61541: PPUSH
61542: CALL_OW 308
61546: IFFALSE 61564
// begin ComMoveToArea ( unit , goAway ) ;
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_VAR 0 3
61557: PPUSH
61558: CALL_OW 113
// exit ;
61562: GO 61650
// end ; if task [ 1 ] [ 1 ] <> M then
61564: LD_VAR 0 7
61568: PUSH
61569: LD_INT 1
61571: ARRAY
61572: PUSH
61573: LD_INT 1
61575: ARRAY
61576: PUSH
61577: LD_STRING M
61579: NONEQUAL
61580: IFFALSE 61584
// exit ;
61582: GO 61650
// x := task [ 1 ] [ 2 ] ;
61584: LD_ADDR_VAR 0 5
61588: PUSH
61589: LD_VAR 0 7
61593: PUSH
61594: LD_INT 1
61596: ARRAY
61597: PUSH
61598: LD_INT 2
61600: ARRAY
61601: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61602: LD_ADDR_VAR 0 6
61606: PUSH
61607: LD_VAR 0 7
61611: PUSH
61612: LD_INT 1
61614: ARRAY
61615: PUSH
61616: LD_INT 3
61618: ARRAY
61619: ST_TO_ADDR
// if InArea ( x , y , area ) then
61620: LD_VAR 0 5
61624: PPUSH
61625: LD_VAR 0 6
61629: PPUSH
61630: LD_VAR 0 2
61634: PPUSH
61635: CALL_OW 309
61639: IFFALSE 61650
// ComStop ( unit ) ;
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 141
// end ;
61650: LD_VAR 0 4
61654: RET
// export function Abs ( value ) ; begin
61655: LD_INT 0
61657: PPUSH
// result := value ;
61658: LD_ADDR_VAR 0 2
61662: PUSH
61663: LD_VAR 0 1
61667: ST_TO_ADDR
// if value < 0 then
61668: LD_VAR 0 1
61672: PUSH
61673: LD_INT 0
61675: LESS
61676: IFFALSE 61693
// result := value * - 1 ;
61678: LD_ADDR_VAR 0 2
61682: PUSH
61683: LD_VAR 0 1
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: MUL
61692: ST_TO_ADDR
// end ;
61693: LD_VAR 0 2
61697: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61698: LD_INT 0
61700: PPUSH
61701: PPUSH
61702: PPUSH
61703: PPUSH
61704: PPUSH
61705: PPUSH
61706: PPUSH
61707: PPUSH
// if not unit or not building then
61708: LD_VAR 0 1
61712: NOT
61713: PUSH
61714: LD_VAR 0 2
61718: NOT
61719: OR
61720: IFFALSE 61724
// exit ;
61722: GO 61950
// x := GetX ( building ) ;
61724: LD_ADDR_VAR 0 4
61728: PUSH
61729: LD_VAR 0 2
61733: PPUSH
61734: CALL_OW 250
61738: ST_TO_ADDR
// y := GetY ( building ) ;
61739: LD_ADDR_VAR 0 6
61743: PUSH
61744: LD_VAR 0 2
61748: PPUSH
61749: CALL_OW 251
61753: ST_TO_ADDR
// d := GetDir ( building ) ;
61754: LD_ADDR_VAR 0 8
61758: PUSH
61759: LD_VAR 0 2
61763: PPUSH
61764: CALL_OW 254
61768: ST_TO_ADDR
// r := 4 ;
61769: LD_ADDR_VAR 0 9
61773: PUSH
61774: LD_INT 4
61776: ST_TO_ADDR
// for i := 1 to 5 do
61777: LD_ADDR_VAR 0 10
61781: PUSH
61782: DOUBLE
61783: LD_INT 1
61785: DEC
61786: ST_TO_ADDR
61787: LD_INT 5
61789: PUSH
61790: FOR_TO
61791: IFFALSE 61948
// begin _x := ShiftX ( x , d , r + i ) ;
61793: LD_ADDR_VAR 0 5
61797: PUSH
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 8
61807: PPUSH
61808: LD_VAR 0 9
61812: PUSH
61813: LD_VAR 0 10
61817: PLUS
61818: PPUSH
61819: CALL_OW 272
61823: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61824: LD_ADDR_VAR 0 7
61828: PUSH
61829: LD_VAR 0 6
61833: PPUSH
61834: LD_VAR 0 8
61838: PPUSH
61839: LD_VAR 0 9
61843: PUSH
61844: LD_VAR 0 10
61848: PLUS
61849: PPUSH
61850: CALL_OW 273
61854: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61855: LD_VAR 0 5
61859: PPUSH
61860: LD_VAR 0 7
61864: PPUSH
61865: CALL_OW 488
61869: PUSH
61870: LD_VAR 0 5
61874: PPUSH
61875: LD_VAR 0 7
61879: PPUSH
61880: CALL_OW 428
61884: PPUSH
61885: CALL_OW 247
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: IN
61900: NOT
61901: AND
61902: IFFALSE 61946
// begin ComMoveXY ( unit , _x , _y ) ;
61904: LD_VAR 0 1
61908: PPUSH
61909: LD_VAR 0 5
61913: PPUSH
61914: LD_VAR 0 7
61918: PPUSH
61919: CALL_OW 111
// result := [ _x , _y ] ;
61923: LD_ADDR_VAR 0 3
61927: PUSH
61928: LD_VAR 0 5
61932: PUSH
61933: LD_VAR 0 7
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// exit ;
61942: POP
61943: POP
61944: GO 61950
// end ; end ;
61946: GO 61790
61948: POP
61949: POP
// end ;
61950: LD_VAR 0 3
61954: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61955: LD_INT 0
61957: PPUSH
61958: PPUSH
61959: PPUSH
// result := 0 ;
61960: LD_ADDR_VAR 0 3
61964: PUSH
61965: LD_INT 0
61967: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61968: LD_VAR 0 1
61972: PUSH
61973: LD_INT 0
61975: LESS
61976: PUSH
61977: LD_VAR 0 1
61981: PUSH
61982: LD_INT 8
61984: GREATER
61985: OR
61986: PUSH
61987: LD_VAR 0 2
61991: PUSH
61992: LD_INT 0
61994: LESS
61995: OR
61996: PUSH
61997: LD_VAR 0 2
62001: PUSH
62002: LD_INT 8
62004: GREATER
62005: OR
62006: IFFALSE 62010
// exit ;
62008: GO 62085
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62010: LD_ADDR_VAR 0 4
62014: PUSH
62015: LD_INT 22
62017: PUSH
62018: LD_VAR 0 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PPUSH
62027: CALL_OW 69
62031: PUSH
62032: FOR_IN
62033: IFFALSE 62083
// begin un := UnitShoot ( i ) ;
62035: LD_ADDR_VAR 0 5
62039: PUSH
62040: LD_VAR 0 4
62044: PPUSH
62045: CALL_OW 504
62049: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62050: LD_VAR 0 5
62054: PPUSH
62055: CALL_OW 255
62059: PUSH
62060: LD_VAR 0 1
62064: EQUAL
62065: IFFALSE 62081
// begin result := un ;
62067: LD_ADDR_VAR 0 3
62071: PUSH
62072: LD_VAR 0 5
62076: ST_TO_ADDR
// exit ;
62077: POP
62078: POP
62079: GO 62085
// end ; end ;
62081: GO 62032
62083: POP
62084: POP
// end ;
62085: LD_VAR 0 3
62089: RET
// export function GetCargoBay ( units ) ; begin
62090: LD_INT 0
62092: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62093: LD_ADDR_VAR 0 2
62097: PUSH
62098: LD_VAR 0 1
62102: PPUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 34
62108: PUSH
62109: LD_INT 12
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 34
62118: PUSH
62119: LD_INT 51
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 34
62128: PUSH
62129: LD_INT 32
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 34
62138: PUSH
62139: LD_INT 89
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: PPUSH
62153: CALL_OW 72
62157: ST_TO_ADDR
// end ;
62158: LD_VAR 0 2
62162: RET
// export function Negate ( value ) ; begin
62163: LD_INT 0
62165: PPUSH
// result := not value ;
62166: LD_ADDR_VAR 0 2
62170: PUSH
62171: LD_VAR 0 1
62175: NOT
62176: ST_TO_ADDR
// end ;
62177: LD_VAR 0 2
62181: RET
// export function Inc ( value ) ; begin
62182: LD_INT 0
62184: PPUSH
// result := value + 1 ;
62185: LD_ADDR_VAR 0 2
62189: PUSH
62190: LD_VAR 0 1
62194: PUSH
62195: LD_INT 1
62197: PLUS
62198: ST_TO_ADDR
// end ;
62199: LD_VAR 0 2
62203: RET
// export function Dec ( value ) ; begin
62204: LD_INT 0
62206: PPUSH
// result := value - 1 ;
62207: LD_ADDR_VAR 0 2
62211: PUSH
62212: LD_VAR 0 1
62216: PUSH
62217: LD_INT 1
62219: MINUS
62220: ST_TO_ADDR
// end ;
62221: LD_VAR 0 2
62225: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62226: LD_INT 0
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
62234: PPUSH
62235: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: CALL_OW 488
62250: NOT
62251: PUSH
62252: LD_VAR 0 3
62256: PPUSH
62257: LD_VAR 0 4
62261: PPUSH
62262: CALL_OW 488
62266: NOT
62267: OR
62268: IFFALSE 62281
// begin result := - 1 ;
62270: LD_ADDR_VAR 0 5
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: ST_TO_ADDR
// exit ;
62279: GO 62516
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62281: LD_ADDR_VAR 0 12
62285: PUSH
62286: LD_VAR 0 1
62290: PPUSH
62291: LD_VAR 0 2
62295: PPUSH
62296: LD_VAR 0 3
62300: PPUSH
62301: LD_VAR 0 4
62305: PPUSH
62306: CALL 61366 0 4
62310: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62311: LD_ADDR_VAR 0 11
62315: PUSH
62316: LD_VAR 0 1
62320: PPUSH
62321: LD_VAR 0 2
62325: PPUSH
62326: LD_VAR 0 12
62330: PUSH
62331: LD_INT 1
62333: ARRAY
62334: PPUSH
62335: LD_VAR 0 12
62339: PUSH
62340: LD_INT 2
62342: ARRAY
62343: PPUSH
62344: CALL_OW 298
62348: ST_TO_ADDR
// distance := 9999 ;
62349: LD_ADDR_VAR 0 10
62353: PUSH
62354: LD_INT 9999
62356: ST_TO_ADDR
// for i := 0 to 5 do
62357: LD_ADDR_VAR 0 6
62361: PUSH
62362: DOUBLE
62363: LD_INT 0
62365: DEC
62366: ST_TO_ADDR
62367: LD_INT 5
62369: PUSH
62370: FOR_TO
62371: IFFALSE 62514
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62373: LD_ADDR_VAR 0 7
62377: PUSH
62378: LD_VAR 0 1
62382: PPUSH
62383: LD_VAR 0 6
62387: PPUSH
62388: LD_VAR 0 11
62392: PPUSH
62393: CALL_OW 272
62397: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62398: LD_ADDR_VAR 0 8
62402: PUSH
62403: LD_VAR 0 2
62407: PPUSH
62408: LD_VAR 0 6
62412: PPUSH
62413: LD_VAR 0 11
62417: PPUSH
62418: CALL_OW 273
62422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62423: LD_VAR 0 7
62427: PPUSH
62428: LD_VAR 0 8
62432: PPUSH
62433: CALL_OW 488
62437: NOT
62438: IFFALSE 62442
// continue ;
62440: GO 62370
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62442: LD_ADDR_VAR 0 9
62446: PUSH
62447: LD_VAR 0 12
62451: PUSH
62452: LD_INT 1
62454: ARRAY
62455: PPUSH
62456: LD_VAR 0 12
62460: PUSH
62461: LD_INT 2
62463: ARRAY
62464: PPUSH
62465: LD_VAR 0 7
62469: PPUSH
62470: LD_VAR 0 8
62474: PPUSH
62475: CALL_OW 298
62479: ST_TO_ADDR
// if tmp < distance then
62480: LD_VAR 0 9
62484: PUSH
62485: LD_VAR 0 10
62489: LESS
62490: IFFALSE 62512
// begin result := i ;
62492: LD_ADDR_VAR 0 5
62496: PUSH
62497: LD_VAR 0 6
62501: ST_TO_ADDR
// distance := tmp ;
62502: LD_ADDR_VAR 0 10
62506: PUSH
62507: LD_VAR 0 9
62511: ST_TO_ADDR
// end ; end ;
62512: GO 62370
62514: POP
62515: POP
// end ;
62516: LD_VAR 0 5
62520: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62521: LD_INT 0
62523: PPUSH
62524: PPUSH
// if not driver or not IsInUnit ( driver ) then
62525: LD_VAR 0 1
62529: NOT
62530: PUSH
62531: LD_VAR 0 1
62535: PPUSH
62536: CALL_OW 310
62540: NOT
62541: OR
62542: IFFALSE 62546
// exit ;
62544: GO 62636
// vehicle := IsInUnit ( driver ) ;
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 310
62560: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62561: LD_VAR 0 1
62565: PPUSH
62566: LD_STRING \
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: LD_STRING E
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_VAR 0 3
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PPUSH
62632: CALL_OW 446
// end ;
62636: LD_VAR 0 2
62640: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62641: LD_INT 0
62643: PPUSH
62644: PPUSH
// if not driver or not IsInUnit ( driver ) then
62645: LD_VAR 0 1
62649: NOT
62650: PUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: CALL_OW 310
62660: NOT
62661: OR
62662: IFFALSE 62666
// exit ;
62664: GO 62756
// vehicle := IsInUnit ( driver ) ;
62666: LD_ADDR_VAR 0 3
62670: PUSH
62671: LD_VAR 0 1
62675: PPUSH
62676: CALL_OW 310
62680: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62681: LD_VAR 0 1
62685: PPUSH
62686: LD_STRING \
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: PUSH
62716: LD_STRING E
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_VAR 0 3
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PPUSH
62752: CALL_OW 447
// end ;
62756: LD_VAR 0 2
62760: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62761: LD_INT 0
62763: PPUSH
62764: PPUSH
62765: PPUSH
// tmp := [ ] ;
62766: LD_ADDR_VAR 0 5
62770: PUSH
62771: EMPTY
62772: ST_TO_ADDR
// for i in units do
62773: LD_ADDR_VAR 0 4
62777: PUSH
62778: LD_VAR 0 1
62782: PUSH
62783: FOR_IN
62784: IFFALSE 62822
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62786: LD_ADDR_VAR 0 5
62790: PUSH
62791: LD_VAR 0 5
62795: PPUSH
62796: LD_VAR 0 5
62800: PUSH
62801: LD_INT 1
62803: PLUS
62804: PPUSH
62805: LD_VAR 0 4
62809: PPUSH
62810: CALL_OW 256
62814: PPUSH
62815: CALL_OW 2
62819: ST_TO_ADDR
62820: GO 62783
62822: POP
62823: POP
// if not tmp then
62824: LD_VAR 0 5
62828: NOT
62829: IFFALSE 62833
// exit ;
62831: GO 62881
// if asc then
62833: LD_VAR 0 2
62837: IFFALSE 62861
// result := SortListByListAsc ( units , tmp ) else
62839: LD_ADDR_VAR 0 3
62843: PUSH
62844: LD_VAR 0 1
62848: PPUSH
62849: LD_VAR 0 5
62853: PPUSH
62854: CALL_OW 76
62858: ST_TO_ADDR
62859: GO 62881
// result := SortListByListDesc ( units , tmp ) ;
62861: LD_ADDR_VAR 0 3
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: LD_VAR 0 5
62875: PPUSH
62876: CALL_OW 77
62880: ST_TO_ADDR
// end ;
62881: LD_VAR 0 3
62885: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62886: LD_INT 0
62888: PPUSH
62889: PPUSH
// task := GetTaskList ( mech ) ;
62890: LD_ADDR_VAR 0 4
62894: PUSH
62895: LD_VAR 0 1
62899: PPUSH
62900: CALL_OW 437
62904: ST_TO_ADDR
// if not task then
62905: LD_VAR 0 4
62909: NOT
62910: IFFALSE 62914
// exit ;
62912: GO 62956
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62914: LD_ADDR_VAR 0 3
62918: PUSH
62919: LD_VAR 0 4
62923: PUSH
62924: LD_INT 1
62926: ARRAY
62927: PUSH
62928: LD_INT 1
62930: ARRAY
62931: PUSH
62932: LD_STRING r
62934: EQUAL
62935: PUSH
62936: LD_VAR 0 4
62940: PUSH
62941: LD_INT 1
62943: ARRAY
62944: PUSH
62945: LD_INT 4
62947: ARRAY
62948: PUSH
62949: LD_VAR 0 2
62953: EQUAL
62954: AND
62955: ST_TO_ADDR
// end ;
62956: LD_VAR 0 3
62960: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62961: LD_INT 0
62963: PPUSH
// SetDir ( unit , d ) ;
62964: LD_VAR 0 1
62968: PPUSH
62969: LD_VAR 0 4
62973: PPUSH
62974: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62978: LD_VAR 0 1
62982: PPUSH
62983: LD_VAR 0 2
62987: PPUSH
62988: LD_VAR 0 3
62992: PPUSH
62993: LD_VAR 0 5
62997: PPUSH
62998: CALL_OW 48
// end ;
63002: LD_VAR 0 6
63006: RET
// export function ToNaturalNumber ( number ) ; begin
63007: LD_INT 0
63009: PPUSH
// result := number div 1 ;
63010: LD_ADDR_VAR 0 2
63014: PUSH
63015: LD_VAR 0 1
63019: PUSH
63020: LD_INT 1
63022: DIV
63023: ST_TO_ADDR
// if number < 0 then
63024: LD_VAR 0 1
63028: PUSH
63029: LD_INT 0
63031: LESS
63032: IFFALSE 63042
// result := 0 ;
63034: LD_ADDR_VAR 0 2
63038: PUSH
63039: LD_INT 0
63041: ST_TO_ADDR
// end ;
63042: LD_VAR 0 2
63046: RET
// export function SortByClass ( units , class ) ; var un ; begin
63047: LD_INT 0
63049: PPUSH
63050: PPUSH
// if not units or not class then
63051: LD_VAR 0 1
63055: NOT
63056: PUSH
63057: LD_VAR 0 2
63061: NOT
63062: OR
63063: IFFALSE 63067
// exit ;
63065: GO 63162
// result := [ ] ;
63067: LD_ADDR_VAR 0 3
63071: PUSH
63072: EMPTY
63073: ST_TO_ADDR
// for un in units do
63074: LD_ADDR_VAR 0 4
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: FOR_IN
63085: IFFALSE 63160
// if GetClass ( un ) = class then
63087: LD_VAR 0 4
63091: PPUSH
63092: CALL_OW 257
63096: PUSH
63097: LD_VAR 0 2
63101: EQUAL
63102: IFFALSE 63129
// result := Insert ( result , 1 , un ) else
63104: LD_ADDR_VAR 0 3
63108: PUSH
63109: LD_VAR 0 3
63113: PPUSH
63114: LD_INT 1
63116: PPUSH
63117: LD_VAR 0 4
63121: PPUSH
63122: CALL_OW 2
63126: ST_TO_ADDR
63127: GO 63158
// result := Replace ( result , result + 1 , un ) ;
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_VAR 0 3
63138: PPUSH
63139: LD_VAR 0 3
63143: PUSH
63144: LD_INT 1
63146: PLUS
63147: PPUSH
63148: LD_VAR 0 4
63152: PPUSH
63153: CALL_OW 1
63157: ST_TO_ADDR
63158: GO 63084
63160: POP
63161: POP
// end ;
63162: LD_VAR 0 3
63166: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63167: LD_INT 0
63169: PPUSH
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
// result := [ ] ;
63176: LD_ADDR_VAR 0 4
63180: PUSH
63181: EMPTY
63182: ST_TO_ADDR
// if x - r < 0 then
63183: LD_VAR 0 1
63187: PUSH
63188: LD_VAR 0 3
63192: MINUS
63193: PUSH
63194: LD_INT 0
63196: LESS
63197: IFFALSE 63209
// min_x := 0 else
63199: LD_ADDR_VAR 0 8
63203: PUSH
63204: LD_INT 0
63206: ST_TO_ADDR
63207: GO 63225
// min_x := x - r ;
63209: LD_ADDR_VAR 0 8
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_VAR 0 3
63223: MINUS
63224: ST_TO_ADDR
// if y - r < 0 then
63225: LD_VAR 0 2
63229: PUSH
63230: LD_VAR 0 3
63234: MINUS
63235: PUSH
63236: LD_INT 0
63238: LESS
63239: IFFALSE 63251
// min_y := 0 else
63241: LD_ADDR_VAR 0 7
63245: PUSH
63246: LD_INT 0
63248: ST_TO_ADDR
63249: GO 63267
// min_y := y - r ;
63251: LD_ADDR_VAR 0 7
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_VAR 0 3
63265: MINUS
63266: ST_TO_ADDR
// max_x := x + r ;
63267: LD_ADDR_VAR 0 9
63271: PUSH
63272: LD_VAR 0 1
63276: PUSH
63277: LD_VAR 0 3
63281: PLUS
63282: ST_TO_ADDR
// max_y := y + r ;
63283: LD_ADDR_VAR 0 10
63287: PUSH
63288: LD_VAR 0 2
63292: PUSH
63293: LD_VAR 0 3
63297: PLUS
63298: ST_TO_ADDR
// for _x = min_x to max_x do
63299: LD_ADDR_VAR 0 5
63303: PUSH
63304: DOUBLE
63305: LD_VAR 0 8
63309: DEC
63310: ST_TO_ADDR
63311: LD_VAR 0 9
63315: PUSH
63316: FOR_TO
63317: IFFALSE 63418
// for _y = min_y to max_y do
63319: LD_ADDR_VAR 0 6
63323: PUSH
63324: DOUBLE
63325: LD_VAR 0 7
63329: DEC
63330: ST_TO_ADDR
63331: LD_VAR 0 10
63335: PUSH
63336: FOR_TO
63337: IFFALSE 63414
// begin if not ValidHex ( _x , _y ) then
63339: LD_VAR 0 5
63343: PPUSH
63344: LD_VAR 0 6
63348: PPUSH
63349: CALL_OW 488
63353: NOT
63354: IFFALSE 63358
// continue ;
63356: GO 63336
// if GetResourceTypeXY ( _x , _y ) then
63358: LD_VAR 0 5
63362: PPUSH
63363: LD_VAR 0 6
63367: PPUSH
63368: CALL_OW 283
63372: IFFALSE 63412
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63374: LD_ADDR_VAR 0 4
63378: PUSH
63379: LD_VAR 0 4
63383: PPUSH
63384: LD_VAR 0 4
63388: PUSH
63389: LD_INT 1
63391: PLUS
63392: PPUSH
63393: LD_VAR 0 5
63397: PUSH
63398: LD_VAR 0 6
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PPUSH
63407: CALL_OW 1
63411: ST_TO_ADDR
// end ;
63412: GO 63336
63414: POP
63415: POP
63416: GO 63316
63418: POP
63419: POP
// end ;
63420: LD_VAR 0 4
63424: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63425: LD_INT 0
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
63434: PPUSH
// if not units then
63435: LD_VAR 0 1
63439: NOT
63440: IFFALSE 63444
// exit ;
63442: GO 63968
// result := UnitFilter ( units , [ f_ok ] ) ;
63444: LD_ADDR_VAR 0 3
63448: PUSH
63449: LD_VAR 0 1
63453: PPUSH
63454: LD_INT 50
63456: PUSH
63457: EMPTY
63458: LIST
63459: PPUSH
63460: CALL_OW 72
63464: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63465: LD_ADDR_VAR 0 8
63469: PUSH
63470: LD_VAR 0 1
63474: PUSH
63475: LD_INT 1
63477: ARRAY
63478: PPUSH
63479: CALL_OW 255
63483: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63484: LD_ADDR_VAR 0 10
63488: PUSH
63489: LD_INT 29
63491: PUSH
63492: LD_INT 91
63494: PUSH
63495: LD_INT 49
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// if not result then
63503: LD_VAR 0 3
63507: NOT
63508: IFFALSE 63512
// exit ;
63510: GO 63968
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63512: LD_ADDR_VAR 0 5
63516: PUSH
63517: LD_INT 81
63519: PUSH
63520: LD_VAR 0 8
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PPUSH
63529: CALL_OW 69
63533: ST_TO_ADDR
// for i in result do
63534: LD_ADDR_VAR 0 4
63538: PUSH
63539: LD_VAR 0 3
63543: PUSH
63544: FOR_IN
63545: IFFALSE 63966
// begin tag := GetTag ( i ) + 1 ;
63547: LD_ADDR_VAR 0 9
63551: PUSH
63552: LD_VAR 0 4
63556: PPUSH
63557: CALL_OW 110
63561: PUSH
63562: LD_INT 1
63564: PLUS
63565: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63566: LD_ADDR_VAR 0 7
63570: PUSH
63571: LD_VAR 0 4
63575: PPUSH
63576: CALL_OW 250
63580: PPUSH
63581: LD_VAR 0 4
63585: PPUSH
63586: CALL_OW 251
63590: PPUSH
63591: LD_INT 6
63593: PPUSH
63594: CALL 63167 0 3
63598: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63599: LD_VAR 0 4
63603: PPUSH
63604: CALL_OW 247
63608: PUSH
63609: LD_INT 2
63611: EQUAL
63612: PUSH
63613: LD_VAR 0 7
63617: AND
63618: PUSH
63619: LD_VAR 0 4
63623: PPUSH
63624: CALL_OW 264
63628: PUSH
63629: LD_VAR 0 10
63633: IN
63634: NOT
63635: AND
63636: IFFALSE 63675
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63638: LD_VAR 0 4
63642: PPUSH
63643: LD_VAR 0 7
63647: PUSH
63648: LD_INT 1
63650: ARRAY
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PPUSH
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 1
63663: ARRAY
63664: PUSH
63665: LD_INT 2
63667: ARRAY
63668: PPUSH
63669: CALL_OW 116
63673: GO 63964
// if path > tag then
63675: LD_VAR 0 2
63679: PUSH
63680: LD_VAR 0 9
63684: GREATER
63685: IFFALSE 63893
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63687: LD_ADDR_VAR 0 6
63691: PUSH
63692: LD_VAR 0 5
63696: PPUSH
63697: LD_INT 91
63699: PUSH
63700: LD_VAR 0 4
63704: PUSH
63705: LD_INT 8
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: LIST
63712: PPUSH
63713: CALL_OW 72
63717: ST_TO_ADDR
// if nearEnemy then
63718: LD_VAR 0 6
63722: IFFALSE 63791
// begin if GetWeapon ( i ) = ru_time_lapser then
63724: LD_VAR 0 4
63728: PPUSH
63729: CALL_OW 264
63733: PUSH
63734: LD_INT 49
63736: EQUAL
63737: IFFALSE 63765
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63739: LD_VAR 0 4
63743: PPUSH
63744: LD_VAR 0 6
63748: PPUSH
63749: LD_VAR 0 4
63753: PPUSH
63754: CALL_OW 74
63758: PPUSH
63759: CALL_OW 112
63763: GO 63789
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63765: LD_VAR 0 4
63769: PPUSH
63770: LD_VAR 0 6
63774: PPUSH
63775: LD_VAR 0 4
63779: PPUSH
63780: CALL_OW 74
63784: PPUSH
63785: CALL_OW 115
// end else
63789: GO 63891
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63791: LD_VAR 0 4
63795: PPUSH
63796: LD_VAR 0 2
63800: PUSH
63801: LD_VAR 0 9
63805: ARRAY
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PPUSH
63811: LD_VAR 0 2
63815: PUSH
63816: LD_VAR 0 9
63820: ARRAY
63821: PUSH
63822: LD_INT 2
63824: ARRAY
63825: PPUSH
63826: CALL_OW 297
63830: PUSH
63831: LD_INT 6
63833: GREATER
63834: IFFALSE 63877
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63836: LD_VAR 0 4
63840: PPUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_VAR 0 9
63850: ARRAY
63851: PUSH
63852: LD_INT 1
63854: ARRAY
63855: PPUSH
63856: LD_VAR 0 2
63860: PUSH
63861: LD_VAR 0 9
63865: ARRAY
63866: PUSH
63867: LD_INT 2
63869: ARRAY
63870: PPUSH
63871: CALL_OW 114
63875: GO 63891
// SetTag ( i , tag ) ;
63877: LD_VAR 0 4
63881: PPUSH
63882: LD_VAR 0 9
63886: PPUSH
63887: CALL_OW 109
// end else
63891: GO 63964
// if enemy then
63893: LD_VAR 0 5
63897: IFFALSE 63964
// begin if GetWeapon ( i ) = ru_time_lapser then
63899: LD_VAR 0 4
63903: PPUSH
63904: CALL_OW 264
63908: PUSH
63909: LD_INT 49
63911: EQUAL
63912: IFFALSE 63940
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63914: LD_VAR 0 4
63918: PPUSH
63919: LD_VAR 0 5
63923: PPUSH
63924: LD_VAR 0 4
63928: PPUSH
63929: CALL_OW 74
63933: PPUSH
63934: CALL_OW 112
63938: GO 63964
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63940: LD_VAR 0 4
63944: PPUSH
63945: LD_VAR 0 5
63949: PPUSH
63950: LD_VAR 0 4
63954: PPUSH
63955: CALL_OW 74
63959: PPUSH
63960: CALL_OW 115
// end ; end ;
63964: GO 63544
63966: POP
63967: POP
// end ;
63968: LD_VAR 0 3
63972: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63973: LD_INT 0
63975: PPUSH
63976: PPUSH
63977: PPUSH
// if not unit or IsInUnit ( unit ) then
63978: LD_VAR 0 1
63982: NOT
63983: PUSH
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 310
63993: OR
63994: IFFALSE 63998
// exit ;
63996: GO 64089
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63998: LD_ADDR_VAR 0 4
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 250
64012: PPUSH
64013: LD_VAR 0 2
64017: PPUSH
64018: LD_INT 1
64020: PPUSH
64021: CALL_OW 272
64025: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64026: LD_ADDR_VAR 0 5
64030: PUSH
64031: LD_VAR 0 1
64035: PPUSH
64036: CALL_OW 251
64040: PPUSH
64041: LD_VAR 0 2
64045: PPUSH
64046: LD_INT 1
64048: PPUSH
64049: CALL_OW 273
64053: ST_TO_ADDR
// if ValidHex ( x , y ) then
64054: LD_VAR 0 4
64058: PPUSH
64059: LD_VAR 0 5
64063: PPUSH
64064: CALL_OW 488
64068: IFFALSE 64089
// ComTurnXY ( unit , x , y ) ;
64070: LD_VAR 0 1
64074: PPUSH
64075: LD_VAR 0 4
64079: PPUSH
64080: LD_VAR 0 5
64084: PPUSH
64085: CALL_OW 118
// end ;
64089: LD_VAR 0 3
64093: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64094: LD_INT 0
64096: PPUSH
64097: PPUSH
// result := false ;
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
// if not units then
64106: LD_VAR 0 2
64110: NOT
64111: IFFALSE 64115
// exit ;
64113: GO 64160
// for i in units do
64115: LD_ADDR_VAR 0 4
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: FOR_IN
64126: IFFALSE 64158
// if See ( side , i ) then
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_VAR 0 4
64137: PPUSH
64138: CALL_OW 292
64142: IFFALSE 64156
// begin result := true ;
64144: LD_ADDR_VAR 0 3
64148: PUSH
64149: LD_INT 1
64151: ST_TO_ADDR
// exit ;
64152: POP
64153: POP
64154: GO 64160
// end ;
64156: GO 64125
64158: POP
64159: POP
// end ;
64160: LD_VAR 0 3
64164: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64165: LD_INT 0
64167: PPUSH
64168: PPUSH
64169: PPUSH
64170: PPUSH
// if not unit or not points then
64171: LD_VAR 0 1
64175: NOT
64176: PUSH
64177: LD_VAR 0 2
64181: NOT
64182: OR
64183: IFFALSE 64187
// exit ;
64185: GO 64277
// dist := 99999 ;
64187: LD_ADDR_VAR 0 5
64191: PUSH
64192: LD_INT 99999
64194: ST_TO_ADDR
// for i in points do
64195: LD_ADDR_VAR 0 4
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: FOR_IN
64206: IFFALSE 64275
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64208: LD_ADDR_VAR 0 6
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: LD_VAR 0 4
64222: PUSH
64223: LD_INT 1
64225: ARRAY
64226: PPUSH
64227: LD_VAR 0 4
64231: PUSH
64232: LD_INT 2
64234: ARRAY
64235: PPUSH
64236: CALL_OW 297
64240: ST_TO_ADDR
// if tmpDist < dist then
64241: LD_VAR 0 6
64245: PUSH
64246: LD_VAR 0 5
64250: LESS
64251: IFFALSE 64273
// begin result := i ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_VAR 0 4
64262: ST_TO_ADDR
// dist := tmpDist ;
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: LD_VAR 0 6
64272: ST_TO_ADDR
// end ; end ;
64273: GO 64205
64275: POP
64276: POP
// end ;
64277: LD_VAR 0 3
64281: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64282: LD_INT 0
64284: PPUSH
// uc_side := side ;
64285: LD_ADDR_OWVAR 20
64289: PUSH
64290: LD_VAR 0 1
64294: ST_TO_ADDR
// uc_nation := 3 ;
64295: LD_ADDR_OWVAR 21
64299: PUSH
64300: LD_INT 3
64302: ST_TO_ADDR
// vc_chassis := 25 ;
64303: LD_ADDR_OWVAR 37
64307: PUSH
64308: LD_INT 25
64310: ST_TO_ADDR
// vc_engine := engine_siberite ;
64311: LD_ADDR_OWVAR 39
64315: PUSH
64316: LD_INT 3
64318: ST_TO_ADDR
// vc_control := control_computer ;
64319: LD_ADDR_OWVAR 38
64323: PUSH
64324: LD_INT 3
64326: ST_TO_ADDR
// vc_weapon := 59 ;
64327: LD_ADDR_OWVAR 40
64331: PUSH
64332: LD_INT 59
64334: ST_TO_ADDR
// result := CreateVehicle ;
64335: LD_ADDR_VAR 0 5
64339: PUSH
64340: CALL_OW 45
64344: ST_TO_ADDR
// SetDir ( result , d ) ;
64345: LD_VAR 0 5
64349: PPUSH
64350: LD_VAR 0 4
64354: PPUSH
64355: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64359: LD_VAR 0 5
64363: PPUSH
64364: LD_VAR 0 2
64368: PPUSH
64369: LD_VAR 0 3
64373: PPUSH
64374: LD_INT 0
64376: PPUSH
64377: CALL_OW 48
// end ;
64381: LD_VAR 0 5
64385: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64386: LD_INT 0
64388: PPUSH
64389: PPUSH
64390: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64391: LD_ADDR_VAR 0 2
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64414: LD_VAR 0 1
64418: NOT
64419: PUSH
64420: LD_VAR 0 1
64424: PPUSH
64425: CALL_OW 264
64429: PUSH
64430: LD_INT 12
64432: PUSH
64433: LD_INT 51
64435: PUSH
64436: LD_INT 32
64438: PUSH
64439: LD_INT 89
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: IN
64448: NOT
64449: OR
64450: IFFALSE 64454
// exit ;
64452: GO 64552
// for i := 1 to 3 do
64454: LD_ADDR_VAR 0 3
64458: PUSH
64459: DOUBLE
64460: LD_INT 1
64462: DEC
64463: ST_TO_ADDR
64464: LD_INT 3
64466: PUSH
64467: FOR_TO
64468: IFFALSE 64550
// begin tmp := GetCargo ( cargo , i ) ;
64470: LD_ADDR_VAR 0 4
64474: PUSH
64475: LD_VAR 0 1
64479: PPUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: CALL_OW 289
64489: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64490: LD_ADDR_VAR 0 2
64494: PUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: LD_VAR 0 3
64504: PPUSH
64505: LD_VAR 0 4
64509: PPUSH
64510: CALL_OW 1
64514: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64515: LD_ADDR_VAR 0 2
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_INT 4
64527: PPUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_INT 4
64535: ARRAY
64536: PUSH
64537: LD_VAR 0 4
64541: PLUS
64542: PPUSH
64543: CALL_OW 1
64547: ST_TO_ADDR
// end ;
64548: GO 64467
64550: POP
64551: POP
// end ;
64552: LD_VAR 0 2
64556: RET
// export function Length ( array ) ; begin
64557: LD_INT 0
64559: PPUSH
// result := array + 0 ;
64560: LD_ADDR_VAR 0 2
64564: PUSH
64565: LD_VAR 0 1
64569: PUSH
64570: LD_INT 0
64572: PLUS
64573: ST_TO_ADDR
// end ;
64574: LD_VAR 0 2
64578: RET
// export function PrepareArray ( array ) ; begin
64579: LD_INT 0
64581: PPUSH
// result := array diff 0 ;
64582: LD_ADDR_VAR 0 2
64586: PUSH
64587: LD_VAR 0 1
64591: PUSH
64592: LD_INT 0
64594: DIFF
64595: ST_TO_ADDR
// if not result [ 1 ] then
64596: LD_VAR 0 2
64600: PUSH
64601: LD_INT 1
64603: ARRAY
64604: NOT
64605: IFFALSE 64625
// result := Delete ( result , 1 ) ;
64607: LD_ADDR_VAR 0 2
64611: PUSH
64612: LD_VAR 0 2
64616: PPUSH
64617: LD_INT 1
64619: PPUSH
64620: CALL_OW 3
64624: ST_TO_ADDR
// end ;
64625: LD_VAR 0 2
64629: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64630: LD_INT 0
64632: PPUSH
64633: PPUSH
64634: PPUSH
64635: PPUSH
// sibRocketRange := 25 ;
64636: LD_ADDR_VAR 0 6
64640: PUSH
64641: LD_INT 25
64643: ST_TO_ADDR
// result := false ;
64644: LD_ADDR_VAR 0 4
64648: PUSH
64649: LD_INT 0
64651: ST_TO_ADDR
// for i := 0 to 5 do
64652: LD_ADDR_VAR 0 5
64656: PUSH
64657: DOUBLE
64658: LD_INT 0
64660: DEC
64661: ST_TO_ADDR
64662: LD_INT 5
64664: PUSH
64665: FOR_TO
64666: IFFALSE 64733
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64668: LD_VAR 0 1
64672: PPUSH
64673: LD_VAR 0 5
64677: PPUSH
64678: LD_VAR 0 6
64682: PPUSH
64683: CALL_OW 272
64687: PPUSH
64688: LD_VAR 0 2
64692: PPUSH
64693: LD_VAR 0 5
64697: PPUSH
64698: LD_VAR 0 6
64702: PPUSH
64703: CALL_OW 273
64707: PPUSH
64708: LD_VAR 0 3
64712: PPUSH
64713: CALL_OW 309
64717: IFFALSE 64731
// begin result := true ;
64719: LD_ADDR_VAR 0 4
64723: PUSH
64724: LD_INT 1
64726: ST_TO_ADDR
// exit ;
64727: POP
64728: POP
64729: GO 64735
// end ;
64731: GO 64665
64733: POP
64734: POP
// end ; end_of_file
64735: LD_VAR 0 4
64739: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64740: LD_VAR 0 1
64744: PUSH
64745: LD_INT 200
64747: DOUBLE
64748: GREATEREQUAL
64749: IFFALSE 64757
64751: LD_INT 299
64753: DOUBLE
64754: LESSEQUAL
64755: IFTRUE 64759
64757: GO 64791
64759: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64760: LD_VAR 0 1
64764: PPUSH
64765: LD_VAR 0 2
64769: PPUSH
64770: LD_VAR 0 3
64774: PPUSH
64775: LD_VAR 0 4
64779: PPUSH
64780: LD_VAR 0 5
64784: PPUSH
64785: CALL 65279 0 5
64789: GO 64868
64791: LD_INT 300
64793: DOUBLE
64794: GREATEREQUAL
64795: IFFALSE 64803
64797: LD_INT 399
64799: DOUBLE
64800: LESSEQUAL
64801: IFTRUE 64805
64803: GO 64867
64805: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64806: LD_VAR 0 1
64810: PPUSH
64811: LD_VAR 0 2
64815: PPUSH
64816: LD_VAR 0 3
64820: PPUSH
64821: LD_VAR 0 4
64825: PPUSH
64826: LD_VAR 0 5
64830: PPUSH
64831: LD_VAR 0 6
64835: PPUSH
64836: LD_VAR 0 7
64840: PPUSH
64841: LD_VAR 0 8
64845: PPUSH
64846: LD_VAR 0 9
64850: PPUSH
64851: LD_VAR 0 10
64855: PPUSH
64856: LD_VAR 0 11
64860: PPUSH
64861: CALL 20081 0 11
64865: GO 64868
64867: POP
// end ;
64868: PPOPN 11
64870: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64871: LD_VAR 0 1
64875: PPUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: LD_VAR 0 3
64885: PPUSH
64886: LD_VAR 0 4
64890: PPUSH
64891: LD_VAR 0 5
64895: PPUSH
64896: CALL 65015 0 5
// end ; end_of_file
64900: PPOPN 5
64902: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
64903: LD_INT 0
64905: PPUSH
64906: PPUSH
64907: PPUSH
64908: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
64909: LD_VAR 0 1
64913: PPUSH
64914: CALL_OW 264
64918: PUSH
64919: LD_INT 91
64921: EQUAL
64922: IFFALSE 64994
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64924: LD_INT 68
64926: PPUSH
64927: LD_VAR 0 1
64931: PPUSH
64932: CALL_OW 255
64936: PPUSH
64937: CALL_OW 321
64941: PUSH
64942: LD_INT 2
64944: EQUAL
64945: IFFALSE 64957
// eff := 70 else
64947: LD_ADDR_VAR 0 4
64951: PUSH
64952: LD_INT 70
64954: ST_TO_ADDR
64955: GO 64965
// eff := 30 ;
64957: LD_ADDR_VAR 0 4
64961: PUSH
64962: LD_INT 30
64964: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64965: LD_VAR 0 1
64969: PPUSH
64970: CALL_OW 250
64974: PPUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: CALL_OW 251
64984: PPUSH
64985: LD_VAR 0 4
64989: PPUSH
64990: CALL_OW 495
// end ; end ;
64994: LD_VAR 0 2
64998: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64999: LD_INT 0
65001: PPUSH
// end ;
65002: LD_VAR 0 4
65006: RET
// export function SOS_Command ( cmd ) ; begin
65007: LD_INT 0
65009: PPUSH
// end ;
65010: LD_VAR 0 2
65014: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65015: LD_INT 0
65017: PPUSH
// end ;
65018: LD_VAR 0 6
65022: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65023: LD_INT 0
65025: PPUSH
65026: PPUSH
// if not vehicle or not factory then
65027: LD_VAR 0 1
65031: NOT
65032: PUSH
65033: LD_VAR 0 2
65037: NOT
65038: OR
65039: IFFALSE 65043
// exit ;
65041: GO 65274
// if factoryWaypoints >= factory then
65043: LD_EXP 77
65047: PUSH
65048: LD_VAR 0 2
65052: GREATEREQUAL
65053: IFFALSE 65274
// if factoryWaypoints [ factory ] then
65055: LD_EXP 77
65059: PUSH
65060: LD_VAR 0 2
65064: ARRAY
65065: IFFALSE 65274
// begin if GetControl ( vehicle ) = control_manual then
65067: LD_VAR 0 1
65071: PPUSH
65072: CALL_OW 263
65076: PUSH
65077: LD_INT 1
65079: EQUAL
65080: IFFALSE 65161
// begin driver := IsDrivenBy ( vehicle ) ;
65082: LD_ADDR_VAR 0 4
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 311
65096: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65097: LD_VAR 0 4
65101: PPUSH
65102: LD_EXP 77
65106: PUSH
65107: LD_VAR 0 2
65111: ARRAY
65112: PUSH
65113: LD_INT 3
65115: ARRAY
65116: PPUSH
65117: LD_EXP 77
65121: PUSH
65122: LD_VAR 0 2
65126: ARRAY
65127: PUSH
65128: LD_INT 4
65130: ARRAY
65131: PPUSH
65132: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65136: LD_VAR 0 4
65140: PPUSH
65141: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65145: LD_VAR 0 4
65149: PPUSH
65150: LD_VAR 0 2
65154: PPUSH
65155: CALL_OW 180
// end else
65159: GO 65274
// if GetControl ( vehicle ) = control_remote then
65161: LD_VAR 0 1
65165: PPUSH
65166: CALL_OW 263
65170: PUSH
65171: LD_INT 2
65173: EQUAL
65174: IFFALSE 65235
// begin wait ( 0 0$2 ) ;
65176: LD_INT 70
65178: PPUSH
65179: CALL_OW 67
// if Connect ( vehicle ) then
65183: LD_VAR 0 1
65187: PPUSH
65188: CALL 31478 0 1
65192: IFFALSE 65233
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_EXP 77
65203: PUSH
65204: LD_VAR 0 2
65208: ARRAY
65209: PUSH
65210: LD_INT 3
65212: ARRAY
65213: PPUSH
65214: LD_EXP 77
65218: PUSH
65219: LD_VAR 0 2
65223: ARRAY
65224: PUSH
65225: LD_INT 4
65227: ARRAY
65228: PPUSH
65229: CALL_OW 171
// end else
65233: GO 65274
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65235: LD_VAR 0 1
65239: PPUSH
65240: LD_EXP 77
65244: PUSH
65245: LD_VAR 0 2
65249: ARRAY
65250: PUSH
65251: LD_INT 3
65253: ARRAY
65254: PPUSH
65255: LD_EXP 77
65259: PUSH
65260: LD_VAR 0 2
65264: ARRAY
65265: PUSH
65266: LD_INT 4
65268: ARRAY
65269: PPUSH
65270: CALL_OW 171
// end ; end ;
65274: LD_VAR 0 3
65278: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65279: LD_INT 0
65281: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65282: LD_VAR 0 1
65286: PUSH
65287: LD_INT 250
65289: EQUAL
65290: PUSH
65291: LD_VAR 0 2
65295: PPUSH
65296: CALL_OW 264
65300: PUSH
65301: LD_INT 81
65303: EQUAL
65304: AND
65305: IFFALSE 65326
// MinerPlaceMine ( unit , x , y ) ;
65307: LD_VAR 0 2
65311: PPUSH
65312: LD_VAR 0 4
65316: PPUSH
65317: LD_VAR 0 5
65321: PPUSH
65322: CALL 67711 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65326: LD_VAR 0 1
65330: PUSH
65331: LD_INT 251
65333: EQUAL
65334: PUSH
65335: LD_VAR 0 2
65339: PPUSH
65340: CALL_OW 264
65344: PUSH
65345: LD_INT 81
65347: EQUAL
65348: AND
65349: IFFALSE 65370
// MinerDetonateMine ( unit , x , y ) ;
65351: LD_VAR 0 2
65355: PPUSH
65356: LD_VAR 0 4
65360: PPUSH
65361: LD_VAR 0 5
65365: PPUSH
65366: CALL 67986 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65370: LD_VAR 0 1
65374: PUSH
65375: LD_INT 252
65377: EQUAL
65378: PUSH
65379: LD_VAR 0 2
65383: PPUSH
65384: CALL_OW 264
65388: PUSH
65389: LD_INT 81
65391: EQUAL
65392: AND
65393: IFFALSE 65414
// MinerCreateMinefield ( unit , x , y ) ;
65395: LD_VAR 0 2
65399: PPUSH
65400: LD_VAR 0 4
65404: PPUSH
65405: LD_VAR 0 5
65409: PPUSH
65410: CALL 68403 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65414: LD_VAR 0 1
65418: PUSH
65419: LD_INT 253
65421: EQUAL
65422: PUSH
65423: LD_VAR 0 2
65427: PPUSH
65428: CALL_OW 257
65432: PUSH
65433: LD_INT 5
65435: EQUAL
65436: AND
65437: IFFALSE 65458
// ComBinocular ( unit , x , y ) ;
65439: LD_VAR 0 2
65443: PPUSH
65444: LD_VAR 0 4
65448: PPUSH
65449: LD_VAR 0 5
65453: PPUSH
65454: CALL 68772 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65458: LD_VAR 0 1
65462: PUSH
65463: LD_INT 254
65465: EQUAL
65466: PUSH
65467: LD_VAR 0 2
65471: PPUSH
65472: CALL_OW 264
65476: PUSH
65477: LD_INT 99
65479: EQUAL
65480: AND
65481: PUSH
65482: LD_VAR 0 3
65486: PPUSH
65487: CALL_OW 263
65491: PUSH
65492: LD_INT 3
65494: EQUAL
65495: AND
65496: IFFALSE 65512
// HackDestroyVehicle ( unit , selectedUnit ) ;
65498: LD_VAR 0 2
65502: PPUSH
65503: LD_VAR 0 3
65507: PPUSH
65508: CALL 67075 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65512: LD_VAR 0 1
65516: PUSH
65517: LD_INT 255
65519: EQUAL
65520: PUSH
65521: LD_VAR 0 2
65525: PPUSH
65526: CALL_OW 264
65530: PUSH
65531: LD_INT 14
65533: PUSH
65534: LD_INT 53
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: IN
65541: AND
65542: PUSH
65543: LD_VAR 0 4
65547: PPUSH
65548: LD_VAR 0 5
65552: PPUSH
65553: CALL_OW 488
65557: AND
65558: IFFALSE 65582
// CutTreeXYR ( unit , x , y , 12 ) ;
65560: LD_VAR 0 2
65564: PPUSH
65565: LD_VAR 0 4
65569: PPUSH
65570: LD_VAR 0 5
65574: PPUSH
65575: LD_INT 12
65577: PPUSH
65578: CALL 65645 0 4
// if cmd = 256 then
65582: LD_VAR 0 1
65586: PUSH
65587: LD_INT 256
65589: EQUAL
65590: IFFALSE 65611
// SetFactoryWaypoint ( unit , x , y ) ;
65592: LD_VAR 0 2
65596: PPUSH
65597: LD_VAR 0 4
65601: PPUSH
65602: LD_VAR 0 5
65606: PPUSH
65607: CALL 22061 0 3
// if cmd = 257 then
65611: LD_VAR 0 1
65615: PUSH
65616: LD_INT 257
65618: EQUAL
65619: IFFALSE 65640
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65621: LD_VAR 0 2
65625: PPUSH
65626: LD_VAR 0 4
65630: PPUSH
65631: LD_VAR 0 5
65635: PPUSH
65636: CALL 22423 0 3
// end ;
65640: LD_VAR 0 6
65644: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65645: LD_INT 0
65647: PPUSH
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
65655: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65656: LD_VAR 0 1
65660: NOT
65661: PUSH
65662: LD_VAR 0 2
65666: PPUSH
65667: LD_VAR 0 3
65671: PPUSH
65672: CALL_OW 488
65676: NOT
65677: OR
65678: PUSH
65679: LD_VAR 0 4
65683: NOT
65684: OR
65685: IFFALSE 65689
// exit ;
65687: GO 66029
// list := [ ] ;
65689: LD_ADDR_VAR 0 13
65693: PUSH
65694: EMPTY
65695: ST_TO_ADDR
// if x - r < 0 then
65696: LD_VAR 0 2
65700: PUSH
65701: LD_VAR 0 4
65705: MINUS
65706: PUSH
65707: LD_INT 0
65709: LESS
65710: IFFALSE 65722
// min_x := 0 else
65712: LD_ADDR_VAR 0 7
65716: PUSH
65717: LD_INT 0
65719: ST_TO_ADDR
65720: GO 65738
// min_x := x - r ;
65722: LD_ADDR_VAR 0 7
65726: PUSH
65727: LD_VAR 0 2
65731: PUSH
65732: LD_VAR 0 4
65736: MINUS
65737: ST_TO_ADDR
// if y - r < 0 then
65738: LD_VAR 0 3
65742: PUSH
65743: LD_VAR 0 4
65747: MINUS
65748: PUSH
65749: LD_INT 0
65751: LESS
65752: IFFALSE 65764
// min_y := 0 else
65754: LD_ADDR_VAR 0 8
65758: PUSH
65759: LD_INT 0
65761: ST_TO_ADDR
65762: GO 65780
// min_y := y - r ;
65764: LD_ADDR_VAR 0 8
65768: PUSH
65769: LD_VAR 0 3
65773: PUSH
65774: LD_VAR 0 4
65778: MINUS
65779: ST_TO_ADDR
// max_x := x + r ;
65780: LD_ADDR_VAR 0 9
65784: PUSH
65785: LD_VAR 0 2
65789: PUSH
65790: LD_VAR 0 4
65794: PLUS
65795: ST_TO_ADDR
// max_y := y + r ;
65796: LD_ADDR_VAR 0 10
65800: PUSH
65801: LD_VAR 0 3
65805: PUSH
65806: LD_VAR 0 4
65810: PLUS
65811: ST_TO_ADDR
// for _x = min_x to max_x do
65812: LD_ADDR_VAR 0 11
65816: PUSH
65817: DOUBLE
65818: LD_VAR 0 7
65822: DEC
65823: ST_TO_ADDR
65824: LD_VAR 0 9
65828: PUSH
65829: FOR_TO
65830: IFFALSE 65947
// for _y = min_y to max_y do
65832: LD_ADDR_VAR 0 12
65836: PUSH
65837: DOUBLE
65838: LD_VAR 0 8
65842: DEC
65843: ST_TO_ADDR
65844: LD_VAR 0 10
65848: PUSH
65849: FOR_TO
65850: IFFALSE 65943
// begin if not ValidHex ( _x , _y ) then
65852: LD_VAR 0 11
65856: PPUSH
65857: LD_VAR 0 12
65861: PPUSH
65862: CALL_OW 488
65866: NOT
65867: IFFALSE 65871
// continue ;
65869: GO 65849
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65871: LD_VAR 0 11
65875: PPUSH
65876: LD_VAR 0 12
65880: PPUSH
65881: CALL_OW 351
65885: PUSH
65886: LD_VAR 0 11
65890: PPUSH
65891: LD_VAR 0 12
65895: PPUSH
65896: CALL_OW 554
65900: AND
65901: IFFALSE 65941
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65903: LD_ADDR_VAR 0 13
65907: PUSH
65908: LD_VAR 0 13
65912: PPUSH
65913: LD_VAR 0 13
65917: PUSH
65918: LD_INT 1
65920: PLUS
65921: PPUSH
65922: LD_VAR 0 11
65926: PUSH
65927: LD_VAR 0 12
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PPUSH
65936: CALL_OW 2
65940: ST_TO_ADDR
// end ;
65941: GO 65849
65943: POP
65944: POP
65945: GO 65829
65947: POP
65948: POP
// if not list then
65949: LD_VAR 0 13
65953: NOT
65954: IFFALSE 65958
// exit ;
65956: GO 66029
// for i in list do
65958: LD_ADDR_VAR 0 6
65962: PUSH
65963: LD_VAR 0 13
65967: PUSH
65968: FOR_IN
65969: IFFALSE 66027
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65971: LD_VAR 0 1
65975: PPUSH
65976: LD_STRING M
65978: PUSH
65979: LD_VAR 0 6
65983: PUSH
65984: LD_INT 1
65986: ARRAY
65987: PUSH
65988: LD_VAR 0 6
65992: PUSH
65993: LD_INT 2
65995: ARRAY
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: PUSH
66018: EMPTY
66019: LIST
66020: PPUSH
66021: CALL_OW 447
66025: GO 65968
66027: POP
66028: POP
// end ;
66029: LD_VAR 0 5
66033: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66034: LD_EXP 80
66038: NOT
66039: IFFALSE 66089
66041: GO 66043
66043: DISABLE
// begin initHack := true ;
66044: LD_ADDR_EXP 80
66048: PUSH
66049: LD_INT 1
66051: ST_TO_ADDR
// hackTanks := [ ] ;
66052: LD_ADDR_EXP 81
66056: PUSH
66057: EMPTY
66058: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66059: LD_ADDR_EXP 82
66063: PUSH
66064: EMPTY
66065: ST_TO_ADDR
// hackLimit := 3 ;
66066: LD_ADDR_EXP 83
66070: PUSH
66071: LD_INT 3
66073: ST_TO_ADDR
// hackDist := 12 ;
66074: LD_ADDR_EXP 84
66078: PUSH
66079: LD_INT 12
66081: ST_TO_ADDR
// hackCounter := [ ] ;
66082: LD_ADDR_EXP 85
66086: PUSH
66087: EMPTY
66088: ST_TO_ADDR
// end ;
66089: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66090: LD_EXP 80
66094: PUSH
66095: LD_INT 34
66097: PUSH
66098: LD_INT 99
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PPUSH
66105: CALL_OW 69
66109: AND
66110: IFFALSE 66363
66112: GO 66114
66114: DISABLE
66115: LD_INT 0
66117: PPUSH
66118: PPUSH
// begin enable ;
66119: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66120: LD_ADDR_VAR 0 1
66124: PUSH
66125: LD_INT 34
66127: PUSH
66128: LD_INT 99
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PPUSH
66135: CALL_OW 69
66139: PUSH
66140: FOR_IN
66141: IFFALSE 66361
// begin if not i in hackTanks then
66143: LD_VAR 0 1
66147: PUSH
66148: LD_EXP 81
66152: IN
66153: NOT
66154: IFFALSE 66237
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66156: LD_ADDR_EXP 81
66160: PUSH
66161: LD_EXP 81
66165: PPUSH
66166: LD_EXP 81
66170: PUSH
66171: LD_INT 1
66173: PLUS
66174: PPUSH
66175: LD_VAR 0 1
66179: PPUSH
66180: CALL_OW 1
66184: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66185: LD_ADDR_EXP 82
66189: PUSH
66190: LD_EXP 82
66194: PPUSH
66195: LD_EXP 82
66199: PUSH
66200: LD_INT 1
66202: PLUS
66203: PPUSH
66204: EMPTY
66205: PPUSH
66206: CALL_OW 1
66210: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66211: LD_ADDR_EXP 85
66215: PUSH
66216: LD_EXP 85
66220: PPUSH
66221: LD_EXP 85
66225: PUSH
66226: LD_INT 1
66228: PLUS
66229: PPUSH
66230: EMPTY
66231: PPUSH
66232: CALL_OW 1
66236: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66237: LD_VAR 0 1
66241: PPUSH
66242: CALL_OW 302
66246: NOT
66247: IFFALSE 66260
// begin HackUnlinkAll ( i ) ;
66249: LD_VAR 0 1
66253: PPUSH
66254: CALL 66366 0 1
// continue ;
66258: GO 66140
// end ; HackCheckCapturedStatus ( i ) ;
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL 66809 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66269: LD_ADDR_VAR 0 2
66273: PUSH
66274: LD_INT 81
66276: PUSH
66277: LD_VAR 0 1
66281: PPUSH
66282: CALL_OW 255
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 33
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 91
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_EXP 84
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 50
66321: PUSH
66322: EMPTY
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: PPUSH
66331: CALL_OW 69
66335: ST_TO_ADDR
// if not tmp then
66336: LD_VAR 0 2
66340: NOT
66341: IFFALSE 66345
// continue ;
66343: GO 66140
// HackLink ( i , tmp ) ;
66345: LD_VAR 0 1
66349: PPUSH
66350: LD_VAR 0 2
66354: PPUSH
66355: CALL 66502 0 2
// end ;
66359: GO 66140
66361: POP
66362: POP
// end ;
66363: PPOPN 2
66365: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66366: LD_INT 0
66368: PPUSH
66369: PPUSH
66370: PPUSH
// if not hack in hackTanks then
66371: LD_VAR 0 1
66375: PUSH
66376: LD_EXP 81
66380: IN
66381: NOT
66382: IFFALSE 66386
// exit ;
66384: GO 66497
// index := GetElementIndex ( hackTanks , hack ) ;
66386: LD_ADDR_VAR 0 4
66390: PUSH
66391: LD_EXP 81
66395: PPUSH
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL 28294 0 2
66405: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66406: LD_EXP 82
66410: PUSH
66411: LD_VAR 0 4
66415: ARRAY
66416: IFFALSE 66497
// begin for i in hackTanksCaptured [ index ] do
66418: LD_ADDR_VAR 0 3
66422: PUSH
66423: LD_EXP 82
66427: PUSH
66428: LD_VAR 0 4
66432: ARRAY
66433: PUSH
66434: FOR_IN
66435: IFFALSE 66461
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66437: LD_VAR 0 3
66441: PUSH
66442: LD_INT 1
66444: ARRAY
66445: PPUSH
66446: LD_VAR 0 3
66450: PUSH
66451: LD_INT 2
66453: ARRAY
66454: PPUSH
66455: CALL_OW 235
66459: GO 66434
66461: POP
66462: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66463: LD_ADDR_EXP 82
66467: PUSH
66468: LD_EXP 82
66472: PPUSH
66473: LD_VAR 0 4
66477: PPUSH
66478: EMPTY
66479: PPUSH
66480: CALL_OW 1
66484: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66485: LD_VAR 0 1
66489: PPUSH
66490: LD_INT 0
66492: PPUSH
66493: CALL_OW 505
// end ; end ;
66497: LD_VAR 0 2
66501: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
66506: PPUSH
// if not hack in hackTanks or not vehicles then
66507: LD_VAR 0 1
66511: PUSH
66512: LD_EXP 81
66516: IN
66517: NOT
66518: PUSH
66519: LD_VAR 0 2
66523: NOT
66524: OR
66525: IFFALSE 66529
// exit ;
66527: GO 66804
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66529: LD_ADDR_VAR 0 2
66533: PUSH
66534: LD_VAR 0 1
66538: PPUSH
66539: LD_VAR 0 2
66543: PPUSH
66544: LD_INT 1
66546: PPUSH
66547: LD_INT 1
66549: PPUSH
66550: CALL 28944 0 4
66554: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66555: LD_ADDR_VAR 0 5
66559: PUSH
66560: LD_EXP 81
66564: PPUSH
66565: LD_VAR 0 1
66569: PPUSH
66570: CALL 28294 0 2
66574: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66575: LD_EXP 82
66579: PUSH
66580: LD_VAR 0 5
66584: ARRAY
66585: PUSH
66586: LD_EXP 83
66590: LESS
66591: IFFALSE 66780
// begin for i := 1 to vehicles do
66593: LD_ADDR_VAR 0 4
66597: PUSH
66598: DOUBLE
66599: LD_INT 1
66601: DEC
66602: ST_TO_ADDR
66603: LD_VAR 0 2
66607: PUSH
66608: FOR_TO
66609: IFFALSE 66778
// begin if hackTanksCaptured [ index ] = hackLimit then
66611: LD_EXP 82
66615: PUSH
66616: LD_VAR 0 5
66620: ARRAY
66621: PUSH
66622: LD_EXP 83
66626: EQUAL
66627: IFFALSE 66631
// break ;
66629: GO 66778
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66631: LD_ADDR_EXP 85
66635: PUSH
66636: LD_EXP 85
66640: PPUSH
66641: LD_VAR 0 5
66645: PPUSH
66646: LD_EXP 85
66650: PUSH
66651: LD_VAR 0 5
66655: ARRAY
66656: PUSH
66657: LD_INT 1
66659: PLUS
66660: PPUSH
66661: CALL_OW 1
66665: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66666: LD_ADDR_EXP 82
66670: PUSH
66671: LD_EXP 82
66675: PPUSH
66676: LD_VAR 0 5
66680: PUSH
66681: LD_EXP 82
66685: PUSH
66686: LD_VAR 0 5
66690: ARRAY
66691: PUSH
66692: LD_INT 1
66694: PLUS
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PPUSH
66700: LD_VAR 0 2
66704: PUSH
66705: LD_VAR 0 4
66709: ARRAY
66710: PUSH
66711: LD_VAR 0 2
66715: PUSH
66716: LD_VAR 0 4
66720: ARRAY
66721: PPUSH
66722: CALL_OW 255
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PPUSH
66731: CALL 28509 0 3
66735: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66736: LD_VAR 0 2
66740: PUSH
66741: LD_VAR 0 4
66745: ARRAY
66746: PPUSH
66747: LD_VAR 0 1
66751: PPUSH
66752: CALL_OW 255
66756: PPUSH
66757: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66761: LD_VAR 0 2
66765: PUSH
66766: LD_VAR 0 4
66770: ARRAY
66771: PPUSH
66772: CALL_OW 141
// end ;
66776: GO 66608
66778: POP
66779: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66780: LD_VAR 0 1
66784: PPUSH
66785: LD_EXP 82
66789: PUSH
66790: LD_VAR 0 5
66794: ARRAY
66795: PUSH
66796: LD_INT 0
66798: PLUS
66799: PPUSH
66800: CALL_OW 505
// end ;
66804: LD_VAR 0 3
66808: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66809: LD_INT 0
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
// if not hack in hackTanks then
66815: LD_VAR 0 1
66819: PUSH
66820: LD_EXP 81
66824: IN
66825: NOT
66826: IFFALSE 66830
// exit ;
66828: GO 67070
// index := GetElementIndex ( hackTanks , hack ) ;
66830: LD_ADDR_VAR 0 4
66834: PUSH
66835: LD_EXP 81
66839: PPUSH
66840: LD_VAR 0 1
66844: PPUSH
66845: CALL 28294 0 2
66849: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: DOUBLE
66856: LD_EXP 82
66860: PUSH
66861: LD_VAR 0 4
66865: ARRAY
66866: INC
66867: ST_TO_ADDR
66868: LD_INT 1
66870: PUSH
66871: FOR_DOWNTO
66872: IFFALSE 67044
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66874: LD_ADDR_VAR 0 5
66878: PUSH
66879: LD_EXP 82
66883: PUSH
66884: LD_VAR 0 4
66888: ARRAY
66889: PUSH
66890: LD_VAR 0 3
66894: ARRAY
66895: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66896: LD_VAR 0 5
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PPUSH
66905: CALL_OW 302
66909: NOT
66910: PUSH
66911: LD_VAR 0 5
66915: PUSH
66916: LD_INT 1
66918: ARRAY
66919: PPUSH
66920: CALL_OW 255
66924: PUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: CALL_OW 255
66934: NONEQUAL
66935: OR
66936: IFFALSE 67042
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66938: LD_VAR 0 5
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: PPUSH
66947: CALL_OW 305
66951: PUSH
66952: LD_VAR 0 5
66956: PUSH
66957: LD_INT 1
66959: ARRAY
66960: PPUSH
66961: CALL_OW 255
66965: PUSH
66966: LD_VAR 0 1
66970: PPUSH
66971: CALL_OW 255
66975: EQUAL
66976: AND
66977: IFFALSE 67001
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66979: LD_VAR 0 5
66983: PUSH
66984: LD_INT 1
66986: ARRAY
66987: PPUSH
66988: LD_VAR 0 5
66992: PUSH
66993: LD_INT 2
66995: ARRAY
66996: PPUSH
66997: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67001: LD_ADDR_EXP 82
67005: PUSH
67006: LD_EXP 82
67010: PPUSH
67011: LD_VAR 0 4
67015: PPUSH
67016: LD_EXP 82
67020: PUSH
67021: LD_VAR 0 4
67025: ARRAY
67026: PPUSH
67027: LD_VAR 0 3
67031: PPUSH
67032: CALL_OW 3
67036: PPUSH
67037: CALL_OW 1
67041: ST_TO_ADDR
// end ; end ;
67042: GO 66871
67044: POP
67045: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_EXP 82
67055: PUSH
67056: LD_VAR 0 4
67060: ARRAY
67061: PUSH
67062: LD_INT 0
67064: PLUS
67065: PPUSH
67066: CALL_OW 505
// end ;
67070: LD_VAR 0 2
67074: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67075: LD_INT 0
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
// if not hack in hackTanks then
67081: LD_VAR 0 1
67085: PUSH
67086: LD_EXP 81
67090: IN
67091: NOT
67092: IFFALSE 67096
// exit ;
67094: GO 67181
// index := GetElementIndex ( hackTanks , hack ) ;
67096: LD_ADDR_VAR 0 5
67100: PUSH
67101: LD_EXP 81
67105: PPUSH
67106: LD_VAR 0 1
67110: PPUSH
67111: CALL 28294 0 2
67115: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67116: LD_ADDR_VAR 0 4
67120: PUSH
67121: DOUBLE
67122: LD_INT 1
67124: DEC
67125: ST_TO_ADDR
67126: LD_EXP 82
67130: PUSH
67131: LD_VAR 0 5
67135: ARRAY
67136: PUSH
67137: FOR_TO
67138: IFFALSE 67179
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67140: LD_EXP 82
67144: PUSH
67145: LD_VAR 0 5
67149: ARRAY
67150: PUSH
67151: LD_VAR 0 4
67155: ARRAY
67156: PUSH
67157: LD_INT 1
67159: ARRAY
67160: PUSH
67161: LD_VAR 0 2
67165: EQUAL
67166: IFFALSE 67177
// KillUnit ( vehicle ) ;
67168: LD_VAR 0 2
67172: PPUSH
67173: CALL_OW 66
67177: GO 67137
67179: POP
67180: POP
// end ;
67181: LD_VAR 0 3
67185: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67186: LD_EXP 86
67190: NOT
67191: IFFALSE 67226
67193: GO 67195
67195: DISABLE
// begin initMiner := true ;
67196: LD_ADDR_EXP 86
67200: PUSH
67201: LD_INT 1
67203: ST_TO_ADDR
// minersList := [ ] ;
67204: LD_ADDR_EXP 87
67208: PUSH
67209: EMPTY
67210: ST_TO_ADDR
// minerMinesList := [ ] ;
67211: LD_ADDR_EXP 88
67215: PUSH
67216: EMPTY
67217: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67218: LD_ADDR_EXP 89
67222: PUSH
67223: LD_INT 5
67225: ST_TO_ADDR
// end ;
67226: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67227: LD_EXP 86
67231: PUSH
67232: LD_INT 34
67234: PUSH
67235: LD_INT 81
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PPUSH
67242: CALL_OW 69
67246: AND
67247: IFFALSE 67708
67249: GO 67251
67251: DISABLE
67252: LD_INT 0
67254: PPUSH
67255: PPUSH
67256: PPUSH
67257: PPUSH
// begin enable ;
67258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67259: LD_ADDR_VAR 0 1
67263: PUSH
67264: LD_INT 34
67266: PUSH
67267: LD_INT 81
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PPUSH
67274: CALL_OW 69
67278: PUSH
67279: FOR_IN
67280: IFFALSE 67352
// begin if not i in minersList then
67282: LD_VAR 0 1
67286: PUSH
67287: LD_EXP 87
67291: IN
67292: NOT
67293: IFFALSE 67350
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67295: LD_ADDR_EXP 87
67299: PUSH
67300: LD_EXP 87
67304: PPUSH
67305: LD_EXP 87
67309: PUSH
67310: LD_INT 1
67312: PLUS
67313: PPUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 1
67323: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67324: LD_ADDR_EXP 88
67328: PUSH
67329: LD_EXP 88
67333: PPUSH
67334: LD_EXP 88
67338: PUSH
67339: LD_INT 1
67341: PLUS
67342: PPUSH
67343: EMPTY
67344: PPUSH
67345: CALL_OW 1
67349: ST_TO_ADDR
// end end ;
67350: GO 67279
67352: POP
67353: POP
// for i := minerMinesList downto 1 do
67354: LD_ADDR_VAR 0 1
67358: PUSH
67359: DOUBLE
67360: LD_EXP 88
67364: INC
67365: ST_TO_ADDR
67366: LD_INT 1
67368: PUSH
67369: FOR_DOWNTO
67370: IFFALSE 67706
// begin if IsLive ( minersList [ i ] ) then
67372: LD_EXP 87
67376: PUSH
67377: LD_VAR 0 1
67381: ARRAY
67382: PPUSH
67383: CALL_OW 300
67387: IFFALSE 67415
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67389: LD_EXP 87
67393: PUSH
67394: LD_VAR 0 1
67398: ARRAY
67399: PPUSH
67400: LD_EXP 88
67404: PUSH
67405: LD_VAR 0 1
67409: ARRAY
67410: PPUSH
67411: CALL_OW 505
// if not minerMinesList [ i ] then
67415: LD_EXP 88
67419: PUSH
67420: LD_VAR 0 1
67424: ARRAY
67425: NOT
67426: IFFALSE 67430
// continue ;
67428: GO 67369
// for j := minerMinesList [ i ] downto 1 do
67430: LD_ADDR_VAR 0 2
67434: PUSH
67435: DOUBLE
67436: LD_EXP 88
67440: PUSH
67441: LD_VAR 0 1
67445: ARRAY
67446: INC
67447: ST_TO_ADDR
67448: LD_INT 1
67450: PUSH
67451: FOR_DOWNTO
67452: IFFALSE 67702
// begin side := GetSide ( minersList [ i ] ) ;
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_EXP 87
67463: PUSH
67464: LD_VAR 0 1
67468: ARRAY
67469: PPUSH
67470: CALL_OW 255
67474: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67475: LD_ADDR_VAR 0 4
67479: PUSH
67480: LD_EXP 88
67484: PUSH
67485: LD_VAR 0 1
67489: ARRAY
67490: PUSH
67491: LD_VAR 0 2
67495: ARRAY
67496: PUSH
67497: LD_INT 1
67499: ARRAY
67500: PPUSH
67501: LD_EXP 88
67505: PUSH
67506: LD_VAR 0 1
67510: ARRAY
67511: PUSH
67512: LD_VAR 0 2
67516: ARRAY
67517: PUSH
67518: LD_INT 2
67520: ARRAY
67521: PPUSH
67522: CALL_OW 428
67526: ST_TO_ADDR
// if not tmp then
67527: LD_VAR 0 4
67531: NOT
67532: IFFALSE 67536
// continue ;
67534: GO 67451
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67536: LD_VAR 0 4
67540: PUSH
67541: LD_INT 81
67543: PUSH
67544: LD_VAR 0 3
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PPUSH
67553: CALL_OW 69
67557: IN
67558: PUSH
67559: LD_EXP 88
67563: PUSH
67564: LD_VAR 0 1
67568: ARRAY
67569: PUSH
67570: LD_VAR 0 2
67574: ARRAY
67575: PUSH
67576: LD_INT 1
67578: ARRAY
67579: PPUSH
67580: LD_EXP 88
67584: PUSH
67585: LD_VAR 0 1
67589: ARRAY
67590: PUSH
67591: LD_VAR 0 2
67595: ARRAY
67596: PUSH
67597: LD_INT 2
67599: ARRAY
67600: PPUSH
67601: CALL_OW 458
67605: AND
67606: IFFALSE 67700
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67608: LD_EXP 88
67612: PUSH
67613: LD_VAR 0 1
67617: ARRAY
67618: PUSH
67619: LD_VAR 0 2
67623: ARRAY
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: PPUSH
67629: LD_EXP 88
67633: PUSH
67634: LD_VAR 0 1
67638: ARRAY
67639: PUSH
67640: LD_VAR 0 2
67644: ARRAY
67645: PUSH
67646: LD_INT 2
67648: ARRAY
67649: PPUSH
67650: LD_VAR 0 3
67654: PPUSH
67655: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67659: LD_ADDR_EXP 88
67663: PUSH
67664: LD_EXP 88
67668: PPUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_EXP 88
67678: PUSH
67679: LD_VAR 0 1
67683: ARRAY
67684: PPUSH
67685: LD_VAR 0 2
67689: PPUSH
67690: CALL_OW 3
67694: PPUSH
67695: CALL_OW 1
67699: ST_TO_ADDR
// end ; end ;
67700: GO 67451
67702: POP
67703: POP
// end ;
67704: GO 67369
67706: POP
67707: POP
// end ;
67708: PPOPN 4
67710: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67711: LD_INT 0
67713: PPUSH
67714: PPUSH
// result := false ;
67715: LD_ADDR_VAR 0 4
67719: PUSH
67720: LD_INT 0
67722: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67723: LD_VAR 0 1
67727: PPUSH
67728: CALL_OW 264
67732: PUSH
67733: LD_INT 81
67735: EQUAL
67736: NOT
67737: IFFALSE 67741
// exit ;
67739: GO 67981
// index := GetElementIndex ( minersList , unit ) ;
67741: LD_ADDR_VAR 0 5
67745: PUSH
67746: LD_EXP 87
67750: PPUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: CALL 28294 0 2
67760: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67761: LD_EXP 88
67765: PUSH
67766: LD_VAR 0 5
67770: ARRAY
67771: PUSH
67772: LD_EXP 89
67776: GREATEREQUAL
67777: IFFALSE 67781
// exit ;
67779: GO 67981
// ComMoveXY ( unit , x , y ) ;
67781: LD_VAR 0 1
67785: PPUSH
67786: LD_VAR 0 2
67790: PPUSH
67791: LD_VAR 0 3
67795: PPUSH
67796: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67800: LD_INT 35
67802: PPUSH
67803: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67807: LD_VAR 0 1
67811: PPUSH
67812: LD_VAR 0 2
67816: PPUSH
67817: LD_VAR 0 3
67821: PPUSH
67822: CALL 59630 0 3
67826: NOT
67827: PUSH
67828: LD_VAR 0 1
67832: PPUSH
67833: CALL_OW 314
67837: AND
67838: IFFALSE 67842
// exit ;
67840: GO 67981
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67842: LD_VAR 0 2
67846: PPUSH
67847: LD_VAR 0 3
67851: PPUSH
67852: CALL_OW 428
67856: PUSH
67857: LD_VAR 0 1
67861: EQUAL
67862: PUSH
67863: LD_VAR 0 1
67867: PPUSH
67868: CALL_OW 314
67872: NOT
67873: AND
67874: IFFALSE 67800
// PlaySoundXY ( x , y , PlantMine ) ;
67876: LD_VAR 0 2
67880: PPUSH
67881: LD_VAR 0 3
67885: PPUSH
67886: LD_STRING PlantMine
67888: PPUSH
67889: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67893: LD_VAR 0 2
67897: PPUSH
67898: LD_VAR 0 3
67902: PPUSH
67903: LD_VAR 0 1
67907: PPUSH
67908: CALL_OW 255
67912: PPUSH
67913: LD_INT 0
67915: PPUSH
67916: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67920: LD_ADDR_EXP 88
67924: PUSH
67925: LD_EXP 88
67929: PPUSH
67930: LD_VAR 0 5
67934: PUSH
67935: LD_EXP 88
67939: PUSH
67940: LD_VAR 0 5
67944: ARRAY
67945: PUSH
67946: LD_INT 1
67948: PLUS
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PPUSH
67954: LD_VAR 0 2
67958: PUSH
67959: LD_VAR 0 3
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PPUSH
67968: CALL 28509 0 3
67972: ST_TO_ADDR
// result := true ;
67973: LD_ADDR_VAR 0 4
67977: PUSH
67978: LD_INT 1
67980: ST_TO_ADDR
// end ;
67981: LD_VAR 0 4
67985: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67986: LD_INT 0
67988: PPUSH
67989: PPUSH
67990: PPUSH
// if not unit in minersList then
67991: LD_VAR 0 1
67995: PUSH
67996: LD_EXP 87
68000: IN
68001: NOT
68002: IFFALSE 68006
// exit ;
68004: GO 68398
// index := GetElementIndex ( minersList , unit ) ;
68006: LD_ADDR_VAR 0 6
68010: PUSH
68011: LD_EXP 87
68015: PPUSH
68016: LD_VAR 0 1
68020: PPUSH
68021: CALL 28294 0 2
68025: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68026: LD_ADDR_VAR 0 5
68030: PUSH
68031: DOUBLE
68032: LD_EXP 88
68036: PUSH
68037: LD_VAR 0 6
68041: ARRAY
68042: INC
68043: ST_TO_ADDR
68044: LD_INT 1
68046: PUSH
68047: FOR_DOWNTO
68048: IFFALSE 68209
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68050: LD_EXP 88
68054: PUSH
68055: LD_VAR 0 6
68059: ARRAY
68060: PUSH
68061: LD_VAR 0 5
68065: ARRAY
68066: PUSH
68067: LD_INT 1
68069: ARRAY
68070: PUSH
68071: LD_VAR 0 2
68075: EQUAL
68076: PUSH
68077: LD_EXP 88
68081: PUSH
68082: LD_VAR 0 6
68086: ARRAY
68087: PUSH
68088: LD_VAR 0 5
68092: ARRAY
68093: PUSH
68094: LD_INT 2
68096: ARRAY
68097: PUSH
68098: LD_VAR 0 3
68102: EQUAL
68103: AND
68104: IFFALSE 68207
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68106: LD_EXP 88
68110: PUSH
68111: LD_VAR 0 6
68115: ARRAY
68116: PUSH
68117: LD_VAR 0 5
68121: ARRAY
68122: PUSH
68123: LD_INT 1
68125: ARRAY
68126: PPUSH
68127: LD_EXP 88
68131: PUSH
68132: LD_VAR 0 6
68136: ARRAY
68137: PUSH
68138: LD_VAR 0 5
68142: ARRAY
68143: PUSH
68144: LD_INT 2
68146: ARRAY
68147: PPUSH
68148: LD_VAR 0 1
68152: PPUSH
68153: CALL_OW 255
68157: PPUSH
68158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68162: LD_ADDR_EXP 88
68166: PUSH
68167: LD_EXP 88
68171: PPUSH
68172: LD_VAR 0 6
68176: PPUSH
68177: LD_EXP 88
68181: PUSH
68182: LD_VAR 0 6
68186: ARRAY
68187: PPUSH
68188: LD_VAR 0 5
68192: PPUSH
68193: CALL_OW 3
68197: PPUSH
68198: CALL_OW 1
68202: ST_TO_ADDR
// exit ;
68203: POP
68204: POP
68205: GO 68398
// end ; end ;
68207: GO 68047
68209: POP
68210: POP
// for i := minerMinesList [ index ] downto 1 do
68211: LD_ADDR_VAR 0 5
68215: PUSH
68216: DOUBLE
68217: LD_EXP 88
68221: PUSH
68222: LD_VAR 0 6
68226: ARRAY
68227: INC
68228: ST_TO_ADDR
68229: LD_INT 1
68231: PUSH
68232: FOR_DOWNTO
68233: IFFALSE 68396
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68235: LD_EXP 88
68239: PUSH
68240: LD_VAR 0 6
68244: ARRAY
68245: PUSH
68246: LD_VAR 0 5
68250: ARRAY
68251: PUSH
68252: LD_INT 1
68254: ARRAY
68255: PPUSH
68256: LD_EXP 88
68260: PUSH
68261: LD_VAR 0 6
68265: ARRAY
68266: PUSH
68267: LD_VAR 0 5
68271: ARRAY
68272: PUSH
68273: LD_INT 2
68275: ARRAY
68276: PPUSH
68277: LD_VAR 0 2
68281: PPUSH
68282: LD_VAR 0 3
68286: PPUSH
68287: CALL_OW 298
68291: PUSH
68292: LD_INT 6
68294: LESS
68295: IFFALSE 68394
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68297: LD_EXP 88
68301: PUSH
68302: LD_VAR 0 6
68306: ARRAY
68307: PUSH
68308: LD_VAR 0 5
68312: ARRAY
68313: PUSH
68314: LD_INT 1
68316: ARRAY
68317: PPUSH
68318: LD_EXP 88
68322: PUSH
68323: LD_VAR 0 6
68327: ARRAY
68328: PUSH
68329: LD_VAR 0 5
68333: ARRAY
68334: PUSH
68335: LD_INT 2
68337: ARRAY
68338: PPUSH
68339: LD_VAR 0 1
68343: PPUSH
68344: CALL_OW 255
68348: PPUSH
68349: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68353: LD_ADDR_EXP 88
68357: PUSH
68358: LD_EXP 88
68362: PPUSH
68363: LD_VAR 0 6
68367: PPUSH
68368: LD_EXP 88
68372: PUSH
68373: LD_VAR 0 6
68377: ARRAY
68378: PPUSH
68379: LD_VAR 0 5
68383: PPUSH
68384: CALL_OW 3
68388: PPUSH
68389: CALL_OW 1
68393: ST_TO_ADDR
// end ; end ;
68394: GO 68232
68396: POP
68397: POP
// end ;
68398: LD_VAR 0 4
68402: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68403: LD_INT 0
68405: PPUSH
68406: PPUSH
68407: PPUSH
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 264
68423: PUSH
68424: LD_INT 81
68426: EQUAL
68427: NOT
68428: PUSH
68429: LD_VAR 0 1
68433: PUSH
68434: LD_EXP 87
68438: IN
68439: NOT
68440: OR
68441: IFFALSE 68445
// exit ;
68443: GO 68767
// index := GetElementIndex ( minersList , unit ) ;
68445: LD_ADDR_VAR 0 6
68449: PUSH
68450: LD_EXP 87
68454: PPUSH
68455: LD_VAR 0 1
68459: PPUSH
68460: CALL 28294 0 2
68464: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68465: LD_ADDR_VAR 0 8
68469: PUSH
68470: LD_EXP 89
68474: PUSH
68475: LD_EXP 88
68479: PUSH
68480: LD_VAR 0 6
68484: ARRAY
68485: MINUS
68486: ST_TO_ADDR
// if not minesFreeAmount then
68487: LD_VAR 0 8
68491: NOT
68492: IFFALSE 68496
// exit ;
68494: GO 68767
// tmp := [ ] ;
68496: LD_ADDR_VAR 0 7
68500: PUSH
68501: EMPTY
68502: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68503: LD_ADDR_VAR 0 5
68507: PUSH
68508: DOUBLE
68509: LD_INT 1
68511: DEC
68512: ST_TO_ADDR
68513: LD_VAR 0 8
68517: PUSH
68518: FOR_TO
68519: IFFALSE 68714
// begin _d := rand ( 0 , 5 ) ;
68521: LD_ADDR_VAR 0 11
68525: PUSH
68526: LD_INT 0
68528: PPUSH
68529: LD_INT 5
68531: PPUSH
68532: CALL_OW 12
68536: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68537: LD_ADDR_VAR 0 12
68541: PUSH
68542: LD_INT 2
68544: PPUSH
68545: LD_INT 6
68547: PPUSH
68548: CALL_OW 12
68552: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68553: LD_ADDR_VAR 0 9
68557: PUSH
68558: LD_VAR 0 2
68562: PPUSH
68563: LD_VAR 0 11
68567: PPUSH
68568: LD_VAR 0 12
68572: PPUSH
68573: CALL_OW 272
68577: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68578: LD_ADDR_VAR 0 10
68582: PUSH
68583: LD_VAR 0 3
68587: PPUSH
68588: LD_VAR 0 11
68592: PPUSH
68593: LD_VAR 0 12
68597: PPUSH
68598: CALL_OW 273
68602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68603: LD_VAR 0 9
68607: PPUSH
68608: LD_VAR 0 10
68612: PPUSH
68613: CALL_OW 488
68617: PUSH
68618: LD_VAR 0 9
68622: PUSH
68623: LD_VAR 0 10
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_VAR 0 7
68636: IN
68637: NOT
68638: AND
68639: PUSH
68640: LD_VAR 0 9
68644: PPUSH
68645: LD_VAR 0 10
68649: PPUSH
68650: CALL_OW 458
68654: NOT
68655: AND
68656: IFFALSE 68698
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68658: LD_ADDR_VAR 0 7
68662: PUSH
68663: LD_VAR 0 7
68667: PPUSH
68668: LD_VAR 0 7
68672: PUSH
68673: LD_INT 1
68675: PLUS
68676: PPUSH
68677: LD_VAR 0 9
68681: PUSH
68682: LD_VAR 0 10
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PPUSH
68691: CALL_OW 1
68695: ST_TO_ADDR
68696: GO 68712
// i := i - 1 ;
68698: LD_ADDR_VAR 0 5
68702: PUSH
68703: LD_VAR 0 5
68707: PUSH
68708: LD_INT 1
68710: MINUS
68711: ST_TO_ADDR
// end ;
68712: GO 68518
68714: POP
68715: POP
// for i in tmp do
68716: LD_ADDR_VAR 0 5
68720: PUSH
68721: LD_VAR 0 7
68725: PUSH
68726: FOR_IN
68727: IFFALSE 68765
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68729: LD_VAR 0 1
68733: PPUSH
68734: LD_VAR 0 5
68738: PUSH
68739: LD_INT 1
68741: ARRAY
68742: PPUSH
68743: LD_VAR 0 5
68747: PUSH
68748: LD_INT 2
68750: ARRAY
68751: PPUSH
68752: CALL 67711 0 3
68756: NOT
68757: IFFALSE 68763
// exit ;
68759: POP
68760: POP
68761: GO 68767
68763: GO 68726
68765: POP
68766: POP
// end ;
68767: LD_VAR 0 4
68771: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68772: LD_INT 0
68774: PPUSH
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
// if not GetClass ( unit ) = class_sniper then
68781: LD_VAR 0 1
68785: PPUSH
68786: CALL_OW 257
68790: PUSH
68791: LD_INT 5
68793: EQUAL
68794: NOT
68795: IFFALSE 68799
// exit ;
68797: GO 69187
// dist := 8 ;
68799: LD_ADDR_VAR 0 5
68803: PUSH
68804: LD_INT 8
68806: ST_TO_ADDR
// viewRange := 12 ;
68807: LD_ADDR_VAR 0 7
68811: PUSH
68812: LD_INT 12
68814: ST_TO_ADDR
// side := GetSide ( unit ) ;
68815: LD_ADDR_VAR 0 6
68819: PUSH
68820: LD_VAR 0 1
68824: PPUSH
68825: CALL_OW 255
68829: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68830: LD_INT 61
68832: PPUSH
68833: LD_VAR 0 6
68837: PPUSH
68838: CALL_OW 321
68842: PUSH
68843: LD_INT 2
68845: EQUAL
68846: IFFALSE 68856
// viewRange := 16 ;
68848: LD_ADDR_VAR 0 7
68852: PUSH
68853: LD_INT 16
68855: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68856: LD_VAR 0 1
68860: PPUSH
68861: LD_VAR 0 2
68865: PPUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: CALL_OW 297
68875: PUSH
68876: LD_VAR 0 5
68880: GREATER
68881: IFFALSE 68960
// begin ComMoveXY ( unit , x , y ) ;
68883: LD_VAR 0 1
68887: PPUSH
68888: LD_VAR 0 2
68892: PPUSH
68893: LD_VAR 0 3
68897: PPUSH
68898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68902: LD_INT 35
68904: PPUSH
68905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68909: LD_VAR 0 1
68913: PPUSH
68914: LD_VAR 0 2
68918: PPUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL 59630 0 3
68928: NOT
68929: IFFALSE 68933
// exit ;
68931: GO 69187
// until GetDistUnitXY ( unit , x , y ) < dist ;
68933: LD_VAR 0 1
68937: PPUSH
68938: LD_VAR 0 2
68942: PPUSH
68943: LD_VAR 0 3
68947: PPUSH
68948: CALL_OW 297
68952: PUSH
68953: LD_VAR 0 5
68957: LESS
68958: IFFALSE 68902
// end ; ComTurnXY ( unit , x , y ) ;
68960: LD_VAR 0 1
68964: PPUSH
68965: LD_VAR 0 2
68969: PPUSH
68970: LD_VAR 0 3
68974: PPUSH
68975: CALL_OW 118
// wait ( 5 ) ;
68979: LD_INT 5
68981: PPUSH
68982: CALL_OW 67
// _d := GetDir ( unit ) ;
68986: LD_ADDR_VAR 0 10
68990: PUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: CALL_OW 254
69000: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69001: LD_ADDR_VAR 0 8
69005: PUSH
69006: LD_VAR 0 1
69010: PPUSH
69011: CALL_OW 250
69015: PPUSH
69016: LD_VAR 0 10
69020: PPUSH
69021: LD_VAR 0 5
69025: PPUSH
69026: CALL_OW 272
69030: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69031: LD_ADDR_VAR 0 9
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 251
69045: PPUSH
69046: LD_VAR 0 10
69050: PPUSH
69051: LD_VAR 0 5
69055: PPUSH
69056: CALL_OW 273
69060: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69061: LD_VAR 0 8
69065: PPUSH
69066: LD_VAR 0 9
69070: PPUSH
69071: CALL_OW 488
69075: NOT
69076: IFFALSE 69080
// exit ;
69078: GO 69187
// ComAnimCustom ( unit , 1 ) ;
69080: LD_VAR 0 1
69084: PPUSH
69085: LD_INT 1
69087: PPUSH
69088: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69092: LD_VAR 0 8
69096: PPUSH
69097: LD_VAR 0 9
69101: PPUSH
69102: LD_VAR 0 6
69106: PPUSH
69107: LD_VAR 0 7
69111: PPUSH
69112: CALL_OW 330
// repeat wait ( 1 ) ;
69116: LD_INT 1
69118: PPUSH
69119: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69123: LD_VAR 0 1
69127: PPUSH
69128: CALL_OW 316
69132: PUSH
69133: LD_VAR 0 1
69137: PPUSH
69138: CALL_OW 314
69142: OR
69143: PUSH
69144: LD_VAR 0 1
69148: PPUSH
69149: CALL_OW 302
69153: NOT
69154: OR
69155: PUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL_OW 301
69165: OR
69166: IFFALSE 69116
// RemoveSeeing ( _x , _y , side ) ;
69168: LD_VAR 0 8
69172: PPUSH
69173: LD_VAR 0 9
69177: PPUSH
69178: LD_VAR 0 6
69182: PPUSH
69183: CALL_OW 331
// end ; end_of_file
69187: LD_VAR 0 4
69191: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69192: LD_VAR 0 1
69196: PPUSH
69197: LD_VAR 0 2
69201: PPUSH
69202: LD_VAR 0 3
69206: PPUSH
69207: LD_VAR 0 4
69211: PPUSH
69212: LD_VAR 0 5
69216: PPUSH
69217: LD_VAR 0 6
69221: PPUSH
69222: CALL 7774 0 6
// end ;
69226: PPOPN 6
69228: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69229: LD_INT 0
69231: PPUSH
// begin if not units then
69232: LD_VAR 0 1
69236: NOT
69237: IFFALSE 69241
// exit ;
69239: GO 69241
// end ;
69241: PPOPN 7
69243: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69244: CALL 7745 0 0
// end ;
69248: PPOPN 1
69250: END
