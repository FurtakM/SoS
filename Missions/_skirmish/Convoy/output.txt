// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin enable ;
7717: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7718: LD_STRING updateTimer(
7720: PUSH
7721: LD_OWVAR 1
7725: STR
7726: PUSH
7727: LD_STRING );
7729: STR
7730: PPUSH
7731: CALL_OW 559
// end ;
7735: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7736: LD_INT 0
7738: PPUSH
// if p2 = 100 then
7739: LD_VAR 0 2
7743: PUSH
7744: LD_INT 100
7746: EQUAL
7747: IFFALSE 8750
// begin if not StreamModeActive then
7749: LD_EXP 19
7753: NOT
7754: IFFALSE 7764
// StreamModeActive := true ;
7756: LD_ADDR_EXP 19
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// if p3 = 0 then
7764: LD_VAR 0 3
7768: PUSH
7769: LD_INT 0
7771: EQUAL
7772: IFFALSE 7778
// InitStreamMode ;
7774: CALL 8910 0 0
// if p3 = 1 then
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: IFFALSE 7796
// sRocket := true ;
7788: LD_ADDR_EXP 24
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
// if p3 = 2 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 2
7803: EQUAL
7804: IFFALSE 7814
// sSpeed := true ;
7806: LD_ADDR_EXP 23
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 3 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 3
7821: EQUAL
7822: IFFALSE 7832
// sEngine := true ;
7824: LD_ADDR_EXP 25
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 4 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 4
7839: EQUAL
7840: IFFALSE 7850
// sSpec := true ;
7842: LD_ADDR_EXP 22
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 5 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 5
7857: EQUAL
7858: IFFALSE 7868
// sLevel := true ;
7860: LD_ADDR_EXP 26
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 6 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 6
7875: EQUAL
7876: IFFALSE 7886
// sArmoury := true ;
7878: LD_ADDR_EXP 27
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 7 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 7
7893: EQUAL
7894: IFFALSE 7904
// sRadar := true ;
7896: LD_ADDR_EXP 28
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 8 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 8
7911: EQUAL
7912: IFFALSE 7922
// sBunker := true ;
7914: LD_ADDR_EXP 29
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 9 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 9
7929: EQUAL
7930: IFFALSE 7940
// sHack := true ;
7932: LD_ADDR_EXP 30
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 10 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 10
7947: EQUAL
7948: IFFALSE 7958
// sFire := true ;
7950: LD_ADDR_EXP 31
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 11 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 11
7965: EQUAL
7966: IFFALSE 7976
// sRefresh := true ;
7968: LD_ADDR_EXP 32
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 12 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 12
7983: EQUAL
7984: IFFALSE 7994
// sExp := true ;
7986: LD_ADDR_EXP 33
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 13 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 13
8001: EQUAL
8002: IFFALSE 8012
// sDepot := true ;
8004: LD_ADDR_EXP 34
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 14 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 14
8019: EQUAL
8020: IFFALSE 8030
// sFlag := true ;
8022: LD_ADDR_EXP 35
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 15 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 15
8037: EQUAL
8038: IFFALSE 8048
// sKamikadze := true ;
8040: LD_ADDR_EXP 43
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 16 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 16
8055: EQUAL
8056: IFFALSE 8066
// sTroll := true ;
8058: LD_ADDR_EXP 44
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 17 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 17
8073: EQUAL
8074: IFFALSE 8084
// sSlow := true ;
8076: LD_ADDR_EXP 45
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 18 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 18
8091: EQUAL
8092: IFFALSE 8102
// sLack := true ;
8094: LD_ADDR_EXP 46
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 19 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 19
8109: EQUAL
8110: IFFALSE 8120
// sTank := true ;
8112: LD_ADDR_EXP 48
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// if p3 = 20 then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 20
8127: EQUAL
8128: IFFALSE 8138
// sRemote := true ;
8130: LD_ADDR_EXP 49
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 21 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 21
8145: EQUAL
8146: IFFALSE 8156
// sPowell := true ;
8148: LD_ADDR_EXP 50
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 22 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 22
8163: EQUAL
8164: IFFALSE 8174
// sTeleport := true ;
8166: LD_ADDR_EXP 53
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if p3 = 23 then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 23
8181: EQUAL
8182: IFFALSE 8192
// sOilTower := true ;
8184: LD_ADDR_EXP 55
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// if p3 = 24 then
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 24
8199: EQUAL
8200: IFFALSE 8210
// sShovel := true ;
8202: LD_ADDR_EXP 56
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// if p3 = 25 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 25
8217: EQUAL
8218: IFFALSE 8228
// sSheik := true ;
8220: LD_ADDR_EXP 57
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if p3 = 26 then
8228: LD_VAR 0 3
8232: PUSH
8233: LD_INT 26
8235: EQUAL
8236: IFFALSE 8246
// sEarthquake := true ;
8238: LD_ADDR_EXP 59
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// if p3 = 27 then
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 27
8253: EQUAL
8254: IFFALSE 8264
// sAI := true ;
8256: LD_ADDR_EXP 60
8260: PUSH
8261: LD_INT 1
8263: ST_TO_ADDR
// if p3 = 28 then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 28
8271: EQUAL
8272: IFFALSE 8282
// sCargo := true ;
8274: LD_ADDR_EXP 63
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// if p3 = 29 then
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 29
8289: EQUAL
8290: IFFALSE 8300
// sDLaser := true ;
8292: LD_ADDR_EXP 64
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// if p3 = 30 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 30
8307: EQUAL
8308: IFFALSE 8318
// sExchange := true ;
8310: LD_ADDR_EXP 65
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 31 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 31
8325: EQUAL
8326: IFFALSE 8336
// sFac := true ;
8328: LD_ADDR_EXP 66
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 32 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 32
8343: EQUAL
8344: IFFALSE 8354
// sPower := true ;
8346: LD_ADDR_EXP 67
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 33 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 33
8361: EQUAL
8362: IFFALSE 8372
// sRandom := true ;
8364: LD_ADDR_EXP 68
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 34 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 34
8379: EQUAL
8380: IFFALSE 8390
// sShield := true ;
8382: LD_ADDR_EXP 69
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 35 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 35
8397: EQUAL
8398: IFFALSE 8408
// sTime := true ;
8400: LD_ADDR_EXP 70
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 36 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 36
8415: EQUAL
8416: IFFALSE 8426
// sTools := true ;
8418: LD_ADDR_EXP 71
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 101 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 101
8433: EQUAL
8434: IFFALSE 8444
// sSold := true ;
8436: LD_ADDR_EXP 36
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 102 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 102
8451: EQUAL
8452: IFFALSE 8462
// sDiff := true ;
8454: LD_ADDR_EXP 37
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 103 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 103
8469: EQUAL
8470: IFFALSE 8480
// sFog := true ;
8472: LD_ADDR_EXP 40
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 104 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 104
8487: EQUAL
8488: IFFALSE 8498
// sReset := true ;
8490: LD_ADDR_EXP 41
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 105 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 105
8505: EQUAL
8506: IFFALSE 8516
// sSun := true ;
8508: LD_ADDR_EXP 42
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 106 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 106
8523: EQUAL
8524: IFFALSE 8534
// sTiger := true ;
8526: LD_ADDR_EXP 38
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 107 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 107
8541: EQUAL
8542: IFFALSE 8552
// sBomb := true ;
8544: LD_ADDR_EXP 39
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 108 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 108
8559: EQUAL
8560: IFFALSE 8570
// sWound := true ;
8562: LD_ADDR_EXP 47
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 109 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 109
8577: EQUAL
8578: IFFALSE 8588
// sBetray := true ;
8580: LD_ADDR_EXP 51
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 110 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 110
8595: EQUAL
8596: IFFALSE 8606
// sContamin := true ;
8598: LD_ADDR_EXP 52
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 111 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 111
8613: EQUAL
8614: IFFALSE 8624
// sOil := true ;
8616: LD_ADDR_EXP 54
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 112 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 112
8631: EQUAL
8632: IFFALSE 8642
// sStu := true ;
8634: LD_ADDR_EXP 58
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 113 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 113
8649: EQUAL
8650: IFFALSE 8660
// sBazooka := true ;
8652: LD_ADDR_EXP 61
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 114 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 114
8667: EQUAL
8668: IFFALSE 8678
// sMortar := true ;
8670: LD_ADDR_EXP 62
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 115 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 115
8685: EQUAL
8686: IFFALSE 8696
// sRanger := true ;
8688: LD_ADDR_EXP 72
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// if p3 = 116 then
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 116
8703: EQUAL
8704: IFFALSE 8714
// sComputer := true ;
8706: LD_ADDR_EXP 73
8710: PUSH
8711: LD_INT 1
8713: ST_TO_ADDR
// if p3 = 117 then
8714: LD_VAR 0 3
8718: PUSH
8719: LD_INT 117
8721: EQUAL
8722: IFFALSE 8732
// s30 := true ;
8724: LD_ADDR_EXP 74
8728: PUSH
8729: LD_INT 1
8731: ST_TO_ADDR
// if p3 = 118 then
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 118
8739: EQUAL
8740: IFFALSE 8750
// s60 := true ;
8742: LD_ADDR_EXP 75
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// end ; if p2 = 101 then
8750: LD_VAR 0 2
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: IFFALSE 8886
// begin case p3 of 1 :
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 1
8767: DOUBLE
8768: EQUAL
8769: IFTRUE 8773
8771: GO 8780
8773: POP
// hHackUnlimitedResources ; 2 :
8774: CALL 20482 0 0
8778: GO 8886
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8795
8788: POP
// hHackSetLevel10 ; 3 :
8789: CALL 20615 0 0
8793: GO 8886
8795: LD_INT 3
8797: DOUBLE
8798: EQUAL
8799: IFTRUE 8803
8801: GO 8810
8803: POP
// hHackSetLevel10YourUnits ; 4 :
8804: CALL 20700 0 0
8808: GO 8886
8810: LD_INT 4
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8825
8818: POP
// hHackInvincible ; 5 :
8819: CALL 21148 0 0
8823: GO 8886
8825: LD_INT 5
8827: DOUBLE
8828: EQUAL
8829: IFTRUE 8833
8831: GO 8840
8833: POP
// hHackInvisible ; 6 :
8834: CALL 21259 0 0
8838: GO 8886
8840: LD_INT 6
8842: DOUBLE
8843: EQUAL
8844: IFTRUE 8848
8846: GO 8855
8848: POP
// hHackChangeYourSide ; 7 :
8849: CALL 21316 0 0
8853: GO 8886
8855: LD_INT 7
8857: DOUBLE
8858: EQUAL
8859: IFTRUE 8863
8861: GO 8870
8863: POP
// hHackChangeUnitSide ; 8 :
8864: CALL 21358 0 0
8868: GO 8886
8870: LD_INT 8
8872: DOUBLE
8873: EQUAL
8874: IFTRUE 8878
8876: GO 8885
8878: POP
// hHackFog ; end ;
8879: CALL 21459 0 0
8883: GO 8886
8885: POP
// end ; end ;
8886: LD_VAR 0 7
8890: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8891: GO 8893
8893: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8894: LD_STRING initStreamRollete();
8896: PPUSH
8897: CALL_OW 559
// InitStreamMode ;
8901: CALL 8910 0 0
// DefineStreamItems ( ) ;
8905: CALL 9374 0 0
// end ;
8909: END
// function InitStreamMode ; begin
8910: LD_INT 0
8912: PPUSH
// streamModeActive := false ;
8913: LD_ADDR_EXP 19
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// normalCounter := 36 ;
8921: LD_ADDR_EXP 20
8925: PUSH
8926: LD_INT 36
8928: ST_TO_ADDR
// hardcoreCounter := 16 ;
8929: LD_ADDR_EXP 21
8933: PUSH
8934: LD_INT 16
8936: ST_TO_ADDR
// sRocket := false ;
8937: LD_ADDR_EXP 24
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// sSpeed := false ;
8945: LD_ADDR_EXP 23
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// sEngine := false ;
8953: LD_ADDR_EXP 25
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// sSpec := false ;
8961: LD_ADDR_EXP 22
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// sLevel := false ;
8969: LD_ADDR_EXP 26
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sArmoury := false ;
8977: LD_ADDR_EXP 27
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sRadar := false ;
8985: LD_ADDR_EXP 28
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sBunker := false ;
8993: LD_ADDR_EXP 29
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sHack := false ;
9001: LD_ADDR_EXP 30
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sFire := false ;
9009: LD_ADDR_EXP 31
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sRefresh := false ;
9017: LD_ADDR_EXP 32
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sExp := false ;
9025: LD_ADDR_EXP 33
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sDepot := false ;
9033: LD_ADDR_EXP 34
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sFlag := false ;
9041: LD_ADDR_EXP 35
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sKamikadze := false ;
9049: LD_ADDR_EXP 43
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sTroll := false ;
9057: LD_ADDR_EXP 44
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sSlow := false ;
9065: LD_ADDR_EXP 45
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// sLack := false ;
9073: LD_ADDR_EXP 46
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// sTank := false ;
9081: LD_ADDR_EXP 48
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// sRemote := false ;
9089: LD_ADDR_EXP 49
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// sPowell := false ;
9097: LD_ADDR_EXP 50
9101: PUSH
9102: LD_INT 0
9104: ST_TO_ADDR
// sTeleport := false ;
9105: LD_ADDR_EXP 53
9109: PUSH
9110: LD_INT 0
9112: ST_TO_ADDR
// sOilTower := false ;
9113: LD_ADDR_EXP 55
9117: PUSH
9118: LD_INT 0
9120: ST_TO_ADDR
// sShovel := false ;
9121: LD_ADDR_EXP 56
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// sSheik := false ;
9129: LD_ADDR_EXP 57
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// sEarthquake := false ;
9137: LD_ADDR_EXP 59
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// sAI := false ;
9145: LD_ADDR_EXP 60
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// sCargo := false ;
9153: LD_ADDR_EXP 63
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// sDLaser := false ;
9161: LD_ADDR_EXP 64
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// sExchange := false ;
9169: LD_ADDR_EXP 65
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// sFac := false ;
9177: LD_ADDR_EXP 66
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// sPower := false ;
9185: LD_ADDR_EXP 67
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// sRandom := false ;
9193: LD_ADDR_EXP 68
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// sShield := false ;
9201: LD_ADDR_EXP 69
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// sTime := false ;
9209: LD_ADDR_EXP 70
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// sTools := false ;
9217: LD_ADDR_EXP 71
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// sSold := false ;
9225: LD_ADDR_EXP 36
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// sDiff := false ;
9233: LD_ADDR_EXP 37
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// sFog := false ;
9241: LD_ADDR_EXP 40
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// sReset := false ;
9249: LD_ADDR_EXP 41
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// sSun := false ;
9257: LD_ADDR_EXP 42
9261: PUSH
9262: LD_INT 0
9264: ST_TO_ADDR
// sTiger := false ;
9265: LD_ADDR_EXP 38
9269: PUSH
9270: LD_INT 0
9272: ST_TO_ADDR
// sBomb := false ;
9273: LD_ADDR_EXP 39
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// sWound := false ;
9281: LD_ADDR_EXP 47
9285: PUSH
9286: LD_INT 0
9288: ST_TO_ADDR
// sBetray := false ;
9289: LD_ADDR_EXP 51
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// sContamin := false ;
9297: LD_ADDR_EXP 52
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// sOil := false ;
9305: LD_ADDR_EXP 54
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// sStu := false ;
9313: LD_ADDR_EXP 58
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// sBazooka := false ;
9321: LD_ADDR_EXP 61
9325: PUSH
9326: LD_INT 0
9328: ST_TO_ADDR
// sMortar := false ;
9329: LD_ADDR_EXP 62
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// sRanger := false ;
9337: LD_ADDR_EXP 72
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// sComputer := false ;
9345: LD_ADDR_EXP 73
9349: PUSH
9350: LD_INT 0
9352: ST_TO_ADDR
// s30 := false ;
9353: LD_ADDR_EXP 74
9357: PUSH
9358: LD_INT 0
9360: ST_TO_ADDR
// s60 := false ;
9361: LD_ADDR_EXP 75
9365: PUSH
9366: LD_INT 0
9368: ST_TO_ADDR
// end ;
9369: LD_VAR 0 1
9373: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9374: LD_INT 0
9376: PPUSH
9377: PPUSH
9378: PPUSH
9379: PPUSH
9380: PPUSH
// result := [ ] ;
9381: LD_ADDR_VAR 0 1
9385: PUSH
9386: EMPTY
9387: ST_TO_ADDR
// if campaign_id = 1 then
9388: LD_OWVAR 69
9392: PUSH
9393: LD_INT 1
9395: EQUAL
9396: IFFALSE 12562
// begin case mission_number of 1 :
9398: LD_OWVAR 70
9402: PUSH
9403: LD_INT 1
9405: DOUBLE
9406: EQUAL
9407: IFTRUE 9411
9409: GO 9487
9411: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9412: LD_ADDR_VAR 0 1
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 11
9425: PUSH
9426: LD_INT 12
9428: PUSH
9429: LD_INT 15
9431: PUSH
9432: LD_INT 16
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_INT 23
9440: PUSH
9441: LD_INT 26
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 101
9457: PUSH
9458: LD_INT 102
9460: PUSH
9461: LD_INT 106
9463: PUSH
9464: LD_INT 116
9466: PUSH
9467: LD_INT 117
9469: PUSH
9470: LD_INT 118
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: ST_TO_ADDR
9485: GO 12560
9487: LD_INT 2
9489: DOUBLE
9490: EQUAL
9491: IFTRUE 9495
9493: GO 9579
9495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9496: LD_ADDR_VAR 0 1
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 4
9506: PUSH
9507: LD_INT 11
9509: PUSH
9510: LD_INT 12
9512: PUSH
9513: LD_INT 15
9515: PUSH
9516: LD_INT 16
9518: PUSH
9519: LD_INT 22
9521: PUSH
9522: LD_INT 23
9524: PUSH
9525: LD_INT 26
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 101
9541: PUSH
9542: LD_INT 102
9544: PUSH
9545: LD_INT 105
9547: PUSH
9548: LD_INT 106
9550: PUSH
9551: LD_INT 108
9553: PUSH
9554: LD_INT 116
9556: PUSH
9557: LD_INT 117
9559: PUSH
9560: LD_INT 118
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 12560
9579: LD_INT 3
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9675
9587: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 11
9604: PUSH
9605: LD_INT 12
9607: PUSH
9608: LD_INT 15
9610: PUSH
9611: LD_INT 16
9613: PUSH
9614: LD_INT 22
9616: PUSH
9617: LD_INT 26
9619: PUSH
9620: LD_INT 36
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 101
9637: PUSH
9638: LD_INT 102
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 108
9649: PUSH
9650: LD_INT 116
9652: PUSH
9653: LD_INT 117
9655: PUSH
9656: LD_INT 118
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: ST_TO_ADDR
9673: GO 12560
9675: LD_INT 4
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9779
9683: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9684: LD_ADDR_VAR 0 1
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: LD_INT 5
9697: PUSH
9698: LD_INT 8
9700: PUSH
9701: LD_INT 11
9703: PUSH
9704: LD_INT 12
9706: PUSH
9707: LD_INT 15
9709: PUSH
9710: LD_INT 16
9712: PUSH
9713: LD_INT 22
9715: PUSH
9716: LD_INT 23
9718: PUSH
9719: LD_INT 26
9721: PUSH
9722: LD_INT 36
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 101
9741: PUSH
9742: LD_INT 102
9744: PUSH
9745: LD_INT 105
9747: PUSH
9748: LD_INT 106
9750: PUSH
9751: LD_INT 108
9753: PUSH
9754: LD_INT 116
9756: PUSH
9757: LD_INT 117
9759: PUSH
9760: LD_INT 118
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: ST_TO_ADDR
9777: GO 12560
9779: LD_INT 5
9781: DOUBLE
9782: EQUAL
9783: IFTRUE 9787
9785: GO 9899
9787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9788: LD_ADDR_VAR 0 1
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 5
9801: PUSH
9802: LD_INT 6
9804: PUSH
9805: LD_INT 8
9807: PUSH
9808: LD_INT 11
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 15
9816: PUSH
9817: LD_INT 16
9819: PUSH
9820: LD_INT 22
9822: PUSH
9823: LD_INT 23
9825: PUSH
9826: LD_INT 25
9828: PUSH
9829: LD_INT 26
9831: PUSH
9832: LD_INT 36
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 101
9853: PUSH
9854: LD_INT 102
9856: PUSH
9857: LD_INT 105
9859: PUSH
9860: LD_INT 106
9862: PUSH
9863: LD_INT 108
9865: PUSH
9866: LD_INT 109
9868: PUSH
9869: LD_INT 112
9871: PUSH
9872: LD_INT 116
9874: PUSH
9875: LD_INT 117
9877: PUSH
9878: LD_INT 118
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: ST_TO_ADDR
9897: GO 12560
9899: LD_INT 6
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 10039
9907: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9908: LD_ADDR_VAR 0 1
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 4
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: LD_INT 6
9924: PUSH
9925: LD_INT 8
9927: PUSH
9928: LD_INT 11
9930: PUSH
9931: LD_INT 12
9933: PUSH
9934: LD_INT 15
9936: PUSH
9937: LD_INT 16
9939: PUSH
9940: LD_INT 20
9942: PUSH
9943: LD_INT 21
9945: PUSH
9946: LD_INT 22
9948: PUSH
9949: LD_INT 23
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: LD_INT 26
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 31
9963: PUSH
9964: LD_INT 32
9966: PUSH
9967: LD_INT 36
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 101
9993: PUSH
9994: LD_INT 102
9996: PUSH
9997: LD_INT 105
9999: PUSH
10000: LD_INT 106
10002: PUSH
10003: LD_INT 108
10005: PUSH
10006: LD_INT 109
10008: PUSH
10009: LD_INT 112
10011: PUSH
10012: LD_INT 116
10014: PUSH
10015: LD_INT 117
10017: PUSH
10018: LD_INT 118
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: ST_TO_ADDR
10037: GO 12560
10039: LD_INT 7
10041: DOUBLE
10042: EQUAL
10043: IFTRUE 10047
10045: GO 10159
10047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10048: LD_ADDR_VAR 0 1
10052: PUSH
10053: LD_INT 2
10055: PUSH
10056: LD_INT 4
10058: PUSH
10059: LD_INT 5
10061: PUSH
10062: LD_INT 7
10064: PUSH
10065: LD_INT 11
10067: PUSH
10068: LD_INT 12
10070: PUSH
10071: LD_INT 15
10073: PUSH
10074: LD_INT 16
10076: PUSH
10077: LD_INT 20
10079: PUSH
10080: LD_INT 21
10082: PUSH
10083: LD_INT 22
10085: PUSH
10086: LD_INT 23
10088: PUSH
10089: LD_INT 25
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: PUSH
10111: LD_INT 101
10113: PUSH
10114: LD_INT 102
10116: PUSH
10117: LD_INT 103
10119: PUSH
10120: LD_INT 105
10122: PUSH
10123: LD_INT 106
10125: PUSH
10126: LD_INT 108
10128: PUSH
10129: LD_INT 112
10131: PUSH
10132: LD_INT 116
10134: PUSH
10135: LD_INT 117
10137: PUSH
10138: LD_INT 118
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: ST_TO_ADDR
10157: GO 12560
10159: LD_INT 8
10161: DOUBLE
10162: EQUAL
10163: IFTRUE 10167
10165: GO 10307
10167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: LD_INT 4
10178: PUSH
10179: LD_INT 5
10181: PUSH
10182: LD_INT 6
10184: PUSH
10185: LD_INT 7
10187: PUSH
10188: LD_INT 8
10190: PUSH
10191: LD_INT 11
10193: PUSH
10194: LD_INT 12
10196: PUSH
10197: LD_INT 15
10199: PUSH
10200: LD_INT 16
10202: PUSH
10203: LD_INT 20
10205: PUSH
10206: LD_INT 21
10208: PUSH
10209: LD_INT 22
10211: PUSH
10212: LD_INT 23
10214: PUSH
10215: LD_INT 25
10217: PUSH
10218: LD_INT 26
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 31
10226: PUSH
10227: LD_INT 32
10229: PUSH
10230: LD_INT 36
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 101
10257: PUSH
10258: LD_INT 102
10260: PUSH
10261: LD_INT 103
10263: PUSH
10264: LD_INT 105
10266: PUSH
10267: LD_INT 106
10269: PUSH
10270: LD_INT 108
10272: PUSH
10273: LD_INT 109
10275: PUSH
10276: LD_INT 112
10278: PUSH
10279: LD_INT 116
10281: PUSH
10282: LD_INT 117
10284: PUSH
10285: LD_INT 118
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: ST_TO_ADDR
10305: GO 12560
10307: LD_INT 9
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10463
10315: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10316: LD_ADDR_VAR 0 1
10320: PUSH
10321: LD_INT 2
10323: PUSH
10324: LD_INT 4
10326: PUSH
10327: LD_INT 5
10329: PUSH
10330: LD_INT 6
10332: PUSH
10333: LD_INT 7
10335: PUSH
10336: LD_INT 8
10338: PUSH
10339: LD_INT 11
10341: PUSH
10342: LD_INT 12
10344: PUSH
10345: LD_INT 15
10347: PUSH
10348: LD_INT 16
10350: PUSH
10351: LD_INT 20
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 22
10359: PUSH
10360: LD_INT 23
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 26
10368: PUSH
10369: LD_INT 28
10371: PUSH
10372: LD_INT 30
10374: PUSH
10375: LD_INT 31
10377: PUSH
10378: LD_INT 32
10380: PUSH
10381: LD_INT 36
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 101
10409: PUSH
10410: LD_INT 102
10412: PUSH
10413: LD_INT 103
10415: PUSH
10416: LD_INT 105
10418: PUSH
10419: LD_INT 106
10421: PUSH
10422: LD_INT 108
10424: PUSH
10425: LD_INT 109
10427: PUSH
10428: LD_INT 112
10430: PUSH
10431: LD_INT 114
10433: PUSH
10434: LD_INT 116
10436: PUSH
10437: LD_INT 117
10439: PUSH
10440: LD_INT 118
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: ST_TO_ADDR
10461: GO 12560
10463: LD_INT 10
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10667
10471: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: LD_INT 4
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: LD_INT 6
10488: PUSH
10489: LD_INT 7
10491: PUSH
10492: LD_INT 8
10494: PUSH
10495: LD_INT 9
10497: PUSH
10498: LD_INT 10
10500: PUSH
10501: LD_INT 11
10503: PUSH
10504: LD_INT 12
10506: PUSH
10507: LD_INT 13
10509: PUSH
10510: LD_INT 14
10512: PUSH
10513: LD_INT 15
10515: PUSH
10516: LD_INT 16
10518: PUSH
10519: LD_INT 17
10521: PUSH
10522: LD_INT 18
10524: PUSH
10525: LD_INT 19
10527: PUSH
10528: LD_INT 20
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_INT 23
10539: PUSH
10540: LD_INT 24
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 26
10548: PUSH
10549: LD_INT 28
10551: PUSH
10552: LD_INT 30
10554: PUSH
10555: LD_INT 31
10557: PUSH
10558: LD_INT 32
10560: PUSH
10561: LD_INT 36
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 103
10603: PUSH
10604: LD_INT 104
10606: PUSH
10607: LD_INT 105
10609: PUSH
10610: LD_INT 106
10612: PUSH
10613: LD_INT 107
10615: PUSH
10616: LD_INT 108
10618: PUSH
10619: LD_INT 109
10621: PUSH
10622: LD_INT 110
10624: PUSH
10625: LD_INT 111
10627: PUSH
10628: LD_INT 112
10630: PUSH
10631: LD_INT 114
10633: PUSH
10634: LD_INT 116
10636: PUSH
10637: LD_INT 117
10639: PUSH
10640: LD_INT 118
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: ST_TO_ADDR
10665: GO 12560
10667: LD_INT 11
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10879
10675: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10676: LD_ADDR_VAR 0 1
10680: PUSH
10681: LD_INT 2
10683: PUSH
10684: LD_INT 3
10686: PUSH
10687: LD_INT 4
10689: PUSH
10690: LD_INT 5
10692: PUSH
10693: LD_INT 6
10695: PUSH
10696: LD_INT 7
10698: PUSH
10699: LD_INT 8
10701: PUSH
10702: LD_INT 9
10704: PUSH
10705: LD_INT 10
10707: PUSH
10708: LD_INT 11
10710: PUSH
10711: LD_INT 12
10713: PUSH
10714: LD_INT 13
10716: PUSH
10717: LD_INT 14
10719: PUSH
10720: LD_INT 15
10722: PUSH
10723: LD_INT 16
10725: PUSH
10726: LD_INT 17
10728: PUSH
10729: LD_INT 18
10731: PUSH
10732: LD_INT 19
10734: PUSH
10735: LD_INT 20
10737: PUSH
10738: LD_INT 21
10740: PUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 23
10746: PUSH
10747: LD_INT 24
10749: PUSH
10750: LD_INT 25
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: LD_INT 28
10758: PUSH
10759: LD_INT 30
10761: PUSH
10762: LD_INT 31
10764: PUSH
10765: LD_INT 32
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 36
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 101
10809: PUSH
10810: LD_INT 102
10812: PUSH
10813: LD_INT 103
10815: PUSH
10816: LD_INT 104
10818: PUSH
10819: LD_INT 105
10821: PUSH
10822: LD_INT 106
10824: PUSH
10825: LD_INT 107
10827: PUSH
10828: LD_INT 108
10830: PUSH
10831: LD_INT 109
10833: PUSH
10834: LD_INT 110
10836: PUSH
10837: LD_INT 111
10839: PUSH
10840: LD_INT 112
10842: PUSH
10843: LD_INT 114
10845: PUSH
10846: LD_INT 116
10848: PUSH
10849: LD_INT 117
10851: PUSH
10852: LD_INT 118
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: ST_TO_ADDR
10877: GO 12560
10879: LD_INT 12
10881: DOUBLE
10882: EQUAL
10883: IFTRUE 10887
10885: GO 11107
10887: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10888: LD_ADDR_VAR 0 1
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: LD_INT 3
10901: PUSH
10902: LD_INT 4
10904: PUSH
10905: LD_INT 5
10907: PUSH
10908: LD_INT 6
10910: PUSH
10911: LD_INT 7
10913: PUSH
10914: LD_INT 8
10916: PUSH
10917: LD_INT 9
10919: PUSH
10920: LD_INT 10
10922: PUSH
10923: LD_INT 11
10925: PUSH
10926: LD_INT 12
10928: PUSH
10929: LD_INT 13
10931: PUSH
10932: LD_INT 14
10934: PUSH
10935: LD_INT 15
10937: PUSH
10938: LD_INT 16
10940: PUSH
10941: LD_INT 17
10943: PUSH
10944: LD_INT 18
10946: PUSH
10947: LD_INT 19
10949: PUSH
10950: LD_INT 20
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 22
10958: PUSH
10959: LD_INT 23
10961: PUSH
10962: LD_INT 24
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 26
10970: PUSH
10971: LD_INT 27
10973: PUSH
10974: LD_INT 28
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 31
10982: PUSH
10983: LD_INT 32
10985: PUSH
10986: LD_INT 33
10988: PUSH
10989: LD_INT 34
10991: PUSH
10992: LD_INT 36
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 102
11036: PUSH
11037: LD_INT 103
11039: PUSH
11040: LD_INT 104
11042: PUSH
11043: LD_INT 105
11045: PUSH
11046: LD_INT 106
11048: PUSH
11049: LD_INT 107
11051: PUSH
11052: LD_INT 108
11054: PUSH
11055: LD_INT 109
11057: PUSH
11058: LD_INT 110
11060: PUSH
11061: LD_INT 111
11063: PUSH
11064: LD_INT 112
11066: PUSH
11067: LD_INT 113
11069: PUSH
11070: LD_INT 114
11072: PUSH
11073: LD_INT 116
11075: PUSH
11076: LD_INT 117
11078: PUSH
11079: LD_INT 118
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: ST_TO_ADDR
11105: GO 12560
11107: LD_INT 13
11109: DOUBLE
11110: EQUAL
11111: IFTRUE 11115
11113: GO 11323
11115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 3
11129: PUSH
11130: LD_INT 4
11132: PUSH
11133: LD_INT 5
11135: PUSH
11136: LD_INT 8
11138: PUSH
11139: LD_INT 9
11141: PUSH
11142: LD_INT 10
11144: PUSH
11145: LD_INT 11
11147: PUSH
11148: LD_INT 12
11150: PUSH
11151: LD_INT 14
11153: PUSH
11154: LD_INT 15
11156: PUSH
11157: LD_INT 16
11159: PUSH
11160: LD_INT 17
11162: PUSH
11163: LD_INT 18
11165: PUSH
11166: LD_INT 19
11168: PUSH
11169: LD_INT 20
11171: PUSH
11172: LD_INT 21
11174: PUSH
11175: LD_INT 22
11177: PUSH
11178: LD_INT 23
11180: PUSH
11181: LD_INT 24
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 26
11189: PUSH
11190: LD_INT 27
11192: PUSH
11193: LD_INT 28
11195: PUSH
11196: LD_INT 30
11198: PUSH
11199: LD_INT 31
11201: PUSH
11202: LD_INT 32
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 34
11210: PUSH
11211: LD_INT 36
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 101
11249: PUSH
11250: LD_INT 102
11252: PUSH
11253: LD_INT 103
11255: PUSH
11256: LD_INT 104
11258: PUSH
11259: LD_INT 105
11261: PUSH
11262: LD_INT 106
11264: PUSH
11265: LD_INT 107
11267: PUSH
11268: LD_INT 108
11270: PUSH
11271: LD_INT 109
11273: PUSH
11274: LD_INT 110
11276: PUSH
11277: LD_INT 111
11279: PUSH
11280: LD_INT 112
11282: PUSH
11283: LD_INT 113
11285: PUSH
11286: LD_INT 114
11288: PUSH
11289: LD_INT 116
11291: PUSH
11292: LD_INT 117
11294: PUSH
11295: LD_INT 118
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: ST_TO_ADDR
11321: GO 12560
11323: LD_INT 14
11325: DOUBLE
11326: EQUAL
11327: IFTRUE 11331
11329: GO 11555
11331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: LD_INT 2
11342: PUSH
11343: LD_INT 3
11345: PUSH
11346: LD_INT 4
11348: PUSH
11349: LD_INT 5
11351: PUSH
11352: LD_INT 6
11354: PUSH
11355: LD_INT 7
11357: PUSH
11358: LD_INT 8
11360: PUSH
11361: LD_INT 9
11363: PUSH
11364: LD_INT 10
11366: PUSH
11367: LD_INT 11
11369: PUSH
11370: LD_INT 12
11372: PUSH
11373: LD_INT 13
11375: PUSH
11376: LD_INT 14
11378: PUSH
11379: LD_INT 15
11381: PUSH
11382: LD_INT 16
11384: PUSH
11385: LD_INT 17
11387: PUSH
11388: LD_INT 18
11390: PUSH
11391: LD_INT 19
11393: PUSH
11394: LD_INT 20
11396: PUSH
11397: LD_INT 21
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_INT 23
11405: PUSH
11406: LD_INT 24
11408: PUSH
11409: LD_INT 25
11411: PUSH
11412: LD_INT 26
11414: PUSH
11415: LD_INT 27
11417: PUSH
11418: LD_INT 28
11420: PUSH
11421: LD_INT 29
11423: PUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 31
11429: PUSH
11430: LD_INT 32
11432: PUSH
11433: LD_INT 33
11435: PUSH
11436: LD_INT 34
11438: PUSH
11439: LD_INT 36
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 101
11481: PUSH
11482: LD_INT 102
11484: PUSH
11485: LD_INT 103
11487: PUSH
11488: LD_INT 104
11490: PUSH
11491: LD_INT 105
11493: PUSH
11494: LD_INT 106
11496: PUSH
11497: LD_INT 107
11499: PUSH
11500: LD_INT 108
11502: PUSH
11503: LD_INT 109
11505: PUSH
11506: LD_INT 110
11508: PUSH
11509: LD_INT 111
11511: PUSH
11512: LD_INT 112
11514: PUSH
11515: LD_INT 113
11517: PUSH
11518: LD_INT 114
11520: PUSH
11521: LD_INT 116
11523: PUSH
11524: LD_INT 117
11526: PUSH
11527: LD_INT 118
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: ST_TO_ADDR
11553: GO 12560
11555: LD_INT 15
11557: DOUBLE
11558: EQUAL
11559: IFTRUE 11563
11561: GO 11787
11563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: LD_INT 5
11583: PUSH
11584: LD_INT 6
11586: PUSH
11587: LD_INT 7
11589: PUSH
11590: LD_INT 8
11592: PUSH
11593: LD_INT 9
11595: PUSH
11596: LD_INT 10
11598: PUSH
11599: LD_INT 11
11601: PUSH
11602: LD_INT 12
11604: PUSH
11605: LD_INT 13
11607: PUSH
11608: LD_INT 14
11610: PUSH
11611: LD_INT 15
11613: PUSH
11614: LD_INT 16
11616: PUSH
11617: LD_INT 17
11619: PUSH
11620: LD_INT 18
11622: PUSH
11623: LD_INT 19
11625: PUSH
11626: LD_INT 20
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 22
11634: PUSH
11635: LD_INT 23
11637: PUSH
11638: LD_INT 24
11640: PUSH
11641: LD_INT 25
11643: PUSH
11644: LD_INT 26
11646: PUSH
11647: LD_INT 27
11649: PUSH
11650: LD_INT 28
11652: PUSH
11653: LD_INT 29
11655: PUSH
11656: LD_INT 30
11658: PUSH
11659: LD_INT 31
11661: PUSH
11662: LD_INT 32
11664: PUSH
11665: LD_INT 33
11667: PUSH
11668: LD_INT 34
11670: PUSH
11671: LD_INT 36
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 101
11713: PUSH
11714: LD_INT 102
11716: PUSH
11717: LD_INT 103
11719: PUSH
11720: LD_INT 104
11722: PUSH
11723: LD_INT 105
11725: PUSH
11726: LD_INT 106
11728: PUSH
11729: LD_INT 107
11731: PUSH
11732: LD_INT 108
11734: PUSH
11735: LD_INT 109
11737: PUSH
11738: LD_INT 110
11740: PUSH
11741: LD_INT 111
11743: PUSH
11744: LD_INT 112
11746: PUSH
11747: LD_INT 113
11749: PUSH
11750: LD_INT 114
11752: PUSH
11753: LD_INT 116
11755: PUSH
11756: LD_INT 117
11758: PUSH
11759: LD_INT 118
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: ST_TO_ADDR
11785: GO 12560
11787: LD_INT 16
11789: DOUBLE
11790: EQUAL
11791: IFTRUE 11795
11793: GO 11931
11795: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11796: LD_ADDR_VAR 0 1
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 4
11806: PUSH
11807: LD_INT 5
11809: PUSH
11810: LD_INT 7
11812: PUSH
11813: LD_INT 11
11815: PUSH
11816: LD_INT 12
11818: PUSH
11819: LD_INT 15
11821: PUSH
11822: LD_INT 16
11824: PUSH
11825: LD_INT 20
11827: PUSH
11828: LD_INT 21
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 23
11836: PUSH
11837: LD_INT 25
11839: PUSH
11840: LD_INT 26
11842: PUSH
11843: LD_INT 30
11845: PUSH
11846: LD_INT 31
11848: PUSH
11849: LD_INT 32
11851: PUSH
11852: LD_INT 33
11854: PUSH
11855: LD_INT 34
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 101
11881: PUSH
11882: LD_INT 102
11884: PUSH
11885: LD_INT 103
11887: PUSH
11888: LD_INT 106
11890: PUSH
11891: LD_INT 108
11893: PUSH
11894: LD_INT 112
11896: PUSH
11897: LD_INT 113
11899: PUSH
11900: LD_INT 114
11902: PUSH
11903: LD_INT 116
11905: PUSH
11906: LD_INT 117
11908: PUSH
11909: LD_INT 118
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: ST_TO_ADDR
11929: GO 12560
11931: LD_INT 17
11933: DOUBLE
11934: EQUAL
11935: IFTRUE 11939
11937: GO 12163
11939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11940: LD_ADDR_VAR 0 1
11944: PUSH
11945: LD_INT 1
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: LD_INT 3
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: LD_INT 5
11959: PUSH
11960: LD_INT 6
11962: PUSH
11963: LD_INT 7
11965: PUSH
11966: LD_INT 8
11968: PUSH
11969: LD_INT 9
11971: PUSH
11972: LD_INT 10
11974: PUSH
11975: LD_INT 11
11977: PUSH
11978: LD_INT 12
11980: PUSH
11981: LD_INT 13
11983: PUSH
11984: LD_INT 14
11986: PUSH
11987: LD_INT 15
11989: PUSH
11990: LD_INT 16
11992: PUSH
11993: LD_INT 17
11995: PUSH
11996: LD_INT 18
11998: PUSH
11999: LD_INT 19
12001: PUSH
12002: LD_INT 20
12004: PUSH
12005: LD_INT 21
12007: PUSH
12008: LD_INT 22
12010: PUSH
12011: LD_INT 23
12013: PUSH
12014: LD_INT 24
12016: PUSH
12017: LD_INT 25
12019: PUSH
12020: LD_INT 26
12022: PUSH
12023: LD_INT 27
12025: PUSH
12026: LD_INT 28
12028: PUSH
12029: LD_INT 29
12031: PUSH
12032: LD_INT 30
12034: PUSH
12035: LD_INT 31
12037: PUSH
12038: LD_INT 32
12040: PUSH
12041: LD_INT 33
12043: PUSH
12044: LD_INT 34
12046: PUSH
12047: LD_INT 36
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 101
12089: PUSH
12090: LD_INT 102
12092: PUSH
12093: LD_INT 103
12095: PUSH
12096: LD_INT 104
12098: PUSH
12099: LD_INT 105
12101: PUSH
12102: LD_INT 106
12104: PUSH
12105: LD_INT 107
12107: PUSH
12108: LD_INT 108
12110: PUSH
12111: LD_INT 109
12113: PUSH
12114: LD_INT 110
12116: PUSH
12117: LD_INT 111
12119: PUSH
12120: LD_INT 112
12122: PUSH
12123: LD_INT 113
12125: PUSH
12126: LD_INT 114
12128: PUSH
12129: LD_INT 116
12131: PUSH
12132: LD_INT 117
12134: PUSH
12135: LD_INT 118
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: ST_TO_ADDR
12161: GO 12560
12163: LD_INT 18
12165: DOUBLE
12166: EQUAL
12167: IFTRUE 12171
12169: GO 12319
12171: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: LD_INT 4
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: LD_INT 7
12188: PUSH
12189: LD_INT 11
12191: PUSH
12192: LD_INT 12
12194: PUSH
12195: LD_INT 15
12197: PUSH
12198: LD_INT 16
12200: PUSH
12201: LD_INT 20
12203: PUSH
12204: LD_INT 21
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_INT 23
12212: PUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 26
12218: PUSH
12219: LD_INT 30
12221: PUSH
12222: LD_INT 31
12224: PUSH
12225: LD_INT 32
12227: PUSH
12228: LD_INT 33
12230: PUSH
12231: LD_INT 34
12233: PUSH
12234: LD_INT 35
12236: PUSH
12237: LD_INT 36
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 101
12265: PUSH
12266: LD_INT 102
12268: PUSH
12269: LD_INT 103
12271: PUSH
12272: LD_INT 106
12274: PUSH
12275: LD_INT 108
12277: PUSH
12278: LD_INT 112
12280: PUSH
12281: LD_INT 113
12283: PUSH
12284: LD_INT 114
12286: PUSH
12287: LD_INT 115
12289: PUSH
12290: LD_INT 116
12292: PUSH
12293: LD_INT 117
12295: PUSH
12296: LD_INT 118
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12560
12319: LD_INT 19
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12559
12327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: LD_INT 3
12341: PUSH
12342: LD_INT 4
12344: PUSH
12345: LD_INT 5
12347: PUSH
12348: LD_INT 6
12350: PUSH
12351: LD_INT 7
12353: PUSH
12354: LD_INT 8
12356: PUSH
12357: LD_INT 9
12359: PUSH
12360: LD_INT 10
12362: PUSH
12363: LD_INT 11
12365: PUSH
12366: LD_INT 12
12368: PUSH
12369: LD_INT 13
12371: PUSH
12372: LD_INT 14
12374: PUSH
12375: LD_INT 15
12377: PUSH
12378: LD_INT 16
12380: PUSH
12381: LD_INT 17
12383: PUSH
12384: LD_INT 18
12386: PUSH
12387: LD_INT 19
12389: PUSH
12390: LD_INT 20
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_INT 23
12401: PUSH
12402: LD_INT 24
12404: PUSH
12405: LD_INT 25
12407: PUSH
12408: LD_INT 26
12410: PUSH
12411: LD_INT 27
12413: PUSH
12414: LD_INT 28
12416: PUSH
12417: LD_INT 29
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 31
12425: PUSH
12426: LD_INT 32
12428: PUSH
12429: LD_INT 33
12431: PUSH
12432: LD_INT 34
12434: PUSH
12435: LD_INT 35
12437: PUSH
12438: LD_INT 36
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 101
12481: PUSH
12482: LD_INT 102
12484: PUSH
12485: LD_INT 103
12487: PUSH
12488: LD_INT 104
12490: PUSH
12491: LD_INT 105
12493: PUSH
12494: LD_INT 106
12496: PUSH
12497: LD_INT 107
12499: PUSH
12500: LD_INT 108
12502: PUSH
12503: LD_INT 109
12505: PUSH
12506: LD_INT 110
12508: PUSH
12509: LD_INT 111
12511: PUSH
12512: LD_INT 112
12514: PUSH
12515: LD_INT 113
12517: PUSH
12518: LD_INT 114
12520: PUSH
12521: LD_INT 115
12523: PUSH
12524: LD_INT 116
12526: PUSH
12527: LD_INT 117
12529: PUSH
12530: LD_INT 118
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: ST_TO_ADDR
12557: GO 12560
12559: POP
// end else
12560: GO 12791
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12562: LD_ADDR_VAR 0 1
12566: PUSH
12567: LD_INT 1
12569: PUSH
12570: LD_INT 2
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: LD_INT 4
12578: PUSH
12579: LD_INT 5
12581: PUSH
12582: LD_INT 6
12584: PUSH
12585: LD_INT 7
12587: PUSH
12588: LD_INT 8
12590: PUSH
12591: LD_INT 9
12593: PUSH
12594: LD_INT 10
12596: PUSH
12597: LD_INT 11
12599: PUSH
12600: LD_INT 12
12602: PUSH
12603: LD_INT 13
12605: PUSH
12606: LD_INT 14
12608: PUSH
12609: LD_INT 15
12611: PUSH
12612: LD_INT 16
12614: PUSH
12615: LD_INT 17
12617: PUSH
12618: LD_INT 18
12620: PUSH
12621: LD_INT 19
12623: PUSH
12624: LD_INT 20
12626: PUSH
12627: LD_INT 21
12629: PUSH
12630: LD_INT 22
12632: PUSH
12633: LD_INT 23
12635: PUSH
12636: LD_INT 24
12638: PUSH
12639: LD_INT 25
12641: PUSH
12642: LD_INT 26
12644: PUSH
12645: LD_INT 27
12647: PUSH
12648: LD_INT 28
12650: PUSH
12651: LD_INT 29
12653: PUSH
12654: LD_INT 30
12656: PUSH
12657: LD_INT 31
12659: PUSH
12660: LD_INT 32
12662: PUSH
12663: LD_INT 33
12665: PUSH
12666: LD_INT 34
12668: PUSH
12669: LD_INT 35
12671: PUSH
12672: LD_INT 36
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 101
12715: PUSH
12716: LD_INT 102
12718: PUSH
12719: LD_INT 103
12721: PUSH
12722: LD_INT 104
12724: PUSH
12725: LD_INT 105
12727: PUSH
12728: LD_INT 106
12730: PUSH
12731: LD_INT 107
12733: PUSH
12734: LD_INT 108
12736: PUSH
12737: LD_INT 109
12739: PUSH
12740: LD_INT 110
12742: PUSH
12743: LD_INT 111
12745: PUSH
12746: LD_INT 112
12748: PUSH
12749: LD_INT 113
12751: PUSH
12752: LD_INT 114
12754: PUSH
12755: LD_INT 115
12757: PUSH
12758: LD_INT 116
12760: PUSH
12761: LD_INT 117
12763: PUSH
12764: LD_INT 118
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: ST_TO_ADDR
// if result then
12791: LD_VAR 0 1
12795: IFFALSE 13084
// begin normal :=  ;
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_STRING 
12804: ST_TO_ADDR
// hardcore :=  ;
12805: LD_ADDR_VAR 0 4
12809: PUSH
12810: LD_STRING 
12812: ST_TO_ADDR
// for i = 1 to normalCounter do
12813: LD_ADDR_VAR 0 5
12817: PUSH
12818: DOUBLE
12819: LD_INT 1
12821: DEC
12822: ST_TO_ADDR
12823: LD_EXP 20
12827: PUSH
12828: FOR_TO
12829: IFFALSE 12930
// begin tmp := 0 ;
12831: LD_ADDR_VAR 0 2
12835: PUSH
12836: LD_STRING 0
12838: ST_TO_ADDR
// if result [ 1 ] then
12839: LD_VAR 0 1
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: IFFALSE 12912
// if result [ 1 ] [ 1 ] = i then
12849: LD_VAR 0 1
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: PUSH
12858: LD_INT 1
12860: ARRAY
12861: PUSH
12862: LD_VAR 0 5
12866: EQUAL
12867: IFFALSE 12912
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12869: LD_ADDR_VAR 0 1
12873: PUSH
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: LD_VAR 0 1
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 3
12898: PPUSH
12899: CALL_OW 1
12903: ST_TO_ADDR
// tmp := 1 ;
12904: LD_ADDR_VAR 0 2
12908: PUSH
12909: LD_STRING 1
12911: ST_TO_ADDR
// end ; normal := normal & tmp ;
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_VAR 0 3
12921: PUSH
12922: LD_VAR 0 2
12926: STR
12927: ST_TO_ADDR
// end ;
12928: GO 12828
12930: POP
12931: POP
// for i = 1 to hardcoreCounter do
12932: LD_ADDR_VAR 0 5
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: LD_EXP 21
12946: PUSH
12947: FOR_TO
12948: IFFALSE 13053
// begin tmp := 0 ;
12950: LD_ADDR_VAR 0 2
12954: PUSH
12955: LD_STRING 0
12957: ST_TO_ADDR
// if result [ 2 ] then
12958: LD_VAR 0 1
12962: PUSH
12963: LD_INT 2
12965: ARRAY
12966: IFFALSE 13035
// if result [ 2 ] [ 1 ] = 100 + i then
12968: LD_VAR 0 1
12972: PUSH
12973: LD_INT 2
12975: ARRAY
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PUSH
12981: LD_INT 100
12983: PUSH
12984: LD_VAR 0 5
12988: PLUS
12989: EQUAL
12990: IFFALSE 13035
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12992: LD_ADDR_VAR 0 1
12996: PUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: LD_INT 2
13004: PPUSH
13005: LD_VAR 0 1
13009: PUSH
13010: LD_INT 2
13012: ARRAY
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 3
13021: PPUSH
13022: CALL_OW 1
13026: ST_TO_ADDR
// tmp := 1 ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_STRING 1
13034: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13035: LD_ADDR_VAR 0 4
13039: PUSH
13040: LD_VAR 0 4
13044: PUSH
13045: LD_VAR 0 2
13049: STR
13050: ST_TO_ADDR
// end ;
13051: GO 12947
13053: POP
13054: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13055: LD_STRING getStreamItemsFromMission("
13057: PUSH
13058: LD_VAR 0 3
13062: STR
13063: PUSH
13064: LD_STRING ","
13066: STR
13067: PUSH
13068: LD_VAR 0 4
13072: STR
13073: PUSH
13074: LD_STRING ")
13076: STR
13077: PPUSH
13078: CALL_OW 559
// end else
13082: GO 13091
// ToLua ( getStreamItemsFromMission("","") ) ;
13084: LD_STRING getStreamItemsFromMission("","")
13086: PPUSH
13087: CALL_OW 559
// end ;
13091: LD_VAR 0 1
13095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13096: LD_EXP 19
13100: PUSH
13101: LD_EXP 24
13105: AND
13106: IFFALSE 13230
13108: GO 13110
13110: DISABLE
13111: LD_INT 0
13113: PPUSH
13114: PPUSH
// begin enable ;
13115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13116: LD_ADDR_VAR 0 2
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_OWVAR 2
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: LD_INT 34
13138: PUSH
13139: LD_INT 7
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 45
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 34
13158: PUSH
13159: LD_INT 28
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 34
13168: PUSH
13169: LD_INT 47
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 2
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13230
// for i in tmp do
13201: LD_ADDR_VAR 0 1
13205: PUSH
13206: LD_VAR 0 2
13210: PUSH
13211: FOR_IN
13212: IFFALSE 13228
// begin SetLives ( i , 0 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 234
// end ;
13226: GO 13211
13228: POP
13229: POP
// end ;
13230: PPOPN 2
13232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13233: LD_EXP 19
13237: PUSH
13238: LD_EXP 25
13242: AND
13243: IFFALSE 13327
13245: GO 13247
13247: DISABLE
13248: LD_INT 0
13250: PPUSH
13251: PPUSH
// begin enable ;
13252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_OWVAR 2
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 32
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 69
13288: ST_TO_ADDR
// if not tmp then
13289: LD_VAR 0 2
13293: NOT
13294: IFFALSE 13298
// exit ;
13296: GO 13327
// for i in tmp do
13298: LD_ADDR_VAR 0 1
13302: PUSH
13303: LD_VAR 0 2
13307: PUSH
13308: FOR_IN
13309: IFFALSE 13325
// begin SetLives ( i , 0 ) ;
13311: LD_VAR 0 1
13315: PPUSH
13316: LD_INT 0
13318: PPUSH
13319: CALL_OW 234
// end ;
13323: GO 13308
13325: POP
13326: POP
// end ;
13327: PPOPN 2
13329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13330: LD_EXP 19
13334: PUSH
13335: LD_EXP 22
13339: AND
13340: IFFALSE 13433
13342: GO 13344
13344: DISABLE
13345: LD_INT 0
13347: PPUSH
// begin enable ;
13348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_OWVAR 2
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 5
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 25
13381: PUSH
13382: LD_INT 9
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 8
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: PUSH
13414: FOR_IN
13415: IFFALSE 13431
// begin SetClass ( i , 1 ) ;
13417: LD_VAR 0 1
13421: PPUSH
13422: LD_INT 1
13424: PPUSH
13425: CALL_OW 336
// end ;
13429: GO 13414
13431: POP
13432: POP
// end ;
13433: PPOPN 1
13435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13436: LD_EXP 19
13440: PUSH
13441: LD_EXP 23
13445: AND
13446: PUSH
13447: LD_OWVAR 65
13451: PUSH
13452: LD_INT 7
13454: LESS
13455: AND
13456: IFFALSE 13470
13458: GO 13460
13460: DISABLE
// begin enable ;
13461: ENABLE
// game_speed := 7 ;
13462: LD_ADDR_OWVAR 65
13466: PUSH
13467: LD_INT 7
13469: ST_TO_ADDR
// end ;
13470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13471: LD_EXP 19
13475: PUSH
13476: LD_EXP 26
13480: AND
13481: IFFALSE 13683
13483: GO 13485
13485: DISABLE
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
13490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_INT 81
13498: PUSH
13499: LD_OWVAR 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 21
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: ST_TO_ADDR
// if not tmp then
13527: LD_VAR 0 3
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13683
// if tmp > 5 then
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 5
13543: GREATER
13544: IFFALSE 13556
// k := 5 else
13546: LD_ADDR_VAR 0 2
13550: PUSH
13551: LD_INT 5
13553: ST_TO_ADDR
13554: GO 13566
// k := tmp ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 3
13565: ST_TO_ADDR
// for i := 1 to k do
13566: LD_ADDR_VAR 0 1
13570: PUSH
13571: DOUBLE
13572: LD_INT 1
13574: DEC
13575: ST_TO_ADDR
13576: LD_VAR 0 2
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13584: LD_VAR 0 3
13588: PUSH
13589: LD_VAR 0 1
13593: ARRAY
13594: PPUSH
13595: LD_VAR 0 1
13599: PUSH
13600: LD_INT 4
13602: MOD
13603: PUSH
13604: LD_INT 1
13606: PLUS
13607: PPUSH
13608: CALL_OW 259
13612: PUSH
13613: LD_INT 10
13615: LESS
13616: IFFALSE 13679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13618: LD_VAR 0 3
13622: PUSH
13623: LD_VAR 0 1
13627: ARRAY
13628: PPUSH
13629: LD_VAR 0 1
13633: PUSH
13634: LD_INT 4
13636: MOD
13637: PUSH
13638: LD_INT 1
13640: PLUS
13641: PPUSH
13642: LD_VAR 0 3
13646: PUSH
13647: LD_VAR 0 1
13651: ARRAY
13652: PPUSH
13653: LD_VAR 0 1
13657: PUSH
13658: LD_INT 4
13660: MOD
13661: PUSH
13662: LD_INT 1
13664: PLUS
13665: PPUSH
13666: CALL_OW 259
13670: PUSH
13671: LD_INT 1
13673: PLUS
13674: PPUSH
13675: CALL_OW 237
13679: GO 13581
13681: POP
13682: POP
// end ;
13683: PPOPN 3
13685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13686: LD_EXP 19
13690: PUSH
13691: LD_EXP 27
13695: AND
13696: IFFALSE 13716
13698: GO 13700
13700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13701: LD_INT 4
13703: PPUSH
13704: LD_OWVAR 2
13708: PPUSH
13709: LD_INT 0
13711: PPUSH
13712: CALL_OW 324
13716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13717: LD_EXP 19
13721: PUSH
13722: LD_EXP 56
13726: AND
13727: IFFALSE 13747
13729: GO 13731
13731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13732: LD_INT 19
13734: PPUSH
13735: LD_OWVAR 2
13739: PPUSH
13740: LD_INT 0
13742: PPUSH
13743: CALL_OW 324
13747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13748: LD_EXP 19
13752: PUSH
13753: LD_EXP 28
13757: AND
13758: IFFALSE 13860
13760: GO 13762
13762: DISABLE
13763: LD_INT 0
13765: PPUSH
13766: PPUSH
// begin enable ;
13767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: LD_INT 22
13775: PUSH
13776: LD_OWVAR 2
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 2
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: LD_INT 11
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 34
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: ST_TO_ADDR
// if not tmp then
13822: LD_VAR 0 2
13826: NOT
13827: IFFALSE 13831
// exit ;
13829: GO 13860
// for i in tmp do
13831: LD_ADDR_VAR 0 1
13835: PUSH
13836: LD_VAR 0 2
13840: PUSH
13841: FOR_IN
13842: IFFALSE 13858
// begin SetLives ( i , 0 ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_INT 0
13851: PPUSH
13852: CALL_OW 234
// end ;
13856: GO 13841
13858: POP
13859: POP
// end ;
13860: PPOPN 2
13862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13863: LD_EXP 19
13867: PUSH
13868: LD_EXP 29
13872: AND
13873: IFFALSE 13893
13875: GO 13877
13877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13878: LD_INT 32
13880: PPUSH
13881: LD_OWVAR 2
13885: PPUSH
13886: LD_INT 0
13888: PPUSH
13889: CALL_OW 324
13893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13894: LD_EXP 19
13898: PUSH
13899: LD_EXP 30
13903: AND
13904: IFFALSE 14085
13906: GO 13908
13908: DISABLE
13909: LD_INT 0
13911: PPUSH
13912: PPUSH
13913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_OWVAR 2
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 33
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PPUSH
13945: CALL_OW 69
13949: ST_TO_ADDR
// if not tmp then
13950: LD_VAR 0 2
13954: NOT
13955: IFFALSE 13959
// exit ;
13957: GO 14085
// side := 0 ;
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// for i := 1 to 8 do
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: DOUBLE
13973: LD_INT 1
13975: DEC
13976: ST_TO_ADDR
13977: LD_INT 8
13979: PUSH
13980: FOR_TO
13981: IFFALSE 14029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13983: LD_OWVAR 2
13987: PUSH
13988: LD_VAR 0 1
13992: NONEQUAL
13993: PUSH
13994: LD_OWVAR 2
13998: PPUSH
13999: LD_VAR 0 1
14003: PPUSH
14004: CALL_OW 81
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: AND
14013: IFFALSE 14027
// begin side := i ;
14015: LD_ADDR_VAR 0 3
14019: PUSH
14020: LD_VAR 0 1
14024: ST_TO_ADDR
// break ;
14025: GO 14029
// end ;
14027: GO 13980
14029: POP
14030: POP
// if not side then
14031: LD_VAR 0 3
14035: NOT
14036: IFFALSE 14040
// exit ;
14038: GO 14085
// for i := 1 to tmp do
14040: LD_ADDR_VAR 0 1
14044: PUSH
14045: DOUBLE
14046: LD_INT 1
14048: DEC
14049: ST_TO_ADDR
14050: LD_VAR 0 2
14054: PUSH
14055: FOR_TO
14056: IFFALSE 14083
// if Prob ( 60 ) then
14058: LD_INT 60
14060: PPUSH
14061: CALL_OW 13
14065: IFFALSE 14081
// SetSide ( i , side ) ;
14067: LD_VAR 0 1
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: CALL_OW 235
14081: GO 14055
14083: POP
14084: POP
// end ;
14085: PPOPN 3
14087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14088: LD_EXP 19
14092: PUSH
14093: LD_EXP 32
14097: AND
14098: IFFALSE 14217
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: LD_OWVAR 2
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 1
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: LD_INT 23
14138: PUSH
14139: LD_INT 0
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PUSH
14160: FOR_IN
14161: IFFALSE 14215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14163: LD_VAR 0 1
14167: PPUSH
14168: CALL_OW 257
14172: PUSH
14173: LD_INT 1
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: LD_INT 3
14181: PUSH
14182: LD_INT 4
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: IN
14191: IFFALSE 14213
// SetClass ( un , rand ( 1 , 4 ) ) ;
14193: LD_VAR 0 1
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: LD_INT 4
14203: PPUSH
14204: CALL_OW 12
14208: PPUSH
14209: CALL_OW 336
14213: GO 14160
14215: POP
14216: POP
// end ;
14217: PPOPN 1
14219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14220: LD_EXP 19
14224: PUSH
14225: LD_EXP 31
14229: AND
14230: IFFALSE 14309
14232: GO 14234
14234: DISABLE
14235: LD_INT 0
14237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14238: LD_ADDR_VAR 0 1
14242: PUSH
14243: LD_INT 22
14245: PUSH
14246: LD_OWVAR 2
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 21
14257: PUSH
14258: LD_INT 3
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 69
14273: ST_TO_ADDR
// if not tmp then
14274: LD_VAR 0 1
14278: NOT
14279: IFFALSE 14283
// exit ;
14281: GO 14309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14283: LD_VAR 0 1
14287: PUSH
14288: LD_INT 1
14290: PPUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 12
14300: ARRAY
14301: PPUSH
14302: LD_INT 100
14304: PPUSH
14305: CALL_OW 234
// end ;
14309: PPOPN 1
14311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14312: LD_EXP 19
14316: PUSH
14317: LD_EXP 33
14321: AND
14322: IFFALSE 14420
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 1
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 12
14392: ARRAY
14393: PPUSH
14394: LD_INT 1
14396: PPUSH
14397: LD_INT 4
14399: PPUSH
14400: CALL_OW 12
14404: PPUSH
14405: LD_INT 3000
14407: PPUSH
14408: LD_INT 9000
14410: PPUSH
14411: CALL_OW 12
14415: PPUSH
14416: CALL_OW 492
// end ;
14420: PPOPN 1
14422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14423: LD_EXP 19
14427: PUSH
14428: LD_EXP 34
14432: AND
14433: IFFALSE 14453
14435: GO 14437
14437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14438: LD_INT 1
14440: PPUSH
14441: LD_OWVAR 2
14445: PPUSH
14446: LD_INT 0
14448: PPUSH
14449: CALL_OW 324
14453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14454: LD_EXP 19
14458: PUSH
14459: LD_EXP 35
14463: AND
14464: IFFALSE 14547
14466: GO 14468
14468: DISABLE
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_INT 22
14480: PUSH
14481: LD_OWVAR 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 21
14492: PUSH
14493: LD_INT 3
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PPUSH
14504: CALL_OW 69
14508: ST_TO_ADDR
// if not tmp then
14509: LD_VAR 0 2
14513: NOT
14514: IFFALSE 14518
// exit ;
14516: GO 14547
// for i in tmp do
14518: LD_ADDR_VAR 0 1
14522: PUSH
14523: LD_VAR 0 2
14527: PUSH
14528: FOR_IN
14529: IFFALSE 14545
// SetBLevel ( i , 10 ) ;
14531: LD_VAR 0 1
14535: PPUSH
14536: LD_INT 10
14538: PPUSH
14539: CALL_OW 241
14543: GO 14528
14545: POP
14546: POP
// end ;
14547: PPOPN 2
14549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14550: LD_EXP 19
14554: PUSH
14555: LD_EXP 36
14559: AND
14560: IFFALSE 14671
14562: GO 14564
14564: DISABLE
14565: LD_INT 0
14567: PPUSH
14568: PPUSH
14569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14570: LD_ADDR_VAR 0 3
14574: PUSH
14575: LD_INT 22
14577: PUSH
14578: LD_OWVAR 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 25
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 69
14605: ST_TO_ADDR
// if not tmp then
14606: LD_VAR 0 3
14610: NOT
14611: IFFALSE 14615
// exit ;
14613: GO 14671
// un := tmp [ rand ( 1 , tmp ) ] ;
14615: LD_ADDR_VAR 0 2
14619: PUSH
14620: LD_VAR 0 3
14624: PUSH
14625: LD_INT 1
14627: PPUSH
14628: LD_VAR 0 3
14632: PPUSH
14633: CALL_OW 12
14637: ARRAY
14638: ST_TO_ADDR
// if Crawls ( un ) then
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 318
14648: IFFALSE 14659
// ComWalk ( un ) ;
14650: LD_VAR 0 2
14654: PPUSH
14655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14659: LD_VAR 0 2
14663: PPUSH
14664: LD_INT 5
14666: PPUSH
14667: CALL_OW 336
// end ;
14671: PPOPN 3
14673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14674: LD_EXP 19
14678: PUSH
14679: LD_EXP 37
14683: AND
14684: PUSH
14685: LD_OWVAR 67
14689: PUSH
14690: LD_INT 4
14692: LESS
14693: AND
14694: IFFALSE 14713
14696: GO 14698
14698: DISABLE
// begin Difficulty := Difficulty + 1 ;
14699: LD_ADDR_OWVAR 67
14703: PUSH
14704: LD_OWVAR 67
14708: PUSH
14709: LD_INT 1
14711: PLUS
14712: ST_TO_ADDR
// end ;
14713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14714: LD_EXP 19
14718: PUSH
14719: LD_EXP 38
14723: AND
14724: IFFALSE 14827
14726: GO 14728
14728: DISABLE
14729: LD_INT 0
14731: PPUSH
// begin for i := 1 to 5 do
14732: LD_ADDR_VAR 0 1
14736: PUSH
14737: DOUBLE
14738: LD_INT 1
14740: DEC
14741: ST_TO_ADDR
14742: LD_INT 5
14744: PUSH
14745: FOR_TO
14746: IFFALSE 14825
// begin uc_nation := nation_nature ;
14748: LD_ADDR_OWVAR 21
14752: PUSH
14753: LD_INT 0
14755: ST_TO_ADDR
// uc_side := 0 ;
14756: LD_ADDR_OWVAR 20
14760: PUSH
14761: LD_INT 0
14763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14764: LD_ADDR_OWVAR 29
14768: PUSH
14769: LD_INT 12
14771: PUSH
14772: LD_INT 12
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: ST_TO_ADDR
// hc_agressivity := 20 ;
14779: LD_ADDR_OWVAR 35
14783: PUSH
14784: LD_INT 20
14786: ST_TO_ADDR
// hc_class := class_tiger ;
14787: LD_ADDR_OWVAR 28
14791: PUSH
14792: LD_INT 14
14794: ST_TO_ADDR
// hc_gallery :=  ;
14795: LD_ADDR_OWVAR 33
14799: PUSH
14800: LD_STRING 
14802: ST_TO_ADDR
// hc_name :=  ;
14803: LD_ADDR_OWVAR 26
14807: PUSH
14808: LD_STRING 
14810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14811: CALL_OW 44
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 51
// end ;
14823: GO 14745
14825: POP
14826: POP
// end ;
14827: PPOPN 1
14829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14830: LD_EXP 19
14834: PUSH
14835: LD_EXP 39
14839: AND
14840: IFFALSE 14849
14842: GO 14844
14844: DISABLE
// StreamSibBomb ;
14845: CALL 14850 0 0
14849: END
// export function StreamSibBomb ; var i , x , y ; begin
14850: LD_INT 0
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
// result := false ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// for i := 1 to 16 do
14864: LD_ADDR_VAR 0 2
14868: PUSH
14869: DOUBLE
14870: LD_INT 1
14872: DEC
14873: ST_TO_ADDR
14874: LD_INT 16
14876: PUSH
14877: FOR_TO
14878: IFFALSE 15077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14880: LD_ADDR_VAR 0 3
14884: PUSH
14885: LD_INT 10
14887: PUSH
14888: LD_INT 20
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 40
14896: PUSH
14897: LD_INT 50
14899: PUSH
14900: LD_INT 60
14902: PUSH
14903: LD_INT 70
14905: PUSH
14906: LD_INT 80
14908: PUSH
14909: LD_INT 90
14911: PUSH
14912: LD_INT 100
14914: PUSH
14915: LD_INT 110
14917: PUSH
14918: LD_INT 120
14920: PUSH
14921: LD_INT 130
14923: PUSH
14924: LD_INT 140
14926: PUSH
14927: LD_INT 150
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: PPUSH
14950: LD_INT 15
14952: PPUSH
14953: CALL_OW 12
14957: ARRAY
14958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_INT 10
14966: PUSH
14967: LD_INT 20
14969: PUSH
14970: LD_INT 30
14972: PUSH
14973: LD_INT 40
14975: PUSH
14976: LD_INT 50
14978: PUSH
14979: LD_INT 60
14981: PUSH
14982: LD_INT 70
14984: PUSH
14985: LD_INT 80
14987: PUSH
14988: LD_INT 90
14990: PUSH
14991: LD_INT 100
14993: PUSH
14994: LD_INT 110
14996: PUSH
14997: LD_INT 120
14999: PUSH
15000: LD_INT 130
15002: PUSH
15003: LD_INT 140
15005: PUSH
15006: LD_INT 150
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_INT 15
15031: PPUSH
15032: CALL_OW 12
15036: ARRAY
15037: ST_TO_ADDR
// if ValidHex ( x , y ) then
15038: LD_VAR 0 3
15042: PPUSH
15043: LD_VAR 0 4
15047: PPUSH
15048: CALL_OW 488
15052: IFFALSE 15075
// begin result := [ x , y ] ;
15054: LD_ADDR_VAR 0 1
15058: PUSH
15059: LD_VAR 0 3
15063: PUSH
15064: LD_VAR 0 4
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: ST_TO_ADDR
// break ;
15073: GO 15077
// end ; end ;
15075: GO 14877
15077: POP
15078: POP
// if result then
15079: LD_VAR 0 1
15083: IFFALSE 15143
// begin ToLua ( playSibBomb() ) ;
15085: LD_STRING playSibBomb()
15087: PPUSH
15088: CALL_OW 559
// wait ( 0 0$14 ) ;
15092: LD_INT 490
15094: PPUSH
15095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15099: LD_VAR 0 1
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: LD_VAR 0 1
15112: PUSH
15113: LD_INT 2
15115: ARRAY
15116: PPUSH
15117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15121: LD_VAR 0 1
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: PPUSH
15130: LD_VAR 0 1
15134: PUSH
15135: LD_INT 2
15137: ARRAY
15138: PPUSH
15139: CALL_OW 429
// end ; end ;
15143: LD_VAR 0 1
15147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15148: LD_EXP 19
15152: PUSH
15153: LD_EXP 41
15157: AND
15158: IFFALSE 15170
15160: GO 15162
15162: DISABLE
// YouLost (  ) ;
15163: LD_STRING 
15165: PPUSH
15166: CALL_OW 104
15170: END
// every 0 0$1 trigger StreamModeActive and sFog do
15171: LD_EXP 19
15175: PUSH
15176: LD_EXP 40
15180: AND
15181: IFFALSE 15195
15183: GO 15185
15185: DISABLE
// FogOff ( your_side ) ;
15186: LD_OWVAR 2
15190: PPUSH
15191: CALL_OW 344
15195: END
// every 0 0$1 trigger StreamModeActive and sSun do
15196: LD_EXP 19
15200: PUSH
15201: LD_EXP 42
15205: AND
15206: IFFALSE 15234
15208: GO 15210
15210: DISABLE
// begin solar_recharge_percent := 0 ;
15211: LD_ADDR_OWVAR 79
15215: PUSH
15216: LD_INT 0
15218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15219: LD_INT 10500
15221: PPUSH
15222: CALL_OW 67
// solar_recharge_percent := 100 ;
15226: LD_ADDR_OWVAR 79
15230: PUSH
15231: LD_INT 100
15233: ST_TO_ADDR
// end ;
15234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15235: LD_EXP 19
15239: PUSH
15240: LD_EXP 43
15244: AND
15245: IFFALSE 15484
15247: GO 15249
15249: DISABLE
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
15254: PPUSH
// begin tmp := [ ] ;
15255: LD_ADDR_VAR 0 3
15259: PUSH
15260: EMPTY
15261: ST_TO_ADDR
// for i := 1 to 6 do
15262: LD_ADDR_VAR 0 1
15266: PUSH
15267: DOUBLE
15268: LD_INT 1
15270: DEC
15271: ST_TO_ADDR
15272: LD_INT 6
15274: PUSH
15275: FOR_TO
15276: IFFALSE 15381
// begin uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// uc_side := 0 ;
15286: LD_ADDR_OWVAR 20
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15294: LD_ADDR_OWVAR 29
15298: PUSH
15299: LD_INT 12
15301: PUSH
15302: LD_INT 12
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: ST_TO_ADDR
// hc_agressivity := 20 ;
15309: LD_ADDR_OWVAR 35
15313: PUSH
15314: LD_INT 20
15316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15317: LD_ADDR_OWVAR 28
15321: PUSH
15322: LD_INT 17
15324: ST_TO_ADDR
// hc_gallery :=  ;
15325: LD_ADDR_OWVAR 33
15329: PUSH
15330: LD_STRING 
15332: ST_TO_ADDR
// hc_name :=  ;
15333: LD_ADDR_OWVAR 26
15337: PUSH
15338: LD_STRING 
15340: ST_TO_ADDR
// un := CreateHuman ;
15341: LD_ADDR_VAR 0 2
15345: PUSH
15346: CALL_OW 44
15350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15351: LD_VAR 0 2
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 51
// tmp := tmp ^ un ;
15363: LD_ADDR_VAR 0 3
15367: PUSH
15368: LD_VAR 0 3
15372: PUSH
15373: LD_VAR 0 2
15377: ADD
15378: ST_TO_ADDR
// end ;
15379: GO 15275
15381: POP
15382: POP
// repeat wait ( 0 0$1 ) ;
15383: LD_INT 35
15385: PPUSH
15386: CALL_OW 67
// for un in tmp do
15390: LD_ADDR_VAR 0 2
15394: PUSH
15395: LD_VAR 0 3
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15475
// begin if IsDead ( un ) then
15403: LD_VAR 0 2
15407: PPUSH
15408: CALL_OW 301
15412: IFFALSE 15432
// begin tmp := tmp diff un ;
15414: LD_ADDR_VAR 0 3
15418: PUSH
15419: LD_VAR 0 3
15423: PUSH
15424: LD_VAR 0 2
15428: DIFF
15429: ST_TO_ADDR
// continue ;
15430: GO 15400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_INT 3
15439: PUSH
15440: LD_INT 22
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: PPUSH
15459: LD_VAR 0 2
15463: PPUSH
15464: CALL_OW 74
15468: PPUSH
15469: CALL_OW 115
// end ;
15473: GO 15400
15475: POP
15476: POP
// until not tmp ;
15477: LD_VAR 0 3
15481: NOT
15482: IFFALSE 15383
// end ;
15484: PPOPN 3
15486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15487: LD_EXP 19
15491: PUSH
15492: LD_EXP 44
15496: AND
15497: IFFALSE 15551
15499: GO 15501
15501: DISABLE
// begin ToLua ( displayTroll(); ) ;
15502: LD_STRING displayTroll();
15504: PPUSH
15505: CALL_OW 559
// wait ( 3 3$00 ) ;
15509: LD_INT 6300
15511: PPUSH
15512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15516: LD_STRING hideTroll();
15518: PPUSH
15519: CALL_OW 559
// wait ( 1 1$00 ) ;
15523: LD_INT 2100
15525: PPUSH
15526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15530: LD_STRING displayTroll();
15532: PPUSH
15533: CALL_OW 559
// wait ( 1 1$00 ) ;
15537: LD_INT 2100
15539: PPUSH
15540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15544: LD_STRING hideTroll();
15546: PPUSH
15547: CALL_OW 559
// end ;
15551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15552: LD_EXP 19
15556: PUSH
15557: LD_EXP 45
15561: AND
15562: IFFALSE 15625
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin p := 0 ;
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_INT 0
15577: ST_TO_ADDR
// repeat game_speed := 1 ;
15578: LD_ADDR_OWVAR 65
15582: PUSH
15583: LD_INT 1
15585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15586: LD_INT 35
15588: PPUSH
15589: CALL_OW 67
// p := p + 1 ;
15593: LD_ADDR_VAR 0 1
15597: PUSH
15598: LD_VAR 0 1
15602: PUSH
15603: LD_INT 1
15605: PLUS
15606: ST_TO_ADDR
// until p >= 60 ;
15607: LD_VAR 0 1
15611: PUSH
15612: LD_INT 60
15614: GREATEREQUAL
15615: IFFALSE 15578
// game_speed := 4 ;
15617: LD_ADDR_OWVAR 65
15621: PUSH
15622: LD_INT 4
15624: ST_TO_ADDR
// end ;
15625: PPOPN 1
15627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15628: LD_EXP 19
15632: PUSH
15633: LD_EXP 46
15637: AND
15638: IFFALSE 15784
15640: GO 15642
15642: DISABLE
15643: LD_INT 0
15645: PPUSH
15646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_OWVAR 2
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: LD_INT 0
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: ST_TO_ADDR
// if not depot then
15701: LD_VAR 0 1
15705: NOT
15706: IFFALSE 15710
// exit ;
15708: GO 15784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15710: LD_ADDR_VAR 0 2
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: LD_INT 1
15722: PPUSH
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 12
15732: ARRAY
15733: PPUSH
15734: CALL_OW 274
15738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15739: LD_VAR 0 2
15743: PPUSH
15744: LD_INT 1
15746: PPUSH
15747: LD_INT 0
15749: PPUSH
15750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15754: LD_VAR 0 2
15758: PPUSH
15759: LD_INT 2
15761: PPUSH
15762: LD_INT 0
15764: PPUSH
15765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15769: LD_VAR 0 2
15773: PPUSH
15774: LD_INT 3
15776: PPUSH
15777: LD_INT 0
15779: PPUSH
15780: CALL_OW 277
// end ;
15784: PPOPN 2
15786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15787: LD_EXP 19
15791: PUSH
15792: LD_EXP 47
15796: AND
15797: IFFALSE 15894
15799: GO 15801
15801: DISABLE
15802: LD_INT 0
15804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15805: LD_ADDR_VAR 0 1
15809: PUSH
15810: LD_INT 22
15812: PUSH
15813: LD_OWVAR 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 3
15834: PUSH
15835: LD_INT 23
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: PPUSH
15854: CALL_OW 69
15858: ST_TO_ADDR
// if not tmp then
15859: LD_VAR 0 1
15863: NOT
15864: IFFALSE 15868
// exit ;
15866: GO 15894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15868: LD_VAR 0 1
15872: PUSH
15873: LD_INT 1
15875: PPUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 12
15885: ARRAY
15886: PPUSH
15887: LD_INT 200
15889: PPUSH
15890: CALL_OW 234
// end ;
15894: PPOPN 1
15896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15897: LD_EXP 19
15901: PUSH
15902: LD_EXP 48
15906: AND
15907: IFFALSE 15986
15909: GO 15911
15911: DISABLE
15912: LD_INT 0
15914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15915: LD_ADDR_VAR 0 1
15919: PUSH
15920: LD_INT 22
15922: PUSH
15923: LD_OWVAR 2
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 21
15934: PUSH
15935: LD_INT 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: ST_TO_ADDR
// if not tmp then
15951: LD_VAR 0 1
15955: NOT
15956: IFFALSE 15960
// exit ;
15958: GO 15986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15960: LD_VAR 0 1
15964: PUSH
15965: LD_INT 1
15967: PPUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 12
15977: ARRAY
15978: PPUSH
15979: LD_INT 60
15981: PPUSH
15982: CALL_OW 234
// end ;
15986: PPOPN 1
15988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15989: LD_EXP 19
15993: PUSH
15994: LD_EXP 49
15998: AND
15999: IFFALSE 16098
16001: GO 16003
16003: DISABLE
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
// begin enable ;
16008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16009: LD_ADDR_VAR 0 1
16013: PUSH
16014: LD_INT 22
16016: PUSH
16017: LD_OWVAR 2
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 61
16028: PUSH
16029: EMPTY
16030: LIST
16031: PUSH
16032: LD_INT 33
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL_OW 69
16051: ST_TO_ADDR
// if not tmp then
16052: LD_VAR 0 1
16056: NOT
16057: IFFALSE 16061
// exit ;
16059: GO 16098
// for i in tmp do
16061: LD_ADDR_VAR 0 2
16065: PUSH
16066: LD_VAR 0 1
16070: PUSH
16071: FOR_IN
16072: IFFALSE 16096
// if IsControledBy ( i ) then
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 312
16083: IFFALSE 16094
// ComUnlink ( i ) ;
16085: LD_VAR 0 2
16089: PPUSH
16090: CALL_OW 136
16094: GO 16071
16096: POP
16097: POP
// end ;
16098: PPOPN 2
16100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16101: LD_EXP 19
16105: PUSH
16106: LD_EXP 50
16110: AND
16111: IFFALSE 16251
16113: GO 16115
16115: DISABLE
16116: LD_INT 0
16118: PPUSH
16119: PPUSH
// begin ToLua ( displayPowell(); ) ;
16120: LD_STRING displayPowell();
16122: PPUSH
16123: CALL_OW 559
// uc_side := 0 ;
16127: LD_ADDR_OWVAR 20
16131: PUSH
16132: LD_INT 0
16134: ST_TO_ADDR
// uc_nation := 2 ;
16135: LD_ADDR_OWVAR 21
16139: PUSH
16140: LD_INT 2
16142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16143: LD_ADDR_OWVAR 37
16147: PUSH
16148: LD_INT 14
16150: ST_TO_ADDR
// vc_engine := engine_siberite ;
16151: LD_ADDR_OWVAR 39
16155: PUSH
16156: LD_INT 3
16158: ST_TO_ADDR
// vc_control := control_apeman ;
16159: LD_ADDR_OWVAR 38
16163: PUSH
16164: LD_INT 5
16166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16167: LD_ADDR_OWVAR 40
16171: PUSH
16172: LD_INT 29
16174: ST_TO_ADDR
// un := CreateVehicle ;
16175: LD_ADDR_VAR 0 2
16179: PUSH
16180: CALL_OW 45
16184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16185: LD_VAR 0 2
16189: PPUSH
16190: LD_INT 1
16192: PPUSH
16193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16197: LD_INT 35
16199: PPUSH
16200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16204: LD_VAR 0 2
16208: PPUSH
16209: LD_INT 22
16211: PUSH
16212: LD_OWVAR 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: CALL_OW 74
16235: PPUSH
16236: CALL_OW 115
// until IsDead ( un ) ;
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 301
16249: IFFALSE 16197
// end ;
16251: PPOPN 2
16253: END
// every 0 0$1 trigger StreamModeActive and sStu do
16254: LD_EXP 19
16258: PUSH
16259: LD_EXP 58
16263: AND
16264: IFFALSE 16280
16266: GO 16268
16268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16269: LD_STRING displayStucuk();
16271: PPUSH
16272: CALL_OW 559
// ResetFog ;
16276: CALL_OW 335
// end ;
16280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16281: LD_EXP 19
16285: PUSH
16286: LD_EXP 51
16290: AND
16291: IFFALSE 16432
16293: GO 16295
16295: DISABLE
16296: LD_INT 0
16298: PPUSH
16299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16300: LD_ADDR_VAR 0 2
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_OWVAR 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 21
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PPUSH
16331: CALL_OW 69
16335: ST_TO_ADDR
// if not tmp then
16336: LD_VAR 0 2
16340: NOT
16341: IFFALSE 16345
// exit ;
16343: GO 16432
// un := tmp [ rand ( 1 , tmp ) ] ;
16345: LD_ADDR_VAR 0 1
16349: PUSH
16350: LD_VAR 0 2
16354: PUSH
16355: LD_INT 1
16357: PPUSH
16358: LD_VAR 0 2
16362: PPUSH
16363: CALL_OW 12
16367: ARRAY
16368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16369: LD_VAR 0 1
16373: PPUSH
16374: LD_INT 0
16376: PPUSH
16377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16381: LD_VAR 0 1
16385: PPUSH
16386: LD_OWVAR 3
16390: PUSH
16391: LD_VAR 0 1
16395: DIFF
16396: PPUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 74
16406: PPUSH
16407: CALL_OW 115
// wait ( 0 0$20 ) ;
16411: LD_INT 700
16413: PPUSH
16414: CALL_OW 67
// SetSide ( un , your_side ) ;
16418: LD_VAR 0 1
16422: PPUSH
16423: LD_OWVAR 2
16427: PPUSH
16428: CALL_OW 235
// end ;
16432: PPOPN 2
16434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16435: LD_EXP 19
16439: PUSH
16440: LD_EXP 52
16444: AND
16445: IFFALSE 16551
16447: GO 16449
16449: DISABLE
16450: LD_INT 0
16452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_INT 22
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 30
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PPUSH
16502: CALL_OW 69
16506: ST_TO_ADDR
// if not depot then
16507: LD_VAR 0 1
16511: NOT
16512: IFFALSE 16516
// exit ;
16514: GO 16551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16516: LD_VAR 0 1
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: PPUSH
16525: CALL_OW 250
16529: PPUSH
16530: LD_VAR 0 1
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PPUSH
16539: CALL_OW 251
16543: PPUSH
16544: LD_INT 70
16546: PPUSH
16547: CALL_OW 495
// end ;
16551: PPOPN 1
16553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16554: LD_EXP 19
16558: PUSH
16559: LD_EXP 53
16563: AND
16564: IFFALSE 16775
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
16575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 5
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 5
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16775
// for i in tmp do
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_VAR 0 5
16630: PUSH
16631: FOR_IN
16632: IFFALSE 16773
// begin d := rand ( 0 , 5 ) ;
16634: LD_ADDR_VAR 0 4
16638: PUSH
16639: LD_INT 0
16641: PPUSH
16642: LD_INT 5
16644: PPUSH
16645: CALL_OW 12
16649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 1
16659: PPUSH
16660: CALL_OW 250
16664: PPUSH
16665: LD_VAR 0 4
16669: PPUSH
16670: LD_INT 3
16672: PPUSH
16673: LD_INT 12
16675: PPUSH
16676: CALL_OW 12
16680: PPUSH
16681: CALL_OW 272
16685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16686: LD_ADDR_VAR 0 3
16690: PUSH
16691: LD_VAR 0 1
16695: PPUSH
16696: CALL_OW 251
16700: PPUSH
16701: LD_VAR 0 4
16705: PPUSH
16706: LD_INT 3
16708: PPUSH
16709: LD_INT 12
16711: PPUSH
16712: CALL_OW 12
16716: PPUSH
16717: CALL_OW 273
16721: ST_TO_ADDR
// if ValidHex ( x , y ) then
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: CALL_OW 488
16736: IFFALSE 16771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_VAR 0 2
16747: PPUSH
16748: LD_VAR 0 3
16752: PPUSH
16753: LD_INT 3
16755: PPUSH
16756: LD_INT 6
16758: PPUSH
16759: CALL_OW 12
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: CALL_OW 483
// end ;
16771: GO 16631
16773: POP
16774: POP
// end ;
16775: PPOPN 5
16777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16778: LD_EXP 19
16782: PUSH
16783: LD_EXP 54
16787: AND
16788: IFFALSE 16882
16790: GO 16792
16792: DISABLE
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 32
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 21
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: PPUSH
16839: CALL_OW 69
16843: ST_TO_ADDR
// if not tmp then
16844: LD_VAR 0 2
16848: NOT
16849: IFFALSE 16853
// exit ;
16851: GO 16882
// for i in tmp do
16853: LD_ADDR_VAR 0 1
16857: PUSH
16858: LD_VAR 0 2
16862: PUSH
16863: FOR_IN
16864: IFFALSE 16880
// SetFuel ( i , 0 ) ;
16866: LD_VAR 0 1
16870: PPUSH
16871: LD_INT 0
16873: PPUSH
16874: CALL_OW 240
16878: GO 16863
16880: POP
16881: POP
// end ;
16882: PPOPN 2
16884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16885: LD_EXP 19
16889: PUSH
16890: LD_EXP 55
16894: AND
16895: IFFALSE 16961
16897: GO 16899
16899: DISABLE
16900: LD_INT 0
16902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_OWVAR 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 30
16922: PUSH
16923: LD_INT 29
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 69
16938: ST_TO_ADDR
// if not tmp then
16939: LD_VAR 0 1
16943: NOT
16944: IFFALSE 16948
// exit ;
16946: GO 16961
// DestroyUnit ( tmp [ 1 ] ) ;
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: CALL_OW 65
// end ;
16961: PPOPN 1
16963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16964: LD_EXP 19
16968: PUSH
16969: LD_EXP 57
16973: AND
16974: IFFALSE 17103
16976: GO 16978
16978: DISABLE
16979: LD_INT 0
16981: PPUSH
// begin uc_side := 0 ;
16982: LD_ADDR_OWVAR 20
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// uc_nation := nation_arabian ;
16990: LD_ADDR_OWVAR 21
16994: PUSH
16995: LD_INT 2
16997: ST_TO_ADDR
// hc_gallery :=  ;
16998: LD_ADDR_OWVAR 33
17002: PUSH
17003: LD_STRING 
17005: ST_TO_ADDR
// hc_name :=  ;
17006: LD_ADDR_OWVAR 26
17010: PUSH
17011: LD_STRING 
17013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17014: LD_INT 1
17016: PPUSH
17017: LD_INT 11
17019: PPUSH
17020: LD_INT 10
17022: PPUSH
17023: CALL_OW 380
// un := CreateHuman ;
17027: LD_ADDR_VAR 0 1
17031: PUSH
17032: CALL_OW 44
17036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17037: LD_VAR 0 1
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17049: LD_INT 35
17051: PPUSH
17052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 22
17063: PUSH
17064: LD_OWVAR 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PPUSH
17073: CALL_OW 69
17077: PPUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 74
17087: PPUSH
17088: CALL_OW 115
// until IsDead ( un ) ;
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 301
17101: IFFALSE 17049
// end ;
17103: PPOPN 1
17105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17106: LD_EXP 19
17110: PUSH
17111: LD_EXP 59
17115: AND
17116: IFFALSE 17128
17118: GO 17120
17120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17121: LD_STRING earthquake(getX(game), 0, 32)
17123: PPUSH
17124: CALL_OW 559
17128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17129: LD_EXP 19
17133: PUSH
17134: LD_EXP 60
17138: AND
17139: IFFALSE 17230
17141: GO 17143
17143: DISABLE
17144: LD_INT 0
17146: PPUSH
// begin enable ;
17147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17148: LD_ADDR_VAR 0 1
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_OWVAR 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 33
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// if not tmp then
17195: LD_VAR 0 1
17199: NOT
17200: IFFALSE 17204
// exit ;
17202: GO 17230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17204: LD_VAR 0 1
17208: PUSH
17209: LD_INT 1
17211: PPUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 12
17221: ARRAY
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: CALL_OW 234
// end ;
17230: PPOPN 1
17232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17233: LD_EXP 19
17237: PUSH
17238: LD_EXP 61
17242: AND
17243: IFFALSE 17384
17245: GO 17247
17247: DISABLE
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_OWVAR 2
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 25
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 69
17288: ST_TO_ADDR
// if not tmp then
17289: LD_VAR 0 3
17293: NOT
17294: IFFALSE 17298
// exit ;
17296: GO 17384
// un := tmp [ rand ( 1 , tmp ) ] ;
17298: LD_ADDR_VAR 0 2
17302: PUSH
17303: LD_VAR 0 3
17307: PUSH
17308: LD_INT 1
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: CALL_OW 12
17320: ARRAY
17321: ST_TO_ADDR
// if Crawls ( un ) then
17322: LD_VAR 0 2
17326: PPUSH
17327: CALL_OW 318
17331: IFFALSE 17342
// ComWalk ( un ) ;
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17342: LD_VAR 0 2
17346: PPUSH
17347: LD_INT 9
17349: PPUSH
17350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17354: LD_INT 28
17356: PPUSH
17357: LD_OWVAR 2
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17369: LD_INT 29
17371: PPUSH
17372: LD_OWVAR 2
17376: PPUSH
17377: LD_INT 2
17379: PPUSH
17380: CALL_OW 322
// end ;
17384: PPOPN 3
17386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17387: LD_EXP 19
17391: PUSH
17392: LD_EXP 62
17396: AND
17397: IFFALSE 17508
17399: GO 17401
17401: DISABLE
17402: LD_INT 0
17404: PPUSH
17405: PPUSH
17406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17407: LD_ADDR_VAR 0 3
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_OWVAR 2
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 25
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: ST_TO_ADDR
// if not tmp then
17443: LD_VAR 0 3
17447: NOT
17448: IFFALSE 17452
// exit ;
17450: GO 17508
// un := tmp [ rand ( 1 , tmp ) ] ;
17452: LD_ADDR_VAR 0 2
17456: PUSH
17457: LD_VAR 0 3
17461: PUSH
17462: LD_INT 1
17464: PPUSH
17465: LD_VAR 0 3
17469: PPUSH
17470: CALL_OW 12
17474: ARRAY
17475: ST_TO_ADDR
// if Crawls ( un ) then
17476: LD_VAR 0 2
17480: PPUSH
17481: CALL_OW 318
17485: IFFALSE 17496
// ComWalk ( un ) ;
17487: LD_VAR 0 2
17491: PPUSH
17492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17496: LD_VAR 0 2
17500: PPUSH
17501: LD_INT 8
17503: PPUSH
17504: CALL_OW 336
// end ;
17508: PPOPN 3
17510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17511: LD_EXP 19
17515: PUSH
17516: LD_EXP 63
17520: AND
17521: IFFALSE 17665
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17530: LD_ADDR_VAR 0 2
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 34
17562: PUSH
17563: LD_INT 12
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 34
17572: PUSH
17573: LD_INT 51
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 34
17582: PUSH
17583: LD_INT 32
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: ST_TO_ADDR
// if not tmp then
17606: LD_VAR 0 2
17610: NOT
17611: IFFALSE 17615
// exit ;
17613: GO 17665
// for i in tmp do
17615: LD_ADDR_VAR 0 1
17619: PUSH
17620: LD_VAR 0 2
17624: PUSH
17625: FOR_IN
17626: IFFALSE 17663
// if GetCargo ( i , mat_artifact ) = 0 then
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_INT 4
17635: PPUSH
17636: CALL_OW 289
17640: PUSH
17641: LD_INT 0
17643: EQUAL
17644: IFFALSE 17661
// SetCargo ( i , mat_siberit , 100 ) ;
17646: LD_VAR 0 1
17650: PPUSH
17651: LD_INT 3
17653: PPUSH
17654: LD_INT 100
17656: PPUSH
17657: CALL_OW 290
17661: GO 17625
17663: POP
17664: POP
// end ;
17665: PPOPN 2
17667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17668: LD_EXP 19
17672: PUSH
17673: LD_EXP 64
17677: AND
17678: IFFALSE 17861
17680: GO 17682
17682: DISABLE
17683: LD_INT 0
17685: PPUSH
17686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17687: LD_ADDR_VAR 0 2
17691: PUSH
17692: LD_INT 22
17694: PUSH
17695: LD_OWVAR 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: ST_TO_ADDR
// if not tmp then
17709: LD_VAR 0 2
17713: NOT
17714: IFFALSE 17718
// exit ;
17716: GO 17861
// for i := 1 to 2 do
17718: LD_ADDR_VAR 0 1
17722: PUSH
17723: DOUBLE
17724: LD_INT 1
17726: DEC
17727: ST_TO_ADDR
17728: LD_INT 2
17730: PUSH
17731: FOR_TO
17732: IFFALSE 17859
// begin uc_side := your_side ;
17734: LD_ADDR_OWVAR 20
17738: PUSH
17739: LD_OWVAR 2
17743: ST_TO_ADDR
// uc_nation := nation_american ;
17744: LD_ADDR_OWVAR 21
17748: PUSH
17749: LD_INT 1
17751: ST_TO_ADDR
// vc_chassis := us_morphling ;
17752: LD_ADDR_OWVAR 37
17756: PUSH
17757: LD_INT 5
17759: ST_TO_ADDR
// vc_engine := engine_siberite ;
17760: LD_ADDR_OWVAR 39
17764: PUSH
17765: LD_INT 3
17767: ST_TO_ADDR
// vc_control := control_computer ;
17768: LD_ADDR_OWVAR 38
17772: PUSH
17773: LD_INT 3
17775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17776: LD_ADDR_OWVAR 40
17780: PUSH
17781: LD_INT 10
17783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17784: LD_VAR 0 2
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: CALL_OW 310
17797: NOT
17798: IFFALSE 17845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17800: CALL_OW 45
17804: PPUSH
17805: LD_VAR 0 2
17809: PUSH
17810: LD_INT 1
17812: ARRAY
17813: PPUSH
17814: CALL_OW 250
17818: PPUSH
17819: LD_VAR 0 2
17823: PUSH
17824: LD_INT 1
17826: ARRAY
17827: PPUSH
17828: CALL_OW 251
17832: PPUSH
17833: LD_INT 12
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 50
17843: GO 17857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17845: CALL_OW 45
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 51
// end ;
17857: GO 17731
17859: POP
17860: POP
// end ;
17861: PPOPN 2
17863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17864: LD_EXP 19
17868: PUSH
17869: LD_EXP 65
17873: AND
17874: IFFALSE 18096
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17887: LD_ADDR_VAR 0 6
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 21
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 3
17916: PUSH
17917: LD_INT 23
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: ST_TO_ADDR
// if not tmp then
17941: LD_VAR 0 6
17945: NOT
17946: IFFALSE 17950
// exit ;
17948: GO 18096
// s1 := rand ( 1 , 4 ) ;
17950: LD_ADDR_VAR 0 2
17954: PUSH
17955: LD_INT 1
17957: PPUSH
17958: LD_INT 4
17960: PPUSH
17961: CALL_OW 12
17965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17966: LD_ADDR_VAR 0 4
17970: PUSH
17971: LD_VAR 0 6
17975: PUSH
17976: LD_INT 1
17978: ARRAY
17979: PPUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: CALL_OW 259
17989: ST_TO_ADDR
// if s1 = 1 then
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 1
17997: EQUAL
17998: IFFALSE 18018
// s2 := rand ( 2 , 4 ) else
18000: LD_ADDR_VAR 0 3
18004: PUSH
18005: LD_INT 2
18007: PPUSH
18008: LD_INT 4
18010: PPUSH
18011: CALL_OW 12
18015: ST_TO_ADDR
18016: GO 18026
// s2 := 1 ;
18018: LD_ADDR_VAR 0 3
18022: PUSH
18023: LD_INT 1
18025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18026: LD_ADDR_VAR 0 5
18030: PUSH
18031: LD_VAR 0 6
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PPUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 259
18049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18050: LD_VAR 0 6
18054: PUSH
18055: LD_INT 1
18057: ARRAY
18058: PPUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: LD_VAR 0 5
18068: PPUSH
18069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18073: LD_VAR 0 6
18077: PUSH
18078: LD_INT 1
18080: ARRAY
18081: PPUSH
18082: LD_VAR 0 3
18086: PPUSH
18087: LD_VAR 0 4
18091: PPUSH
18092: CALL_OW 237
// end ;
18096: PPOPN 6
18098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18099: LD_EXP 19
18103: PUSH
18104: LD_EXP 66
18108: AND
18109: IFFALSE 18188
18111: GO 18113
18113: DISABLE
18114: LD_INT 0
18116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18117: LD_ADDR_VAR 0 1
18121: PUSH
18122: LD_INT 22
18124: PUSH
18125: LD_OWVAR 2
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 30
18136: PUSH
18137: LD_INT 3
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PPUSH
18148: CALL_OW 69
18152: ST_TO_ADDR
// if not tmp then
18153: LD_VAR 0 1
18157: NOT
18158: IFFALSE 18162
// exit ;
18160: GO 18188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18162: LD_VAR 0 1
18166: PUSH
18167: LD_INT 1
18169: PPUSH
18170: LD_VAR 0 1
18174: PPUSH
18175: CALL_OW 12
18179: ARRAY
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 234
// end ;
18188: PPOPN 1
18190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18191: LD_EXP 19
18195: PUSH
18196: LD_EXP 67
18200: AND
18201: IFFALSE 18313
18203: GO 18205
18205: DISABLE
18206: LD_INT 0
18208: PPUSH
18209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18210: LD_ADDR_VAR 0 2
18214: PUSH
18215: LD_INT 22
18217: PUSH
18218: LD_OWVAR 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: LD_INT 30
18232: PUSH
18233: LD_INT 27
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 30
18242: PUSH
18243: LD_INT 26
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 30
18252: PUSH
18253: LD_INT 28
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PPUSH
18270: CALL_OW 69
18274: ST_TO_ADDR
// if not tmp then
18275: LD_VAR 0 2
18279: NOT
18280: IFFALSE 18284
// exit ;
18282: GO 18313
// for i in tmp do
18284: LD_ADDR_VAR 0 1
18288: PUSH
18289: LD_VAR 0 2
18293: PUSH
18294: FOR_IN
18295: IFFALSE 18311
// SetLives ( i , 1 ) ;
18297: LD_VAR 0 1
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 234
18309: GO 18294
18311: POP
18312: POP
// end ;
18313: PPOPN 2
18315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18316: LD_EXP 19
18320: PUSH
18321: LD_EXP 68
18325: AND
18326: IFFALSE 18613
18328: GO 18330
18330: DISABLE
18331: LD_INT 0
18333: PPUSH
18334: PPUSH
18335: PPUSH
// begin i := rand ( 1 , 7 ) ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 1
18343: PPUSH
18344: LD_INT 7
18346: PPUSH
18347: CALL_OW 12
18351: ST_TO_ADDR
// case i of 1 :
18352: LD_VAR 0 1
18356: PUSH
18357: LD_INT 1
18359: DOUBLE
18360: EQUAL
18361: IFTRUE 18365
18363: GO 18375
18365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18366: LD_STRING earthquake(getX(game), 0, 32)
18368: PPUSH
18369: CALL_OW 559
18373: GO 18613
18375: LD_INT 2
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18397
18383: POP
// begin ToLua ( displayStucuk(); ) ;
18384: LD_STRING displayStucuk();
18386: PPUSH
18387: CALL_OW 559
// ResetFog ;
18391: CALL_OW 335
// end ; 3 :
18395: GO 18613
18397: LD_INT 3
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18509
18405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18406: LD_ADDR_VAR 0 2
18410: PUSH
18411: LD_INT 22
18413: PUSH
18414: LD_OWVAR 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 69
18441: ST_TO_ADDR
// if not tmp then
18442: LD_VAR 0 2
18446: NOT
18447: IFFALSE 18451
// exit ;
18449: GO 18613
// un := tmp [ rand ( 1 , tmp ) ] ;
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: LD_VAR 0 2
18460: PUSH
18461: LD_INT 1
18463: PPUSH
18464: LD_VAR 0 2
18468: PPUSH
18469: CALL_OW 12
18473: ARRAY
18474: ST_TO_ADDR
// if Crawls ( un ) then
18475: LD_VAR 0 3
18479: PPUSH
18480: CALL_OW 318
18484: IFFALSE 18495
// ComWalk ( un ) ;
18486: LD_VAR 0 3
18490: PPUSH
18491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18495: LD_VAR 0 3
18499: PPUSH
18500: LD_INT 8
18502: PPUSH
18503: CALL_OW 336
// end ; 4 :
18507: GO 18613
18509: LD_INT 4
18511: DOUBLE
18512: EQUAL
18513: IFTRUE 18517
18515: GO 18591
18517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18518: LD_ADDR_VAR 0 2
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_OWVAR 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 29
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 2
18558: NOT
18559: IFFALSE 18563
// exit ;
18561: GO 18613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18563: LD_VAR 0 2
18567: PUSH
18568: LD_INT 1
18570: ARRAY
18571: PPUSH
18572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18576: LD_VAR 0 2
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: CALL_OW 65
// end ; 5 .. 7 :
18589: GO 18613
18591: LD_INT 5
18593: DOUBLE
18594: GREATEREQUAL
18595: IFFALSE 18603
18597: LD_INT 7
18599: DOUBLE
18600: LESSEQUAL
18601: IFTRUE 18605
18603: GO 18612
18605: POP
// StreamSibBomb ; end ;
18606: CALL 14850 0 0
18610: GO 18613
18612: POP
// end ;
18613: PPOPN 3
18615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18616: LD_EXP 19
18620: PUSH
18621: LD_EXP 69
18625: AND
18626: IFFALSE 18782
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
18635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_INT 81
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 21
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 21
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: ST_TO_ADDR
// if not tmp then
18690: LD_VAR 0 2
18694: NOT
18695: IFFALSE 18699
// exit ;
18697: GO 18782
// p := 0 ;
18699: LD_ADDR_VAR 0 3
18703: PUSH
18704: LD_INT 0
18706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18707: LD_INT 35
18709: PPUSH
18710: CALL_OW 67
// p := p + 1 ;
18714: LD_ADDR_VAR 0 3
18718: PUSH
18719: LD_VAR 0 3
18723: PUSH
18724: LD_INT 1
18726: PLUS
18727: ST_TO_ADDR
// for i in tmp do
18728: LD_ADDR_VAR 0 1
18732: PUSH
18733: LD_VAR 0 2
18737: PUSH
18738: FOR_IN
18739: IFFALSE 18770
// if GetLives ( i ) < 1000 then
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 256
18750: PUSH
18751: LD_INT 1000
18753: LESS
18754: IFFALSE 18768
// SetLives ( i , 1000 ) ;
18756: LD_VAR 0 1
18760: PPUSH
18761: LD_INT 1000
18763: PPUSH
18764: CALL_OW 234
18768: GO 18738
18770: POP
18771: POP
// until p > 20 ;
18772: LD_VAR 0 3
18776: PUSH
18777: LD_INT 20
18779: GREATER
18780: IFFALSE 18707
// end ;
18782: PPOPN 3
18784: END
// every 0 0$1 trigger StreamModeActive and sTime do
18785: LD_EXP 19
18789: PUSH
18790: LD_EXP 70
18794: AND
18795: IFFALSE 18830
18797: GO 18799
18799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18800: LD_INT 28
18802: PPUSH
18803: LD_OWVAR 2
18807: PPUSH
18808: LD_INT 2
18810: PPUSH
18811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18815: LD_INT 30
18817: PPUSH
18818: LD_OWVAR 2
18822: PPUSH
18823: LD_INT 2
18825: PPUSH
18826: CALL_OW 322
// end ;
18830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18831: LD_EXP 19
18835: PUSH
18836: LD_EXP 71
18840: AND
18841: IFFALSE 18962
18843: GO 18845
18845: DISABLE
18846: LD_INT 0
18848: PPUSH
18849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18850: LD_ADDR_VAR 0 2
18854: PUSH
18855: LD_INT 22
18857: PUSH
18858: LD_OWVAR 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 21
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 23
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: ST_TO_ADDR
// if not tmp then
18904: LD_VAR 0 2
18908: NOT
18909: IFFALSE 18913
// exit ;
18911: GO 18962
// for i in tmp do
18913: LD_ADDR_VAR 0 1
18917: PUSH
18918: LD_VAR 0 2
18922: PUSH
18923: FOR_IN
18924: IFFALSE 18960
// begin if Crawls ( i ) then
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 318
18935: IFFALSE 18946
// ComWalk ( i ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: CALL_OW 138
// SetClass ( i , 2 ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_INT 2
18953: PPUSH
18954: CALL_OW 336
// end ;
18958: GO 18923
18960: POP
18961: POP
// end ;
18962: PPOPN 2
18964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18965: LD_EXP 19
18969: PUSH
18970: LD_EXP 72
18974: AND
18975: IFFALSE 19263
18977: GO 18979
18979: DISABLE
18980: LD_INT 0
18982: PPUSH
18983: PPUSH
18984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18985: LD_OWVAR 2
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19003: LD_INT 9
19005: PPUSH
19006: LD_OWVAR 2
19010: PPUSH
19011: CALL_OW 343
// uc_side := 9 ;
19015: LD_ADDR_OWVAR 20
19019: PUSH
19020: LD_INT 9
19022: ST_TO_ADDR
// uc_nation := 2 ;
19023: LD_ADDR_OWVAR 21
19027: PUSH
19028: LD_INT 2
19030: ST_TO_ADDR
// hc_name := Dark Warrior ;
19031: LD_ADDR_OWVAR 26
19035: PUSH
19036: LD_STRING Dark Warrior
19038: ST_TO_ADDR
// hc_gallery :=  ;
19039: LD_ADDR_OWVAR 33
19043: PUSH
19044: LD_STRING 
19046: ST_TO_ADDR
// hc_noskilllimit := true ;
19047: LD_ADDR_OWVAR 76
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19055: LD_ADDR_OWVAR 31
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 30
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
// un := CreateHuman ;
19078: LD_ADDR_VAR 0 3
19082: PUSH
19083: CALL_OW 44
19087: ST_TO_ADDR
// hc_noskilllimit := false ;
19088: LD_ADDR_OWVAR 76
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19096: LD_VAR 0 3
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL_OW 51
// ToLua ( playRanger() ) ;
19108: LD_STRING playRanger()
19110: PPUSH
19111: CALL_OW 559
// p := 0 ;
19115: LD_ADDR_VAR 0 2
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19123: LD_INT 35
19125: PPUSH
19126: CALL_OW 67
// p := p + 1 ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_VAR 0 2
19139: PUSH
19140: LD_INT 1
19142: PLUS
19143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19144: LD_VAR 0 3
19148: PPUSH
19149: CALL_OW 256
19153: PUSH
19154: LD_INT 1000
19156: LESS
19157: IFFALSE 19171
// SetLives ( un , 1000 ) ;
19159: LD_VAR 0 3
19163: PPUSH
19164: LD_INT 1000
19166: PPUSH
19167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19171: LD_VAR 0 3
19175: PPUSH
19176: LD_INT 81
19178: PUSH
19179: LD_OWVAR 2
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 91
19190: PUSH
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: PPUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: CALL_OW 74
19222: PPUSH
19223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19227: LD_VAR 0 2
19231: PUSH
19232: LD_INT 80
19234: GREATER
19235: PUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL_OW 301
19245: OR
19246: IFFALSE 19123
// if un then
19248: LD_VAR 0 3
19252: IFFALSE 19263
// RemoveUnit ( un ) ;
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 64
// end ;
19263: PPOPN 3
19265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19266: LD_EXP 73
19270: IFFALSE 19386
19272: GO 19274
19274: DISABLE
19275: LD_INT 0
19277: PPUSH
19278: PPUSH
19279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: LD_INT 81
19287: PUSH
19288: LD_OWVAR 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 21
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19316: LD_STRING playComputer()
19318: PPUSH
19319: CALL_OW 559
// if not tmp then
19323: LD_VAR 0 2
19327: NOT
19328: IFFALSE 19332
// exit ;
19330: GO 19386
// for i in tmp do
19332: LD_ADDR_VAR 0 1
19336: PUSH
19337: LD_VAR 0 2
19341: PUSH
19342: FOR_IN
19343: IFFALSE 19384
// for j := 1 to 4 do
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: DOUBLE
19351: LD_INT 1
19353: DEC
19354: ST_TO_ADDR
19355: LD_INT 4
19357: PUSH
19358: FOR_TO
19359: IFFALSE 19380
// SetSkill ( i , j , 10 ) ;
19361: LD_VAR 0 1
19365: PPUSH
19366: LD_VAR 0 3
19370: PPUSH
19371: LD_INT 10
19373: PPUSH
19374: CALL_OW 237
19378: GO 19358
19380: POP
19381: POP
19382: GO 19342
19384: POP
19385: POP
// end ;
19386: PPOPN 3
19388: END
// every 0 0$1 trigger s30 do var i , tmp ;
19389: LD_EXP 74
19393: IFFALSE 19462
19395: GO 19397
19397: DISABLE
19398: LD_INT 0
19400: PPUSH
19401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19402: LD_ADDR_VAR 0 2
19406: PUSH
19407: LD_INT 22
19409: PUSH
19410: LD_OWVAR 2
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 69
19423: ST_TO_ADDR
// if not tmp then
19424: LD_VAR 0 2
19428: NOT
19429: IFFALSE 19433
// exit ;
19431: GO 19462
// for i in tmp do
19433: LD_ADDR_VAR 0 1
19437: PUSH
19438: LD_VAR 0 2
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19460
// SetLives ( i , 300 ) ;
19446: LD_VAR 0 1
19450: PPUSH
19451: LD_INT 300
19453: PPUSH
19454: CALL_OW 234
19458: GO 19443
19460: POP
19461: POP
// end ;
19462: PPOPN 2
19464: END
// every 0 0$1 trigger s60 do var i , tmp ;
19465: LD_EXP 75
19469: IFFALSE 19538
19471: GO 19473
19473: DISABLE
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19478: LD_ADDR_VAR 0 2
19482: PUSH
19483: LD_INT 22
19485: PUSH
19486: LD_OWVAR 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PPUSH
19495: CALL_OW 69
19499: ST_TO_ADDR
// if not tmp then
19500: LD_VAR 0 2
19504: NOT
19505: IFFALSE 19509
// exit ;
19507: GO 19538
// for i in tmp do
19509: LD_ADDR_VAR 0 1
19513: PUSH
19514: LD_VAR 0 2
19518: PUSH
19519: FOR_IN
19520: IFFALSE 19536
// SetLives ( i , 600 ) ;
19522: LD_VAR 0 1
19526: PPUSH
19527: LD_INT 600
19529: PPUSH
19530: CALL_OW 234
19534: GO 19519
19536: POP
19537: POP
// end ;
19538: PPOPN 2
19540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19541: LD_INT 0
19543: PPUSH
// case cmd of 301 :
19544: LD_VAR 0 1
19548: PUSH
19549: LD_INT 301
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19589
19557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19558: LD_VAR 0 6
19562: PPUSH
19563: LD_VAR 0 7
19567: PPUSH
19568: LD_VAR 0 8
19572: PPUSH
19573: LD_VAR 0 4
19577: PPUSH
19578: LD_VAR 0 5
19582: PPUSH
19583: CALL 20790 0 5
19587: GO 19710
19589: LD_INT 302
19591: DOUBLE
19592: EQUAL
19593: IFTRUE 19597
19595: GO 19634
19597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19598: LD_VAR 0 6
19602: PPUSH
19603: LD_VAR 0 7
19607: PPUSH
19608: LD_VAR 0 8
19612: PPUSH
19613: LD_VAR 0 9
19617: PPUSH
19618: LD_VAR 0 4
19622: PPUSH
19623: LD_VAR 0 5
19627: PPUSH
19628: CALL 20881 0 6
19632: GO 19710
19634: LD_INT 303
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19679
19642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19643: LD_VAR 0 6
19647: PPUSH
19648: LD_VAR 0 7
19652: PPUSH
19653: LD_VAR 0 8
19657: PPUSH
19658: LD_VAR 0 9
19662: PPUSH
19663: LD_VAR 0 4
19667: PPUSH
19668: LD_VAR 0 5
19672: PPUSH
19673: CALL 19715 0 6
19677: GO 19710
19679: LD_INT 304
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19709
19687: POP
// hHackTeleport ( unit , x , y ) ; end ;
19688: LD_VAR 0 2
19692: PPUSH
19693: LD_VAR 0 4
19697: PPUSH
19698: LD_VAR 0 5
19702: PPUSH
19703: CALL 21474 0 3
19707: GO 19710
19709: POP
// end ;
19710: LD_VAR 0 12
19714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19715: LD_INT 0
19717: PPUSH
19718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 1
19726: LESS
19727: PUSH
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 3
19735: GREATER
19736: OR
19737: PUSH
19738: LD_VAR 0 5
19742: PPUSH
19743: LD_VAR 0 6
19747: PPUSH
19748: CALL_OW 428
19752: OR
19753: IFFALSE 19757
// exit ;
19755: GO 20477
// uc_side := your_side ;
19757: LD_ADDR_OWVAR 20
19761: PUSH
19762: LD_OWVAR 2
19766: ST_TO_ADDR
// uc_nation := nation ;
19767: LD_ADDR_OWVAR 21
19771: PUSH
19772: LD_VAR 0 1
19776: ST_TO_ADDR
// bc_level = 1 ;
19777: LD_ADDR_OWVAR 43
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// case btype of 1 :
19785: LD_VAR 0 2
19789: PUSH
19790: LD_INT 1
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19809
19798: POP
// bc_type := b_depot ; 2 :
19799: LD_ADDR_OWVAR 42
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
19807: GO 20421
19809: LD_INT 2
19811: DOUBLE
19812: EQUAL
19813: IFTRUE 19817
19815: GO 19828
19817: POP
// bc_type := b_warehouse ; 3 :
19818: LD_ADDR_OWVAR 42
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
19826: GO 20421
19828: LD_INT 3
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19847
19836: POP
// bc_type := b_lab ; 4 .. 9 :
19837: LD_ADDR_OWVAR 42
19841: PUSH
19842: LD_INT 6
19844: ST_TO_ADDR
19845: GO 20421
19847: LD_INT 4
19849: DOUBLE
19850: GREATEREQUAL
19851: IFFALSE 19859
19853: LD_INT 9
19855: DOUBLE
19856: LESSEQUAL
19857: IFTRUE 19861
19859: GO 19913
19861: POP
// begin bc_type := b_lab_half ;
19862: LD_ADDR_OWVAR 42
19866: PUSH
19867: LD_INT 7
19869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19870: LD_ADDR_OWVAR 44
19874: PUSH
19875: LD_INT 10
19877: PUSH
19878: LD_INT 11
19880: PUSH
19881: LD_INT 12
19883: PUSH
19884: LD_INT 15
19886: PUSH
19887: LD_INT 14
19889: PUSH
19890: LD_INT 13
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: PUSH
19901: LD_VAR 0 2
19905: PUSH
19906: LD_INT 3
19908: MINUS
19909: ARRAY
19910: ST_TO_ADDR
// end ; 10 .. 13 :
19911: GO 20421
19913: LD_INT 10
19915: DOUBLE
19916: GREATEREQUAL
19917: IFFALSE 19925
19919: LD_INT 13
19921: DOUBLE
19922: LESSEQUAL
19923: IFTRUE 19927
19925: GO 20004
19927: POP
// begin bc_type := b_lab_full ;
19928: LD_ADDR_OWVAR 42
19932: PUSH
19933: LD_INT 8
19935: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19936: LD_ADDR_OWVAR 44
19940: PUSH
19941: LD_INT 10
19943: PUSH
19944: LD_INT 12
19946: PUSH
19947: LD_INT 14
19949: PUSH
19950: LD_INT 13
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: PUSH
19959: LD_VAR 0 2
19963: PUSH
19964: LD_INT 9
19966: MINUS
19967: ARRAY
19968: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19969: LD_ADDR_OWVAR 45
19973: PUSH
19974: LD_INT 11
19976: PUSH
19977: LD_INT 15
19979: PUSH
19980: LD_INT 12
19982: PUSH
19983: LD_INT 15
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_VAR 0 2
19996: PUSH
19997: LD_INT 9
19999: MINUS
20000: ARRAY
20001: ST_TO_ADDR
// end ; 14 :
20002: GO 20421
20004: LD_INT 14
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20023
20012: POP
// bc_type := b_workshop ; 15 :
20013: LD_ADDR_OWVAR 42
20017: PUSH
20018: LD_INT 2
20020: ST_TO_ADDR
20021: GO 20421
20023: LD_INT 15
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20042
20031: POP
// bc_type := b_factory ; 16 :
20032: LD_ADDR_OWVAR 42
20036: PUSH
20037: LD_INT 3
20039: ST_TO_ADDR
20040: GO 20421
20042: LD_INT 16
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20061
20050: POP
// bc_type := b_ext_gun ; 17 :
20051: LD_ADDR_OWVAR 42
20055: PUSH
20056: LD_INT 17
20058: ST_TO_ADDR
20059: GO 20421
20061: LD_INT 17
20063: DOUBLE
20064: EQUAL
20065: IFTRUE 20069
20067: GO 20097
20069: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20070: LD_ADDR_OWVAR 42
20074: PUSH
20075: LD_INT 19
20077: PUSH
20078: LD_INT 23
20080: PUSH
20081: LD_INT 19
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: PUSH
20089: LD_VAR 0 1
20093: ARRAY
20094: ST_TO_ADDR
20095: GO 20421
20097: LD_INT 18
20099: DOUBLE
20100: EQUAL
20101: IFTRUE 20105
20103: GO 20116
20105: POP
// bc_type := b_ext_radar ; 19 :
20106: LD_ADDR_OWVAR 42
20110: PUSH
20111: LD_INT 20
20113: ST_TO_ADDR
20114: GO 20421
20116: LD_INT 19
20118: DOUBLE
20119: EQUAL
20120: IFTRUE 20124
20122: GO 20135
20124: POP
// bc_type := b_ext_radio ; 20 :
20125: LD_ADDR_OWVAR 42
20129: PUSH
20130: LD_INT 22
20132: ST_TO_ADDR
20133: GO 20421
20135: LD_INT 20
20137: DOUBLE
20138: EQUAL
20139: IFTRUE 20143
20141: GO 20154
20143: POP
// bc_type := b_ext_siberium ; 21 :
20144: LD_ADDR_OWVAR 42
20148: PUSH
20149: LD_INT 21
20151: ST_TO_ADDR
20152: GO 20421
20154: LD_INT 21
20156: DOUBLE
20157: EQUAL
20158: IFTRUE 20162
20160: GO 20173
20162: POP
// bc_type := b_ext_computer ; 22 :
20163: LD_ADDR_OWVAR 42
20167: PUSH
20168: LD_INT 24
20170: ST_TO_ADDR
20171: GO 20421
20173: LD_INT 22
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20192
20181: POP
// bc_type := b_ext_track ; 23 :
20182: LD_ADDR_OWVAR 42
20186: PUSH
20187: LD_INT 16
20189: ST_TO_ADDR
20190: GO 20421
20192: LD_INT 23
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20211
20200: POP
// bc_type := b_ext_laser ; 24 :
20201: LD_ADDR_OWVAR 42
20205: PUSH
20206: LD_INT 25
20208: ST_TO_ADDR
20209: GO 20421
20211: LD_INT 24
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20230
20219: POP
// bc_type := b_control_tower ; 25 :
20220: LD_ADDR_OWVAR 42
20224: PUSH
20225: LD_INT 36
20227: ST_TO_ADDR
20228: GO 20421
20230: LD_INT 25
20232: DOUBLE
20233: EQUAL
20234: IFTRUE 20238
20236: GO 20249
20238: POP
// bc_type := b_breastwork ; 26 :
20239: LD_ADDR_OWVAR 42
20243: PUSH
20244: LD_INT 31
20246: ST_TO_ADDR
20247: GO 20421
20249: LD_INT 26
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20268
20257: POP
// bc_type := b_bunker ; 27 :
20258: LD_ADDR_OWVAR 42
20262: PUSH
20263: LD_INT 32
20265: ST_TO_ADDR
20266: GO 20421
20268: LD_INT 27
20270: DOUBLE
20271: EQUAL
20272: IFTRUE 20276
20274: GO 20287
20276: POP
// bc_type := b_turret ; 28 :
20277: LD_ADDR_OWVAR 42
20281: PUSH
20282: LD_INT 33
20284: ST_TO_ADDR
20285: GO 20421
20287: LD_INT 28
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20306
20295: POP
// bc_type := b_armoury ; 29 :
20296: LD_ADDR_OWVAR 42
20300: PUSH
20301: LD_INT 4
20303: ST_TO_ADDR
20304: GO 20421
20306: LD_INT 29
20308: DOUBLE
20309: EQUAL
20310: IFTRUE 20314
20312: GO 20325
20314: POP
// bc_type := b_barracks ; 30 :
20315: LD_ADDR_OWVAR 42
20319: PUSH
20320: LD_INT 5
20322: ST_TO_ADDR
20323: GO 20421
20325: LD_INT 30
20327: DOUBLE
20328: EQUAL
20329: IFTRUE 20333
20331: GO 20344
20333: POP
// bc_type := b_solar_power ; 31 :
20334: LD_ADDR_OWVAR 42
20338: PUSH
20339: LD_INT 27
20341: ST_TO_ADDR
20342: GO 20421
20344: LD_INT 31
20346: DOUBLE
20347: EQUAL
20348: IFTRUE 20352
20350: GO 20363
20352: POP
// bc_type := b_oil_power ; 32 :
20353: LD_ADDR_OWVAR 42
20357: PUSH
20358: LD_INT 26
20360: ST_TO_ADDR
20361: GO 20421
20363: LD_INT 32
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20382
20371: POP
// bc_type := b_siberite_power ; 33 :
20372: LD_ADDR_OWVAR 42
20376: PUSH
20377: LD_INT 28
20379: ST_TO_ADDR
20380: GO 20421
20382: LD_INT 33
20384: DOUBLE
20385: EQUAL
20386: IFTRUE 20390
20388: GO 20401
20390: POP
// bc_type := b_oil_mine ; 34 :
20391: LD_ADDR_OWVAR 42
20395: PUSH
20396: LD_INT 29
20398: ST_TO_ADDR
20399: GO 20421
20401: LD_INT 34
20403: DOUBLE
20404: EQUAL
20405: IFTRUE 20409
20407: GO 20420
20409: POP
// bc_type := b_siberite_mine ; end ;
20410: LD_ADDR_OWVAR 42
20414: PUSH
20415: LD_INT 30
20417: ST_TO_ADDR
20418: GO 20421
20420: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20421: LD_ADDR_VAR 0 8
20425: PUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: LD_VAR 0 6
20435: PPUSH
20436: LD_VAR 0 3
20440: PPUSH
20441: CALL_OW 47
20445: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20446: LD_OWVAR 42
20450: PUSH
20451: LD_INT 32
20453: PUSH
20454: LD_INT 33
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: IN
20461: IFFALSE 20477
// PlaceWeaponTurret ( b , weapon ) ;
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 4
20472: PPUSH
20473: CALL_OW 431
// end ;
20477: LD_VAR 0 7
20481: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20482: LD_INT 0
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20488: LD_ADDR_VAR 0 4
20492: PUSH
20493: LD_INT 22
20495: PUSH
20496: LD_OWVAR 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 30
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 30
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 69
20541: ST_TO_ADDR
// if not tmp then
20542: LD_VAR 0 4
20546: NOT
20547: IFFALSE 20551
// exit ;
20549: GO 20610
// for i in tmp do
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_VAR 0 4
20560: PUSH
20561: FOR_IN
20562: IFFALSE 20608
// for j = 1 to 3 do
20564: LD_ADDR_VAR 0 3
20568: PUSH
20569: DOUBLE
20570: LD_INT 1
20572: DEC
20573: ST_TO_ADDR
20574: LD_INT 3
20576: PUSH
20577: FOR_TO
20578: IFFALSE 20604
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20580: LD_VAR 0 2
20584: PPUSH
20585: CALL_OW 274
20589: PPUSH
20590: LD_VAR 0 3
20594: PPUSH
20595: LD_INT 99999
20597: PPUSH
20598: CALL_OW 277
20602: GO 20577
20604: POP
20605: POP
20606: GO 20561
20608: POP
20609: POP
// end ;
20610: LD_VAR 0 1
20614: RET
// export function hHackSetLevel10 ; var i , j ; begin
20615: LD_INT 0
20617: PPUSH
20618: PPUSH
20619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20620: LD_ADDR_VAR 0 2
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PPUSH
20635: CALL_OW 69
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20693
// if IsSelected ( i ) then
20643: LD_VAR 0 2
20647: PPUSH
20648: CALL_OW 306
20652: IFFALSE 20691
// begin for j := 1 to 4 do
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: DOUBLE
20660: LD_INT 1
20662: DEC
20663: ST_TO_ADDR
20664: LD_INT 4
20666: PUSH
20667: FOR_TO
20668: IFFALSE 20689
// SetSkill ( i , j , 10 ) ;
20670: LD_VAR 0 2
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: LD_INT 10
20682: PPUSH
20683: CALL_OW 237
20687: GO 20667
20689: POP
20690: POP
// end ;
20691: GO 20640
20693: POP
20694: POP
// end ;
20695: LD_VAR 0 1
20699: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_OWVAR 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 21
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: PUSH
20741: FOR_IN
20742: IFFALSE 20783
// begin for j := 1 to 4 do
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: DOUBLE
20750: LD_INT 1
20752: DEC
20753: ST_TO_ADDR
20754: LD_INT 4
20756: PUSH
20757: FOR_TO
20758: IFFALSE 20779
// SetSkill ( i , j , 10 ) ;
20760: LD_VAR 0 2
20764: PPUSH
20765: LD_VAR 0 3
20769: PPUSH
20770: LD_INT 10
20772: PPUSH
20773: CALL_OW 237
20777: GO 20757
20779: POP
20780: POP
// end ;
20781: GO 20741
20783: POP
20784: POP
// end ;
20785: LD_VAR 0 1
20789: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20790: LD_INT 0
20792: PPUSH
// uc_side := your_side ;
20793: LD_ADDR_OWVAR 20
20797: PUSH
20798: LD_OWVAR 2
20802: ST_TO_ADDR
// uc_nation := nation ;
20803: LD_ADDR_OWVAR 21
20807: PUSH
20808: LD_VAR 0 1
20812: ST_TO_ADDR
// InitHc ;
20813: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20817: LD_INT 0
20819: PPUSH
20820: LD_VAR 0 2
20824: PPUSH
20825: LD_VAR 0 3
20829: PPUSH
20830: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20834: LD_VAR 0 4
20838: PPUSH
20839: LD_VAR 0 5
20843: PPUSH
20844: CALL_OW 428
20848: PUSH
20849: LD_INT 0
20851: EQUAL
20852: IFFALSE 20876
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20854: CALL_OW 44
20858: PPUSH
20859: LD_VAR 0 4
20863: PPUSH
20864: LD_VAR 0 5
20868: PPUSH
20869: LD_INT 1
20871: PPUSH
20872: CALL_OW 48
// end ;
20876: LD_VAR 0 6
20880: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
// uc_side := your_side ;
20885: LD_ADDR_OWVAR 20
20889: PUSH
20890: LD_OWVAR 2
20894: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20895: LD_VAR 0 1
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 3
20908: PUSH
20909: LD_INT 4
20911: PUSH
20912: LD_INT 5
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: IN
20922: IFFALSE 20934
// uc_nation := nation_american else
20924: LD_ADDR_OWVAR 21
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
20932: GO 20977
// if chassis in [ 11 , 12 , 13 , 14 ] then
20934: LD_VAR 0 1
20938: PUSH
20939: LD_INT 11
20941: PUSH
20942: LD_INT 12
20944: PUSH
20945: LD_INT 13
20947: PUSH
20948: LD_INT 14
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: IN
20957: IFFALSE 20969
// uc_nation := nation_arabian else
20959: LD_ADDR_OWVAR 21
20963: PUSH
20964: LD_INT 2
20966: ST_TO_ADDR
20967: GO 20977
// uc_nation := nation_russian ;
20969: LD_ADDR_OWVAR 21
20973: PUSH
20974: LD_INT 3
20976: ST_TO_ADDR
// vc_chassis := chassis ;
20977: LD_ADDR_OWVAR 37
20981: PUSH
20982: LD_VAR 0 1
20986: ST_TO_ADDR
// vc_engine := engine ;
20987: LD_ADDR_OWVAR 39
20991: PUSH
20992: LD_VAR 0 2
20996: ST_TO_ADDR
// vc_control := control ;
20997: LD_ADDR_OWVAR 38
21001: PUSH
21002: LD_VAR 0 3
21006: ST_TO_ADDR
// vc_weapon := weapon ;
21007: LD_ADDR_OWVAR 40
21011: PUSH
21012: LD_VAR 0 4
21016: ST_TO_ADDR
// un := CreateVehicle ;
21017: LD_ADDR_VAR 0 8
21021: PUSH
21022: CALL_OW 45
21026: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21027: LD_VAR 0 8
21031: PPUSH
21032: LD_INT 0
21034: PPUSH
21035: LD_INT 5
21037: PPUSH
21038: CALL_OW 12
21042: PPUSH
21043: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21047: LD_VAR 0 8
21051: PPUSH
21052: LD_VAR 0 5
21056: PPUSH
21057: LD_VAR 0 6
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 48
// end ;
21069: LD_VAR 0 7
21073: RET
// export hInvincible ; every 1 do
21074: GO 21076
21076: DISABLE
// hInvincible := [ ] ;
21077: LD_ADDR_EXP 76
21081: PUSH
21082: EMPTY
21083: ST_TO_ADDR
21084: END
// every 10 do var i ;
21085: GO 21087
21087: DISABLE
21088: LD_INT 0
21090: PPUSH
// begin enable ;
21091: ENABLE
// if not hInvincible then
21092: LD_EXP 76
21096: NOT
21097: IFFALSE 21101
// exit ;
21099: GO 21145
// for i in hInvincible do
21101: LD_ADDR_VAR 0 1
21105: PUSH
21106: LD_EXP 76
21110: PUSH
21111: FOR_IN
21112: IFFALSE 21143
// if GetLives ( i ) < 1000 then
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 256
21123: PUSH
21124: LD_INT 1000
21126: LESS
21127: IFFALSE 21141
// SetLives ( i , 1000 ) ;
21129: LD_VAR 0 1
21133: PPUSH
21134: LD_INT 1000
21136: PPUSH
21137: CALL_OW 234
21141: GO 21111
21143: POP
21144: POP
// end ;
21145: PPOPN 1
21147: END
// export function hHackInvincible ; var i ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 21
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 21
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 69
21189: PUSH
21190: FOR_IN
21191: IFFALSE 21252
// if IsSelected ( i ) then
21193: LD_VAR 0 2
21197: PPUSH
21198: CALL_OW 306
21202: IFFALSE 21250
// begin if i in hInvincible then
21204: LD_VAR 0 2
21208: PUSH
21209: LD_EXP 76
21213: IN
21214: IFFALSE 21234
// hInvincible := hInvincible diff i else
21216: LD_ADDR_EXP 76
21220: PUSH
21221: LD_EXP 76
21225: PUSH
21226: LD_VAR 0 2
21230: DIFF
21231: ST_TO_ADDR
21232: GO 21250
// hInvincible := hInvincible union i ;
21234: LD_ADDR_EXP 76
21238: PUSH
21239: LD_EXP 76
21243: PUSH
21244: LD_VAR 0 2
21248: UNION
21249: ST_TO_ADDR
// end ;
21250: GO 21190
21252: POP
21253: POP
// end ;
21254: LD_VAR 0 1
21258: RET
// export function hHackInvisible ; var i , j ; begin
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
21263: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21264: LD_ADDR_VAR 0 2
21268: PUSH
21269: LD_INT 21
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PPUSH
21279: CALL_OW 69
21283: PUSH
21284: FOR_IN
21285: IFFALSE 21309
// if IsSelected ( i ) then
21287: LD_VAR 0 2
21291: PPUSH
21292: CALL_OW 306
21296: IFFALSE 21307
// ComForceInvisible ( i ) ;
21298: LD_VAR 0 2
21302: PPUSH
21303: CALL_OW 496
21307: GO 21284
21309: POP
21310: POP
// end ;
21311: LD_VAR 0 1
21315: RET
// export function hHackChangeYourSide ; begin
21316: LD_INT 0
21318: PPUSH
// if your_side = 8 then
21319: LD_OWVAR 2
21323: PUSH
21324: LD_INT 8
21326: EQUAL
21327: IFFALSE 21339
// your_side := 0 else
21329: LD_ADDR_OWVAR 2
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
21337: GO 21353
// your_side := your_side + 1 ;
21339: LD_ADDR_OWVAR 2
21343: PUSH
21344: LD_OWVAR 2
21348: PUSH
21349: LD_INT 1
21351: PLUS
21352: ST_TO_ADDR
// end ;
21353: LD_VAR 0 1
21357: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21358: LD_INT 0
21360: PPUSH
21361: PPUSH
21362: PPUSH
// for i in all_units do
21363: LD_ADDR_VAR 0 2
21367: PUSH
21368: LD_OWVAR 3
21372: PUSH
21373: FOR_IN
21374: IFFALSE 21452
// if IsSelected ( i ) then
21376: LD_VAR 0 2
21380: PPUSH
21381: CALL_OW 306
21385: IFFALSE 21450
// begin j := GetSide ( i ) ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_VAR 0 2
21396: PPUSH
21397: CALL_OW 255
21401: ST_TO_ADDR
// if j = 8 then
21402: LD_VAR 0 3
21406: PUSH
21407: LD_INT 8
21409: EQUAL
21410: IFFALSE 21422
// j := 0 else
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_INT 0
21419: ST_TO_ADDR
21420: GO 21436
// j := j + 1 ;
21422: LD_ADDR_VAR 0 3
21426: PUSH
21427: LD_VAR 0 3
21431: PUSH
21432: LD_INT 1
21434: PLUS
21435: ST_TO_ADDR
// SetSide ( i , j ) ;
21436: LD_VAR 0 2
21440: PPUSH
21441: LD_VAR 0 3
21445: PPUSH
21446: CALL_OW 235
// end ;
21450: GO 21373
21452: POP
21453: POP
// end ;
21454: LD_VAR 0 1
21458: RET
// export function hHackFog ; begin
21459: LD_INT 0
21461: PPUSH
// FogOff ( true ) ;
21462: LD_INT 1
21464: PPUSH
21465: CALL_OW 344
// end ;
21469: LD_VAR 0 1
21473: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21474: LD_INT 0
21476: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21477: LD_VAR 0 1
21481: PPUSH
21482: LD_VAR 0 2
21486: PPUSH
21487: LD_VAR 0 3
21491: PPUSH
21492: LD_INT 1
21494: PPUSH
21495: LD_INT 1
21497: PPUSH
21498: CALL_OW 483
// CenterOnXY ( x , y ) ;
21502: LD_VAR 0 2
21506: PPUSH
21507: LD_VAR 0 3
21511: PPUSH
21512: CALL_OW 84
// end ; end_of_file
21516: LD_VAR 0 4
21520: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
// if exist_mode then
21525: LD_VAR 0 2
21529: IFFALSE 21554
// unit := CreateCharacter ( prefix & ident ) else
21531: LD_ADDR_VAR 0 5
21535: PUSH
21536: LD_VAR 0 3
21540: PUSH
21541: LD_VAR 0 1
21545: STR
21546: PPUSH
21547: CALL_OW 34
21551: ST_TO_ADDR
21552: GO 21569
// unit := NewCharacter ( ident ) ;
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 25
21568: ST_TO_ADDR
// result := unit ;
21569: LD_ADDR_VAR 0 4
21573: PUSH
21574: LD_VAR 0 5
21578: ST_TO_ADDR
// end ;
21579: LD_VAR 0 4
21583: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21584: LD_INT 0
21586: PPUSH
21587: PPUSH
// if not side or not nation then
21588: LD_VAR 0 1
21592: NOT
21593: PUSH
21594: LD_VAR 0 2
21598: NOT
21599: OR
21600: IFFALSE 21604
// exit ;
21602: GO 22372
// case nation of nation_american :
21604: LD_VAR 0 2
21608: PUSH
21609: LD_INT 1
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21831
21617: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21618: LD_ADDR_VAR 0 4
21622: PUSH
21623: LD_INT 35
21625: PUSH
21626: LD_INT 45
21628: PUSH
21629: LD_INT 46
21631: PUSH
21632: LD_INT 47
21634: PUSH
21635: LD_INT 82
21637: PUSH
21638: LD_INT 83
21640: PUSH
21641: LD_INT 84
21643: PUSH
21644: LD_INT 85
21646: PUSH
21647: LD_INT 86
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 6
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 7
21667: PUSH
21668: LD_INT 12
21670: PUSH
21671: LD_INT 13
21673: PUSH
21674: LD_INT 10
21676: PUSH
21677: LD_INT 14
21679: PUSH
21680: LD_INT 20
21682: PUSH
21683: LD_INT 21
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 32
21694: PUSH
21695: LD_INT 27
21697: PUSH
21698: LD_INT 36
21700: PUSH
21701: LD_INT 69
21703: PUSH
21704: LD_INT 39
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 40
21712: PUSH
21713: LD_INT 48
21715: PUSH
21716: LD_INT 49
21718: PUSH
21719: LD_INT 50
21721: PUSH
21722: LD_INT 51
21724: PUSH
21725: LD_INT 52
21727: PUSH
21728: LD_INT 53
21730: PUSH
21731: LD_INT 54
21733: PUSH
21734: LD_INT 55
21736: PUSH
21737: LD_INT 56
21739: PUSH
21740: LD_INT 57
21742: PUSH
21743: LD_INT 58
21745: PUSH
21746: LD_INT 59
21748: PUSH
21749: LD_INT 60
21751: PUSH
21752: LD_INT 61
21754: PUSH
21755: LD_INT 62
21757: PUSH
21758: LD_INT 80
21760: PUSH
21761: LD_INT 82
21763: PUSH
21764: LD_INT 83
21766: PUSH
21767: LD_INT 84
21769: PUSH
21770: LD_INT 85
21772: PUSH
21773: LD_INT 86
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: ST_TO_ADDR
21829: GO 22296
21831: LD_INT 2
21833: DOUBLE
21834: EQUAL
21835: IFTRUE 21839
21837: GO 22065
21839: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21840: LD_ADDR_VAR 0 4
21844: PUSH
21845: LD_INT 35
21847: PUSH
21848: LD_INT 45
21850: PUSH
21851: LD_INT 46
21853: PUSH
21854: LD_INT 47
21856: PUSH
21857: LD_INT 82
21859: PUSH
21860: LD_INT 83
21862: PUSH
21863: LD_INT 84
21865: PUSH
21866: LD_INT 85
21868: PUSH
21869: LD_INT 87
21871: PUSH
21872: LD_INT 70
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 3
21883: PUSH
21884: LD_INT 4
21886: PUSH
21887: LD_INT 5
21889: PUSH
21890: LD_INT 6
21892: PUSH
21893: LD_INT 15
21895: PUSH
21896: LD_INT 18
21898: PUSH
21899: LD_INT 7
21901: PUSH
21902: LD_INT 17
21904: PUSH
21905: LD_INT 8
21907: PUSH
21908: LD_INT 20
21910: PUSH
21911: LD_INT 21
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_INT 72
21919: PUSH
21920: LD_INT 26
21922: PUSH
21923: LD_INT 69
21925: PUSH
21926: LD_INT 39
21928: PUSH
21929: LD_INT 40
21931: PUSH
21932: LD_INT 41
21934: PUSH
21935: LD_INT 42
21937: PUSH
21938: LD_INT 43
21940: PUSH
21941: LD_INT 48
21943: PUSH
21944: LD_INT 49
21946: PUSH
21947: LD_INT 50
21949: PUSH
21950: LD_INT 51
21952: PUSH
21953: LD_INT 52
21955: PUSH
21956: LD_INT 53
21958: PUSH
21959: LD_INT 54
21961: PUSH
21962: LD_INT 55
21964: PUSH
21965: LD_INT 56
21967: PUSH
21968: LD_INT 60
21970: PUSH
21971: LD_INT 61
21973: PUSH
21974: LD_INT 62
21976: PUSH
21977: LD_INT 66
21979: PUSH
21980: LD_INT 67
21982: PUSH
21983: LD_INT 68
21985: PUSH
21986: LD_INT 81
21988: PUSH
21989: LD_INT 82
21991: PUSH
21992: LD_INT 83
21994: PUSH
21995: LD_INT 84
21997: PUSH
21998: LD_INT 85
22000: PUSH
22001: LD_INT 87
22003: PUSH
22004: LD_INT 88
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
22063: GO 22296
22065: LD_INT 3
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22295
22073: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22074: LD_ADDR_VAR 0 4
22078: PUSH
22079: LD_INT 46
22081: PUSH
22082: LD_INT 47
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 82
22093: PUSH
22094: LD_INT 83
22096: PUSH
22097: LD_INT 84
22099: PUSH
22100: LD_INT 85
22102: PUSH
22103: LD_INT 86
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 9
22111: PUSH
22112: LD_INT 20
22114: PUSH
22115: LD_INT 19
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 24
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 25
22129: PUSH
22130: LD_INT 28
22132: PUSH
22133: LD_INT 29
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 31
22141: PUSH
22142: LD_INT 37
22144: PUSH
22145: LD_INT 38
22147: PUSH
22148: LD_INT 32
22150: PUSH
22151: LD_INT 27
22153: PUSH
22154: LD_INT 33
22156: PUSH
22157: LD_INT 69
22159: PUSH
22160: LD_INT 39
22162: PUSH
22163: LD_INT 34
22165: PUSH
22166: LD_INT 40
22168: PUSH
22169: LD_INT 71
22171: PUSH
22172: LD_INT 23
22174: PUSH
22175: LD_INT 44
22177: PUSH
22178: LD_INT 48
22180: PUSH
22181: LD_INT 49
22183: PUSH
22184: LD_INT 50
22186: PUSH
22187: LD_INT 51
22189: PUSH
22190: LD_INT 52
22192: PUSH
22193: LD_INT 53
22195: PUSH
22196: LD_INT 54
22198: PUSH
22199: LD_INT 55
22201: PUSH
22202: LD_INT 56
22204: PUSH
22205: LD_INT 57
22207: PUSH
22208: LD_INT 58
22210: PUSH
22211: LD_INT 59
22213: PUSH
22214: LD_INT 63
22216: PUSH
22217: LD_INT 64
22219: PUSH
22220: LD_INT 65
22222: PUSH
22223: LD_INT 82
22225: PUSH
22226: LD_INT 83
22228: PUSH
22229: LD_INT 84
22231: PUSH
22232: LD_INT 85
22234: PUSH
22235: LD_INT 86
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
22293: GO 22296
22295: POP
// if state > - 1 and state < 3 then
22296: LD_VAR 0 3
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: GREATER
22305: PUSH
22306: LD_VAR 0 3
22310: PUSH
22311: LD_INT 3
22313: LESS
22314: AND
22315: IFFALSE 22372
// for i in result do
22317: LD_ADDR_VAR 0 5
22321: PUSH
22322: LD_VAR 0 4
22326: PUSH
22327: FOR_IN
22328: IFFALSE 22370
// if GetTech ( i , side ) <> state then
22330: LD_VAR 0 5
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 321
22344: PUSH
22345: LD_VAR 0 3
22349: NONEQUAL
22350: IFFALSE 22368
// result := result diff i ;
22352: LD_ADDR_VAR 0 4
22356: PUSH
22357: LD_VAR 0 4
22361: PUSH
22362: LD_VAR 0 5
22366: DIFF
22367: ST_TO_ADDR
22368: GO 22327
22370: POP
22371: POP
// end ;
22372: LD_VAR 0 4
22376: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22377: LD_INT 0
22379: PPUSH
22380: PPUSH
22381: PPUSH
// result := true ;
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: LD_INT 1
22389: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22390: LD_ADDR_VAR 0 5
22394: PUSH
22395: LD_VAR 0 2
22399: PPUSH
22400: CALL_OW 480
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 5
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22463
// for i in tmp do
22414: LD_ADDR_VAR 0 4
22418: PUSH
22419: LD_VAR 0 5
22423: PUSH
22424: FOR_IN
22425: IFFALSE 22461
// if GetTech ( i , side ) <> state_researched then
22427: LD_VAR 0 4
22431: PPUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 321
22441: PUSH
22442: LD_INT 2
22444: NONEQUAL
22445: IFFALSE 22459
// begin result := false ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_INT 0
22454: ST_TO_ADDR
// exit ;
22455: POP
22456: POP
22457: GO 22463
// end ;
22459: GO 22424
22461: POP
22462: POP
// end ;
22463: LD_VAR 0 3
22467: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22468: LD_INT 0
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22483: LD_VAR 0 1
22487: NOT
22488: PUSH
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 257
22498: PUSH
22499: LD_INT 9
22501: NONEQUAL
22502: OR
22503: IFFALSE 22507
// exit ;
22505: GO 23080
// side := GetSide ( unit ) ;
22507: LD_ADDR_VAR 0 9
22511: PUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 255
22521: ST_TO_ADDR
// tech_space := tech_spacanom ;
22522: LD_ADDR_VAR 0 12
22526: PUSH
22527: LD_INT 29
22529: ST_TO_ADDR
// tech_time := tech_taurad ;
22530: LD_ADDR_VAR 0 13
22534: PUSH
22535: LD_INT 28
22537: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22538: LD_ADDR_VAR 0 11
22542: PUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL_OW 310
22552: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22553: LD_VAR 0 11
22557: PPUSH
22558: CALL_OW 247
22562: PUSH
22563: LD_INT 2
22565: EQUAL
22566: IFFALSE 22570
// exit ;
22568: GO 23080
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: LD_INT 81
22577: PUSH
22578: LD_VAR 0 9
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: LD_INT 21
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: ST_TO_ADDR
// if not tmp then
22613: LD_VAR 0 8
22617: NOT
22618: IFFALSE 22622
// exit ;
22620: GO 23080
// if in_unit then
22622: LD_VAR 0 11
22626: IFFALSE 22650
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22628: LD_ADDR_VAR 0 10
22632: PUSH
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 11
22642: PPUSH
22643: CALL_OW 74
22647: ST_TO_ADDR
22648: GO 22670
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22650: LD_ADDR_VAR 0 10
22654: PUSH
22655: LD_VAR 0 8
22659: PPUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 74
22669: ST_TO_ADDR
// if not enemy then
22670: LD_VAR 0 10
22674: NOT
22675: IFFALSE 22679
// exit ;
22677: GO 23080
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22679: LD_VAR 0 11
22683: PUSH
22684: LD_VAR 0 11
22688: PPUSH
22689: LD_VAR 0 10
22693: PPUSH
22694: CALL_OW 296
22698: PUSH
22699: LD_INT 13
22701: GREATER
22702: AND
22703: PUSH
22704: LD_VAR 0 1
22708: PPUSH
22709: LD_VAR 0 10
22713: PPUSH
22714: CALL_OW 296
22718: PUSH
22719: LD_INT 12
22721: GREATER
22722: OR
22723: IFFALSE 22727
// exit ;
22725: GO 23080
// missile := [ 1 ] ;
22727: LD_ADDR_VAR 0 14
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22738: LD_VAR 0 9
22742: PPUSH
22743: LD_VAR 0 12
22747: PPUSH
22748: CALL_OW 325
22752: IFFALSE 22781
// missile := Insert ( missile , missile + 1 , 2 ) ;
22754: LD_ADDR_VAR 0 14
22758: PUSH
22759: LD_VAR 0 14
22763: PPUSH
22764: LD_VAR 0 14
22768: PUSH
22769: LD_INT 1
22771: PLUS
22772: PPUSH
22773: LD_INT 2
22775: PPUSH
22776: CALL_OW 2
22780: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22781: LD_VAR 0 9
22785: PPUSH
22786: LD_VAR 0 13
22790: PPUSH
22791: CALL_OW 325
22795: PUSH
22796: LD_VAR 0 10
22800: PPUSH
22801: CALL_OW 255
22805: PPUSH
22806: LD_VAR 0 13
22810: PPUSH
22811: CALL_OW 325
22815: NOT
22816: AND
22817: IFFALSE 22846
// missile := Insert ( missile , missile + 1 , 3 ) ;
22819: LD_ADDR_VAR 0 14
22823: PUSH
22824: LD_VAR 0 14
22828: PPUSH
22829: LD_VAR 0 14
22833: PUSH
22834: LD_INT 1
22836: PLUS
22837: PPUSH
22838: LD_INT 3
22840: PPUSH
22841: CALL_OW 2
22845: ST_TO_ADDR
// if missile < 2 then
22846: LD_VAR 0 14
22850: PUSH
22851: LD_INT 2
22853: LESS
22854: IFFALSE 22858
// exit ;
22856: GO 23080
// x := GetX ( enemy ) ;
22858: LD_ADDR_VAR 0 4
22862: PUSH
22863: LD_VAR 0 10
22867: PPUSH
22868: CALL_OW 250
22872: ST_TO_ADDR
// y := GetY ( enemy ) ;
22873: LD_ADDR_VAR 0 5
22877: PUSH
22878: LD_VAR 0 10
22882: PPUSH
22883: CALL_OW 251
22887: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22888: LD_ADDR_VAR 0 6
22892: PUSH
22893: LD_VAR 0 4
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 12
22909: PLUS
22910: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22911: LD_ADDR_VAR 0 7
22915: PUSH
22916: LD_VAR 0 5
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: CALL_OW 12
22932: PLUS
22933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22934: LD_VAR 0 6
22938: PPUSH
22939: LD_VAR 0 7
22943: PPUSH
22944: CALL_OW 488
22948: NOT
22949: IFFALSE 22971
// begin _x := x ;
22951: LD_ADDR_VAR 0 6
22955: PUSH
22956: LD_VAR 0 4
22960: ST_TO_ADDR
// _y := y ;
22961: LD_ADDR_VAR 0 7
22965: PUSH
22966: LD_VAR 0 5
22970: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_VAR 0 14
22983: PPUSH
22984: CALL_OW 12
22988: ST_TO_ADDR
// case i of 1 :
22989: LD_VAR 0 3
22993: PUSH
22994: LD_INT 1
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23019
23002: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23003: LD_VAR 0 1
23007: PPUSH
23008: LD_VAR 0 10
23012: PPUSH
23013: CALL_OW 115
23017: GO 23080
23019: LD_INT 2
23021: DOUBLE
23022: EQUAL
23023: IFTRUE 23027
23025: GO 23049
23027: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23028: LD_VAR 0 1
23032: PPUSH
23033: LD_VAR 0 6
23037: PPUSH
23038: LD_VAR 0 7
23042: PPUSH
23043: CALL_OW 153
23047: GO 23080
23049: LD_INT 3
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23079
23057: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23058: LD_VAR 0 1
23062: PPUSH
23063: LD_VAR 0 6
23067: PPUSH
23068: LD_VAR 0 7
23072: PPUSH
23073: CALL_OW 154
23077: GO 23080
23079: POP
// end ;
23080: LD_VAR 0 2
23084: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23085: LD_INT 0
23087: PPUSH
23088: PPUSH
23089: PPUSH
23090: PPUSH
23091: PPUSH
23092: PPUSH
// if not unit or not building then
23093: LD_VAR 0 1
23097: NOT
23098: PUSH
23099: LD_VAR 0 2
23103: NOT
23104: OR
23105: IFFALSE 23109
// exit ;
23107: GO 23267
// x := GetX ( building ) ;
23109: LD_ADDR_VAR 0 5
23113: PUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: CALL_OW 250
23123: ST_TO_ADDR
// y := GetY ( building ) ;
23124: LD_ADDR_VAR 0 6
23128: PUSH
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 251
23138: ST_TO_ADDR
// for i = 0 to 5 do
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: DOUBLE
23145: LD_INT 0
23147: DEC
23148: ST_TO_ADDR
23149: LD_INT 5
23151: PUSH
23152: FOR_TO
23153: IFFALSE 23265
// begin _x := ShiftX ( x , i , 3 ) ;
23155: LD_ADDR_VAR 0 7
23159: PUSH
23160: LD_VAR 0 5
23164: PPUSH
23165: LD_VAR 0 4
23169: PPUSH
23170: LD_INT 3
23172: PPUSH
23173: CALL_OW 272
23177: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23178: LD_ADDR_VAR 0 8
23182: PUSH
23183: LD_VAR 0 6
23187: PPUSH
23188: LD_VAR 0 4
23192: PPUSH
23193: LD_INT 3
23195: PPUSH
23196: CALL_OW 273
23200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23201: LD_VAR 0 7
23205: PPUSH
23206: LD_VAR 0 8
23210: PPUSH
23211: CALL_OW 488
23215: NOT
23216: IFFALSE 23220
// continue ;
23218: GO 23152
// if HexInfo ( _x , _y ) = 0 then
23220: LD_VAR 0 7
23224: PPUSH
23225: LD_VAR 0 8
23229: PPUSH
23230: CALL_OW 428
23234: PUSH
23235: LD_INT 0
23237: EQUAL
23238: IFFALSE 23263
// begin ComMoveXY ( unit , _x , _y ) ;
23240: LD_VAR 0 1
23244: PPUSH
23245: LD_VAR 0 7
23249: PPUSH
23250: LD_VAR 0 8
23254: PPUSH
23255: CALL_OW 111
// exit ;
23259: POP
23260: POP
23261: GO 23267
// end ; end ;
23263: GO 23152
23265: POP
23266: POP
// end ;
23267: LD_VAR 0 3
23271: RET
// export function ScanBase ( side , base_area ) ; begin
23272: LD_INT 0
23274: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23275: LD_ADDR_VAR 0 3
23279: PUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: LD_INT 81
23287: PUSH
23288: LD_VAR 0 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 70
23301: ST_TO_ADDR
// end ;
23302: LD_VAR 0 3
23306: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23307: LD_INT 0
23309: PPUSH
23310: PPUSH
23311: PPUSH
23312: PPUSH
// result := false ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 0
23320: ST_TO_ADDR
// side := GetSide ( unit ) ;
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 255
23335: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23336: LD_ADDR_VAR 0 4
23340: PUSH
23341: LD_VAR 0 1
23345: PPUSH
23346: CALL_OW 248
23350: ST_TO_ADDR
// case nat of 1 :
23351: LD_VAR 0 4
23355: PUSH
23356: LD_INT 1
23358: DOUBLE
23359: EQUAL
23360: IFTRUE 23364
23362: GO 23375
23364: POP
// tech := tech_lassight ; 2 :
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: LD_INT 12
23372: ST_TO_ADDR
23373: GO 23414
23375: LD_INT 2
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23394
23383: POP
// tech := tech_mortar ; 3 :
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_INT 41
23391: ST_TO_ADDR
23392: GO 23414
23394: LD_INT 3
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23413
23402: POP
// tech := tech_bazooka ; end ;
23403: LD_ADDR_VAR 0 5
23407: PUSH
23408: LD_INT 44
23410: ST_TO_ADDR
23411: GO 23414
23413: POP
// if Researched ( side , tech ) then
23414: LD_VAR 0 3
23418: PPUSH
23419: LD_VAR 0 5
23423: PPUSH
23424: CALL_OW 325
23428: IFFALSE 23455
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 8
23440: PUSH
23441: LD_INT 9
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: LD_VAR 0 4
23453: ARRAY
23454: ST_TO_ADDR
// end ;
23455: LD_VAR 0 2
23459: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// if not mines then
23465: LD_VAR 0 2
23469: NOT
23470: IFFALSE 23474
// exit ;
23472: GO 23618
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23474: LD_ADDR_VAR 0 5
23478: PUSH
23479: LD_INT 81
23481: PUSH
23482: LD_VAR 0 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// for i in mines do
23517: LD_ADDR_VAR 0 4
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23616
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23530: LD_VAR 0 4
23534: PUSH
23535: LD_INT 1
23537: ARRAY
23538: PPUSH
23539: LD_VAR 0 4
23543: PUSH
23544: LD_INT 2
23546: ARRAY
23547: PPUSH
23548: CALL_OW 458
23552: NOT
23553: IFFALSE 23557
// continue ;
23555: GO 23527
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23557: LD_VAR 0 4
23561: PUSH
23562: LD_INT 1
23564: ARRAY
23565: PPUSH
23566: LD_VAR 0 4
23570: PUSH
23571: LD_INT 2
23573: ARRAY
23574: PPUSH
23575: CALL_OW 428
23579: PUSH
23580: LD_VAR 0 5
23584: IN
23585: IFFALSE 23614
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23587: LD_VAR 0 4
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PPUSH
23596: LD_VAR 0 4
23600: PUSH
23601: LD_INT 2
23603: ARRAY
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL_OW 456
// end ;
23614: GO 23527
23616: POP
23617: POP
// end ;
23618: LD_VAR 0 3
23622: RET
// export function Count ( array ) ; var i ; begin
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
// result := 0 ;
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_INT 0
23634: ST_TO_ADDR
// for i in array do
23635: LD_ADDR_VAR 0 3
23639: PUSH
23640: LD_VAR 0 1
23644: PUSH
23645: FOR_IN
23646: IFFALSE 23670
// if i then
23648: LD_VAR 0 3
23652: IFFALSE 23668
// result := result + 1 ;
23654: LD_ADDR_VAR 0 2
23658: PUSH
23659: LD_VAR 0 2
23663: PUSH
23664: LD_INT 1
23666: PLUS
23667: ST_TO_ADDR
23668: GO 23645
23670: POP
23671: POP
// end ;
23672: LD_VAR 0 2
23676: RET
// export function IsEmpty ( building ) ; begin
23677: LD_INT 0
23679: PPUSH
// if not building then
23680: LD_VAR 0 1
23684: NOT
23685: IFFALSE 23689
// exit ;
23687: GO 23732
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 255
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 58
23718: PUSH
23719: EMPTY
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: IN
23731: ST_TO_ADDR
// end ;
23732: LD_VAR 0 2
23736: RET
// export function IsNotFull ( building ) ; begin
23737: LD_INT 0
23739: PPUSH
// if not building then
23740: LD_VAR 0 1
23744: NOT
23745: IFFALSE 23749
// exit ;
23747: GO 23768
// result := UnitsInside ( building ) < 6 ;
23749: LD_ADDR_VAR 0 2
23753: PUSH
23754: LD_VAR 0 1
23758: PPUSH
23759: CALL_OW 313
23763: PUSH
23764: LD_INT 6
23766: LESS
23767: ST_TO_ADDR
// end ;
23768: LD_VAR 0 2
23772: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23773: LD_INT 0
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
// tmp := [ ] ;
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: EMPTY
23785: ST_TO_ADDR
// list := [ ] ;
23786: LD_ADDR_VAR 0 5
23790: PUSH
23791: EMPTY
23792: ST_TO_ADDR
// for i = 16 to 25 do
23793: LD_ADDR_VAR 0 4
23797: PUSH
23798: DOUBLE
23799: LD_INT 16
23801: DEC
23802: ST_TO_ADDR
23803: LD_INT 25
23805: PUSH
23806: FOR_TO
23807: IFFALSE 23880
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_VAR 0 3
23818: PUSH
23819: LD_INT 22
23821: PUSH
23822: LD_VAR 0 1
23826: PPUSH
23827: CALL_OW 255
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 91
23838: PUSH
23839: LD_VAR 0 1
23843: PUSH
23844: LD_INT 6
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 30
23854: PUSH
23855: LD_VAR 0 4
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: PPUSH
23872: CALL_OW 69
23876: ADD
23877: ST_TO_ADDR
23878: GO 23806
23880: POP
23881: POP
// for i = 1 to tmp do
23882: LD_ADDR_VAR 0 4
23886: PUSH
23887: DOUBLE
23888: LD_INT 1
23890: DEC
23891: ST_TO_ADDR
23892: LD_VAR 0 3
23896: PUSH
23897: FOR_TO
23898: IFFALSE 23986
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23900: LD_ADDR_VAR 0 5
23904: PUSH
23905: LD_VAR 0 5
23909: PUSH
23910: LD_VAR 0 3
23914: PUSH
23915: LD_VAR 0 4
23919: ARRAY
23920: PPUSH
23921: CALL_OW 266
23925: PUSH
23926: LD_VAR 0 3
23930: PUSH
23931: LD_VAR 0 4
23935: ARRAY
23936: PPUSH
23937: CALL_OW 250
23941: PUSH
23942: LD_VAR 0 3
23946: PUSH
23947: LD_VAR 0 4
23951: ARRAY
23952: PPUSH
23953: CALL_OW 251
23957: PUSH
23958: LD_VAR 0 3
23962: PUSH
23963: LD_VAR 0 4
23967: ARRAY
23968: PPUSH
23969: CALL_OW 254
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: ADD
23983: ST_TO_ADDR
23984: GO 23897
23986: POP
23987: POP
// result := list ;
23988: LD_ADDR_VAR 0 2
23992: PUSH
23993: LD_VAR 0 5
23997: ST_TO_ADDR
// end ;
23998: LD_VAR 0 2
24002: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24003: LD_INT 0
24005: PPUSH
24006: PPUSH
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
// if not factory then
24012: LD_VAR 0 1
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24614
// if control = control_apeman then
24021: LD_VAR 0 4
24025: PUSH
24026: LD_INT 5
24028: EQUAL
24029: IFFALSE 24138
// begin tmp := UnitsInside ( factory ) ;
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: LD_VAR 0 1
24040: PPUSH
24041: CALL_OW 313
24045: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24046: LD_VAR 0 8
24050: PPUSH
24051: LD_INT 25
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 72
24065: NOT
24066: IFFALSE 24076
// control := control_manual ;
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: LD_INT 1
24075: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24076: LD_ADDR_VAR 0 8
24080: PUSH
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL 23773 0 1
24090: ST_TO_ADDR
// if tmp then
24091: LD_VAR 0 8
24095: IFFALSE 24138
// begin for i in tmp do
24097: LD_ADDR_VAR 0 7
24101: PUSH
24102: LD_VAR 0 8
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24136
// if i [ 1 ] = b_ext_radio then
24110: LD_VAR 0 7
24114: PUSH
24115: LD_INT 1
24117: ARRAY
24118: PUSH
24119: LD_INT 22
24121: EQUAL
24122: IFFALSE 24134
// begin control := control_remote ;
24124: LD_ADDR_VAR 0 4
24128: PUSH
24129: LD_INT 2
24131: ST_TO_ADDR
// break ;
24132: GO 24136
// end ;
24134: GO 24107
24136: POP
24137: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24138: LD_VAR 0 1
24142: PPUSH
24143: LD_VAR 0 2
24147: PPUSH
24148: LD_VAR 0 3
24152: PPUSH
24153: LD_VAR 0 4
24157: PPUSH
24158: LD_VAR 0 5
24162: PPUSH
24163: CALL_OW 448
24167: IFFALSE 24202
// begin result := [ chassis , engine , control , weapon ] ;
24169: LD_ADDR_VAR 0 6
24173: PUSH
24174: LD_VAR 0 2
24178: PUSH
24179: LD_VAR 0 3
24183: PUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_VAR 0 5
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: ST_TO_ADDR
// exit ;
24200: GO 24614
// end ; _chassis := AvailableChassisList ( factory ) ;
24202: LD_ADDR_VAR 0 9
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 475
24216: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24217: LD_ADDR_VAR 0 11
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 476
24231: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24232: LD_ADDR_VAR 0 12
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 477
24246: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24247: LD_ADDR_VAR 0 10
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 478
24261: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24262: LD_VAR 0 9
24266: NOT
24267: PUSH
24268: LD_VAR 0 11
24272: NOT
24273: OR
24274: PUSH
24275: LD_VAR 0 12
24279: NOT
24280: OR
24281: PUSH
24282: LD_VAR 0 10
24286: NOT
24287: OR
24288: IFFALSE 24323
// begin result := [ chassis , engine , control , weapon ] ;
24290: LD_ADDR_VAR 0 6
24294: PUSH
24295: LD_VAR 0 2
24299: PUSH
24300: LD_VAR 0 3
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 5
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: ST_TO_ADDR
// exit ;
24321: GO 24614
// end ; if not chassis in _chassis then
24323: LD_VAR 0 2
24327: PUSH
24328: LD_VAR 0 9
24332: IN
24333: NOT
24334: IFFALSE 24360
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24336: LD_ADDR_VAR 0 2
24340: PUSH
24341: LD_VAR 0 9
24345: PUSH
24346: LD_INT 1
24348: PPUSH
24349: LD_VAR 0 9
24353: PPUSH
24354: CALL_OW 12
24358: ARRAY
24359: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: CALL 24619 0 2
24374: NOT
24375: IFFALSE 24434
// repeat engine := _engine [ 1 ] ;
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: LD_VAR 0 11
24386: PUSH
24387: LD_INT 1
24389: ARRAY
24390: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24391: LD_ADDR_VAR 0 11
24395: PUSH
24396: LD_VAR 0 11
24400: PPUSH
24401: LD_INT 1
24403: PPUSH
24404: CALL_OW 3
24408: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24409: LD_VAR 0 2
24413: PPUSH
24414: LD_VAR 0 3
24418: PPUSH
24419: CALL 24619 0 2
24423: PUSH
24424: LD_VAR 0 11
24428: PUSH
24429: EMPTY
24430: EQUAL
24431: OR
24432: IFFALSE 24377
// if not control in _control then
24434: LD_VAR 0 4
24438: PUSH
24439: LD_VAR 0 12
24443: IN
24444: NOT
24445: IFFALSE 24471
// control := _control [ rand ( 1 , _control ) ] ;
24447: LD_ADDR_VAR 0 4
24451: PUSH
24452: LD_VAR 0 12
24456: PUSH
24457: LD_INT 1
24459: PPUSH
24460: LD_VAR 0 12
24464: PPUSH
24465: CALL_OW 12
24469: ARRAY
24470: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_VAR 0 5
24480: PPUSH
24481: CALL 24839 0 2
24485: NOT
24486: IFFALSE 24545
// repeat weapon := _weapon [ 1 ] ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_VAR 0 10
24497: PUSH
24498: LD_INT 1
24500: ARRAY
24501: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24502: LD_ADDR_VAR 0 10
24506: PUSH
24507: LD_VAR 0 10
24511: PPUSH
24512: LD_INT 1
24514: PPUSH
24515: CALL_OW 3
24519: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24520: LD_VAR 0 2
24524: PPUSH
24525: LD_VAR 0 5
24529: PPUSH
24530: CALL 24839 0 2
24534: PUSH
24535: LD_VAR 0 10
24539: PUSH
24540: EMPTY
24541: EQUAL
24542: OR
24543: IFFALSE 24488
// result := [ ] ;
24545: LD_ADDR_VAR 0 6
24549: PUSH
24550: EMPTY
24551: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24552: LD_VAR 0 1
24556: PPUSH
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: LD_VAR 0 4
24571: PPUSH
24572: LD_VAR 0 5
24576: PPUSH
24577: CALL_OW 448
24581: IFFALSE 24614
// result := [ chassis , engine , control , weapon ] ;
24583: LD_ADDR_VAR 0 6
24587: PUSH
24588: LD_VAR 0 2
24592: PUSH
24593: LD_VAR 0 3
24597: PUSH
24598: LD_VAR 0 4
24602: PUSH
24603: LD_VAR 0 5
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: ST_TO_ADDR
// end ;
24614: LD_VAR 0 6
24618: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24619: LD_INT 0
24621: PPUSH
// if not chassis or not engine then
24622: LD_VAR 0 1
24626: NOT
24627: PUSH
24628: LD_VAR 0 2
24632: NOT
24633: OR
24634: IFFALSE 24638
// exit ;
24636: GO 24834
// case engine of engine_solar :
24638: LD_VAR 0 2
24642: PUSH
24643: LD_INT 2
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24689
24651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_INT 11
24659: PUSH
24660: LD_INT 12
24662: PUSH
24663: LD_INT 13
24665: PUSH
24666: LD_INT 14
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: ST_TO_ADDR
24687: GO 24818
24689: LD_INT 1
24691: DOUBLE
24692: EQUAL
24693: IFTRUE 24697
24695: GO 24759
24697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24698: LD_ADDR_VAR 0 3
24702: PUSH
24703: LD_INT 11
24705: PUSH
24706: LD_INT 12
24708: PUSH
24709: LD_INT 13
24711: PUSH
24712: LD_INT 14
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: LD_INT 4
24726: PUSH
24727: LD_INT 5
24729: PUSH
24730: LD_INT 21
24732: PUSH
24733: LD_INT 23
24735: PUSH
24736: LD_INT 22
24738: PUSH
24739: LD_INT 24
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: ST_TO_ADDR
24757: GO 24818
24759: LD_INT 3
24761: DOUBLE
24762: EQUAL
24763: IFTRUE 24767
24765: GO 24817
24767: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24768: LD_ADDR_VAR 0 3
24772: PUSH
24773: LD_INT 13
24775: PUSH
24776: LD_INT 14
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: LD_INT 4
24787: PUSH
24788: LD_INT 5
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_INT 23
24799: PUSH
24800: LD_INT 24
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: ST_TO_ADDR
24815: GO 24818
24817: POP
// result := ( chassis in result ) ;
24818: LD_ADDR_VAR 0 3
24822: PUSH
24823: LD_VAR 0 1
24827: PUSH
24828: LD_VAR 0 3
24832: IN
24833: ST_TO_ADDR
// end ;
24834: LD_VAR 0 3
24838: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24839: LD_INT 0
24841: PPUSH
// if not chassis or not weapon then
24842: LD_VAR 0 1
24846: NOT
24847: PUSH
24848: LD_VAR 0 2
24852: NOT
24853: OR
24854: IFFALSE 24858
// exit ;
24856: GO 25920
// case weapon of us_machine_gun :
24858: LD_VAR 0 2
24862: PUSH
24863: LD_INT 2
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24901
24871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 4
24888: PUSH
24889: LD_INT 5
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: ST_TO_ADDR
24899: GO 25904
24901: LD_INT 3
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 24939
24909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24910: LD_ADDR_VAR 0 3
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: LD_INT 4
24926: PUSH
24927: LD_INT 5
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: ST_TO_ADDR
24937: GO 25904
24939: LD_INT 11
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24977
24947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: LD_INT 3
24961: PUSH
24962: LD_INT 4
24964: PUSH
24965: LD_INT 5
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
24975: GO 25904
24977: LD_INT 4
24979: DOUBLE
24980: EQUAL
24981: IFTRUE 24985
24983: GO 25011
24985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: LD_INT 4
24999: PUSH
25000: LD_INT 5
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
25009: GO 25904
25011: LD_INT 5
25013: DOUBLE
25014: EQUAL
25015: IFTRUE 25019
25017: GO 25045
25019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25020: LD_ADDR_VAR 0 3
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 3
25030: PUSH
25031: LD_INT 4
25033: PUSH
25034: LD_INT 5
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: ST_TO_ADDR
25043: GO 25904
25045: LD_INT 9
25047: DOUBLE
25048: EQUAL
25049: IFTRUE 25053
25051: GO 25079
25053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: LD_INT 4
25067: PUSH
25068: LD_INT 5
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: ST_TO_ADDR
25077: GO 25904
25079: LD_INT 7
25081: DOUBLE
25082: EQUAL
25083: IFTRUE 25087
25085: GO 25113
25087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: LD_INT 4
25101: PUSH
25102: LD_INT 5
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: ST_TO_ADDR
25111: GO 25904
25113: LD_INT 12
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25147
25121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 2
25129: PUSH
25130: LD_INT 3
25132: PUSH
25133: LD_INT 4
25135: PUSH
25136: LD_INT 5
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 25904
25147: LD_INT 13
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25181
25155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: LD_INT 4
25169: PUSH
25170: LD_INT 5
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
25179: GO 25904
25181: LD_INT 14
25183: DOUBLE
25184: EQUAL
25185: IFTRUE 25189
25187: GO 25207
25189: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25190: LD_ADDR_VAR 0 3
25194: PUSH
25195: LD_INT 4
25197: PUSH
25198: LD_INT 5
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: ST_TO_ADDR
25205: GO 25904
25207: LD_INT 6
25209: DOUBLE
25210: EQUAL
25211: IFTRUE 25215
25213: GO 25233
25215: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_INT 4
25223: PUSH
25224: LD_INT 5
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: ST_TO_ADDR
25231: GO 25904
25233: LD_INT 10
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25259
25241: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25242: LD_ADDR_VAR 0 3
25246: PUSH
25247: LD_INT 4
25249: PUSH
25250: LD_INT 5
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: ST_TO_ADDR
25257: GO 25904
25259: LD_INT 22
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25293
25267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25268: LD_ADDR_VAR 0 3
25272: PUSH
25273: LD_INT 11
25275: PUSH
25276: LD_INT 12
25278: PUSH
25279: LD_INT 13
25281: PUSH
25282: LD_INT 14
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
25291: GO 25904
25293: LD_INT 23
25295: DOUBLE
25296: EQUAL
25297: IFTRUE 25301
25299: GO 25327
25301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_INT 11
25309: PUSH
25310: LD_INT 12
25312: PUSH
25313: LD_INT 13
25315: PUSH
25316: LD_INT 14
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25904
25327: LD_INT 24
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25361
25335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 11
25343: PUSH
25344: LD_INT 12
25346: PUSH
25347: LD_INT 13
25349: PUSH
25350: LD_INT 14
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: ST_TO_ADDR
25359: GO 25904
25361: LD_INT 30
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25395
25369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25370: LD_ADDR_VAR 0 3
25374: PUSH
25375: LD_INT 11
25377: PUSH
25378: LD_INT 12
25380: PUSH
25381: LD_INT 13
25383: PUSH
25384: LD_INT 14
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: ST_TO_ADDR
25393: GO 25904
25395: LD_INT 25
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25421
25403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 13
25411: PUSH
25412: LD_INT 14
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: ST_TO_ADDR
25419: GO 25904
25421: LD_INT 27
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25447
25429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 13
25437: PUSH
25438: LD_INT 14
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: ST_TO_ADDR
25445: GO 25904
25447: LD_EXP 82
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25483
25457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_INT 11
25465: PUSH
25466: LD_INT 12
25468: PUSH
25469: LD_INT 13
25471: PUSH
25472: LD_INT 14
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
25481: GO 25904
25483: LD_INT 28
25485: DOUBLE
25486: EQUAL
25487: IFTRUE 25491
25489: GO 25509
25491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_INT 13
25499: PUSH
25500: LD_INT 14
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: ST_TO_ADDR
25507: GO 25904
25509: LD_INT 29
25511: DOUBLE
25512: EQUAL
25513: IFTRUE 25517
25515: GO 25535
25517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25518: LD_ADDR_VAR 0 3
25522: PUSH
25523: LD_INT 13
25525: PUSH
25526: LD_INT 14
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: ST_TO_ADDR
25533: GO 25904
25535: LD_INT 31
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25561
25543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25544: LD_ADDR_VAR 0 3
25548: PUSH
25549: LD_INT 13
25551: PUSH
25552: LD_INT 14
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: ST_TO_ADDR
25559: GO 25904
25561: LD_INT 26
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25587
25569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25570: LD_ADDR_VAR 0 3
25574: PUSH
25575: LD_INT 13
25577: PUSH
25578: LD_INT 14
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 25904
25587: LD_INT 42
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25621
25595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_INT 21
25603: PUSH
25604: LD_INT 22
25606: PUSH
25607: LD_INT 23
25609: PUSH
25610: LD_INT 24
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
25619: GO 25904
25621: LD_INT 43
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25655
25629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25630: LD_ADDR_VAR 0 3
25634: PUSH
25635: LD_INT 21
25637: PUSH
25638: LD_INT 22
25640: PUSH
25641: LD_INT 23
25643: PUSH
25644: LD_INT 24
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: ST_TO_ADDR
25653: GO 25904
25655: LD_INT 44
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25689
25663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 22
25674: PUSH
25675: LD_INT 23
25677: PUSH
25678: LD_INT 24
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: ST_TO_ADDR
25687: GO 25904
25689: LD_INT 45
25691: DOUBLE
25692: EQUAL
25693: IFTRUE 25697
25695: GO 25723
25697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_INT 21
25705: PUSH
25706: LD_INT 22
25708: PUSH
25709: LD_INT 23
25711: PUSH
25712: LD_INT 24
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: ST_TO_ADDR
25721: GO 25904
25723: LD_INT 49
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25731
25729: GO 25757
25731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25732: LD_ADDR_VAR 0 3
25736: PUSH
25737: LD_INT 21
25739: PUSH
25740: LD_INT 22
25742: PUSH
25743: LD_INT 23
25745: PUSH
25746: LD_INT 24
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: ST_TO_ADDR
25755: GO 25904
25757: LD_INT 51
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25791
25765: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_INT 21
25773: PUSH
25774: LD_INT 22
25776: PUSH
25777: LD_INT 23
25779: PUSH
25780: LD_INT 24
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: ST_TO_ADDR
25789: GO 25904
25791: LD_INT 52
25793: DOUBLE
25794: EQUAL
25795: IFTRUE 25799
25797: GO 25825
25799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_INT 21
25807: PUSH
25808: LD_INT 22
25810: PUSH
25811: LD_INT 23
25813: PUSH
25814: LD_INT 24
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: ST_TO_ADDR
25823: GO 25904
25825: LD_INT 53
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25851
25833: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25834: LD_ADDR_VAR 0 3
25838: PUSH
25839: LD_INT 23
25841: PUSH
25842: LD_INT 24
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: ST_TO_ADDR
25849: GO 25904
25851: LD_INT 46
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25877
25859: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 23
25867: PUSH
25868: LD_INT 24
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: ST_TO_ADDR
25875: GO 25904
25877: LD_INT 47
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 25903
25885: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 23
25893: PUSH
25894: LD_INT 24
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 25904
25903: POP
// result := ( chassis in result ) ;
25904: LD_ADDR_VAR 0 3
25908: PUSH
25909: LD_VAR 0 1
25913: PUSH
25914: LD_VAR 0 3
25918: IN
25919: ST_TO_ADDR
// end ;
25920: LD_VAR 0 3
25924: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25925: LD_INT 0
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
// result := array ;
25934: LD_ADDR_VAR 0 5
25938: PUSH
25939: LD_VAR 0 1
25943: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25944: LD_VAR 0 1
25948: NOT
25949: PUSH
25950: LD_VAR 0 2
25954: NOT
25955: OR
25956: PUSH
25957: LD_VAR 0 3
25961: NOT
25962: OR
25963: PUSH
25964: LD_VAR 0 2
25968: PUSH
25969: LD_VAR 0 1
25973: GREATER
25974: OR
25975: PUSH
25976: LD_VAR 0 3
25980: PUSH
25981: LD_VAR 0 1
25985: GREATER
25986: OR
25987: IFFALSE 25991
// exit ;
25989: GO 26287
// if direction then
25991: LD_VAR 0 4
25995: IFFALSE 26059
// begin d := 1 ;
25997: LD_ADDR_VAR 0 9
26001: PUSH
26002: LD_INT 1
26004: ST_TO_ADDR
// if i_from > i_to then
26005: LD_VAR 0 2
26009: PUSH
26010: LD_VAR 0 3
26014: GREATER
26015: IFFALSE 26041
// length := ( array - i_from ) + i_to else
26017: LD_ADDR_VAR 0 11
26021: PUSH
26022: LD_VAR 0 1
26026: PUSH
26027: LD_VAR 0 2
26031: MINUS
26032: PUSH
26033: LD_VAR 0 3
26037: PLUS
26038: ST_TO_ADDR
26039: GO 26057
// length := i_to - i_from ;
26041: LD_ADDR_VAR 0 11
26045: PUSH
26046: LD_VAR 0 3
26050: PUSH
26051: LD_VAR 0 2
26055: MINUS
26056: ST_TO_ADDR
// end else
26057: GO 26120
// begin d := - 1 ;
26059: LD_ADDR_VAR 0 9
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: ST_TO_ADDR
// if i_from > i_to then
26068: LD_VAR 0 2
26072: PUSH
26073: LD_VAR 0 3
26077: GREATER
26078: IFFALSE 26098
// length := i_from - i_to else
26080: LD_ADDR_VAR 0 11
26084: PUSH
26085: LD_VAR 0 2
26089: PUSH
26090: LD_VAR 0 3
26094: MINUS
26095: ST_TO_ADDR
26096: GO 26120
// length := ( array - i_to ) + i_from ;
26098: LD_ADDR_VAR 0 11
26102: PUSH
26103: LD_VAR 0 1
26107: PUSH
26108: LD_VAR 0 3
26112: MINUS
26113: PUSH
26114: LD_VAR 0 2
26118: PLUS
26119: ST_TO_ADDR
// end ; if not length then
26120: LD_VAR 0 11
26124: NOT
26125: IFFALSE 26129
// exit ;
26127: GO 26287
// tmp := array ;
26129: LD_ADDR_VAR 0 10
26133: PUSH
26134: LD_VAR 0 1
26138: ST_TO_ADDR
// for i = 1 to length do
26139: LD_ADDR_VAR 0 6
26143: PUSH
26144: DOUBLE
26145: LD_INT 1
26147: DEC
26148: ST_TO_ADDR
26149: LD_VAR 0 11
26153: PUSH
26154: FOR_TO
26155: IFFALSE 26275
// begin for j = 1 to array do
26157: LD_ADDR_VAR 0 7
26161: PUSH
26162: DOUBLE
26163: LD_INT 1
26165: DEC
26166: ST_TO_ADDR
26167: LD_VAR 0 1
26171: PUSH
26172: FOR_TO
26173: IFFALSE 26261
// begin k := j + d ;
26175: LD_ADDR_VAR 0 8
26179: PUSH
26180: LD_VAR 0 7
26184: PUSH
26185: LD_VAR 0 9
26189: PLUS
26190: ST_TO_ADDR
// if k > array then
26191: LD_VAR 0 8
26195: PUSH
26196: LD_VAR 0 1
26200: GREATER
26201: IFFALSE 26211
// k := 1 ;
26203: LD_ADDR_VAR 0 8
26207: PUSH
26208: LD_INT 1
26210: ST_TO_ADDR
// if not k then
26211: LD_VAR 0 8
26215: NOT
26216: IFFALSE 26228
// k := array ;
26218: LD_ADDR_VAR 0 8
26222: PUSH
26223: LD_VAR 0 1
26227: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26228: LD_ADDR_VAR 0 10
26232: PUSH
26233: LD_VAR 0 10
26237: PPUSH
26238: LD_VAR 0 8
26242: PPUSH
26243: LD_VAR 0 1
26247: PUSH
26248: LD_VAR 0 7
26252: ARRAY
26253: PPUSH
26254: CALL_OW 1
26258: ST_TO_ADDR
// end ;
26259: GO 26172
26261: POP
26262: POP
// array := tmp ;
26263: LD_ADDR_VAR 0 1
26267: PUSH
26268: LD_VAR 0 10
26272: ST_TO_ADDR
// end ;
26273: GO 26154
26275: POP
26276: POP
// result := array ;
26277: LD_ADDR_VAR 0 5
26281: PUSH
26282: LD_VAR 0 1
26286: ST_TO_ADDR
// end ;
26287: LD_VAR 0 5
26291: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26292: LD_INT 0
26294: PPUSH
26295: PPUSH
// result := 0 ;
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 0
26303: ST_TO_ADDR
// if not array or not value in array then
26304: LD_VAR 0 1
26308: NOT
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: LD_VAR 0 1
26319: IN
26320: NOT
26321: OR
26322: IFFALSE 26326
// exit ;
26324: GO 26380
// for i = 1 to array do
26326: LD_ADDR_VAR 0 4
26330: PUSH
26331: DOUBLE
26332: LD_INT 1
26334: DEC
26335: ST_TO_ADDR
26336: LD_VAR 0 1
26340: PUSH
26341: FOR_TO
26342: IFFALSE 26378
// if value = array [ i ] then
26344: LD_VAR 0 2
26348: PUSH
26349: LD_VAR 0 1
26353: PUSH
26354: LD_VAR 0 4
26358: ARRAY
26359: EQUAL
26360: IFFALSE 26376
// begin result := i ;
26362: LD_ADDR_VAR 0 3
26366: PUSH
26367: LD_VAR 0 4
26371: ST_TO_ADDR
// exit ;
26372: POP
26373: POP
26374: GO 26380
// end ;
26376: GO 26341
26378: POP
26379: POP
// end ;
26380: LD_VAR 0 3
26384: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26385: LD_INT 0
26387: PPUSH
// vc_chassis := chassis ;
26388: LD_ADDR_OWVAR 37
26392: PUSH
26393: LD_VAR 0 1
26397: ST_TO_ADDR
// vc_engine := engine ;
26398: LD_ADDR_OWVAR 39
26402: PUSH
26403: LD_VAR 0 2
26407: ST_TO_ADDR
// vc_control := control ;
26408: LD_ADDR_OWVAR 38
26412: PUSH
26413: LD_VAR 0 3
26417: ST_TO_ADDR
// vc_weapon := weapon ;
26418: LD_ADDR_OWVAR 40
26422: PUSH
26423: LD_VAR 0 4
26427: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26428: LD_ADDR_OWVAR 41
26432: PUSH
26433: LD_VAR 0 5
26437: ST_TO_ADDR
// end ;
26438: LD_VAR 0 6
26442: RET
// export function WantPlant ( unit ) ; var task ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// result := false ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 0
26454: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26455: LD_ADDR_VAR 0 3
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 437
26469: ST_TO_ADDR
// if task then
26470: LD_VAR 0 3
26474: IFFALSE 26502
// if task [ 1 ] [ 1 ] = p then
26476: LD_VAR 0 3
26480: PUSH
26481: LD_INT 1
26483: ARRAY
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: PUSH
26489: LD_STRING p
26491: EQUAL
26492: IFFALSE 26502
// result := true ;
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_INT 1
26501: ST_TO_ADDR
// end ;
26502: LD_VAR 0 2
26506: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
26511: PPUSH
26512: PPUSH
// if pos < 1 then
26513: LD_VAR 0 2
26517: PUSH
26518: LD_INT 1
26520: LESS
26521: IFFALSE 26525
// exit ;
26523: GO 26828
// if pos = 1 then
26525: LD_VAR 0 2
26529: PUSH
26530: LD_INT 1
26532: EQUAL
26533: IFFALSE 26566
// result := Replace ( arr , pos [ 1 ] , value ) else
26535: LD_ADDR_VAR 0 4
26539: PUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: LD_VAR 0 2
26549: PUSH
26550: LD_INT 1
26552: ARRAY
26553: PPUSH
26554: LD_VAR 0 3
26558: PPUSH
26559: CALL_OW 1
26563: ST_TO_ADDR
26564: GO 26828
// begin tmp := arr ;
26566: LD_ADDR_VAR 0 6
26570: PUSH
26571: LD_VAR 0 1
26575: ST_TO_ADDR
// s_arr := [ tmp ] ;
26576: LD_ADDR_VAR 0 7
26580: PUSH
26581: LD_VAR 0 6
26585: PUSH
26586: EMPTY
26587: LIST
26588: ST_TO_ADDR
// for i = 1 to pos - 1 do
26589: LD_ADDR_VAR 0 5
26593: PUSH
26594: DOUBLE
26595: LD_INT 1
26597: DEC
26598: ST_TO_ADDR
26599: LD_VAR 0 2
26603: PUSH
26604: LD_INT 1
26606: MINUS
26607: PUSH
26608: FOR_TO
26609: IFFALSE 26654
// begin tmp := tmp [ pos [ i ] ] ;
26611: LD_ADDR_VAR 0 6
26615: PUSH
26616: LD_VAR 0 6
26620: PUSH
26621: LD_VAR 0 2
26625: PUSH
26626: LD_VAR 0 5
26630: ARRAY
26631: ARRAY
26632: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26633: LD_ADDR_VAR 0 7
26637: PUSH
26638: LD_VAR 0 7
26642: PUSH
26643: LD_VAR 0 6
26647: PUSH
26648: EMPTY
26649: LIST
26650: ADD
26651: ST_TO_ADDR
// end ;
26652: GO 26608
26654: POP
26655: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26656: LD_ADDR_VAR 0 6
26660: PUSH
26661: LD_VAR 0 6
26665: PPUSH
26666: LD_VAR 0 2
26670: PUSH
26671: LD_VAR 0 2
26675: ARRAY
26676: PPUSH
26677: LD_VAR 0 3
26681: PPUSH
26682: CALL_OW 1
26686: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26687: LD_ADDR_VAR 0 7
26691: PUSH
26692: LD_VAR 0 7
26696: PPUSH
26697: LD_VAR 0 7
26701: PPUSH
26702: LD_VAR 0 6
26706: PPUSH
26707: CALL_OW 1
26711: ST_TO_ADDR
// for i = s_arr downto 2 do
26712: LD_ADDR_VAR 0 5
26716: PUSH
26717: DOUBLE
26718: LD_VAR 0 7
26722: INC
26723: ST_TO_ADDR
26724: LD_INT 2
26726: PUSH
26727: FOR_DOWNTO
26728: IFFALSE 26812
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_VAR 0 7
26739: PUSH
26740: LD_VAR 0 5
26744: PUSH
26745: LD_INT 1
26747: MINUS
26748: ARRAY
26749: PPUSH
26750: LD_VAR 0 2
26754: PUSH
26755: LD_VAR 0 5
26759: PUSH
26760: LD_INT 1
26762: MINUS
26763: ARRAY
26764: PPUSH
26765: LD_VAR 0 7
26769: PUSH
26770: LD_VAR 0 5
26774: ARRAY
26775: PPUSH
26776: CALL_OW 1
26780: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26781: LD_ADDR_VAR 0 7
26785: PUSH
26786: LD_VAR 0 7
26790: PPUSH
26791: LD_VAR 0 5
26795: PUSH
26796: LD_INT 1
26798: MINUS
26799: PPUSH
26800: LD_VAR 0 6
26804: PPUSH
26805: CALL_OW 1
26809: ST_TO_ADDR
// end ;
26810: GO 26727
26812: POP
26813: POP
// result := s_arr [ 1 ] ;
26814: LD_ADDR_VAR 0 4
26818: PUSH
26819: LD_VAR 0 7
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: ST_TO_ADDR
// end ; end ;
26828: LD_VAR 0 4
26832: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26833: LD_INT 0
26835: PPUSH
26836: PPUSH
// if not list then
26837: LD_VAR 0 1
26841: NOT
26842: IFFALSE 26846
// exit ;
26844: GO 26937
// i := list [ pos1 ] ;
26846: LD_ADDR_VAR 0 5
26850: PUSH
26851: LD_VAR 0 1
26855: PUSH
26856: LD_VAR 0 2
26860: ARRAY
26861: ST_TO_ADDR
// if not i then
26862: LD_VAR 0 5
26866: NOT
26867: IFFALSE 26871
// exit ;
26869: GO 26937
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26871: LD_ADDR_VAR 0 1
26875: PUSH
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_VAR 0 1
26890: PUSH
26891: LD_VAR 0 3
26895: ARRAY
26896: PPUSH
26897: CALL_OW 1
26901: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 3
26916: PPUSH
26917: LD_VAR 0 5
26921: PPUSH
26922: CALL_OW 1
26926: ST_TO_ADDR
// result := list ;
26927: LD_ADDR_VAR 0 4
26931: PUSH
26932: LD_VAR 0 1
26936: ST_TO_ADDR
// end ;
26937: LD_VAR 0 4
26941: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26942: LD_INT 0
26944: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26945: LD_ADDR_VAR 0 5
26949: PUSH
26950: LD_VAR 0 1
26954: PPUSH
26955: CALL_OW 250
26959: PPUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 251
26969: PPUSH
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_VAR 0 3
26979: PPUSH
26980: LD_VAR 0 4
26984: PPUSH
26985: CALL 26995 0 5
26989: ST_TO_ADDR
// end ;
26990: LD_VAR 0 5
26994: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
// if not list then
27001: LD_VAR 0 3
27005: NOT
27006: IFFALSE 27010
// exit ;
27008: GO 27398
// result := [ ] ;
27010: LD_ADDR_VAR 0 6
27014: PUSH
27015: EMPTY
27016: ST_TO_ADDR
// for i in list do
27017: LD_ADDR_VAR 0 7
27021: PUSH
27022: LD_VAR 0 3
27026: PUSH
27027: FOR_IN
27028: IFFALSE 27230
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27030: LD_ADDR_VAR 0 9
27034: PUSH
27035: LD_VAR 0 7
27039: PPUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: LD_VAR 0 2
27049: PPUSH
27050: CALL_OW 297
27054: ST_TO_ADDR
// if not result then
27055: LD_VAR 0 6
27059: NOT
27060: IFFALSE 27086
// result := [ [ i , tmp ] ] else
27062: LD_ADDR_VAR 0 6
27066: PUSH
27067: LD_VAR 0 7
27071: PUSH
27072: LD_VAR 0 9
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: ST_TO_ADDR
27084: GO 27228
// begin if result [ result ] [ 2 ] < tmp then
27086: LD_VAR 0 6
27090: PUSH
27091: LD_VAR 0 6
27095: ARRAY
27096: PUSH
27097: LD_INT 2
27099: ARRAY
27100: PUSH
27101: LD_VAR 0 9
27105: LESS
27106: IFFALSE 27148
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27108: LD_ADDR_VAR 0 6
27112: PUSH
27113: LD_VAR 0 6
27117: PPUSH
27118: LD_VAR 0 6
27122: PUSH
27123: LD_INT 1
27125: PLUS
27126: PPUSH
27127: LD_VAR 0 7
27131: PUSH
27132: LD_VAR 0 9
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PPUSH
27141: CALL_OW 2
27145: ST_TO_ADDR
27146: GO 27228
// for j = 1 to result do
27148: LD_ADDR_VAR 0 8
27152: PUSH
27153: DOUBLE
27154: LD_INT 1
27156: DEC
27157: ST_TO_ADDR
27158: LD_VAR 0 6
27162: PUSH
27163: FOR_TO
27164: IFFALSE 27226
// begin if tmp < result [ j ] [ 2 ] then
27166: LD_VAR 0 9
27170: PUSH
27171: LD_VAR 0 6
27175: PUSH
27176: LD_VAR 0 8
27180: ARRAY
27181: PUSH
27182: LD_INT 2
27184: ARRAY
27185: LESS
27186: IFFALSE 27224
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27188: LD_ADDR_VAR 0 6
27192: PUSH
27193: LD_VAR 0 6
27197: PPUSH
27198: LD_VAR 0 8
27202: PPUSH
27203: LD_VAR 0 7
27207: PUSH
27208: LD_VAR 0 9
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 2
27221: ST_TO_ADDR
// break ;
27222: GO 27226
// end ; end ;
27224: GO 27163
27226: POP
27227: POP
// end ; end ;
27228: GO 27027
27230: POP
27231: POP
// if result and not asc then
27232: LD_VAR 0 6
27236: PUSH
27237: LD_VAR 0 4
27241: NOT
27242: AND
27243: IFFALSE 27318
// begin tmp := result ;
27245: LD_ADDR_VAR 0 9
27249: PUSH
27250: LD_VAR 0 6
27254: ST_TO_ADDR
// for i = tmp downto 1 do
27255: LD_ADDR_VAR 0 7
27259: PUSH
27260: DOUBLE
27261: LD_VAR 0 9
27265: INC
27266: ST_TO_ADDR
27267: LD_INT 1
27269: PUSH
27270: FOR_DOWNTO
27271: IFFALSE 27316
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27273: LD_ADDR_VAR 0 6
27277: PUSH
27278: LD_VAR 0 6
27282: PPUSH
27283: LD_VAR 0 9
27287: PUSH
27288: LD_VAR 0 7
27292: MINUS
27293: PUSH
27294: LD_INT 1
27296: PLUS
27297: PPUSH
27298: LD_VAR 0 9
27302: PUSH
27303: LD_VAR 0 7
27307: ARRAY
27308: PPUSH
27309: CALL_OW 1
27313: ST_TO_ADDR
27314: GO 27270
27316: POP
27317: POP
// end ; tmp := [ ] ;
27318: LD_ADDR_VAR 0 9
27322: PUSH
27323: EMPTY
27324: ST_TO_ADDR
// if mode then
27325: LD_VAR 0 5
27329: IFFALSE 27398
// begin for i = 1 to result do
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_VAR 0 6
27345: PUSH
27346: FOR_TO
27347: IFFALSE 27386
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27349: LD_ADDR_VAR 0 9
27353: PUSH
27354: LD_VAR 0 9
27358: PPUSH
27359: LD_VAR 0 7
27363: PPUSH
27364: LD_VAR 0 6
27368: PUSH
27369: LD_VAR 0 7
27373: ARRAY
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: CALL_OW 1
27383: ST_TO_ADDR
27384: GO 27346
27386: POP
27387: POP
// result := tmp ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: LD_VAR 0 9
27397: ST_TO_ADDR
// end ; end ;
27398: LD_VAR 0 6
27402: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27403: LD_INT 0
27405: PPUSH
27406: PPUSH
27407: PPUSH
27408: PPUSH
27409: PPUSH
27410: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27411: LD_ADDR_VAR 0 5
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// if not x or not y then
27433: LD_VAR 0 2
27437: NOT
27438: PUSH
27439: LD_VAR 0 3
27443: NOT
27444: OR
27445: IFFALSE 27449
// exit ;
27447: GO 29101
// if not range then
27449: LD_VAR 0 4
27453: NOT
27454: IFFALSE 27464
// range := 10 ;
27456: LD_ADDR_VAR 0 4
27460: PUSH
27461: LD_INT 10
27463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27464: LD_ADDR_VAR 0 8
27468: PUSH
27469: LD_INT 81
27471: PUSH
27472: LD_VAR 0 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 92
27483: PUSH
27484: LD_VAR 0 2
27488: PUSH
27489: LD_VAR 0 3
27493: PUSH
27494: LD_VAR 0 4
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 3
27507: PUSH
27508: LD_INT 21
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: PPUSH
27527: CALL_OW 69
27531: ST_TO_ADDR
// if not tmp then
27532: LD_VAR 0 8
27536: NOT
27537: IFFALSE 27541
// exit ;
27539: GO 29101
// for i in tmp do
27541: LD_ADDR_VAR 0 6
27545: PUSH
27546: LD_VAR 0 8
27550: PUSH
27551: FOR_IN
27552: IFFALSE 29076
// begin points := [ 0 , 0 , 0 ] ;
27554: LD_ADDR_VAR 0 9
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
// bpoints := 1 ;
27573: LD_ADDR_VAR 0 10
27577: PUSH
27578: LD_INT 1
27580: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27581: LD_VAR 0 6
27585: PPUSH
27586: CALL_OW 247
27590: PUSH
27591: LD_INT 1
27593: DOUBLE
27594: EQUAL
27595: IFTRUE 27599
27597: GO 28177
27599: POP
// begin if GetClass ( i ) = 1 then
27600: LD_VAR 0 6
27604: PPUSH
27605: CALL_OW 257
27609: PUSH
27610: LD_INT 1
27612: EQUAL
27613: IFFALSE 27634
// points := [ 10 , 5 , 3 ] ;
27615: LD_ADDR_VAR 0 9
27619: PUSH
27620: LD_INT 10
27622: PUSH
27623: LD_INT 5
27625: PUSH
27626: LD_INT 3
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27634: LD_VAR 0 6
27638: PPUSH
27639: CALL_OW 257
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: LD_INT 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: IN
27658: IFFALSE 27679
// points := [ 3 , 2 , 1 ] ;
27660: LD_ADDR_VAR 0 9
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27679: LD_VAR 0 6
27683: PPUSH
27684: CALL_OW 257
27688: PUSH
27689: LD_INT 5
27691: EQUAL
27692: IFFALSE 27713
// points := [ 130 , 5 , 2 ] ;
27694: LD_ADDR_VAR 0 9
27698: PUSH
27699: LD_INT 130
27701: PUSH
27702: LD_INT 5
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27713: LD_VAR 0 6
27717: PPUSH
27718: CALL_OW 257
27722: PUSH
27723: LD_INT 8
27725: EQUAL
27726: IFFALSE 27747
// points := [ 35 , 35 , 30 ] ;
27728: LD_ADDR_VAR 0 9
27732: PUSH
27733: LD_INT 35
27735: PUSH
27736: LD_INT 35
27738: PUSH
27739: LD_INT 30
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27747: LD_VAR 0 6
27751: PPUSH
27752: CALL_OW 257
27756: PUSH
27757: LD_INT 9
27759: EQUAL
27760: IFFALSE 27781
// points := [ 20 , 55 , 40 ] ;
27762: LD_ADDR_VAR 0 9
27766: PUSH
27767: LD_INT 20
27769: PUSH
27770: LD_INT 55
27772: PUSH
27773: LD_INT 40
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27781: LD_VAR 0 6
27785: PPUSH
27786: CALL_OW 257
27790: PUSH
27791: LD_INT 12
27793: PUSH
27794: LD_INT 16
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: IN
27801: IFFALSE 27822
// points := [ 5 , 3 , 2 ] ;
27803: LD_ADDR_VAR 0 9
27807: PUSH
27808: LD_INT 5
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27822: LD_VAR 0 6
27826: PPUSH
27827: CALL_OW 257
27831: PUSH
27832: LD_INT 17
27834: EQUAL
27835: IFFALSE 27856
// points := [ 100 , 50 , 75 ] ;
27837: LD_ADDR_VAR 0 9
27841: PUSH
27842: LD_INT 100
27844: PUSH
27845: LD_INT 50
27847: PUSH
27848: LD_INT 75
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27856: LD_VAR 0 6
27860: PPUSH
27861: CALL_OW 257
27865: PUSH
27866: LD_INT 15
27868: EQUAL
27869: IFFALSE 27890
// points := [ 10 , 5 , 3 ] ;
27871: LD_ADDR_VAR 0 9
27875: PUSH
27876: LD_INT 10
27878: PUSH
27879: LD_INT 5
27881: PUSH
27882: LD_INT 3
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27890: LD_VAR 0 6
27894: PPUSH
27895: CALL_OW 257
27899: PUSH
27900: LD_INT 14
27902: EQUAL
27903: IFFALSE 27924
// points := [ 10 , 0 , 0 ] ;
27905: LD_ADDR_VAR 0 9
27909: PUSH
27910: LD_INT 10
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27924: LD_VAR 0 6
27928: PPUSH
27929: CALL_OW 257
27933: PUSH
27934: LD_INT 11
27936: EQUAL
27937: IFFALSE 27958
// points := [ 30 , 10 , 5 ] ;
27939: LD_ADDR_VAR 0 9
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: LD_INT 10
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27958: LD_VAR 0 1
27962: PPUSH
27963: LD_INT 5
27965: PPUSH
27966: CALL_OW 321
27970: PUSH
27971: LD_INT 2
27973: EQUAL
27974: IFFALSE 27991
// bpoints := bpoints * 1.8 ;
27976: LD_ADDR_VAR 0 10
27980: PUSH
27981: LD_VAR 0 10
27985: PUSH
27986: LD_REAL  1.80000000000000E+0000
27989: MUL
27990: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27991: LD_VAR 0 6
27995: PPUSH
27996: CALL_OW 257
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: IN
28019: PUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: LD_INT 51
28027: PPUSH
28028: CALL_OW 321
28032: PUSH
28033: LD_INT 2
28035: EQUAL
28036: AND
28037: IFFALSE 28054
// bpoints := bpoints * 1.2 ;
28039: LD_ADDR_VAR 0 10
28043: PUSH
28044: LD_VAR 0 10
28048: PUSH
28049: LD_REAL  1.20000000000000E+0000
28052: MUL
28053: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28054: LD_VAR 0 6
28058: PPUSH
28059: CALL_OW 257
28063: PUSH
28064: LD_INT 5
28066: PUSH
28067: LD_INT 7
28069: PUSH
28070: LD_INT 9
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: IN
28078: PUSH
28079: LD_VAR 0 1
28083: PPUSH
28084: LD_INT 52
28086: PPUSH
28087: CALL_OW 321
28091: PUSH
28092: LD_INT 2
28094: EQUAL
28095: AND
28096: IFFALSE 28113
// bpoints := bpoints * 1.5 ;
28098: LD_ADDR_VAR 0 10
28102: PUSH
28103: LD_VAR 0 10
28107: PUSH
28108: LD_REAL  1.50000000000000E+0000
28111: MUL
28112: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28113: LD_VAR 0 1
28117: PPUSH
28118: LD_INT 66
28120: PPUSH
28121: CALL_OW 321
28125: PUSH
28126: LD_INT 2
28128: EQUAL
28129: IFFALSE 28146
// bpoints := bpoints * 1.1 ;
28131: LD_ADDR_VAR 0 10
28135: PUSH
28136: LD_VAR 0 10
28140: PUSH
28141: LD_REAL  1.10000000000000E+0000
28144: MUL
28145: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28146: LD_ADDR_VAR 0 10
28150: PUSH
28151: LD_VAR 0 10
28155: PUSH
28156: LD_VAR 0 6
28160: PPUSH
28161: LD_INT 1
28163: PPUSH
28164: CALL_OW 259
28168: PUSH
28169: LD_REAL  1.15000000000000E+0000
28172: MUL
28173: MUL
28174: ST_TO_ADDR
// end ; unit_vehicle :
28175: GO 29005
28177: LD_INT 2
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28185
28183: GO 28993
28185: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 264
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 42
28201: PUSH
28202: LD_INT 24
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: IN
28210: IFFALSE 28231
// points := [ 25 , 5 , 3 ] ;
28212: LD_ADDR_VAR 0 9
28216: PUSH
28217: LD_INT 25
28219: PUSH
28220: LD_INT 5
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28231: LD_VAR 0 6
28235: PPUSH
28236: CALL_OW 264
28240: PUSH
28241: LD_INT 4
28243: PUSH
28244: LD_INT 43
28246: PUSH
28247: LD_INT 25
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: IN
28255: IFFALSE 28276
// points := [ 40 , 15 , 5 ] ;
28257: LD_ADDR_VAR 0 9
28261: PUSH
28262: LD_INT 40
28264: PUSH
28265: LD_INT 15
28267: PUSH
28268: LD_INT 5
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28276: LD_VAR 0 6
28280: PPUSH
28281: CALL_OW 264
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: LD_INT 23
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: IN
28296: IFFALSE 28317
// points := [ 7 , 25 , 8 ] ;
28298: LD_ADDR_VAR 0 9
28302: PUSH
28303: LD_INT 7
28305: PUSH
28306: LD_INT 25
28308: PUSH
28309: LD_INT 8
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28317: LD_VAR 0 6
28321: PPUSH
28322: CALL_OW 264
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: LD_INT 27
28332: PUSH
28333: LD_INT 44
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: IN
28341: IFFALSE 28362
// points := [ 14 , 50 , 16 ] ;
28343: LD_ADDR_VAR 0 9
28347: PUSH
28348: LD_INT 14
28350: PUSH
28351: LD_INT 50
28353: PUSH
28354: LD_INT 16
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28362: LD_VAR 0 6
28366: PPUSH
28367: CALL_OW 264
28371: PUSH
28372: LD_INT 6
28374: PUSH
28375: LD_INT 46
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: IN
28382: IFFALSE 28403
// points := [ 32 , 120 , 70 ] ;
28384: LD_ADDR_VAR 0 9
28388: PUSH
28389: LD_INT 32
28391: PUSH
28392: LD_INT 120
28394: PUSH
28395: LD_INT 70
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28403: LD_VAR 0 6
28407: PPUSH
28408: CALL_OW 264
28412: PUSH
28413: LD_INT 7
28415: PUSH
28416: LD_INT 28
28418: PUSH
28419: LD_INT 45
28421: PUSH
28422: LD_EXP 82
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: IN
28433: IFFALSE 28454
// points := [ 35 , 20 , 45 ] ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 35
28442: PUSH
28443: LD_INT 20
28445: PUSH
28446: LD_INT 45
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 264
28463: PUSH
28464: LD_INT 47
28466: PUSH
28467: EMPTY
28468: LIST
28469: IN
28470: IFFALSE 28491
// points := [ 67 , 45 , 75 ] ;
28472: LD_ADDR_VAR 0 9
28476: PUSH
28477: LD_INT 67
28479: PUSH
28480: LD_INT 45
28482: PUSH
28483: LD_INT 75
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28491: LD_VAR 0 6
28495: PPUSH
28496: CALL_OW 264
28500: PUSH
28501: LD_INT 26
28503: PUSH
28504: EMPTY
28505: LIST
28506: IN
28507: IFFALSE 28528
// points := [ 120 , 30 , 80 ] ;
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_INT 120
28516: PUSH
28517: LD_INT 30
28519: PUSH
28520: LD_INT 80
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28528: LD_VAR 0 6
28532: PPUSH
28533: CALL_OW 264
28537: PUSH
28538: LD_INT 22
28540: PUSH
28541: EMPTY
28542: LIST
28543: IN
28544: IFFALSE 28565
// points := [ 40 , 1 , 1 ] ;
28546: LD_ADDR_VAR 0 9
28550: PUSH
28551: LD_INT 40
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28565: LD_VAR 0 6
28569: PPUSH
28570: CALL_OW 264
28574: PUSH
28575: LD_INT 29
28577: PUSH
28578: EMPTY
28579: LIST
28580: IN
28581: IFFALSE 28602
// points := [ 70 , 200 , 400 ] ;
28583: LD_ADDR_VAR 0 9
28587: PUSH
28588: LD_INT 70
28590: PUSH
28591: LD_INT 200
28593: PUSH
28594: LD_INT 400
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28602: LD_VAR 0 6
28606: PPUSH
28607: CALL_OW 264
28611: PUSH
28612: LD_INT 14
28614: PUSH
28615: LD_INT 53
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: IN
28622: IFFALSE 28643
// points := [ 40 , 10 , 20 ] ;
28624: LD_ADDR_VAR 0 9
28628: PUSH
28629: LD_INT 40
28631: PUSH
28632: LD_INT 10
28634: PUSH
28635: LD_INT 20
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28643: LD_VAR 0 6
28647: PPUSH
28648: CALL_OW 264
28652: PUSH
28653: LD_INT 9
28655: PUSH
28656: EMPTY
28657: LIST
28658: IN
28659: IFFALSE 28680
// points := [ 5 , 70 , 20 ] ;
28661: LD_ADDR_VAR 0 9
28665: PUSH
28666: LD_INT 5
28668: PUSH
28669: LD_INT 70
28671: PUSH
28672: LD_INT 20
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28680: LD_VAR 0 6
28684: PPUSH
28685: CALL_OW 264
28689: PUSH
28690: LD_INT 10
28692: PUSH
28693: EMPTY
28694: LIST
28695: IN
28696: IFFALSE 28717
// points := [ 35 , 110 , 70 ] ;
28698: LD_ADDR_VAR 0 9
28702: PUSH
28703: LD_INT 35
28705: PUSH
28706: LD_INT 110
28708: PUSH
28709: LD_INT 70
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28717: LD_VAR 0 6
28721: PPUSH
28722: CALL_OW 265
28726: PUSH
28727: LD_INT 25
28729: EQUAL
28730: IFFALSE 28751
// points := [ 80 , 65 , 100 ] ;
28732: LD_ADDR_VAR 0 9
28736: PUSH
28737: LD_INT 80
28739: PUSH
28740: LD_INT 65
28742: PUSH
28743: LD_INT 100
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28751: LD_VAR 0 6
28755: PPUSH
28756: CALL_OW 263
28760: PUSH
28761: LD_INT 1
28763: EQUAL
28764: IFFALSE 28799
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28766: LD_ADDR_VAR 0 10
28770: PUSH
28771: LD_VAR 0 10
28775: PUSH
28776: LD_VAR 0 6
28780: PPUSH
28781: CALL_OW 311
28785: PPUSH
28786: LD_INT 3
28788: PPUSH
28789: CALL_OW 259
28793: PUSH
28794: LD_INT 4
28796: MUL
28797: MUL
28798: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28799: LD_VAR 0 6
28803: PPUSH
28804: CALL_OW 263
28808: PUSH
28809: LD_INT 2
28811: EQUAL
28812: IFFALSE 28863
// begin j := IsControledBy ( i ) ;
28814: LD_ADDR_VAR 0 7
28818: PUSH
28819: LD_VAR 0 6
28823: PPUSH
28824: CALL_OW 312
28828: ST_TO_ADDR
// if j then
28829: LD_VAR 0 7
28833: IFFALSE 28863
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28835: LD_ADDR_VAR 0 10
28839: PUSH
28840: LD_VAR 0 10
28844: PUSH
28845: LD_VAR 0 7
28849: PPUSH
28850: LD_INT 3
28852: PPUSH
28853: CALL_OW 259
28857: PUSH
28858: LD_INT 3
28860: MUL
28861: MUL
28862: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 264
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 6
28878: PUSH
28879: LD_INT 46
28881: PUSH
28882: LD_INT 44
28884: PUSH
28885: LD_INT 47
28887: PUSH
28888: LD_INT 45
28890: PUSH
28891: LD_INT 28
28893: PUSH
28894: LD_INT 7
28896: PUSH
28897: LD_INT 27
28899: PUSH
28900: LD_INT 29
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: IN
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_INT 52
28923: PPUSH
28924: CALL_OW 321
28928: PUSH
28929: LD_INT 2
28931: EQUAL
28932: AND
28933: IFFALSE 28950
// bpoints := bpoints * 1.2 ;
28935: LD_ADDR_VAR 0 10
28939: PUSH
28940: LD_VAR 0 10
28944: PUSH
28945: LD_REAL  1.20000000000000E+0000
28948: MUL
28949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28950: LD_VAR 0 6
28954: PPUSH
28955: CALL_OW 264
28959: PUSH
28960: LD_INT 6
28962: PUSH
28963: LD_INT 46
28965: PUSH
28966: LD_INT 47
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: IN
28974: IFFALSE 28991
// bpoints := bpoints * 1.2 ;
28976: LD_ADDR_VAR 0 10
28980: PUSH
28981: LD_VAR 0 10
28985: PUSH
28986: LD_REAL  1.20000000000000E+0000
28989: MUL
28990: ST_TO_ADDR
// end ; unit_building :
28991: GO 29005
28993: LD_INT 3
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29001
28999: GO 29004
29001: POP
// ; end ;
29002: GO 29005
29004: POP
// for j = 1 to 3 do
29005: LD_ADDR_VAR 0 7
29009: PUSH
29010: DOUBLE
29011: LD_INT 1
29013: DEC
29014: ST_TO_ADDR
29015: LD_INT 3
29017: PUSH
29018: FOR_TO
29019: IFFALSE 29072
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29021: LD_ADDR_VAR 0 5
29025: PUSH
29026: LD_VAR 0 5
29030: PPUSH
29031: LD_VAR 0 7
29035: PPUSH
29036: LD_VAR 0 5
29040: PUSH
29041: LD_VAR 0 7
29045: ARRAY
29046: PUSH
29047: LD_VAR 0 9
29051: PUSH
29052: LD_VAR 0 7
29056: ARRAY
29057: PUSH
29058: LD_VAR 0 10
29062: MUL
29063: PLUS
29064: PPUSH
29065: CALL_OW 1
29069: ST_TO_ADDR
29070: GO 29018
29072: POP
29073: POP
// end ;
29074: GO 27551
29076: POP
29077: POP
// result := Replace ( result , 4 , tmp ) ;
29078: LD_ADDR_VAR 0 5
29082: PUSH
29083: LD_VAR 0 5
29087: PPUSH
29088: LD_INT 4
29090: PPUSH
29091: LD_VAR 0 8
29095: PPUSH
29096: CALL_OW 1
29100: ST_TO_ADDR
// end ;
29101: LD_VAR 0 5
29105: RET
// export function DangerAtRange ( unit , range ) ; begin
29106: LD_INT 0
29108: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 255
29123: PPUSH
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL_OW 250
29133: PPUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 251
29143: PPUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: CALL 27403 0 4
29153: ST_TO_ADDR
// end ;
29154: LD_VAR 0 3
29158: RET
// export function DangerInArea ( side , area ) ; begin
29159: LD_INT 0
29161: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29162: LD_ADDR_VAR 0 3
29166: PUSH
29167: LD_VAR 0 2
29171: PPUSH
29172: LD_INT 81
29174: PUSH
29175: LD_VAR 0 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 70
29188: ST_TO_ADDR
// end ;
29189: LD_VAR 0 3
29193: RET
// export function IsExtension ( b ) ; begin
29194: LD_INT 0
29196: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_VAR 0 1
29206: PUSH
29207: LD_INT 23
29209: PUSH
29210: LD_INT 20
29212: PUSH
29213: LD_INT 22
29215: PUSH
29216: LD_INT 17
29218: PUSH
29219: LD_INT 24
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 19
29227: PUSH
29228: LD_INT 16
29230: PUSH
29231: LD_INT 25
29233: PUSH
29234: LD_INT 18
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: IN
29249: ST_TO_ADDR
// end ;
29250: LD_VAR 0 2
29254: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29255: LD_INT 0
29257: PPUSH
29258: PPUSH
29259: PPUSH
// result := [ ] ;
29260: LD_ADDR_VAR 0 4
29264: PUSH
29265: EMPTY
29266: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29267: LD_ADDR_VAR 0 5
29271: PUSH
29272: LD_VAR 0 2
29276: PPUSH
29277: LD_INT 21
29279: PUSH
29280: LD_INT 3
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PPUSH
29287: CALL_OW 70
29291: ST_TO_ADDR
// if not tmp then
29292: LD_VAR 0 5
29296: NOT
29297: IFFALSE 29301
// exit ;
29299: GO 29365
// if checkLink then
29301: LD_VAR 0 3
29305: IFFALSE 29355
// begin for i in tmp do
29307: LD_ADDR_VAR 0 6
29311: PUSH
29312: LD_VAR 0 5
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29353
// if GetBase ( i ) <> base then
29320: LD_VAR 0 6
29324: PPUSH
29325: CALL_OW 274
29329: PUSH
29330: LD_VAR 0 1
29334: NONEQUAL
29335: IFFALSE 29351
// ComLinkToBase ( base , i ) ;
29337: LD_VAR 0 1
29341: PPUSH
29342: LD_VAR 0 6
29346: PPUSH
29347: CALL_OW 169
29351: GO 29317
29353: POP
29354: POP
// end ; result := tmp ;
29355: LD_ADDR_VAR 0 4
29359: PUSH
29360: LD_VAR 0 5
29364: ST_TO_ADDR
// end ;
29365: LD_VAR 0 4
29369: RET
// export function ComComplete ( units , b ) ; var i ; begin
29370: LD_INT 0
29372: PPUSH
29373: PPUSH
// if not units then
29374: LD_VAR 0 1
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29473
// for i in units do
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_VAR 0 1
29392: PUSH
29393: FOR_IN
29394: IFFALSE 29471
// if BuildingStatus ( b ) = bs_build then
29396: LD_VAR 0 2
29400: PPUSH
29401: CALL_OW 461
29405: PUSH
29406: LD_INT 1
29408: EQUAL
29409: IFFALSE 29469
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29411: LD_VAR 0 4
29415: PPUSH
29416: LD_STRING h
29418: PUSH
29419: LD_VAR 0 2
29423: PPUSH
29424: CALL_OW 250
29428: PUSH
29429: LD_VAR 0 2
29433: PPUSH
29434: CALL_OW 251
29438: PUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: PPUSH
29465: CALL_OW 446
29469: GO 29393
29471: POP
29472: POP
// end ;
29473: LD_VAR 0 3
29477: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29478: LD_INT 0
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29486: LD_VAR 0 1
29490: NOT
29491: PUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: CALL_OW 263
29501: PUSH
29502: LD_INT 2
29504: NONEQUAL
29505: OR
29506: IFFALSE 29510
// exit ;
29508: GO 29826
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29510: LD_ADDR_VAR 0 6
29514: PUSH
29515: LD_INT 22
29517: PUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 255
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: LD_INT 30
29537: PUSH
29538: LD_INT 36
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 34
29547: PUSH
29548: LD_INT 31
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 69
29568: ST_TO_ADDR
// if not tmp then
29569: LD_VAR 0 6
29573: NOT
29574: IFFALSE 29578
// exit ;
29576: GO 29826
// result := [ ] ;
29578: LD_ADDR_VAR 0 2
29582: PUSH
29583: EMPTY
29584: ST_TO_ADDR
// for i in tmp do
29585: LD_ADDR_VAR 0 3
29589: PUSH
29590: LD_VAR 0 6
29594: PUSH
29595: FOR_IN
29596: IFFALSE 29667
// begin t := UnitsInside ( i ) ;
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: LD_VAR 0 3
29607: PPUSH
29608: CALL_OW 313
29612: ST_TO_ADDR
// if t then
29613: LD_VAR 0 4
29617: IFFALSE 29665
// for j in t do
29619: LD_ADDR_VAR 0 7
29623: PUSH
29624: LD_VAR 0 4
29628: PUSH
29629: FOR_IN
29630: IFFALSE 29663
// result := Replace ( result , result + 1 , j ) ;
29632: LD_ADDR_VAR 0 2
29636: PUSH
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_VAR 0 2
29646: PUSH
29647: LD_INT 1
29649: PLUS
29650: PPUSH
29651: LD_VAR 0 7
29655: PPUSH
29656: CALL_OW 1
29660: ST_TO_ADDR
29661: GO 29629
29663: POP
29664: POP
// end ;
29665: GO 29595
29667: POP
29668: POP
// if not result then
29669: LD_VAR 0 2
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29826
// mech := result [ 1 ] ;
29678: LD_ADDR_VAR 0 5
29682: PUSH
29683: LD_VAR 0 2
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: ST_TO_ADDR
// if result > 1 then
29692: LD_VAR 0 2
29696: PUSH
29697: LD_INT 1
29699: GREATER
29700: IFFALSE 29812
// begin for i = 2 to result do
29702: LD_ADDR_VAR 0 3
29706: PUSH
29707: DOUBLE
29708: LD_INT 2
29710: DEC
29711: ST_TO_ADDR
29712: LD_VAR 0 2
29716: PUSH
29717: FOR_TO
29718: IFFALSE 29810
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29720: LD_ADDR_VAR 0 4
29724: PUSH
29725: LD_VAR 0 2
29729: PUSH
29730: LD_VAR 0 3
29734: ARRAY
29735: PPUSH
29736: LD_INT 3
29738: PPUSH
29739: CALL_OW 259
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: LD_VAR 0 3
29753: ARRAY
29754: PPUSH
29755: CALL_OW 432
29759: MINUS
29760: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29761: LD_VAR 0 4
29765: PUSH
29766: LD_VAR 0 5
29770: PPUSH
29771: LD_INT 3
29773: PPUSH
29774: CALL_OW 259
29778: PUSH
29779: LD_VAR 0 5
29783: PPUSH
29784: CALL_OW 432
29788: MINUS
29789: GREATEREQUAL
29790: IFFALSE 29808
// mech := result [ i ] ;
29792: LD_ADDR_VAR 0 5
29796: PUSH
29797: LD_VAR 0 2
29801: PUSH
29802: LD_VAR 0 3
29806: ARRAY
29807: ST_TO_ADDR
// end ;
29808: GO 29717
29810: POP
29811: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_VAR 0 5
29821: PPUSH
29822: CALL_OW 135
// end ;
29826: LD_VAR 0 2
29830: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29831: LD_INT 0
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
// result := [ ] ;
29846: LD_ADDR_VAR 0 7
29850: PUSH
29851: EMPTY
29852: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 266
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: IN
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 31512
// if name then
29878: LD_VAR 0 3
29882: IFFALSE 29898
// SetBName ( base_dep , name ) ;
29884: LD_VAR 0 1
29888: PPUSH
29889: LD_VAR 0 3
29893: PPUSH
29894: CALL_OW 500
// base := GetBase ( base_dep ) ;
29898: LD_ADDR_VAR 0 15
29902: PUSH
29903: LD_VAR 0 1
29907: PPUSH
29908: CALL_OW 274
29912: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29913: LD_ADDR_VAR 0 16
29917: PUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: CALL_OW 255
29927: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29928: LD_ADDR_VAR 0 17
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 248
29942: ST_TO_ADDR
// if sources then
29943: LD_VAR 0 5
29947: IFFALSE 29994
// for i = 1 to 3 do
29949: LD_ADDR_VAR 0 8
29953: PUSH
29954: DOUBLE
29955: LD_INT 1
29957: DEC
29958: ST_TO_ADDR
29959: LD_INT 3
29961: PUSH
29962: FOR_TO
29963: IFFALSE 29992
// AddResourceType ( base , i , sources [ i ] ) ;
29965: LD_VAR 0 15
29969: PPUSH
29970: LD_VAR 0 8
29974: PPUSH
29975: LD_VAR 0 5
29979: PUSH
29980: LD_VAR 0 8
29984: ARRAY
29985: PPUSH
29986: CALL_OW 276
29990: GO 29962
29992: POP
29993: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29994: LD_ADDR_VAR 0 18
29998: PUSH
29999: LD_VAR 0 15
30003: PPUSH
30004: LD_VAR 0 2
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL 29255 0 3
30016: ST_TO_ADDR
// InitHc ;
30017: CALL_OW 19
// InitUc ;
30021: CALL_OW 18
// uc_side := side ;
30025: LD_ADDR_OWVAR 20
30029: PUSH
30030: LD_VAR 0 16
30034: ST_TO_ADDR
// uc_nation := nation ;
30035: LD_ADDR_OWVAR 21
30039: PUSH
30040: LD_VAR 0 17
30044: ST_TO_ADDR
// if buildings then
30045: LD_VAR 0 18
30049: IFFALSE 31371
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30051: LD_ADDR_VAR 0 19
30055: PUSH
30056: LD_VAR 0 18
30060: PPUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 30
30066: PUSH
30067: LD_INT 29
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 30
30076: PUSH
30077: LD_INT 30
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 72
30093: ST_TO_ADDR
// if tmp then
30094: LD_VAR 0 19
30098: IFFALSE 30146
// for i in tmp do
30100: LD_ADDR_VAR 0 8
30104: PUSH
30105: LD_VAR 0 19
30109: PUSH
30110: FOR_IN
30111: IFFALSE 30144
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30113: LD_VAR 0 8
30117: PPUSH
30118: CALL_OW 250
30122: PPUSH
30123: LD_VAR 0 8
30127: PPUSH
30128: CALL_OW 251
30132: PPUSH
30133: LD_VAR 0 16
30137: PPUSH
30138: CALL_OW 441
30142: GO 30110
30144: POP
30145: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30146: LD_VAR 0 18
30150: PPUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 32
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 33
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 72
30183: IFFALSE 30271
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30185: LD_ADDR_VAR 0 8
30189: PUSH
30190: LD_VAR 0 18
30194: PPUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: LD_INT 32
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 33
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: PPUSH
30223: CALL_OW 72
30227: PUSH
30228: FOR_IN
30229: IFFALSE 30269
// begin if not GetBWeapon ( i ) then
30231: LD_VAR 0 8
30235: PPUSH
30236: CALL_OW 269
30240: NOT
30241: IFFALSE 30267
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30243: LD_VAR 0 8
30247: PPUSH
30248: LD_VAR 0 8
30252: PPUSH
30253: LD_VAR 0 2
30257: PPUSH
30258: CALL 31517 0 2
30262: PPUSH
30263: CALL_OW 431
// end ;
30267: GO 30228
30269: POP
30270: POP
// end ; for i = 1 to personel do
30271: LD_ADDR_VAR 0 8
30275: PUSH
30276: DOUBLE
30277: LD_INT 1
30279: DEC
30280: ST_TO_ADDR
30281: LD_VAR 0 6
30285: PUSH
30286: FOR_TO
30287: IFFALSE 31351
// begin if i > 4 then
30289: LD_VAR 0 8
30293: PUSH
30294: LD_INT 4
30296: GREATER
30297: IFFALSE 30301
// break ;
30299: GO 31351
// case i of 1 :
30301: LD_VAR 0 8
30305: PUSH
30306: LD_INT 1
30308: DOUBLE
30309: EQUAL
30310: IFTRUE 30314
30312: GO 30394
30314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30315: LD_ADDR_VAR 0 12
30319: PUSH
30320: LD_VAR 0 18
30324: PPUSH
30325: LD_INT 22
30327: PUSH
30328: LD_VAR 0 16
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 58
30339: PUSH
30340: EMPTY
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 30
30348: PUSH
30349: LD_INT 32
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 30
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 5
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 72
30391: ST_TO_ADDR
30392: GO 30616
30394: LD_INT 2
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30464
30402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30403: LD_ADDR_VAR 0 12
30407: PUSH
30408: LD_VAR 0 18
30412: PPUSH
30413: LD_INT 22
30415: PUSH
30416: LD_VAR 0 16
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: PUSH
30428: LD_INT 30
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 30
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PPUSH
30457: CALL_OW 72
30461: ST_TO_ADDR
30462: GO 30616
30464: LD_INT 3
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30534
30472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30473: LD_ADDR_VAR 0 12
30477: PUSH
30478: LD_VAR 0 18
30482: PPUSH
30483: LD_INT 22
30485: PUSH
30486: LD_VAR 0 16
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 30
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PPUSH
30527: CALL_OW 72
30531: ST_TO_ADDR
30532: GO 30616
30534: LD_INT 4
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30615
30542: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30543: LD_ADDR_VAR 0 12
30547: PUSH
30548: LD_VAR 0 18
30552: PPUSH
30553: LD_INT 22
30555: PUSH
30556: LD_VAR 0 16
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 30
30570: PUSH
30571: LD_INT 6
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 30
30580: PUSH
30581: LD_INT 7
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 30
30590: PUSH
30591: LD_INT 8
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PPUSH
30608: CALL_OW 72
30612: ST_TO_ADDR
30613: GO 30616
30615: POP
// if i = 1 then
30616: LD_VAR 0 8
30620: PUSH
30621: LD_INT 1
30623: EQUAL
30624: IFFALSE 30735
// begin tmp := [ ] ;
30626: LD_ADDR_VAR 0 19
30630: PUSH
30631: EMPTY
30632: ST_TO_ADDR
// for j in f do
30633: LD_ADDR_VAR 0 9
30637: PUSH
30638: LD_VAR 0 12
30642: PUSH
30643: FOR_IN
30644: IFFALSE 30717
// if GetBType ( j ) = b_bunker then
30646: LD_VAR 0 9
30650: PPUSH
30651: CALL_OW 266
30655: PUSH
30656: LD_INT 32
30658: EQUAL
30659: IFFALSE 30686
// tmp := Insert ( tmp , 1 , j ) else
30661: LD_ADDR_VAR 0 19
30665: PUSH
30666: LD_VAR 0 19
30670: PPUSH
30671: LD_INT 1
30673: PPUSH
30674: LD_VAR 0 9
30678: PPUSH
30679: CALL_OW 2
30683: ST_TO_ADDR
30684: GO 30715
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30686: LD_ADDR_VAR 0 19
30690: PUSH
30691: LD_VAR 0 19
30695: PPUSH
30696: LD_VAR 0 19
30700: PUSH
30701: LD_INT 1
30703: PLUS
30704: PPUSH
30705: LD_VAR 0 9
30709: PPUSH
30710: CALL_OW 2
30714: ST_TO_ADDR
30715: GO 30643
30717: POP
30718: POP
// if tmp then
30719: LD_VAR 0 19
30723: IFFALSE 30735
// f := tmp ;
30725: LD_ADDR_VAR 0 12
30729: PUSH
30730: LD_VAR 0 19
30734: ST_TO_ADDR
// end ; x := personel [ i ] ;
30735: LD_ADDR_VAR 0 13
30739: PUSH
30740: LD_VAR 0 6
30744: PUSH
30745: LD_VAR 0 8
30749: ARRAY
30750: ST_TO_ADDR
// if x = - 1 then
30751: LD_VAR 0 13
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: EQUAL
30760: IFFALSE 30969
// begin for j in f do
30762: LD_ADDR_VAR 0 9
30766: PUSH
30767: LD_VAR 0 12
30771: PUSH
30772: FOR_IN
30773: IFFALSE 30965
// repeat InitHc ;
30775: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30779: LD_VAR 0 9
30783: PPUSH
30784: CALL_OW 266
30788: PUSH
30789: LD_INT 5
30791: EQUAL
30792: IFFALSE 30862
// begin if UnitsInside ( j ) < 3 then
30794: LD_VAR 0 9
30798: PPUSH
30799: CALL_OW 313
30803: PUSH
30804: LD_INT 3
30806: LESS
30807: IFFALSE 30843
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30809: LD_INT 0
30811: PPUSH
30812: LD_INT 5
30814: PUSH
30815: LD_INT 8
30817: PUSH
30818: LD_INT 9
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: PUSH
30826: LD_VAR 0 17
30830: ARRAY
30831: PPUSH
30832: LD_VAR 0 4
30836: PPUSH
30837: CALL_OW 380
30841: GO 30860
// PrepareHuman ( false , i , skill ) ;
30843: LD_INT 0
30845: PPUSH
30846: LD_VAR 0 8
30850: PPUSH
30851: LD_VAR 0 4
30855: PPUSH
30856: CALL_OW 380
// end else
30860: GO 30879
// PrepareHuman ( false , i , skill ) ;
30862: LD_INT 0
30864: PPUSH
30865: LD_VAR 0 8
30869: PPUSH
30870: LD_VAR 0 4
30874: PPUSH
30875: CALL_OW 380
// un := CreateHuman ;
30879: LD_ADDR_VAR 0 14
30883: PUSH
30884: CALL_OW 44
30888: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30889: LD_ADDR_VAR 0 7
30893: PUSH
30894: LD_VAR 0 7
30898: PPUSH
30899: LD_INT 1
30901: PPUSH
30902: LD_VAR 0 14
30906: PPUSH
30907: CALL_OW 2
30911: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30912: LD_VAR 0 14
30916: PPUSH
30917: LD_VAR 0 9
30921: PPUSH
30922: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30926: LD_VAR 0 9
30930: PPUSH
30931: CALL_OW 313
30935: PUSH
30936: LD_INT 6
30938: EQUAL
30939: PUSH
30940: LD_VAR 0 9
30944: PPUSH
30945: CALL_OW 266
30949: PUSH
30950: LD_INT 32
30952: PUSH
30953: LD_INT 31
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: IN
30960: OR
30961: IFFALSE 30775
30963: GO 30772
30965: POP
30966: POP
// end else
30967: GO 31349
// for j = 1 to x do
30969: LD_ADDR_VAR 0 9
30973: PUSH
30974: DOUBLE
30975: LD_INT 1
30977: DEC
30978: ST_TO_ADDR
30979: LD_VAR 0 13
30983: PUSH
30984: FOR_TO
30985: IFFALSE 31347
// begin InitHc ;
30987: CALL_OW 19
// if not f then
30991: LD_VAR 0 12
30995: NOT
30996: IFFALSE 31085
// begin PrepareHuman ( false , i , skill ) ;
30998: LD_INT 0
31000: PPUSH
31001: LD_VAR 0 8
31005: PPUSH
31006: LD_VAR 0 4
31010: PPUSH
31011: CALL_OW 380
// un := CreateHuman ;
31015: LD_ADDR_VAR 0 14
31019: PUSH
31020: CALL_OW 44
31024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31025: LD_ADDR_VAR 0 7
31029: PUSH
31030: LD_VAR 0 7
31034: PPUSH
31035: LD_INT 1
31037: PPUSH
31038: LD_VAR 0 14
31042: PPUSH
31043: CALL_OW 2
31047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31048: LD_VAR 0 14
31052: PPUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: CALL_OW 250
31062: PPUSH
31063: LD_VAR 0 1
31067: PPUSH
31068: CALL_OW 251
31072: PPUSH
31073: LD_INT 10
31075: PPUSH
31076: LD_INT 0
31078: PPUSH
31079: CALL_OW 50
// continue ;
31083: GO 30984
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31085: LD_VAR 0 12
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: PPUSH
31094: CALL_OW 313
31098: PUSH
31099: LD_VAR 0 12
31103: PUSH
31104: LD_INT 1
31106: ARRAY
31107: PPUSH
31108: CALL_OW 266
31112: PUSH
31113: LD_INT 32
31115: PUSH
31116: LD_INT 31
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: IN
31123: AND
31124: PUSH
31125: LD_VAR 0 12
31129: PUSH
31130: LD_INT 1
31132: ARRAY
31133: PPUSH
31134: CALL_OW 313
31138: PUSH
31139: LD_INT 6
31141: EQUAL
31142: OR
31143: IFFALSE 31163
// f := Delete ( f , 1 ) ;
31145: LD_ADDR_VAR 0 12
31149: PUSH
31150: LD_VAR 0 12
31154: PPUSH
31155: LD_INT 1
31157: PPUSH
31158: CALL_OW 3
31162: ST_TO_ADDR
// if not f then
31163: LD_VAR 0 12
31167: NOT
31168: IFFALSE 31186
// begin x := x + 2 ;
31170: LD_ADDR_VAR 0 13
31174: PUSH
31175: LD_VAR 0 13
31179: PUSH
31180: LD_INT 2
31182: PLUS
31183: ST_TO_ADDR
// continue ;
31184: GO 30984
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31186: LD_VAR 0 12
31190: PUSH
31191: LD_INT 1
31193: ARRAY
31194: PPUSH
31195: CALL_OW 266
31199: PUSH
31200: LD_INT 5
31202: EQUAL
31203: IFFALSE 31277
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31205: LD_VAR 0 12
31209: PUSH
31210: LD_INT 1
31212: ARRAY
31213: PPUSH
31214: CALL_OW 313
31218: PUSH
31219: LD_INT 3
31221: LESS
31222: IFFALSE 31258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31224: LD_INT 0
31226: PPUSH
31227: LD_INT 5
31229: PUSH
31230: LD_INT 8
31232: PUSH
31233: LD_INT 9
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: PUSH
31241: LD_VAR 0 17
31245: ARRAY
31246: PPUSH
31247: LD_VAR 0 4
31251: PPUSH
31252: CALL_OW 380
31256: GO 31275
// PrepareHuman ( false , i , skill ) ;
31258: LD_INT 0
31260: PPUSH
31261: LD_VAR 0 8
31265: PPUSH
31266: LD_VAR 0 4
31270: PPUSH
31271: CALL_OW 380
// end else
31275: GO 31294
// PrepareHuman ( false , i , skill ) ;
31277: LD_INT 0
31279: PPUSH
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 4
31289: PPUSH
31290: CALL_OW 380
// un := CreateHuman ;
31294: LD_ADDR_VAR 0 14
31298: PUSH
31299: CALL_OW 44
31303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31304: LD_ADDR_VAR 0 7
31308: PUSH
31309: LD_VAR 0 7
31313: PPUSH
31314: LD_INT 1
31316: PPUSH
31317: LD_VAR 0 14
31321: PPUSH
31322: CALL_OW 2
31326: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31327: LD_VAR 0 14
31331: PPUSH
31332: LD_VAR 0 12
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PPUSH
31341: CALL_OW 52
// end ;
31345: GO 30984
31347: POP
31348: POP
// end ;
31349: GO 30286
31351: POP
31352: POP
// result := result ^ buildings ;
31353: LD_ADDR_VAR 0 7
31357: PUSH
31358: LD_VAR 0 7
31362: PUSH
31363: LD_VAR 0 18
31367: ADD
31368: ST_TO_ADDR
// end else
31369: GO 31512
// begin for i = 1 to personel do
31371: LD_ADDR_VAR 0 8
31375: PUSH
31376: DOUBLE
31377: LD_INT 1
31379: DEC
31380: ST_TO_ADDR
31381: LD_VAR 0 6
31385: PUSH
31386: FOR_TO
31387: IFFALSE 31510
// begin if i > 4 then
31389: LD_VAR 0 8
31393: PUSH
31394: LD_INT 4
31396: GREATER
31397: IFFALSE 31401
// break ;
31399: GO 31510
// x := personel [ i ] ;
31401: LD_ADDR_VAR 0 13
31405: PUSH
31406: LD_VAR 0 6
31410: PUSH
31411: LD_VAR 0 8
31415: ARRAY
31416: ST_TO_ADDR
// if x = - 1 then
31417: LD_VAR 0 13
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: EQUAL
31426: IFFALSE 31430
// continue ;
31428: GO 31386
// PrepareHuman ( false , i , skill ) ;
31430: LD_INT 0
31432: PPUSH
31433: LD_VAR 0 8
31437: PPUSH
31438: LD_VAR 0 4
31442: PPUSH
31443: CALL_OW 380
// un := CreateHuman ;
31447: LD_ADDR_VAR 0 14
31451: PUSH
31452: CALL_OW 44
31456: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31457: LD_VAR 0 14
31461: PPUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 250
31471: PPUSH
31472: LD_VAR 0 1
31476: PPUSH
31477: CALL_OW 251
31481: PPUSH
31482: LD_INT 10
31484: PPUSH
31485: LD_INT 0
31487: PPUSH
31488: CALL_OW 50
// result := result ^ un ;
31492: LD_ADDR_VAR 0 7
31496: PUSH
31497: LD_VAR 0 7
31501: PUSH
31502: LD_VAR 0 14
31506: ADD
31507: ST_TO_ADDR
// end ;
31508: GO 31386
31510: POP
31511: POP
// end ; end ;
31512: LD_VAR 0 7
31516: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
31522: PPUSH
31523: PPUSH
31524: PPUSH
31525: PPUSH
31526: PPUSH
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
// result := false ;
31535: LD_ADDR_VAR 0 3
31539: PUSH
31540: LD_INT 0
31542: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31543: LD_VAR 0 1
31547: NOT
31548: PUSH
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 266
31558: PUSH
31559: LD_INT 32
31561: PUSH
31562: LD_INT 33
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: IN
31569: NOT
31570: OR
31571: IFFALSE 31575
// exit ;
31573: GO 32684
// nat := GetNation ( tower ) ;
31575: LD_ADDR_VAR 0 12
31579: PUSH
31580: LD_VAR 0 1
31584: PPUSH
31585: CALL_OW 248
31589: ST_TO_ADDR
// side := GetSide ( tower ) ;
31590: LD_ADDR_VAR 0 16
31594: PUSH
31595: LD_VAR 0 1
31599: PPUSH
31600: CALL_OW 255
31604: ST_TO_ADDR
// x := GetX ( tower ) ;
31605: LD_ADDR_VAR 0 10
31609: PUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 250
31619: ST_TO_ADDR
// y := GetY ( tower ) ;
31620: LD_ADDR_VAR 0 11
31624: PUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 251
31634: ST_TO_ADDR
// if not x or not y then
31635: LD_VAR 0 10
31639: NOT
31640: PUSH
31641: LD_VAR 0 11
31645: NOT
31646: OR
31647: IFFALSE 31651
// exit ;
31649: GO 32684
// weapon := 0 ;
31651: LD_ADDR_VAR 0 18
31655: PUSH
31656: LD_INT 0
31658: ST_TO_ADDR
// fac_list := [ ] ;
31659: LD_ADDR_VAR 0 17
31663: PUSH
31664: EMPTY
31665: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31666: LD_ADDR_VAR 0 6
31670: PUSH
31671: LD_VAR 0 1
31675: PPUSH
31676: CALL_OW 274
31680: PPUSH
31681: LD_VAR 0 2
31685: PPUSH
31686: LD_INT 0
31688: PPUSH
31689: CALL 29255 0 3
31693: PPUSH
31694: LD_INT 30
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PPUSH
31704: CALL_OW 72
31708: ST_TO_ADDR
// if not factories then
31709: LD_VAR 0 6
31713: NOT
31714: IFFALSE 31718
// exit ;
31716: GO 32684
// for i in factories do
31718: LD_ADDR_VAR 0 8
31722: PUSH
31723: LD_VAR 0 6
31727: PUSH
31728: FOR_IN
31729: IFFALSE 31754
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31731: LD_ADDR_VAR 0 17
31735: PUSH
31736: LD_VAR 0 17
31740: PUSH
31741: LD_VAR 0 8
31745: PPUSH
31746: CALL_OW 478
31750: UNION
31751: ST_TO_ADDR
31752: GO 31728
31754: POP
31755: POP
// if not fac_list then
31756: LD_VAR 0 17
31760: NOT
31761: IFFALSE 31765
// exit ;
31763: GO 32684
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31765: LD_ADDR_VAR 0 5
31769: PUSH
31770: LD_INT 4
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: LD_INT 9
31778: PUSH
31779: LD_INT 10
31781: PUSH
31782: LD_INT 6
31784: PUSH
31785: LD_INT 7
31787: PUSH
31788: LD_INT 11
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 27
31802: PUSH
31803: LD_INT 28
31805: PUSH
31806: LD_INT 26
31808: PUSH
31809: LD_INT 30
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 43
31820: PUSH
31821: LD_INT 44
31823: PUSH
31824: LD_INT 46
31826: PUSH
31827: LD_INT 45
31829: PUSH
31830: LD_INT 47
31832: PUSH
31833: LD_INT 49
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: PUSH
31849: LD_VAR 0 12
31853: ARRAY
31854: ST_TO_ADDR
// list := list isect fac_list ;
31855: LD_ADDR_VAR 0 5
31859: PUSH
31860: LD_VAR 0 5
31864: PUSH
31865: LD_VAR 0 17
31869: ISECT
31870: ST_TO_ADDR
// if not list then
31871: LD_VAR 0 5
31875: NOT
31876: IFFALSE 31880
// exit ;
31878: GO 32684
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31880: LD_VAR 0 12
31884: PUSH
31885: LD_INT 3
31887: EQUAL
31888: PUSH
31889: LD_INT 49
31891: PUSH
31892: LD_VAR 0 5
31896: IN
31897: AND
31898: PUSH
31899: LD_INT 31
31901: PPUSH
31902: LD_VAR 0 16
31906: PPUSH
31907: CALL_OW 321
31911: PUSH
31912: LD_INT 2
31914: EQUAL
31915: AND
31916: IFFALSE 31976
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31918: LD_INT 22
31920: PUSH
31921: LD_VAR 0 16
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 35
31932: PUSH
31933: LD_INT 49
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 91
31942: PUSH
31943: LD_VAR 0 1
31947: PUSH
31948: LD_INT 10
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: PPUSH
31961: CALL_OW 69
31965: NOT
31966: IFFALSE 31976
// weapon := ru_time_lapser ;
31968: LD_ADDR_VAR 0 18
31972: PUSH
31973: LD_INT 49
31975: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31976: LD_VAR 0 12
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: IN
31991: PUSH
31992: LD_INT 11
31994: PUSH
31995: LD_VAR 0 5
31999: IN
32000: PUSH
32001: LD_INT 30
32003: PUSH
32004: LD_VAR 0 5
32008: IN
32009: OR
32010: AND
32011: PUSH
32012: LD_INT 6
32014: PPUSH
32015: LD_VAR 0 16
32019: PPUSH
32020: CALL_OW 321
32024: PUSH
32025: LD_INT 2
32027: EQUAL
32028: AND
32029: IFFALSE 32194
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32031: LD_INT 22
32033: PUSH
32034: LD_VAR 0 16
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 35
32048: PUSH
32049: LD_INT 11
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 35
32058: PUSH
32059: LD_INT 30
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 91
32073: PUSH
32074: LD_VAR 0 1
32078: PUSH
32079: LD_INT 18
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: PPUSH
32092: CALL_OW 69
32096: NOT
32097: PUSH
32098: LD_INT 22
32100: PUSH
32101: LD_VAR 0 16
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 30
32115: PUSH
32116: LD_INT 32
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 30
32125: PUSH
32126: LD_INT 33
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 91
32140: PUSH
32141: LD_VAR 0 1
32145: PUSH
32146: LD_INT 12
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: PPUSH
32162: CALL_OW 69
32166: PUSH
32167: LD_INT 2
32169: GREATER
32170: AND
32171: IFFALSE 32194
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32173: LD_ADDR_VAR 0 18
32177: PUSH
32178: LD_INT 11
32180: PUSH
32181: LD_INT 30
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_VAR 0 12
32192: ARRAY
32193: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32194: LD_VAR 0 18
32198: NOT
32199: PUSH
32200: LD_INT 40
32202: PPUSH
32203: LD_VAR 0 16
32207: PPUSH
32208: CALL_OW 321
32212: PUSH
32213: LD_INT 2
32215: EQUAL
32216: AND
32217: PUSH
32218: LD_INT 7
32220: PUSH
32221: LD_VAR 0 5
32225: IN
32226: PUSH
32227: LD_INT 28
32229: PUSH
32230: LD_VAR 0 5
32234: IN
32235: OR
32236: PUSH
32237: LD_INT 45
32239: PUSH
32240: LD_VAR 0 5
32244: IN
32245: OR
32246: AND
32247: IFFALSE 32501
// begin hex := GetHexInfo ( x , y ) ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 10
32258: PPUSH
32259: LD_VAR 0 11
32263: PPUSH
32264: CALL_OW 546
32268: ST_TO_ADDR
// if hex [ 1 ] then
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: IFFALSE 32281
// exit ;
32279: GO 32684
// height := hex [ 2 ] ;
32281: LD_ADDR_VAR 0 15
32285: PUSH
32286: LD_VAR 0 4
32290: PUSH
32291: LD_INT 2
32293: ARRAY
32294: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32295: LD_ADDR_VAR 0 14
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
// for i in tmp do
32318: LD_ADDR_VAR 0 8
32322: PUSH
32323: LD_VAR 0 14
32327: PUSH
32328: FOR_IN
32329: IFFALSE 32499
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32331: LD_ADDR_VAR 0 9
32335: PUSH
32336: LD_VAR 0 10
32340: PPUSH
32341: LD_VAR 0 8
32345: PPUSH
32346: LD_INT 5
32348: PPUSH
32349: CALL_OW 272
32353: PUSH
32354: LD_VAR 0 11
32358: PPUSH
32359: LD_VAR 0 8
32363: PPUSH
32364: LD_INT 5
32366: PPUSH
32367: CALL_OW 273
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32376: LD_VAR 0 9
32380: PUSH
32381: LD_INT 1
32383: ARRAY
32384: PPUSH
32385: LD_VAR 0 9
32389: PUSH
32390: LD_INT 2
32392: ARRAY
32393: PPUSH
32394: CALL_OW 488
32398: IFFALSE 32497
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32400: LD_ADDR_VAR 0 4
32404: PUSH
32405: LD_VAR 0 9
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 9
32418: PUSH
32419: LD_INT 2
32421: ARRAY
32422: PPUSH
32423: CALL_OW 546
32427: ST_TO_ADDR
// if hex [ 1 ] then
32428: LD_VAR 0 4
32432: PUSH
32433: LD_INT 1
32435: ARRAY
32436: IFFALSE 32440
// continue ;
32438: GO 32328
// h := hex [ 2 ] ;
32440: LD_ADDR_VAR 0 13
32444: PUSH
32445: LD_VAR 0 4
32449: PUSH
32450: LD_INT 2
32452: ARRAY
32453: ST_TO_ADDR
// if h + 7 < height then
32454: LD_VAR 0 13
32458: PUSH
32459: LD_INT 7
32461: PLUS
32462: PUSH
32463: LD_VAR 0 15
32467: LESS
32468: IFFALSE 32497
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32470: LD_ADDR_VAR 0 18
32474: PUSH
32475: LD_INT 7
32477: PUSH
32478: LD_INT 28
32480: PUSH
32481: LD_INT 45
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: PUSH
32489: LD_VAR 0 12
32493: ARRAY
32494: ST_TO_ADDR
// break ;
32495: GO 32499
// end ; end ; end ;
32497: GO 32328
32499: POP
32500: POP
// end ; if not weapon then
32501: LD_VAR 0 18
32505: NOT
32506: IFFALSE 32566
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32508: LD_ADDR_VAR 0 5
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_INT 11
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_INT 49
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: DIFF
32532: ST_TO_ADDR
// if not list then
32533: LD_VAR 0 5
32537: NOT
32538: IFFALSE 32542
// exit ;
32540: GO 32684
// weapon := list [ rand ( 1 , list ) ] ;
32542: LD_ADDR_VAR 0 18
32546: PUSH
32547: LD_VAR 0 5
32551: PUSH
32552: LD_INT 1
32554: PPUSH
32555: LD_VAR 0 5
32559: PPUSH
32560: CALL_OW 12
32564: ARRAY
32565: ST_TO_ADDR
// end ; if weapon then
32566: LD_VAR 0 18
32570: IFFALSE 32684
// begin tmp := CostOfWeapon ( weapon ) ;
32572: LD_ADDR_VAR 0 14
32576: PUSH
32577: LD_VAR 0 18
32581: PPUSH
32582: CALL_OW 451
32586: ST_TO_ADDR
// j := GetBase ( tower ) ;
32587: LD_ADDR_VAR 0 9
32591: PUSH
32592: LD_VAR 0 1
32596: PPUSH
32597: CALL_OW 274
32601: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32602: LD_VAR 0 9
32606: PPUSH
32607: LD_INT 1
32609: PPUSH
32610: CALL_OW 275
32614: PUSH
32615: LD_VAR 0 14
32619: PUSH
32620: LD_INT 1
32622: ARRAY
32623: GREATEREQUAL
32624: PUSH
32625: LD_VAR 0 9
32629: PPUSH
32630: LD_INT 2
32632: PPUSH
32633: CALL_OW 275
32637: PUSH
32638: LD_VAR 0 14
32642: PUSH
32643: LD_INT 2
32645: ARRAY
32646: GREATEREQUAL
32647: AND
32648: PUSH
32649: LD_VAR 0 9
32653: PPUSH
32654: LD_INT 3
32656: PPUSH
32657: CALL_OW 275
32661: PUSH
32662: LD_VAR 0 14
32666: PUSH
32667: LD_INT 3
32669: ARRAY
32670: GREATEREQUAL
32671: AND
32672: IFFALSE 32684
// result := weapon ;
32674: LD_ADDR_VAR 0 3
32678: PUSH
32679: LD_VAR 0 18
32683: ST_TO_ADDR
// end ; end ;
32684: LD_VAR 0 3
32688: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32689: LD_INT 0
32691: PPUSH
32692: PPUSH
// result := true ;
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 1
32700: ST_TO_ADDR
// if array1 = array2 then
32701: LD_VAR 0 1
32705: PUSH
32706: LD_VAR 0 2
32710: EQUAL
32711: IFFALSE 32771
// begin for i = 1 to array1 do
32713: LD_ADDR_VAR 0 4
32717: PUSH
32718: DOUBLE
32719: LD_INT 1
32721: DEC
32722: ST_TO_ADDR
32723: LD_VAR 0 1
32727: PUSH
32728: FOR_TO
32729: IFFALSE 32767
// if array1 [ i ] <> array2 [ i ] then
32731: LD_VAR 0 1
32735: PUSH
32736: LD_VAR 0 4
32740: ARRAY
32741: PUSH
32742: LD_VAR 0 2
32746: PUSH
32747: LD_VAR 0 4
32751: ARRAY
32752: NONEQUAL
32753: IFFALSE 32765
// begin result := false ;
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_INT 0
32762: ST_TO_ADDR
// break ;
32763: GO 32767
// end ;
32765: GO 32728
32767: POP
32768: POP
// end else
32769: GO 32779
// result := false ;
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: LD_INT 0
32778: ST_TO_ADDR
// end ;
32779: LD_VAR 0 3
32783: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32784: LD_INT 0
32786: PPUSH
32787: PPUSH
// if not array1 or not array2 then
32788: LD_VAR 0 1
32792: NOT
32793: PUSH
32794: LD_VAR 0 2
32798: NOT
32799: OR
32800: IFFALSE 32804
// exit ;
32802: GO 32868
// result := true ;
32804: LD_ADDR_VAR 0 3
32808: PUSH
32809: LD_INT 1
32811: ST_TO_ADDR
// for i = 1 to array1 do
32812: LD_ADDR_VAR 0 4
32816: PUSH
32817: DOUBLE
32818: LD_INT 1
32820: DEC
32821: ST_TO_ADDR
32822: LD_VAR 0 1
32826: PUSH
32827: FOR_TO
32828: IFFALSE 32866
// if array1 [ i ] <> array2 [ i ] then
32830: LD_VAR 0 1
32834: PUSH
32835: LD_VAR 0 4
32839: ARRAY
32840: PUSH
32841: LD_VAR 0 2
32845: PUSH
32846: LD_VAR 0 4
32850: ARRAY
32851: NONEQUAL
32852: IFFALSE 32864
// begin result := false ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_INT 0
32861: ST_TO_ADDR
// break ;
32862: GO 32866
// end ;
32864: GO 32827
32866: POP
32867: POP
// end ;
32868: LD_VAR 0 3
32872: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32873: LD_INT 0
32875: PPUSH
32876: PPUSH
32877: PPUSH
// pom := GetBase ( fac ) ;
32878: LD_ADDR_VAR 0 5
32882: PUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 274
32892: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32893: LD_ADDR_VAR 0 4
32897: PUSH
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 1
32905: ARRAY
32906: PPUSH
32907: LD_VAR 0 2
32911: PUSH
32912: LD_INT 2
32914: ARRAY
32915: PPUSH
32916: LD_VAR 0 2
32920: PUSH
32921: LD_INT 3
32923: ARRAY
32924: PPUSH
32925: LD_VAR 0 2
32929: PUSH
32930: LD_INT 4
32932: ARRAY
32933: PPUSH
32934: CALL_OW 449
32938: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_VAR 0 5
32948: PPUSH
32949: LD_INT 1
32951: PPUSH
32952: CALL_OW 275
32956: PUSH
32957: LD_VAR 0 4
32961: PUSH
32962: LD_INT 1
32964: ARRAY
32965: GREATEREQUAL
32966: PUSH
32967: LD_VAR 0 5
32971: PPUSH
32972: LD_INT 2
32974: PPUSH
32975: CALL_OW 275
32979: PUSH
32980: LD_VAR 0 4
32984: PUSH
32985: LD_INT 2
32987: ARRAY
32988: GREATEREQUAL
32989: AND
32990: PUSH
32991: LD_VAR 0 5
32995: PPUSH
32996: LD_INT 3
32998: PPUSH
32999: CALL_OW 275
33003: PUSH
33004: LD_VAR 0 4
33008: PUSH
33009: LD_INT 3
33011: ARRAY
33012: GREATEREQUAL
33013: AND
33014: ST_TO_ADDR
// end ;
33015: LD_VAR 0 3
33019: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33020: LD_INT 0
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
// pom := GetBase ( building ) ;
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_VAR 0 1
33035: PPUSH
33036: CALL_OW 274
33040: ST_TO_ADDR
// if not pom then
33041: LD_VAR 0 3
33045: NOT
33046: IFFALSE 33050
// exit ;
33048: GO 33220
// btype := GetBType ( building ) ;
33050: LD_ADDR_VAR 0 5
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: CALL_OW 266
33064: ST_TO_ADDR
// if btype = b_armoury then
33065: LD_VAR 0 5
33069: PUSH
33070: LD_INT 4
33072: EQUAL
33073: IFFALSE 33083
// btype := b_barracks ;
33075: LD_ADDR_VAR 0 5
33079: PUSH
33080: LD_INT 5
33082: ST_TO_ADDR
// if btype = b_depot then
33083: LD_VAR 0 5
33087: PUSH
33088: LD_INT 0
33090: EQUAL
33091: IFFALSE 33101
// btype := b_warehouse ;
33093: LD_ADDR_VAR 0 5
33097: PUSH
33098: LD_INT 1
33100: ST_TO_ADDR
// if btype = b_workshop then
33101: LD_VAR 0 5
33105: PUSH
33106: LD_INT 2
33108: EQUAL
33109: IFFALSE 33119
// btype := b_factory ;
33111: LD_ADDR_VAR 0 5
33115: PUSH
33116: LD_INT 3
33118: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33119: LD_ADDR_VAR 0 4
33123: PUSH
33124: LD_VAR 0 5
33128: PPUSH
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL_OW 248
33138: PPUSH
33139: CALL_OW 450
33143: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33144: LD_ADDR_VAR 0 2
33148: PUSH
33149: LD_VAR 0 3
33153: PPUSH
33154: LD_INT 1
33156: PPUSH
33157: CALL_OW 275
33161: PUSH
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: GREATEREQUAL
33171: PUSH
33172: LD_VAR 0 3
33176: PPUSH
33177: LD_INT 2
33179: PPUSH
33180: CALL_OW 275
33184: PUSH
33185: LD_VAR 0 4
33189: PUSH
33190: LD_INT 2
33192: ARRAY
33193: GREATEREQUAL
33194: AND
33195: PUSH
33196: LD_VAR 0 3
33200: PPUSH
33201: LD_INT 3
33203: PPUSH
33204: CALL_OW 275
33208: PUSH
33209: LD_VAR 0 4
33213: PUSH
33214: LD_INT 3
33216: ARRAY
33217: GREATEREQUAL
33218: AND
33219: ST_TO_ADDR
// end ;
33220: LD_VAR 0 2
33224: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
// pom := GetBase ( building ) ;
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL_OW 274
33244: ST_TO_ADDR
// if not pom then
33245: LD_VAR 0 4
33249: NOT
33250: IFFALSE 33254
// exit ;
33252: GO 33355
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: LD_VAR 0 2
33263: PPUSH
33264: LD_VAR 0 1
33268: PPUSH
33269: CALL_OW 248
33273: PPUSH
33274: CALL_OW 450
33278: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33279: LD_ADDR_VAR 0 3
33283: PUSH
33284: LD_VAR 0 4
33288: PPUSH
33289: LD_INT 1
33291: PPUSH
33292: CALL_OW 275
33296: PUSH
33297: LD_VAR 0 5
33301: PUSH
33302: LD_INT 1
33304: ARRAY
33305: GREATEREQUAL
33306: PUSH
33307: LD_VAR 0 4
33311: PPUSH
33312: LD_INT 2
33314: PPUSH
33315: CALL_OW 275
33319: PUSH
33320: LD_VAR 0 5
33324: PUSH
33325: LD_INT 2
33327: ARRAY
33328: GREATEREQUAL
33329: AND
33330: PUSH
33331: LD_VAR 0 4
33335: PPUSH
33336: LD_INT 3
33338: PPUSH
33339: CALL_OW 275
33343: PUSH
33344: LD_VAR 0 5
33348: PUSH
33349: LD_INT 3
33351: ARRAY
33352: GREATEREQUAL
33353: AND
33354: ST_TO_ADDR
// end ;
33355: LD_VAR 0 3
33359: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33360: LD_INT 0
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
// result := false ;
33373: LD_ADDR_VAR 0 8
33377: PUSH
33378: LD_INT 0
33380: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33381: LD_VAR 0 5
33385: NOT
33386: PUSH
33387: LD_VAR 0 1
33391: NOT
33392: OR
33393: PUSH
33394: LD_VAR 0 2
33398: NOT
33399: OR
33400: PUSH
33401: LD_VAR 0 3
33405: NOT
33406: OR
33407: IFFALSE 33411
// exit ;
33409: GO 34225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33411: LD_ADDR_VAR 0 14
33415: PUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: LD_VAR 0 2
33425: PPUSH
33426: LD_VAR 0 3
33430: PPUSH
33431: LD_VAR 0 4
33435: PPUSH
33436: LD_VAR 0 5
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: CALL_OW 248
33449: PPUSH
33450: LD_INT 0
33452: PPUSH
33453: CALL 35462 0 6
33457: ST_TO_ADDR
// if not hexes then
33458: LD_VAR 0 14
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 34225
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33467: LD_ADDR_VAR 0 17
33471: PUSH
33472: LD_VAR 0 5
33476: PPUSH
33477: LD_INT 22
33479: PUSH
33480: LD_VAR 0 13
33484: PPUSH
33485: CALL_OW 255
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: LD_INT 30
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 30
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PPUSH
33526: CALL_OW 72
33530: ST_TO_ADDR
// for i = 1 to hexes do
33531: LD_ADDR_VAR 0 9
33535: PUSH
33536: DOUBLE
33537: LD_INT 1
33539: DEC
33540: ST_TO_ADDR
33541: LD_VAR 0 14
33545: PUSH
33546: FOR_TO
33547: IFFALSE 34223
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33549: LD_ADDR_VAR 0 13
33553: PUSH
33554: LD_VAR 0 14
33558: PUSH
33559: LD_VAR 0 9
33563: ARRAY
33564: PUSH
33565: LD_INT 1
33567: ARRAY
33568: PPUSH
33569: LD_VAR 0 14
33573: PUSH
33574: LD_VAR 0 9
33578: ARRAY
33579: PUSH
33580: LD_INT 2
33582: ARRAY
33583: PPUSH
33584: CALL_OW 428
33588: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33589: LD_VAR 0 14
33593: PUSH
33594: LD_VAR 0 9
33598: ARRAY
33599: PUSH
33600: LD_INT 1
33602: ARRAY
33603: PPUSH
33604: LD_VAR 0 14
33608: PUSH
33609: LD_VAR 0 9
33613: ARRAY
33614: PUSH
33615: LD_INT 2
33617: ARRAY
33618: PPUSH
33619: CALL_OW 351
33623: PUSH
33624: LD_VAR 0 14
33628: PUSH
33629: LD_VAR 0 9
33633: ARRAY
33634: PUSH
33635: LD_INT 1
33637: ARRAY
33638: PPUSH
33639: LD_VAR 0 14
33643: PUSH
33644: LD_VAR 0 9
33648: ARRAY
33649: PUSH
33650: LD_INT 2
33652: ARRAY
33653: PPUSH
33654: CALL_OW 488
33658: NOT
33659: OR
33660: PUSH
33661: LD_VAR 0 13
33665: PPUSH
33666: CALL_OW 247
33670: PUSH
33671: LD_INT 3
33673: EQUAL
33674: OR
33675: IFFALSE 33681
// exit ;
33677: POP
33678: POP
33679: GO 34225
// if not tmp then
33681: LD_VAR 0 13
33685: NOT
33686: IFFALSE 33690
// continue ;
33688: GO 33546
// result := true ;
33690: LD_ADDR_VAR 0 8
33694: PUSH
33695: LD_INT 1
33697: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33698: LD_VAR 0 6
33702: PUSH
33703: LD_VAR 0 13
33707: PPUSH
33708: CALL_OW 247
33712: PUSH
33713: LD_INT 2
33715: EQUAL
33716: AND
33717: PUSH
33718: LD_VAR 0 13
33722: PPUSH
33723: CALL_OW 263
33727: PUSH
33728: LD_INT 1
33730: EQUAL
33731: AND
33732: IFFALSE 33896
// begin if IsDrivenBy ( tmp ) then
33734: LD_VAR 0 13
33738: PPUSH
33739: CALL_OW 311
33743: IFFALSE 33747
// continue ;
33745: GO 33546
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33747: LD_VAR 0 6
33751: PPUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 60
33757: PUSH
33758: EMPTY
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 55
33770: PUSH
33771: EMPTY
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PPUSH
33782: CALL_OW 72
33786: IFFALSE 33894
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33788: LD_ADDR_VAR 0 18
33792: PUSH
33793: LD_VAR 0 6
33797: PPUSH
33798: LD_INT 3
33800: PUSH
33801: LD_INT 60
33803: PUSH
33804: EMPTY
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 55
33816: PUSH
33817: EMPTY
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PPUSH
33828: CALL_OW 72
33832: PUSH
33833: LD_INT 1
33835: ARRAY
33836: ST_TO_ADDR
// if IsInUnit ( driver ) then
33837: LD_VAR 0 18
33841: PPUSH
33842: CALL_OW 310
33846: IFFALSE 33857
// ComExit ( driver ) ;
33848: LD_VAR 0 18
33852: PPUSH
33853: CALL 58646 0 1
// AddComEnterUnit ( driver , tmp ) ;
33857: LD_VAR 0 18
33861: PPUSH
33862: LD_VAR 0 13
33866: PPUSH
33867: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33871: LD_VAR 0 18
33875: PPUSH
33876: LD_VAR 0 7
33880: PPUSH
33881: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33885: LD_VAR 0 18
33889: PPUSH
33890: CALL_OW 181
// end ; continue ;
33894: GO 33546
// end ; if not cleaners or not tmp in cleaners then
33896: LD_VAR 0 6
33900: NOT
33901: PUSH
33902: LD_VAR 0 13
33906: PUSH
33907: LD_VAR 0 6
33911: IN
33912: NOT
33913: OR
33914: IFFALSE 34221
// begin if dep then
33916: LD_VAR 0 17
33920: IFFALSE 34056
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33922: LD_ADDR_VAR 0 16
33926: PUSH
33927: LD_VAR 0 17
33931: PUSH
33932: LD_INT 1
33934: ARRAY
33935: PPUSH
33936: CALL_OW 250
33940: PPUSH
33941: LD_VAR 0 17
33945: PUSH
33946: LD_INT 1
33948: ARRAY
33949: PPUSH
33950: CALL_OW 254
33954: PPUSH
33955: LD_INT 5
33957: PPUSH
33958: CALL_OW 272
33962: PUSH
33963: LD_VAR 0 17
33967: PUSH
33968: LD_INT 1
33970: ARRAY
33971: PPUSH
33972: CALL_OW 251
33976: PPUSH
33977: LD_VAR 0 17
33981: PUSH
33982: LD_INT 1
33984: ARRAY
33985: PPUSH
33986: CALL_OW 254
33990: PPUSH
33991: LD_INT 5
33993: PPUSH
33994: CALL_OW 273
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34003: LD_VAR 0 16
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: PPUSH
34012: LD_VAR 0 16
34016: PUSH
34017: LD_INT 2
34019: ARRAY
34020: PPUSH
34021: CALL_OW 488
34025: IFFALSE 34056
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34027: LD_VAR 0 13
34031: PPUSH
34032: LD_VAR 0 16
34036: PUSH
34037: LD_INT 1
34039: ARRAY
34040: PPUSH
34041: LD_VAR 0 16
34045: PUSH
34046: LD_INT 2
34048: ARRAY
34049: PPUSH
34050: CALL_OW 111
// continue ;
34054: GO 33546
// end ; end ; r := GetDir ( tmp ) ;
34056: LD_ADDR_VAR 0 15
34060: PUSH
34061: LD_VAR 0 13
34065: PPUSH
34066: CALL_OW 254
34070: ST_TO_ADDR
// if r = 5 then
34071: LD_VAR 0 15
34075: PUSH
34076: LD_INT 5
34078: EQUAL
34079: IFFALSE 34089
// r := 0 ;
34081: LD_ADDR_VAR 0 15
34085: PUSH
34086: LD_INT 0
34088: ST_TO_ADDR
// for j = r to 5 do
34089: LD_ADDR_VAR 0 10
34093: PUSH
34094: DOUBLE
34095: LD_VAR 0 15
34099: DEC
34100: ST_TO_ADDR
34101: LD_INT 5
34103: PUSH
34104: FOR_TO
34105: IFFALSE 34219
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34107: LD_ADDR_VAR 0 11
34111: PUSH
34112: LD_VAR 0 13
34116: PPUSH
34117: CALL_OW 250
34121: PPUSH
34122: LD_VAR 0 10
34126: PPUSH
34127: LD_INT 2
34129: PPUSH
34130: CALL_OW 272
34134: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34135: LD_ADDR_VAR 0 12
34139: PUSH
34140: LD_VAR 0 13
34144: PPUSH
34145: CALL_OW 251
34149: PPUSH
34150: LD_VAR 0 10
34154: PPUSH
34155: LD_INT 2
34157: PPUSH
34158: CALL_OW 273
34162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34163: LD_VAR 0 11
34167: PPUSH
34168: LD_VAR 0 12
34172: PPUSH
34173: CALL_OW 488
34177: PUSH
34178: LD_VAR 0 11
34182: PPUSH
34183: LD_VAR 0 12
34187: PPUSH
34188: CALL_OW 428
34192: NOT
34193: AND
34194: IFFALSE 34217
// begin ComMoveXY ( tmp , _x , _y ) ;
34196: LD_VAR 0 13
34200: PPUSH
34201: LD_VAR 0 11
34205: PPUSH
34206: LD_VAR 0 12
34210: PPUSH
34211: CALL_OW 111
// break ;
34215: GO 34219
// end ; end ;
34217: GO 34104
34219: POP
34220: POP
// end ; end ;
34221: GO 33546
34223: POP
34224: POP
// end ;
34225: LD_VAR 0 8
34229: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34230: LD_INT 0
34232: PPUSH
// result := true ;
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 1
34240: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34241: LD_VAR 0 2
34245: PUSH
34246: LD_INT 24
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34260
34252: LD_INT 33
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34260
34258: GO 34285
34260: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34261: LD_ADDR_VAR 0 3
34265: PUSH
34266: LD_INT 32
34268: PPUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 321
34278: PUSH
34279: LD_INT 2
34281: EQUAL
34282: ST_TO_ADDR
34283: GO 34605
34285: LD_INT 20
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34318
34293: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 6
34301: PPUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 321
34311: PUSH
34312: LD_INT 2
34314: EQUAL
34315: ST_TO_ADDR
34316: GO 34605
34318: LD_INT 22
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34332
34324: LD_INT 36
34326: DOUBLE
34327: EQUAL
34328: IFTRUE 34332
34330: GO 34357
34332: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 15
34340: PPUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 321
34350: PUSH
34351: LD_INT 2
34353: EQUAL
34354: ST_TO_ADDR
34355: GO 34605
34357: LD_INT 30
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34390
34365: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 20
34373: PPUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 321
34383: PUSH
34384: LD_INT 2
34386: EQUAL
34387: ST_TO_ADDR
34388: GO 34605
34390: LD_INT 28
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34404
34396: LD_INT 21
34398: DOUBLE
34399: EQUAL
34400: IFTRUE 34404
34402: GO 34429
34404: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 21
34412: PPUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 321
34422: PUSH
34423: LD_INT 2
34425: EQUAL
34426: ST_TO_ADDR
34427: GO 34605
34429: LD_INT 16
34431: DOUBLE
34432: EQUAL
34433: IFTRUE 34437
34435: GO 34464
34437: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_EXP 89
34447: PPUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 321
34457: PUSH
34458: LD_INT 2
34460: EQUAL
34461: ST_TO_ADDR
34462: GO 34605
34464: LD_INT 19
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34478
34470: LD_INT 23
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34478
34476: GO 34505
34478: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34479: LD_ADDR_VAR 0 3
34483: PUSH
34484: LD_EXP 88
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 321
34498: PUSH
34499: LD_INT 2
34501: EQUAL
34502: ST_TO_ADDR
34503: GO 34605
34505: LD_INT 17
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34538
34513: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 39
34521: PPUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 321
34531: PUSH
34532: LD_INT 2
34534: EQUAL
34535: ST_TO_ADDR
34536: GO 34605
34538: LD_INT 18
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34571
34546: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 40
34554: PPUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 321
34564: PUSH
34565: LD_INT 2
34567: EQUAL
34568: ST_TO_ADDR
34569: GO 34605
34571: LD_INT 27
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34604
34579: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 35
34587: PPUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 321
34597: PUSH
34598: LD_INT 2
34600: EQUAL
34601: ST_TO_ADDR
34602: GO 34605
34604: POP
// end ;
34605: LD_VAR 0 3
34609: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34610: LD_INT 0
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
// result := false ;
34623: LD_ADDR_VAR 0 6
34627: PUSH
34628: LD_INT 0
34630: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34631: LD_VAR 0 1
34635: NOT
34636: PUSH
34637: LD_VAR 0 1
34641: PPUSH
34642: CALL_OW 266
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: IN
34657: NOT
34658: OR
34659: PUSH
34660: LD_VAR 0 2
34664: NOT
34665: OR
34666: PUSH
34667: LD_VAR 0 5
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: LD_INT 3
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: LD_INT 5
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: IN
34698: NOT
34699: OR
34700: PUSH
34701: LD_VAR 0 3
34705: PPUSH
34706: LD_VAR 0 4
34710: PPUSH
34711: CALL_OW 488
34715: NOT
34716: OR
34717: IFFALSE 34721
// exit ;
34719: GO 35457
// side := GetSide ( depot ) ;
34721: LD_ADDR_VAR 0 9
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 255
34735: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34736: LD_VAR 0 9
34740: PPUSH
34741: LD_VAR 0 2
34745: PPUSH
34746: CALL 34230 0 2
34750: NOT
34751: IFFALSE 34755
// exit ;
34753: GO 35457
// pom := GetBase ( depot ) ;
34755: LD_ADDR_VAR 0 10
34759: PUSH
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 274
34769: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34770: LD_ADDR_VAR 0 11
34774: PUSH
34775: LD_VAR 0 2
34779: PPUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 248
34789: PPUSH
34790: CALL_OW 450
34794: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34795: LD_VAR 0 10
34799: PPUSH
34800: LD_INT 1
34802: PPUSH
34803: CALL_OW 275
34807: PUSH
34808: LD_VAR 0 11
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: GREATEREQUAL
34817: PUSH
34818: LD_VAR 0 10
34822: PPUSH
34823: LD_INT 2
34825: PPUSH
34826: CALL_OW 275
34830: PUSH
34831: LD_VAR 0 11
34835: PUSH
34836: LD_INT 2
34838: ARRAY
34839: GREATEREQUAL
34840: AND
34841: PUSH
34842: LD_VAR 0 10
34846: PPUSH
34847: LD_INT 3
34849: PPUSH
34850: CALL_OW 275
34854: PUSH
34855: LD_VAR 0 11
34859: PUSH
34860: LD_INT 3
34862: ARRAY
34863: GREATEREQUAL
34864: AND
34865: NOT
34866: IFFALSE 34870
// exit ;
34868: GO 35457
// if GetBType ( depot ) = b_depot then
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 266
34879: PUSH
34880: LD_INT 0
34882: EQUAL
34883: IFFALSE 34895
// dist := 28 else
34885: LD_ADDR_VAR 0 14
34889: PUSH
34890: LD_INT 28
34892: ST_TO_ADDR
34893: GO 34903
// dist := 36 ;
34895: LD_ADDR_VAR 0 14
34899: PUSH
34900: LD_INT 36
34902: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34903: LD_VAR 0 1
34907: PPUSH
34908: LD_VAR 0 3
34912: PPUSH
34913: LD_VAR 0 4
34917: PPUSH
34918: CALL_OW 297
34922: PUSH
34923: LD_VAR 0 14
34927: GREATER
34928: IFFALSE 34932
// exit ;
34930: GO 35457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34932: LD_ADDR_VAR 0 12
34936: PUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: LD_VAR 0 3
34946: PPUSH
34947: LD_VAR 0 4
34951: PPUSH
34952: LD_VAR 0 5
34956: PPUSH
34957: LD_VAR 0 1
34961: PPUSH
34962: CALL_OW 248
34966: PPUSH
34967: LD_INT 0
34969: PPUSH
34970: CALL 35462 0 6
34974: ST_TO_ADDR
// if not hexes then
34975: LD_VAR 0 12
34979: NOT
34980: IFFALSE 34984
// exit ;
34982: GO 35457
// hex := GetHexInfo ( x , y ) ;
34984: LD_ADDR_VAR 0 15
34988: PUSH
34989: LD_VAR 0 3
34993: PPUSH
34994: LD_VAR 0 4
34998: PPUSH
34999: CALL_OW 546
35003: ST_TO_ADDR
// if hex [ 1 ] then
35004: LD_VAR 0 15
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: IFFALSE 35016
// exit ;
35014: GO 35457
// height := hex [ 2 ] ;
35016: LD_ADDR_VAR 0 13
35020: PUSH
35021: LD_VAR 0 15
35025: PUSH
35026: LD_INT 2
35028: ARRAY
35029: ST_TO_ADDR
// for i = 1 to hexes do
35030: LD_ADDR_VAR 0 7
35034: PUSH
35035: DOUBLE
35036: LD_INT 1
35038: DEC
35039: ST_TO_ADDR
35040: LD_VAR 0 12
35044: PUSH
35045: FOR_TO
35046: IFFALSE 35376
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35048: LD_VAR 0 12
35052: PUSH
35053: LD_VAR 0 7
35057: ARRAY
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PPUSH
35063: LD_VAR 0 12
35067: PUSH
35068: LD_VAR 0 7
35072: ARRAY
35073: PUSH
35074: LD_INT 2
35076: ARRAY
35077: PPUSH
35078: CALL_OW 488
35082: NOT
35083: PUSH
35084: LD_VAR 0 12
35088: PUSH
35089: LD_VAR 0 7
35093: ARRAY
35094: PUSH
35095: LD_INT 1
35097: ARRAY
35098: PPUSH
35099: LD_VAR 0 12
35103: PUSH
35104: LD_VAR 0 7
35108: ARRAY
35109: PUSH
35110: LD_INT 2
35112: ARRAY
35113: PPUSH
35114: CALL_OW 428
35118: PUSH
35119: LD_INT 0
35121: GREATER
35122: OR
35123: PUSH
35124: LD_VAR 0 12
35128: PUSH
35129: LD_VAR 0 7
35133: ARRAY
35134: PUSH
35135: LD_INT 1
35137: ARRAY
35138: PPUSH
35139: LD_VAR 0 12
35143: PUSH
35144: LD_VAR 0 7
35148: ARRAY
35149: PUSH
35150: LD_INT 2
35152: ARRAY
35153: PPUSH
35154: CALL_OW 351
35158: OR
35159: IFFALSE 35165
// exit ;
35161: POP
35162: POP
35163: GO 35457
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35165: LD_ADDR_VAR 0 8
35169: PUSH
35170: LD_VAR 0 12
35174: PUSH
35175: LD_VAR 0 7
35179: ARRAY
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: PPUSH
35185: LD_VAR 0 12
35189: PUSH
35190: LD_VAR 0 7
35194: ARRAY
35195: PUSH
35196: LD_INT 2
35198: ARRAY
35199: PPUSH
35200: CALL_OW 546
35204: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35205: LD_VAR 0 8
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PUSH
35214: LD_VAR 0 8
35218: PUSH
35219: LD_INT 2
35221: ARRAY
35222: PUSH
35223: LD_VAR 0 13
35227: PUSH
35228: LD_INT 2
35230: PLUS
35231: GREATER
35232: OR
35233: PUSH
35234: LD_VAR 0 8
35238: PUSH
35239: LD_INT 2
35241: ARRAY
35242: PUSH
35243: LD_VAR 0 13
35247: PUSH
35248: LD_INT 2
35250: MINUS
35251: LESS
35252: OR
35253: PUSH
35254: LD_VAR 0 8
35258: PUSH
35259: LD_INT 3
35261: ARRAY
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: LD_INT 8
35268: PUSH
35269: LD_INT 9
35271: PUSH
35272: LD_INT 10
35274: PUSH
35275: LD_INT 11
35277: PUSH
35278: LD_INT 12
35280: PUSH
35281: LD_INT 13
35283: PUSH
35284: LD_INT 16
35286: PUSH
35287: LD_INT 17
35289: PUSH
35290: LD_INT 18
35292: PUSH
35293: LD_INT 19
35295: PUSH
35296: LD_INT 20
35298: PUSH
35299: LD_INT 21
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: IN
35317: NOT
35318: OR
35319: PUSH
35320: LD_VAR 0 8
35324: PUSH
35325: LD_INT 5
35327: ARRAY
35328: NOT
35329: OR
35330: PUSH
35331: LD_VAR 0 8
35335: PUSH
35336: LD_INT 6
35338: ARRAY
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 2
35345: PUSH
35346: LD_INT 7
35348: PUSH
35349: LD_INT 9
35351: PUSH
35352: LD_INT 10
35354: PUSH
35355: LD_INT 11
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: IN
35366: NOT
35367: OR
35368: IFFALSE 35374
// exit ;
35370: POP
35371: POP
35372: GO 35457
// end ;
35374: GO 35045
35376: POP
35377: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35378: LD_VAR 0 9
35382: PPUSH
35383: LD_VAR 0 3
35387: PPUSH
35388: LD_VAR 0 4
35392: PPUSH
35393: LD_INT 20
35395: PPUSH
35396: CALL 27403 0 4
35400: PUSH
35401: LD_INT 4
35403: ARRAY
35404: IFFALSE 35408
// exit ;
35406: GO 35457
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35408: LD_VAR 0 2
35412: PUSH
35413: LD_INT 29
35415: PUSH
35416: LD_INT 30
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: IN
35423: PUSH
35424: LD_VAR 0 3
35428: PPUSH
35429: LD_VAR 0 4
35433: PPUSH
35434: LD_VAR 0 9
35438: PPUSH
35439: CALL_OW 440
35443: NOT
35444: AND
35445: IFFALSE 35449
// exit ;
35447: GO 35457
// result := true ;
35449: LD_ADDR_VAR 0 6
35453: PUSH
35454: LD_INT 1
35456: ST_TO_ADDR
// end ;
35457: LD_VAR 0 6
35461: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35462: LD_INT 0
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
35521: PPUSH
// result = [ ] ;
35522: LD_ADDR_VAR 0 7
35526: PUSH
35527: EMPTY
35528: ST_TO_ADDR
// temp_list = [ ] ;
35529: LD_ADDR_VAR 0 9
35533: PUSH
35534: EMPTY
35535: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35536: LD_VAR 0 4
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 4
35555: PUSH
35556: LD_INT 5
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: IN
35567: NOT
35568: PUSH
35569: LD_VAR 0 1
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: IN
35584: PUSH
35585: LD_VAR 0 5
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: IN
35604: NOT
35605: AND
35606: OR
35607: IFFALSE 35611
// exit ;
35609: GO 54002
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35611: LD_VAR 0 1
35615: PUSH
35616: LD_INT 6
35618: PUSH
35619: LD_INT 7
35621: PUSH
35622: LD_INT 8
35624: PUSH
35625: LD_INT 13
35627: PUSH
35628: LD_INT 12
35630: PUSH
35631: LD_INT 15
35633: PUSH
35634: LD_INT 11
35636: PUSH
35637: LD_INT 14
35639: PUSH
35640: LD_INT 10
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: IN
35654: IFFALSE 35664
// btype = b_lab ;
35656: LD_ADDR_VAR 0 1
35660: PUSH
35661: LD_INT 6
35663: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35664: LD_VAR 0 6
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: IN
35683: NOT
35684: PUSH
35685: LD_VAR 0 1
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: LD_INT 6
35704: PUSH
35705: LD_INT 36
35707: PUSH
35708: LD_INT 4
35710: PUSH
35711: LD_INT 5
35713: PUSH
35714: LD_INT 31
35716: PUSH
35717: LD_INT 32
35719: PUSH
35720: LD_INT 33
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: IN
35736: NOT
35737: PUSH
35738: LD_VAR 0 6
35742: PUSH
35743: LD_INT 1
35745: EQUAL
35746: AND
35747: OR
35748: PUSH
35749: LD_VAR 0 1
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 3
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: IN
35764: NOT
35765: PUSH
35766: LD_VAR 0 6
35770: PUSH
35771: LD_INT 2
35773: EQUAL
35774: AND
35775: OR
35776: IFFALSE 35786
// mode = 0 ;
35778: LD_ADDR_VAR 0 6
35782: PUSH
35783: LD_INT 0
35785: ST_TO_ADDR
// case mode of 0 :
35786: LD_VAR 0 6
35790: PUSH
35791: LD_INT 0
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35799
35797: GO 47252
35799: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35800: LD_ADDR_VAR 0 11
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35993: LD_ADDR_VAR 0 12
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: NEG
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 3
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 3
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36189: LD_ADDR_VAR 0 13
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: NEG
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: NEG
36337: PUSH
36338: LD_INT 3
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: NEG
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: LD_INT 3
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36388: LD_ADDR_VAR 0 14
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 2
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 2
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 3
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36584: LD_ADDR_VAR 0 15
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 2
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 3
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36777: LD_ADDR_VAR 0 16
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36970: LD_ADDR_VAR 0 17
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 2
37169: NEG
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37200: LD_ADDR_VAR 0 18
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37430: LD_ADDR_VAR 0 19
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37660: LD_ADDR_VAR 0 20
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: LD_INT 2
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37890: LD_ADDR_VAR 0 21
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38120: LD_ADDR_VAR 0 22
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 2
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 2
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38350: LD_ADDR_VAR 0 23
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: LD_INT 3
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38630: LD_ADDR_VAR 0 24
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38906: LD_ADDR_VAR 0 25
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39180: LD_ADDR_VAR 0 26
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39456: LD_ADDR_VAR 0 27
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 3
39701: NEG
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39736: LD_ADDR_VAR 0 28
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: LD_INT 3
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 3
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: NEG
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40018: LD_ADDR_VAR 0 29
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 3
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40297: LD_ADDR_VAR 0 30
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 3
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40575: LD_ADDR_VAR 0 31
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40853: LD_ADDR_VAR 0 32
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 3
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: LD_INT 3
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41131: LD_ADDR_VAR 0 33
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 3
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41410: LD_ADDR_VAR 0 34
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 3
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41690: LD_ADDR_VAR 0 35
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41802: LD_ADDR_VAR 0 36
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41914: LD_ADDR_VAR 0 37
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42026: LD_ADDR_VAR 0 38
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42138: LD_ADDR_VAR 0 39
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42250: LD_ADDR_VAR 0 40
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42362: LD_ADDR_VAR 0 41
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: LD_INT 3
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 3
42671: NEG
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42712: LD_ADDR_VAR 0 42
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: LD_INT 3
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: NEG
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43062: LD_ADDR_VAR 0 43
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: NEG
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43410: LD_ADDR_VAR 0 44
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 3
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 3
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: NEG
43720: PUSH
43721: LD_INT 3
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43760: LD_ADDR_VAR 0 45
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 3
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 3
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 3
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 3
44057: NEG
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44110: LD_ADDR_VAR 0 46
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 3
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 3
44406: NEG
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 3
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44458: LD_ADDR_VAR 0 47
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44609: LD_ADDR_VAR 0 48
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44756: LD_ADDR_VAR 0 49
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44900: LD_ADDR_VAR 0 50
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45044: LD_ADDR_VAR 0 51
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45191: LD_ADDR_VAR 0 52
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45342: LD_ADDR_VAR 0 53
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45572: LD_ADDR_VAR 0 54
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45802: LD_ADDR_VAR 0 55
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46032: LD_ADDR_VAR 0 56
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46262: LD_ADDR_VAR 0 57
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46492: LD_ADDR_VAR 0 58
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46722: LD_ADDR_VAR 0 59
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46810: LD_ADDR_VAR 0 60
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46898: LD_ADDR_VAR 0 61
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46986: LD_ADDR_VAR 0 62
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47074: LD_ADDR_VAR 0 63
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47162: LD_ADDR_VAR 0 64
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// end ; 1 :
47250: GO 53147
47252: LD_INT 1
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 49883
47260: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47261: LD_ADDR_VAR 0 11
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47305: LD_ADDR_VAR 0 12
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47346: LD_ADDR_VAR 0 13
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47386: LD_ADDR_VAR 0 14
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47427: LD_ADDR_VAR 0 15
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 3
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47471: LD_ADDR_VAR 0 16
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47517: LD_ADDR_VAR 0 17
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47561: LD_ADDR_VAR 0 18
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47602: LD_ADDR_VAR 0 19
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47642: LD_ADDR_VAR 0 20
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 3
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47683: LD_ADDR_VAR 0 21
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47727: LD_ADDR_VAR 0 22
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47773: LD_ADDR_VAR 0 23
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 3
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 4
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47817: LD_ADDR_VAR 0 24
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47858: LD_ADDR_VAR 0 25
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 4
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 4
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47898: LD_ADDR_VAR 0 26
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 4
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47939: LD_ADDR_VAR 0 27
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47983: LD_ADDR_VAR 0 28
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 4
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 4
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48029: LD_ADDR_VAR 0 29
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 3
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 4
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 4
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 5
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 5
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 4
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 6
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 6
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 5
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48184: LD_ADDR_VAR 0 30
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 4
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 4
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 5
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 5
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 5
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 6
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 6
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48327: LD_ADDR_VAR 0 31
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 4
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 4
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: LD_INT 4
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 5
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 5
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 4
48414: PUSH
48415: LD_INT 5
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 6
48424: PUSH
48425: LD_INT 5
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 6
48434: PUSH
48435: LD_INT 6
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 5
48444: PUSH
48445: LD_INT 6
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48466: LD_ADDR_VAR 0 32
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 4
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 4
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 5
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 5
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 4
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 6
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 6
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 5
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48609: LD_ADDR_VAR 0 33
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 4
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 4
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 4
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 5
48695: NEG
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 5
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 5
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 6
48729: NEG
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 6
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48764: LD_ADDR_VAR 0 34
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 3
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 3
48807: NEG
48808: PUSH
48809: LD_INT 4
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 4
48819: NEG
48820: PUSH
48821: LD_INT 3
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 4
48831: NEG
48832: PUSH
48833: LD_INT 4
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 4
48843: NEG
48844: PUSH
48845: LD_INT 5
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 5
48855: NEG
48856: PUSH
48857: LD_INT 4
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 5
48867: NEG
48868: PUSH
48869: LD_INT 5
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 5
48879: NEG
48880: PUSH
48881: LD_INT 6
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 6
48891: NEG
48892: PUSH
48893: LD_INT 5
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 6
48903: NEG
48904: PUSH
48905: LD_INT 6
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48927: LD_ADDR_VAR 0 41
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48971: LD_ADDR_VAR 0 42
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49012: LD_ADDR_VAR 0 43
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49052: LD_ADDR_VAR 0 44
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49093: LD_ADDR_VAR 0 45
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49137: LD_ADDR_VAR 0 46
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49183: LD_ADDR_VAR 0 47
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49216: LD_ADDR_VAR 0 48
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49247: LD_ADDR_VAR 0 49
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49276: LD_ADDR_VAR 0 50
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49305: LD_ADDR_VAR 0 51
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49336: LD_ADDR_VAR 0 52
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49369: LD_ADDR_VAR 0 53
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 3
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49413: LD_ADDR_VAR 0 54
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49454: LD_ADDR_VAR 0 55
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49494: LD_ADDR_VAR 0 56
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49535: LD_ADDR_VAR 0 57
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49579: LD_ADDR_VAR 0 58
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 3
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49625: LD_ADDR_VAR 0 59
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49669: LD_ADDR_VAR 0 60
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49710: LD_ADDR_VAR 0 61
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49750: LD_ADDR_VAR 0 62
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49791: LD_ADDR_VAR 0 63
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49835: LD_ADDR_VAR 0 64
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// end ; 2 :
49881: GO 53147
49883: LD_INT 2
49885: DOUBLE
49886: EQUAL
49887: IFTRUE 49891
49889: GO 53146
49891: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49892: LD_ADDR_VAR 0 29
49896: PUSH
49897: LD_INT 4
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 4
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 5
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 4
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 4
50022: PUSH
50023: LD_INT 4
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: LD_INT 4
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 4
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 4
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 4
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 4
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 5
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 5
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 5
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 4
50231: NEG
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 4
50254: NEG
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 4
50277: NEG
50278: PUSH
50279: LD_INT 4
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 4
50289: NEG
50290: PUSH
50291: LD_INT 5
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: LD_INT 4
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 4
50325: NEG
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 5
50337: NEG
50338: PUSH
50339: LD_INT 4
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 5
50349: NEG
50350: PUSH
50351: LD_INT 5
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: LD_INT 5
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: NEG
50374: PUSH
50375: LD_INT 3
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50430: LD_ADDR_VAR 0 30
50434: PUSH
50435: LD_INT 4
50437: PUSH
50438: LD_INT 4
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 4
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 5
50457: PUSH
50458: LD_INT 4
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 5
50467: PUSH
50468: LD_INT 5
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: LD_INT 5
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: LD_INT 4
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 5
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: LD_INT 5
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 4
50620: NEG
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 4
50631: NEG
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 4
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 5
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 5
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 5
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: LD_INT 4
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 4
50794: NEG
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 4
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 4
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 5
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 4
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 5
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 5
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50977: LD_ADDR_VAR 0 31
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 4
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 5
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 4
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: LD_INT 5
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 4
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 4
51156: NEG
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: LD_INT 4
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: LD_INT 5
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 4
51227: NEG
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 5
51239: NEG
51240: PUSH
51241: LD_INT 4
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 5
51251: NEG
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: LD_INT 5
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 4
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 4
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 4
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 5
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 5
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 5
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51527: LD_ADDR_VAR 0 32
51531: PUSH
51532: LD_INT 4
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 4
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 5
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 5
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: LD_INT 4
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 4
51696: NEG
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 4
51708: NEG
51709: PUSH
51710: LD_INT 4
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 4
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 4
51732: NEG
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 4
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 5
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 4
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 3
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 4
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 5
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 4
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 4
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 4
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 5
51959: PUSH
51960: LD_INT 4
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: LD_INT 5
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 4
51979: PUSH
51980: LD_INT 5
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 4
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 5
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 5
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52074: LD_ADDR_VAR 0 33
52078: PUSH
52079: LD_INT 4
52081: NEG
52082: PUSH
52083: LD_INT 4
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: NEG
52094: PUSH
52095: LD_INT 5
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 4
52129: NEG
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: LD_INT 4
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 5
52153: NEG
52154: PUSH
52155: LD_INT 5
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: NEG
52166: PUSH
52167: LD_INT 5
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 5
52177: NEG
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 4
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 5
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 5
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 4
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 5
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 4
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: LD_INT 4
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 4
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 4
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 4
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 5
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 5
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 4
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 5
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52612: LD_ADDR_VAR 0 34
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 4
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 5
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 4
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 3
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 4
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 5
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 3
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: LD_INT 4
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 5
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: PUSH
52855: LD_INT 5
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: LD_INT 5
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 4
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 4
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 4
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 4
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 5
53053: NEG
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 5
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 5
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: ST_TO_ADDR
// end ; end ;
53144: GO 53147
53146: POP
// case btype of b_depot , b_warehouse :
53147: LD_VAR 0 1
53151: PUSH
53152: LD_INT 0
53154: DOUBLE
53155: EQUAL
53156: IFTRUE 53166
53158: LD_INT 1
53160: DOUBLE
53161: EQUAL
53162: IFTRUE 53166
53164: GO 53367
53166: POP
// case nation of nation_american :
53167: LD_VAR 0 5
53171: PUSH
53172: LD_INT 1
53174: DOUBLE
53175: EQUAL
53176: IFTRUE 53180
53178: GO 53236
53180: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53181: LD_ADDR_VAR 0 9
53185: PUSH
53186: LD_VAR 0 11
53190: PUSH
53191: LD_VAR 0 12
53195: PUSH
53196: LD_VAR 0 13
53200: PUSH
53201: LD_VAR 0 14
53205: PUSH
53206: LD_VAR 0 15
53210: PUSH
53211: LD_VAR 0 16
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: PUSH
53224: LD_VAR 0 4
53228: PUSH
53229: LD_INT 1
53231: PLUS
53232: ARRAY
53233: ST_TO_ADDR
53234: GO 53365
53236: LD_INT 2
53238: DOUBLE
53239: EQUAL
53240: IFTRUE 53244
53242: GO 53300
53244: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53245: LD_ADDR_VAR 0 9
53249: PUSH
53250: LD_VAR 0 17
53254: PUSH
53255: LD_VAR 0 18
53259: PUSH
53260: LD_VAR 0 19
53264: PUSH
53265: LD_VAR 0 20
53269: PUSH
53270: LD_VAR 0 21
53274: PUSH
53275: LD_VAR 0 22
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: PUSH
53288: LD_VAR 0 4
53292: PUSH
53293: LD_INT 1
53295: PLUS
53296: ARRAY
53297: ST_TO_ADDR
53298: GO 53365
53300: LD_INT 3
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53308
53306: GO 53364
53308: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53309: LD_ADDR_VAR 0 9
53313: PUSH
53314: LD_VAR 0 23
53318: PUSH
53319: LD_VAR 0 24
53323: PUSH
53324: LD_VAR 0 25
53328: PUSH
53329: LD_VAR 0 26
53333: PUSH
53334: LD_VAR 0 27
53338: PUSH
53339: LD_VAR 0 28
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: PUSH
53352: LD_VAR 0 4
53356: PUSH
53357: LD_INT 1
53359: PLUS
53360: ARRAY
53361: ST_TO_ADDR
53362: GO 53365
53364: POP
53365: GO 53920
53367: LD_INT 2
53369: DOUBLE
53370: EQUAL
53371: IFTRUE 53381
53373: LD_INT 3
53375: DOUBLE
53376: EQUAL
53377: IFTRUE 53381
53379: GO 53437
53381: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53382: LD_ADDR_VAR 0 9
53386: PUSH
53387: LD_VAR 0 29
53391: PUSH
53392: LD_VAR 0 30
53396: PUSH
53397: LD_VAR 0 31
53401: PUSH
53402: LD_VAR 0 32
53406: PUSH
53407: LD_VAR 0 33
53411: PUSH
53412: LD_VAR 0 34
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: PUSH
53425: LD_VAR 0 4
53429: PUSH
53430: LD_INT 1
53432: PLUS
53433: ARRAY
53434: ST_TO_ADDR
53435: GO 53920
53437: LD_INT 16
53439: DOUBLE
53440: EQUAL
53441: IFTRUE 53499
53443: LD_INT 17
53445: DOUBLE
53446: EQUAL
53447: IFTRUE 53499
53449: LD_INT 18
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53499
53455: LD_INT 19
53457: DOUBLE
53458: EQUAL
53459: IFTRUE 53499
53461: LD_INT 22
53463: DOUBLE
53464: EQUAL
53465: IFTRUE 53499
53467: LD_INT 20
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53499
53473: LD_INT 21
53475: DOUBLE
53476: EQUAL
53477: IFTRUE 53499
53479: LD_INT 23
53481: DOUBLE
53482: EQUAL
53483: IFTRUE 53499
53485: LD_INT 24
53487: DOUBLE
53488: EQUAL
53489: IFTRUE 53499
53491: LD_INT 25
53493: DOUBLE
53494: EQUAL
53495: IFTRUE 53499
53497: GO 53555
53499: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53500: LD_ADDR_VAR 0 9
53504: PUSH
53505: LD_VAR 0 35
53509: PUSH
53510: LD_VAR 0 36
53514: PUSH
53515: LD_VAR 0 37
53519: PUSH
53520: LD_VAR 0 38
53524: PUSH
53525: LD_VAR 0 39
53529: PUSH
53530: LD_VAR 0 40
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: PUSH
53543: LD_VAR 0 4
53547: PUSH
53548: LD_INT 1
53550: PLUS
53551: ARRAY
53552: ST_TO_ADDR
53553: GO 53920
53555: LD_INT 6
53557: DOUBLE
53558: EQUAL
53559: IFTRUE 53611
53561: LD_INT 7
53563: DOUBLE
53564: EQUAL
53565: IFTRUE 53611
53567: LD_INT 8
53569: DOUBLE
53570: EQUAL
53571: IFTRUE 53611
53573: LD_INT 13
53575: DOUBLE
53576: EQUAL
53577: IFTRUE 53611
53579: LD_INT 12
53581: DOUBLE
53582: EQUAL
53583: IFTRUE 53611
53585: LD_INT 15
53587: DOUBLE
53588: EQUAL
53589: IFTRUE 53611
53591: LD_INT 11
53593: DOUBLE
53594: EQUAL
53595: IFTRUE 53611
53597: LD_INT 14
53599: DOUBLE
53600: EQUAL
53601: IFTRUE 53611
53603: LD_INT 10
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53611
53609: GO 53667
53611: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53612: LD_ADDR_VAR 0 9
53616: PUSH
53617: LD_VAR 0 41
53621: PUSH
53622: LD_VAR 0 42
53626: PUSH
53627: LD_VAR 0 43
53631: PUSH
53632: LD_VAR 0 44
53636: PUSH
53637: LD_VAR 0 45
53641: PUSH
53642: LD_VAR 0 46
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 4
53659: PUSH
53660: LD_INT 1
53662: PLUS
53663: ARRAY
53664: ST_TO_ADDR
53665: GO 53920
53667: LD_INT 36
53669: DOUBLE
53670: EQUAL
53671: IFTRUE 53675
53673: GO 53731
53675: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53676: LD_ADDR_VAR 0 9
53680: PUSH
53681: LD_VAR 0 47
53685: PUSH
53686: LD_VAR 0 48
53690: PUSH
53691: LD_VAR 0 49
53695: PUSH
53696: LD_VAR 0 50
53700: PUSH
53701: LD_VAR 0 51
53705: PUSH
53706: LD_VAR 0 52
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: PUSH
53719: LD_VAR 0 4
53723: PUSH
53724: LD_INT 1
53726: PLUS
53727: ARRAY
53728: ST_TO_ADDR
53729: GO 53920
53731: LD_INT 4
53733: DOUBLE
53734: EQUAL
53735: IFTRUE 53757
53737: LD_INT 5
53739: DOUBLE
53740: EQUAL
53741: IFTRUE 53757
53743: LD_INT 34
53745: DOUBLE
53746: EQUAL
53747: IFTRUE 53757
53749: LD_INT 37
53751: DOUBLE
53752: EQUAL
53753: IFTRUE 53757
53755: GO 53813
53757: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53758: LD_ADDR_VAR 0 9
53762: PUSH
53763: LD_VAR 0 53
53767: PUSH
53768: LD_VAR 0 54
53772: PUSH
53773: LD_VAR 0 55
53777: PUSH
53778: LD_VAR 0 56
53782: PUSH
53783: LD_VAR 0 57
53787: PUSH
53788: LD_VAR 0 58
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: PUSH
53801: LD_VAR 0 4
53805: PUSH
53806: LD_INT 1
53808: PLUS
53809: ARRAY
53810: ST_TO_ADDR
53811: GO 53920
53813: LD_INT 31
53815: DOUBLE
53816: EQUAL
53817: IFTRUE 53863
53819: LD_INT 32
53821: DOUBLE
53822: EQUAL
53823: IFTRUE 53863
53825: LD_INT 33
53827: DOUBLE
53828: EQUAL
53829: IFTRUE 53863
53831: LD_INT 27
53833: DOUBLE
53834: EQUAL
53835: IFTRUE 53863
53837: LD_INT 26
53839: DOUBLE
53840: EQUAL
53841: IFTRUE 53863
53843: LD_INT 28
53845: DOUBLE
53846: EQUAL
53847: IFTRUE 53863
53849: LD_INT 29
53851: DOUBLE
53852: EQUAL
53853: IFTRUE 53863
53855: LD_INT 30
53857: DOUBLE
53858: EQUAL
53859: IFTRUE 53863
53861: GO 53919
53863: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53864: LD_ADDR_VAR 0 9
53868: PUSH
53869: LD_VAR 0 59
53873: PUSH
53874: LD_VAR 0 60
53878: PUSH
53879: LD_VAR 0 61
53883: PUSH
53884: LD_VAR 0 62
53888: PUSH
53889: LD_VAR 0 63
53893: PUSH
53894: LD_VAR 0 64
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: PUSH
53907: LD_VAR 0 4
53911: PUSH
53912: LD_INT 1
53914: PLUS
53915: ARRAY
53916: ST_TO_ADDR
53917: GO 53920
53919: POP
// temp_list2 = [ ] ;
53920: LD_ADDR_VAR 0 10
53924: PUSH
53925: EMPTY
53926: ST_TO_ADDR
// for i in temp_list do
53927: LD_ADDR_VAR 0 8
53931: PUSH
53932: LD_VAR 0 9
53936: PUSH
53937: FOR_IN
53938: IFFALSE 53990
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53940: LD_ADDR_VAR 0 10
53944: PUSH
53945: LD_VAR 0 10
53949: PUSH
53950: LD_VAR 0 8
53954: PUSH
53955: LD_INT 1
53957: ARRAY
53958: PUSH
53959: LD_VAR 0 2
53963: PLUS
53964: PUSH
53965: LD_VAR 0 8
53969: PUSH
53970: LD_INT 2
53972: ARRAY
53973: PUSH
53974: LD_VAR 0 3
53978: PLUS
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: EMPTY
53985: LIST
53986: ADD
53987: ST_TO_ADDR
53988: GO 53937
53990: POP
53991: POP
// result = temp_list2 ;
53992: LD_ADDR_VAR 0 7
53996: PUSH
53997: LD_VAR 0 10
54001: ST_TO_ADDR
// end ;
54002: LD_VAR 0 7
54006: RET
// export function EnemyInRange ( unit , dist ) ; begin
54007: LD_INT 0
54009: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54010: LD_ADDR_VAR 0 3
54014: PUSH
54015: LD_VAR 0 1
54019: PPUSH
54020: CALL_OW 255
54024: PPUSH
54025: LD_VAR 0 1
54029: PPUSH
54030: CALL_OW 250
54034: PPUSH
54035: LD_VAR 0 1
54039: PPUSH
54040: CALL_OW 251
54044: PPUSH
54045: LD_VAR 0 2
54049: PPUSH
54050: CALL 27403 0 4
54054: PUSH
54055: LD_INT 4
54057: ARRAY
54058: ST_TO_ADDR
// end ;
54059: LD_VAR 0 3
54063: RET
// export function PlayerSeeMe ( unit ) ; begin
54064: LD_INT 0
54066: PPUSH
// result := See ( your_side , unit ) ;
54067: LD_ADDR_VAR 0 2
54071: PUSH
54072: LD_OWVAR 2
54076: PPUSH
54077: LD_VAR 0 1
54081: PPUSH
54082: CALL_OW 292
54086: ST_TO_ADDR
// end ;
54087: LD_VAR 0 2
54091: RET
// export function ReverseDir ( unit ) ; begin
54092: LD_INT 0
54094: PPUSH
// if not unit then
54095: LD_VAR 0 1
54099: NOT
54100: IFFALSE 54104
// exit ;
54102: GO 54127
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54104: LD_ADDR_VAR 0 2
54108: PUSH
54109: LD_VAR 0 1
54113: PPUSH
54114: CALL_OW 254
54118: PUSH
54119: LD_INT 3
54121: PLUS
54122: PUSH
54123: LD_INT 6
54125: MOD
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 2
54131: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
54138: PPUSH
// if not hexes then
54139: LD_VAR 0 2
54143: NOT
54144: IFFALSE 54148
// exit ;
54146: GO 54296
// dist := 9999 ;
54148: LD_ADDR_VAR 0 5
54152: PUSH
54153: LD_INT 9999
54155: ST_TO_ADDR
// for i = 1 to hexes do
54156: LD_ADDR_VAR 0 4
54160: PUSH
54161: DOUBLE
54162: LD_INT 1
54164: DEC
54165: ST_TO_ADDR
54166: LD_VAR 0 2
54170: PUSH
54171: FOR_TO
54172: IFFALSE 54284
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54174: LD_VAR 0 1
54178: PPUSH
54179: LD_VAR 0 2
54183: PUSH
54184: LD_VAR 0 4
54188: ARRAY
54189: PUSH
54190: LD_INT 1
54192: ARRAY
54193: PPUSH
54194: LD_VAR 0 2
54198: PUSH
54199: LD_VAR 0 4
54203: ARRAY
54204: PUSH
54205: LD_INT 2
54207: ARRAY
54208: PPUSH
54209: CALL_OW 297
54213: PUSH
54214: LD_VAR 0 5
54218: LESS
54219: IFFALSE 54282
// begin hex := hexes [ i ] ;
54221: LD_ADDR_VAR 0 7
54225: PUSH
54226: LD_VAR 0 2
54230: PUSH
54231: LD_VAR 0 4
54235: ARRAY
54236: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54237: LD_ADDR_VAR 0 5
54241: PUSH
54242: LD_VAR 0 1
54246: PPUSH
54247: LD_VAR 0 2
54251: PUSH
54252: LD_VAR 0 4
54256: ARRAY
54257: PUSH
54258: LD_INT 1
54260: ARRAY
54261: PPUSH
54262: LD_VAR 0 2
54266: PUSH
54267: LD_VAR 0 4
54271: ARRAY
54272: PUSH
54273: LD_INT 2
54275: ARRAY
54276: PPUSH
54277: CALL_OW 297
54281: ST_TO_ADDR
// end ; end ;
54282: GO 54171
54284: POP
54285: POP
// result := hex ;
54286: LD_ADDR_VAR 0 3
54290: PUSH
54291: LD_VAR 0 7
54295: ST_TO_ADDR
// end ;
54296: LD_VAR 0 3
54300: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54301: LD_INT 0
54303: PPUSH
54304: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54305: LD_VAR 0 1
54309: NOT
54310: PUSH
54311: LD_VAR 0 1
54315: PUSH
54316: LD_INT 21
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 23
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PPUSH
54340: CALL_OW 69
54344: IN
54345: NOT
54346: OR
54347: IFFALSE 54351
// exit ;
54349: GO 54398
// for i = 1 to 3 do
54351: LD_ADDR_VAR 0 3
54355: PUSH
54356: DOUBLE
54357: LD_INT 1
54359: DEC
54360: ST_TO_ADDR
54361: LD_INT 3
54363: PUSH
54364: FOR_TO
54365: IFFALSE 54396
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54367: LD_VAR 0 1
54371: PPUSH
54372: CALL_OW 250
54376: PPUSH
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL_OW 251
54386: PPUSH
54387: LD_INT 1
54389: PPUSH
54390: CALL_OW 453
54394: GO 54364
54396: POP
54397: POP
// end ;
54398: LD_VAR 0 2
54402: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54403: LD_INT 0
54405: PPUSH
54406: PPUSH
54407: PPUSH
54408: PPUSH
54409: PPUSH
54410: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54411: LD_VAR 0 1
54415: NOT
54416: PUSH
54417: LD_VAR 0 2
54421: NOT
54422: OR
54423: PUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 314
54433: OR
54434: IFFALSE 54438
// exit ;
54436: GO 54879
// x := GetX ( enemy_unit ) ;
54438: LD_ADDR_VAR 0 7
54442: PUSH
54443: LD_VAR 0 2
54447: PPUSH
54448: CALL_OW 250
54452: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54453: LD_ADDR_VAR 0 8
54457: PUSH
54458: LD_VAR 0 2
54462: PPUSH
54463: CALL_OW 251
54467: ST_TO_ADDR
// if not x or not y then
54468: LD_VAR 0 7
54472: NOT
54473: PUSH
54474: LD_VAR 0 8
54478: NOT
54479: OR
54480: IFFALSE 54484
// exit ;
54482: GO 54879
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54484: LD_ADDR_VAR 0 6
54488: PUSH
54489: LD_VAR 0 7
54493: PPUSH
54494: LD_INT 0
54496: PPUSH
54497: LD_INT 4
54499: PPUSH
54500: CALL_OW 272
54504: PUSH
54505: LD_VAR 0 8
54509: PPUSH
54510: LD_INT 0
54512: PPUSH
54513: LD_INT 4
54515: PPUSH
54516: CALL_OW 273
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_VAR 0 7
54529: PPUSH
54530: LD_INT 1
54532: PPUSH
54533: LD_INT 4
54535: PPUSH
54536: CALL_OW 272
54540: PUSH
54541: LD_VAR 0 8
54545: PPUSH
54546: LD_INT 1
54548: PPUSH
54549: LD_INT 4
54551: PPUSH
54552: CALL_OW 273
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_VAR 0 7
54565: PPUSH
54566: LD_INT 2
54568: PPUSH
54569: LD_INT 4
54571: PPUSH
54572: CALL_OW 272
54576: PUSH
54577: LD_VAR 0 8
54581: PPUSH
54582: LD_INT 2
54584: PPUSH
54585: LD_INT 4
54587: PPUSH
54588: CALL_OW 273
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_VAR 0 7
54601: PPUSH
54602: LD_INT 3
54604: PPUSH
54605: LD_INT 4
54607: PPUSH
54608: CALL_OW 272
54612: PUSH
54613: LD_VAR 0 8
54617: PPUSH
54618: LD_INT 3
54620: PPUSH
54621: LD_INT 4
54623: PPUSH
54624: CALL_OW 273
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_VAR 0 7
54637: PPUSH
54638: LD_INT 4
54640: PPUSH
54641: LD_INT 4
54643: PPUSH
54644: CALL_OW 272
54648: PUSH
54649: LD_VAR 0 8
54653: PPUSH
54654: LD_INT 4
54656: PPUSH
54657: LD_INT 4
54659: PPUSH
54660: CALL_OW 273
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_VAR 0 7
54673: PPUSH
54674: LD_INT 5
54676: PPUSH
54677: LD_INT 4
54679: PPUSH
54680: CALL_OW 272
54684: PUSH
54685: LD_VAR 0 8
54689: PPUSH
54690: LD_INT 5
54692: PPUSH
54693: LD_INT 4
54695: PPUSH
54696: CALL_OW 273
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// for i = tmp downto 1 do
54713: LD_ADDR_VAR 0 4
54717: PUSH
54718: DOUBLE
54719: LD_VAR 0 6
54723: INC
54724: ST_TO_ADDR
54725: LD_INT 1
54727: PUSH
54728: FOR_DOWNTO
54729: IFFALSE 54830
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54731: LD_VAR 0 6
54735: PUSH
54736: LD_VAR 0 4
54740: ARRAY
54741: PUSH
54742: LD_INT 1
54744: ARRAY
54745: PPUSH
54746: LD_VAR 0 6
54750: PUSH
54751: LD_VAR 0 4
54755: ARRAY
54756: PUSH
54757: LD_INT 2
54759: ARRAY
54760: PPUSH
54761: CALL_OW 488
54765: NOT
54766: PUSH
54767: LD_VAR 0 6
54771: PUSH
54772: LD_VAR 0 4
54776: ARRAY
54777: PUSH
54778: LD_INT 1
54780: ARRAY
54781: PPUSH
54782: LD_VAR 0 6
54786: PUSH
54787: LD_VAR 0 4
54791: ARRAY
54792: PUSH
54793: LD_INT 2
54795: ARRAY
54796: PPUSH
54797: CALL_OW 428
54801: PUSH
54802: LD_INT 0
54804: NONEQUAL
54805: OR
54806: IFFALSE 54828
// tmp := Delete ( tmp , i ) ;
54808: LD_ADDR_VAR 0 6
54812: PUSH
54813: LD_VAR 0 6
54817: PPUSH
54818: LD_VAR 0 4
54822: PPUSH
54823: CALL_OW 3
54827: ST_TO_ADDR
54828: GO 54728
54830: POP
54831: POP
// j := GetClosestHex ( unit , tmp ) ;
54832: LD_ADDR_VAR 0 5
54836: PUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: LD_VAR 0 6
54846: PPUSH
54847: CALL 54132 0 2
54851: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54852: LD_VAR 0 1
54856: PPUSH
54857: LD_VAR 0 5
54861: PUSH
54862: LD_INT 1
54864: ARRAY
54865: PPUSH
54866: LD_VAR 0 5
54870: PUSH
54871: LD_INT 2
54873: ARRAY
54874: PPUSH
54875: CALL_OW 111
// end ;
54879: LD_VAR 0 3
54883: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54884: LD_INT 0
54886: PPUSH
54887: PPUSH
54888: PPUSH
// uc_side = 0 ;
54889: LD_ADDR_OWVAR 20
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// uc_nation = 0 ;
54897: LD_ADDR_OWVAR 21
54901: PUSH
54902: LD_INT 0
54904: ST_TO_ADDR
// InitHc_All ( ) ;
54905: CALL_OW 584
// InitVc ;
54909: CALL_OW 20
// if mastodonts then
54913: LD_VAR 0 6
54917: IFFALSE 54984
// for i = 1 to mastodonts do
54919: LD_ADDR_VAR 0 11
54923: PUSH
54924: DOUBLE
54925: LD_INT 1
54927: DEC
54928: ST_TO_ADDR
54929: LD_VAR 0 6
54933: PUSH
54934: FOR_TO
54935: IFFALSE 54982
// begin vc_chassis := 31 ;
54937: LD_ADDR_OWVAR 37
54941: PUSH
54942: LD_INT 31
54944: ST_TO_ADDR
// vc_control := control_rider ;
54945: LD_ADDR_OWVAR 38
54949: PUSH
54950: LD_INT 4
54952: ST_TO_ADDR
// animal := CreateVehicle ;
54953: LD_ADDR_VAR 0 12
54957: PUSH
54958: CALL_OW 45
54962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54963: LD_VAR 0 12
54967: PPUSH
54968: LD_VAR 0 8
54972: PPUSH
54973: LD_INT 0
54975: PPUSH
54976: CALL 57172 0 3
// end ;
54980: GO 54934
54982: POP
54983: POP
// if horses then
54984: LD_VAR 0 5
54988: IFFALSE 55055
// for i = 1 to horses do
54990: LD_ADDR_VAR 0 11
54994: PUSH
54995: DOUBLE
54996: LD_INT 1
54998: DEC
54999: ST_TO_ADDR
55000: LD_VAR 0 5
55004: PUSH
55005: FOR_TO
55006: IFFALSE 55053
// begin hc_class := 21 ;
55008: LD_ADDR_OWVAR 28
55012: PUSH
55013: LD_INT 21
55015: ST_TO_ADDR
// hc_gallery :=  ;
55016: LD_ADDR_OWVAR 33
55020: PUSH
55021: LD_STRING 
55023: ST_TO_ADDR
// animal := CreateHuman ;
55024: LD_ADDR_VAR 0 12
55028: PUSH
55029: CALL_OW 44
55033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55034: LD_VAR 0 12
55038: PPUSH
55039: LD_VAR 0 8
55043: PPUSH
55044: LD_INT 0
55046: PPUSH
55047: CALL 57172 0 3
// end ;
55051: GO 55005
55053: POP
55054: POP
// if birds then
55055: LD_VAR 0 1
55059: IFFALSE 55126
// for i = 1 to birds do
55061: LD_ADDR_VAR 0 11
55065: PUSH
55066: DOUBLE
55067: LD_INT 1
55069: DEC
55070: ST_TO_ADDR
55071: LD_VAR 0 1
55075: PUSH
55076: FOR_TO
55077: IFFALSE 55124
// begin hc_class = 18 ;
55079: LD_ADDR_OWVAR 28
55083: PUSH
55084: LD_INT 18
55086: ST_TO_ADDR
// hc_gallery =  ;
55087: LD_ADDR_OWVAR 33
55091: PUSH
55092: LD_STRING 
55094: ST_TO_ADDR
// animal := CreateHuman ;
55095: LD_ADDR_VAR 0 12
55099: PUSH
55100: CALL_OW 44
55104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55105: LD_VAR 0 12
55109: PPUSH
55110: LD_VAR 0 8
55114: PPUSH
55115: LD_INT 0
55117: PPUSH
55118: CALL 57172 0 3
// end ;
55122: GO 55076
55124: POP
55125: POP
// if tigers then
55126: LD_VAR 0 2
55130: IFFALSE 55214
// for i = 1 to tigers do
55132: LD_ADDR_VAR 0 11
55136: PUSH
55137: DOUBLE
55138: LD_INT 1
55140: DEC
55141: ST_TO_ADDR
55142: LD_VAR 0 2
55146: PUSH
55147: FOR_TO
55148: IFFALSE 55212
// begin hc_class = class_tiger ;
55150: LD_ADDR_OWVAR 28
55154: PUSH
55155: LD_INT 14
55157: ST_TO_ADDR
// hc_gallery =  ;
55158: LD_ADDR_OWVAR 33
55162: PUSH
55163: LD_STRING 
55165: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55166: LD_ADDR_OWVAR 35
55170: PUSH
55171: LD_INT 7
55173: NEG
55174: PPUSH
55175: LD_INT 7
55177: PPUSH
55178: CALL_OW 12
55182: ST_TO_ADDR
// animal := CreateHuman ;
55183: LD_ADDR_VAR 0 12
55187: PUSH
55188: CALL_OW 44
55192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55193: LD_VAR 0 12
55197: PPUSH
55198: LD_VAR 0 8
55202: PPUSH
55203: LD_INT 0
55205: PPUSH
55206: CALL 57172 0 3
// end ;
55210: GO 55147
55212: POP
55213: POP
// if apemans then
55214: LD_VAR 0 3
55218: IFFALSE 55341
// for i = 1 to apemans do
55220: LD_ADDR_VAR 0 11
55224: PUSH
55225: DOUBLE
55226: LD_INT 1
55228: DEC
55229: ST_TO_ADDR
55230: LD_VAR 0 3
55234: PUSH
55235: FOR_TO
55236: IFFALSE 55339
// begin hc_class = class_apeman ;
55238: LD_ADDR_OWVAR 28
55242: PUSH
55243: LD_INT 12
55245: ST_TO_ADDR
// hc_gallery =  ;
55246: LD_ADDR_OWVAR 33
55250: PUSH
55251: LD_STRING 
55253: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55254: LD_ADDR_OWVAR 35
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PPUSH
55263: LD_INT 2
55265: PPUSH
55266: CALL_OW 12
55270: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55271: LD_ADDR_OWVAR 31
55275: PUSH
55276: LD_INT 1
55278: PPUSH
55279: LD_INT 3
55281: PPUSH
55282: CALL_OW 12
55286: PUSH
55287: LD_INT 1
55289: PPUSH
55290: LD_INT 3
55292: PPUSH
55293: CALL_OW 12
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: ST_TO_ADDR
// animal := CreateHuman ;
55310: LD_ADDR_VAR 0 12
55314: PUSH
55315: CALL_OW 44
55319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55320: LD_VAR 0 12
55324: PPUSH
55325: LD_VAR 0 8
55329: PPUSH
55330: LD_INT 0
55332: PPUSH
55333: CALL 57172 0 3
// end ;
55337: GO 55235
55339: POP
55340: POP
// if enchidnas then
55341: LD_VAR 0 4
55345: IFFALSE 55412
// for i = 1 to enchidnas do
55347: LD_ADDR_VAR 0 11
55351: PUSH
55352: DOUBLE
55353: LD_INT 1
55355: DEC
55356: ST_TO_ADDR
55357: LD_VAR 0 4
55361: PUSH
55362: FOR_TO
55363: IFFALSE 55410
// begin hc_class = 13 ;
55365: LD_ADDR_OWVAR 28
55369: PUSH
55370: LD_INT 13
55372: ST_TO_ADDR
// hc_gallery =  ;
55373: LD_ADDR_OWVAR 33
55377: PUSH
55378: LD_STRING 
55380: ST_TO_ADDR
// animal := CreateHuman ;
55381: LD_ADDR_VAR 0 12
55385: PUSH
55386: CALL_OW 44
55390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55391: LD_VAR 0 12
55395: PPUSH
55396: LD_VAR 0 8
55400: PPUSH
55401: LD_INT 0
55403: PPUSH
55404: CALL 57172 0 3
// end ;
55408: GO 55362
55410: POP
55411: POP
// if fishes then
55412: LD_VAR 0 7
55416: IFFALSE 55483
// for i = 1 to fishes do
55418: LD_ADDR_VAR 0 11
55422: PUSH
55423: DOUBLE
55424: LD_INT 1
55426: DEC
55427: ST_TO_ADDR
55428: LD_VAR 0 7
55432: PUSH
55433: FOR_TO
55434: IFFALSE 55481
// begin hc_class = 20 ;
55436: LD_ADDR_OWVAR 28
55440: PUSH
55441: LD_INT 20
55443: ST_TO_ADDR
// hc_gallery =  ;
55444: LD_ADDR_OWVAR 33
55448: PUSH
55449: LD_STRING 
55451: ST_TO_ADDR
// animal := CreateHuman ;
55452: LD_ADDR_VAR 0 12
55456: PUSH
55457: CALL_OW 44
55461: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55462: LD_VAR 0 12
55466: PPUSH
55467: LD_VAR 0 9
55471: PPUSH
55472: LD_INT 0
55474: PPUSH
55475: CALL 57172 0 3
// end ;
55479: GO 55433
55481: POP
55482: POP
// end ;
55483: LD_VAR 0 10
55487: RET
// export function WantHeal ( sci , unit ) ; begin
55488: LD_INT 0
55490: PPUSH
// if GetTaskList ( sci ) > 0 then
55491: LD_VAR 0 1
55495: PPUSH
55496: CALL_OW 437
55500: PUSH
55501: LD_INT 0
55503: GREATER
55504: IFFALSE 55574
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55506: LD_VAR 0 1
55510: PPUSH
55511: CALL_OW 437
55515: PUSH
55516: LD_INT 1
55518: ARRAY
55519: PUSH
55520: LD_INT 1
55522: ARRAY
55523: PUSH
55524: LD_STRING l
55526: EQUAL
55527: PUSH
55528: LD_VAR 0 1
55532: PPUSH
55533: CALL_OW 437
55537: PUSH
55538: LD_INT 1
55540: ARRAY
55541: PUSH
55542: LD_INT 4
55544: ARRAY
55545: PUSH
55546: LD_VAR 0 2
55550: EQUAL
55551: AND
55552: IFFALSE 55564
// result := true else
55554: LD_ADDR_VAR 0 3
55558: PUSH
55559: LD_INT 1
55561: ST_TO_ADDR
55562: GO 55572
// result := false ;
55564: LD_ADDR_VAR 0 3
55568: PUSH
55569: LD_INT 0
55571: ST_TO_ADDR
// end else
55572: GO 55582
// result := false ;
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: LD_INT 0
55581: ST_TO_ADDR
// end ;
55582: LD_VAR 0 3
55586: RET
// export function HealTarget ( sci ) ; begin
55587: LD_INT 0
55589: PPUSH
// if not sci then
55590: LD_VAR 0 1
55594: NOT
55595: IFFALSE 55599
// exit ;
55597: GO 55664
// result := 0 ;
55599: LD_ADDR_VAR 0 2
55603: PUSH
55604: LD_INT 0
55606: ST_TO_ADDR
// if GetTaskList ( sci ) then
55607: LD_VAR 0 1
55611: PPUSH
55612: CALL_OW 437
55616: IFFALSE 55664
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55618: LD_VAR 0 1
55622: PPUSH
55623: CALL_OW 437
55627: PUSH
55628: LD_INT 1
55630: ARRAY
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PUSH
55636: LD_STRING l
55638: EQUAL
55639: IFFALSE 55664
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55641: LD_ADDR_VAR 0 2
55645: PUSH
55646: LD_VAR 0 1
55650: PPUSH
55651: CALL_OW 437
55655: PUSH
55656: LD_INT 1
55658: ARRAY
55659: PUSH
55660: LD_INT 4
55662: ARRAY
55663: ST_TO_ADDR
// end ;
55664: LD_VAR 0 2
55668: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55669: LD_INT 0
55671: PPUSH
55672: PPUSH
55673: PPUSH
55674: PPUSH
// if not base_units then
55675: LD_VAR 0 1
55679: NOT
55680: IFFALSE 55684
// exit ;
55682: GO 55771
// result := false ;
55684: LD_ADDR_VAR 0 2
55688: PUSH
55689: LD_INT 0
55691: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55692: LD_ADDR_VAR 0 5
55696: PUSH
55697: LD_VAR 0 1
55701: PPUSH
55702: LD_INT 21
55704: PUSH
55705: LD_INT 3
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PPUSH
55712: CALL_OW 72
55716: ST_TO_ADDR
// if not tmp then
55717: LD_VAR 0 5
55721: NOT
55722: IFFALSE 55726
// exit ;
55724: GO 55771
// for i in tmp do
55726: LD_ADDR_VAR 0 3
55730: PUSH
55731: LD_VAR 0 5
55735: PUSH
55736: FOR_IN
55737: IFFALSE 55769
// begin result := EnemyInRange ( i , 22 ) ;
55739: LD_ADDR_VAR 0 2
55743: PUSH
55744: LD_VAR 0 3
55748: PPUSH
55749: LD_INT 22
55751: PPUSH
55752: CALL 54007 0 2
55756: ST_TO_ADDR
// if result then
55757: LD_VAR 0 2
55761: IFFALSE 55767
// exit ;
55763: POP
55764: POP
55765: GO 55771
// end ;
55767: GO 55736
55769: POP
55770: POP
// end ;
55771: LD_VAR 0 2
55775: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55776: LD_INT 0
55778: PPUSH
55779: PPUSH
// if not units then
55780: LD_VAR 0 1
55784: NOT
55785: IFFALSE 55789
// exit ;
55787: GO 55859
// result := [ ] ;
55789: LD_ADDR_VAR 0 3
55793: PUSH
55794: EMPTY
55795: ST_TO_ADDR
// for i in units do
55796: LD_ADDR_VAR 0 4
55800: PUSH
55801: LD_VAR 0 1
55805: PUSH
55806: FOR_IN
55807: IFFALSE 55857
// if GetTag ( i ) = tag then
55809: LD_VAR 0 4
55813: PPUSH
55814: CALL_OW 110
55818: PUSH
55819: LD_VAR 0 2
55823: EQUAL
55824: IFFALSE 55855
// result := Replace ( result , result + 1 , i ) ;
55826: LD_ADDR_VAR 0 3
55830: PUSH
55831: LD_VAR 0 3
55835: PPUSH
55836: LD_VAR 0 3
55840: PUSH
55841: LD_INT 1
55843: PLUS
55844: PPUSH
55845: LD_VAR 0 4
55849: PPUSH
55850: CALL_OW 1
55854: ST_TO_ADDR
55855: GO 55806
55857: POP
55858: POP
// end ;
55859: LD_VAR 0 3
55863: RET
// export function IsDriver ( un ) ; begin
55864: LD_INT 0
55866: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55867: LD_ADDR_VAR 0 2
55871: PUSH
55872: LD_VAR 0 1
55876: PUSH
55877: LD_INT 55
55879: PUSH
55880: EMPTY
55881: LIST
55882: PPUSH
55883: CALL_OW 69
55887: IN
55888: ST_TO_ADDR
// end ;
55889: LD_VAR 0 2
55893: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55894: LD_INT 0
55896: PPUSH
55897: PPUSH
// list := [ ] ;
55898: LD_ADDR_VAR 0 5
55902: PUSH
55903: EMPTY
55904: ST_TO_ADDR
// case d of 0 :
55905: LD_VAR 0 3
55909: PUSH
55910: LD_INT 0
55912: DOUBLE
55913: EQUAL
55914: IFTRUE 55918
55916: GO 56051
55918: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55919: LD_ADDR_VAR 0 5
55923: PUSH
55924: LD_VAR 0 1
55928: PUSH
55929: LD_INT 4
55931: MINUS
55932: PUSH
55933: LD_VAR 0 2
55937: PUSH
55938: LD_INT 4
55940: MINUS
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: PUSH
55950: LD_VAR 0 1
55954: PUSH
55955: LD_INT 3
55957: MINUS
55958: PUSH
55959: LD_VAR 0 2
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: PUSH
55972: LD_VAR 0 1
55976: PUSH
55977: LD_INT 4
55979: PLUS
55980: PUSH
55981: LD_VAR 0 2
55985: PUSH
55986: LD_INT 4
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: PUSH
55994: LD_VAR 0 1
55998: PUSH
55999: LD_INT 3
56001: PLUS
56002: PUSH
56003: LD_VAR 0 2
56007: PUSH
56008: LD_INT 3
56010: PLUS
56011: PUSH
56012: LD_INT 5
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: PUSH
56020: LD_VAR 0 1
56024: PUSH
56025: LD_VAR 0 2
56029: PUSH
56030: LD_INT 4
56032: PLUS
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: ST_TO_ADDR
// end ; 1 :
56049: GO 56749
56051: LD_INT 1
56053: DOUBLE
56054: EQUAL
56055: IFTRUE 56059
56057: GO 56192
56059: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56060: LD_ADDR_VAR 0 5
56064: PUSH
56065: LD_VAR 0 1
56069: PUSH
56070: LD_VAR 0 2
56074: PUSH
56075: LD_INT 4
56077: MINUS
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: PUSH
56087: LD_VAR 0 1
56091: PUSH
56092: LD_INT 3
56094: MINUS
56095: PUSH
56096: LD_VAR 0 2
56100: PUSH
56101: LD_INT 3
56103: MINUS
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: PUSH
56113: LD_VAR 0 1
56117: PUSH
56118: LD_INT 4
56120: MINUS
56121: PUSH
56122: LD_VAR 0 2
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: PUSH
56135: LD_VAR 0 1
56139: PUSH
56140: LD_VAR 0 2
56144: PUSH
56145: LD_INT 3
56147: PLUS
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: PUSH
56157: LD_VAR 0 1
56161: PUSH
56162: LD_INT 4
56164: PLUS
56165: PUSH
56166: LD_VAR 0 2
56170: PUSH
56171: LD_INT 4
56173: PLUS
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// end ; 2 :
56190: GO 56749
56192: LD_INT 2
56194: DOUBLE
56195: EQUAL
56196: IFTRUE 56200
56198: GO 56329
56200: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56201: LD_ADDR_VAR 0 5
56205: PUSH
56206: LD_VAR 0 1
56210: PUSH
56211: LD_VAR 0 2
56215: PUSH
56216: LD_INT 3
56218: MINUS
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: PUSH
56228: LD_VAR 0 1
56232: PUSH
56233: LD_INT 4
56235: PLUS
56236: PUSH
56237: LD_VAR 0 2
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: PUSH
56250: LD_VAR 0 1
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 4
56262: PLUS
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 1
56276: PUSH
56277: LD_INT 3
56279: MINUS
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: PUSH
56294: LD_VAR 0 1
56298: PUSH
56299: LD_INT 4
56301: MINUS
56302: PUSH
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 4
56310: MINUS
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// end ; 3 :
56327: GO 56749
56329: LD_INT 3
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56337
56335: GO 56470
56337: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56338: LD_ADDR_VAR 0 5
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_INT 3
56350: PLUS
56351: PUSH
56352: LD_VAR 0 2
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: LD_INT 4
56372: PLUS
56373: PUSH
56374: LD_VAR 0 2
56378: PUSH
56379: LD_INT 4
56381: PLUS
56382: PUSH
56383: LD_INT 5
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: PUSH
56391: LD_VAR 0 1
56395: PUSH
56396: LD_INT 4
56398: MINUS
56399: PUSH
56400: LD_VAR 0 2
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: PUSH
56413: LD_VAR 0 1
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 4
56425: MINUS
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: LD_VAR 0 1
56439: PUSH
56440: LD_INT 3
56442: MINUS
56443: PUSH
56444: LD_VAR 0 2
56448: PUSH
56449: LD_INT 3
56451: MINUS
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// end ; 4 :
56468: GO 56749
56470: LD_INT 4
56472: DOUBLE
56473: EQUAL
56474: IFTRUE 56478
56476: GO 56611
56478: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56479: LD_ADDR_VAR 0 5
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: LD_VAR 0 2
56493: PUSH
56494: LD_INT 4
56496: PLUS
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: PUSH
56506: LD_VAR 0 1
56510: PUSH
56511: LD_INT 3
56513: PLUS
56514: PUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_INT 3
56522: PLUS
56523: PUSH
56524: LD_INT 5
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: LD_VAR 0 1
56536: PUSH
56537: LD_INT 4
56539: PLUS
56540: PUSH
56541: LD_VAR 0 2
56545: PUSH
56546: LD_INT 4
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_INT 3
56566: MINUS
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: PUSH
56576: LD_VAR 0 1
56580: PUSH
56581: LD_INT 4
56583: MINUS
56584: PUSH
56585: LD_VAR 0 2
56589: PUSH
56590: LD_INT 4
56592: MINUS
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// end ; 5 :
56609: GO 56749
56611: LD_INT 5
56613: DOUBLE
56614: EQUAL
56615: IFTRUE 56619
56617: GO 56748
56619: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56620: LD_ADDR_VAR 0 5
56624: PUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_INT 4
56632: MINUS
56633: PUSH
56634: LD_VAR 0 2
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: LD_VAR 0 2
56656: PUSH
56657: LD_INT 4
56659: MINUS
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: PUSH
56669: LD_VAR 0 1
56673: PUSH
56674: LD_INT 4
56676: PLUS
56677: PUSH
56678: LD_VAR 0 2
56682: PUSH
56683: LD_INT 4
56685: PLUS
56686: PUSH
56687: LD_INT 5
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: LD_VAR 0 1
56699: PUSH
56700: LD_INT 3
56702: PLUS
56703: PUSH
56704: LD_VAR 0 2
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: PUSH
56717: LD_VAR 0 1
56721: PUSH
56722: LD_VAR 0 2
56726: PUSH
56727: LD_INT 3
56729: PLUS
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// end ; end ;
56746: GO 56749
56748: POP
// result := list ;
56749: LD_ADDR_VAR 0 4
56753: PUSH
56754: LD_VAR 0 5
56758: ST_TO_ADDR
// end ;
56759: LD_VAR 0 4
56763: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56764: LD_INT 0
56766: PPUSH
56767: PPUSH
56768: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56769: LD_VAR 0 1
56773: NOT
56774: PUSH
56775: LD_VAR 0 2
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: LD_INT 4
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: IN
56798: NOT
56799: OR
56800: IFFALSE 56804
// exit ;
56802: GO 56896
// tmp := [ ] ;
56804: LD_ADDR_VAR 0 5
56808: PUSH
56809: EMPTY
56810: ST_TO_ADDR
// for i in units do
56811: LD_ADDR_VAR 0 4
56815: PUSH
56816: LD_VAR 0 1
56820: PUSH
56821: FOR_IN
56822: IFFALSE 56865
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56824: LD_ADDR_VAR 0 5
56828: PUSH
56829: LD_VAR 0 5
56833: PPUSH
56834: LD_VAR 0 5
56838: PUSH
56839: LD_INT 1
56841: PLUS
56842: PPUSH
56843: LD_VAR 0 4
56847: PPUSH
56848: LD_VAR 0 2
56852: PPUSH
56853: CALL_OW 259
56857: PPUSH
56858: CALL_OW 2
56862: ST_TO_ADDR
56863: GO 56821
56865: POP
56866: POP
// if not tmp then
56867: LD_VAR 0 5
56871: NOT
56872: IFFALSE 56876
// exit ;
56874: GO 56896
// result := SortListByListDesc ( units , tmp ) ;
56876: LD_ADDR_VAR 0 3
56880: PUSH
56881: LD_VAR 0 1
56885: PPUSH
56886: LD_VAR 0 5
56890: PPUSH
56891: CALL_OW 77
56895: ST_TO_ADDR
// end ;
56896: LD_VAR 0 3
56900: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
56905: PPUSH
// result := false ;
56906: LD_ADDR_VAR 0 3
56910: PUSH
56911: LD_INT 0
56913: ST_TO_ADDR
// x := GetX ( building ) ;
56914: LD_ADDR_VAR 0 4
56918: PUSH
56919: LD_VAR 0 2
56923: PPUSH
56924: CALL_OW 250
56928: ST_TO_ADDR
// y := GetY ( building ) ;
56929: LD_ADDR_VAR 0 5
56933: PUSH
56934: LD_VAR 0 2
56938: PPUSH
56939: CALL_OW 251
56943: ST_TO_ADDR
// if not building or not x or not y then
56944: LD_VAR 0 2
56948: NOT
56949: PUSH
56950: LD_VAR 0 4
56954: NOT
56955: OR
56956: PUSH
56957: LD_VAR 0 5
56961: NOT
56962: OR
56963: IFFALSE 56967
// exit ;
56965: GO 57059
// if GetTaskList ( unit ) then
56967: LD_VAR 0 1
56971: PPUSH
56972: CALL_OW 437
56976: IFFALSE 57059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56978: LD_STRING e
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 437
56990: PUSH
56991: LD_INT 1
56993: ARRAY
56994: PUSH
56995: LD_INT 1
56997: ARRAY
56998: EQUAL
56999: PUSH
57000: LD_VAR 0 4
57004: PUSH
57005: LD_VAR 0 1
57009: PPUSH
57010: CALL_OW 437
57014: PUSH
57015: LD_INT 1
57017: ARRAY
57018: PUSH
57019: LD_INT 2
57021: ARRAY
57022: EQUAL
57023: AND
57024: PUSH
57025: LD_VAR 0 5
57029: PUSH
57030: LD_VAR 0 1
57034: PPUSH
57035: CALL_OW 437
57039: PUSH
57040: LD_INT 1
57042: ARRAY
57043: PUSH
57044: LD_INT 3
57046: ARRAY
57047: EQUAL
57048: AND
57049: IFFALSE 57059
// result := true end ;
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_INT 1
57058: ST_TO_ADDR
// end ;
57059: LD_VAR 0 3
57063: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57064: LD_INT 0
57066: PPUSH
// result := false ;
57067: LD_ADDR_VAR 0 4
57071: PUSH
57072: LD_INT 0
57074: ST_TO_ADDR
// if GetTaskList ( unit ) then
57075: LD_VAR 0 1
57079: PPUSH
57080: CALL_OW 437
57084: IFFALSE 57167
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57086: LD_STRING M
57088: PUSH
57089: LD_VAR 0 1
57093: PPUSH
57094: CALL_OW 437
57098: PUSH
57099: LD_INT 1
57101: ARRAY
57102: PUSH
57103: LD_INT 1
57105: ARRAY
57106: EQUAL
57107: PUSH
57108: LD_VAR 0 2
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 437
57122: PUSH
57123: LD_INT 1
57125: ARRAY
57126: PUSH
57127: LD_INT 2
57129: ARRAY
57130: EQUAL
57131: AND
57132: PUSH
57133: LD_VAR 0 3
57137: PUSH
57138: LD_VAR 0 1
57142: PPUSH
57143: CALL_OW 437
57147: PUSH
57148: LD_INT 1
57150: ARRAY
57151: PUSH
57152: LD_INT 3
57154: ARRAY
57155: EQUAL
57156: AND
57157: IFFALSE 57167
// result := true ;
57159: LD_ADDR_VAR 0 4
57163: PUSH
57164: LD_INT 1
57166: ST_TO_ADDR
// end ; end ;
57167: LD_VAR 0 4
57171: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57172: LD_INT 0
57174: PPUSH
57175: PPUSH
57176: PPUSH
57177: PPUSH
// if not unit or not area then
57178: LD_VAR 0 1
57182: NOT
57183: PUSH
57184: LD_VAR 0 2
57188: NOT
57189: OR
57190: IFFALSE 57194
// exit ;
57192: GO 57358
// tmp := AreaToList ( area , i ) ;
57194: LD_ADDR_VAR 0 6
57198: PUSH
57199: LD_VAR 0 2
57203: PPUSH
57204: LD_VAR 0 5
57208: PPUSH
57209: CALL_OW 517
57213: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57214: LD_ADDR_VAR 0 5
57218: PUSH
57219: DOUBLE
57220: LD_INT 1
57222: DEC
57223: ST_TO_ADDR
57224: LD_VAR 0 6
57228: PUSH
57229: LD_INT 1
57231: ARRAY
57232: PUSH
57233: FOR_TO
57234: IFFALSE 57356
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57236: LD_ADDR_VAR 0 7
57240: PUSH
57241: LD_VAR 0 6
57245: PUSH
57246: LD_INT 1
57248: ARRAY
57249: PUSH
57250: LD_VAR 0 5
57254: ARRAY
57255: PUSH
57256: LD_VAR 0 6
57260: PUSH
57261: LD_INT 2
57263: ARRAY
57264: PUSH
57265: LD_VAR 0 5
57269: ARRAY
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57275: LD_VAR 0 7
57279: PUSH
57280: LD_INT 1
57282: ARRAY
57283: PPUSH
57284: LD_VAR 0 7
57288: PUSH
57289: LD_INT 2
57291: ARRAY
57292: PPUSH
57293: CALL_OW 428
57297: PUSH
57298: LD_INT 0
57300: EQUAL
57301: IFFALSE 57354
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57303: LD_VAR 0 1
57307: PPUSH
57308: LD_VAR 0 7
57312: PUSH
57313: LD_INT 1
57315: ARRAY
57316: PPUSH
57317: LD_VAR 0 7
57321: PUSH
57322: LD_INT 2
57324: ARRAY
57325: PPUSH
57326: LD_VAR 0 3
57330: PPUSH
57331: CALL_OW 48
// result := IsPlaced ( unit ) ;
57335: LD_ADDR_VAR 0 4
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 305
57349: ST_TO_ADDR
// exit ;
57350: POP
57351: POP
57352: GO 57358
// end ; end ;
57354: GO 57233
57356: POP
57357: POP
// end ;
57358: LD_VAR 0 4
57362: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57363: LD_INT 0
57365: PPUSH
57366: PPUSH
57367: PPUSH
// if not side or side > 8 then
57368: LD_VAR 0 1
57372: NOT
57373: PUSH
57374: LD_VAR 0 1
57378: PUSH
57379: LD_INT 8
57381: GREATER
57382: OR
57383: IFFALSE 57387
// exit ;
57385: GO 57574
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57387: LD_ADDR_VAR 0 4
57391: PUSH
57392: LD_INT 22
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 21
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PPUSH
57418: CALL_OW 69
57422: ST_TO_ADDR
// if not tmp then
57423: LD_VAR 0 4
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57574
// enable_addtolog := true ;
57432: LD_ADDR_OWVAR 81
57436: PUSH
57437: LD_INT 1
57439: ST_TO_ADDR
// AddToLog ( [ ) ;
57440: LD_STRING [
57442: PPUSH
57443: CALL_OW 561
// for i in tmp do
57447: LD_ADDR_VAR 0 3
57451: PUSH
57452: LD_VAR 0 4
57456: PUSH
57457: FOR_IN
57458: IFFALSE 57565
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57460: LD_STRING [
57462: PUSH
57463: LD_VAR 0 3
57467: PPUSH
57468: CALL_OW 266
57472: STR
57473: PUSH
57474: LD_STRING , 
57476: STR
57477: PUSH
57478: LD_VAR 0 3
57482: PPUSH
57483: CALL_OW 250
57487: STR
57488: PUSH
57489: LD_STRING , 
57491: STR
57492: PUSH
57493: LD_VAR 0 3
57497: PPUSH
57498: CALL_OW 251
57502: STR
57503: PUSH
57504: LD_STRING , 
57506: STR
57507: PUSH
57508: LD_VAR 0 3
57512: PPUSH
57513: CALL_OW 254
57517: STR
57518: PUSH
57519: LD_STRING , 
57521: STR
57522: PUSH
57523: LD_VAR 0 3
57527: PPUSH
57528: LD_INT 1
57530: PPUSH
57531: CALL_OW 268
57535: STR
57536: PUSH
57537: LD_STRING , 
57539: STR
57540: PUSH
57541: LD_VAR 0 3
57545: PPUSH
57546: LD_INT 2
57548: PPUSH
57549: CALL_OW 268
57553: STR
57554: PUSH
57555: LD_STRING ],
57557: STR
57558: PPUSH
57559: CALL_OW 561
// end ;
57563: GO 57457
57565: POP
57566: POP
// AddToLog ( ]; ) ;
57567: LD_STRING ];
57569: PPUSH
57570: CALL_OW 561
// end ;
57574: LD_VAR 0 2
57578: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57579: LD_INT 0
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
57585: PPUSH
// if not area or not rate or not max then
57586: LD_VAR 0 1
57590: NOT
57591: PUSH
57592: LD_VAR 0 2
57596: NOT
57597: OR
57598: PUSH
57599: LD_VAR 0 4
57603: NOT
57604: OR
57605: IFFALSE 57609
// exit ;
57607: GO 57801
// while 1 do
57609: LD_INT 1
57611: IFFALSE 57801
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57613: LD_ADDR_VAR 0 9
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: LD_INT 1
57625: PPUSH
57626: CALL_OW 287
57630: PUSH
57631: LD_INT 10
57633: MUL
57634: ST_TO_ADDR
// r := rate / 10 ;
57635: LD_ADDR_VAR 0 7
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 10
57647: DIVREAL
57648: ST_TO_ADDR
// time := 1 1$00 ;
57649: LD_ADDR_VAR 0 8
57653: PUSH
57654: LD_INT 2100
57656: ST_TO_ADDR
// if amount < min then
57657: LD_VAR 0 9
57661: PUSH
57662: LD_VAR 0 3
57666: LESS
57667: IFFALSE 57685
// r := r * 2 else
57669: LD_ADDR_VAR 0 7
57673: PUSH
57674: LD_VAR 0 7
57678: PUSH
57679: LD_INT 2
57681: MUL
57682: ST_TO_ADDR
57683: GO 57711
// if amount > max then
57685: LD_VAR 0 9
57689: PUSH
57690: LD_VAR 0 4
57694: GREATER
57695: IFFALSE 57711
// r := r / 2 ;
57697: LD_ADDR_VAR 0 7
57701: PUSH
57702: LD_VAR 0 7
57706: PUSH
57707: LD_INT 2
57709: DIVREAL
57710: ST_TO_ADDR
// time := time / r ;
57711: LD_ADDR_VAR 0 8
57715: PUSH
57716: LD_VAR 0 8
57720: PUSH
57721: LD_VAR 0 7
57725: DIVREAL
57726: ST_TO_ADDR
// if time < 0 then
57727: LD_VAR 0 8
57731: PUSH
57732: LD_INT 0
57734: LESS
57735: IFFALSE 57752
// time := time * - 1 ;
57737: LD_ADDR_VAR 0 8
57741: PUSH
57742: LD_VAR 0 8
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: MUL
57751: ST_TO_ADDR
// wait ( time ) ;
57752: LD_VAR 0 8
57756: PPUSH
57757: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57761: LD_INT 35
57763: PPUSH
57764: LD_INT 875
57766: PPUSH
57767: CALL_OW 12
57771: PPUSH
57772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57776: LD_INT 1
57778: PPUSH
57779: LD_INT 5
57781: PPUSH
57782: CALL_OW 12
57786: PPUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: LD_INT 1
57794: PPUSH
57795: CALL_OW 55
// end ;
57799: GO 57609
// end ;
57801: LD_VAR 0 5
57805: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57806: LD_INT 0
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
57813: PPUSH
57814: PPUSH
57815: PPUSH
// if not turrets or not factories then
57816: LD_VAR 0 1
57820: NOT
57821: PUSH
57822: LD_VAR 0 2
57826: NOT
57827: OR
57828: IFFALSE 57832
// exit ;
57830: GO 58139
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57832: LD_ADDR_VAR 0 10
57836: PUSH
57837: LD_INT 5
57839: PUSH
57840: LD_INT 6
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 4
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 24
57874: PUSH
57875: LD_INT 25
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 23
57884: PUSH
57885: LD_INT 27
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 42
57898: PUSH
57899: LD_INT 43
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 44
57908: PUSH
57909: LD_INT 46
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 45
57918: PUSH
57919: LD_INT 47
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// result := [ ] ;
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: EMPTY
57942: ST_TO_ADDR
// for i in turrets do
57943: LD_ADDR_VAR 0 4
57947: PUSH
57948: LD_VAR 0 1
57952: PUSH
57953: FOR_IN
57954: IFFALSE 58137
// begin nat := GetNation ( i ) ;
57956: LD_ADDR_VAR 0 7
57960: PUSH
57961: LD_VAR 0 4
57965: PPUSH
57966: CALL_OW 248
57970: ST_TO_ADDR
// weapon := 0 ;
57971: LD_ADDR_VAR 0 8
57975: PUSH
57976: LD_INT 0
57978: ST_TO_ADDR
// if not nat then
57979: LD_VAR 0 7
57983: NOT
57984: IFFALSE 57988
// continue ;
57986: GO 57953
// for j in list [ nat ] do
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: LD_VAR 0 10
57997: PUSH
57998: LD_VAR 0 7
58002: ARRAY
58003: PUSH
58004: FOR_IN
58005: IFFALSE 58046
// if GetBWeapon ( i ) = j [ 1 ] then
58007: LD_VAR 0 4
58011: PPUSH
58012: CALL_OW 269
58016: PUSH
58017: LD_VAR 0 5
58021: PUSH
58022: LD_INT 1
58024: ARRAY
58025: EQUAL
58026: IFFALSE 58044
// begin weapon := j [ 2 ] ;
58028: LD_ADDR_VAR 0 8
58032: PUSH
58033: LD_VAR 0 5
58037: PUSH
58038: LD_INT 2
58040: ARRAY
58041: ST_TO_ADDR
// break ;
58042: GO 58046
// end ;
58044: GO 58004
58046: POP
58047: POP
// if not weapon then
58048: LD_VAR 0 8
58052: NOT
58053: IFFALSE 58057
// continue ;
58055: GO 57953
// for k in factories do
58057: LD_ADDR_VAR 0 6
58061: PUSH
58062: LD_VAR 0 2
58066: PUSH
58067: FOR_IN
58068: IFFALSE 58133
// begin weapons := AvailableWeaponList ( k ) ;
58070: LD_ADDR_VAR 0 9
58074: PUSH
58075: LD_VAR 0 6
58079: PPUSH
58080: CALL_OW 478
58084: ST_TO_ADDR
// if not weapons then
58085: LD_VAR 0 9
58089: NOT
58090: IFFALSE 58094
// continue ;
58092: GO 58067
// if weapon in weapons then
58094: LD_VAR 0 8
58098: PUSH
58099: LD_VAR 0 9
58103: IN
58104: IFFALSE 58131
// begin result := [ i , weapon ] ;
58106: LD_ADDR_VAR 0 3
58110: PUSH
58111: LD_VAR 0 4
58115: PUSH
58116: LD_VAR 0 8
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: ST_TO_ADDR
// exit ;
58125: POP
58126: POP
58127: POP
58128: POP
58129: GO 58139
// end ; end ;
58131: GO 58067
58133: POP
58134: POP
// end ;
58135: GO 57953
58137: POP
58138: POP
// end ;
58139: LD_VAR 0 3
58143: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58144: LD_INT 0
58146: PPUSH
// if not side or side > 8 then
58147: LD_VAR 0 3
58151: NOT
58152: PUSH
58153: LD_VAR 0 3
58157: PUSH
58158: LD_INT 8
58160: GREATER
58161: OR
58162: IFFALSE 58166
// exit ;
58164: GO 58225
// if not range then
58166: LD_VAR 0 4
58170: NOT
58171: IFFALSE 58182
// range := - 12 ;
58173: LD_ADDR_VAR 0 4
58177: PUSH
58178: LD_INT 12
58180: NEG
58181: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58182: LD_VAR 0 1
58186: PPUSH
58187: LD_VAR 0 2
58191: PPUSH
58192: LD_VAR 0 3
58196: PPUSH
58197: LD_VAR 0 4
58201: PPUSH
58202: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58206: LD_VAR 0 1
58210: PPUSH
58211: LD_VAR 0 2
58215: PPUSH
58216: LD_VAR 0 3
58220: PPUSH
58221: CALL_OW 331
// end ;
58225: LD_VAR 0 5
58229: RET
// export function Video ( mode ) ; begin
58230: LD_INT 0
58232: PPUSH
// ingame_video = mode ;
58233: LD_ADDR_OWVAR 52
58237: PUSH
58238: LD_VAR 0 1
58242: ST_TO_ADDR
// interface_hidden = mode ;
58243: LD_ADDR_OWVAR 54
58247: PUSH
58248: LD_VAR 0 1
58252: ST_TO_ADDR
// end ;
58253: LD_VAR 0 2
58257: RET
// export function Join ( array , element ) ; begin
58258: LD_INT 0
58260: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58261: LD_ADDR_VAR 0 3
58265: PUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: LD_VAR 0 1
58275: PUSH
58276: LD_INT 1
58278: PLUS
58279: PPUSH
58280: LD_VAR 0 2
58284: PPUSH
58285: CALL_OW 1
58289: ST_TO_ADDR
// end ;
58290: LD_VAR 0 3
58294: RET
// export function JoinUnion ( array , element ) ; begin
58295: LD_INT 0
58297: PPUSH
// result := array union element ;
58298: LD_ADDR_VAR 0 3
58302: PUSH
58303: LD_VAR 0 1
58307: PUSH
58308: LD_VAR 0 2
58312: UNION
58313: ST_TO_ADDR
// end ;
58314: LD_VAR 0 3
58318: RET
// export function GetBehemoths ( side ) ; begin
58319: LD_INT 0
58321: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58322: LD_ADDR_VAR 0 2
58326: PUSH
58327: LD_INT 22
58329: PUSH
58330: LD_VAR 0 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 31
58341: PUSH
58342: LD_INT 25
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PPUSH
58353: CALL_OW 69
58357: ST_TO_ADDR
// end ;
58358: LD_VAR 0 2
58362: RET
// export function Shuffle ( array ) ; var i , index ; begin
58363: LD_INT 0
58365: PPUSH
58366: PPUSH
58367: PPUSH
// result := [ ] ;
58368: LD_ADDR_VAR 0 2
58372: PUSH
58373: EMPTY
58374: ST_TO_ADDR
// if not array then
58375: LD_VAR 0 1
58379: NOT
58380: IFFALSE 58384
// exit ;
58382: GO 58483
// Randomize ;
58384: CALL_OW 10
// for i = array downto 1 do
58388: LD_ADDR_VAR 0 3
58392: PUSH
58393: DOUBLE
58394: LD_VAR 0 1
58398: INC
58399: ST_TO_ADDR
58400: LD_INT 1
58402: PUSH
58403: FOR_DOWNTO
58404: IFFALSE 58481
// begin index := rand ( 1 , array ) ;
58406: LD_ADDR_VAR 0 4
58410: PUSH
58411: LD_INT 1
58413: PPUSH
58414: LD_VAR 0 1
58418: PPUSH
58419: CALL_OW 12
58423: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58424: LD_ADDR_VAR 0 2
58428: PUSH
58429: LD_VAR 0 2
58433: PPUSH
58434: LD_VAR 0 2
58438: PUSH
58439: LD_INT 1
58441: PLUS
58442: PPUSH
58443: LD_VAR 0 1
58447: PUSH
58448: LD_VAR 0 4
58452: ARRAY
58453: PPUSH
58454: CALL_OW 2
58458: ST_TO_ADDR
// array := Delete ( array , index ) ;
58459: LD_ADDR_VAR 0 1
58463: PUSH
58464: LD_VAR 0 1
58468: PPUSH
58469: LD_VAR 0 4
58473: PPUSH
58474: CALL_OW 3
58478: ST_TO_ADDR
// end ;
58479: GO 58403
58481: POP
58482: POP
// end ;
58483: LD_VAR 0 2
58487: RET
// export function GetBaseMaterials ( base ) ; begin
58488: LD_INT 0
58490: PPUSH
// result := [ 0 , 0 , 0 ] ;
58491: LD_ADDR_VAR 0 2
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: ST_TO_ADDR
// if not base then
58510: LD_VAR 0 1
58514: NOT
58515: IFFALSE 58519
// exit ;
58517: GO 58568
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58519: LD_ADDR_VAR 0 2
58523: PUSH
58524: LD_VAR 0 1
58528: PPUSH
58529: LD_INT 1
58531: PPUSH
58532: CALL_OW 275
58536: PUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: LD_INT 2
58544: PPUSH
58545: CALL_OW 275
58549: PUSH
58550: LD_VAR 0 1
58554: PPUSH
58555: LD_INT 3
58557: PPUSH
58558: CALL_OW 275
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: ST_TO_ADDR
// end ;
58568: LD_VAR 0 2
58572: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58573: LD_INT 0
58575: PPUSH
58576: PPUSH
// result := array ;
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: LD_VAR 0 1
58586: ST_TO_ADDR
// if size > 0 then
58587: LD_VAR 0 2
58591: PUSH
58592: LD_INT 0
58594: GREATER
58595: IFFALSE 58641
// for i := array downto size do
58597: LD_ADDR_VAR 0 4
58601: PUSH
58602: DOUBLE
58603: LD_VAR 0 1
58607: INC
58608: ST_TO_ADDR
58609: LD_VAR 0 2
58613: PUSH
58614: FOR_DOWNTO
58615: IFFALSE 58639
// result := Delete ( result , result ) ;
58617: LD_ADDR_VAR 0 3
58621: PUSH
58622: LD_VAR 0 3
58626: PPUSH
58627: LD_VAR 0 3
58631: PPUSH
58632: CALL_OW 3
58636: ST_TO_ADDR
58637: GO 58614
58639: POP
58640: POP
// end ;
58641: LD_VAR 0 3
58645: RET
// export function ComExit ( unit ) ; var tmp ; begin
58646: LD_INT 0
58648: PPUSH
58649: PPUSH
// if not IsInUnit ( unit ) then
58650: LD_VAR 0 1
58654: PPUSH
58655: CALL_OW 310
58659: NOT
58660: IFFALSE 58664
// exit ;
58662: GO 58724
// tmp := IsInUnit ( unit ) ;
58664: LD_ADDR_VAR 0 3
58668: PUSH
58669: LD_VAR 0 1
58673: PPUSH
58674: CALL_OW 310
58678: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58679: LD_VAR 0 3
58683: PPUSH
58684: CALL_OW 247
58688: PUSH
58689: LD_INT 2
58691: EQUAL
58692: IFFALSE 58705
// ComExitVehicle ( unit ) else
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 121
58703: GO 58714
// ComExitBuilding ( unit ) ;
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 122
// result := tmp ;
58714: LD_ADDR_VAR 0 2
58718: PUSH
58719: LD_VAR 0 3
58723: ST_TO_ADDR
// end ;
58724: LD_VAR 0 2
58728: RET
// export function ComExitAll ( units ) ; var i ; begin
58729: LD_INT 0
58731: PPUSH
58732: PPUSH
// if not units then
58733: LD_VAR 0 1
58737: NOT
58738: IFFALSE 58742
// exit ;
58740: GO 58768
// for i in units do
58742: LD_ADDR_VAR 0 3
58746: PUSH
58747: LD_VAR 0 1
58751: PUSH
58752: FOR_IN
58753: IFFALSE 58766
// ComExit ( i ) ;
58755: LD_VAR 0 3
58759: PPUSH
58760: CALL 58646 0 1
58764: GO 58752
58766: POP
58767: POP
// end ;
58768: LD_VAR 0 2
58772: RET
// export function ResetHc ; begin
58773: LD_INT 0
58775: PPUSH
// InitHc ;
58776: CALL_OW 19
// hc_importance := 0 ;
58780: LD_ADDR_OWVAR 32
58784: PUSH
58785: LD_INT 0
58787: ST_TO_ADDR
// end ;
58788: LD_VAR 0 1
58792: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58793: LD_INT 0
58795: PPUSH
58796: PPUSH
58797: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58798: LD_ADDR_VAR 0 6
58802: PUSH
58803: LD_VAR 0 1
58807: PUSH
58808: LD_VAR 0 3
58812: PLUS
58813: PUSH
58814: LD_INT 2
58816: DIV
58817: ST_TO_ADDR
// if _x < 0 then
58818: LD_VAR 0 6
58822: PUSH
58823: LD_INT 0
58825: LESS
58826: IFFALSE 58843
// _x := _x * - 1 ;
58828: LD_ADDR_VAR 0 6
58832: PUSH
58833: LD_VAR 0 6
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: MUL
58842: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58843: LD_ADDR_VAR 0 7
58847: PUSH
58848: LD_VAR 0 2
58852: PUSH
58853: LD_VAR 0 4
58857: PLUS
58858: PUSH
58859: LD_INT 2
58861: DIV
58862: ST_TO_ADDR
// if _y < 0 then
58863: LD_VAR 0 7
58867: PUSH
58868: LD_INT 0
58870: LESS
58871: IFFALSE 58888
// _y := _y * - 1 ;
58873: LD_ADDR_VAR 0 7
58877: PUSH
58878: LD_VAR 0 7
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: MUL
58887: ST_TO_ADDR
// result := [ _x , _y ] ;
58888: LD_ADDR_VAR 0 5
58892: PUSH
58893: LD_VAR 0 6
58897: PUSH
58898: LD_VAR 0 7
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// end ;
58907: LD_VAR 0 5
58911: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58912: LD_INT 0
58914: PPUSH
58915: PPUSH
58916: PPUSH
58917: PPUSH
// task := GetTaskList ( unit ) ;
58918: LD_ADDR_VAR 0 7
58922: PUSH
58923: LD_VAR 0 1
58927: PPUSH
58928: CALL_OW 437
58932: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58933: LD_VAR 0 7
58937: NOT
58938: PUSH
58939: LD_VAR 0 1
58943: PPUSH
58944: LD_VAR 0 2
58948: PPUSH
58949: CALL_OW 308
58953: NOT
58954: AND
58955: IFFALSE 58959
// exit ;
58957: GO 59077
// if IsInArea ( unit , area ) then
58959: LD_VAR 0 1
58963: PPUSH
58964: LD_VAR 0 2
58968: PPUSH
58969: CALL_OW 308
58973: IFFALSE 58991
// begin ComMoveToArea ( unit , goAway ) ;
58975: LD_VAR 0 1
58979: PPUSH
58980: LD_VAR 0 3
58984: PPUSH
58985: CALL_OW 113
// exit ;
58989: GO 59077
// end ; if task [ 1 ] [ 1 ] <> M then
58991: LD_VAR 0 7
58995: PUSH
58996: LD_INT 1
58998: ARRAY
58999: PUSH
59000: LD_INT 1
59002: ARRAY
59003: PUSH
59004: LD_STRING M
59006: NONEQUAL
59007: IFFALSE 59011
// exit ;
59009: GO 59077
// x := task [ 1 ] [ 2 ] ;
59011: LD_ADDR_VAR 0 5
59015: PUSH
59016: LD_VAR 0 7
59020: PUSH
59021: LD_INT 1
59023: ARRAY
59024: PUSH
59025: LD_INT 2
59027: ARRAY
59028: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59029: LD_ADDR_VAR 0 6
59033: PUSH
59034: LD_VAR 0 7
59038: PUSH
59039: LD_INT 1
59041: ARRAY
59042: PUSH
59043: LD_INT 3
59045: ARRAY
59046: ST_TO_ADDR
// if InArea ( x , y , area ) then
59047: LD_VAR 0 5
59051: PPUSH
59052: LD_VAR 0 6
59056: PPUSH
59057: LD_VAR 0 2
59061: PPUSH
59062: CALL_OW 309
59066: IFFALSE 59077
// ComStop ( unit ) ;
59068: LD_VAR 0 1
59072: PPUSH
59073: CALL_OW 141
// end ;
59077: LD_VAR 0 4
59081: RET
// export function Abs ( value ) ; begin
59082: LD_INT 0
59084: PPUSH
// result := value ;
59085: LD_ADDR_VAR 0 2
59089: PUSH
59090: LD_VAR 0 1
59094: ST_TO_ADDR
// if value < 0 then
59095: LD_VAR 0 1
59099: PUSH
59100: LD_INT 0
59102: LESS
59103: IFFALSE 59120
// result := value * - 1 ;
59105: LD_ADDR_VAR 0 2
59109: PUSH
59110: LD_VAR 0 1
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: MUL
59119: ST_TO_ADDR
// end ;
59120: LD_VAR 0 2
59124: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59125: LD_INT 0
59127: PPUSH
59128: PPUSH
59129: PPUSH
59130: PPUSH
59131: PPUSH
59132: PPUSH
59133: PPUSH
59134: PPUSH
// if not unit or not building then
59135: LD_VAR 0 1
59139: NOT
59140: PUSH
59141: LD_VAR 0 2
59145: NOT
59146: OR
59147: IFFALSE 59151
// exit ;
59149: GO 59377
// x := GetX ( building ) ;
59151: LD_ADDR_VAR 0 4
59155: PUSH
59156: LD_VAR 0 2
59160: PPUSH
59161: CALL_OW 250
59165: ST_TO_ADDR
// y := GetY ( building ) ;
59166: LD_ADDR_VAR 0 6
59170: PUSH
59171: LD_VAR 0 2
59175: PPUSH
59176: CALL_OW 251
59180: ST_TO_ADDR
// d := GetDir ( building ) ;
59181: LD_ADDR_VAR 0 8
59185: PUSH
59186: LD_VAR 0 2
59190: PPUSH
59191: CALL_OW 254
59195: ST_TO_ADDR
// r := 4 ;
59196: LD_ADDR_VAR 0 9
59200: PUSH
59201: LD_INT 4
59203: ST_TO_ADDR
// for i := 1 to 5 do
59204: LD_ADDR_VAR 0 10
59208: PUSH
59209: DOUBLE
59210: LD_INT 1
59212: DEC
59213: ST_TO_ADDR
59214: LD_INT 5
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59375
// begin _x := ShiftX ( x , d , r + i ) ;
59220: LD_ADDR_VAR 0 5
59224: PUSH
59225: LD_VAR 0 4
59229: PPUSH
59230: LD_VAR 0 8
59234: PPUSH
59235: LD_VAR 0 9
59239: PUSH
59240: LD_VAR 0 10
59244: PLUS
59245: PPUSH
59246: CALL_OW 272
59250: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59251: LD_ADDR_VAR 0 7
59255: PUSH
59256: LD_VAR 0 6
59260: PPUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_VAR 0 9
59270: PUSH
59271: LD_VAR 0 10
59275: PLUS
59276: PPUSH
59277: CALL_OW 273
59281: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59282: LD_VAR 0 5
59286: PPUSH
59287: LD_VAR 0 7
59291: PPUSH
59292: CALL_OW 488
59296: PUSH
59297: LD_VAR 0 5
59301: PPUSH
59302: LD_VAR 0 7
59306: PPUSH
59307: CALL_OW 428
59311: PPUSH
59312: CALL_OW 247
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: IN
59327: NOT
59328: AND
59329: IFFALSE 59373
// begin ComMoveXY ( unit , _x , _y ) ;
59331: LD_VAR 0 1
59335: PPUSH
59336: LD_VAR 0 5
59340: PPUSH
59341: LD_VAR 0 7
59345: PPUSH
59346: CALL_OW 111
// result := [ _x , _y ] ;
59350: LD_ADDR_VAR 0 3
59354: PUSH
59355: LD_VAR 0 5
59359: PUSH
59360: LD_VAR 0 7
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: ST_TO_ADDR
// exit ;
59369: POP
59370: POP
59371: GO 59377
// end ; end ;
59373: GO 59217
59375: POP
59376: POP
// end ;
59377: LD_VAR 0 3
59381: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59382: LD_INT 0
59384: PPUSH
59385: PPUSH
59386: PPUSH
// result := 0 ;
59387: LD_ADDR_VAR 0 3
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59395: LD_VAR 0 1
59399: PUSH
59400: LD_INT 0
59402: LESS
59403: PUSH
59404: LD_VAR 0 1
59408: PUSH
59409: LD_INT 8
59411: GREATER
59412: OR
59413: PUSH
59414: LD_VAR 0 2
59418: PUSH
59419: LD_INT 0
59421: LESS
59422: OR
59423: PUSH
59424: LD_VAR 0 2
59428: PUSH
59429: LD_INT 8
59431: GREATER
59432: OR
59433: IFFALSE 59437
// exit ;
59435: GO 59512
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59437: LD_ADDR_VAR 0 4
59441: PUSH
59442: LD_INT 22
59444: PUSH
59445: LD_VAR 0 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PPUSH
59454: CALL_OW 69
59458: PUSH
59459: FOR_IN
59460: IFFALSE 59510
// begin un := UnitShoot ( i ) ;
59462: LD_ADDR_VAR 0 5
59466: PUSH
59467: LD_VAR 0 4
59471: PPUSH
59472: CALL_OW 504
59476: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59477: LD_VAR 0 5
59481: PPUSH
59482: CALL_OW 255
59486: PUSH
59487: LD_VAR 0 1
59491: EQUAL
59492: IFFALSE 59508
// begin result := un ;
59494: LD_ADDR_VAR 0 3
59498: PUSH
59499: LD_VAR 0 5
59503: ST_TO_ADDR
// exit ;
59504: POP
59505: POP
59506: GO 59512
// end ; end ;
59508: GO 59459
59510: POP
59511: POP
// end ;
59512: LD_VAR 0 3
59516: RET
// export function GetCargoBay ( units ) ; begin
59517: LD_INT 0
59519: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59520: LD_ADDR_VAR 0 2
59524: PUSH
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 34
59535: PUSH
59536: LD_INT 12
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 34
59545: PUSH
59546: LD_INT 51
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 34
59555: PUSH
59556: LD_INT 32
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 34
59565: PUSH
59566: LD_EXP 78
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: PPUSH
59582: CALL_OW 72
59586: ST_TO_ADDR
// end ;
59587: LD_VAR 0 2
59591: RET
// export function Negate ( value ) ; begin
59592: LD_INT 0
59594: PPUSH
// result := not value ;
59595: LD_ADDR_VAR 0 2
59599: PUSH
59600: LD_VAR 0 1
59604: NOT
59605: ST_TO_ADDR
// end ;
59606: LD_VAR 0 2
59610: RET
// export function Inc ( value ) ; begin
59611: LD_INT 0
59613: PPUSH
// result := value + 1 ;
59614: LD_ADDR_VAR 0 2
59618: PUSH
59619: LD_VAR 0 1
59623: PUSH
59624: LD_INT 1
59626: PLUS
59627: ST_TO_ADDR
// end ;
59628: LD_VAR 0 2
59632: RET
// export function Dec ( value ) ; begin
59633: LD_INT 0
59635: PPUSH
// result := value - 1 ;
59636: LD_ADDR_VAR 0 2
59640: PUSH
59641: LD_VAR 0 1
59645: PUSH
59646: LD_INT 1
59648: MINUS
59649: ST_TO_ADDR
// end ;
59650: LD_VAR 0 2
59654: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59655: LD_INT 0
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59665: LD_VAR 0 1
59669: PPUSH
59670: LD_VAR 0 2
59674: PPUSH
59675: CALL_OW 488
59679: NOT
59680: PUSH
59681: LD_VAR 0 3
59685: PPUSH
59686: LD_VAR 0 4
59690: PPUSH
59691: CALL_OW 488
59695: NOT
59696: OR
59697: IFFALSE 59710
// begin result := - 1 ;
59699: LD_ADDR_VAR 0 5
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: ST_TO_ADDR
// exit ;
59708: GO 59945
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59710: LD_ADDR_VAR 0 12
59714: PUSH
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_VAR 0 2
59724: PPUSH
59725: LD_VAR 0 3
59729: PPUSH
59730: LD_VAR 0 4
59734: PPUSH
59735: CALL 58793 0 4
59739: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59740: LD_ADDR_VAR 0 11
59744: PUSH
59745: LD_VAR 0 1
59749: PPUSH
59750: LD_VAR 0 2
59754: PPUSH
59755: LD_VAR 0 12
59759: PUSH
59760: LD_INT 1
59762: ARRAY
59763: PPUSH
59764: LD_VAR 0 12
59768: PUSH
59769: LD_INT 2
59771: ARRAY
59772: PPUSH
59773: CALL_OW 298
59777: ST_TO_ADDR
// distance := 9999 ;
59778: LD_ADDR_VAR 0 10
59782: PUSH
59783: LD_INT 9999
59785: ST_TO_ADDR
// for i := 0 to 5 do
59786: LD_ADDR_VAR 0 6
59790: PUSH
59791: DOUBLE
59792: LD_INT 0
59794: DEC
59795: ST_TO_ADDR
59796: LD_INT 5
59798: PUSH
59799: FOR_TO
59800: IFFALSE 59943
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59802: LD_ADDR_VAR 0 7
59806: PUSH
59807: LD_VAR 0 1
59811: PPUSH
59812: LD_VAR 0 6
59816: PPUSH
59817: LD_VAR 0 11
59821: PPUSH
59822: CALL_OW 272
59826: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59827: LD_ADDR_VAR 0 8
59831: PUSH
59832: LD_VAR 0 2
59836: PPUSH
59837: LD_VAR 0 6
59841: PPUSH
59842: LD_VAR 0 11
59846: PPUSH
59847: CALL_OW 273
59851: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59852: LD_VAR 0 7
59856: PPUSH
59857: LD_VAR 0 8
59861: PPUSH
59862: CALL_OW 488
59866: NOT
59867: IFFALSE 59871
// continue ;
59869: GO 59799
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59871: LD_ADDR_VAR 0 9
59875: PUSH
59876: LD_VAR 0 12
59880: PUSH
59881: LD_INT 1
59883: ARRAY
59884: PPUSH
59885: LD_VAR 0 12
59889: PUSH
59890: LD_INT 2
59892: ARRAY
59893: PPUSH
59894: LD_VAR 0 7
59898: PPUSH
59899: LD_VAR 0 8
59903: PPUSH
59904: CALL_OW 298
59908: ST_TO_ADDR
// if tmp < distance then
59909: LD_VAR 0 9
59913: PUSH
59914: LD_VAR 0 10
59918: LESS
59919: IFFALSE 59941
// begin result := i ;
59921: LD_ADDR_VAR 0 5
59925: PUSH
59926: LD_VAR 0 6
59930: ST_TO_ADDR
// distance := tmp ;
59931: LD_ADDR_VAR 0 10
59935: PUSH
59936: LD_VAR 0 9
59940: ST_TO_ADDR
// end ; end ;
59941: GO 59799
59943: POP
59944: POP
// end ;
59945: LD_VAR 0 5
59949: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
// if not driver or not IsInUnit ( driver ) then
59954: LD_VAR 0 1
59958: NOT
59959: PUSH
59960: LD_VAR 0 1
59964: PPUSH
59965: CALL_OW 310
59969: NOT
59970: OR
59971: IFFALSE 59975
// exit ;
59973: GO 60065
// vehicle := IsInUnit ( driver ) ;
59975: LD_ADDR_VAR 0 3
59979: PUSH
59980: LD_VAR 0 1
59984: PPUSH
59985: CALL_OW 310
59989: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59990: LD_VAR 0 1
59994: PPUSH
59995: LD_STRING \
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: PUSH
60025: LD_STRING E
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_VAR 0 3
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PPUSH
60061: CALL_OW 446
// end ;
60065: LD_VAR 0 2
60069: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60070: LD_INT 0
60072: PPUSH
60073: PPUSH
// if not driver or not IsInUnit ( driver ) then
60074: LD_VAR 0 1
60078: NOT
60079: PUSH
60080: LD_VAR 0 1
60084: PPUSH
60085: CALL_OW 310
60089: NOT
60090: OR
60091: IFFALSE 60095
// exit ;
60093: GO 60185
// vehicle := IsInUnit ( driver ) ;
60095: LD_ADDR_VAR 0 3
60099: PUSH
60100: LD_VAR 0 1
60104: PPUSH
60105: CALL_OW 310
60109: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60110: LD_VAR 0 1
60114: PPUSH
60115: LD_STRING \
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: PUSH
60145: LD_STRING E
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_VAR 0 3
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PPUSH
60181: CALL_OW 447
// end ;
60185: LD_VAR 0 2
60189: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60190: LD_INT 0
60192: PPUSH
60193: PPUSH
60194: PPUSH
// tmp := [ ] ;
60195: LD_ADDR_VAR 0 5
60199: PUSH
60200: EMPTY
60201: ST_TO_ADDR
// for i in units do
60202: LD_ADDR_VAR 0 4
60206: PUSH
60207: LD_VAR 0 1
60211: PUSH
60212: FOR_IN
60213: IFFALSE 60251
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_VAR 0 5
60229: PUSH
60230: LD_INT 1
60232: PLUS
60233: PPUSH
60234: LD_VAR 0 4
60238: PPUSH
60239: CALL_OW 256
60243: PPUSH
60244: CALL_OW 2
60248: ST_TO_ADDR
60249: GO 60212
60251: POP
60252: POP
// if not tmp then
60253: LD_VAR 0 5
60257: NOT
60258: IFFALSE 60262
// exit ;
60260: GO 60310
// if asc then
60262: LD_VAR 0 2
60266: IFFALSE 60290
// result := SortListByListAsc ( units , tmp ) else
60268: LD_ADDR_VAR 0 3
60272: PUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: LD_VAR 0 5
60282: PPUSH
60283: CALL_OW 76
60287: ST_TO_ADDR
60288: GO 60310
// result := SortListByListDesc ( units , tmp ) ;
60290: LD_ADDR_VAR 0 3
60294: PUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: LD_VAR 0 5
60304: PPUSH
60305: CALL_OW 77
60309: ST_TO_ADDR
// end ;
60310: LD_VAR 0 3
60314: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60315: LD_INT 0
60317: PPUSH
60318: PPUSH
// task := GetTaskList ( mech ) ;
60319: LD_ADDR_VAR 0 4
60323: PUSH
60324: LD_VAR 0 1
60328: PPUSH
60329: CALL_OW 437
60333: ST_TO_ADDR
// if not task then
60334: LD_VAR 0 4
60338: NOT
60339: IFFALSE 60343
// exit ;
60341: GO 60385
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60343: LD_ADDR_VAR 0 3
60347: PUSH
60348: LD_VAR 0 4
60352: PUSH
60353: LD_INT 1
60355: ARRAY
60356: PUSH
60357: LD_INT 1
60359: ARRAY
60360: PUSH
60361: LD_STRING r
60363: EQUAL
60364: PUSH
60365: LD_VAR 0 4
60369: PUSH
60370: LD_INT 1
60372: ARRAY
60373: PUSH
60374: LD_INT 4
60376: ARRAY
60377: PUSH
60378: LD_VAR 0 2
60382: EQUAL
60383: AND
60384: ST_TO_ADDR
// end ;
60385: LD_VAR 0 3
60389: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60390: LD_INT 0
60392: PPUSH
// SetDir ( unit , d ) ;
60393: LD_VAR 0 1
60397: PPUSH
60398: LD_VAR 0 4
60402: PPUSH
60403: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60407: LD_VAR 0 1
60411: PPUSH
60412: LD_VAR 0 2
60416: PPUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: LD_VAR 0 5
60426: PPUSH
60427: CALL_OW 48
// end ;
60431: LD_VAR 0 6
60435: RET
// export function ToNaturalNumber ( number ) ; begin
60436: LD_INT 0
60438: PPUSH
// result := number div 1 ;
60439: LD_ADDR_VAR 0 2
60443: PUSH
60444: LD_VAR 0 1
60448: PUSH
60449: LD_INT 1
60451: DIV
60452: ST_TO_ADDR
// if number < 0 then
60453: LD_VAR 0 1
60457: PUSH
60458: LD_INT 0
60460: LESS
60461: IFFALSE 60471
// result := 0 ;
60463: LD_ADDR_VAR 0 2
60467: PUSH
60468: LD_INT 0
60470: ST_TO_ADDR
// end ;
60471: LD_VAR 0 2
60475: RET
// export function SortByClass ( units , class ) ; var un ; begin
60476: LD_INT 0
60478: PPUSH
60479: PPUSH
// if not units or not class then
60480: LD_VAR 0 1
60484: NOT
60485: PUSH
60486: LD_VAR 0 2
60490: NOT
60491: OR
60492: IFFALSE 60496
// exit ;
60494: GO 60591
// result := [ ] ;
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: EMPTY
60502: ST_TO_ADDR
// for un in units do
60503: LD_ADDR_VAR 0 4
60507: PUSH
60508: LD_VAR 0 1
60512: PUSH
60513: FOR_IN
60514: IFFALSE 60589
// if GetClass ( un ) = class then
60516: LD_VAR 0 4
60520: PPUSH
60521: CALL_OW 257
60525: PUSH
60526: LD_VAR 0 2
60530: EQUAL
60531: IFFALSE 60558
// result := Insert ( result , 1 , un ) else
60533: LD_ADDR_VAR 0 3
60537: PUSH
60538: LD_VAR 0 3
60542: PPUSH
60543: LD_INT 1
60545: PPUSH
60546: LD_VAR 0 4
60550: PPUSH
60551: CALL_OW 2
60555: ST_TO_ADDR
60556: GO 60587
// result := Replace ( result , result + 1 , un ) ;
60558: LD_ADDR_VAR 0 3
60562: PUSH
60563: LD_VAR 0 3
60567: PPUSH
60568: LD_VAR 0 3
60572: PUSH
60573: LD_INT 1
60575: PLUS
60576: PPUSH
60577: LD_VAR 0 4
60581: PPUSH
60582: CALL_OW 1
60586: ST_TO_ADDR
60587: GO 60513
60589: POP
60590: POP
// end ;
60591: LD_VAR 0 3
60595: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60596: LD_INT 0
60598: PPUSH
60599: PPUSH
60600: PPUSH
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
// result := [ ] ;
60605: LD_ADDR_VAR 0 4
60609: PUSH
60610: EMPTY
60611: ST_TO_ADDR
// if x - r < 0 then
60612: LD_VAR 0 1
60616: PUSH
60617: LD_VAR 0 3
60621: MINUS
60622: PUSH
60623: LD_INT 0
60625: LESS
60626: IFFALSE 60638
// min_x := 0 else
60628: LD_ADDR_VAR 0 8
60632: PUSH
60633: LD_INT 0
60635: ST_TO_ADDR
60636: GO 60654
// min_x := x - r ;
60638: LD_ADDR_VAR 0 8
60642: PUSH
60643: LD_VAR 0 1
60647: PUSH
60648: LD_VAR 0 3
60652: MINUS
60653: ST_TO_ADDR
// if y - r < 0 then
60654: LD_VAR 0 2
60658: PUSH
60659: LD_VAR 0 3
60663: MINUS
60664: PUSH
60665: LD_INT 0
60667: LESS
60668: IFFALSE 60680
// min_y := 0 else
60670: LD_ADDR_VAR 0 7
60674: PUSH
60675: LD_INT 0
60677: ST_TO_ADDR
60678: GO 60696
// min_y := y - r ;
60680: LD_ADDR_VAR 0 7
60684: PUSH
60685: LD_VAR 0 2
60689: PUSH
60690: LD_VAR 0 3
60694: MINUS
60695: ST_TO_ADDR
// max_x := x + r ;
60696: LD_ADDR_VAR 0 9
60700: PUSH
60701: LD_VAR 0 1
60705: PUSH
60706: LD_VAR 0 3
60710: PLUS
60711: ST_TO_ADDR
// max_y := y + r ;
60712: LD_ADDR_VAR 0 10
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: LD_VAR 0 3
60726: PLUS
60727: ST_TO_ADDR
// for _x = min_x to max_x do
60728: LD_ADDR_VAR 0 5
60732: PUSH
60733: DOUBLE
60734: LD_VAR 0 8
60738: DEC
60739: ST_TO_ADDR
60740: LD_VAR 0 9
60744: PUSH
60745: FOR_TO
60746: IFFALSE 60847
// for _y = min_y to max_y do
60748: LD_ADDR_VAR 0 6
60752: PUSH
60753: DOUBLE
60754: LD_VAR 0 7
60758: DEC
60759: ST_TO_ADDR
60760: LD_VAR 0 10
60764: PUSH
60765: FOR_TO
60766: IFFALSE 60843
// begin if not ValidHex ( _x , _y ) then
60768: LD_VAR 0 5
60772: PPUSH
60773: LD_VAR 0 6
60777: PPUSH
60778: CALL_OW 488
60782: NOT
60783: IFFALSE 60787
// continue ;
60785: GO 60765
// if GetResourceTypeXY ( _x , _y ) then
60787: LD_VAR 0 5
60791: PPUSH
60792: LD_VAR 0 6
60796: PPUSH
60797: CALL_OW 283
60801: IFFALSE 60841
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60803: LD_ADDR_VAR 0 4
60807: PUSH
60808: LD_VAR 0 4
60812: PPUSH
60813: LD_VAR 0 4
60817: PUSH
60818: LD_INT 1
60820: PLUS
60821: PPUSH
60822: LD_VAR 0 5
60826: PUSH
60827: LD_VAR 0 6
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PPUSH
60836: CALL_OW 1
60840: ST_TO_ADDR
// end ;
60841: GO 60765
60843: POP
60844: POP
60845: GO 60745
60847: POP
60848: POP
// end ;
60849: LD_VAR 0 4
60853: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60854: LD_INT 0
60856: PPUSH
60857: PPUSH
60858: PPUSH
60859: PPUSH
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
// if not units then
60864: LD_VAR 0 1
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 61298
// result := UnitFilter ( units , [ f_ok ] ) ;
60873: LD_ADDR_VAR 0 3
60877: PUSH
60878: LD_VAR 0 1
60882: PPUSH
60883: LD_INT 50
60885: PUSH
60886: EMPTY
60887: LIST
60888: PPUSH
60889: CALL_OW 72
60893: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60894: LD_ADDR_VAR 0 8
60898: PUSH
60899: LD_VAR 0 1
60903: PUSH
60904: LD_INT 1
60906: ARRAY
60907: PPUSH
60908: CALL_OW 255
60912: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
60913: LD_ADDR_VAR 0 10
60917: PUSH
60918: LD_INT 29
60920: PUSH
60921: LD_EXP 81
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// if not result then
60930: LD_VAR 0 3
60934: NOT
60935: IFFALSE 60939
// exit ;
60937: GO 61298
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60939: LD_ADDR_VAR 0 5
60943: PUSH
60944: LD_INT 81
60946: PUSH
60947: LD_VAR 0 8
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PPUSH
60956: CALL_OW 69
60960: ST_TO_ADDR
// for i in result do
60961: LD_ADDR_VAR 0 4
60965: PUSH
60966: LD_VAR 0 3
60970: PUSH
60971: FOR_IN
60972: IFFALSE 61296
// begin tag := GetTag ( i ) + 1 ;
60974: LD_ADDR_VAR 0 9
60978: PUSH
60979: LD_VAR 0 4
60983: PPUSH
60984: CALL_OW 110
60988: PUSH
60989: LD_INT 1
60991: PLUS
60992: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60993: LD_ADDR_VAR 0 7
60997: PUSH
60998: LD_VAR 0 4
61002: PPUSH
61003: CALL_OW 250
61007: PPUSH
61008: LD_VAR 0 4
61012: PPUSH
61013: CALL_OW 251
61017: PPUSH
61018: LD_INT 6
61020: PPUSH
61021: CALL 60596 0 3
61025: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61026: LD_VAR 0 7
61030: PUSH
61031: LD_VAR 0 4
61035: PPUSH
61036: CALL_OW 264
61040: PUSH
61041: LD_VAR 0 10
61045: IN
61046: NOT
61047: AND
61048: IFFALSE 61087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61050: LD_VAR 0 4
61054: PPUSH
61055: LD_VAR 0 7
61059: PUSH
61060: LD_INT 1
61062: ARRAY
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PPUSH
61068: LD_VAR 0 7
61072: PUSH
61073: LD_INT 1
61075: ARRAY
61076: PUSH
61077: LD_INT 2
61079: ARRAY
61080: PPUSH
61081: CALL_OW 116
61085: GO 61294
// if path > tag then
61087: LD_VAR 0 2
61091: PUSH
61092: LD_VAR 0 9
61096: GREATER
61097: IFFALSE 61264
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
61099: LD_ADDR_VAR 0 6
61103: PUSH
61104: LD_VAR 0 5
61108: PPUSH
61109: LD_INT 91
61111: PUSH
61112: LD_VAR 0 4
61116: PUSH
61117: LD_INT 12
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PPUSH
61125: CALL_OW 72
61129: ST_TO_ADDR
// if nearEnemy then
61130: LD_VAR 0 6
61134: IFFALSE 61162
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61136: LD_VAR 0 4
61140: PPUSH
61141: LD_VAR 0 6
61145: PPUSH
61146: LD_VAR 0 4
61150: PPUSH
61151: CALL_OW 74
61155: PPUSH
61156: CALL_OW 115
61160: GO 61262
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61162: LD_VAR 0 4
61166: PPUSH
61167: LD_VAR 0 2
61171: PUSH
61172: LD_VAR 0 9
61176: ARRAY
61177: PUSH
61178: LD_INT 1
61180: ARRAY
61181: PPUSH
61182: LD_VAR 0 2
61186: PUSH
61187: LD_VAR 0 9
61191: ARRAY
61192: PUSH
61193: LD_INT 2
61195: ARRAY
61196: PPUSH
61197: CALL_OW 297
61201: PUSH
61202: LD_INT 6
61204: GREATER
61205: IFFALSE 61248
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61207: LD_VAR 0 4
61211: PPUSH
61212: LD_VAR 0 2
61216: PUSH
61217: LD_VAR 0 9
61221: ARRAY
61222: PUSH
61223: LD_INT 1
61225: ARRAY
61226: PPUSH
61227: LD_VAR 0 2
61231: PUSH
61232: LD_VAR 0 9
61236: ARRAY
61237: PUSH
61238: LD_INT 2
61240: ARRAY
61241: PPUSH
61242: CALL_OW 114
61246: GO 61262
// SetTag ( i , tag ) ;
61248: LD_VAR 0 4
61252: PPUSH
61253: LD_VAR 0 9
61257: PPUSH
61258: CALL_OW 109
// end else
61262: GO 61294
// if enemy then
61264: LD_VAR 0 5
61268: IFFALSE 61294
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61270: LD_VAR 0 4
61274: PPUSH
61275: LD_VAR 0 5
61279: PPUSH
61280: LD_VAR 0 4
61284: PPUSH
61285: CALL_OW 74
61289: PPUSH
61290: CALL_OW 115
// end ;
61294: GO 60971
61296: POP
61297: POP
// end ;
61298: LD_VAR 0 3
61302: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61303: LD_INT 0
61305: PPUSH
61306: PPUSH
61307: PPUSH
// if not unit or IsInUnit ( unit ) then
61308: LD_VAR 0 1
61312: NOT
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 310
61323: OR
61324: IFFALSE 61328
// exit ;
61326: GO 61419
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61328: LD_ADDR_VAR 0 4
61332: PUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: CALL_OW 250
61342: PPUSH
61343: LD_VAR 0 2
61347: PPUSH
61348: LD_INT 1
61350: PPUSH
61351: CALL_OW 272
61355: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61356: LD_ADDR_VAR 0 5
61360: PUSH
61361: LD_VAR 0 1
61365: PPUSH
61366: CALL_OW 251
61370: PPUSH
61371: LD_VAR 0 2
61375: PPUSH
61376: LD_INT 1
61378: PPUSH
61379: CALL_OW 273
61383: ST_TO_ADDR
// if ValidHex ( x , y ) then
61384: LD_VAR 0 4
61388: PPUSH
61389: LD_VAR 0 5
61393: PPUSH
61394: CALL_OW 488
61398: IFFALSE 61419
// ComTurnXY ( unit , x , y ) ;
61400: LD_VAR 0 1
61404: PPUSH
61405: LD_VAR 0 4
61409: PPUSH
61410: LD_VAR 0 5
61414: PPUSH
61415: CALL_OW 118
// end ;
61419: LD_VAR 0 3
61423: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61424: LD_INT 0
61426: PPUSH
61427: PPUSH
// result := false ;
61428: LD_ADDR_VAR 0 3
61432: PUSH
61433: LD_INT 0
61435: ST_TO_ADDR
// if not units then
61436: LD_VAR 0 2
61440: NOT
61441: IFFALSE 61445
// exit ;
61443: GO 61490
// for i in units do
61445: LD_ADDR_VAR 0 4
61449: PUSH
61450: LD_VAR 0 2
61454: PUSH
61455: FOR_IN
61456: IFFALSE 61488
// if See ( side , i ) then
61458: LD_VAR 0 1
61462: PPUSH
61463: LD_VAR 0 4
61467: PPUSH
61468: CALL_OW 292
61472: IFFALSE 61486
// begin result := true ;
61474: LD_ADDR_VAR 0 3
61478: PUSH
61479: LD_INT 1
61481: ST_TO_ADDR
// exit ;
61482: POP
61483: POP
61484: GO 61490
// end ;
61486: GO 61455
61488: POP
61489: POP
// end ;
61490: LD_VAR 0 3
61494: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61495: LD_INT 0
61497: PPUSH
61498: PPUSH
61499: PPUSH
61500: PPUSH
// if not unit or not points then
61501: LD_VAR 0 1
61505: NOT
61506: PUSH
61507: LD_VAR 0 2
61511: NOT
61512: OR
61513: IFFALSE 61517
// exit ;
61515: GO 61607
// dist := 99999 ;
61517: LD_ADDR_VAR 0 5
61521: PUSH
61522: LD_INT 99999
61524: ST_TO_ADDR
// for i in points do
61525: LD_ADDR_VAR 0 4
61529: PUSH
61530: LD_VAR 0 2
61534: PUSH
61535: FOR_IN
61536: IFFALSE 61605
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61538: LD_ADDR_VAR 0 6
61542: PUSH
61543: LD_VAR 0 1
61547: PPUSH
61548: LD_VAR 0 4
61552: PUSH
61553: LD_INT 1
61555: ARRAY
61556: PPUSH
61557: LD_VAR 0 4
61561: PUSH
61562: LD_INT 2
61564: ARRAY
61565: PPUSH
61566: CALL_OW 297
61570: ST_TO_ADDR
// if tmpDist < dist then
61571: LD_VAR 0 6
61575: PUSH
61576: LD_VAR 0 5
61580: LESS
61581: IFFALSE 61603
// begin result := i ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_VAR 0 4
61592: ST_TO_ADDR
// dist := tmpDist ;
61593: LD_ADDR_VAR 0 5
61597: PUSH
61598: LD_VAR 0 6
61602: ST_TO_ADDR
// end ; end ;
61603: GO 61535
61605: POP
61606: POP
// end ; end_of_file
61607: LD_VAR 0 3
61611: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
61612: LD_INT 0
61614: PPUSH
// ar_miner := 81 ;
61615: LD_ADDR_EXP 84
61619: PUSH
61620: LD_INT 81
61622: ST_TO_ADDR
// ar_crane := 88 ;
61623: LD_ADDR_EXP 83
61627: PUSH
61628: LD_INT 88
61630: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61631: LD_ADDR_EXP 78
61635: PUSH
61636: LD_INT 89
61638: ST_TO_ADDR
// us_hack := 99 ;
61639: LD_ADDR_EXP 79
61643: PUSH
61644: LD_INT 99
61646: ST_TO_ADDR
// us_artillery := 97 ;
61647: LD_ADDR_EXP 80
61651: PUSH
61652: LD_INT 97
61654: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61655: LD_ADDR_EXP 81
61659: PUSH
61660: LD_INT 91
61662: ST_TO_ADDR
// ar_mortar := 92 ;
61663: LD_ADDR_EXP 82
61667: PUSH
61668: LD_INT 92
61670: ST_TO_ADDR
// ru_radar := 98 ;
61671: LD_ADDR_EXP 77
61675: PUSH
61676: LD_INT 98
61678: ST_TO_ADDR
// tech_Artillery := 80 ;
61679: LD_ADDR_EXP 85
61683: PUSH
61684: LD_INT 80
61686: ST_TO_ADDR
// tech_RadMat := 81 ;
61687: LD_ADDR_EXP 86
61691: PUSH
61692: LD_INT 81
61694: ST_TO_ADDR
// tech_BasicTools := 82 ;
61695: LD_ADDR_EXP 87
61699: PUSH
61700: LD_INT 82
61702: ST_TO_ADDR
// tech_Cargo := 83 ;
61703: LD_ADDR_EXP 88
61707: PUSH
61708: LD_INT 83
61710: ST_TO_ADDR
// tech_Track := 84 ;
61711: LD_ADDR_EXP 89
61715: PUSH
61716: LD_INT 84
61718: ST_TO_ADDR
// tech_Crane := 85 ;
61719: LD_ADDR_EXP 90
61723: PUSH
61724: LD_INT 85
61726: ST_TO_ADDR
// tech_Bulldozer := 86 ;
61727: LD_ADDR_EXP 91
61731: PUSH
61732: LD_INT 86
61734: ST_TO_ADDR
// tech_Hovercraft := 87 ;
61735: LD_ADDR_EXP 92
61739: PUSH
61740: LD_INT 87
61742: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
61743: LD_ADDR_EXP 93
61747: PUSH
61748: LD_INT 88
61750: ST_TO_ADDR
// class_mastodont := 31 ;
61751: LD_ADDR_EXP 94
61755: PUSH
61756: LD_INT 31
61758: ST_TO_ADDR
// class_horse := 21 ;
61759: LD_ADDR_EXP 95
61763: PUSH
61764: LD_INT 21
61766: ST_TO_ADDR
// end ;
61767: LD_VAR 0 1
61771: RET
// every 1 do
61772: GO 61774
61774: DISABLE
// InitGlobalVariables ; end_of_file
61775: CALL 61612 0 0
61779: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61780: LD_VAR 0 1
61784: PUSH
61785: LD_INT 200
61787: DOUBLE
61788: GREATEREQUAL
61789: IFFALSE 61797
61791: LD_INT 299
61793: DOUBLE
61794: LESSEQUAL
61795: IFTRUE 61799
61797: GO 61831
61799: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61800: LD_VAR 0 1
61804: PPUSH
61805: LD_VAR 0 2
61809: PPUSH
61810: LD_VAR 0 3
61814: PPUSH
61815: LD_VAR 0 4
61819: PPUSH
61820: LD_VAR 0 5
61824: PPUSH
61825: CALL 62065 0 5
61829: GO 61908
61831: LD_INT 300
61833: DOUBLE
61834: GREATEREQUAL
61835: IFFALSE 61843
61837: LD_INT 399
61839: DOUBLE
61840: LESSEQUAL
61841: IFTRUE 61845
61843: GO 61907
61845: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61846: LD_VAR 0 1
61850: PPUSH
61851: LD_VAR 0 2
61855: PPUSH
61856: LD_VAR 0 3
61860: PPUSH
61861: LD_VAR 0 4
61865: PPUSH
61866: LD_VAR 0 5
61870: PPUSH
61871: LD_VAR 0 6
61875: PPUSH
61876: LD_VAR 0 7
61880: PPUSH
61881: LD_VAR 0 8
61885: PPUSH
61886: LD_VAR 0 9
61890: PPUSH
61891: LD_VAR 0 10
61895: PPUSH
61896: LD_VAR 0 11
61900: PPUSH
61901: CALL 19541 0 11
61905: GO 61908
61907: POP
// end ;
61908: PPOPN 11
61910: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61911: LD_VAR 0 1
61915: PPUSH
61916: LD_VAR 0 2
61920: PPUSH
61921: LD_VAR 0 3
61925: PPUSH
61926: LD_VAR 0 4
61930: PPUSH
61931: LD_VAR 0 5
61935: PPUSH
61936: CALL 62057 0 5
// end ; end_of_file
61940: PPOPN 5
61942: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61943: LD_INT 0
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61949: LD_VAR 0 1
61953: PPUSH
61954: CALL_OW 264
61958: PUSH
61959: LD_EXP 81
61963: EQUAL
61964: IFFALSE 62036
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61966: LD_INT 68
61968: PPUSH
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 255
61978: PPUSH
61979: CALL_OW 321
61983: PUSH
61984: LD_INT 2
61986: EQUAL
61987: IFFALSE 61999
// eff := 70 else
61989: LD_ADDR_VAR 0 4
61993: PUSH
61994: LD_INT 70
61996: ST_TO_ADDR
61997: GO 62007
// eff := 30 ;
61999: LD_ADDR_VAR 0 4
62003: PUSH
62004: LD_INT 30
62006: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62007: LD_VAR 0 1
62011: PPUSH
62012: CALL_OW 250
62016: PPUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: CALL_OW 251
62026: PPUSH
62027: LD_VAR 0 4
62031: PPUSH
62032: CALL_OW 495
// end ; end ;
62036: LD_VAR 0 2
62040: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62041: LD_INT 0
62043: PPUSH
// end ;
62044: LD_VAR 0 4
62048: RET
// export function SOS_Command ( cmd ) ; begin
62049: LD_INT 0
62051: PPUSH
// end ;
62052: LD_VAR 0 2
62056: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62057: LD_INT 0
62059: PPUSH
// end ;
62060: LD_VAR 0 6
62064: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62065: LD_INT 0
62067: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62068: LD_VAR 0 1
62072: PUSH
62073: LD_INT 250
62075: EQUAL
62076: PUSH
62077: LD_VAR 0 2
62081: PPUSH
62082: CALL_OW 264
62086: PUSH
62087: LD_EXP 84
62091: EQUAL
62092: AND
62093: IFFALSE 62114
// MinerPlaceMine ( unit , x , y ) ;
62095: LD_VAR 0 2
62099: PPUSH
62100: LD_VAR 0 4
62104: PPUSH
62105: LD_VAR 0 5
62109: PPUSH
62110: CALL 64463 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62114: LD_VAR 0 1
62118: PUSH
62119: LD_INT 251
62121: EQUAL
62122: PUSH
62123: LD_VAR 0 2
62127: PPUSH
62128: CALL_OW 264
62132: PUSH
62133: LD_EXP 84
62137: EQUAL
62138: AND
62139: IFFALSE 62160
// MinerDetonateMine ( unit , x , y ) ;
62141: LD_VAR 0 2
62145: PPUSH
62146: LD_VAR 0 4
62150: PPUSH
62151: LD_VAR 0 5
62155: PPUSH
62156: CALL 64740 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62160: LD_VAR 0 1
62164: PUSH
62165: LD_INT 252
62167: EQUAL
62168: PUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: CALL_OW 264
62178: PUSH
62179: LD_EXP 84
62183: EQUAL
62184: AND
62185: IFFALSE 62206
// MinerCreateMinefield ( unit , x , y ) ;
62187: LD_VAR 0 2
62191: PPUSH
62192: LD_VAR 0 4
62196: PPUSH
62197: LD_VAR 0 5
62201: PPUSH
62202: CALL 65157 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62206: LD_VAR 0 1
62210: PUSH
62211: LD_INT 253
62213: EQUAL
62214: PUSH
62215: LD_VAR 0 2
62219: PPUSH
62220: CALL_OW 257
62224: PUSH
62225: LD_INT 5
62227: EQUAL
62228: AND
62229: IFFALSE 62250
// ComBinocular ( unit , x , y ) ;
62231: LD_VAR 0 2
62235: PPUSH
62236: LD_VAR 0 4
62240: PPUSH
62241: LD_VAR 0 5
62245: PPUSH
62246: CALL 65528 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62250: LD_VAR 0 1
62254: PUSH
62255: LD_INT 254
62257: EQUAL
62258: PUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: CALL_OW 264
62268: PUSH
62269: LD_EXP 79
62273: EQUAL
62274: AND
62275: PUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: CALL_OW 263
62285: PUSH
62286: LD_INT 3
62288: EQUAL
62289: AND
62290: IFFALSE 62306
// HackDestroyVehicle ( unit , selectedUnit ) ;
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 3
62301: PPUSH
62302: CALL 63823 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62306: LD_VAR 0 1
62310: PUSH
62311: LD_INT 255
62313: EQUAL
62314: PUSH
62315: LD_VAR 0 2
62319: PPUSH
62320: CALL_OW 264
62324: PUSH
62325: LD_INT 14
62327: PUSH
62328: LD_INT 53
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: IN
62335: AND
62336: PUSH
62337: LD_VAR 0 4
62341: PPUSH
62342: LD_VAR 0 5
62346: PPUSH
62347: CALL_OW 488
62351: AND
62352: IFFALSE 62376
// CutTreeXYR ( unit , x , y , 12 ) ;
62354: LD_VAR 0 2
62358: PPUSH
62359: LD_VAR 0 4
62363: PPUSH
62364: LD_VAR 0 5
62368: PPUSH
62369: LD_INT 12
62371: PPUSH
62372: CALL 62389 0 4
// end ;
62376: LD_VAR 0 6
62380: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
62381: LD_INT 0
62383: PPUSH
// end ;
62384: LD_VAR 0 4
62388: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62389: LD_INT 0
62391: PPUSH
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
62399: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62400: LD_VAR 0 1
62404: NOT
62405: PUSH
62406: LD_VAR 0 2
62410: PPUSH
62411: LD_VAR 0 3
62415: PPUSH
62416: CALL_OW 488
62420: NOT
62421: OR
62422: PUSH
62423: LD_VAR 0 4
62427: NOT
62428: OR
62429: IFFALSE 62433
// exit ;
62431: GO 62773
// list := [ ] ;
62433: LD_ADDR_VAR 0 13
62437: PUSH
62438: EMPTY
62439: ST_TO_ADDR
// if x - r < 0 then
62440: LD_VAR 0 2
62444: PUSH
62445: LD_VAR 0 4
62449: MINUS
62450: PUSH
62451: LD_INT 0
62453: LESS
62454: IFFALSE 62466
// min_x := 0 else
62456: LD_ADDR_VAR 0 7
62460: PUSH
62461: LD_INT 0
62463: ST_TO_ADDR
62464: GO 62482
// min_x := x - r ;
62466: LD_ADDR_VAR 0 7
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_VAR 0 4
62480: MINUS
62481: ST_TO_ADDR
// if y - r < 0 then
62482: LD_VAR 0 3
62486: PUSH
62487: LD_VAR 0 4
62491: MINUS
62492: PUSH
62493: LD_INT 0
62495: LESS
62496: IFFALSE 62508
// min_y := 0 else
62498: LD_ADDR_VAR 0 8
62502: PUSH
62503: LD_INT 0
62505: ST_TO_ADDR
62506: GO 62524
// min_y := y - r ;
62508: LD_ADDR_VAR 0 8
62512: PUSH
62513: LD_VAR 0 3
62517: PUSH
62518: LD_VAR 0 4
62522: MINUS
62523: ST_TO_ADDR
// max_x := x + r ;
62524: LD_ADDR_VAR 0 9
62528: PUSH
62529: LD_VAR 0 2
62533: PUSH
62534: LD_VAR 0 4
62538: PLUS
62539: ST_TO_ADDR
// max_y := y + r ;
62540: LD_ADDR_VAR 0 10
62544: PUSH
62545: LD_VAR 0 3
62549: PUSH
62550: LD_VAR 0 4
62554: PLUS
62555: ST_TO_ADDR
// for _x = min_x to max_x do
62556: LD_ADDR_VAR 0 11
62560: PUSH
62561: DOUBLE
62562: LD_VAR 0 7
62566: DEC
62567: ST_TO_ADDR
62568: LD_VAR 0 9
62572: PUSH
62573: FOR_TO
62574: IFFALSE 62691
// for _y = min_y to max_y do
62576: LD_ADDR_VAR 0 12
62580: PUSH
62581: DOUBLE
62582: LD_VAR 0 8
62586: DEC
62587: ST_TO_ADDR
62588: LD_VAR 0 10
62592: PUSH
62593: FOR_TO
62594: IFFALSE 62687
// begin if not ValidHex ( _x , _y ) then
62596: LD_VAR 0 11
62600: PPUSH
62601: LD_VAR 0 12
62605: PPUSH
62606: CALL_OW 488
62610: NOT
62611: IFFALSE 62615
// continue ;
62613: GO 62593
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62615: LD_VAR 0 11
62619: PPUSH
62620: LD_VAR 0 12
62624: PPUSH
62625: CALL_OW 351
62629: PUSH
62630: LD_VAR 0 11
62634: PPUSH
62635: LD_VAR 0 12
62639: PPUSH
62640: CALL_OW 554
62644: AND
62645: IFFALSE 62685
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62647: LD_ADDR_VAR 0 13
62651: PUSH
62652: LD_VAR 0 13
62656: PPUSH
62657: LD_VAR 0 13
62661: PUSH
62662: LD_INT 1
62664: PLUS
62665: PPUSH
62666: LD_VAR 0 11
62670: PUSH
62671: LD_VAR 0 12
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PPUSH
62680: CALL_OW 2
62684: ST_TO_ADDR
// end ;
62685: GO 62593
62687: POP
62688: POP
62689: GO 62573
62691: POP
62692: POP
// if not list then
62693: LD_VAR 0 13
62697: NOT
62698: IFFALSE 62702
// exit ;
62700: GO 62773
// for i in list do
62702: LD_ADDR_VAR 0 6
62706: PUSH
62707: LD_VAR 0 13
62711: PUSH
62712: FOR_IN
62713: IFFALSE 62771
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62715: LD_VAR 0 1
62719: PPUSH
62720: LD_STRING M
62722: PUSH
62723: LD_VAR 0 6
62727: PUSH
62728: LD_INT 1
62730: ARRAY
62731: PUSH
62732: LD_VAR 0 6
62736: PUSH
62737: LD_INT 2
62739: ARRAY
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: PPUSH
62765: CALL_OW 447
62769: GO 62712
62771: POP
62772: POP
// end ;
62773: LD_VAR 0 5
62777: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62778: LD_EXP 98
62782: NOT
62783: IFFALSE 62833
62785: GO 62787
62787: DISABLE
// begin initHack := true ;
62788: LD_ADDR_EXP 98
62792: PUSH
62793: LD_INT 1
62795: ST_TO_ADDR
// hackTanks := [ ] ;
62796: LD_ADDR_EXP 99
62800: PUSH
62801: EMPTY
62802: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62803: LD_ADDR_EXP 100
62807: PUSH
62808: EMPTY
62809: ST_TO_ADDR
// hackLimit := 3 ;
62810: LD_ADDR_EXP 101
62814: PUSH
62815: LD_INT 3
62817: ST_TO_ADDR
// hackDist := 12 ;
62818: LD_ADDR_EXP 102
62822: PUSH
62823: LD_INT 12
62825: ST_TO_ADDR
// hackCounter := [ ] ;
62826: LD_ADDR_EXP 103
62830: PUSH
62831: EMPTY
62832: ST_TO_ADDR
// end ;
62833: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62834: LD_EXP 98
62838: PUSH
62839: LD_INT 34
62841: PUSH
62842: LD_EXP 79
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PPUSH
62851: CALL_OW 69
62855: AND
62856: IFFALSE 63111
62858: GO 62860
62860: DISABLE
62861: LD_INT 0
62863: PPUSH
62864: PPUSH
// begin enable ;
62865: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62866: LD_ADDR_VAR 0 1
62870: PUSH
62871: LD_INT 34
62873: PUSH
62874: LD_EXP 79
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PPUSH
62883: CALL_OW 69
62887: PUSH
62888: FOR_IN
62889: IFFALSE 63109
// begin if not i in hackTanks then
62891: LD_VAR 0 1
62895: PUSH
62896: LD_EXP 99
62900: IN
62901: NOT
62902: IFFALSE 62985
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62904: LD_ADDR_EXP 99
62908: PUSH
62909: LD_EXP 99
62913: PPUSH
62914: LD_EXP 99
62918: PUSH
62919: LD_INT 1
62921: PLUS
62922: PPUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: CALL_OW 1
62932: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62933: LD_ADDR_EXP 100
62937: PUSH
62938: LD_EXP 100
62942: PPUSH
62943: LD_EXP 100
62947: PUSH
62948: LD_INT 1
62950: PLUS
62951: PPUSH
62952: EMPTY
62953: PPUSH
62954: CALL_OW 1
62958: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62959: LD_ADDR_EXP 103
62963: PUSH
62964: LD_EXP 103
62968: PPUSH
62969: LD_EXP 103
62973: PUSH
62974: LD_INT 1
62976: PLUS
62977: PPUSH
62978: EMPTY
62979: PPUSH
62980: CALL_OW 1
62984: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62985: LD_VAR 0 1
62989: PPUSH
62990: CALL_OW 302
62994: NOT
62995: IFFALSE 63008
// begin HackUnlinkAll ( i ) ;
62997: LD_VAR 0 1
63001: PPUSH
63002: CALL 63114 0 1
// continue ;
63006: GO 62888
// end ; HackCheckCapturedStatus ( i ) ;
63008: LD_VAR 0 1
63012: PPUSH
63013: CALL 63557 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: LD_INT 81
63024: PUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 255
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 33
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 91
63051: PUSH
63052: LD_VAR 0 1
63056: PUSH
63057: LD_EXP 102
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 50
63069: PUSH
63070: EMPTY
63071: LIST
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: PPUSH
63079: CALL_OW 69
63083: ST_TO_ADDR
// if not tmp then
63084: LD_VAR 0 2
63088: NOT
63089: IFFALSE 63093
// continue ;
63091: GO 62888
// HackLink ( i , tmp ) ;
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: CALL 63250 0 2
// end ;
63107: GO 62888
63109: POP
63110: POP
// end ;
63111: PPOPN 2
63113: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
// if not hack in hackTanks then
63119: LD_VAR 0 1
63123: PUSH
63124: LD_EXP 99
63128: IN
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63245
// index := GetElementIndex ( hackTanks , hack ) ;
63134: LD_ADDR_VAR 0 4
63138: PUSH
63139: LD_EXP 99
63143: PPUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: CALL 26292 0 2
63153: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63154: LD_EXP 100
63158: PUSH
63159: LD_VAR 0 4
63163: ARRAY
63164: IFFALSE 63245
// begin for i in hackTanksCaptured [ index ] do
63166: LD_ADDR_VAR 0 3
63170: PUSH
63171: LD_EXP 100
63175: PUSH
63176: LD_VAR 0 4
63180: ARRAY
63181: PUSH
63182: FOR_IN
63183: IFFALSE 63209
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63185: LD_VAR 0 3
63189: PUSH
63190: LD_INT 1
63192: ARRAY
63193: PPUSH
63194: LD_VAR 0 3
63198: PUSH
63199: LD_INT 2
63201: ARRAY
63202: PPUSH
63203: CALL_OW 235
63207: GO 63182
63209: POP
63210: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63211: LD_ADDR_EXP 100
63215: PUSH
63216: LD_EXP 100
63220: PPUSH
63221: LD_VAR 0 4
63225: PPUSH
63226: EMPTY
63227: PPUSH
63228: CALL_OW 1
63232: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63233: LD_VAR 0 1
63237: PPUSH
63238: LD_INT 0
63240: PPUSH
63241: CALL_OW 505
// end ; end ;
63245: LD_VAR 0 2
63249: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63250: LD_INT 0
63252: PPUSH
63253: PPUSH
63254: PPUSH
// if not hack in hackTanks or not vehicles then
63255: LD_VAR 0 1
63259: PUSH
63260: LD_EXP 99
63264: IN
63265: NOT
63266: PUSH
63267: LD_VAR 0 2
63271: NOT
63272: OR
63273: IFFALSE 63277
// exit ;
63275: GO 63552
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63277: LD_ADDR_VAR 0 2
63281: PUSH
63282: LD_VAR 0 1
63286: PPUSH
63287: LD_VAR 0 2
63291: PPUSH
63292: LD_INT 1
63294: PPUSH
63295: LD_INT 1
63297: PPUSH
63298: CALL 26942 0 4
63302: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63303: LD_ADDR_VAR 0 5
63307: PUSH
63308: LD_EXP 99
63312: PPUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL 26292 0 2
63322: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63323: LD_EXP 100
63327: PUSH
63328: LD_VAR 0 5
63332: ARRAY
63333: PUSH
63334: LD_EXP 101
63338: LESS
63339: IFFALSE 63528
// begin for i := 1 to vehicles do
63341: LD_ADDR_VAR 0 4
63345: PUSH
63346: DOUBLE
63347: LD_INT 1
63349: DEC
63350: ST_TO_ADDR
63351: LD_VAR 0 2
63355: PUSH
63356: FOR_TO
63357: IFFALSE 63526
// begin if hackTanksCaptured [ index ] = hackLimit then
63359: LD_EXP 100
63363: PUSH
63364: LD_VAR 0 5
63368: ARRAY
63369: PUSH
63370: LD_EXP 101
63374: EQUAL
63375: IFFALSE 63379
// break ;
63377: GO 63526
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63379: LD_ADDR_EXP 103
63383: PUSH
63384: LD_EXP 103
63388: PPUSH
63389: LD_VAR 0 5
63393: PPUSH
63394: LD_EXP 103
63398: PUSH
63399: LD_VAR 0 5
63403: ARRAY
63404: PUSH
63405: LD_INT 1
63407: PLUS
63408: PPUSH
63409: CALL_OW 1
63413: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63414: LD_ADDR_EXP 100
63418: PUSH
63419: LD_EXP 100
63423: PPUSH
63424: LD_VAR 0 5
63428: PUSH
63429: LD_EXP 100
63433: PUSH
63434: LD_VAR 0 5
63438: ARRAY
63439: PUSH
63440: LD_INT 1
63442: PLUS
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PPUSH
63448: LD_VAR 0 2
63452: PUSH
63453: LD_VAR 0 4
63457: ARRAY
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_VAR 0 4
63468: ARRAY
63469: PPUSH
63470: CALL_OW 255
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PPUSH
63479: CALL 26507 0 3
63483: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63484: LD_VAR 0 2
63488: PUSH
63489: LD_VAR 0 4
63493: ARRAY
63494: PPUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: CALL_OW 255
63504: PPUSH
63505: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63509: LD_VAR 0 2
63513: PUSH
63514: LD_VAR 0 4
63518: ARRAY
63519: PPUSH
63520: CALL_OW 141
// end ;
63524: GO 63356
63526: POP
63527: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63528: LD_VAR 0 1
63532: PPUSH
63533: LD_EXP 100
63537: PUSH
63538: LD_VAR 0 5
63542: ARRAY
63543: PUSH
63544: LD_INT 0
63546: PLUS
63547: PPUSH
63548: CALL_OW 505
// end ;
63552: LD_VAR 0 3
63556: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63557: LD_INT 0
63559: PPUSH
63560: PPUSH
63561: PPUSH
63562: PPUSH
// if not hack in hackTanks then
63563: LD_VAR 0 1
63567: PUSH
63568: LD_EXP 99
63572: IN
63573: NOT
63574: IFFALSE 63578
// exit ;
63576: GO 63818
// index := GetElementIndex ( hackTanks , hack ) ;
63578: LD_ADDR_VAR 0 4
63582: PUSH
63583: LD_EXP 99
63587: PPUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: CALL 26292 0 2
63597: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63598: LD_ADDR_VAR 0 3
63602: PUSH
63603: DOUBLE
63604: LD_EXP 100
63608: PUSH
63609: LD_VAR 0 4
63613: ARRAY
63614: INC
63615: ST_TO_ADDR
63616: LD_INT 1
63618: PUSH
63619: FOR_DOWNTO
63620: IFFALSE 63792
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63622: LD_ADDR_VAR 0 5
63626: PUSH
63627: LD_EXP 100
63631: PUSH
63632: LD_VAR 0 4
63636: ARRAY
63637: PUSH
63638: LD_VAR 0 3
63642: ARRAY
63643: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63644: LD_VAR 0 5
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PPUSH
63653: CALL_OW 302
63657: NOT
63658: PUSH
63659: LD_VAR 0 5
63663: PUSH
63664: LD_INT 1
63666: ARRAY
63667: PPUSH
63668: CALL_OW 255
63672: PUSH
63673: LD_VAR 0 1
63677: PPUSH
63678: CALL_OW 255
63682: NONEQUAL
63683: OR
63684: IFFALSE 63790
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63686: LD_VAR 0 5
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PPUSH
63695: CALL_OW 305
63699: PUSH
63700: LD_VAR 0 5
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PPUSH
63709: CALL_OW 255
63713: PUSH
63714: LD_VAR 0 1
63718: PPUSH
63719: CALL_OW 255
63723: EQUAL
63724: AND
63725: IFFALSE 63749
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63727: LD_VAR 0 5
63731: PUSH
63732: LD_INT 1
63734: ARRAY
63735: PPUSH
63736: LD_VAR 0 5
63740: PUSH
63741: LD_INT 2
63743: ARRAY
63744: PPUSH
63745: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63749: LD_ADDR_EXP 100
63753: PUSH
63754: LD_EXP 100
63758: PPUSH
63759: LD_VAR 0 4
63763: PPUSH
63764: LD_EXP 100
63768: PUSH
63769: LD_VAR 0 4
63773: ARRAY
63774: PPUSH
63775: LD_VAR 0 3
63779: PPUSH
63780: CALL_OW 3
63784: PPUSH
63785: CALL_OW 1
63789: ST_TO_ADDR
// end ; end ;
63790: GO 63619
63792: POP
63793: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63794: LD_VAR 0 1
63798: PPUSH
63799: LD_EXP 100
63803: PUSH
63804: LD_VAR 0 4
63808: ARRAY
63809: PUSH
63810: LD_INT 0
63812: PLUS
63813: PPUSH
63814: CALL_OW 505
// end ;
63818: LD_VAR 0 2
63822: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63823: LD_INT 0
63825: PPUSH
63826: PPUSH
63827: PPUSH
63828: PPUSH
// if not hack in hackTanks then
63829: LD_VAR 0 1
63833: PUSH
63834: LD_EXP 99
63838: IN
63839: NOT
63840: IFFALSE 63844
// exit ;
63842: GO 63929
// index := GetElementIndex ( hackTanks , hack ) ;
63844: LD_ADDR_VAR 0 5
63848: PUSH
63849: LD_EXP 99
63853: PPUSH
63854: LD_VAR 0 1
63858: PPUSH
63859: CALL 26292 0 2
63863: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63864: LD_ADDR_VAR 0 4
63868: PUSH
63869: DOUBLE
63870: LD_INT 1
63872: DEC
63873: ST_TO_ADDR
63874: LD_EXP 100
63878: PUSH
63879: LD_VAR 0 5
63883: ARRAY
63884: PUSH
63885: FOR_TO
63886: IFFALSE 63927
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63888: LD_EXP 100
63892: PUSH
63893: LD_VAR 0 5
63897: ARRAY
63898: PUSH
63899: LD_VAR 0 4
63903: ARRAY
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: PUSH
63909: LD_VAR 0 2
63913: EQUAL
63914: IFFALSE 63925
// KillUnit ( vehicle ) ;
63916: LD_VAR 0 2
63920: PPUSH
63921: CALL_OW 66
63925: GO 63885
63927: POP
63928: POP
// end ;
63929: LD_VAR 0 3
63933: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63934: LD_EXP 104
63938: NOT
63939: IFFALSE 63974
63941: GO 63943
63943: DISABLE
// begin initMiner := true ;
63944: LD_ADDR_EXP 104
63948: PUSH
63949: LD_INT 1
63951: ST_TO_ADDR
// minersList := [ ] ;
63952: LD_ADDR_EXP 105
63956: PUSH
63957: EMPTY
63958: ST_TO_ADDR
// minerMinesList := [ ] ;
63959: LD_ADDR_EXP 106
63963: PUSH
63964: EMPTY
63965: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63966: LD_ADDR_EXP 107
63970: PUSH
63971: LD_INT 5
63973: ST_TO_ADDR
// end ;
63974: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63975: LD_EXP 104
63979: PUSH
63980: LD_INT 34
63982: PUSH
63983: LD_EXP 84
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PPUSH
63992: CALL_OW 69
63996: AND
63997: IFFALSE 64460
63999: GO 64001
64001: DISABLE
64002: LD_INT 0
64004: PPUSH
64005: PPUSH
64006: PPUSH
64007: PPUSH
// begin enable ;
64008: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64009: LD_ADDR_VAR 0 1
64013: PUSH
64014: LD_INT 34
64016: PUSH
64017: LD_EXP 84
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PPUSH
64026: CALL_OW 69
64030: PUSH
64031: FOR_IN
64032: IFFALSE 64104
// begin if not i in minersList then
64034: LD_VAR 0 1
64038: PUSH
64039: LD_EXP 105
64043: IN
64044: NOT
64045: IFFALSE 64102
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64047: LD_ADDR_EXP 105
64051: PUSH
64052: LD_EXP 105
64056: PPUSH
64057: LD_EXP 105
64061: PUSH
64062: LD_INT 1
64064: PLUS
64065: PPUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: CALL_OW 1
64075: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64076: LD_ADDR_EXP 106
64080: PUSH
64081: LD_EXP 106
64085: PPUSH
64086: LD_EXP 106
64090: PUSH
64091: LD_INT 1
64093: PLUS
64094: PPUSH
64095: EMPTY
64096: PPUSH
64097: CALL_OW 1
64101: ST_TO_ADDR
// end end ;
64102: GO 64031
64104: POP
64105: POP
// for i := minerMinesList downto 1 do
64106: LD_ADDR_VAR 0 1
64110: PUSH
64111: DOUBLE
64112: LD_EXP 106
64116: INC
64117: ST_TO_ADDR
64118: LD_INT 1
64120: PUSH
64121: FOR_DOWNTO
64122: IFFALSE 64458
// begin if IsLive ( minersList [ i ] ) then
64124: LD_EXP 105
64128: PUSH
64129: LD_VAR 0 1
64133: ARRAY
64134: PPUSH
64135: CALL_OW 300
64139: IFFALSE 64167
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64141: LD_EXP 105
64145: PUSH
64146: LD_VAR 0 1
64150: ARRAY
64151: PPUSH
64152: LD_EXP 106
64156: PUSH
64157: LD_VAR 0 1
64161: ARRAY
64162: PPUSH
64163: CALL_OW 505
// if not minerMinesList [ i ] then
64167: LD_EXP 106
64171: PUSH
64172: LD_VAR 0 1
64176: ARRAY
64177: NOT
64178: IFFALSE 64182
// continue ;
64180: GO 64121
// for j := minerMinesList [ i ] downto 1 do
64182: LD_ADDR_VAR 0 2
64186: PUSH
64187: DOUBLE
64188: LD_EXP 106
64192: PUSH
64193: LD_VAR 0 1
64197: ARRAY
64198: INC
64199: ST_TO_ADDR
64200: LD_INT 1
64202: PUSH
64203: FOR_DOWNTO
64204: IFFALSE 64454
// begin side := GetSide ( minersList [ i ] ) ;
64206: LD_ADDR_VAR 0 3
64210: PUSH
64211: LD_EXP 105
64215: PUSH
64216: LD_VAR 0 1
64220: ARRAY
64221: PPUSH
64222: CALL_OW 255
64226: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64227: LD_ADDR_VAR 0 4
64231: PUSH
64232: LD_EXP 106
64236: PUSH
64237: LD_VAR 0 1
64241: ARRAY
64242: PUSH
64243: LD_VAR 0 2
64247: ARRAY
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PPUSH
64253: LD_EXP 106
64257: PUSH
64258: LD_VAR 0 1
64262: ARRAY
64263: PUSH
64264: LD_VAR 0 2
64268: ARRAY
64269: PUSH
64270: LD_INT 2
64272: ARRAY
64273: PPUSH
64274: CALL_OW 428
64278: ST_TO_ADDR
// if not tmp then
64279: LD_VAR 0 4
64283: NOT
64284: IFFALSE 64288
// continue ;
64286: GO 64203
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64288: LD_VAR 0 4
64292: PUSH
64293: LD_INT 81
64295: PUSH
64296: LD_VAR 0 3
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PPUSH
64305: CALL_OW 69
64309: IN
64310: PUSH
64311: LD_EXP 106
64315: PUSH
64316: LD_VAR 0 1
64320: ARRAY
64321: PUSH
64322: LD_VAR 0 2
64326: ARRAY
64327: PUSH
64328: LD_INT 1
64330: ARRAY
64331: PPUSH
64332: LD_EXP 106
64336: PUSH
64337: LD_VAR 0 1
64341: ARRAY
64342: PUSH
64343: LD_VAR 0 2
64347: ARRAY
64348: PUSH
64349: LD_INT 2
64351: ARRAY
64352: PPUSH
64353: CALL_OW 458
64357: AND
64358: IFFALSE 64452
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64360: LD_EXP 106
64364: PUSH
64365: LD_VAR 0 1
64369: ARRAY
64370: PUSH
64371: LD_VAR 0 2
64375: ARRAY
64376: PUSH
64377: LD_INT 1
64379: ARRAY
64380: PPUSH
64381: LD_EXP 106
64385: PUSH
64386: LD_VAR 0 1
64390: ARRAY
64391: PUSH
64392: LD_VAR 0 2
64396: ARRAY
64397: PUSH
64398: LD_INT 2
64400: ARRAY
64401: PPUSH
64402: LD_VAR 0 3
64406: PPUSH
64407: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64411: LD_ADDR_EXP 106
64415: PUSH
64416: LD_EXP 106
64420: PPUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_EXP 106
64430: PUSH
64431: LD_VAR 0 1
64435: ARRAY
64436: PPUSH
64437: LD_VAR 0 2
64441: PPUSH
64442: CALL_OW 3
64446: PPUSH
64447: CALL_OW 1
64451: ST_TO_ADDR
// end ; end ;
64452: GO 64203
64454: POP
64455: POP
// end ;
64456: GO 64121
64458: POP
64459: POP
// end ;
64460: PPOPN 4
64462: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
// result := false ;
64467: LD_ADDR_VAR 0 4
64471: PUSH
64472: LD_INT 0
64474: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64475: LD_VAR 0 1
64479: PPUSH
64480: CALL_OW 264
64484: PUSH
64485: LD_EXP 84
64489: EQUAL
64490: NOT
64491: IFFALSE 64495
// exit ;
64493: GO 64735
// index := GetElementIndex ( minersList , unit ) ;
64495: LD_ADDR_VAR 0 5
64499: PUSH
64500: LD_EXP 105
64504: PPUSH
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL 26292 0 2
64514: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64515: LD_EXP 106
64519: PUSH
64520: LD_VAR 0 5
64524: ARRAY
64525: PUSH
64526: LD_EXP 107
64530: GREATEREQUAL
64531: IFFALSE 64535
// exit ;
64533: GO 64735
// ComMoveXY ( unit , x , y ) ;
64535: LD_VAR 0 1
64539: PPUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64554: LD_INT 35
64556: PPUSH
64557: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64561: LD_VAR 0 1
64565: PPUSH
64566: LD_VAR 0 2
64570: PPUSH
64571: LD_VAR 0 3
64575: PPUSH
64576: CALL 57064 0 3
64580: NOT
64581: PUSH
64582: LD_VAR 0 1
64586: PPUSH
64587: CALL_OW 314
64591: AND
64592: IFFALSE 64596
// exit ;
64594: GO 64735
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64596: LD_VAR 0 2
64600: PPUSH
64601: LD_VAR 0 3
64605: PPUSH
64606: CALL_OW 428
64610: PUSH
64611: LD_VAR 0 1
64615: EQUAL
64616: PUSH
64617: LD_VAR 0 1
64621: PPUSH
64622: CALL_OW 314
64626: NOT
64627: AND
64628: IFFALSE 64554
// PlaySoundXY ( x , y , PlantMine ) ;
64630: LD_VAR 0 2
64634: PPUSH
64635: LD_VAR 0 3
64639: PPUSH
64640: LD_STRING PlantMine
64642: PPUSH
64643: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64647: LD_VAR 0 2
64651: PPUSH
64652: LD_VAR 0 3
64656: PPUSH
64657: LD_VAR 0 1
64661: PPUSH
64662: CALL_OW 255
64666: PPUSH
64667: LD_INT 0
64669: PPUSH
64670: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64674: LD_ADDR_EXP 106
64678: PUSH
64679: LD_EXP 106
64683: PPUSH
64684: LD_VAR 0 5
64688: PUSH
64689: LD_EXP 106
64693: PUSH
64694: LD_VAR 0 5
64698: ARRAY
64699: PUSH
64700: LD_INT 1
64702: PLUS
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PPUSH
64708: LD_VAR 0 2
64712: PUSH
64713: LD_VAR 0 3
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PPUSH
64722: CALL 26507 0 3
64726: ST_TO_ADDR
// result := true ;
64727: LD_ADDR_VAR 0 4
64731: PUSH
64732: LD_INT 1
64734: ST_TO_ADDR
// end ;
64735: LD_VAR 0 4
64739: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64740: LD_INT 0
64742: PPUSH
64743: PPUSH
64744: PPUSH
// if not unit in minersList then
64745: LD_VAR 0 1
64749: PUSH
64750: LD_EXP 105
64754: IN
64755: NOT
64756: IFFALSE 64760
// exit ;
64758: GO 65152
// index := GetElementIndex ( minersList , unit ) ;
64760: LD_ADDR_VAR 0 6
64764: PUSH
64765: LD_EXP 105
64769: PPUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL 26292 0 2
64779: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64780: LD_ADDR_VAR 0 5
64784: PUSH
64785: DOUBLE
64786: LD_EXP 106
64790: PUSH
64791: LD_VAR 0 6
64795: ARRAY
64796: INC
64797: ST_TO_ADDR
64798: LD_INT 1
64800: PUSH
64801: FOR_DOWNTO
64802: IFFALSE 64963
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64804: LD_EXP 106
64808: PUSH
64809: LD_VAR 0 6
64813: ARRAY
64814: PUSH
64815: LD_VAR 0 5
64819: ARRAY
64820: PUSH
64821: LD_INT 1
64823: ARRAY
64824: PUSH
64825: LD_VAR 0 2
64829: EQUAL
64830: PUSH
64831: LD_EXP 106
64835: PUSH
64836: LD_VAR 0 6
64840: ARRAY
64841: PUSH
64842: LD_VAR 0 5
64846: ARRAY
64847: PUSH
64848: LD_INT 2
64850: ARRAY
64851: PUSH
64852: LD_VAR 0 3
64856: EQUAL
64857: AND
64858: IFFALSE 64961
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64860: LD_EXP 106
64864: PUSH
64865: LD_VAR 0 6
64869: ARRAY
64870: PUSH
64871: LD_VAR 0 5
64875: ARRAY
64876: PUSH
64877: LD_INT 1
64879: ARRAY
64880: PPUSH
64881: LD_EXP 106
64885: PUSH
64886: LD_VAR 0 6
64890: ARRAY
64891: PUSH
64892: LD_VAR 0 5
64896: ARRAY
64897: PUSH
64898: LD_INT 2
64900: ARRAY
64901: PPUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: CALL_OW 255
64911: PPUSH
64912: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64916: LD_ADDR_EXP 106
64920: PUSH
64921: LD_EXP 106
64925: PPUSH
64926: LD_VAR 0 6
64930: PPUSH
64931: LD_EXP 106
64935: PUSH
64936: LD_VAR 0 6
64940: ARRAY
64941: PPUSH
64942: LD_VAR 0 5
64946: PPUSH
64947: CALL_OW 3
64951: PPUSH
64952: CALL_OW 1
64956: ST_TO_ADDR
// exit ;
64957: POP
64958: POP
64959: GO 65152
// end ; end ;
64961: GO 64801
64963: POP
64964: POP
// for i := minerMinesList [ index ] downto 1 do
64965: LD_ADDR_VAR 0 5
64969: PUSH
64970: DOUBLE
64971: LD_EXP 106
64975: PUSH
64976: LD_VAR 0 6
64980: ARRAY
64981: INC
64982: ST_TO_ADDR
64983: LD_INT 1
64985: PUSH
64986: FOR_DOWNTO
64987: IFFALSE 65150
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64989: LD_EXP 106
64993: PUSH
64994: LD_VAR 0 6
64998: ARRAY
64999: PUSH
65000: LD_VAR 0 5
65004: ARRAY
65005: PUSH
65006: LD_INT 1
65008: ARRAY
65009: PPUSH
65010: LD_EXP 106
65014: PUSH
65015: LD_VAR 0 6
65019: ARRAY
65020: PUSH
65021: LD_VAR 0 5
65025: ARRAY
65026: PUSH
65027: LD_INT 2
65029: ARRAY
65030: PPUSH
65031: LD_VAR 0 2
65035: PPUSH
65036: LD_VAR 0 3
65040: PPUSH
65041: CALL_OW 298
65045: PUSH
65046: LD_INT 6
65048: LESS
65049: IFFALSE 65148
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65051: LD_EXP 106
65055: PUSH
65056: LD_VAR 0 6
65060: ARRAY
65061: PUSH
65062: LD_VAR 0 5
65066: ARRAY
65067: PUSH
65068: LD_INT 1
65070: ARRAY
65071: PPUSH
65072: LD_EXP 106
65076: PUSH
65077: LD_VAR 0 6
65081: ARRAY
65082: PUSH
65083: LD_VAR 0 5
65087: ARRAY
65088: PUSH
65089: LD_INT 2
65091: ARRAY
65092: PPUSH
65093: LD_VAR 0 1
65097: PPUSH
65098: CALL_OW 255
65102: PPUSH
65103: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65107: LD_ADDR_EXP 106
65111: PUSH
65112: LD_EXP 106
65116: PPUSH
65117: LD_VAR 0 6
65121: PPUSH
65122: LD_EXP 106
65126: PUSH
65127: LD_VAR 0 6
65131: ARRAY
65132: PPUSH
65133: LD_VAR 0 5
65137: PPUSH
65138: CALL_OW 3
65142: PPUSH
65143: CALL_OW 1
65147: ST_TO_ADDR
// end ; end ;
65148: GO 64986
65150: POP
65151: POP
// end ;
65152: LD_VAR 0 4
65156: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65157: LD_INT 0
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
65167: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65168: LD_VAR 0 1
65172: PPUSH
65173: CALL_OW 264
65177: PUSH
65178: LD_EXP 84
65182: EQUAL
65183: NOT
65184: PUSH
65185: LD_VAR 0 1
65189: PUSH
65190: LD_EXP 105
65194: IN
65195: NOT
65196: OR
65197: IFFALSE 65201
// exit ;
65199: GO 65523
// index := GetElementIndex ( minersList , unit ) ;
65201: LD_ADDR_VAR 0 6
65205: PUSH
65206: LD_EXP 105
65210: PPUSH
65211: LD_VAR 0 1
65215: PPUSH
65216: CALL 26292 0 2
65220: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65221: LD_ADDR_VAR 0 8
65225: PUSH
65226: LD_EXP 107
65230: PUSH
65231: LD_EXP 106
65235: PUSH
65236: LD_VAR 0 6
65240: ARRAY
65241: MINUS
65242: ST_TO_ADDR
// if not minesFreeAmount then
65243: LD_VAR 0 8
65247: NOT
65248: IFFALSE 65252
// exit ;
65250: GO 65523
// tmp := [ ] ;
65252: LD_ADDR_VAR 0 7
65256: PUSH
65257: EMPTY
65258: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65259: LD_ADDR_VAR 0 5
65263: PUSH
65264: DOUBLE
65265: LD_INT 1
65267: DEC
65268: ST_TO_ADDR
65269: LD_VAR 0 8
65273: PUSH
65274: FOR_TO
65275: IFFALSE 65470
// begin _d := rand ( 0 , 5 ) ;
65277: LD_ADDR_VAR 0 11
65281: PUSH
65282: LD_INT 0
65284: PPUSH
65285: LD_INT 5
65287: PPUSH
65288: CALL_OW 12
65292: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65293: LD_ADDR_VAR 0 12
65297: PUSH
65298: LD_INT 2
65300: PPUSH
65301: LD_INT 6
65303: PPUSH
65304: CALL_OW 12
65308: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65309: LD_ADDR_VAR 0 9
65313: PUSH
65314: LD_VAR 0 2
65318: PPUSH
65319: LD_VAR 0 11
65323: PPUSH
65324: LD_VAR 0 12
65328: PPUSH
65329: CALL_OW 272
65333: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65334: LD_ADDR_VAR 0 10
65338: PUSH
65339: LD_VAR 0 3
65343: PPUSH
65344: LD_VAR 0 11
65348: PPUSH
65349: LD_VAR 0 12
65353: PPUSH
65354: CALL_OW 273
65358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65359: LD_VAR 0 9
65363: PPUSH
65364: LD_VAR 0 10
65368: PPUSH
65369: CALL_OW 488
65373: PUSH
65374: LD_VAR 0 9
65378: PUSH
65379: LD_VAR 0 10
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_VAR 0 7
65392: IN
65393: NOT
65394: AND
65395: PUSH
65396: LD_VAR 0 9
65400: PPUSH
65401: LD_VAR 0 10
65405: PPUSH
65406: CALL_OW 458
65410: NOT
65411: AND
65412: IFFALSE 65454
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65414: LD_ADDR_VAR 0 7
65418: PUSH
65419: LD_VAR 0 7
65423: PPUSH
65424: LD_VAR 0 7
65428: PUSH
65429: LD_INT 1
65431: PLUS
65432: PPUSH
65433: LD_VAR 0 9
65437: PUSH
65438: LD_VAR 0 10
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PPUSH
65447: CALL_OW 1
65451: ST_TO_ADDR
65452: GO 65468
// i := i - 1 ;
65454: LD_ADDR_VAR 0 5
65458: PUSH
65459: LD_VAR 0 5
65463: PUSH
65464: LD_INT 1
65466: MINUS
65467: ST_TO_ADDR
// end ;
65468: GO 65274
65470: POP
65471: POP
// for i in tmp do
65472: LD_ADDR_VAR 0 5
65476: PUSH
65477: LD_VAR 0 7
65481: PUSH
65482: FOR_IN
65483: IFFALSE 65521
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_VAR 0 5
65494: PUSH
65495: LD_INT 1
65497: ARRAY
65498: PPUSH
65499: LD_VAR 0 5
65503: PUSH
65504: LD_INT 2
65506: ARRAY
65507: PPUSH
65508: CALL 64463 0 3
65512: NOT
65513: IFFALSE 65519
// exit ;
65515: POP
65516: POP
65517: GO 65523
65519: GO 65482
65521: POP
65522: POP
// end ;
65523: LD_VAR 0 4
65527: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65528: LD_INT 0
65530: PPUSH
65531: PPUSH
65532: PPUSH
65533: PPUSH
65534: PPUSH
65535: PPUSH
65536: PPUSH
// if not GetClass ( unit ) = class_sniper then
65537: LD_VAR 0 1
65541: PPUSH
65542: CALL_OW 257
65546: PUSH
65547: LD_INT 5
65549: EQUAL
65550: NOT
65551: IFFALSE 65555
// exit ;
65553: GO 65943
// dist := 8 ;
65555: LD_ADDR_VAR 0 5
65559: PUSH
65560: LD_INT 8
65562: ST_TO_ADDR
// viewRange := 12 ;
65563: LD_ADDR_VAR 0 7
65567: PUSH
65568: LD_INT 12
65570: ST_TO_ADDR
// side := GetSide ( unit ) ;
65571: LD_ADDR_VAR 0 6
65575: PUSH
65576: LD_VAR 0 1
65580: PPUSH
65581: CALL_OW 255
65585: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65586: LD_INT 61
65588: PPUSH
65589: LD_VAR 0 6
65593: PPUSH
65594: CALL_OW 321
65598: PUSH
65599: LD_INT 2
65601: EQUAL
65602: IFFALSE 65612
// viewRange := 16 ;
65604: LD_ADDR_VAR 0 7
65608: PUSH
65609: LD_INT 16
65611: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65612: LD_VAR 0 1
65616: PPUSH
65617: LD_VAR 0 2
65621: PPUSH
65622: LD_VAR 0 3
65626: PPUSH
65627: CALL_OW 297
65631: PUSH
65632: LD_VAR 0 5
65636: GREATER
65637: IFFALSE 65716
// begin ComMoveXY ( unit , x , y ) ;
65639: LD_VAR 0 1
65643: PPUSH
65644: LD_VAR 0 2
65648: PPUSH
65649: LD_VAR 0 3
65653: PPUSH
65654: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65658: LD_INT 35
65660: PPUSH
65661: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65665: LD_VAR 0 1
65669: PPUSH
65670: LD_VAR 0 2
65674: PPUSH
65675: LD_VAR 0 3
65679: PPUSH
65680: CALL 57064 0 3
65684: NOT
65685: IFFALSE 65689
// exit ;
65687: GO 65943
// until GetDistUnitXY ( unit , x , y ) < dist ;
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_VAR 0 2
65698: PPUSH
65699: LD_VAR 0 3
65703: PPUSH
65704: CALL_OW 297
65708: PUSH
65709: LD_VAR 0 5
65713: LESS
65714: IFFALSE 65658
// end ; ComTurnXY ( unit , x , y ) ;
65716: LD_VAR 0 1
65720: PPUSH
65721: LD_VAR 0 2
65725: PPUSH
65726: LD_VAR 0 3
65730: PPUSH
65731: CALL_OW 118
// wait ( 5 ) ;
65735: LD_INT 5
65737: PPUSH
65738: CALL_OW 67
// _d := GetDir ( unit ) ;
65742: LD_ADDR_VAR 0 10
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: CALL_OW 254
65756: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65757: LD_ADDR_VAR 0 8
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: CALL_OW 250
65771: PPUSH
65772: LD_VAR 0 10
65776: PPUSH
65777: LD_VAR 0 5
65781: PPUSH
65782: CALL_OW 272
65786: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65787: LD_ADDR_VAR 0 9
65791: PUSH
65792: LD_VAR 0 1
65796: PPUSH
65797: CALL_OW 251
65801: PPUSH
65802: LD_VAR 0 10
65806: PPUSH
65807: LD_VAR 0 5
65811: PPUSH
65812: CALL_OW 273
65816: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65817: LD_VAR 0 8
65821: PPUSH
65822: LD_VAR 0 9
65826: PPUSH
65827: CALL_OW 488
65831: NOT
65832: IFFALSE 65836
// exit ;
65834: GO 65943
// ComAnimCustom ( unit , 1 ) ;
65836: LD_VAR 0 1
65840: PPUSH
65841: LD_INT 1
65843: PPUSH
65844: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65848: LD_VAR 0 8
65852: PPUSH
65853: LD_VAR 0 9
65857: PPUSH
65858: LD_VAR 0 6
65862: PPUSH
65863: LD_VAR 0 7
65867: PPUSH
65868: CALL_OW 330
// repeat wait ( 1 ) ;
65872: LD_INT 1
65874: PPUSH
65875: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65879: LD_VAR 0 1
65883: PPUSH
65884: CALL_OW 316
65888: PUSH
65889: LD_VAR 0 1
65893: PPUSH
65894: CALL_OW 314
65898: OR
65899: PUSH
65900: LD_VAR 0 1
65904: PPUSH
65905: CALL_OW 302
65909: NOT
65910: OR
65911: PUSH
65912: LD_VAR 0 1
65916: PPUSH
65917: CALL_OW 301
65921: OR
65922: IFFALSE 65872
// RemoveSeeing ( _x , _y , side ) ;
65924: LD_VAR 0 8
65928: PPUSH
65929: LD_VAR 0 9
65933: PPUSH
65934: LD_VAR 0 6
65938: PPUSH
65939: CALL_OW 331
// end ; end_of_file
65943: LD_VAR 0 4
65947: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65948: LD_VAR 0 1
65952: PPUSH
65953: LD_VAR 0 2
65957: PPUSH
65958: LD_VAR 0 3
65962: PPUSH
65963: LD_VAR 0 4
65967: PPUSH
65968: LD_VAR 0 5
65972: PPUSH
65973: LD_VAR 0 6
65977: PPUSH
65978: CALL 7736 0 6
// end ;
65982: PPOPN 6
65984: END
