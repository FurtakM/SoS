// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 1 ) ;
  63: LD_INT 1
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2230 0 0
// InitPlayer ;
  80: CALL 515 0 0
// InitEnemy ;
  84: CALL 3140 0 0
// Action ;
  88: CALL 1305 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// case Query ( QGl ) of 1 :
 398: LD_STRING QGl
 400: PPUSH
 401: CALL_OW 97
 405: PUSH
 406: LD_INT 1
 408: DOUBLE
 409: EQUAL
 410: IFTRUE 414
 412: GO 417
 414: POP
// ; end ;
 415: GO 418
 417: POP
// case Query ( Qforest ) of 1 :
 418: LD_STRING Qforest
 420: PPUSH
 421: CALL_OW 97
 425: PUSH
 426: LD_INT 1
 428: DOUBLE
 429: EQUAL
 430: IFTRUE 434
 432: GO 444
 434: POP
// SetRoad ( 1 ) ; 2 :
 435: LD_INT 1
 437: PPUSH
 438: CALL 251 0 1
 442: GO 463
 444: LD_INT 2
 446: DOUBLE
 447: EQUAL
 448: IFTRUE 452
 450: GO 462
 452: POP
// SetRoad ( 2 ) ; end ;
 453: LD_INT 2
 455: PPUSH
 456: CALL 251 0 1
 460: GO 463
 462: POP
// case Query ( QDiff ) of 1 :
 463: LD_STRING QDiff
 465: PPUSH
 466: CALL_OW 97
 470: PUSH
 471: LD_INT 1
 473: DOUBLE
 474: EQUAL
 475: IFTRUE 479
 477: GO 490
 479: POP
// Difficulty := 1 ; 2 :
 480: LD_ADDR_OWVAR 67
 484: PUSH
 485: LD_INT 1
 487: ST_TO_ADDR
 488: GO 510
 490: LD_INT 2
 492: DOUBLE
 493: EQUAL
 494: IFTRUE 498
 496: GO 509
 498: POP
// Difficulty := 2 ; end ;
 499: LD_ADDR_OWVAR 67
 503: PUSH
 504: LD_INT 2
 506: ST_TO_ADDR
 507: GO 510
 509: POP
// end ; end_of_file
 510: LD_VAR 0 1
 514: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
// uc_nation := nation_russian ;
 526: LD_ADDR_OWVAR 21
 530: PUSH
 531: LD_INT 3
 533: ST_TO_ADDR
// uc_side := your_side ;
 534: LD_ADDR_OWVAR 20
 538: PUSH
 539: LD_OWVAR 2
 543: ST_TO_ADDR
// player_force := [ ] ;
 544: LD_ADDR_EXP 5
 548: PUSH
 549: EMPTY
 550: ST_TO_ADDR
// mech_group := [ ] ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: EMPTY
 557: ST_TO_ADDR
// vehs := [ ] ;
 558: LD_ADDR_VAR 0 7
 562: PUSH
 563: EMPTY
 564: ST_TO_ADDR
// hurt := false ;
 565: LD_ADDR_EXP 9
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// mines_trigger := false ;
 573: LD_ADDR_EXP 10
 577: PUSH
 578: LD_INT 0
 580: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 581: LD_ADDR_VAR 0 5
 585: PUSH
 586: LD_INT 7
 588: PUSH
 589: LD_INT 6
 591: PUSH
 592: LD_INT 5
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: PUSH
 600: LD_OWVAR 67
 604: ARRAY
 605: ST_TO_ADDR
// hc_gallery :=  ;
 606: LD_ADDR_OWVAR 33
 610: PUSH
 611: LD_STRING 
 613: ST_TO_ADDR
// hc_name :=  ;
 614: LD_ADDR_OWVAR 26
 618: PUSH
 619: LD_STRING 
 621: ST_TO_ADDR
// hc_importance := 100 ;
 622: LD_ADDR_OWVAR 32
 626: PUSH
 627: LD_INT 100
 629: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 1
 635: PPUSH
 636: LD_VAR 0 5
 640: PUSH
 641: LD_INT 1
 643: PLUS
 644: PPUSH
 645: CALL_OW 380
// player_commander := CreateHuman ;
 649: LD_ADDR_EXP 6
 653: PUSH
 654: CALL_OW 44
 658: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 659: LD_ADDR_EXP 5
 663: PUSH
 664: LD_EXP 5
 668: PUSH
 669: LD_EXP 6
 673: ADD
 674: ST_TO_ADDR
// hc_importance := 0 ;
 675: LD_ADDR_OWVAR 32
 679: PUSH
 680: LD_INT 0
 682: ST_TO_ADDR
// case difficulty of 1 :
 683: LD_OWVAR 67
 687: PUSH
 688: LD_INT 1
 690: DOUBLE
 691: EQUAL
 692: IFTRUE 696
 694: GO 718
 696: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 697: LD_ADDR_VAR 0 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: LD_INT 2
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: ST_TO_ADDR
 716: GO 779
 718: LD_INT 2
 720: DOUBLE
 721: EQUAL
 722: IFTRUE 726
 724: GO 748
 726: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 727: LD_ADDR_VAR 0 4
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
 746: GO 779
 748: LD_INT 3
 750: DOUBLE
 751: EQUAL
 752: IFTRUE 756
 754: GO 778
 756: POP
// s = [ 3 , 1 , 1 ] ; end ;
 757: LD_ADDR_VAR 0 4
 761: PUSH
 762: LD_INT 3
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: ST_TO_ADDR
 776: GO 779
 778: POP
// ChangeSideFog ( 3 , 6 ) ;
 779: LD_INT 3
 781: PPUSH
 782: LD_INT 6
 784: PPUSH
 785: CALL_OW 343
// for i = 1 to s [ 1 ] do
 789: LD_ADDR_VAR 0 2
 793: PUSH
 794: DOUBLE
 795: LD_INT 1
 797: DEC
 798: ST_TO_ADDR
 799: LD_VAR 0 4
 803: PUSH
 804: LD_INT 1
 806: ARRAY
 807: PUSH
 808: FOR_TO
 809: IFFALSE 854
// begin PrepareHuman ( false , 1 , sk ) ;
 811: LD_INT 0
 813: PPUSH
 814: LD_INT 1
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 380
// un := CreateHuman ;
 826: LD_ADDR_VAR 0 3
 830: PUSH
 831: CALL_OW 44
 835: ST_TO_ADDR
// player_force := player_force ^ un ;
 836: LD_ADDR_EXP 5
 840: PUSH
 841: LD_EXP 5
 845: PUSH
 846: LD_VAR 0 3
 850: ADD
 851: ST_TO_ADDR
// end ;
 852: GO 808
 854: POP
 855: POP
// for i = 1 to s [ 2 ] do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: DOUBLE
 862: LD_INT 1
 864: DEC
 865: ST_TO_ADDR
 866: LD_VAR 0 4
 870: PUSH
 871: LD_INT 2
 873: ARRAY
 874: PUSH
 875: FOR_TO
 876: IFFALSE 1074
// begin if Prob ( 30 ) then
 878: LD_INT 30
 880: PPUSH
 881: CALL_OW 13
 885: IFFALSE 940
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 887: LD_ADDR_VAR 0 6
 891: PUSH
 892: LD_INT 3
 894: PPUSH
 895: LD_INT 3
 897: PPUSH
 898: LD_INT 22
 900: PPUSH
 901: LD_INT 3
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 43
 909: PUSH
 910: LD_INT 42
 912: PUSH
 913: LD_INT 44
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_INT 3
 926: PPUSH
 927: CALL_OW 12
 931: ARRAY
 932: PPUSH
 933: CALL 7080 0 6
 937: ST_TO_ADDR
 938: GO 999
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 940: LD_ADDR_VAR 0 6
 944: PUSH
 945: LD_INT 3
 947: PPUSH
 948: LD_INT 3
 950: PPUSH
 951: LD_INT 22
 953: PPUSH
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_INT 43
 962: PUSH
 963: LD_INT 42
 965: PUSH
 966: LD_INT 44
 968: PUSH
 969: LD_INT 42
 971: PUSH
 972: LD_INT 44
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 1
 984: PPUSH
 985: LD_INT 5
 987: PPUSH
 988: CALL_OW 12
 992: ARRAY
 993: PPUSH
 994: CALL 7080 0 6
 998: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 999: LD_INT 0
1001: PPUSH
1002: LD_INT 3
1004: PPUSH
1005: LD_VAR 0 5
1009: PPUSH
1010: CALL_OW 380
// mech := CreateHuman ;
1014: LD_ADDR_VAR 0 8
1018: PUSH
1019: CALL_OW 44
1023: ST_TO_ADDR
// vehs := vehs ^ veh ;
1024: LD_ADDR_VAR 0 7
1028: PUSH
1029: LD_VAR 0 7
1033: PUSH
1034: LD_VAR 0 6
1038: ADD
1039: ST_TO_ADDR
// player_force := player_force ^ veh ;
1040: LD_ADDR_EXP 5
1044: PUSH
1045: LD_EXP 5
1049: PUSH
1050: LD_VAR 0 6
1054: ADD
1055: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1056: LD_ADDR_VAR 0 9
1060: PUSH
1061: LD_VAR 0 9
1065: PUSH
1066: LD_VAR 0 8
1070: ADD
1071: ST_TO_ADDR
// end ;
1072: GO 875
1074: POP
1075: POP
// for i = 1 to s [ 3 ] do
1076: LD_ADDR_VAR 0 2
1080: PUSH
1081: DOUBLE
1082: LD_INT 1
1084: DEC
1085: ST_TO_ADDR
1086: LD_VAR 0 4
1090: PUSH
1091: LD_INT 3
1093: ARRAY
1094: PUSH
1095: FOR_TO
1096: IFFALSE 1141
// begin PrepareHuman ( false , 4 , sk ) ;
1098: LD_INT 0
1100: PPUSH
1101: LD_INT 4
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: CALL_OW 380
// un := CreateHuman ;
1113: LD_ADDR_VAR 0 3
1117: PUSH
1118: CALL_OW 44
1122: ST_TO_ADDR
// player_force := player_force ^ un ;
1123: LD_ADDR_EXP 5
1127: PUSH
1128: LD_EXP 5
1132: PUSH
1133: LD_VAR 0 3
1137: ADD
1138: ST_TO_ADDR
// end ;
1139: GO 1095
1141: POP
1142: POP
// case road of 1 :
1143: LD_EXP 2
1147: PUSH
1148: LD_INT 1
1150: DOUBLE
1151: EQUAL
1152: IFTRUE 1156
1154: GO 1175
1156: POP
// begin start_area := pos2 ;
1157: LD_ADDR_EXP 7
1161: PUSH
1162: LD_INT 4
1164: ST_TO_ADDR
// finish_area := pos3 ;
1165: LD_ADDR_EXP 8
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// end ; 2 :
1173: GO 1203
1175: LD_INT 2
1177: DOUBLE
1178: EQUAL
1179: IFTRUE 1183
1181: GO 1202
1183: POP
// begin start_area := pos1 ;
1184: LD_ADDR_EXP 7
1188: PUSH
1189: LD_INT 2
1191: ST_TO_ADDR
// finish_area := pos2 ;
1192: LD_ADDR_EXP 8
1196: PUSH
1197: LD_INT 4
1199: ST_TO_ADDR
// end ; end ;
1200: GO 1203
1202: POP
// for i = 1 to player_force do
1203: LD_ADDR_VAR 0 2
1207: PUSH
1208: DOUBLE
1209: LD_INT 1
1211: DEC
1212: ST_TO_ADDR
1213: LD_EXP 5
1217: PUSH
1218: FOR_TO
1219: IFFALSE 1246
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1221: LD_EXP 5
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PPUSH
1232: LD_EXP 7
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 49
1244: GO 1218
1246: POP
1247: POP
// for i = 1 to s [ 2 ] do
1248: LD_ADDR_VAR 0 2
1252: PUSH
1253: DOUBLE
1254: LD_INT 1
1256: DEC
1257: ST_TO_ADDR
1258: LD_VAR 0 4
1262: PUSH
1263: LD_INT 2
1265: ARRAY
1266: PUSH
1267: FOR_TO
1268: IFFALSE 1298
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1270: LD_VAR 0 9
1274: PUSH
1275: LD_VAR 0 2
1279: ARRAY
1280: PPUSH
1281: LD_VAR 0 7
1285: PUSH
1286: LD_VAR 0 2
1290: ARRAY
1291: PPUSH
1292: CALL_OW 52
1296: GO 1267
1298: POP
1299: POP
// end ;
1300: LD_VAR 0 1
1304: RET
// export function Action ; begin
1305: LD_INT 0
1307: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1308: LD_EXP 6
1312: PPUSH
1313: CALL_OW 87
// InGameOn ;
1317: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1321: LD_EXP 6
1325: PPUSH
1326: LD_STRING DS1
1328: PPUSH
1329: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1333: LD_EXP 6
1337: PPUSH
1338: LD_STRING DS2
1340: PPUSH
1341: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1345: LD_EXP 6
1349: PPUSH
1350: LD_STRING DS3
1352: PPUSH
1353: CALL_OW 88
// InGameOff ;
1357: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1361: LD_STRING ObConv
1363: PPUSH
1364: CALL_OW 337
// if road = 1 then
1368: LD_EXP 2
1372: PUSH
1373: LD_INT 1
1375: EQUAL
1376: IFFALSE 1390
// SetAreaMapShow ( pos3 , 1 ) else
1378: LD_INT 6
1380: PPUSH
1381: LD_INT 1
1383: PPUSH
1384: CALL_OW 424
1388: GO 1410
// if road = 2 then
1390: LD_EXP 2
1394: PUSH
1395: LD_INT 2
1397: EQUAL
1398: IFFALSE 1410
// SetAreaMapShow ( pos2 , 1 ) ;
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: CALL_OW 424
// end ;
1410: LD_VAR 0 1
1414: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1415: LD_EXP 8
1419: PPUSH
1420: LD_INT 34
1422: PUSH
1423: LD_INT 51
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: PUSH
1435: LD_INT 0
1437: GREATER
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_INT 2
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 69
1453: PUSH
1454: LD_INT 0
1456: EQUAL
1457: PUSH
1458: LD_EXP 1
1462: NOT
1463: AND
1464: OR
1465: IFFALSE 1599
1467: GO 1469
1469: DISABLE
1470: LD_INT 0
1472: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1473: LD_EXP 6
1477: PPUSH
1478: LD_STRING DS-6
1480: PPUSH
1481: CALL_OW 88
// Wait ( 0 0$01 ) ;
1485: LD_INT 35
1487: PPUSH
1488: CALL_OW 67
// AddMedal ( med , 1 ) ;
1492: LD_STRING med
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1502: LD_INT 22
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PUSH
1517: LD_INT 0
1519: EQUAL
1520: IFFALSE 1534
// AddMedal ( convoy_clear , 1 ) else
1522: LD_STRING convoy_clear
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 101
1532: GO 1545
// AddMedal ( convoy_clear , - 1 ) ;
1534: LD_STRING convoy_clear
1536: PPUSH
1537: LD_INT 1
1539: NEG
1540: PPUSH
1541: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1545: LD_INT 22
1547: PUSH
1548: LD_INT 6
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PPUSH
1555: CALL_OW 69
1559: PUSH
1560: LD_INT 2
1562: GREATEREQUAL
1563: IFFALSE 1577
// AddMedal ( convoy_cargos , 1 ) else
1565: LD_STRING convoy_cargos
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: CALL_OW 101
1575: GO 1588
// AddMedal ( convoy_cargos , - 1 ) ;
1577: LD_STRING convoy_cargos
1579: PPUSH
1580: LD_INT 1
1582: NEG
1583: PPUSH
1584: CALL_OW 101
// GiveMedals ( MAIN ) ;
1588: LD_STRING MAIN
1590: PPUSH
1591: CALL_OW 102
// YouWin ;
1595: CALL_OW 103
// end ;
1599: PPOPN 1
1601: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1602: LD_VAR 0 1
1606: PPUSH
1607: CALL_OW 255
1611: PUSH
1612: LD_INT 3
1614: EQUAL
1615: PUSH
1616: LD_VAR 0 1
1620: PPUSH
1621: CALL_OW 247
1625: PUSH
1626: LD_INT 1
1628: EQUAL
1629: AND
1630: PUSH
1631: LD_INT 22
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 26
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 69
1659: PUSH
1660: LD_INT 1
1662: GREATER
1663: AND
1664: PUSH
1665: LD_EXP 9
1669: NOT
1670: AND
1671: IFFALSE 1727
// begin hurt := true ;
1673: LD_ADDR_EXP 9
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1681: LD_INT 22
1683: PUSH
1684: LD_INT 3
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 26
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: PUSH
1710: LD_EXP 6
1714: DIFF
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_STRING DM4
1722: PPUSH
1723: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1727: LD_VAR 0 1
1731: PUSH
1732: LD_INT 22
1734: PUSH
1735: LD_INT 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 21
1744: PUSH
1745: LD_INT 2
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: CALL_OW 69
1760: IN
1761: IFFALSE 1886
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1763: LD_INT 280
1765: PPUSH
1766: LD_INT 490
1768: PPUSH
1769: CALL_OW 12
1773: PPUSH
1774: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1778: LD_VAR 0 1
1782: PPUSH
1783: CALL_OW 250
1787: PPUSH
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 251
1797: PPUSH
1798: LD_INT 10
1800: PPUSH
1801: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1805: LD_VAR 0 1
1809: PPUSH
1810: CALL_OW 250
1814: PPUSH
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 251
1824: PPUSH
1825: LD_INT 10
1827: PPUSH
1828: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1832: LD_VAR 0 1
1836: PPUSH
1837: CALL_OW 250
1841: PPUSH
1842: LD_VAR 0 1
1846: PPUSH
1847: CALL_OW 251
1851: PPUSH
1852: LD_INT 10
1854: PPUSH
1855: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 250
1868: PPUSH
1869: LD_VAR 0 1
1873: PPUSH
1874: CALL_OW 251
1878: PPUSH
1879: LD_INT 5
1881: PPUSH
1882: CALL_OW 453
// end ; end ;
1886: PPOPN 1
1888: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 31
1894: PUSH
1895: LD_INT 11
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PPUSH
1902: CALL_OW 69
1906: PUSH
1907: LD_INT 1
1909: ARRAY
1910: PPUSH
1911: CALL_OW 292
1915: IFFALSE 1966
1917: GO 1919
1919: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1920: LD_INT 22
1922: PUSH
1923: LD_INT 3
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 26
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PPUSH
1944: CALL_OW 69
1948: PUSH
1949: LD_EXP 6
1953: DIFF
1954: PUSH
1955: LD_INT 1
1957: ARRAY
1958: PPUSH
1959: LD_STRING DM2
1961: PPUSH
1962: CALL_OW 88
// end ;
1966: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1967: LD_INT 3
1969: PPUSH
1970: LD_INT 22
1972: PUSH
1973: LD_INT 2
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 25
1982: PUSH
1983: LD_INT 1
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PPUSH
1994: CALL_OW 69
1998: PPUSH
1999: LD_EXP 6
2003: PPUSH
2004: CALL_OW 74
2008: PPUSH
2009: CALL_OW 292
2013: IFFALSE 2064
2015: GO 2017
2017: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2018: LD_INT 22
2020: PUSH
2021: LD_INT 3
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 26
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL_OW 69
2046: PUSH
2047: LD_EXP 6
2051: DIFF
2052: PUSH
2053: LD_INT 1
2055: ARRAY
2056: PPUSH
2057: LD_STRING DM3
2059: PPUSH
2060: CALL_OW 88
// end ;
2064: END
// every 0 0$01 trigger mines_trigger do
2065: LD_EXP 10
2069: IFFALSE 2140
2071: GO 2073
2073: DISABLE
// begin DialogueOn ;
2074: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2078: LD_INT 22
2080: PUSH
2081: LD_INT 3
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 26
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PPUSH
2102: CALL_OW 69
2106: PUSH
2107: LD_EXP 6
2111: DIFF
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: LD_STRING DM1
2119: PPUSH
2120: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2124: LD_EXP 6
2128: PPUSH
2129: LD_STRING DS4
2131: PPUSH
2132: CALL_OW 88
// DialogueOff ;
2136: CALL_OW 7
// end ;
2140: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2141: LD_INT 34
2143: PUSH
2144: LD_INT 51
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PPUSH
2151: CALL_OW 69
2155: PUSH
2156: LD_INT 1
2158: EQUAL
2159: IFFALSE 2176
2161: GO 2163
2163: DISABLE
// begin Say ( player_commander , DS5 ) ;
2164: LD_EXP 6
2168: PPUSH
2169: LD_STRING DS5
2171: PPUSH
2172: CALL_OW 88
// end ;
2176: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2177: LD_INT 34
2179: PUSH
2180: LD_INT 51
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PPUSH
2187: CALL_OW 69
2191: PUSH
2192: LD_INT 0
2194: EQUAL
2195: IFFALSE 2207
2197: GO 2199
2199: DISABLE
// begin YouLost ( qconvl ) ;
2200: LD_STRING qconvl
2202: PPUSH
2203: CALL_OW 104
// end ;
2207: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2208: LD_EXP 6
2212: PPUSH
2213: CALL_OW 301
2217: IFFALSE 2229
2219: GO 2221
2221: DISABLE
// begin YouLost ( qcom ) ;
2222: LD_STRING qcom
2224: PPUSH
2225: CALL_OW 104
// end ; end_of_file
2229: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 6
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: LD_INT 1
2248: PPUSH
2249: CALL_OW 80
// case road of 1 :
2253: LD_EXP 2
2257: PUSH
2258: LD_INT 1
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2292
2266: POP
// begin area := pos2 ;
2267: LD_ADDR_VAR 0 3
2271: PUSH
2272: LD_INT 4
2274: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2275: LD_ADDR_VAR 0 5
2279: PUSH
2280: LD_INT 30
2282: PUSH
2283: LD_INT 46
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: ST_TO_ADDR
// end ; 2 :
2290: GO 2327
2292: LD_INT 2
2294: DOUBLE
2295: EQUAL
2296: IFTRUE 2300
2298: GO 2326
2300: POP
// begin area := pos1 ;
2301: LD_ADDR_VAR 0 3
2305: PUSH
2306: LD_INT 2
2308: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2309: LD_ADDR_VAR 0 5
2313: PUSH
2314: LD_INT 18
2316: PUSH
2317: LD_INT 3
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: ST_TO_ADDR
// end ; end ;
2324: GO 2327
2326: POP
// if road = 1 then
2327: LD_EXP 2
2331: PUSH
2332: LD_INT 1
2334: EQUAL
2335: IFFALSE 2448
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2337: LD_ADDR_EXP 13
2341: PUSH
2342: LD_INT 36
2344: PUSH
2345: LD_INT 43
2347: PUSH
2348: LD_INT 40
2350: PUSH
2351: LD_INT 29
2353: PUSH
2354: LD_INT 56
2356: PUSH
2357: LD_INT 37
2359: PUSH
2360: LD_INT 70
2362: PUSH
2363: LD_INT 32
2365: PUSH
2366: LD_INT 63
2368: PUSH
2369: LD_INT 6
2371: PUSH
2372: LD_INT 84
2374: PUSH
2375: LD_INT 8
2377: PUSH
2378: LD_INT 90
2380: PUSH
2381: LD_INT 24
2383: PUSH
2384: LD_INT 96
2386: PUSH
2387: LD_INT 47
2389: PUSH
2390: LD_INT 110
2392: PUSH
2393: LD_INT 73
2395: PUSH
2396: LD_INT 143
2398: PUSH
2399: LD_INT 102
2401: PUSH
2402: LD_INT 121
2404: PUSH
2405: LD_INT 93
2407: PUSH
2408: LD_INT 98
2410: PUSH
2411: LD_INT 100
2413: PUSH
2414: LD_INT 62
2416: PUSH
2417: LD_INT 114
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: ST_TO_ADDR
// if road = 2 then
2448: LD_EXP 2
2452: PUSH
2453: LD_INT 2
2455: EQUAL
2456: IFFALSE 2593
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2458: LD_ADDR_EXP 13
2462: PUSH
2463: LD_INT 39
2465: PUSH
2466: LD_INT 18
2468: PUSH
2469: LD_INT 61
2471: PUSH
2472: LD_INT 36
2474: PUSH
2475: LD_INT 62
2477: PUSH
2478: LD_INT 15
2480: PUSH
2481: LD_INT 75
2483: PUSH
2484: LD_INT 5
2486: PUSH
2487: LD_INT 97
2489: PUSH
2490: LD_INT 17
2492: PUSH
2493: LD_INT 98
2495: PUSH
2496: LD_INT 30
2498: PUSH
2499: LD_INT 95
2501: PUSH
2502: LD_INT 49
2504: PUSH
2505: LD_INT 110
2507: PUSH
2508: LD_INT 71
2510: PUSH
2511: LD_INT 146
2513: PUSH
2514: LD_INT 112
2516: PUSH
2517: LD_INT 100
2519: PUSH
2520: LD_INT 81
2522: PUSH
2523: LD_INT 99
2525: PUSH
2526: LD_INT 115
2528: PUSH
2529: LD_INT 77
2531: PUSH
2532: LD_INT 105
2534: PUSH
2535: LD_INT 65
2537: PUSH
2538: LD_INT 75
2540: PUSH
2541: LD_INT 45
2543: PUSH
2544: LD_INT 46
2546: PUSH
2547: LD_INT 26
2549: PUSH
2550: LD_INT 47
2552: PUSH
2553: LD_INT 29
2555: PUSH
2556: LD_INT 54
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// conv_am := 1 ;
2593: LD_ADDR_EXP 12
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// conv := 0 ;
2601: LD_ADDR_EXP 11
2605: PUSH
2606: LD_INT 0
2608: ST_TO_ADDR
// uc_side := 6 ;
2609: LD_ADDR_OWVAR 20
2613: PUSH
2614: LD_INT 6
2616: ST_TO_ADDR
// uc_nation := 3 ;
2617: LD_ADDR_OWVAR 21
2621: PUSH
2622: LD_INT 3
2624: ST_TO_ADDR
// for i = 1 to 2 do
2625: LD_ADDR_VAR 0 4
2629: PUSH
2630: DOUBLE
2631: LD_INT 1
2633: DEC
2634: ST_TO_ADDR
2635: LD_INT 2
2637: PUSH
2638: FOR_TO
2639: IFFALSE 2719
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2641: LD_ADDR_VAR 0 2
2645: PUSH
2646: LD_INT 6
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 22
2654: PPUSH
2655: LD_INT 3
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: LD_INT 51
2663: PPUSH
2664: CALL 7080 0 6
2668: ST_TO_ADDR
// cargos := cargos ^ un ;
2669: LD_ADDR_EXP 4
2673: PUSH
2674: LD_EXP 4
2678: PUSH
2679: LD_VAR 0 2
2683: ADD
2684: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
2685: LD_VAR 0 2
2689: PPUSH
2690: LD_VAR 0 3
2694: PPUSH
2695: LD_INT 0
2697: PPUSH
2698: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_INT 3
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL_OW 290
// end ;
2717: GO 2638
2719: POP
2720: POP
// end ;
2721: LD_VAR 0 1
2725: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2726: LD_EXP 4
2730: IFFALSE 2842
2732: GO 2734
2734: DISABLE
// begin enable ;
2735: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2736: LD_EXP 4
2740: PUSH
2741: LD_INT 1
2743: ARRAY
2744: PPUSH
2745: CALL_OW 306
2749: PUSH
2750: LD_EXP 4
2754: PUSH
2755: LD_INT 2
2757: ARRAY
2758: PPUSH
2759: CALL_OW 306
2763: OR
2764: IFFALSE 2842
// begin if debug then
2766: LD_EXP 1
2770: IFFALSE 2782
// display_strings := conv ;
2772: LD_ADDR_OWVAR 47
2776: PUSH
2777: LD_EXP 11
2781: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2782: LD_STRING QConv
2784: PPUSH
2785: CALL_OW 97
2789: PUSH
2790: LD_INT 1
2792: DOUBLE
2793: EQUAL
2794: IFTRUE 2798
2796: GO 2809
2798: POP
// conv := 0 ; 2 :
2799: LD_ADDR_EXP 11
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
2807: GO 2829
2809: LD_INT 2
2811: DOUBLE
2812: EQUAL
2813: IFTRUE 2817
2815: GO 2828
2817: POP
// conv := 1 ; end ;
2818: LD_ADDR_EXP 11
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
2826: GO 2829
2828: POP
// disable ( 01 ) ;
2829: LD_INT 1
2831: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2832: LD_INT 175
2834: PPUSH
2835: CALL_OW 67
// enable ( 01 ) ;
2839: LD_INT 1
2841: ENABLE_MARKED
// end ; end ;
2842: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2843: LD_EXP 11
2847: PUSH
2848: LD_INT 1
2850: EQUAL
2851: IFFALSE 3063
2853: GO 2855
2855: DISABLE
2856: LD_INT 0
2858: PPUSH
2859: PPUSH
2860: PPUSH
// begin enable ;
2861: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2862: LD_ADDR_VAR 0 3
2866: PUSH
2867: LD_INT 34
2869: PUSH
2870: LD_INT 51
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PPUSH
2877: CALL_OW 69
2881: ST_TO_ADDR
// if debug then
2882: LD_EXP 1
2886: IFFALSE 2923
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2888: LD_ADDR_OWVAR 47
2892: PUSH
2893: LD_EXP 13
2897: PUSH
2898: LD_EXP 12
2902: ARRAY
2903: PUSH
2904: LD_EXP 13
2908: PUSH
2909: LD_EXP 12
2913: PUSH
2914: LD_INT 1
2916: PLUS
2917: ARRAY
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// for i = 1 to car do
2923: LD_ADDR_VAR 0 1
2927: PUSH
2928: DOUBLE
2929: LD_INT 1
2931: DEC
2932: ST_TO_ADDR
2933: LD_VAR 0 3
2937: PUSH
2938: FOR_TO
2939: IFFALSE 3061
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: ARRAY
2951: PPUSH
2952: LD_EXP 13
2956: PUSH
2957: LD_EXP 12
2961: ARRAY
2962: PPUSH
2963: LD_EXP 13
2967: PUSH
2968: LD_EXP 12
2972: PUSH
2973: LD_INT 1
2975: PLUS
2976: ARRAY
2977: PPUSH
2978: CALL 7158 0 3
2982: IFFALSE 3000
// conv_am := conv_am + 2 else
2984: LD_ADDR_EXP 12
2988: PUSH
2989: LD_EXP 12
2993: PUSH
2994: LD_INT 2
2996: PLUS
2997: ST_TO_ADDR
2998: GO 3059
// if not HasTask ( car [ i ] ) then
3000: LD_VAR 0 3
3004: PUSH
3005: LD_VAR 0 1
3009: ARRAY
3010: PPUSH
3011: CALL_OW 314
3015: NOT
3016: IFFALSE 3059
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3018: LD_VAR 0 3
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: LD_EXP 13
3033: PUSH
3034: LD_EXP 12
3038: ARRAY
3039: PPUSH
3040: LD_EXP 13
3044: PUSH
3045: LD_EXP 12
3049: PUSH
3050: LD_INT 1
3052: PLUS
3053: ARRAY
3054: PPUSH
3055: CALL_OW 111
// end ;
3059: GO 2938
3061: POP
3062: POP
// end ;
3063: PPOPN 3
3065: END
// every 0 0$01 trigger conv = 0 do var i ;
3066: LD_EXP 11
3070: PUSH
3071: LD_INT 0
3073: EQUAL
3074: IFFALSE 3137
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
// begin enable ;
3082: ENABLE
// for i = 1 to cargos do
3083: LD_ADDR_VAR 0 1
3087: PUSH
3088: DOUBLE
3089: LD_INT 1
3091: DEC
3092: ST_TO_ADDR
3093: LD_EXP 4
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3135
// if HasTask ( cargos [ i ] ) then
3101: LD_EXP 4
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 314
3116: IFFALSE 3133
// ComStop ( cargos [ i ] ) ;
3118: LD_EXP 4
3122: PUSH
3123: LD_VAR 0 1
3127: ARRAY
3128: PPUSH
3129: CALL_OW 141
3133: GO 3098
3135: POP
3136: POP
// end ; end_of_file
3137: PPOPN 1
3139: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
3147: PPUSH
3148: PPUSH
3149: PPUSH
3150: PPUSH
3151: PPUSH
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
// uc_side := 2 ;
3158: LD_ADDR_OWVAR 20
3162: PUSH
3163: LD_INT 2
3165: ST_TO_ADDR
// uc_nation := 2 ;
3166: LD_ADDR_OWVAR 21
3170: PUSH
3171: LD_INT 2
3173: ST_TO_ADDR
// if road = 1 then
3174: LD_EXP 2
3178: PUSH
3179: LD_INT 1
3181: EQUAL
3182: IFFALSE 3938
// begin case Difficulty of 1 :
3184: LD_OWVAR 67
3188: PUSH
3189: LD_INT 1
3191: DOUBLE
3192: EQUAL
3193: IFTRUE 3197
3195: GO 3504
3197: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3198: LD_ADDR_VAR 0 2
3202: PUSH
3203: LD_INT 56
3205: PUSH
3206: LD_INT 37
3208: PUSH
3209: LD_INT 2
3211: PUSH
3212: LD_INT 81
3214: PUSH
3215: LD_INT 6
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: LD_INT 90
3223: PUSH
3224: LD_INT 25
3226: PUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 105
3232: PUSH
3233: LD_INT 68
3235: PUSH
3236: LD_INT 2
3238: PUSH
3239: LD_INT 96
3241: PUSH
3242: LD_INT 82
3244: PUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 80
3250: PUSH
3251: LD_INT 109
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: LD_INT 7
3284: PUSH
3285: LD_INT 9
3287: PUSH
3288: LD_INT 10
3290: PUSH
3291: LD_INT 11
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3300: LD_ADDR_VAR 0 4
3304: PUSH
3305: LD_INT 13
3307: PUSH
3308: LD_INT 14
3310: PUSH
3311: LD_INT 15
3313: PUSH
3314: LD_INT 16
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3323: LD_ADDR_VAR 0 15
3327: PUSH
3328: LD_INT 4
3330: PUSH
3331: LD_INT 5
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: LD_INT 1
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_INT 68
3353: PUSH
3354: LD_INT 5
3356: PUSH
3357: LD_INT 96
3359: PUSH
3360: LD_INT 53
3362: PUSH
3363: LD_INT 142
3365: PUSH
3366: LD_INT 98
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 82
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3385: LD_ADDR_VAR 0 6
3389: PUSH
3390: LD_INT 17
3392: PUSH
3393: LD_INT 2
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3400: LD_ADDR_VAR 0 5
3404: PUSH
3405: LD_INT 104
3407: PUSH
3408: LD_INT 21
3410: PUSH
3411: LD_INT 4
3413: PUSH
3414: LD_INT 100
3416: PUSH
3417: LD_INT 21
3419: PUSH
3420: LD_INT 4
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3431: LD_ADDR_VAR 0 7
3435: PUSH
3436: LD_INT 38
3438: PUSH
3439: LD_INT 28
3441: PUSH
3442: LD_INT 41
3444: PUSH
3445: LD_INT 29
3447: PUSH
3448: LD_INT 62
3450: PUSH
3451: LD_INT 5
3453: PUSH
3454: LD_INT 65
3456: PUSH
3457: LD_INT 7
3459: PUSH
3460: LD_INT 95
3462: PUSH
3463: LD_INT 55
3465: PUSH
3466: LD_INT 98
3468: PUSH
3469: LD_INT 54
3471: PUSH
3472: LD_INT 96
3474: PUSH
3475: LD_INT 111
3477: PUSH
3478: LD_INT 99
3480: PUSH
3481: LD_INT 112
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: ST_TO_ADDR
// end ; 2 :
3502: GO 3936
3504: LD_INT 2
3506: DOUBLE
3507: EQUAL
3508: IFTRUE 3512
3510: GO 3935
3512: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: LD_INT 56
3520: PUSH
3521: LD_INT 37
3523: PUSH
3524: LD_INT 2
3526: PUSH
3527: LD_INT 81
3529: PUSH
3530: LD_INT 6
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: LD_INT 90
3538: PUSH
3539: LD_INT 25
3541: PUSH
3542: LD_INT 3
3544: PUSH
3545: LD_INT 105
3547: PUSH
3548: LD_INT 68
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_INT 96
3556: PUSH
3557: LD_INT 82
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 80
3565: PUSH
3566: LD_INT 109
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3592: LD_ADDR_VAR 0 3
3596: PUSH
3597: LD_INT 7
3599: PUSH
3600: LD_INT 8
3602: PUSH
3603: LD_INT 9
3605: PUSH
3606: LD_INT 10
3608: PUSH
3609: LD_INT 11
3611: PUSH
3612: LD_INT 12
3614: PUSH
3615: LD_INT 42
3617: PUSH
3618: LD_INT 43
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3631: LD_ADDR_VAR 0 4
3635: PUSH
3636: LD_INT 13
3638: PUSH
3639: LD_INT 14
3641: PUSH
3642: LD_INT 15
3644: PUSH
3645: LD_INT 16
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3654: LD_ADDR_VAR 0 15
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: LD_INT 5
3664: PUSH
3665: LD_INT 0
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3677: LD_ADDR_VAR 0 8
3681: PUSH
3682: LD_INT 68
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: LD_INT 96
3690: PUSH
3691: LD_INT 53
3693: PUSH
3694: LD_INT 142
3696: PUSH
3697: LD_INT 98
3699: PUSH
3700: LD_INT 96
3702: PUSH
3703: LD_INT 82
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_INT 17
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3731: LD_ADDR_VAR 0 5
3735: PUSH
3736: LD_INT 104
3738: PUSH
3739: LD_INT 21
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: LD_INT 100
3747: PUSH
3748: LD_INT 21
3750: PUSH
3751: LD_INT 4
3753: PUSH
3754: LD_INT 91
3756: PUSH
3757: LD_INT 28
3759: PUSH
3760: LD_INT 0
3762: PUSH
3763: LD_INT 92
3765: PUSH
3766: LD_INT 31
3768: PUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 71
3774: PUSH
3775: LD_INT 106
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 71
3783: PUSH
3784: LD_INT 103
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: LD_INT 66
3792: PUSH
3793: LD_INT 102
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3822: LD_ADDR_VAR 0 7
3826: PUSH
3827: LD_INT 38
3829: PUSH
3830: LD_INT 28
3832: PUSH
3833: LD_INT 41
3835: PUSH
3836: LD_INT 29
3838: PUSH
3839: LD_INT 62
3841: PUSH
3842: LD_INT 5
3844: PUSH
3845: LD_INT 65
3847: PUSH
3848: LD_INT 7
3850: PUSH
3851: LD_INT 95
3853: PUSH
3854: LD_INT 55
3856: PUSH
3857: LD_INT 98
3859: PUSH
3860: LD_INT 54
3862: PUSH
3863: LD_INT 96
3865: PUSH
3866: LD_INT 111
3868: PUSH
3869: LD_INT 99
3871: PUSH
3872: LD_INT 112
3874: PUSH
3875: LD_INT 86
3877: PUSH
3878: LD_INT 17
3880: PUSH
3881: LD_INT 89
3883: PUSH
3884: LD_INT 17
3886: PUSH
3887: LD_INT 136
3889: PUSH
3890: LD_INT 91
3892: PUSH
3893: LD_INT 140
3895: PUSH
3896: LD_INT 91
3898: PUSH
3899: LD_INT 102
3901: PUSH
3902: LD_INT 54
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: ST_TO_ADDR
// end ; end ;
3933: GO 3936
3935: POP
// end else
3936: GO 4872
// if road = 2 then
3938: LD_EXP 2
3942: PUSH
3943: LD_INT 2
3945: EQUAL
3946: IFFALSE 4872
// begin case Difficulty of 1 :
3948: LD_OWVAR 67
3952: PUSH
3953: LD_INT 1
3955: DOUBLE
3956: EQUAL
3957: IFTRUE 3961
3959: GO 4372
3961: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3962: LD_ADDR_VAR 0 2
3966: PUSH
3967: LD_INT 44
3969: PUSH
3970: LD_INT 22
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: LD_INT 62
3978: PUSH
3979: LD_INT 8
3981: PUSH
3982: LD_INT 0
3984: PUSH
3985: LD_INT 106
3987: PUSH
3988: LD_INT 68
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 143
3996: PUSH
3997: LD_INT 96
3999: PUSH
4000: LD_INT 3
4002: PUSH
4003: LD_INT 90
4005: PUSH
4006: LD_INT 115
4008: PUSH
4009: LD_INT 4
4011: PUSH
4012: LD_INT 56
4014: PUSH
4015: LD_INT 59
4017: PUSH
4018: LD_INT 5
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4041: LD_ADDR_VAR 0 3
4045: PUSH
4046: LD_INT 45
4048: PUSH
4049: LD_INT 46
4051: PUSH
4052: LD_INT 47
4054: PUSH
4055: LD_INT 48
4057: PUSH
4058: LD_INT 49
4060: PUSH
4061: LD_INT 50
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4072: LD_ADDR_VAR 0 4
4076: PUSH
4077: LD_INT 45
4079: PUSH
4080: LD_INT 46
4082: PUSH
4083: LD_INT 47
4085: PUSH
4086: LD_INT 48
4088: PUSH
4089: LD_INT 49
4091: PUSH
4092: LD_INT 50
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4103: LD_ADDR_VAR 0 15
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: LD_INT 0
4119: PUSH
4120: LD_INT 1
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4134: LD_ADDR_VAR 0 8
4138: PUSH
4139: LD_INT 44
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 62
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: LD_INT 106
4153: PUSH
4154: LD_INT 68
4156: PUSH
4157: LD_INT 143
4159: PUSH
4160: LD_INT 96
4162: PUSH
4163: LD_INT 90
4165: PUSH
4166: LD_INT 115
4168: PUSH
4169: LD_INT 56
4171: PUSH
4172: LD_INT 59
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4189: LD_ADDR_VAR 0 6
4193: PUSH
4194: LD_INT 17
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4204: LD_ADDR_VAR 0 5
4208: PUSH
4209: LD_INT 51
4211: PUSH
4212: LD_INT 29
4214: PUSH
4215: LD_INT 5
4217: PUSH
4218: LD_INT 55
4220: PUSH
4221: LD_INT 33
4223: PUSH
4224: LD_INT 5
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4235: LD_ADDR_VAR 0 7
4239: PUSH
4240: LD_INT 31
4242: PUSH
4243: LD_INT 13
4245: PUSH
4246: LD_INT 33
4248: PUSH
4249: LD_INT 13
4251: PUSH
4252: LD_INT 35
4254: PUSH
4255: LD_INT 13
4257: PUSH
4258: LD_INT 98
4260: PUSH
4261: LD_INT 20
4263: PUSH
4264: LD_INT 102
4266: PUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 97
4272: PUSH
4273: LD_INT 33
4275: PUSH
4276: LD_INT 101
4278: PUSH
4279: LD_INT 54
4281: PUSH
4282: LD_INT 98
4284: PUSH
4285: LD_INT 54
4287: PUSH
4288: LD_INT 96
4290: PUSH
4291: LD_INT 55
4293: PUSH
4294: LD_INT 94
4296: PUSH
4297: LD_INT 56
4299: PUSH
4300: LD_INT 145
4302: PUSH
4303: LD_INT 102
4305: PUSH
4306: LD_INT 146
4308: PUSH
4309: LD_INT 100
4311: PUSH
4312: LD_INT 97
4314: PUSH
4315: LD_INT 114
4317: PUSH
4318: LD_INT 99
4320: PUSH
4321: LD_INT 117
4323: PUSH
4324: LD_INT 54
4326: PUSH
4327: LD_INT 58
4329: PUSH
4330: LD_INT 55
4332: PUSH
4333: LD_INT 56
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
// end ; 2 :
4370: GO 4872
4372: LD_INT 2
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4871
4380: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_INT 44
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: LD_INT 62
4397: PUSH
4398: LD_INT 8
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: LD_INT 106
4406: PUSH
4407: LD_INT 68
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: LD_INT 143
4415: PUSH
4416: LD_INT 96
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: LD_INT 90
4424: PUSH
4425: LD_INT 115
4427: PUSH
4428: LD_INT 4
4430: PUSH
4431: LD_INT 56
4433: PUSH
4434: LD_INT 59
4436: PUSH
4437: LD_INT 5
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4460: LD_ADDR_VAR 0 3
4464: PUSH
4465: LD_INT 45
4467: PUSH
4468: LD_INT 46
4470: PUSH
4471: LD_INT 47
4473: PUSH
4474: LD_INT 48
4476: PUSH
4477: LD_INT 49
4479: PUSH
4480: LD_INT 50
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_INT 45
4498: PUSH
4499: LD_INT 46
4501: PUSH
4502: LD_INT 47
4504: PUSH
4505: LD_INT 48
4507: PUSH
4508: LD_INT 49
4510: PUSH
4511: LD_INT 50
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4522: LD_ADDR_VAR 0 15
4526: PUSH
4527: LD_INT 0
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 5
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4553: LD_ADDR_VAR 0 8
4557: PUSH
4558: LD_INT 21
4560: PUSH
4561: LD_INT 27
4563: PUSH
4564: LD_INT 44
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 62
4572: PUSH
4573: LD_INT 8
4575: PUSH
4576: LD_INT 106
4578: PUSH
4579: LD_INT 68
4581: PUSH
4582: LD_INT 143
4584: PUSH
4585: LD_INT 96
4587: PUSH
4588: LD_INT 90
4590: PUSH
4591: LD_INT 115
4593: PUSH
4594: LD_INT 56
4596: PUSH
4597: LD_INT 59
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4616: LD_ADDR_VAR 0 6
4620: PUSH
4621: LD_INT 17
4623: PUSH
4624: LD_INT 4
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4631: LD_ADDR_VAR 0 5
4635: PUSH
4636: LD_INT 51
4638: PUSH
4639: LD_INT 29
4641: PUSH
4642: LD_INT 5
4644: PUSH
4645: LD_INT 55
4647: PUSH
4648: LD_INT 33
4650: PUSH
4651: LD_INT 5
4653: PUSH
4654: LD_INT 97
4656: PUSH
4657: LD_INT 37
4659: PUSH
4660: LD_INT 0
4662: PUSH
4663: LD_INT 112
4665: PUSH
4666: LD_INT 72
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 120
4674: PUSH
4675: LD_INT 93
4677: PUSH
4678: LD_INT 2
4680: PUSH
4681: LD_INT 25
4683: PUSH
4684: LD_INT 45
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 48
4695: PUSH
4696: LD_INT 1
4698: PUSH
4699: LD_INT 28
4701: PUSH
4702: LD_INT 51
4704: PUSH
4705: LD_INT 1
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4734: LD_ADDR_VAR 0 7
4738: PUSH
4739: LD_INT 31
4741: PUSH
4742: LD_INT 13
4744: PUSH
4745: LD_INT 33
4747: PUSH
4748: LD_INT 13
4750: PUSH
4751: LD_INT 35
4753: PUSH
4754: LD_INT 13
4756: PUSH
4757: LD_INT 98
4759: PUSH
4760: LD_INT 20
4762: PUSH
4763: LD_INT 102
4765: PUSH
4766: LD_INT 25
4768: PUSH
4769: LD_INT 97
4771: PUSH
4772: LD_INT 33
4774: PUSH
4775: LD_INT 101
4777: PUSH
4778: LD_INT 54
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 54
4786: PUSH
4787: LD_INT 96
4789: PUSH
4790: LD_INT 55
4792: PUSH
4793: LD_INT 94
4795: PUSH
4796: LD_INT 56
4798: PUSH
4799: LD_INT 145
4801: PUSH
4802: LD_INT 102
4804: PUSH
4805: LD_INT 146
4807: PUSH
4808: LD_INT 100
4810: PUSH
4811: LD_INT 97
4813: PUSH
4814: LD_INT 114
4816: PUSH
4817: LD_INT 99
4819: PUSH
4820: LD_INT 117
4822: PUSH
4823: LD_INT 54
4825: PUSH
4826: LD_INT 58
4828: PUSH
4829: LD_INT 55
4831: PUSH
4832: LD_INT 56
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
// end ; end ;
4869: GO 4872
4871: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4872: LD_ADDR_EXP 3
4876: PUSH
4877: LD_INT 4
4879: PUSH
4880: LD_INT 5
4882: PUSH
4883: LD_INT 6
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_OWVAR 67
4895: ARRAY
4896: ST_TO_ADDR
// if Difficulty > 1 then
4897: LD_OWVAR 67
4901: PUSH
4902: LD_INT 1
4904: GREATER
4905: IFFALSE 4920
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4907: LD_INT 5
4909: PPUSH
4910: LD_INT 2
4912: PPUSH
4913: LD_INT 2
4915: PPUSH
4916: CALL_OW 322
// if Difficulty > 1 then
4920: LD_OWVAR 67
4924: PUSH
4925: LD_INT 1
4927: GREATER
4928: IFFALSE 4943
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4930: LD_INT 52
4932: PPUSH
4933: LD_INT 2
4935: PPUSH
4936: LD_INT 2
4938: PPUSH
4939: CALL_OW 322
// miners := [ ] ;
4943: LD_ADDR_EXP 15
4947: PUSH
4948: EMPTY
4949: ST_TO_ADDR
// hovers := [ ] ;
4950: LD_ADDR_EXP 16
4954: PUSH
4955: EMPTY
4956: ST_TO_ADDR
// hovers_driver := [ ] ;
4957: LD_ADDR_EXP 17
4961: PUSH
4962: EMPTY
4963: ST_TO_ADDR
// tanks := [ ] ;
4964: LD_ADDR_EXP 18
4968: PUSH
4969: EMPTY
4970: ST_TO_ADDR
// p := 1 ;
4971: LD_ADDR_VAR 0 10
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4979: LD_ADDR_OWVAR 43
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 5
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: LD_INT 7
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: PUSH
5002: LD_OWVAR 67
5006: PUSH
5007: LD_INT 1
5009: PLUS
5010: ARRAY
5011: ST_TO_ADDR
// bc_type = b_breastwork ;
5012: LD_ADDR_OWVAR 42
5016: PUSH
5017: LD_INT 31
5019: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5020: LD_ADDR_VAR 0 9
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: DIVREAL
5038: PUSH
5039: FOR_TO
5040: IFFALSE 5217
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5042: LD_ADDR_VAR 0 13
5046: PUSH
5047: LD_VAR 0 2
5051: PUSH
5052: LD_VAR 0 10
5056: ARRAY
5057: PPUSH
5058: LD_VAR 0 2
5062: PUSH
5063: LD_VAR 0 10
5067: PUSH
5068: LD_INT 1
5070: PLUS
5071: ARRAY
5072: PPUSH
5073: LD_VAR 0 2
5077: PUSH
5078: LD_VAR 0 10
5082: PUSH
5083: LD_INT 2
5085: PLUS
5086: ARRAY
5087: PPUSH
5088: CALL_OW 47
5092: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_EXP 3
5103: PPUSH
5104: CALL_OW 380
// un := CreateHuman ;
5108: LD_ADDR_VAR 0 12
5112: PUSH
5113: CALL_OW 44
5117: ST_TO_ADDR
// dir := GetDir ( b ) ;
5118: LD_ADDR_VAR 0 16
5122: PUSH
5123: LD_VAR 0 13
5127: PPUSH
5128: CALL_OW 254
5132: ST_TO_ADDR
// if dir < 3 then
5133: LD_VAR 0 16
5137: PUSH
5138: LD_INT 3
5140: LESS
5141: IFFALSE 5159
// dir := dir + 3 else
5143: LD_ADDR_VAR 0 16
5147: PUSH
5148: LD_VAR 0 16
5152: PUSH
5153: LD_INT 3
5155: PLUS
5156: ST_TO_ADDR
5157: GO 5173
// dir := dir - 3 ;
5159: LD_ADDR_VAR 0 16
5163: PUSH
5164: LD_VAR 0 16
5168: PUSH
5169: LD_INT 3
5171: MINUS
5172: ST_TO_ADDR
// SetDir ( un , dir ) ;
5173: LD_VAR 0 12
5177: PPUSH
5178: LD_VAR 0 16
5182: PPUSH
5183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5187: LD_VAR 0 12
5191: PPUSH
5192: LD_VAR 0 13
5196: PPUSH
5197: CALL_OW 52
// p := p + 3 ;
5201: LD_ADDR_VAR 0 10
5205: PUSH
5206: LD_VAR 0 10
5210: PUSH
5211: LD_INT 3
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: GO 5039
5217: POP
5218: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5219: LD_ADDR_VAR 0 14
5223: PUSH
5224: LD_INT 2
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: LD_INT 4
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: PUSH
5238: LD_OWVAR 67
5242: ARRAY
5243: ST_TO_ADDR
// for i = 1 to sold_stand do
5244: LD_ADDR_VAR 0 9
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_VAR 0 3
5258: PUSH
5259: FOR_TO
5260: IFFALSE 5439
// for p = 1 to x do
5262: LD_ADDR_VAR 0 10
5266: PUSH
5267: DOUBLE
5268: LD_INT 1
5270: DEC
5271: ST_TO_ADDR
5272: LD_VAR 0 14
5276: PUSH
5277: FOR_TO
5278: IFFALSE 5435
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 9
5289: ARRAY
5290: PUSH
5291: LD_INT 10
5293: EQUAL
5294: PUSH
5295: LD_EXP 2
5299: PUSH
5300: LD_INT 2
5302: EQUAL
5303: PUSH
5304: LD_OWVAR 67
5308: PUSH
5309: LD_INT 1
5311: GREATER
5312: AND
5313: PUSH
5314: LD_VAR 0 10
5318: PUSH
5319: LD_VAR 0 14
5323: EQUAL
5324: AND
5325: OR
5326: IFFALSE 5345
// PrepareHuman ( false , class_mortar , skill ) else
5328: LD_INT 0
5330: PPUSH
5331: LD_INT 8
5333: PPUSH
5334: LD_EXP 3
5338: PPUSH
5339: CALL_OW 380
5343: GO 5360
// PrepareHuman ( false , 1 , skill ) ;
5345: LD_INT 0
5347: PPUSH
5348: LD_INT 1
5350: PPUSH
5351: LD_EXP 3
5355: PPUSH
5356: CALL_OW 380
// un := CreateHuman ;
5360: LD_ADDR_VAR 0 12
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5370: LD_VAR 0 12
5374: PPUSH
5375: CALL_OW 257
5379: PUSH
5380: LD_INT 1
5382: EQUAL
5383: IFFALSE 5401
// miners := miners ^ un ;
5385: LD_ADDR_EXP 15
5389: PUSH
5390: LD_EXP 15
5394: PUSH
5395: LD_VAR 0 12
5399: ADD
5400: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5401: LD_VAR 0 12
5405: PPUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 9
5415: ARRAY
5416: PPUSH
5417: LD_INT 0
5419: PPUSH
5420: CALL_OW 49
// ComHold ( un ) ;
5424: LD_VAR 0 12
5428: PPUSH
5429: CALL_OW 140
// end ;
5433: GO 5277
5435: POP
5436: POP
5437: GO 5259
5439: POP
5440: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5441: LD_ADDR_VAR 0 14
5445: PUSH
5446: LD_INT 3
5448: PUSH
5449: LD_INT 4
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: ST_TO_ADDR
// for i = 1 to sold_crawl do
5466: LD_ADDR_VAR 0 9
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_VAR 0 4
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5594
// for p = 1 to x do
5484: LD_ADDR_VAR 0 10
5488: PUSH
5489: DOUBLE
5490: LD_INT 1
5492: DEC
5493: ST_TO_ADDR
5494: LD_VAR 0 14
5498: PUSH
5499: FOR_TO
5500: IFFALSE 5590
// begin PrepareHuman ( false , 1 , skill ) ;
5502: LD_INT 0
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 380
// un := CreateHuman ;
5517: LD_ADDR_VAR 0 12
5521: PUSH
5522: CALL_OW 44
5526: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5527: LD_VAR 0 12
5531: PPUSH
5532: LD_VAR 0 15
5536: PUSH
5537: LD_VAR 0 9
5541: ARRAY
5542: PPUSH
5543: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5547: LD_VAR 0 12
5551: PPUSH
5552: LD_VAR 0 4
5556: PUSH
5557: LD_VAR 0 9
5561: ARRAY
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// ComCrawl ( un ) ;
5570: LD_VAR 0 12
5574: PPUSH
5575: CALL_OW 137
// AddComHold ( un ) ;
5579: LD_VAR 0 12
5583: PPUSH
5584: CALL_OW 200
// end ;
5588: GO 5499
5590: POP
5591: POP
5592: GO 5481
5594: POP
5595: POP
// p := 1 ;
5596: LD_ADDR_VAR 0 10
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5604: LD_ADDR_VAR 0 9
5608: PUSH
5609: DOUBLE
5610: LD_INT 1
5612: DEC
5613: ST_TO_ADDR
5614: LD_VAR 0 8
5618: PUSH
5619: LD_INT 2
5621: DIVREAL
5622: PUSH
5623: FOR_TO
5624: IFFALSE 5678
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5626: LD_VAR 0 8
5630: PUSH
5631: LD_VAR 0 10
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 8
5641: PUSH
5642: LD_VAR 0 10
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: ARRAY
5651: PPUSH
5652: LD_INT 2
5654: PPUSH
5655: LD_INT 10
5657: PPUSH
5658: CALL_OW 330
// p := p + 2 ;
5662: LD_ADDR_VAR 0 10
5666: PUSH
5667: LD_VAR 0 10
5671: PUSH
5672: LD_INT 2
5674: PLUS
5675: ST_TO_ADDR
// end ;
5676: GO 5623
5678: POP
5679: POP
// for i = 1 to hover_x [ 2 ] do
5680: LD_ADDR_VAR 0 9
5684: PUSH
5685: DOUBLE
5686: LD_INT 1
5688: DEC
5689: ST_TO_ADDR
5690: LD_VAR 0 6
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PUSH
5699: FOR_TO
5700: IFFALSE 5847
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5702: LD_INT 0
5704: PPUSH
5705: LD_INT 3
5707: PPUSH
5708: LD_EXP 3
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: PPUSH
5717: CALL_OW 380
// un := CreateHuman ;
5721: LD_ADDR_VAR 0 12
5725: PUSH
5726: CALL_OW 44
5730: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5731: LD_ADDR_EXP 17
5735: PUSH
5736: LD_EXP 17
5740: PUSH
5741: LD_VAR 0 12
5745: ADD
5746: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ ar_double_machine_gun , 22 ] [ Rand ( 1 , 2 ) ] ) ;
5747: LD_ADDR_VAR 0 11
5751: PUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 2
5757: PPUSH
5758: LD_INT 11
5760: PPUSH
5761: LD_INT 2
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: LD_INT 24
5769: PUSH
5770: LD_INT 22
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 1
5779: PPUSH
5780: LD_INT 2
5782: PPUSH
5783: CALL_OW 12
5787: ARRAY
5788: PPUSH
5789: CALL 7080 0 6
5793: ST_TO_ADDR
// hovers := hovers ^ veh ;
5794: LD_ADDR_EXP 16
5798: PUSH
5799: LD_EXP 16
5803: PUSH
5804: LD_VAR 0 11
5808: ADD
5809: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5810: LD_VAR 0 11
5814: PPUSH
5815: LD_VAR 0 6
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: LD_INT 0
5826: PPUSH
5827: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5831: LD_VAR 0 12
5835: PPUSH
5836: LD_VAR 0 11
5840: PPUSH
5841: CALL_OW 52
// end ;
5845: GO 5699
5847: POP
5848: POP
// p := 1 ;
5849: LD_ADDR_VAR 0 10
5853: PUSH
5854: LD_INT 1
5856: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5857: LD_ADDR_VAR 0 9
5861: PUSH
5862: DOUBLE
5863: LD_INT 1
5865: DEC
5866: ST_TO_ADDR
5867: LD_VAR 0 5
5871: PUSH
5872: LD_INT 3
5874: DIVREAL
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6051
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_EXP 3
5889: PUSH
5890: LD_INT 1
5892: PLUS
5893: PPUSH
5894: CALL_OW 380
// un := CreateHuman ;
5898: LD_ADDR_VAR 0 12
5902: PUSH
5903: CALL_OW 44
5907: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5908: LD_ADDR_VAR 0 11
5912: PUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 2
5918: PPUSH
5919: LD_INT 14
5921: PPUSH
5922: LD_INT 2
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: LD_INT 27
5930: PUSH
5931: LD_INT 25
5933: PUSH
5934: LD_INT 26
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 1
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: CALL_OW 12
5952: ARRAY
5953: PPUSH
5954: CALL 7080 0 6
5958: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5959: LD_VAR 0 11
5963: PPUSH
5964: LD_VAR 0 5
5968: PUSH
5969: LD_VAR 0 10
5973: PUSH
5974: LD_INT 2
5976: PLUS
5977: ARRAY
5978: PPUSH
5979: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5983: LD_VAR 0 11
5987: PPUSH
5988: LD_VAR 0 5
5992: PUSH
5993: LD_VAR 0 10
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 5
6003: PUSH
6004: LD_VAR 0 10
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: ARRAY
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6021: LD_VAR 0 12
6025: PPUSH
6026: LD_VAR 0 11
6030: PPUSH
6031: CALL_OW 52
// p := p + 3 ;
6035: LD_ADDR_VAR 0 10
6039: PUSH
6040: LD_VAR 0 10
6044: PUSH
6045: LD_INT 3
6047: PLUS
6048: ST_TO_ADDR
// end ;
6049: GO 5876
6051: POP
6052: POP
// p := 1 ;
6053: LD_ADDR_VAR 0 10
6057: PUSH
6058: LD_INT 1
6060: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6061: LD_ADDR_VAR 0 9
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_VAR 0 7
6075: PUSH
6076: LD_INT 2
6078: DIVREAL
6079: PUSH
6080: FOR_TO
6081: IFFALSE 6135
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6083: LD_VAR 0 7
6087: PUSH
6088: LD_VAR 0 10
6092: ARRAY
6093: PPUSH
6094: LD_VAR 0 7
6098: PUSH
6099: LD_VAR 0 10
6103: PUSH
6104: LD_INT 1
6106: PLUS
6107: ARRAY
6108: PPUSH
6109: LD_INT 2
6111: PPUSH
6112: LD_INT 0
6114: PPUSH
6115: CALL_OW 454
// p := p + 2 ;
6119: LD_ADDR_VAR 0 10
6123: PUSH
6124: LD_VAR 0 10
6128: PUSH
6129: LD_INT 2
6131: PLUS
6132: ST_TO_ADDR
// end ;
6133: GO 6080
6135: POP
6136: POP
// mines := mines_xy ;
6137: LD_ADDR_EXP 14
6141: PUSH
6142: LD_VAR 0 7
6146: ST_TO_ADDR
// end ;
6147: LD_VAR 0 1
6151: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6152: GO 6154
6154: DISABLE
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
6159: PPUSH
// begin enable ;
6160: ENABLE
// if tanks > 0 then
6161: LD_EXP 18
6165: PUSH
6166: LD_INT 0
6168: GREATER
6169: IFFALSE 6277
// begin for i = 1 to tanks do
6171: LD_ADDR_VAR 0 3
6175: PUSH
6176: DOUBLE
6177: LD_INT 1
6179: DEC
6180: ST_TO_ADDR
6181: LD_EXP 18
6185: PUSH
6186: FOR_TO
6187: IFFALSE 6275
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6189: LD_INT 2
6191: PPUSH
6192: LD_EXP 18
6196: PUSH
6197: LD_VAR 0 3
6201: ARRAY
6202: PPUSH
6203: CALL_OW 292
6207: PUSH
6208: LD_EXP 18
6212: PUSH
6213: LD_VAR 0 3
6217: ARRAY
6218: PPUSH
6219: CALL_OW 314
6223: NOT
6224: AND
6225: IFFALSE 6273
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6227: LD_EXP 18
6231: PUSH
6232: LD_VAR 0 3
6236: ARRAY
6237: PPUSH
6238: LD_INT 22
6240: PUSH
6241: LD_INT 2
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PPUSH
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: CALL_OW 74
6268: PPUSH
6269: CALL_OW 115
6273: GO 6186
6275: POP
6276: POP
// end ; if hovers > 0 then
6277: LD_EXP 16
6281: PUSH
6282: LD_INT 0
6284: GREATER
6285: IFFALSE 6610
// begin for i = 1 to hovers do
6287: LD_ADDR_VAR 0 3
6291: PUSH
6292: DOUBLE
6293: LD_INT 1
6295: DEC
6296: ST_TO_ADDR
6297: LD_EXP 16
6301: PUSH
6302: FOR_TO
6303: IFFALSE 6608
// begin if GetLives ( hovers [ i ] ) < 600 then
6305: LD_EXP 16
6309: PUSH
6310: LD_VAR 0 3
6314: ARRAY
6315: PPUSH
6316: CALL_OW 256
6320: PUSH
6321: LD_INT 600
6323: LESS
6324: IFFALSE 6435
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6326: LD_EXP 16
6330: PUSH
6331: LD_VAR 0 3
6335: ARRAY
6336: PPUSH
6337: LD_INT 18
6339: PPUSH
6340: CALL_OW 308
6344: NOT
6345: IFFALSE 6367
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6347: LD_EXP 16
6351: PUSH
6352: LD_VAR 0 3
6356: ARRAY
6357: PPUSH
6358: LD_INT 18
6360: PPUSH
6361: CALL_OW 113
6365: GO 6435
// if IsDrivenBy ( hovers [ i ] ) then
6367: LD_EXP 16
6371: PUSH
6372: LD_VAR 0 3
6376: ARRAY
6377: PPUSH
6378: CALL_OW 311
6382: IFFALSE 6435
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6384: LD_EXP 16
6388: PUSH
6389: LD_VAR 0 3
6393: ARRAY
6394: PPUSH
6395: CALL_OW 311
6399: PPUSH
6400: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6404: LD_EXP 16
6408: PUSH
6409: LD_VAR 0 3
6413: ARRAY
6414: PPUSH
6415: CALL_OW 311
6419: PPUSH
6420: LD_EXP 16
6424: PUSH
6425: LD_VAR 0 3
6429: ARRAY
6430: PPUSH
6431: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6435: LD_EXP 16
6439: PUSH
6440: LD_VAR 0 3
6444: ARRAY
6445: PPUSH
6446: CALL_OW 256
6450: PUSH
6451: LD_INT 998
6453: GREATER
6454: IFFALSE 6606
// begin if not IsDrivenBy ( hovers [ i ] ) then
6456: LD_EXP 16
6460: PUSH
6461: LD_VAR 0 3
6465: ARRAY
6466: PPUSH
6467: CALL_OW 311
6471: NOT
6472: IFFALSE 6509
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6474: LD_EXP 17
6478: PUSH
6479: LD_VAR 0 3
6483: ARRAY
6484: PPUSH
6485: LD_EXP 16
6489: PPUSH
6490: LD_INT 58
6492: PUSH
6493: EMPTY
6494: LIST
6495: PPUSH
6496: CALL_OW 72
6500: PUSH
6501: LD_INT 1
6503: ARRAY
6504: PPUSH
6505: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6509: LD_INT 19
6511: PPUSH
6512: LD_INT 22
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PPUSH
6522: CALL_OW 70
6526: PUSH
6527: LD_INT 0
6529: GREATER
6530: IFFALSE 6606
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6532: LD_EXP 16
6536: PUSH
6537: LD_VAR 0 3
6541: ARRAY
6542: PPUSH
6543: CALL_OW 311
6547: PPUSH
6548: CALL_OW 314
6552: NOT
6553: IFFALSE 6606
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6555: LD_EXP 16
6559: PUSH
6560: LD_VAR 0 3
6564: ARRAY
6565: PPUSH
6566: CALL_OW 311
6570: PPUSH
6571: LD_INT 22
6573: PUSH
6574: LD_INT 3
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 69
6585: PPUSH
6586: LD_EXP 16
6590: PUSH
6591: LD_VAR 0 3
6595: ARRAY
6596: PPUSH
6597: CALL_OW 74
6601: PPUSH
6602: CALL_OW 115
// end ; end ;
6606: GO 6302
6608: POP
6609: POP
// end ; p := 1 ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: LD_INT 1
6617: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: DOUBLE
6624: LD_INT 1
6626: DEC
6627: ST_TO_ADDR
6628: LD_EXP 14
6632: PUSH
6633: LD_INT 2
6635: DIVREAL
6636: PUSH
6637: FOR_TO
6638: IFFALSE 6856
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6640: LD_EXP 14
6644: PUSH
6645: LD_VAR 0 2
6649: ARRAY
6650: PPUSH
6651: LD_EXP 14
6655: PUSH
6656: LD_VAR 0 2
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: ARRAY
6665: PPUSH
6666: CALL_OW 428
6670: PPUSH
6671: CALL_OW 255
6675: PUSH
6676: LD_INT 3
6678: PUSH
6679: LD_INT 6
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: IN
6686: IFFALSE 6840
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6688: LD_EXP 14
6692: PUSH
6693: LD_VAR 0 2
6697: ARRAY
6698: PPUSH
6699: LD_EXP 14
6703: PUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: PLUS
6712: ARRAY
6713: PPUSH
6714: CALL_OW 458
6718: IFFALSE 6840
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6720: LD_EXP 15
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: ARRAY
6735: PPUSH
6736: LD_EXP 14
6740: PUSH
6741: LD_VAR 0 2
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: ARRAY
6750: PPUSH
6751: CALL_OW 73
6755: PPUSH
6756: LD_EXP 14
6760: PUSH
6761: LD_VAR 0 2
6765: ARRAY
6766: PPUSH
6767: LD_EXP 14
6771: PUSH
6772: LD_VAR 0 2
6776: PUSH
6777: LD_INT 1
6779: PLUS
6780: ARRAY
6781: PPUSH
6782: CALL_OW 297
6786: PUSH
6787: LD_INT 30
6789: LESS
6790: IFFALSE 6840
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6792: LD_EXP 14
6796: PUSH
6797: LD_VAR 0 2
6801: ARRAY
6802: PPUSH
6803: LD_EXP 14
6807: PUSH
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 1
6815: PLUS
6816: ARRAY
6817: PPUSH
6818: LD_INT 2
6820: PPUSH
6821: CALL_OW 456
// if not mines_trigger then
6825: LD_EXP 10
6829: NOT
6830: IFFALSE 6840
// mines_trigger := true ;
6832: LD_ADDR_EXP 10
6836: PUSH
6837: LD_INT 1
6839: ST_TO_ADDR
// end ; p := p + 2 ;
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: PLUS
6853: ST_TO_ADDR
// end ;
6854: GO 6637
6856: POP
6857: POP
// end ;
6858: PPOPN 3
6860: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6861: LD_EXP 4
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: PPUSH
6870: LD_EXP 6
6874: PPUSH
6875: CALL_OW 296
6879: PUSH
6880: LD_INT 20
6882: GREATER
6883: PUSH
6884: LD_EXP 4
6888: PUSH
6889: LD_INT 1
6891: ARRAY
6892: PPUSH
6893: LD_EXP 6
6897: PPUSH
6898: CALL_OW 296
6902: PUSH
6903: LD_INT 20
6905: GREATER
6906: OR
6907: IFFALSE 7022
6909: GO 6911
6911: DISABLE
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
// begin for i = 1 to Difficulty + 1 do
6916: LD_ADDR_VAR 0 1
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_OWVAR 67
6930: PUSH
6931: LD_INT 1
6933: PLUS
6934: PUSH
6935: FOR_TO
6936: IFFALSE 7020
// begin uc_side := 2 ;
6938: LD_ADDR_OWVAR 20
6942: PUSH
6943: LD_INT 2
6945: ST_TO_ADDR
// uc_nation := 2 ;
6946: LD_ADDR_OWVAR 21
6950: PUSH
6951: LD_INT 2
6953: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6954: LD_INT 0
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_EXP 3
6964: PPUSH
6965: CALL_OW 380
// un := CreateHuman ;
6969: LD_ADDR_VAR 0 2
6973: PUSH
6974: CALL_OW 44
6978: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_INT 44
6986: PPUSH
6987: LD_INT 0
6989: PPUSH
6990: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_EXP 4
7003: PPUSH
7004: LD_VAR 0 2
7008: PPUSH
7009: CALL_OW 74
7013: PPUSH
7014: CALL_OW 115
// end ;
7018: GO 6935
7020: POP
7021: POP
// end ;
7022: PPOPN 2
7024: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7025: LD_VAR 0 2
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: LD_INT 31
7045: PUSH
7046: LD_INT 11
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: IN
7066: IFFALSE 7077
// ComRetreat ( driver ) ;
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL 7209 0 1
// end ; end_of_file
7077: PPOPN 4
7079: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7080: LD_INT 0
7082: PPUSH
// uc_side := side ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_VAR 0 1
7092: ST_TO_ADDR
// uc_nation := nation ;
7093: LD_ADDR_OWVAR 21
7097: PUSH
7098: LD_VAR 0 2
7102: ST_TO_ADDR
// vc_chassis := chassis ;
7103: LD_ADDR_OWVAR 37
7107: PUSH
7108: LD_VAR 0 3
7112: ST_TO_ADDR
// vc_engine := engine ;
7113: LD_ADDR_OWVAR 39
7117: PUSH
7118: LD_VAR 0 4
7122: ST_TO_ADDR
// vc_control := control ;
7123: LD_ADDR_OWVAR 38
7127: PUSH
7128: LD_VAR 0 5
7132: ST_TO_ADDR
// vc_weapon := weapon ;
7133: LD_ADDR_OWVAR 40
7137: PUSH
7138: LD_VAR 0 6
7142: ST_TO_ADDR
// result := CreateVehicle ;
7143: LD_ADDR_VAR 0 7
7147: PUSH
7148: CALL_OW 45
7152: ST_TO_ADDR
// end ;
7153: LD_VAR 0 7
7157: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7158: LD_INT 0
7160: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7161: LD_VAR 0 1
7165: PPUSH
7166: LD_VAR 0 2
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 297
7180: PUSH
7181: LD_INT 6
7183: LESS
7184: IFFALSE 7196
// result := true else
7186: LD_ADDR_VAR 0 4
7190: PUSH
7191: LD_INT 1
7193: ST_TO_ADDR
7194: GO 7204
// result := false ;
7196: LD_ADDR_VAR 0 4
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// end ;
7204: LD_VAR 0 4
7208: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7209: LD_INT 0
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_INT 81
7223: PUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 255
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PPUSH
7238: CALL_OW 69
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 119
// dir := GetDir ( un ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_VAR 0 1
7266: PPUSH
7267: CALL_OW 254
7271: ST_TO_ADDR
// dir := dir - 3 ;
7272: LD_ADDR_VAR 0 4
7276: PUSH
7277: LD_VAR 0 4
7281: PUSH
7282: LD_INT 3
7284: MINUS
7285: ST_TO_ADDR
// if dir < 0 then
7286: LD_VAR 0 4
7290: PUSH
7291: LD_INT 0
7293: LESS
7294: IFFALSE 7310
// dir := dir + 6 ;
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_VAR 0 4
7305: PUSH
7306: LD_INT 6
7308: PLUS
7309: ST_TO_ADDR
// while true do
7310: LD_INT 1
7312: IFFALSE 7683
// begin coord_dist := 3 ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 3
7321: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7322: LD_ADDR_VAR 0 5
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 250
7336: PPUSH
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: CALL_OW 272
7351: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7352: LD_ADDR_VAR 0 6
7356: PUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 251
7366: PPUSH
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL_OW 273
7381: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7382: LD_VAR 0 5
7386: PPUSH
7387: LD_VAR 0 6
7391: PPUSH
7392: CALL_OW 351
7396: PUSH
7397: LD_VAR 0 5
7401: PPUSH
7402: LD_VAR 0 6
7406: PPUSH
7407: CALL_OW 488
7411: PUSH
7412: LD_INT 0
7414: EQUAL
7415: OR
7416: PUSH
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 428
7431: PUSH
7432: LD_INT 0
7434: NONEQUAL
7435: OR
7436: IFFALSE 7597
// begin repeat begin coord_dist := coord_dist + 1 ;
7438: LD_ADDR_VAR 0 3
7442: PUSH
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ST_TO_ADDR
// dir := dir + 1 ;
7452: LD_ADDR_VAR 0 4
7456: PUSH
7457: LD_VAR 0 4
7461: PUSH
7462: LD_INT 1
7464: PLUS
7465: ST_TO_ADDR
// if dir > 5 then
7466: LD_VAR 0 4
7470: PUSH
7471: LD_INT 5
7473: GREATER
7474: IFFALSE 7484
// dir = 0 ;
7476: LD_ADDR_VAR 0 4
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 250
7498: PPUSH
7499: LD_VAR 0 4
7503: PPUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 272
7513: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7514: LD_ADDR_VAR 0 6
7518: PUSH
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 251
7528: PPUSH
7529: LD_VAR 0 4
7533: PPUSH
7534: LD_VAR 0 3
7538: PPUSH
7539: CALL_OW 273
7543: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7544: LD_VAR 0 5
7548: PPUSH
7549: LD_VAR 0 6
7553: PPUSH
7554: CALL_OW 351
7558: NOT
7559: PUSH
7560: LD_VAR 0 5
7564: PPUSH
7565: LD_VAR 0 6
7569: PPUSH
7570: CALL_OW 488
7574: AND
7575: PUSH
7576: LD_VAR 0 5
7580: PPUSH
7581: LD_VAR 0 6
7585: PPUSH
7586: CALL_OW 428
7590: PUSH
7591: LD_INT 0
7593: EQUAL
7594: AND
7595: IFFALSE 7438
// end ; ComMoveXY ( un , x , y ) ;
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 111
// Wait ( 0 0$1 ) ;
7616: LD_INT 35
7618: PPUSH
7619: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_INT 81
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 255
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PPUSH
7650: LD_VAR 0 1
7654: PPUSH
7655: CALL_OW 74
7659: PPUSH
7660: CALL_OW 296
7664: PUSH
7665: LD_INT 10
7667: GREATEREQUAL
7668: IFFALSE 7681
// begin ComStop ( un ) ;
7670: LD_VAR 0 1
7674: PPUSH
7675: CALL_OW 141
// break ;
7679: GO 7683
// end ; end ;
7681: GO 7310
// end ;
7683: LD_VAR 0 2
7687: RET
