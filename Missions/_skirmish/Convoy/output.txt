// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2227 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3130 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7141 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7141 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: IFTRUE 1449
1420: PUSH
1421: LD_INT 22
1423: PUSH
1424: LD_INT 2
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 69
1435: PUSH
1436: LD_INT 0
1438: EQUAL
1439: IFFALSE 1448
1441: PUSH
1442: LD_EXP 1
1446: NOT
1447: AND
1448: OR
1449: IFFALSE 1590
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1457: LD_EXP 6
1461: PPUSH
1462: LD_STRING DS-6
1464: PPUSH
1465: CALL_OW 88
// Wait ( 0 0$01 ) ;
1469: LD_INT 35
1471: PPUSH
1472: CALL_OW 67
// AddMedal ( med , 1 ) ;
1476: LD_STRING med
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1486: LD_INT 22
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PPUSH
1496: CALL_OW 69
1500: PUSH
1501: LD_INT 0
1503: EQUAL
1504: IFFALSE 1518
// AddMedal ( convoy_clear , 1 ) else
1506: LD_STRING convoy_clear
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 101
1516: GO 1529
// AddMedal ( convoy_clear , - 1 ) ;
1518: LD_STRING convoy_clear
1520: PPUSH
1521: LD_INT 1
1523: NEG
1524: PPUSH
1525: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1529: LD_INT 22
1531: PUSH
1532: LD_INT 6
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PPUSH
1539: CALL_OW 69
1543: PUSH
1544: LD_INT 2
1546: GREATEREQUAL
1547: IFFALSE 1568
// begin SetAchievement ( ACH_SAFECARGO ) ;
1549: LD_STRING ACH_SAFECARGO
1551: PPUSH
1552: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1556: LD_STRING convoy_cargos
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: CALL_OW 101
// end else
1566: GO 1579
// AddMedal ( convoy_cargos , - 1 ) ;
1568: LD_STRING convoy_cargos
1570: PPUSH
1571: LD_INT 1
1573: NEG
1574: PPUSH
1575: CALL_OW 101
// GiveMedals ( MAIN ) ;
1579: LD_STRING MAIN
1581: PPUSH
1582: CALL_OW 102
// YouWin ;
1586: CALL_OW 103
// end ;
1590: PPOPN 1
1592: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1593: LD_VAR 0 1
1597: PPUSH
1598: CALL_OW 255
1602: PUSH
1603: LD_INT 3
1605: EQUAL
1606: IFFALSE 1623
1608: PUSH
1609: LD_VAR 0 1
1613: PPUSH
1614: CALL_OW 247
1618: PUSH
1619: LD_INT 1
1621: EQUAL
1622: AND
1623: IFFALSE 1659
1625: PUSH
1626: LD_INT 22
1628: PUSH
1629: LD_INT 3
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 26
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PPUSH
1650: CALL_OW 69
1654: PUSH
1655: LD_INT 1
1657: GREATER
1658: AND
1659: IFFALSE 1668
1661: PUSH
1662: LD_EXP 9
1666: NOT
1667: AND
1668: IFFALSE 1724
// begin hurt := true ;
1670: LD_ADDR_EXP 9
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1678: LD_INT 22
1680: PUSH
1681: LD_INT 3
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 26
1690: PUSH
1691: LD_INT 1
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: PUSH
1707: LD_EXP 6
1711: DIFF
1712: PUSH
1713: LD_INT 1
1715: ARRAY
1716: PPUSH
1717: LD_STRING DM4
1719: PPUSH
1720: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1724: LD_VAR 0 1
1728: PUSH
1729: LD_INT 22
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 21
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PPUSH
1753: CALL_OW 69
1757: IN
1758: IFFALSE 1883
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1760: LD_INT 280
1762: PPUSH
1763: LD_INT 490
1765: PPUSH
1766: CALL_OW 12
1770: PPUSH
1771: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 250
1784: PPUSH
1785: LD_VAR 0 1
1789: PPUSH
1790: CALL_OW 251
1794: PPUSH
1795: LD_INT 10
1797: PPUSH
1798: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 250
1811: PPUSH
1812: LD_VAR 0 1
1816: PPUSH
1817: CALL_OW 251
1821: PPUSH
1822: LD_INT 10
1824: PPUSH
1825: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 250
1838: PPUSH
1839: LD_VAR 0 1
1843: PPUSH
1844: CALL_OW 251
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 250
1865: PPUSH
1866: LD_VAR 0 1
1870: PPUSH
1871: CALL_OW 251
1875: PPUSH
1876: LD_INT 5
1878: PPUSH
1879: CALL_OW 453
// end ; end ;
1883: PPOPN 1
1885: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1886: LD_INT 3
1888: PPUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 11
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: PUSH
1904: LD_INT 1
1906: ARRAY
1907: PPUSH
1908: CALL_OW 292
1912: IFFALSE 1963
1914: GO 1916
1916: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1917: LD_INT 22
1919: PUSH
1920: LD_INT 3
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 26
1929: PUSH
1930: LD_INT 1
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PPUSH
1941: CALL_OW 69
1945: PUSH
1946: LD_EXP 6
1950: DIFF
1951: PUSH
1952: LD_INT 1
1954: ARRAY
1955: PPUSH
1956: LD_STRING DM2
1958: PPUSH
1959: CALL_OW 88
// end ;
1963: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1964: LD_INT 3
1966: PPUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 25
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 6
2000: PPUSH
2001: CALL_OW 74
2005: PPUSH
2006: CALL_OW 292
2010: IFFALSE 2061
2012: GO 2014
2014: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2015: LD_INT 22
2017: PUSH
2018: LD_INT 3
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 26
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PPUSH
2039: CALL_OW 69
2043: PUSH
2044: LD_EXP 6
2048: DIFF
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: PPUSH
2054: LD_STRING DM3
2056: PPUSH
2057: CALL_OW 88
// end ;
2061: END
// every 0 0$01 trigger mines_trigger do
2062: LD_EXP 10
2066: IFFALSE 2137
2068: GO 2070
2070: DISABLE
// begin DialogueOn ;
2071: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2075: LD_INT 22
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 26
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 69
2103: PUSH
2104: LD_EXP 6
2108: DIFF
2109: PUSH
2110: LD_INT 1
2112: ARRAY
2113: PPUSH
2114: LD_STRING DM1
2116: PPUSH
2117: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2121: LD_EXP 6
2125: PPUSH
2126: LD_STRING DS4
2128: PPUSH
2129: CALL_OW 88
// DialogueOff ;
2133: CALL_OW 7
// end ;
2137: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2138: LD_INT 34
2140: PUSH
2141: LD_INT 51
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 69
2152: PUSH
2153: LD_INT 1
2155: EQUAL
2156: IFFALSE 2173
2158: GO 2160
2160: DISABLE
// begin Say ( player_commander , DS5 ) ;
2161: LD_EXP 6
2165: PPUSH
2166: LD_STRING DS5
2168: PPUSH
2169: CALL_OW 88
// end ;
2173: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2174: LD_INT 34
2176: PUSH
2177: LD_INT 51
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PUSH
2189: LD_INT 0
2191: EQUAL
2192: IFFALSE 2204
2194: GO 2196
2196: DISABLE
// begin YouLost ( qconvl ) ;
2197: LD_STRING qconvl
2199: PPUSH
2200: CALL_OW 104
// end ;
2204: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2205: LD_EXP 6
2209: PPUSH
2210: CALL_OW 301
2214: IFFALSE 2226
2216: GO 2218
2218: DISABLE
// begin YouLost ( qcom ) ;
2219: LD_STRING qcom
2221: PPUSH
2222: CALL_OW 104
// end ; end_of_file
2226: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2227: LD_INT 0
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2234: LD_INT 3
2236: PPUSH
2237: LD_INT 6
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: CALL_OW 80
// case road of 1 :
2250: LD_EXP 2
2254: PUSH
2255: LD_INT 1
2257: DOUBLE
2258: EQUAL
2259: IFTRUE 2263
2261: GO 2289
2263: POP
// begin area := vpos2 ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 4
2271: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2272: LD_ADDR_VAR 0 5
2276: PUSH
2277: LD_INT 30
2279: PUSH
2280: LD_INT 46
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// end ; 2 :
2287: GO 2324
2289: LD_INT 2
2291: DOUBLE
2292: EQUAL
2293: IFTRUE 2297
2295: GO 2323
2297: POP
// begin area := vpos1 ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 2
2305: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_INT 18
2313: PUSH
2314: LD_INT 3
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// end ; end ;
2321: GO 2324
2323: POP
// if road = 1 then
2324: LD_EXP 2
2328: PUSH
2329: LD_INT 1
2331: EQUAL
2332: IFFALSE 2445
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2334: LD_ADDR_EXP 13
2338: PUSH
2339: LD_INT 36
2341: PUSH
2342: LD_INT 43
2344: PUSH
2345: LD_INT 40
2347: PUSH
2348: LD_INT 29
2350: PUSH
2351: LD_INT 56
2353: PUSH
2354: LD_INT 37
2356: PUSH
2357: LD_INT 70
2359: PUSH
2360: LD_INT 32
2362: PUSH
2363: LD_INT 63
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: LD_INT 84
2371: PUSH
2372: LD_INT 8
2374: PUSH
2375: LD_INT 90
2377: PUSH
2378: LD_INT 24
2380: PUSH
2381: LD_INT 96
2383: PUSH
2384: LD_INT 47
2386: PUSH
2387: LD_INT 110
2389: PUSH
2390: LD_INT 73
2392: PUSH
2393: LD_INT 143
2395: PUSH
2396: LD_INT 102
2398: PUSH
2399: LD_INT 121
2401: PUSH
2402: LD_INT 93
2404: PUSH
2405: LD_INT 98
2407: PUSH
2408: LD_INT 100
2410: PUSH
2411: LD_INT 62
2413: PUSH
2414: LD_INT 114
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: ST_TO_ADDR
// if road = 2 then
2445: LD_EXP 2
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2590
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2455: LD_ADDR_EXP 13
2459: PUSH
2460: LD_INT 39
2462: PUSH
2463: LD_INT 18
2465: PUSH
2466: LD_INT 61
2468: PUSH
2469: LD_INT 36
2471: PUSH
2472: LD_INT 62
2474: PUSH
2475: LD_INT 15
2477: PUSH
2478: LD_INT 75
2480: PUSH
2481: LD_INT 5
2483: PUSH
2484: LD_INT 97
2486: PUSH
2487: LD_INT 17
2489: PUSH
2490: LD_INT 98
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 95
2498: PUSH
2499: LD_INT 49
2501: PUSH
2502: LD_INT 110
2504: PUSH
2505: LD_INT 71
2507: PUSH
2508: LD_INT 146
2510: PUSH
2511: LD_INT 112
2513: PUSH
2514: LD_INT 100
2516: PUSH
2517: LD_INT 81
2519: PUSH
2520: LD_INT 99
2522: PUSH
2523: LD_INT 115
2525: PUSH
2526: LD_INT 77
2528: PUSH
2529: LD_INT 105
2531: PUSH
2532: LD_INT 65
2534: PUSH
2535: LD_INT 75
2537: PUSH
2538: LD_INT 45
2540: PUSH
2541: LD_INT 46
2543: PUSH
2544: LD_INT 26
2546: PUSH
2547: LD_INT 47
2549: PUSH
2550: LD_INT 29
2552: PUSH
2553: LD_INT 54
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// conv_am := 1 ;
2590: LD_ADDR_EXP 12
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// conv := 0 ;
2598: LD_ADDR_EXP 11
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// uc_side := 6 ;
2606: LD_ADDR_OWVAR 20
2610: PUSH
2611: LD_INT 6
2613: ST_TO_ADDR
// uc_nation := 3 ;
2614: LD_ADDR_OWVAR 21
2618: PUSH
2619: LD_INT 3
2621: ST_TO_ADDR
// for i = 1 to 2 do
2622: LD_ADDR_VAR 0 4
2626: PUSH
2627: DOUBLE
2628: LD_INT 1
2630: DEC
2631: ST_TO_ADDR
2632: LD_INT 2
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2741
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2638: LD_ADDR_VAR 0 2
2642: PUSH
2643: LD_INT 6
2645: PPUSH
2646: LD_INT 3
2648: PPUSH
2649: LD_INT 22
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 3
2657: PPUSH
2658: LD_INT 51
2660: PPUSH
2661: CALL 7141 0 6
2665: ST_TO_ADDR
// cargos := cargos ^ un ;
2666: LD_ADDR_EXP 4
2670: PUSH
2671: LD_EXP 4
2675: PUSH
2676: LD_VAR 0 2
2680: ADD
2681: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2682: LD_VAR 0 2
2686: PPUSH
2687: LD_INT 1
2689: PUSH
2690: LD_INT 2
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_EXP 2
2701: ARRAY
2702: PPUSH
2703: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2707: LD_VAR 0 2
2711: PPUSH
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2724: LD_VAR 0 2
2728: PPUSH
2729: LD_INT 3
2731: PPUSH
2732: LD_INT 100
2734: PPUSH
2735: CALL_OW 290
// end ;
2739: GO 2635
2741: POP
2742: POP
// end ;
2743: LD_VAR 0 1
2747: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2748: LD_EXP 4
2752: IFFALSE 2832
2754: GO 2756
2756: DISABLE
// begin enable ;
2757: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2758: LD_EXP 4
2762: PUSH
2763: LD_INT 1
2765: ARRAY
2766: PPUSH
2767: CALL_OW 306
2771: IFTRUE 2788
2773: PUSH
2774: LD_EXP 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 306
2787: OR
2788: IFFALSE 2832
// begin if debug then
2790: LD_EXP 1
2794: IFFALSE 2806
// display_strings := conv ;
2796: LD_ADDR_OWVAR 47
2800: PUSH
2801: LD_EXP 11
2805: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2806: LD_ADDR_EXP 11
2810: PUSH
2811: LD_STRING QConv
2813: PPUSH
2814: CALL_OW 97
2818: PUSH
2819: LD_INT 1
2821: MINUS
2822: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2823: LD_EXP 4
2827: PPUSH
2828: CALL_OW 491
// end ; end ;
2832: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2833: LD_EXP 11
2837: PUSH
2838: LD_INT 1
2840: EQUAL
2841: IFFALSE 3053
2843: GO 2845
2845: DISABLE
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
2850: PPUSH
// begin enable ;
2851: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2852: LD_ADDR_VAR 0 3
2856: PUSH
2857: LD_INT 34
2859: PUSH
2860: LD_INT 51
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: ST_TO_ADDR
// if debug then
2872: LD_EXP 1
2876: IFFALSE 2913
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2878: LD_ADDR_OWVAR 47
2882: PUSH
2883: LD_EXP 13
2887: PUSH
2888: LD_EXP 12
2892: ARRAY
2893: PUSH
2894: LD_EXP 13
2898: PUSH
2899: LD_EXP 12
2903: PUSH
2904: LD_INT 1
2906: PLUS
2907: ARRAY
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: ST_TO_ADDR
// for i = 1 to car do
2913: LD_ADDR_VAR 0 1
2917: PUSH
2918: DOUBLE
2919: LD_INT 1
2921: DEC
2922: ST_TO_ADDR
2923: LD_VAR 0 3
2927: PUSH
2928: FOR_TO
2929: IFFALSE 3051
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2931: LD_VAR 0 3
2935: PUSH
2936: LD_VAR 0 1
2940: ARRAY
2941: PPUSH
2942: LD_EXP 13
2946: PUSH
2947: LD_EXP 12
2951: ARRAY
2952: PPUSH
2953: LD_EXP 13
2957: PUSH
2958: LD_EXP 12
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: ARRAY
2967: PPUSH
2968: CALL 7219 0 3
2972: IFFALSE 2990
// conv_am := conv_am + 2 else
2974: LD_ADDR_EXP 12
2978: PUSH
2979: LD_EXP 12
2983: PUSH
2984: LD_INT 2
2986: PLUS
2987: ST_TO_ADDR
2988: GO 3049
// if not HasTask ( car [ i ] ) then
2990: LD_VAR 0 3
2994: PUSH
2995: LD_VAR 0 1
2999: ARRAY
3000: PPUSH
3001: CALL_OW 314
3005: NOT
3006: IFFALSE 3049
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3008: LD_VAR 0 3
3012: PUSH
3013: LD_VAR 0 1
3017: ARRAY
3018: PPUSH
3019: LD_EXP 13
3023: PUSH
3024: LD_EXP 12
3028: ARRAY
3029: PPUSH
3030: LD_EXP 13
3034: PUSH
3035: LD_EXP 12
3039: PUSH
3040: LD_INT 1
3042: PLUS
3043: ARRAY
3044: PPUSH
3045: CALL_OW 111
// end ;
3049: GO 2928
3051: POP
3052: POP
// end ;
3053: PPOPN 3
3055: END
// every 0 0$01 trigger conv = 0 do var i ;
3056: LD_EXP 11
3060: PUSH
3061: LD_INT 0
3063: EQUAL
3064: IFFALSE 3127
3066: GO 3068
3068: DISABLE
3069: LD_INT 0
3071: PPUSH
// begin enable ;
3072: ENABLE
// for i = 1 to cargos do
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_EXP 4
3087: PUSH
3088: FOR_TO
3089: IFFALSE 3125
// if HasTask ( cargos [ i ] ) then
3091: LD_EXP 4
3095: PUSH
3096: LD_VAR 0 1
3100: ARRAY
3101: PPUSH
3102: CALL_OW 314
3106: IFFALSE 3123
// ComStop ( cargos [ i ] ) ;
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 141
3123: GO 3088
3125: POP
3126: POP
// end ; end_of_file
3127: PPOPN 1
3129: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3130: LD_INT 0
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
3147: PPUSH
// uc_side := 2 ;
3148: LD_ADDR_OWVAR 20
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// uc_nation := 2 ;
3156: LD_ADDR_OWVAR 21
3160: PUSH
3161: LD_INT 2
3163: ST_TO_ADDR
// if road = 1 then
3164: LD_EXP 2
3168: PUSH
3169: LD_INT 1
3171: EQUAL
3172: IFFALSE 3934
// begin case Difficulty of 1 :
3174: LD_OWVAR 67
3178: PUSH
3179: LD_INT 1
3181: DOUBLE
3182: EQUAL
3183: IFTRUE 3187
3185: GO 3494
3187: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_INT 56
3195: PUSH
3196: LD_INT 37
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: LD_INT 81
3204: PUSH
3205: LD_INT 6
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: LD_INT 90
3213: PUSH
3214: LD_INT 25
3216: PUSH
3217: LD_INT 3
3219: PUSH
3220: LD_INT 105
3222: PUSH
3223: LD_INT 68
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: LD_INT 96
3231: PUSH
3232: LD_INT 82
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: LD_INT 80
3240: PUSH
3241: LD_INT 109
3243: PUSH
3244: LD_INT 4
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 7
3274: PUSH
3275: LD_INT 9
3277: PUSH
3278: LD_INT 10
3280: PUSH
3281: LD_INT 11
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3290: LD_ADDR_VAR 0 4
3294: PUSH
3295: LD_INT 13
3297: PUSH
3298: LD_INT 14
3300: PUSH
3301: LD_INT 15
3303: PUSH
3304: LD_INT 16
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3313: LD_ADDR_VAR 0 15
3317: PUSH
3318: LD_INT 4
3320: PUSH
3321: LD_INT 5
3323: PUSH
3324: LD_INT 0
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3336: LD_ADDR_VAR 0 8
3340: PUSH
3341: LD_INT 68
3343: PUSH
3344: LD_INT 5
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 53
3352: PUSH
3353: LD_INT 142
3355: PUSH
3356: LD_INT 98
3358: PUSH
3359: LD_INT 96
3361: PUSH
3362: LD_INT 82
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: LD_INT 17
3382: PUSH
3383: LD_INT 2
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3390: LD_ADDR_VAR 0 5
3394: PUSH
3395: LD_INT 104
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: LD_INT 100
3406: PUSH
3407: LD_INT 21
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3421: LD_ADDR_VAR 0 7
3425: PUSH
3426: LD_INT 38
3428: PUSH
3429: LD_INT 28
3431: PUSH
3432: LD_INT 41
3434: PUSH
3435: LD_INT 29
3437: PUSH
3438: LD_INT 62
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 65
3446: PUSH
3447: LD_INT 7
3449: PUSH
3450: LD_INT 95
3452: PUSH
3453: LD_INT 55
3455: PUSH
3456: LD_INT 98
3458: PUSH
3459: LD_INT 54
3461: PUSH
3462: LD_INT 96
3464: PUSH
3465: LD_INT 111
3467: PUSH
3468: LD_INT 99
3470: PUSH
3471: LD_INT 112
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: ST_TO_ADDR
// end ; 2 , 3 :
3492: GO 3932
3494: LD_INT 2
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3508
3500: LD_INT 3
3502: DOUBLE
3503: EQUAL
3504: IFTRUE 3508
3506: GO 3931
3508: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: LD_INT 56
3516: PUSH
3517: LD_INT 37
3519: PUSH
3520: LD_INT 2
3522: PUSH
3523: LD_INT 81
3525: PUSH
3526: LD_INT 6
3528: PUSH
3529: LD_INT 1
3531: PUSH
3532: LD_INT 90
3534: PUSH
3535: LD_INT 25
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 105
3543: PUSH
3544: LD_INT 68
3546: PUSH
3547: LD_INT 2
3549: PUSH
3550: LD_INT 96
3552: PUSH
3553: LD_INT 82
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 80
3561: PUSH
3562: LD_INT 109
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_INT 7
3595: PUSH
3596: LD_INT 8
3598: PUSH
3599: LD_INT 9
3601: PUSH
3602: LD_INT 10
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: LD_INT 12
3610: PUSH
3611: LD_INT 42
3613: PUSH
3614: LD_INT 43
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_INT 13
3634: PUSH
3635: LD_INT 14
3637: PUSH
3638: LD_INT 15
3640: PUSH
3641: LD_INT 16
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3650: LD_ADDR_VAR 0 15
3654: PUSH
3655: LD_INT 4
3657: PUSH
3658: LD_INT 5
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: LD_INT 1
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3673: LD_ADDR_VAR 0 8
3677: PUSH
3678: LD_INT 68
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 53
3689: PUSH
3690: LD_INT 142
3692: PUSH
3693: LD_INT 98
3695: PUSH
3696: LD_INT 96
3698: PUSH
3699: LD_INT 82
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 17
3719: PUSH
3720: LD_INT 3
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3727: LD_ADDR_VAR 0 5
3731: PUSH
3732: LD_INT 104
3734: PUSH
3735: LD_INT 21
3737: PUSH
3738: LD_INT 4
3740: PUSH
3741: LD_INT 100
3743: PUSH
3744: LD_INT 21
3746: PUSH
3747: LD_INT 4
3749: PUSH
3750: LD_INT 91
3752: PUSH
3753: LD_INT 28
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 92
3761: PUSH
3762: LD_INT 31
3764: PUSH
3765: LD_INT 1
3767: PUSH
3768: LD_INT 71
3770: PUSH
3771: LD_INT 106
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 71
3779: PUSH
3780: LD_INT 103
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 66
3788: PUSH
3789: LD_INT 102
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3818: LD_ADDR_VAR 0 7
3822: PUSH
3823: LD_INT 38
3825: PUSH
3826: LD_INT 28
3828: PUSH
3829: LD_INT 41
3831: PUSH
3832: LD_INT 29
3834: PUSH
3835: LD_INT 62
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: LD_INT 65
3843: PUSH
3844: LD_INT 7
3846: PUSH
3847: LD_INT 95
3849: PUSH
3850: LD_INT 55
3852: PUSH
3853: LD_INT 98
3855: PUSH
3856: LD_INT 54
3858: PUSH
3859: LD_INT 96
3861: PUSH
3862: LD_INT 111
3864: PUSH
3865: LD_INT 99
3867: PUSH
3868: LD_INT 112
3870: PUSH
3871: LD_INT 86
3873: PUSH
3874: LD_INT 17
3876: PUSH
3877: LD_INT 89
3879: PUSH
3880: LD_INT 17
3882: PUSH
3883: LD_INT 136
3885: PUSH
3886: LD_INT 91
3888: PUSH
3889: LD_INT 140
3891: PUSH
3892: LD_INT 91
3894: PUSH
3895: LD_INT 102
3897: PUSH
3898: LD_INT 54
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: ST_TO_ADDR
// end ; end ;
3929: GO 3932
3931: POP
// end else
3932: GO 4874
// if road = 2 then
3934: LD_EXP 2
3938: PUSH
3939: LD_INT 2
3941: EQUAL
3942: IFFALSE 4874
// begin case Difficulty of 1 :
3944: LD_OWVAR 67
3948: PUSH
3949: LD_INT 1
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 4368
3957: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3958: LD_ADDR_VAR 0 2
3962: PUSH
3963: LD_INT 44
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 2
3971: PUSH
3972: LD_INT 62
3974: PUSH
3975: LD_INT 8
3977: PUSH
3978: LD_INT 0
3980: PUSH
3981: LD_INT 106
3983: PUSH
3984: LD_INT 68
3986: PUSH
3987: LD_INT 2
3989: PUSH
3990: LD_INT 143
3992: PUSH
3993: LD_INT 96
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 90
4001: PUSH
4002: LD_INT 115
4004: PUSH
4005: LD_INT 4
4007: PUSH
4008: LD_INT 56
4010: PUSH
4011: LD_INT 59
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: LD_INT 45
4044: PUSH
4045: LD_INT 46
4047: PUSH
4048: LD_INT 47
4050: PUSH
4051: LD_INT 48
4053: PUSH
4054: LD_INT 49
4056: PUSH
4057: LD_INT 50
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_INT 45
4075: PUSH
4076: LD_INT 46
4078: PUSH
4079: LD_INT 47
4081: PUSH
4082: LD_INT 48
4084: PUSH
4085: LD_INT 49
4087: PUSH
4088: LD_INT 50
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_INT 0
4106: PUSH
4107: LD_INT 0
4109: PUSH
4110: LD_INT 5
4112: PUSH
4113: LD_INT 0
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4130: LD_ADDR_VAR 0 8
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 62
4143: PUSH
4144: LD_INT 8
4146: PUSH
4147: LD_INT 106
4149: PUSH
4150: LD_INT 68
4152: PUSH
4153: LD_INT 143
4155: PUSH
4156: LD_INT 96
4158: PUSH
4159: LD_INT 90
4161: PUSH
4162: LD_INT 115
4164: PUSH
4165: LD_INT 56
4167: PUSH
4168: LD_INT 59
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4185: LD_ADDR_VAR 0 6
4189: PUSH
4190: LD_INT 17
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4200: LD_ADDR_VAR 0 5
4204: PUSH
4205: LD_INT 51
4207: PUSH
4208: LD_INT 29
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 55
4216: PUSH
4217: LD_INT 33
4219: PUSH
4220: LD_INT 5
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4231: LD_ADDR_VAR 0 7
4235: PUSH
4236: LD_INT 31
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 33
4244: PUSH
4245: LD_INT 13
4247: PUSH
4248: LD_INT 35
4250: PUSH
4251: LD_INT 13
4253: PUSH
4254: LD_INT 98
4256: PUSH
4257: LD_INT 20
4259: PUSH
4260: LD_INT 102
4262: PUSH
4263: LD_INT 25
4265: PUSH
4266: LD_INT 97
4268: PUSH
4269: LD_INT 33
4271: PUSH
4272: LD_INT 101
4274: PUSH
4275: LD_INT 54
4277: PUSH
4278: LD_INT 98
4280: PUSH
4281: LD_INT 54
4283: PUSH
4284: LD_INT 96
4286: PUSH
4287: LD_INT 55
4289: PUSH
4290: LD_INT 94
4292: PUSH
4293: LD_INT 56
4295: PUSH
4296: LD_INT 145
4298: PUSH
4299: LD_INT 102
4301: PUSH
4302: LD_INT 146
4304: PUSH
4305: LD_INT 100
4307: PUSH
4308: LD_INT 97
4310: PUSH
4311: LD_INT 114
4313: PUSH
4314: LD_INT 99
4316: PUSH
4317: LD_INT 117
4319: PUSH
4320: LD_INT 54
4322: PUSH
4323: LD_INT 58
4325: PUSH
4326: LD_INT 55
4328: PUSH
4329: LD_INT 56
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// end ; 2 , 3 :
4366: GO 4874
4368: LD_INT 2
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4382
4374: LD_INT 3
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4873
4382: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: LD_INT 44
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: LD_INT 62
4399: PUSH
4400: LD_INT 8
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: LD_INT 106
4408: PUSH
4409: LD_INT 68
4411: PUSH
4412: LD_INT 2
4414: PUSH
4415: LD_INT 143
4417: PUSH
4418: LD_INT 96
4420: PUSH
4421: LD_INT 3
4423: PUSH
4424: LD_INT 90
4426: PUSH
4427: LD_INT 115
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 56
4435: PUSH
4436: LD_INT 59
4438: PUSH
4439: LD_INT 5
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4462: LD_ADDR_VAR 0 3
4466: PUSH
4467: LD_INT 45
4469: PUSH
4470: LD_INT 46
4472: PUSH
4473: LD_INT 47
4475: PUSH
4476: LD_INT 48
4478: PUSH
4479: LD_INT 49
4481: PUSH
4482: LD_INT 50
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 45
4500: PUSH
4501: LD_INT 46
4503: PUSH
4504: LD_INT 47
4506: PUSH
4507: LD_INT 48
4509: PUSH
4510: LD_INT 49
4512: PUSH
4513: LD_INT 50
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4524: LD_ADDR_VAR 0 15
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 0
4534: PUSH
4535: LD_INT 5
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4555: LD_ADDR_VAR 0 8
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 27
4565: PUSH
4566: LD_INT 44
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 62
4574: PUSH
4575: LD_INT 8
4577: PUSH
4578: LD_INT 106
4580: PUSH
4581: LD_INT 68
4583: PUSH
4584: LD_INT 143
4586: PUSH
4587: LD_INT 96
4589: PUSH
4590: LD_INT 90
4592: PUSH
4593: LD_INT 115
4595: PUSH
4596: LD_INT 56
4598: PUSH
4599: LD_INT 59
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4618: LD_ADDR_VAR 0 6
4622: PUSH
4623: LD_INT 17
4625: PUSH
4626: LD_INT 4
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 51
4640: PUSH
4641: LD_INT 29
4643: PUSH
4644: LD_INT 5
4646: PUSH
4647: LD_INT 55
4649: PUSH
4650: LD_INT 33
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 37
4661: PUSH
4662: LD_INT 0
4664: PUSH
4665: LD_INT 112
4667: PUSH
4668: LD_INT 72
4670: PUSH
4671: LD_INT 5
4673: PUSH
4674: LD_INT 120
4676: PUSH
4677: LD_INT 93
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 45
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: LD_INT 27
4694: PUSH
4695: LD_INT 48
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: LD_INT 28
4703: PUSH
4704: LD_INT 51
4706: PUSH
4707: LD_INT 1
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4736: LD_ADDR_VAR 0 7
4740: PUSH
4741: LD_INT 31
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 33
4749: PUSH
4750: LD_INT 13
4752: PUSH
4753: LD_INT 35
4755: PUSH
4756: LD_INT 13
4758: PUSH
4759: LD_INT 98
4761: PUSH
4762: LD_INT 20
4764: PUSH
4765: LD_INT 102
4767: PUSH
4768: LD_INT 25
4770: PUSH
4771: LD_INT 97
4773: PUSH
4774: LD_INT 33
4776: PUSH
4777: LD_INT 101
4779: PUSH
4780: LD_INT 54
4782: PUSH
4783: LD_INT 98
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: LD_INT 96
4791: PUSH
4792: LD_INT 55
4794: PUSH
4795: LD_INT 94
4797: PUSH
4798: LD_INT 56
4800: PUSH
4801: LD_INT 145
4803: PUSH
4804: LD_INT 102
4806: PUSH
4807: LD_INT 146
4809: PUSH
4810: LD_INT 100
4812: PUSH
4813: LD_INT 97
4815: PUSH
4816: LD_INT 114
4818: PUSH
4819: LD_INT 99
4821: PUSH
4822: LD_INT 117
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: LD_INT 55
4833: PUSH
4834: LD_INT 56
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// end ; end ;
4871: GO 4874
4873: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4874: LD_ADDR_EXP 3
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: PUSH
4893: LD_OWVAR 67
4897: ARRAY
4898: ST_TO_ADDR
// if Difficulty > 1 then
4899: LD_OWVAR 67
4903: PUSH
4904: LD_INT 1
4906: GREATER
4907: IFFALSE 4922
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4909: LD_INT 5
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL_OW 322
// if Difficulty > 1 then
4922: LD_OWVAR 67
4926: PUSH
4927: LD_INT 1
4929: GREATER
4930: IFFALSE 4945
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4932: LD_INT 52
4934: PPUSH
4935: LD_INT 2
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 322
// miners := [ ] ;
4945: LD_ADDR_EXP 15
4949: PUSH
4950: EMPTY
4951: ST_TO_ADDR
// hovers := [ ] ;
4952: LD_ADDR_EXP 16
4956: PUSH
4957: EMPTY
4958: ST_TO_ADDR
// hovers_driver := [ ] ;
4959: LD_ADDR_EXP 17
4963: PUSH
4964: EMPTY
4965: ST_TO_ADDR
// tanks := [ ] ;
4966: LD_ADDR_EXP 18
4970: PUSH
4971: EMPTY
4972: ST_TO_ADDR
// p := 1 ;
4973: LD_ADDR_VAR 0 10
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4981: LD_ADDR_OWVAR 43
4985: PUSH
4986: LD_INT 4
4988: PUSH
4989: LD_INT 5
4991: PUSH
4992: LD_INT 6
4994: PUSH
4995: LD_INT 7
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: LD_OWVAR 67
5008: PUSH
5009: LD_INT 1
5011: PLUS
5012: ARRAY
5013: ST_TO_ADDR
// bc_type = b_breastwork ;
5014: LD_ADDR_OWVAR 42
5018: PUSH
5019: LD_INT 31
5021: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5022: LD_ADDR_VAR 0 9
5026: PUSH
5027: DOUBLE
5028: LD_INT 1
5030: DEC
5031: ST_TO_ADDR
5032: LD_VAR 0 2
5036: PUSH
5037: LD_INT 3
5039: DIVREAL
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5219
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5044: LD_ADDR_VAR 0 13
5048: PUSH
5049: LD_VAR 0 2
5053: PUSH
5054: LD_VAR 0 10
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: PLUS
5073: ARRAY
5074: PPUSH
5075: LD_VAR 0 2
5079: PUSH
5080: LD_VAR 0 10
5084: PUSH
5085: LD_INT 2
5087: PLUS
5088: ARRAY
5089: PPUSH
5090: CALL_OW 47
5094: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5095: LD_INT 0
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_EXP 3
5105: PPUSH
5106: CALL_OW 380
// un := CreateHuman ;
5110: LD_ADDR_VAR 0 12
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// dir := GetDir ( b ) ;
5120: LD_ADDR_VAR 0 16
5124: PUSH
5125: LD_VAR 0 13
5129: PPUSH
5130: CALL_OW 254
5134: ST_TO_ADDR
// if dir < 3 then
5135: LD_VAR 0 16
5139: PUSH
5140: LD_INT 3
5142: LESS
5143: IFFALSE 5161
// dir := dir + 3 else
5145: LD_ADDR_VAR 0 16
5149: PUSH
5150: LD_VAR 0 16
5154: PUSH
5155: LD_INT 3
5157: PLUS
5158: ST_TO_ADDR
5159: GO 5175
// dir := dir - 3 ;
5161: LD_ADDR_VAR 0 16
5165: PUSH
5166: LD_VAR 0 16
5170: PUSH
5171: LD_INT 3
5173: MINUS
5174: ST_TO_ADDR
// SetDir ( un , dir ) ;
5175: LD_VAR 0 12
5179: PPUSH
5180: LD_VAR 0 16
5184: PPUSH
5185: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5189: LD_VAR 0 12
5193: PPUSH
5194: LD_VAR 0 13
5198: PPUSH
5199: CALL_OW 52
// p := p + 3 ;
5203: LD_ADDR_VAR 0 10
5207: PUSH
5208: LD_VAR 0 10
5212: PUSH
5213: LD_INT 3
5215: PLUS
5216: ST_TO_ADDR
// end ;
5217: GO 5041
5219: POP
5220: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5221: LD_ADDR_VAR 0 14
5225: PUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: ST_TO_ADDR
// for i = 1 to sold_stand do
5246: LD_ADDR_VAR 0 9
5250: PUSH
5251: DOUBLE
5252: LD_INT 1
5254: DEC
5255: ST_TO_ADDR
5256: LD_VAR 0 3
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5447
// for p = 1 to x do
5264: LD_ADDR_VAR 0 10
5268: PUSH
5269: DOUBLE
5270: LD_INT 1
5272: DEC
5273: ST_TO_ADDR
5274: LD_VAR 0 14
5278: PUSH
5279: FOR_TO
5280: IFFALSE 5443
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5282: LD_VAR 0 3
5286: PUSH
5287: LD_VAR 0 9
5291: ARRAY
5292: PUSH
5293: LD_INT 10
5295: EQUAL
5296: IFTRUE 5334
5298: PUSH
5299: LD_EXP 2
5303: PUSH
5304: LD_INT 2
5306: EQUAL
5307: IFFALSE 5319
5309: PUSH
5310: LD_OWVAR 67
5314: PUSH
5315: LD_INT 1
5317: GREATER
5318: AND
5319: IFFALSE 5333
5321: PUSH
5322: LD_VAR 0 10
5326: PUSH
5327: LD_VAR 0 14
5331: EQUAL
5332: AND
5333: OR
5334: IFFALSE 5353
// PrepareHuman ( false , class_mortar , skill ) else
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 8
5341: PPUSH
5342: LD_EXP 3
5346: PPUSH
5347: CALL_OW 380
5351: GO 5368
// PrepareHuman ( false , 1 , skill ) ;
5353: LD_INT 0
5355: PPUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_EXP 3
5363: PPUSH
5364: CALL_OW 380
// un := CreateHuman ;
5368: LD_ADDR_VAR 0 12
5372: PUSH
5373: CALL_OW 44
5377: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5378: LD_VAR 0 12
5382: PPUSH
5383: CALL_OW 257
5387: PUSH
5388: LD_INT 1
5390: EQUAL
5391: IFFALSE 5409
// miners := miners ^ un ;
5393: LD_ADDR_EXP 15
5397: PUSH
5398: LD_EXP 15
5402: PUSH
5403: LD_VAR 0 12
5407: ADD
5408: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5409: LD_VAR 0 12
5413: PPUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 9
5423: ARRAY
5424: PPUSH
5425: LD_INT 0
5427: PPUSH
5428: CALL_OW 49
// ComHold ( un ) ;
5432: LD_VAR 0 12
5436: PPUSH
5437: CALL_OW 140
// end ;
5441: GO 5279
5443: POP
5444: POP
5445: GO 5261
5447: POP
5448: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5449: LD_ADDR_VAR 0 14
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: LD_INT 4
5459: PUSH
5460: LD_INT 4
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_OWVAR 67
5472: ARRAY
5473: ST_TO_ADDR
// for i = 1 to sold_crawl do
5474: LD_ADDR_VAR 0 9
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 4
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5602
// for p = 1 to x do
5492: LD_ADDR_VAR 0 10
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_VAR 0 14
5506: PUSH
5507: FOR_TO
5508: IFFALSE 5598
// begin PrepareHuman ( false , 1 , skill ) ;
5510: LD_INT 0
5512: PPUSH
5513: LD_INT 1
5515: PPUSH
5516: LD_EXP 3
5520: PPUSH
5521: CALL_OW 380
// un := CreateHuman ;
5525: LD_ADDR_VAR 0 12
5529: PUSH
5530: CALL_OW 44
5534: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5535: LD_VAR 0 12
5539: PPUSH
5540: LD_VAR 0 15
5544: PUSH
5545: LD_VAR 0 9
5549: ARRAY
5550: PPUSH
5551: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5555: LD_VAR 0 12
5559: PPUSH
5560: LD_VAR 0 4
5564: PUSH
5565: LD_VAR 0 9
5569: ARRAY
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 49
// ComCrawl ( un ) ;
5578: LD_VAR 0 12
5582: PPUSH
5583: CALL_OW 137
// AddComHold ( un ) ;
5587: LD_VAR 0 12
5591: PPUSH
5592: CALL_OW 200
// end ;
5596: GO 5507
5598: POP
5599: POP
5600: GO 5489
5602: POP
5603: POP
// p := 1 ;
5604: LD_ADDR_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5612: LD_ADDR_VAR 0 9
5616: PUSH
5617: DOUBLE
5618: LD_INT 1
5620: DEC
5621: ST_TO_ADDR
5622: LD_VAR 0 8
5626: PUSH
5627: LD_INT 2
5629: DIVREAL
5630: PUSH
5631: FOR_TO
5632: IFFALSE 5686
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5634: LD_VAR 0 8
5638: PUSH
5639: LD_VAR 0 10
5643: ARRAY
5644: PPUSH
5645: LD_VAR 0 8
5649: PUSH
5650: LD_VAR 0 10
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: ARRAY
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: LD_INT 10
5665: PPUSH
5666: CALL_OW 330
// p := p + 2 ;
5670: LD_ADDR_VAR 0 10
5674: PUSH
5675: LD_VAR 0 10
5679: PUSH
5680: LD_INT 2
5682: PLUS
5683: ST_TO_ADDR
// end ;
5684: GO 5631
5686: POP
5687: POP
// for i = 1 to hover_x [ 2 ] do
5688: LD_ADDR_VAR 0 9
5692: PUSH
5693: DOUBLE
5694: LD_INT 1
5696: DEC
5697: ST_TO_ADDR
5698: LD_VAR 0 6
5702: PUSH
5703: LD_INT 2
5705: ARRAY
5706: PUSH
5707: FOR_TO
5708: IFFALSE 5857
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5710: LD_INT 0
5712: PPUSH
5713: LD_INT 3
5715: PPUSH
5716: LD_EXP 3
5720: PUSH
5721: LD_INT 1
5723: PLUS
5724: PPUSH
5725: CALL_OW 380
// un := CreateHuman ;
5729: LD_ADDR_VAR 0 12
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5739: LD_ADDR_EXP 17
5743: PUSH
5744: LD_EXP 17
5748: PUSH
5749: LD_VAR 0 12
5753: ADD
5754: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5755: LD_ADDR_VAR 0 11
5759: PUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 2
5765: PPUSH
5766: LD_INT 11
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: LD_INT 92
5777: PUSH
5778: LD_INT 24
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_VAR 0 9
5789: PUSH
5790: LD_INT 2
5792: MOD
5793: PUSH
5794: LD_INT 1
5796: PLUS
5797: ARRAY
5798: PPUSH
5799: CALL 7141 0 6
5803: ST_TO_ADDR
// hovers := hovers ^ veh ;
5804: LD_ADDR_EXP 16
5808: PUSH
5809: LD_EXP 16
5813: PUSH
5814: LD_VAR 0 11
5818: ADD
5819: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5820: LD_VAR 0 11
5824: PPUSH
5825: LD_VAR 0 6
5829: PUSH
5830: LD_INT 1
5832: ARRAY
5833: PPUSH
5834: LD_INT 0
5836: PPUSH
5837: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5841: LD_VAR 0 12
5845: PPUSH
5846: LD_VAR 0 11
5850: PPUSH
5851: CALL_OW 52
// end ;
5855: GO 5707
5857: POP
5858: POP
// p := 1 ;
5859: LD_ADDR_VAR 0 10
5863: PUSH
5864: LD_INT 1
5866: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5867: LD_ADDR_VAR 0 9
5871: PUSH
5872: DOUBLE
5873: LD_INT 1
5875: DEC
5876: ST_TO_ADDR
5877: LD_VAR 0 5
5881: PUSH
5882: LD_INT 3
5884: DIVREAL
5885: PUSH
5886: FOR_TO
5887: IFFALSE 6061
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5889: LD_INT 0
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: LD_EXP 3
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: CALL_OW 380
// un := CreateHuman ;
5908: LD_ADDR_VAR 0 12
5912: PUSH
5913: CALL_OW 44
5917: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5918: LD_ADDR_VAR 0 11
5922: PUSH
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: LD_INT 14
5931: PPUSH
5932: LD_INT 2
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: LD_INT 27
5940: PUSH
5941: LD_INT 25
5943: PUSH
5944: LD_INT 26
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 12
5962: ARRAY
5963: PPUSH
5964: CALL 7141 0 6
5968: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5969: LD_VAR 0 11
5973: PPUSH
5974: LD_VAR 0 5
5978: PUSH
5979: LD_VAR 0 10
5983: PUSH
5984: LD_INT 2
5986: PLUS
5987: ARRAY
5988: PPUSH
5989: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5993: LD_VAR 0 11
5997: PPUSH
5998: LD_VAR 0 5
6002: PUSH
6003: LD_VAR 0 10
6007: ARRAY
6008: PPUSH
6009: LD_VAR 0 5
6013: PUSH
6014: LD_VAR 0 10
6018: PUSH
6019: LD_INT 1
6021: PLUS
6022: ARRAY
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6031: LD_VAR 0 12
6035: PPUSH
6036: LD_VAR 0 11
6040: PPUSH
6041: CALL_OW 52
// p := p + 3 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_VAR 0 10
6054: PUSH
6055: LD_INT 3
6057: PLUS
6058: ST_TO_ADDR
// end ;
6059: GO 5886
6061: POP
6062: POP
// p := 1 ;
6063: LD_ADDR_VAR 0 10
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6071: LD_ADDR_VAR 0 9
6075: PUSH
6076: DOUBLE
6077: LD_INT 1
6079: DEC
6080: ST_TO_ADDR
6081: LD_VAR 0 7
6085: PUSH
6086: LD_INT 2
6088: DIVREAL
6089: PUSH
6090: FOR_TO
6091: IFFALSE 6145
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6093: LD_VAR 0 7
6097: PUSH
6098: LD_VAR 0 10
6102: ARRAY
6103: PPUSH
6104: LD_VAR 0 7
6108: PUSH
6109: LD_VAR 0 10
6113: PUSH
6114: LD_INT 1
6116: PLUS
6117: ARRAY
6118: PPUSH
6119: LD_INT 2
6121: PPUSH
6122: LD_INT 0
6124: PPUSH
6125: CALL_OW 454
// p := p + 2 ;
6129: LD_ADDR_VAR 0 10
6133: PUSH
6134: LD_VAR 0 10
6138: PUSH
6139: LD_INT 2
6141: PLUS
6142: ST_TO_ADDR
// end ;
6143: GO 6090
6145: POP
6146: POP
// mines := mines_xy ;
6147: LD_ADDR_EXP 14
6151: PUSH
6152: LD_VAR 0 7
6156: ST_TO_ADDR
// end ;
6157: LD_VAR 0 1
6161: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6162: GO 6164
6164: DISABLE
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
// begin enable ;
6171: ENABLE
// if tanks > 0 then
6172: LD_EXP 18
6176: PUSH
6177: LD_INT 0
6179: GREATER
6180: IFFALSE 6290
// begin for i = 1 to tanks do
6182: LD_ADDR_VAR 0 3
6186: PUSH
6187: DOUBLE
6188: LD_INT 1
6190: DEC
6191: ST_TO_ADDR
6192: LD_EXP 18
6196: PUSH
6197: FOR_TO
6198: IFFALSE 6288
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6200: LD_INT 2
6202: PPUSH
6203: LD_EXP 18
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: PPUSH
6214: CALL_OW 292
6218: IFFALSE 6238
6220: PUSH
6221: LD_EXP 18
6225: PUSH
6226: LD_VAR 0 3
6230: ARRAY
6231: PPUSH
6232: CALL_OW 314
6236: NOT
6237: AND
6238: IFFALSE 6286
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6240: LD_EXP 18
6244: PUSH
6245: LD_VAR 0 3
6249: ARRAY
6250: PPUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: PPUSH
6266: LD_EXP 18
6270: PUSH
6271: LD_VAR 0 3
6275: ARRAY
6276: PPUSH
6277: CALL_OW 74
6281: PPUSH
6282: CALL_OW 115
6286: GO 6197
6288: POP
6289: POP
// end ; if hovers > 0 then
6290: LD_EXP 16
6294: PUSH
6295: LD_INT 0
6297: GREATER
6298: IFFALSE 6623
// begin for i = 1 to hovers do
6300: LD_ADDR_VAR 0 3
6304: PUSH
6305: DOUBLE
6306: LD_INT 1
6308: DEC
6309: ST_TO_ADDR
6310: LD_EXP 16
6314: PUSH
6315: FOR_TO
6316: IFFALSE 6621
// begin if GetLives ( hovers [ i ] ) < 600 then
6318: LD_EXP 16
6322: PUSH
6323: LD_VAR 0 3
6327: ARRAY
6328: PPUSH
6329: CALL_OW 256
6333: PUSH
6334: LD_INT 600
6336: LESS
6337: IFFALSE 6448
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6339: LD_EXP 16
6343: PUSH
6344: LD_VAR 0 3
6348: ARRAY
6349: PPUSH
6350: LD_INT 18
6352: PPUSH
6353: CALL_OW 308
6357: NOT
6358: IFFALSE 6380
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: LD_INT 18
6373: PPUSH
6374: CALL_OW 113
6378: GO 6448
// if IsDrivenBy ( hovers [ i ] ) then
6380: LD_EXP 16
6384: PUSH
6385: LD_VAR 0 3
6389: ARRAY
6390: PPUSH
6391: CALL_OW 311
6395: IFFALSE 6448
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6417: LD_EXP 16
6421: PUSH
6422: LD_VAR 0 3
6426: ARRAY
6427: PPUSH
6428: CALL_OW 311
6432: PPUSH
6433: LD_EXP 16
6437: PUSH
6438: LD_VAR 0 3
6442: ARRAY
6443: PPUSH
6444: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6448: LD_EXP 16
6452: PUSH
6453: LD_VAR 0 3
6457: ARRAY
6458: PPUSH
6459: CALL_OW 256
6463: PUSH
6464: LD_INT 998
6466: GREATER
6467: IFFALSE 6619
// begin if not IsDrivenBy ( hovers [ i ] ) then
6469: LD_EXP 16
6473: PUSH
6474: LD_VAR 0 3
6478: ARRAY
6479: PPUSH
6480: CALL_OW 311
6484: NOT
6485: IFFALSE 6522
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6487: LD_EXP 17
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: PPUSH
6498: LD_EXP 16
6502: PPUSH
6503: LD_INT 58
6505: PUSH
6506: EMPTY
6507: LIST
6508: PPUSH
6509: CALL_OW 72
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PPUSH
6518: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6522: LD_INT 19
6524: PPUSH
6525: LD_INT 22
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 70
6539: PUSH
6540: LD_INT 0
6542: GREATER
6543: IFFALSE 6619
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6545: LD_EXP 16
6549: PUSH
6550: LD_VAR 0 3
6554: ARRAY
6555: PPUSH
6556: CALL_OW 311
6560: PPUSH
6561: CALL_OW 314
6565: NOT
6566: IFFALSE 6619
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6568: LD_EXP 16
6572: PUSH
6573: LD_VAR 0 3
6577: ARRAY
6578: PPUSH
6579: CALL_OW 311
6583: PPUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PPUSH
6599: LD_EXP 16
6603: PUSH
6604: LD_VAR 0 3
6608: ARRAY
6609: PPUSH
6610: CALL_OW 74
6614: PPUSH
6615: CALL_OW 115
// end ; end ;
6619: GO 6315
6621: POP
6622: POP
// end ; p := 1 ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_EXP 14
6645: PUSH
6646: LD_INT 2
6648: DIVREAL
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6915
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6653: LD_ADDR_VAR 0 4
6657: PUSH
6658: LD_EXP 14
6662: PUSH
6663: LD_VAR 0 2
6667: ARRAY
6668: PPUSH
6669: LD_EXP 14
6673: PUSH
6674: LD_VAR 0 2
6678: PUSH
6679: LD_INT 1
6681: PLUS
6682: ARRAY
6683: PPUSH
6684: CALL_OW 428
6688: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6689: LD_VAR 0 4
6693: IFFALSE 6727
6695: PUSH
6696: LD_EXP 14
6700: PUSH
6701: LD_VAR 0 2
6705: ARRAY
6706: PPUSH
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: PUSH
6717: LD_INT 1
6719: PLUS
6720: ARRAY
6721: PPUSH
6722: CALL_OW 458
6726: AND
6727: IFFALSE 6899
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6729: LD_EXP 14
6733: PUSH
6734: LD_VAR 0 2
6738: ARRAY
6739: PPUSH
6740: LD_EXP 14
6744: PUSH
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 1
6752: PLUS
6753: ARRAY
6754: PPUSH
6755: CALL_OW 428
6759: PPUSH
6760: CALL_OW 255
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: IN
6775: IFFALSE 6849
6777: PUSH
6778: LD_EXP 15
6782: PPUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_VAR 0 2
6792: ARRAY
6793: PPUSH
6794: LD_EXP 14
6798: PUSH
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: PLUS
6807: ARRAY
6808: PPUSH
6809: CALL_OW 73
6813: PPUSH
6814: LD_EXP 14
6818: PUSH
6819: LD_VAR 0 2
6823: ARRAY
6824: PPUSH
6825: LD_EXP 14
6829: PUSH
6830: LD_VAR 0 2
6834: PUSH
6835: LD_INT 1
6837: PLUS
6838: ARRAY
6839: PPUSH
6840: CALL_OW 297
6844: PUSH
6845: LD_INT 30
6847: LESS
6848: AND
6849: IFFALSE 6899
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6851: LD_EXP 14
6855: PUSH
6856: LD_VAR 0 2
6860: ARRAY
6861: PPUSH
6862: LD_EXP 14
6866: PUSH
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 1
6874: PLUS
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PPUSH
6880: CALL_OW 456
// if not mines_trigger then
6884: LD_EXP 10
6888: NOT
6889: IFFALSE 6899
// mines_trigger := true ;
6891: LD_ADDR_EXP 10
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// end ; p := p + 2 ;
6899: LD_ADDR_VAR 0 2
6903: PUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 2
6911: PLUS
6912: ST_TO_ADDR
// end ;
6913: GO 6650
6915: POP
6916: POP
// end ;
6917: PPOPN 4
6919: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6920: LD_EXP 4
6924: PUSH
6925: LD_INT 1
6927: ARRAY
6928: PPUSH
6929: LD_EXP 6
6933: PPUSH
6934: CALL_OW 296
6938: PUSH
6939: LD_INT 20
6941: GREATER
6942: IFTRUE 6968
6944: PUSH
6945: LD_EXP 4
6949: PUSH
6950: LD_INT 1
6952: ARRAY
6953: PPUSH
6954: LD_EXP 6
6958: PPUSH
6959: CALL_OW 296
6963: PUSH
6964: LD_INT 20
6966: GREATER
6967: OR
6968: IFFALSE 7083
6970: GO 6972
6972: DISABLE
6973: LD_INT 0
6975: PPUSH
6976: PPUSH
// begin for i = 1 to Difficulty + 1 do
6977: LD_ADDR_VAR 0 1
6981: PUSH
6982: DOUBLE
6983: LD_INT 1
6985: DEC
6986: ST_TO_ADDR
6987: LD_OWVAR 67
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7081
// begin uc_side := 2 ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_INT 2
7006: ST_TO_ADDR
// uc_nation := 2 ;
7007: LD_ADDR_OWVAR 21
7011: PUSH
7012: LD_INT 2
7014: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_EXP 3
7025: PPUSH
7026: CALL_OW 380
// un := CreateHuman ;
7030: LD_ADDR_VAR 0 2
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_INT 44
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7055: LD_VAR 0 2
7059: PPUSH
7060: LD_EXP 4
7064: PPUSH
7065: LD_VAR 0 2
7069: PPUSH
7070: CALL_OW 74
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 6996
7081: POP
7082: POP
// end ;
7083: PPOPN 2
7085: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7086: LD_VAR 0 2
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 31
7106: PUSH
7107: LD_INT 11
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: IN
7127: IFFALSE 7138
// ComRetreat ( driver ) ;
7129: LD_VAR 0 1
7133: PPUSH
7134: CALL 7270 0 1
// end ; end_of_file
7138: PPOPN 4
7140: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7141: LD_INT 0
7143: PPUSH
// uc_side := side ;
7144: LD_ADDR_OWVAR 20
7148: PUSH
7149: LD_VAR 0 1
7153: ST_TO_ADDR
// uc_nation := nation ;
7154: LD_ADDR_OWVAR 21
7158: PUSH
7159: LD_VAR 0 2
7163: ST_TO_ADDR
// vc_chassis := chassis ;
7164: LD_ADDR_OWVAR 37
7168: PUSH
7169: LD_VAR 0 3
7173: ST_TO_ADDR
// vc_engine := engine ;
7174: LD_ADDR_OWVAR 39
7178: PUSH
7179: LD_VAR 0 4
7183: ST_TO_ADDR
// vc_control := control ;
7184: LD_ADDR_OWVAR 38
7188: PUSH
7189: LD_VAR 0 5
7193: ST_TO_ADDR
// vc_weapon := weapon ;
7194: LD_ADDR_OWVAR 40
7198: PUSH
7199: LD_VAR 0 6
7203: ST_TO_ADDR
// result := CreateVehicle ;
7204: LD_ADDR_VAR 0 7
7208: PUSH
7209: CALL_OW 45
7213: ST_TO_ADDR
// end ;
7214: LD_VAR 0 7
7218: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7219: LD_INT 0
7221: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7222: LD_VAR 0 1
7226: PPUSH
7227: LD_VAR 0 2
7231: PPUSH
7232: LD_VAR 0 3
7236: PPUSH
7237: CALL_OW 297
7241: PUSH
7242: LD_INT 6
7244: LESS
7245: IFFALSE 7257
// result := true else
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_INT 1
7254: ST_TO_ADDR
7255: GO 7265
// result := false ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// end ;
7265: LD_VAR 0 4
7269: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7270: LD_INT 0
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
7276: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 81
7284: PUSH
7285: LD_VAR 0 1
7289: PPUSH
7290: CALL_OW 255
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: PPUSH
7304: LD_VAR 0 1
7308: PPUSH
7309: CALL_OW 74
7313: PPUSH
7314: CALL_OW 119
// dir := GetDir ( un ) ;
7318: LD_ADDR_VAR 0 4
7322: PUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 254
7332: ST_TO_ADDR
// dir := dir - 3 ;
7333: LD_ADDR_VAR 0 4
7337: PUSH
7338: LD_VAR 0 4
7342: PUSH
7343: LD_INT 3
7345: MINUS
7346: ST_TO_ADDR
// if dir < 0 then
7347: LD_VAR 0 4
7351: PUSH
7352: LD_INT 0
7354: LESS
7355: IFFALSE 7371
// dir := dir + 6 ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_VAR 0 4
7366: PUSH
7367: LD_INT 6
7369: PLUS
7370: ST_TO_ADDR
// while true do
7371: LD_INT 1
7373: IFFALSE 7752
// begin coord_dist := 3 ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 3
7382: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7383: LD_ADDR_VAR 0 5
7387: PUSH
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 250
7397: PPUSH
7398: LD_VAR 0 4
7402: PPUSH
7403: LD_VAR 0 3
7407: PPUSH
7408: CALL_OW 272
7412: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7413: LD_ADDR_VAR 0 6
7417: PUSH
7418: LD_VAR 0 1
7422: PPUSH
7423: CALL_OW 251
7427: PPUSH
7428: LD_VAR 0 4
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL_OW 273
7442: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 351
7457: IFTRUE 7479
7459: PUSH
7460: LD_VAR 0 5
7464: PPUSH
7465: LD_VAR 0 6
7469: PPUSH
7470: CALL_OW 488
7474: PUSH
7475: LD_INT 0
7477: EQUAL
7478: OR
7479: IFTRUE 7501
7481: PUSH
7482: LD_VAR 0 5
7486: PPUSH
7487: LD_VAR 0 6
7491: PPUSH
7492: CALL_OW 428
7496: PUSH
7497: LD_INT 0
7499: NONEQUAL
7500: OR
7501: IFFALSE 7666
// begin repeat begin coord_dist := coord_dist + 1 ;
7503: LD_ADDR_VAR 0 3
7507: PUSH
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ST_TO_ADDR
// dir := dir + 1 ;
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 4
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: ST_TO_ADDR
// if dir > 5 then
7531: LD_VAR 0 4
7535: PUSH
7536: LD_INT 5
7538: GREATER
7539: IFFALSE 7549
// dir = 0 ;
7541: LD_ADDR_VAR 0 4
7545: PUSH
7546: LD_INT 0
7548: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 5
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 250
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 272
7578: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7579: LD_ADDR_VAR 0 6
7583: PUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: CALL_OW 251
7593: PPUSH
7594: LD_VAR 0 4
7598: PPUSH
7599: LD_VAR 0 3
7603: PPUSH
7604: CALL_OW 273
7608: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7609: LD_VAR 0 5
7613: PPUSH
7614: LD_VAR 0 6
7618: PPUSH
7619: CALL_OW 351
7623: NOT
7624: IFFALSE 7642
7626: PUSH
7627: LD_VAR 0 5
7631: PPUSH
7632: LD_VAR 0 6
7636: PPUSH
7637: CALL_OW 488
7641: AND
7642: IFFALSE 7664
7644: PUSH
7645: LD_VAR 0 5
7649: PPUSH
7650: LD_VAR 0 6
7654: PPUSH
7655: CALL_OW 428
7659: PUSH
7660: LD_INT 0
7662: EQUAL
7663: AND
7664: IFFALSE 7503
// end ; ComMoveXY ( un , x , y ) ;
7666: LD_VAR 0 1
7670: PPUSH
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 111
// Wait ( 0 0$1 ) ;
7685: LD_INT 35
7687: PPUSH
7688: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 81
7699: PUSH
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 255
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: PPUSH
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 74
7728: PPUSH
7729: CALL_OW 296
7733: PUSH
7734: LD_INT 10
7736: GREATEREQUAL
7737: IFFALSE 7750
// begin ComStop ( un ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 141
// break ;
7748: GO 7752
// end ; end ;
7750: GO 7371
// end ; end_of_file end_of_file
7752: LD_VAR 0 2
7756: RET
// export globalGameSaveCounter ; every 0 0$1 do
7757: GO 7759
7759: DISABLE
// begin enable ;
7760: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7761: LD_STRING updateTimer(
7763: PUSH
7764: LD_OWVAR 1
7768: STR
7769: PUSH
7770: LD_STRING );
7772: STR
7773: PPUSH
7774: CALL_OW 559
// end ;
7778: END
// every 0 0$1 do
7779: GO 7781
7781: DISABLE
// begin globalGameSaveCounter := 0 ;
7782: LD_ADDR_EXP 19
7786: PUSH
7787: LD_INT 0
7789: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7790: LD_STRING setGameSaveCounter(0)
7792: PPUSH
7793: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7797: LD_STRING initStreamRollete();
7799: PPUSH
7800: CALL_OW 559
// InitStreamMode ;
7804: CALL 9149 0 0
// DefineStreamItems ( false ) ;
7808: LD_INT 0
7810: PPUSH
7811: CALL 9613 0 1
// end ;
7815: END
// export function SOS_MapStart ( ) ; begin
7816: LD_INT 0
7818: PPUSH
// if streamModeActive then
7819: LD_EXP 20
7823: IFFALSE 7832
// DefineStreamItems ( true ) ;
7825: LD_INT 1
7827: PPUSH
7828: CALL 9613 0 1
// UpdateLuaVariables ( ) ;
7832: CALL 7849 0 0
// UpdateFactoryWaypoints ( ) ;
7836: CALL 22735 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7840: CALL 22987 0 0
// end ;
7844: LD_VAR 0 1
7848: RET
// function UpdateLuaVariables ( ) ; begin
7849: LD_INT 0
7851: PPUSH
// if globalGameSaveCounter then
7852: LD_EXP 19
7856: IFFALSE 7890
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7858: LD_ADDR_EXP 19
7862: PUSH
7863: LD_EXP 19
7867: PPUSH
7868: CALL 63365 0 1
7872: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7873: LD_STRING setGameSaveCounter(
7875: PUSH
7876: LD_EXP 19
7880: STR
7881: PUSH
7882: LD_STRING )
7884: STR
7885: PPUSH
7886: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7890: LD_STRING setGameDifficulty(
7892: PUSH
7893: LD_OWVAR 67
7897: STR
7898: PUSH
7899: LD_STRING )
7901: STR
7902: PPUSH
7903: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7907: LD_STRING displayDifficulty(
7909: PUSH
7910: LD_OWVAR 67
7914: STR
7915: PUSH
7916: LD_STRING )
7918: STR
7919: PPUSH
7920: CALL_OW 559
// end ;
7924: LD_VAR 0 1
7928: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7929: LD_INT 0
7931: PPUSH
// if p2 = stream_mode then
7932: LD_VAR 0 2
7936: PUSH
7937: LD_INT 100
7939: EQUAL
7940: IFFALSE 8943
// begin if not StreamModeActive then
7942: LD_EXP 20
7946: NOT
7947: IFFALSE 7957
// StreamModeActive := true ;
7949: LD_ADDR_EXP 20
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// if p3 = 0 then
7957: LD_VAR 0 3
7961: PUSH
7962: LD_INT 0
7964: EQUAL
7965: IFFALSE 7971
// InitStreamMode ;
7967: CALL 9149 0 0
// if p3 = 1 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 1
7978: EQUAL
7979: IFFALSE 7989
// sRocket := true ;
7981: LD_ADDR_EXP 25
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 2 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 2
7996: EQUAL
7997: IFFALSE 8007
// sSpeed := true ;
7999: LD_ADDR_EXP 24
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 3 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 3
8014: EQUAL
8015: IFFALSE 8025
// sEngine := true ;
8017: LD_ADDR_EXP 26
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 4 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 4
8032: EQUAL
8033: IFFALSE 8043
// sSpec := true ;
8035: LD_ADDR_EXP 23
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 5 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 5
8050: EQUAL
8051: IFFALSE 8061
// sLevel := true ;
8053: LD_ADDR_EXP 27
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 6 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 6
8068: EQUAL
8069: IFFALSE 8079
// sArmoury := true ;
8071: LD_ADDR_EXP 28
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 7 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 7
8086: EQUAL
8087: IFFALSE 8097
// sRadar := true ;
8089: LD_ADDR_EXP 29
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 8 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 8
8104: EQUAL
8105: IFFALSE 8115
// sBunker := true ;
8107: LD_ADDR_EXP 30
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 9 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 9
8122: EQUAL
8123: IFFALSE 8133
// sHack := true ;
8125: LD_ADDR_EXP 31
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 10 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 10
8140: EQUAL
8141: IFFALSE 8151
// sFire := true ;
8143: LD_ADDR_EXP 32
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 11 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 11
8158: EQUAL
8159: IFFALSE 8169
// sRefresh := true ;
8161: LD_ADDR_EXP 33
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 12 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 12
8176: EQUAL
8177: IFFALSE 8187
// sExp := true ;
8179: LD_ADDR_EXP 34
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 13 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 13
8194: EQUAL
8195: IFFALSE 8205
// sDepot := true ;
8197: LD_ADDR_EXP 35
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 14 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 14
8212: EQUAL
8213: IFFALSE 8223
// sFlag := true ;
8215: LD_ADDR_EXP 36
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 15 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 15
8230: EQUAL
8231: IFFALSE 8241
// sKamikadze := true ;
8233: LD_ADDR_EXP 44
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 16 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 16
8248: EQUAL
8249: IFFALSE 8259
// sTroll := true ;
8251: LD_ADDR_EXP 45
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 17 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 17
8266: EQUAL
8267: IFFALSE 8277
// sSlow := true ;
8269: LD_ADDR_EXP 46
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 18 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 18
8284: EQUAL
8285: IFFALSE 8295
// sLack := true ;
8287: LD_ADDR_EXP 47
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 19 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 19
8302: EQUAL
8303: IFFALSE 8313
// sTank := true ;
8305: LD_ADDR_EXP 49
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 20 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 20
8320: EQUAL
8321: IFFALSE 8331
// sRemote := true ;
8323: LD_ADDR_EXP 50
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 21 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 21
8338: EQUAL
8339: IFFALSE 8349
// sPowell := true ;
8341: LD_ADDR_EXP 51
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// if p3 = 22 then
8349: LD_VAR 0 3
8353: PUSH
8354: LD_INT 22
8356: EQUAL
8357: IFFALSE 8367
// sTeleport := true ;
8359: LD_ADDR_EXP 54
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if p3 = 23 then
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 23
8374: EQUAL
8375: IFFALSE 8385
// sOilTower := true ;
8377: LD_ADDR_EXP 56
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// if p3 = 24 then
8385: LD_VAR 0 3
8389: PUSH
8390: LD_INT 24
8392: EQUAL
8393: IFFALSE 8403
// sShovel := true ;
8395: LD_ADDR_EXP 57
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// if p3 = 25 then
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 25
8410: EQUAL
8411: IFFALSE 8421
// sSheik := true ;
8413: LD_ADDR_EXP 58
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// if p3 = 26 then
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 26
8428: EQUAL
8429: IFFALSE 8439
// sEarthquake := true ;
8431: LD_ADDR_EXP 60
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// if p3 = 27 then
8439: LD_VAR 0 3
8443: PUSH
8444: LD_INT 27
8446: EQUAL
8447: IFFALSE 8457
// sAI := true ;
8449: LD_ADDR_EXP 61
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// if p3 = 28 then
8457: LD_VAR 0 3
8461: PUSH
8462: LD_INT 28
8464: EQUAL
8465: IFFALSE 8475
// sCargo := true ;
8467: LD_ADDR_EXP 64
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// if p3 = 29 then
8475: LD_VAR 0 3
8479: PUSH
8480: LD_INT 29
8482: EQUAL
8483: IFFALSE 8493
// sDLaser := true ;
8485: LD_ADDR_EXP 65
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// if p3 = 30 then
8493: LD_VAR 0 3
8497: PUSH
8498: LD_INT 30
8500: EQUAL
8501: IFFALSE 8511
// sExchange := true ;
8503: LD_ADDR_EXP 66
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// if p3 = 31 then
8511: LD_VAR 0 3
8515: PUSH
8516: LD_INT 31
8518: EQUAL
8519: IFFALSE 8529
// sFac := true ;
8521: LD_ADDR_EXP 67
8525: PUSH
8526: LD_INT 1
8528: ST_TO_ADDR
// if p3 = 32 then
8529: LD_VAR 0 3
8533: PUSH
8534: LD_INT 32
8536: EQUAL
8537: IFFALSE 8547
// sPower := true ;
8539: LD_ADDR_EXP 68
8543: PUSH
8544: LD_INT 1
8546: ST_TO_ADDR
// if p3 = 33 then
8547: LD_VAR 0 3
8551: PUSH
8552: LD_INT 33
8554: EQUAL
8555: IFFALSE 8565
// sRandom := true ;
8557: LD_ADDR_EXP 69
8561: PUSH
8562: LD_INT 1
8564: ST_TO_ADDR
// if p3 = 34 then
8565: LD_VAR 0 3
8569: PUSH
8570: LD_INT 34
8572: EQUAL
8573: IFFALSE 8583
// sShield := true ;
8575: LD_ADDR_EXP 70
8579: PUSH
8580: LD_INT 1
8582: ST_TO_ADDR
// if p3 = 35 then
8583: LD_VAR 0 3
8587: PUSH
8588: LD_INT 35
8590: EQUAL
8591: IFFALSE 8601
// sTime := true ;
8593: LD_ADDR_EXP 71
8597: PUSH
8598: LD_INT 1
8600: ST_TO_ADDR
// if p3 = 36 then
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 36
8608: EQUAL
8609: IFFALSE 8619
// sTools := true ;
8611: LD_ADDR_EXP 72
8615: PUSH
8616: LD_INT 1
8618: ST_TO_ADDR
// if p3 = 101 then
8619: LD_VAR 0 3
8623: PUSH
8624: LD_INT 101
8626: EQUAL
8627: IFFALSE 8637
// sSold := true ;
8629: LD_ADDR_EXP 37
8633: PUSH
8634: LD_INT 1
8636: ST_TO_ADDR
// if p3 = 102 then
8637: LD_VAR 0 3
8641: PUSH
8642: LD_INT 102
8644: EQUAL
8645: IFFALSE 8655
// sDiff := true ;
8647: LD_ADDR_EXP 38
8651: PUSH
8652: LD_INT 1
8654: ST_TO_ADDR
// if p3 = 103 then
8655: LD_VAR 0 3
8659: PUSH
8660: LD_INT 103
8662: EQUAL
8663: IFFALSE 8673
// sFog := true ;
8665: LD_ADDR_EXP 41
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// if p3 = 104 then
8673: LD_VAR 0 3
8677: PUSH
8678: LD_INT 104
8680: EQUAL
8681: IFFALSE 8691
// sReset := true ;
8683: LD_ADDR_EXP 42
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// if p3 = 105 then
8691: LD_VAR 0 3
8695: PUSH
8696: LD_INT 105
8698: EQUAL
8699: IFFALSE 8709
// sSun := true ;
8701: LD_ADDR_EXP 43
8705: PUSH
8706: LD_INT 1
8708: ST_TO_ADDR
// if p3 = 106 then
8709: LD_VAR 0 3
8713: PUSH
8714: LD_INT 106
8716: EQUAL
8717: IFFALSE 8727
// sTiger := true ;
8719: LD_ADDR_EXP 39
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// if p3 = 107 then
8727: LD_VAR 0 3
8731: PUSH
8732: LD_INT 107
8734: EQUAL
8735: IFFALSE 8745
// sBomb := true ;
8737: LD_ADDR_EXP 40
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// if p3 = 108 then
8745: LD_VAR 0 3
8749: PUSH
8750: LD_INT 108
8752: EQUAL
8753: IFFALSE 8763
// sWound := true ;
8755: LD_ADDR_EXP 48
8759: PUSH
8760: LD_INT 1
8762: ST_TO_ADDR
// if p3 = 109 then
8763: LD_VAR 0 3
8767: PUSH
8768: LD_INT 109
8770: EQUAL
8771: IFFALSE 8781
// sBetray := true ;
8773: LD_ADDR_EXP 52
8777: PUSH
8778: LD_INT 1
8780: ST_TO_ADDR
// if p3 = 110 then
8781: LD_VAR 0 3
8785: PUSH
8786: LD_INT 110
8788: EQUAL
8789: IFFALSE 8799
// sContamin := true ;
8791: LD_ADDR_EXP 53
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// if p3 = 111 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 111
8806: EQUAL
8807: IFFALSE 8817
// sOil := true ;
8809: LD_ADDR_EXP 55
8813: PUSH
8814: LD_INT 1
8816: ST_TO_ADDR
// if p3 = 112 then
8817: LD_VAR 0 3
8821: PUSH
8822: LD_INT 112
8824: EQUAL
8825: IFFALSE 8835
// sStu := true ;
8827: LD_ADDR_EXP 59
8831: PUSH
8832: LD_INT 1
8834: ST_TO_ADDR
// if p3 = 113 then
8835: LD_VAR 0 3
8839: PUSH
8840: LD_INT 113
8842: EQUAL
8843: IFFALSE 8853
// sBazooka := true ;
8845: LD_ADDR_EXP 62
8849: PUSH
8850: LD_INT 1
8852: ST_TO_ADDR
// if p3 = 114 then
8853: LD_VAR 0 3
8857: PUSH
8858: LD_INT 114
8860: EQUAL
8861: IFFALSE 8871
// sMortar := true ;
8863: LD_ADDR_EXP 63
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// if p3 = 115 then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 115
8878: EQUAL
8879: IFFALSE 8889
// sRanger := true ;
8881: LD_ADDR_EXP 73
8885: PUSH
8886: LD_INT 1
8888: ST_TO_ADDR
// if p3 = 116 then
8889: LD_VAR 0 3
8893: PUSH
8894: LD_INT 116
8896: EQUAL
8897: IFFALSE 8907
// sComputer := true ;
8899: LD_ADDR_EXP 74
8903: PUSH
8904: LD_INT 1
8906: ST_TO_ADDR
// if p3 = 117 then
8907: LD_VAR 0 3
8911: PUSH
8912: LD_INT 117
8914: EQUAL
8915: IFFALSE 8925
// s30 := true ;
8917: LD_ADDR_EXP 75
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// if p3 = 118 then
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 118
8932: EQUAL
8933: IFFALSE 8943
// s60 := true ;
8935: LD_ADDR_EXP 76
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// end ; if p2 = hack_mode then
8943: LD_VAR 0 2
8947: PUSH
8948: LD_INT 101
8950: EQUAL
8951: IFFALSE 9079
// begin case p3 of 1 :
8953: LD_VAR 0 3
8957: PUSH
8958: LD_INT 1
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 8973
8966: POP
// hHackUnlimitedResources ; 2 :
8967: CALL 21342 0 0
8971: GO 9079
8973: LD_INT 2
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 8988
8981: POP
// hHackSetLevel10 ; 3 :
8982: CALL 21475 0 0
8986: GO 9079
8988: LD_INT 3
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9003
8996: POP
// hHackSetLevel10YourUnits ; 4 :
8997: CALL 21560 0 0
9001: GO 9079
9003: LD_INT 4
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9018
9011: POP
// hHackInvincible ; 5 :
9012: CALL 22008 0 0
9016: GO 9079
9018: LD_INT 5
9020: DOUBLE
9021: EQUAL
9022: IFTRUE 9026
9024: GO 9033
9026: POP
// hHackInvisible ; 6 :
9027: CALL 22119 0 0
9031: GO 9079
9033: LD_INT 6
9035: DOUBLE
9036: EQUAL
9037: IFTRUE 9041
9039: GO 9048
9041: POP
// hHackChangeYourSide ; 7 :
9042: CALL 22176 0 0
9046: GO 9079
9048: LD_INT 7
9050: DOUBLE
9051: EQUAL
9052: IFTRUE 9056
9054: GO 9063
9056: POP
// hHackChangeUnitSide ; 8 :
9057: CALL 22218 0 0
9061: GO 9079
9063: LD_INT 8
9065: DOUBLE
9066: EQUAL
9067: IFTRUE 9071
9069: GO 9078
9071: POP
// hHackFog ; end ;
9072: CALL 22319 0 0
9076: GO 9079
9078: POP
// end ; if p2 = game_save_mode then
9079: LD_VAR 0 2
9083: PUSH
9084: LD_INT 102
9086: EQUAL
9087: IFFALSE 9144
// begin if p3 = 1 then
9089: LD_VAR 0 3
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9109
// globalGameSaveCounter := p4 ;
9099: LD_ADDR_EXP 19
9103: PUSH
9104: LD_VAR 0 4
9108: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 2
9116: EQUAL
9117: IFFALSE 9125
9119: PUSH
9120: LD_EXP 19
9124: AND
9125: IFFALSE 9144
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9127: LD_STRING setGameSaveCounter(
9129: PUSH
9130: LD_EXP 19
9134: STR
9135: PUSH
9136: LD_STRING )
9138: STR
9139: PPUSH
9140: CALL_OW 559
// end ; end ;
9144: LD_VAR 0 7
9148: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9149: LD_INT 0
9151: PPUSH
// streamModeActive := false ;
9152: LD_ADDR_EXP 20
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// normalCounter := 36 ;
9160: LD_ADDR_EXP 21
9164: PUSH
9165: LD_INT 36
9167: ST_TO_ADDR
// hardcoreCounter := 18 ;
9168: LD_ADDR_EXP 22
9172: PUSH
9173: LD_INT 18
9175: ST_TO_ADDR
// sRocket := false ;
9176: LD_ADDR_EXP 25
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sSpeed := false ;
9184: LD_ADDR_EXP 24
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sEngine := false ;
9192: LD_ADDR_EXP 26
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sSpec := false ;
9200: LD_ADDR_EXP 23
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sLevel := false ;
9208: LD_ADDR_EXP 27
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sArmoury := false ;
9216: LD_ADDR_EXP 28
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sRadar := false ;
9224: LD_ADDR_EXP 29
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sBunker := false ;
9232: LD_ADDR_EXP 30
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sHack := false ;
9240: LD_ADDR_EXP 31
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sFire := false ;
9248: LD_ADDR_EXP 32
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sRefresh := false ;
9256: LD_ADDR_EXP 33
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sExp := false ;
9264: LD_ADDR_EXP 34
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sDepot := false ;
9272: LD_ADDR_EXP 35
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sFlag := false ;
9280: LD_ADDR_EXP 36
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sKamikadze := false ;
9288: LD_ADDR_EXP 44
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sTroll := false ;
9296: LD_ADDR_EXP 45
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sSlow := false ;
9304: LD_ADDR_EXP 46
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sLack := false ;
9312: LD_ADDR_EXP 47
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sTank := false ;
9320: LD_ADDR_EXP 49
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sRemote := false ;
9328: LD_ADDR_EXP 50
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sPowell := false ;
9336: LD_ADDR_EXP 51
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sTeleport := false ;
9344: LD_ADDR_EXP 54
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sOilTower := false ;
9352: LD_ADDR_EXP 56
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sShovel := false ;
9360: LD_ADDR_EXP 57
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sSheik := false ;
9368: LD_ADDR_EXP 58
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sEarthquake := false ;
9376: LD_ADDR_EXP 60
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sAI := false ;
9384: LD_ADDR_EXP 61
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sCargo := false ;
9392: LD_ADDR_EXP 64
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sDLaser := false ;
9400: LD_ADDR_EXP 65
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sExchange := false ;
9408: LD_ADDR_EXP 66
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sFac := false ;
9416: LD_ADDR_EXP 67
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sPower := false ;
9424: LD_ADDR_EXP 68
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sRandom := false ;
9432: LD_ADDR_EXP 69
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sShield := false ;
9440: LD_ADDR_EXP 70
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sTime := false ;
9448: LD_ADDR_EXP 71
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sTools := false ;
9456: LD_ADDR_EXP 72
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sSold := false ;
9464: LD_ADDR_EXP 37
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sDiff := false ;
9472: LD_ADDR_EXP 38
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sFog := false ;
9480: LD_ADDR_EXP 41
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sReset := false ;
9488: LD_ADDR_EXP 42
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sSun := false ;
9496: LD_ADDR_EXP 43
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sTiger := false ;
9504: LD_ADDR_EXP 39
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sBomb := false ;
9512: LD_ADDR_EXP 40
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sWound := false ;
9520: LD_ADDR_EXP 48
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sBetray := false ;
9528: LD_ADDR_EXP 52
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sContamin := false ;
9536: LD_ADDR_EXP 53
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sOil := false ;
9544: LD_ADDR_EXP 55
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sStu := false ;
9552: LD_ADDR_EXP 59
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sBazooka := false ;
9560: LD_ADDR_EXP 62
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sMortar := false ;
9568: LD_ADDR_EXP 63
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sRanger := false ;
9576: LD_ADDR_EXP 73
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sComputer := false ;
9584: LD_ADDR_EXP 74
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// s30 := false ;
9592: LD_ADDR_EXP 75
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// s60 := false ;
9600: LD_ADDR_EXP 76
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// end ;
9608: LD_VAR 0 1
9612: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
9619: PPUSH
9620: PPUSH
9621: PPUSH
// result := [ ] ;
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: EMPTY
9628: ST_TO_ADDR
// if campaign_id = 1 then
9629: LD_OWVAR 69
9633: PUSH
9634: LD_INT 1
9636: EQUAL
9637: IFFALSE 12803
// begin case mission_number of 1 :
9639: LD_OWVAR 70
9643: PUSH
9644: LD_INT 1
9646: DOUBLE
9647: EQUAL
9648: IFTRUE 9652
9650: GO 9728
9652: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9653: LD_ADDR_VAR 0 2
9657: PUSH
9658: LD_INT 2
9660: PUSH
9661: LD_INT 4
9663: PUSH
9664: LD_INT 11
9666: PUSH
9667: LD_INT 12
9669: PUSH
9670: LD_INT 15
9672: PUSH
9673: LD_INT 16
9675: PUSH
9676: LD_INT 22
9678: PUSH
9679: LD_INT 23
9681: PUSH
9682: LD_INT 26
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 101
9698: PUSH
9699: LD_INT 102
9701: PUSH
9702: LD_INT 106
9704: PUSH
9705: LD_INT 116
9707: PUSH
9708: LD_INT 117
9710: PUSH
9711: LD_INT 118
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: ST_TO_ADDR
9726: GO 12801
9728: LD_INT 2
9730: DOUBLE
9731: EQUAL
9732: IFTRUE 9736
9734: GO 9820
9736: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9737: LD_ADDR_VAR 0 2
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: LD_INT 4
9747: PUSH
9748: LD_INT 11
9750: PUSH
9751: LD_INT 12
9753: PUSH
9754: LD_INT 15
9756: PUSH
9757: LD_INT 16
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 23
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 101
9782: PUSH
9783: LD_INT 102
9785: PUSH
9786: LD_INT 105
9788: PUSH
9789: LD_INT 106
9791: PUSH
9792: LD_INT 108
9794: PUSH
9795: LD_INT 116
9797: PUSH
9798: LD_INT 117
9800: PUSH
9801: LD_INT 118
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: ST_TO_ADDR
9818: GO 12801
9820: LD_INT 3
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 9916
9828: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 4
9839: PUSH
9840: LD_INT 5
9842: PUSH
9843: LD_INT 11
9845: PUSH
9846: LD_INT 12
9848: PUSH
9849: LD_INT 15
9851: PUSH
9852: LD_INT 16
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 26
9860: PUSH
9861: LD_INT 36
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 101
9878: PUSH
9879: LD_INT 102
9881: PUSH
9882: LD_INT 105
9884: PUSH
9885: LD_INT 106
9887: PUSH
9888: LD_INT 108
9890: PUSH
9891: LD_INT 116
9893: PUSH
9894: LD_INT 117
9896: PUSH
9897: LD_INT 118
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: ST_TO_ADDR
9914: GO 12801
9916: LD_INT 4
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 10020
9924: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 4
9935: PUSH
9936: LD_INT 5
9938: PUSH
9939: LD_INT 8
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 15
9950: PUSH
9951: LD_INT 16
9953: PUSH
9954: LD_INT 22
9956: PUSH
9957: LD_INT 23
9959: PUSH
9960: LD_INT 26
9962: PUSH
9963: LD_INT 36
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 101
9982: PUSH
9983: LD_INT 102
9985: PUSH
9986: LD_INT 105
9988: PUSH
9989: LD_INT 106
9991: PUSH
9992: LD_INT 108
9994: PUSH
9995: LD_INT 116
9997: PUSH
9998: LD_INT 117
10000: PUSH
10001: LD_INT 118
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: ST_TO_ADDR
10018: GO 12801
10020: LD_INT 5
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10140
10028: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: LD_INT 4
10039: PUSH
10040: LD_INT 5
10042: PUSH
10043: LD_INT 6
10045: PUSH
10046: LD_INT 8
10048: PUSH
10049: LD_INT 11
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 15
10057: PUSH
10058: LD_INT 16
10060: PUSH
10061: LD_INT 22
10063: PUSH
10064: LD_INT 23
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 26
10072: PUSH
10073: LD_INT 36
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 101
10094: PUSH
10095: LD_INT 102
10097: PUSH
10098: LD_INT 105
10100: PUSH
10101: LD_INT 106
10103: PUSH
10104: LD_INT 108
10106: PUSH
10107: LD_INT 109
10109: PUSH
10110: LD_INT 112
10112: PUSH
10113: LD_INT 116
10115: PUSH
10116: LD_INT 117
10118: PUSH
10119: LD_INT 118
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: ST_TO_ADDR
10138: GO 12801
10140: LD_INT 6
10142: DOUBLE
10143: EQUAL
10144: IFTRUE 10148
10146: GO 10280
10148: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10149: LD_ADDR_VAR 0 2
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: LD_INT 4
10159: PUSH
10160: LD_INT 5
10162: PUSH
10163: LD_INT 6
10165: PUSH
10166: LD_INT 8
10168: PUSH
10169: LD_INT 11
10171: PUSH
10172: LD_INT 12
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 20
10183: PUSH
10184: LD_INT 21
10186: PUSH
10187: LD_INT 22
10189: PUSH
10190: LD_INT 23
10192: PUSH
10193: LD_INT 25
10195: PUSH
10196: LD_INT 26
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 31
10204: PUSH
10205: LD_INT 32
10207: PUSH
10208: LD_INT 36
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 101
10234: PUSH
10235: LD_INT 102
10237: PUSH
10238: LD_INT 105
10240: PUSH
10241: LD_INT 106
10243: PUSH
10244: LD_INT 108
10246: PUSH
10247: LD_INT 109
10249: PUSH
10250: LD_INT 112
10252: PUSH
10253: LD_INT 116
10255: PUSH
10256: LD_INT 117
10258: PUSH
10259: LD_INT 118
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: ST_TO_ADDR
10278: GO 12801
10280: LD_INT 7
10282: DOUBLE
10283: EQUAL
10284: IFTRUE 10288
10286: GO 10400
10288: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_INT 2
10296: PUSH
10297: LD_INT 4
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: LD_INT 7
10305: PUSH
10306: LD_INT 11
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 15
10314: PUSH
10315: LD_INT 16
10317: PUSH
10318: LD_INT 20
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 22
10326: PUSH
10327: LD_INT 23
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 101
10354: PUSH
10355: LD_INT 102
10357: PUSH
10358: LD_INT 103
10360: PUSH
10361: LD_INT 105
10363: PUSH
10364: LD_INT 106
10366: PUSH
10367: LD_INT 108
10369: PUSH
10370: LD_INT 112
10372: PUSH
10373: LD_INT 116
10375: PUSH
10376: LD_INT 117
10378: PUSH
10379: LD_INT 118
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: ST_TO_ADDR
10398: GO 12801
10400: LD_INT 8
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10548
10408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: LD_INT 4
10419: PUSH
10420: LD_INT 5
10422: PUSH
10423: LD_INT 6
10425: PUSH
10426: LD_INT 7
10428: PUSH
10429: LD_INT 8
10431: PUSH
10432: LD_INT 11
10434: PUSH
10435: LD_INT 12
10437: PUSH
10438: LD_INT 15
10440: PUSH
10441: LD_INT 16
10443: PUSH
10444: LD_INT 20
10446: PUSH
10447: LD_INT 21
10449: PUSH
10450: LD_INT 22
10452: PUSH
10453: LD_INT 23
10455: PUSH
10456: LD_INT 25
10458: PUSH
10459: LD_INT 26
10461: PUSH
10462: LD_INT 30
10464: PUSH
10465: LD_INT 31
10467: PUSH
10468: LD_INT 32
10470: PUSH
10471: LD_INT 36
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 101
10498: PUSH
10499: LD_INT 102
10501: PUSH
10502: LD_INT 103
10504: PUSH
10505: LD_INT 105
10507: PUSH
10508: LD_INT 106
10510: PUSH
10511: LD_INT 108
10513: PUSH
10514: LD_INT 109
10516: PUSH
10517: LD_INT 112
10519: PUSH
10520: LD_INT 116
10522: PUSH
10523: LD_INT 117
10525: PUSH
10526: LD_INT 118
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: ST_TO_ADDR
10546: GO 12801
10548: LD_INT 9
10550: DOUBLE
10551: EQUAL
10552: IFTRUE 10556
10554: GO 10704
10556: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10557: LD_ADDR_VAR 0 2
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: LD_INT 4
10567: PUSH
10568: LD_INT 5
10570: PUSH
10571: LD_INT 6
10573: PUSH
10574: LD_INT 7
10576: PUSH
10577: LD_INT 8
10579: PUSH
10580: LD_INT 11
10582: PUSH
10583: LD_INT 12
10585: PUSH
10586: LD_INT 15
10588: PUSH
10589: LD_INT 16
10591: PUSH
10592: LD_INT 20
10594: PUSH
10595: LD_INT 21
10597: PUSH
10598: LD_INT 22
10600: PUSH
10601: LD_INT 23
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 26
10609: PUSH
10610: LD_INT 28
10612: PUSH
10613: LD_INT 30
10615: PUSH
10616: LD_INT 31
10618: PUSH
10619: LD_INT 32
10621: PUSH
10622: LD_INT 36
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 101
10650: PUSH
10651: LD_INT 102
10653: PUSH
10654: LD_INT 103
10656: PUSH
10657: LD_INT 105
10659: PUSH
10660: LD_INT 106
10662: PUSH
10663: LD_INT 108
10665: PUSH
10666: LD_INT 109
10668: PUSH
10669: LD_INT 112
10671: PUSH
10672: LD_INT 114
10674: PUSH
10675: LD_INT 116
10677: PUSH
10678: LD_INT 117
10680: PUSH
10681: LD_INT 118
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: ST_TO_ADDR
10702: GO 12801
10704: LD_INT 10
10706: DOUBLE
10707: EQUAL
10708: IFTRUE 10712
10710: GO 10908
10712: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10713: LD_ADDR_VAR 0 2
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: LD_INT 6
10729: PUSH
10730: LD_INT 7
10732: PUSH
10733: LD_INT 8
10735: PUSH
10736: LD_INT 9
10738: PUSH
10739: LD_INT 10
10741: PUSH
10742: LD_INT 11
10744: PUSH
10745: LD_INT 12
10747: PUSH
10748: LD_INT 13
10750: PUSH
10751: LD_INT 14
10753: PUSH
10754: LD_INT 15
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: LD_INT 17
10762: PUSH
10763: LD_INT 18
10765: PUSH
10766: LD_INT 19
10768: PUSH
10769: LD_INT 20
10771: PUSH
10772: LD_INT 21
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 24
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 26
10789: PUSH
10790: LD_INT 28
10792: PUSH
10793: LD_INT 30
10795: PUSH
10796: LD_INT 31
10798: PUSH
10799: LD_INT 32
10801: PUSH
10802: LD_INT 36
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 101
10838: PUSH
10839: LD_INT 102
10841: PUSH
10842: LD_INT 103
10844: PUSH
10845: LD_INT 104
10847: PUSH
10848: LD_INT 105
10850: PUSH
10851: LD_INT 106
10853: PUSH
10854: LD_INT 107
10856: PUSH
10857: LD_INT 108
10859: PUSH
10860: LD_INT 109
10862: PUSH
10863: LD_INT 110
10865: PUSH
10866: LD_INT 111
10868: PUSH
10869: LD_INT 112
10871: PUSH
10872: LD_INT 114
10874: PUSH
10875: LD_INT 116
10877: PUSH
10878: LD_INT 117
10880: PUSH
10881: LD_INT 118
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: ST_TO_ADDR
10906: GO 12801
10908: LD_INT 11
10910: DOUBLE
10911: EQUAL
10912: IFTRUE 10916
10914: GO 11120
10916: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10917: LD_ADDR_VAR 0 2
10921: PUSH
10922: LD_INT 2
10924: PUSH
10925: LD_INT 3
10927: PUSH
10928: LD_INT 4
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: LD_INT 6
10936: PUSH
10937: LD_INT 7
10939: PUSH
10940: LD_INT 8
10942: PUSH
10943: LD_INT 9
10945: PUSH
10946: LD_INT 10
10948: PUSH
10949: LD_INT 11
10951: PUSH
10952: LD_INT 12
10954: PUSH
10955: LD_INT 13
10957: PUSH
10958: LD_INT 14
10960: PUSH
10961: LD_INT 15
10963: PUSH
10964: LD_INT 16
10966: PUSH
10967: LD_INT 17
10969: PUSH
10970: LD_INT 18
10972: PUSH
10973: LD_INT 19
10975: PUSH
10976: LD_INT 20
10978: PUSH
10979: LD_INT 21
10981: PUSH
10982: LD_INT 22
10984: PUSH
10985: LD_INT 23
10987: PUSH
10988: LD_INT 24
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 26
10996: PUSH
10997: LD_INT 28
10999: PUSH
11000: LD_INT 30
11002: PUSH
11003: LD_INT 31
11005: PUSH
11006: LD_INT 32
11008: PUSH
11009: LD_INT 34
11011: PUSH
11012: LD_INT 36
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 101
11050: PUSH
11051: LD_INT 102
11053: PUSH
11054: LD_INT 103
11056: PUSH
11057: LD_INT 104
11059: PUSH
11060: LD_INT 105
11062: PUSH
11063: LD_INT 106
11065: PUSH
11066: LD_INT 107
11068: PUSH
11069: LD_INT 108
11071: PUSH
11072: LD_INT 109
11074: PUSH
11075: LD_INT 110
11077: PUSH
11078: LD_INT 111
11080: PUSH
11081: LD_INT 112
11083: PUSH
11084: LD_INT 114
11086: PUSH
11087: LD_INT 116
11089: PUSH
11090: LD_INT 117
11092: PUSH
11093: LD_INT 118
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: ST_TO_ADDR
11118: GO 12801
11120: LD_INT 12
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11348
11128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11129: LD_ADDR_VAR 0 2
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: LD_INT 4
11145: PUSH
11146: LD_INT 5
11148: PUSH
11149: LD_INT 6
11151: PUSH
11152: LD_INT 7
11154: PUSH
11155: LD_INT 8
11157: PUSH
11158: LD_INT 9
11160: PUSH
11161: LD_INT 10
11163: PUSH
11164: LD_INT 11
11166: PUSH
11167: LD_INT 12
11169: PUSH
11170: LD_INT 13
11172: PUSH
11173: LD_INT 14
11175: PUSH
11176: LD_INT 15
11178: PUSH
11179: LD_INT 16
11181: PUSH
11182: LD_INT 17
11184: PUSH
11185: LD_INT 18
11187: PUSH
11188: LD_INT 19
11190: PUSH
11191: LD_INT 20
11193: PUSH
11194: LD_INT 21
11196: PUSH
11197: LD_INT 22
11199: PUSH
11200: LD_INT 23
11202: PUSH
11203: LD_INT 24
11205: PUSH
11206: LD_INT 25
11208: PUSH
11209: LD_INT 26
11211: PUSH
11212: LD_INT 27
11214: PUSH
11215: LD_INT 28
11217: PUSH
11218: LD_INT 30
11220: PUSH
11221: LD_INT 31
11223: PUSH
11224: LD_INT 32
11226: PUSH
11227: LD_INT 33
11229: PUSH
11230: LD_INT 34
11232: PUSH
11233: LD_INT 36
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 102
11277: PUSH
11278: LD_INT 103
11280: PUSH
11281: LD_INT 104
11283: PUSH
11284: LD_INT 105
11286: PUSH
11287: LD_INT 106
11289: PUSH
11290: LD_INT 107
11292: PUSH
11293: LD_INT 108
11295: PUSH
11296: LD_INT 109
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 111
11304: PUSH
11305: LD_INT 112
11307: PUSH
11308: LD_INT 113
11310: PUSH
11311: LD_INT 114
11313: PUSH
11314: LD_INT 116
11316: PUSH
11317: LD_INT 117
11319: PUSH
11320: LD_INT 118
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: ST_TO_ADDR
11346: GO 12801
11348: LD_INT 13
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11564
11356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 1
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 3
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 8
11379: PUSH
11380: LD_INT 9
11382: PUSH
11383: LD_INT 10
11385: PUSH
11386: LD_INT 11
11388: PUSH
11389: LD_INT 12
11391: PUSH
11392: LD_INT 14
11394: PUSH
11395: LD_INT 15
11397: PUSH
11398: LD_INT 16
11400: PUSH
11401: LD_INT 17
11403: PUSH
11404: LD_INT 18
11406: PUSH
11407: LD_INT 19
11409: PUSH
11410: LD_INT 20
11412: PUSH
11413: LD_INT 21
11415: PUSH
11416: LD_INT 22
11418: PUSH
11419: LD_INT 23
11421: PUSH
11422: LD_INT 24
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 26
11430: PUSH
11431: LD_INT 27
11433: PUSH
11434: LD_INT 28
11436: PUSH
11437: LD_INT 30
11439: PUSH
11440: LD_INT 31
11442: PUSH
11443: LD_INT 32
11445: PUSH
11446: LD_INT 33
11448: PUSH
11449: LD_INT 34
11451: PUSH
11452: LD_INT 36
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 101
11490: PUSH
11491: LD_INT 102
11493: PUSH
11494: LD_INT 103
11496: PUSH
11497: LD_INT 104
11499: PUSH
11500: LD_INT 105
11502: PUSH
11503: LD_INT 106
11505: PUSH
11506: LD_INT 107
11508: PUSH
11509: LD_INT 108
11511: PUSH
11512: LD_INT 109
11514: PUSH
11515: LD_INT 110
11517: PUSH
11518: LD_INT 111
11520: PUSH
11521: LD_INT 112
11523: PUSH
11524: LD_INT 113
11526: PUSH
11527: LD_INT 114
11529: PUSH
11530: LD_INT 116
11532: PUSH
11533: LD_INT 117
11535: PUSH
11536: LD_INT 118
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: ST_TO_ADDR
11562: GO 12801
11564: LD_INT 14
11566: DOUBLE
11567: EQUAL
11568: IFTRUE 11572
11570: GO 11796
11572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11573: LD_ADDR_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: LD_INT 4
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: LD_INT 6
11595: PUSH
11596: LD_INT 7
11598: PUSH
11599: LD_INT 8
11601: PUSH
11602: LD_INT 9
11604: PUSH
11605: LD_INT 10
11607: PUSH
11608: LD_INT 11
11610: PUSH
11611: LD_INT 12
11613: PUSH
11614: LD_INT 13
11616: PUSH
11617: LD_INT 14
11619: PUSH
11620: LD_INT 15
11622: PUSH
11623: LD_INT 16
11625: PUSH
11626: LD_INT 17
11628: PUSH
11629: LD_INT 18
11631: PUSH
11632: LD_INT 19
11634: PUSH
11635: LD_INT 20
11637: PUSH
11638: LD_INT 21
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 23
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 25
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 27
11658: PUSH
11659: LD_INT 28
11661: PUSH
11662: LD_INT 29
11664: PUSH
11665: LD_INT 30
11667: PUSH
11668: LD_INT 31
11670: PUSH
11671: LD_INT 32
11673: PUSH
11674: LD_INT 33
11676: PUSH
11677: LD_INT 34
11679: PUSH
11680: LD_INT 36
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 101
11722: PUSH
11723: LD_INT 102
11725: PUSH
11726: LD_INT 103
11728: PUSH
11729: LD_INT 104
11731: PUSH
11732: LD_INT 105
11734: PUSH
11735: LD_INT 106
11737: PUSH
11738: LD_INT 107
11740: PUSH
11741: LD_INT 108
11743: PUSH
11744: LD_INT 109
11746: PUSH
11747: LD_INT 110
11749: PUSH
11750: LD_INT 111
11752: PUSH
11753: LD_INT 112
11755: PUSH
11756: LD_INT 113
11758: PUSH
11759: LD_INT 114
11761: PUSH
11762: LD_INT 116
11764: PUSH
11765: LD_INT 117
11767: PUSH
11768: LD_INT 118
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: ST_TO_ADDR
11794: GO 12801
11796: LD_INT 15
11798: DOUBLE
11799: EQUAL
11800: IFTRUE 11804
11802: GO 12028
11804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11805: LD_ADDR_VAR 0 2
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: LD_INT 2
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: LD_INT 5
11824: PUSH
11825: LD_INT 6
11827: PUSH
11828: LD_INT 7
11830: PUSH
11831: LD_INT 8
11833: PUSH
11834: LD_INT 9
11836: PUSH
11837: LD_INT 10
11839: PUSH
11840: LD_INT 11
11842: PUSH
11843: LD_INT 12
11845: PUSH
11846: LD_INT 13
11848: PUSH
11849: LD_INT 14
11851: PUSH
11852: LD_INT 15
11854: PUSH
11855: LD_INT 16
11857: PUSH
11858: LD_INT 17
11860: PUSH
11861: LD_INT 18
11863: PUSH
11864: LD_INT 19
11866: PUSH
11867: LD_INT 20
11869: PUSH
11870: LD_INT 21
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: LD_INT 23
11878: PUSH
11879: LD_INT 24
11881: PUSH
11882: LD_INT 25
11884: PUSH
11885: LD_INT 26
11887: PUSH
11888: LD_INT 27
11890: PUSH
11891: LD_INT 28
11893: PUSH
11894: LD_INT 29
11896: PUSH
11897: LD_INT 30
11899: PUSH
11900: LD_INT 31
11902: PUSH
11903: LD_INT 32
11905: PUSH
11906: LD_INT 33
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 36
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 101
11954: PUSH
11955: LD_INT 102
11957: PUSH
11958: LD_INT 103
11960: PUSH
11961: LD_INT 104
11963: PUSH
11964: LD_INT 105
11966: PUSH
11967: LD_INT 106
11969: PUSH
11970: LD_INT 107
11972: PUSH
11973: LD_INT 108
11975: PUSH
11976: LD_INT 109
11978: PUSH
11979: LD_INT 110
11981: PUSH
11982: LD_INT 111
11984: PUSH
11985: LD_INT 112
11987: PUSH
11988: LD_INT 113
11990: PUSH
11991: LD_INT 114
11993: PUSH
11994: LD_INT 116
11996: PUSH
11997: LD_INT 117
11999: PUSH
12000: LD_INT 118
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: ST_TO_ADDR
12026: GO 12801
12028: LD_INT 16
12030: DOUBLE
12031: EQUAL
12032: IFTRUE 12036
12034: GO 12172
12036: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 4
12047: PUSH
12048: LD_INT 5
12050: PUSH
12051: LD_INT 7
12053: PUSH
12054: LD_INT 11
12056: PUSH
12057: LD_INT 12
12059: PUSH
12060: LD_INT 15
12062: PUSH
12063: LD_INT 16
12065: PUSH
12066: LD_INT 20
12068: PUSH
12069: LD_INT 21
12071: PUSH
12072: LD_INT 22
12074: PUSH
12075: LD_INT 23
12077: PUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 26
12083: PUSH
12084: LD_INT 30
12086: PUSH
12087: LD_INT 31
12089: PUSH
12090: LD_INT 32
12092: PUSH
12093: LD_INT 33
12095: PUSH
12096: LD_INT 34
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 101
12122: PUSH
12123: LD_INT 102
12125: PUSH
12126: LD_INT 103
12128: PUSH
12129: LD_INT 106
12131: PUSH
12132: LD_INT 108
12134: PUSH
12135: LD_INT 112
12137: PUSH
12138: LD_INT 113
12140: PUSH
12141: LD_INT 114
12143: PUSH
12144: LD_INT 116
12146: PUSH
12147: LD_INT 117
12149: PUSH
12150: LD_INT 118
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: ST_TO_ADDR
12170: GO 12801
12172: LD_INT 17
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12404
12180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12181: LD_ADDR_VAR 0 2
12185: PUSH
12186: LD_INT 1
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: LD_INT 3
12194: PUSH
12195: LD_INT 4
12197: PUSH
12198: LD_INT 5
12200: PUSH
12201: LD_INT 6
12203: PUSH
12204: LD_INT 7
12206: PUSH
12207: LD_INT 8
12209: PUSH
12210: LD_INT 9
12212: PUSH
12213: LD_INT 10
12215: PUSH
12216: LD_INT 11
12218: PUSH
12219: LD_INT 12
12221: PUSH
12222: LD_INT 13
12224: PUSH
12225: LD_INT 14
12227: PUSH
12228: LD_INT 15
12230: PUSH
12231: LD_INT 16
12233: PUSH
12234: LD_INT 17
12236: PUSH
12237: LD_INT 18
12239: PUSH
12240: LD_INT 19
12242: PUSH
12243: LD_INT 20
12245: PUSH
12246: LD_INT 21
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_INT 23
12254: PUSH
12255: LD_INT 24
12257: PUSH
12258: LD_INT 25
12260: PUSH
12261: LD_INT 26
12263: PUSH
12264: LD_INT 27
12266: PUSH
12267: LD_INT 28
12269: PUSH
12270: LD_INT 29
12272: PUSH
12273: LD_INT 30
12275: PUSH
12276: LD_INT 31
12278: PUSH
12279: LD_INT 32
12281: PUSH
12282: LD_INT 33
12284: PUSH
12285: LD_INT 34
12287: PUSH
12288: LD_INT 36
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 101
12330: PUSH
12331: LD_INT 102
12333: PUSH
12334: LD_INT 103
12336: PUSH
12337: LD_INT 104
12339: PUSH
12340: LD_INT 105
12342: PUSH
12343: LD_INT 106
12345: PUSH
12346: LD_INT 107
12348: PUSH
12349: LD_INT 108
12351: PUSH
12352: LD_INT 109
12354: PUSH
12355: LD_INT 110
12357: PUSH
12358: LD_INT 111
12360: PUSH
12361: LD_INT 112
12363: PUSH
12364: LD_INT 113
12366: PUSH
12367: LD_INT 114
12369: PUSH
12370: LD_INT 116
12372: PUSH
12373: LD_INT 117
12375: PUSH
12376: LD_INT 118
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: ST_TO_ADDR
12402: GO 12801
12404: LD_INT 18
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12560
12412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_INT 2
12420: PUSH
12421: LD_INT 4
12423: PUSH
12424: LD_INT 5
12426: PUSH
12427: LD_INT 7
12429: PUSH
12430: LD_INT 11
12432: PUSH
12433: LD_INT 12
12435: PUSH
12436: LD_INT 15
12438: PUSH
12439: LD_INT 16
12441: PUSH
12442: LD_INT 20
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 22
12450: PUSH
12451: LD_INT 23
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 26
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: LD_INT 31
12465: PUSH
12466: LD_INT 32
12468: PUSH
12469: LD_INT 33
12471: PUSH
12472: LD_INT 34
12474: PUSH
12475: LD_INT 35
12477: PUSH
12478: LD_INT 36
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 102
12509: PUSH
12510: LD_INT 103
12512: PUSH
12513: LD_INT 106
12515: PUSH
12516: LD_INT 108
12518: PUSH
12519: LD_INT 112
12521: PUSH
12522: LD_INT 113
12524: PUSH
12525: LD_INT 114
12527: PUSH
12528: LD_INT 115
12530: PUSH
12531: LD_INT 116
12533: PUSH
12534: LD_INT 117
12536: PUSH
12537: LD_INT 118
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: ST_TO_ADDR
12558: GO 12801
12560: LD_INT 19
12562: DOUBLE
12563: EQUAL
12564: IFTRUE 12568
12566: GO 12800
12568: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 3
12582: PUSH
12583: LD_INT 4
12585: PUSH
12586: LD_INT 5
12588: PUSH
12589: LD_INT 6
12591: PUSH
12592: LD_INT 7
12594: PUSH
12595: LD_INT 8
12597: PUSH
12598: LD_INT 9
12600: PUSH
12601: LD_INT 10
12603: PUSH
12604: LD_INT 11
12606: PUSH
12607: LD_INT 12
12609: PUSH
12610: LD_INT 13
12612: PUSH
12613: LD_INT 14
12615: PUSH
12616: LD_INT 15
12618: PUSH
12619: LD_INT 16
12621: PUSH
12622: LD_INT 17
12624: PUSH
12625: LD_INT 18
12627: PUSH
12628: LD_INT 19
12630: PUSH
12631: LD_INT 20
12633: PUSH
12634: LD_INT 21
12636: PUSH
12637: LD_INT 22
12639: PUSH
12640: LD_INT 23
12642: PUSH
12643: LD_INT 24
12645: PUSH
12646: LD_INT 25
12648: PUSH
12649: LD_INT 26
12651: PUSH
12652: LD_INT 27
12654: PUSH
12655: LD_INT 28
12657: PUSH
12658: LD_INT 29
12660: PUSH
12661: LD_INT 30
12663: PUSH
12664: LD_INT 31
12666: PUSH
12667: LD_INT 32
12669: PUSH
12670: LD_INT 33
12672: PUSH
12673: LD_INT 34
12675: PUSH
12676: LD_INT 35
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 101
12722: PUSH
12723: LD_INT 102
12725: PUSH
12726: LD_INT 103
12728: PUSH
12729: LD_INT 104
12731: PUSH
12732: LD_INT 105
12734: PUSH
12735: LD_INT 106
12737: PUSH
12738: LD_INT 107
12740: PUSH
12741: LD_INT 108
12743: PUSH
12744: LD_INT 109
12746: PUSH
12747: LD_INT 110
12749: PUSH
12750: LD_INT 111
12752: PUSH
12753: LD_INT 112
12755: PUSH
12756: LD_INT 113
12758: PUSH
12759: LD_INT 114
12761: PUSH
12762: LD_INT 115
12764: PUSH
12765: LD_INT 116
12767: PUSH
12768: LD_INT 117
12770: PUSH
12771: LD_INT 118
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: ST_TO_ADDR
12798: GO 12801
12800: POP
// end else
12801: GO 13032
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12803: LD_ADDR_VAR 0 2
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: LD_INT 3
12816: PUSH
12817: LD_INT 4
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: LD_INT 6
12825: PUSH
12826: LD_INT 7
12828: PUSH
12829: LD_INT 8
12831: PUSH
12832: LD_INT 9
12834: PUSH
12835: LD_INT 10
12837: PUSH
12838: LD_INT 11
12840: PUSH
12841: LD_INT 12
12843: PUSH
12844: LD_INT 13
12846: PUSH
12847: LD_INT 14
12849: PUSH
12850: LD_INT 15
12852: PUSH
12853: LD_INT 16
12855: PUSH
12856: LD_INT 17
12858: PUSH
12859: LD_INT 18
12861: PUSH
12862: LD_INT 19
12864: PUSH
12865: LD_INT 20
12867: PUSH
12868: LD_INT 21
12870: PUSH
12871: LD_INT 22
12873: PUSH
12874: LD_INT 23
12876: PUSH
12877: LD_INT 24
12879: PUSH
12880: LD_INT 25
12882: PUSH
12883: LD_INT 26
12885: PUSH
12886: LD_INT 27
12888: PUSH
12889: LD_INT 28
12891: PUSH
12892: LD_INT 29
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 31
12900: PUSH
12901: LD_INT 32
12903: PUSH
12904: LD_INT 33
12906: PUSH
12907: LD_INT 34
12909: PUSH
12910: LD_INT 35
12912: PUSH
12913: LD_INT 36
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 101
12956: PUSH
12957: LD_INT 102
12959: PUSH
12960: LD_INT 103
12962: PUSH
12963: LD_INT 104
12965: PUSH
12966: LD_INT 105
12968: PUSH
12969: LD_INT 106
12971: PUSH
12972: LD_INT 107
12974: PUSH
12975: LD_INT 108
12977: PUSH
12978: LD_INT 109
12980: PUSH
12981: LD_INT 110
12983: PUSH
12984: LD_INT 111
12986: PUSH
12987: LD_INT 112
12989: PUSH
12990: LD_INT 113
12992: PUSH
12993: LD_INT 114
12995: PUSH
12996: LD_INT 115
12998: PUSH
12999: LD_INT 116
13001: PUSH
13002: LD_INT 117
13004: PUSH
13005: LD_INT 118
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: ST_TO_ADDR
// if result then
13032: LD_VAR 0 2
13036: IFFALSE 13822
// begin normal :=  ;
13038: LD_ADDR_VAR 0 5
13042: PUSH
13043: LD_STRING 
13045: ST_TO_ADDR
// hardcore :=  ;
13046: LD_ADDR_VAR 0 6
13050: PUSH
13051: LD_STRING 
13053: ST_TO_ADDR
// active :=  ;
13054: LD_ADDR_VAR 0 7
13058: PUSH
13059: LD_STRING 
13061: ST_TO_ADDR
// for i = 1 to normalCounter do
13062: LD_ADDR_VAR 0 8
13066: PUSH
13067: DOUBLE
13068: LD_INT 1
13070: DEC
13071: ST_TO_ADDR
13072: LD_EXP 21
13076: PUSH
13077: FOR_TO
13078: IFFALSE 13179
// begin tmp := 0 ;
13080: LD_ADDR_VAR 0 3
13084: PUSH
13085: LD_STRING 0
13087: ST_TO_ADDR
// if result [ 1 ] then
13088: LD_VAR 0 2
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: IFFALSE 13161
// if result [ 1 ] [ 1 ] = i then
13098: LD_VAR 0 2
13102: PUSH
13103: LD_INT 1
13105: ARRAY
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PUSH
13111: LD_VAR 0 8
13115: EQUAL
13116: IFFALSE 13161
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13118: LD_ADDR_VAR 0 2
13122: PUSH
13123: LD_VAR 0 2
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: LD_VAR 0 2
13135: PUSH
13136: LD_INT 1
13138: ARRAY
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 3
13147: PPUSH
13148: CALL_OW 1
13152: ST_TO_ADDR
// tmp := 1 ;
13153: LD_ADDR_VAR 0 3
13157: PUSH
13158: LD_STRING 1
13160: ST_TO_ADDR
// end ; normal := normal & tmp ;
13161: LD_ADDR_VAR 0 5
13165: PUSH
13166: LD_VAR 0 5
13170: PUSH
13171: LD_VAR 0 3
13175: STR
13176: ST_TO_ADDR
// end ;
13177: GO 13077
13179: POP
13180: POP
// for i = 1 to hardcoreCounter do
13181: LD_ADDR_VAR 0 8
13185: PUSH
13186: DOUBLE
13187: LD_INT 1
13189: DEC
13190: ST_TO_ADDR
13191: LD_EXP 22
13195: PUSH
13196: FOR_TO
13197: IFFALSE 13302
// begin tmp := 0 ;
13199: LD_ADDR_VAR 0 3
13203: PUSH
13204: LD_STRING 0
13206: ST_TO_ADDR
// if result [ 2 ] then
13207: LD_VAR 0 2
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: IFFALSE 13284
// if result [ 2 ] [ 1 ] = 100 + i then
13217: LD_VAR 0 2
13221: PUSH
13222: LD_INT 2
13224: ARRAY
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PUSH
13230: LD_INT 100
13232: PUSH
13233: LD_VAR 0 8
13237: PLUS
13238: EQUAL
13239: IFFALSE 13284
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13241: LD_ADDR_VAR 0 2
13245: PUSH
13246: LD_VAR 0 2
13250: PPUSH
13251: LD_INT 2
13253: PPUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: ARRAY
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 3
13270: PPUSH
13271: CALL_OW 1
13275: ST_TO_ADDR
// tmp := 1 ;
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_STRING 1
13283: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13284: LD_ADDR_VAR 0 6
13288: PUSH
13289: LD_VAR 0 6
13293: PUSH
13294: LD_VAR 0 3
13298: STR
13299: ST_TO_ADDR
// end ;
13300: GO 13196
13302: POP
13303: POP
// if isGameLoad then
13304: LD_VAR 0 1
13308: IFFALSE 13783
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13310: LD_ADDR_VAR 0 4
13314: PUSH
13315: LD_EXP 25
13319: PUSH
13320: LD_EXP 24
13324: PUSH
13325: LD_EXP 26
13329: PUSH
13330: LD_EXP 23
13334: PUSH
13335: LD_EXP 27
13339: PUSH
13340: LD_EXP 28
13344: PUSH
13345: LD_EXP 29
13349: PUSH
13350: LD_EXP 30
13354: PUSH
13355: LD_EXP 31
13359: PUSH
13360: LD_EXP 32
13364: PUSH
13365: LD_EXP 33
13369: PUSH
13370: LD_EXP 34
13374: PUSH
13375: LD_EXP 35
13379: PUSH
13380: LD_EXP 36
13384: PUSH
13385: LD_EXP 44
13389: PUSH
13390: LD_EXP 45
13394: PUSH
13395: LD_EXP 46
13399: PUSH
13400: LD_EXP 47
13404: PUSH
13405: LD_EXP 49
13409: PUSH
13410: LD_EXP 50
13414: PUSH
13415: LD_EXP 51
13419: PUSH
13420: LD_EXP 54
13424: PUSH
13425: LD_EXP 56
13429: PUSH
13430: LD_EXP 57
13434: PUSH
13435: LD_EXP 58
13439: PUSH
13440: LD_EXP 60
13444: PUSH
13445: LD_EXP 61
13449: PUSH
13450: LD_EXP 64
13454: PUSH
13455: LD_EXP 65
13459: PUSH
13460: LD_EXP 66
13464: PUSH
13465: LD_EXP 67
13469: PUSH
13470: LD_EXP 68
13474: PUSH
13475: LD_EXP 69
13479: PUSH
13480: LD_EXP 70
13484: PUSH
13485: LD_EXP 71
13489: PUSH
13490: LD_EXP 72
13494: PUSH
13495: LD_EXP 37
13499: PUSH
13500: LD_EXP 38
13504: PUSH
13505: LD_EXP 41
13509: PUSH
13510: LD_EXP 42
13514: PUSH
13515: LD_EXP 43
13519: PUSH
13520: LD_EXP 39
13524: PUSH
13525: LD_EXP 40
13529: PUSH
13530: LD_EXP 48
13534: PUSH
13535: LD_EXP 52
13539: PUSH
13540: LD_EXP 53
13544: PUSH
13545: LD_EXP 55
13549: PUSH
13550: LD_EXP 59
13554: PUSH
13555: LD_EXP 62
13559: PUSH
13560: LD_EXP 63
13564: PUSH
13565: LD_EXP 73
13569: PUSH
13570: LD_EXP 74
13574: PUSH
13575: LD_EXP 75
13579: PUSH
13580: LD_EXP 76
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// tmp :=  ;
13641: LD_ADDR_VAR 0 3
13645: PUSH
13646: LD_STRING 
13648: ST_TO_ADDR
// for i = 1 to normalCounter do
13649: LD_ADDR_VAR 0 8
13653: PUSH
13654: DOUBLE
13655: LD_INT 1
13657: DEC
13658: ST_TO_ADDR
13659: LD_EXP 21
13663: PUSH
13664: FOR_TO
13665: IFFALSE 13701
// begin if flags [ i ] then
13667: LD_VAR 0 4
13671: PUSH
13672: LD_VAR 0 8
13676: ARRAY
13677: IFFALSE 13699
// tmp := tmp & i & ; ;
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_VAR 0 3
13688: PUSH
13689: LD_VAR 0 8
13693: STR
13694: PUSH
13695: LD_STRING ;
13697: STR
13698: ST_TO_ADDR
// end ;
13699: GO 13664
13701: POP
13702: POP
// for i = 1 to hardcoreCounter do
13703: LD_ADDR_VAR 0 8
13707: PUSH
13708: DOUBLE
13709: LD_INT 1
13711: DEC
13712: ST_TO_ADDR
13713: LD_EXP 22
13717: PUSH
13718: FOR_TO
13719: IFFALSE 13765
// begin if flags [ normalCounter + i ] then
13721: LD_VAR 0 4
13725: PUSH
13726: LD_EXP 21
13730: PUSH
13731: LD_VAR 0 8
13735: PLUS
13736: ARRAY
13737: IFFALSE 13763
// tmp := tmp & ( 100 + i ) & ; ;
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 100
13751: PUSH
13752: LD_VAR 0 8
13756: PLUS
13757: STR
13758: PUSH
13759: LD_STRING ;
13761: STR
13762: ST_TO_ADDR
// end ;
13763: GO 13718
13765: POP
13766: POP
// if tmp then
13767: LD_VAR 0 3
13771: IFFALSE 13783
// active := tmp ;
13773: LD_ADDR_VAR 0 7
13777: PUSH
13778: LD_VAR 0 3
13782: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13783: LD_STRING getStreamItemsFromMission("
13785: PUSH
13786: LD_VAR 0 5
13790: STR
13791: PUSH
13792: LD_STRING ","
13794: STR
13795: PUSH
13796: LD_VAR 0 6
13800: STR
13801: PUSH
13802: LD_STRING ","
13804: STR
13805: PUSH
13806: LD_VAR 0 7
13810: STR
13811: PUSH
13812: LD_STRING ")
13814: STR
13815: PPUSH
13816: CALL_OW 559
// end else
13820: GO 13829
// ToLua ( getStreamItemsFromMission("","","") ) ;
13822: LD_STRING getStreamItemsFromMission("","","")
13824: PPUSH
13825: CALL_OW 559
// end ;
13829: LD_VAR 0 2
13833: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13834: LD_EXP 20
13838: IFFALSE 13846
13840: PUSH
13841: LD_EXP 25
13845: AND
13846: IFFALSE 13970
13848: GO 13850
13850: DISABLE
13851: LD_INT 0
13853: PPUSH
13854: PPUSH
// begin enable ;
13855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13856: LD_ADDR_VAR 0 2
13860: PUSH
13861: LD_INT 22
13863: PUSH
13864: LD_OWVAR 2
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 2
13875: PUSH
13876: LD_INT 34
13878: PUSH
13879: LD_INT 7
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 34
13888: PUSH
13889: LD_INT 45
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 34
13898: PUSH
13899: LD_INT 28
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 34
13908: PUSH
13909: LD_INT 47
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 69
13931: ST_TO_ADDR
// if not tmp then
13932: LD_VAR 0 2
13936: NOT
13937: IFFALSE 13941
// exit ;
13939: GO 13970
// for i in tmp do
13941: LD_ADDR_VAR 0 1
13945: PUSH
13946: LD_VAR 0 2
13950: PUSH
13951: FOR_IN
13952: IFFALSE 13968
// begin SetLives ( i , 0 ) ;
13954: LD_VAR 0 1
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 234
// end ;
13966: GO 13951
13968: POP
13969: POP
// end ;
13970: PPOPN 2
13972: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13973: LD_EXP 20
13977: IFFALSE 13985
13979: PUSH
13980: LD_EXP 26
13984: AND
13985: IFFALSE 14069
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
13993: PPUSH
// begin enable ;
13994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_OWVAR 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 32
14014: PUSH
14015: LD_INT 3
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PPUSH
14026: CALL_OW 69
14030: ST_TO_ADDR
// if not tmp then
14031: LD_VAR 0 2
14035: NOT
14036: IFFALSE 14040
// exit ;
14038: GO 14069
// for i in tmp do
14040: LD_ADDR_VAR 0 1
14044: PUSH
14045: LD_VAR 0 2
14049: PUSH
14050: FOR_IN
14051: IFFALSE 14067
// begin SetLives ( i , 0 ) ;
14053: LD_VAR 0 1
14057: PPUSH
14058: LD_INT 0
14060: PPUSH
14061: CALL_OW 234
// end ;
14065: GO 14050
14067: POP
14068: POP
// end ;
14069: PPOPN 2
14071: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14072: LD_EXP 20
14076: IFFALSE 14084
14078: PUSH
14079: LD_EXP 23
14083: AND
14084: IFFALSE 14177
14086: GO 14088
14088: DISABLE
14089: LD_INT 0
14091: PPUSH
// begin enable ;
14092: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14093: LD_ADDR_VAR 0 1
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: LD_INT 25
14115: PUSH
14116: LD_INT 5
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 25
14125: PUSH
14126: LD_INT 9
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 25
14135: PUSH
14136: LD_INT 8
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PPUSH
14153: CALL_OW 69
14157: PUSH
14158: FOR_IN
14159: IFFALSE 14175
// begin SetClass ( i , 1 ) ;
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 336
// end ;
14173: GO 14158
14175: POP
14176: POP
// end ;
14177: PPOPN 1
14179: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14180: LD_EXP 20
14184: IFFALSE 14192
14186: PUSH
14187: LD_EXP 24
14191: AND
14192: IFFALSE 14204
14194: PUSH
14195: LD_OWVAR 65
14199: PUSH
14200: LD_INT 7
14202: LESS
14203: AND
14204: IFFALSE 14218
14206: GO 14208
14208: DISABLE
// begin enable ;
14209: ENABLE
// game_speed := 7 ;
14210: LD_ADDR_OWVAR 65
14214: PUSH
14215: LD_INT 7
14217: ST_TO_ADDR
// end ;
14218: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14219: LD_EXP 20
14223: IFFALSE 14231
14225: PUSH
14226: LD_EXP 27
14230: AND
14231: IFFALSE 14433
14233: GO 14235
14235: DISABLE
14236: LD_INT 0
14238: PPUSH
14239: PPUSH
14240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_INT 81
14248: PUSH
14249: LD_OWVAR 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: ST_TO_ADDR
// if not tmp then
14277: LD_VAR 0 3
14281: NOT
14282: IFFALSE 14286
// exit ;
14284: GO 14433
// if tmp > 5 then
14286: LD_VAR 0 3
14290: PUSH
14291: LD_INT 5
14293: GREATER
14294: IFFALSE 14306
// k := 5 else
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_INT 5
14303: ST_TO_ADDR
14304: GO 14316
// k := tmp ;
14306: LD_ADDR_VAR 0 2
14310: PUSH
14311: LD_VAR 0 3
14315: ST_TO_ADDR
// for i := 1 to k do
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: DOUBLE
14322: LD_INT 1
14324: DEC
14325: ST_TO_ADDR
14326: LD_VAR 0 2
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14334: LD_VAR 0 3
14338: PUSH
14339: LD_VAR 0 1
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 1
14349: PUSH
14350: LD_INT 4
14352: MOD
14353: PUSH
14354: LD_INT 1
14356: PLUS
14357: PPUSH
14358: CALL_OW 259
14362: PUSH
14363: LD_INT 10
14365: LESS
14366: IFFALSE 14429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14368: LD_VAR 0 3
14372: PUSH
14373: LD_VAR 0 1
14377: ARRAY
14378: PPUSH
14379: LD_VAR 0 1
14383: PUSH
14384: LD_INT 4
14386: MOD
14387: PUSH
14388: LD_INT 1
14390: PLUS
14391: PPUSH
14392: LD_VAR 0 3
14396: PUSH
14397: LD_VAR 0 1
14401: ARRAY
14402: PPUSH
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 4
14410: MOD
14411: PUSH
14412: LD_INT 1
14414: PLUS
14415: PPUSH
14416: CALL_OW 259
14420: PUSH
14421: LD_INT 1
14423: PLUS
14424: PPUSH
14425: CALL_OW 237
14429: GO 14331
14431: POP
14432: POP
// end ;
14433: PPOPN 3
14435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14436: LD_EXP 20
14440: IFFALSE 14448
14442: PUSH
14443: LD_EXP 28
14447: AND
14448: IFFALSE 14468
14450: GO 14452
14452: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14453: LD_INT 4
14455: PPUSH
14456: LD_OWVAR 2
14460: PPUSH
14461: LD_INT 0
14463: PPUSH
14464: CALL_OW 324
14468: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14469: LD_EXP 20
14473: IFFALSE 14481
14475: PUSH
14476: LD_EXP 57
14480: AND
14481: IFFALSE 14501
14483: GO 14485
14485: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14486: LD_INT 19
14488: PPUSH
14489: LD_OWVAR 2
14493: PPUSH
14494: LD_INT 0
14496: PPUSH
14497: CALL_OW 324
14501: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14502: LD_EXP 20
14506: IFFALSE 14514
14508: PUSH
14509: LD_EXP 29
14513: AND
14514: IFFALSE 14616
14516: GO 14518
14518: DISABLE
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
// begin enable ;
14523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_OWVAR 2
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: LD_INT 34
14546: PUSH
14547: LD_INT 11
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 34
14556: PUSH
14557: LD_INT 30
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PPUSH
14573: CALL_OW 69
14577: ST_TO_ADDR
// if not tmp then
14578: LD_VAR 0 2
14582: NOT
14583: IFFALSE 14587
// exit ;
14585: GO 14616
// for i in tmp do
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: LD_VAR 0 2
14596: PUSH
14597: FOR_IN
14598: IFFALSE 14614
// begin SetLives ( i , 0 ) ;
14600: LD_VAR 0 1
14604: PPUSH
14605: LD_INT 0
14607: PPUSH
14608: CALL_OW 234
// end ;
14612: GO 14597
14614: POP
14615: POP
// end ;
14616: PPOPN 2
14618: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14619: LD_EXP 20
14623: IFFALSE 14631
14625: PUSH
14626: LD_EXP 30
14630: AND
14631: IFFALSE 14651
14633: GO 14635
14635: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14636: LD_INT 32
14638: PPUSH
14639: LD_OWVAR 2
14643: PPUSH
14644: LD_INT 0
14646: PPUSH
14647: CALL_OW 324
14651: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14652: LD_EXP 20
14656: IFFALSE 14664
14658: PUSH
14659: LD_EXP 31
14663: AND
14664: IFFALSE 14847
14666: GO 14668
14668: DISABLE
14669: LD_INT 0
14671: PPUSH
14672: PPUSH
14673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14674: LD_ADDR_VAR 0 2
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_OWVAR 2
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 33
14693: PUSH
14694: LD_INT 3
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: ST_TO_ADDR
// if not tmp then
14710: LD_VAR 0 2
14714: NOT
14715: IFFALSE 14719
// exit ;
14717: GO 14847
// side := 0 ;
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_INT 0
14726: ST_TO_ADDR
// for i := 1 to 8 do
14727: LD_ADDR_VAR 0 1
14731: PUSH
14732: DOUBLE
14733: LD_INT 1
14735: DEC
14736: ST_TO_ADDR
14737: LD_INT 8
14739: PUSH
14740: FOR_TO
14741: IFFALSE 14791
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14743: LD_OWVAR 2
14747: PUSH
14748: LD_VAR 0 1
14752: NONEQUAL
14753: IFFALSE 14775
14755: PUSH
14756: LD_OWVAR 2
14760: PPUSH
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 81
14770: PUSH
14771: LD_INT 2
14773: EQUAL
14774: AND
14775: IFFALSE 14789
// begin side := i ;
14777: LD_ADDR_VAR 0 3
14781: PUSH
14782: LD_VAR 0 1
14786: ST_TO_ADDR
// break ;
14787: GO 14791
// end ;
14789: GO 14740
14791: POP
14792: POP
// if not side then
14793: LD_VAR 0 3
14797: NOT
14798: IFFALSE 14802
// exit ;
14800: GO 14847
// for i := 1 to tmp do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: DOUBLE
14808: LD_INT 1
14810: DEC
14811: ST_TO_ADDR
14812: LD_VAR 0 2
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14845
// if Prob ( 60 ) then
14820: LD_INT 60
14822: PPUSH
14823: CALL_OW 13
14827: IFFALSE 14843
// SetSide ( i , side ) ;
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: CALL_OW 235
14843: GO 14817
14845: POP
14846: POP
// end ;
14847: PPOPN 3
14849: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14850: LD_EXP 20
14854: IFFALSE 14862
14856: PUSH
14857: LD_EXP 33
14861: AND
14862: IFFALSE 14981
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_OWVAR 2
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 23
14902: PUSH
14903: LD_INT 0
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: FOR_IN
14925: IFFALSE 14979
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 257
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: LD_INT 4
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: IN
14955: IFFALSE 14977
// SetClass ( un , rand ( 1 , 4 ) ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 4
14967: PPUSH
14968: CALL_OW 12
14972: PPUSH
14973: CALL_OW 336
14977: GO 14924
14979: POP
14980: POP
// end ;
14981: PPOPN 1
14983: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14984: LD_EXP 20
14988: IFFALSE 14996
14990: PUSH
14991: LD_EXP 32
14995: AND
14996: IFFALSE 15075
14998: GO 15000
15000: DISABLE
15001: LD_INT 0
15003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15004: LD_ADDR_VAR 0 1
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 1
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15049: LD_VAR 0 1
15053: PUSH
15054: LD_INT 1
15056: PPUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 12
15066: ARRAY
15067: PPUSH
15068: LD_INT 100
15070: PPUSH
15071: CALL_OW 234
// end ;
15075: PPOPN 1
15077: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15078: LD_EXP 20
15082: IFFALSE 15090
15084: PUSH
15085: LD_EXP 34
15089: AND
15090: IFFALSE 15188
15092: GO 15094
15094: DISABLE
15095: LD_INT 0
15097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15098: LD_ADDR_VAR 0 1
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_OWVAR 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: ST_TO_ADDR
// if not tmp then
15134: LD_VAR 0 1
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15188
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15143: LD_VAR 0 1
15147: PUSH
15148: LD_INT 1
15150: PPUSH
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 12
15160: ARRAY
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: LD_INT 4
15167: PPUSH
15168: CALL_OW 12
15172: PPUSH
15173: LD_INT 3000
15175: PPUSH
15176: LD_INT 9000
15178: PPUSH
15179: CALL_OW 12
15183: PPUSH
15184: CALL_OW 492
// end ;
15188: PPOPN 1
15190: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15191: LD_EXP 20
15195: IFFALSE 15203
15197: PUSH
15198: LD_EXP 35
15202: AND
15203: IFFALSE 15223
15205: GO 15207
15207: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15208: LD_INT 1
15210: PPUSH
15211: LD_OWVAR 2
15215: PPUSH
15216: LD_INT 0
15218: PPUSH
15219: CALL_OW 324
15223: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15224: LD_EXP 20
15228: IFFALSE 15236
15230: PUSH
15231: LD_EXP 36
15235: AND
15236: IFFALSE 15319
15238: GO 15240
15240: DISABLE
15241: LD_INT 0
15243: PPUSH
15244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15245: LD_ADDR_VAR 0 2
15249: PUSH
15250: LD_INT 22
15252: PUSH
15253: LD_OWVAR 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 21
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 69
15280: ST_TO_ADDR
// if not tmp then
15281: LD_VAR 0 2
15285: NOT
15286: IFFALSE 15290
// exit ;
15288: GO 15319
// for i in tmp do
15290: LD_ADDR_VAR 0 1
15294: PUSH
15295: LD_VAR 0 2
15299: PUSH
15300: FOR_IN
15301: IFFALSE 15317
// SetBLevel ( i , 10 ) ;
15303: LD_VAR 0 1
15307: PPUSH
15308: LD_INT 10
15310: PPUSH
15311: CALL_OW 241
15315: GO 15300
15317: POP
15318: POP
// end ;
15319: PPOPN 2
15321: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15322: LD_EXP 20
15326: IFFALSE 15334
15328: PUSH
15329: LD_EXP 37
15333: AND
15334: IFFALSE 15445
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
15343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 25
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PPUSH
15375: CALL_OW 69
15379: ST_TO_ADDR
// if not tmp then
15380: LD_VAR 0 3
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15445
// un := tmp [ rand ( 1 , tmp ) ] ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_VAR 0 3
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: CALL_OW 12
15411: ARRAY
15412: ST_TO_ADDR
// if Crawls ( un ) then
15413: LD_VAR 0 2
15417: PPUSH
15418: CALL_OW 318
15422: IFFALSE 15433
// ComWalk ( un ) ;
15424: LD_VAR 0 2
15428: PPUSH
15429: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15433: LD_VAR 0 2
15437: PPUSH
15438: LD_INT 5
15440: PPUSH
15441: CALL_OW 336
// end ;
15445: PPOPN 3
15447: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15448: LD_EXP 20
15452: IFFALSE 15460
15454: PUSH
15455: LD_EXP 38
15459: AND
15460: IFFALSE 15472
15462: PUSH
15463: LD_OWVAR 67
15467: PUSH
15468: LD_INT 4
15470: LESS
15471: AND
15472: IFFALSE 15491
15474: GO 15476
15476: DISABLE
// begin Difficulty := Difficulty + 1 ;
15477: LD_ADDR_OWVAR 67
15481: PUSH
15482: LD_OWVAR 67
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: ST_TO_ADDR
// end ;
15491: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15492: LD_EXP 20
15496: IFFALSE 15504
15498: PUSH
15499: LD_EXP 39
15503: AND
15504: IFFALSE 15607
15506: GO 15508
15508: DISABLE
15509: LD_INT 0
15511: PPUSH
// begin for i := 1 to 5 do
15512: LD_ADDR_VAR 0 1
15516: PUSH
15517: DOUBLE
15518: LD_INT 1
15520: DEC
15521: ST_TO_ADDR
15522: LD_INT 5
15524: PUSH
15525: FOR_TO
15526: IFFALSE 15605
// begin uc_nation := nation_nature ;
15528: LD_ADDR_OWVAR 21
15532: PUSH
15533: LD_INT 0
15535: ST_TO_ADDR
// uc_side := 0 ;
15536: LD_ADDR_OWVAR 20
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15544: LD_ADDR_OWVAR 29
15548: PUSH
15549: LD_INT 12
15551: PUSH
15552: LD_INT 12
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: ST_TO_ADDR
// hc_agressivity := 20 ;
15559: LD_ADDR_OWVAR 35
15563: PUSH
15564: LD_INT 20
15566: ST_TO_ADDR
// hc_class := class_tiger ;
15567: LD_ADDR_OWVAR 28
15571: PUSH
15572: LD_INT 14
15574: ST_TO_ADDR
// hc_gallery :=  ;
15575: LD_ADDR_OWVAR 33
15579: PUSH
15580: LD_STRING 
15582: ST_TO_ADDR
// hc_name :=  ;
15583: LD_ADDR_OWVAR 26
15587: PUSH
15588: LD_STRING 
15590: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15591: CALL_OW 44
15595: PPUSH
15596: LD_INT 0
15598: PPUSH
15599: CALL_OW 51
// end ;
15603: GO 15525
15605: POP
15606: POP
// end ;
15607: PPOPN 1
15609: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15610: LD_EXP 20
15614: IFFALSE 15622
15616: PUSH
15617: LD_EXP 40
15621: AND
15622: IFFALSE 15631
15624: GO 15626
15626: DISABLE
// StreamSibBomb ;
15627: CALL 15632 0 0
15631: END
// export function StreamSibBomb ; var i , x , y ; begin
15632: LD_INT 0
15634: PPUSH
15635: PPUSH
15636: PPUSH
15637: PPUSH
// result := false ;
15638: LD_ADDR_VAR 0 1
15642: PUSH
15643: LD_INT 0
15645: ST_TO_ADDR
// for i := 1 to 16 do
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: DOUBLE
15652: LD_INT 1
15654: DEC
15655: ST_TO_ADDR
15656: LD_INT 16
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15859
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 10
15669: PUSH
15670: LD_INT 20
15672: PUSH
15673: LD_INT 30
15675: PUSH
15676: LD_INT 40
15678: PUSH
15679: LD_INT 50
15681: PUSH
15682: LD_INT 60
15684: PUSH
15685: LD_INT 70
15687: PUSH
15688: LD_INT 80
15690: PUSH
15691: LD_INT 90
15693: PUSH
15694: LD_INT 100
15696: PUSH
15697: LD_INT 110
15699: PUSH
15700: LD_INT 120
15702: PUSH
15703: LD_INT 130
15705: PUSH
15706: LD_INT 140
15708: PUSH
15709: LD_INT 150
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 1
15731: PPUSH
15732: LD_INT 15
15734: PPUSH
15735: CALL_OW 12
15739: ARRAY
15740: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: LD_INT 20
15751: PUSH
15752: LD_INT 30
15754: PUSH
15755: LD_INT 40
15757: PUSH
15758: LD_INT 50
15760: PUSH
15761: LD_INT 60
15763: PUSH
15764: LD_INT 70
15766: PUSH
15767: LD_INT 80
15769: PUSH
15770: LD_INT 90
15772: PUSH
15773: LD_INT 100
15775: PUSH
15776: LD_INT 110
15778: PUSH
15779: LD_INT 120
15781: PUSH
15782: LD_INT 130
15784: PUSH
15785: LD_INT 140
15787: PUSH
15788: LD_INT 150
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 1
15810: PPUSH
15811: LD_INT 15
15813: PPUSH
15814: CALL_OW 12
15818: ARRAY
15819: ST_TO_ADDR
// if ValidHex ( x , y ) then
15820: LD_VAR 0 3
15824: PPUSH
15825: LD_VAR 0 4
15829: PPUSH
15830: CALL_OW 488
15834: IFFALSE 15857
// begin result := [ x , y ] ;
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 3
15845: PUSH
15846: LD_VAR 0 4
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// break ;
15855: GO 15859
// end ; end ;
15857: GO 15659
15859: POP
15860: POP
// if result then
15861: LD_VAR 0 1
15865: IFFALSE 15925
// begin ToLua ( playSibBomb() ) ;
15867: LD_STRING playSibBomb()
15869: PPUSH
15870: CALL_OW 559
// wait ( 0 0$14 ) ;
15874: LD_INT 490
15876: PPUSH
15877: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15881: LD_VAR 0 1
15885: PUSH
15886: LD_INT 1
15888: ARRAY
15889: PPUSH
15890: LD_VAR 0 1
15894: PUSH
15895: LD_INT 2
15897: ARRAY
15898: PPUSH
15899: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15903: LD_VAR 0 1
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: LD_VAR 0 1
15916: PUSH
15917: LD_INT 2
15919: ARRAY
15920: PPUSH
15921: CALL_OW 429
// end ; end ;
15925: LD_VAR 0 1
15929: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15930: LD_EXP 20
15934: IFFALSE 15942
15936: PUSH
15937: LD_EXP 42
15941: AND
15942: IFFALSE 15954
15944: GO 15946
15946: DISABLE
// YouLost (  ) ;
15947: LD_STRING 
15949: PPUSH
15950: CALL_OW 104
15954: END
// every 0 0$1 trigger StreamModeActive and sFog do
15955: LD_EXP 20
15959: IFFALSE 15967
15961: PUSH
15962: LD_EXP 41
15966: AND
15967: IFFALSE 15981
15969: GO 15971
15971: DISABLE
// FogOff ( your_side ) ;
15972: LD_OWVAR 2
15976: PPUSH
15977: CALL_OW 344
15981: END
// every 0 0$1 trigger StreamModeActive and sSun do
15982: LD_EXP 20
15986: IFFALSE 15994
15988: PUSH
15989: LD_EXP 43
15993: AND
15994: IFFALSE 16022
15996: GO 15998
15998: DISABLE
// begin solar_recharge_percent := 0 ;
15999: LD_ADDR_OWVAR 79
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16007: LD_INT 10500
16009: PPUSH
16010: CALL_OW 67
// solar_recharge_percent := 100 ;
16014: LD_ADDR_OWVAR 79
16018: PUSH
16019: LD_INT 100
16021: ST_TO_ADDR
// end ;
16022: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16023: LD_EXP 20
16027: IFFALSE 16035
16029: PUSH
16030: LD_EXP 44
16034: AND
16035: IFFALSE 16274
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
16043: PPUSH
16044: PPUSH
// begin tmp := [ ] ;
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: EMPTY
16051: ST_TO_ADDR
// for i := 1 to 6 do
16052: LD_ADDR_VAR 0 1
16056: PUSH
16057: DOUBLE
16058: LD_INT 1
16060: DEC
16061: ST_TO_ADDR
16062: LD_INT 6
16064: PUSH
16065: FOR_TO
16066: IFFALSE 16171
// begin uc_nation := nation_nature ;
16068: LD_ADDR_OWVAR 21
16072: PUSH
16073: LD_INT 0
16075: ST_TO_ADDR
// uc_side := 0 ;
16076: LD_ADDR_OWVAR 20
16080: PUSH
16081: LD_INT 0
16083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16084: LD_ADDR_OWVAR 29
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 12
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: ST_TO_ADDR
// hc_agressivity := 20 ;
16099: LD_ADDR_OWVAR 35
16103: PUSH
16104: LD_INT 20
16106: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16107: LD_ADDR_OWVAR 28
16111: PUSH
16112: LD_INT 17
16114: ST_TO_ADDR
// hc_gallery :=  ;
16115: LD_ADDR_OWVAR 33
16119: PUSH
16120: LD_STRING 
16122: ST_TO_ADDR
// hc_name :=  ;
16123: LD_ADDR_OWVAR 26
16127: PUSH
16128: LD_STRING 
16130: ST_TO_ADDR
// un := CreateHuman ;
16131: LD_ADDR_VAR 0 2
16135: PUSH
16136: CALL_OW 44
16140: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16141: LD_VAR 0 2
16145: PPUSH
16146: LD_INT 1
16148: PPUSH
16149: CALL_OW 51
// tmp := tmp ^ un ;
16153: LD_ADDR_VAR 0 3
16157: PUSH
16158: LD_VAR 0 3
16162: PUSH
16163: LD_VAR 0 2
16167: ADD
16168: ST_TO_ADDR
// end ;
16169: GO 16065
16171: POP
16172: POP
// repeat wait ( 0 0$1 ) ;
16173: LD_INT 35
16175: PPUSH
16176: CALL_OW 67
// for un in tmp do
16180: LD_ADDR_VAR 0 2
16184: PUSH
16185: LD_VAR 0 3
16189: PUSH
16190: FOR_IN
16191: IFFALSE 16265
// begin if IsDead ( un ) then
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 301
16202: IFFALSE 16222
// begin tmp := tmp diff un ;
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: LD_VAR 0 3
16213: PUSH
16214: LD_VAR 0 2
16218: DIFF
16219: ST_TO_ADDR
// continue ;
16220: GO 16190
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16222: LD_VAR 0 2
16226: PPUSH
16227: LD_INT 3
16229: PUSH
16230: LD_INT 22
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 69
16248: PPUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 74
16258: PPUSH
16259: CALL_OW 115
// end ;
16263: GO 16190
16265: POP
16266: POP
// until not tmp ;
16267: LD_VAR 0 3
16271: NOT
16272: IFFALSE 16173
// end ;
16274: PPOPN 3
16276: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16277: LD_EXP 20
16281: IFFALSE 16289
16283: PUSH
16284: LD_EXP 45
16288: AND
16289: IFFALSE 16343
16291: GO 16293
16293: DISABLE
// begin ToLua ( displayTroll(); ) ;
16294: LD_STRING displayTroll();
16296: PPUSH
16297: CALL_OW 559
// wait ( 3 3$00 ) ;
16301: LD_INT 6300
16303: PPUSH
16304: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16308: LD_STRING hideTroll();
16310: PPUSH
16311: CALL_OW 559
// wait ( 1 1$00 ) ;
16315: LD_INT 2100
16317: PPUSH
16318: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16322: LD_STRING displayTroll();
16324: PPUSH
16325: CALL_OW 559
// wait ( 1 1$00 ) ;
16329: LD_INT 2100
16331: PPUSH
16332: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16336: LD_STRING hideTroll();
16338: PPUSH
16339: CALL_OW 559
// end ;
16343: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16344: LD_EXP 20
16348: IFFALSE 16356
16350: PUSH
16351: LD_EXP 46
16355: AND
16356: IFFALSE 16419
16358: GO 16360
16360: DISABLE
16361: LD_INT 0
16363: PPUSH
// begin p := 0 ;
16364: LD_ADDR_VAR 0 1
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// repeat game_speed := 1 ;
16372: LD_ADDR_OWVAR 65
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16380: LD_INT 35
16382: PPUSH
16383: CALL_OW 67
// p := p + 1 ;
16387: LD_ADDR_VAR 0 1
16391: PUSH
16392: LD_VAR 0 1
16396: PUSH
16397: LD_INT 1
16399: PLUS
16400: ST_TO_ADDR
// until p >= 60 ;
16401: LD_VAR 0 1
16405: PUSH
16406: LD_INT 60
16408: GREATEREQUAL
16409: IFFALSE 16372
// game_speed := 4 ;
16411: LD_ADDR_OWVAR 65
16415: PUSH
16416: LD_INT 4
16418: ST_TO_ADDR
// end ;
16419: PPOPN 1
16421: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16422: LD_EXP 20
16426: IFFALSE 16434
16428: PUSH
16429: LD_EXP 47
16433: AND
16434: IFFALSE 16580
16436: GO 16438
16438: DISABLE
16439: LD_INT 0
16441: PPUSH
16442: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: ST_TO_ADDR
// if not depot then
16497: LD_VAR 0 1
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 16580
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_VAR 0 1
16515: PUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 12
16528: ARRAY
16529: PPUSH
16530: CALL_OW 274
16534: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16535: LD_VAR 0 2
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: LD_INT 0
16545: PPUSH
16546: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 2
16557: PPUSH
16558: LD_INT 0
16560: PPUSH
16561: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_INT 3
16572: PPUSH
16573: LD_INT 0
16575: PPUSH
16576: CALL_OW 277
// end ;
16580: PPOPN 2
16582: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16583: LD_EXP 20
16587: IFFALSE 16595
16589: PUSH
16590: LD_EXP 48
16594: AND
16595: IFFALSE 16692
16597: GO 16599
16599: DISABLE
16600: LD_INT 0
16602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 23
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: PPUSH
16652: CALL_OW 69
16656: ST_TO_ADDR
// if not tmp then
16657: LD_VAR 0 1
16661: NOT
16662: IFFALSE 16666
// exit ;
16664: GO 16692
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16666: LD_VAR 0 1
16670: PUSH
16671: LD_INT 1
16673: PPUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: CALL_OW 12
16683: ARRAY
16684: PPUSH
16685: LD_INT 200
16687: PPUSH
16688: CALL_OW 234
// end ;
16692: PPOPN 1
16694: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16695: LD_EXP 20
16699: IFFALSE 16707
16701: PUSH
16702: LD_EXP 49
16706: AND
16707: IFFALSE 16786
16709: GO 16711
16711: DISABLE
16712: LD_INT 0
16714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16715: LD_ADDR_VAR 0 1
16719: PUSH
16720: LD_INT 22
16722: PUSH
16723: LD_OWVAR 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 1
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16760: LD_VAR 0 1
16764: PUSH
16765: LD_INT 1
16767: PPUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 12
16777: ARRAY
16778: PPUSH
16779: LD_INT 60
16781: PPUSH
16782: CALL_OW 234
// end ;
16786: PPOPN 1
16788: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16789: LD_EXP 20
16793: IFFALSE 16801
16795: PUSH
16796: LD_EXP 50
16800: AND
16801: IFFALSE 16900
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// begin enable ;
16810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16811: LD_ADDR_VAR 0 1
16815: PUSH
16816: LD_INT 22
16818: PUSH
16819: LD_OWVAR 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 61
16830: PUSH
16831: EMPTY
16832: LIST
16833: PUSH
16834: LD_INT 33
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 69
16853: ST_TO_ADDR
// if not tmp then
16854: LD_VAR 0 1
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 16900
// for i in tmp do
16863: LD_ADDR_VAR 0 2
16867: PUSH
16868: LD_VAR 0 1
16872: PUSH
16873: FOR_IN
16874: IFFALSE 16898
// if IsControledBy ( i ) then
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 312
16885: IFFALSE 16896
// ComUnlink ( i ) ;
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 136
16896: GO 16873
16898: POP
16899: POP
// end ;
16900: PPOPN 2
16902: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16903: LD_EXP 20
16907: IFFALSE 16915
16909: PUSH
16910: LD_EXP 51
16914: AND
16915: IFFALSE 17055
16917: GO 16919
16919: DISABLE
16920: LD_INT 0
16922: PPUSH
16923: PPUSH
// begin ToLua ( displayPowell(); ) ;
16924: LD_STRING displayPowell();
16926: PPUSH
16927: CALL_OW 559
// uc_side := 0 ;
16931: LD_ADDR_OWVAR 20
16935: PUSH
16936: LD_INT 0
16938: ST_TO_ADDR
// uc_nation := 2 ;
16939: LD_ADDR_OWVAR 21
16943: PUSH
16944: LD_INT 2
16946: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16947: LD_ADDR_OWVAR 37
16951: PUSH
16952: LD_INT 14
16954: ST_TO_ADDR
// vc_engine := engine_siberite ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 3
16962: ST_TO_ADDR
// vc_control := control_apeman ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 5
16970: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 29
16978: ST_TO_ADDR
// un := CreateVehicle ;
16979: LD_ADDR_VAR 0 2
16983: PUSH
16984: CALL_OW 45
16988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16989: LD_VAR 0 2
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17001: LD_INT 35
17003: PPUSH
17004: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 22
17015: PUSH
17016: LD_OWVAR 2
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PPUSH
17025: CALL_OW 69
17029: PPUSH
17030: LD_VAR 0 2
17034: PPUSH
17035: CALL_OW 74
17039: PPUSH
17040: CALL_OW 115
// until IsDead ( un ) ;
17044: LD_VAR 0 2
17048: PPUSH
17049: CALL_OW 301
17053: IFFALSE 17001
// end ;
17055: PPOPN 2
17057: END
// every 0 0$1 trigger StreamModeActive and sStu do
17058: LD_EXP 20
17062: IFFALSE 17070
17064: PUSH
17065: LD_EXP 59
17069: AND
17070: IFFALSE 17086
17072: GO 17074
17074: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17075: LD_STRING displayStucuk();
17077: PPUSH
17078: CALL_OW 559
// ResetFog ;
17082: CALL_OW 335
// end ;
17086: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17087: LD_EXP 20
17091: IFFALSE 17099
17093: PUSH
17094: LD_EXP 52
17098: AND
17099: IFFALSE 17240
17101: GO 17103
17103: DISABLE
17104: LD_INT 0
17106: PPUSH
17107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_OWVAR 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: ST_TO_ADDR
// if not tmp then
17144: LD_VAR 0 2
17148: NOT
17149: IFFALSE 17153
// exit ;
17151: GO 17240
// un := tmp [ rand ( 1 , tmp ) ] ;
17153: LD_ADDR_VAR 0 1
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: LD_INT 1
17165: PPUSH
17166: LD_VAR 0 2
17170: PPUSH
17171: CALL_OW 12
17175: ARRAY
17176: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17177: LD_VAR 0 1
17181: PPUSH
17182: LD_INT 0
17184: PPUSH
17185: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17189: LD_VAR 0 1
17193: PPUSH
17194: LD_OWVAR 3
17198: PUSH
17199: LD_VAR 0 1
17203: DIFF
17204: PPUSH
17205: LD_VAR 0 1
17209: PPUSH
17210: CALL_OW 74
17214: PPUSH
17215: CALL_OW 115
// wait ( 0 0$20 ) ;
17219: LD_INT 700
17221: PPUSH
17222: CALL_OW 67
// SetSide ( un , your_side ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_OWVAR 2
17235: PPUSH
17236: CALL_OW 235
// end ;
17240: PPOPN 2
17242: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17243: LD_EXP 20
17247: IFFALSE 17255
17249: PUSH
17250: LD_EXP 53
17254: AND
17255: IFFALSE 17361
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_OWVAR 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: LD_INT 30
17285: PUSH
17286: LD_INT 0
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 30
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if not depot then
17317: LD_VAR 0 1
17321: NOT
17322: IFFALSE 17326
// exit ;
17324: GO 17361
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17326: LD_VAR 0 1
17330: PUSH
17331: LD_INT 1
17333: ARRAY
17334: PPUSH
17335: CALL_OW 250
17339: PPUSH
17340: LD_VAR 0 1
17344: PUSH
17345: LD_INT 1
17347: ARRAY
17348: PPUSH
17349: CALL_OW 251
17353: PPUSH
17354: LD_INT 70
17356: PPUSH
17357: CALL_OW 495
// end ;
17361: PPOPN 1
17363: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17364: LD_EXP 20
17368: IFFALSE 17376
17370: PUSH
17371: LD_EXP 54
17375: AND
17376: IFFALSE 17587
17378: GO 17380
17380: DISABLE
17381: LD_INT 0
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17388: LD_ADDR_VAR 0 5
17392: PUSH
17393: LD_INT 22
17395: PUSH
17396: LD_OWVAR 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 21
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: ST_TO_ADDR
// if not tmp then
17424: LD_VAR 0 5
17428: NOT
17429: IFFALSE 17433
// exit ;
17431: GO 17587
// for i in tmp do
17433: LD_ADDR_VAR 0 1
17437: PUSH
17438: LD_VAR 0 5
17442: PUSH
17443: FOR_IN
17444: IFFALSE 17585
// begin d := rand ( 0 , 5 ) ;
17446: LD_ADDR_VAR 0 4
17450: PUSH
17451: LD_INT 0
17453: PPUSH
17454: LD_INT 5
17456: PPUSH
17457: CALL_OW 12
17461: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 250
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: LD_INT 3
17484: PPUSH
17485: LD_INT 12
17487: PPUSH
17488: CALL_OW 12
17492: PPUSH
17493: CALL_OW 272
17497: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17498: LD_ADDR_VAR 0 3
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 251
17512: PPUSH
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_INT 3
17520: PPUSH
17521: LD_INT 12
17523: PPUSH
17524: CALL_OW 12
17528: PPUSH
17529: CALL_OW 273
17533: ST_TO_ADDR
// if ValidHex ( x , y ) then
17534: LD_VAR 0 2
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL_OW 488
17548: IFFALSE 17583
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17550: LD_VAR 0 1
17554: PPUSH
17555: LD_VAR 0 2
17559: PPUSH
17560: LD_VAR 0 3
17564: PPUSH
17565: LD_INT 3
17567: PPUSH
17568: LD_INT 6
17570: PPUSH
17571: CALL_OW 12
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 483
// end ;
17583: GO 17443
17585: POP
17586: POP
// end ;
17587: PPOPN 5
17589: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17590: LD_EXP 20
17594: IFFALSE 17602
17596: PUSH
17597: LD_EXP 55
17601: AND
17602: IFFALSE 17696
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17611: LD_ADDR_VAR 0 2
17615: PUSH
17616: LD_INT 22
17618: PUSH
17619: LD_OWVAR 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 32
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 21
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: ST_TO_ADDR
// if not tmp then
17658: LD_VAR 0 2
17662: NOT
17663: IFFALSE 17667
// exit ;
17665: GO 17696
// for i in tmp do
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_VAR 0 2
17676: PUSH
17677: FOR_IN
17678: IFFALSE 17694
// SetFuel ( i , 0 ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 0
17687: PPUSH
17688: CALL_OW 240
17692: GO 17677
17694: POP
17695: POP
// end ;
17696: PPOPN 2
17698: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17699: LD_EXP 20
17703: IFFALSE 17711
17705: PUSH
17706: LD_EXP 56
17710: AND
17711: IFFALSE 17777
17713: GO 17715
17715: DISABLE
17716: LD_INT 0
17718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17719: LD_ADDR_VAR 0 1
17723: PUSH
17724: LD_INT 22
17726: PUSH
17727: LD_OWVAR 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 30
17738: PUSH
17739: LD_INT 29
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PPUSH
17750: CALL_OW 69
17754: ST_TO_ADDR
// if not tmp then
17755: LD_VAR 0 1
17759: NOT
17760: IFFALSE 17764
// exit ;
17762: GO 17777
// DestroyUnit ( tmp [ 1 ] ) ;
17764: LD_VAR 0 1
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: PPUSH
17773: CALL_OW 65
// end ;
17777: PPOPN 1
17779: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17780: LD_EXP 20
17784: IFFALSE 17792
17786: PUSH
17787: LD_EXP 58
17791: AND
17792: IFFALSE 17921
17794: GO 17796
17796: DISABLE
17797: LD_INT 0
17799: PPUSH
// begin uc_side := 0 ;
17800: LD_ADDR_OWVAR 20
17804: PUSH
17805: LD_INT 0
17807: ST_TO_ADDR
// uc_nation := nation_arabian ;
17808: LD_ADDR_OWVAR 21
17812: PUSH
17813: LD_INT 2
17815: ST_TO_ADDR
// hc_gallery :=  ;
17816: LD_ADDR_OWVAR 33
17820: PUSH
17821: LD_STRING 
17823: ST_TO_ADDR
// hc_name :=  ;
17824: LD_ADDR_OWVAR 26
17828: PUSH
17829: LD_STRING 
17831: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17832: LD_INT 1
17834: PPUSH
17835: LD_INT 11
17837: PPUSH
17838: LD_INT 10
17840: PPUSH
17841: CALL_OW 380
// un := CreateHuman ;
17845: LD_ADDR_VAR 0 1
17849: PUSH
17850: CALL_OW 44
17854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17867: LD_INT 35
17869: PPUSH
17870: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17874: LD_VAR 0 1
17878: PPUSH
17879: LD_INT 22
17881: PUSH
17882: LD_OWVAR 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: PPUSH
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 74
17905: PPUSH
17906: CALL_OW 115
// until IsDead ( un ) ;
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 301
17919: IFFALSE 17867
// end ;
17921: PPOPN 1
17923: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17924: LD_EXP 20
17928: IFFALSE 17936
17930: PUSH
17931: LD_EXP 60
17935: AND
17936: IFFALSE 17948
17938: GO 17940
17940: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17941: LD_STRING earthquake(getX(game), 0, 32)
17943: PPUSH
17944: CALL_OW 559
17948: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17949: LD_EXP 20
17953: IFFALSE 17961
17955: PUSH
17956: LD_EXP 61
17960: AND
17961: IFFALSE 18052
17963: GO 17965
17965: DISABLE
17966: LD_INT 0
17968: PPUSH
// begin enable ;
17969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17970: LD_ADDR_VAR 0 1
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_OWVAR 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 21
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 33
17999: PUSH
18000: LD_INT 3
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 69
18016: ST_TO_ADDR
// if not tmp then
18017: LD_VAR 0 1
18021: NOT
18022: IFFALSE 18026
// exit ;
18024: GO 18052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18026: LD_VAR 0 1
18030: PUSH
18031: LD_INT 1
18033: PPUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 12
18043: ARRAY
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: CALL_OW 234
// end ;
18052: PPOPN 1
18054: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18055: LD_EXP 20
18059: IFFALSE 18067
18061: PUSH
18062: LD_EXP 62
18066: AND
18067: IFFALSE 18208
18069: GO 18071
18071: DISABLE
18072: LD_INT 0
18074: PPUSH
18075: PPUSH
18076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18077: LD_ADDR_VAR 0 3
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_OWVAR 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 25
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 69
18112: ST_TO_ADDR
// if not tmp then
18113: LD_VAR 0 3
18117: NOT
18118: IFFALSE 18122
// exit ;
18120: GO 18208
// un := tmp [ rand ( 1 , tmp ) ] ;
18122: LD_ADDR_VAR 0 2
18126: PUSH
18127: LD_VAR 0 3
18131: PUSH
18132: LD_INT 1
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: CALL_OW 12
18144: ARRAY
18145: ST_TO_ADDR
// if Crawls ( un ) then
18146: LD_VAR 0 2
18150: PPUSH
18151: CALL_OW 318
18155: IFFALSE 18166
// ComWalk ( un ) ;
18157: LD_VAR 0 2
18161: PPUSH
18162: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18166: LD_VAR 0 2
18170: PPUSH
18171: LD_INT 9
18173: PPUSH
18174: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18178: LD_INT 28
18180: PPUSH
18181: LD_OWVAR 2
18185: PPUSH
18186: LD_INT 2
18188: PPUSH
18189: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18193: LD_INT 29
18195: PPUSH
18196: LD_OWVAR 2
18200: PPUSH
18201: LD_INT 2
18203: PPUSH
18204: CALL_OW 322
// end ;
18208: PPOPN 3
18210: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18211: LD_EXP 20
18215: IFFALSE 18223
18217: PUSH
18218: LD_EXP 63
18222: AND
18223: IFFALSE 18334
18225: GO 18227
18227: DISABLE
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
18232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: LD_INT 22
18240: PUSH
18241: LD_OWVAR 2
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PPUSH
18264: CALL_OW 69
18268: ST_TO_ADDR
// if not tmp then
18269: LD_VAR 0 3
18273: NOT
18274: IFFALSE 18278
// exit ;
18276: GO 18334
// un := tmp [ rand ( 1 , tmp ) ] ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_VAR 0 3
18287: PUSH
18288: LD_INT 1
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: CALL_OW 12
18300: ARRAY
18301: ST_TO_ADDR
// if Crawls ( un ) then
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 318
18311: IFFALSE 18322
// ComWalk ( un ) ;
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18322: LD_VAR 0 2
18326: PPUSH
18327: LD_INT 8
18329: PPUSH
18330: CALL_OW 336
// end ;
18334: PPOPN 3
18336: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18337: LD_EXP 20
18341: IFFALSE 18349
18343: PUSH
18344: LD_EXP 64
18348: AND
18349: IFFALSE 18493
18351: GO 18353
18353: DISABLE
18354: LD_INT 0
18356: PPUSH
18357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18358: LD_ADDR_VAR 0 2
18362: PUSH
18363: LD_INT 22
18365: PUSH
18366: LD_OWVAR 2
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 21
18377: PUSH
18378: LD_INT 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 34
18390: PUSH
18391: LD_INT 12
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 34
18400: PUSH
18401: LD_INT 51
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 34
18410: PUSH
18411: LD_INT 32
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if not tmp then
18434: LD_VAR 0 2
18438: NOT
18439: IFFALSE 18443
// exit ;
18441: GO 18493
// for i in tmp do
18443: LD_ADDR_VAR 0 1
18447: PUSH
18448: LD_VAR 0 2
18452: PUSH
18453: FOR_IN
18454: IFFALSE 18491
// if GetCargo ( i , mat_artifact ) = 0 then
18456: LD_VAR 0 1
18460: PPUSH
18461: LD_INT 4
18463: PPUSH
18464: CALL_OW 289
18468: PUSH
18469: LD_INT 0
18471: EQUAL
18472: IFFALSE 18489
// SetCargo ( i , mat_siberit , 100 ) ;
18474: LD_VAR 0 1
18478: PPUSH
18479: LD_INT 3
18481: PPUSH
18482: LD_INT 100
18484: PPUSH
18485: CALL_OW 290
18489: GO 18453
18491: POP
18492: POP
// end ;
18493: PPOPN 2
18495: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18496: LD_EXP 20
18500: IFFALSE 18508
18502: PUSH
18503: LD_EXP 65
18507: AND
18508: IFFALSE 18691
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18517: LD_ADDR_VAR 0 2
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_OWVAR 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// if not tmp then
18539: LD_VAR 0 2
18543: NOT
18544: IFFALSE 18548
// exit ;
18546: GO 18691
// for i := 1 to 2 do
18548: LD_ADDR_VAR 0 1
18552: PUSH
18553: DOUBLE
18554: LD_INT 1
18556: DEC
18557: ST_TO_ADDR
18558: LD_INT 2
18560: PUSH
18561: FOR_TO
18562: IFFALSE 18689
// begin uc_side := your_side ;
18564: LD_ADDR_OWVAR 20
18568: PUSH
18569: LD_OWVAR 2
18573: ST_TO_ADDR
// uc_nation := nation_american ;
18574: LD_ADDR_OWVAR 21
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
// vc_chassis := us_morphling ;
18582: LD_ADDR_OWVAR 37
18586: PUSH
18587: LD_INT 5
18589: ST_TO_ADDR
// vc_engine := engine_siberite ;
18590: LD_ADDR_OWVAR 39
18594: PUSH
18595: LD_INT 3
18597: ST_TO_ADDR
// vc_control := control_computer ;
18598: LD_ADDR_OWVAR 38
18602: PUSH
18603: LD_INT 3
18605: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18606: LD_ADDR_OWVAR 40
18610: PUSH
18611: LD_INT 10
18613: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18614: LD_VAR 0 2
18618: PUSH
18619: LD_INT 1
18621: ARRAY
18622: PPUSH
18623: CALL_OW 310
18627: NOT
18628: IFFALSE 18675
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18630: CALL_OW 45
18634: PPUSH
18635: LD_VAR 0 2
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: CALL_OW 250
18648: PPUSH
18649: LD_VAR 0 2
18653: PUSH
18654: LD_INT 1
18656: ARRAY
18657: PPUSH
18658: CALL_OW 251
18662: PPUSH
18663: LD_INT 12
18665: PPUSH
18666: LD_INT 1
18668: PPUSH
18669: CALL_OW 50
18673: GO 18687
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18675: CALL_OW 45
18679: PPUSH
18680: LD_INT 1
18682: PPUSH
18683: CALL_OW 51
// end ;
18687: GO 18561
18689: POP
18690: POP
// end ;
18691: PPOPN 2
18693: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18694: LD_EXP 20
18698: IFFALSE 18706
18700: PUSH
18701: LD_EXP 66
18705: AND
18706: IFFALSE 18928
18708: GO 18710
18710: DISABLE
18711: LD_INT 0
18713: PPUSH
18714: PPUSH
18715: PPUSH
18716: PPUSH
18717: PPUSH
18718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18719: LD_ADDR_VAR 0 6
18723: PUSH
18724: LD_INT 22
18726: PUSH
18727: LD_OWVAR 2
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: LD_INT 23
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 6
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18928
// s1 := rand ( 1 , 4 ) ;
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_INT 4
18792: PPUSH
18793: CALL_OW 12
18797: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18798: LD_ADDR_VAR 0 4
18802: PUSH
18803: LD_VAR 0 6
18807: PUSH
18808: LD_INT 1
18810: ARRAY
18811: PPUSH
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 259
18821: ST_TO_ADDR
// if s1 = 1 then
18822: LD_VAR 0 2
18826: PUSH
18827: LD_INT 1
18829: EQUAL
18830: IFFALSE 18850
// s2 := rand ( 2 , 4 ) else
18832: LD_ADDR_VAR 0 3
18836: PUSH
18837: LD_INT 2
18839: PPUSH
18840: LD_INT 4
18842: PPUSH
18843: CALL_OW 12
18847: ST_TO_ADDR
18848: GO 18858
// s2 := 1 ;
18850: LD_ADDR_VAR 0 3
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18858: LD_ADDR_VAR 0 5
18862: PUSH
18863: LD_VAR 0 6
18867: PUSH
18868: LD_INT 1
18870: ARRAY
18871: PPUSH
18872: LD_VAR 0 3
18876: PPUSH
18877: CALL_OW 259
18881: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18882: LD_VAR 0 6
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: PPUSH
18891: LD_VAR 0 2
18895: PPUSH
18896: LD_VAR 0 5
18900: PPUSH
18901: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18905: LD_VAR 0 6
18909: PUSH
18910: LD_INT 1
18912: ARRAY
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_VAR 0 4
18923: PPUSH
18924: CALL_OW 237
// end ;
18928: PPOPN 6
18930: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18931: LD_EXP 20
18935: IFFALSE 18943
18937: PUSH
18938: LD_EXP 67
18942: AND
18943: IFFALSE 19022
18945: GO 18947
18947: DISABLE
18948: LD_INT 0
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18951: LD_ADDR_VAR 0 1
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 30
18970: PUSH
18971: LD_INT 3
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 1
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18996: LD_VAR 0 1
19000: PUSH
19001: LD_INT 1
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 12
19013: ARRAY
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: CALL_OW 234
// end ;
19022: PPOPN 1
19024: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19025: LD_EXP 20
19029: IFFALSE 19037
19031: PUSH
19032: LD_EXP 68
19036: AND
19037: IFFALSE 19149
19039: GO 19041
19041: DISABLE
19042: LD_INT 0
19044: PPUSH
19045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19046: LD_ADDR_VAR 0 2
19050: PUSH
19051: LD_INT 22
19053: PUSH
19054: LD_OWVAR 2
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 27
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 30
19078: PUSH
19079: LD_INT 26
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: LD_INT 28
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PPUSH
19106: CALL_OW 69
19110: ST_TO_ADDR
// if not tmp then
19111: LD_VAR 0 2
19115: NOT
19116: IFFALSE 19120
// exit ;
19118: GO 19149
// for i in tmp do
19120: LD_ADDR_VAR 0 1
19124: PUSH
19125: LD_VAR 0 2
19129: PUSH
19130: FOR_IN
19131: IFFALSE 19147
// SetLives ( i , 1 ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 234
19145: GO 19130
19147: POP
19148: POP
// end ;
19149: PPOPN 2
19151: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19152: LD_EXP 20
19156: IFFALSE 19164
19158: PUSH
19159: LD_EXP 69
19163: AND
19164: IFFALSE 19451
19166: GO 19168
19168: DISABLE
19169: LD_INT 0
19171: PPUSH
19172: PPUSH
19173: PPUSH
// begin i := rand ( 1 , 7 ) ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 1
19181: PPUSH
19182: LD_INT 7
19184: PPUSH
19185: CALL_OW 12
19189: ST_TO_ADDR
// case i of 1 :
19190: LD_VAR 0 1
19194: PUSH
19195: LD_INT 1
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19213
19203: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19204: LD_STRING earthquake(getX(game), 0, 32)
19206: PPUSH
19207: CALL_OW 559
19211: GO 19451
19213: LD_INT 2
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19235
19221: POP
// begin ToLua ( displayStucuk(); ) ;
19222: LD_STRING displayStucuk();
19224: PPUSH
19225: CALL_OW 559
// ResetFog ;
19229: CALL_OW 335
// end ; 3 :
19233: GO 19451
19235: LD_INT 3
19237: DOUBLE
19238: EQUAL
19239: IFTRUE 19243
19241: GO 19347
19243: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19244: LD_ADDR_VAR 0 2
19248: PUSH
19249: LD_INT 22
19251: PUSH
19252: LD_OWVAR 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 25
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: ST_TO_ADDR
// if not tmp then
19280: LD_VAR 0 2
19284: NOT
19285: IFFALSE 19289
// exit ;
19287: GO 19451
// un := tmp [ rand ( 1 , tmp ) ] ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_VAR 0 2
19298: PUSH
19299: LD_INT 1
19301: PPUSH
19302: LD_VAR 0 2
19306: PPUSH
19307: CALL_OW 12
19311: ARRAY
19312: ST_TO_ADDR
// if Crawls ( un ) then
19313: LD_VAR 0 3
19317: PPUSH
19318: CALL_OW 318
19322: IFFALSE 19333
// ComWalk ( un ) ;
19324: LD_VAR 0 3
19328: PPUSH
19329: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19333: LD_VAR 0 3
19337: PPUSH
19338: LD_INT 8
19340: PPUSH
19341: CALL_OW 336
// end ; 4 :
19345: GO 19451
19347: LD_INT 4
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19429
19355: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19356: LD_ADDR_VAR 0 2
19360: PUSH
19361: LD_INT 22
19363: PUSH
19364: LD_OWVAR 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 30
19375: PUSH
19376: LD_INT 29
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: ST_TO_ADDR
// if not tmp then
19392: LD_VAR 0 2
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19451
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19401: LD_VAR 0 2
19405: PUSH
19406: LD_INT 1
19408: ARRAY
19409: PPUSH
19410: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19414: LD_VAR 0 2
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PPUSH
19423: CALL_OW 65
// end ; 5 .. 7 :
19427: GO 19451
19429: LD_INT 5
19431: DOUBLE
19432: GREATEREQUAL
19433: IFFALSE 19441
19435: LD_INT 7
19437: DOUBLE
19438: LESSEQUAL
19439: IFTRUE 19443
19441: GO 19450
19443: POP
// StreamSibBomb ; end ;
19444: CALL 15632 0 0
19448: GO 19451
19450: POP
// end ;
19451: PPOPN 3
19453: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19454: LD_EXP 20
19458: IFFALSE 19466
19460: PUSH
19461: LD_EXP 70
19465: AND
19466: IFFALSE 19622
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
19475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19476: LD_ADDR_VAR 0 2
19480: PUSH
19481: LD_INT 81
19483: PUSH
19484: LD_OWVAR 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 21
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 21
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PPUSH
19525: CALL_OW 69
19529: ST_TO_ADDR
// if not tmp then
19530: LD_VAR 0 2
19534: NOT
19535: IFFALSE 19539
// exit ;
19537: GO 19622
// p := 0 ;
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: LD_INT 0
19546: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19547: LD_INT 35
19549: PPUSH
19550: CALL_OW 67
// p := p + 1 ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 1
19566: PLUS
19567: ST_TO_ADDR
// for i in tmp do
19568: LD_ADDR_VAR 0 1
19572: PUSH
19573: LD_VAR 0 2
19577: PUSH
19578: FOR_IN
19579: IFFALSE 19610
// if GetLives ( i ) < 1000 then
19581: LD_VAR 0 1
19585: PPUSH
19586: CALL_OW 256
19590: PUSH
19591: LD_INT 1000
19593: LESS
19594: IFFALSE 19608
// SetLives ( i , 1000 ) ;
19596: LD_VAR 0 1
19600: PPUSH
19601: LD_INT 1000
19603: PPUSH
19604: CALL_OW 234
19608: GO 19578
19610: POP
19611: POP
// until p > 20 ;
19612: LD_VAR 0 3
19616: PUSH
19617: LD_INT 20
19619: GREATER
19620: IFFALSE 19547
// end ;
19622: PPOPN 3
19624: END
// every 0 0$1 trigger StreamModeActive and sTime do
19625: LD_EXP 20
19629: IFFALSE 19637
19631: PUSH
19632: LD_EXP 71
19636: AND
19637: IFFALSE 19672
19639: GO 19641
19641: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19642: LD_INT 28
19644: PPUSH
19645: LD_OWVAR 2
19649: PPUSH
19650: LD_INT 2
19652: PPUSH
19653: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19657: LD_INT 30
19659: PPUSH
19660: LD_OWVAR 2
19664: PPUSH
19665: LD_INT 2
19667: PPUSH
19668: CALL_OW 322
// end ;
19672: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19673: LD_EXP 20
19677: IFFALSE 19685
19679: PUSH
19680: LD_EXP 72
19684: AND
19685: IFFALSE 19806
19687: GO 19689
19689: DISABLE
19690: LD_INT 0
19692: PPUSH
19693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19694: LD_ADDR_VAR 0 2
19698: PUSH
19699: LD_INT 22
19701: PUSH
19702: LD_OWVAR 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 3
19723: PUSH
19724: LD_INT 23
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: ST_TO_ADDR
// if not tmp then
19748: LD_VAR 0 2
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19806
// for i in tmp do
19757: LD_ADDR_VAR 0 1
19761: PUSH
19762: LD_VAR 0 2
19766: PUSH
19767: FOR_IN
19768: IFFALSE 19804
// begin if Crawls ( i ) then
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 318
19779: IFFALSE 19790
// ComWalk ( i ) ;
19781: LD_VAR 0 1
19785: PPUSH
19786: CALL_OW 138
// SetClass ( i , 2 ) ;
19790: LD_VAR 0 1
19794: PPUSH
19795: LD_INT 2
19797: PPUSH
19798: CALL_OW 336
// end ;
19802: GO 19767
19804: POP
19805: POP
// end ;
19806: PPOPN 2
19808: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19809: LD_EXP 20
19813: IFFALSE 19821
19815: PUSH
19816: LD_EXP 73
19820: AND
19821: IFFALSE 20111
19823: GO 19825
19825: DISABLE
19826: LD_INT 0
19828: PPUSH
19829: PPUSH
19830: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19831: LD_OWVAR 2
19835: PPUSH
19836: LD_INT 9
19838: PPUSH
19839: LD_INT 1
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19849: LD_INT 9
19851: PPUSH
19852: LD_OWVAR 2
19856: PPUSH
19857: CALL_OW 343
// uc_side := 9 ;
19861: LD_ADDR_OWVAR 20
19865: PUSH
19866: LD_INT 9
19868: ST_TO_ADDR
// uc_nation := 2 ;
19869: LD_ADDR_OWVAR 21
19873: PUSH
19874: LD_INT 2
19876: ST_TO_ADDR
// hc_name := Dark Warrior ;
19877: LD_ADDR_OWVAR 26
19881: PUSH
19882: LD_STRING Dark Warrior
19884: ST_TO_ADDR
// hc_gallery :=  ;
19885: LD_ADDR_OWVAR 33
19889: PUSH
19890: LD_STRING 
19892: ST_TO_ADDR
// hc_noskilllimit := true ;
19893: LD_ADDR_OWVAR 76
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19901: LD_ADDR_OWVAR 31
19905: PUSH
19906: LD_INT 30
19908: PUSH
19909: LD_INT 30
19911: PUSH
19912: LD_INT 30
19914: PUSH
19915: LD_INT 30
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: ST_TO_ADDR
// un := CreateHuman ;
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: CALL_OW 44
19933: ST_TO_ADDR
// hc_noskilllimit := false ;
19934: LD_ADDR_OWVAR 76
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19942: LD_VAR 0 3
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 51
// ToLua ( playRanger() ) ;
19954: LD_STRING playRanger()
19956: PPUSH
19957: CALL_OW 559
// p := 0 ;
19961: LD_ADDR_VAR 0 2
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19969: LD_INT 35
19971: PPUSH
19972: CALL_OW 67
// p := p + 1 ;
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: LD_VAR 0 2
19985: PUSH
19986: LD_INT 1
19988: PLUS
19989: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19990: LD_VAR 0 3
19994: PPUSH
19995: CALL_OW 256
19999: PUSH
20000: LD_INT 1000
20002: LESS
20003: IFFALSE 20017
// SetLives ( un , 1000 ) ;
20005: LD_VAR 0 3
20009: PPUSH
20010: LD_INT 1000
20012: PPUSH
20013: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20017: LD_VAR 0 3
20021: PPUSH
20022: LD_INT 81
20024: PUSH
20025: LD_OWVAR 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 91
20036: PUSH
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 69
20058: PPUSH
20059: LD_VAR 0 3
20063: PPUSH
20064: CALL_OW 74
20068: PPUSH
20069: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20073: LD_VAR 0 2
20077: PUSH
20078: LD_INT 80
20080: GREATER
20081: IFTRUE 20094
20083: PUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: CALL_OW 301
20093: OR
20094: IFFALSE 19969
// if un then
20096: LD_VAR 0 3
20100: IFFALSE 20111
// RemoveUnit ( un ) ;
20102: LD_VAR 0 3
20106: PPUSH
20107: CALL_OW 64
// end ;
20111: PPOPN 3
20113: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20114: LD_EXP 74
20118: IFFALSE 20234
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
20127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20128: LD_ADDR_VAR 0 2
20132: PUSH
20133: LD_INT 81
20135: PUSH
20136: LD_OWVAR 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 21
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20164: LD_STRING playComputer()
20166: PPUSH
20167: CALL_OW 559
// if not tmp then
20171: LD_VAR 0 2
20175: NOT
20176: IFFALSE 20180
// exit ;
20178: GO 20234
// for i in tmp do
20180: LD_ADDR_VAR 0 1
20184: PUSH
20185: LD_VAR 0 2
20189: PUSH
20190: FOR_IN
20191: IFFALSE 20232
// for j := 1 to 4 do
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: DOUBLE
20199: LD_INT 1
20201: DEC
20202: ST_TO_ADDR
20203: LD_INT 4
20205: PUSH
20206: FOR_TO
20207: IFFALSE 20228
// SetSkill ( i , j , 10 ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_VAR 0 3
20218: PPUSH
20219: LD_INT 10
20221: PPUSH
20222: CALL_OW 237
20226: GO 20206
20228: POP
20229: POP
20230: GO 20190
20232: POP
20233: POP
// end ;
20234: PPOPN 3
20236: END
// every 0 0$1 trigger s30 do var i , tmp ;
20237: LD_EXP 75
20241: IFFALSE 20310
20243: GO 20245
20245: DISABLE
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20250: LD_ADDR_VAR 0 2
20254: PUSH
20255: LD_INT 22
20257: PUSH
20258: LD_OWVAR 2
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PPUSH
20267: CALL_OW 69
20271: ST_TO_ADDR
// if not tmp then
20272: LD_VAR 0 2
20276: NOT
20277: IFFALSE 20281
// exit ;
20279: GO 20310
// for i in tmp do
20281: LD_ADDR_VAR 0 1
20285: PUSH
20286: LD_VAR 0 2
20290: PUSH
20291: FOR_IN
20292: IFFALSE 20308
// SetLives ( i , 300 ) ;
20294: LD_VAR 0 1
20298: PPUSH
20299: LD_INT 300
20301: PPUSH
20302: CALL_OW 234
20306: GO 20291
20308: POP
20309: POP
// end ;
20310: PPOPN 2
20312: END
// every 0 0$1 trigger s60 do var i , tmp ;
20313: LD_EXP 76
20317: IFFALSE 20386
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL_OW 69
20347: ST_TO_ADDR
// if not tmp then
20348: LD_VAR 0 2
20352: NOT
20353: IFFALSE 20357
// exit ;
20355: GO 20386
// for i in tmp do
20357: LD_ADDR_VAR 0 1
20361: PUSH
20362: LD_VAR 0 2
20366: PUSH
20367: FOR_IN
20368: IFFALSE 20384
// SetLives ( i , 600 ) ;
20370: LD_VAR 0 1
20374: PPUSH
20375: LD_INT 600
20377: PPUSH
20378: CALL_OW 234
20382: GO 20367
20384: POP
20385: POP
// end ;
20386: PPOPN 2
20388: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20389: LD_INT 0
20391: PPUSH
// case cmd of 301 :
20392: LD_VAR 0 1
20396: PUSH
20397: LD_INT 301
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20437
20405: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20406: LD_VAR 0 6
20410: PPUSH
20411: LD_VAR 0 7
20415: PPUSH
20416: LD_VAR 0 8
20420: PPUSH
20421: LD_VAR 0 4
20425: PPUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: CALL 21650 0 5
20435: GO 20558
20437: LD_INT 302
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20482
20445: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20446: LD_VAR 0 6
20450: PPUSH
20451: LD_VAR 0 7
20455: PPUSH
20456: LD_VAR 0 8
20460: PPUSH
20461: LD_VAR 0 9
20465: PPUSH
20466: LD_VAR 0 4
20470: PPUSH
20471: LD_VAR 0 5
20475: PPUSH
20476: CALL 21741 0 6
20480: GO 20558
20482: LD_INT 303
20484: DOUBLE
20485: EQUAL
20486: IFTRUE 20490
20488: GO 20527
20490: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20491: LD_VAR 0 6
20495: PPUSH
20496: LD_VAR 0 7
20500: PPUSH
20501: LD_VAR 0 8
20505: PPUSH
20506: LD_VAR 0 9
20510: PPUSH
20511: LD_VAR 0 4
20515: PPUSH
20516: LD_VAR 0 5
20520: PPUSH
20521: CALL 20563 0 6
20525: GO 20558
20527: LD_INT 304
20529: DOUBLE
20530: EQUAL
20531: IFTRUE 20535
20533: GO 20557
20535: POP
// hHackTeleport ( unit , x , y ) ; end ;
20536: LD_VAR 0 2
20540: PPUSH
20541: LD_VAR 0 4
20545: PPUSH
20546: LD_VAR 0 5
20550: PPUSH
20551: CALL 22334 0 3
20555: GO 20558
20557: POP
// end ;
20558: LD_VAR 0 12
20562: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20563: LD_INT 0
20565: PPUSH
20566: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20567: LD_VAR 0 1
20571: PUSH
20572: LD_INT 1
20574: LESS
20575: IFTRUE 20587
20577: PUSH
20578: LD_VAR 0 1
20582: PUSH
20583: LD_INT 3
20585: GREATER
20586: OR
20587: IFTRUE 20605
20589: PUSH
20590: LD_VAR 0 5
20594: PPUSH
20595: LD_VAR 0 6
20599: PPUSH
20600: CALL_OW 428
20604: OR
20605: IFFALSE 20609
// exit ;
20607: GO 21337
// uc_side := your_side ;
20609: LD_ADDR_OWVAR 20
20613: PUSH
20614: LD_OWVAR 2
20618: ST_TO_ADDR
// uc_nation := nation ;
20619: LD_ADDR_OWVAR 21
20623: PUSH
20624: LD_VAR 0 1
20628: ST_TO_ADDR
// bc_level = 1 ;
20629: LD_ADDR_OWVAR 43
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// case btype of 1 :
20637: LD_VAR 0 2
20641: PUSH
20642: LD_INT 1
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20661
20650: POP
// bc_type := b_depot ; 2 :
20651: LD_ADDR_OWVAR 42
20655: PUSH
20656: LD_INT 0
20658: ST_TO_ADDR
20659: GO 21281
20661: LD_INT 2
20663: DOUBLE
20664: EQUAL
20665: IFTRUE 20669
20667: GO 20680
20669: POP
// bc_type := b_warehouse ; 3 :
20670: LD_ADDR_OWVAR 42
20674: PUSH
20675: LD_INT 1
20677: ST_TO_ADDR
20678: GO 21281
20680: LD_INT 3
20682: DOUBLE
20683: EQUAL
20684: IFTRUE 20688
20686: GO 20699
20688: POP
// bc_type := b_lab ; 4 .. 9 :
20689: LD_ADDR_OWVAR 42
20693: PUSH
20694: LD_INT 6
20696: ST_TO_ADDR
20697: GO 21281
20699: LD_INT 4
20701: DOUBLE
20702: GREATEREQUAL
20703: IFFALSE 20711
20705: LD_INT 9
20707: DOUBLE
20708: LESSEQUAL
20709: IFTRUE 20713
20711: GO 20773
20713: POP
// begin bc_type := b_lab_half ;
20714: LD_ADDR_OWVAR 42
20718: PUSH
20719: LD_INT 7
20721: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20722: LD_ADDR_OWVAR 44
20726: PUSH
20727: LD_INT 10
20729: PUSH
20730: LD_INT 11
20732: PUSH
20733: LD_INT 12
20735: PUSH
20736: LD_INT 15
20738: PUSH
20739: LD_INT 14
20741: PUSH
20742: LD_INT 13
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: LD_VAR 0 2
20757: PUSH
20758: LD_INT 3
20760: MINUS
20761: ARRAY
20762: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20763: LD_ADDR_OWVAR 45
20767: PUSH
20768: LD_INT 9
20770: ST_TO_ADDR
// end ; 10 .. 13 :
20771: GO 21281
20773: LD_INT 10
20775: DOUBLE
20776: GREATEREQUAL
20777: IFFALSE 20785
20779: LD_INT 13
20781: DOUBLE
20782: LESSEQUAL
20783: IFTRUE 20787
20785: GO 20864
20787: POP
// begin bc_type := b_lab_full ;
20788: LD_ADDR_OWVAR 42
20792: PUSH
20793: LD_INT 8
20795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20796: LD_ADDR_OWVAR 44
20800: PUSH
20801: LD_INT 10
20803: PUSH
20804: LD_INT 12
20806: PUSH
20807: LD_INT 14
20809: PUSH
20810: LD_INT 13
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: LD_VAR 0 2
20823: PUSH
20824: LD_INT 9
20826: MINUS
20827: ARRAY
20828: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20829: LD_ADDR_OWVAR 45
20833: PUSH
20834: LD_INT 11
20836: PUSH
20837: LD_INT 15
20839: PUSH
20840: LD_INT 12
20842: PUSH
20843: LD_INT 15
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_VAR 0 2
20856: PUSH
20857: LD_INT 9
20859: MINUS
20860: ARRAY
20861: ST_TO_ADDR
// end ; 14 :
20862: GO 21281
20864: LD_INT 14
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20883
20872: POP
// bc_type := b_workshop ; 15 :
20873: LD_ADDR_OWVAR 42
20877: PUSH
20878: LD_INT 2
20880: ST_TO_ADDR
20881: GO 21281
20883: LD_INT 15
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20902
20891: POP
// bc_type := b_factory ; 16 :
20892: LD_ADDR_OWVAR 42
20896: PUSH
20897: LD_INT 3
20899: ST_TO_ADDR
20900: GO 21281
20902: LD_INT 16
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20921
20910: POP
// bc_type := b_ext_gun ; 17 :
20911: LD_ADDR_OWVAR 42
20915: PUSH
20916: LD_INT 17
20918: ST_TO_ADDR
20919: GO 21281
20921: LD_INT 17
20923: DOUBLE
20924: EQUAL
20925: IFTRUE 20929
20927: GO 20957
20929: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20930: LD_ADDR_OWVAR 42
20934: PUSH
20935: LD_INT 19
20937: PUSH
20938: LD_INT 23
20940: PUSH
20941: LD_INT 19
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_VAR 0 1
20953: ARRAY
20954: ST_TO_ADDR
20955: GO 21281
20957: LD_INT 18
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20976
20965: POP
// bc_type := b_ext_radar ; 19 :
20966: LD_ADDR_OWVAR 42
20970: PUSH
20971: LD_INT 20
20973: ST_TO_ADDR
20974: GO 21281
20976: LD_INT 19
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 20995
20984: POP
// bc_type := b_ext_radio ; 20 :
20985: LD_ADDR_OWVAR 42
20989: PUSH
20990: LD_INT 22
20992: ST_TO_ADDR
20993: GO 21281
20995: LD_INT 20
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21014
21003: POP
// bc_type := b_ext_siberium ; 21 :
21004: LD_ADDR_OWVAR 42
21008: PUSH
21009: LD_INT 21
21011: ST_TO_ADDR
21012: GO 21281
21014: LD_INT 21
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21033
21022: POP
// bc_type := b_ext_computer ; 22 :
21023: LD_ADDR_OWVAR 42
21027: PUSH
21028: LD_INT 24
21030: ST_TO_ADDR
21031: GO 21281
21033: LD_INT 22
21035: DOUBLE
21036: EQUAL
21037: IFTRUE 21041
21039: GO 21052
21041: POP
// bc_type := b_ext_track ; 23 :
21042: LD_ADDR_OWVAR 42
21046: PUSH
21047: LD_INT 16
21049: ST_TO_ADDR
21050: GO 21281
21052: LD_INT 23
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21071
21060: POP
// bc_type := b_ext_laser ; 24 :
21061: LD_ADDR_OWVAR 42
21065: PUSH
21066: LD_INT 25
21068: ST_TO_ADDR
21069: GO 21281
21071: LD_INT 24
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21090
21079: POP
// bc_type := b_control_tower ; 25 :
21080: LD_ADDR_OWVAR 42
21084: PUSH
21085: LD_INT 36
21087: ST_TO_ADDR
21088: GO 21281
21090: LD_INT 25
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21109
21098: POP
// bc_type := b_breastwork ; 26 :
21099: LD_ADDR_OWVAR 42
21103: PUSH
21104: LD_INT 31
21106: ST_TO_ADDR
21107: GO 21281
21109: LD_INT 26
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21128
21117: POP
// bc_type := b_bunker ; 27 :
21118: LD_ADDR_OWVAR 42
21122: PUSH
21123: LD_INT 32
21125: ST_TO_ADDR
21126: GO 21281
21128: LD_INT 27
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21147
21136: POP
// bc_type := b_turret ; 28 :
21137: LD_ADDR_OWVAR 42
21141: PUSH
21142: LD_INT 33
21144: ST_TO_ADDR
21145: GO 21281
21147: LD_INT 28
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21166
21155: POP
// bc_type := b_armoury ; 29 :
21156: LD_ADDR_OWVAR 42
21160: PUSH
21161: LD_INT 4
21163: ST_TO_ADDR
21164: GO 21281
21166: LD_INT 29
21168: DOUBLE
21169: EQUAL
21170: IFTRUE 21174
21172: GO 21185
21174: POP
// bc_type := b_barracks ; 30 :
21175: LD_ADDR_OWVAR 42
21179: PUSH
21180: LD_INT 5
21182: ST_TO_ADDR
21183: GO 21281
21185: LD_INT 30
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21204
21193: POP
// bc_type := b_solar_power ; 31 :
21194: LD_ADDR_OWVAR 42
21198: PUSH
21199: LD_INT 27
21201: ST_TO_ADDR
21202: GO 21281
21204: LD_INT 31
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21223
21212: POP
// bc_type := b_oil_power ; 32 :
21213: LD_ADDR_OWVAR 42
21217: PUSH
21218: LD_INT 26
21220: ST_TO_ADDR
21221: GO 21281
21223: LD_INT 32
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21242
21231: POP
// bc_type := b_siberite_power ; 33 :
21232: LD_ADDR_OWVAR 42
21236: PUSH
21237: LD_INT 28
21239: ST_TO_ADDR
21240: GO 21281
21242: LD_INT 33
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21261
21250: POP
// bc_type := b_oil_mine ; 34 :
21251: LD_ADDR_OWVAR 42
21255: PUSH
21256: LD_INT 29
21258: ST_TO_ADDR
21259: GO 21281
21261: LD_INT 34
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21280
21269: POP
// bc_type := b_siberite_mine ; end ;
21270: LD_ADDR_OWVAR 42
21274: PUSH
21275: LD_INT 30
21277: ST_TO_ADDR
21278: GO 21281
21280: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21281: LD_ADDR_VAR 0 8
21285: PUSH
21286: LD_VAR 0 5
21290: PPUSH
21291: LD_VAR 0 6
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: CALL_OW 47
21305: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21306: LD_OWVAR 42
21310: PUSH
21311: LD_INT 32
21313: PUSH
21314: LD_INT 33
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: IN
21321: IFFALSE 21337
// PlaceWeaponTurret ( b , weapon ) ;
21323: LD_VAR 0 8
21327: PPUSH
21328: LD_VAR 0 4
21332: PPUSH
21333: CALL_OW 431
// end ;
21337: LD_VAR 0 7
21341: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21342: LD_INT 0
21344: PPUSH
21345: PPUSH
21346: PPUSH
21347: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21348: LD_ADDR_VAR 0 4
21352: PUSH
21353: LD_INT 22
21355: PUSH
21356: LD_OWVAR 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 30
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 30
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PPUSH
21397: CALL_OW 69
21401: ST_TO_ADDR
// if not tmp then
21402: LD_VAR 0 4
21406: NOT
21407: IFFALSE 21411
// exit ;
21409: GO 21470
// for i in tmp do
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_VAR 0 4
21420: PUSH
21421: FOR_IN
21422: IFFALSE 21468
// for j = 1 to 3 do
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: DOUBLE
21430: LD_INT 1
21432: DEC
21433: ST_TO_ADDR
21434: LD_INT 3
21436: PUSH
21437: FOR_TO
21438: IFFALSE 21464
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21440: LD_VAR 0 2
21444: PPUSH
21445: CALL_OW 274
21449: PPUSH
21450: LD_VAR 0 3
21454: PPUSH
21455: LD_INT 99999
21457: PPUSH
21458: CALL_OW 277
21462: GO 21437
21464: POP
21465: POP
21466: GO 21421
21468: POP
21469: POP
// end ;
21470: LD_VAR 0 1
21474: RET
// export function hHackSetLevel10 ; var i , j ; begin
21475: LD_INT 0
21477: PPUSH
21478: PPUSH
21479: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 21
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: PUSH
21500: FOR_IN
21501: IFFALSE 21553
// if IsSelected ( i ) then
21503: LD_VAR 0 2
21507: PPUSH
21508: CALL_OW 306
21512: IFFALSE 21551
// begin for j := 1 to 4 do
21514: LD_ADDR_VAR 0 3
21518: PUSH
21519: DOUBLE
21520: LD_INT 1
21522: DEC
21523: ST_TO_ADDR
21524: LD_INT 4
21526: PUSH
21527: FOR_TO
21528: IFFALSE 21549
// SetSkill ( i , j , 10 ) ;
21530: LD_VAR 0 2
21534: PPUSH
21535: LD_VAR 0 3
21539: PPUSH
21540: LD_INT 10
21542: PPUSH
21543: CALL_OW 237
21547: GO 21527
21549: POP
21550: POP
// end ;
21551: GO 21500
21553: POP
21554: POP
// end ;
21555: LD_VAR 0 1
21559: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21560: LD_INT 0
21562: PPUSH
21563: PPUSH
21564: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_INT 22
21572: PUSH
21573: LD_OWVAR 2
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 21
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PPUSH
21596: CALL_OW 69
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21643
// begin for j := 1 to 4 do
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: DOUBLE
21610: LD_INT 1
21612: DEC
21613: ST_TO_ADDR
21614: LD_INT 4
21616: PUSH
21617: FOR_TO
21618: IFFALSE 21639
// SetSkill ( i , j , 10 ) ;
21620: LD_VAR 0 2
21624: PPUSH
21625: LD_VAR 0 3
21629: PPUSH
21630: LD_INT 10
21632: PPUSH
21633: CALL_OW 237
21637: GO 21617
21639: POP
21640: POP
// end ;
21641: GO 21601
21643: POP
21644: POP
// end ;
21645: LD_VAR 0 1
21649: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21650: LD_INT 0
21652: PPUSH
// uc_side := your_side ;
21653: LD_ADDR_OWVAR 20
21657: PUSH
21658: LD_OWVAR 2
21662: ST_TO_ADDR
// uc_nation := nation ;
21663: LD_ADDR_OWVAR 21
21667: PUSH
21668: LD_VAR 0 1
21672: ST_TO_ADDR
// InitHc ;
21673: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21677: LD_INT 0
21679: PPUSH
21680: LD_VAR 0 2
21684: PPUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21694: LD_VAR 0 4
21698: PPUSH
21699: LD_VAR 0 5
21703: PPUSH
21704: CALL_OW 428
21708: PUSH
21709: LD_INT 0
21711: EQUAL
21712: IFFALSE 21736
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21714: CALL_OW 44
21718: PPUSH
21719: LD_VAR 0 4
21723: PPUSH
21724: LD_VAR 0 5
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 48
// end ;
21736: LD_VAR 0 6
21740: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21741: LD_INT 0
21743: PPUSH
21744: PPUSH
// uc_side := your_side ;
21745: LD_ADDR_OWVAR 20
21749: PUSH
21750: LD_OWVAR 2
21754: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21755: LD_VAR 0 1
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: LD_INT 3
21768: PUSH
21769: LD_INT 4
21771: PUSH
21772: LD_INT 5
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: IN
21782: IFFALSE 21794
// uc_nation := nation_american else
21784: LD_ADDR_OWVAR 21
21788: PUSH
21789: LD_INT 1
21791: ST_TO_ADDR
21792: GO 21837
// if chassis in [ 11 , 12 , 13 , 14 ] then
21794: LD_VAR 0 1
21798: PUSH
21799: LD_INT 11
21801: PUSH
21802: LD_INT 12
21804: PUSH
21805: LD_INT 13
21807: PUSH
21808: LD_INT 14
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: IN
21817: IFFALSE 21829
// uc_nation := nation_arabian else
21819: LD_ADDR_OWVAR 21
21823: PUSH
21824: LD_INT 2
21826: ST_TO_ADDR
21827: GO 21837
// uc_nation := nation_russian ;
21829: LD_ADDR_OWVAR 21
21833: PUSH
21834: LD_INT 3
21836: ST_TO_ADDR
// vc_chassis := chassis ;
21837: LD_ADDR_OWVAR 37
21841: PUSH
21842: LD_VAR 0 1
21846: ST_TO_ADDR
// vc_engine := engine ;
21847: LD_ADDR_OWVAR 39
21851: PUSH
21852: LD_VAR 0 2
21856: ST_TO_ADDR
// vc_control := control ;
21857: LD_ADDR_OWVAR 38
21861: PUSH
21862: LD_VAR 0 3
21866: ST_TO_ADDR
// vc_weapon := weapon ;
21867: LD_ADDR_OWVAR 40
21871: PUSH
21872: LD_VAR 0 4
21876: ST_TO_ADDR
// un := CreateVehicle ;
21877: LD_ADDR_VAR 0 8
21881: PUSH
21882: CALL_OW 45
21886: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21887: LD_VAR 0 8
21891: PPUSH
21892: LD_INT 0
21894: PPUSH
21895: LD_INT 5
21897: PPUSH
21898: CALL_OW 12
21902: PPUSH
21903: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21907: LD_VAR 0 8
21911: PPUSH
21912: LD_VAR 0 5
21916: PPUSH
21917: LD_VAR 0 6
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 48
// end ;
21929: LD_VAR 0 7
21933: RET
// export hInvincible ; every 1 do
21934: GO 21936
21936: DISABLE
// hInvincible := [ ] ;
21937: LD_ADDR_EXP 77
21941: PUSH
21942: EMPTY
21943: ST_TO_ADDR
21944: END
// every 10 do var i ;
21945: GO 21947
21947: DISABLE
21948: LD_INT 0
21950: PPUSH
// begin enable ;
21951: ENABLE
// if not hInvincible then
21952: LD_EXP 77
21956: NOT
21957: IFFALSE 21961
// exit ;
21959: GO 22005
// for i in hInvincible do
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: LD_EXP 77
21970: PUSH
21971: FOR_IN
21972: IFFALSE 22003
// if GetLives ( i ) < 1000 then
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 256
21983: PUSH
21984: LD_INT 1000
21986: LESS
21987: IFFALSE 22001
// SetLives ( i , 1000 ) ;
21989: LD_VAR 0 1
21993: PPUSH
21994: LD_INT 1000
21996: PPUSH
21997: CALL_OW 234
22001: GO 21971
22003: POP
22004: POP
// end ;
22005: PPOPN 1
22007: END
// export function hHackInvincible ; var i ; begin
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22012: LD_ADDR_VAR 0 2
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: LIST
22044: PPUSH
22045: CALL_OW 69
22049: PUSH
22050: FOR_IN
22051: IFFALSE 22112
// if IsSelected ( i ) then
22053: LD_VAR 0 2
22057: PPUSH
22058: CALL_OW 306
22062: IFFALSE 22110
// begin if i in hInvincible then
22064: LD_VAR 0 2
22068: PUSH
22069: LD_EXP 77
22073: IN
22074: IFFALSE 22094
// hInvincible := hInvincible diff i else
22076: LD_ADDR_EXP 77
22080: PUSH
22081: LD_EXP 77
22085: PUSH
22086: LD_VAR 0 2
22090: DIFF
22091: ST_TO_ADDR
22092: GO 22110
// hInvincible := hInvincible union i ;
22094: LD_ADDR_EXP 77
22098: PUSH
22099: LD_EXP 77
22103: PUSH
22104: LD_VAR 0 2
22108: UNION
22109: ST_TO_ADDR
// end ;
22110: GO 22050
22112: POP
22113: POP
// end ;
22114: LD_VAR 0 1
22118: RET
// export function hHackInvisible ; var i , j ; begin
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
22123: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: CALL_OW 69
22143: PUSH
22144: FOR_IN
22145: IFFALSE 22169
// if IsSelected ( i ) then
22147: LD_VAR 0 2
22151: PPUSH
22152: CALL_OW 306
22156: IFFALSE 22167
// ComForceInvisible ( i ) ;
22158: LD_VAR 0 2
22162: PPUSH
22163: CALL_OW 496
22167: GO 22144
22169: POP
22170: POP
// end ;
22171: LD_VAR 0 1
22175: RET
// export function hHackChangeYourSide ; begin
22176: LD_INT 0
22178: PPUSH
// if your_side = 8 then
22179: LD_OWVAR 2
22183: PUSH
22184: LD_INT 8
22186: EQUAL
22187: IFFALSE 22199
// your_side := 0 else
22189: LD_ADDR_OWVAR 2
22193: PUSH
22194: LD_INT 0
22196: ST_TO_ADDR
22197: GO 22213
// your_side := your_side + 1 ;
22199: LD_ADDR_OWVAR 2
22203: PUSH
22204: LD_OWVAR 2
22208: PUSH
22209: LD_INT 1
22211: PLUS
22212: ST_TO_ADDR
// end ;
22213: LD_VAR 0 1
22217: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22218: LD_INT 0
22220: PPUSH
22221: PPUSH
22222: PPUSH
// for i in all_units do
22223: LD_ADDR_VAR 0 2
22227: PUSH
22228: LD_OWVAR 3
22232: PUSH
22233: FOR_IN
22234: IFFALSE 22312
// if IsSelected ( i ) then
22236: LD_VAR 0 2
22240: PPUSH
22241: CALL_OW 306
22245: IFFALSE 22310
// begin j := GetSide ( i ) ;
22247: LD_ADDR_VAR 0 3
22251: PUSH
22252: LD_VAR 0 2
22256: PPUSH
22257: CALL_OW 255
22261: ST_TO_ADDR
// if j = 8 then
22262: LD_VAR 0 3
22266: PUSH
22267: LD_INT 8
22269: EQUAL
22270: IFFALSE 22282
// j := 0 else
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_INT 0
22279: ST_TO_ADDR
22280: GO 22296
// j := j + 1 ;
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_VAR 0 3
22291: PUSH
22292: LD_INT 1
22294: PLUS
22295: ST_TO_ADDR
// SetSide ( i , j ) ;
22296: LD_VAR 0 2
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: CALL_OW 235
// end ;
22310: GO 22233
22312: POP
22313: POP
// end ;
22314: LD_VAR 0 1
22318: RET
// export function hHackFog ; begin
22319: LD_INT 0
22321: PPUSH
// FogOff ( true ) ;
22322: LD_INT 1
22324: PPUSH
22325: CALL_OW 344
// end ;
22329: LD_VAR 0 1
22333: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22334: LD_INT 0
22336: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22337: LD_VAR 0 1
22341: PPUSH
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 483
// CenterOnXY ( x , y ) ;
22362: LD_VAR 0 2
22366: PPUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: CALL_OW 84
// end ;
22376: LD_VAR 0 4
22380: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22381: LD_INT 0
22383: PPUSH
22384: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22385: LD_VAR 0 1
22389: NOT
22390: IFTRUE 22409
22392: PUSH
22393: LD_VAR 0 2
22397: PPUSH
22398: LD_VAR 0 3
22402: PPUSH
22403: CALL_OW 488
22407: NOT
22408: OR
22409: IFTRUE 22444
22411: PUSH
22412: LD_VAR 0 1
22416: PPUSH
22417: CALL_OW 266
22421: PUSH
22422: LD_INT 3
22424: NONEQUAL
22425: IFFALSE 22443
22427: PUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 247
22437: PUSH
22438: LD_INT 1
22440: EQUAL
22441: NOT
22442: AND
22443: OR
22444: IFFALSE 22448
// exit ;
22446: GO 22730
// if GetType ( factory ) = unit_human then
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 247
22457: PUSH
22458: LD_INT 1
22460: EQUAL
22461: IFFALSE 22478
// factory := IsInUnit ( factory ) ;
22463: LD_ADDR_VAR 0 1
22467: PUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: CALL_OW 310
22477: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 266
22487: PUSH
22488: LD_INT 3
22490: NONEQUAL
22491: IFFALSE 22495
// exit ;
22493: GO 22730
// for i := 1 to Count ( factoryWaypoints ) do
22495: LD_ADDR_VAR 0 5
22499: PUSH
22500: DOUBLE
22501: LD_INT 1
22503: DEC
22504: ST_TO_ADDR
22505: LD_EXP 78
22509: PPUSH
22510: CALL 26060 0 1
22514: PUSH
22515: FOR_TO
22516: IFFALSE 22678
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22518: LD_VAR 0 2
22522: PPUSH
22523: LD_VAR 0 3
22527: PPUSH
22528: CALL_OW 428
22532: PUSH
22533: LD_EXP 78
22537: PUSH
22538: LD_VAR 0 5
22542: ARRAY
22543: PUSH
22544: LD_INT 2
22546: ARRAY
22547: EQUAL
22548: IFFALSE 22580
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22550: LD_ADDR_EXP 78
22554: PUSH
22555: LD_EXP 78
22559: PPUSH
22560: LD_VAR 0 5
22564: PPUSH
22565: CALL_OW 3
22569: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22570: CALL 22735 0 0
// exit ;
22574: POP
22575: POP
22576: GO 22730
// end else
22578: GO 22676
// if factory = factoryWaypoints [ i ] [ 2 ] then
22580: LD_VAR 0 1
22584: PUSH
22585: LD_EXP 78
22589: PUSH
22590: LD_VAR 0 5
22594: ARRAY
22595: PUSH
22596: LD_INT 2
22598: ARRAY
22599: EQUAL
22600: IFFALSE 22676
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22602: LD_ADDR_EXP 78
22606: PUSH
22607: LD_EXP 78
22611: PPUSH
22612: LD_VAR 0 5
22616: PPUSH
22617: CALL_OW 3
22621: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22622: LD_ADDR_EXP 78
22626: PUSH
22627: LD_EXP 78
22631: PPUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL_OW 255
22641: PUSH
22642: LD_VAR 0 1
22646: PUSH
22647: LD_VAR 0 2
22651: PUSH
22652: LD_VAR 0 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL 61992 0 2
22667: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22668: CALL 22735 0 0
// exit ;
22672: POP
22673: POP
22674: GO 22730
// end ; end ;
22676: GO 22515
22678: POP
22679: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22680: LD_ADDR_EXP 78
22684: PUSH
22685: LD_EXP 78
22689: PPUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: CALL_OW 255
22699: PUSH
22700: LD_VAR 0 1
22704: PUSH
22705: LD_VAR 0 2
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PPUSH
22721: CALL 61992 0 2
22725: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22726: CALL 22735 0 0
// end ;
22730: LD_VAR 0 4
22734: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22735: LD_INT 0
22737: PPUSH
22738: PPUSH
22739: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22740: LD_STRING resetFactoryWaypoint();
22742: PPUSH
22743: CALL_OW 559
// if factoryWaypoints then
22747: LD_EXP 78
22751: IFFALSE 22872
// begin list := factoryWaypoints ;
22753: LD_ADDR_VAR 0 3
22757: PUSH
22758: LD_EXP 78
22762: ST_TO_ADDR
// for i := 1 to list do
22763: LD_ADDR_VAR 0 2
22767: PUSH
22768: DOUBLE
22769: LD_INT 1
22771: DEC
22772: ST_TO_ADDR
22773: LD_VAR 0 3
22777: PUSH
22778: FOR_TO
22779: IFFALSE 22870
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22781: LD_STRING setFactoryWaypointXY(
22783: PUSH
22784: LD_VAR 0 3
22788: PUSH
22789: LD_VAR 0 2
22793: ARRAY
22794: PUSH
22795: LD_INT 1
22797: ARRAY
22798: STR
22799: PUSH
22800: LD_STRING ,
22802: STR
22803: PUSH
22804: LD_VAR 0 3
22808: PUSH
22809: LD_VAR 0 2
22813: ARRAY
22814: PUSH
22815: LD_INT 2
22817: ARRAY
22818: STR
22819: PUSH
22820: LD_STRING ,
22822: STR
22823: PUSH
22824: LD_VAR 0 3
22828: PUSH
22829: LD_VAR 0 2
22833: ARRAY
22834: PUSH
22835: LD_INT 3
22837: ARRAY
22838: STR
22839: PUSH
22840: LD_STRING ,
22842: STR
22843: PUSH
22844: LD_VAR 0 3
22848: PUSH
22849: LD_VAR 0 2
22853: ARRAY
22854: PUSH
22855: LD_INT 4
22857: ARRAY
22858: STR
22859: PUSH
22860: LD_STRING )
22862: STR
22863: PPUSH
22864: CALL_OW 559
22868: GO 22778
22870: POP
22871: POP
// end ; end ;
22872: LD_VAR 0 1
22876: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22877: LD_INT 0
22879: PPUSH
// if HexInfo ( x , y ) = warehouse then
22880: LD_VAR 0 2
22884: PPUSH
22885: LD_VAR 0 3
22889: PPUSH
22890: CALL_OW 428
22894: PUSH
22895: LD_VAR 0 1
22899: EQUAL
22900: IFFALSE 22927
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22902: LD_ADDR_EXP 80
22906: PUSH
22907: LD_EXP 80
22911: PPUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: LD_INT 0
22919: PPUSH
22920: CALL_OW 1
22924: ST_TO_ADDR
22925: GO 22978
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22927: LD_ADDR_EXP 80
22931: PUSH
22932: LD_EXP 80
22936: PPUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 255
22951: PUSH
22952: LD_VAR 0 1
22956: PUSH
22957: LD_VAR 0 2
22961: PUSH
22962: LD_VAR 0 3
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 1
22977: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22978: CALL 22987 0 0
// end ;
22982: LD_VAR 0 4
22986: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22987: LD_INT 0
22989: PPUSH
22990: PPUSH
22991: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22992: LD_STRING resetWarehouseGatheringPoints();
22994: PPUSH
22995: CALL_OW 559
// if warehouseGatheringPoints then
22999: LD_EXP 80
23003: IFFALSE 23129
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23005: LD_ADDR_VAR 0 3
23009: PUSH
23010: LD_EXP 80
23014: PPUSH
23015: CALL 65926 0 1
23019: ST_TO_ADDR
// for i := 1 to list do
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: DOUBLE
23026: LD_INT 1
23028: DEC
23029: ST_TO_ADDR
23030: LD_VAR 0 3
23034: PUSH
23035: FOR_TO
23036: IFFALSE 23127
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23038: LD_STRING setWarehouseGatheringPointXY(
23040: PUSH
23041: LD_VAR 0 3
23045: PUSH
23046: LD_VAR 0 2
23050: ARRAY
23051: PUSH
23052: LD_INT 1
23054: ARRAY
23055: STR
23056: PUSH
23057: LD_STRING ,
23059: STR
23060: PUSH
23061: LD_VAR 0 3
23065: PUSH
23066: LD_VAR 0 2
23070: ARRAY
23071: PUSH
23072: LD_INT 2
23074: ARRAY
23075: STR
23076: PUSH
23077: LD_STRING ,
23079: STR
23080: PUSH
23081: LD_VAR 0 3
23085: PUSH
23086: LD_VAR 0 2
23090: ARRAY
23091: PUSH
23092: LD_INT 3
23094: ARRAY
23095: STR
23096: PUSH
23097: LD_STRING ,
23099: STR
23100: PUSH
23101: LD_VAR 0 3
23105: PUSH
23106: LD_VAR 0 2
23110: ARRAY
23111: PUSH
23112: LD_INT 4
23114: ARRAY
23115: STR
23116: PUSH
23117: LD_STRING )
23119: STR
23120: PPUSH
23121: CALL_OW 559
23125: GO 23035
23127: POP
23128: POP
// end ; end ;
23129: LD_VAR 0 1
23133: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23134: LD_EXP 80
23138: IFFALSE 23833
23140: GO 23142
23142: DISABLE
23143: LD_INT 0
23145: PPUSH
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
// begin enable ;
23154: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23155: LD_ADDR_VAR 0 3
23159: PUSH
23160: LD_EXP 80
23164: PPUSH
23165: CALL 65926 0 1
23169: ST_TO_ADDR
// if not list then
23170: LD_VAR 0 3
23174: NOT
23175: IFFALSE 23179
// exit ;
23177: GO 23833
// for i := 1 to list do
23179: LD_ADDR_VAR 0 1
23183: PUSH
23184: DOUBLE
23185: LD_INT 1
23187: DEC
23188: ST_TO_ADDR
23189: LD_VAR 0 3
23193: PUSH
23194: FOR_TO
23195: IFFALSE 23831
// begin depot := list [ i ] [ 2 ] ;
23197: LD_ADDR_VAR 0 8
23201: PUSH
23202: LD_VAR 0 3
23206: PUSH
23207: LD_VAR 0 1
23211: ARRAY
23212: PUSH
23213: LD_INT 2
23215: ARRAY
23216: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23217: LD_ADDR_VAR 0 5
23221: PUSH
23222: LD_VAR 0 3
23226: PUSH
23227: LD_VAR 0 1
23231: ARRAY
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23237: LD_VAR 0 8
23241: PPUSH
23242: CALL_OW 301
23246: IFTRUE 23265
23248: PUSH
23249: LD_VAR 0 5
23253: PUSH
23254: LD_VAR 0 8
23258: PPUSH
23259: CALL_OW 255
23263: NONEQUAL
23264: OR
23265: IFFALSE 23294
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23267: LD_ADDR_EXP 80
23271: PUSH
23272: LD_EXP 80
23276: PPUSH
23277: LD_VAR 0 8
23281: PPUSH
23282: LD_INT 0
23284: PPUSH
23285: CALL_OW 1
23289: ST_TO_ADDR
// exit ;
23290: POP
23291: POP
23292: GO 23833
// end ; x := list [ i ] [ 3 ] ;
23294: LD_ADDR_VAR 0 6
23298: PUSH
23299: LD_VAR 0 3
23303: PUSH
23304: LD_VAR 0 1
23308: ARRAY
23309: PUSH
23310: LD_INT 3
23312: ARRAY
23313: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23314: LD_ADDR_VAR 0 7
23318: PUSH
23319: LD_VAR 0 3
23323: PUSH
23324: LD_VAR 0 1
23328: ARRAY
23329: PUSH
23330: LD_INT 4
23332: ARRAY
23333: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23334: LD_ADDR_VAR 0 9
23338: PUSH
23339: LD_VAR 0 6
23343: PPUSH
23344: LD_VAR 0 7
23348: PPUSH
23349: LD_INT 16
23351: PPUSH
23352: CALL 64500 0 3
23356: ST_TO_ADDR
// if not cratesNearbyPoint then
23357: LD_VAR 0 9
23361: NOT
23362: IFFALSE 23368
// exit ;
23364: POP
23365: POP
23366: GO 23833
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23368: LD_ADDR_VAR 0 4
23372: PUSH
23373: LD_INT 22
23375: PUSH
23376: LD_VAR 0 5
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 3
23387: PUSH
23388: LD_INT 60
23390: PUSH
23391: EMPTY
23392: LIST
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 91
23400: PUSH
23401: LD_VAR 0 8
23405: PUSH
23406: LD_INT 6
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 25
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 25
23429: PUSH
23430: LD_INT 16
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: PPUSH
23448: CALL_OW 69
23452: PUSH
23453: LD_VAR 0 8
23457: PPUSH
23458: CALL_OW 313
23462: PPUSH
23463: LD_INT 3
23465: PUSH
23466: LD_INT 60
23468: PUSH
23469: EMPTY
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 25
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 25
23491: PUSH
23492: LD_INT 16
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PPUSH
23508: CALL_OW 72
23512: UNION
23513: ST_TO_ADDR
// if tmp then
23514: LD_VAR 0 4
23518: IFFALSE 23598
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23520: LD_ADDR_VAR 0 4
23524: PUSH
23525: LD_VAR 0 4
23529: PPUSH
23530: LD_INT 3
23532: PPUSH
23533: CALL 62307 0 2
23537: ST_TO_ADDR
// for j in tmp do
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_VAR 0 4
23547: PUSH
23548: FOR_IN
23549: IFFALSE 23592
// begin if IsInUnit ( j ) then
23551: LD_VAR 0 2
23555: PPUSH
23556: CALL_OW 310
23560: IFFALSE 23571
// ComExit ( j ) ;
23562: LD_VAR 0 2
23566: PPUSH
23567: CALL 62390 0 1
// AddComCollect ( j , x , y ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_VAR 0 6
23580: PPUSH
23581: LD_VAR 0 7
23585: PPUSH
23586: CALL_OW 177
// end ;
23590: GO 23548
23592: POP
23593: POP
// exit ;
23594: POP
23595: POP
23596: GO 23833
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23598: LD_ADDR_VAR 0 4
23602: PUSH
23603: LD_INT 22
23605: PUSH
23606: LD_VAR 0 5
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 91
23617: PUSH
23618: LD_VAR 0 8
23622: PUSH
23623: LD_INT 8
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 34
23636: PUSH
23637: LD_INT 12
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 34
23646: PUSH
23647: LD_INT 51
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 34
23656: PUSH
23657: LD_INT 32
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 34
23666: PUSH
23667: LD_INT 89
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 69
23690: ST_TO_ADDR
// if tmp then
23691: LD_VAR 0 4
23695: IFFALSE 23829
// begin for j in tmp do
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_VAR 0 4
23706: PUSH
23707: FOR_IN
23708: IFFALSE 23827
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23710: LD_VAR 0 2
23714: PPUSH
23715: CALL_OW 262
23719: PUSH
23720: LD_INT 3
23722: EQUAL
23723: IFTRUE 23740
23725: PUSH
23726: LD_VAR 0 2
23730: PPUSH
23731: CALL_OW 261
23735: PUSH
23736: LD_INT 20
23738: GREATER
23739: OR
23740: IFFALSE 23754
23742: PUSH
23743: LD_VAR 0 2
23747: PPUSH
23748: CALL_OW 314
23752: NOT
23753: AND
23754: IFFALSE 23784
23756: PUSH
23757: LD_VAR 0 2
23761: PPUSH
23762: CALL_OW 263
23766: PUSH
23767: LD_INT 1
23769: NONEQUAL
23770: IFTRUE 23783
23772: PUSH
23773: LD_VAR 0 2
23777: PPUSH
23778: CALL_OW 311
23782: OR
23783: AND
23784: IFFALSE 23825
// begin ComCollect ( j , x , y ) ;
23786: LD_VAR 0 2
23790: PPUSH
23791: LD_VAR 0 6
23795: PPUSH
23796: LD_VAR 0 7
23800: PPUSH
23801: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: LD_VAR 0 8
23814: PPUSH
23815: CALL_OW 172
// exit ;
23819: POP
23820: POP
23821: POP
23822: POP
23823: GO 23833
// end ;
23825: GO 23707
23827: POP
23828: POP
// end ; end ;
23829: GO 23194
23831: POP
23832: POP
// end ; end_of_file
23833: PPOPN 9
23835: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23836: LD_INT 0
23838: PPUSH
23839: PPUSH
// if exist_mode then
23840: LD_VAR 0 2
23844: IFFALSE 23890
// begin unit := CreateCharacter ( prefix & ident ) ;
23846: LD_ADDR_VAR 0 5
23850: PUSH
23851: LD_VAR 0 3
23855: PUSH
23856: LD_VAR 0 1
23860: STR
23861: PPUSH
23862: CALL_OW 34
23866: ST_TO_ADDR
// if unit then
23867: LD_VAR 0 5
23871: IFFALSE 23888
// DeleteCharacters ( prefix & ident ) ;
23873: LD_VAR 0 3
23877: PUSH
23878: LD_VAR 0 1
23882: STR
23883: PPUSH
23884: CALL_OW 40
// end else
23888: GO 23905
// unit := NewCharacter ( ident ) ;
23890: LD_ADDR_VAR 0 5
23894: PUSH
23895: LD_VAR 0 1
23899: PPUSH
23900: CALL_OW 25
23904: ST_TO_ADDR
// result := unit ;
23905: LD_ADDR_VAR 0 4
23909: PUSH
23910: LD_VAR 0 5
23914: ST_TO_ADDR
// end ;
23915: LD_VAR 0 4
23919: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
23920: LD_INT 0
23922: PPUSH
23923: PPUSH
// if exist_mode then
23924: LD_VAR 0 2
23928: IFFALSE 23953
// unit := CreateCharacter ( prefix & ident ) else
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_VAR 0 1
23944: STR
23945: PPUSH
23946: CALL_OW 34
23950: ST_TO_ADDR
23951: GO 23968
// unit := NewCharacter ( ident ) ;
23953: LD_ADDR_VAR 0 5
23957: PUSH
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 25
23967: ST_TO_ADDR
// result := unit ;
23968: LD_ADDR_VAR 0 4
23972: PUSH
23973: LD_VAR 0 5
23977: ST_TO_ADDR
// end ;
23978: LD_VAR 0 4
23982: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23983: LD_INT 0
23985: PPUSH
23986: PPUSH
// if not side or not nation then
23987: LD_VAR 0 1
23991: NOT
23992: IFTRUE 24001
23994: PUSH
23995: LD_VAR 0 2
23999: NOT
24000: OR
24001: IFFALSE 24005
// exit ;
24003: GO 24799
// case nation of nation_american :
24005: LD_VAR 0 2
24009: PUSH
24010: LD_INT 1
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24018
24016: GO 24240
24018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24019: LD_ADDR_VAR 0 4
24023: PUSH
24024: LD_INT 35
24026: PUSH
24027: LD_INT 45
24029: PUSH
24030: LD_INT 46
24032: PUSH
24033: LD_INT 47
24035: PUSH
24036: LD_INT 82
24038: PUSH
24039: LD_INT 83
24041: PUSH
24042: LD_INT 84
24044: PUSH
24045: LD_INT 85
24047: PUSH
24048: LD_INT 86
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 6
24059: PUSH
24060: LD_INT 15
24062: PUSH
24063: LD_INT 16
24065: PUSH
24066: LD_INT 7
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: LD_INT 13
24074: PUSH
24075: LD_INT 10
24077: PUSH
24078: LD_INT 14
24080: PUSH
24081: LD_INT 20
24083: PUSH
24084: LD_INT 21
24086: PUSH
24087: LD_INT 22
24089: PUSH
24090: LD_INT 25
24092: PUSH
24093: LD_INT 32
24095: PUSH
24096: LD_INT 27
24098: PUSH
24099: LD_INT 36
24101: PUSH
24102: LD_INT 69
24104: PUSH
24105: LD_INT 39
24107: PUSH
24108: LD_INT 34
24110: PUSH
24111: LD_INT 40
24113: PUSH
24114: LD_INT 48
24116: PUSH
24117: LD_INT 49
24119: PUSH
24120: LD_INT 50
24122: PUSH
24123: LD_INT 51
24125: PUSH
24126: LD_INT 52
24128: PUSH
24129: LD_INT 53
24131: PUSH
24132: LD_INT 54
24134: PUSH
24135: LD_INT 55
24137: PUSH
24138: LD_INT 56
24140: PUSH
24141: LD_INT 57
24143: PUSH
24144: LD_INT 58
24146: PUSH
24147: LD_INT 59
24149: PUSH
24150: LD_INT 60
24152: PUSH
24153: LD_INT 61
24155: PUSH
24156: LD_INT 62
24158: PUSH
24159: LD_INT 80
24161: PUSH
24162: LD_INT 82
24164: PUSH
24165: LD_INT 83
24167: PUSH
24168: LD_INT 84
24170: PUSH
24171: LD_INT 85
24173: PUSH
24174: LD_INT 86
24176: PUSH
24177: LD_INT 90
24179: PUSH
24180: LD_INT 93
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: ST_TO_ADDR
24238: GO 24721
24240: LD_INT 2
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24482
24248: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_INT 35
24256: PUSH
24257: LD_INT 45
24259: PUSH
24260: LD_INT 46
24262: PUSH
24263: LD_INT 47
24265: PUSH
24266: LD_INT 82
24268: PUSH
24269: LD_INT 83
24271: PUSH
24272: LD_INT 84
24274: PUSH
24275: LD_INT 85
24277: PUSH
24278: LD_INT 87
24280: PUSH
24281: LD_INT 70
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 3
24292: PUSH
24293: LD_INT 4
24295: PUSH
24296: LD_INT 5
24298: PUSH
24299: LD_INT 6
24301: PUSH
24302: LD_INT 15
24304: PUSH
24305: LD_INT 18
24307: PUSH
24308: LD_INT 7
24310: PUSH
24311: LD_INT 17
24313: PUSH
24314: LD_INT 8
24316: PUSH
24317: LD_INT 20
24319: PUSH
24320: LD_INT 21
24322: PUSH
24323: LD_INT 22
24325: PUSH
24326: LD_INT 72
24328: PUSH
24329: LD_INT 26
24331: PUSH
24332: LD_INT 69
24334: PUSH
24335: LD_INT 39
24337: PUSH
24338: LD_INT 40
24340: PUSH
24341: LD_INT 41
24343: PUSH
24344: LD_INT 42
24346: PUSH
24347: LD_INT 43
24349: PUSH
24350: LD_INT 48
24352: PUSH
24353: LD_INT 49
24355: PUSH
24356: LD_INT 50
24358: PUSH
24359: LD_INT 51
24361: PUSH
24362: LD_INT 52
24364: PUSH
24365: LD_INT 53
24367: PUSH
24368: LD_INT 54
24370: PUSH
24371: LD_INT 55
24373: PUSH
24374: LD_INT 56
24376: PUSH
24377: LD_INT 60
24379: PUSH
24380: LD_INT 61
24382: PUSH
24383: LD_INT 62
24385: PUSH
24386: LD_INT 66
24388: PUSH
24389: LD_INT 67
24391: PUSH
24392: LD_INT 68
24394: PUSH
24395: LD_INT 81
24397: PUSH
24398: LD_INT 82
24400: PUSH
24401: LD_INT 83
24403: PUSH
24404: LD_INT 84
24406: PUSH
24407: LD_INT 85
24409: PUSH
24410: LD_INT 87
24412: PUSH
24413: LD_INT 88
24415: PUSH
24416: LD_INT 92
24418: PUSH
24419: LD_INT 94
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: ST_TO_ADDR
24480: GO 24721
24482: LD_INT 3
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24720
24490: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24491: LD_ADDR_VAR 0 4
24495: PUSH
24496: LD_INT 46
24498: PUSH
24499: LD_INT 47
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: LD_INT 82
24510: PUSH
24511: LD_INT 83
24513: PUSH
24514: LD_INT 84
24516: PUSH
24517: LD_INT 85
24519: PUSH
24520: LD_INT 86
24522: PUSH
24523: LD_INT 11
24525: PUSH
24526: LD_INT 9
24528: PUSH
24529: LD_INT 20
24531: PUSH
24532: LD_INT 19
24534: PUSH
24535: LD_INT 21
24537: PUSH
24538: LD_INT 24
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_INT 25
24546: PUSH
24547: LD_INT 28
24549: PUSH
24550: LD_INT 29
24552: PUSH
24553: LD_INT 30
24555: PUSH
24556: LD_INT 31
24558: PUSH
24559: LD_INT 37
24561: PUSH
24562: LD_INT 38
24564: PUSH
24565: LD_INT 32
24567: PUSH
24568: LD_INT 27
24570: PUSH
24571: LD_INT 33
24573: PUSH
24574: LD_INT 69
24576: PUSH
24577: LD_INT 39
24579: PUSH
24580: LD_INT 34
24582: PUSH
24583: LD_INT 40
24585: PUSH
24586: LD_INT 71
24588: PUSH
24589: LD_INT 23
24591: PUSH
24592: LD_INT 44
24594: PUSH
24595: LD_INT 48
24597: PUSH
24598: LD_INT 49
24600: PUSH
24601: LD_INT 50
24603: PUSH
24604: LD_INT 51
24606: PUSH
24607: LD_INT 52
24609: PUSH
24610: LD_INT 53
24612: PUSH
24613: LD_INT 54
24615: PUSH
24616: LD_INT 55
24618: PUSH
24619: LD_INT 56
24621: PUSH
24622: LD_INT 57
24624: PUSH
24625: LD_INT 58
24627: PUSH
24628: LD_INT 59
24630: PUSH
24631: LD_INT 63
24633: PUSH
24634: LD_INT 64
24636: PUSH
24637: LD_INT 65
24639: PUSH
24640: LD_INT 82
24642: PUSH
24643: LD_INT 83
24645: PUSH
24646: LD_INT 84
24648: PUSH
24649: LD_INT 85
24651: PUSH
24652: LD_INT 86
24654: PUSH
24655: LD_INT 89
24657: PUSH
24658: LD_INT 91
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: ST_TO_ADDR
24718: GO 24721
24720: POP
// if state > - 1 and state < 3 then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: GREATER
24730: IFFALSE 24742
24732: PUSH
24733: LD_VAR 0 3
24737: PUSH
24738: LD_INT 3
24740: LESS
24741: AND
24742: IFFALSE 24799
// for i in result do
24744: LD_ADDR_VAR 0 5
24748: PUSH
24749: LD_VAR 0 4
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24797
// if GetTech ( i , side ) <> state then
24757: LD_VAR 0 5
24761: PPUSH
24762: LD_VAR 0 1
24766: PPUSH
24767: CALL_OW 321
24771: PUSH
24772: LD_VAR 0 3
24776: NONEQUAL
24777: IFFALSE 24795
// result := result diff i ;
24779: LD_ADDR_VAR 0 4
24783: PUSH
24784: LD_VAR 0 4
24788: PUSH
24789: LD_VAR 0 5
24793: DIFF
24794: ST_TO_ADDR
24795: GO 24754
24797: POP
24798: POP
// end ;
24799: LD_VAR 0 4
24803: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24804: LD_INT 0
24806: PPUSH
24807: PPUSH
24808: PPUSH
// result := true ;
24809: LD_ADDR_VAR 0 3
24813: PUSH
24814: LD_INT 1
24816: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24817: LD_ADDR_VAR 0 5
24821: PUSH
24822: LD_VAR 0 2
24826: PPUSH
24827: CALL_OW 480
24831: ST_TO_ADDR
// if not tmp then
24832: LD_VAR 0 5
24836: NOT
24837: IFFALSE 24841
// exit ;
24839: GO 24890
// for i in tmp do
24841: LD_ADDR_VAR 0 4
24845: PUSH
24846: LD_VAR 0 5
24850: PUSH
24851: FOR_IN
24852: IFFALSE 24888
// if GetTech ( i , side ) <> state_researched then
24854: LD_VAR 0 4
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 321
24868: PUSH
24869: LD_INT 2
24871: NONEQUAL
24872: IFFALSE 24886
// begin result := false ;
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_INT 0
24881: ST_TO_ADDR
// exit ;
24882: POP
24883: POP
24884: GO 24890
// end ;
24886: GO 24851
24888: POP
24889: POP
// end ;
24890: LD_VAR 0 3
24894: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24910: LD_VAR 0 1
24914: NOT
24915: IFTRUE 24932
24917: PUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 257
24927: PUSH
24928: LD_INT 9
24930: NONEQUAL
24931: OR
24932: IFFALSE 24936
// exit ;
24934: GO 25515
// side := GetSide ( unit ) ;
24936: LD_ADDR_VAR 0 9
24940: PUSH
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 255
24950: ST_TO_ADDR
// tech_space := tech_spacanom ;
24951: LD_ADDR_VAR 0 12
24955: PUSH
24956: LD_INT 29
24958: ST_TO_ADDR
// tech_time := tech_taurad ;
24959: LD_ADDR_VAR 0 13
24963: PUSH
24964: LD_INT 28
24966: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24967: LD_ADDR_VAR 0 11
24971: PUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 310
24981: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24982: LD_VAR 0 11
24986: PPUSH
24987: CALL_OW 247
24991: PUSH
24992: LD_INT 2
24994: EQUAL
24995: IFFALSE 24999
// exit ;
24997: GO 25515
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24999: LD_ADDR_VAR 0 8
25003: PUSH
25004: LD_INT 81
25006: PUSH
25007: LD_VAR 0 9
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PPUSH
25037: CALL_OW 69
25041: ST_TO_ADDR
// if not tmp then
25042: LD_VAR 0 8
25046: NOT
25047: IFFALSE 25051
// exit ;
25049: GO 25515
// if in_unit then
25051: LD_VAR 0 11
25055: IFFALSE 25079
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25057: LD_ADDR_VAR 0 10
25061: PUSH
25062: LD_VAR 0 8
25066: PPUSH
25067: LD_VAR 0 11
25071: PPUSH
25072: CALL_OW 74
25076: ST_TO_ADDR
25077: GO 25099
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25079: LD_ADDR_VAR 0 10
25083: PUSH
25084: LD_VAR 0 8
25088: PPUSH
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 74
25098: ST_TO_ADDR
// if not enemy then
25099: LD_VAR 0 10
25103: NOT
25104: IFFALSE 25108
// exit ;
25106: GO 25515
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25108: LD_VAR 0 11
25112: IFFALSE 25134
25114: PUSH
25115: LD_VAR 0 11
25119: PPUSH
25120: LD_VAR 0 10
25124: PPUSH
25125: CALL_OW 296
25129: PUSH
25130: LD_INT 13
25132: GREATER
25133: AND
25134: IFTRUE 25156
25136: PUSH
25137: LD_VAR 0 1
25141: PPUSH
25142: LD_VAR 0 10
25146: PPUSH
25147: CALL_OW 296
25151: PUSH
25152: LD_INT 12
25154: GREATER
25155: OR
25156: IFFALSE 25160
// exit ;
25158: GO 25515
// missile := [ 1 ] ;
25160: LD_ADDR_VAR 0 14
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25171: LD_VAR 0 9
25175: PPUSH
25176: LD_VAR 0 12
25180: PPUSH
25181: CALL_OW 325
25185: IFFALSE 25214
// missile := Replace ( missile , missile + 1 , 2 ) ;
25187: LD_ADDR_VAR 0 14
25191: PUSH
25192: LD_VAR 0 14
25196: PPUSH
25197: LD_VAR 0 14
25201: PUSH
25202: LD_INT 1
25204: PLUS
25205: PPUSH
25206: LD_INT 2
25208: PPUSH
25209: CALL_OW 1
25213: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25214: LD_VAR 0 9
25218: PPUSH
25219: LD_VAR 0 13
25223: PPUSH
25224: CALL_OW 325
25228: IFFALSE 25252
25230: PUSH
25231: LD_VAR 0 10
25235: PPUSH
25236: CALL_OW 255
25240: PPUSH
25241: LD_VAR 0 13
25245: PPUSH
25246: CALL_OW 325
25250: NOT
25251: AND
25252: IFFALSE 25281
// missile := Replace ( missile , missile + 1 , 3 ) ;
25254: LD_ADDR_VAR 0 14
25258: PUSH
25259: LD_VAR 0 14
25263: PPUSH
25264: LD_VAR 0 14
25268: PUSH
25269: LD_INT 1
25271: PLUS
25272: PPUSH
25273: LD_INT 3
25275: PPUSH
25276: CALL_OW 1
25280: ST_TO_ADDR
// if missile < 2 then
25281: LD_VAR 0 14
25285: PUSH
25286: LD_INT 2
25288: LESS
25289: IFFALSE 25293
// exit ;
25291: GO 25515
// x := GetX ( enemy ) ;
25293: LD_ADDR_VAR 0 4
25297: PUSH
25298: LD_VAR 0 10
25302: PPUSH
25303: CALL_OW 250
25307: ST_TO_ADDR
// y := GetY ( enemy ) ;
25308: LD_ADDR_VAR 0 5
25312: PUSH
25313: LD_VAR 0 10
25317: PPUSH
25318: CALL_OW 251
25322: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25323: LD_ADDR_VAR 0 6
25327: PUSH
25328: LD_VAR 0 4
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PPUSH
25337: LD_INT 1
25339: PPUSH
25340: CALL_OW 12
25344: PLUS
25345: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25346: LD_ADDR_VAR 0 7
25350: PUSH
25351: LD_VAR 0 5
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PPUSH
25360: LD_INT 1
25362: PPUSH
25363: CALL_OW 12
25367: PLUS
25368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25369: LD_VAR 0 6
25373: PPUSH
25374: LD_VAR 0 7
25378: PPUSH
25379: CALL_OW 488
25383: NOT
25384: IFFALSE 25406
// begin _x := x ;
25386: LD_ADDR_VAR 0 6
25390: PUSH
25391: LD_VAR 0 4
25395: ST_TO_ADDR
// _y := y ;
25396: LD_ADDR_VAR 0 7
25400: PUSH
25401: LD_VAR 0 5
25405: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25406: LD_ADDR_VAR 0 3
25410: PUSH
25411: LD_INT 1
25413: PPUSH
25414: LD_VAR 0 14
25418: PPUSH
25419: CALL_OW 12
25423: ST_TO_ADDR
// case i of 1 :
25424: LD_VAR 0 3
25428: PUSH
25429: LD_INT 1
25431: DOUBLE
25432: EQUAL
25433: IFTRUE 25437
25435: GO 25454
25437: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25438: LD_VAR 0 1
25442: PPUSH
25443: LD_VAR 0 10
25447: PPUSH
25448: CALL_OW 115
25452: GO 25515
25454: LD_INT 2
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25484
25462: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25463: LD_VAR 0 1
25467: PPUSH
25468: LD_VAR 0 6
25472: PPUSH
25473: LD_VAR 0 7
25477: PPUSH
25478: CALL_OW 153
25482: GO 25515
25484: LD_INT 3
25486: DOUBLE
25487: EQUAL
25488: IFTRUE 25492
25490: GO 25514
25492: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25493: LD_VAR 0 1
25497: PPUSH
25498: LD_VAR 0 6
25502: PPUSH
25503: LD_VAR 0 7
25507: PPUSH
25508: CALL_OW 154
25512: GO 25515
25514: POP
// end ;
25515: LD_VAR 0 2
25519: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25520: LD_INT 0
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
// if not unit or not building then
25528: LD_VAR 0 1
25532: NOT
25533: IFTRUE 25542
25535: PUSH
25536: LD_VAR 0 2
25540: NOT
25541: OR
25542: IFFALSE 25546
// exit ;
25544: GO 25704
// x := GetX ( building ) ;
25546: LD_ADDR_VAR 0 5
25550: PUSH
25551: LD_VAR 0 2
25555: PPUSH
25556: CALL_OW 250
25560: ST_TO_ADDR
// y := GetY ( building ) ;
25561: LD_ADDR_VAR 0 6
25565: PUSH
25566: LD_VAR 0 2
25570: PPUSH
25571: CALL_OW 251
25575: ST_TO_ADDR
// for i := 0 to 5 do
25576: LD_ADDR_VAR 0 4
25580: PUSH
25581: DOUBLE
25582: LD_INT 0
25584: DEC
25585: ST_TO_ADDR
25586: LD_INT 5
25588: PUSH
25589: FOR_TO
25590: IFFALSE 25702
// begin _x := ShiftX ( x , i , 3 ) ;
25592: LD_ADDR_VAR 0 7
25596: PUSH
25597: LD_VAR 0 5
25601: PPUSH
25602: LD_VAR 0 4
25606: PPUSH
25607: LD_INT 3
25609: PPUSH
25610: CALL_OW 272
25614: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25615: LD_ADDR_VAR 0 8
25619: PUSH
25620: LD_VAR 0 6
25624: PPUSH
25625: LD_VAR 0 4
25629: PPUSH
25630: LD_INT 3
25632: PPUSH
25633: CALL_OW 273
25637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25638: LD_VAR 0 7
25642: PPUSH
25643: LD_VAR 0 8
25647: PPUSH
25648: CALL_OW 488
25652: NOT
25653: IFFALSE 25657
// continue ;
25655: GO 25589
// if HexInfo ( _x , _y ) = 0 then
25657: LD_VAR 0 7
25661: PPUSH
25662: LD_VAR 0 8
25666: PPUSH
25667: CALL_OW 428
25671: PUSH
25672: LD_INT 0
25674: EQUAL
25675: IFFALSE 25700
// begin ComMoveXY ( unit , _x , _y ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_VAR 0 7
25686: PPUSH
25687: LD_VAR 0 8
25691: PPUSH
25692: CALL_OW 111
// exit ;
25696: POP
25697: POP
25698: GO 25704
// end ; end ;
25700: GO 25589
25702: POP
25703: POP
// end ;
25704: LD_VAR 0 3
25708: RET
// export function ScanBase ( side , base_area ) ; begin
25709: LD_INT 0
25711: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 81
25724: PUSH
25725: LD_VAR 0 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PPUSH
25734: CALL_OW 70
25738: ST_TO_ADDR
// end ;
25739: LD_VAR 0 3
25743: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25744: LD_INT 0
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
// result := false ;
25750: LD_ADDR_VAR 0 2
25754: PUSH
25755: LD_INT 0
25757: ST_TO_ADDR
// side := GetSide ( unit ) ;
25758: LD_ADDR_VAR 0 3
25762: PUSH
25763: LD_VAR 0 1
25767: PPUSH
25768: CALL_OW 255
25772: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25773: LD_ADDR_VAR 0 4
25777: PUSH
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 248
25787: ST_TO_ADDR
// case nat of 1 :
25788: LD_VAR 0 4
25792: PUSH
25793: LD_INT 1
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 25812
25801: POP
// tech := tech_lassight ; 2 :
25802: LD_ADDR_VAR 0 5
25806: PUSH
25807: LD_INT 12
25809: ST_TO_ADDR
25810: GO 25851
25812: LD_INT 2
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25831
25820: POP
// tech := tech_mortar ; 3 :
25821: LD_ADDR_VAR 0 5
25825: PUSH
25826: LD_INT 41
25828: ST_TO_ADDR
25829: GO 25851
25831: LD_INT 3
25833: DOUBLE
25834: EQUAL
25835: IFTRUE 25839
25837: GO 25850
25839: POP
// tech := tech_bazooka ; end ;
25840: LD_ADDR_VAR 0 5
25844: PUSH
25845: LD_INT 44
25847: ST_TO_ADDR
25848: GO 25851
25850: POP
// if Researched ( side , tech ) then
25851: LD_VAR 0 3
25855: PPUSH
25856: LD_VAR 0 5
25860: PPUSH
25861: CALL_OW 325
25865: IFFALSE 25892
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25867: LD_ADDR_VAR 0 2
25871: PUSH
25872: LD_INT 5
25874: PUSH
25875: LD_INT 8
25877: PUSH
25878: LD_INT 9
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: PUSH
25886: LD_VAR 0 4
25890: ARRAY
25891: ST_TO_ADDR
// end ;
25892: LD_VAR 0 2
25896: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25897: LD_INT 0
25899: PPUSH
25900: PPUSH
25901: PPUSH
// if not mines then
25902: LD_VAR 0 2
25906: NOT
25907: IFFALSE 25911
// exit ;
25909: GO 26055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25911: LD_ADDR_VAR 0 5
25915: PUSH
25916: LD_INT 81
25918: PUSH
25919: LD_VAR 0 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: LD_INT 21
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// for i in mines do
25954: LD_ADDR_VAR 0 4
25958: PUSH
25959: LD_VAR 0 2
25963: PUSH
25964: FOR_IN
25965: IFFALSE 26053
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25967: LD_VAR 0 4
25971: PUSH
25972: LD_INT 1
25974: ARRAY
25975: PPUSH
25976: LD_VAR 0 4
25980: PUSH
25981: LD_INT 2
25983: ARRAY
25984: PPUSH
25985: CALL_OW 458
25989: NOT
25990: IFFALSE 25994
// continue ;
25992: GO 25964
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25994: LD_VAR 0 4
25998: PUSH
25999: LD_INT 1
26001: ARRAY
26002: PPUSH
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 2
26010: ARRAY
26011: PPUSH
26012: CALL_OW 428
26016: PUSH
26017: LD_VAR 0 5
26021: IN
26022: IFFALSE 26051
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26024: LD_VAR 0 4
26028: PUSH
26029: LD_INT 1
26031: ARRAY
26032: PPUSH
26033: LD_VAR 0 4
26037: PUSH
26038: LD_INT 2
26040: ARRAY
26041: PPUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL_OW 456
// end ;
26051: GO 25964
26053: POP
26054: POP
// end ;
26055: LD_VAR 0 3
26059: RET
// export function Count ( array ) ; begin
26060: LD_INT 0
26062: PPUSH
// result := array + 0 ;
26063: LD_ADDR_VAR 0 2
26067: PUSH
26068: LD_VAR 0 1
26072: PUSH
26073: LD_INT 0
26075: PLUS
26076: ST_TO_ADDR
// end ;
26077: LD_VAR 0 2
26081: RET
// export function IsEmpty ( building ) ; begin
26082: LD_INT 0
26084: PPUSH
// if not building then
26085: LD_VAR 0 1
26089: NOT
26090: IFFALSE 26094
// exit ;
26092: GO 26137
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26094: LD_ADDR_VAR 0 2
26098: PUSH
26099: LD_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 255
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 58
26123: PUSH
26124: EMPTY
26125: LIST
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PPUSH
26131: CALL_OW 69
26135: IN
26136: ST_TO_ADDR
// end ;
26137: LD_VAR 0 2
26141: RET
// export function IsNotFull ( building ) ; var places ; begin
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
// if not building then
26146: LD_VAR 0 1
26150: NOT
26151: IFFALSE 26155
// exit ;
26153: GO 26183
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26155: LD_ADDR_VAR 0 2
26159: PUSH
26160: LD_VAR 0 1
26164: PPUSH
26165: LD_INT 3
26167: PUSH
26168: LD_INT 62
26170: PUSH
26171: EMPTY
26172: LIST
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PPUSH
26178: CALL_OW 72
26182: ST_TO_ADDR
// end ;
26183: LD_VAR 0 2
26187: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26188: LD_INT 0
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
// tmp := [ ] ;
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: EMPTY
26200: ST_TO_ADDR
// list := [ ] ;
26201: LD_ADDR_VAR 0 5
26205: PUSH
26206: EMPTY
26207: ST_TO_ADDR
// for i = 16 to 25 do
26208: LD_ADDR_VAR 0 4
26212: PUSH
26213: DOUBLE
26214: LD_INT 16
26216: DEC
26217: ST_TO_ADDR
26218: LD_INT 25
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26295
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26224: LD_ADDR_VAR 0 3
26228: PUSH
26229: LD_VAR 0 3
26233: PUSH
26234: LD_INT 22
26236: PUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 255
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 91
26253: PUSH
26254: LD_VAR 0 1
26258: PUSH
26259: LD_INT 6
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 30
26269: PUSH
26270: LD_VAR 0 4
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: PPUSH
26287: CALL_OW 69
26291: ADD
26292: ST_TO_ADDR
26293: GO 26221
26295: POP
26296: POP
// for i = 1 to tmp do
26297: LD_ADDR_VAR 0 4
26301: PUSH
26302: DOUBLE
26303: LD_INT 1
26305: DEC
26306: ST_TO_ADDR
26307: LD_VAR 0 3
26311: PUSH
26312: FOR_TO
26313: IFFALSE 26401
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26315: LD_ADDR_VAR 0 5
26319: PUSH
26320: LD_VAR 0 5
26324: PUSH
26325: LD_VAR 0 3
26329: PUSH
26330: LD_VAR 0 4
26334: ARRAY
26335: PPUSH
26336: CALL_OW 266
26340: PUSH
26341: LD_VAR 0 3
26345: PUSH
26346: LD_VAR 0 4
26350: ARRAY
26351: PPUSH
26352: CALL_OW 250
26356: PUSH
26357: LD_VAR 0 3
26361: PUSH
26362: LD_VAR 0 4
26366: ARRAY
26367: PPUSH
26368: CALL_OW 251
26372: PUSH
26373: LD_VAR 0 3
26377: PUSH
26378: LD_VAR 0 4
26382: ARRAY
26383: PPUSH
26384: CALL_OW 254
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: ADD
26398: ST_TO_ADDR
26399: GO 26312
26401: POP
26402: POP
// result := list ;
26403: LD_ADDR_VAR 0 2
26407: PUSH
26408: LD_VAR 0 5
26412: ST_TO_ADDR
// end ;
26413: LD_VAR 0 2
26417: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
// if not factory then
26427: LD_VAR 0 1
26431: NOT
26432: IFFALSE 26436
// exit ;
26434: GO 27039
// if control = control_apeman then
26436: LD_VAR 0 4
26440: PUSH
26441: LD_INT 5
26443: EQUAL
26444: IFFALSE 26553
// begin tmp := UnitsInside ( factory ) ;
26446: LD_ADDR_VAR 0 8
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 313
26460: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26461: LD_VAR 0 8
26465: PPUSH
26466: LD_INT 25
26468: PUSH
26469: LD_INT 12
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PPUSH
26476: CALL_OW 72
26480: NOT
26481: IFFALSE 26491
// control := control_manual ;
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: LD_INT 1
26490: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26491: LD_ADDR_VAR 0 8
26495: PUSH
26496: LD_VAR 0 1
26500: PPUSH
26501: CALL 26188 0 1
26505: ST_TO_ADDR
// if tmp then
26506: LD_VAR 0 8
26510: IFFALSE 26553
// begin for i in tmp do
26512: LD_ADDR_VAR 0 7
26516: PUSH
26517: LD_VAR 0 8
26521: PUSH
26522: FOR_IN
26523: IFFALSE 26551
// if i [ 1 ] = b_ext_radio then
26525: LD_VAR 0 7
26529: PUSH
26530: LD_INT 1
26532: ARRAY
26533: PUSH
26534: LD_INT 22
26536: EQUAL
26537: IFFALSE 26549
// begin control := control_remote ;
26539: LD_ADDR_VAR 0 4
26543: PUSH
26544: LD_INT 2
26546: ST_TO_ADDR
// break ;
26547: GO 26551
// end ;
26549: GO 26522
26551: POP
26552: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_VAR 0 2
26562: PPUSH
26563: LD_VAR 0 3
26567: PPUSH
26568: LD_VAR 0 4
26572: PPUSH
26573: LD_VAR 0 5
26577: PPUSH
26578: CALL_OW 448
26582: IFFALSE 26617
// begin result := [ chassis , engine , control , weapon ] ;
26584: LD_ADDR_VAR 0 6
26588: PUSH
26589: LD_VAR 0 2
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 4
26603: PUSH
26604: LD_VAR 0 5
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// exit ;
26615: GO 27039
// end ; _chassis := AvailableChassisList ( factory ) ;
26617: LD_ADDR_VAR 0 9
26621: PUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 475
26631: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26632: LD_ADDR_VAR 0 11
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 476
26646: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26647: LD_ADDR_VAR 0 12
26651: PUSH
26652: LD_VAR 0 1
26656: PPUSH
26657: CALL_OW 477
26661: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26662: LD_ADDR_VAR 0 10
26666: PUSH
26667: LD_VAR 0 1
26671: PPUSH
26672: CALL_OW 478
26676: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26677: LD_VAR 0 9
26681: NOT
26682: IFTRUE 26691
26684: PUSH
26685: LD_VAR 0 11
26689: NOT
26690: OR
26691: IFTRUE 26700
26693: PUSH
26694: LD_VAR 0 12
26698: NOT
26699: OR
26700: IFTRUE 26709
26702: PUSH
26703: LD_VAR 0 10
26707: NOT
26708: OR
26709: IFFALSE 26744
// begin result := [ chassis , engine , control , weapon ] ;
26711: LD_ADDR_VAR 0 6
26715: PUSH
26716: LD_VAR 0 2
26720: PUSH
26721: LD_VAR 0 3
26725: PUSH
26726: LD_VAR 0 4
26730: PUSH
26731: LD_VAR 0 5
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// exit ;
26742: GO 27039
// end ; if not chassis in _chassis then
26744: LD_VAR 0 2
26748: PUSH
26749: LD_VAR 0 9
26753: IN
26754: NOT
26755: IFFALSE 26781
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26757: LD_ADDR_VAR 0 2
26761: PUSH
26762: LD_VAR 0 9
26766: PUSH
26767: LD_INT 1
26769: PPUSH
26770: LD_VAR 0 9
26774: PPUSH
26775: CALL_OW 12
26779: ARRAY
26780: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26781: LD_VAR 0 2
26785: PPUSH
26786: LD_VAR 0 3
26790: PPUSH
26791: CALL 27044 0 2
26795: NOT
26796: IFFALSE 26857
// repeat engine := _engine [ 1 ] ;
26798: LD_ADDR_VAR 0 3
26802: PUSH
26803: LD_VAR 0 11
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26812: LD_ADDR_VAR 0 11
26816: PUSH
26817: LD_VAR 0 11
26821: PPUSH
26822: LD_INT 1
26824: PPUSH
26825: CALL_OW 3
26829: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26830: LD_VAR 0 2
26834: PPUSH
26835: LD_VAR 0 3
26839: PPUSH
26840: CALL 27044 0 2
26844: IFTRUE 26855
26846: PUSH
26847: LD_VAR 0 11
26851: PUSH
26852: EMPTY
26853: EQUAL
26854: OR
26855: IFFALSE 26798
// if not control in _control then
26857: LD_VAR 0 4
26861: PUSH
26862: LD_VAR 0 12
26866: IN
26867: NOT
26868: IFFALSE 26894
// control := _control [ rand ( 1 , _control ) ] ;
26870: LD_ADDR_VAR 0 4
26874: PUSH
26875: LD_VAR 0 12
26879: PUSH
26880: LD_INT 1
26882: PPUSH
26883: LD_VAR 0 12
26887: PPUSH
26888: CALL_OW 12
26892: ARRAY
26893: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26894: LD_VAR 0 2
26898: PPUSH
26899: LD_VAR 0 5
26903: PPUSH
26904: CALL 27266 0 2
26908: NOT
26909: IFFALSE 26970
// repeat weapon := _weapon [ 1 ] ;
26911: LD_ADDR_VAR 0 5
26915: PUSH
26916: LD_VAR 0 10
26920: PUSH
26921: LD_INT 1
26923: ARRAY
26924: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26925: LD_ADDR_VAR 0 10
26929: PUSH
26930: LD_VAR 0 10
26934: PPUSH
26935: LD_INT 1
26937: PPUSH
26938: CALL_OW 3
26942: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26943: LD_VAR 0 2
26947: PPUSH
26948: LD_VAR 0 5
26952: PPUSH
26953: CALL 27266 0 2
26957: IFTRUE 26968
26959: PUSH
26960: LD_VAR 0 10
26964: PUSH
26965: EMPTY
26966: EQUAL
26967: OR
26968: IFFALSE 26911
// result := [ ] ;
26970: LD_ADDR_VAR 0 6
26974: PUSH
26975: EMPTY
26976: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: LD_VAR 0 3
26991: PPUSH
26992: LD_VAR 0 4
26996: PPUSH
26997: LD_VAR 0 5
27001: PPUSH
27002: CALL_OW 448
27006: IFFALSE 27039
// result := [ chassis , engine , control , weapon ] ;
27008: LD_ADDR_VAR 0 6
27012: PUSH
27013: LD_VAR 0 2
27017: PUSH
27018: LD_VAR 0 3
27022: PUSH
27023: LD_VAR 0 4
27027: PUSH
27028: LD_VAR 0 5
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
// end ;
27039: LD_VAR 0 6
27043: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27044: LD_INT 0
27046: PPUSH
// if not chassis or not engine then
27047: LD_VAR 0 1
27051: NOT
27052: IFTRUE 27061
27054: PUSH
27055: LD_VAR 0 2
27059: NOT
27060: OR
27061: IFFALSE 27065
// exit ;
27063: GO 27261
// case engine of engine_solar :
27065: LD_VAR 0 2
27069: PUSH
27070: LD_INT 2
27072: DOUBLE
27073: EQUAL
27074: IFTRUE 27078
27076: GO 27116
27078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27079: LD_ADDR_VAR 0 3
27083: PUSH
27084: LD_INT 11
27086: PUSH
27087: LD_INT 12
27089: PUSH
27090: LD_INT 13
27092: PUSH
27093: LD_INT 14
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: LD_INT 3
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
27114: GO 27245
27116: LD_INT 1
27118: DOUBLE
27119: EQUAL
27120: IFTRUE 27124
27122: GO 27186
27124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27125: LD_ADDR_VAR 0 3
27129: PUSH
27130: LD_INT 11
27132: PUSH
27133: LD_INT 12
27135: PUSH
27136: LD_INT 13
27138: PUSH
27139: LD_INT 14
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 4
27153: PUSH
27154: LD_INT 5
27156: PUSH
27157: LD_INT 21
27159: PUSH
27160: LD_INT 23
27162: PUSH
27163: LD_INT 22
27165: PUSH
27166: LD_INT 24
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
27184: GO 27245
27186: LD_INT 3
27188: DOUBLE
27189: EQUAL
27190: IFTRUE 27194
27192: GO 27244
27194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27195: LD_ADDR_VAR 0 3
27199: PUSH
27200: LD_INT 13
27202: PUSH
27203: LD_INT 14
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 4
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 21
27220: PUSH
27221: LD_INT 22
27223: PUSH
27224: LD_INT 23
27226: PUSH
27227: LD_INT 24
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
27242: GO 27245
27244: POP
// result := ( chassis in result ) ;
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: LD_VAR 0 1
27254: PUSH
27255: LD_VAR 0 3
27259: IN
27260: ST_TO_ADDR
// end ;
27261: LD_VAR 0 3
27265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27266: LD_INT 0
27268: PPUSH
// if not chassis or not weapon then
27269: LD_VAR 0 1
27273: NOT
27274: IFTRUE 27283
27276: PUSH
27277: LD_VAR 0 2
27281: NOT
27282: OR
27283: IFFALSE 27287
// exit ;
27285: GO 28347
// case weapon of us_machine_gun :
27287: LD_VAR 0 2
27291: PUSH
27292: LD_INT 2
27294: DOUBLE
27295: EQUAL
27296: IFTRUE 27300
27298: GO 27330
27300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27301: LD_ADDR_VAR 0 3
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 3
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: LD_INT 5
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: ST_TO_ADDR
27328: GO 28331
27330: LD_INT 3
27332: DOUBLE
27333: EQUAL
27334: IFTRUE 27338
27336: GO 27368
27338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27339: LD_ADDR_VAR 0 3
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: LD_INT 5
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
27366: GO 28331
27368: LD_INT 11
27370: DOUBLE
27371: EQUAL
27372: IFTRUE 27376
27374: GO 27406
27376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27377: LD_ADDR_VAR 0 3
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 3
27390: PUSH
27391: LD_INT 4
27393: PUSH
27394: LD_INT 5
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
27404: GO 28331
27406: LD_INT 4
27408: DOUBLE
27409: EQUAL
27410: IFTRUE 27414
27412: GO 27440
27414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27415: LD_ADDR_VAR 0 3
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: LD_INT 4
27428: PUSH
27429: LD_INT 5
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
27438: GO 28331
27440: LD_INT 5
27442: DOUBLE
27443: EQUAL
27444: IFTRUE 27448
27446: GO 27474
27448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: LD_INT 4
27462: PUSH
27463: LD_INT 5
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
27472: GO 28331
27474: LD_INT 9
27476: DOUBLE
27477: EQUAL
27478: IFTRUE 27482
27480: GO 27508
27482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27483: LD_ADDR_VAR 0 3
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 4
27496: PUSH
27497: LD_INT 5
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
27506: GO 28331
27508: LD_INT 7
27510: DOUBLE
27511: EQUAL
27512: IFTRUE 27516
27514: GO 27542
27516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27517: LD_ADDR_VAR 0 3
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 5
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
27540: GO 28331
27542: LD_INT 12
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27576
27550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27551: LD_ADDR_VAR 0 3
27555: PUSH
27556: LD_INT 2
27558: PUSH
27559: LD_INT 3
27561: PUSH
27562: LD_INT 4
27564: PUSH
27565: LD_INT 5
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
27574: GO 28331
27576: LD_INT 13
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27584
27582: GO 27610
27584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 4
27598: PUSH
27599: LD_INT 5
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: ST_TO_ADDR
27608: GO 28331
27610: LD_INT 14
27612: DOUBLE
27613: EQUAL
27614: IFTRUE 27618
27616: GO 27636
27618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_INT 4
27626: PUSH
27627: LD_INT 5
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: ST_TO_ADDR
27634: GO 28331
27636: LD_INT 6
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27662
27644: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: LD_INT 5
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: ST_TO_ADDR
27660: GO 28331
27662: LD_INT 10
27664: DOUBLE
27665: EQUAL
27666: IFTRUE 27670
27668: GO 27688
27670: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27671: LD_ADDR_VAR 0 3
27675: PUSH
27676: LD_INT 4
27678: PUSH
27679: LD_INT 5
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: ST_TO_ADDR
27686: GO 28331
27688: LD_INT 22
27690: DOUBLE
27691: EQUAL
27692: IFTRUE 27696
27694: GO 27722
27696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27697: LD_ADDR_VAR 0 3
27701: PUSH
27702: LD_INT 11
27704: PUSH
27705: LD_INT 12
27707: PUSH
27708: LD_INT 13
27710: PUSH
27711: LD_INT 14
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
27720: GO 28331
27722: LD_INT 23
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27730
27728: GO 27756
27730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27731: LD_ADDR_VAR 0 3
27735: PUSH
27736: LD_INT 11
27738: PUSH
27739: LD_INT 12
27741: PUSH
27742: LD_INT 13
27744: PUSH
27745: LD_INT 14
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: ST_TO_ADDR
27754: GO 28331
27756: LD_INT 24
27758: DOUBLE
27759: EQUAL
27760: IFTRUE 27764
27762: GO 27790
27764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27765: LD_ADDR_VAR 0 3
27769: PUSH
27770: LD_INT 11
27772: PUSH
27773: LD_INT 12
27775: PUSH
27776: LD_INT 13
27778: PUSH
27779: LD_INT 14
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
27788: GO 28331
27790: LD_INT 30
27792: DOUBLE
27793: EQUAL
27794: IFTRUE 27798
27796: GO 27824
27798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27799: LD_ADDR_VAR 0 3
27803: PUSH
27804: LD_INT 11
27806: PUSH
27807: LD_INT 12
27809: PUSH
27810: LD_INT 13
27812: PUSH
27813: LD_INT 14
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
27822: GO 28331
27824: LD_INT 25
27826: DOUBLE
27827: EQUAL
27828: IFTRUE 27832
27830: GO 27850
27832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27833: LD_ADDR_VAR 0 3
27837: PUSH
27838: LD_INT 13
27840: PUSH
27841: LD_INT 14
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: ST_TO_ADDR
27848: GO 28331
27850: LD_INT 27
27852: DOUBLE
27853: EQUAL
27854: IFTRUE 27858
27856: GO 27876
27858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27859: LD_ADDR_VAR 0 3
27863: PUSH
27864: LD_INT 13
27866: PUSH
27867: LD_INT 14
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: ST_TO_ADDR
27874: GO 28331
27876: LD_INT 92
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27910
27884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: LD_INT 11
27892: PUSH
27893: LD_INT 12
27895: PUSH
27896: LD_INT 13
27898: PUSH
27899: LD_INT 14
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
27908: GO 28331
27910: LD_INT 28
27912: DOUBLE
27913: EQUAL
27914: IFTRUE 27918
27916: GO 27936
27918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_INT 13
27926: PUSH
27927: LD_INT 14
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: ST_TO_ADDR
27934: GO 28331
27936: LD_INT 29
27938: DOUBLE
27939: EQUAL
27940: IFTRUE 27944
27942: GO 27962
27944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27945: LD_ADDR_VAR 0 3
27949: PUSH
27950: LD_INT 13
27952: PUSH
27953: LD_INT 14
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: ST_TO_ADDR
27960: GO 28331
27962: LD_INT 31
27964: DOUBLE
27965: EQUAL
27966: IFTRUE 27970
27968: GO 27988
27970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27971: LD_ADDR_VAR 0 3
27975: PUSH
27976: LD_INT 13
27978: PUSH
27979: LD_INT 14
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: ST_TO_ADDR
27986: GO 28331
27988: LD_INT 26
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28014
27996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 13
28004: PUSH
28005: LD_INT 14
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28331
28014: LD_INT 42
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28048
28022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 22
28033: PUSH
28034: LD_INT 23
28036: PUSH
28037: LD_INT 24
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28331
28048: LD_INT 43
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28082
28056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 22
28067: PUSH
28068: LD_INT 23
28070: PUSH
28071: LD_INT 24
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28331
28082: LD_INT 44
28084: DOUBLE
28085: EQUAL
28086: IFTRUE 28090
28088: GO 28116
28090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 21
28098: PUSH
28099: LD_INT 22
28101: PUSH
28102: LD_INT 23
28104: PUSH
28105: LD_INT 24
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
28114: GO 28331
28116: LD_INT 45
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28150
28124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 21
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_INT 23
28138: PUSH
28139: LD_INT 24
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
28148: GO 28331
28150: LD_INT 49
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28184
28158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 21
28166: PUSH
28167: LD_INT 22
28169: PUSH
28170: LD_INT 23
28172: PUSH
28173: LD_INT 24
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
28182: GO 28331
28184: LD_INT 51
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28218
28192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 21
28200: PUSH
28201: LD_INT 22
28203: PUSH
28204: LD_INT 23
28206: PUSH
28207: LD_INT 24
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: ST_TO_ADDR
28216: GO 28331
28218: LD_INT 52
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28252
28226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28227: LD_ADDR_VAR 0 3
28231: PUSH
28232: LD_INT 21
28234: PUSH
28235: LD_INT 22
28237: PUSH
28238: LD_INT 23
28240: PUSH
28241: LD_INT 24
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
28250: GO 28331
28252: LD_INT 53
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28260
28258: GO 28278
28260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28261: LD_ADDR_VAR 0 3
28265: PUSH
28266: LD_INT 23
28268: PUSH
28269: LD_INT 24
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: ST_TO_ADDR
28276: GO 28331
28278: LD_INT 46
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28304
28286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_INT 23
28294: PUSH
28295: LD_INT 24
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: ST_TO_ADDR
28302: GO 28331
28304: LD_INT 47
28306: DOUBLE
28307: EQUAL
28308: IFTRUE 28312
28310: GO 28330
28312: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28313: LD_ADDR_VAR 0 3
28317: PUSH
28318: LD_INT 23
28320: PUSH
28321: LD_INT 24
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: ST_TO_ADDR
28328: GO 28331
28330: POP
// result := ( chassis in result ) ;
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_VAR 0 1
28340: PUSH
28341: LD_VAR 0 3
28345: IN
28346: ST_TO_ADDR
// end ;
28347: LD_VAR 0 3
28351: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
28358: PPUSH
28359: PPUSH
28360: PPUSH
// result := array ;
28361: LD_ADDR_VAR 0 5
28365: PUSH
28366: LD_VAR 0 1
28370: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28371: LD_VAR 0 1
28375: NOT
28376: IFTRUE 28385
28378: PUSH
28379: LD_VAR 0 2
28383: NOT
28384: OR
28385: IFTRUE 28394
28387: PUSH
28388: LD_VAR 0 3
28392: NOT
28393: OR
28394: IFTRUE 28408
28396: PUSH
28397: LD_VAR 0 2
28401: PUSH
28402: LD_VAR 0 1
28406: GREATER
28407: OR
28408: IFTRUE 28422
28410: PUSH
28411: LD_VAR 0 3
28415: PUSH
28416: LD_VAR 0 1
28420: GREATER
28421: OR
28422: IFFALSE 28426
// exit ;
28424: GO 28722
// if direction then
28426: LD_VAR 0 4
28430: IFFALSE 28494
// begin d := 1 ;
28432: LD_ADDR_VAR 0 9
28436: PUSH
28437: LD_INT 1
28439: ST_TO_ADDR
// if i_from > i_to then
28440: LD_VAR 0 2
28444: PUSH
28445: LD_VAR 0 3
28449: GREATER
28450: IFFALSE 28476
// length := ( array - i_from ) + i_to else
28452: LD_ADDR_VAR 0 11
28456: PUSH
28457: LD_VAR 0 1
28461: PUSH
28462: LD_VAR 0 2
28466: MINUS
28467: PUSH
28468: LD_VAR 0 3
28472: PLUS
28473: ST_TO_ADDR
28474: GO 28492
// length := i_to - i_from ;
28476: LD_ADDR_VAR 0 11
28480: PUSH
28481: LD_VAR 0 3
28485: PUSH
28486: LD_VAR 0 2
28490: MINUS
28491: ST_TO_ADDR
// end else
28492: GO 28555
// begin d := - 1 ;
28494: LD_ADDR_VAR 0 9
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: ST_TO_ADDR
// if i_from > i_to then
28503: LD_VAR 0 2
28507: PUSH
28508: LD_VAR 0 3
28512: GREATER
28513: IFFALSE 28533
// length := i_from - i_to else
28515: LD_ADDR_VAR 0 11
28519: PUSH
28520: LD_VAR 0 2
28524: PUSH
28525: LD_VAR 0 3
28529: MINUS
28530: ST_TO_ADDR
28531: GO 28555
// length := ( array - i_to ) + i_from ;
28533: LD_ADDR_VAR 0 11
28537: PUSH
28538: LD_VAR 0 1
28542: PUSH
28543: LD_VAR 0 3
28547: MINUS
28548: PUSH
28549: LD_VAR 0 2
28553: PLUS
28554: ST_TO_ADDR
// end ; if not length then
28555: LD_VAR 0 11
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28722
// tmp := array ;
28564: LD_ADDR_VAR 0 10
28568: PUSH
28569: LD_VAR 0 1
28573: ST_TO_ADDR
// for i = 1 to length do
28574: LD_ADDR_VAR 0 6
28578: PUSH
28579: DOUBLE
28580: LD_INT 1
28582: DEC
28583: ST_TO_ADDR
28584: LD_VAR 0 11
28588: PUSH
28589: FOR_TO
28590: IFFALSE 28710
// begin for j = 1 to array do
28592: LD_ADDR_VAR 0 7
28596: PUSH
28597: DOUBLE
28598: LD_INT 1
28600: DEC
28601: ST_TO_ADDR
28602: LD_VAR 0 1
28606: PUSH
28607: FOR_TO
28608: IFFALSE 28696
// begin k := j + d ;
28610: LD_ADDR_VAR 0 8
28614: PUSH
28615: LD_VAR 0 7
28619: PUSH
28620: LD_VAR 0 9
28624: PLUS
28625: ST_TO_ADDR
// if k > array then
28626: LD_VAR 0 8
28630: PUSH
28631: LD_VAR 0 1
28635: GREATER
28636: IFFALSE 28646
// k := 1 ;
28638: LD_ADDR_VAR 0 8
28642: PUSH
28643: LD_INT 1
28645: ST_TO_ADDR
// if not k then
28646: LD_VAR 0 8
28650: NOT
28651: IFFALSE 28663
// k := array ;
28653: LD_ADDR_VAR 0 8
28657: PUSH
28658: LD_VAR 0 1
28662: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28663: LD_ADDR_VAR 0 10
28667: PUSH
28668: LD_VAR 0 10
28672: PPUSH
28673: LD_VAR 0 8
28677: PPUSH
28678: LD_VAR 0 1
28682: PUSH
28683: LD_VAR 0 7
28687: ARRAY
28688: PPUSH
28689: CALL_OW 1
28693: ST_TO_ADDR
// end ;
28694: GO 28607
28696: POP
28697: POP
// array := tmp ;
28698: LD_ADDR_VAR 0 1
28702: PUSH
28703: LD_VAR 0 10
28707: ST_TO_ADDR
// end ;
28708: GO 28589
28710: POP
28711: POP
// result := array ;
28712: LD_ADDR_VAR 0 5
28716: PUSH
28717: LD_VAR 0 1
28721: ST_TO_ADDR
// end ;
28722: LD_VAR 0 5
28726: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
// result := 0 ;
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 0
28738: ST_TO_ADDR
// if not array or not value in array then
28739: LD_VAR 0 1
28743: NOT
28744: IFTRUE 28759
28746: PUSH
28747: LD_VAR 0 2
28751: PUSH
28752: LD_VAR 0 1
28756: IN
28757: NOT
28758: OR
28759: IFFALSE 28763
// exit ;
28761: GO 28817
// for i = 1 to array do
28763: LD_ADDR_VAR 0 4
28767: PUSH
28768: DOUBLE
28769: LD_INT 1
28771: DEC
28772: ST_TO_ADDR
28773: LD_VAR 0 1
28777: PUSH
28778: FOR_TO
28779: IFFALSE 28815
// if value = array [ i ] then
28781: LD_VAR 0 2
28785: PUSH
28786: LD_VAR 0 1
28790: PUSH
28791: LD_VAR 0 4
28795: ARRAY
28796: EQUAL
28797: IFFALSE 28813
// begin result := i ;
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_VAR 0 4
28808: ST_TO_ADDR
// exit ;
28809: POP
28810: POP
28811: GO 28817
// end ;
28813: GO 28778
28815: POP
28816: POP
// end ;
28817: LD_VAR 0 3
28821: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28822: LD_INT 0
28824: PPUSH
// vc_chassis := chassis ;
28825: LD_ADDR_OWVAR 37
28829: PUSH
28830: LD_VAR 0 1
28834: ST_TO_ADDR
// vc_engine := engine ;
28835: LD_ADDR_OWVAR 39
28839: PUSH
28840: LD_VAR 0 2
28844: ST_TO_ADDR
// vc_control := control ;
28845: LD_ADDR_OWVAR 38
28849: PUSH
28850: LD_VAR 0 3
28854: ST_TO_ADDR
// vc_weapon := weapon ;
28855: LD_ADDR_OWVAR 40
28859: PUSH
28860: LD_VAR 0 4
28864: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28865: LD_ADDR_OWVAR 41
28869: PUSH
28870: LD_VAR 0 5
28874: ST_TO_ADDR
// end ;
28875: LD_VAR 0 6
28879: RET
// export function WantPlant ( unit ) ; var task ; begin
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
// result := false ;
28884: LD_ADDR_VAR 0 2
28888: PUSH
28889: LD_INT 0
28891: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28892: LD_ADDR_VAR 0 3
28896: PUSH
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 437
28906: ST_TO_ADDR
// if task then
28907: LD_VAR 0 3
28911: IFFALSE 28939
// if task [ 1 ] [ 1 ] = p then
28913: LD_VAR 0 3
28917: PUSH
28918: LD_INT 1
28920: ARRAY
28921: PUSH
28922: LD_INT 1
28924: ARRAY
28925: PUSH
28926: LD_STRING p
28928: EQUAL
28929: IFFALSE 28939
// result := true ;
28931: LD_ADDR_VAR 0 2
28935: PUSH
28936: LD_INT 1
28938: ST_TO_ADDR
// end ;
28939: LD_VAR 0 2
28943: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
// if pos < 1 then
28950: LD_VAR 0 2
28954: PUSH
28955: LD_INT 1
28957: LESS
28958: IFFALSE 28962
// exit ;
28960: GO 29265
// if pos = 1 then
28962: LD_VAR 0 2
28966: PUSH
28967: LD_INT 1
28969: EQUAL
28970: IFFALSE 29003
// result := Replace ( arr , pos [ 1 ] , value ) else
28972: LD_ADDR_VAR 0 4
28976: PUSH
28977: LD_VAR 0 1
28981: PPUSH
28982: LD_VAR 0 2
28986: PUSH
28987: LD_INT 1
28989: ARRAY
28990: PPUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: CALL_OW 1
29000: ST_TO_ADDR
29001: GO 29265
// begin tmp := arr ;
29003: LD_ADDR_VAR 0 6
29007: PUSH
29008: LD_VAR 0 1
29012: ST_TO_ADDR
// s_arr := [ tmp ] ;
29013: LD_ADDR_VAR 0 7
29017: PUSH
29018: LD_VAR 0 6
29022: PUSH
29023: EMPTY
29024: LIST
29025: ST_TO_ADDR
// for i = 1 to pos - 1 do
29026: LD_ADDR_VAR 0 5
29030: PUSH
29031: DOUBLE
29032: LD_INT 1
29034: DEC
29035: ST_TO_ADDR
29036: LD_VAR 0 2
29040: PUSH
29041: LD_INT 1
29043: MINUS
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29091
// begin tmp := tmp [ pos [ i ] ] ;
29048: LD_ADDR_VAR 0 6
29052: PUSH
29053: LD_VAR 0 6
29057: PUSH
29058: LD_VAR 0 2
29062: PUSH
29063: LD_VAR 0 5
29067: ARRAY
29068: ARRAY
29069: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29070: LD_ADDR_VAR 0 7
29074: PUSH
29075: LD_VAR 0 7
29079: PUSH
29080: LD_VAR 0 6
29084: PUSH
29085: EMPTY
29086: LIST
29087: ADD
29088: ST_TO_ADDR
// end ;
29089: GO 29045
29091: POP
29092: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29093: LD_ADDR_VAR 0 6
29097: PUSH
29098: LD_VAR 0 6
29102: PPUSH
29103: LD_VAR 0 2
29107: PUSH
29108: LD_VAR 0 2
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 3
29118: PPUSH
29119: CALL_OW 1
29123: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29124: LD_ADDR_VAR 0 7
29128: PUSH
29129: LD_VAR 0 7
29133: PPUSH
29134: LD_VAR 0 7
29138: PPUSH
29139: LD_VAR 0 6
29143: PPUSH
29144: CALL_OW 1
29148: ST_TO_ADDR
// for i = s_arr downto 2 do
29149: LD_ADDR_VAR 0 5
29153: PUSH
29154: DOUBLE
29155: LD_VAR 0 7
29159: INC
29160: ST_TO_ADDR
29161: LD_INT 2
29163: PUSH
29164: FOR_DOWNTO
29165: IFFALSE 29249
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29167: LD_ADDR_VAR 0 6
29171: PUSH
29172: LD_VAR 0 7
29176: PUSH
29177: LD_VAR 0 5
29181: PUSH
29182: LD_INT 1
29184: MINUS
29185: ARRAY
29186: PPUSH
29187: LD_VAR 0 2
29191: PUSH
29192: LD_VAR 0 5
29196: PUSH
29197: LD_INT 1
29199: MINUS
29200: ARRAY
29201: PPUSH
29202: LD_VAR 0 7
29206: PUSH
29207: LD_VAR 0 5
29211: ARRAY
29212: PPUSH
29213: CALL_OW 1
29217: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29218: LD_ADDR_VAR 0 7
29222: PUSH
29223: LD_VAR 0 7
29227: PPUSH
29228: LD_VAR 0 5
29232: PUSH
29233: LD_INT 1
29235: MINUS
29236: PPUSH
29237: LD_VAR 0 6
29241: PPUSH
29242: CALL_OW 1
29246: ST_TO_ADDR
// end ;
29247: GO 29164
29249: POP
29250: POP
// result := s_arr [ 1 ] ;
29251: LD_ADDR_VAR 0 4
29255: PUSH
29256: LD_VAR 0 7
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: ST_TO_ADDR
// end ; end ;
29265: LD_VAR 0 4
29269: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29270: LD_INT 0
29272: PPUSH
29273: PPUSH
// if not list then
29274: LD_VAR 0 1
29278: NOT
29279: IFFALSE 29283
// exit ;
29281: GO 29374
// i := list [ pos1 ] ;
29283: LD_ADDR_VAR 0 5
29287: PUSH
29288: LD_VAR 0 1
29292: PUSH
29293: LD_VAR 0 2
29297: ARRAY
29298: ST_TO_ADDR
// if not i then
29299: LD_VAR 0 5
29303: NOT
29304: IFFALSE 29308
// exit ;
29306: GO 29374
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 1
29327: PUSH
29328: LD_VAR 0 3
29332: ARRAY
29333: PPUSH
29334: CALL_OW 1
29338: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29339: LD_ADDR_VAR 0 1
29343: PUSH
29344: LD_VAR 0 1
29348: PPUSH
29349: LD_VAR 0 3
29353: PPUSH
29354: LD_VAR 0 5
29358: PPUSH
29359: CALL_OW 1
29363: ST_TO_ADDR
// result := list ;
29364: LD_ADDR_VAR 0 4
29368: PUSH
29369: LD_VAR 0 1
29373: ST_TO_ADDR
// end ;
29374: LD_VAR 0 4
29378: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29379: LD_INT 0
29381: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29382: LD_ADDR_VAR 0 5
29386: PUSH
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL_OW 250
29396: PPUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 251
29406: PPUSH
29407: LD_VAR 0 2
29411: PPUSH
29412: LD_VAR 0 3
29416: PPUSH
29417: LD_VAR 0 4
29421: PPUSH
29422: CALL 29804 0 5
29426: ST_TO_ADDR
// end ;
29427: LD_VAR 0 5
29431: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29432: LD_INT 0
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
// if not list or not unit then
29438: LD_VAR 0 2
29442: NOT
29443: IFTRUE 29452
29445: PUSH
29446: LD_VAR 0 1
29450: NOT
29451: OR
29452: IFFALSE 29456
// exit ;
29454: GO 29799
// result := [ ] ;
29456: LD_ADDR_VAR 0 5
29460: PUSH
29461: EMPTY
29462: ST_TO_ADDR
// for i in list do
29463: LD_ADDR_VAR 0 6
29467: PUSH
29468: LD_VAR 0 2
29472: PUSH
29473: FOR_IN
29474: IFFALSE 29692
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29476: LD_ADDR_VAR 0 8
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: LD_VAR 0 6
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: LD_VAR 0 6
29499: PUSH
29500: LD_INT 2
29502: ARRAY
29503: PPUSH
29504: CALL_OW 297
29508: ST_TO_ADDR
// if not Count ( result ) then
29509: LD_VAR 0 5
29513: PPUSH
29514: CALL 26060 0 1
29518: NOT
29519: IFFALSE 29552
// begin result := Join ( result , [ i , tmp ] ) ;
29521: LD_ADDR_VAR 0 5
29525: PUSH
29526: LD_VAR 0 5
29530: PPUSH
29531: LD_VAR 0 6
29535: PUSH
29536: LD_VAR 0 8
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PPUSH
29545: CALL 61992 0 2
29549: ST_TO_ADDR
// continue ;
29550: GO 29473
// end ; if result [ result ] [ 2 ] <= tmp then
29552: LD_VAR 0 5
29556: PUSH
29557: LD_VAR 0 5
29561: ARRAY
29562: PUSH
29563: LD_INT 2
29565: ARRAY
29566: PUSH
29567: LD_VAR 0 8
29571: LESSEQUAL
29572: IFFALSE 29605
// result := Join ( result , [ i , tmp ] ) else
29574: LD_ADDR_VAR 0 5
29578: PUSH
29579: LD_VAR 0 5
29583: PPUSH
29584: LD_VAR 0 6
29588: PUSH
29589: LD_VAR 0 8
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PPUSH
29598: CALL 61992 0 2
29602: ST_TO_ADDR
29603: GO 29690
// begin for j := 1 to Count ( result ) do
29605: LD_ADDR_VAR 0 7
29609: PUSH
29610: DOUBLE
29611: LD_INT 1
29613: DEC
29614: ST_TO_ADDR
29615: LD_VAR 0 5
29619: PPUSH
29620: CALL 26060 0 1
29624: PUSH
29625: FOR_TO
29626: IFFALSE 29688
// begin if tmp < result [ j ] [ 2 ] then
29628: LD_VAR 0 8
29632: PUSH
29633: LD_VAR 0 5
29637: PUSH
29638: LD_VAR 0 7
29642: ARRAY
29643: PUSH
29644: LD_INT 2
29646: ARRAY
29647: LESS
29648: IFFALSE 29686
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29650: LD_ADDR_VAR 0 5
29654: PUSH
29655: LD_VAR 0 5
29659: PPUSH
29660: LD_VAR 0 7
29664: PPUSH
29665: LD_VAR 0 6
29669: PUSH
29670: LD_VAR 0 8
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 2
29683: ST_TO_ADDR
// break ;
29684: GO 29688
// end ; end ;
29686: GO 29625
29688: POP
29689: POP
// end ; end ;
29690: GO 29473
29692: POP
29693: POP
// if result and not asc then
29694: LD_VAR 0 5
29698: IFFALSE 29707
29700: PUSH
29701: LD_VAR 0 3
29705: NOT
29706: AND
29707: IFFALSE 29724
// result := ReverseArray ( result ) ;
29709: LD_ADDR_VAR 0 5
29713: PUSH
29714: LD_VAR 0 5
29718: PPUSH
29719: CALL 57082 0 1
29723: ST_TO_ADDR
// tmp := [ ] ;
29724: LD_ADDR_VAR 0 8
29728: PUSH
29729: EMPTY
29730: ST_TO_ADDR
// if mode then
29731: LD_VAR 0 4
29735: IFFALSE 29799
// begin for i := 1 to result do
29737: LD_ADDR_VAR 0 6
29741: PUSH
29742: DOUBLE
29743: LD_INT 1
29745: DEC
29746: ST_TO_ADDR
29747: LD_VAR 0 5
29751: PUSH
29752: FOR_TO
29753: IFFALSE 29787
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29755: LD_ADDR_VAR 0 8
29759: PUSH
29760: LD_VAR 0 8
29764: PPUSH
29765: LD_VAR 0 5
29769: PUSH
29770: LD_VAR 0 6
29774: ARRAY
29775: PUSH
29776: LD_INT 1
29778: ARRAY
29779: PPUSH
29780: CALL 61992 0 2
29784: ST_TO_ADDR
29785: GO 29752
29787: POP
29788: POP
// result := tmp ;
29789: LD_ADDR_VAR 0 5
29793: PUSH
29794: LD_VAR 0 8
29798: ST_TO_ADDR
// end ; end ;
29799: LD_VAR 0 5
29803: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29804: LD_INT 0
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
// if not list then
29810: LD_VAR 0 3
29814: NOT
29815: IFFALSE 29819
// exit ;
29817: GO 30209
// result := [ ] ;
29819: LD_ADDR_VAR 0 6
29823: PUSH
29824: EMPTY
29825: ST_TO_ADDR
// for i in list do
29826: LD_ADDR_VAR 0 7
29830: PUSH
29831: LD_VAR 0 3
29835: PUSH
29836: FOR_IN
29837: IFFALSE 30039
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29839: LD_ADDR_VAR 0 9
29843: PUSH
29844: LD_VAR 0 7
29848: PPUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: LD_VAR 0 2
29858: PPUSH
29859: CALL_OW 297
29863: ST_TO_ADDR
// if not result then
29864: LD_VAR 0 6
29868: NOT
29869: IFFALSE 29895
// result := [ [ i , tmp ] ] else
29871: LD_ADDR_VAR 0 6
29875: PUSH
29876: LD_VAR 0 7
29880: PUSH
29881: LD_VAR 0 9
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: ST_TO_ADDR
29893: GO 30037
// begin if result [ result ] [ 2 ] <= tmp then
29895: LD_VAR 0 6
29899: PUSH
29900: LD_VAR 0 6
29904: ARRAY
29905: PUSH
29906: LD_INT 2
29908: ARRAY
29909: PUSH
29910: LD_VAR 0 9
29914: LESSEQUAL
29915: IFFALSE 29957
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29917: LD_ADDR_VAR 0 6
29921: PUSH
29922: LD_VAR 0 6
29926: PPUSH
29927: LD_VAR 0 6
29931: PUSH
29932: LD_INT 1
29934: PLUS
29935: PPUSH
29936: LD_VAR 0 7
29940: PUSH
29941: LD_VAR 0 9
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 2
29954: ST_TO_ADDR
29955: GO 30037
// for j := 1 to result do
29957: LD_ADDR_VAR 0 8
29961: PUSH
29962: DOUBLE
29963: LD_INT 1
29965: DEC
29966: ST_TO_ADDR
29967: LD_VAR 0 6
29971: PUSH
29972: FOR_TO
29973: IFFALSE 30035
// begin if tmp < result [ j ] [ 2 ] then
29975: LD_VAR 0 9
29979: PUSH
29980: LD_VAR 0 6
29984: PUSH
29985: LD_VAR 0 8
29989: ARRAY
29990: PUSH
29991: LD_INT 2
29993: ARRAY
29994: LESS
29995: IFFALSE 30033
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29997: LD_ADDR_VAR 0 6
30001: PUSH
30002: LD_VAR 0 6
30006: PPUSH
30007: LD_VAR 0 8
30011: PPUSH
30012: LD_VAR 0 7
30016: PUSH
30017: LD_VAR 0 9
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PPUSH
30026: CALL_OW 2
30030: ST_TO_ADDR
// break ;
30031: GO 30035
// end ; end ;
30033: GO 29972
30035: POP
30036: POP
// end ; end ;
30037: GO 29836
30039: POP
30040: POP
// if result and not asc then
30041: LD_VAR 0 6
30045: IFFALSE 30054
30047: PUSH
30048: LD_VAR 0 4
30052: NOT
30053: AND
30054: IFFALSE 30129
// begin tmp := result ;
30056: LD_ADDR_VAR 0 9
30060: PUSH
30061: LD_VAR 0 6
30065: ST_TO_ADDR
// for i = tmp downto 1 do
30066: LD_ADDR_VAR 0 7
30070: PUSH
30071: DOUBLE
30072: LD_VAR 0 9
30076: INC
30077: ST_TO_ADDR
30078: LD_INT 1
30080: PUSH
30081: FOR_DOWNTO
30082: IFFALSE 30127
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30084: LD_ADDR_VAR 0 6
30088: PUSH
30089: LD_VAR 0 6
30093: PPUSH
30094: LD_VAR 0 9
30098: PUSH
30099: LD_VAR 0 7
30103: MINUS
30104: PUSH
30105: LD_INT 1
30107: PLUS
30108: PPUSH
30109: LD_VAR 0 9
30113: PUSH
30114: LD_VAR 0 7
30118: ARRAY
30119: PPUSH
30120: CALL_OW 1
30124: ST_TO_ADDR
30125: GO 30081
30127: POP
30128: POP
// end ; tmp := [ ] ;
30129: LD_ADDR_VAR 0 9
30133: PUSH
30134: EMPTY
30135: ST_TO_ADDR
// if mode then
30136: LD_VAR 0 5
30140: IFFALSE 30209
// begin for i = 1 to result do
30142: LD_ADDR_VAR 0 7
30146: PUSH
30147: DOUBLE
30148: LD_INT 1
30150: DEC
30151: ST_TO_ADDR
30152: LD_VAR 0 6
30156: PUSH
30157: FOR_TO
30158: IFFALSE 30197
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30160: LD_ADDR_VAR 0 9
30164: PUSH
30165: LD_VAR 0 9
30169: PPUSH
30170: LD_VAR 0 7
30174: PPUSH
30175: LD_VAR 0 6
30179: PUSH
30180: LD_VAR 0 7
30184: ARRAY
30185: PUSH
30186: LD_INT 1
30188: ARRAY
30189: PPUSH
30190: CALL_OW 1
30194: ST_TO_ADDR
30195: GO 30157
30197: POP
30198: POP
// result := tmp ;
30199: LD_ADDR_VAR 0 6
30203: PUSH
30204: LD_VAR 0 9
30208: ST_TO_ADDR
// end ; end ;
30209: LD_VAR 0 6
30213: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30214: LD_INT 0
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30222: LD_ADDR_VAR 0 5
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: EMPTY
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
// if not x or not y then
30244: LD_VAR 0 2
30248: NOT
30249: IFTRUE 30258
30251: PUSH
30252: LD_VAR 0 3
30256: NOT
30257: OR
30258: IFFALSE 30262
// exit ;
30260: GO 31918
// if not range then
30262: LD_VAR 0 4
30266: NOT
30267: IFFALSE 30277
// range := 10 ;
30269: LD_ADDR_VAR 0 4
30273: PUSH
30274: LD_INT 10
30276: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30277: LD_ADDR_VAR 0 8
30281: PUSH
30282: LD_INT 81
30284: PUSH
30285: LD_VAR 0 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 92
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: LD_VAR 0 3
30306: PUSH
30307: LD_VAR 0 4
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 21
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: ST_TO_ADDR
// if not tmp then
30345: LD_VAR 0 8
30349: NOT
30350: IFFALSE 30354
// exit ;
30352: GO 31918
// for i in tmp do
30354: LD_ADDR_VAR 0 6
30358: PUSH
30359: LD_VAR 0 8
30363: PUSH
30364: FOR_IN
30365: IFFALSE 31893
// begin points := [ 0 , 0 , 0 ] ;
30367: LD_ADDR_VAR 0 9
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: LIST
30385: ST_TO_ADDR
// bpoints := 1 ;
30386: LD_ADDR_VAR 0 10
30390: PUSH
30391: LD_INT 1
30393: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30394: LD_VAR 0 6
30398: PPUSH
30399: CALL_OW 247
30403: PUSH
30404: LD_INT 1
30406: DOUBLE
30407: EQUAL
30408: IFTRUE 30412
30410: GO 30994
30412: POP
// begin if GetClass ( i ) = 1 then
30413: LD_VAR 0 6
30417: PPUSH
30418: CALL_OW 257
30422: PUSH
30423: LD_INT 1
30425: EQUAL
30426: IFFALSE 30447
// points := [ 10 , 5 , 3 ] ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: LD_INT 10
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30447: LD_VAR 0 6
30451: PPUSH
30452: CALL_OW 257
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: IN
30471: IFFALSE 30492
// points := [ 3 , 2 , 1 ] ;
30473: LD_ADDR_VAR 0 9
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30492: LD_VAR 0 6
30496: PPUSH
30497: CALL_OW 257
30501: PUSH
30502: LD_INT 5
30504: EQUAL
30505: IFFALSE 30526
// points := [ 130 , 5 , 2 ] ;
30507: LD_ADDR_VAR 0 9
30511: PUSH
30512: LD_INT 130
30514: PUSH
30515: LD_INT 5
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30526: LD_VAR 0 6
30530: PPUSH
30531: CALL_OW 257
30535: PUSH
30536: LD_INT 8
30538: EQUAL
30539: IFFALSE 30560
// points := [ 35 , 35 , 30 ] ;
30541: LD_ADDR_VAR 0 9
30545: PUSH
30546: LD_INT 35
30548: PUSH
30549: LD_INT 35
30551: PUSH
30552: LD_INT 30
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30560: LD_VAR 0 6
30564: PPUSH
30565: CALL_OW 257
30569: PUSH
30570: LD_INT 9
30572: EQUAL
30573: IFFALSE 30594
// points := [ 20 , 55 , 40 ] ;
30575: LD_ADDR_VAR 0 9
30579: PUSH
30580: LD_INT 20
30582: PUSH
30583: LD_INT 55
30585: PUSH
30586: LD_INT 40
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30594: LD_VAR 0 6
30598: PPUSH
30599: CALL_OW 257
30603: PUSH
30604: LD_INT 12
30606: PUSH
30607: LD_INT 16
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: IN
30614: IFFALSE 30635
// points := [ 5 , 3 , 2 ] ;
30616: LD_ADDR_VAR 0 9
30620: PUSH
30621: LD_INT 5
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 257
30644: PUSH
30645: LD_INT 17
30647: EQUAL
30648: IFFALSE 30669
// points := [ 100 , 50 , 75 ] ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_INT 100
30657: PUSH
30658: LD_INT 50
30660: PUSH
30661: LD_INT 75
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30669: LD_VAR 0 6
30673: PPUSH
30674: CALL_OW 257
30678: PUSH
30679: LD_INT 15
30681: EQUAL
30682: IFFALSE 30703
// points := [ 10 , 5 , 3 ] ;
30684: LD_ADDR_VAR 0 9
30688: PUSH
30689: LD_INT 10
30691: PUSH
30692: LD_INT 5
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30703: LD_VAR 0 6
30707: PPUSH
30708: CALL_OW 257
30712: PUSH
30713: LD_INT 14
30715: EQUAL
30716: IFFALSE 30737
// points := [ 10 , 0 , 0 ] ;
30718: LD_ADDR_VAR 0 9
30722: PUSH
30723: LD_INT 10
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30737: LD_VAR 0 6
30741: PPUSH
30742: CALL_OW 257
30746: PUSH
30747: LD_INT 11
30749: EQUAL
30750: IFFALSE 30771
// points := [ 30 , 10 , 5 ] ;
30752: LD_ADDR_VAR 0 9
30756: PUSH
30757: LD_INT 30
30759: PUSH
30760: LD_INT 10
30762: PUSH
30763: LD_INT 5
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30771: LD_VAR 0 1
30775: PPUSH
30776: LD_INT 5
30778: PPUSH
30779: CALL_OW 321
30783: PUSH
30784: LD_INT 2
30786: EQUAL
30787: IFFALSE 30804
// bpoints := bpoints * 1.8 ;
30789: LD_ADDR_VAR 0 10
30793: PUSH
30794: LD_VAR 0 10
30798: PUSH
30799: LD_REAL  1.80000000000000E+0000
30802: MUL
30803: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30804: LD_VAR 0 6
30808: PPUSH
30809: CALL_OW 257
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: IN
30832: IFFALSE 30852
30834: PUSH
30835: LD_VAR 0 1
30839: PPUSH
30840: LD_INT 51
30842: PPUSH
30843: CALL_OW 321
30847: PUSH
30848: LD_INT 2
30850: EQUAL
30851: AND
30852: IFFALSE 30869
// bpoints := bpoints * 1.2 ;
30854: LD_ADDR_VAR 0 10
30858: PUSH
30859: LD_VAR 0 10
30863: PUSH
30864: LD_REAL  1.20000000000000E+0000
30867: MUL
30868: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30869: LD_VAR 0 6
30873: PPUSH
30874: CALL_OW 257
30878: PUSH
30879: LD_INT 5
30881: PUSH
30882: LD_INT 7
30884: PUSH
30885: LD_INT 9
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: IN
30893: IFFALSE 30913
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: LD_INT 52
30903: PPUSH
30904: CALL_OW 321
30908: PUSH
30909: LD_INT 2
30911: EQUAL
30912: AND
30913: IFFALSE 30930
// bpoints := bpoints * 1.5 ;
30915: LD_ADDR_VAR 0 10
30919: PUSH
30920: LD_VAR 0 10
30924: PUSH
30925: LD_REAL  1.50000000000000E+0000
30928: MUL
30929: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_INT 66
30937: PPUSH
30938: CALL_OW 321
30942: PUSH
30943: LD_INT 2
30945: EQUAL
30946: IFFALSE 30963
// bpoints := bpoints * 1.1 ;
30948: LD_ADDR_VAR 0 10
30952: PUSH
30953: LD_VAR 0 10
30957: PUSH
30958: LD_REAL  1.10000000000000E+0000
30961: MUL
30962: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30963: LD_ADDR_VAR 0 10
30967: PUSH
30968: LD_VAR 0 10
30972: PUSH
30973: LD_VAR 0 6
30977: PPUSH
30978: LD_INT 1
30980: PPUSH
30981: CALL_OW 259
30985: PUSH
30986: LD_REAL  1.15000000000000E+0000
30989: MUL
30990: MUL
30991: ST_TO_ADDR
// end ; unit_vehicle :
30992: GO 31822
30994: LD_INT 2
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31810
31002: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31003: LD_VAR 0 6
31007: PPUSH
31008: CALL_OW 264
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 42
31018: PUSH
31019: LD_INT 24
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: IN
31027: IFFALSE 31048
// points := [ 25 , 5 , 3 ] ;
31029: LD_ADDR_VAR 0 9
31033: PUSH
31034: LD_INT 25
31036: PUSH
31037: LD_INT 5
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31048: LD_VAR 0 6
31052: PPUSH
31053: CALL_OW 264
31057: PUSH
31058: LD_INT 4
31060: PUSH
31061: LD_INT 43
31063: PUSH
31064: LD_INT 25
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: IN
31072: IFFALSE 31093
// points := [ 40 , 15 , 5 ] ;
31074: LD_ADDR_VAR 0 9
31078: PUSH
31079: LD_INT 40
31081: PUSH
31082: LD_INT 15
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31093: LD_VAR 0 6
31097: PPUSH
31098: CALL_OW 264
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: LD_INT 23
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: IN
31113: IFFALSE 31134
// points := [ 7 , 25 , 8 ] ;
31115: LD_ADDR_VAR 0 9
31119: PUSH
31120: LD_INT 7
31122: PUSH
31123: LD_INT 25
31125: PUSH
31126: LD_INT 8
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31134: LD_VAR 0 6
31138: PPUSH
31139: CALL_OW 264
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 27
31149: PUSH
31150: LD_INT 44
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: IN
31158: IFFALSE 31179
// points := [ 14 , 50 , 16 ] ;
31160: LD_ADDR_VAR 0 9
31164: PUSH
31165: LD_INT 14
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: LD_INT 16
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31179: LD_VAR 0 6
31183: PPUSH
31184: CALL_OW 264
31188: PUSH
31189: LD_INT 6
31191: PUSH
31192: LD_INT 46
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: IN
31199: IFFALSE 31220
// points := [ 32 , 120 , 70 ] ;
31201: LD_ADDR_VAR 0 9
31205: PUSH
31206: LD_INT 32
31208: PUSH
31209: LD_INT 120
31211: PUSH
31212: LD_INT 70
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31220: LD_VAR 0 6
31224: PPUSH
31225: CALL_OW 264
31229: PUSH
31230: LD_INT 7
31232: PUSH
31233: LD_INT 28
31235: PUSH
31236: LD_INT 45
31238: PUSH
31239: LD_INT 92
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: IN
31248: IFFALSE 31269
// points := [ 35 , 20 , 45 ] ;
31250: LD_ADDR_VAR 0 9
31254: PUSH
31255: LD_INT 35
31257: PUSH
31258: LD_INT 20
31260: PUSH
31261: LD_INT 45
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 264
31278: PUSH
31279: LD_INT 47
31281: PUSH
31282: EMPTY
31283: LIST
31284: IN
31285: IFFALSE 31306
// points := [ 67 , 45 , 75 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 67
31294: PUSH
31295: LD_INT 45
31297: PUSH
31298: LD_INT 75
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 264
31315: PUSH
31316: LD_INT 26
31318: PUSH
31319: EMPTY
31320: LIST
31321: IN
31322: IFFALSE 31343
// points := [ 120 , 30 , 80 ] ;
31324: LD_ADDR_VAR 0 9
31328: PUSH
31329: LD_INT 120
31331: PUSH
31332: LD_INT 30
31334: PUSH
31335: LD_INT 80
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31343: LD_VAR 0 6
31347: PPUSH
31348: CALL_OW 264
31352: PUSH
31353: LD_INT 22
31355: PUSH
31356: EMPTY
31357: LIST
31358: IN
31359: IFFALSE 31380
// points := [ 40 , 1 , 1 ] ;
31361: LD_ADDR_VAR 0 9
31365: PUSH
31366: LD_INT 40
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31380: LD_VAR 0 6
31384: PPUSH
31385: CALL_OW 264
31389: PUSH
31390: LD_INT 29
31392: PUSH
31393: EMPTY
31394: LIST
31395: IN
31396: IFFALSE 31417
// points := [ 70 , 200 , 400 ] ;
31398: LD_ADDR_VAR 0 9
31402: PUSH
31403: LD_INT 70
31405: PUSH
31406: LD_INT 200
31408: PUSH
31409: LD_INT 400
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31417: LD_VAR 0 6
31421: PPUSH
31422: CALL_OW 264
31426: PUSH
31427: LD_INT 14
31429: PUSH
31430: LD_INT 53
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: IN
31437: IFFALSE 31458
// points := [ 40 , 10 , 20 ] ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_INT 40
31446: PUSH
31447: LD_INT 10
31449: PUSH
31450: LD_INT 20
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31458: LD_VAR 0 6
31462: PPUSH
31463: CALL_OW 264
31467: PUSH
31468: LD_INT 9
31470: PUSH
31471: EMPTY
31472: LIST
31473: IN
31474: IFFALSE 31495
// points := [ 5 , 70 , 20 ] ;
31476: LD_ADDR_VAR 0 9
31480: PUSH
31481: LD_INT 5
31483: PUSH
31484: LD_INT 70
31486: PUSH
31487: LD_INT 20
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31495: LD_VAR 0 6
31499: PPUSH
31500: CALL_OW 264
31504: PUSH
31505: LD_INT 10
31507: PUSH
31508: EMPTY
31509: LIST
31510: IN
31511: IFFALSE 31532
// points := [ 35 , 110 , 70 ] ;
31513: LD_ADDR_VAR 0 9
31517: PUSH
31518: LD_INT 35
31520: PUSH
31521: LD_INT 110
31523: PUSH
31524: LD_INT 70
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31532: LD_VAR 0 6
31536: PPUSH
31537: CALL_OW 265
31541: PUSH
31542: LD_INT 25
31544: EQUAL
31545: IFFALSE 31566
// points := [ 80 , 65 , 100 ] ;
31547: LD_ADDR_VAR 0 9
31551: PUSH
31552: LD_INT 80
31554: PUSH
31555: LD_INT 65
31557: PUSH
31558: LD_INT 100
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31566: LD_VAR 0 6
31570: PPUSH
31571: CALL_OW 263
31575: PUSH
31576: LD_INT 1
31578: EQUAL
31579: IFFALSE 31614
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31581: LD_ADDR_VAR 0 10
31585: PUSH
31586: LD_VAR 0 10
31590: PUSH
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 311
31600: PPUSH
31601: LD_INT 3
31603: PPUSH
31604: CALL_OW 259
31608: PUSH
31609: LD_INT 4
31611: MUL
31612: MUL
31613: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31614: LD_VAR 0 6
31618: PPUSH
31619: CALL_OW 263
31623: PUSH
31624: LD_INT 2
31626: EQUAL
31627: IFFALSE 31678
// begin j := IsControledBy ( i ) ;
31629: LD_ADDR_VAR 0 7
31633: PUSH
31634: LD_VAR 0 6
31638: PPUSH
31639: CALL_OW 312
31643: ST_TO_ADDR
// if j then
31644: LD_VAR 0 7
31648: IFFALSE 31678
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31650: LD_ADDR_VAR 0 10
31654: PUSH
31655: LD_VAR 0 10
31659: PUSH
31660: LD_VAR 0 7
31664: PPUSH
31665: LD_INT 3
31667: PPUSH
31668: CALL_OW 259
31672: PUSH
31673: LD_INT 3
31675: MUL
31676: MUL
31677: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31678: LD_VAR 0 6
31682: PPUSH
31683: CALL_OW 264
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 6
31693: PUSH
31694: LD_INT 46
31696: PUSH
31697: LD_INT 44
31699: PUSH
31700: LD_INT 47
31702: PUSH
31703: LD_INT 45
31705: PUSH
31706: LD_INT 28
31708: PUSH
31709: LD_INT 7
31711: PUSH
31712: LD_INT 27
31714: PUSH
31715: LD_INT 29
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: IN
31730: IFFALSE 31750
31732: PUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: LD_INT 52
31740: PPUSH
31741: CALL_OW 321
31745: PUSH
31746: LD_INT 2
31748: EQUAL
31749: AND
31750: IFFALSE 31767
// bpoints := bpoints * 1.2 ;
31752: LD_ADDR_VAR 0 10
31756: PUSH
31757: LD_VAR 0 10
31761: PUSH
31762: LD_REAL  1.20000000000000E+0000
31765: MUL
31766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 264
31776: PUSH
31777: LD_INT 6
31779: PUSH
31780: LD_INT 46
31782: PUSH
31783: LD_INT 47
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: IN
31791: IFFALSE 31808
// bpoints := bpoints * 1.2 ;
31793: LD_ADDR_VAR 0 10
31797: PUSH
31798: LD_VAR 0 10
31802: PUSH
31803: LD_REAL  1.20000000000000E+0000
31806: MUL
31807: ST_TO_ADDR
// end ; unit_building :
31808: GO 31822
31810: LD_INT 3
31812: DOUBLE
31813: EQUAL
31814: IFTRUE 31818
31816: GO 31821
31818: POP
// ; end ;
31819: GO 31822
31821: POP
// for j = 1 to 3 do
31822: LD_ADDR_VAR 0 7
31826: PUSH
31827: DOUBLE
31828: LD_INT 1
31830: DEC
31831: ST_TO_ADDR
31832: LD_INT 3
31834: PUSH
31835: FOR_TO
31836: IFFALSE 31889
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31838: LD_ADDR_VAR 0 5
31842: PUSH
31843: LD_VAR 0 5
31847: PPUSH
31848: LD_VAR 0 7
31852: PPUSH
31853: LD_VAR 0 5
31857: PUSH
31858: LD_VAR 0 7
31862: ARRAY
31863: PUSH
31864: LD_VAR 0 9
31868: PUSH
31869: LD_VAR 0 7
31873: ARRAY
31874: PUSH
31875: LD_VAR 0 10
31879: MUL
31880: PLUS
31881: PPUSH
31882: CALL_OW 1
31886: ST_TO_ADDR
31887: GO 31835
31889: POP
31890: POP
// end ;
31891: GO 30364
31893: POP
31894: POP
// result := Replace ( result , 4 , tmp ) ;
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: LD_INT 4
31907: PPUSH
31908: LD_VAR 0 8
31912: PPUSH
31913: CALL_OW 1
31917: ST_TO_ADDR
// end ;
31918: LD_VAR 0 5
31922: RET
// export function DangerAtRange ( unit , range ) ; begin
31923: LD_INT 0
31925: PPUSH
// if not unit then
31926: LD_VAR 0 1
31930: NOT
31931: IFFALSE 31935
// exit ;
31933: GO 31980
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_VAR 0 1
31944: PPUSH
31945: CALL_OW 255
31949: PPUSH
31950: LD_VAR 0 1
31954: PPUSH
31955: CALL_OW 250
31959: PPUSH
31960: LD_VAR 0 1
31964: PPUSH
31965: CALL_OW 251
31969: PPUSH
31970: LD_VAR 0 2
31974: PPUSH
31975: CALL 30214 0 4
31979: ST_TO_ADDR
// end ;
31980: LD_VAR 0 3
31984: RET
// export function DangerInArea ( side , area ) ; begin
31985: LD_INT 0
31987: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_VAR 0 2
31997: PPUSH
31998: LD_INT 81
32000: PUSH
32001: LD_VAR 0 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 70
32014: ST_TO_ADDR
// end ;
32015: LD_VAR 0 3
32019: RET
// export function IsExtension ( b ) ; begin
32020: LD_INT 0
32022: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32023: LD_ADDR_VAR 0 2
32027: PUSH
32028: LD_VAR 0 1
32032: PUSH
32033: LD_INT 23
32035: PUSH
32036: LD_INT 20
32038: PUSH
32039: LD_INT 22
32041: PUSH
32042: LD_INT 17
32044: PUSH
32045: LD_INT 24
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 19
32053: PUSH
32054: LD_INT 16
32056: PUSH
32057: LD_INT 25
32059: PUSH
32060: LD_INT 18
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: IN
32075: ST_TO_ADDR
// end ;
32076: LD_VAR 0 2
32080: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// result := [ ] ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: EMPTY
32092: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32093: LD_ADDR_VAR 0 5
32097: PUSH
32098: LD_VAR 0 2
32102: PPUSH
32103: LD_INT 21
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: CALL_OW 70
32117: ST_TO_ADDR
// if not tmp then
32118: LD_VAR 0 5
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32191
// if checkLink then
32127: LD_VAR 0 3
32131: IFFALSE 32181
// begin for i in tmp do
32133: LD_ADDR_VAR 0 6
32137: PUSH
32138: LD_VAR 0 5
32142: PUSH
32143: FOR_IN
32144: IFFALSE 32179
// if GetBase ( i ) <> base then
32146: LD_VAR 0 6
32150: PPUSH
32151: CALL_OW 274
32155: PUSH
32156: LD_VAR 0 1
32160: NONEQUAL
32161: IFFALSE 32177
// ComLinkToBase ( base , i ) ;
32163: LD_VAR 0 1
32167: PPUSH
32168: LD_VAR 0 6
32172: PPUSH
32173: CALL_OW 169
32177: GO 32143
32179: POP
32180: POP
// end ; result := tmp ;
32181: LD_ADDR_VAR 0 4
32185: PUSH
32186: LD_VAR 0 5
32190: ST_TO_ADDR
// end ;
32191: LD_VAR 0 4
32195: RET
// export function ComComplete ( units , b ) ; var i ; begin
32196: LD_INT 0
32198: PPUSH
32199: PPUSH
// if not units then
32200: LD_VAR 0 1
32204: NOT
32205: IFFALSE 32209
// exit ;
32207: GO 32299
// for i in units do
32209: LD_ADDR_VAR 0 4
32213: PUSH
32214: LD_VAR 0 1
32218: PUSH
32219: FOR_IN
32220: IFFALSE 32297
// if BuildingStatus ( b ) = bs_build then
32222: LD_VAR 0 2
32226: PPUSH
32227: CALL_OW 461
32231: PUSH
32232: LD_INT 1
32234: EQUAL
32235: IFFALSE 32295
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32237: LD_VAR 0 4
32241: PPUSH
32242: LD_STRING h
32244: PUSH
32245: LD_VAR 0 2
32249: PPUSH
32250: CALL_OW 250
32254: PUSH
32255: LD_VAR 0 2
32259: PPUSH
32260: CALL_OW 251
32264: PUSH
32265: LD_VAR 0 2
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: PUSH
32288: EMPTY
32289: LIST
32290: PPUSH
32291: CALL_OW 446
32295: GO 32219
32297: POP
32298: POP
// end ;
32299: LD_VAR 0 3
32303: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32304: LD_INT 0
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32312: LD_VAR 0 1
32316: NOT
32317: IFTRUE 32334
32319: PUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 263
32329: PUSH
32330: LD_INT 2
32332: NONEQUAL
32333: OR
32334: IFFALSE 32338
// exit ;
32336: GO 32654
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32338: LD_ADDR_VAR 0 6
32342: PUSH
32343: LD_INT 22
32345: PUSH
32346: LD_VAR 0 1
32350: PPUSH
32351: CALL_OW 255
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: LD_INT 30
32365: PUSH
32366: LD_INT 36
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 34
32375: PUSH
32376: LD_INT 31
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PPUSH
32392: CALL_OW 69
32396: ST_TO_ADDR
// if not tmp then
32397: LD_VAR 0 6
32401: NOT
32402: IFFALSE 32406
// exit ;
32404: GO 32654
// result := [ ] ;
32406: LD_ADDR_VAR 0 2
32410: PUSH
32411: EMPTY
32412: ST_TO_ADDR
// for i in tmp do
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_VAR 0 6
32422: PUSH
32423: FOR_IN
32424: IFFALSE 32495
// begin t := UnitsInside ( i ) ;
32426: LD_ADDR_VAR 0 4
32430: PUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL_OW 313
32440: ST_TO_ADDR
// if t then
32441: LD_VAR 0 4
32445: IFFALSE 32493
// for j in t do
32447: LD_ADDR_VAR 0 7
32451: PUSH
32452: LD_VAR 0 4
32456: PUSH
32457: FOR_IN
32458: IFFALSE 32491
// result := Replace ( result , result + 1 , j ) ;
32460: LD_ADDR_VAR 0 2
32464: PUSH
32465: LD_VAR 0 2
32469: PPUSH
32470: LD_VAR 0 2
32474: PUSH
32475: LD_INT 1
32477: PLUS
32478: PPUSH
32479: LD_VAR 0 7
32483: PPUSH
32484: CALL_OW 1
32488: ST_TO_ADDR
32489: GO 32457
32491: POP
32492: POP
// end ;
32493: GO 32423
32495: POP
32496: POP
// if not result then
32497: LD_VAR 0 2
32501: NOT
32502: IFFALSE 32506
// exit ;
32504: GO 32654
// mech := result [ 1 ] ;
32506: LD_ADDR_VAR 0 5
32510: PUSH
32511: LD_VAR 0 2
32515: PUSH
32516: LD_INT 1
32518: ARRAY
32519: ST_TO_ADDR
// if result > 1 then
32520: LD_VAR 0 2
32524: PUSH
32525: LD_INT 1
32527: GREATER
32528: IFFALSE 32640
// begin for i = 2 to result do
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: DOUBLE
32536: LD_INT 2
32538: DEC
32539: ST_TO_ADDR
32540: LD_VAR 0 2
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32638
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32548: LD_ADDR_VAR 0 4
32552: PUSH
32553: LD_VAR 0 2
32557: PUSH
32558: LD_VAR 0 3
32562: ARRAY
32563: PPUSH
32564: LD_INT 3
32566: PPUSH
32567: CALL_OW 259
32571: PUSH
32572: LD_VAR 0 2
32576: PUSH
32577: LD_VAR 0 3
32581: ARRAY
32582: PPUSH
32583: CALL_OW 432
32587: MINUS
32588: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32589: LD_VAR 0 4
32593: PUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: LD_INT 3
32601: PPUSH
32602: CALL_OW 259
32606: PUSH
32607: LD_VAR 0 5
32611: PPUSH
32612: CALL_OW 432
32616: MINUS
32617: GREATEREQUAL
32618: IFFALSE 32636
// mech := result [ i ] ;
32620: LD_ADDR_VAR 0 5
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 3
32634: ARRAY
32635: ST_TO_ADDR
// end ;
32636: GO 32545
32638: POP
32639: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: LD_VAR 0 5
32649: PPUSH
32650: CALL_OW 135
// end ;
32654: LD_VAR 0 2
32658: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
32673: PPUSH
// result := [ ] ;
32674: LD_ADDR_VAR 0 7
32678: PUSH
32679: EMPTY
32680: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 266
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: IN
32701: NOT
32702: IFFALSE 32706
// exit ;
32704: GO 34346
// if name then
32706: LD_VAR 0 3
32710: IFFALSE 32726
// SetBName ( base_dep , name ) ;
32712: LD_VAR 0 1
32716: PPUSH
32717: LD_VAR 0 3
32721: PPUSH
32722: CALL_OW 500
// base := GetBase ( base_dep ) ;
32726: LD_ADDR_VAR 0 15
32730: PUSH
32731: LD_VAR 0 1
32735: PPUSH
32736: CALL_OW 274
32740: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32741: LD_ADDR_VAR 0 16
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 255
32755: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32756: LD_ADDR_VAR 0 17
32760: PUSH
32761: LD_VAR 0 1
32765: PPUSH
32766: CALL_OW 248
32770: ST_TO_ADDR
// if sources then
32771: LD_VAR 0 5
32775: IFFALSE 32822
// for i = 1 to 3 do
32777: LD_ADDR_VAR 0 8
32781: PUSH
32782: DOUBLE
32783: LD_INT 1
32785: DEC
32786: ST_TO_ADDR
32787: LD_INT 3
32789: PUSH
32790: FOR_TO
32791: IFFALSE 32820
// AddResourceType ( base , i , sources [ i ] ) ;
32793: LD_VAR 0 15
32797: PPUSH
32798: LD_VAR 0 8
32802: PPUSH
32803: LD_VAR 0 5
32807: PUSH
32808: LD_VAR 0 8
32812: ARRAY
32813: PPUSH
32814: CALL_OW 276
32818: GO 32790
32820: POP
32821: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32822: LD_ADDR_VAR 0 18
32826: PUSH
32827: LD_VAR 0 15
32831: PPUSH
32832: LD_VAR 0 2
32836: PPUSH
32837: LD_INT 1
32839: PPUSH
32840: CALL 32081 0 3
32844: ST_TO_ADDR
// InitHc ;
32845: CALL_OW 19
// InitUc ;
32849: CALL_OW 18
// uc_side := side ;
32853: LD_ADDR_OWVAR 20
32857: PUSH
32858: LD_VAR 0 16
32862: ST_TO_ADDR
// uc_nation := nation ;
32863: LD_ADDR_OWVAR 21
32867: PUSH
32868: LD_VAR 0 17
32872: ST_TO_ADDR
// if buildings then
32873: LD_VAR 0 18
32877: IFFALSE 34205
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32879: LD_ADDR_VAR 0 19
32883: PUSH
32884: LD_VAR 0 18
32888: PPUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 30
32894: PUSH
32895: LD_INT 29
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 30
32904: PUSH
32905: LD_INT 30
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: PPUSH
32917: CALL_OW 72
32921: ST_TO_ADDR
// if tmp then
32922: LD_VAR 0 19
32926: IFFALSE 32974
// for i in tmp do
32928: LD_ADDR_VAR 0 8
32932: PUSH
32933: LD_VAR 0 19
32937: PUSH
32938: FOR_IN
32939: IFFALSE 32972
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32941: LD_VAR 0 8
32945: PPUSH
32946: CALL_OW 250
32950: PPUSH
32951: LD_VAR 0 8
32955: PPUSH
32956: CALL_OW 251
32960: PPUSH
32961: LD_VAR 0 16
32965: PPUSH
32966: CALL_OW 441
32970: GO 32938
32972: POP
32973: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32974: LD_VAR 0 18
32978: PPUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 30
32984: PUSH
32985: LD_INT 32
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 30
32994: PUSH
32995: LD_INT 33
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: PPUSH
33007: CALL_OW 72
33011: IFFALSE 33099
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33013: LD_ADDR_VAR 0 8
33017: PUSH
33018: LD_VAR 0 18
33022: PPUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 30
33028: PUSH
33029: LD_INT 32
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 30
33038: PUSH
33039: LD_INT 33
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: PPUSH
33051: CALL_OW 72
33055: PUSH
33056: FOR_IN
33057: IFFALSE 33097
// begin if not GetBWeapon ( i ) then
33059: LD_VAR 0 8
33063: PPUSH
33064: CALL_OW 269
33068: NOT
33069: IFFALSE 33095
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33071: LD_VAR 0 8
33075: PPUSH
33076: LD_VAR 0 8
33080: PPUSH
33081: LD_VAR 0 2
33085: PPUSH
33086: CALL 34351 0 2
33090: PPUSH
33091: CALL_OW 431
// end ;
33095: GO 33056
33097: POP
33098: POP
// end ; for i = 1 to personel do
33099: LD_ADDR_VAR 0 8
33103: PUSH
33104: DOUBLE
33105: LD_INT 1
33107: DEC
33108: ST_TO_ADDR
33109: LD_VAR 0 6
33113: PUSH
33114: FOR_TO
33115: IFFALSE 34185
// begin if i > 4 then
33117: LD_VAR 0 8
33121: PUSH
33122: LD_INT 4
33124: GREATER
33125: IFFALSE 33129
// break ;
33127: GO 34185
// case i of 1 :
33129: LD_VAR 0 8
33133: PUSH
33134: LD_INT 1
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33222
33142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33143: LD_ADDR_VAR 0 12
33147: PUSH
33148: LD_VAR 0 18
33152: PPUSH
33153: LD_INT 22
33155: PUSH
33156: LD_VAR 0 16
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 58
33167: PUSH
33168: EMPTY
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 30
33176: PUSH
33177: LD_INT 32
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 30
33186: PUSH
33187: LD_INT 4
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 30
33196: PUSH
33197: LD_INT 5
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: PPUSH
33215: CALL_OW 72
33219: ST_TO_ADDR
33220: GO 33444
33222: LD_INT 2
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33292
33230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33231: LD_ADDR_VAR 0 12
33235: PUSH
33236: LD_VAR 0 18
33240: PPUSH
33241: LD_INT 22
33243: PUSH
33244: LD_VAR 0 16
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 30
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 30
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 72
33289: ST_TO_ADDR
33290: GO 33444
33292: LD_INT 3
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33362
33300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33301: LD_ADDR_VAR 0 12
33305: PUSH
33306: LD_VAR 0 18
33310: PPUSH
33311: LD_INT 22
33313: PUSH
33314: LD_VAR 0 16
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 30
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 30
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PPUSH
33355: CALL_OW 72
33359: ST_TO_ADDR
33360: GO 33444
33362: LD_INT 4
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33443
33370: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33371: LD_ADDR_VAR 0 12
33375: PUSH
33376: LD_VAR 0 18
33380: PPUSH
33381: LD_INT 22
33383: PUSH
33384: LD_VAR 0 16
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 30
33398: PUSH
33399: LD_INT 6
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 30
33408: PUSH
33409: LD_INT 7
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 30
33418: PUSH
33419: LD_INT 8
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PPUSH
33436: CALL_OW 72
33440: ST_TO_ADDR
33441: GO 33444
33443: POP
// if i = 1 then
33444: LD_VAR 0 8
33448: PUSH
33449: LD_INT 1
33451: EQUAL
33452: IFFALSE 33563
// begin tmp := [ ] ;
33454: LD_ADDR_VAR 0 19
33458: PUSH
33459: EMPTY
33460: ST_TO_ADDR
// for j in f do
33461: LD_ADDR_VAR 0 9
33465: PUSH
33466: LD_VAR 0 12
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33545
// if GetBType ( j ) = b_bunker then
33474: LD_VAR 0 9
33478: PPUSH
33479: CALL_OW 266
33483: PUSH
33484: LD_INT 32
33486: EQUAL
33487: IFFALSE 33514
// tmp := Insert ( tmp , 1 , j ) else
33489: LD_ADDR_VAR 0 19
33493: PUSH
33494: LD_VAR 0 19
33498: PPUSH
33499: LD_INT 1
33501: PPUSH
33502: LD_VAR 0 9
33506: PPUSH
33507: CALL_OW 2
33511: ST_TO_ADDR
33512: GO 33543
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33514: LD_ADDR_VAR 0 19
33518: PUSH
33519: LD_VAR 0 19
33523: PPUSH
33524: LD_VAR 0 19
33528: PUSH
33529: LD_INT 1
33531: PLUS
33532: PPUSH
33533: LD_VAR 0 9
33537: PPUSH
33538: CALL_OW 2
33542: ST_TO_ADDR
33543: GO 33471
33545: POP
33546: POP
// if tmp then
33547: LD_VAR 0 19
33551: IFFALSE 33563
// f := tmp ;
33553: LD_ADDR_VAR 0 12
33557: PUSH
33558: LD_VAR 0 19
33562: ST_TO_ADDR
// end ; x := personel [ i ] ;
33563: LD_ADDR_VAR 0 13
33567: PUSH
33568: LD_VAR 0 6
33572: PUSH
33573: LD_VAR 0 8
33577: ARRAY
33578: ST_TO_ADDR
// if x = - 1 then
33579: LD_VAR 0 13
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: EQUAL
33588: IFFALSE 33799
// begin for j in f do
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_VAR 0 12
33599: PUSH
33600: FOR_IN
33601: IFFALSE 33795
// repeat InitHc ;
33603: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33607: LD_VAR 0 9
33611: PPUSH
33612: CALL_OW 266
33616: PUSH
33617: LD_INT 5
33619: EQUAL
33620: IFFALSE 33690
// begin if UnitsInside ( j ) < 3 then
33622: LD_VAR 0 9
33626: PPUSH
33627: CALL_OW 313
33631: PUSH
33632: LD_INT 3
33634: LESS
33635: IFFALSE 33671
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33637: LD_INT 0
33639: PPUSH
33640: LD_INT 5
33642: PUSH
33643: LD_INT 8
33645: PUSH
33646: LD_INT 9
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: LIST
33653: PUSH
33654: LD_VAR 0 17
33658: ARRAY
33659: PPUSH
33660: LD_VAR 0 4
33664: PPUSH
33665: CALL_OW 380
33669: GO 33688
// PrepareHuman ( false , i , skill ) ;
33671: LD_INT 0
33673: PPUSH
33674: LD_VAR 0 8
33678: PPUSH
33679: LD_VAR 0 4
33683: PPUSH
33684: CALL_OW 380
// end else
33688: GO 33707
// PrepareHuman ( false , i , skill ) ;
33690: LD_INT 0
33692: PPUSH
33693: LD_VAR 0 8
33697: PPUSH
33698: LD_VAR 0 4
33702: PPUSH
33703: CALL_OW 380
// un := CreateHuman ;
33707: LD_ADDR_VAR 0 14
33711: PUSH
33712: CALL_OW 44
33716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33717: LD_ADDR_VAR 0 7
33721: PUSH
33722: LD_VAR 0 7
33726: PPUSH
33727: LD_INT 1
33729: PPUSH
33730: LD_VAR 0 14
33734: PPUSH
33735: CALL_OW 2
33739: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33740: LD_VAR 0 14
33744: PPUSH
33745: LD_VAR 0 9
33749: PPUSH
33750: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33754: LD_VAR 0 9
33758: PPUSH
33759: CALL_OW 313
33763: PUSH
33764: LD_INT 6
33766: EQUAL
33767: IFTRUE 33791
33769: PUSH
33770: LD_VAR 0 9
33774: PPUSH
33775: CALL_OW 266
33779: PUSH
33780: LD_INT 32
33782: PUSH
33783: LD_INT 31
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: IN
33790: OR
33791: IFFALSE 33603
33793: GO 33600
33795: POP
33796: POP
// end else
33797: GO 34183
// for j = 1 to x do
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: DOUBLE
33805: LD_INT 1
33807: DEC
33808: ST_TO_ADDR
33809: LD_VAR 0 13
33813: PUSH
33814: FOR_TO
33815: IFFALSE 34181
// begin InitHc ;
33817: CALL_OW 19
// if not f then
33821: LD_VAR 0 12
33825: NOT
33826: IFFALSE 33915
// begin PrepareHuman ( false , i , skill ) ;
33828: LD_INT 0
33830: PPUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: LD_VAR 0 4
33840: PPUSH
33841: CALL_OW 380
// un := CreateHuman ;
33845: LD_ADDR_VAR 0 14
33849: PUSH
33850: CALL_OW 44
33854: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33855: LD_ADDR_VAR 0 7
33859: PUSH
33860: LD_VAR 0 7
33864: PPUSH
33865: LD_INT 1
33867: PPUSH
33868: LD_VAR 0 14
33872: PPUSH
33873: CALL_OW 2
33877: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33878: LD_VAR 0 14
33882: PPUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 250
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 251
33902: PPUSH
33903: LD_INT 10
33905: PPUSH
33906: LD_INT 0
33908: PPUSH
33909: CALL_OW 50
// continue ;
33913: GO 33814
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33915: LD_VAR 0 12
33919: PUSH
33920: LD_INT 1
33922: ARRAY
33923: PPUSH
33924: CALL_OW 313
33928: IFFALSE 33956
33930: PUSH
33931: LD_VAR 0 12
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: PPUSH
33940: CALL_OW 266
33944: PUSH
33945: LD_INT 32
33947: PUSH
33948: LD_INT 31
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: IN
33955: AND
33956: IFTRUE 33977
33958: PUSH
33959: LD_VAR 0 12
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: CALL_OW 313
33972: PUSH
33973: LD_INT 6
33975: EQUAL
33976: OR
33977: IFFALSE 33997
// f := Delete ( f , 1 ) ;
33979: LD_ADDR_VAR 0 12
33983: PUSH
33984: LD_VAR 0 12
33988: PPUSH
33989: LD_INT 1
33991: PPUSH
33992: CALL_OW 3
33996: ST_TO_ADDR
// if not f then
33997: LD_VAR 0 12
34001: NOT
34002: IFFALSE 34020
// begin x := x + 2 ;
34004: LD_ADDR_VAR 0 13
34008: PUSH
34009: LD_VAR 0 13
34013: PUSH
34014: LD_INT 2
34016: PLUS
34017: ST_TO_ADDR
// continue ;
34018: GO 33814
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34020: LD_VAR 0 12
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PPUSH
34029: CALL_OW 266
34033: PUSH
34034: LD_INT 5
34036: EQUAL
34037: IFFALSE 34111
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34039: LD_VAR 0 12
34043: PUSH
34044: LD_INT 1
34046: ARRAY
34047: PPUSH
34048: CALL_OW 313
34052: PUSH
34053: LD_INT 3
34055: LESS
34056: IFFALSE 34092
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34058: LD_INT 0
34060: PPUSH
34061: LD_INT 5
34063: PUSH
34064: LD_INT 8
34066: PUSH
34067: LD_INT 9
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: PUSH
34075: LD_VAR 0 17
34079: ARRAY
34080: PPUSH
34081: LD_VAR 0 4
34085: PPUSH
34086: CALL_OW 380
34090: GO 34109
// PrepareHuman ( false , i , skill ) ;
34092: LD_INT 0
34094: PPUSH
34095: LD_VAR 0 8
34099: PPUSH
34100: LD_VAR 0 4
34104: PPUSH
34105: CALL_OW 380
// end else
34109: GO 34128
// PrepareHuman ( false , i , skill ) ;
34111: LD_INT 0
34113: PPUSH
34114: LD_VAR 0 8
34118: PPUSH
34119: LD_VAR 0 4
34123: PPUSH
34124: CALL_OW 380
// un := CreateHuman ;
34128: LD_ADDR_VAR 0 14
34132: PUSH
34133: CALL_OW 44
34137: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34138: LD_ADDR_VAR 0 7
34142: PUSH
34143: LD_VAR 0 7
34147: PPUSH
34148: LD_INT 1
34150: PPUSH
34151: LD_VAR 0 14
34155: PPUSH
34156: CALL_OW 2
34160: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34161: LD_VAR 0 14
34165: PPUSH
34166: LD_VAR 0 12
34170: PUSH
34171: LD_INT 1
34173: ARRAY
34174: PPUSH
34175: CALL_OW 52
// end ;
34179: GO 33814
34181: POP
34182: POP
// end ;
34183: GO 33114
34185: POP
34186: POP
// result := result ^ buildings ;
34187: LD_ADDR_VAR 0 7
34191: PUSH
34192: LD_VAR 0 7
34196: PUSH
34197: LD_VAR 0 18
34201: ADD
34202: ST_TO_ADDR
// end else
34203: GO 34346
// begin for i = 1 to personel do
34205: LD_ADDR_VAR 0 8
34209: PUSH
34210: DOUBLE
34211: LD_INT 1
34213: DEC
34214: ST_TO_ADDR
34215: LD_VAR 0 6
34219: PUSH
34220: FOR_TO
34221: IFFALSE 34344
// begin if i > 4 then
34223: LD_VAR 0 8
34227: PUSH
34228: LD_INT 4
34230: GREATER
34231: IFFALSE 34235
// break ;
34233: GO 34344
// x := personel [ i ] ;
34235: LD_ADDR_VAR 0 13
34239: PUSH
34240: LD_VAR 0 6
34244: PUSH
34245: LD_VAR 0 8
34249: ARRAY
34250: ST_TO_ADDR
// if x = - 1 then
34251: LD_VAR 0 13
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: EQUAL
34260: IFFALSE 34264
// continue ;
34262: GO 34220
// PrepareHuman ( false , i , skill ) ;
34264: LD_INT 0
34266: PPUSH
34267: LD_VAR 0 8
34271: PPUSH
34272: LD_VAR 0 4
34276: PPUSH
34277: CALL_OW 380
// un := CreateHuman ;
34281: LD_ADDR_VAR 0 14
34285: PUSH
34286: CALL_OW 44
34290: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34291: LD_VAR 0 14
34295: PPUSH
34296: LD_VAR 0 1
34300: PPUSH
34301: CALL_OW 250
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 251
34315: PPUSH
34316: LD_INT 10
34318: PPUSH
34319: LD_INT 0
34321: PPUSH
34322: CALL_OW 50
// result := result ^ un ;
34326: LD_ADDR_VAR 0 7
34330: PUSH
34331: LD_VAR 0 7
34335: PUSH
34336: LD_VAR 0 14
34340: ADD
34341: ST_TO_ADDR
// end ;
34342: GO 34220
34344: POP
34345: POP
// end ; end ;
34346: LD_VAR 0 7
34350: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
// result := false ;
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_INT 0
34376: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34377: LD_VAR 0 1
34381: NOT
34382: IFTRUE 34407
34384: PUSH
34385: LD_VAR 0 1
34389: PPUSH
34390: CALL_OW 266
34394: PUSH
34395: LD_INT 32
34397: PUSH
34398: LD_INT 33
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: IN
34405: NOT
34406: OR
34407: IFFALSE 34411
// exit ;
34409: GO 35546
// nat := GetNation ( tower ) ;
34411: LD_ADDR_VAR 0 12
34415: PUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 248
34425: ST_TO_ADDR
// side := GetSide ( tower ) ;
34426: LD_ADDR_VAR 0 16
34430: PUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: CALL_OW 255
34440: ST_TO_ADDR
// x := GetX ( tower ) ;
34441: LD_ADDR_VAR 0 10
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 250
34455: ST_TO_ADDR
// y := GetY ( tower ) ;
34456: LD_ADDR_VAR 0 11
34460: PUSH
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 251
34470: ST_TO_ADDR
// if not x or not y then
34471: LD_VAR 0 10
34475: NOT
34476: IFTRUE 34485
34478: PUSH
34479: LD_VAR 0 11
34483: NOT
34484: OR
34485: IFFALSE 34489
// exit ;
34487: GO 35546
// weapon := 0 ;
34489: LD_ADDR_VAR 0 18
34493: PUSH
34494: LD_INT 0
34496: ST_TO_ADDR
// fac_list := [ ] ;
34497: LD_ADDR_VAR 0 17
34501: PUSH
34502: EMPTY
34503: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34504: LD_ADDR_VAR 0 6
34508: PUSH
34509: LD_VAR 0 1
34513: PPUSH
34514: CALL_OW 274
34518: PPUSH
34519: LD_VAR 0 2
34523: PPUSH
34524: LD_INT 0
34526: PPUSH
34527: CALL 32081 0 3
34531: PPUSH
34532: LD_INT 30
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PPUSH
34542: CALL_OW 72
34546: ST_TO_ADDR
// if not factories then
34547: LD_VAR 0 6
34551: NOT
34552: IFFALSE 34556
// exit ;
34554: GO 35546
// for i in factories do
34556: LD_ADDR_VAR 0 8
34560: PUSH
34561: LD_VAR 0 6
34565: PUSH
34566: FOR_IN
34567: IFFALSE 34592
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34569: LD_ADDR_VAR 0 17
34573: PUSH
34574: LD_VAR 0 17
34578: PUSH
34579: LD_VAR 0 8
34583: PPUSH
34584: CALL_OW 478
34588: UNION
34589: ST_TO_ADDR
34590: GO 34566
34592: POP
34593: POP
// if not fac_list then
34594: LD_VAR 0 17
34598: NOT
34599: IFFALSE 34603
// exit ;
34601: GO 35546
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34603: LD_ADDR_VAR 0 5
34607: PUSH
34608: LD_INT 4
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: LD_INT 9
34616: PUSH
34617: LD_INT 10
34619: PUSH
34620: LD_INT 6
34622: PUSH
34623: LD_INT 7
34625: PUSH
34626: LD_INT 11
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 27
34640: PUSH
34641: LD_INT 28
34643: PUSH
34644: LD_INT 26
34646: PUSH
34647: LD_INT 30
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 43
34658: PUSH
34659: LD_INT 44
34661: PUSH
34662: LD_INT 46
34664: PUSH
34665: LD_INT 45
34667: PUSH
34668: LD_INT 47
34670: PUSH
34671: LD_INT 49
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: PUSH
34687: LD_VAR 0 12
34691: ARRAY
34692: ST_TO_ADDR
// list := list isect fac_list ;
34693: LD_ADDR_VAR 0 5
34697: PUSH
34698: LD_VAR 0 5
34702: PUSH
34703: LD_VAR 0 17
34707: ISECT
34708: ST_TO_ADDR
// if not list then
34709: LD_VAR 0 5
34713: NOT
34714: IFFALSE 34718
// exit ;
34716: GO 35546
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34718: LD_VAR 0 12
34722: PUSH
34723: LD_INT 3
34725: EQUAL
34726: IFFALSE 34738
34728: PUSH
34729: LD_INT 49
34731: PUSH
34732: LD_VAR 0 5
34736: IN
34737: AND
34738: IFFALSE 34758
34740: PUSH
34741: LD_INT 31
34743: PPUSH
34744: LD_VAR 0 16
34748: PPUSH
34749: CALL_OW 321
34753: PUSH
34754: LD_INT 2
34756: EQUAL
34757: AND
34758: IFFALSE 34818
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34760: LD_INT 22
34762: PUSH
34763: LD_VAR 0 16
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 35
34774: PUSH
34775: LD_INT 49
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 91
34784: PUSH
34785: LD_VAR 0 1
34789: PUSH
34790: LD_INT 10
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: PPUSH
34803: CALL_OW 69
34807: NOT
34808: IFFALSE 34818
// weapon := ru_time_lapser ;
34810: LD_ADDR_VAR 0 18
34814: PUSH
34815: LD_INT 49
34817: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34818: LD_VAR 0 12
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: IN
34833: IFFALSE 34857
34835: PUSH
34836: LD_INT 11
34838: PUSH
34839: LD_VAR 0 5
34843: IN
34844: IFTRUE 34856
34846: PUSH
34847: LD_INT 30
34849: PUSH
34850: LD_VAR 0 5
34854: IN
34855: OR
34856: AND
34857: IFFALSE 34877
34859: PUSH
34860: LD_INT 6
34862: PPUSH
34863: LD_VAR 0 16
34867: PPUSH
34868: CALL_OW 321
34872: PUSH
34873: LD_INT 2
34875: EQUAL
34876: AND
34877: IFFALSE 35044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34879: LD_INT 22
34881: PUSH
34882: LD_VAR 0 16
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 35
34896: PUSH
34897: LD_INT 11
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 35
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 91
34921: PUSH
34922: LD_VAR 0 1
34926: PUSH
34927: LD_INT 18
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: PPUSH
34940: CALL_OW 69
34944: NOT
34945: IFFALSE 35021
34947: PUSH
34948: LD_INT 22
34950: PUSH
34951: LD_VAR 0 16
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 30
34965: PUSH
34966: LD_INT 32
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 30
34975: PUSH
34976: LD_INT 33
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 91
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_INT 12
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: EMPTY
35010: LIST
35011: PPUSH
35012: CALL_OW 69
35016: PUSH
35017: LD_INT 2
35019: GREATER
35020: AND
35021: IFFALSE 35044
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35023: LD_ADDR_VAR 0 18
35027: PUSH
35028: LD_INT 11
35030: PUSH
35031: LD_INT 30
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_VAR 0 12
35042: ARRAY
35043: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35044: LD_VAR 0 18
35048: NOT
35049: IFFALSE 35069
35051: PUSH
35052: LD_INT 40
35054: PPUSH
35055: LD_VAR 0 16
35059: PPUSH
35060: CALL_OW 321
35064: PUSH
35065: LD_INT 2
35067: EQUAL
35068: AND
35069: IFFALSE 35105
35071: PUSH
35072: LD_INT 7
35074: PUSH
35075: LD_VAR 0 5
35079: IN
35080: IFTRUE 35092
35082: PUSH
35083: LD_INT 28
35085: PUSH
35086: LD_VAR 0 5
35090: IN
35091: OR
35092: IFTRUE 35104
35094: PUSH
35095: LD_INT 45
35097: PUSH
35098: LD_VAR 0 5
35102: IN
35103: OR
35104: AND
35105: IFFALSE 35359
// begin hex := GetHexInfo ( x , y ) ;
35107: LD_ADDR_VAR 0 4
35111: PUSH
35112: LD_VAR 0 10
35116: PPUSH
35117: LD_VAR 0 11
35121: PPUSH
35122: CALL_OW 546
35126: ST_TO_ADDR
// if hex [ 1 ] then
35127: LD_VAR 0 4
35131: PUSH
35132: LD_INT 1
35134: ARRAY
35135: IFFALSE 35139
// exit ;
35137: GO 35546
// height := hex [ 2 ] ;
35139: LD_ADDR_VAR 0 15
35143: PUSH
35144: LD_VAR 0 4
35148: PUSH
35149: LD_INT 2
35151: ARRAY
35152: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35153: LD_ADDR_VAR 0 14
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: LD_INT 3
35166: PUSH
35167: LD_INT 5
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// for i in tmp do
35176: LD_ADDR_VAR 0 8
35180: PUSH
35181: LD_VAR 0 14
35185: PUSH
35186: FOR_IN
35187: IFFALSE 35357
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_VAR 0 10
35198: PPUSH
35199: LD_VAR 0 8
35203: PPUSH
35204: LD_INT 5
35206: PPUSH
35207: CALL_OW 272
35211: PUSH
35212: LD_VAR 0 11
35216: PPUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: LD_INT 5
35224: PPUSH
35225: CALL_OW 273
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35234: LD_VAR 0 9
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: PPUSH
35243: LD_VAR 0 9
35247: PUSH
35248: LD_INT 2
35250: ARRAY
35251: PPUSH
35252: CALL_OW 488
35256: IFFALSE 35355
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35258: LD_ADDR_VAR 0 4
35262: PUSH
35263: LD_VAR 0 9
35267: PUSH
35268: LD_INT 1
35270: ARRAY
35271: PPUSH
35272: LD_VAR 0 9
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: PPUSH
35281: CALL_OW 546
35285: ST_TO_ADDR
// if hex [ 1 ] then
35286: LD_VAR 0 4
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: IFFALSE 35298
// continue ;
35296: GO 35186
// h := hex [ 2 ] ;
35298: LD_ADDR_VAR 0 13
35302: PUSH
35303: LD_VAR 0 4
35307: PUSH
35308: LD_INT 2
35310: ARRAY
35311: ST_TO_ADDR
// if h + 7 < height then
35312: LD_VAR 0 13
35316: PUSH
35317: LD_INT 7
35319: PLUS
35320: PUSH
35321: LD_VAR 0 15
35325: LESS
35326: IFFALSE 35355
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35328: LD_ADDR_VAR 0 18
35332: PUSH
35333: LD_INT 7
35335: PUSH
35336: LD_INT 28
35338: PUSH
35339: LD_INT 45
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: PUSH
35347: LD_VAR 0 12
35351: ARRAY
35352: ST_TO_ADDR
// break ;
35353: GO 35357
// end ; end ; end ;
35355: GO 35186
35357: POP
35358: POP
// end ; if not weapon then
35359: LD_VAR 0 18
35363: NOT
35364: IFFALSE 35424
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35366: LD_ADDR_VAR 0 5
35370: PUSH
35371: LD_VAR 0 5
35375: PUSH
35376: LD_INT 11
35378: PUSH
35379: LD_INT 30
35381: PUSH
35382: LD_INT 49
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: DIFF
35390: ST_TO_ADDR
// if not list then
35391: LD_VAR 0 5
35395: NOT
35396: IFFALSE 35400
// exit ;
35398: GO 35546
// weapon := list [ rand ( 1 , list ) ] ;
35400: LD_ADDR_VAR 0 18
35404: PUSH
35405: LD_VAR 0 5
35409: PUSH
35410: LD_INT 1
35412: PPUSH
35413: LD_VAR 0 5
35417: PPUSH
35418: CALL_OW 12
35422: ARRAY
35423: ST_TO_ADDR
// end ; if weapon then
35424: LD_VAR 0 18
35428: IFFALSE 35546
// begin tmp := CostOfWeapon ( weapon ) ;
35430: LD_ADDR_VAR 0 14
35434: PUSH
35435: LD_VAR 0 18
35439: PPUSH
35440: CALL_OW 451
35444: ST_TO_ADDR
// j := GetBase ( tower ) ;
35445: LD_ADDR_VAR 0 9
35449: PUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 274
35459: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35460: LD_VAR 0 9
35464: PPUSH
35465: LD_INT 1
35467: PPUSH
35468: CALL_OW 275
35472: PUSH
35473: LD_VAR 0 14
35477: PUSH
35478: LD_INT 1
35480: ARRAY
35481: GREATEREQUAL
35482: IFFALSE 35508
35484: PUSH
35485: LD_VAR 0 9
35489: PPUSH
35490: LD_INT 2
35492: PPUSH
35493: CALL_OW 275
35497: PUSH
35498: LD_VAR 0 14
35502: PUSH
35503: LD_INT 2
35505: ARRAY
35506: GREATEREQUAL
35507: AND
35508: IFFALSE 35534
35510: PUSH
35511: LD_VAR 0 9
35515: PPUSH
35516: LD_INT 3
35518: PPUSH
35519: CALL_OW 275
35523: PUSH
35524: LD_VAR 0 14
35528: PUSH
35529: LD_INT 3
35531: ARRAY
35532: GREATEREQUAL
35533: AND
35534: IFFALSE 35546
// result := weapon ;
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_VAR 0 18
35545: ST_TO_ADDR
// end ; end ;
35546: LD_VAR 0 3
35550: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35551: LD_INT 0
35553: PPUSH
35554: PPUSH
// result := true ;
35555: LD_ADDR_VAR 0 3
35559: PUSH
35560: LD_INT 1
35562: ST_TO_ADDR
// if array1 = array2 then
35563: LD_VAR 0 1
35567: PUSH
35568: LD_VAR 0 2
35572: EQUAL
35573: IFFALSE 35633
// begin for i = 1 to array1 do
35575: LD_ADDR_VAR 0 4
35579: PUSH
35580: DOUBLE
35581: LD_INT 1
35583: DEC
35584: ST_TO_ADDR
35585: LD_VAR 0 1
35589: PUSH
35590: FOR_TO
35591: IFFALSE 35629
// if array1 [ i ] <> array2 [ i ] then
35593: LD_VAR 0 1
35597: PUSH
35598: LD_VAR 0 4
35602: ARRAY
35603: PUSH
35604: LD_VAR 0 2
35608: PUSH
35609: LD_VAR 0 4
35613: ARRAY
35614: NONEQUAL
35615: IFFALSE 35627
// begin result := false ;
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: LD_INT 0
35624: ST_TO_ADDR
// break ;
35625: GO 35629
// end ;
35627: GO 35590
35629: POP
35630: POP
// end else
35631: GO 35641
// result := false ;
35633: LD_ADDR_VAR 0 3
35637: PUSH
35638: LD_INT 0
35640: ST_TO_ADDR
// end ;
35641: LD_VAR 0 3
35645: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35646: LD_INT 0
35648: PPUSH
35649: PPUSH
// if not array1 or not array2 then
35650: LD_VAR 0 1
35654: NOT
35655: IFTRUE 35664
35657: PUSH
35658: LD_VAR 0 2
35662: NOT
35663: OR
35664: IFFALSE 35668
// exit ;
35666: GO 35732
// result := true ;
35668: LD_ADDR_VAR 0 3
35672: PUSH
35673: LD_INT 1
35675: ST_TO_ADDR
// for i = 1 to array1 do
35676: LD_ADDR_VAR 0 4
35680: PUSH
35681: DOUBLE
35682: LD_INT 1
35684: DEC
35685: ST_TO_ADDR
35686: LD_VAR 0 1
35690: PUSH
35691: FOR_TO
35692: IFFALSE 35730
// if array1 [ i ] <> array2 [ i ] then
35694: LD_VAR 0 1
35698: PUSH
35699: LD_VAR 0 4
35703: ARRAY
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_VAR 0 4
35714: ARRAY
35715: NONEQUAL
35716: IFFALSE 35728
// begin result := false ;
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_INT 0
35725: ST_TO_ADDR
// break ;
35726: GO 35730
// end ;
35728: GO 35691
35730: POP
35731: POP
// end ;
35732: LD_VAR 0 3
35736: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35737: LD_INT 0
35739: PPUSH
35740: PPUSH
35741: PPUSH
// pom := GetBase ( fac ) ;
35742: LD_ADDR_VAR 0 5
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 274
35756: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35757: LD_ADDR_VAR 0 4
35761: PUSH
35762: LD_VAR 0 2
35766: PUSH
35767: LD_INT 1
35769: ARRAY
35770: PPUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_INT 2
35778: ARRAY
35779: PPUSH
35780: LD_VAR 0 2
35784: PUSH
35785: LD_INT 3
35787: ARRAY
35788: PPUSH
35789: LD_VAR 0 2
35793: PUSH
35794: LD_INT 4
35796: ARRAY
35797: PPUSH
35798: CALL_OW 449
35802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_VAR 0 5
35812: PPUSH
35813: LD_INT 1
35815: PPUSH
35816: CALL_OW 275
35820: PUSH
35821: LD_VAR 0 4
35825: PUSH
35826: LD_INT 1
35828: ARRAY
35829: GREATEREQUAL
35830: IFFALSE 35856
35832: PUSH
35833: LD_VAR 0 5
35837: PPUSH
35838: LD_INT 2
35840: PPUSH
35841: CALL_OW 275
35845: PUSH
35846: LD_VAR 0 4
35850: PUSH
35851: LD_INT 2
35853: ARRAY
35854: GREATEREQUAL
35855: AND
35856: IFFALSE 35882
35858: PUSH
35859: LD_VAR 0 5
35863: PPUSH
35864: LD_INT 3
35866: PPUSH
35867: CALL_OW 275
35871: PUSH
35872: LD_VAR 0 4
35876: PUSH
35877: LD_INT 3
35879: ARRAY
35880: GREATEREQUAL
35881: AND
35882: ST_TO_ADDR
// end ;
35883: LD_VAR 0 3
35887: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
// pom := GetBase ( building ) ;
35894: LD_ADDR_VAR 0 3
35898: PUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 274
35908: ST_TO_ADDR
// if not pom then
35909: LD_VAR 0 3
35913: NOT
35914: IFFALSE 35918
// exit ;
35916: GO 36092
// btype := GetBType ( building ) ;
35918: LD_ADDR_VAR 0 5
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 266
35932: ST_TO_ADDR
// if btype = b_armoury then
35933: LD_VAR 0 5
35937: PUSH
35938: LD_INT 4
35940: EQUAL
35941: IFFALSE 35951
// btype := b_barracks ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_INT 5
35950: ST_TO_ADDR
// if btype = b_depot then
35951: LD_VAR 0 5
35955: PUSH
35956: LD_INT 0
35958: EQUAL
35959: IFFALSE 35969
// btype := b_warehouse ;
35961: LD_ADDR_VAR 0 5
35965: PUSH
35966: LD_INT 1
35968: ST_TO_ADDR
// if btype = b_workshop then
35969: LD_VAR 0 5
35973: PUSH
35974: LD_INT 2
35976: EQUAL
35977: IFFALSE 35987
// btype := b_factory ;
35979: LD_ADDR_VAR 0 5
35983: PUSH
35984: LD_INT 3
35986: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35987: LD_ADDR_VAR 0 4
35991: PUSH
35992: LD_VAR 0 5
35996: PPUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 248
36006: PPUSH
36007: CALL_OW 450
36011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36012: LD_ADDR_VAR 0 2
36016: PUSH
36017: LD_VAR 0 3
36021: PPUSH
36022: LD_INT 1
36024: PPUSH
36025: CALL_OW 275
36029: PUSH
36030: LD_VAR 0 4
36034: PUSH
36035: LD_INT 1
36037: ARRAY
36038: GREATEREQUAL
36039: IFFALSE 36065
36041: PUSH
36042: LD_VAR 0 3
36046: PPUSH
36047: LD_INT 2
36049: PPUSH
36050: CALL_OW 275
36054: PUSH
36055: LD_VAR 0 4
36059: PUSH
36060: LD_INT 2
36062: ARRAY
36063: GREATEREQUAL
36064: AND
36065: IFFALSE 36091
36067: PUSH
36068: LD_VAR 0 3
36072: PPUSH
36073: LD_INT 3
36075: PPUSH
36076: CALL_OW 275
36080: PUSH
36081: LD_VAR 0 4
36085: PUSH
36086: LD_INT 3
36088: ARRAY
36089: GREATEREQUAL
36090: AND
36091: ST_TO_ADDR
// end ;
36092: LD_VAR 0 2
36096: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36097: LD_INT 0
36099: PPUSH
36100: PPUSH
36101: PPUSH
// pom := GetBase ( building ) ;
36102: LD_ADDR_VAR 0 4
36106: PUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 274
36116: ST_TO_ADDR
// if not pom then
36117: LD_VAR 0 4
36121: NOT
36122: IFFALSE 36126
// exit ;
36124: GO 36231
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36126: LD_ADDR_VAR 0 5
36130: PUSH
36131: LD_VAR 0 2
36135: PPUSH
36136: LD_VAR 0 1
36140: PPUSH
36141: CALL_OW 248
36145: PPUSH
36146: CALL_OW 450
36150: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36151: LD_ADDR_VAR 0 3
36155: PUSH
36156: LD_VAR 0 4
36160: PPUSH
36161: LD_INT 1
36163: PPUSH
36164: CALL_OW 275
36168: PUSH
36169: LD_VAR 0 5
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: GREATEREQUAL
36178: IFFALSE 36204
36180: PUSH
36181: LD_VAR 0 4
36185: PPUSH
36186: LD_INT 2
36188: PPUSH
36189: CALL_OW 275
36193: PUSH
36194: LD_VAR 0 5
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: GREATEREQUAL
36203: AND
36204: IFFALSE 36230
36206: PUSH
36207: LD_VAR 0 4
36211: PPUSH
36212: LD_INT 3
36214: PPUSH
36215: CALL_OW 275
36219: PUSH
36220: LD_VAR 0 5
36224: PUSH
36225: LD_INT 3
36227: ARRAY
36228: GREATEREQUAL
36229: AND
36230: ST_TO_ADDR
// end ;
36231: LD_VAR 0 3
36235: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36236: LD_INT 0
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
// result := false ;
36249: LD_ADDR_VAR 0 8
36253: PUSH
36254: LD_INT 0
36256: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36257: LD_VAR 0 5
36261: NOT
36262: IFTRUE 36271
36264: PUSH
36265: LD_VAR 0 1
36269: NOT
36270: OR
36271: IFTRUE 36280
36273: PUSH
36274: LD_VAR 0 2
36278: NOT
36279: OR
36280: IFTRUE 36289
36282: PUSH
36283: LD_VAR 0 3
36287: NOT
36288: OR
36289: IFFALSE 36293
// exit ;
36291: GO 37119
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36293: LD_ADDR_VAR 0 14
36297: PUSH
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 2
36307: PPUSH
36308: LD_VAR 0 3
36312: PPUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: PPUSH
36327: CALL_OW 248
36331: PPUSH
36332: LD_INT 0
36334: PPUSH
36335: CALL 38400 0 6
36339: ST_TO_ADDR
// if not hexes then
36340: LD_VAR 0 14
36344: NOT
36345: IFFALSE 36349
// exit ;
36347: GO 37119
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36349: LD_ADDR_VAR 0 17
36353: PUSH
36354: LD_VAR 0 5
36358: PPUSH
36359: LD_INT 22
36361: PUSH
36362: LD_VAR 0 13
36366: PPUSH
36367: CALL_OW 255
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 30
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 30
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PPUSH
36408: CALL_OW 72
36412: ST_TO_ADDR
// for i = 1 to hexes do
36413: LD_ADDR_VAR 0 9
36417: PUSH
36418: DOUBLE
36419: LD_INT 1
36421: DEC
36422: ST_TO_ADDR
36423: LD_VAR 0 14
36427: PUSH
36428: FOR_TO
36429: IFFALSE 37117
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36431: LD_ADDR_VAR 0 13
36435: PUSH
36436: LD_VAR 0 14
36440: PUSH
36441: LD_VAR 0 9
36445: ARRAY
36446: PUSH
36447: LD_INT 1
36449: ARRAY
36450: PPUSH
36451: LD_VAR 0 14
36455: PUSH
36456: LD_VAR 0 9
36460: ARRAY
36461: PUSH
36462: LD_INT 2
36464: ARRAY
36465: PPUSH
36466: CALL_OW 428
36470: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36471: LD_VAR 0 14
36475: PUSH
36476: LD_VAR 0 9
36480: ARRAY
36481: PUSH
36482: LD_INT 1
36484: ARRAY
36485: PPUSH
36486: LD_VAR 0 14
36490: PUSH
36491: LD_VAR 0 9
36495: ARRAY
36496: PUSH
36497: LD_INT 2
36499: ARRAY
36500: PPUSH
36501: CALL_OW 351
36505: IFTRUE 36544
36507: PUSH
36508: LD_VAR 0 14
36512: PUSH
36513: LD_VAR 0 9
36517: ARRAY
36518: PUSH
36519: LD_INT 1
36521: ARRAY
36522: PPUSH
36523: LD_VAR 0 14
36527: PUSH
36528: LD_VAR 0 9
36532: ARRAY
36533: PUSH
36534: LD_INT 2
36536: ARRAY
36537: PPUSH
36538: CALL_OW 488
36542: NOT
36543: OR
36544: IFTRUE 36561
36546: PUSH
36547: LD_VAR 0 13
36551: PPUSH
36552: CALL_OW 247
36556: PUSH
36557: LD_INT 3
36559: EQUAL
36560: OR
36561: IFFALSE 36567
// exit ;
36563: POP
36564: POP
36565: GO 37119
// if not tmp then
36567: LD_VAR 0 13
36571: NOT
36572: IFFALSE 36576
// continue ;
36574: GO 36428
// result := true ;
36576: LD_ADDR_VAR 0 8
36580: PUSH
36581: LD_INT 1
36583: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36584: LD_VAR 0 6
36588: IFFALSE 36605
36590: PUSH
36591: LD_VAR 0 13
36595: PPUSH
36596: CALL_OW 247
36600: PUSH
36601: LD_INT 2
36603: EQUAL
36604: AND
36605: IFFALSE 36622
36607: PUSH
36608: LD_VAR 0 13
36612: PPUSH
36613: CALL_OW 263
36617: PUSH
36618: LD_INT 1
36620: EQUAL
36621: AND
36622: IFFALSE 36786
// begin if IsDrivenBy ( tmp ) then
36624: LD_VAR 0 13
36628: PPUSH
36629: CALL_OW 311
36633: IFFALSE 36637
// continue ;
36635: GO 36428
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36637: LD_VAR 0 6
36641: PPUSH
36642: LD_INT 3
36644: PUSH
36645: LD_INT 60
36647: PUSH
36648: EMPTY
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 3
36657: PUSH
36658: LD_INT 55
36660: PUSH
36661: EMPTY
36662: LIST
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PPUSH
36672: CALL_OW 72
36676: IFFALSE 36784
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36678: LD_ADDR_VAR 0 18
36682: PUSH
36683: LD_VAR 0 6
36687: PPUSH
36688: LD_INT 3
36690: PUSH
36691: LD_INT 60
36693: PUSH
36694: EMPTY
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 55
36706: PUSH
36707: EMPTY
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PPUSH
36718: CALL_OW 72
36722: PUSH
36723: LD_INT 1
36725: ARRAY
36726: ST_TO_ADDR
// if IsInUnit ( driver ) then
36727: LD_VAR 0 18
36731: PPUSH
36732: CALL_OW 310
36736: IFFALSE 36747
// ComExit ( driver ) ;
36738: LD_VAR 0 18
36742: PPUSH
36743: CALL 62390 0 1
// AddComEnterUnit ( driver , tmp ) ;
36747: LD_VAR 0 18
36751: PPUSH
36752: LD_VAR 0 13
36756: PPUSH
36757: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36761: LD_VAR 0 18
36765: PPUSH
36766: LD_VAR 0 7
36770: PPUSH
36771: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36775: LD_VAR 0 18
36779: PPUSH
36780: CALL_OW 181
// end ; continue ;
36784: GO 36428
// end ; if not cleaners or not tmp in cleaners then
36786: LD_VAR 0 6
36790: NOT
36791: IFTRUE 36806
36793: PUSH
36794: LD_VAR 0 13
36798: PUSH
36799: LD_VAR 0 6
36803: IN
36804: NOT
36805: OR
36806: IFFALSE 37115
// begin if dep then
36808: LD_VAR 0 17
36812: IFFALSE 36948
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36814: LD_ADDR_VAR 0 16
36818: PUSH
36819: LD_VAR 0 17
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: PPUSH
36828: CALL_OW 250
36832: PPUSH
36833: LD_VAR 0 17
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: PPUSH
36842: CALL_OW 254
36846: PPUSH
36847: LD_INT 5
36849: PPUSH
36850: CALL_OW 272
36854: PUSH
36855: LD_VAR 0 17
36859: PUSH
36860: LD_INT 1
36862: ARRAY
36863: PPUSH
36864: CALL_OW 251
36868: PPUSH
36869: LD_VAR 0 17
36873: PUSH
36874: LD_INT 1
36876: ARRAY
36877: PPUSH
36878: CALL_OW 254
36882: PPUSH
36883: LD_INT 5
36885: PPUSH
36886: CALL_OW 273
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36895: LD_VAR 0 16
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: LD_VAR 0 16
36908: PUSH
36909: LD_INT 2
36911: ARRAY
36912: PPUSH
36913: CALL_OW 488
36917: IFFALSE 36948
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36919: LD_VAR 0 13
36923: PPUSH
36924: LD_VAR 0 16
36928: PUSH
36929: LD_INT 1
36931: ARRAY
36932: PPUSH
36933: LD_VAR 0 16
36937: PUSH
36938: LD_INT 2
36940: ARRAY
36941: PPUSH
36942: CALL_OW 111
// continue ;
36946: GO 36428
// end ; end ; r := GetDir ( tmp ) ;
36948: LD_ADDR_VAR 0 15
36952: PUSH
36953: LD_VAR 0 13
36957: PPUSH
36958: CALL_OW 254
36962: ST_TO_ADDR
// if r = 5 then
36963: LD_VAR 0 15
36967: PUSH
36968: LD_INT 5
36970: EQUAL
36971: IFFALSE 36981
// r := 0 ;
36973: LD_ADDR_VAR 0 15
36977: PUSH
36978: LD_INT 0
36980: ST_TO_ADDR
// for j = r to 5 do
36981: LD_ADDR_VAR 0 10
36985: PUSH
36986: DOUBLE
36987: LD_VAR 0 15
36991: DEC
36992: ST_TO_ADDR
36993: LD_INT 5
36995: PUSH
36996: FOR_TO
36997: IFFALSE 37113
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36999: LD_ADDR_VAR 0 11
37003: PUSH
37004: LD_VAR 0 13
37008: PPUSH
37009: CALL_OW 250
37013: PPUSH
37014: LD_VAR 0 10
37018: PPUSH
37019: LD_INT 2
37021: PPUSH
37022: CALL_OW 272
37026: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37027: LD_ADDR_VAR 0 12
37031: PUSH
37032: LD_VAR 0 13
37036: PPUSH
37037: CALL_OW 251
37041: PPUSH
37042: LD_VAR 0 10
37046: PPUSH
37047: LD_INT 2
37049: PPUSH
37050: CALL_OW 273
37054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37055: LD_VAR 0 11
37059: PPUSH
37060: LD_VAR 0 12
37064: PPUSH
37065: CALL_OW 488
37069: IFFALSE 37088
37071: PUSH
37072: LD_VAR 0 11
37076: PPUSH
37077: LD_VAR 0 12
37081: PPUSH
37082: CALL_OW 428
37086: NOT
37087: AND
37088: IFFALSE 37111
// begin ComMoveXY ( tmp , _x , _y ) ;
37090: LD_VAR 0 13
37094: PPUSH
37095: LD_VAR 0 11
37099: PPUSH
37100: LD_VAR 0 12
37104: PPUSH
37105: CALL_OW 111
// break ;
37109: GO 37113
// end ; end ;
37111: GO 36996
37113: POP
37114: POP
// end ; end ;
37115: GO 36428
37117: POP
37118: POP
// end ;
37119: LD_VAR 0 8
37123: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37124: LD_INT 0
37126: PPUSH
// result := true ;
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: LD_INT 1
37134: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37135: LD_VAR 0 2
37139: PUSH
37140: LD_INT 24
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37154
37146: LD_INT 33
37148: DOUBLE
37149: EQUAL
37150: IFTRUE 37154
37152: GO 37179
37154: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37155: LD_ADDR_VAR 0 3
37159: PUSH
37160: LD_INT 32
37162: PPUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: CALL_OW 321
37172: PUSH
37173: LD_INT 2
37175: EQUAL
37176: ST_TO_ADDR
37177: GO 37495
37179: LD_INT 20
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37212
37187: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_INT 6
37195: PPUSH
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL_OW 321
37205: PUSH
37206: LD_INT 2
37208: EQUAL
37209: ST_TO_ADDR
37210: GO 37495
37212: LD_INT 22
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37226
37218: LD_INT 36
37220: DOUBLE
37221: EQUAL
37222: IFTRUE 37226
37224: GO 37251
37226: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37227: LD_ADDR_VAR 0 3
37231: PUSH
37232: LD_INT 15
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 321
37244: PUSH
37245: LD_INT 2
37247: EQUAL
37248: ST_TO_ADDR
37249: GO 37495
37251: LD_INT 30
37253: DOUBLE
37254: EQUAL
37255: IFTRUE 37259
37257: GO 37284
37259: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37260: LD_ADDR_VAR 0 3
37264: PUSH
37265: LD_INT 20
37267: PPUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 321
37277: PUSH
37278: LD_INT 2
37280: EQUAL
37281: ST_TO_ADDR
37282: GO 37495
37284: LD_INT 28
37286: DOUBLE
37287: EQUAL
37288: IFTRUE 37298
37290: LD_INT 21
37292: DOUBLE
37293: EQUAL
37294: IFTRUE 37298
37296: GO 37323
37298: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37299: LD_ADDR_VAR 0 3
37303: PUSH
37304: LD_INT 21
37306: PPUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 321
37316: PUSH
37317: LD_INT 2
37319: EQUAL
37320: ST_TO_ADDR
37321: GO 37495
37323: LD_INT 16
37325: DOUBLE
37326: EQUAL
37327: IFTRUE 37331
37329: GO 37356
37331: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_INT 84
37339: PPUSH
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 321
37349: PUSH
37350: LD_INT 2
37352: EQUAL
37353: ST_TO_ADDR
37354: GO 37495
37356: LD_INT 19
37358: DOUBLE
37359: EQUAL
37360: IFTRUE 37370
37362: LD_INT 23
37364: DOUBLE
37365: EQUAL
37366: IFTRUE 37370
37368: GO 37395
37370: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37371: LD_ADDR_VAR 0 3
37375: PUSH
37376: LD_INT 83
37378: PPUSH
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL_OW 321
37388: PUSH
37389: LD_INT 2
37391: EQUAL
37392: ST_TO_ADDR
37393: GO 37495
37395: LD_INT 17
37397: DOUBLE
37398: EQUAL
37399: IFTRUE 37403
37401: GO 37428
37403: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37404: LD_ADDR_VAR 0 3
37408: PUSH
37409: LD_INT 39
37411: PPUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 321
37421: PUSH
37422: LD_INT 2
37424: EQUAL
37425: ST_TO_ADDR
37426: GO 37495
37428: LD_INT 18
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37436
37434: GO 37461
37436: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_INT 40
37444: PPUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 321
37454: PUSH
37455: LD_INT 2
37457: EQUAL
37458: ST_TO_ADDR
37459: GO 37495
37461: LD_INT 27
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37494
37469: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 35
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL_OW 321
37487: PUSH
37488: LD_INT 2
37490: EQUAL
37491: ST_TO_ADDR
37492: GO 37495
37494: POP
// end ;
37495: LD_VAR 0 3
37499: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37500: LD_INT 0
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
// result := false ;
37513: LD_ADDR_VAR 0 6
37517: PUSH
37518: LD_INT 0
37520: ST_TO_ADDR
// if btype = b_depot then
37521: LD_VAR 0 2
37525: PUSH
37526: LD_INT 0
37528: EQUAL
37529: IFFALSE 37541
// begin result := true ;
37531: LD_ADDR_VAR 0 6
37535: PUSH
37536: LD_INT 1
37538: ST_TO_ADDR
// exit ;
37539: GO 38395
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37541: LD_VAR 0 1
37545: NOT
37546: IFTRUE 37571
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 266
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: IN
37569: NOT
37570: OR
37571: IFTRUE 37580
37573: PUSH
37574: LD_VAR 0 2
37578: NOT
37579: OR
37580: IFTRUE 37616
37582: PUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 4
37602: PUSH
37603: LD_INT 5
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: IN
37614: NOT
37615: OR
37616: IFTRUE 37635
37618: PUSH
37619: LD_VAR 0 3
37623: PPUSH
37624: LD_VAR 0 4
37628: PPUSH
37629: CALL_OW 488
37633: NOT
37634: OR
37635: IFFALSE 37639
// exit ;
37637: GO 38395
// side := GetSide ( depot ) ;
37639: LD_ADDR_VAR 0 9
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 255
37653: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37654: LD_VAR 0 9
37658: PPUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: CALL 37124 0 2
37668: NOT
37669: IFFALSE 37673
// exit ;
37671: GO 38395
// pom := GetBase ( depot ) ;
37673: LD_ADDR_VAR 0 10
37677: PUSH
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL_OW 274
37687: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37688: LD_ADDR_VAR 0 11
37692: PUSH
37693: LD_VAR 0 2
37697: PPUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 248
37707: PPUSH
37708: CALL_OW 450
37712: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37713: LD_VAR 0 10
37717: PPUSH
37718: LD_INT 1
37720: PPUSH
37721: CALL_OW 275
37725: PUSH
37726: LD_VAR 0 11
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: GREATEREQUAL
37735: IFFALSE 37761
37737: PUSH
37738: LD_VAR 0 10
37742: PPUSH
37743: LD_INT 2
37745: PPUSH
37746: CALL_OW 275
37750: PUSH
37751: LD_VAR 0 11
37755: PUSH
37756: LD_INT 2
37758: ARRAY
37759: GREATEREQUAL
37760: AND
37761: IFFALSE 37787
37763: PUSH
37764: LD_VAR 0 10
37768: PPUSH
37769: LD_INT 3
37771: PPUSH
37772: CALL_OW 275
37776: PUSH
37777: LD_VAR 0 11
37781: PUSH
37782: LD_INT 3
37784: ARRAY
37785: GREATEREQUAL
37786: AND
37787: NOT
37788: IFFALSE 37792
// exit ;
37790: GO 38395
// if GetBType ( depot ) = b_depot then
37792: LD_VAR 0 1
37796: PPUSH
37797: CALL_OW 266
37801: PUSH
37802: LD_INT 0
37804: EQUAL
37805: IFFALSE 37817
// dist := 28 else
37807: LD_ADDR_VAR 0 14
37811: PUSH
37812: LD_INT 28
37814: ST_TO_ADDR
37815: GO 37825
// dist := 36 ;
37817: LD_ADDR_VAR 0 14
37821: PUSH
37822: LD_INT 36
37824: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37825: LD_VAR 0 1
37829: PPUSH
37830: LD_VAR 0 3
37834: PPUSH
37835: LD_VAR 0 4
37839: PPUSH
37840: CALL_OW 297
37844: PUSH
37845: LD_VAR 0 14
37849: GREATER
37850: IFFALSE 37854
// exit ;
37852: GO 38395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37854: LD_ADDR_VAR 0 12
37858: PUSH
37859: LD_VAR 0 2
37863: PPUSH
37864: LD_VAR 0 3
37868: PPUSH
37869: LD_VAR 0 4
37873: PPUSH
37874: LD_VAR 0 5
37878: PPUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 248
37888: PPUSH
37889: LD_INT 0
37891: PPUSH
37892: CALL 38400 0 6
37896: ST_TO_ADDR
// if not hexes then
37897: LD_VAR 0 12
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38395
// hex := GetHexInfo ( x , y ) ;
37906: LD_ADDR_VAR 0 15
37910: PUSH
37911: LD_VAR 0 3
37915: PPUSH
37916: LD_VAR 0 4
37920: PPUSH
37921: CALL_OW 546
37925: ST_TO_ADDR
// if hex [ 1 ] then
37926: LD_VAR 0 15
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: IFFALSE 37938
// exit ;
37936: GO 38395
// height := hex [ 2 ] ;
37938: LD_ADDR_VAR 0 13
37942: PUSH
37943: LD_VAR 0 15
37947: PUSH
37948: LD_INT 2
37950: ARRAY
37951: ST_TO_ADDR
// for i = 1 to hexes do
37952: LD_ADDR_VAR 0 7
37956: PUSH
37957: DOUBLE
37958: LD_INT 1
37960: DEC
37961: ST_TO_ADDR
37962: LD_VAR 0 12
37966: PUSH
37967: FOR_TO
37968: IFFALSE 38312
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37970: LD_VAR 0 12
37974: PUSH
37975: LD_VAR 0 7
37979: ARRAY
37980: PUSH
37981: LD_INT 1
37983: ARRAY
37984: PPUSH
37985: LD_VAR 0 12
37989: PUSH
37990: LD_VAR 0 7
37994: ARRAY
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: PPUSH
38000: CALL_OW 488
38004: NOT
38005: IFTRUE 38047
38007: PUSH
38008: LD_VAR 0 12
38012: PUSH
38013: LD_VAR 0 7
38017: ARRAY
38018: PUSH
38019: LD_INT 1
38021: ARRAY
38022: PPUSH
38023: LD_VAR 0 12
38027: PUSH
38028: LD_VAR 0 7
38032: ARRAY
38033: PUSH
38034: LD_INT 2
38036: ARRAY
38037: PPUSH
38038: CALL_OW 428
38042: PUSH
38043: LD_INT 0
38045: GREATER
38046: OR
38047: IFTRUE 38085
38049: PUSH
38050: LD_VAR 0 12
38054: PUSH
38055: LD_VAR 0 7
38059: ARRAY
38060: PUSH
38061: LD_INT 1
38063: ARRAY
38064: PPUSH
38065: LD_VAR 0 12
38069: PUSH
38070: LD_VAR 0 7
38074: ARRAY
38075: PUSH
38076: LD_INT 2
38078: ARRAY
38079: PPUSH
38080: CALL_OW 351
38084: OR
38085: IFFALSE 38091
// exit ;
38087: POP
38088: POP
38089: GO 38395
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38091: LD_ADDR_VAR 0 8
38095: PUSH
38096: LD_VAR 0 12
38100: PUSH
38101: LD_VAR 0 7
38105: ARRAY
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PPUSH
38111: LD_VAR 0 12
38115: PUSH
38116: LD_VAR 0 7
38120: ARRAY
38121: PUSH
38122: LD_INT 2
38124: ARRAY
38125: PPUSH
38126: CALL_OW 546
38130: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38131: LD_VAR 0 8
38135: PUSH
38136: LD_INT 1
38138: ARRAY
38139: IFTRUE 38161
38141: PUSH
38142: LD_VAR 0 8
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: PUSH
38151: LD_VAR 0 13
38155: PUSH
38156: LD_INT 2
38158: PLUS
38159: GREATER
38160: OR
38161: IFTRUE 38183
38163: PUSH
38164: LD_VAR 0 8
38168: PUSH
38169: LD_INT 2
38171: ARRAY
38172: PUSH
38173: LD_VAR 0 13
38177: PUSH
38178: LD_INT 2
38180: MINUS
38181: LESS
38182: OR
38183: IFTRUE 38251
38185: PUSH
38186: LD_VAR 0 8
38190: PUSH
38191: LD_INT 3
38193: ARRAY
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 8
38200: PUSH
38201: LD_INT 9
38203: PUSH
38204: LD_INT 10
38206: PUSH
38207: LD_INT 11
38209: PUSH
38210: LD_INT 12
38212: PUSH
38213: LD_INT 13
38215: PUSH
38216: LD_INT 16
38218: PUSH
38219: LD_INT 17
38221: PUSH
38222: LD_INT 18
38224: PUSH
38225: LD_INT 19
38227: PUSH
38228: LD_INT 20
38230: PUSH
38231: LD_INT 21
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: IN
38249: NOT
38250: OR
38251: IFTRUE 38264
38253: PUSH
38254: LD_VAR 0 8
38258: PUSH
38259: LD_INT 5
38261: ARRAY
38262: NOT
38263: OR
38264: IFTRUE 38304
38266: PUSH
38267: LD_VAR 0 8
38271: PUSH
38272: LD_INT 6
38274: ARRAY
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 7
38284: PUSH
38285: LD_INT 9
38287: PUSH
38288: LD_INT 10
38290: PUSH
38291: LD_INT 11
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: IN
38302: NOT
38303: OR
38304: IFFALSE 38310
// exit ;
38306: POP
38307: POP
38308: GO 38395
// end ;
38310: GO 37967
38312: POP
38313: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38314: LD_VAR 0 9
38318: PPUSH
38319: LD_VAR 0 3
38323: PPUSH
38324: LD_VAR 0 4
38328: PPUSH
38329: LD_INT 20
38331: PPUSH
38332: CALL 30214 0 4
38336: PUSH
38337: LD_INT 4
38339: ARRAY
38340: IFFALSE 38344
// exit ;
38342: GO 38395
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38344: LD_VAR 0 2
38348: PUSH
38349: LD_INT 29
38351: PUSH
38352: LD_INT 30
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: IN
38359: IFFALSE 38383
38361: PUSH
38362: LD_VAR 0 3
38366: PPUSH
38367: LD_VAR 0 4
38371: PPUSH
38372: LD_VAR 0 9
38376: PPUSH
38377: CALL_OW 440
38381: NOT
38382: AND
38383: IFFALSE 38387
// exit ;
38385: GO 38395
// result := true ;
38387: LD_ADDR_VAR 0 6
38391: PUSH
38392: LD_INT 1
38394: ST_TO_ADDR
// end ;
38395: LD_VAR 0 6
38399: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38400: LD_INT 0
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
// result = [ ] ;
38460: LD_ADDR_VAR 0 7
38464: PUSH
38465: EMPTY
38466: ST_TO_ADDR
// temp_list = [ ] ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: EMPTY
38473: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38474: LD_VAR 0 4
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 4
38493: PUSH
38494: LD_INT 5
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: IN
38505: NOT
38506: IFTRUE 38549
38508: PUSH
38509: LD_VAR 0 1
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: IN
38524: IFFALSE 38548
38526: PUSH
38527: LD_VAR 0 5
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 3
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: IN
38546: NOT
38547: AND
38548: OR
38549: IFFALSE 38553
// exit ;
38551: GO 56952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38553: LD_VAR 0 1
38557: PUSH
38558: LD_INT 6
38560: PUSH
38561: LD_INT 7
38563: PUSH
38564: LD_INT 8
38566: PUSH
38567: LD_INT 13
38569: PUSH
38570: LD_INT 12
38572: PUSH
38573: LD_INT 15
38575: PUSH
38576: LD_INT 11
38578: PUSH
38579: LD_INT 14
38581: PUSH
38582: LD_INT 10
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: IN
38596: IFFALSE 38606
// btype = b_lab ;
38598: LD_ADDR_VAR 0 1
38602: PUSH
38603: LD_INT 6
38605: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38606: LD_VAR 0 6
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: IN
38625: NOT
38626: IFTRUE 38694
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 3
38645: PUSH
38646: LD_INT 6
38648: PUSH
38649: LD_INT 36
38651: PUSH
38652: LD_INT 4
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: LD_INT 31
38660: PUSH
38661: LD_INT 32
38663: PUSH
38664: LD_INT 33
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: IN
38680: NOT
38681: IFFALSE 38693
38683: PUSH
38684: LD_VAR 0 6
38688: PUSH
38689: LD_INT 1
38691: EQUAL
38692: AND
38693: OR
38694: IFTRUE 38726
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: IN
38712: NOT
38713: IFFALSE 38725
38715: PUSH
38716: LD_VAR 0 6
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: AND
38725: OR
38726: IFFALSE 38736
// mode = 0 ;
38728: LD_ADDR_VAR 0 6
38732: PUSH
38733: LD_INT 0
38735: ST_TO_ADDR
// case mode of 0 :
38736: LD_VAR 0 6
38740: PUSH
38741: LD_INT 0
38743: DOUBLE
38744: EQUAL
38745: IFTRUE 38749
38747: GO 50202
38749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38750: LD_ADDR_VAR 0 11
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 3
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38943: LD_ADDR_VAR 0 12
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39139: LD_ADDR_VAR 0 13
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: NEG
39311: PUSH
39312: LD_INT 3
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39338: LD_ADDR_VAR 0 14
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 3
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 3
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39534: LD_ADDR_VAR 0 15
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39727: LD_ADDR_VAR 0 16
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: LD_INT 3
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 3
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39920: LD_ADDR_VAR 0 17
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40150: LD_ADDR_VAR 0 18
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40380: LD_ADDR_VAR 0 19
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40610: LD_ADDR_VAR 0 20
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40840: LD_ADDR_VAR 0 21
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41070: LD_ADDR_VAR 0 22
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 2
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41300: LD_ADDR_VAR 0 23
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41580: LD_ADDR_VAR 0 24
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41856: LD_ADDR_VAR 0 25
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42130: LD_ADDR_VAR 0 26
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42406: LD_ADDR_VAR 0 27
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 3
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42686: LD_ADDR_VAR 0 28
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 3
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 3
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42968: LD_ADDR_VAR 0 29
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43247: LD_ADDR_VAR 0 30
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 3
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 3
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43525: LD_ADDR_VAR 0 31
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: LD_INT 3
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43803: LD_ADDR_VAR 0 32
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 3
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44081: LD_ADDR_VAR 0 33
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44360: LD_ADDR_VAR 0 34
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 3
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44640: LD_ADDR_VAR 0 35
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44752: LD_ADDR_VAR 0 36
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44864: LD_ADDR_VAR 0 37
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44976: LD_ADDR_VAR 0 38
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45088: LD_ADDR_VAR 0 39
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45200: LD_ADDR_VAR 0 40
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45312: LD_ADDR_VAR 0 41
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 3
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 3
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 3
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: LD_INT 3
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45662: LD_ADDR_VAR 0 42
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 3
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 3
45959: NEG
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46012: LD_ADDR_VAR 0 43
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 3
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46360: LD_ADDR_VAR 0 44
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 3
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46710: LD_ADDR_VAR 0 45
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47060: LD_ADDR_VAR 0 46
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 3
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47408: LD_ADDR_VAR 0 47
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47559: LD_ADDR_VAR 0 48
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47706: LD_ADDR_VAR 0 49
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47850: LD_ADDR_VAR 0 50
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47994: LD_ADDR_VAR 0 51
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48141: LD_ADDR_VAR 0 52
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48292: LD_ADDR_VAR 0 53
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48522: LD_ADDR_VAR 0 54
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48752: LD_ADDR_VAR 0 55
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48982: LD_ADDR_VAR 0 56
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49212: LD_ADDR_VAR 0 57
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49442: LD_ADDR_VAR 0 58
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49672: LD_ADDR_VAR 0 59
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49760: LD_ADDR_VAR 0 60
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49848: LD_ADDR_VAR 0 61
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49936: LD_ADDR_VAR 0 62
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50024: LD_ADDR_VAR 0 63
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50112: LD_ADDR_VAR 0 64
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// end ; 1 :
50200: GO 56097
50202: LD_INT 1
50204: DOUBLE
50205: EQUAL
50206: IFTRUE 50210
50208: GO 52833
50210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50211: LD_ADDR_VAR 0 11
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: LD_INT 3
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50255: LD_ADDR_VAR 0 12
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50296: LD_ADDR_VAR 0 13
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50336: LD_ADDR_VAR 0 14
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50377: LD_ADDR_VAR 0 15
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50421: LD_ADDR_VAR 0 16
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 3
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50467: LD_ADDR_VAR 0 17
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50511: LD_ADDR_VAR 0 18
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 3
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50552: LD_ADDR_VAR 0 19
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50592: LD_ADDR_VAR 0 20
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50633: LD_ADDR_VAR 0 21
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50677: LD_ADDR_VAR 0 22
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50723: LD_ADDR_VAR 0 23
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 4
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50767: LD_ADDR_VAR 0 24
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 4
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50808: LD_ADDR_VAR 0 25
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 4
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50848: LD_ADDR_VAR 0 26
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 3
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50889: LD_ADDR_VAR 0 27
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50933: LD_ADDR_VAR 0 28
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50979: LD_ADDR_VAR 0 29
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 4
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 5
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 5
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 4
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 6
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 6
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 5
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51134: LD_ADDR_VAR 0 30
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 4
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 5
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 5
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 6
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 6
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51277: LD_ADDR_VAR 0 31
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 4
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 4
51324: PUSH
51325: LD_INT 4
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: LD_INT 4
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 5
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 5
51354: PUSH
51355: LD_INT 5
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 5
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 6
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 6
51384: PUSH
51385: LD_INT 6
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 5
51394: PUSH
51395: LD_INT 6
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51416: LD_ADDR_VAR 0 32
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 4
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 4
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 5
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 5
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 6
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 6
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 5
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51559: LD_ADDR_VAR 0 33
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 4
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 4
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 4
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 5
51645: NEG
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 5
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 5
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 6
51679: NEG
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 6
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51714: LD_ADDR_VAR 0 34
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: LD_INT 4
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 4
51769: NEG
51770: PUSH
51771: LD_INT 3
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 4
51781: NEG
51782: PUSH
51783: LD_INT 4
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: LD_INT 5
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: LD_INT 4
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: LD_INT 5
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: NEG
51830: PUSH
51831: LD_INT 6
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 6
51841: NEG
51842: PUSH
51843: LD_INT 5
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 6
51853: NEG
51854: PUSH
51855: LD_INT 6
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51877: LD_ADDR_VAR 0 41
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51921: LD_ADDR_VAR 0 42
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51962: LD_ADDR_VAR 0 43
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52002: LD_ADDR_VAR 0 44
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52043: LD_ADDR_VAR 0 45
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52087: LD_ADDR_VAR 0 46
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52133: LD_ADDR_VAR 0 47
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52166: LD_ADDR_VAR 0 48
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52197: LD_ADDR_VAR 0 49
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52226: LD_ADDR_VAR 0 50
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52255: LD_ADDR_VAR 0 51
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52286: LD_ADDR_VAR 0 52
52290: PUSH
52291: LD_INT 3
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52319: LD_ADDR_VAR 0 53
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52363: LD_ADDR_VAR 0 54
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52404: LD_ADDR_VAR 0 55
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52444: LD_ADDR_VAR 0 56
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52485: LD_ADDR_VAR 0 57
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: NEG
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52529: LD_ADDR_VAR 0 58
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52575: LD_ADDR_VAR 0 59
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52619: LD_ADDR_VAR 0 60
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52660: LD_ADDR_VAR 0 61
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52700: LD_ADDR_VAR 0 62
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52741: LD_ADDR_VAR 0 63
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52785: LD_ADDR_VAR 0 64
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// end ; 2 :
52831: GO 56097
52833: LD_INT 2
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52841
52839: GO 56096
52841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52842: LD_ADDR_VAR 0 29
52846: PUSH
52847: LD_INT 4
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 5
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 5
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: LD_INT 4
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 4
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 3
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 4
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 4
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 5
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 5
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 4
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 4
53181: NEG
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 4
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: NEG
53228: PUSH
53229: LD_INT 4
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: NEG
53240: PUSH
53241: LD_INT 5
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: LD_INT 4
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: LD_INT 3
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 4
53275: NEG
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 5
53287: NEG
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 5
53299: NEG
53300: PUSH
53301: LD_INT 5
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: LD_INT 5
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 5
53323: NEG
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53380: LD_ADDR_VAR 0 30
53384: PUSH
53385: LD_INT 4
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 4
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: LD_INT 4
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 5
53417: PUSH
53418: LD_INT 5
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: LD_INT 5
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: LD_INT 4
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 5
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 5
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 4
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 4
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 4
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 4
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 5
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 5
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 5
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: LD_INT 4
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 4
53732: NEG
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: LD_INT 4
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 4
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 4
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 5
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 4
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 4
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 5
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 5
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53927: LD_ADDR_VAR 0 31
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 4
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 5
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 4
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 4
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 4
54129: NEG
54130: PUSH
54131: LD_INT 4
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: NEG
54142: PUSH
54143: LD_INT 5
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: LD_INT 4
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 4
54177: NEG
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 5
54189: NEG
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 5
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 5
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 5
54225: NEG
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 4
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 4
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 4
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 4
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 5
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 5
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54477: LD_ADDR_VAR 0 32
54481: PUSH
54482: LD_INT 4
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 4
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: NEG
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 5
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 5
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 4
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 5
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 4
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 5
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: LD_INT 5
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 4
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 5
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 5
54919: PUSH
54920: LD_INT 5
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 4
54929: PUSH
54930: LD_INT 5
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: LD_INT 4
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 5
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55024: LD_ADDR_VAR 0 33
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: LD_INT 4
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 4
55043: NEG
55044: PUSH
55045: LD_INT 5
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 4
55079: NEG
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 5
55091: NEG
55092: PUSH
55093: LD_INT 4
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 5
55103: NEG
55104: PUSH
55105: LD_INT 5
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: LD_INT 5
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 5
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 4
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 4
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 4
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 4
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 5
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 4
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 4
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 5
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 5
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55562: LD_ADDR_VAR 0 34
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 4
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 5
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 5
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 5
55784: PUSH
55785: LD_INT 4
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: LD_INT 5
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: LD_INT 5
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: LD_INT 4
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 5
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 4
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 5
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 5
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 5
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: ST_TO_ADDR
// end ; end ;
56094: GO 56097
56096: POP
// case btype of b_depot , b_warehouse :
56097: LD_VAR 0 1
56101: PUSH
56102: LD_INT 0
56104: DOUBLE
56105: EQUAL
56106: IFTRUE 56116
56108: LD_INT 1
56110: DOUBLE
56111: EQUAL
56112: IFTRUE 56116
56114: GO 56317
56116: POP
// case nation of nation_american :
56117: LD_VAR 0 5
56121: PUSH
56122: LD_INT 1
56124: DOUBLE
56125: EQUAL
56126: IFTRUE 56130
56128: GO 56186
56130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56131: LD_ADDR_VAR 0 9
56135: PUSH
56136: LD_VAR 0 11
56140: PUSH
56141: LD_VAR 0 12
56145: PUSH
56146: LD_VAR 0 13
56150: PUSH
56151: LD_VAR 0 14
56155: PUSH
56156: LD_VAR 0 15
56160: PUSH
56161: LD_VAR 0 16
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: PUSH
56174: LD_VAR 0 4
56178: PUSH
56179: LD_INT 1
56181: PLUS
56182: ARRAY
56183: ST_TO_ADDR
56184: GO 56315
56186: LD_INT 2
56188: DOUBLE
56189: EQUAL
56190: IFTRUE 56194
56192: GO 56250
56194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56195: LD_ADDR_VAR 0 9
56199: PUSH
56200: LD_VAR 0 17
56204: PUSH
56205: LD_VAR 0 18
56209: PUSH
56210: LD_VAR 0 19
56214: PUSH
56215: LD_VAR 0 20
56219: PUSH
56220: LD_VAR 0 21
56224: PUSH
56225: LD_VAR 0 22
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: PUSH
56238: LD_VAR 0 4
56242: PUSH
56243: LD_INT 1
56245: PLUS
56246: ARRAY
56247: ST_TO_ADDR
56248: GO 56315
56250: LD_INT 3
56252: DOUBLE
56253: EQUAL
56254: IFTRUE 56258
56256: GO 56314
56258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56259: LD_ADDR_VAR 0 9
56263: PUSH
56264: LD_VAR 0 23
56268: PUSH
56269: LD_VAR 0 24
56273: PUSH
56274: LD_VAR 0 25
56278: PUSH
56279: LD_VAR 0 26
56283: PUSH
56284: LD_VAR 0 27
56288: PUSH
56289: LD_VAR 0 28
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: PUSH
56302: LD_VAR 0 4
56306: PUSH
56307: LD_INT 1
56309: PLUS
56310: ARRAY
56311: ST_TO_ADDR
56312: GO 56315
56314: POP
56315: GO 56870
56317: LD_INT 2
56319: DOUBLE
56320: EQUAL
56321: IFTRUE 56331
56323: LD_INT 3
56325: DOUBLE
56326: EQUAL
56327: IFTRUE 56331
56329: GO 56387
56331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56332: LD_ADDR_VAR 0 9
56336: PUSH
56337: LD_VAR 0 29
56341: PUSH
56342: LD_VAR 0 30
56346: PUSH
56347: LD_VAR 0 31
56351: PUSH
56352: LD_VAR 0 32
56356: PUSH
56357: LD_VAR 0 33
56361: PUSH
56362: LD_VAR 0 34
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: PUSH
56375: LD_VAR 0 4
56379: PUSH
56380: LD_INT 1
56382: PLUS
56383: ARRAY
56384: ST_TO_ADDR
56385: GO 56870
56387: LD_INT 16
56389: DOUBLE
56390: EQUAL
56391: IFTRUE 56449
56393: LD_INT 17
56395: DOUBLE
56396: EQUAL
56397: IFTRUE 56449
56399: LD_INT 18
56401: DOUBLE
56402: EQUAL
56403: IFTRUE 56449
56405: LD_INT 19
56407: DOUBLE
56408: EQUAL
56409: IFTRUE 56449
56411: LD_INT 22
56413: DOUBLE
56414: EQUAL
56415: IFTRUE 56449
56417: LD_INT 20
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56449
56423: LD_INT 21
56425: DOUBLE
56426: EQUAL
56427: IFTRUE 56449
56429: LD_INT 23
56431: DOUBLE
56432: EQUAL
56433: IFTRUE 56449
56435: LD_INT 24
56437: DOUBLE
56438: EQUAL
56439: IFTRUE 56449
56441: LD_INT 25
56443: DOUBLE
56444: EQUAL
56445: IFTRUE 56449
56447: GO 56505
56449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56450: LD_ADDR_VAR 0 9
56454: PUSH
56455: LD_VAR 0 35
56459: PUSH
56460: LD_VAR 0 36
56464: PUSH
56465: LD_VAR 0 37
56469: PUSH
56470: LD_VAR 0 38
56474: PUSH
56475: LD_VAR 0 39
56479: PUSH
56480: LD_VAR 0 40
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: PUSH
56493: LD_VAR 0 4
56497: PUSH
56498: LD_INT 1
56500: PLUS
56501: ARRAY
56502: ST_TO_ADDR
56503: GO 56870
56505: LD_INT 6
56507: DOUBLE
56508: EQUAL
56509: IFTRUE 56561
56511: LD_INT 7
56513: DOUBLE
56514: EQUAL
56515: IFTRUE 56561
56517: LD_INT 8
56519: DOUBLE
56520: EQUAL
56521: IFTRUE 56561
56523: LD_INT 13
56525: DOUBLE
56526: EQUAL
56527: IFTRUE 56561
56529: LD_INT 12
56531: DOUBLE
56532: EQUAL
56533: IFTRUE 56561
56535: LD_INT 15
56537: DOUBLE
56538: EQUAL
56539: IFTRUE 56561
56541: LD_INT 11
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56561
56547: LD_INT 14
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56561
56553: LD_INT 10
56555: DOUBLE
56556: EQUAL
56557: IFTRUE 56561
56559: GO 56617
56561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56562: LD_ADDR_VAR 0 9
56566: PUSH
56567: LD_VAR 0 41
56571: PUSH
56572: LD_VAR 0 42
56576: PUSH
56577: LD_VAR 0 43
56581: PUSH
56582: LD_VAR 0 44
56586: PUSH
56587: LD_VAR 0 45
56591: PUSH
56592: LD_VAR 0 46
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: PUSH
56605: LD_VAR 0 4
56609: PUSH
56610: LD_INT 1
56612: PLUS
56613: ARRAY
56614: ST_TO_ADDR
56615: GO 56870
56617: LD_INT 36
56619: DOUBLE
56620: EQUAL
56621: IFTRUE 56625
56623: GO 56681
56625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56626: LD_ADDR_VAR 0 9
56630: PUSH
56631: LD_VAR 0 47
56635: PUSH
56636: LD_VAR 0 48
56640: PUSH
56641: LD_VAR 0 49
56645: PUSH
56646: LD_VAR 0 50
56650: PUSH
56651: LD_VAR 0 51
56655: PUSH
56656: LD_VAR 0 52
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: PUSH
56669: LD_VAR 0 4
56673: PUSH
56674: LD_INT 1
56676: PLUS
56677: ARRAY
56678: ST_TO_ADDR
56679: GO 56870
56681: LD_INT 4
56683: DOUBLE
56684: EQUAL
56685: IFTRUE 56707
56687: LD_INT 5
56689: DOUBLE
56690: EQUAL
56691: IFTRUE 56707
56693: LD_INT 34
56695: DOUBLE
56696: EQUAL
56697: IFTRUE 56707
56699: LD_INT 37
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56707
56705: GO 56763
56707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56708: LD_ADDR_VAR 0 9
56712: PUSH
56713: LD_VAR 0 53
56717: PUSH
56718: LD_VAR 0 54
56722: PUSH
56723: LD_VAR 0 55
56727: PUSH
56728: LD_VAR 0 56
56732: PUSH
56733: LD_VAR 0 57
56737: PUSH
56738: LD_VAR 0 58
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: PUSH
56751: LD_VAR 0 4
56755: PUSH
56756: LD_INT 1
56758: PLUS
56759: ARRAY
56760: ST_TO_ADDR
56761: GO 56870
56763: LD_INT 31
56765: DOUBLE
56766: EQUAL
56767: IFTRUE 56813
56769: LD_INT 32
56771: DOUBLE
56772: EQUAL
56773: IFTRUE 56813
56775: LD_INT 33
56777: DOUBLE
56778: EQUAL
56779: IFTRUE 56813
56781: LD_INT 27
56783: DOUBLE
56784: EQUAL
56785: IFTRUE 56813
56787: LD_INT 26
56789: DOUBLE
56790: EQUAL
56791: IFTRUE 56813
56793: LD_INT 28
56795: DOUBLE
56796: EQUAL
56797: IFTRUE 56813
56799: LD_INT 29
56801: DOUBLE
56802: EQUAL
56803: IFTRUE 56813
56805: LD_INT 30
56807: DOUBLE
56808: EQUAL
56809: IFTRUE 56813
56811: GO 56869
56813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56814: LD_ADDR_VAR 0 9
56818: PUSH
56819: LD_VAR 0 59
56823: PUSH
56824: LD_VAR 0 60
56828: PUSH
56829: LD_VAR 0 61
56833: PUSH
56834: LD_VAR 0 62
56838: PUSH
56839: LD_VAR 0 63
56843: PUSH
56844: LD_VAR 0 64
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: PUSH
56857: LD_VAR 0 4
56861: PUSH
56862: LD_INT 1
56864: PLUS
56865: ARRAY
56866: ST_TO_ADDR
56867: GO 56870
56869: POP
// temp_list2 = [ ] ;
56870: LD_ADDR_VAR 0 10
56874: PUSH
56875: EMPTY
56876: ST_TO_ADDR
// for i in temp_list do
56877: LD_ADDR_VAR 0 8
56881: PUSH
56882: LD_VAR 0 9
56886: PUSH
56887: FOR_IN
56888: IFFALSE 56940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56890: LD_ADDR_VAR 0 10
56894: PUSH
56895: LD_VAR 0 10
56899: PUSH
56900: LD_VAR 0 8
56904: PUSH
56905: LD_INT 1
56907: ARRAY
56908: PUSH
56909: LD_VAR 0 2
56913: PLUS
56914: PUSH
56915: LD_VAR 0 8
56919: PUSH
56920: LD_INT 2
56922: ARRAY
56923: PUSH
56924: LD_VAR 0 3
56928: PLUS
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: ADD
56937: ST_TO_ADDR
56938: GO 56887
56940: POP
56941: POP
// result = temp_list2 ;
56942: LD_ADDR_VAR 0 7
56946: PUSH
56947: LD_VAR 0 10
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 7
56956: RET
// export function EnemyInRange ( unit , dist ) ; begin
56957: LD_INT 0
56959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: CALL_OW 255
56974: PPUSH
56975: LD_VAR 0 1
56979: PPUSH
56980: CALL_OW 250
56984: PPUSH
56985: LD_VAR 0 1
56989: PPUSH
56990: CALL_OW 251
56994: PPUSH
56995: LD_VAR 0 2
56999: PPUSH
57000: CALL 30214 0 4
57004: PUSH
57005: LD_INT 4
57007: ARRAY
57008: ST_TO_ADDR
// end ;
57009: LD_VAR 0 3
57013: RET
// export function PlayerSeeMe ( unit ) ; begin
57014: LD_INT 0
57016: PPUSH
// result := See ( your_side , unit ) ;
57017: LD_ADDR_VAR 0 2
57021: PUSH
57022: LD_OWVAR 2
57026: PPUSH
57027: LD_VAR 0 1
57031: PPUSH
57032: CALL_OW 292
57036: ST_TO_ADDR
// end ;
57037: LD_VAR 0 2
57041: RET
// export function ReverseDir ( unit ) ; begin
57042: LD_INT 0
57044: PPUSH
// if not unit then
57045: LD_VAR 0 1
57049: NOT
57050: IFFALSE 57054
// exit ;
57052: GO 57077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57054: LD_ADDR_VAR 0 2
57058: PUSH
57059: LD_VAR 0 1
57063: PPUSH
57064: CALL_OW 254
57068: PUSH
57069: LD_INT 3
57071: PLUS
57072: PUSH
57073: LD_INT 6
57075: MOD
57076: ST_TO_ADDR
// end ;
57077: LD_VAR 0 2
57081: RET
// export function ReverseArray ( array ) ; var i ; begin
57082: LD_INT 0
57084: PPUSH
57085: PPUSH
// if not array then
57086: LD_VAR 0 1
57090: NOT
57091: IFFALSE 57095
// exit ;
57093: GO 57150
// result := [ ] ;
57095: LD_ADDR_VAR 0 2
57099: PUSH
57100: EMPTY
57101: ST_TO_ADDR
// for i := array downto 1 do
57102: LD_ADDR_VAR 0 3
57106: PUSH
57107: DOUBLE
57108: LD_VAR 0 1
57112: INC
57113: ST_TO_ADDR
57114: LD_INT 1
57116: PUSH
57117: FOR_DOWNTO
57118: IFFALSE 57148
// result := Join ( result , array [ i ] ) ;
57120: LD_ADDR_VAR 0 2
57124: PUSH
57125: LD_VAR 0 2
57129: PPUSH
57130: LD_VAR 0 1
57134: PUSH
57135: LD_VAR 0 3
57139: ARRAY
57140: PPUSH
57141: CALL 61992 0 2
57145: ST_TO_ADDR
57146: GO 57117
57148: POP
57149: POP
// end ;
57150: LD_VAR 0 2
57154: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57155: LD_INT 0
57157: PPUSH
57158: PPUSH
57159: PPUSH
57160: PPUSH
57161: PPUSH
57162: PPUSH
// if not unit or not hexes then
57163: LD_VAR 0 1
57167: NOT
57168: IFTRUE 57177
57170: PUSH
57171: LD_VAR 0 2
57175: NOT
57176: OR
57177: IFFALSE 57181
// exit ;
57179: GO 57304
// dist := 9999 ;
57181: LD_ADDR_VAR 0 5
57185: PUSH
57186: LD_INT 9999
57188: ST_TO_ADDR
// for i = 1 to hexes do
57189: LD_ADDR_VAR 0 4
57193: PUSH
57194: DOUBLE
57195: LD_INT 1
57197: DEC
57198: ST_TO_ADDR
57199: LD_VAR 0 2
57203: PUSH
57204: FOR_TO
57205: IFFALSE 57292
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57207: LD_ADDR_VAR 0 6
57211: PUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: LD_VAR 0 2
57221: PUSH
57222: LD_VAR 0 4
57226: ARRAY
57227: PUSH
57228: LD_INT 1
57230: ARRAY
57231: PPUSH
57232: LD_VAR 0 2
57236: PUSH
57237: LD_VAR 0 4
57241: ARRAY
57242: PUSH
57243: LD_INT 2
57245: ARRAY
57246: PPUSH
57247: CALL_OW 297
57251: ST_TO_ADDR
// if tdist < dist then
57252: LD_VAR 0 6
57256: PUSH
57257: LD_VAR 0 5
57261: LESS
57262: IFFALSE 57290
// begin hex := hexes [ i ] ;
57264: LD_ADDR_VAR 0 8
57268: PUSH
57269: LD_VAR 0 2
57273: PUSH
57274: LD_VAR 0 4
57278: ARRAY
57279: ST_TO_ADDR
// dist := tdist ;
57280: LD_ADDR_VAR 0 5
57284: PUSH
57285: LD_VAR 0 6
57289: ST_TO_ADDR
// end ; end ;
57290: GO 57204
57292: POP
57293: POP
// result := hex ;
57294: LD_ADDR_VAR 0 3
57298: PUSH
57299: LD_VAR 0 8
57303: ST_TO_ADDR
// end ;
57304: LD_VAR 0 3
57308: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57309: LD_INT 0
57311: PPUSH
57312: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57313: LD_VAR 0 1
57317: NOT
57318: IFTRUE 57357
57320: PUSH
57321: LD_VAR 0 1
57325: PUSH
57326: LD_INT 21
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 23
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PPUSH
57350: CALL_OW 69
57354: IN
57355: NOT
57356: OR
57357: IFFALSE 57361
// exit ;
57359: GO 57408
// for i = 1 to 3 do
57361: LD_ADDR_VAR 0 3
57365: PUSH
57366: DOUBLE
57367: LD_INT 1
57369: DEC
57370: ST_TO_ADDR
57371: LD_INT 3
57373: PUSH
57374: FOR_TO
57375: IFFALSE 57406
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57377: LD_VAR 0 1
57381: PPUSH
57382: CALL_OW 250
57386: PPUSH
57387: LD_VAR 0 1
57391: PPUSH
57392: CALL_OW 251
57396: PPUSH
57397: LD_INT 1
57399: PPUSH
57400: CALL_OW 453
57404: GO 57374
57406: POP
57407: POP
// end ;
57408: LD_VAR 0 2
57412: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57413: LD_INT 0
57415: PPUSH
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
// if not unit or not enemy_unit then
57421: LD_VAR 0 1
57425: NOT
57426: IFTRUE 57435
57428: PUSH
57429: LD_VAR 0 2
57433: NOT
57434: OR
57435: IFFALSE 57439
// exit ;
57437: GO 57910
// if GetLives ( i ) < 250 then
57439: LD_VAR 0 4
57443: PPUSH
57444: CALL_OW 256
57448: PUSH
57449: LD_INT 250
57451: LESS
57452: IFFALSE 57465
// begin ComAutodestruct ( i ) ;
57454: LD_VAR 0 4
57458: PPUSH
57459: CALL 57309 0 1
// exit ;
57463: GO 57910
// end ; x := GetX ( enemy_unit ) ;
57465: LD_ADDR_VAR 0 7
57469: PUSH
57470: LD_VAR 0 2
57474: PPUSH
57475: CALL_OW 250
57479: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57480: LD_ADDR_VAR 0 8
57484: PUSH
57485: LD_VAR 0 2
57489: PPUSH
57490: CALL_OW 251
57494: ST_TO_ADDR
// if not x or not y then
57495: LD_VAR 0 7
57499: NOT
57500: IFTRUE 57509
57502: PUSH
57503: LD_VAR 0 8
57507: NOT
57508: OR
57509: IFFALSE 57513
// exit ;
57511: GO 57910
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57513: LD_ADDR_VAR 0 6
57517: PUSH
57518: LD_VAR 0 7
57522: PPUSH
57523: LD_INT 0
57525: PPUSH
57526: LD_INT 4
57528: PPUSH
57529: CALL_OW 272
57533: PUSH
57534: LD_VAR 0 8
57538: PPUSH
57539: LD_INT 0
57541: PPUSH
57542: LD_INT 4
57544: PPUSH
57545: CALL_OW 273
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_VAR 0 7
57558: PPUSH
57559: LD_INT 1
57561: PPUSH
57562: LD_INT 4
57564: PPUSH
57565: CALL_OW 272
57569: PUSH
57570: LD_VAR 0 8
57574: PPUSH
57575: LD_INT 1
57577: PPUSH
57578: LD_INT 4
57580: PPUSH
57581: CALL_OW 273
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_VAR 0 7
57594: PPUSH
57595: LD_INT 2
57597: PPUSH
57598: LD_INT 4
57600: PPUSH
57601: CALL_OW 272
57605: PUSH
57606: LD_VAR 0 8
57610: PPUSH
57611: LD_INT 2
57613: PPUSH
57614: LD_INT 4
57616: PPUSH
57617: CALL_OW 273
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_VAR 0 7
57630: PPUSH
57631: LD_INT 3
57633: PPUSH
57634: LD_INT 4
57636: PPUSH
57637: CALL_OW 272
57641: PUSH
57642: LD_VAR 0 8
57646: PPUSH
57647: LD_INT 3
57649: PPUSH
57650: LD_INT 4
57652: PPUSH
57653: CALL_OW 273
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_VAR 0 7
57666: PPUSH
57667: LD_INT 4
57669: PPUSH
57670: LD_INT 4
57672: PPUSH
57673: CALL_OW 272
57677: PUSH
57678: LD_VAR 0 8
57682: PPUSH
57683: LD_INT 4
57685: PPUSH
57686: LD_INT 4
57688: PPUSH
57689: CALL_OW 273
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_VAR 0 7
57702: PPUSH
57703: LD_INT 5
57705: PPUSH
57706: LD_INT 4
57708: PPUSH
57709: CALL_OW 272
57713: PUSH
57714: LD_VAR 0 8
57718: PPUSH
57719: LD_INT 5
57721: PPUSH
57722: LD_INT 4
57724: PPUSH
57725: CALL_OW 273
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: ST_TO_ADDR
// for i = tmp downto 1 do
57742: LD_ADDR_VAR 0 4
57746: PUSH
57747: DOUBLE
57748: LD_VAR 0 6
57752: INC
57753: ST_TO_ADDR
57754: LD_INT 1
57756: PUSH
57757: FOR_DOWNTO
57758: IFFALSE 57861
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57760: LD_VAR 0 6
57764: PUSH
57765: LD_VAR 0 4
57769: ARRAY
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PPUSH
57775: LD_VAR 0 6
57779: PUSH
57780: LD_VAR 0 4
57784: ARRAY
57785: PUSH
57786: LD_INT 2
57788: ARRAY
57789: PPUSH
57790: CALL_OW 488
57794: NOT
57795: IFTRUE 57837
57797: PUSH
57798: LD_VAR 0 6
57802: PUSH
57803: LD_VAR 0 4
57807: ARRAY
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: PPUSH
57813: LD_VAR 0 6
57817: PUSH
57818: LD_VAR 0 4
57822: ARRAY
57823: PUSH
57824: LD_INT 2
57826: ARRAY
57827: PPUSH
57828: CALL_OW 428
57832: PUSH
57833: LD_INT 0
57835: NONEQUAL
57836: OR
57837: IFFALSE 57859
// tmp := Delete ( tmp , i ) ;
57839: LD_ADDR_VAR 0 6
57843: PUSH
57844: LD_VAR 0 6
57848: PPUSH
57849: LD_VAR 0 4
57853: PPUSH
57854: CALL_OW 3
57858: ST_TO_ADDR
57859: GO 57757
57861: POP
57862: POP
// j := GetClosestHex ( unit , tmp ) ;
57863: LD_ADDR_VAR 0 5
57867: PUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: LD_VAR 0 6
57877: PPUSH
57878: CALL 57155 0 2
57882: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57883: LD_VAR 0 1
57887: PPUSH
57888: LD_VAR 0 5
57892: PUSH
57893: LD_INT 1
57895: ARRAY
57896: PPUSH
57897: LD_VAR 0 5
57901: PUSH
57902: LD_INT 2
57904: ARRAY
57905: PPUSH
57906: CALL_OW 111
// end ;
57910: LD_VAR 0 3
57914: RET
// export function PrepareApemanSoldier ( ) ; begin
57915: LD_INT 0
57917: PPUSH
// uc_nation := 0 ;
57918: LD_ADDR_OWVAR 21
57922: PUSH
57923: LD_INT 0
57925: ST_TO_ADDR
// hc_sex := sex_male ;
57926: LD_ADDR_OWVAR 27
57930: PUSH
57931: LD_INT 1
57933: ST_TO_ADDR
// hc_name :=  ;
57934: LD_ADDR_OWVAR 26
57938: PUSH
57939: LD_STRING 
57941: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57942: LD_ADDR_OWVAR 28
57946: PUSH
57947: LD_INT 15
57949: ST_TO_ADDR
// hc_gallery :=  ;
57950: LD_ADDR_OWVAR 33
57954: PUSH
57955: LD_STRING 
57957: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57958: LD_ADDR_OWVAR 31
57962: PUSH
57963: LD_INT 0
57965: PPUSH
57966: LD_INT 3
57968: PPUSH
57969: CALL_OW 12
57973: PUSH
57974: LD_INT 0
57976: PPUSH
57977: LD_INT 3
57979: PPUSH
57980: CALL_OW 12
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57997: LD_ADDR_OWVAR 29
58001: PUSH
58002: LD_INT 12
58004: PUSH
58005: LD_INT 12
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: ST_TO_ADDR
// end ;
58012: LD_VAR 0 1
58016: RET
// export function PrepareApemanEngineer ( ) ; begin
58017: LD_INT 0
58019: PPUSH
// uc_nation := 0 ;
58020: LD_ADDR_OWVAR 21
58024: PUSH
58025: LD_INT 0
58027: ST_TO_ADDR
// hc_sex := sex_male ;
58028: LD_ADDR_OWVAR 27
58032: PUSH
58033: LD_INT 1
58035: ST_TO_ADDR
// hc_name :=  ;
58036: LD_ADDR_OWVAR 26
58040: PUSH
58041: LD_STRING 
58043: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58044: LD_ADDR_OWVAR 28
58048: PUSH
58049: LD_INT 16
58051: ST_TO_ADDR
// hc_gallery :=  ;
58052: LD_ADDR_OWVAR 33
58056: PUSH
58057: LD_STRING 
58059: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58060: LD_ADDR_OWVAR 31
58064: PUSH
58065: LD_INT 0
58067: PPUSH
58068: LD_INT 3
58070: PPUSH
58071: CALL_OW 12
58075: PUSH
58076: LD_INT 0
58078: PPUSH
58079: LD_INT 3
58081: PPUSH
58082: CALL_OW 12
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58099: LD_ADDR_OWVAR 29
58103: PUSH
58104: LD_INT 12
58106: PUSH
58107: LD_INT 12
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: ST_TO_ADDR
// end ;
58114: LD_VAR 0 1
58118: RET
// export function PrepareApeman ( agressivity ) ; begin
58119: LD_INT 0
58121: PPUSH
// uc_side := 0 ;
58122: LD_ADDR_OWVAR 20
58126: PUSH
58127: LD_INT 0
58129: ST_TO_ADDR
// uc_nation := 0 ;
58130: LD_ADDR_OWVAR 21
58134: PUSH
58135: LD_INT 0
58137: ST_TO_ADDR
// hc_sex := sex_male ;
58138: LD_ADDR_OWVAR 27
58142: PUSH
58143: LD_INT 1
58145: ST_TO_ADDR
// hc_class := class_apeman ;
58146: LD_ADDR_OWVAR 28
58150: PUSH
58151: LD_INT 12
58153: ST_TO_ADDR
// hc_gallery :=  ;
58154: LD_ADDR_OWVAR 33
58158: PUSH
58159: LD_STRING 
58161: ST_TO_ADDR
// hc_name :=  ;
58162: LD_ADDR_OWVAR 26
58166: PUSH
58167: LD_STRING 
58169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58170: LD_ADDR_OWVAR 29
58174: PUSH
58175: LD_INT 12
58177: PUSH
58178: LD_INT 12
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// if agressivity = 0 then
58185: LD_VAR 0 1
58189: PUSH
58190: LD_INT 0
58192: EQUAL
58193: IFFALSE 58205
// hc_agressivity := 0 else
58195: LD_ADDR_OWVAR 35
58199: PUSH
58200: LD_INT 0
58202: ST_TO_ADDR
58203: GO 58226
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58205: LD_ADDR_OWVAR 35
58209: PUSH
58210: LD_VAR 0 1
58214: NEG
58215: PPUSH
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL_OW 12
58225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58226: LD_ADDR_OWVAR 31
58230: PUSH
58231: LD_INT 0
58233: PPUSH
58234: LD_INT 3
58236: PPUSH
58237: CALL_OW 12
58241: PUSH
58242: LD_INT 0
58244: PPUSH
58245: LD_INT 3
58247: PPUSH
58248: CALL_OW 12
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// end ;
58265: LD_VAR 0 2
58269: RET
// export function PrepareTiger ( agressivity ) ; begin
58270: LD_INT 0
58272: PPUSH
// uc_side := 0 ;
58273: LD_ADDR_OWVAR 20
58277: PUSH
58278: LD_INT 0
58280: ST_TO_ADDR
// uc_nation := 0 ;
58281: LD_ADDR_OWVAR 21
58285: PUSH
58286: LD_INT 0
58288: ST_TO_ADDR
// InitHc ;
58289: CALL_OW 19
// hc_class := class_tiger ;
58293: LD_ADDR_OWVAR 28
58297: PUSH
58298: LD_INT 14
58300: ST_TO_ADDR
// hc_gallery :=  ;
58301: LD_ADDR_OWVAR 33
58305: PUSH
58306: LD_STRING 
58308: ST_TO_ADDR
// hc_name :=  ;
58309: LD_ADDR_OWVAR 26
58313: PUSH
58314: LD_STRING 
58316: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58317: LD_ADDR_OWVAR 35
58321: PUSH
58322: LD_VAR 0 1
58326: NEG
58327: PPUSH
58328: LD_VAR 0 1
58332: PPUSH
58333: CALL_OW 12
58337: ST_TO_ADDR
// end ;
58338: LD_VAR 0 2
58342: RET
// export function PrepareEnchidna ( ) ; begin
58343: LD_INT 0
58345: PPUSH
// uc_side := 0 ;
58346: LD_ADDR_OWVAR 20
58350: PUSH
58351: LD_INT 0
58353: ST_TO_ADDR
// uc_nation := 0 ;
58354: LD_ADDR_OWVAR 21
58358: PUSH
58359: LD_INT 0
58361: ST_TO_ADDR
// InitHc ;
58362: CALL_OW 19
// hc_class := class_baggie ;
58366: LD_ADDR_OWVAR 28
58370: PUSH
58371: LD_INT 13
58373: ST_TO_ADDR
// hc_gallery :=  ;
58374: LD_ADDR_OWVAR 33
58378: PUSH
58379: LD_STRING 
58381: ST_TO_ADDR
// hc_name :=  ;
58382: LD_ADDR_OWVAR 26
58386: PUSH
58387: LD_STRING 
58389: ST_TO_ADDR
// end ;
58390: LD_VAR 0 1
58394: RET
// export function PrepareFrog ( ) ; begin
58395: LD_INT 0
58397: PPUSH
// uc_side := 0 ;
58398: LD_ADDR_OWVAR 20
58402: PUSH
58403: LD_INT 0
58405: ST_TO_ADDR
// uc_nation := 0 ;
58406: LD_ADDR_OWVAR 21
58410: PUSH
58411: LD_INT 0
58413: ST_TO_ADDR
// InitHc ;
58414: CALL_OW 19
// hc_class := class_frog ;
58418: LD_ADDR_OWVAR 28
58422: PUSH
58423: LD_INT 19
58425: ST_TO_ADDR
// hc_gallery :=  ;
58426: LD_ADDR_OWVAR 33
58430: PUSH
58431: LD_STRING 
58433: ST_TO_ADDR
// hc_name :=  ;
58434: LD_ADDR_OWVAR 26
58438: PUSH
58439: LD_STRING 
58441: ST_TO_ADDR
// end ;
58442: LD_VAR 0 1
58446: RET
// export function PrepareFish ( ) ; begin
58447: LD_INT 0
58449: PPUSH
// uc_side := 0 ;
58450: LD_ADDR_OWVAR 20
58454: PUSH
58455: LD_INT 0
58457: ST_TO_ADDR
// uc_nation := 0 ;
58458: LD_ADDR_OWVAR 21
58462: PUSH
58463: LD_INT 0
58465: ST_TO_ADDR
// InitHc ;
58466: CALL_OW 19
// hc_class := class_fish ;
58470: LD_ADDR_OWVAR 28
58474: PUSH
58475: LD_INT 20
58477: ST_TO_ADDR
// hc_gallery :=  ;
58478: LD_ADDR_OWVAR 33
58482: PUSH
58483: LD_STRING 
58485: ST_TO_ADDR
// hc_name :=  ;
58486: LD_ADDR_OWVAR 26
58490: PUSH
58491: LD_STRING 
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 1
58498: RET
// export function PrepareBird ( ) ; begin
58499: LD_INT 0
58501: PPUSH
// uc_side := 0 ;
58502: LD_ADDR_OWVAR 20
58506: PUSH
58507: LD_INT 0
58509: ST_TO_ADDR
// uc_nation := 0 ;
58510: LD_ADDR_OWVAR 21
58514: PUSH
58515: LD_INT 0
58517: ST_TO_ADDR
// InitHc ;
58518: CALL_OW 19
// hc_class := class_phororhacos ;
58522: LD_ADDR_OWVAR 28
58526: PUSH
58527: LD_INT 18
58529: ST_TO_ADDR
// hc_gallery :=  ;
58530: LD_ADDR_OWVAR 33
58534: PUSH
58535: LD_STRING 
58537: ST_TO_ADDR
// hc_name :=  ;
58538: LD_ADDR_OWVAR 26
58542: PUSH
58543: LD_STRING 
58545: ST_TO_ADDR
// end ;
58546: LD_VAR 0 1
58550: RET
// export function PrepareHorse ( ) ; begin
58551: LD_INT 0
58553: PPUSH
// uc_side := 0 ;
58554: LD_ADDR_OWVAR 20
58558: PUSH
58559: LD_INT 0
58561: ST_TO_ADDR
// uc_nation := 0 ;
58562: LD_ADDR_OWVAR 21
58566: PUSH
58567: LD_INT 0
58569: ST_TO_ADDR
// InitHc ;
58570: CALL_OW 19
// hc_class := class_horse ;
58574: LD_ADDR_OWVAR 28
58578: PUSH
58579: LD_INT 21
58581: ST_TO_ADDR
// hc_gallery :=  ;
58582: LD_ADDR_OWVAR 33
58586: PUSH
58587: LD_STRING 
58589: ST_TO_ADDR
// hc_name :=  ;
58590: LD_ADDR_OWVAR 26
58594: PUSH
58595: LD_STRING 
58597: ST_TO_ADDR
// end ;
58598: LD_VAR 0 1
58602: RET
// export function PrepareMastodont ( ) ; begin
58603: LD_INT 0
58605: PPUSH
// uc_side := 0 ;
58606: LD_ADDR_OWVAR 20
58610: PUSH
58611: LD_INT 0
58613: ST_TO_ADDR
// uc_nation := 0 ;
58614: LD_ADDR_OWVAR 21
58618: PUSH
58619: LD_INT 0
58621: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58622: LD_ADDR_OWVAR 37
58626: PUSH
58627: LD_INT 31
58629: ST_TO_ADDR
// vc_control := control_rider ;
58630: LD_ADDR_OWVAR 38
58634: PUSH
58635: LD_INT 4
58637: ST_TO_ADDR
// end ;
58638: LD_VAR 0 1
58642: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58643: LD_INT 0
58645: PPUSH
58646: PPUSH
58647: PPUSH
// uc_side = 0 ;
58648: LD_ADDR_OWVAR 20
58652: PUSH
58653: LD_INT 0
58655: ST_TO_ADDR
// uc_nation = 0 ;
58656: LD_ADDR_OWVAR 21
58660: PUSH
58661: LD_INT 0
58663: ST_TO_ADDR
// InitHc_All ( ) ;
58664: CALL_OW 584
// InitVc ;
58668: CALL_OW 20
// if mastodonts then
58672: LD_VAR 0 6
58676: IFFALSE 58743
// for i = 1 to mastodonts do
58678: LD_ADDR_VAR 0 11
58682: PUSH
58683: DOUBLE
58684: LD_INT 1
58686: DEC
58687: ST_TO_ADDR
58688: LD_VAR 0 6
58692: PUSH
58693: FOR_TO
58694: IFFALSE 58741
// begin vc_chassis := 31 ;
58696: LD_ADDR_OWVAR 37
58700: PUSH
58701: LD_INT 31
58703: ST_TO_ADDR
// vc_control := control_rider ;
58704: LD_ADDR_OWVAR 38
58708: PUSH
58709: LD_INT 4
58711: ST_TO_ADDR
// animal := CreateVehicle ;
58712: LD_ADDR_VAR 0 12
58716: PUSH
58717: CALL_OW 45
58721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58722: LD_VAR 0 12
58726: PPUSH
58727: LD_VAR 0 8
58731: PPUSH
58732: LD_INT 0
58734: PPUSH
58735: CALL 60885 0 3
// end ;
58739: GO 58693
58741: POP
58742: POP
// if horses then
58743: LD_VAR 0 5
58747: IFFALSE 58814
// for i = 1 to horses do
58749: LD_ADDR_VAR 0 11
58753: PUSH
58754: DOUBLE
58755: LD_INT 1
58757: DEC
58758: ST_TO_ADDR
58759: LD_VAR 0 5
58763: PUSH
58764: FOR_TO
58765: IFFALSE 58812
// begin hc_class := 21 ;
58767: LD_ADDR_OWVAR 28
58771: PUSH
58772: LD_INT 21
58774: ST_TO_ADDR
// hc_gallery :=  ;
58775: LD_ADDR_OWVAR 33
58779: PUSH
58780: LD_STRING 
58782: ST_TO_ADDR
// animal := CreateHuman ;
58783: LD_ADDR_VAR 0 12
58787: PUSH
58788: CALL_OW 44
58792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58793: LD_VAR 0 12
58797: PPUSH
58798: LD_VAR 0 8
58802: PPUSH
58803: LD_INT 0
58805: PPUSH
58806: CALL 60885 0 3
// end ;
58810: GO 58764
58812: POP
58813: POP
// if birds then
58814: LD_VAR 0 1
58818: IFFALSE 58885
// for i = 1 to birds do
58820: LD_ADDR_VAR 0 11
58824: PUSH
58825: DOUBLE
58826: LD_INT 1
58828: DEC
58829: ST_TO_ADDR
58830: LD_VAR 0 1
58834: PUSH
58835: FOR_TO
58836: IFFALSE 58883
// begin hc_class := 18 ;
58838: LD_ADDR_OWVAR 28
58842: PUSH
58843: LD_INT 18
58845: ST_TO_ADDR
// hc_gallery =  ;
58846: LD_ADDR_OWVAR 33
58850: PUSH
58851: LD_STRING 
58853: ST_TO_ADDR
// animal := CreateHuman ;
58854: LD_ADDR_VAR 0 12
58858: PUSH
58859: CALL_OW 44
58863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58864: LD_VAR 0 12
58868: PPUSH
58869: LD_VAR 0 8
58873: PPUSH
58874: LD_INT 0
58876: PPUSH
58877: CALL 60885 0 3
// end ;
58881: GO 58835
58883: POP
58884: POP
// if tigers then
58885: LD_VAR 0 2
58889: IFFALSE 58973
// for i = 1 to tigers do
58891: LD_ADDR_VAR 0 11
58895: PUSH
58896: DOUBLE
58897: LD_INT 1
58899: DEC
58900: ST_TO_ADDR
58901: LD_VAR 0 2
58905: PUSH
58906: FOR_TO
58907: IFFALSE 58971
// begin hc_class = class_tiger ;
58909: LD_ADDR_OWVAR 28
58913: PUSH
58914: LD_INT 14
58916: ST_TO_ADDR
// hc_gallery =  ;
58917: LD_ADDR_OWVAR 33
58921: PUSH
58922: LD_STRING 
58924: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58925: LD_ADDR_OWVAR 35
58929: PUSH
58930: LD_INT 7
58932: NEG
58933: PPUSH
58934: LD_INT 7
58936: PPUSH
58937: CALL_OW 12
58941: ST_TO_ADDR
// animal := CreateHuman ;
58942: LD_ADDR_VAR 0 12
58946: PUSH
58947: CALL_OW 44
58951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58952: LD_VAR 0 12
58956: PPUSH
58957: LD_VAR 0 8
58961: PPUSH
58962: LD_INT 0
58964: PPUSH
58965: CALL 60885 0 3
// end ;
58969: GO 58906
58971: POP
58972: POP
// if apemans then
58973: LD_VAR 0 3
58977: IFFALSE 59100
// for i = 1 to apemans do
58979: LD_ADDR_VAR 0 11
58983: PUSH
58984: DOUBLE
58985: LD_INT 1
58987: DEC
58988: ST_TO_ADDR
58989: LD_VAR 0 3
58993: PUSH
58994: FOR_TO
58995: IFFALSE 59098
// begin hc_class = class_apeman ;
58997: LD_ADDR_OWVAR 28
59001: PUSH
59002: LD_INT 12
59004: ST_TO_ADDR
// hc_gallery =  ;
59005: LD_ADDR_OWVAR 33
59009: PUSH
59010: LD_STRING 
59012: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59013: LD_ADDR_OWVAR 35
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PPUSH
59022: LD_INT 2
59024: PPUSH
59025: CALL_OW 12
59029: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59030: LD_ADDR_OWVAR 31
59034: PUSH
59035: LD_INT 1
59037: PPUSH
59038: LD_INT 3
59040: PPUSH
59041: CALL_OW 12
59045: PUSH
59046: LD_INT 1
59048: PPUSH
59049: LD_INT 3
59051: PPUSH
59052: CALL_OW 12
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// animal := CreateHuman ;
59069: LD_ADDR_VAR 0 12
59073: PUSH
59074: CALL_OW 44
59078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59079: LD_VAR 0 12
59083: PPUSH
59084: LD_VAR 0 8
59088: PPUSH
59089: LD_INT 0
59091: PPUSH
59092: CALL 60885 0 3
// end ;
59096: GO 58994
59098: POP
59099: POP
// if enchidnas then
59100: LD_VAR 0 4
59104: IFFALSE 59171
// for i = 1 to enchidnas do
59106: LD_ADDR_VAR 0 11
59110: PUSH
59111: DOUBLE
59112: LD_INT 1
59114: DEC
59115: ST_TO_ADDR
59116: LD_VAR 0 4
59120: PUSH
59121: FOR_TO
59122: IFFALSE 59169
// begin hc_class = 13 ;
59124: LD_ADDR_OWVAR 28
59128: PUSH
59129: LD_INT 13
59131: ST_TO_ADDR
// hc_gallery =  ;
59132: LD_ADDR_OWVAR 33
59136: PUSH
59137: LD_STRING 
59139: ST_TO_ADDR
// animal := CreateHuman ;
59140: LD_ADDR_VAR 0 12
59144: PUSH
59145: CALL_OW 44
59149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59150: LD_VAR 0 12
59154: PPUSH
59155: LD_VAR 0 8
59159: PPUSH
59160: LD_INT 0
59162: PPUSH
59163: CALL 60885 0 3
// end ;
59167: GO 59121
59169: POP
59170: POP
// if fishes then
59171: LD_VAR 0 7
59175: IFFALSE 59242
// for i = 1 to fishes do
59177: LD_ADDR_VAR 0 11
59181: PUSH
59182: DOUBLE
59183: LD_INT 1
59185: DEC
59186: ST_TO_ADDR
59187: LD_VAR 0 7
59191: PUSH
59192: FOR_TO
59193: IFFALSE 59240
// begin hc_class = 20 ;
59195: LD_ADDR_OWVAR 28
59199: PUSH
59200: LD_INT 20
59202: ST_TO_ADDR
// hc_gallery =  ;
59203: LD_ADDR_OWVAR 33
59207: PUSH
59208: LD_STRING 
59210: ST_TO_ADDR
// animal := CreateHuman ;
59211: LD_ADDR_VAR 0 12
59215: PUSH
59216: CALL_OW 44
59220: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59221: LD_VAR 0 12
59225: PPUSH
59226: LD_VAR 0 9
59230: PPUSH
59231: LD_INT 0
59233: PPUSH
59234: CALL 60885 0 3
// end ;
59238: GO 59192
59240: POP
59241: POP
// end ;
59242: LD_VAR 0 10
59246: RET
// export function WantHeal ( sci , unit ) ; begin
59247: LD_INT 0
59249: PPUSH
// if GetTaskList ( sci ) > 0 then
59250: LD_VAR 0 1
59254: PPUSH
59255: CALL_OW 437
59259: PUSH
59260: LD_INT 0
59262: GREATER
59263: IFFALSE 59335
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59265: LD_VAR 0 1
59269: PPUSH
59270: CALL_OW 437
59274: PUSH
59275: LD_INT 1
59277: ARRAY
59278: PUSH
59279: LD_INT 1
59281: ARRAY
59282: PUSH
59283: LD_STRING l
59285: EQUAL
59286: IFFALSE 59313
59288: PUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: CALL_OW 437
59298: PUSH
59299: LD_INT 1
59301: ARRAY
59302: PUSH
59303: LD_INT 4
59305: ARRAY
59306: PUSH
59307: LD_VAR 0 2
59311: EQUAL
59312: AND
59313: IFFALSE 59325
// result := true else
59315: LD_ADDR_VAR 0 3
59319: PUSH
59320: LD_INT 1
59322: ST_TO_ADDR
59323: GO 59333
// result := false ;
59325: LD_ADDR_VAR 0 3
59329: PUSH
59330: LD_INT 0
59332: ST_TO_ADDR
// end else
59333: GO 59343
// result := false ;
59335: LD_ADDR_VAR 0 3
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// end ;
59343: LD_VAR 0 3
59347: RET
// export function HealTarget ( sci ) ; begin
59348: LD_INT 0
59350: PPUSH
// if not sci then
59351: LD_VAR 0 1
59355: NOT
59356: IFFALSE 59360
// exit ;
59358: GO 59425
// result := 0 ;
59360: LD_ADDR_VAR 0 2
59364: PUSH
59365: LD_INT 0
59367: ST_TO_ADDR
// if GetTaskList ( sci ) then
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 437
59377: IFFALSE 59425
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59379: LD_VAR 0 1
59383: PPUSH
59384: CALL_OW 437
59388: PUSH
59389: LD_INT 1
59391: ARRAY
59392: PUSH
59393: LD_INT 1
59395: ARRAY
59396: PUSH
59397: LD_STRING l
59399: EQUAL
59400: IFFALSE 59425
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59402: LD_ADDR_VAR 0 2
59406: PUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 437
59416: PUSH
59417: LD_INT 1
59419: ARRAY
59420: PUSH
59421: LD_INT 4
59423: ARRAY
59424: ST_TO_ADDR
// end ;
59425: LD_VAR 0 2
59429: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59430: LD_INT 0
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
// if not base_units then
59436: LD_VAR 0 1
59440: NOT
59441: IFFALSE 59445
// exit ;
59443: GO 59532
// result := false ;
59445: LD_ADDR_VAR 0 2
59449: PUSH
59450: LD_INT 0
59452: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59453: LD_ADDR_VAR 0 5
59457: PUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: LD_INT 21
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PPUSH
59473: CALL_OW 72
59477: ST_TO_ADDR
// if not tmp then
59478: LD_VAR 0 5
59482: NOT
59483: IFFALSE 59487
// exit ;
59485: GO 59532
// for i in tmp do
59487: LD_ADDR_VAR 0 3
59491: PUSH
59492: LD_VAR 0 5
59496: PUSH
59497: FOR_IN
59498: IFFALSE 59530
// begin result := EnemyInRange ( i , 22 ) ;
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: LD_VAR 0 3
59509: PPUSH
59510: LD_INT 22
59512: PPUSH
59513: CALL 56957 0 2
59517: ST_TO_ADDR
// if result then
59518: LD_VAR 0 2
59522: IFFALSE 59528
// exit ;
59524: POP
59525: POP
59526: GO 59532
// end ;
59528: GO 59497
59530: POP
59531: POP
// end ;
59532: LD_VAR 0 2
59536: RET
// export function FilterByTag ( units , tag ) ; begin
59537: LD_INT 0
59539: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59540: LD_ADDR_VAR 0 3
59544: PUSH
59545: LD_VAR 0 1
59549: PPUSH
59550: LD_INT 120
59552: PUSH
59553: LD_VAR 0 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PPUSH
59562: CALL_OW 72
59566: ST_TO_ADDR
// end ;
59567: LD_VAR 0 3
59571: RET
// export function IsDriver ( un ) ; begin
59572: LD_INT 0
59574: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59575: LD_ADDR_VAR 0 2
59579: PUSH
59580: LD_VAR 0 1
59584: PUSH
59585: LD_INT 55
59587: PUSH
59588: EMPTY
59589: LIST
59590: PPUSH
59591: CALL_OW 69
59595: IN
59596: ST_TO_ADDR
// end ;
59597: LD_VAR 0 2
59601: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59602: LD_INT 0
59604: PPUSH
59605: PPUSH
// list := [ ] ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: EMPTY
59612: ST_TO_ADDR
// case d of 0 :
59613: LD_VAR 0 3
59617: PUSH
59618: LD_INT 0
59620: DOUBLE
59621: EQUAL
59622: IFTRUE 59626
59624: GO 59759
59626: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59627: LD_ADDR_VAR 0 5
59631: PUSH
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 4
59639: MINUS
59640: PUSH
59641: LD_VAR 0 2
59645: PUSH
59646: LD_INT 4
59648: MINUS
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: LIST
59657: PUSH
59658: LD_VAR 0 1
59662: PUSH
59663: LD_INT 3
59665: MINUS
59666: PUSH
59667: LD_VAR 0 2
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: PUSH
59680: LD_VAR 0 1
59684: PUSH
59685: LD_INT 4
59687: PLUS
59688: PUSH
59689: LD_VAR 0 2
59693: PUSH
59694: LD_INT 4
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: LD_VAR 0 1
59706: PUSH
59707: LD_INT 3
59709: PLUS
59710: PUSH
59711: LD_VAR 0 2
59715: PUSH
59716: LD_INT 3
59718: PLUS
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: PUSH
59728: LD_VAR 0 1
59732: PUSH
59733: LD_VAR 0 2
59737: PUSH
59738: LD_INT 4
59740: PLUS
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// end ; 1 :
59757: GO 60457
59759: LD_INT 1
59761: DOUBLE
59762: EQUAL
59763: IFTRUE 59767
59765: GO 59900
59767: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59768: LD_ADDR_VAR 0 5
59772: PUSH
59773: LD_VAR 0 1
59777: PUSH
59778: LD_VAR 0 2
59782: PUSH
59783: LD_INT 4
59785: MINUS
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: PUSH
59795: LD_VAR 0 1
59799: PUSH
59800: LD_INT 3
59802: MINUS
59803: PUSH
59804: LD_VAR 0 2
59808: PUSH
59809: LD_INT 3
59811: MINUS
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: PUSH
59821: LD_VAR 0 1
59825: PUSH
59826: LD_INT 4
59828: MINUS
59829: PUSH
59830: LD_VAR 0 2
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: LD_VAR 0 1
59847: PUSH
59848: LD_VAR 0 2
59852: PUSH
59853: LD_INT 3
59855: PLUS
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: LIST
59864: PUSH
59865: LD_VAR 0 1
59869: PUSH
59870: LD_INT 4
59872: PLUS
59873: PUSH
59874: LD_VAR 0 2
59878: PUSH
59879: LD_INT 4
59881: PLUS
59882: PUSH
59883: LD_INT 5
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// end ; 2 :
59898: GO 60457
59900: LD_INT 2
59902: DOUBLE
59903: EQUAL
59904: IFTRUE 59908
59906: GO 60037
59908: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59909: LD_ADDR_VAR 0 5
59913: PUSH
59914: LD_VAR 0 1
59918: PUSH
59919: LD_VAR 0 2
59923: PUSH
59924: LD_INT 3
59926: MINUS
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: PUSH
59936: LD_VAR 0 1
59940: PUSH
59941: LD_INT 4
59943: PLUS
59944: PUSH
59945: LD_VAR 0 2
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: PUSH
59958: LD_VAR 0 1
59962: PUSH
59963: LD_VAR 0 2
59967: PUSH
59968: LD_INT 4
59970: PLUS
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: PUSH
59980: LD_VAR 0 1
59984: PUSH
59985: LD_INT 3
59987: MINUS
59988: PUSH
59989: LD_VAR 0 2
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: PUSH
60002: LD_VAR 0 1
60006: PUSH
60007: LD_INT 4
60009: MINUS
60010: PUSH
60011: LD_VAR 0 2
60015: PUSH
60016: LD_INT 4
60018: MINUS
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// end ; 3 :
60035: GO 60457
60037: LD_INT 3
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60045
60043: GO 60178
60045: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60046: LD_ADDR_VAR 0 5
60050: PUSH
60051: LD_VAR 0 1
60055: PUSH
60056: LD_INT 3
60058: PLUS
60059: PUSH
60060: LD_VAR 0 2
60064: PUSH
60065: LD_INT 4
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: PUSH
60073: LD_VAR 0 1
60077: PUSH
60078: LD_INT 4
60080: PLUS
60081: PUSH
60082: LD_VAR 0 2
60086: PUSH
60087: LD_INT 4
60089: PLUS
60090: PUSH
60091: LD_INT 5
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: PUSH
60099: LD_VAR 0 1
60103: PUSH
60104: LD_INT 4
60106: MINUS
60107: PUSH
60108: LD_VAR 0 2
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: PUSH
60121: LD_VAR 0 1
60125: PUSH
60126: LD_VAR 0 2
60130: PUSH
60131: LD_INT 4
60133: MINUS
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: PUSH
60143: LD_VAR 0 1
60147: PUSH
60148: LD_INT 3
60150: MINUS
60151: PUSH
60152: LD_VAR 0 2
60156: PUSH
60157: LD_INT 3
60159: MINUS
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// end ; 4 :
60176: GO 60457
60178: LD_INT 4
60180: DOUBLE
60181: EQUAL
60182: IFTRUE 60186
60184: GO 60319
60186: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60187: LD_ADDR_VAR 0 5
60191: PUSH
60192: LD_VAR 0 1
60196: PUSH
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 4
60204: PLUS
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: PUSH
60214: LD_VAR 0 1
60218: PUSH
60219: LD_INT 3
60221: PLUS
60222: PUSH
60223: LD_VAR 0 2
60227: PUSH
60228: LD_INT 3
60230: PLUS
60231: PUSH
60232: LD_INT 5
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: LD_INT 4
60247: PLUS
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: LD_INT 4
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: PUSH
60262: LD_VAR 0 1
60266: PUSH
60267: LD_VAR 0 2
60271: PUSH
60272: LD_INT 3
60274: MINUS
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: PUSH
60284: LD_VAR 0 1
60288: PUSH
60289: LD_INT 4
60291: MINUS
60292: PUSH
60293: LD_VAR 0 2
60297: PUSH
60298: LD_INT 4
60300: MINUS
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// end ; 5 :
60317: GO 60457
60319: LD_INT 5
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60327
60325: GO 60456
60327: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60328: LD_ADDR_VAR 0 5
60332: PUSH
60333: LD_VAR 0 1
60337: PUSH
60338: LD_INT 4
60340: MINUS
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_VAR 0 1
60359: PUSH
60360: LD_VAR 0 2
60364: PUSH
60365: LD_INT 4
60367: MINUS
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: PUSH
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 4
60384: PLUS
60385: PUSH
60386: LD_VAR 0 2
60390: PUSH
60391: LD_INT 4
60393: PLUS
60394: PUSH
60395: LD_INT 5
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: PUSH
60403: LD_VAR 0 1
60407: PUSH
60408: LD_INT 3
60410: PLUS
60411: PUSH
60412: LD_VAR 0 2
60416: PUSH
60417: LD_INT 4
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: PUSH
60425: LD_VAR 0 1
60429: PUSH
60430: LD_VAR 0 2
60434: PUSH
60435: LD_INT 3
60437: PLUS
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: ST_TO_ADDR
// end ; end ;
60454: GO 60457
60456: POP
// result := list ;
60457: LD_ADDR_VAR 0 4
60461: PUSH
60462: LD_VAR 0 5
60466: ST_TO_ADDR
// end ;
60467: LD_VAR 0 4
60471: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60472: LD_INT 0
60474: PPUSH
60475: PPUSH
60476: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60477: LD_VAR 0 1
60481: NOT
60482: IFTRUE 60510
60484: PUSH
60485: LD_VAR 0 2
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 4
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: IN
60508: NOT
60509: OR
60510: IFFALSE 60514
// exit ;
60512: GO 60597
// tmp := [ ] ;
60514: LD_ADDR_VAR 0 5
60518: PUSH
60519: EMPTY
60520: ST_TO_ADDR
// for i in units do
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_VAR 0 1
60530: PUSH
60531: FOR_IN
60532: IFFALSE 60566
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60534: LD_ADDR_VAR 0 5
60538: PUSH
60539: LD_VAR 0 5
60543: PPUSH
60544: LD_VAR 0 4
60548: PPUSH
60549: LD_VAR 0 2
60553: PPUSH
60554: CALL_OW 259
60558: PPUSH
60559: CALL 61992 0 2
60563: ST_TO_ADDR
60564: GO 60531
60566: POP
60567: POP
// if not tmp then
60568: LD_VAR 0 5
60572: NOT
60573: IFFALSE 60577
// exit ;
60575: GO 60597
// result := SortListByListDesc ( units , tmp ) ;
60577: LD_ADDR_VAR 0 3
60581: PUSH
60582: LD_VAR 0 1
60586: PPUSH
60587: LD_VAR 0 5
60591: PPUSH
60592: CALL_OW 77
60596: ST_TO_ADDR
// end ;
60597: LD_VAR 0 3
60601: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60602: LD_INT 0
60604: PPUSH
60605: PPUSH
60606: PPUSH
// result := false ;
60607: LD_ADDR_VAR 0 3
60611: PUSH
60612: LD_INT 0
60614: ST_TO_ADDR
// if not building then
60615: LD_VAR 0 2
60619: NOT
60620: IFFALSE 60624
// exit ;
60622: GO 60768
// x := GetX ( building ) ;
60624: LD_ADDR_VAR 0 4
60628: PUSH
60629: LD_VAR 0 2
60633: PPUSH
60634: CALL_OW 250
60638: ST_TO_ADDR
// y := GetY ( building ) ;
60639: LD_ADDR_VAR 0 5
60643: PUSH
60644: LD_VAR 0 2
60648: PPUSH
60649: CALL_OW 251
60653: ST_TO_ADDR
// if not x or not y then
60654: LD_VAR 0 4
60658: NOT
60659: IFTRUE 60668
60661: PUSH
60662: LD_VAR 0 5
60666: NOT
60667: OR
60668: IFFALSE 60672
// exit ;
60670: GO 60768
// if GetTaskList ( unit ) then
60672: LD_VAR 0 1
60676: PPUSH
60677: CALL_OW 437
60681: IFFALSE 60768
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60683: LD_STRING e
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 437
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_INT 1
60702: ARRAY
60703: EQUAL
60704: IFFALSE 60731
60706: PUSH
60707: LD_VAR 0 4
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 437
60721: PUSH
60722: LD_INT 1
60724: ARRAY
60725: PUSH
60726: LD_INT 2
60728: ARRAY
60729: EQUAL
60730: AND
60731: IFFALSE 60758
60733: PUSH
60734: LD_VAR 0 5
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 437
60748: PUSH
60749: LD_INT 1
60751: ARRAY
60752: PUSH
60753: LD_INT 3
60755: ARRAY
60756: EQUAL
60757: AND
60758: IFFALSE 60768
// result := true end ;
60760: LD_ADDR_VAR 0 3
60764: PUSH
60765: LD_INT 1
60767: ST_TO_ADDR
// end ;
60768: LD_VAR 0 3
60772: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60773: LD_INT 0
60775: PPUSH
// result := false ;
60776: LD_ADDR_VAR 0 4
60780: PUSH
60781: LD_INT 0
60783: ST_TO_ADDR
// if GetTaskList ( unit ) then
60784: LD_VAR 0 1
60788: PPUSH
60789: CALL_OW 437
60793: IFFALSE 60880
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60795: LD_STRING M
60797: PUSH
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 437
60807: PUSH
60808: LD_INT 1
60810: ARRAY
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: EQUAL
60816: IFFALSE 60843
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 437
60833: PUSH
60834: LD_INT 1
60836: ARRAY
60837: PUSH
60838: LD_INT 2
60840: ARRAY
60841: EQUAL
60842: AND
60843: IFFALSE 60870
60845: PUSH
60846: LD_VAR 0 3
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 437
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PUSH
60865: LD_INT 3
60867: ARRAY
60868: EQUAL
60869: AND
60870: IFFALSE 60880
// result := true ;
60872: LD_ADDR_VAR 0 4
60876: PUSH
60877: LD_INT 1
60879: ST_TO_ADDR
// end ; end ;
60880: LD_VAR 0 4
60884: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60885: LD_INT 0
60887: PPUSH
60888: PPUSH
60889: PPUSH
60890: PPUSH
// if not unit or not area then
60891: LD_VAR 0 1
60895: NOT
60896: IFTRUE 60905
60898: PUSH
60899: LD_VAR 0 2
60903: NOT
60904: OR
60905: IFFALSE 60909
// exit ;
60907: GO 61085
// tmp := AreaToList ( area , i ) ;
60909: LD_ADDR_VAR 0 6
60913: PUSH
60914: LD_VAR 0 2
60918: PPUSH
60919: LD_VAR 0 5
60923: PPUSH
60924: CALL_OW 517
60928: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60929: LD_ADDR_VAR 0 5
60933: PUSH
60934: DOUBLE
60935: LD_INT 1
60937: DEC
60938: ST_TO_ADDR
60939: LD_VAR 0 6
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: PUSH
60948: FOR_TO
60949: IFFALSE 61083
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60951: LD_ADDR_VAR 0 7
60955: PUSH
60956: LD_VAR 0 6
60960: PUSH
60961: LD_INT 1
60963: ARRAY
60964: PUSH
60965: LD_VAR 0 5
60969: ARRAY
60970: PUSH
60971: LD_VAR 0 6
60975: PUSH
60976: LD_INT 2
60978: ARRAY
60979: PUSH
60980: LD_VAR 0 5
60984: ARRAY
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60990: LD_INT 92
60992: PUSH
60993: LD_VAR 0 7
60997: PUSH
60998: LD_INT 1
61000: ARRAY
61001: PUSH
61002: LD_VAR 0 7
61006: PUSH
61007: LD_INT 2
61009: ARRAY
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: PPUSH
61020: CALL_OW 69
61024: PUSH
61025: LD_INT 0
61027: EQUAL
61028: IFFALSE 61081
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61030: LD_VAR 0 1
61034: PPUSH
61035: LD_VAR 0 7
61039: PUSH
61040: LD_INT 1
61042: ARRAY
61043: PPUSH
61044: LD_VAR 0 7
61048: PUSH
61049: LD_INT 2
61051: ARRAY
61052: PPUSH
61053: LD_VAR 0 3
61057: PPUSH
61058: CALL_OW 48
// result := IsPlaced ( unit ) ;
61062: LD_ADDR_VAR 0 4
61066: PUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 305
61076: ST_TO_ADDR
// exit ;
61077: POP
61078: POP
61079: GO 61085
// end ; end ;
61081: GO 60948
61083: POP
61084: POP
// end ;
61085: LD_VAR 0 4
61089: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61090: LD_INT 0
61092: PPUSH
61093: PPUSH
61094: PPUSH
// if not side or side > 8 then
61095: LD_VAR 0 1
61099: NOT
61100: IFTRUE 61112
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_INT 8
61110: GREATER
61111: OR
61112: IFFALSE 61116
// exit ;
61114: GO 61303
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61116: LD_ADDR_VAR 0 4
61120: PUSH
61121: LD_INT 22
61123: PUSH
61124: LD_VAR 0 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 21
61135: PUSH
61136: LD_INT 3
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PPUSH
61147: CALL_OW 69
61151: ST_TO_ADDR
// if not tmp then
61152: LD_VAR 0 4
61156: NOT
61157: IFFALSE 61161
// exit ;
61159: GO 61303
// enable_addtolog := true ;
61161: LD_ADDR_OWVAR 81
61165: PUSH
61166: LD_INT 1
61168: ST_TO_ADDR
// AddToLog ( [ ) ;
61169: LD_STRING [
61171: PPUSH
61172: CALL_OW 561
// for i in tmp do
61176: LD_ADDR_VAR 0 3
61180: PUSH
61181: LD_VAR 0 4
61185: PUSH
61186: FOR_IN
61187: IFFALSE 61294
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61189: LD_STRING [
61191: PUSH
61192: LD_VAR 0 3
61196: PPUSH
61197: CALL_OW 266
61201: STR
61202: PUSH
61203: LD_STRING , 
61205: STR
61206: PUSH
61207: LD_VAR 0 3
61211: PPUSH
61212: CALL_OW 250
61216: STR
61217: PUSH
61218: LD_STRING , 
61220: STR
61221: PUSH
61222: LD_VAR 0 3
61226: PPUSH
61227: CALL_OW 251
61231: STR
61232: PUSH
61233: LD_STRING , 
61235: STR
61236: PUSH
61237: LD_VAR 0 3
61241: PPUSH
61242: CALL_OW 254
61246: STR
61247: PUSH
61248: LD_STRING , 
61250: STR
61251: PUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: LD_INT 1
61259: PPUSH
61260: CALL_OW 268
61264: STR
61265: PUSH
61266: LD_STRING , 
61268: STR
61269: PUSH
61270: LD_VAR 0 3
61274: PPUSH
61275: LD_INT 2
61277: PPUSH
61278: CALL_OW 268
61282: STR
61283: PUSH
61284: LD_STRING ],
61286: STR
61287: PPUSH
61288: CALL_OW 561
// end ;
61292: GO 61186
61294: POP
61295: POP
// AddToLog ( ]; ) ;
61296: LD_STRING ];
61298: PPUSH
61299: CALL_OW 561
// end ;
61303: LD_VAR 0 2
61307: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61308: LD_INT 0
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
// if not area or not rate or not max then
61315: LD_VAR 0 1
61319: NOT
61320: IFTRUE 61329
61322: PUSH
61323: LD_VAR 0 2
61327: NOT
61328: OR
61329: IFTRUE 61338
61331: PUSH
61332: LD_VAR 0 4
61336: NOT
61337: OR
61338: IFFALSE 61342
// exit ;
61340: GO 61531
// while 1 do
61342: LD_INT 1
61344: IFFALSE 61531
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61346: LD_ADDR_VAR 0 9
61350: PUSH
61351: LD_VAR 0 1
61355: PPUSH
61356: LD_INT 1
61358: PPUSH
61359: CALL_OW 287
61363: PUSH
61364: LD_INT 10
61366: MUL
61367: ST_TO_ADDR
// r := rate / 10 ;
61368: LD_ADDR_VAR 0 7
61372: PUSH
61373: LD_VAR 0 2
61377: PUSH
61378: LD_INT 10
61380: DIVREAL
61381: ST_TO_ADDR
// time := 1 1$00 ;
61382: LD_ADDR_VAR 0 8
61386: PUSH
61387: LD_INT 2100
61389: ST_TO_ADDR
// if amount < min then
61390: LD_VAR 0 9
61394: PUSH
61395: LD_VAR 0 3
61399: LESS
61400: IFFALSE 61418
// r := r * 2 else
61402: LD_ADDR_VAR 0 7
61406: PUSH
61407: LD_VAR 0 7
61411: PUSH
61412: LD_INT 2
61414: MUL
61415: ST_TO_ADDR
61416: GO 61444
// if amount > max then
61418: LD_VAR 0 9
61422: PUSH
61423: LD_VAR 0 4
61427: GREATER
61428: IFFALSE 61444
// r := r / 2 ;
61430: LD_ADDR_VAR 0 7
61434: PUSH
61435: LD_VAR 0 7
61439: PUSH
61440: LD_INT 2
61442: DIVREAL
61443: ST_TO_ADDR
// time := time / r ;
61444: LD_ADDR_VAR 0 8
61448: PUSH
61449: LD_VAR 0 8
61453: PUSH
61454: LD_VAR 0 7
61458: DIVREAL
61459: ST_TO_ADDR
// if time < 0 then
61460: LD_VAR 0 8
61464: PUSH
61465: LD_INT 0
61467: LESS
61468: IFFALSE 61485
// time := time * - 1 ;
61470: LD_ADDR_VAR 0 8
61474: PUSH
61475: LD_VAR 0 8
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: MUL
61484: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61485: LD_VAR 0 8
61489: PUSH
61490: LD_INT 35
61492: PPUSH
61493: LD_INT 875
61495: PPUSH
61496: CALL_OW 12
61500: PLUS
61501: PPUSH
61502: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61506: LD_INT 1
61508: PPUSH
61509: LD_INT 5
61511: PPUSH
61512: CALL_OW 12
61516: PPUSH
61517: LD_VAR 0 1
61521: PPUSH
61522: LD_INT 1
61524: PPUSH
61525: CALL_OW 55
// end ;
61529: GO 61342
// end ;
61531: LD_VAR 0 5
61535: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61536: LD_INT 0
61538: PPUSH
61539: PPUSH
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
61544: PPUSH
61545: PPUSH
// if not turrets or not factories then
61546: LD_VAR 0 1
61550: NOT
61551: IFTRUE 61560
61553: PUSH
61554: LD_VAR 0 2
61558: NOT
61559: OR
61560: IFFALSE 61564
// exit ;
61562: GO 61871
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61564: LD_ADDR_VAR 0 10
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: LD_INT 6
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 24
61606: PUSH
61607: LD_INT 25
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 23
61616: PUSH
61617: LD_INT 27
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 42
61630: PUSH
61631: LD_INT 43
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 44
61640: PUSH
61641: LD_INT 46
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 45
61650: PUSH
61651: LD_INT 47
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// result := [ ] ;
61668: LD_ADDR_VAR 0 3
61672: PUSH
61673: EMPTY
61674: ST_TO_ADDR
// for i in turrets do
61675: LD_ADDR_VAR 0 4
61679: PUSH
61680: LD_VAR 0 1
61684: PUSH
61685: FOR_IN
61686: IFFALSE 61869
// begin nat := GetNation ( i ) ;
61688: LD_ADDR_VAR 0 7
61692: PUSH
61693: LD_VAR 0 4
61697: PPUSH
61698: CALL_OW 248
61702: ST_TO_ADDR
// weapon := 0 ;
61703: LD_ADDR_VAR 0 8
61707: PUSH
61708: LD_INT 0
61710: ST_TO_ADDR
// if not nat then
61711: LD_VAR 0 7
61715: NOT
61716: IFFALSE 61720
// continue ;
61718: GO 61685
// for j in list [ nat ] do
61720: LD_ADDR_VAR 0 5
61724: PUSH
61725: LD_VAR 0 10
61729: PUSH
61730: LD_VAR 0 7
61734: ARRAY
61735: PUSH
61736: FOR_IN
61737: IFFALSE 61778
// if GetBWeapon ( i ) = j [ 1 ] then
61739: LD_VAR 0 4
61743: PPUSH
61744: CALL_OW 269
61748: PUSH
61749: LD_VAR 0 5
61753: PUSH
61754: LD_INT 1
61756: ARRAY
61757: EQUAL
61758: IFFALSE 61776
// begin weapon := j [ 2 ] ;
61760: LD_ADDR_VAR 0 8
61764: PUSH
61765: LD_VAR 0 5
61769: PUSH
61770: LD_INT 2
61772: ARRAY
61773: ST_TO_ADDR
// break ;
61774: GO 61778
// end ;
61776: GO 61736
61778: POP
61779: POP
// if not weapon then
61780: LD_VAR 0 8
61784: NOT
61785: IFFALSE 61789
// continue ;
61787: GO 61685
// for k in factories do
61789: LD_ADDR_VAR 0 6
61793: PUSH
61794: LD_VAR 0 2
61798: PUSH
61799: FOR_IN
61800: IFFALSE 61865
// begin weapons := AvailableWeaponList ( k ) ;
61802: LD_ADDR_VAR 0 9
61806: PUSH
61807: LD_VAR 0 6
61811: PPUSH
61812: CALL_OW 478
61816: ST_TO_ADDR
// if not weapons then
61817: LD_VAR 0 9
61821: NOT
61822: IFFALSE 61826
// continue ;
61824: GO 61799
// if weapon in weapons then
61826: LD_VAR 0 8
61830: PUSH
61831: LD_VAR 0 9
61835: IN
61836: IFFALSE 61863
// begin result := [ i , weapon ] ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 4
61847: PUSH
61848: LD_VAR 0 8
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: ST_TO_ADDR
// exit ;
61857: POP
61858: POP
61859: POP
61860: POP
61861: GO 61871
// end ; end ;
61863: GO 61799
61865: POP
61866: POP
// end ;
61867: GO 61685
61869: POP
61870: POP
// end ;
61871: LD_VAR 0 3
61875: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61876: LD_INT 0
61878: PPUSH
// if not side or side > 8 then
61879: LD_VAR 0 3
61883: NOT
61884: IFTRUE 61896
61886: PUSH
61887: LD_VAR 0 3
61891: PUSH
61892: LD_INT 8
61894: GREATER
61895: OR
61896: IFFALSE 61900
// exit ;
61898: GO 61959
// if not range then
61900: LD_VAR 0 4
61904: NOT
61905: IFFALSE 61916
// range := - 12 ;
61907: LD_ADDR_VAR 0 4
61911: PUSH
61912: LD_INT 12
61914: NEG
61915: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61916: LD_VAR 0 1
61920: PPUSH
61921: LD_VAR 0 2
61925: PPUSH
61926: LD_VAR 0 3
61930: PPUSH
61931: LD_VAR 0 4
61935: PPUSH
61936: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_VAR 0 2
61949: PPUSH
61950: LD_VAR 0 3
61954: PPUSH
61955: CALL_OW 331
// end ;
61959: LD_VAR 0 5
61963: RET
// export function Video ( mode ) ; begin
61964: LD_INT 0
61966: PPUSH
// ingame_video = mode ;
61967: LD_ADDR_OWVAR 52
61971: PUSH
61972: LD_VAR 0 1
61976: ST_TO_ADDR
// interface_hidden = mode ;
61977: LD_ADDR_OWVAR 54
61981: PUSH
61982: LD_VAR 0 1
61986: ST_TO_ADDR
// end ;
61987: LD_VAR 0 2
61991: RET
// export function Join ( array , element ) ; begin
61992: LD_INT 0
61994: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61995: LD_ADDR_VAR 0 3
61999: PUSH
62000: LD_VAR 0 1
62004: PPUSH
62005: LD_VAR 0 1
62009: PUSH
62010: LD_INT 1
62012: PLUS
62013: PPUSH
62014: LD_VAR 0 2
62018: PPUSH
62019: CALL_OW 1
62023: ST_TO_ADDR
// end ;
62024: LD_VAR 0 3
62028: RET
// export function JoinUnion ( array , element ) ; begin
62029: LD_INT 0
62031: PPUSH
// result := array union element ;
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: LD_VAR 0 1
62041: PUSH
62042: LD_VAR 0 2
62046: UNION
62047: ST_TO_ADDR
// end ;
62048: LD_VAR 0 3
62052: RET
// export function GetBehemoths ( side ) ; begin
62053: LD_INT 0
62055: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62056: LD_ADDR_VAR 0 2
62060: PUSH
62061: LD_INT 22
62063: PUSH
62064: LD_VAR 0 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 31
62075: PUSH
62076: LD_INT 25
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PPUSH
62087: CALL_OW 69
62091: ST_TO_ADDR
// end ;
62092: LD_VAR 0 2
62096: RET
// export function Shuffle ( array ) ; var i , index ; begin
62097: LD_INT 0
62099: PPUSH
62100: PPUSH
62101: PPUSH
// result := [ ] ;
62102: LD_ADDR_VAR 0 2
62106: PUSH
62107: EMPTY
62108: ST_TO_ADDR
// if not array then
62109: LD_VAR 0 1
62113: NOT
62114: IFFALSE 62118
// exit ;
62116: GO 62217
// Randomize ;
62118: CALL_OW 10
// for i = array downto 1 do
62122: LD_ADDR_VAR 0 3
62126: PUSH
62127: DOUBLE
62128: LD_VAR 0 1
62132: INC
62133: ST_TO_ADDR
62134: LD_INT 1
62136: PUSH
62137: FOR_DOWNTO
62138: IFFALSE 62215
// begin index := rand ( 1 , array ) ;
62140: LD_ADDR_VAR 0 4
62144: PUSH
62145: LD_INT 1
62147: PPUSH
62148: LD_VAR 0 1
62152: PPUSH
62153: CALL_OW 12
62157: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62158: LD_ADDR_VAR 0 2
62162: PUSH
62163: LD_VAR 0 2
62167: PPUSH
62168: LD_VAR 0 2
62172: PUSH
62173: LD_INT 1
62175: PLUS
62176: PPUSH
62177: LD_VAR 0 1
62181: PUSH
62182: LD_VAR 0 4
62186: ARRAY
62187: PPUSH
62188: CALL_OW 2
62192: ST_TO_ADDR
// array := Delete ( array , index ) ;
62193: LD_ADDR_VAR 0 1
62197: PUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_VAR 0 4
62207: PPUSH
62208: CALL_OW 3
62212: ST_TO_ADDR
// end ;
62213: GO 62137
62215: POP
62216: POP
// end ;
62217: LD_VAR 0 2
62221: RET
// export function GetBaseMaterials ( base ) ; begin
62222: LD_INT 0
62224: PPUSH
// result := [ 0 , 0 , 0 ] ;
62225: LD_ADDR_VAR 0 2
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: LIST
62243: ST_TO_ADDR
// if not base then
62244: LD_VAR 0 1
62248: NOT
62249: IFFALSE 62253
// exit ;
62251: GO 62302
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62253: LD_ADDR_VAR 0 2
62257: PUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: LD_INT 1
62265: PPUSH
62266: CALL_OW 275
62270: PUSH
62271: LD_VAR 0 1
62275: PPUSH
62276: LD_INT 2
62278: PPUSH
62279: CALL_OW 275
62283: PUSH
62284: LD_VAR 0 1
62288: PPUSH
62289: LD_INT 3
62291: PPUSH
62292: CALL_OW 275
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 2
62306: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
// result := array ;
62311: LD_ADDR_VAR 0 3
62315: PUSH
62316: LD_VAR 0 1
62320: ST_TO_ADDR
// if size >= result then
62321: LD_VAR 0 2
62325: PUSH
62326: LD_VAR 0 3
62330: GREATEREQUAL
62331: IFFALSE 62335
// exit ;
62333: GO 62385
// if size then
62335: LD_VAR 0 2
62339: IFFALSE 62385
// for i := array downto size do
62341: LD_ADDR_VAR 0 4
62345: PUSH
62346: DOUBLE
62347: LD_VAR 0 1
62351: INC
62352: ST_TO_ADDR
62353: LD_VAR 0 2
62357: PUSH
62358: FOR_DOWNTO
62359: IFFALSE 62383
// result := Delete ( result , result ) ;
62361: LD_ADDR_VAR 0 3
62365: PUSH
62366: LD_VAR 0 3
62370: PPUSH
62371: LD_VAR 0 3
62375: PPUSH
62376: CALL_OW 3
62380: ST_TO_ADDR
62381: GO 62358
62383: POP
62384: POP
// end ;
62385: LD_VAR 0 3
62389: RET
// export function ComExit ( unit ) ; var tmp ; begin
62390: LD_INT 0
62392: PPUSH
62393: PPUSH
// if not IsInUnit ( unit ) then
62394: LD_VAR 0 1
62398: PPUSH
62399: CALL_OW 310
62403: NOT
62404: IFFALSE 62408
// exit ;
62406: GO 62468
// tmp := IsInUnit ( unit ) ;
62408: LD_ADDR_VAR 0 3
62412: PUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: CALL_OW 310
62422: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62423: LD_VAR 0 3
62427: PPUSH
62428: CALL_OW 247
62432: PUSH
62433: LD_INT 2
62435: EQUAL
62436: IFFALSE 62449
// ComExitVehicle ( unit ) else
62438: LD_VAR 0 1
62442: PPUSH
62443: CALL_OW 121
62447: GO 62458
// ComExitBuilding ( unit ) ;
62449: LD_VAR 0 1
62453: PPUSH
62454: CALL_OW 122
// result := tmp ;
62458: LD_ADDR_VAR 0 2
62462: PUSH
62463: LD_VAR 0 3
62467: ST_TO_ADDR
// end ;
62468: LD_VAR 0 2
62472: RET
// export function ComExitAll ( units ) ; var i ; begin
62473: LD_INT 0
62475: PPUSH
62476: PPUSH
// if not units then
62477: LD_VAR 0 1
62481: NOT
62482: IFFALSE 62486
// exit ;
62484: GO 62512
// for i in units do
62486: LD_ADDR_VAR 0 3
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: FOR_IN
62497: IFFALSE 62510
// ComExit ( i ) ;
62499: LD_VAR 0 3
62503: PPUSH
62504: CALL 62390 0 1
62508: GO 62496
62510: POP
62511: POP
// end ;
62512: LD_VAR 0 2
62516: RET
// export function ResetHc ; begin
62517: LD_INT 0
62519: PPUSH
// InitHc ;
62520: CALL_OW 19
// hc_importance := 0 ;
62524: LD_ADDR_OWVAR 32
62528: PUSH
62529: LD_INT 0
62531: ST_TO_ADDR
// end ;
62532: LD_VAR 0 1
62536: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62537: LD_INT 0
62539: PPUSH
62540: PPUSH
62541: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62542: LD_ADDR_VAR 0 6
62546: PUSH
62547: LD_VAR 0 1
62551: PUSH
62552: LD_VAR 0 3
62556: PLUS
62557: PUSH
62558: LD_INT 2
62560: DIV
62561: ST_TO_ADDR
// if _x < 0 then
62562: LD_VAR 0 6
62566: PUSH
62567: LD_INT 0
62569: LESS
62570: IFFALSE 62587
// _x := _x * - 1 ;
62572: LD_ADDR_VAR 0 6
62576: PUSH
62577: LD_VAR 0 6
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: MUL
62586: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62587: LD_ADDR_VAR 0 7
62591: PUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_VAR 0 4
62601: PLUS
62602: PUSH
62603: LD_INT 2
62605: DIV
62606: ST_TO_ADDR
// if _y < 0 then
62607: LD_VAR 0 7
62611: PUSH
62612: LD_INT 0
62614: LESS
62615: IFFALSE 62632
// _y := _y * - 1 ;
62617: LD_ADDR_VAR 0 7
62621: PUSH
62622: LD_VAR 0 7
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: MUL
62631: ST_TO_ADDR
// result := [ _x , _y ] ;
62632: LD_ADDR_VAR 0 5
62636: PUSH
62637: LD_VAR 0 6
62641: PUSH
62642: LD_VAR 0 7
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// end ;
62651: LD_VAR 0 5
62655: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62656: LD_INT 0
62658: PPUSH
62659: PPUSH
62660: PPUSH
62661: PPUSH
// task := GetTaskList ( unit ) ;
62662: LD_ADDR_VAR 0 7
62666: PUSH
62667: LD_VAR 0 1
62671: PPUSH
62672: CALL_OW 437
62676: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62677: LD_VAR 0 7
62681: NOT
62682: IFFALSE 62701
62684: PUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: LD_VAR 0 2
62694: PPUSH
62695: CALL_OW 308
62699: NOT
62700: AND
62701: IFFALSE 62705
// exit ;
62703: GO 62823
// if IsInArea ( unit , area ) then
62705: LD_VAR 0 1
62709: PPUSH
62710: LD_VAR 0 2
62714: PPUSH
62715: CALL_OW 308
62719: IFFALSE 62737
// begin ComMoveToArea ( unit , goAway ) ;
62721: LD_VAR 0 1
62725: PPUSH
62726: LD_VAR 0 3
62730: PPUSH
62731: CALL_OW 113
// exit ;
62735: GO 62823
// end ; if task [ 1 ] [ 1 ] <> M then
62737: LD_VAR 0 7
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: PUSH
62750: LD_STRING M
62752: NONEQUAL
62753: IFFALSE 62757
// exit ;
62755: GO 62823
// x := task [ 1 ] [ 2 ] ;
62757: LD_ADDR_VAR 0 5
62761: PUSH
62762: LD_VAR 0 7
62766: PUSH
62767: LD_INT 1
62769: ARRAY
62770: PUSH
62771: LD_INT 2
62773: ARRAY
62774: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62775: LD_ADDR_VAR 0 6
62779: PUSH
62780: LD_VAR 0 7
62784: PUSH
62785: LD_INT 1
62787: ARRAY
62788: PUSH
62789: LD_INT 3
62791: ARRAY
62792: ST_TO_ADDR
// if InArea ( x , y , area ) then
62793: LD_VAR 0 5
62797: PPUSH
62798: LD_VAR 0 6
62802: PPUSH
62803: LD_VAR 0 2
62807: PPUSH
62808: CALL_OW 309
62812: IFFALSE 62823
// ComStop ( unit ) ;
62814: LD_VAR 0 1
62818: PPUSH
62819: CALL_OW 141
// end ;
62823: LD_VAR 0 4
62827: RET
// export function Abs ( value ) ; begin
62828: LD_INT 0
62830: PPUSH
// result := value ;
62831: LD_ADDR_VAR 0 2
62835: PUSH
62836: LD_VAR 0 1
62840: ST_TO_ADDR
// if value < 0 then
62841: LD_VAR 0 1
62845: PUSH
62846: LD_INT 0
62848: LESS
62849: IFFALSE 62866
// result := value * - 1 ;
62851: LD_ADDR_VAR 0 2
62855: PUSH
62856: LD_VAR 0 1
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: MUL
62865: ST_TO_ADDR
// end ;
62866: LD_VAR 0 2
62870: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62871: LD_INT 0
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
62880: PPUSH
// if not unit or not building then
62881: LD_VAR 0 1
62885: NOT
62886: IFTRUE 62895
62888: PUSH
62889: LD_VAR 0 2
62893: NOT
62894: OR
62895: IFFALSE 62899
// exit ;
62897: GO 63127
// x := GetX ( building ) ;
62899: LD_ADDR_VAR 0 4
62903: PUSH
62904: LD_VAR 0 2
62908: PPUSH
62909: CALL_OW 250
62913: ST_TO_ADDR
// y := GetY ( building ) ;
62914: LD_ADDR_VAR 0 6
62918: PUSH
62919: LD_VAR 0 2
62923: PPUSH
62924: CALL_OW 251
62928: ST_TO_ADDR
// d := GetDir ( building ) ;
62929: LD_ADDR_VAR 0 8
62933: PUSH
62934: LD_VAR 0 2
62938: PPUSH
62939: CALL_OW 254
62943: ST_TO_ADDR
// r := 4 ;
62944: LD_ADDR_VAR 0 9
62948: PUSH
62949: LD_INT 4
62951: ST_TO_ADDR
// for i := 1 to 5 do
62952: LD_ADDR_VAR 0 10
62956: PUSH
62957: DOUBLE
62958: LD_INT 1
62960: DEC
62961: ST_TO_ADDR
62962: LD_INT 5
62964: PUSH
62965: FOR_TO
62966: IFFALSE 63125
// begin _x := ShiftX ( x , d , r + i ) ;
62968: LD_ADDR_VAR 0 5
62972: PUSH
62973: LD_VAR 0 4
62977: PPUSH
62978: LD_VAR 0 8
62982: PPUSH
62983: LD_VAR 0 9
62987: PUSH
62988: LD_VAR 0 10
62992: PLUS
62993: PPUSH
62994: CALL_OW 272
62998: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62999: LD_ADDR_VAR 0 7
63003: PUSH
63004: LD_VAR 0 6
63008: PPUSH
63009: LD_VAR 0 8
63013: PPUSH
63014: LD_VAR 0 9
63018: PUSH
63019: LD_VAR 0 10
63023: PLUS
63024: PPUSH
63025: CALL_OW 273
63029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63030: LD_VAR 0 5
63034: PPUSH
63035: LD_VAR 0 7
63039: PPUSH
63040: CALL_OW 488
63044: IFFALSE 63079
63046: PUSH
63047: LD_VAR 0 5
63051: PPUSH
63052: LD_VAR 0 7
63056: PPUSH
63057: CALL_OW 428
63061: PPUSH
63062: CALL_OW 247
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: IN
63077: NOT
63078: AND
63079: IFFALSE 63123
// begin ComMoveXY ( unit , _x , _y ) ;
63081: LD_VAR 0 1
63085: PPUSH
63086: LD_VAR 0 5
63090: PPUSH
63091: LD_VAR 0 7
63095: PPUSH
63096: CALL_OW 111
// result := [ _x , _y ] ;
63100: LD_ADDR_VAR 0 3
63104: PUSH
63105: LD_VAR 0 5
63109: PUSH
63110: LD_VAR 0 7
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: ST_TO_ADDR
// exit ;
63119: POP
63120: POP
63121: GO 63127
// end ; end ;
63123: GO 62965
63125: POP
63126: POP
// end ;
63127: LD_VAR 0 3
63131: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63132: LD_INT 0
63134: PPUSH
63135: PPUSH
63136: PPUSH
// result := 0 ;
63137: LD_ADDR_VAR 0 3
63141: PUSH
63142: LD_INT 0
63144: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63145: LD_VAR 0 1
63149: PUSH
63150: LD_INT 0
63152: LESS
63153: IFTRUE 63165
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: LD_INT 8
63163: GREATER
63164: OR
63165: IFTRUE 63177
63167: PUSH
63168: LD_VAR 0 2
63172: PUSH
63173: LD_INT 0
63175: LESS
63176: OR
63177: IFTRUE 63189
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 8
63187: GREATER
63188: OR
63189: IFFALSE 63193
// exit ;
63191: GO 63268
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63193: LD_ADDR_VAR 0 4
63197: PUSH
63198: LD_INT 22
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PPUSH
63210: CALL_OW 69
63214: PUSH
63215: FOR_IN
63216: IFFALSE 63266
// begin un := UnitShoot ( i ) ;
63218: LD_ADDR_VAR 0 5
63222: PUSH
63223: LD_VAR 0 4
63227: PPUSH
63228: CALL_OW 504
63232: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63233: LD_VAR 0 5
63237: PPUSH
63238: CALL_OW 255
63242: PUSH
63243: LD_VAR 0 1
63247: EQUAL
63248: IFFALSE 63264
// begin result := un ;
63250: LD_ADDR_VAR 0 3
63254: PUSH
63255: LD_VAR 0 5
63259: ST_TO_ADDR
// exit ;
63260: POP
63261: POP
63262: GO 63268
// end ; end ;
63264: GO 63215
63266: POP
63267: POP
// end ;
63268: LD_VAR 0 3
63272: RET
// export function GetCargoBay ( units ) ; begin
63273: LD_INT 0
63275: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63276: LD_ADDR_VAR 0 2
63280: PUSH
63281: LD_VAR 0 1
63285: PPUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 34
63291: PUSH
63292: LD_INT 12
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 34
63301: PUSH
63302: LD_INT 51
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 34
63311: PUSH
63312: LD_INT 32
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 34
63321: PUSH
63322: LD_INT 89
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: PPUSH
63336: CALL_OW 72
63340: ST_TO_ADDR
// end ;
63341: LD_VAR 0 2
63345: RET
// export function Negate ( value ) ; begin
63346: LD_INT 0
63348: PPUSH
// result := not value ;
63349: LD_ADDR_VAR 0 2
63353: PUSH
63354: LD_VAR 0 1
63358: NOT
63359: ST_TO_ADDR
// end ;
63360: LD_VAR 0 2
63364: RET
// export function Inc ( value ) ; begin
63365: LD_INT 0
63367: PPUSH
// result := value + 1 ;
63368: LD_ADDR_VAR 0 2
63372: PUSH
63373: LD_VAR 0 1
63377: PUSH
63378: LD_INT 1
63380: PLUS
63381: ST_TO_ADDR
// end ;
63382: LD_VAR 0 2
63386: RET
// export function Dec ( value ) ; begin
63387: LD_INT 0
63389: PPUSH
// result := value - 1 ;
63390: LD_ADDR_VAR 0 2
63394: PUSH
63395: LD_VAR 0 1
63399: PUSH
63400: LD_INT 1
63402: MINUS
63403: ST_TO_ADDR
// end ;
63404: LD_VAR 0 2
63408: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63409: LD_INT 0
63411: PPUSH
63412: PPUSH
63413: PPUSH
63414: PPUSH
63415: PPUSH
63416: PPUSH
63417: PPUSH
63418: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63419: LD_VAR 0 1
63423: PPUSH
63424: LD_VAR 0 2
63428: PPUSH
63429: CALL_OW 488
63433: NOT
63434: IFTRUE 63453
63436: PUSH
63437: LD_VAR 0 3
63441: PPUSH
63442: LD_VAR 0 4
63446: PPUSH
63447: CALL_OW 488
63451: NOT
63452: OR
63453: IFFALSE 63466
// begin result := - 1 ;
63455: LD_ADDR_VAR 0 5
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: ST_TO_ADDR
// exit ;
63464: GO 63701
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63466: LD_ADDR_VAR 0 12
63470: PUSH
63471: LD_VAR 0 1
63475: PPUSH
63476: LD_VAR 0 2
63480: PPUSH
63481: LD_VAR 0 3
63485: PPUSH
63486: LD_VAR 0 4
63490: PPUSH
63491: CALL 62537 0 4
63495: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63496: LD_ADDR_VAR 0 11
63500: PUSH
63501: LD_VAR 0 1
63505: PPUSH
63506: LD_VAR 0 2
63510: PPUSH
63511: LD_VAR 0 12
63515: PUSH
63516: LD_INT 1
63518: ARRAY
63519: PPUSH
63520: LD_VAR 0 12
63524: PUSH
63525: LD_INT 2
63527: ARRAY
63528: PPUSH
63529: CALL_OW 298
63533: ST_TO_ADDR
// distance := 9999 ;
63534: LD_ADDR_VAR 0 10
63538: PUSH
63539: LD_INT 9999
63541: ST_TO_ADDR
// for i := 0 to 5 do
63542: LD_ADDR_VAR 0 6
63546: PUSH
63547: DOUBLE
63548: LD_INT 0
63550: DEC
63551: ST_TO_ADDR
63552: LD_INT 5
63554: PUSH
63555: FOR_TO
63556: IFFALSE 63699
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63558: LD_ADDR_VAR 0 7
63562: PUSH
63563: LD_VAR 0 1
63567: PPUSH
63568: LD_VAR 0 6
63572: PPUSH
63573: LD_VAR 0 11
63577: PPUSH
63578: CALL_OW 272
63582: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63583: LD_ADDR_VAR 0 8
63587: PUSH
63588: LD_VAR 0 2
63592: PPUSH
63593: LD_VAR 0 6
63597: PPUSH
63598: LD_VAR 0 11
63602: PPUSH
63603: CALL_OW 273
63607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63608: LD_VAR 0 7
63612: PPUSH
63613: LD_VAR 0 8
63617: PPUSH
63618: CALL_OW 488
63622: NOT
63623: IFFALSE 63627
// continue ;
63625: GO 63555
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63627: LD_ADDR_VAR 0 9
63631: PUSH
63632: LD_VAR 0 12
63636: PUSH
63637: LD_INT 1
63639: ARRAY
63640: PPUSH
63641: LD_VAR 0 12
63645: PUSH
63646: LD_INT 2
63648: ARRAY
63649: PPUSH
63650: LD_VAR 0 7
63654: PPUSH
63655: LD_VAR 0 8
63659: PPUSH
63660: CALL_OW 298
63664: ST_TO_ADDR
// if tmp < distance then
63665: LD_VAR 0 9
63669: PUSH
63670: LD_VAR 0 10
63674: LESS
63675: IFFALSE 63697
// begin result := i ;
63677: LD_ADDR_VAR 0 5
63681: PUSH
63682: LD_VAR 0 6
63686: ST_TO_ADDR
// distance := tmp ;
63687: LD_ADDR_VAR 0 10
63691: PUSH
63692: LD_VAR 0 9
63696: ST_TO_ADDR
// end ; end ;
63697: GO 63555
63699: POP
63700: POP
// end ;
63701: LD_VAR 0 5
63705: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63706: LD_INT 0
63708: PPUSH
63709: PPUSH
// if not driver or not IsInUnit ( driver ) then
63710: LD_VAR 0 1
63714: NOT
63715: IFTRUE 63729
63717: PUSH
63718: LD_VAR 0 1
63722: PPUSH
63723: CALL_OW 310
63727: NOT
63728: OR
63729: IFFALSE 63733
// exit ;
63731: GO 63823
// vehicle := IsInUnit ( driver ) ;
63733: LD_ADDR_VAR 0 3
63737: PUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 310
63747: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63748: LD_VAR 0 1
63752: PPUSH
63753: LD_STRING \
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_STRING E
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_VAR 0 3
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PPUSH
63819: CALL_OW 446
// end ;
63823: LD_VAR 0 2
63827: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63828: LD_INT 0
63830: PPUSH
63831: PPUSH
// if not driver or not IsInUnit ( driver ) then
63832: LD_VAR 0 1
63836: NOT
63837: IFTRUE 63851
63839: PUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: CALL_OW 310
63849: NOT
63850: OR
63851: IFFALSE 63855
// exit ;
63853: GO 63945
// vehicle := IsInUnit ( driver ) ;
63855: LD_ADDR_VAR 0 3
63859: PUSH
63860: LD_VAR 0 1
63864: PPUSH
63865: CALL_OW 310
63869: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63870: LD_VAR 0 1
63874: PPUSH
63875: LD_STRING \
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_STRING E
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_VAR 0 3
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PPUSH
63941: CALL_OW 447
// end ;
63945: LD_VAR 0 2
63949: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63950: LD_INT 0
63952: PPUSH
63953: PPUSH
63954: PPUSH
// tmp := [ ] ;
63955: LD_ADDR_VAR 0 5
63959: PUSH
63960: EMPTY
63961: ST_TO_ADDR
// for i in units do
63962: LD_ADDR_VAR 0 4
63966: PUSH
63967: LD_VAR 0 1
63971: PUSH
63972: FOR_IN
63973: IFFALSE 64011
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63975: LD_ADDR_VAR 0 5
63979: PUSH
63980: LD_VAR 0 5
63984: PPUSH
63985: LD_VAR 0 5
63989: PUSH
63990: LD_INT 1
63992: PLUS
63993: PPUSH
63994: LD_VAR 0 4
63998: PPUSH
63999: CALL_OW 256
64003: PPUSH
64004: CALL_OW 2
64008: ST_TO_ADDR
64009: GO 63972
64011: POP
64012: POP
// if not tmp then
64013: LD_VAR 0 5
64017: NOT
64018: IFFALSE 64022
// exit ;
64020: GO 64070
// if asc then
64022: LD_VAR 0 2
64026: IFFALSE 64050
// result := SortListByListAsc ( units , tmp ) else
64028: LD_ADDR_VAR 0 3
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 5
64042: PPUSH
64043: CALL_OW 76
64047: ST_TO_ADDR
64048: GO 64070
// result := SortListByListDesc ( units , tmp ) ;
64050: LD_ADDR_VAR 0 3
64054: PUSH
64055: LD_VAR 0 1
64059: PPUSH
64060: LD_VAR 0 5
64064: PPUSH
64065: CALL_OW 77
64069: ST_TO_ADDR
// end ;
64070: LD_VAR 0 3
64074: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64075: LD_INT 0
64077: PPUSH
64078: PPUSH
// task := GetTaskList ( mech ) ;
64079: LD_ADDR_VAR 0 4
64083: PUSH
64084: LD_VAR 0 1
64088: PPUSH
64089: CALL_OW 437
64093: ST_TO_ADDR
// if not task then
64094: LD_VAR 0 4
64098: NOT
64099: IFFALSE 64103
// exit ;
64101: GO 64147
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: LD_VAR 0 4
64112: PUSH
64113: LD_INT 1
64115: ARRAY
64116: PUSH
64117: LD_INT 1
64119: ARRAY
64120: PUSH
64121: LD_STRING r
64123: EQUAL
64124: IFFALSE 64146
64126: PUSH
64127: LD_VAR 0 4
64131: PUSH
64132: LD_INT 1
64134: ARRAY
64135: PUSH
64136: LD_INT 4
64138: ARRAY
64139: PUSH
64140: LD_VAR 0 2
64144: EQUAL
64145: AND
64146: ST_TO_ADDR
// end ;
64147: LD_VAR 0 3
64151: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64152: LD_INT 0
64154: PPUSH
// SetDir ( unit , d ) ;
64155: LD_VAR 0 1
64159: PPUSH
64160: LD_VAR 0 4
64164: PPUSH
64165: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64169: LD_ADDR_VAR 0 6
64173: PUSH
64174: LD_VAR 0 1
64178: PPUSH
64179: LD_VAR 0 2
64183: PPUSH
64184: LD_VAR 0 3
64188: PPUSH
64189: LD_VAR 0 5
64193: PPUSH
64194: CALL_OW 48
64198: ST_TO_ADDR
// end ;
64199: LD_VAR 0 6
64203: RET
// export function ToNaturalNumber ( number ) ; begin
64204: LD_INT 0
64206: PPUSH
// result := number div 1 ;
64207: LD_ADDR_VAR 0 2
64211: PUSH
64212: LD_VAR 0 1
64216: PUSH
64217: LD_INT 1
64219: DIV
64220: ST_TO_ADDR
// if number < 0 then
64221: LD_VAR 0 1
64225: PUSH
64226: LD_INT 0
64228: LESS
64229: IFFALSE 64239
// result := 0 ;
64231: LD_ADDR_VAR 0 2
64235: PUSH
64236: LD_INT 0
64238: ST_TO_ADDR
// end ;
64239: LD_VAR 0 2
64243: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64244: LD_INT 0
64246: PPUSH
64247: PPUSH
64248: PPUSH
// if not buildings then
64249: LD_VAR 0 1
64253: NOT
64254: IFFALSE 64258
// exit ;
64256: GO 64373
// tmp := [ ] ;
64258: LD_ADDR_VAR 0 5
64262: PUSH
64263: EMPTY
64264: ST_TO_ADDR
// for b in buildings do
64265: LD_ADDR_VAR 0 4
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: FOR_IN
64276: IFFALSE 64314
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64278: LD_ADDR_VAR 0 5
64282: PUSH
64283: LD_VAR 0 5
64287: PPUSH
64288: LD_VAR 0 5
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: CALL_OW 266
64306: PPUSH
64307: CALL_OW 1
64311: ST_TO_ADDR
64312: GO 64275
64314: POP
64315: POP
// if not tmp then
64316: LD_VAR 0 5
64320: NOT
64321: IFFALSE 64325
// exit ;
64323: GO 64373
// if asc then
64325: LD_VAR 0 2
64329: IFFALSE 64353
// result := SortListByListAsc ( buildings , tmp ) else
64331: LD_ADDR_VAR 0 3
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_VAR 0 5
64345: PPUSH
64346: CALL_OW 76
64350: ST_TO_ADDR
64351: GO 64373
// result := SortListByListDesc ( buildings , tmp ) ;
64353: LD_ADDR_VAR 0 3
64357: PUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: LD_VAR 0 5
64367: PPUSH
64368: CALL_OW 77
64372: ST_TO_ADDR
// end ;
64373: LD_VAR 0 3
64377: RET
// export function SortByClass ( units , class ) ; var un ; begin
64378: LD_INT 0
64380: PPUSH
64381: PPUSH
// if not units or not class then
64382: LD_VAR 0 1
64386: NOT
64387: IFTRUE 64396
64389: PUSH
64390: LD_VAR 0 2
64394: NOT
64395: OR
64396: IFFALSE 64400
// exit ;
64398: GO 64495
// result := [ ] ;
64400: LD_ADDR_VAR 0 3
64404: PUSH
64405: EMPTY
64406: ST_TO_ADDR
// for un in units do
64407: LD_ADDR_VAR 0 4
64411: PUSH
64412: LD_VAR 0 1
64416: PUSH
64417: FOR_IN
64418: IFFALSE 64493
// if GetClass ( un ) = class then
64420: LD_VAR 0 4
64424: PPUSH
64425: CALL_OW 257
64429: PUSH
64430: LD_VAR 0 2
64434: EQUAL
64435: IFFALSE 64462
// result := Insert ( result , 1 , un ) else
64437: LD_ADDR_VAR 0 3
64441: PUSH
64442: LD_VAR 0 3
64446: PPUSH
64447: LD_INT 1
64449: PPUSH
64450: LD_VAR 0 4
64454: PPUSH
64455: CALL_OW 2
64459: ST_TO_ADDR
64460: GO 64491
// result := Replace ( result , result + 1 , un ) ;
64462: LD_ADDR_VAR 0 3
64466: PUSH
64467: LD_VAR 0 3
64471: PPUSH
64472: LD_VAR 0 3
64476: PUSH
64477: LD_INT 1
64479: PLUS
64480: PPUSH
64481: LD_VAR 0 4
64485: PPUSH
64486: CALL_OW 1
64490: ST_TO_ADDR
64491: GO 64417
64493: POP
64494: POP
// end ;
64495: LD_VAR 0 3
64499: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64500: LD_INT 0
64502: PPUSH
64503: PPUSH
64504: PPUSH
64505: PPUSH
64506: PPUSH
64507: PPUSH
64508: PPUSH
// result := [ ] ;
64509: LD_ADDR_VAR 0 4
64513: PUSH
64514: EMPTY
64515: ST_TO_ADDR
// if x - r < 0 then
64516: LD_VAR 0 1
64520: PUSH
64521: LD_VAR 0 3
64525: MINUS
64526: PUSH
64527: LD_INT 0
64529: LESS
64530: IFFALSE 64542
// min_x := 0 else
64532: LD_ADDR_VAR 0 8
64536: PUSH
64537: LD_INT 0
64539: ST_TO_ADDR
64540: GO 64558
// min_x := x - r ;
64542: LD_ADDR_VAR 0 8
64546: PUSH
64547: LD_VAR 0 1
64551: PUSH
64552: LD_VAR 0 3
64556: MINUS
64557: ST_TO_ADDR
// if y - r < 0 then
64558: LD_VAR 0 2
64562: PUSH
64563: LD_VAR 0 3
64567: MINUS
64568: PUSH
64569: LD_INT 0
64571: LESS
64572: IFFALSE 64584
// min_y := 0 else
64574: LD_ADDR_VAR 0 7
64578: PUSH
64579: LD_INT 0
64581: ST_TO_ADDR
64582: GO 64600
// min_y := y - r ;
64584: LD_ADDR_VAR 0 7
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: LD_VAR 0 3
64598: MINUS
64599: ST_TO_ADDR
// max_x := x + r ;
64600: LD_ADDR_VAR 0 9
64604: PUSH
64605: LD_VAR 0 1
64609: PUSH
64610: LD_VAR 0 3
64614: PLUS
64615: ST_TO_ADDR
// max_y := y + r ;
64616: LD_ADDR_VAR 0 10
64620: PUSH
64621: LD_VAR 0 2
64625: PUSH
64626: LD_VAR 0 3
64630: PLUS
64631: ST_TO_ADDR
// for _x = min_x to max_x do
64632: LD_ADDR_VAR 0 5
64636: PUSH
64637: DOUBLE
64638: LD_VAR 0 8
64642: DEC
64643: ST_TO_ADDR
64644: LD_VAR 0 9
64648: PUSH
64649: FOR_TO
64650: IFFALSE 64751
// for _y = min_y to max_y do
64652: LD_ADDR_VAR 0 6
64656: PUSH
64657: DOUBLE
64658: LD_VAR 0 7
64662: DEC
64663: ST_TO_ADDR
64664: LD_VAR 0 10
64668: PUSH
64669: FOR_TO
64670: IFFALSE 64747
// begin if not ValidHex ( _x , _y ) then
64672: LD_VAR 0 5
64676: PPUSH
64677: LD_VAR 0 6
64681: PPUSH
64682: CALL_OW 488
64686: NOT
64687: IFFALSE 64691
// continue ;
64689: GO 64669
// if GetResourceTypeXY ( _x , _y ) then
64691: LD_VAR 0 5
64695: PPUSH
64696: LD_VAR 0 6
64700: PPUSH
64701: CALL_OW 283
64705: IFFALSE 64745
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64707: LD_ADDR_VAR 0 4
64711: PUSH
64712: LD_VAR 0 4
64716: PPUSH
64717: LD_VAR 0 4
64721: PUSH
64722: LD_INT 1
64724: PLUS
64725: PPUSH
64726: LD_VAR 0 5
64730: PUSH
64731: LD_VAR 0 6
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PPUSH
64740: CALL_OW 1
64744: ST_TO_ADDR
// end ;
64745: GO 64669
64747: POP
64748: POP
64749: GO 64649
64751: POP
64752: POP
// end ;
64753: LD_VAR 0 4
64757: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64758: LD_INT 0
64760: PPUSH
64761: PPUSH
64762: PPUSH
64763: PPUSH
64764: PPUSH
64765: PPUSH
64766: PPUSH
64767: PPUSH
// if not units then
64768: LD_VAR 0 1
64772: NOT
64773: IFFALSE 64777
// exit ;
64775: GO 65309
// result := UnitFilter ( units , [ f_ok ] ) ;
64777: LD_ADDR_VAR 0 3
64781: PUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: LD_INT 50
64789: PUSH
64790: EMPTY
64791: LIST
64792: PPUSH
64793: CALL_OW 72
64797: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64798: LD_ADDR_VAR 0 8
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 1
64810: ARRAY
64811: PPUSH
64812: CALL_OW 255
64816: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64817: LD_ADDR_VAR 0 10
64821: PUSH
64822: LD_INT 29
64824: PUSH
64825: LD_INT 91
64827: PUSH
64828: LD_INT 49
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// if not result then
64836: LD_VAR 0 3
64840: NOT
64841: IFFALSE 64845
// exit ;
64843: GO 65309
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64845: LD_ADDR_VAR 0 5
64849: PUSH
64850: LD_INT 81
64852: PUSH
64853: LD_VAR 0 8
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 69
64866: ST_TO_ADDR
// for i in result do
64867: LD_ADDR_VAR 0 4
64871: PUSH
64872: LD_VAR 0 3
64876: PUSH
64877: FOR_IN
64878: IFFALSE 65307
// begin tag := GetTag ( i ) + 1 ;
64880: LD_ADDR_VAR 0 9
64884: PUSH
64885: LD_VAR 0 4
64889: PPUSH
64890: CALL_OW 110
64894: PUSH
64895: LD_INT 1
64897: PLUS
64898: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
64899: LD_ADDR_VAR 0 7
64903: PUSH
64904: LD_VAR 0 4
64908: PPUSH
64909: CALL_OW 250
64913: PPUSH
64914: LD_VAR 0 4
64918: PPUSH
64919: CALL_OW 251
64923: PPUSH
64924: LD_INT 4
64926: PPUSH
64927: CALL 64500 0 3
64931: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
64932: LD_VAR 0 4
64936: PPUSH
64937: CALL_OW 247
64941: PUSH
64942: LD_INT 2
64944: EQUAL
64945: IFFALSE 64957
64947: PUSH
64948: LD_VAR 0 7
64952: PUSH
64953: LD_INT 2
64955: GREATER
64956: AND
64957: IFFALSE 64977
64959: PUSH
64960: LD_VAR 0 4
64964: PPUSH
64965: CALL_OW 264
64969: PUSH
64970: LD_VAR 0 10
64974: IN
64975: NOT
64976: AND
64977: IFFALSE 65016
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64979: LD_VAR 0 4
64983: PPUSH
64984: LD_VAR 0 7
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PUSH
64993: LD_INT 1
64995: ARRAY
64996: PPUSH
64997: LD_VAR 0 7
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PUSH
65006: LD_INT 2
65008: ARRAY
65009: PPUSH
65010: CALL_OW 116
65014: GO 65305
// if path > tag then
65016: LD_VAR 0 2
65020: PUSH
65021: LD_VAR 0 9
65025: GREATER
65026: IFFALSE 65234
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65028: LD_ADDR_VAR 0 6
65032: PUSH
65033: LD_VAR 0 5
65037: PPUSH
65038: LD_INT 91
65040: PUSH
65041: LD_VAR 0 4
65045: PUSH
65046: LD_INT 8
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: PPUSH
65054: CALL_OW 72
65058: ST_TO_ADDR
// if nearEnemy then
65059: LD_VAR 0 6
65063: IFFALSE 65132
// begin if GetWeapon ( i ) = ru_time_lapser then
65065: LD_VAR 0 4
65069: PPUSH
65070: CALL_OW 264
65074: PUSH
65075: LD_INT 49
65077: EQUAL
65078: IFFALSE 65106
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65080: LD_VAR 0 4
65084: PPUSH
65085: LD_VAR 0 6
65089: PPUSH
65090: LD_VAR 0 4
65094: PPUSH
65095: CALL_OW 74
65099: PPUSH
65100: CALL_OW 112
65104: GO 65130
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65106: LD_VAR 0 4
65110: PPUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: LD_VAR 0 4
65120: PPUSH
65121: CALL_OW 74
65125: PPUSH
65126: CALL 66390 0 2
// end else
65130: GO 65232
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65132: LD_VAR 0 4
65136: PPUSH
65137: LD_VAR 0 2
65141: PUSH
65142: LD_VAR 0 9
65146: ARRAY
65147: PUSH
65148: LD_INT 1
65150: ARRAY
65151: PPUSH
65152: LD_VAR 0 2
65156: PUSH
65157: LD_VAR 0 9
65161: ARRAY
65162: PUSH
65163: LD_INT 2
65165: ARRAY
65166: PPUSH
65167: CALL_OW 297
65171: PUSH
65172: LD_INT 6
65174: GREATER
65175: IFFALSE 65218
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65177: LD_VAR 0 4
65181: PPUSH
65182: LD_VAR 0 2
65186: PUSH
65187: LD_VAR 0 9
65191: ARRAY
65192: PUSH
65193: LD_INT 1
65195: ARRAY
65196: PPUSH
65197: LD_VAR 0 2
65201: PUSH
65202: LD_VAR 0 9
65206: ARRAY
65207: PUSH
65208: LD_INT 2
65210: ARRAY
65211: PPUSH
65212: CALL_OW 114
65216: GO 65232
// SetTag ( i , tag ) ;
65218: LD_VAR 0 4
65222: PPUSH
65223: LD_VAR 0 9
65227: PPUSH
65228: CALL_OW 109
// end else
65232: GO 65305
// if enemy then
65234: LD_VAR 0 5
65238: IFFALSE 65305
// begin if GetWeapon ( i ) = ru_time_lapser then
65240: LD_VAR 0 4
65244: PPUSH
65245: CALL_OW 264
65249: PUSH
65250: LD_INT 49
65252: EQUAL
65253: IFFALSE 65281
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65255: LD_VAR 0 4
65259: PPUSH
65260: LD_VAR 0 5
65264: PPUSH
65265: LD_VAR 0 4
65269: PPUSH
65270: CALL_OW 74
65274: PPUSH
65275: CALL_OW 112
65279: GO 65305
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65281: LD_VAR 0 4
65285: PPUSH
65286: LD_VAR 0 5
65290: PPUSH
65291: LD_VAR 0 4
65295: PPUSH
65296: CALL_OW 74
65300: PPUSH
65301: CALL 66390 0 2
// end ; end ;
65305: GO 64877
65307: POP
65308: POP
// end ;
65309: LD_VAR 0 3
65313: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
// if not unit or IsInUnit ( unit ) then
65319: LD_VAR 0 1
65323: NOT
65324: IFTRUE 65337
65326: PUSH
65327: LD_VAR 0 1
65331: PPUSH
65332: CALL_OW 310
65336: OR
65337: IFFALSE 65341
// exit ;
65339: GO 65432
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65341: LD_ADDR_VAR 0 4
65345: PUSH
65346: LD_VAR 0 1
65350: PPUSH
65351: CALL_OW 250
65355: PPUSH
65356: LD_VAR 0 2
65360: PPUSH
65361: LD_INT 1
65363: PPUSH
65364: CALL_OW 272
65368: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65369: LD_ADDR_VAR 0 5
65373: PUSH
65374: LD_VAR 0 1
65378: PPUSH
65379: CALL_OW 251
65383: PPUSH
65384: LD_VAR 0 2
65388: PPUSH
65389: LD_INT 1
65391: PPUSH
65392: CALL_OW 273
65396: ST_TO_ADDR
// if ValidHex ( x , y ) then
65397: LD_VAR 0 4
65401: PPUSH
65402: LD_VAR 0 5
65406: PPUSH
65407: CALL_OW 488
65411: IFFALSE 65432
// ComTurnXY ( unit , x , y ) ;
65413: LD_VAR 0 1
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: LD_VAR 0 5
65427: PPUSH
65428: CALL_OW 118
// end ;
65432: LD_VAR 0 3
65436: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65437: LD_INT 0
65439: PPUSH
65440: PPUSH
// result := false ;
65441: LD_ADDR_VAR 0 3
65445: PUSH
65446: LD_INT 0
65448: ST_TO_ADDR
// if not units then
65449: LD_VAR 0 2
65453: NOT
65454: IFFALSE 65458
// exit ;
65456: GO 65503
// for i in units do
65458: LD_ADDR_VAR 0 4
65462: PUSH
65463: LD_VAR 0 2
65467: PUSH
65468: FOR_IN
65469: IFFALSE 65501
// if See ( side , i ) then
65471: LD_VAR 0 1
65475: PPUSH
65476: LD_VAR 0 4
65480: PPUSH
65481: CALL_OW 292
65485: IFFALSE 65499
// begin result := true ;
65487: LD_ADDR_VAR 0 3
65491: PUSH
65492: LD_INT 1
65494: ST_TO_ADDR
// exit ;
65495: POP
65496: POP
65497: GO 65503
// end ;
65499: GO 65468
65501: POP
65502: POP
// end ;
65503: LD_VAR 0 3
65507: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65508: LD_INT 0
65510: PPUSH
65511: PPUSH
65512: PPUSH
65513: PPUSH
// if not unit or not points then
65514: LD_VAR 0 1
65518: NOT
65519: IFTRUE 65528
65521: PUSH
65522: LD_VAR 0 2
65526: NOT
65527: OR
65528: IFFALSE 65532
// exit ;
65530: GO 65622
// dist := 99999 ;
65532: LD_ADDR_VAR 0 5
65536: PUSH
65537: LD_INT 99999
65539: ST_TO_ADDR
// for i in points do
65540: LD_ADDR_VAR 0 4
65544: PUSH
65545: LD_VAR 0 2
65549: PUSH
65550: FOR_IN
65551: IFFALSE 65620
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65553: LD_ADDR_VAR 0 6
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: LD_VAR 0 4
65567: PUSH
65568: LD_INT 1
65570: ARRAY
65571: PPUSH
65572: LD_VAR 0 4
65576: PUSH
65577: LD_INT 2
65579: ARRAY
65580: PPUSH
65581: CALL_OW 297
65585: ST_TO_ADDR
// if tmpDist < dist then
65586: LD_VAR 0 6
65590: PUSH
65591: LD_VAR 0 5
65595: LESS
65596: IFFALSE 65618
// begin result := i ;
65598: LD_ADDR_VAR 0 3
65602: PUSH
65603: LD_VAR 0 4
65607: ST_TO_ADDR
// dist := tmpDist ;
65608: LD_ADDR_VAR 0 5
65612: PUSH
65613: LD_VAR 0 6
65617: ST_TO_ADDR
// end ; end ;
65618: GO 65550
65620: POP
65621: POP
// end ;
65622: LD_VAR 0 3
65626: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65627: LD_INT 0
65629: PPUSH
// uc_side := side ;
65630: LD_ADDR_OWVAR 20
65634: PUSH
65635: LD_VAR 0 1
65639: ST_TO_ADDR
// uc_nation := 3 ;
65640: LD_ADDR_OWVAR 21
65644: PUSH
65645: LD_INT 3
65647: ST_TO_ADDR
// vc_chassis := 25 ;
65648: LD_ADDR_OWVAR 37
65652: PUSH
65653: LD_INT 25
65655: ST_TO_ADDR
// vc_engine := engine_siberite ;
65656: LD_ADDR_OWVAR 39
65660: PUSH
65661: LD_INT 3
65663: ST_TO_ADDR
// vc_control := control_computer ;
65664: LD_ADDR_OWVAR 38
65668: PUSH
65669: LD_INT 3
65671: ST_TO_ADDR
// vc_weapon := 59 ;
65672: LD_ADDR_OWVAR 40
65676: PUSH
65677: LD_INT 59
65679: ST_TO_ADDR
// result := CreateVehicle ;
65680: LD_ADDR_VAR 0 5
65684: PUSH
65685: CALL_OW 45
65689: ST_TO_ADDR
// SetDir ( result , d ) ;
65690: LD_VAR 0 5
65694: PPUSH
65695: LD_VAR 0 4
65699: PPUSH
65700: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65704: LD_VAR 0 5
65708: PPUSH
65709: LD_VAR 0 2
65713: PPUSH
65714: LD_VAR 0 3
65718: PPUSH
65719: LD_INT 0
65721: PPUSH
65722: CALL_OW 48
// end ;
65726: LD_VAR 0 5
65730: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65731: LD_INT 0
65733: PPUSH
65734: PPUSH
65735: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65736: LD_ADDR_VAR 0 2
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65759: LD_VAR 0 1
65763: NOT
65764: IFTRUE 65797
65766: PUSH
65767: LD_VAR 0 1
65771: PPUSH
65772: CALL_OW 264
65776: PUSH
65777: LD_INT 12
65779: PUSH
65780: LD_INT 51
65782: PUSH
65783: LD_INT 32
65785: PUSH
65786: LD_INT 89
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: IN
65795: NOT
65796: OR
65797: IFFALSE 65801
// exit ;
65799: GO 65899
// for i := 1 to 3 do
65801: LD_ADDR_VAR 0 3
65805: PUSH
65806: DOUBLE
65807: LD_INT 1
65809: DEC
65810: ST_TO_ADDR
65811: LD_INT 3
65813: PUSH
65814: FOR_TO
65815: IFFALSE 65897
// begin tmp := GetCargo ( cargo , i ) ;
65817: LD_ADDR_VAR 0 4
65821: PUSH
65822: LD_VAR 0 1
65826: PPUSH
65827: LD_VAR 0 3
65831: PPUSH
65832: CALL_OW 289
65836: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65837: LD_ADDR_VAR 0 2
65841: PUSH
65842: LD_VAR 0 2
65846: PPUSH
65847: LD_VAR 0 3
65851: PPUSH
65852: LD_VAR 0 4
65856: PPUSH
65857: CALL_OW 1
65861: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65862: LD_ADDR_VAR 0 2
65866: PUSH
65867: LD_VAR 0 2
65871: PPUSH
65872: LD_INT 4
65874: PPUSH
65875: LD_VAR 0 2
65879: PUSH
65880: LD_INT 4
65882: ARRAY
65883: PUSH
65884: LD_VAR 0 4
65888: PLUS
65889: PPUSH
65890: CALL_OW 1
65894: ST_TO_ADDR
// end ;
65895: GO 65814
65897: POP
65898: POP
// end ;
65899: LD_VAR 0 2
65903: RET
// export function Length ( array ) ; begin
65904: LD_INT 0
65906: PPUSH
// result := array + 0 ;
65907: LD_ADDR_VAR 0 2
65911: PUSH
65912: LD_VAR 0 1
65916: PUSH
65917: LD_INT 0
65919: PLUS
65920: ST_TO_ADDR
// end ;
65921: LD_VAR 0 2
65925: RET
// export function PrepareArray ( array ) ; begin
65926: LD_INT 0
65928: PPUSH
// result := array diff 0 ;
65929: LD_ADDR_VAR 0 2
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_INT 0
65941: DIFF
65942: ST_TO_ADDR
// if not result [ 1 ] then
65943: LD_VAR 0 2
65947: PUSH
65948: LD_INT 1
65950: ARRAY
65951: NOT
65952: IFFALSE 65972
// result := Delete ( result , 1 ) ;
65954: LD_ADDR_VAR 0 2
65958: PUSH
65959: LD_VAR 0 2
65963: PPUSH
65964: LD_INT 1
65966: PPUSH
65967: CALL_OW 3
65971: ST_TO_ADDR
// end ;
65972: LD_VAR 0 2
65976: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
// sibRocketRange := 25 ;
65983: LD_ADDR_VAR 0 6
65987: PUSH
65988: LD_INT 25
65990: ST_TO_ADDR
// result := false ;
65991: LD_ADDR_VAR 0 4
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// for i := 0 to 5 do
65999: LD_ADDR_VAR 0 5
66003: PUSH
66004: DOUBLE
66005: LD_INT 0
66007: DEC
66008: ST_TO_ADDR
66009: LD_INT 5
66011: PUSH
66012: FOR_TO
66013: IFFALSE 66080
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66015: LD_VAR 0 1
66019: PPUSH
66020: LD_VAR 0 5
66024: PPUSH
66025: LD_VAR 0 6
66029: PPUSH
66030: CALL_OW 272
66034: PPUSH
66035: LD_VAR 0 2
66039: PPUSH
66040: LD_VAR 0 5
66044: PPUSH
66045: LD_VAR 0 6
66049: PPUSH
66050: CALL_OW 273
66054: PPUSH
66055: LD_VAR 0 3
66059: PPUSH
66060: CALL_OW 309
66064: IFFALSE 66078
// begin result := true ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_INT 1
66073: ST_TO_ADDR
// exit ;
66074: POP
66075: POP
66076: GO 66082
// end ;
66078: GO 66012
66080: POP
66081: POP
// end ;
66082: LD_VAR 0 4
66086: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66087: LD_INT 0
66089: PPUSH
66090: PPUSH
66091: PPUSH
// if btype = b_depot then
66092: LD_VAR 0 2
66096: PUSH
66097: LD_INT 0
66099: EQUAL
66100: IFFALSE 66112
// begin result := true ;
66102: LD_ADDR_VAR 0 3
66106: PUSH
66107: LD_INT 1
66109: ST_TO_ADDR
// exit ;
66110: GO 66232
// end ; pom := GetBase ( depot ) ;
66112: LD_ADDR_VAR 0 4
66116: PUSH
66117: LD_VAR 0 1
66121: PPUSH
66122: CALL_OW 274
66126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66127: LD_ADDR_VAR 0 5
66131: PUSH
66132: LD_VAR 0 2
66136: PPUSH
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 248
66146: PPUSH
66147: CALL_OW 450
66151: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66152: LD_ADDR_VAR 0 3
66156: PUSH
66157: LD_VAR 0 4
66161: PPUSH
66162: LD_INT 1
66164: PPUSH
66165: CALL_OW 275
66169: PUSH
66170: LD_VAR 0 5
66174: PUSH
66175: LD_INT 1
66177: ARRAY
66178: GREATEREQUAL
66179: IFFALSE 66205
66181: PUSH
66182: LD_VAR 0 4
66186: PPUSH
66187: LD_INT 2
66189: PPUSH
66190: CALL_OW 275
66194: PUSH
66195: LD_VAR 0 5
66199: PUSH
66200: LD_INT 2
66202: ARRAY
66203: GREATEREQUAL
66204: AND
66205: IFFALSE 66231
66207: PUSH
66208: LD_VAR 0 4
66212: PPUSH
66213: LD_INT 3
66215: PPUSH
66216: CALL_OW 275
66220: PUSH
66221: LD_VAR 0 5
66225: PUSH
66226: LD_INT 3
66228: ARRAY
66229: GREATEREQUAL
66230: AND
66231: ST_TO_ADDR
// end ;
66232: LD_VAR 0 3
66236: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66237: LD_INT 0
66239: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66240: LD_VAR 0 1
66244: PPUSH
66245: LD_VAR 0 2
66249: PPUSH
66250: LD_INT 0
66252: PPUSH
66253: LD_INT 0
66255: PPUSH
66256: LD_INT 1
66258: PPUSH
66259: LD_INT 0
66261: PPUSH
66262: CALL_OW 587
// end ;
66266: LD_VAR 0 3
66270: RET
// export function CenterOnNow ( unit ) ; begin
66271: LD_INT 0
66273: PPUSH
// result := IsInUnit ( unit ) ;
66274: LD_ADDR_VAR 0 2
66278: PUSH
66279: LD_VAR 0 1
66283: PPUSH
66284: CALL_OW 310
66288: ST_TO_ADDR
// if not result then
66289: LD_VAR 0 2
66293: NOT
66294: IFFALSE 66306
// result := unit ;
66296: LD_ADDR_VAR 0 2
66300: PUSH
66301: LD_VAR 0 1
66305: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: CALL_OW 87
// end ;
66315: LD_VAR 0 2
66319: RET
// export function ComMoveHex ( unit , hex ) ; begin
66320: LD_INT 0
66322: PPUSH
// if not hex then
66323: LD_VAR 0 2
66327: NOT
66328: IFFALSE 66332
// exit ;
66330: GO 66385
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66332: LD_VAR 0 2
66336: PUSH
66337: LD_INT 1
66339: ARRAY
66340: PPUSH
66341: LD_VAR 0 2
66345: PUSH
66346: LD_INT 2
66348: ARRAY
66349: PPUSH
66350: CALL_OW 428
66354: IFFALSE 66358
// exit ;
66356: GO 66385
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66358: LD_VAR 0 1
66362: PPUSH
66363: LD_VAR 0 2
66367: PUSH
66368: LD_INT 1
66370: ARRAY
66371: PPUSH
66372: LD_VAR 0 2
66376: PUSH
66377: LD_INT 2
66379: ARRAY
66380: PPUSH
66381: CALL_OW 111
// end ;
66385: LD_VAR 0 3
66389: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
66394: PPUSH
// if not unit or not enemy then
66395: LD_VAR 0 1
66399: NOT
66400: IFTRUE 66409
66402: PUSH
66403: LD_VAR 0 2
66407: NOT
66408: OR
66409: IFFALSE 66413
// exit ;
66411: GO 66539
// x := GetX ( enemy ) ;
66413: LD_ADDR_VAR 0 4
66417: PUSH
66418: LD_VAR 0 2
66422: PPUSH
66423: CALL_OW 250
66427: ST_TO_ADDR
// y := GetY ( enemy ) ;
66428: LD_ADDR_VAR 0 5
66432: PUSH
66433: LD_VAR 0 2
66437: PPUSH
66438: CALL_OW 251
66442: ST_TO_ADDR
// if ValidHex ( x , y ) then
66443: LD_VAR 0 4
66447: PPUSH
66448: LD_VAR 0 5
66452: PPUSH
66453: CALL_OW 488
66457: IFFALSE 66539
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66459: LD_VAR 0 2
66463: PPUSH
66464: CALL_OW 247
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: IN
66479: IFTRUE 66502
66481: PUSH
66482: LD_VAR 0 1
66486: PPUSH
66487: CALL_OW 255
66491: PPUSH
66492: LD_VAR 0 2
66496: PPUSH
66497: CALL_OW 292
66501: OR
66502: IFFALSE 66520
// ComAttackUnit ( unit , enemy ) else
66504: LD_VAR 0 1
66508: PPUSH
66509: LD_VAR 0 2
66513: PPUSH
66514: CALL_OW 115
66518: GO 66539
// ComAgressiveMove ( unit , x , y ) ;
66520: LD_VAR 0 1
66524: PPUSH
66525: LD_VAR 0 4
66529: PPUSH
66530: LD_VAR 0 5
66534: PPUSH
66535: CALL_OW 114
// end ;
66539: LD_VAR 0 3
66543: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66544: LD_INT 0
66546: PPUSH
66547: PPUSH
66548: PPUSH
// list := AreaToList ( area , 0 ) ;
66549: LD_ADDR_VAR 0 5
66553: PUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: LD_INT 0
66561: PPUSH
66562: CALL_OW 517
66566: ST_TO_ADDR
// if not list then
66567: LD_VAR 0 5
66571: NOT
66572: IFFALSE 66576
// exit ;
66574: GO 66706
// if all then
66576: LD_VAR 0 2
66580: IFFALSE 66668
// begin for i := 1 to list [ 1 ] do
66582: LD_ADDR_VAR 0 4
66586: PUSH
66587: DOUBLE
66588: LD_INT 1
66590: DEC
66591: ST_TO_ADDR
66592: LD_VAR 0 5
66596: PUSH
66597: LD_INT 1
66599: ARRAY
66600: PUSH
66601: FOR_TO
66602: IFFALSE 66664
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66604: LD_ADDR_VAR 0 3
66608: PUSH
66609: LD_VAR 0 3
66613: PPUSH
66614: LD_VAR 0 3
66618: PUSH
66619: LD_INT 1
66621: PLUS
66622: PPUSH
66623: LD_VAR 0 5
66627: PUSH
66628: LD_INT 1
66630: ARRAY
66631: PUSH
66632: LD_VAR 0 4
66636: ARRAY
66637: PUSH
66638: LD_VAR 0 5
66642: PUSH
66643: LD_INT 2
66645: ARRAY
66646: PUSH
66647: LD_VAR 0 4
66651: ARRAY
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PPUSH
66657: CALL_OW 1
66661: ST_TO_ADDR
66662: GO 66601
66664: POP
66665: POP
// exit ;
66666: GO 66706
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66668: LD_ADDR_VAR 0 3
66672: PUSH
66673: LD_VAR 0 5
66677: PUSH
66678: LD_INT 1
66680: ARRAY
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PUSH
66686: LD_VAR 0 5
66690: PUSH
66691: LD_INT 2
66693: ARRAY
66694: PUSH
66695: LD_INT 1
66697: ARRAY
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: ST_TO_ADDR
// end ;
66706: LD_VAR 0 3
66710: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66711: LD_INT 0
66713: PPUSH
66714: PPUSH
// list := AreaToList ( area , 0 ) ;
66715: LD_ADDR_VAR 0 4
66719: PUSH
66720: LD_VAR 0 1
66724: PPUSH
66725: LD_INT 0
66727: PPUSH
66728: CALL_OW 517
66732: ST_TO_ADDR
// if not list then
66733: LD_VAR 0 4
66737: NOT
66738: IFFALSE 66742
// exit ;
66740: GO 66783
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66742: LD_ADDR_VAR 0 3
66746: PUSH
66747: LD_VAR 0 4
66751: PUSH
66752: LD_INT 1
66754: ARRAY
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PUSH
66760: LD_VAR 0 4
66764: PUSH
66765: LD_INT 2
66767: ARRAY
66768: PUSH
66769: LD_INT 1
66771: ARRAY
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// end ;
66783: LD_VAR 0 3
66787: RET
// export function First ( array ) ; begin
66788: LD_INT 0
66790: PPUSH
// if not array then
66791: LD_VAR 0 1
66795: NOT
66796: IFFALSE 66800
// exit ;
66798: GO 66814
// result := array [ 1 ] ;
66800: LD_ADDR_VAR 0 2
66804: PUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: ST_TO_ADDR
// end ;
66814: LD_VAR 0 2
66818: RET
// export function Last ( array ) ; begin
66819: LD_INT 0
66821: PPUSH
// if not array then
66822: LD_VAR 0 1
66826: NOT
66827: IFFALSE 66831
// exit ;
66829: GO 66847
// result := array [ array ] ;
66831: LD_ADDR_VAR 0 2
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: LD_VAR 0 1
66845: ARRAY
66846: ST_TO_ADDR
// end ;
66847: LD_VAR 0 2
66851: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
66852: LD_INT 0
66854: PPUSH
66855: PPUSH
// result := [ ] ;
66856: LD_ADDR_VAR 0 5
66860: PUSH
66861: EMPTY
66862: ST_TO_ADDR
// if not array then
66863: LD_VAR 0 1
66867: NOT
66868: IFFALSE 66872
// exit ;
66870: GO 66984
// for i := 1 to array do
66872: LD_ADDR_VAR 0 6
66876: PUSH
66877: DOUBLE
66878: LD_INT 1
66880: DEC
66881: ST_TO_ADDR
66882: LD_VAR 0 1
66886: PUSH
66887: FOR_TO
66888: IFFALSE 66982
// if array [ i ] [ index ] = value then
66890: LD_VAR 0 1
66894: PUSH
66895: LD_VAR 0 6
66899: ARRAY
66900: PUSH
66901: LD_VAR 0 2
66905: ARRAY
66906: PUSH
66907: LD_VAR 0 3
66911: EQUAL
66912: IFFALSE 66980
// begin if indexColumn then
66914: LD_VAR 0 4
66918: IFFALSE 66954
// result := Join ( result , array [ i ] [ indexColumn ] ) else
66920: LD_ADDR_VAR 0 5
66924: PUSH
66925: LD_VAR 0 5
66929: PPUSH
66930: LD_VAR 0 1
66934: PUSH
66935: LD_VAR 0 6
66939: ARRAY
66940: PUSH
66941: LD_VAR 0 4
66945: ARRAY
66946: PPUSH
66947: CALL 61992 0 2
66951: ST_TO_ADDR
66952: GO 66980
// result := Join ( result , array [ i ] ) ;
66954: LD_ADDR_VAR 0 5
66958: PUSH
66959: LD_VAR 0 5
66963: PPUSH
66964: LD_VAR 0 1
66968: PUSH
66969: LD_VAR 0 6
66973: ARRAY
66974: PPUSH
66975: CALL 61992 0 2
66979: ST_TO_ADDR
// end ;
66980: GO 66887
66982: POP
66983: POP
// end ;
66984: LD_VAR 0 5
66988: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
66989: LD_INT 0
66991: PPUSH
// if not vehicles or not parkingPoint then
66992: LD_VAR 0 1
66996: NOT
66997: IFTRUE 67006
66999: PUSH
67000: LD_VAR 0 2
67004: NOT
67005: OR
67006: IFFALSE 67010
// exit ;
67008: GO 67108
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67010: LD_ADDR_VAR 0 1
67014: PUSH
67015: LD_VAR 0 1
67019: PPUSH
67020: LD_INT 50
67022: PUSH
67023: EMPTY
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 92
67031: PUSH
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 1
67039: ARRAY
67040: PUSH
67041: LD_VAR 0 2
67045: PUSH
67046: LD_INT 2
67048: ARRAY
67049: PUSH
67050: LD_INT 8
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PPUSH
67067: CALL_OW 72
67071: ST_TO_ADDR
// if not vehicles then
67072: LD_VAR 0 1
67076: NOT
67077: IFFALSE 67081
// exit ;
67079: GO 67108
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 2
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: LD_VAR 0 2
67099: PUSH
67100: LD_INT 2
67102: ARRAY
67103: PPUSH
67104: CALL_OW 111
// end ;
67108: LD_VAR 0 3
67112: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67113: LD_INT 0
67115: PPUSH
67116: PPUSH
67117: PPUSH
// if not side or not area then
67118: LD_VAR 0 1
67122: NOT
67123: IFTRUE 67132
67125: PUSH
67126: LD_VAR 0 2
67130: NOT
67131: OR
67132: IFFALSE 67136
// exit ;
67134: GO 67255
// tmp := AreaToList ( area , 0 ) ;
67136: LD_ADDR_VAR 0 5
67140: PUSH
67141: LD_VAR 0 2
67145: PPUSH
67146: LD_INT 0
67148: PPUSH
67149: CALL_OW 517
67153: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67154: LD_ADDR_VAR 0 4
67158: PUSH
67159: DOUBLE
67160: LD_INT 1
67162: DEC
67163: ST_TO_ADDR
67164: LD_VAR 0 5
67168: PUSH
67169: LD_INT 1
67171: ARRAY
67172: PUSH
67173: FOR_TO
67174: IFFALSE 67253
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67176: LD_VAR 0 5
67180: PUSH
67181: LD_INT 1
67183: ARRAY
67184: PUSH
67185: LD_VAR 0 4
67189: ARRAY
67190: PPUSH
67191: LD_VAR 0 5
67195: PUSH
67196: LD_INT 2
67198: ARRAY
67199: PUSH
67200: LD_VAR 0 4
67204: ARRAY
67205: PPUSH
67206: CALL_OW 351
67210: IFFALSE 67251
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67212: LD_VAR 0 5
67216: PUSH
67217: LD_INT 1
67219: ARRAY
67220: PUSH
67221: LD_VAR 0 4
67225: ARRAY
67226: PPUSH
67227: LD_VAR 0 5
67231: PUSH
67232: LD_INT 2
67234: ARRAY
67235: PUSH
67236: LD_VAR 0 4
67240: ARRAY
67241: PPUSH
67242: LD_VAR 0 1
67246: PPUSH
67247: CALL_OW 244
// end ;
67251: GO 67173
67253: POP
67254: POP
// end ;
67255: LD_VAR 0 3
67259: RET
// export function UniqueArray ( array ) ; var i ; begin
67260: LD_INT 0
67262: PPUSH
67263: PPUSH
// result := [ ] ;
67264: LD_ADDR_VAR 0 2
67268: PUSH
67269: EMPTY
67270: ST_TO_ADDR
// if not array then
67271: LD_VAR 0 1
67275: NOT
67276: IFFALSE 67280
// exit ;
67278: GO 67341
// for i := 1 to array do
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: DOUBLE
67286: LD_INT 1
67288: DEC
67289: ST_TO_ADDR
67290: LD_VAR 0 1
67294: PUSH
67295: FOR_TO
67296: IFFALSE 67339
// if not array [ i ] in result then
67298: LD_VAR 0 1
67302: PUSH
67303: LD_VAR 0 3
67307: ARRAY
67308: PUSH
67309: LD_VAR 0 2
67313: IN
67314: NOT
67315: IFFALSE 67337
// result := Join ( result , i ) ;
67317: LD_ADDR_VAR 0 2
67321: PUSH
67322: LD_VAR 0 2
67326: PPUSH
67327: LD_VAR 0 3
67331: PPUSH
67332: CALL 61992 0 2
67336: ST_TO_ADDR
67337: GO 67295
67339: POP
67340: POP
// end ; end_of_file
67341: LD_VAR 0 2
67345: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67346: LD_VAR 0 1
67350: PUSH
67351: LD_INT 200
67353: DOUBLE
67354: GREATEREQUAL
67355: IFFALSE 67363
67357: LD_INT 299
67359: DOUBLE
67360: LESSEQUAL
67361: IFTRUE 67365
67363: GO 67397
67365: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 2
67375: PPUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: LD_VAR 0 4
67385: PPUSH
67386: LD_VAR 0 5
67390: PPUSH
67391: CALL 68178 0 5
67395: GO 67474
67397: LD_INT 300
67399: DOUBLE
67400: GREATEREQUAL
67401: IFFALSE 67409
67403: LD_INT 399
67405: DOUBLE
67406: LESSEQUAL
67407: IFTRUE 67411
67409: GO 67473
67411: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67412: LD_VAR 0 1
67416: PPUSH
67417: LD_VAR 0 2
67421: PPUSH
67422: LD_VAR 0 3
67426: PPUSH
67427: LD_VAR 0 4
67431: PPUSH
67432: LD_VAR 0 5
67436: PPUSH
67437: LD_VAR 0 6
67441: PPUSH
67442: LD_VAR 0 7
67446: PPUSH
67447: LD_VAR 0 8
67451: PPUSH
67452: LD_VAR 0 9
67456: PPUSH
67457: LD_VAR 0 10
67461: PPUSH
67462: LD_VAR 0 11
67466: PPUSH
67467: CALL 20389 0 11
67471: GO 67474
67473: POP
// end ;
67474: PPOPN 11
67476: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67477: LD_VAR 0 1
67481: PPUSH
67482: LD_VAR 0 2
67486: PPUSH
67487: LD_VAR 0 3
67491: PPUSH
67492: LD_VAR 0 4
67496: PPUSH
67497: LD_VAR 0 5
67501: PPUSH
67502: CALL 67559 0 5
// end ; end_of_file
67506: PPOPN 5
67508: END
// export function SOS_UnitDestroyed ( un ) ; begin
67509: LD_INT 0
67511: PPUSH
// ComRadiation ( un ) ;
67512: LD_VAR 0 1
67516: PPUSH
67517: CALL 68598 0 1
// end ;
67521: LD_VAR 0 2
67525: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67526: LD_INT 0
67528: PPUSH
// ComRadiation ( un ) ;
67529: LD_VAR 0 1
67533: PPUSH
67534: CALL 68598 0 1
// end ;
67538: LD_VAR 0 2
67542: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67543: LD_INT 0
67545: PPUSH
// end ;
67546: LD_VAR 0 4
67550: RET
// export function SOS_Command ( cmd ) ; begin
67551: LD_INT 0
67553: PPUSH
// end ;
67554: LD_VAR 0 2
67558: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67559: LD_INT 0
67561: PPUSH
// end ;
67562: LD_VAR 0 6
67566: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
67567: LD_INT 0
67569: PPUSH
67570: PPUSH
67571: PPUSH
67572: PPUSH
// if not vehicle or not factory then
67573: LD_VAR 0 1
67577: NOT
67578: IFTRUE 67587
67580: PUSH
67581: LD_VAR 0 2
67585: NOT
67586: OR
67587: IFFALSE 67591
// exit ;
67589: GO 68173
// if not factoryWaypoints then
67591: LD_EXP 78
67595: NOT
67596: IFFALSE 67600
// exit ;
67598: GO 68173
// for i := 1 to Count ( factoryWaypoints ) do
67600: LD_ADDR_VAR 0 4
67604: PUSH
67605: DOUBLE
67606: LD_INT 1
67608: DEC
67609: ST_TO_ADDR
67610: LD_EXP 78
67614: PPUSH
67615: CALL 26060 0 1
67619: PUSH
67620: FOR_TO
67621: IFFALSE 68171
// if factoryWaypoints [ i ] [ 2 ] = factory then
67623: LD_EXP 78
67627: PUSH
67628: LD_VAR 0 4
67632: ARRAY
67633: PUSH
67634: LD_INT 2
67636: ARRAY
67637: PUSH
67638: LD_VAR 0 2
67642: EQUAL
67643: IFFALSE 68169
// begin if GetControl ( vehicle ) = control_manual then
67645: LD_VAR 0 1
67649: PPUSH
67650: CALL_OW 263
67654: PUSH
67655: LD_INT 1
67657: EQUAL
67658: IFFALSE 68022
// begin driver := IsDrivenBy ( vehicle ) ;
67660: LD_ADDR_VAR 0 5
67664: PUSH
67665: LD_VAR 0 1
67669: PPUSH
67670: CALL_OW 311
67674: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
67675: LD_VAR 0 5
67679: PUSH
67680: LD_EXP 79
67684: IN
67685: IFTRUE 67699
67687: PUSH
67688: LD_VAR 0 1
67692: PUSH
67693: LD_EXP 79
67697: IN
67698: OR
67699: IFFALSE 67705
// exit ;
67701: POP
67702: POP
67703: GO 68173
// if not HasTask ( driver ) then
67705: LD_VAR 0 5
67709: PPUSH
67710: CALL_OW 314
67714: NOT
67715: IFFALSE 68020
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
67717: LD_ADDR_EXP 79
67721: PUSH
67722: LD_EXP 79
67726: PPUSH
67727: LD_VAR 0 5
67731: PPUSH
67732: CALL 61992 0 2
67736: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
67737: LD_ADDR_EXP 79
67741: PUSH
67742: LD_EXP 79
67746: PPUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: CALL 61992 0 2
67756: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
67757: LD_ADDR_VAR 0 6
67761: PUSH
67762: LD_EXP 78
67766: PUSH
67767: LD_VAR 0 4
67771: ARRAY
67772: PUSH
67773: LD_INT 3
67775: ARRAY
67776: PPUSH
67777: LD_EXP 78
67781: PUSH
67782: LD_VAR 0 4
67786: ARRAY
67787: PUSH
67788: LD_INT 4
67790: ARRAY
67791: PPUSH
67792: CALL_OW 428
67796: ST_TO_ADDR
// if hex then
67797: LD_VAR 0 6
67801: IFFALSE 67819
// ComMoveUnit ( driver , hex ) else
67803: LD_VAR 0 5
67807: PPUSH
67808: LD_VAR 0 6
67812: PPUSH
67813: CALL_OW 112
67817: GO 67903
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
67819: LD_VAR 0 1
67823: PPUSH
67824: LD_EXP 78
67828: PUSH
67829: LD_VAR 0 4
67833: ARRAY
67834: PUSH
67835: LD_INT 3
67837: ARRAY
67838: PPUSH
67839: LD_EXP 78
67843: PUSH
67844: LD_VAR 0 4
67848: ARRAY
67849: PUSH
67850: LD_INT 4
67852: ARRAY
67853: PPUSH
67854: CALL_OW 297
67858: PUSH
67859: LD_INT 0
67861: GREATER
67862: IFFALSE 67903
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
67864: LD_VAR 0 5
67868: PPUSH
67869: LD_EXP 78
67873: PUSH
67874: LD_VAR 0 4
67878: ARRAY
67879: PUSH
67880: LD_INT 3
67882: ARRAY
67883: PPUSH
67884: LD_EXP 78
67888: PUSH
67889: LD_VAR 0 4
67893: ARRAY
67894: PUSH
67895: LD_INT 4
67897: ARRAY
67898: PPUSH
67899: CALL_OW 111
// AddComExitVehicle ( driver ) ;
67903: LD_VAR 0 5
67907: PPUSH
67908: CALL_OW 181
// if Multiplayer then
67912: LD_OWVAR 4
67916: IFFALSE 67965
// begin repeat wait ( 10 ) ;
67918: LD_INT 10
67920: PPUSH
67921: CALL_OW 67
// until not IsInUnit ( driver ) ;
67925: LD_VAR 0 5
67929: PPUSH
67930: CALL_OW 310
67934: NOT
67935: IFFALSE 67918
// if not HasTask ( driver ) then
67937: LD_VAR 0 5
67941: PPUSH
67942: CALL_OW 314
67946: NOT
67947: IFFALSE 67963
// ComEnterUnit ( driver , factory ) ;
67949: LD_VAR 0 5
67953: PPUSH
67954: LD_VAR 0 2
67958: PPUSH
67959: CALL_OW 120
// end else
67963: GO 67979
// AddComEnterUnit ( driver , factory ) ;
67965: LD_VAR 0 5
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: CALL_OW 180
// wait ( 0 0$1 ) ;
67979: LD_INT 35
67981: PPUSH
67982: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
67986: LD_ADDR_EXP 79
67990: PUSH
67991: LD_EXP 79
67995: PUSH
67996: LD_VAR 0 5
68000: DIFF
68001: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
68002: LD_ADDR_EXP 79
68006: PUSH
68007: LD_EXP 79
68011: PUSH
68012: LD_VAR 0 1
68016: DIFF
68017: ST_TO_ADDR
// break ;
68018: GO 68171
// end ; end else
68020: GO 68169
// if GetControl ( vehicle ) = control_remote then
68022: LD_VAR 0 1
68026: PPUSH
68027: CALL_OW 263
68031: PUSH
68032: LD_INT 2
68034: EQUAL
68035: IFFALSE 68121
// begin wait ( 0 0$2 ) ;
68037: LD_INT 70
68039: PPUSH
68040: CALL_OW 67
// repeat wait ( 10 ) ;
68044: LD_INT 10
68046: PPUSH
68047: CALL_OW 67
// Connect ( vehicle ) ;
68051: LD_VAR 0 1
68055: PPUSH
68056: CALL 32304 0 1
// until IsControledBy ( vehicle ) ;
68060: LD_VAR 0 1
68064: PPUSH
68065: CALL_OW 312
68069: IFFALSE 68044
// wait ( 10 ) ;
68071: LD_INT 10
68073: PPUSH
68074: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
68078: LD_VAR 0 1
68082: PPUSH
68083: LD_EXP 78
68087: PUSH
68088: LD_VAR 0 4
68092: ARRAY
68093: PUSH
68094: LD_INT 3
68096: ARRAY
68097: PPUSH
68098: LD_EXP 78
68102: PUSH
68103: LD_VAR 0 4
68107: ARRAY
68108: PUSH
68109: LD_INT 4
68111: ARRAY
68112: PPUSH
68113: CALL_OW 111
// break ;
68117: GO 68171
// end else
68119: GO 68169
// begin wait ( 0 0$3 ) ;
68121: LD_INT 105
68123: PPUSH
68124: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
68128: LD_VAR 0 1
68132: PPUSH
68133: LD_EXP 78
68137: PUSH
68138: LD_VAR 0 4
68142: ARRAY
68143: PUSH
68144: LD_INT 3
68146: ARRAY
68147: PPUSH
68148: LD_EXP 78
68152: PUSH
68153: LD_VAR 0 4
68157: ARRAY
68158: PUSH
68159: LD_INT 4
68161: ARRAY
68162: PPUSH
68163: CALL_OW 111
// break ;
68167: GO 68171
// end ; end ;
68169: GO 67620
68171: POP
68172: POP
// end ;
68173: LD_VAR 0 3
68177: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68178: LD_INT 0
68180: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 250
68188: EQUAL
68189: IFFALSE 68206
68191: PUSH
68192: LD_VAR 0 2
68196: PPUSH
68197: CALL_OW 264
68201: PUSH
68202: LD_INT 81
68204: EQUAL
68205: AND
68206: IFFALSE 68227
// MinerPlaceMine ( unit , x , y ) ;
68208: LD_VAR 0 2
68212: PPUSH
68213: LD_VAR 0 4
68217: PPUSH
68218: LD_VAR 0 5
68222: PPUSH
68223: CALL 71359 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68227: LD_VAR 0 1
68231: PUSH
68232: LD_INT 251
68234: EQUAL
68235: IFFALSE 68252
68237: PUSH
68238: LD_VAR 0 2
68242: PPUSH
68243: CALL_OW 264
68247: PUSH
68248: LD_INT 81
68250: EQUAL
68251: AND
68252: IFFALSE 68273
// MinerDetonateMine ( unit , x , y ) ;
68254: LD_VAR 0 2
68258: PPUSH
68259: LD_VAR 0 4
68263: PPUSH
68264: LD_VAR 0 5
68268: PPUSH
68269: CALL 71638 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68273: LD_VAR 0 1
68277: PUSH
68278: LD_INT 252
68280: EQUAL
68281: IFFALSE 68298
68283: PUSH
68284: LD_VAR 0 2
68288: PPUSH
68289: CALL_OW 264
68293: PUSH
68294: LD_INT 81
68296: EQUAL
68297: AND
68298: IFFALSE 68319
// MinerCreateMinefield ( unit , x , y ) ;
68300: LD_VAR 0 2
68304: PPUSH
68305: LD_VAR 0 4
68309: PPUSH
68310: LD_VAR 0 5
68314: PPUSH
68315: CALL 72057 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68319: LD_VAR 0 1
68323: PUSH
68324: LD_INT 253
68326: EQUAL
68327: IFFALSE 68344
68329: PUSH
68330: LD_VAR 0 2
68334: PPUSH
68335: CALL_OW 257
68339: PUSH
68340: LD_INT 5
68342: EQUAL
68343: AND
68344: IFFALSE 68365
// ComBinocular ( unit , x , y ) ;
68346: LD_VAR 0 2
68350: PPUSH
68351: LD_VAR 0 4
68355: PPUSH
68356: LD_VAR 0 5
68360: PPUSH
68361: CALL 72432 0 3
// if selectedUnit then
68365: LD_VAR 0 3
68369: IFFALSE 68429
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68371: LD_VAR 0 1
68375: PUSH
68376: LD_INT 254
68378: EQUAL
68379: IFFALSE 68396
68381: PUSH
68382: LD_VAR 0 2
68386: PPUSH
68387: CALL_OW 264
68391: PUSH
68392: LD_INT 99
68394: EQUAL
68395: AND
68396: IFFALSE 68413
68398: PUSH
68399: LD_VAR 0 3
68403: PPUSH
68404: CALL_OW 263
68408: PUSH
68409: LD_INT 3
68411: EQUAL
68412: AND
68413: IFFALSE 68429
// HackDestroyVehicle ( unit , selectedUnit ) ;
68415: LD_VAR 0 2
68419: PPUSH
68420: LD_VAR 0 3
68424: PPUSH
68425: CALL 70719 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68429: LD_VAR 0 1
68433: PUSH
68434: LD_INT 255
68436: EQUAL
68437: IFFALSE 68461
68439: PUSH
68440: LD_VAR 0 2
68444: PPUSH
68445: CALL_OW 264
68449: PUSH
68450: LD_INT 14
68452: PUSH
68453: LD_INT 53
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: IN
68460: AND
68461: IFFALSE 68479
68463: PUSH
68464: LD_VAR 0 4
68468: PPUSH
68469: LD_VAR 0 5
68473: PPUSH
68474: CALL_OW 488
68478: AND
68479: IFFALSE 68503
// CutTreeXYR ( unit , x , y , 12 ) ;
68481: LD_VAR 0 2
68485: PPUSH
68486: LD_VAR 0 4
68490: PPUSH
68491: LD_VAR 0 5
68495: PPUSH
68496: LD_INT 12
68498: PPUSH
68499: CALL 68694 0 4
// if cmd = 256 then
68503: LD_VAR 0 1
68507: PUSH
68508: LD_INT 256
68510: EQUAL
68511: IFFALSE 68532
// SetFactoryWaypoint ( unit , x , y ) ;
68513: LD_VAR 0 2
68517: PPUSH
68518: LD_VAR 0 4
68522: PPUSH
68523: LD_VAR 0 5
68527: PPUSH
68528: CALL 22381 0 3
// if cmd = 257 then
68532: LD_VAR 0 1
68536: PUSH
68537: LD_INT 257
68539: EQUAL
68540: IFFALSE 68561
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68542: LD_VAR 0 2
68546: PPUSH
68547: LD_VAR 0 4
68551: PPUSH
68552: LD_VAR 0 5
68556: PPUSH
68557: CALL 22877 0 3
// if cmd = 258 then
68561: LD_VAR 0 1
68565: PUSH
68566: LD_INT 258
68568: EQUAL
68569: IFFALSE 68593
// BurnTreeXYR ( unit , x , y , 8 ) ;
68571: LD_VAR 0 2
68575: PPUSH
68576: LD_VAR 0 4
68580: PPUSH
68581: LD_VAR 0 5
68585: PPUSH
68586: LD_INT 8
68588: PPUSH
68589: CALL 69094 0 4
// end ;
68593: LD_VAR 0 6
68597: RET
// export function ComRadiation ( un ) ; var eff ; begin
68598: LD_INT 0
68600: PPUSH
68601: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 264
68611: PUSH
68612: LD_INT 91
68614: NONEQUAL
68615: IFFALSE 68619
// exit ;
68617: GO 68689
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68619: LD_INT 68
68621: PPUSH
68622: LD_VAR 0 1
68626: PPUSH
68627: CALL_OW 255
68631: PPUSH
68632: CALL_OW 321
68636: PUSH
68637: LD_INT 2
68639: EQUAL
68640: IFFALSE 68652
// eff := 50 else
68642: LD_ADDR_VAR 0 3
68646: PUSH
68647: LD_INT 50
68649: ST_TO_ADDR
68650: GO 68660
// eff := 25 ;
68652: LD_ADDR_VAR 0 3
68656: PUSH
68657: LD_INT 25
68659: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68660: LD_VAR 0 1
68664: PPUSH
68665: CALL_OW 250
68669: PPUSH
68670: LD_VAR 0 1
68674: PPUSH
68675: CALL_OW 251
68679: PPUSH
68680: LD_VAR 0 3
68684: PPUSH
68685: CALL_OW 495
// end ;
68689: LD_VAR 0 2
68693: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68694: LD_INT 0
68696: PPUSH
68697: PPUSH
68698: PPUSH
68699: PPUSH
68700: PPUSH
68701: PPUSH
68702: PPUSH
68703: PPUSH
68704: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68705: LD_VAR 0 1
68709: PPUSH
68710: CALL_OW 302
68714: NOT
68715: IFTRUE 68734
68717: PUSH
68718: LD_VAR 0 2
68722: PPUSH
68723: LD_VAR 0 3
68727: PPUSH
68728: CALL_OW 488
68732: NOT
68733: OR
68734: IFTRUE 68743
68736: PUSH
68737: LD_VAR 0 4
68741: NOT
68742: OR
68743: IFFALSE 68747
// exit ;
68745: GO 69089
// list := [ ] ;
68747: LD_ADDR_VAR 0 13
68751: PUSH
68752: EMPTY
68753: ST_TO_ADDR
// if x - r < 0 then
68754: LD_VAR 0 2
68758: PUSH
68759: LD_VAR 0 4
68763: MINUS
68764: PUSH
68765: LD_INT 0
68767: LESS
68768: IFFALSE 68780
// min_x := 0 else
68770: LD_ADDR_VAR 0 7
68774: PUSH
68775: LD_INT 0
68777: ST_TO_ADDR
68778: GO 68796
// min_x := x - r ;
68780: LD_ADDR_VAR 0 7
68784: PUSH
68785: LD_VAR 0 2
68789: PUSH
68790: LD_VAR 0 4
68794: MINUS
68795: ST_TO_ADDR
// if y - r < 0 then
68796: LD_VAR 0 3
68800: PUSH
68801: LD_VAR 0 4
68805: MINUS
68806: PUSH
68807: LD_INT 0
68809: LESS
68810: IFFALSE 68822
// min_y := 0 else
68812: LD_ADDR_VAR 0 8
68816: PUSH
68817: LD_INT 0
68819: ST_TO_ADDR
68820: GO 68838
// min_y := y - r ;
68822: LD_ADDR_VAR 0 8
68826: PUSH
68827: LD_VAR 0 3
68831: PUSH
68832: LD_VAR 0 4
68836: MINUS
68837: ST_TO_ADDR
// max_x := x + r ;
68838: LD_ADDR_VAR 0 9
68842: PUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_VAR 0 4
68852: PLUS
68853: ST_TO_ADDR
// max_y := y + r ;
68854: LD_ADDR_VAR 0 10
68858: PUSH
68859: LD_VAR 0 3
68863: PUSH
68864: LD_VAR 0 4
68868: PLUS
68869: ST_TO_ADDR
// for _x = min_x to max_x do
68870: LD_ADDR_VAR 0 11
68874: PUSH
68875: DOUBLE
68876: LD_VAR 0 7
68880: DEC
68881: ST_TO_ADDR
68882: LD_VAR 0 9
68886: PUSH
68887: FOR_TO
68888: IFFALSE 69007
// for _y = min_y to max_y do
68890: LD_ADDR_VAR 0 12
68894: PUSH
68895: DOUBLE
68896: LD_VAR 0 8
68900: DEC
68901: ST_TO_ADDR
68902: LD_VAR 0 10
68906: PUSH
68907: FOR_TO
68908: IFFALSE 69003
// begin if not ValidHex ( _x , _y ) then
68910: LD_VAR 0 11
68914: PPUSH
68915: LD_VAR 0 12
68919: PPUSH
68920: CALL_OW 488
68924: NOT
68925: IFFALSE 68929
// continue ;
68927: GO 68907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68929: LD_VAR 0 11
68933: PPUSH
68934: LD_VAR 0 12
68938: PPUSH
68939: CALL_OW 351
68943: IFFALSE 68961
68945: PUSH
68946: LD_VAR 0 11
68950: PPUSH
68951: LD_VAR 0 12
68955: PPUSH
68956: CALL_OW 554
68960: AND
68961: IFFALSE 69001
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68963: LD_ADDR_VAR 0 13
68967: PUSH
68968: LD_VAR 0 13
68972: PPUSH
68973: LD_VAR 0 13
68977: PUSH
68978: LD_INT 1
68980: PLUS
68981: PPUSH
68982: LD_VAR 0 11
68986: PUSH
68987: LD_VAR 0 12
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PPUSH
68996: CALL_OW 2
69000: ST_TO_ADDR
// end ;
69001: GO 68907
69003: POP
69004: POP
69005: GO 68887
69007: POP
69008: POP
// if not list then
69009: LD_VAR 0 13
69013: NOT
69014: IFFALSE 69018
// exit ;
69016: GO 69089
// for i in list do
69018: LD_ADDR_VAR 0 6
69022: PUSH
69023: LD_VAR 0 13
69027: PUSH
69028: FOR_IN
69029: IFFALSE 69087
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_STRING M
69038: PUSH
69039: LD_VAR 0 6
69043: PUSH
69044: LD_INT 1
69046: ARRAY
69047: PUSH
69048: LD_VAR 0 6
69052: PUSH
69053: LD_INT 2
69055: ARRAY
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: PPUSH
69081: CALL_OW 447
69085: GO 69028
69087: POP
69088: POP
// end ;
69089: LD_VAR 0 5
69093: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69094: LD_INT 0
69096: PPUSH
69097: PPUSH
69098: PPUSH
69099: PPUSH
69100: PPUSH
69101: PPUSH
69102: PPUSH
69103: PPUSH
69104: PPUSH
69105: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69106: LD_VAR 0 1
69110: PPUSH
69111: CALL_OW 302
69115: NOT
69116: IFTRUE 69135
69118: PUSH
69119: LD_VAR 0 2
69123: PPUSH
69124: LD_VAR 0 3
69128: PPUSH
69129: CALL_OW 488
69133: NOT
69134: OR
69135: IFTRUE 69144
69137: PUSH
69138: LD_VAR 0 4
69142: NOT
69143: OR
69144: IFFALSE 69148
// exit ;
69146: GO 69665
// list := [ ] ;
69148: LD_ADDR_VAR 0 13
69152: PUSH
69153: EMPTY
69154: ST_TO_ADDR
// if x - r < 0 then
69155: LD_VAR 0 2
69159: PUSH
69160: LD_VAR 0 4
69164: MINUS
69165: PUSH
69166: LD_INT 0
69168: LESS
69169: IFFALSE 69181
// min_x := 0 else
69171: LD_ADDR_VAR 0 7
69175: PUSH
69176: LD_INT 0
69178: ST_TO_ADDR
69179: GO 69197
// min_x := x - r ;
69181: LD_ADDR_VAR 0 7
69185: PUSH
69186: LD_VAR 0 2
69190: PUSH
69191: LD_VAR 0 4
69195: MINUS
69196: ST_TO_ADDR
// if y - r < 0 then
69197: LD_VAR 0 3
69201: PUSH
69202: LD_VAR 0 4
69206: MINUS
69207: PUSH
69208: LD_INT 0
69210: LESS
69211: IFFALSE 69223
// min_y := 0 else
69213: LD_ADDR_VAR 0 8
69217: PUSH
69218: LD_INT 0
69220: ST_TO_ADDR
69221: GO 69239
// min_y := y - r ;
69223: LD_ADDR_VAR 0 8
69227: PUSH
69228: LD_VAR 0 3
69232: PUSH
69233: LD_VAR 0 4
69237: MINUS
69238: ST_TO_ADDR
// max_x := x + r ;
69239: LD_ADDR_VAR 0 9
69243: PUSH
69244: LD_VAR 0 2
69248: PUSH
69249: LD_VAR 0 4
69253: PLUS
69254: ST_TO_ADDR
// max_y := y + r ;
69255: LD_ADDR_VAR 0 10
69259: PUSH
69260: LD_VAR 0 3
69264: PUSH
69265: LD_VAR 0 4
69269: PLUS
69270: ST_TO_ADDR
// for _x = min_x to max_x do
69271: LD_ADDR_VAR 0 11
69275: PUSH
69276: DOUBLE
69277: LD_VAR 0 7
69281: DEC
69282: ST_TO_ADDR
69283: LD_VAR 0 9
69287: PUSH
69288: FOR_TO
69289: IFFALSE 69408
// for _y = min_y to max_y do
69291: LD_ADDR_VAR 0 12
69295: PUSH
69296: DOUBLE
69297: LD_VAR 0 8
69301: DEC
69302: ST_TO_ADDR
69303: LD_VAR 0 10
69307: PUSH
69308: FOR_TO
69309: IFFALSE 69404
// begin if not ValidHex ( _x , _y ) then
69311: LD_VAR 0 11
69315: PPUSH
69316: LD_VAR 0 12
69320: PPUSH
69321: CALL_OW 488
69325: NOT
69326: IFFALSE 69330
// continue ;
69328: GO 69308
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69330: LD_VAR 0 11
69334: PPUSH
69335: LD_VAR 0 12
69339: PPUSH
69340: CALL_OW 351
69344: IFFALSE 69362
69346: PUSH
69347: LD_VAR 0 11
69351: PPUSH
69352: LD_VAR 0 12
69356: PPUSH
69357: CALL_OW 554
69361: AND
69362: IFFALSE 69402
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69364: LD_ADDR_VAR 0 13
69368: PUSH
69369: LD_VAR 0 13
69373: PPUSH
69374: LD_VAR 0 13
69378: PUSH
69379: LD_INT 1
69381: PLUS
69382: PPUSH
69383: LD_VAR 0 11
69387: PUSH
69388: LD_VAR 0 12
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PPUSH
69397: CALL_OW 2
69401: ST_TO_ADDR
// end ;
69402: GO 69308
69404: POP
69405: POP
69406: GO 69288
69408: POP
69409: POP
// if not list then
69410: LD_VAR 0 13
69414: NOT
69415: IFFALSE 69419
// exit ;
69417: GO 69665
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69419: LD_ADDR_VAR 0 13
69423: PUSH
69424: LD_VAR 0 1
69428: PPUSH
69429: LD_VAR 0 13
69433: PPUSH
69434: LD_INT 1
69436: PPUSH
69437: LD_INT 1
69439: PPUSH
69440: CALL 29432 0 4
69444: ST_TO_ADDR
// ComStop ( flame ) ;
69445: LD_VAR 0 1
69449: PPUSH
69450: CALL_OW 141
// for i in list do
69454: LD_ADDR_VAR 0 6
69458: PUSH
69459: LD_VAR 0 13
69463: PUSH
69464: FOR_IN
69465: IFFALSE 69496
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69467: LD_VAR 0 1
69471: PPUSH
69472: LD_VAR 0 6
69476: PUSH
69477: LD_INT 1
69479: ARRAY
69480: PPUSH
69481: LD_VAR 0 6
69485: PUSH
69486: LD_INT 2
69488: ARRAY
69489: PPUSH
69490: CALL_OW 176
69494: GO 69464
69496: POP
69497: POP
// repeat wait ( 0 0$1 ) ;
69498: LD_INT 35
69500: PPUSH
69501: CALL_OW 67
// task := GetTaskList ( flame ) ;
69505: LD_ADDR_VAR 0 14
69509: PUSH
69510: LD_VAR 0 1
69514: PPUSH
69515: CALL_OW 437
69519: ST_TO_ADDR
// if not task then
69520: LD_VAR 0 14
69524: NOT
69525: IFFALSE 69529
// exit ;
69527: GO 69665
// if task [ 1 ] [ 1 ] <> | then
69529: LD_VAR 0 14
69533: PUSH
69534: LD_INT 1
69536: ARRAY
69537: PUSH
69538: LD_INT 1
69540: ARRAY
69541: PUSH
69542: LD_STRING |
69544: NONEQUAL
69545: IFFALSE 69549
// exit ;
69547: GO 69665
// _x := task [ 1 ] [ 2 ] ;
69549: LD_ADDR_VAR 0 11
69553: PUSH
69554: LD_VAR 0 14
69558: PUSH
69559: LD_INT 1
69561: ARRAY
69562: PUSH
69563: LD_INT 2
69565: ARRAY
69566: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69567: LD_ADDR_VAR 0 12
69571: PUSH
69572: LD_VAR 0 14
69576: PUSH
69577: LD_INT 1
69579: ARRAY
69580: PUSH
69581: LD_INT 3
69583: ARRAY
69584: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69585: LD_VAR 0 11
69589: PPUSH
69590: LD_VAR 0 12
69594: PPUSH
69595: CALL_OW 351
69599: NOT
69600: IFTRUE 69619
69602: PUSH
69603: LD_VAR 0 11
69607: PPUSH
69608: LD_VAR 0 12
69612: PPUSH
69613: CALL_OW 554
69617: NOT
69618: OR
69619: IFFALSE 69653
// begin task := Delete ( task , 1 ) ;
69621: LD_ADDR_VAR 0 14
69625: PUSH
69626: LD_VAR 0 14
69630: PPUSH
69631: LD_INT 1
69633: PPUSH
69634: CALL_OW 3
69638: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69639: LD_VAR 0 1
69643: PPUSH
69644: LD_VAR 0 14
69648: PPUSH
69649: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69653: LD_VAR 0 1
69657: PPUSH
69658: CALL_OW 314
69662: NOT
69663: IFFALSE 69498
// end ;
69665: LD_VAR 0 5
69669: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69670: LD_EXP 82
69674: NOT
69675: IFFALSE 69725
69677: GO 69679
69679: DISABLE
// begin initHack := true ;
69680: LD_ADDR_EXP 82
69684: PUSH
69685: LD_INT 1
69687: ST_TO_ADDR
// hackTanks := [ ] ;
69688: LD_ADDR_EXP 83
69692: PUSH
69693: EMPTY
69694: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69695: LD_ADDR_EXP 84
69699: PUSH
69700: EMPTY
69701: ST_TO_ADDR
// hackLimit := 3 ;
69702: LD_ADDR_EXP 85
69706: PUSH
69707: LD_INT 3
69709: ST_TO_ADDR
// hackDist := 12 ;
69710: LD_ADDR_EXP 86
69714: PUSH
69715: LD_INT 12
69717: ST_TO_ADDR
// hackCounter := [ ] ;
69718: LD_ADDR_EXP 87
69722: PUSH
69723: EMPTY
69724: ST_TO_ADDR
// end ;
69725: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69726: LD_EXP 82
69730: IFFALSE 69748
69732: PUSH
69733: LD_INT 34
69735: PUSH
69736: LD_INT 99
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PPUSH
69743: CALL_OW 69
69747: AND
69748: IFFALSE 70001
69750: GO 69752
69752: DISABLE
69753: LD_INT 0
69755: PPUSH
69756: PPUSH
// begin enable ;
69757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69758: LD_ADDR_VAR 0 1
69762: PUSH
69763: LD_INT 34
69765: PUSH
69766: LD_INT 99
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PPUSH
69773: CALL_OW 69
69777: PUSH
69778: FOR_IN
69779: IFFALSE 69999
// begin if not i in hackTanks then
69781: LD_VAR 0 1
69785: PUSH
69786: LD_EXP 83
69790: IN
69791: NOT
69792: IFFALSE 69875
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69794: LD_ADDR_EXP 83
69798: PUSH
69799: LD_EXP 83
69803: PPUSH
69804: LD_EXP 83
69808: PUSH
69809: LD_INT 1
69811: PLUS
69812: PPUSH
69813: LD_VAR 0 1
69817: PPUSH
69818: CALL_OW 1
69822: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69823: LD_ADDR_EXP 84
69827: PUSH
69828: LD_EXP 84
69832: PPUSH
69833: LD_EXP 84
69837: PUSH
69838: LD_INT 1
69840: PLUS
69841: PPUSH
69842: EMPTY
69843: PPUSH
69844: CALL_OW 1
69848: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69849: LD_ADDR_EXP 87
69853: PUSH
69854: LD_EXP 87
69858: PPUSH
69859: LD_EXP 87
69863: PUSH
69864: LD_INT 1
69866: PLUS
69867: PPUSH
69868: EMPTY
69869: PPUSH
69870: CALL_OW 1
69874: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 302
69884: NOT
69885: IFFALSE 69898
// begin HackUnlinkAll ( i ) ;
69887: LD_VAR 0 1
69891: PPUSH
69892: CALL 70004 0 1
// continue ;
69896: GO 69778
// end ; HackCheckCapturedStatus ( i ) ;
69898: LD_VAR 0 1
69902: PPUSH
69903: CALL 70449 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_INT 81
69914: PUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 255
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 33
69931: PUSH
69932: LD_INT 3
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 91
69941: PUSH
69942: LD_VAR 0 1
69946: PUSH
69947: LD_EXP 86
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 50
69959: PUSH
69960: EMPTY
69961: LIST
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: PPUSH
69969: CALL_OW 69
69973: ST_TO_ADDR
// if not tmp then
69974: LD_VAR 0 2
69978: NOT
69979: IFFALSE 69983
// continue ;
69981: GO 69778
// HackLink ( i , tmp ) ;
69983: LD_VAR 0 1
69987: PPUSH
69988: LD_VAR 0 2
69992: PPUSH
69993: CALL 70140 0 2
// end ;
69997: GO 69778
69999: POP
70000: POP
// end ;
70001: PPOPN 2
70003: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70004: LD_INT 0
70006: PPUSH
70007: PPUSH
70008: PPUSH
// if not hack in hackTanks then
70009: LD_VAR 0 1
70013: PUSH
70014: LD_EXP 83
70018: IN
70019: NOT
70020: IFFALSE 70024
// exit ;
70022: GO 70135
// index := GetElementIndex ( hackTanks , hack ) ;
70024: LD_ADDR_VAR 0 4
70028: PUSH
70029: LD_EXP 83
70033: PPUSH
70034: LD_VAR 0 1
70038: PPUSH
70039: CALL 28727 0 2
70043: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70044: LD_EXP 84
70048: PUSH
70049: LD_VAR 0 4
70053: ARRAY
70054: IFFALSE 70135
// begin for i in hackTanksCaptured [ index ] do
70056: LD_ADDR_VAR 0 3
70060: PUSH
70061: LD_EXP 84
70065: PUSH
70066: LD_VAR 0 4
70070: ARRAY
70071: PUSH
70072: FOR_IN
70073: IFFALSE 70099
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70075: LD_VAR 0 3
70079: PUSH
70080: LD_INT 1
70082: ARRAY
70083: PPUSH
70084: LD_VAR 0 3
70088: PUSH
70089: LD_INT 2
70091: ARRAY
70092: PPUSH
70093: CALL_OW 235
70097: GO 70072
70099: POP
70100: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70101: LD_ADDR_EXP 84
70105: PUSH
70106: LD_EXP 84
70110: PPUSH
70111: LD_VAR 0 4
70115: PPUSH
70116: EMPTY
70117: PPUSH
70118: CALL_OW 1
70122: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_INT 0
70130: PPUSH
70131: CALL_OW 505
// end ; end ;
70135: LD_VAR 0 2
70139: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70140: LD_INT 0
70142: PPUSH
70143: PPUSH
70144: PPUSH
// if not hack in hackTanks or not vehicles then
70145: LD_VAR 0 1
70149: PUSH
70150: LD_EXP 83
70154: IN
70155: NOT
70156: IFTRUE 70165
70158: PUSH
70159: LD_VAR 0 2
70163: NOT
70164: OR
70165: IFFALSE 70169
// exit ;
70167: GO 70444
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70169: LD_ADDR_VAR 0 2
70173: PUSH
70174: LD_VAR 0 1
70178: PPUSH
70179: LD_VAR 0 2
70183: PPUSH
70184: LD_INT 1
70186: PPUSH
70187: LD_INT 1
70189: PPUSH
70190: CALL 29379 0 4
70194: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_EXP 83
70204: PPUSH
70205: LD_VAR 0 1
70209: PPUSH
70210: CALL 28727 0 2
70214: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70215: LD_EXP 84
70219: PUSH
70220: LD_VAR 0 5
70224: ARRAY
70225: PUSH
70226: LD_EXP 85
70230: LESS
70231: IFFALSE 70420
// begin for i := 1 to vehicles do
70233: LD_ADDR_VAR 0 4
70237: PUSH
70238: DOUBLE
70239: LD_INT 1
70241: DEC
70242: ST_TO_ADDR
70243: LD_VAR 0 2
70247: PUSH
70248: FOR_TO
70249: IFFALSE 70418
// begin if hackTanksCaptured [ index ] = hackLimit then
70251: LD_EXP 84
70255: PUSH
70256: LD_VAR 0 5
70260: ARRAY
70261: PUSH
70262: LD_EXP 85
70266: EQUAL
70267: IFFALSE 70271
// break ;
70269: GO 70418
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70271: LD_ADDR_EXP 87
70275: PUSH
70276: LD_EXP 87
70280: PPUSH
70281: LD_VAR 0 5
70285: PPUSH
70286: LD_EXP 87
70290: PUSH
70291: LD_VAR 0 5
70295: ARRAY
70296: PUSH
70297: LD_INT 1
70299: PLUS
70300: PPUSH
70301: CALL_OW 1
70305: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70306: LD_ADDR_EXP 84
70310: PUSH
70311: LD_EXP 84
70315: PPUSH
70316: LD_VAR 0 5
70320: PUSH
70321: LD_EXP 84
70325: PUSH
70326: LD_VAR 0 5
70330: ARRAY
70331: PUSH
70332: LD_INT 1
70334: PLUS
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PPUSH
70340: LD_VAR 0 2
70344: PUSH
70345: LD_VAR 0 4
70349: ARRAY
70350: PUSH
70351: LD_VAR 0 2
70355: PUSH
70356: LD_VAR 0 4
70360: ARRAY
70361: PPUSH
70362: CALL_OW 255
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PPUSH
70371: CALL 28944 0 3
70375: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70376: LD_VAR 0 2
70380: PUSH
70381: LD_VAR 0 4
70385: ARRAY
70386: PPUSH
70387: LD_VAR 0 1
70391: PPUSH
70392: CALL_OW 255
70396: PPUSH
70397: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70401: LD_VAR 0 2
70405: PUSH
70406: LD_VAR 0 4
70410: ARRAY
70411: PPUSH
70412: CALL_OW 141
// end ;
70416: GO 70248
70418: POP
70419: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70420: LD_VAR 0 1
70424: PPUSH
70425: LD_EXP 84
70429: PUSH
70430: LD_VAR 0 5
70434: ARRAY
70435: PUSH
70436: LD_INT 0
70438: PLUS
70439: PPUSH
70440: CALL_OW 505
// end ;
70444: LD_VAR 0 3
70448: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
70454: PPUSH
// if not hack in hackTanks then
70455: LD_VAR 0 1
70459: PUSH
70460: LD_EXP 83
70464: IN
70465: NOT
70466: IFFALSE 70470
// exit ;
70468: GO 70714
// index := GetElementIndex ( hackTanks , hack ) ;
70470: LD_ADDR_VAR 0 4
70474: PUSH
70475: LD_EXP 83
70479: PPUSH
70480: LD_VAR 0 1
70484: PPUSH
70485: CALL 28727 0 2
70489: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70490: LD_ADDR_VAR 0 3
70494: PUSH
70495: DOUBLE
70496: LD_EXP 84
70500: PUSH
70501: LD_VAR 0 4
70505: ARRAY
70506: INC
70507: ST_TO_ADDR
70508: LD_INT 1
70510: PUSH
70511: FOR_DOWNTO
70512: IFFALSE 70688
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70514: LD_ADDR_VAR 0 5
70518: PUSH
70519: LD_EXP 84
70523: PUSH
70524: LD_VAR 0 4
70528: ARRAY
70529: PUSH
70530: LD_VAR 0 3
70534: ARRAY
70535: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70536: LD_VAR 0 5
70540: PUSH
70541: LD_INT 1
70543: ARRAY
70544: PPUSH
70545: CALL_OW 302
70549: NOT
70550: IFTRUE 70578
70552: PUSH
70553: LD_VAR 0 5
70557: PUSH
70558: LD_INT 1
70560: ARRAY
70561: PPUSH
70562: CALL_OW 255
70566: PUSH
70567: LD_VAR 0 1
70571: PPUSH
70572: CALL_OW 255
70576: NONEQUAL
70577: OR
70578: IFFALSE 70686
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70580: LD_VAR 0 5
70584: PUSH
70585: LD_INT 1
70587: ARRAY
70588: PPUSH
70589: CALL_OW 305
70593: IFFALSE 70621
70595: PUSH
70596: LD_VAR 0 5
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PPUSH
70605: CALL_OW 255
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: CALL_OW 255
70619: EQUAL
70620: AND
70621: IFFALSE 70645
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70623: LD_VAR 0 5
70627: PUSH
70628: LD_INT 1
70630: ARRAY
70631: PPUSH
70632: LD_VAR 0 5
70636: PUSH
70637: LD_INT 2
70639: ARRAY
70640: PPUSH
70641: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70645: LD_ADDR_EXP 84
70649: PUSH
70650: LD_EXP 84
70654: PPUSH
70655: LD_VAR 0 4
70659: PPUSH
70660: LD_EXP 84
70664: PUSH
70665: LD_VAR 0 4
70669: ARRAY
70670: PPUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: CALL_OW 3
70680: PPUSH
70681: CALL_OW 1
70685: ST_TO_ADDR
// end ; end ;
70686: GO 70511
70688: POP
70689: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70690: LD_VAR 0 1
70694: PPUSH
70695: LD_EXP 84
70699: PUSH
70700: LD_VAR 0 4
70704: ARRAY
70705: PUSH
70706: LD_INT 0
70708: PLUS
70709: PPUSH
70710: CALL_OW 505
// end ;
70714: LD_VAR 0 2
70718: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70719: LD_INT 0
70721: PPUSH
70722: PPUSH
70723: PPUSH
70724: PPUSH
// if not hack in hackTanks then
70725: LD_VAR 0 1
70729: PUSH
70730: LD_EXP 83
70734: IN
70735: NOT
70736: IFFALSE 70740
// exit ;
70738: GO 70825
// index := GetElementIndex ( hackTanks , hack ) ;
70740: LD_ADDR_VAR 0 5
70744: PUSH
70745: LD_EXP 83
70749: PPUSH
70750: LD_VAR 0 1
70754: PPUSH
70755: CALL 28727 0 2
70759: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70760: LD_ADDR_VAR 0 4
70764: PUSH
70765: DOUBLE
70766: LD_INT 1
70768: DEC
70769: ST_TO_ADDR
70770: LD_EXP 84
70774: PUSH
70775: LD_VAR 0 5
70779: ARRAY
70780: PUSH
70781: FOR_TO
70782: IFFALSE 70823
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70784: LD_EXP 84
70788: PUSH
70789: LD_VAR 0 5
70793: ARRAY
70794: PUSH
70795: LD_VAR 0 4
70799: ARRAY
70800: PUSH
70801: LD_INT 1
70803: ARRAY
70804: PUSH
70805: LD_VAR 0 2
70809: EQUAL
70810: IFFALSE 70821
// KillUnit ( vehicle ) ;
70812: LD_VAR 0 2
70816: PPUSH
70817: CALL_OW 66
70821: GO 70781
70823: POP
70824: POP
// end ;
70825: LD_VAR 0 3
70829: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70830: LD_EXP 88
70834: NOT
70835: IFFALSE 70870
70837: GO 70839
70839: DISABLE
// begin initMiner := true ;
70840: LD_ADDR_EXP 88
70844: PUSH
70845: LD_INT 1
70847: ST_TO_ADDR
// minersList := [ ] ;
70848: LD_ADDR_EXP 89
70852: PUSH
70853: EMPTY
70854: ST_TO_ADDR
// minerMinesList := [ ] ;
70855: LD_ADDR_EXP 90
70859: PUSH
70860: EMPTY
70861: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70862: LD_ADDR_EXP 91
70866: PUSH
70867: LD_INT 5
70869: ST_TO_ADDR
// end ;
70870: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70871: LD_EXP 88
70875: IFFALSE 70893
70877: PUSH
70878: LD_INT 34
70880: PUSH
70881: LD_INT 81
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PPUSH
70888: CALL_OW 69
70892: AND
70893: IFFALSE 71356
70895: GO 70897
70897: DISABLE
70898: LD_INT 0
70900: PPUSH
70901: PPUSH
70902: PPUSH
70903: PPUSH
// begin enable ;
70904: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70905: LD_ADDR_VAR 0 1
70909: PUSH
70910: LD_INT 34
70912: PUSH
70913: LD_INT 81
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PPUSH
70920: CALL_OW 69
70924: PUSH
70925: FOR_IN
70926: IFFALSE 70998
// begin if not i in minersList then
70928: LD_VAR 0 1
70932: PUSH
70933: LD_EXP 89
70937: IN
70938: NOT
70939: IFFALSE 70996
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70941: LD_ADDR_EXP 89
70945: PUSH
70946: LD_EXP 89
70950: PPUSH
70951: LD_EXP 89
70955: PUSH
70956: LD_INT 1
70958: PLUS
70959: PPUSH
70960: LD_VAR 0 1
70964: PPUSH
70965: CALL_OW 1
70969: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70970: LD_ADDR_EXP 90
70974: PUSH
70975: LD_EXP 90
70979: PPUSH
70980: LD_EXP 90
70984: PUSH
70985: LD_INT 1
70987: PLUS
70988: PPUSH
70989: EMPTY
70990: PPUSH
70991: CALL_OW 1
70995: ST_TO_ADDR
// end end ;
70996: GO 70925
70998: POP
70999: POP
// for i := minerMinesList downto 1 do
71000: LD_ADDR_VAR 0 1
71004: PUSH
71005: DOUBLE
71006: LD_EXP 90
71010: INC
71011: ST_TO_ADDR
71012: LD_INT 1
71014: PUSH
71015: FOR_DOWNTO
71016: IFFALSE 71354
// begin if IsLive ( minersList [ i ] ) then
71018: LD_EXP 89
71022: PUSH
71023: LD_VAR 0 1
71027: ARRAY
71028: PPUSH
71029: CALL_OW 300
71033: IFFALSE 71061
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71035: LD_EXP 89
71039: PUSH
71040: LD_VAR 0 1
71044: ARRAY
71045: PPUSH
71046: LD_EXP 90
71050: PUSH
71051: LD_VAR 0 1
71055: ARRAY
71056: PPUSH
71057: CALL_OW 505
// if not minerMinesList [ i ] then
71061: LD_EXP 90
71065: PUSH
71066: LD_VAR 0 1
71070: ARRAY
71071: NOT
71072: IFFALSE 71076
// continue ;
71074: GO 71015
// for j := minerMinesList [ i ] downto 1 do
71076: LD_ADDR_VAR 0 2
71080: PUSH
71081: DOUBLE
71082: LD_EXP 90
71086: PUSH
71087: LD_VAR 0 1
71091: ARRAY
71092: INC
71093: ST_TO_ADDR
71094: LD_INT 1
71096: PUSH
71097: FOR_DOWNTO
71098: IFFALSE 71350
// begin side := GetSide ( minersList [ i ] ) ;
71100: LD_ADDR_VAR 0 3
71104: PUSH
71105: LD_EXP 89
71109: PUSH
71110: LD_VAR 0 1
71114: ARRAY
71115: PPUSH
71116: CALL_OW 255
71120: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71121: LD_ADDR_VAR 0 4
71125: PUSH
71126: LD_EXP 90
71130: PUSH
71131: LD_VAR 0 1
71135: ARRAY
71136: PUSH
71137: LD_VAR 0 2
71141: ARRAY
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PPUSH
71147: LD_EXP 90
71151: PUSH
71152: LD_VAR 0 1
71156: ARRAY
71157: PUSH
71158: LD_VAR 0 2
71162: ARRAY
71163: PUSH
71164: LD_INT 2
71166: ARRAY
71167: PPUSH
71168: CALL_OW 428
71172: ST_TO_ADDR
// if not tmp then
71173: LD_VAR 0 4
71177: NOT
71178: IFFALSE 71182
// continue ;
71180: GO 71097
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71182: LD_VAR 0 4
71186: PUSH
71187: LD_INT 81
71189: PUSH
71190: LD_VAR 0 3
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PPUSH
71199: CALL_OW 69
71203: IN
71204: IFFALSE 71254
71206: PUSH
71207: LD_EXP 90
71211: PUSH
71212: LD_VAR 0 1
71216: ARRAY
71217: PUSH
71218: LD_VAR 0 2
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PPUSH
71228: LD_EXP 90
71232: PUSH
71233: LD_VAR 0 1
71237: ARRAY
71238: PUSH
71239: LD_VAR 0 2
71243: ARRAY
71244: PUSH
71245: LD_INT 2
71247: ARRAY
71248: PPUSH
71249: CALL_OW 458
71253: AND
71254: IFFALSE 71348
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71256: LD_EXP 90
71260: PUSH
71261: LD_VAR 0 1
71265: ARRAY
71266: PUSH
71267: LD_VAR 0 2
71271: ARRAY
71272: PUSH
71273: LD_INT 1
71275: ARRAY
71276: PPUSH
71277: LD_EXP 90
71281: PUSH
71282: LD_VAR 0 1
71286: ARRAY
71287: PUSH
71288: LD_VAR 0 2
71292: ARRAY
71293: PUSH
71294: LD_INT 2
71296: ARRAY
71297: PPUSH
71298: LD_VAR 0 3
71302: PPUSH
71303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71307: LD_ADDR_EXP 90
71311: PUSH
71312: LD_EXP 90
71316: PPUSH
71317: LD_VAR 0 1
71321: PPUSH
71322: LD_EXP 90
71326: PUSH
71327: LD_VAR 0 1
71331: ARRAY
71332: PPUSH
71333: LD_VAR 0 2
71337: PPUSH
71338: CALL_OW 3
71342: PPUSH
71343: CALL_OW 1
71347: ST_TO_ADDR
// end ; end ;
71348: GO 71097
71350: POP
71351: POP
// end ;
71352: GO 71015
71354: POP
71355: POP
// end ;
71356: PPOPN 4
71358: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71359: LD_INT 0
71361: PPUSH
71362: PPUSH
// result := false ;
71363: LD_ADDR_VAR 0 4
71367: PUSH
71368: LD_INT 0
71370: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71371: LD_VAR 0 1
71375: PPUSH
71376: CALL_OW 264
71380: PUSH
71381: LD_INT 81
71383: EQUAL
71384: NOT
71385: IFFALSE 71389
// exit ;
71387: GO 71633
// index := GetElementIndex ( minersList , unit ) ;
71389: LD_ADDR_VAR 0 5
71393: PUSH
71394: LD_EXP 89
71398: PPUSH
71399: LD_VAR 0 1
71403: PPUSH
71404: CALL 28727 0 2
71408: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71409: LD_EXP 90
71413: PUSH
71414: LD_VAR 0 5
71418: ARRAY
71419: PUSH
71420: LD_EXP 91
71424: GREATEREQUAL
71425: IFFALSE 71429
// exit ;
71427: GO 71633
// ComMoveXY ( unit , x , y ) ;
71429: LD_VAR 0 1
71433: PPUSH
71434: LD_VAR 0 2
71438: PPUSH
71439: LD_VAR 0 3
71443: PPUSH
71444: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71448: LD_INT 35
71450: PPUSH
71451: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71455: LD_VAR 0 1
71459: PPUSH
71460: LD_VAR 0 2
71464: PPUSH
71465: LD_VAR 0 3
71469: PPUSH
71470: CALL 60773 0 3
71474: NOT
71475: IFFALSE 71488
71477: PUSH
71478: LD_VAR 0 1
71482: PPUSH
71483: CALL_OW 314
71487: AND
71488: IFFALSE 71492
// exit ;
71490: GO 71633
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71492: LD_VAR 0 2
71496: PPUSH
71497: LD_VAR 0 3
71501: PPUSH
71502: CALL_OW 428
71506: PUSH
71507: LD_VAR 0 1
71511: EQUAL
71512: IFFALSE 71526
71514: PUSH
71515: LD_VAR 0 1
71519: PPUSH
71520: CALL_OW 314
71524: NOT
71525: AND
71526: IFFALSE 71448
// PlaySoundXY ( x , y , PlantMine ) ;
71528: LD_VAR 0 2
71532: PPUSH
71533: LD_VAR 0 3
71537: PPUSH
71538: LD_STRING PlantMine
71540: PPUSH
71541: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71545: LD_VAR 0 2
71549: PPUSH
71550: LD_VAR 0 3
71554: PPUSH
71555: LD_VAR 0 1
71559: PPUSH
71560: CALL_OW 255
71564: PPUSH
71565: LD_INT 0
71567: PPUSH
71568: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71572: LD_ADDR_EXP 90
71576: PUSH
71577: LD_EXP 90
71581: PPUSH
71582: LD_VAR 0 5
71586: PUSH
71587: LD_EXP 90
71591: PUSH
71592: LD_VAR 0 5
71596: ARRAY
71597: PUSH
71598: LD_INT 1
71600: PLUS
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PPUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_VAR 0 3
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PPUSH
71620: CALL 28944 0 3
71624: ST_TO_ADDR
// result := true ;
71625: LD_ADDR_VAR 0 4
71629: PUSH
71630: LD_INT 1
71632: ST_TO_ADDR
// end ;
71633: LD_VAR 0 4
71637: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
// if not unit in minersList then
71643: LD_VAR 0 1
71647: PUSH
71648: LD_EXP 89
71652: IN
71653: NOT
71654: IFFALSE 71658
// exit ;
71656: GO 72052
// index := GetElementIndex ( minersList , unit ) ;
71658: LD_ADDR_VAR 0 6
71662: PUSH
71663: LD_EXP 89
71667: PPUSH
71668: LD_VAR 0 1
71672: PPUSH
71673: CALL 28727 0 2
71677: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71678: LD_ADDR_VAR 0 5
71682: PUSH
71683: DOUBLE
71684: LD_EXP 90
71688: PUSH
71689: LD_VAR 0 6
71693: ARRAY
71694: INC
71695: ST_TO_ADDR
71696: LD_INT 1
71698: PUSH
71699: FOR_DOWNTO
71700: IFFALSE 71863
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71702: LD_EXP 90
71706: PUSH
71707: LD_VAR 0 6
71711: ARRAY
71712: PUSH
71713: LD_VAR 0 5
71717: ARRAY
71718: PUSH
71719: LD_INT 1
71721: ARRAY
71722: PUSH
71723: LD_VAR 0 2
71727: EQUAL
71728: IFFALSE 71758
71730: PUSH
71731: LD_EXP 90
71735: PUSH
71736: LD_VAR 0 6
71740: ARRAY
71741: PUSH
71742: LD_VAR 0 5
71746: ARRAY
71747: PUSH
71748: LD_INT 2
71750: ARRAY
71751: PUSH
71752: LD_VAR 0 3
71756: EQUAL
71757: AND
71758: IFFALSE 71861
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71760: LD_EXP 90
71764: PUSH
71765: LD_VAR 0 6
71769: ARRAY
71770: PUSH
71771: LD_VAR 0 5
71775: ARRAY
71776: PUSH
71777: LD_INT 1
71779: ARRAY
71780: PPUSH
71781: LD_EXP 90
71785: PUSH
71786: LD_VAR 0 6
71790: ARRAY
71791: PUSH
71792: LD_VAR 0 5
71796: ARRAY
71797: PUSH
71798: LD_INT 2
71800: ARRAY
71801: PPUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 255
71811: PPUSH
71812: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71816: LD_ADDR_EXP 90
71820: PUSH
71821: LD_EXP 90
71825: PPUSH
71826: LD_VAR 0 6
71830: PPUSH
71831: LD_EXP 90
71835: PUSH
71836: LD_VAR 0 6
71840: ARRAY
71841: PPUSH
71842: LD_VAR 0 5
71846: PPUSH
71847: CALL_OW 3
71851: PPUSH
71852: CALL_OW 1
71856: ST_TO_ADDR
// exit ;
71857: POP
71858: POP
71859: GO 72052
// end ; end ;
71861: GO 71699
71863: POP
71864: POP
// for i := minerMinesList [ index ] downto 1 do
71865: LD_ADDR_VAR 0 5
71869: PUSH
71870: DOUBLE
71871: LD_EXP 90
71875: PUSH
71876: LD_VAR 0 6
71880: ARRAY
71881: INC
71882: ST_TO_ADDR
71883: LD_INT 1
71885: PUSH
71886: FOR_DOWNTO
71887: IFFALSE 72050
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71889: LD_EXP 90
71893: PUSH
71894: LD_VAR 0 6
71898: ARRAY
71899: PUSH
71900: LD_VAR 0 5
71904: ARRAY
71905: PUSH
71906: LD_INT 1
71908: ARRAY
71909: PPUSH
71910: LD_EXP 90
71914: PUSH
71915: LD_VAR 0 6
71919: ARRAY
71920: PUSH
71921: LD_VAR 0 5
71925: ARRAY
71926: PUSH
71927: LD_INT 2
71929: ARRAY
71930: PPUSH
71931: LD_VAR 0 2
71935: PPUSH
71936: LD_VAR 0 3
71940: PPUSH
71941: CALL_OW 298
71945: PUSH
71946: LD_INT 6
71948: LESS
71949: IFFALSE 72048
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71951: LD_EXP 90
71955: PUSH
71956: LD_VAR 0 6
71960: ARRAY
71961: PUSH
71962: LD_VAR 0 5
71966: ARRAY
71967: PUSH
71968: LD_INT 1
71970: ARRAY
71971: PPUSH
71972: LD_EXP 90
71976: PUSH
71977: LD_VAR 0 6
71981: ARRAY
71982: PUSH
71983: LD_VAR 0 5
71987: ARRAY
71988: PUSH
71989: LD_INT 2
71991: ARRAY
71992: PPUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 255
72002: PPUSH
72003: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72007: LD_ADDR_EXP 90
72011: PUSH
72012: LD_EXP 90
72016: PPUSH
72017: LD_VAR 0 6
72021: PPUSH
72022: LD_EXP 90
72026: PUSH
72027: LD_VAR 0 6
72031: ARRAY
72032: PPUSH
72033: LD_VAR 0 5
72037: PPUSH
72038: CALL_OW 3
72042: PPUSH
72043: CALL_OW 1
72047: ST_TO_ADDR
// end ; end ;
72048: GO 71886
72050: POP
72051: POP
// end ;
72052: LD_VAR 0 4
72056: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72057: LD_INT 0
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
72066: PPUSH
72067: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72068: LD_VAR 0 1
72072: PPUSH
72073: CALL_OW 264
72077: PUSH
72078: LD_INT 81
72080: EQUAL
72081: NOT
72082: IFTRUE 72097
72084: PUSH
72085: LD_VAR 0 1
72089: PUSH
72090: LD_EXP 89
72094: IN
72095: NOT
72096: OR
72097: IFFALSE 72101
// exit ;
72099: GO 72427
// index := GetElementIndex ( minersList , unit ) ;
72101: LD_ADDR_VAR 0 6
72105: PUSH
72106: LD_EXP 89
72110: PPUSH
72111: LD_VAR 0 1
72115: PPUSH
72116: CALL 28727 0 2
72120: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72121: LD_ADDR_VAR 0 8
72125: PUSH
72126: LD_EXP 91
72130: PUSH
72131: LD_EXP 90
72135: PUSH
72136: LD_VAR 0 6
72140: ARRAY
72141: MINUS
72142: ST_TO_ADDR
// if not minesFreeAmount then
72143: LD_VAR 0 8
72147: NOT
72148: IFFALSE 72152
// exit ;
72150: GO 72427
// tmp := [ ] ;
72152: LD_ADDR_VAR 0 7
72156: PUSH
72157: EMPTY
72158: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72159: LD_ADDR_VAR 0 5
72163: PUSH
72164: DOUBLE
72165: LD_INT 1
72167: DEC
72168: ST_TO_ADDR
72169: LD_VAR 0 8
72173: PUSH
72174: FOR_TO
72175: IFFALSE 72374
// begin _d := rand ( 0 , 5 ) ;
72177: LD_ADDR_VAR 0 11
72181: PUSH
72182: LD_INT 0
72184: PPUSH
72185: LD_INT 5
72187: PPUSH
72188: CALL_OW 12
72192: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72193: LD_ADDR_VAR 0 12
72197: PUSH
72198: LD_INT 2
72200: PPUSH
72201: LD_INT 6
72203: PPUSH
72204: CALL_OW 12
72208: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72209: LD_ADDR_VAR 0 9
72213: PUSH
72214: LD_VAR 0 2
72218: PPUSH
72219: LD_VAR 0 11
72223: PPUSH
72224: LD_VAR 0 12
72228: PPUSH
72229: CALL_OW 272
72233: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72234: LD_ADDR_VAR 0 10
72238: PUSH
72239: LD_VAR 0 3
72243: PPUSH
72244: LD_VAR 0 11
72248: PPUSH
72249: LD_VAR 0 12
72253: PPUSH
72254: CALL_OW 273
72258: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72259: LD_VAR 0 9
72263: PPUSH
72264: LD_VAR 0 10
72268: PPUSH
72269: CALL_OW 488
72273: IFFALSE 72297
72275: PUSH
72276: LD_VAR 0 9
72280: PUSH
72281: LD_VAR 0 10
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_VAR 0 7
72294: IN
72295: NOT
72296: AND
72297: IFFALSE 72316
72299: PUSH
72300: LD_VAR 0 9
72304: PPUSH
72305: LD_VAR 0 10
72309: PPUSH
72310: CALL_OW 458
72314: NOT
72315: AND
72316: IFFALSE 72358
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72318: LD_ADDR_VAR 0 7
72322: PUSH
72323: LD_VAR 0 7
72327: PPUSH
72328: LD_VAR 0 7
72332: PUSH
72333: LD_INT 1
72335: PLUS
72336: PPUSH
72337: LD_VAR 0 9
72341: PUSH
72342: LD_VAR 0 10
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PPUSH
72351: CALL_OW 1
72355: ST_TO_ADDR
72356: GO 72372
// i := i - 1 ;
72358: LD_ADDR_VAR 0 5
72362: PUSH
72363: LD_VAR 0 5
72367: PUSH
72368: LD_INT 1
72370: MINUS
72371: ST_TO_ADDR
// end ;
72372: GO 72174
72374: POP
72375: POP
// for i in tmp do
72376: LD_ADDR_VAR 0 5
72380: PUSH
72381: LD_VAR 0 7
72385: PUSH
72386: FOR_IN
72387: IFFALSE 72425
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72389: LD_VAR 0 1
72393: PPUSH
72394: LD_VAR 0 5
72398: PUSH
72399: LD_INT 1
72401: ARRAY
72402: PPUSH
72403: LD_VAR 0 5
72407: PUSH
72408: LD_INT 2
72410: ARRAY
72411: PPUSH
72412: CALL 71359 0 3
72416: NOT
72417: IFFALSE 72423
// exit ;
72419: POP
72420: POP
72421: GO 72427
72423: GO 72386
72425: POP
72426: POP
// end ;
72427: LD_VAR 0 4
72431: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72432: LD_INT 0
72434: PPUSH
72435: PPUSH
72436: PPUSH
72437: PPUSH
72438: PPUSH
72439: PPUSH
72440: PPUSH
72441: PPUSH
72442: PPUSH
// if GetClass ( unit ) <> class_sniper then
72443: LD_VAR 0 1
72447: PPUSH
72448: CALL_OW 257
72452: PUSH
72453: LD_INT 5
72455: NONEQUAL
72456: IFFALSE 72460
// exit ;
72458: GO 72930
// dist := 8 ;
72460: LD_ADDR_VAR 0 5
72464: PUSH
72465: LD_INT 8
72467: ST_TO_ADDR
// viewRange := 12 ;
72468: LD_ADDR_VAR 0 8
72472: PUSH
72473: LD_INT 12
72475: ST_TO_ADDR
// side := GetSide ( unit ) ;
72476: LD_ADDR_VAR 0 6
72480: PUSH
72481: LD_VAR 0 1
72485: PPUSH
72486: CALL_OW 255
72490: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72491: LD_INT 61
72493: PPUSH
72494: LD_VAR 0 6
72498: PPUSH
72499: CALL_OW 321
72503: PUSH
72504: LD_INT 2
72506: EQUAL
72507: IFFALSE 72517
// viewRange := 16 ;
72509: LD_ADDR_VAR 0 8
72513: PUSH
72514: LD_INT 16
72516: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72517: LD_VAR 0 1
72521: PPUSH
72522: LD_VAR 0 2
72526: PPUSH
72527: LD_VAR 0 3
72531: PPUSH
72532: CALL_OW 297
72536: PUSH
72537: LD_VAR 0 5
72541: GREATER
72542: IFFALSE 72621
// begin ComMoveXY ( unit , x , y ) ;
72544: LD_VAR 0 1
72548: PPUSH
72549: LD_VAR 0 2
72553: PPUSH
72554: LD_VAR 0 3
72558: PPUSH
72559: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72563: LD_INT 35
72565: PPUSH
72566: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72570: LD_VAR 0 1
72574: PPUSH
72575: LD_VAR 0 2
72579: PPUSH
72580: LD_VAR 0 3
72584: PPUSH
72585: CALL 60773 0 3
72589: NOT
72590: IFFALSE 72594
// exit ;
72592: GO 72930
// until GetDistUnitXY ( unit , x , y ) < dist ;
72594: LD_VAR 0 1
72598: PPUSH
72599: LD_VAR 0 2
72603: PPUSH
72604: LD_VAR 0 3
72608: PPUSH
72609: CALL_OW 297
72613: PUSH
72614: LD_VAR 0 5
72618: LESS
72619: IFFALSE 72563
// end ; ComTurnXY ( unit , x , y ) ;
72621: LD_VAR 0 1
72625: PPUSH
72626: LD_VAR 0 2
72630: PPUSH
72631: LD_VAR 0 3
72635: PPUSH
72636: CALL_OW 118
// repeat if Multiplayer then
72640: LD_OWVAR 4
72644: IFFALSE 72655
// wait ( 35 ) else
72646: LD_INT 35
72648: PPUSH
72649: CALL_OW 67
72653: GO 72662
// wait ( 5 ) ;
72655: LD_INT 5
72657: PPUSH
72658: CALL_OW 67
// _d := GetDir ( unit ) ;
72662: LD_ADDR_VAR 0 11
72666: PUSH
72667: LD_VAR 0 1
72671: PPUSH
72672: CALL_OW 254
72676: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72677: LD_ADDR_VAR 0 7
72681: PUSH
72682: LD_VAR 0 1
72686: PPUSH
72687: CALL_OW 250
72691: PPUSH
72692: LD_VAR 0 1
72696: PPUSH
72697: CALL_OW 251
72701: PPUSH
72702: LD_VAR 0 2
72706: PPUSH
72707: LD_VAR 0 3
72711: PPUSH
72712: CALL 63409 0 4
72716: ST_TO_ADDR
// until dir = _d ;
72717: LD_VAR 0 7
72721: PUSH
72722: LD_VAR 0 11
72726: EQUAL
72727: IFFALSE 72640
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
72729: LD_ADDR_VAR 0 9
72733: PUSH
72734: LD_VAR 0 1
72738: PPUSH
72739: CALL_OW 250
72743: PPUSH
72744: LD_VAR 0 7
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: CALL_OW 272
72758: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
72759: LD_ADDR_VAR 0 10
72763: PUSH
72764: LD_VAR 0 1
72768: PPUSH
72769: CALL_OW 251
72773: PPUSH
72774: LD_VAR 0 7
72778: PPUSH
72779: LD_VAR 0 5
72783: PPUSH
72784: CALL_OW 273
72788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72789: LD_VAR 0 9
72793: PPUSH
72794: LD_VAR 0 10
72798: PPUSH
72799: CALL_OW 488
72803: NOT
72804: IFFALSE 72808
// exit ;
72806: GO 72930
// ComAnimCustom ( unit , 1 ) ;
72808: LD_VAR 0 1
72812: PPUSH
72813: LD_INT 1
72815: PPUSH
72816: CALL_OW 592
// p := 0 ;
72820: LD_ADDR_VAR 0 12
72824: PUSH
72825: LD_INT 0
72827: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72828: LD_VAR 0 9
72832: PPUSH
72833: LD_VAR 0 10
72837: PPUSH
72838: LD_VAR 0 6
72842: PPUSH
72843: LD_VAR 0 8
72847: PPUSH
72848: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
72852: LD_INT 35
72854: PPUSH
72855: CALL_OW 67
// p := Inc ( p ) ;
72859: LD_ADDR_VAR 0 12
72863: PUSH
72864: LD_VAR 0 12
72868: PPUSH
72869: CALL 63365 0 1
72873: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
72874: LD_VAR 0 12
72878: PUSH
72879: LD_INT 3
72881: EQUAL
72882: IFTRUE 72896
72884: PUSH
72885: LD_VAR 0 1
72889: PPUSH
72890: CALL_OW 302
72894: NOT
72895: OR
72896: IFTRUE 72909
72898: PUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 301
72908: OR
72909: IFFALSE 72852
// RemoveSeeing ( _x , _y , side ) ;
72911: LD_VAR 0 9
72915: PPUSH
72916: LD_VAR 0 10
72920: PPUSH
72921: LD_VAR 0 6
72925: PPUSH
72926: CALL_OW 331
// end ;
72930: LD_VAR 0 4
72934: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
72935: LD_INT 0
72937: PPUSH
72938: PPUSH
72939: PPUSH
72940: PPUSH
72941: PPUSH
72942: PPUSH
72943: PPUSH
72944: PPUSH
72945: PPUSH
72946: PPUSH
72947: PPUSH
// if not unit then
72948: LD_VAR 0 1
72952: NOT
72953: IFFALSE 72957
// exit ;
72955: GO 73228
// side := GetSide ( unit ) ;
72957: LD_ADDR_VAR 0 3
72961: PUSH
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 255
72971: ST_TO_ADDR
// x := GetX ( unit ) ;
72972: LD_ADDR_VAR 0 5
72976: PUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: CALL_OW 250
72986: ST_TO_ADDR
// y := GetY ( unit ) ;
72987: LD_ADDR_VAR 0 6
72991: PUSH
72992: LD_VAR 0 1
72996: PPUSH
72997: CALL_OW 251
73001: ST_TO_ADDR
// r := 8 ;
73002: LD_ADDR_VAR 0 4
73006: PUSH
73007: LD_INT 8
73009: ST_TO_ADDR
// if x - r < 0 then
73010: LD_VAR 0 5
73014: PUSH
73015: LD_VAR 0 4
73019: MINUS
73020: PUSH
73021: LD_INT 0
73023: LESS
73024: IFFALSE 73036
// min_x := 0 else
73026: LD_ADDR_VAR 0 7
73030: PUSH
73031: LD_INT 0
73033: ST_TO_ADDR
73034: GO 73052
// min_x := x - r ;
73036: LD_ADDR_VAR 0 7
73040: PUSH
73041: LD_VAR 0 5
73045: PUSH
73046: LD_VAR 0 4
73050: MINUS
73051: ST_TO_ADDR
// if y - r < 0 then
73052: LD_VAR 0 6
73056: PUSH
73057: LD_VAR 0 4
73061: MINUS
73062: PUSH
73063: LD_INT 0
73065: LESS
73066: IFFALSE 73078
// min_y := 0 else
73068: LD_ADDR_VAR 0 8
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
73076: GO 73094
// min_y := y - r ;
73078: LD_ADDR_VAR 0 8
73082: PUSH
73083: LD_VAR 0 6
73087: PUSH
73088: LD_VAR 0 4
73092: MINUS
73093: ST_TO_ADDR
// max_x := x + r ;
73094: LD_ADDR_VAR 0 9
73098: PUSH
73099: LD_VAR 0 5
73103: PUSH
73104: LD_VAR 0 4
73108: PLUS
73109: ST_TO_ADDR
// max_y := y + r ;
73110: LD_ADDR_VAR 0 10
73114: PUSH
73115: LD_VAR 0 6
73119: PUSH
73120: LD_VAR 0 4
73124: PLUS
73125: ST_TO_ADDR
// for _x = min_x to max_x do
73126: LD_ADDR_VAR 0 11
73130: PUSH
73131: DOUBLE
73132: LD_VAR 0 7
73136: DEC
73137: ST_TO_ADDR
73138: LD_VAR 0 9
73142: PUSH
73143: FOR_TO
73144: IFFALSE 73226
// for _y = min_y to max_y do
73146: LD_ADDR_VAR 0 12
73150: PUSH
73151: DOUBLE
73152: LD_VAR 0 8
73156: DEC
73157: ST_TO_ADDR
73158: LD_VAR 0 10
73162: PUSH
73163: FOR_TO
73164: IFFALSE 73222
// begin if not ValidHex ( _x , _y ) then
73166: LD_VAR 0 11
73170: PPUSH
73171: LD_VAR 0 12
73175: PPUSH
73176: CALL_OW 488
73180: NOT
73181: IFFALSE 73185
// continue ;
73183: GO 73163
// if MineAtPos ( _x , _y ) then
73185: LD_VAR 0 11
73189: PPUSH
73190: LD_VAR 0 12
73194: PPUSH
73195: CALL_OW 458
73199: IFFALSE 73220
// ViewMineAtPos ( _x , _y , side ) ;
73201: LD_VAR 0 11
73205: PPUSH
73206: LD_VAR 0 12
73210: PPUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: CALL_OW 457
// end ;
73220: GO 73163
73222: POP
73223: POP
73224: GO 73143
73226: POP
73227: POP
// end ;
73228: LD_VAR 0 2
73232: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
73233: LD_INT 0
73235: PPUSH
73236: PPUSH
73237: PPUSH
73238: PPUSH
73239: PPUSH
73240: PPUSH
// if not units then
73241: LD_VAR 0 1
73245: NOT
73246: IFFALSE 73250
// exit ;
73248: GO 73680
// scaners := [ ] ;
73250: LD_ADDR_VAR 0 6
73254: PUSH
73255: EMPTY
73256: ST_TO_ADDR
// for i in units do
73257: LD_ADDR_VAR 0 3
73261: PUSH
73262: LD_VAR 0 1
73266: PUSH
73267: FOR_IN
73268: IFFALSE 73425
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
73270: LD_VAR 0 3
73274: PPUSH
73275: CALL_OW 264
73279: PUSH
73280: LD_INT 11
73282: NONEQUAL
73283: IFTRUE 73297
73285: PUSH
73286: LD_VAR 0 3
73290: PPUSH
73291: CALL_OW 302
73295: NOT
73296: OR
73297: IFTRUE 73314
73299: PUSH
73300: LD_VAR 0 3
73304: PPUSH
73305: CALL_OW 110
73309: PUSH
73310: LD_INT 502
73312: EQUAL
73313: OR
73314: IFFALSE 73318
// continue ;
73316: GO 73267
// ComStop ( i ) ;
73318: LD_VAR 0 3
73322: PPUSH
73323: CALL_OW 141
// x := GetX ( i ) ;
73327: LD_ADDR_VAR 0 4
73331: PUSH
73332: LD_VAR 0 3
73336: PPUSH
73337: CALL_OW 250
73341: ST_TO_ADDR
// y := GetY ( i ) ;
73342: LD_ADDR_VAR 0 5
73346: PUSH
73347: LD_VAR 0 3
73351: PPUSH
73352: CALL_OW 251
73356: ST_TO_ADDR
// if GetSide ( i ) = your_side then
73357: LD_VAR 0 3
73361: PPUSH
73362: CALL_OW 255
73366: PUSH
73367: LD_OWVAR 2
73371: EQUAL
73372: IFFALSE 73391
// PlaySoundXY ( x , y , mineDetector ) ;
73374: LD_VAR 0 4
73378: PPUSH
73379: LD_VAR 0 5
73383: PPUSH
73384: LD_STRING mineDetector
73386: PPUSH
73387: CALL_OW 366
// scaners := Join ( scaners , i ) ;
73391: LD_ADDR_VAR 0 6
73395: PUSH
73396: LD_VAR 0 6
73400: PPUSH
73401: LD_VAR 0 3
73405: PPUSH
73406: CALL 61992 0 2
73410: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
73411: LD_VAR 0 3
73415: PPUSH
73416: LD_INT 502
73418: PPUSH
73419: CALL_OW 109
// end ;
73423: GO 73267
73425: POP
73426: POP
// if not scaners then
73427: LD_VAR 0 6
73431: NOT
73432: IFFALSE 73436
// exit ;
73434: GO 73680
// wait ( 3 ) ;
73436: LD_INT 3
73438: PPUSH
73439: CALL_OW 67
// timer := 6 ;
73443: LD_ADDR_VAR 0 7
73447: PUSH
73448: LD_INT 6
73450: ST_TO_ADDR
// repeat for i in scaners do
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: LD_VAR 0 6
73460: PUSH
73461: FOR_IN
73462: IFFALSE 73578
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
73464: LD_VAR 0 3
73468: PPUSH
73469: CALL_OW 302
73473: NOT
73474: IFTRUE 73487
73476: PUSH
73477: LD_VAR 0 3
73481: PPUSH
73482: CALL_OW 314
73486: OR
73487: IFTRUE 73518
73489: PUSH
73490: LD_VAR 0 3
73494: PPUSH
73495: CALL_OW 263
73499: PUSH
73500: LD_INT 1
73502: EQUAL
73503: IFFALSE 73517
73505: PUSH
73506: LD_VAR 0 3
73510: PPUSH
73511: CALL_OW 311
73515: NOT
73516: AND
73517: OR
73518: IFFALSE 73562
// begin SetUnitDisplayNumber ( i , 0 ) ;
73520: LD_VAR 0 3
73524: PPUSH
73525: LD_INT 0
73527: PPUSH
73528: CALL_OW 505
// SetTag ( i , 0 ) ;
73532: LD_VAR 0 3
73536: PPUSH
73537: LD_INT 0
73539: PPUSH
73540: CALL_OW 109
// scaners := scaners diff i ;
73544: LD_ADDR_VAR 0 6
73548: PUSH
73549: LD_VAR 0 6
73553: PUSH
73554: LD_VAR 0 3
73558: DIFF
73559: ST_TO_ADDR
// continue ;
73560: GO 73461
// end ; SetUnitDisplayNumber ( i , timer ) ;
73562: LD_VAR 0 3
73566: PPUSH
73567: LD_VAR 0 7
73571: PPUSH
73572: CALL_OW 505
// end ;
73576: GO 73461
73578: POP
73579: POP
// if not scaners then
73580: LD_VAR 0 6
73584: NOT
73585: IFFALSE 73589
// exit ;
73587: GO 73680
// timer := Dec ( timer ) ;
73589: LD_ADDR_VAR 0 7
73593: PUSH
73594: LD_VAR 0 7
73598: PPUSH
73599: CALL 63387 0 1
73603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73604: LD_INT 35
73606: PPUSH
73607: CALL_OW 67
// until timer = 0 ;
73611: LD_VAR 0 7
73615: PUSH
73616: LD_INT 0
73618: EQUAL
73619: IFFALSE 73451
// if not scaners then
73621: LD_VAR 0 6
73625: NOT
73626: IFFALSE 73630
// exit ;
73628: GO 73680
// for i in scaners do
73630: LD_ADDR_VAR 0 3
73634: PUSH
73635: LD_VAR 0 6
73639: PUSH
73640: FOR_IN
73641: IFFALSE 73678
// begin SetUnitDisplayNumber ( i , 0 ) ;
73643: LD_VAR 0 3
73647: PPUSH
73648: LD_INT 0
73650: PPUSH
73651: CALL_OW 505
// SetTag ( i , 0 ) ;
73655: LD_VAR 0 3
73659: PPUSH
73660: LD_INT 0
73662: PPUSH
73663: CALL_OW 109
// RevealDetectorMine ( i ) ;
73667: LD_VAR 0 3
73671: PPUSH
73672: CALL 72935 0 1
// end ;
73676: GO 73640
73678: POP
73679: POP
// end ;
73680: LD_VAR 0 2
73684: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
73685: LD_INT 0
73687: PPUSH
// if p1 = mine_detector_mode then
73688: LD_VAR 0 2
73692: PUSH
73693: LD_INT 103
73695: EQUAL
73696: IFFALSE 73707
// DetectMine ( units ) ;
73698: LD_VAR 0 1
73702: PPUSH
73703: CALL 73233 0 1
// end ; end_of_file
73707: LD_VAR 0 7
73711: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73712: LD_VAR 0 1
73716: PPUSH
73717: LD_VAR 0 2
73721: PPUSH
73722: LD_VAR 0 3
73726: PPUSH
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 5
73736: PPUSH
73737: LD_VAR 0 6
73741: PPUSH
73742: CALL 7929 0 6
// end ;
73746: PPOPN 6
73748: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73749: LD_INT 0
73751: PPUSH
// begin if not units then
73752: LD_VAR 0 1
73756: NOT
73757: IFFALSE 73761
// exit ;
73759: GO 73795
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73761: LD_VAR 0 1
73765: PPUSH
73766: LD_VAR 0 2
73770: PPUSH
73771: LD_VAR 0 3
73775: PPUSH
73776: LD_VAR 0 4
73780: PPUSH
73781: LD_VAR 0 5
73785: PPUSH
73786: LD_VAR 0 6
73790: PPUSH
73791: CALL 73685 0 6
// end ;
73795: PPOPN 7
73797: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73798: CALL 7816 0 0
// end ;
73802: PPOPN 1
73804: END
