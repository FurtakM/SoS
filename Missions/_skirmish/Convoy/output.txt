// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// export function SOS_MapStart ( ) ; begin
7745: LD_INT 0
7747: PPUSH
// if streamModeActive then
7748: LD_EXP 20
7752: IFFALSE 7761
// DefineStreamItems ( true ) ;
7754: LD_INT 1
7756: PPUSH
7757: CALL 9565 0 1
// UpdateLuaVariables ( ) ;
7761: CALL 7778 0 0
// UpdateFactoryWaypoints ( ) ;
7765: CALL 22426 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7769: CALL 22683 0 0
// end ;
7773: LD_VAR 0 1
7777: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
7778: LD_INT 0
7780: PPUSH
// if not globalGameSaveCounter then
7781: LD_EXP 19
7785: NOT
7786: IFFALSE 7797
// ToLua ( setGameSaveCounter(0) ) else
7788: LD_STRING setGameSaveCounter(0)
7790: PPUSH
7791: CALL_OW 559
7795: GO 7829
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7797: LD_ADDR_EXP 19
7801: PUSH
7802: LD_EXP 19
7806: PPUSH
7807: CALL 62351 0 1
7811: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7812: LD_STRING setGameSaveCounter(
7814: PUSH
7815: LD_EXP 19
7819: STR
7820: PUSH
7821: LD_STRING )
7823: STR
7824: PPUSH
7825: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7829: LD_STRING setGameDifficulty(
7831: PUSH
7832: LD_OWVAR 67
7836: STR
7837: PUSH
7838: LD_STRING )
7840: STR
7841: PPUSH
7842: CALL_OW 559
// end ;
7846: LD_VAR 0 1
7850: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7851: LD_INT 0
7853: PPUSH
// if p2 = stream_mode then
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 100
7861: EQUAL
7862: IFFALSE 8865
// begin if not StreamModeActive then
7864: LD_EXP 20
7868: NOT
7869: IFFALSE 7879
// StreamModeActive := true ;
7871: LD_ADDR_EXP 20
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 0 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 0
7886: EQUAL
7887: IFFALSE 7893
// InitStreamMode ;
7889: CALL 9101 0 0
// if p3 = 1 then
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 1
7900: EQUAL
7901: IFFALSE 7911
// sRocket := true ;
7903: LD_ADDR_EXP 25
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if p3 = 2 then
7911: LD_VAR 0 3
7915: PUSH
7916: LD_INT 2
7918: EQUAL
7919: IFFALSE 7929
// sSpeed := true ;
7921: LD_ADDR_EXP 24
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// if p3 = 3 then
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 3
7936: EQUAL
7937: IFFALSE 7947
// sEngine := true ;
7939: LD_ADDR_EXP 26
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// if p3 = 4 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 4
7954: EQUAL
7955: IFFALSE 7965
// sSpec := true ;
7957: LD_ADDR_EXP 23
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// if p3 = 5 then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 5
7972: EQUAL
7973: IFFALSE 7983
// sLevel := true ;
7975: LD_ADDR_EXP 27
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// if p3 = 6 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 6
7990: EQUAL
7991: IFFALSE 8001
// sArmoury := true ;
7993: LD_ADDR_EXP 28
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// if p3 = 7 then
8001: LD_VAR 0 3
8005: PUSH
8006: LD_INT 7
8008: EQUAL
8009: IFFALSE 8019
// sRadar := true ;
8011: LD_ADDR_EXP 29
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 8 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 8
8026: EQUAL
8027: IFFALSE 8037
// sBunker := true ;
8029: LD_ADDR_EXP 30
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// if p3 = 9 then
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 9
8044: EQUAL
8045: IFFALSE 8055
// sHack := true ;
8047: LD_ADDR_EXP 31
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// if p3 = 10 then
8055: LD_VAR 0 3
8059: PUSH
8060: LD_INT 10
8062: EQUAL
8063: IFFALSE 8073
// sFire := true ;
8065: LD_ADDR_EXP 32
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// if p3 = 11 then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 11
8080: EQUAL
8081: IFFALSE 8091
// sRefresh := true ;
8083: LD_ADDR_EXP 33
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// if p3 = 12 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 12
8098: EQUAL
8099: IFFALSE 8109
// sExp := true ;
8101: LD_ADDR_EXP 34
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// if p3 = 13 then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 13
8116: EQUAL
8117: IFFALSE 8127
// sDepot := true ;
8119: LD_ADDR_EXP 35
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// if p3 = 14 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 14
8134: EQUAL
8135: IFFALSE 8145
// sFlag := true ;
8137: LD_ADDR_EXP 36
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 15 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 15
8152: EQUAL
8153: IFFALSE 8163
// sKamikadze := true ;
8155: LD_ADDR_EXP 44
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// if p3 = 16 then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 16
8170: EQUAL
8171: IFFALSE 8181
// sTroll := true ;
8173: LD_ADDR_EXP 45
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// if p3 = 17 then
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 17
8188: EQUAL
8189: IFFALSE 8199
// sSlow := true ;
8191: LD_ADDR_EXP 46
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// if p3 = 18 then
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 18
8206: EQUAL
8207: IFFALSE 8217
// sLack := true ;
8209: LD_ADDR_EXP 47
8213: PUSH
8214: LD_INT 1
8216: ST_TO_ADDR
// if p3 = 19 then
8217: LD_VAR 0 3
8221: PUSH
8222: LD_INT 19
8224: EQUAL
8225: IFFALSE 8235
// sTank := true ;
8227: LD_ADDR_EXP 49
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// if p3 = 20 then
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 20
8242: EQUAL
8243: IFFALSE 8253
// sRemote := true ;
8245: LD_ADDR_EXP 50
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// if p3 = 21 then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 21
8260: EQUAL
8261: IFFALSE 8271
// sPowell := true ;
8263: LD_ADDR_EXP 51
8267: PUSH
8268: LD_INT 1
8270: ST_TO_ADDR
// if p3 = 22 then
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 22
8278: EQUAL
8279: IFFALSE 8289
// sTeleport := true ;
8281: LD_ADDR_EXP 54
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// if p3 = 23 then
8289: LD_VAR 0 3
8293: PUSH
8294: LD_INT 23
8296: EQUAL
8297: IFFALSE 8307
// sOilTower := true ;
8299: LD_ADDR_EXP 56
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// if p3 = 24 then
8307: LD_VAR 0 3
8311: PUSH
8312: LD_INT 24
8314: EQUAL
8315: IFFALSE 8325
// sShovel := true ;
8317: LD_ADDR_EXP 57
8321: PUSH
8322: LD_INT 1
8324: ST_TO_ADDR
// if p3 = 25 then
8325: LD_VAR 0 3
8329: PUSH
8330: LD_INT 25
8332: EQUAL
8333: IFFALSE 8343
// sSheik := true ;
8335: LD_ADDR_EXP 58
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// if p3 = 26 then
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 26
8350: EQUAL
8351: IFFALSE 8361
// sEarthquake := true ;
8353: LD_ADDR_EXP 60
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// if p3 = 27 then
8361: LD_VAR 0 3
8365: PUSH
8366: LD_INT 27
8368: EQUAL
8369: IFFALSE 8379
// sAI := true ;
8371: LD_ADDR_EXP 61
8375: PUSH
8376: LD_INT 1
8378: ST_TO_ADDR
// if p3 = 28 then
8379: LD_VAR 0 3
8383: PUSH
8384: LD_INT 28
8386: EQUAL
8387: IFFALSE 8397
// sCargo := true ;
8389: LD_ADDR_EXP 64
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// if p3 = 29 then
8397: LD_VAR 0 3
8401: PUSH
8402: LD_INT 29
8404: EQUAL
8405: IFFALSE 8415
// sDLaser := true ;
8407: LD_ADDR_EXP 65
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// if p3 = 30 then
8415: LD_VAR 0 3
8419: PUSH
8420: LD_INT 30
8422: EQUAL
8423: IFFALSE 8433
// sExchange := true ;
8425: LD_ADDR_EXP 66
8429: PUSH
8430: LD_INT 1
8432: ST_TO_ADDR
// if p3 = 31 then
8433: LD_VAR 0 3
8437: PUSH
8438: LD_INT 31
8440: EQUAL
8441: IFFALSE 8451
// sFac := true ;
8443: LD_ADDR_EXP 67
8447: PUSH
8448: LD_INT 1
8450: ST_TO_ADDR
// if p3 = 32 then
8451: LD_VAR 0 3
8455: PUSH
8456: LD_INT 32
8458: EQUAL
8459: IFFALSE 8469
// sPower := true ;
8461: LD_ADDR_EXP 68
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// if p3 = 33 then
8469: LD_VAR 0 3
8473: PUSH
8474: LD_INT 33
8476: EQUAL
8477: IFFALSE 8487
// sRandom := true ;
8479: LD_ADDR_EXP 69
8483: PUSH
8484: LD_INT 1
8486: ST_TO_ADDR
// if p3 = 34 then
8487: LD_VAR 0 3
8491: PUSH
8492: LD_INT 34
8494: EQUAL
8495: IFFALSE 8505
// sShield := true ;
8497: LD_ADDR_EXP 70
8501: PUSH
8502: LD_INT 1
8504: ST_TO_ADDR
// if p3 = 35 then
8505: LD_VAR 0 3
8509: PUSH
8510: LD_INT 35
8512: EQUAL
8513: IFFALSE 8523
// sTime := true ;
8515: LD_ADDR_EXP 71
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// if p3 = 36 then
8523: LD_VAR 0 3
8527: PUSH
8528: LD_INT 36
8530: EQUAL
8531: IFFALSE 8541
// sTools := true ;
8533: LD_ADDR_EXP 72
8537: PUSH
8538: LD_INT 1
8540: ST_TO_ADDR
// if p3 = 101 then
8541: LD_VAR 0 3
8545: PUSH
8546: LD_INT 101
8548: EQUAL
8549: IFFALSE 8559
// sSold := true ;
8551: LD_ADDR_EXP 37
8555: PUSH
8556: LD_INT 1
8558: ST_TO_ADDR
// if p3 = 102 then
8559: LD_VAR 0 3
8563: PUSH
8564: LD_INT 102
8566: EQUAL
8567: IFFALSE 8577
// sDiff := true ;
8569: LD_ADDR_EXP 38
8573: PUSH
8574: LD_INT 1
8576: ST_TO_ADDR
// if p3 = 103 then
8577: LD_VAR 0 3
8581: PUSH
8582: LD_INT 103
8584: EQUAL
8585: IFFALSE 8595
// sFog := true ;
8587: LD_ADDR_EXP 41
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// if p3 = 104 then
8595: LD_VAR 0 3
8599: PUSH
8600: LD_INT 104
8602: EQUAL
8603: IFFALSE 8613
// sReset := true ;
8605: LD_ADDR_EXP 42
8609: PUSH
8610: LD_INT 1
8612: ST_TO_ADDR
// if p3 = 105 then
8613: LD_VAR 0 3
8617: PUSH
8618: LD_INT 105
8620: EQUAL
8621: IFFALSE 8631
// sSun := true ;
8623: LD_ADDR_EXP 43
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// if p3 = 106 then
8631: LD_VAR 0 3
8635: PUSH
8636: LD_INT 106
8638: EQUAL
8639: IFFALSE 8649
// sTiger := true ;
8641: LD_ADDR_EXP 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// if p3 = 107 then
8649: LD_VAR 0 3
8653: PUSH
8654: LD_INT 107
8656: EQUAL
8657: IFFALSE 8667
// sBomb := true ;
8659: LD_ADDR_EXP 40
8663: PUSH
8664: LD_INT 1
8666: ST_TO_ADDR
// if p3 = 108 then
8667: LD_VAR 0 3
8671: PUSH
8672: LD_INT 108
8674: EQUAL
8675: IFFALSE 8685
// sWound := true ;
8677: LD_ADDR_EXP 48
8681: PUSH
8682: LD_INT 1
8684: ST_TO_ADDR
// if p3 = 109 then
8685: LD_VAR 0 3
8689: PUSH
8690: LD_INT 109
8692: EQUAL
8693: IFFALSE 8703
// sBetray := true ;
8695: LD_ADDR_EXP 52
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// if p3 = 110 then
8703: LD_VAR 0 3
8707: PUSH
8708: LD_INT 110
8710: EQUAL
8711: IFFALSE 8721
// sContamin := true ;
8713: LD_ADDR_EXP 53
8717: PUSH
8718: LD_INT 1
8720: ST_TO_ADDR
// if p3 = 111 then
8721: LD_VAR 0 3
8725: PUSH
8726: LD_INT 111
8728: EQUAL
8729: IFFALSE 8739
// sOil := true ;
8731: LD_ADDR_EXP 55
8735: PUSH
8736: LD_INT 1
8738: ST_TO_ADDR
// if p3 = 112 then
8739: LD_VAR 0 3
8743: PUSH
8744: LD_INT 112
8746: EQUAL
8747: IFFALSE 8757
// sStu := true ;
8749: LD_ADDR_EXP 59
8753: PUSH
8754: LD_INT 1
8756: ST_TO_ADDR
// if p3 = 113 then
8757: LD_VAR 0 3
8761: PUSH
8762: LD_INT 113
8764: EQUAL
8765: IFFALSE 8775
// sBazooka := true ;
8767: LD_ADDR_EXP 62
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// if p3 = 114 then
8775: LD_VAR 0 3
8779: PUSH
8780: LD_INT 114
8782: EQUAL
8783: IFFALSE 8793
// sMortar := true ;
8785: LD_ADDR_EXP 63
8789: PUSH
8790: LD_INT 1
8792: ST_TO_ADDR
// if p3 = 115 then
8793: LD_VAR 0 3
8797: PUSH
8798: LD_INT 115
8800: EQUAL
8801: IFFALSE 8811
// sRanger := true ;
8803: LD_ADDR_EXP 73
8807: PUSH
8808: LD_INT 1
8810: ST_TO_ADDR
// if p3 = 116 then
8811: LD_VAR 0 3
8815: PUSH
8816: LD_INT 116
8818: EQUAL
8819: IFFALSE 8829
// sComputer := true ;
8821: LD_ADDR_EXP 74
8825: PUSH
8826: LD_INT 1
8828: ST_TO_ADDR
// if p3 = 117 then
8829: LD_VAR 0 3
8833: PUSH
8834: LD_INT 117
8836: EQUAL
8837: IFFALSE 8847
// s30 := true ;
8839: LD_ADDR_EXP 75
8843: PUSH
8844: LD_INT 1
8846: ST_TO_ADDR
// if p3 = 118 then
8847: LD_VAR 0 3
8851: PUSH
8852: LD_INT 118
8854: EQUAL
8855: IFFALSE 8865
// s60 := true ;
8857: LD_ADDR_EXP 76
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// end ; if p2 = hack_mode then
8865: LD_VAR 0 2
8869: PUSH
8870: LD_INT 101
8872: EQUAL
8873: IFFALSE 9001
// begin case p3 of 1 :
8875: LD_VAR 0 3
8879: PUSH
8880: LD_INT 1
8882: DOUBLE
8883: EQUAL
8884: IFTRUE 8888
8886: GO 8895
8888: POP
// hHackUnlimitedResources ; 2 :
8889: CALL 21172 0 0
8893: GO 9001
8895: LD_INT 2
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8910
8903: POP
// hHackSetLevel10 ; 3 :
8904: CALL 21305 0 0
8908: GO 9001
8910: LD_INT 3
8912: DOUBLE
8913: EQUAL
8914: IFTRUE 8918
8916: GO 8925
8918: POP
// hHackSetLevel10YourUnits ; 4 :
8919: CALL 21390 0 0
8923: GO 9001
8925: LD_INT 4
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8940
8933: POP
// hHackInvincible ; 5 :
8934: CALL 21838 0 0
8938: GO 9001
8940: LD_INT 5
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 8955
8948: POP
// hHackInvisible ; 6 :
8949: CALL 21949 0 0
8953: GO 9001
8955: LD_INT 6
8957: DOUBLE
8958: EQUAL
8959: IFTRUE 8963
8961: GO 8970
8963: POP
// hHackChangeYourSide ; 7 :
8964: CALL 22006 0 0
8968: GO 9001
8970: LD_INT 7
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 8985
8978: POP
// hHackChangeUnitSide ; 8 :
8979: CALL 22048 0 0
8983: GO 9001
8985: LD_INT 8
8987: DOUBLE
8988: EQUAL
8989: IFTRUE 8993
8991: GO 9000
8993: POP
// hHackFog ; end ;
8994: CALL 22149 0 0
8998: GO 9001
9000: POP
// end ; if p2 = game_save_mode then
9001: LD_VAR 0 2
9005: PUSH
9006: LD_INT 102
9008: EQUAL
9009: IFFALSE 9074
// begin if p3 = 1 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 1
9018: EQUAL
9019: IFFALSE 9031
// globalGameSaveCounter := p4 ;
9021: LD_ADDR_EXP 19
9025: PUSH
9026: LD_VAR 0 4
9030: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 2
9038: EQUAL
9039: PUSH
9040: LD_EXP 19
9044: AND
9045: IFFALSE 9064
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9047: LD_STRING setGameSaveCounter(
9049: PUSH
9050: LD_EXP 19
9054: STR
9055: PUSH
9056: LD_STRING )
9058: STR
9059: PPUSH
9060: CALL_OW 559
// display_strings := globalGameSaveCounter ;
9064: LD_ADDR_OWVAR 47
9068: PUSH
9069: LD_EXP 19
9073: ST_TO_ADDR
// end ; end ;
9074: LD_VAR 0 7
9078: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9079: GO 9081
9081: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9082: LD_STRING initStreamRollete();
9084: PPUSH
9085: CALL_OW 559
// InitStreamMode ;
9089: CALL 9101 0 0
// DefineStreamItems ( false ) ;
9093: LD_INT 0
9095: PPUSH
9096: CALL 9565 0 1
// end ;
9100: END
// function InitStreamMode ; begin
9101: LD_INT 0
9103: PPUSH
// streamModeActive := false ;
9104: LD_ADDR_EXP 20
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// normalCounter := 36 ;
9112: LD_ADDR_EXP 21
9116: PUSH
9117: LD_INT 36
9119: ST_TO_ADDR
// hardcoreCounter := 18 ;
9120: LD_ADDR_EXP 22
9124: PUSH
9125: LD_INT 18
9127: ST_TO_ADDR
// sRocket := false ;
9128: LD_ADDR_EXP 25
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sSpeed := false ;
9136: LD_ADDR_EXP 24
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sEngine := false ;
9144: LD_ADDR_EXP 26
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sSpec := false ;
9152: LD_ADDR_EXP 23
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// sLevel := false ;
9160: LD_ADDR_EXP 27
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sArmoury := false ;
9168: LD_ADDR_EXP 28
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sRadar := false ;
9176: LD_ADDR_EXP 29
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sBunker := false ;
9184: LD_ADDR_EXP 30
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sHack := false ;
9192: LD_ADDR_EXP 31
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sFire := false ;
9200: LD_ADDR_EXP 32
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sRefresh := false ;
9208: LD_ADDR_EXP 33
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sExp := false ;
9216: LD_ADDR_EXP 34
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sDepot := false ;
9224: LD_ADDR_EXP 35
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sFlag := false ;
9232: LD_ADDR_EXP 36
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sKamikadze := false ;
9240: LD_ADDR_EXP 44
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sTroll := false ;
9248: LD_ADDR_EXP 45
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sSlow := false ;
9256: LD_ADDR_EXP 46
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sLack := false ;
9264: LD_ADDR_EXP 47
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sTank := false ;
9272: LD_ADDR_EXP 49
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sRemote := false ;
9280: LD_ADDR_EXP 50
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sPowell := false ;
9288: LD_ADDR_EXP 51
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sTeleport := false ;
9296: LD_ADDR_EXP 54
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sOilTower := false ;
9304: LD_ADDR_EXP 56
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sShovel := false ;
9312: LD_ADDR_EXP 57
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sSheik := false ;
9320: LD_ADDR_EXP 58
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sEarthquake := false ;
9328: LD_ADDR_EXP 60
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sAI := false ;
9336: LD_ADDR_EXP 61
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sCargo := false ;
9344: LD_ADDR_EXP 64
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sDLaser := false ;
9352: LD_ADDR_EXP 65
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sExchange := false ;
9360: LD_ADDR_EXP 66
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sFac := false ;
9368: LD_ADDR_EXP 67
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sPower := false ;
9376: LD_ADDR_EXP 68
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sRandom := false ;
9384: LD_ADDR_EXP 69
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sShield := false ;
9392: LD_ADDR_EXP 70
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sTime := false ;
9400: LD_ADDR_EXP 71
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sTools := false ;
9408: LD_ADDR_EXP 72
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sSold := false ;
9416: LD_ADDR_EXP 37
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sDiff := false ;
9424: LD_ADDR_EXP 38
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sFog := false ;
9432: LD_ADDR_EXP 41
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sReset := false ;
9440: LD_ADDR_EXP 42
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sSun := false ;
9448: LD_ADDR_EXP 43
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sTiger := false ;
9456: LD_ADDR_EXP 39
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sBomb := false ;
9464: LD_ADDR_EXP 40
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sWound := false ;
9472: LD_ADDR_EXP 48
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sBetray := false ;
9480: LD_ADDR_EXP 52
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sContamin := false ;
9488: LD_ADDR_EXP 53
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sOil := false ;
9496: LD_ADDR_EXP 55
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sStu := false ;
9504: LD_ADDR_EXP 59
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sBazooka := false ;
9512: LD_ADDR_EXP 62
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sMortar := false ;
9520: LD_ADDR_EXP 63
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sRanger := false ;
9528: LD_ADDR_EXP 73
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sComputer := false ;
9536: LD_ADDR_EXP 74
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// s30 := false ;
9544: LD_ADDR_EXP 75
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// s60 := false ;
9552: LD_ADDR_EXP 76
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// end ;
9560: LD_VAR 0 1
9564: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9565: LD_INT 0
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
// result := [ ] ;
9574: LD_ADDR_VAR 0 2
9578: PUSH
9579: EMPTY
9580: ST_TO_ADDR
// if campaign_id = 1 then
9581: LD_OWVAR 69
9585: PUSH
9586: LD_INT 1
9588: EQUAL
9589: IFFALSE 12755
// begin case mission_number of 1 :
9591: LD_OWVAR 70
9595: PUSH
9596: LD_INT 1
9598: DOUBLE
9599: EQUAL
9600: IFTRUE 9604
9602: GO 9680
9604: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9605: LD_ADDR_VAR 0 2
9609: PUSH
9610: LD_INT 2
9612: PUSH
9613: LD_INT 4
9615: PUSH
9616: LD_INT 11
9618: PUSH
9619: LD_INT 12
9621: PUSH
9622: LD_INT 15
9624: PUSH
9625: LD_INT 16
9627: PUSH
9628: LD_INT 22
9630: PUSH
9631: LD_INT 23
9633: PUSH
9634: LD_INT 26
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 101
9650: PUSH
9651: LD_INT 102
9653: PUSH
9654: LD_INT 106
9656: PUSH
9657: LD_INT 116
9659: PUSH
9660: LD_INT 117
9662: PUSH
9663: LD_INT 118
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: ST_TO_ADDR
9678: GO 12753
9680: LD_INT 2
9682: DOUBLE
9683: EQUAL
9684: IFTRUE 9688
9686: GO 9772
9688: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 2
9696: PUSH
9697: LD_INT 4
9699: PUSH
9700: LD_INT 11
9702: PUSH
9703: LD_INT 12
9705: PUSH
9706: LD_INT 15
9708: PUSH
9709: LD_INT 16
9711: PUSH
9712: LD_INT 22
9714: PUSH
9715: LD_INT 23
9717: PUSH
9718: LD_INT 26
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 101
9734: PUSH
9735: LD_INT 102
9737: PUSH
9738: LD_INT 105
9740: PUSH
9741: LD_INT 106
9743: PUSH
9744: LD_INT 108
9746: PUSH
9747: LD_INT 116
9749: PUSH
9750: LD_INT 117
9752: PUSH
9753: LD_INT 118
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: ST_TO_ADDR
9770: GO 12753
9772: LD_INT 3
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9868
9780: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: LD_INT 2
9788: PUSH
9789: LD_INT 4
9791: PUSH
9792: LD_INT 5
9794: PUSH
9795: LD_INT 11
9797: PUSH
9798: LD_INT 12
9800: PUSH
9801: LD_INT 15
9803: PUSH
9804: LD_INT 16
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_INT 26
9812: PUSH
9813: LD_INT 36
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 101
9830: PUSH
9831: LD_INT 102
9833: PUSH
9834: LD_INT 105
9836: PUSH
9837: LD_INT 106
9839: PUSH
9840: LD_INT 108
9842: PUSH
9843: LD_INT 116
9845: PUSH
9846: LD_INT 117
9848: PUSH
9849: LD_INT 118
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: ST_TO_ADDR
9866: GO 12753
9868: LD_INT 4
9870: DOUBLE
9871: EQUAL
9872: IFTRUE 9876
9874: GO 9972
9876: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9877: LD_ADDR_VAR 0 2
9881: PUSH
9882: LD_INT 2
9884: PUSH
9885: LD_INT 4
9887: PUSH
9888: LD_INT 5
9890: PUSH
9891: LD_INT 8
9893: PUSH
9894: LD_INT 11
9896: PUSH
9897: LD_INT 12
9899: PUSH
9900: LD_INT 15
9902: PUSH
9903: LD_INT 16
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 23
9911: PUSH
9912: LD_INT 26
9914: PUSH
9915: LD_INT 36
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 101
9934: PUSH
9935: LD_INT 102
9937: PUSH
9938: LD_INT 105
9940: PUSH
9941: LD_INT 106
9943: PUSH
9944: LD_INT 108
9946: PUSH
9947: LD_INT 116
9949: PUSH
9950: LD_INT 117
9952: PUSH
9953: LD_INT 118
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: ST_TO_ADDR
9970: GO 12753
9972: LD_INT 5
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10092
9980: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9981: LD_ADDR_VAR 0 2
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: LD_INT 4
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: LD_INT 6
9997: PUSH
9998: LD_INT 8
10000: PUSH
10001: LD_INT 11
10003: PUSH
10004: LD_INT 12
10006: PUSH
10007: LD_INT 15
10009: PUSH
10010: LD_INT 16
10012: PUSH
10013: LD_INT 22
10015: PUSH
10016: LD_INT 23
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 26
10024: PUSH
10025: LD_INT 36
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 101
10046: PUSH
10047: LD_INT 102
10049: PUSH
10050: LD_INT 105
10052: PUSH
10053: LD_INT 106
10055: PUSH
10056: LD_INT 108
10058: PUSH
10059: LD_INT 109
10061: PUSH
10062: LD_INT 112
10064: PUSH
10065: LD_INT 116
10067: PUSH
10068: LD_INT 117
10070: PUSH
10071: LD_INT 118
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: ST_TO_ADDR
10090: GO 12753
10092: LD_INT 6
10094: DOUBLE
10095: EQUAL
10096: IFTRUE 10100
10098: GO 10232
10100: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10101: LD_ADDR_VAR 0 2
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: LD_INT 4
10111: PUSH
10112: LD_INT 5
10114: PUSH
10115: LD_INT 6
10117: PUSH
10118: LD_INT 8
10120: PUSH
10121: LD_INT 11
10123: PUSH
10124: LD_INT 12
10126: PUSH
10127: LD_INT 15
10129: PUSH
10130: LD_INT 16
10132: PUSH
10133: LD_INT 20
10135: PUSH
10136: LD_INT 21
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_INT 23
10144: PUSH
10145: LD_INT 25
10147: PUSH
10148: LD_INT 26
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 101
10186: PUSH
10187: LD_INT 102
10189: PUSH
10190: LD_INT 105
10192: PUSH
10193: LD_INT 106
10195: PUSH
10196: LD_INT 108
10198: PUSH
10199: LD_INT 109
10201: PUSH
10202: LD_INT 112
10204: PUSH
10205: LD_INT 116
10207: PUSH
10208: LD_INT 117
10210: PUSH
10211: LD_INT 118
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: ST_TO_ADDR
10230: GO 12753
10232: LD_INT 7
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10352
10240: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10241: LD_ADDR_VAR 0 2
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: LD_INT 4
10251: PUSH
10252: LD_INT 5
10254: PUSH
10255: LD_INT 7
10257: PUSH
10258: LD_INT 11
10260: PUSH
10261: LD_INT 12
10263: PUSH
10264: LD_INT 15
10266: PUSH
10267: LD_INT 16
10269: PUSH
10270: LD_INT 20
10272: PUSH
10273: LD_INT 21
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_INT 23
10281: PUSH
10282: LD_INT 25
10284: PUSH
10285: LD_INT 26
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 101
10306: PUSH
10307: LD_INT 102
10309: PUSH
10310: LD_INT 103
10312: PUSH
10313: LD_INT 105
10315: PUSH
10316: LD_INT 106
10318: PUSH
10319: LD_INT 108
10321: PUSH
10322: LD_INT 112
10324: PUSH
10325: LD_INT 116
10327: PUSH
10328: LD_INT 117
10330: PUSH
10331: LD_INT 118
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: ST_TO_ADDR
10350: GO 12753
10352: LD_INT 8
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10500
10360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10361: LD_ADDR_VAR 0 2
10365: PUSH
10366: LD_INT 2
10368: PUSH
10369: LD_INT 4
10371: PUSH
10372: LD_INT 5
10374: PUSH
10375: LD_INT 6
10377: PUSH
10378: LD_INT 7
10380: PUSH
10381: LD_INT 8
10383: PUSH
10384: LD_INT 11
10386: PUSH
10387: LD_INT 12
10389: PUSH
10390: LD_INT 15
10392: PUSH
10393: LD_INT 16
10395: PUSH
10396: LD_INT 20
10398: PUSH
10399: LD_INT 21
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 23
10407: PUSH
10408: LD_INT 25
10410: PUSH
10411: LD_INT 26
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 31
10419: PUSH
10420: LD_INT 32
10422: PUSH
10423: LD_INT 36
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 101
10450: PUSH
10451: LD_INT 102
10453: PUSH
10454: LD_INT 103
10456: PUSH
10457: LD_INT 105
10459: PUSH
10460: LD_INT 106
10462: PUSH
10463: LD_INT 108
10465: PUSH
10466: LD_INT 109
10468: PUSH
10469: LD_INT 112
10471: PUSH
10472: LD_INT 116
10474: PUSH
10475: LD_INT 117
10477: PUSH
10478: LD_INT 118
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: ST_TO_ADDR
10498: GO 12753
10500: LD_INT 9
10502: DOUBLE
10503: EQUAL
10504: IFTRUE 10508
10506: GO 10656
10508: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10509: LD_ADDR_VAR 0 2
10513: PUSH
10514: LD_INT 2
10516: PUSH
10517: LD_INT 4
10519: PUSH
10520: LD_INT 5
10522: PUSH
10523: LD_INT 6
10525: PUSH
10526: LD_INT 7
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: LD_INT 11
10534: PUSH
10535: LD_INT 12
10537: PUSH
10538: LD_INT 15
10540: PUSH
10541: LD_INT 16
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 26
10561: PUSH
10562: LD_INT 28
10564: PUSH
10565: LD_INT 30
10567: PUSH
10568: LD_INT 31
10570: PUSH
10571: LD_INT 32
10573: PUSH
10574: LD_INT 36
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 101
10602: PUSH
10603: LD_INT 102
10605: PUSH
10606: LD_INT 103
10608: PUSH
10609: LD_INT 105
10611: PUSH
10612: LD_INT 106
10614: PUSH
10615: LD_INT 108
10617: PUSH
10618: LD_INT 109
10620: PUSH
10621: LD_INT 112
10623: PUSH
10624: LD_INT 114
10626: PUSH
10627: LD_INT 116
10629: PUSH
10630: LD_INT 117
10632: PUSH
10633: LD_INT 118
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: ST_TO_ADDR
10654: GO 12753
10656: LD_INT 10
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10860
10664: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: LD_INT 4
10675: PUSH
10676: LD_INT 5
10678: PUSH
10679: LD_INT 6
10681: PUSH
10682: LD_INT 7
10684: PUSH
10685: LD_INT 8
10687: PUSH
10688: LD_INT 9
10690: PUSH
10691: LD_INT 10
10693: PUSH
10694: LD_INT 11
10696: PUSH
10697: LD_INT 12
10699: PUSH
10700: LD_INT 13
10702: PUSH
10703: LD_INT 14
10705: PUSH
10706: LD_INT 15
10708: PUSH
10709: LD_INT 16
10711: PUSH
10712: LD_INT 17
10714: PUSH
10715: LD_INT 18
10717: PUSH
10718: LD_INT 19
10720: PUSH
10721: LD_INT 20
10723: PUSH
10724: LD_INT 21
10726: PUSH
10727: LD_INT 22
10729: PUSH
10730: LD_INT 23
10732: PUSH
10733: LD_INT 24
10735: PUSH
10736: LD_INT 25
10738: PUSH
10739: LD_INT 26
10741: PUSH
10742: LD_INT 28
10744: PUSH
10745: LD_INT 30
10747: PUSH
10748: LD_INT 31
10750: PUSH
10751: LD_INT 32
10753: PUSH
10754: LD_INT 36
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 101
10790: PUSH
10791: LD_INT 102
10793: PUSH
10794: LD_INT 103
10796: PUSH
10797: LD_INT 104
10799: PUSH
10800: LD_INT 105
10802: PUSH
10803: LD_INT 106
10805: PUSH
10806: LD_INT 107
10808: PUSH
10809: LD_INT 108
10811: PUSH
10812: LD_INT 109
10814: PUSH
10815: LD_INT 110
10817: PUSH
10818: LD_INT 111
10820: PUSH
10821: LD_INT 112
10823: PUSH
10824: LD_INT 114
10826: PUSH
10827: LD_INT 116
10829: PUSH
10830: LD_INT 117
10832: PUSH
10833: LD_INT 118
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
10858: GO 12753
10860: LD_INT 11
10862: DOUBLE
10863: EQUAL
10864: IFTRUE 10868
10866: GO 11072
10868: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: LD_INT 4
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: LD_INT 6
10888: PUSH
10889: LD_INT 7
10891: PUSH
10892: LD_INT 8
10894: PUSH
10895: LD_INT 9
10897: PUSH
10898: LD_INT 10
10900: PUSH
10901: LD_INT 11
10903: PUSH
10904: LD_INT 12
10906: PUSH
10907: LD_INT 13
10909: PUSH
10910: LD_INT 14
10912: PUSH
10913: LD_INT 15
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: LD_INT 17
10921: PUSH
10922: LD_INT 18
10924: PUSH
10925: LD_INT 19
10927: PUSH
10928: LD_INT 20
10930: PUSH
10931: LD_INT 21
10933: PUSH
10934: LD_INT 22
10936: PUSH
10937: LD_INT 23
10939: PUSH
10940: LD_INT 24
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 26
10948: PUSH
10949: LD_INT 28
10951: PUSH
10952: LD_INT 30
10954: PUSH
10955: LD_INT 31
10957: PUSH
10958: LD_INT 32
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 36
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 101
11002: PUSH
11003: LD_INT 102
11005: PUSH
11006: LD_INT 103
11008: PUSH
11009: LD_INT 104
11011: PUSH
11012: LD_INT 105
11014: PUSH
11015: LD_INT 106
11017: PUSH
11018: LD_INT 107
11020: PUSH
11021: LD_INT 108
11023: PUSH
11024: LD_INT 109
11026: PUSH
11027: LD_INT 110
11029: PUSH
11030: LD_INT 111
11032: PUSH
11033: LD_INT 112
11035: PUSH
11036: LD_INT 114
11038: PUSH
11039: LD_INT 116
11041: PUSH
11042: LD_INT 117
11044: PUSH
11045: LD_INT 118
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: ST_TO_ADDR
11070: GO 12753
11072: LD_INT 12
11074: DOUBLE
11075: EQUAL
11076: IFTRUE 11080
11078: GO 11300
11080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11081: LD_ADDR_VAR 0 2
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: LD_INT 4
11097: PUSH
11098: LD_INT 5
11100: PUSH
11101: LD_INT 6
11103: PUSH
11104: LD_INT 7
11106: PUSH
11107: LD_INT 8
11109: PUSH
11110: LD_INT 9
11112: PUSH
11113: LD_INT 10
11115: PUSH
11116: LD_INT 11
11118: PUSH
11119: LD_INT 12
11121: PUSH
11122: LD_INT 13
11124: PUSH
11125: LD_INT 14
11127: PUSH
11128: LD_INT 15
11130: PUSH
11131: LD_INT 16
11133: PUSH
11134: LD_INT 17
11136: PUSH
11137: LD_INT 18
11139: PUSH
11140: LD_INT 19
11142: PUSH
11143: LD_INT 20
11145: PUSH
11146: LD_INT 21
11148: PUSH
11149: LD_INT 22
11151: PUSH
11152: LD_INT 23
11154: PUSH
11155: LD_INT 24
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 26
11163: PUSH
11164: LD_INT 27
11166: PUSH
11167: LD_INT 28
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 31
11175: PUSH
11176: LD_INT 32
11178: PUSH
11179: LD_INT 33
11181: PUSH
11182: LD_INT 34
11184: PUSH
11185: LD_INT 36
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 101
11226: PUSH
11227: LD_INT 102
11229: PUSH
11230: LD_INT 103
11232: PUSH
11233: LD_INT 104
11235: PUSH
11236: LD_INT 105
11238: PUSH
11239: LD_INT 106
11241: PUSH
11242: LD_INT 107
11244: PUSH
11245: LD_INT 108
11247: PUSH
11248: LD_INT 109
11250: PUSH
11251: LD_INT 110
11253: PUSH
11254: LD_INT 111
11256: PUSH
11257: LD_INT 112
11259: PUSH
11260: LD_INT 113
11262: PUSH
11263: LD_INT 114
11265: PUSH
11266: LD_INT 116
11268: PUSH
11269: LD_INT 117
11271: PUSH
11272: LD_INT 118
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: ST_TO_ADDR
11298: GO 12753
11300: LD_INT 13
11302: DOUBLE
11303: EQUAL
11304: IFTRUE 11308
11306: GO 11516
11308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11309: LD_ADDR_VAR 0 2
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: LD_INT 2
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: LD_INT 4
11325: PUSH
11326: LD_INT 5
11328: PUSH
11329: LD_INT 8
11331: PUSH
11332: LD_INT 9
11334: PUSH
11335: LD_INT 10
11337: PUSH
11338: LD_INT 11
11340: PUSH
11341: LD_INT 12
11343: PUSH
11344: LD_INT 14
11346: PUSH
11347: LD_INT 15
11349: PUSH
11350: LD_INT 16
11352: PUSH
11353: LD_INT 17
11355: PUSH
11356: LD_INT 18
11358: PUSH
11359: LD_INT 19
11361: PUSH
11362: LD_INT 20
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 23
11373: PUSH
11374: LD_INT 24
11376: PUSH
11377: LD_INT 25
11379: PUSH
11380: LD_INT 26
11382: PUSH
11383: LD_INT 27
11385: PUSH
11386: LD_INT 28
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_INT 31
11394: PUSH
11395: LD_INT 32
11397: PUSH
11398: LD_INT 33
11400: PUSH
11401: LD_INT 34
11403: PUSH
11404: LD_INT 36
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 101
11442: PUSH
11443: LD_INT 102
11445: PUSH
11446: LD_INT 103
11448: PUSH
11449: LD_INT 104
11451: PUSH
11452: LD_INT 105
11454: PUSH
11455: LD_INT 106
11457: PUSH
11458: LD_INT 107
11460: PUSH
11461: LD_INT 108
11463: PUSH
11464: LD_INT 109
11466: PUSH
11467: LD_INT 110
11469: PUSH
11470: LD_INT 111
11472: PUSH
11473: LD_INT 112
11475: PUSH
11476: LD_INT 113
11478: PUSH
11479: LD_INT 114
11481: PUSH
11482: LD_INT 116
11484: PUSH
11485: LD_INT 117
11487: PUSH
11488: LD_INT 118
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: ST_TO_ADDR
11514: GO 12753
11516: LD_INT 14
11518: DOUBLE
11519: EQUAL
11520: IFTRUE 11524
11522: GO 11748
11524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: LD_INT 3
11538: PUSH
11539: LD_INT 4
11541: PUSH
11542: LD_INT 5
11544: PUSH
11545: LD_INT 6
11547: PUSH
11548: LD_INT 7
11550: PUSH
11551: LD_INT 8
11553: PUSH
11554: LD_INT 9
11556: PUSH
11557: LD_INT 10
11559: PUSH
11560: LD_INT 11
11562: PUSH
11563: LD_INT 12
11565: PUSH
11566: LD_INT 13
11568: PUSH
11569: LD_INT 14
11571: PUSH
11572: LD_INT 15
11574: PUSH
11575: LD_INT 16
11577: PUSH
11578: LD_INT 17
11580: PUSH
11581: LD_INT 18
11583: PUSH
11584: LD_INT 19
11586: PUSH
11587: LD_INT 20
11589: PUSH
11590: LD_INT 21
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_INT 23
11598: PUSH
11599: LD_INT 24
11601: PUSH
11602: LD_INT 25
11604: PUSH
11605: LD_INT 26
11607: PUSH
11608: LD_INT 27
11610: PUSH
11611: LD_INT 28
11613: PUSH
11614: LD_INT 29
11616: PUSH
11617: LD_INT 30
11619: PUSH
11620: LD_INT 31
11622: PUSH
11623: LD_INT 32
11625: PUSH
11626: LD_INT 33
11628: PUSH
11629: LD_INT 34
11631: PUSH
11632: LD_INT 36
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 101
11674: PUSH
11675: LD_INT 102
11677: PUSH
11678: LD_INT 103
11680: PUSH
11681: LD_INT 104
11683: PUSH
11684: LD_INT 105
11686: PUSH
11687: LD_INT 106
11689: PUSH
11690: LD_INT 107
11692: PUSH
11693: LD_INT 108
11695: PUSH
11696: LD_INT 109
11698: PUSH
11699: LD_INT 110
11701: PUSH
11702: LD_INT 111
11704: PUSH
11705: LD_INT 112
11707: PUSH
11708: LD_INT 113
11710: PUSH
11711: LD_INT 114
11713: PUSH
11714: LD_INT 116
11716: PUSH
11717: LD_INT 117
11719: PUSH
11720: LD_INT 118
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 12753
11748: LD_INT 15
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11980
11756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: LD_INT 4
11773: PUSH
11774: LD_INT 5
11776: PUSH
11777: LD_INT 6
11779: PUSH
11780: LD_INT 7
11782: PUSH
11783: LD_INT 8
11785: PUSH
11786: LD_INT 9
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 11
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: LD_INT 13
11800: PUSH
11801: LD_INT 14
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: LD_INT 16
11809: PUSH
11810: LD_INT 17
11812: PUSH
11813: LD_INT 18
11815: PUSH
11816: LD_INT 19
11818: PUSH
11819: LD_INT 20
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_INT 23
11830: PUSH
11831: LD_INT 24
11833: PUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 26
11839: PUSH
11840: LD_INT 27
11842: PUSH
11843: LD_INT 28
11845: PUSH
11846: LD_INT 29
11848: PUSH
11849: LD_INT 30
11851: PUSH
11852: LD_INT 31
11854: PUSH
11855: LD_INT 32
11857: PUSH
11858: LD_INT 33
11860: PUSH
11861: LD_INT 34
11863: PUSH
11864: LD_INT 36
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 103
11912: PUSH
11913: LD_INT 104
11915: PUSH
11916: LD_INT 105
11918: PUSH
11919: LD_INT 106
11921: PUSH
11922: LD_INT 107
11924: PUSH
11925: LD_INT 108
11927: PUSH
11928: LD_INT 109
11930: PUSH
11931: LD_INT 110
11933: PUSH
11934: LD_INT 111
11936: PUSH
11937: LD_INT 112
11939: PUSH
11940: LD_INT 113
11942: PUSH
11943: LD_INT 114
11945: PUSH
11946: LD_INT 116
11948: PUSH
11949: LD_INT 117
11951: PUSH
11952: LD_INT 118
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
11978: GO 12753
11980: LD_INT 16
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12124
11988: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11989: LD_ADDR_VAR 0 2
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: LD_INT 4
11999: PUSH
12000: LD_INT 5
12002: PUSH
12003: LD_INT 7
12005: PUSH
12006: LD_INT 11
12008: PUSH
12009: LD_INT 12
12011: PUSH
12012: LD_INT 15
12014: PUSH
12015: LD_INT 16
12017: PUSH
12018: LD_INT 20
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 22
12026: PUSH
12027: LD_INT 23
12029: PUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 26
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: LD_INT 33
12047: PUSH
12048: LD_INT 34
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 101
12074: PUSH
12075: LD_INT 102
12077: PUSH
12078: LD_INT 103
12080: PUSH
12081: LD_INT 106
12083: PUSH
12084: LD_INT 108
12086: PUSH
12087: LD_INT 112
12089: PUSH
12090: LD_INT 113
12092: PUSH
12093: LD_INT 114
12095: PUSH
12096: LD_INT 116
12098: PUSH
12099: LD_INT 117
12101: PUSH
12102: LD_INT 118
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: ST_TO_ADDR
12122: GO 12753
12124: LD_INT 17
12126: DOUBLE
12127: EQUAL
12128: IFTRUE 12132
12130: GO 12356
12132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 1
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 3
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 5
12152: PUSH
12153: LD_INT 6
12155: PUSH
12156: LD_INT 7
12158: PUSH
12159: LD_INT 8
12161: PUSH
12162: LD_INT 9
12164: PUSH
12165: LD_INT 10
12167: PUSH
12168: LD_INT 11
12170: PUSH
12171: LD_INT 12
12173: PUSH
12174: LD_INT 13
12176: PUSH
12177: LD_INT 14
12179: PUSH
12180: LD_INT 15
12182: PUSH
12183: LD_INT 16
12185: PUSH
12186: LD_INT 17
12188: PUSH
12189: LD_INT 18
12191: PUSH
12192: LD_INT 19
12194: PUSH
12195: LD_INT 20
12197: PUSH
12198: LD_INT 21
12200: PUSH
12201: LD_INT 22
12203: PUSH
12204: LD_INT 23
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: LD_INT 25
12212: PUSH
12213: LD_INT 26
12215: PUSH
12216: LD_INT 27
12218: PUSH
12219: LD_INT 28
12221: PUSH
12222: LD_INT 29
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 31
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 33
12236: PUSH
12237: LD_INT 34
12239: PUSH
12240: LD_INT 36
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 101
12282: PUSH
12283: LD_INT 102
12285: PUSH
12286: LD_INT 103
12288: PUSH
12289: LD_INT 104
12291: PUSH
12292: LD_INT 105
12294: PUSH
12295: LD_INT 106
12297: PUSH
12298: LD_INT 107
12300: PUSH
12301: LD_INT 108
12303: PUSH
12304: LD_INT 109
12306: PUSH
12307: LD_INT 110
12309: PUSH
12310: LD_INT 111
12312: PUSH
12313: LD_INT 112
12315: PUSH
12316: LD_INT 113
12318: PUSH
12319: LD_INT 114
12321: PUSH
12322: LD_INT 116
12324: PUSH
12325: LD_INT 117
12327: PUSH
12328: LD_INT 118
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: ST_TO_ADDR
12354: GO 12753
12356: LD_INT 18
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12512
12364: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: LD_INT 4
12375: PUSH
12376: LD_INT 5
12378: PUSH
12379: LD_INT 7
12381: PUSH
12382: LD_INT 11
12384: PUSH
12385: LD_INT 12
12387: PUSH
12388: LD_INT 15
12390: PUSH
12391: LD_INT 16
12393: PUSH
12394: LD_INT 20
12396: PUSH
12397: LD_INT 21
12399: PUSH
12400: LD_INT 22
12402: PUSH
12403: LD_INT 23
12405: PUSH
12406: LD_INT 25
12408: PUSH
12409: LD_INT 26
12411: PUSH
12412: LD_INT 30
12414: PUSH
12415: LD_INT 31
12417: PUSH
12418: LD_INT 32
12420: PUSH
12421: LD_INT 33
12423: PUSH
12424: LD_INT 34
12426: PUSH
12427: LD_INT 35
12429: PUSH
12430: LD_INT 36
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 101
12458: PUSH
12459: LD_INT 102
12461: PUSH
12462: LD_INT 103
12464: PUSH
12465: LD_INT 106
12467: PUSH
12468: LD_INT 108
12470: PUSH
12471: LD_INT 112
12473: PUSH
12474: LD_INT 113
12476: PUSH
12477: LD_INT 114
12479: PUSH
12480: LD_INT 115
12482: PUSH
12483: LD_INT 116
12485: PUSH
12486: LD_INT 117
12488: PUSH
12489: LD_INT 118
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: ST_TO_ADDR
12510: GO 12753
12512: LD_INT 19
12514: DOUBLE
12515: EQUAL
12516: IFTRUE 12520
12518: GO 12752
12520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 1
12528: PUSH
12529: LD_INT 2
12531: PUSH
12532: LD_INT 3
12534: PUSH
12535: LD_INT 4
12537: PUSH
12538: LD_INT 5
12540: PUSH
12541: LD_INT 6
12543: PUSH
12544: LD_INT 7
12546: PUSH
12547: LD_INT 8
12549: PUSH
12550: LD_INT 9
12552: PUSH
12553: LD_INT 10
12555: PUSH
12556: LD_INT 11
12558: PUSH
12559: LD_INT 12
12561: PUSH
12562: LD_INT 13
12564: PUSH
12565: LD_INT 14
12567: PUSH
12568: LD_INT 15
12570: PUSH
12571: LD_INT 16
12573: PUSH
12574: LD_INT 17
12576: PUSH
12577: LD_INT 18
12579: PUSH
12580: LD_INT 19
12582: PUSH
12583: LD_INT 20
12585: PUSH
12586: LD_INT 21
12588: PUSH
12589: LD_INT 22
12591: PUSH
12592: LD_INT 23
12594: PUSH
12595: LD_INT 24
12597: PUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 26
12603: PUSH
12604: LD_INT 27
12606: PUSH
12607: LD_INT 28
12609: PUSH
12610: LD_INT 29
12612: PUSH
12613: LD_INT 30
12615: PUSH
12616: LD_INT 31
12618: PUSH
12619: LD_INT 32
12621: PUSH
12622: LD_INT 33
12624: PUSH
12625: LD_INT 34
12627: PUSH
12628: LD_INT 35
12630: PUSH
12631: LD_INT 36
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 101
12674: PUSH
12675: LD_INT 102
12677: PUSH
12678: LD_INT 103
12680: PUSH
12681: LD_INT 104
12683: PUSH
12684: LD_INT 105
12686: PUSH
12687: LD_INT 106
12689: PUSH
12690: LD_INT 107
12692: PUSH
12693: LD_INT 108
12695: PUSH
12696: LD_INT 109
12698: PUSH
12699: LD_INT 110
12701: PUSH
12702: LD_INT 111
12704: PUSH
12705: LD_INT 112
12707: PUSH
12708: LD_INT 113
12710: PUSH
12711: LD_INT 114
12713: PUSH
12714: LD_INT 115
12716: PUSH
12717: LD_INT 116
12719: PUSH
12720: LD_INT 117
12722: PUSH
12723: LD_INT 118
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: ST_TO_ADDR
12750: GO 12753
12752: POP
// end else
12753: GO 12984
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12755: LD_ADDR_VAR 0 2
12759: PUSH
12760: LD_INT 1
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 4
12771: PUSH
12772: LD_INT 5
12774: PUSH
12775: LD_INT 6
12777: PUSH
12778: LD_INT 7
12780: PUSH
12781: LD_INT 8
12783: PUSH
12784: LD_INT 9
12786: PUSH
12787: LD_INT 10
12789: PUSH
12790: LD_INT 11
12792: PUSH
12793: LD_INT 12
12795: PUSH
12796: LD_INT 13
12798: PUSH
12799: LD_INT 14
12801: PUSH
12802: LD_INT 15
12804: PUSH
12805: LD_INT 16
12807: PUSH
12808: LD_INT 17
12810: PUSH
12811: LD_INT 18
12813: PUSH
12814: LD_INT 19
12816: PUSH
12817: LD_INT 20
12819: PUSH
12820: LD_INT 21
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 23
12828: PUSH
12829: LD_INT 24
12831: PUSH
12832: LD_INT 25
12834: PUSH
12835: LD_INT 26
12837: PUSH
12838: LD_INT 27
12840: PUSH
12841: LD_INT 28
12843: PUSH
12844: LD_INT 29
12846: PUSH
12847: LD_INT 30
12849: PUSH
12850: LD_INT 31
12852: PUSH
12853: LD_INT 32
12855: PUSH
12856: LD_INT 33
12858: PUSH
12859: LD_INT 34
12861: PUSH
12862: LD_INT 35
12864: PUSH
12865: LD_INT 36
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 101
12908: PUSH
12909: LD_INT 102
12911: PUSH
12912: LD_INT 103
12914: PUSH
12915: LD_INT 104
12917: PUSH
12918: LD_INT 105
12920: PUSH
12921: LD_INT 106
12923: PUSH
12924: LD_INT 107
12926: PUSH
12927: LD_INT 108
12929: PUSH
12930: LD_INT 109
12932: PUSH
12933: LD_INT 110
12935: PUSH
12936: LD_INT 111
12938: PUSH
12939: LD_INT 112
12941: PUSH
12942: LD_INT 113
12944: PUSH
12945: LD_INT 114
12947: PUSH
12948: LD_INT 115
12950: PUSH
12951: LD_INT 116
12953: PUSH
12954: LD_INT 117
12956: PUSH
12957: LD_INT 118
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: ST_TO_ADDR
// if result then
12984: LD_VAR 0 2
12988: IFFALSE 13774
// begin normal :=  ;
12990: LD_ADDR_VAR 0 5
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// hardcore :=  ;
12998: LD_ADDR_VAR 0 6
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// active :=  ;
13006: LD_ADDR_VAR 0 7
13010: PUSH
13011: LD_STRING 
13013: ST_TO_ADDR
// for i = 1 to normalCounter do
13014: LD_ADDR_VAR 0 8
13018: PUSH
13019: DOUBLE
13020: LD_INT 1
13022: DEC
13023: ST_TO_ADDR
13024: LD_EXP 21
13028: PUSH
13029: FOR_TO
13030: IFFALSE 13131
// begin tmp := 0 ;
13032: LD_ADDR_VAR 0 3
13036: PUSH
13037: LD_STRING 0
13039: ST_TO_ADDR
// if result [ 1 ] then
13040: LD_VAR 0 2
13044: PUSH
13045: LD_INT 1
13047: ARRAY
13048: IFFALSE 13113
// if result [ 1 ] [ 1 ] = i then
13050: LD_VAR 0 2
13054: PUSH
13055: LD_INT 1
13057: ARRAY
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PUSH
13063: LD_VAR 0 8
13067: EQUAL
13068: IFFALSE 13113
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: LD_VAR 0 2
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_VAR 0 2
13087: PUSH
13088: LD_INT 1
13090: ARRAY
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: CALL_OW 3
13099: PPUSH
13100: CALL_OW 1
13104: ST_TO_ADDR
// tmp := 1 ;
13105: LD_ADDR_VAR 0 3
13109: PUSH
13110: LD_STRING 1
13112: ST_TO_ADDR
// end ; normal := normal & tmp ;
13113: LD_ADDR_VAR 0 5
13117: PUSH
13118: LD_VAR 0 5
13122: PUSH
13123: LD_VAR 0 3
13127: STR
13128: ST_TO_ADDR
// end ;
13129: GO 13029
13131: POP
13132: POP
// for i = 1 to hardcoreCounter do
13133: LD_ADDR_VAR 0 8
13137: PUSH
13138: DOUBLE
13139: LD_INT 1
13141: DEC
13142: ST_TO_ADDR
13143: LD_EXP 22
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13254
// begin tmp := 0 ;
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_STRING 0
13158: ST_TO_ADDR
// if result [ 2 ] then
13159: LD_VAR 0 2
13163: PUSH
13164: LD_INT 2
13166: ARRAY
13167: IFFALSE 13236
// if result [ 2 ] [ 1 ] = 100 + i then
13169: LD_VAR 0 2
13173: PUSH
13174: LD_INT 2
13176: ARRAY
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PUSH
13182: LD_INT 100
13184: PUSH
13185: LD_VAR 0 8
13189: PLUS
13190: EQUAL
13191: IFFALSE 13236
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 2
13202: PPUSH
13203: LD_INT 2
13205: PPUSH
13206: LD_VAR 0 2
13210: PUSH
13211: LD_INT 2
13213: ARRAY
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 3
13222: PPUSH
13223: CALL_OW 1
13227: ST_TO_ADDR
// tmp := 1 ;
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_STRING 1
13235: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13236: LD_ADDR_VAR 0 6
13240: PUSH
13241: LD_VAR 0 6
13245: PUSH
13246: LD_VAR 0 3
13250: STR
13251: ST_TO_ADDR
// end ;
13252: GO 13148
13254: POP
13255: POP
// if isGameLoad then
13256: LD_VAR 0 1
13260: IFFALSE 13735
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13262: LD_ADDR_VAR 0 4
13266: PUSH
13267: LD_EXP 25
13271: PUSH
13272: LD_EXP 24
13276: PUSH
13277: LD_EXP 26
13281: PUSH
13282: LD_EXP 23
13286: PUSH
13287: LD_EXP 27
13291: PUSH
13292: LD_EXP 28
13296: PUSH
13297: LD_EXP 29
13301: PUSH
13302: LD_EXP 30
13306: PUSH
13307: LD_EXP 31
13311: PUSH
13312: LD_EXP 32
13316: PUSH
13317: LD_EXP 33
13321: PUSH
13322: LD_EXP 34
13326: PUSH
13327: LD_EXP 35
13331: PUSH
13332: LD_EXP 36
13336: PUSH
13337: LD_EXP 44
13341: PUSH
13342: LD_EXP 45
13346: PUSH
13347: LD_EXP 46
13351: PUSH
13352: LD_EXP 47
13356: PUSH
13357: LD_EXP 49
13361: PUSH
13362: LD_EXP 50
13366: PUSH
13367: LD_EXP 51
13371: PUSH
13372: LD_EXP 54
13376: PUSH
13377: LD_EXP 56
13381: PUSH
13382: LD_EXP 57
13386: PUSH
13387: LD_EXP 58
13391: PUSH
13392: LD_EXP 60
13396: PUSH
13397: LD_EXP 61
13401: PUSH
13402: LD_EXP 64
13406: PUSH
13407: LD_EXP 65
13411: PUSH
13412: LD_EXP 66
13416: PUSH
13417: LD_EXP 67
13421: PUSH
13422: LD_EXP 68
13426: PUSH
13427: LD_EXP 69
13431: PUSH
13432: LD_EXP 70
13436: PUSH
13437: LD_EXP 71
13441: PUSH
13442: LD_EXP 72
13446: PUSH
13447: LD_EXP 37
13451: PUSH
13452: LD_EXP 38
13456: PUSH
13457: LD_EXP 41
13461: PUSH
13462: LD_EXP 42
13466: PUSH
13467: LD_EXP 43
13471: PUSH
13472: LD_EXP 39
13476: PUSH
13477: LD_EXP 40
13481: PUSH
13482: LD_EXP 48
13486: PUSH
13487: LD_EXP 52
13491: PUSH
13492: LD_EXP 53
13496: PUSH
13497: LD_EXP 55
13501: PUSH
13502: LD_EXP 59
13506: PUSH
13507: LD_EXP 62
13511: PUSH
13512: LD_EXP 63
13516: PUSH
13517: LD_EXP 73
13521: PUSH
13522: LD_EXP 74
13526: PUSH
13527: LD_EXP 75
13531: PUSH
13532: LD_EXP 76
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: ST_TO_ADDR
// tmp :=  ;
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_STRING 
13600: ST_TO_ADDR
// for i = 1 to normalCounter do
13601: LD_ADDR_VAR 0 8
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_EXP 21
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13653
// begin if flags [ i ] then
13619: LD_VAR 0 4
13623: PUSH
13624: LD_VAR 0 8
13628: ARRAY
13629: IFFALSE 13651
// tmp := tmp & i & ; ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: LD_VAR 0 8
13645: STR
13646: PUSH
13647: LD_STRING ;
13649: STR
13650: ST_TO_ADDR
// end ;
13651: GO 13616
13653: POP
13654: POP
// for i = 1 to hardcoreCounter do
13655: LD_ADDR_VAR 0 8
13659: PUSH
13660: DOUBLE
13661: LD_INT 1
13663: DEC
13664: ST_TO_ADDR
13665: LD_EXP 22
13669: PUSH
13670: FOR_TO
13671: IFFALSE 13717
// begin if flags [ normalCounter + i ] then
13673: LD_VAR 0 4
13677: PUSH
13678: LD_EXP 21
13682: PUSH
13683: LD_VAR 0 8
13687: PLUS
13688: ARRAY
13689: IFFALSE 13715
// tmp := tmp & ( 100 + i ) & ; ;
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: LD_VAR 0 3
13700: PUSH
13701: LD_INT 100
13703: PUSH
13704: LD_VAR 0 8
13708: PLUS
13709: STR
13710: PUSH
13711: LD_STRING ;
13713: STR
13714: ST_TO_ADDR
// end ;
13715: GO 13670
13717: POP
13718: POP
// if tmp then
13719: LD_VAR 0 3
13723: IFFALSE 13735
// active := tmp ;
13725: LD_ADDR_VAR 0 7
13729: PUSH
13730: LD_VAR 0 3
13734: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13735: LD_STRING getStreamItemsFromMission("
13737: PUSH
13738: LD_VAR 0 5
13742: STR
13743: PUSH
13744: LD_STRING ","
13746: STR
13747: PUSH
13748: LD_VAR 0 6
13752: STR
13753: PUSH
13754: LD_STRING ","
13756: STR
13757: PUSH
13758: LD_VAR 0 7
13762: STR
13763: PUSH
13764: LD_STRING ")
13766: STR
13767: PPUSH
13768: CALL_OW 559
// end else
13772: GO 13781
// ToLua ( getStreamItemsFromMission("","","") ) ;
13774: LD_STRING getStreamItemsFromMission("","","")
13776: PPUSH
13777: CALL_OW 559
// end ;
13781: LD_VAR 0 2
13785: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13786: LD_EXP 20
13790: PUSH
13791: LD_EXP 25
13795: AND
13796: IFFALSE 13920
13798: GO 13800
13800: DISABLE
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
// begin enable ;
13805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_OWVAR 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 34
13828: PUSH
13829: LD_INT 7
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 34
13838: PUSH
13839: LD_INT 45
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 34
13848: PUSH
13849: LD_INT 28
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 34
13858: PUSH
13859: LD_INT 47
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
// if not tmp then
13882: LD_VAR 0 2
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 13920
// for i in tmp do
13891: LD_ADDR_VAR 0 1
13895: PUSH
13896: LD_VAR 0 2
13900: PUSH
13901: FOR_IN
13902: IFFALSE 13918
// begin SetLives ( i , 0 ) ;
13904: LD_VAR 0 1
13908: PPUSH
13909: LD_INT 0
13911: PPUSH
13912: CALL_OW 234
// end ;
13916: GO 13901
13918: POP
13919: POP
// end ;
13920: PPOPN 2
13922: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13923: LD_EXP 20
13927: PUSH
13928: LD_EXP 26
13932: AND
13933: IFFALSE 14017
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
// begin enable ;
13942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 22
13950: PUSH
13951: LD_OWVAR 2
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 32
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PPUSH
13974: CALL_OW 69
13978: ST_TO_ADDR
// if not tmp then
13979: LD_VAR 0 2
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14017
// for i in tmp do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_VAR 0 2
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14015
// begin SetLives ( i , 0 ) ;
14001: LD_VAR 0 1
14005: PPUSH
14006: LD_INT 0
14008: PPUSH
14009: CALL_OW 234
// end ;
14013: GO 13998
14015: POP
14016: POP
// end ;
14017: PPOPN 2
14019: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14020: LD_EXP 20
14024: PUSH
14025: LD_EXP 23
14029: AND
14030: IFFALSE 14123
14032: GO 14034
14034: DISABLE
14035: LD_INT 0
14037: PPUSH
// begin enable ;
14038: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_INT 22
14046: PUSH
14047: LD_OWVAR 2
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 2
14058: PUSH
14059: LD_INT 25
14061: PUSH
14062: LD_INT 5
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 25
14071: PUSH
14072: LD_INT 9
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 25
14081: PUSH
14082: LD_INT 8
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: PUSH
14104: FOR_IN
14105: IFFALSE 14121
// begin SetClass ( i , 1 ) ;
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 336
// end ;
14119: GO 14104
14121: POP
14122: POP
// end ;
14123: PPOPN 1
14125: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14126: LD_EXP 20
14130: PUSH
14131: LD_EXP 24
14135: AND
14136: PUSH
14137: LD_OWVAR 65
14141: PUSH
14142: LD_INT 7
14144: LESS
14145: AND
14146: IFFALSE 14160
14148: GO 14150
14150: DISABLE
// begin enable ;
14151: ENABLE
// game_speed := 7 ;
14152: LD_ADDR_OWVAR 65
14156: PUSH
14157: LD_INT 7
14159: ST_TO_ADDR
// end ;
14160: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14161: LD_EXP 20
14165: PUSH
14166: LD_EXP 27
14170: AND
14171: IFFALSE 14373
14173: GO 14175
14175: DISABLE
14176: LD_INT 0
14178: PPUSH
14179: PPUSH
14180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_OWVAR 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: ST_TO_ADDR
// if not tmp then
14217: LD_VAR 0 3
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14373
// if tmp > 5 then
14226: LD_VAR 0 3
14230: PUSH
14231: LD_INT 5
14233: GREATER
14234: IFFALSE 14246
// k := 5 else
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 5
14243: ST_TO_ADDR
14244: GO 14256
// k := tmp ;
14246: LD_ADDR_VAR 0 2
14250: PUSH
14251: LD_VAR 0 3
14255: ST_TO_ADDR
// for i := 1 to k do
14256: LD_ADDR_VAR 0 1
14260: PUSH
14261: DOUBLE
14262: LD_INT 1
14264: DEC
14265: ST_TO_ADDR
14266: LD_VAR 0 2
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14371
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14274: LD_VAR 0 3
14278: PUSH
14279: LD_VAR 0 1
14283: ARRAY
14284: PPUSH
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 4
14292: MOD
14293: PUSH
14294: LD_INT 1
14296: PLUS
14297: PPUSH
14298: CALL_OW 259
14302: PUSH
14303: LD_INT 10
14305: LESS
14306: IFFALSE 14369
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14308: LD_VAR 0 3
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 1
14323: PUSH
14324: LD_INT 4
14326: MOD
14327: PUSH
14328: LD_INT 1
14330: PLUS
14331: PPUSH
14332: LD_VAR 0 3
14336: PUSH
14337: LD_VAR 0 1
14341: ARRAY
14342: PPUSH
14343: LD_VAR 0 1
14347: PUSH
14348: LD_INT 4
14350: MOD
14351: PUSH
14352: LD_INT 1
14354: PLUS
14355: PPUSH
14356: CALL_OW 259
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: CALL_OW 237
14369: GO 14271
14371: POP
14372: POP
// end ;
14373: PPOPN 3
14375: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14376: LD_EXP 20
14380: PUSH
14381: LD_EXP 28
14385: AND
14386: IFFALSE 14406
14388: GO 14390
14390: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14391: LD_INT 4
14393: PPUSH
14394: LD_OWVAR 2
14398: PPUSH
14399: LD_INT 0
14401: PPUSH
14402: CALL_OW 324
14406: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14407: LD_EXP 20
14411: PUSH
14412: LD_EXP 57
14416: AND
14417: IFFALSE 14437
14419: GO 14421
14421: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14422: LD_INT 19
14424: PPUSH
14425: LD_OWVAR 2
14429: PPUSH
14430: LD_INT 0
14432: PPUSH
14433: CALL_OW 324
14437: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14438: LD_EXP 20
14442: PUSH
14443: LD_EXP 29
14447: AND
14448: IFFALSE 14550
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
14456: PPUSH
// begin enable ;
14457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: LD_INT 22
14465: PUSH
14466: LD_OWVAR 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: LD_INT 34
14480: PUSH
14481: LD_INT 11
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 34
14490: PUSH
14491: LD_INT 30
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 69
14511: ST_TO_ADDR
// if not tmp then
14512: LD_VAR 0 2
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14550
// for i in tmp do
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_VAR 0 2
14530: PUSH
14531: FOR_IN
14532: IFFALSE 14548
// begin SetLives ( i , 0 ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_INT 0
14541: PPUSH
14542: CALL_OW 234
// end ;
14546: GO 14531
14548: POP
14549: POP
// end ;
14550: PPOPN 2
14552: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14553: LD_EXP 20
14557: PUSH
14558: LD_EXP 30
14562: AND
14563: IFFALSE 14583
14565: GO 14567
14567: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14568: LD_INT 32
14570: PPUSH
14571: LD_OWVAR 2
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 324
14583: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14584: LD_EXP 20
14588: PUSH
14589: LD_EXP 31
14593: AND
14594: IFFALSE 14775
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 33
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// if not tmp then
14640: LD_VAR 0 2
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14775
// side := 0 ;
14649: LD_ADDR_VAR 0 3
14653: PUSH
14654: LD_INT 0
14656: ST_TO_ADDR
// for i := 1 to 8 do
14657: LD_ADDR_VAR 0 1
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_INT 8
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14719
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14673: LD_OWVAR 2
14677: PUSH
14678: LD_VAR 0 1
14682: NONEQUAL
14683: PUSH
14684: LD_OWVAR 2
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 81
14698: PUSH
14699: LD_INT 2
14701: EQUAL
14702: AND
14703: IFFALSE 14717
// begin side := i ;
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_VAR 0 1
14714: ST_TO_ADDR
// break ;
14715: GO 14719
// end ;
14717: GO 14670
14719: POP
14720: POP
// if not side then
14721: LD_VAR 0 3
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14775
// for i := 1 to tmp do
14730: LD_ADDR_VAR 0 1
14734: PUSH
14735: DOUBLE
14736: LD_INT 1
14738: DEC
14739: ST_TO_ADDR
14740: LD_VAR 0 2
14744: PUSH
14745: FOR_TO
14746: IFFALSE 14773
// if Prob ( 60 ) then
14748: LD_INT 60
14750: PPUSH
14751: CALL_OW 13
14755: IFFALSE 14771
// SetSide ( i , side ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: CALL_OW 235
14771: GO 14745
14773: POP
14774: POP
// end ;
14775: PPOPN 3
14777: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14778: LD_EXP 20
14782: PUSH
14783: LD_EXP 33
14787: AND
14788: IFFALSE 14907
14790: GO 14792
14792: DISABLE
14793: LD_INT 0
14795: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14905
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 257
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: IN
14881: IFFALSE 14903
// SetClass ( un , rand ( 1 , 4 ) ) ;
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 4
14893: PPUSH
14894: CALL_OW 12
14898: PPUSH
14899: CALL_OW 336
14903: GO 14850
14905: POP
14906: POP
// end ;
14907: PPOPN 1
14909: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14910: LD_EXP 20
14914: PUSH
14915: LD_EXP 32
14919: AND
14920: IFFALSE 14999
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: ST_TO_ADDR
// if not tmp then
14964: LD_VAR 0 1
14968: NOT
14969: IFFALSE 14973
// exit ;
14971: GO 14999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 12
14990: ARRAY
14991: PPUSH
14992: LD_INT 100
14994: PPUSH
14995: CALL_OW 234
// end ;
14999: PPOPN 1
15001: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15002: LD_EXP 20
15006: PUSH
15007: LD_EXP 34
15011: AND
15012: IFFALSE 15110
15014: GO 15016
15016: DISABLE
15017: LD_INT 0
15019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_OWVAR 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 21
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: ST_TO_ADDR
// if not tmp then
15056: LD_VAR 0 1
15060: NOT
15061: IFFALSE 15065
// exit ;
15063: GO 15110
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15065: LD_VAR 0 1
15069: PUSH
15070: LD_INT 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 12
15082: ARRAY
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: LD_INT 4
15089: PPUSH
15090: CALL_OW 12
15094: PPUSH
15095: LD_INT 3000
15097: PPUSH
15098: LD_INT 9000
15100: PPUSH
15101: CALL_OW 12
15105: PPUSH
15106: CALL_OW 492
// end ;
15110: PPOPN 1
15112: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15113: LD_EXP 20
15117: PUSH
15118: LD_EXP 35
15122: AND
15123: IFFALSE 15143
15125: GO 15127
15127: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15128: LD_INT 1
15130: PPUSH
15131: LD_OWVAR 2
15135: PPUSH
15136: LD_INT 0
15138: PPUSH
15139: CALL_OW 324
15143: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15144: LD_EXP 20
15148: PUSH
15149: LD_EXP 36
15153: AND
15154: IFFALSE 15237
15156: GO 15158
15158: DISABLE
15159: LD_INT 0
15161: PPUSH
15162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_OWVAR 2
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 3
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 69
15198: ST_TO_ADDR
// if not tmp then
15199: LD_VAR 0 2
15203: NOT
15204: IFFALSE 15208
// exit ;
15206: GO 15237
// for i in tmp do
15208: LD_ADDR_VAR 0 1
15212: PUSH
15213: LD_VAR 0 2
15217: PUSH
15218: FOR_IN
15219: IFFALSE 15235
// SetBLevel ( i , 10 ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_INT 10
15228: PPUSH
15229: CALL_OW 241
15233: GO 15218
15235: POP
15236: POP
// end ;
15237: PPOPN 2
15239: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15240: LD_EXP 20
15244: PUSH
15245: LD_EXP 37
15249: AND
15250: IFFALSE 15361
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
15258: PPUSH
15259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_INT 22
15267: PUSH
15268: LD_OWVAR 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// if not tmp then
15296: LD_VAR 0 3
15300: NOT
15301: IFFALSE 15305
// exit ;
15303: GO 15361
// un := tmp [ rand ( 1 , tmp ) ] ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 1
15317: PPUSH
15318: LD_VAR 0 3
15322: PPUSH
15323: CALL_OW 12
15327: ARRAY
15328: ST_TO_ADDR
// if Crawls ( un ) then
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL_OW 318
15338: IFFALSE 15349
// ComWalk ( un ) ;
15340: LD_VAR 0 2
15344: PPUSH
15345: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_INT 5
15356: PPUSH
15357: CALL_OW 336
// end ;
15361: PPOPN 3
15363: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15364: LD_EXP 20
15368: PUSH
15369: LD_EXP 38
15373: AND
15374: PUSH
15375: LD_OWVAR 67
15379: PUSH
15380: LD_INT 4
15382: LESS
15383: AND
15384: IFFALSE 15403
15386: GO 15388
15388: DISABLE
// begin Difficulty := Difficulty + 1 ;
15389: LD_ADDR_OWVAR 67
15393: PUSH
15394: LD_OWVAR 67
15398: PUSH
15399: LD_INT 1
15401: PLUS
15402: ST_TO_ADDR
// end ;
15403: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15404: LD_EXP 20
15408: PUSH
15409: LD_EXP 39
15413: AND
15414: IFFALSE 15517
15416: GO 15418
15418: DISABLE
15419: LD_INT 0
15421: PPUSH
// begin for i := 1 to 5 do
15422: LD_ADDR_VAR 0 1
15426: PUSH
15427: DOUBLE
15428: LD_INT 1
15430: DEC
15431: ST_TO_ADDR
15432: LD_INT 5
15434: PUSH
15435: FOR_TO
15436: IFFALSE 15515
// begin uc_nation := nation_nature ;
15438: LD_ADDR_OWVAR 21
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15454: LD_ADDR_OWVAR 29
15458: PUSH
15459: LD_INT 12
15461: PUSH
15462: LD_INT 12
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// hc_agressivity := 20 ;
15469: LD_ADDR_OWVAR 35
15473: PUSH
15474: LD_INT 20
15476: ST_TO_ADDR
// hc_class := class_tiger ;
15477: LD_ADDR_OWVAR 28
15481: PUSH
15482: LD_INT 14
15484: ST_TO_ADDR
// hc_gallery :=  ;
15485: LD_ADDR_OWVAR 33
15489: PUSH
15490: LD_STRING 
15492: ST_TO_ADDR
// hc_name :=  ;
15493: LD_ADDR_OWVAR 26
15497: PUSH
15498: LD_STRING 
15500: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15501: CALL_OW 44
15505: PPUSH
15506: LD_INT 0
15508: PPUSH
15509: CALL_OW 51
// end ;
15513: GO 15435
15515: POP
15516: POP
// end ;
15517: PPOPN 1
15519: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15520: LD_EXP 20
15524: PUSH
15525: LD_EXP 40
15529: AND
15530: IFFALSE 15539
15532: GO 15534
15534: DISABLE
// StreamSibBomb ;
15535: CALL 15540 0 0
15539: END
// export function StreamSibBomb ; var i , x , y ; begin
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
// result := false ;
15546: LD_ADDR_VAR 0 1
15550: PUSH
15551: LD_INT 0
15553: ST_TO_ADDR
// for i := 1 to 16 do
15554: LD_ADDR_VAR 0 2
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_INT 16
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15767
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15570: LD_ADDR_VAR 0 3
15574: PUSH
15575: LD_INT 10
15577: PUSH
15578: LD_INT 20
15580: PUSH
15581: LD_INT 30
15583: PUSH
15584: LD_INT 40
15586: PUSH
15587: LD_INT 50
15589: PUSH
15590: LD_INT 60
15592: PUSH
15593: LD_INT 70
15595: PUSH
15596: LD_INT 80
15598: PUSH
15599: LD_INT 90
15601: PUSH
15602: LD_INT 100
15604: PUSH
15605: LD_INT 110
15607: PUSH
15608: LD_INT 120
15610: PUSH
15611: LD_INT 130
15613: PUSH
15614: LD_INT 140
15616: PUSH
15617: LD_INT 150
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 15
15642: PPUSH
15643: CALL_OW 12
15647: ARRAY
15648: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_INT 10
15656: PUSH
15657: LD_INT 20
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 40
15665: PUSH
15666: LD_INT 50
15668: PUSH
15669: LD_INT 60
15671: PUSH
15672: LD_INT 70
15674: PUSH
15675: LD_INT 80
15677: PUSH
15678: LD_INT 90
15680: PUSH
15681: LD_INT 100
15683: PUSH
15684: LD_INT 110
15686: PUSH
15687: LD_INT 120
15689: PUSH
15690: LD_INT 130
15692: PUSH
15693: LD_INT 140
15695: PUSH
15696: LD_INT 150
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_INT 15
15721: PPUSH
15722: CALL_OW 12
15726: ARRAY
15727: ST_TO_ADDR
// if ValidHex ( x , y ) then
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_VAR 0 4
15737: PPUSH
15738: CALL_OW 488
15742: IFFALSE 15765
// begin result := [ x , y ] ;
15744: LD_ADDR_VAR 0 1
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_VAR 0 4
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// break ;
15763: GO 15767
// end ; end ;
15765: GO 15567
15767: POP
15768: POP
// if result then
15769: LD_VAR 0 1
15773: IFFALSE 15833
// begin ToLua ( playSibBomb() ) ;
15775: LD_STRING playSibBomb()
15777: PPUSH
15778: CALL_OW 559
// wait ( 0 0$14 ) ;
15782: LD_INT 490
15784: PPUSH
15785: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15789: LD_VAR 0 1
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 2
15805: ARRAY
15806: PPUSH
15807: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15811: LD_VAR 0 1
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 2
15827: ARRAY
15828: PPUSH
15829: CALL_OW 429
// end ; end ;
15833: LD_VAR 0 1
15837: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15838: LD_EXP 20
15842: PUSH
15843: LD_EXP 42
15847: AND
15848: IFFALSE 15860
15850: GO 15852
15852: DISABLE
// YouLost (  ) ;
15853: LD_STRING 
15855: PPUSH
15856: CALL_OW 104
15860: END
// every 0 0$1 trigger StreamModeActive and sFog do
15861: LD_EXP 20
15865: PUSH
15866: LD_EXP 41
15870: AND
15871: IFFALSE 15885
15873: GO 15875
15875: DISABLE
// FogOff ( your_side ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: CALL_OW 344
15885: END
// every 0 0$1 trigger StreamModeActive and sSun do
15886: LD_EXP 20
15890: PUSH
15891: LD_EXP 43
15895: AND
15896: IFFALSE 15924
15898: GO 15900
15900: DISABLE
// begin solar_recharge_percent := 0 ;
15901: LD_ADDR_OWVAR 79
15905: PUSH
15906: LD_INT 0
15908: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15909: LD_INT 10500
15911: PPUSH
15912: CALL_OW 67
// solar_recharge_percent := 100 ;
15916: LD_ADDR_OWVAR 79
15920: PUSH
15921: LD_INT 100
15923: ST_TO_ADDR
// end ;
15924: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15925: LD_EXP 20
15929: PUSH
15930: LD_EXP 44
15934: AND
15935: IFFALSE 16174
15937: GO 15939
15939: DISABLE
15940: LD_INT 0
15942: PPUSH
15943: PPUSH
15944: PPUSH
// begin tmp := [ ] ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: EMPTY
15951: ST_TO_ADDR
// for i := 1 to 6 do
15952: LD_ADDR_VAR 0 1
15956: PUSH
15957: DOUBLE
15958: LD_INT 1
15960: DEC
15961: ST_TO_ADDR
15962: LD_INT 6
15964: PUSH
15965: FOR_TO
15966: IFFALSE 16071
// begin uc_nation := nation_nature ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// uc_side := 0 ;
15976: LD_ADDR_OWVAR 20
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15984: LD_ADDR_OWVAR 29
15988: PUSH
15989: LD_INT 12
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
// hc_agressivity := 20 ;
15999: LD_ADDR_OWVAR 35
16003: PUSH
16004: LD_INT 20
16006: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16007: LD_ADDR_OWVAR 28
16011: PUSH
16012: LD_INT 17
16014: ST_TO_ADDR
// hc_gallery :=  ;
16015: LD_ADDR_OWVAR 33
16019: PUSH
16020: LD_STRING 
16022: ST_TO_ADDR
// hc_name :=  ;
16023: LD_ADDR_OWVAR 26
16027: PUSH
16028: LD_STRING 
16030: ST_TO_ADDR
// un := CreateHuman ;
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: CALL_OW 44
16040: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16041: LD_VAR 0 2
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: CALL_OW 51
// tmp := tmp ^ un ;
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_VAR 0 3
16062: PUSH
16063: LD_VAR 0 2
16067: ADD
16068: ST_TO_ADDR
// end ;
16069: GO 15965
16071: POP
16072: POP
// repeat wait ( 0 0$1 ) ;
16073: LD_INT 35
16075: PPUSH
16076: CALL_OW 67
// for un in tmp do
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 3
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16165
// begin if IsDead ( un ) then
16093: LD_VAR 0 2
16097: PPUSH
16098: CALL_OW 301
16102: IFFALSE 16122
// begin tmp := tmp diff un ;
16104: LD_ADDR_VAR 0 3
16108: PUSH
16109: LD_VAR 0 3
16113: PUSH
16114: LD_VAR 0 2
16118: DIFF
16119: ST_TO_ADDR
// continue ;
16120: GO 16090
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16122: LD_VAR 0 2
16126: PPUSH
16127: LD_INT 3
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL_OW 69
16148: PPUSH
16149: LD_VAR 0 2
16153: PPUSH
16154: CALL_OW 74
16158: PPUSH
16159: CALL_OW 115
// end ;
16163: GO 16090
16165: POP
16166: POP
// until not tmp ;
16167: LD_VAR 0 3
16171: NOT
16172: IFFALSE 16073
// end ;
16174: PPOPN 3
16176: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16177: LD_EXP 20
16181: PUSH
16182: LD_EXP 45
16186: AND
16187: IFFALSE 16241
16189: GO 16191
16191: DISABLE
// begin ToLua ( displayTroll(); ) ;
16192: LD_STRING displayTroll();
16194: PPUSH
16195: CALL_OW 559
// wait ( 3 3$00 ) ;
16199: LD_INT 6300
16201: PPUSH
16202: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16206: LD_STRING hideTroll();
16208: PPUSH
16209: CALL_OW 559
// wait ( 1 1$00 ) ;
16213: LD_INT 2100
16215: PPUSH
16216: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16220: LD_STRING displayTroll();
16222: PPUSH
16223: CALL_OW 559
// wait ( 1 1$00 ) ;
16227: LD_INT 2100
16229: PPUSH
16230: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16234: LD_STRING hideTroll();
16236: PPUSH
16237: CALL_OW 559
// end ;
16241: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16242: LD_EXP 20
16246: PUSH
16247: LD_EXP 46
16251: AND
16252: IFFALSE 16315
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
// begin p := 0 ;
16260: LD_ADDR_VAR 0 1
16264: PUSH
16265: LD_INT 0
16267: ST_TO_ADDR
// repeat game_speed := 1 ;
16268: LD_ADDR_OWVAR 65
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16276: LD_INT 35
16278: PPUSH
16279: CALL_OW 67
// p := p + 1 ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_VAR 0 1
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: ST_TO_ADDR
// until p >= 60 ;
16297: LD_VAR 0 1
16301: PUSH
16302: LD_INT 60
16304: GREATEREQUAL
16305: IFFALSE 16268
// game_speed := 4 ;
16307: LD_ADDR_OWVAR 65
16311: PUSH
16312: LD_INT 4
16314: ST_TO_ADDR
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16318: LD_EXP 20
16322: PUSH
16323: LD_EXP 47
16327: AND
16328: IFFALSE 16474
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16337: LD_ADDR_VAR 0 1
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_OWVAR 2
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 30
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PPUSH
16386: CALL_OW 69
16390: ST_TO_ADDR
// if not depot then
16391: LD_VAR 0 1
16395: NOT
16396: IFFALSE 16400
// exit ;
16398: GO 16474
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: LD_VAR 0 1
16409: PUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 12
16422: ARRAY
16423: PPUSH
16424: CALL_OW 274
16428: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_INT 2
16451: PPUSH
16452: LD_INT 0
16454: PPUSH
16455: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: LD_INT 0
16469: PPUSH
16470: CALL_OW 277
// end ;
16474: PPOPN 2
16476: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16477: LD_EXP 20
16481: PUSH
16482: LD_EXP 48
16486: AND
16487: IFFALSE 16584
16489: GO 16491
16491: DISABLE
16492: LD_INT 0
16494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_OWVAR 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: LD_INT 23
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 1
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 1
16565: PPUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 12
16575: ARRAY
16576: PPUSH
16577: LD_INT 200
16579: PPUSH
16580: CALL_OW 234
// end ;
16584: PPOPN 1
16586: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16587: LD_EXP 20
16591: PUSH
16592: LD_EXP 49
16596: AND
16597: IFFALSE 16676
16599: GO 16601
16601: DISABLE
16602: LD_INT 0
16604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16605: LD_ADDR_VAR 0 1
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 21
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: ST_TO_ADDR
// if not tmp then
16641: LD_VAR 0 1
16645: NOT
16646: IFFALSE 16650
// exit ;
16648: GO 16676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PPUSH
16669: LD_INT 60
16671: PPUSH
16672: CALL_OW 234
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16679: LD_EXP 20
16683: PUSH
16684: LD_EXP 50
16688: AND
16689: IFFALSE 16788
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
// begin enable ;
16698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16699: LD_ADDR_VAR 0 1
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_OWVAR 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 61
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 33
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: ST_TO_ADDR
// if not tmp then
16742: LD_VAR 0 1
16746: NOT
16747: IFFALSE 16751
// exit ;
16749: GO 16788
// for i in tmp do
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: LD_VAR 0 1
16760: PUSH
16761: FOR_IN
16762: IFFALSE 16786
// if IsControledBy ( i ) then
16764: LD_VAR 0 2
16768: PPUSH
16769: CALL_OW 312
16773: IFFALSE 16784
// ComUnlink ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 136
16784: GO 16761
16786: POP
16787: POP
// end ;
16788: PPOPN 2
16790: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16791: LD_EXP 20
16795: PUSH
16796: LD_EXP 51
16800: AND
16801: IFFALSE 16941
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
16809: PPUSH
// begin ToLua ( displayPowell(); ) ;
16810: LD_STRING displayPowell();
16812: PPUSH
16813: CALL_OW 559
// uc_side := 0 ;
16817: LD_ADDR_OWVAR 20
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// uc_nation := 2 ;
16825: LD_ADDR_OWVAR 21
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16833: LD_ADDR_OWVAR 37
16837: PUSH
16838: LD_INT 14
16840: ST_TO_ADDR
// vc_engine := engine_siberite ;
16841: LD_ADDR_OWVAR 39
16845: PUSH
16846: LD_INT 3
16848: ST_TO_ADDR
// vc_control := control_apeman ;
16849: LD_ADDR_OWVAR 38
16853: PUSH
16854: LD_INT 5
16856: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16857: LD_ADDR_OWVAR 40
16861: PUSH
16862: LD_INT 29
16864: ST_TO_ADDR
// un := CreateVehicle ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: CALL_OW 45
16874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16875: LD_VAR 0 2
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16887: LD_INT 35
16889: PPUSH
16890: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16894: LD_VAR 0 2
16898: PPUSH
16899: LD_INT 22
16901: PUSH
16902: LD_OWVAR 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 69
16915: PPUSH
16916: LD_VAR 0 2
16920: PPUSH
16921: CALL_OW 74
16925: PPUSH
16926: CALL_OW 115
// until IsDead ( un ) ;
16930: LD_VAR 0 2
16934: PPUSH
16935: CALL_OW 301
16939: IFFALSE 16887
// end ;
16941: PPOPN 2
16943: END
// every 0 0$1 trigger StreamModeActive and sStu do
16944: LD_EXP 20
16948: PUSH
16949: LD_EXP 59
16953: AND
16954: IFFALSE 16970
16956: GO 16958
16958: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16959: LD_STRING displayStucuk();
16961: PPUSH
16962: CALL_OW 559
// ResetFog ;
16966: CALL_OW 335
// end ;
16970: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16971: LD_EXP 20
16975: PUSH
16976: LD_EXP 52
16980: AND
16981: IFFALSE 17122
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_OWVAR 2
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: ST_TO_ADDR
// if not tmp then
17026: LD_VAR 0 2
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17122
// un := tmp [ rand ( 1 , tmp ) ] ;
17035: LD_ADDR_VAR 0 1
17039: PUSH
17040: LD_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 12
17057: ARRAY
17058: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 0
17066: PPUSH
17067: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_OWVAR 3
17080: PUSH
17081: LD_VAR 0 1
17085: DIFF
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 74
17096: PPUSH
17097: CALL_OW 115
// wait ( 0 0$20 ) ;
17101: LD_INT 700
17103: PPUSH
17104: CALL_OW 67
// SetSide ( un , your_side ) ;
17108: LD_VAR 0 1
17112: PPUSH
17113: LD_OWVAR 2
17117: PPUSH
17118: CALL_OW 235
// end ;
17122: PPOPN 2
17124: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17125: LD_EXP 20
17129: PUSH
17130: LD_EXP 53
17134: AND
17135: IFFALSE 17241
17137: GO 17139
17139: DISABLE
17140: LD_INT 0
17142: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17143: LD_ADDR_VAR 0 1
17147: PUSH
17148: LD_INT 22
17150: PUSH
17151: LD_OWVAR 2
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: ST_TO_ADDR
// if not depot then
17197: LD_VAR 0 1
17201: NOT
17202: IFFALSE 17206
// exit ;
17204: GO 17241
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 1
17213: ARRAY
17214: PPUSH
17215: CALL_OW 250
17219: PPUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PPUSH
17229: CALL_OW 251
17233: PPUSH
17234: LD_INT 70
17236: PPUSH
17237: CALL_OW 495
// end ;
17241: PPOPN 1
17243: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17244: LD_EXP 20
17248: PUSH
17249: LD_EXP 54
17253: AND
17254: IFFALSE 17465
17256: GO 17258
17258: DISABLE
17259: LD_INT 0
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: LD_INT 22
17273: PUSH
17274: LD_OWVAR 2
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PPUSH
17297: CALL_OW 69
17301: ST_TO_ADDR
// if not tmp then
17302: LD_VAR 0 5
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17465
// for i in tmp do
17311: LD_ADDR_VAR 0 1
17315: PUSH
17316: LD_VAR 0 5
17320: PUSH
17321: FOR_IN
17322: IFFALSE 17463
// begin d := rand ( 0 , 5 ) ;
17324: LD_ADDR_VAR 0 4
17328: PUSH
17329: LD_INT 0
17331: PPUSH
17332: LD_INT 5
17334: PPUSH
17335: CALL_OW 12
17339: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 250
17354: PPUSH
17355: LD_VAR 0 4
17359: PPUSH
17360: LD_INT 3
17362: PPUSH
17363: LD_INT 12
17365: PPUSH
17366: CALL_OW 12
17370: PPUSH
17371: CALL_OW 272
17375: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 251
17390: PPUSH
17391: LD_VAR 0 4
17395: PPUSH
17396: LD_INT 3
17398: PPUSH
17399: LD_INT 12
17401: PPUSH
17402: CALL_OW 12
17406: PPUSH
17407: CALL_OW 273
17411: ST_TO_ADDR
// if ValidHex ( x , y ) then
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 488
17426: IFFALSE 17461
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 3
17445: PPUSH
17446: LD_INT 6
17448: PPUSH
17449: CALL_OW 12
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 483
// end ;
17461: GO 17321
17463: POP
17464: POP
// end ;
17465: PPOPN 5
17467: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17468: LD_EXP 20
17472: PUSH
17473: LD_EXP 55
17477: AND
17478: IFFALSE 17572
17480: GO 17482
17482: DISABLE
17483: LD_INT 0
17485: PPUSH
17486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_INT 22
17494: PUSH
17495: LD_OWVAR 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 32
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 69
17533: ST_TO_ADDR
// if not tmp then
17534: LD_VAR 0 2
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 17572
// for i in tmp do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: LD_VAR 0 2
17552: PUSH
17553: FOR_IN
17554: IFFALSE 17570
// SetFuel ( i , 0 ) ;
17556: LD_VAR 0 1
17560: PPUSH
17561: LD_INT 0
17563: PPUSH
17564: CALL_OW 240
17568: GO 17553
17570: POP
17571: POP
// end ;
17572: PPOPN 2
17574: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17575: LD_EXP 20
17579: PUSH
17580: LD_EXP 56
17584: AND
17585: IFFALSE 17651
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 29
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: ST_TO_ADDR
// if not tmp then
17629: LD_VAR 0 1
17633: NOT
17634: IFFALSE 17638
// exit ;
17636: GO 17651
// DestroyUnit ( tmp [ 1 ] ) ;
17638: LD_VAR 0 1
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: CALL_OW 65
// end ;
17651: PPOPN 1
17653: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17654: LD_EXP 20
17658: PUSH
17659: LD_EXP 58
17663: AND
17664: IFFALSE 17793
17666: GO 17668
17668: DISABLE
17669: LD_INT 0
17671: PPUSH
// begin uc_side := 0 ;
17672: LD_ADDR_OWVAR 20
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// uc_nation := nation_arabian ;
17680: LD_ADDR_OWVAR 21
17684: PUSH
17685: LD_INT 2
17687: ST_TO_ADDR
// hc_gallery :=  ;
17688: LD_ADDR_OWVAR 33
17692: PUSH
17693: LD_STRING 
17695: ST_TO_ADDR
// hc_name :=  ;
17696: LD_ADDR_OWVAR 26
17700: PUSH
17701: LD_STRING 
17703: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 11
17709: PPUSH
17710: LD_INT 10
17712: PPUSH
17713: CALL_OW 380
// un := CreateHuman ;
17717: LD_ADDR_VAR 0 1
17721: PUSH
17722: CALL_OW 44
17726: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17739: LD_INT 35
17741: PPUSH
17742: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17746: LD_VAR 0 1
17750: PPUSH
17751: LD_INT 22
17753: PUSH
17754: LD_OWVAR 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 74
17777: PPUSH
17778: CALL_OW 115
// until IsDead ( un ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 301
17791: IFFALSE 17739
// end ;
17793: PPOPN 1
17795: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17796: LD_EXP 20
17800: PUSH
17801: LD_EXP 60
17805: AND
17806: IFFALSE 17818
17808: GO 17810
17810: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17811: LD_STRING earthquake(getX(game), 0, 32)
17813: PPUSH
17814: CALL_OW 559
17818: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17819: LD_EXP 20
17823: PUSH
17824: LD_EXP 61
17828: AND
17829: IFFALSE 17920
17831: GO 17833
17833: DISABLE
17834: LD_INT 0
17836: PPUSH
// begin enable ;
17837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_OWVAR 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 33
17867: PUSH
17868: LD_INT 3
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: ST_TO_ADDR
// if not tmp then
17885: LD_VAR 0 1
17889: NOT
17890: IFFALSE 17894
// exit ;
17892: GO 17920
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 1
17901: PPUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 12
17911: ARRAY
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 234
// end ;
17920: PPOPN 1
17922: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17923: LD_EXP 20
17927: PUSH
17928: LD_EXP 62
17932: AND
17933: IFFALSE 18074
17935: GO 17937
17937: DISABLE
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: LD_OWVAR 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// if not tmp then
17979: LD_VAR 0 3
17983: NOT
17984: IFFALSE 17988
// exit ;
17986: GO 18074
// un := tmp [ rand ( 1 , tmp ) ] ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_VAR 0 3
17997: PUSH
17998: LD_INT 1
18000: PPUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: CALL_OW 12
18010: ARRAY
18011: ST_TO_ADDR
// if Crawls ( un ) then
18012: LD_VAR 0 2
18016: PPUSH
18017: CALL_OW 318
18021: IFFALSE 18032
// ComWalk ( un ) ;
18023: LD_VAR 0 2
18027: PPUSH
18028: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18032: LD_VAR 0 2
18036: PPUSH
18037: LD_INT 9
18039: PPUSH
18040: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18044: LD_INT 28
18046: PPUSH
18047: LD_OWVAR 2
18051: PPUSH
18052: LD_INT 2
18054: PPUSH
18055: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18059: LD_INT 29
18061: PPUSH
18062: LD_OWVAR 2
18066: PPUSH
18067: LD_INT 2
18069: PPUSH
18070: CALL_OW 322
// end ;
18074: PPOPN 3
18076: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18077: LD_EXP 20
18081: PUSH
18082: LD_EXP 63
18086: AND
18087: IFFALSE 18198
18089: GO 18091
18091: DISABLE
18092: LD_INT 0
18094: PPUSH
18095: PPUSH
18096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18097: LD_ADDR_VAR 0 3
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_OWVAR 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 25
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PPUSH
18128: CALL_OW 69
18132: ST_TO_ADDR
// if not tmp then
18133: LD_VAR 0 3
18137: NOT
18138: IFFALSE 18142
// exit ;
18140: GO 18198
// un := tmp [ rand ( 1 , tmp ) ] ;
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 1
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: CALL_OW 12
18164: ARRAY
18165: ST_TO_ADDR
// if Crawls ( un ) then
18166: LD_VAR 0 2
18170: PPUSH
18171: CALL_OW 318
18175: IFFALSE 18186
// ComWalk ( un ) ;
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18186: LD_VAR 0 2
18190: PPUSH
18191: LD_INT 8
18193: PPUSH
18194: CALL_OW 336
// end ;
18198: PPOPN 3
18200: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18201: LD_EXP 20
18205: PUSH
18206: LD_EXP 64
18210: AND
18211: IFFALSE 18355
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_OWVAR 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 34
18252: PUSH
18253: LD_INT 12
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 34
18262: PUSH
18263: LD_INT 51
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 34
18272: PUSH
18273: LD_INT 32
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not tmp then
18296: LD_VAR 0 2
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18355
// for i in tmp do
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_VAR 0 2
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18353
// if GetCargo ( i , mat_artifact ) = 0 then
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 4
18325: PPUSH
18326: CALL_OW 289
18330: PUSH
18331: LD_INT 0
18333: EQUAL
18334: IFFALSE 18351
// SetCargo ( i , mat_siberit , 100 ) ;
18336: LD_VAR 0 1
18340: PPUSH
18341: LD_INT 3
18343: PPUSH
18344: LD_INT 100
18346: PPUSH
18347: CALL_OW 290
18351: GO 18315
18353: POP
18354: POP
// end ;
18355: PPOPN 2
18357: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18358: LD_EXP 20
18362: PUSH
18363: LD_EXP 65
18367: AND
18368: IFFALSE 18551
18370: GO 18372
18372: DISABLE
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18377: LD_ADDR_VAR 0 2
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_OWVAR 2
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PPUSH
18394: CALL_OW 69
18398: ST_TO_ADDR
// if not tmp then
18399: LD_VAR 0 2
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18551
// for i := 1 to 2 do
18408: LD_ADDR_VAR 0 1
18412: PUSH
18413: DOUBLE
18414: LD_INT 1
18416: DEC
18417: ST_TO_ADDR
18418: LD_INT 2
18420: PUSH
18421: FOR_TO
18422: IFFALSE 18549
// begin uc_side := your_side ;
18424: LD_ADDR_OWVAR 20
18428: PUSH
18429: LD_OWVAR 2
18433: ST_TO_ADDR
// uc_nation := nation_american ;
18434: LD_ADDR_OWVAR 21
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// vc_chassis := us_morphling ;
18442: LD_ADDR_OWVAR 37
18446: PUSH
18447: LD_INT 5
18449: ST_TO_ADDR
// vc_engine := engine_siberite ;
18450: LD_ADDR_OWVAR 39
18454: PUSH
18455: LD_INT 3
18457: ST_TO_ADDR
// vc_control := control_computer ;
18458: LD_ADDR_OWVAR 38
18462: PUSH
18463: LD_INT 3
18465: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18466: LD_ADDR_OWVAR 40
18470: PUSH
18471: LD_INT 10
18473: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 310
18487: NOT
18488: IFFALSE 18535
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18490: CALL_OW 45
18494: PPUSH
18495: LD_VAR 0 2
18499: PUSH
18500: LD_INT 1
18502: ARRAY
18503: PPUSH
18504: CALL_OW 250
18508: PPUSH
18509: LD_VAR 0 2
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 251
18522: PPUSH
18523: LD_INT 12
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 50
18533: GO 18547
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18535: CALL_OW 45
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 51
// end ;
18547: GO 18421
18549: POP
18550: POP
// end ;
18551: PPOPN 2
18553: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18554: LD_EXP 20
18558: PUSH
18559: LD_EXP 66
18563: AND
18564: IFFALSE 18786
18566: GO 18568
18568: DISABLE
18569: LD_INT 0
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18577: LD_ADDR_VAR 0 6
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 23
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not tmp then
18631: LD_VAR 0 6
18635: NOT
18636: IFFALSE 18640
// exit ;
18638: GO 18786
// s1 := rand ( 1 , 4 ) ;
18640: LD_ADDR_VAR 0 2
18644: PUSH
18645: LD_INT 1
18647: PPUSH
18648: LD_INT 4
18650: PPUSH
18651: CALL_OW 12
18655: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18656: LD_ADDR_VAR 0 4
18660: PUSH
18661: LD_VAR 0 6
18665: PUSH
18666: LD_INT 1
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 2
18674: PPUSH
18675: CALL_OW 259
18679: ST_TO_ADDR
// if s1 = 1 then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_INT 1
18687: EQUAL
18688: IFFALSE 18708
// s2 := rand ( 2 , 4 ) else
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: LD_INT 2
18697: PPUSH
18698: LD_INT 4
18700: PPUSH
18701: CALL_OW 12
18705: ST_TO_ADDR
18706: GO 18716
// s2 := 1 ;
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18716: LD_ADDR_VAR 0 5
18720: PUSH
18721: LD_VAR 0 6
18725: PUSH
18726: LD_INT 1
18728: ARRAY
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: CALL_OW 259
18739: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18740: LD_VAR 0 6
18744: PUSH
18745: LD_INT 1
18747: ARRAY
18748: PPUSH
18749: LD_VAR 0 2
18753: PPUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18763: LD_VAR 0 6
18767: PUSH
18768: LD_INT 1
18770: ARRAY
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: CALL_OW 237
// end ;
18786: PPOPN 6
18788: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18789: LD_EXP 20
18793: PUSH
18794: LD_EXP 67
18798: AND
18799: IFFALSE 18878
18801: GO 18803
18803: DISABLE
18804: LD_INT 0
18806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 3
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 1
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 18878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18852: LD_VAR 0 1
18856: PUSH
18857: LD_INT 1
18859: PPUSH
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 12
18869: ARRAY
18870: PPUSH
18871: LD_INT 1
18873: PPUSH
18874: CALL_OW 234
// end ;
18878: PPOPN 1
18880: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18881: LD_EXP 20
18885: PUSH
18886: LD_EXP 68
18890: AND
18891: IFFALSE 19003
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18900: LD_ADDR_VAR 0 2
18904: PUSH
18905: LD_INT 22
18907: PUSH
18908: LD_OWVAR 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 2
18919: PUSH
18920: LD_INT 30
18922: PUSH
18923: LD_INT 27
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 30
18932: PUSH
18933: LD_INT 26
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 28
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: ST_TO_ADDR
// if not tmp then
18965: LD_VAR 0 2
18969: NOT
18970: IFFALSE 18974
// exit ;
18972: GO 19003
// for i in tmp do
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_VAR 0 2
18983: PUSH
18984: FOR_IN
18985: IFFALSE 19001
// SetLives ( i , 1 ) ;
18987: LD_VAR 0 1
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 234
18999: GO 18984
19001: POP
19002: POP
// end ;
19003: PPOPN 2
19005: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19006: LD_EXP 20
19010: PUSH
19011: LD_EXP 69
19015: AND
19016: IFFALSE 19303
19018: GO 19020
19020: DISABLE
19021: LD_INT 0
19023: PPUSH
19024: PPUSH
19025: PPUSH
// begin i := rand ( 1 , 7 ) ;
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 7
19036: PPUSH
19037: CALL_OW 12
19041: ST_TO_ADDR
// case i of 1 :
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: DOUBLE
19050: EQUAL
19051: IFTRUE 19055
19053: GO 19065
19055: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19056: LD_STRING earthquake(getX(game), 0, 32)
19058: PPUSH
19059: CALL_OW 559
19063: GO 19303
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19087
19073: POP
// begin ToLua ( displayStucuk(); ) ;
19074: LD_STRING displayStucuk();
19076: PPUSH
19077: CALL_OW 559
// ResetFog ;
19081: CALL_OW 335
// end ; 3 :
19085: GO 19303
19087: LD_INT 3
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19199
19095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: LD_INT 22
19103: PUSH
19104: LD_OWVAR 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 25
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: ST_TO_ADDR
// if not tmp then
19132: LD_VAR 0 2
19136: NOT
19137: IFFALSE 19141
// exit ;
19139: GO 19303
// un := tmp [ rand ( 1 , tmp ) ] ;
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: LD_VAR 0 2
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 12
19163: ARRAY
19164: ST_TO_ADDR
// if Crawls ( un ) then
19165: LD_VAR 0 3
19169: PPUSH
19170: CALL_OW 318
19174: IFFALSE 19185
// ComWalk ( un ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19185: LD_VAR 0 3
19189: PPUSH
19190: LD_INT 8
19192: PPUSH
19193: CALL_OW 336
// end ; 4 :
19197: GO 19303
19199: LD_INT 4
19201: DOUBLE
19202: EQUAL
19203: IFTRUE 19207
19205: GO 19281
19207: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_OWVAR 2
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 29
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// if not tmp then
19244: LD_VAR 0 2
19248: NOT
19249: IFFALSE 19253
// exit ;
19251: GO 19303
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19253: LD_VAR 0 2
19257: PUSH
19258: LD_INT 1
19260: ARRAY
19261: PPUSH
19262: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19266: LD_VAR 0 2
19270: PUSH
19271: LD_INT 1
19273: ARRAY
19274: PPUSH
19275: CALL_OW 65
// end ; 5 .. 7 :
19279: GO 19303
19281: LD_INT 5
19283: DOUBLE
19284: GREATEREQUAL
19285: IFFALSE 19293
19287: LD_INT 7
19289: DOUBLE
19290: LESSEQUAL
19291: IFTRUE 19295
19293: GO 19302
19295: POP
// StreamSibBomb ; end ;
19296: CALL 15540 0 0
19300: GO 19303
19302: POP
// end ;
19303: PPOPN 3
19305: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19306: LD_EXP 20
19310: PUSH
19311: LD_EXP 70
19315: AND
19316: IFFALSE 19472
19318: GO 19320
19320: DISABLE
19321: LD_INT 0
19323: PPUSH
19324: PPUSH
19325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19326: LD_ADDR_VAR 0 2
19330: PUSH
19331: LD_INT 81
19333: PUSH
19334: LD_OWVAR 2
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 21
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PPUSH
19375: CALL_OW 69
19379: ST_TO_ADDR
// if not tmp then
19380: LD_VAR 0 2
19384: NOT
19385: IFFALSE 19389
// exit ;
19387: GO 19472
// p := 0 ;
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 0
19396: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19397: LD_INT 35
19399: PPUSH
19400: CALL_OW 67
// p := p + 1 ;
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 1
19416: PLUS
19417: ST_TO_ADDR
// for i in tmp do
19418: LD_ADDR_VAR 0 1
19422: PUSH
19423: LD_VAR 0 2
19427: PUSH
19428: FOR_IN
19429: IFFALSE 19460
// if GetLives ( i ) < 1000 then
19431: LD_VAR 0 1
19435: PPUSH
19436: CALL_OW 256
19440: PUSH
19441: LD_INT 1000
19443: LESS
19444: IFFALSE 19458
// SetLives ( i , 1000 ) ;
19446: LD_VAR 0 1
19450: PPUSH
19451: LD_INT 1000
19453: PPUSH
19454: CALL_OW 234
19458: GO 19428
19460: POP
19461: POP
// until p > 20 ;
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 20
19469: GREATER
19470: IFFALSE 19397
// end ;
19472: PPOPN 3
19474: END
// every 0 0$1 trigger StreamModeActive and sTime do
19475: LD_EXP 20
19479: PUSH
19480: LD_EXP 71
19484: AND
19485: IFFALSE 19520
19487: GO 19489
19489: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19490: LD_INT 28
19492: PPUSH
19493: LD_OWVAR 2
19497: PPUSH
19498: LD_INT 2
19500: PPUSH
19501: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19505: LD_INT 30
19507: PPUSH
19508: LD_OWVAR 2
19512: PPUSH
19513: LD_INT 2
19515: PPUSH
19516: CALL_OW 322
// end ;
19520: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19521: LD_EXP 20
19525: PUSH
19526: LD_EXP 72
19530: AND
19531: IFFALSE 19652
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
19539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19540: LD_ADDR_VAR 0 2
19544: PUSH
19545: LD_INT 22
19547: PUSH
19548: LD_OWVAR 2
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 21
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 3
19569: PUSH
19570: LD_INT 23
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: ST_TO_ADDR
// if not tmp then
19594: LD_VAR 0 2
19598: NOT
19599: IFFALSE 19603
// exit ;
19601: GO 19652
// for i in tmp do
19603: LD_ADDR_VAR 0 1
19607: PUSH
19608: LD_VAR 0 2
19612: PUSH
19613: FOR_IN
19614: IFFALSE 19650
// begin if Crawls ( i ) then
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 318
19625: IFFALSE 19636
// ComWalk ( i ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: CALL_OW 138
// SetClass ( i , 2 ) ;
19636: LD_VAR 0 1
19640: PPUSH
19641: LD_INT 2
19643: PPUSH
19644: CALL_OW 336
// end ;
19648: GO 19613
19650: POP
19651: POP
// end ;
19652: PPOPN 2
19654: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19655: LD_EXP 20
19659: PUSH
19660: LD_EXP 73
19664: AND
19665: IFFALSE 19953
19667: GO 19669
19669: DISABLE
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
19674: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19675: LD_OWVAR 2
19679: PPUSH
19680: LD_INT 9
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19693: LD_INT 9
19695: PPUSH
19696: LD_OWVAR 2
19700: PPUSH
19701: CALL_OW 343
// uc_side := 9 ;
19705: LD_ADDR_OWVAR 20
19709: PUSH
19710: LD_INT 9
19712: ST_TO_ADDR
// uc_nation := 2 ;
19713: LD_ADDR_OWVAR 21
19717: PUSH
19718: LD_INT 2
19720: ST_TO_ADDR
// hc_name := Dark Warrior ;
19721: LD_ADDR_OWVAR 26
19725: PUSH
19726: LD_STRING Dark Warrior
19728: ST_TO_ADDR
// hc_gallery :=  ;
19729: LD_ADDR_OWVAR 33
19733: PUSH
19734: LD_STRING 
19736: ST_TO_ADDR
// hc_noskilllimit := true ;
19737: LD_ADDR_OWVAR 76
19741: PUSH
19742: LD_INT 1
19744: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19745: LD_ADDR_OWVAR 31
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 30
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 30
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: ST_TO_ADDR
// un := CreateHuman ;
19768: LD_ADDR_VAR 0 3
19772: PUSH
19773: CALL_OW 44
19777: ST_TO_ADDR
// hc_noskilllimit := false ;
19778: LD_ADDR_OWVAR 76
19782: PUSH
19783: LD_INT 0
19785: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19786: LD_VAR 0 3
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: CALL_OW 51
// ToLua ( playRanger() ) ;
19798: LD_STRING playRanger()
19800: PPUSH
19801: CALL_OW 559
// p := 0 ;
19805: LD_ADDR_VAR 0 2
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// p := p + 1 ;
19820: LD_ADDR_VAR 0 2
19824: PUSH
19825: LD_VAR 0 2
19829: PUSH
19830: LD_INT 1
19832: PLUS
19833: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19834: LD_VAR 0 3
19838: PPUSH
19839: CALL_OW 256
19843: PUSH
19844: LD_INT 1000
19846: LESS
19847: IFFALSE 19861
// SetLives ( un , 1000 ) ;
19849: LD_VAR 0 3
19853: PPUSH
19854: LD_INT 1000
19856: PPUSH
19857: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 81
19868: PUSH
19869: LD_OWVAR 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 91
19880: PUSH
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 30
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PPUSH
19898: CALL_OW 69
19902: PPUSH
19903: LD_VAR 0 3
19907: PPUSH
19908: CALL_OW 74
19912: PPUSH
19913: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19917: LD_VAR 0 2
19921: PUSH
19922: LD_INT 80
19924: GREATER
19925: PUSH
19926: LD_VAR 0 3
19930: PPUSH
19931: CALL_OW 301
19935: OR
19936: IFFALSE 19813
// if un then
19938: LD_VAR 0 3
19942: IFFALSE 19953
// RemoveUnit ( un ) ;
19944: LD_VAR 0 3
19948: PPUSH
19949: CALL_OW 64
// end ;
19953: PPOPN 3
19955: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19956: LD_EXP 74
19960: IFFALSE 20076
19962: GO 19964
19964: DISABLE
19965: LD_INT 0
19967: PPUSH
19968: PPUSH
19969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19970: LD_ADDR_VAR 0 2
19974: PUSH
19975: LD_INT 81
19977: PUSH
19978: LD_OWVAR 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 21
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20006: LD_STRING playComputer()
20008: PPUSH
20009: CALL_OW 559
// if not tmp then
20013: LD_VAR 0 2
20017: NOT
20018: IFFALSE 20022
// exit ;
20020: GO 20076
// for i in tmp do
20022: LD_ADDR_VAR 0 1
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: FOR_IN
20033: IFFALSE 20074
// for j := 1 to 4 do
20035: LD_ADDR_VAR 0 3
20039: PUSH
20040: DOUBLE
20041: LD_INT 1
20043: DEC
20044: ST_TO_ADDR
20045: LD_INT 4
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20070
// SetSkill ( i , j , 10 ) ;
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 10
20063: PPUSH
20064: CALL_OW 237
20068: GO 20048
20070: POP
20071: POP
20072: GO 20032
20074: POP
20075: POP
// end ;
20076: PPOPN 3
20078: END
// every 0 0$1 trigger s30 do var i , tmp ;
20079: LD_EXP 75
20083: IFFALSE 20152
20085: GO 20087
20087: DISABLE
20088: LD_INT 0
20090: PPUSH
20091: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20092: LD_ADDR_VAR 0 2
20096: PUSH
20097: LD_INT 22
20099: PUSH
20100: LD_OWVAR 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PPUSH
20109: CALL_OW 69
20113: ST_TO_ADDR
// if not tmp then
20114: LD_VAR 0 2
20118: NOT
20119: IFFALSE 20123
// exit ;
20121: GO 20152
// for i in tmp do
20123: LD_ADDR_VAR 0 1
20127: PUSH
20128: LD_VAR 0 2
20132: PUSH
20133: FOR_IN
20134: IFFALSE 20150
// SetLives ( i , 300 ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_INT 300
20143: PPUSH
20144: CALL_OW 234
20148: GO 20133
20150: POP
20151: POP
// end ;
20152: PPOPN 2
20154: END
// every 0 0$1 trigger s60 do var i , tmp ;
20155: LD_EXP 76
20159: IFFALSE 20228
20161: GO 20163
20163: DISABLE
20164: LD_INT 0
20166: PPUSH
20167: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20168: LD_ADDR_VAR 0 2
20172: PUSH
20173: LD_INT 22
20175: PUSH
20176: LD_OWVAR 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: ST_TO_ADDR
// if not tmp then
20190: LD_VAR 0 2
20194: NOT
20195: IFFALSE 20199
// exit ;
20197: GO 20228
// for i in tmp do
20199: LD_ADDR_VAR 0 1
20203: PUSH
20204: LD_VAR 0 2
20208: PUSH
20209: FOR_IN
20210: IFFALSE 20226
// SetLives ( i , 600 ) ;
20212: LD_VAR 0 1
20216: PPUSH
20217: LD_INT 600
20219: PPUSH
20220: CALL_OW 234
20224: GO 20209
20226: POP
20227: POP
// end ;
20228: PPOPN 2
20230: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20231: LD_INT 0
20233: PPUSH
// case cmd of 301 :
20234: LD_VAR 0 1
20238: PUSH
20239: LD_INT 301
20241: DOUBLE
20242: EQUAL
20243: IFTRUE 20247
20245: GO 20279
20247: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20248: LD_VAR 0 6
20252: PPUSH
20253: LD_VAR 0 7
20257: PPUSH
20258: LD_VAR 0 8
20262: PPUSH
20263: LD_VAR 0 4
20267: PPUSH
20268: LD_VAR 0 5
20272: PPUSH
20273: CALL 21480 0 5
20277: GO 20400
20279: LD_INT 302
20281: DOUBLE
20282: EQUAL
20283: IFTRUE 20287
20285: GO 20324
20287: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20288: LD_VAR 0 6
20292: PPUSH
20293: LD_VAR 0 7
20297: PPUSH
20298: LD_VAR 0 8
20302: PPUSH
20303: LD_VAR 0 9
20307: PPUSH
20308: LD_VAR 0 4
20312: PPUSH
20313: LD_VAR 0 5
20317: PPUSH
20318: CALL 21571 0 6
20322: GO 20400
20324: LD_INT 303
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20369
20332: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20333: LD_VAR 0 6
20337: PPUSH
20338: LD_VAR 0 7
20342: PPUSH
20343: LD_VAR 0 8
20347: PPUSH
20348: LD_VAR 0 9
20352: PPUSH
20353: LD_VAR 0 4
20357: PPUSH
20358: LD_VAR 0 5
20362: PPUSH
20363: CALL 20405 0 6
20367: GO 20400
20369: LD_INT 304
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20399
20377: POP
// hHackTeleport ( unit , x , y ) ; end ;
20378: LD_VAR 0 2
20382: PPUSH
20383: LD_VAR 0 4
20387: PPUSH
20388: LD_VAR 0 5
20392: PPUSH
20393: CALL 22164 0 3
20397: GO 20400
20399: POP
// end ;
20400: LD_VAR 0 12
20404: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20405: LD_INT 0
20407: PPUSH
20408: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20409: LD_VAR 0 1
20413: PUSH
20414: LD_INT 1
20416: LESS
20417: PUSH
20418: LD_VAR 0 1
20422: PUSH
20423: LD_INT 3
20425: GREATER
20426: OR
20427: PUSH
20428: LD_VAR 0 5
20432: PPUSH
20433: LD_VAR 0 6
20437: PPUSH
20438: CALL_OW 428
20442: OR
20443: IFFALSE 20447
// exit ;
20445: GO 21167
// uc_side := your_side ;
20447: LD_ADDR_OWVAR 20
20451: PUSH
20452: LD_OWVAR 2
20456: ST_TO_ADDR
// uc_nation := nation ;
20457: LD_ADDR_OWVAR 21
20461: PUSH
20462: LD_VAR 0 1
20466: ST_TO_ADDR
// bc_level = 1 ;
20467: LD_ADDR_OWVAR 43
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// case btype of 1 :
20475: LD_VAR 0 2
20479: PUSH
20480: LD_INT 1
20482: DOUBLE
20483: EQUAL
20484: IFTRUE 20488
20486: GO 20499
20488: POP
// bc_type := b_depot ; 2 :
20489: LD_ADDR_OWVAR 42
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
20497: GO 21111
20499: LD_INT 2
20501: DOUBLE
20502: EQUAL
20503: IFTRUE 20507
20505: GO 20518
20507: POP
// bc_type := b_warehouse ; 3 :
20508: LD_ADDR_OWVAR 42
20512: PUSH
20513: LD_INT 1
20515: ST_TO_ADDR
20516: GO 21111
20518: LD_INT 3
20520: DOUBLE
20521: EQUAL
20522: IFTRUE 20526
20524: GO 20537
20526: POP
// bc_type := b_lab ; 4 .. 9 :
20527: LD_ADDR_OWVAR 42
20531: PUSH
20532: LD_INT 6
20534: ST_TO_ADDR
20535: GO 21111
20537: LD_INT 4
20539: DOUBLE
20540: GREATEREQUAL
20541: IFFALSE 20549
20543: LD_INT 9
20545: DOUBLE
20546: LESSEQUAL
20547: IFTRUE 20551
20549: GO 20603
20551: POP
// begin bc_type := b_lab_half ;
20552: LD_ADDR_OWVAR 42
20556: PUSH
20557: LD_INT 7
20559: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20560: LD_ADDR_OWVAR 44
20564: PUSH
20565: LD_INT 10
20567: PUSH
20568: LD_INT 11
20570: PUSH
20571: LD_INT 12
20573: PUSH
20574: LD_INT 15
20576: PUSH
20577: LD_INT 14
20579: PUSH
20580: LD_INT 13
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: LD_VAR 0 2
20595: PUSH
20596: LD_INT 3
20598: MINUS
20599: ARRAY
20600: ST_TO_ADDR
// end ; 10 .. 13 :
20601: GO 21111
20603: LD_INT 10
20605: DOUBLE
20606: GREATEREQUAL
20607: IFFALSE 20615
20609: LD_INT 13
20611: DOUBLE
20612: LESSEQUAL
20613: IFTRUE 20617
20615: GO 20694
20617: POP
// begin bc_type := b_lab_full ;
20618: LD_ADDR_OWVAR 42
20622: PUSH
20623: LD_INT 8
20625: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20626: LD_ADDR_OWVAR 44
20630: PUSH
20631: LD_INT 10
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 14
20639: PUSH
20640: LD_INT 13
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PUSH
20649: LD_VAR 0 2
20653: PUSH
20654: LD_INT 9
20656: MINUS
20657: ARRAY
20658: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20659: LD_ADDR_OWVAR 45
20663: PUSH
20664: LD_INT 11
20666: PUSH
20667: LD_INT 15
20669: PUSH
20670: LD_INT 12
20672: PUSH
20673: LD_INT 15
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: LD_VAR 0 2
20686: PUSH
20687: LD_INT 9
20689: MINUS
20690: ARRAY
20691: ST_TO_ADDR
// end ; 14 :
20692: GO 21111
20694: LD_INT 14
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20713
20702: POP
// bc_type := b_workshop ; 15 :
20703: LD_ADDR_OWVAR 42
20707: PUSH
20708: LD_INT 2
20710: ST_TO_ADDR
20711: GO 21111
20713: LD_INT 15
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20732
20721: POP
// bc_type := b_factory ; 16 :
20722: LD_ADDR_OWVAR 42
20726: PUSH
20727: LD_INT 3
20729: ST_TO_ADDR
20730: GO 21111
20732: LD_INT 16
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20751
20740: POP
// bc_type := b_ext_gun ; 17 :
20741: LD_ADDR_OWVAR 42
20745: PUSH
20746: LD_INT 17
20748: ST_TO_ADDR
20749: GO 21111
20751: LD_INT 17
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20787
20759: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20760: LD_ADDR_OWVAR 42
20764: PUSH
20765: LD_INT 19
20767: PUSH
20768: LD_INT 23
20770: PUSH
20771: LD_INT 19
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_VAR 0 1
20783: ARRAY
20784: ST_TO_ADDR
20785: GO 21111
20787: LD_INT 18
20789: DOUBLE
20790: EQUAL
20791: IFTRUE 20795
20793: GO 20806
20795: POP
// bc_type := b_ext_radar ; 19 :
20796: LD_ADDR_OWVAR 42
20800: PUSH
20801: LD_INT 20
20803: ST_TO_ADDR
20804: GO 21111
20806: LD_INT 19
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20825
20814: POP
// bc_type := b_ext_radio ; 20 :
20815: LD_ADDR_OWVAR 42
20819: PUSH
20820: LD_INT 22
20822: ST_TO_ADDR
20823: GO 21111
20825: LD_INT 20
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20844
20833: POP
// bc_type := b_ext_siberium ; 21 :
20834: LD_ADDR_OWVAR 42
20838: PUSH
20839: LD_INT 21
20841: ST_TO_ADDR
20842: GO 21111
20844: LD_INT 21
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20863
20852: POP
// bc_type := b_ext_computer ; 22 :
20853: LD_ADDR_OWVAR 42
20857: PUSH
20858: LD_INT 24
20860: ST_TO_ADDR
20861: GO 21111
20863: LD_INT 22
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20882
20871: POP
// bc_type := b_ext_track ; 23 :
20872: LD_ADDR_OWVAR 42
20876: PUSH
20877: LD_INT 16
20879: ST_TO_ADDR
20880: GO 21111
20882: LD_INT 23
20884: DOUBLE
20885: EQUAL
20886: IFTRUE 20890
20888: GO 20901
20890: POP
// bc_type := b_ext_laser ; 24 :
20891: LD_ADDR_OWVAR 42
20895: PUSH
20896: LD_INT 25
20898: ST_TO_ADDR
20899: GO 21111
20901: LD_INT 24
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20920
20909: POP
// bc_type := b_control_tower ; 25 :
20910: LD_ADDR_OWVAR 42
20914: PUSH
20915: LD_INT 36
20917: ST_TO_ADDR
20918: GO 21111
20920: LD_INT 25
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20939
20928: POP
// bc_type := b_breastwork ; 26 :
20929: LD_ADDR_OWVAR 42
20933: PUSH
20934: LD_INT 31
20936: ST_TO_ADDR
20937: GO 21111
20939: LD_INT 26
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20958
20947: POP
// bc_type := b_bunker ; 27 :
20948: LD_ADDR_OWVAR 42
20952: PUSH
20953: LD_INT 32
20955: ST_TO_ADDR
20956: GO 21111
20958: LD_INT 27
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20977
20966: POP
// bc_type := b_turret ; 28 :
20967: LD_ADDR_OWVAR 42
20971: PUSH
20972: LD_INT 33
20974: ST_TO_ADDR
20975: GO 21111
20977: LD_INT 28
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20996
20985: POP
// bc_type := b_armoury ; 29 :
20986: LD_ADDR_OWVAR 42
20990: PUSH
20991: LD_INT 4
20993: ST_TO_ADDR
20994: GO 21111
20996: LD_INT 29
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21015
21004: POP
// bc_type := b_barracks ; 30 :
21005: LD_ADDR_OWVAR 42
21009: PUSH
21010: LD_INT 5
21012: ST_TO_ADDR
21013: GO 21111
21015: LD_INT 30
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21034
21023: POP
// bc_type := b_solar_power ; 31 :
21024: LD_ADDR_OWVAR 42
21028: PUSH
21029: LD_INT 27
21031: ST_TO_ADDR
21032: GO 21111
21034: LD_INT 31
21036: DOUBLE
21037: EQUAL
21038: IFTRUE 21042
21040: GO 21053
21042: POP
// bc_type := b_oil_power ; 32 :
21043: LD_ADDR_OWVAR 42
21047: PUSH
21048: LD_INT 26
21050: ST_TO_ADDR
21051: GO 21111
21053: LD_INT 32
21055: DOUBLE
21056: EQUAL
21057: IFTRUE 21061
21059: GO 21072
21061: POP
// bc_type := b_siberite_power ; 33 :
21062: LD_ADDR_OWVAR 42
21066: PUSH
21067: LD_INT 28
21069: ST_TO_ADDR
21070: GO 21111
21072: LD_INT 33
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21091
21080: POP
// bc_type := b_oil_mine ; 34 :
21081: LD_ADDR_OWVAR 42
21085: PUSH
21086: LD_INT 29
21088: ST_TO_ADDR
21089: GO 21111
21091: LD_INT 34
21093: DOUBLE
21094: EQUAL
21095: IFTRUE 21099
21097: GO 21110
21099: POP
// bc_type := b_siberite_mine ; end ;
21100: LD_ADDR_OWVAR 42
21104: PUSH
21105: LD_INT 30
21107: ST_TO_ADDR
21108: GO 21111
21110: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21111: LD_ADDR_VAR 0 8
21115: PUSH
21116: LD_VAR 0 5
21120: PPUSH
21121: LD_VAR 0 6
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: CALL_OW 47
21135: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21136: LD_OWVAR 42
21140: PUSH
21141: LD_INT 32
21143: PUSH
21144: LD_INT 33
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: IN
21151: IFFALSE 21167
// PlaceWeaponTurret ( b , weapon ) ;
21153: LD_VAR 0 8
21157: PPUSH
21158: LD_VAR 0 4
21162: PPUSH
21163: CALL_OW 431
// end ;
21167: LD_VAR 0 7
21171: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21172: LD_INT 0
21174: PPUSH
21175: PPUSH
21176: PPUSH
21177: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21178: LD_ADDR_VAR 0 4
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 30
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 30
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PPUSH
21227: CALL_OW 69
21231: ST_TO_ADDR
// if not tmp then
21232: LD_VAR 0 4
21236: NOT
21237: IFFALSE 21241
// exit ;
21239: GO 21300
// for i in tmp do
21241: LD_ADDR_VAR 0 2
21245: PUSH
21246: LD_VAR 0 4
21250: PUSH
21251: FOR_IN
21252: IFFALSE 21298
// for j = 1 to 3 do
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: DOUBLE
21260: LD_INT 1
21262: DEC
21263: ST_TO_ADDR
21264: LD_INT 3
21266: PUSH
21267: FOR_TO
21268: IFFALSE 21294
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21270: LD_VAR 0 2
21274: PPUSH
21275: CALL_OW 274
21279: PPUSH
21280: LD_VAR 0 3
21284: PPUSH
21285: LD_INT 99999
21287: PPUSH
21288: CALL_OW 277
21292: GO 21267
21294: POP
21295: POP
21296: GO 21251
21298: POP
21299: POP
// end ;
21300: LD_VAR 0 1
21304: RET
// export function hHackSetLevel10 ; var i , j ; begin
21305: LD_INT 0
21307: PPUSH
21308: PPUSH
21309: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_INT 21
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PPUSH
21325: CALL_OW 69
21329: PUSH
21330: FOR_IN
21331: IFFALSE 21383
// if IsSelected ( i ) then
21333: LD_VAR 0 2
21337: PPUSH
21338: CALL_OW 306
21342: IFFALSE 21381
// begin for j := 1 to 4 do
21344: LD_ADDR_VAR 0 3
21348: PUSH
21349: DOUBLE
21350: LD_INT 1
21352: DEC
21353: ST_TO_ADDR
21354: LD_INT 4
21356: PUSH
21357: FOR_TO
21358: IFFALSE 21379
// SetSkill ( i , j , 10 ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 3
21369: PPUSH
21370: LD_INT 10
21372: PPUSH
21373: CALL_OW 237
21377: GO 21357
21379: POP
21380: POP
// end ;
21381: GO 21330
21383: POP
21384: POP
// end ;
21385: LD_VAR 0 1
21389: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21390: LD_INT 0
21392: PPUSH
21393: PPUSH
21394: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_OWVAR 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 21
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 69
21430: PUSH
21431: FOR_IN
21432: IFFALSE 21473
// begin for j := 1 to 4 do
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: DOUBLE
21440: LD_INT 1
21442: DEC
21443: ST_TO_ADDR
21444: LD_INT 4
21446: PUSH
21447: FOR_TO
21448: IFFALSE 21469
// SetSkill ( i , j , 10 ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: LD_VAR 0 3
21459: PPUSH
21460: LD_INT 10
21462: PPUSH
21463: CALL_OW 237
21467: GO 21447
21469: POP
21470: POP
// end ;
21471: GO 21431
21473: POP
21474: POP
// end ;
21475: LD_VAR 0 1
21479: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21480: LD_INT 0
21482: PPUSH
// uc_side := your_side ;
21483: LD_ADDR_OWVAR 20
21487: PUSH
21488: LD_OWVAR 2
21492: ST_TO_ADDR
// uc_nation := nation ;
21493: LD_ADDR_OWVAR 21
21497: PUSH
21498: LD_VAR 0 1
21502: ST_TO_ADDR
// InitHc ;
21503: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21507: LD_INT 0
21509: PPUSH
21510: LD_VAR 0 2
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21524: LD_VAR 0 4
21528: PPUSH
21529: LD_VAR 0 5
21533: PPUSH
21534: CALL_OW 428
21538: PUSH
21539: LD_INT 0
21541: EQUAL
21542: IFFALSE 21566
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21544: CALL_OW 44
21548: PPUSH
21549: LD_VAR 0 4
21553: PPUSH
21554: LD_VAR 0 5
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 48
// end ;
21566: LD_VAR 0 6
21570: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21571: LD_INT 0
21573: PPUSH
21574: PPUSH
// uc_side := your_side ;
21575: LD_ADDR_OWVAR 20
21579: PUSH
21580: LD_OWVAR 2
21584: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21585: LD_VAR 0 1
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: LD_INT 4
21601: PUSH
21602: LD_INT 5
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: IN
21612: IFFALSE 21624
// uc_nation := nation_american else
21614: LD_ADDR_OWVAR 21
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
21622: GO 21667
// if chassis in [ 11 , 12 , 13 , 14 ] then
21624: LD_VAR 0 1
21628: PUSH
21629: LD_INT 11
21631: PUSH
21632: LD_INT 12
21634: PUSH
21635: LD_INT 13
21637: PUSH
21638: LD_INT 14
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: IN
21647: IFFALSE 21659
// uc_nation := nation_arabian else
21649: LD_ADDR_OWVAR 21
21653: PUSH
21654: LD_INT 2
21656: ST_TO_ADDR
21657: GO 21667
// uc_nation := nation_russian ;
21659: LD_ADDR_OWVAR 21
21663: PUSH
21664: LD_INT 3
21666: ST_TO_ADDR
// vc_chassis := chassis ;
21667: LD_ADDR_OWVAR 37
21671: PUSH
21672: LD_VAR 0 1
21676: ST_TO_ADDR
// vc_engine := engine ;
21677: LD_ADDR_OWVAR 39
21681: PUSH
21682: LD_VAR 0 2
21686: ST_TO_ADDR
// vc_control := control ;
21687: LD_ADDR_OWVAR 38
21691: PUSH
21692: LD_VAR 0 3
21696: ST_TO_ADDR
// vc_weapon := weapon ;
21697: LD_ADDR_OWVAR 40
21701: PUSH
21702: LD_VAR 0 4
21706: ST_TO_ADDR
// un := CreateVehicle ;
21707: LD_ADDR_VAR 0 8
21711: PUSH
21712: CALL_OW 45
21716: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21717: LD_VAR 0 8
21721: PPUSH
21722: LD_INT 0
21724: PPUSH
21725: LD_INT 5
21727: PPUSH
21728: CALL_OW 12
21732: PPUSH
21733: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21737: LD_VAR 0 8
21741: PPUSH
21742: LD_VAR 0 5
21746: PPUSH
21747: LD_VAR 0 6
21751: PPUSH
21752: LD_INT 1
21754: PPUSH
21755: CALL_OW 48
// end ;
21759: LD_VAR 0 7
21763: RET
// export hInvincible ; every 1 do
21764: GO 21766
21766: DISABLE
// hInvincible := [ ] ;
21767: LD_ADDR_EXP 77
21771: PUSH
21772: EMPTY
21773: ST_TO_ADDR
21774: END
// every 10 do var i ;
21775: GO 21777
21777: DISABLE
21778: LD_INT 0
21780: PPUSH
// begin enable ;
21781: ENABLE
// if not hInvincible then
21782: LD_EXP 77
21786: NOT
21787: IFFALSE 21791
// exit ;
21789: GO 21835
// for i in hInvincible do
21791: LD_ADDR_VAR 0 1
21795: PUSH
21796: LD_EXP 77
21800: PUSH
21801: FOR_IN
21802: IFFALSE 21833
// if GetLives ( i ) < 1000 then
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 256
21813: PUSH
21814: LD_INT 1000
21816: LESS
21817: IFFALSE 21831
// SetLives ( i , 1000 ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 1000
21826: PPUSH
21827: CALL_OW 234
21831: GO 21801
21833: POP
21834: POP
// end ;
21835: PPOPN 1
21837: END
// export function hHackInvincible ; var i ; begin
21838: LD_INT 0
21840: PPUSH
21841: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21842: LD_ADDR_VAR 0 2
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 21
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 21
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: PPUSH
21875: CALL_OW 69
21879: PUSH
21880: FOR_IN
21881: IFFALSE 21942
// if IsSelected ( i ) then
21883: LD_VAR 0 2
21887: PPUSH
21888: CALL_OW 306
21892: IFFALSE 21940
// begin if i in hInvincible then
21894: LD_VAR 0 2
21898: PUSH
21899: LD_EXP 77
21903: IN
21904: IFFALSE 21924
// hInvincible := hInvincible diff i else
21906: LD_ADDR_EXP 77
21910: PUSH
21911: LD_EXP 77
21915: PUSH
21916: LD_VAR 0 2
21920: DIFF
21921: ST_TO_ADDR
21922: GO 21940
// hInvincible := hInvincible union i ;
21924: LD_ADDR_EXP 77
21928: PUSH
21929: LD_EXP 77
21933: PUSH
21934: LD_VAR 0 2
21938: UNION
21939: ST_TO_ADDR
// end ;
21940: GO 21880
21942: POP
21943: POP
// end ;
21944: LD_VAR 0 1
21948: RET
// export function hHackInvisible ; var i , j ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
21953: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21954: LD_ADDR_VAR 0 2
21958: PUSH
21959: LD_INT 21
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PPUSH
21969: CALL_OW 69
21973: PUSH
21974: FOR_IN
21975: IFFALSE 21999
// if IsSelected ( i ) then
21977: LD_VAR 0 2
21981: PPUSH
21982: CALL_OW 306
21986: IFFALSE 21997
// ComForceInvisible ( i ) ;
21988: LD_VAR 0 2
21992: PPUSH
21993: CALL_OW 496
21997: GO 21974
21999: POP
22000: POP
// end ;
22001: LD_VAR 0 1
22005: RET
// export function hHackChangeYourSide ; begin
22006: LD_INT 0
22008: PPUSH
// if your_side = 8 then
22009: LD_OWVAR 2
22013: PUSH
22014: LD_INT 8
22016: EQUAL
22017: IFFALSE 22029
// your_side := 0 else
22019: LD_ADDR_OWVAR 2
22023: PUSH
22024: LD_INT 0
22026: ST_TO_ADDR
22027: GO 22043
// your_side := your_side + 1 ;
22029: LD_ADDR_OWVAR 2
22033: PUSH
22034: LD_OWVAR 2
22038: PUSH
22039: LD_INT 1
22041: PLUS
22042: ST_TO_ADDR
// end ;
22043: LD_VAR 0 1
22047: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
// for i in all_units do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: LD_OWVAR 3
22062: PUSH
22063: FOR_IN
22064: IFFALSE 22142
// if IsSelected ( i ) then
22066: LD_VAR 0 2
22070: PPUSH
22071: CALL_OW 306
22075: IFFALSE 22140
// begin j := GetSide ( i ) ;
22077: LD_ADDR_VAR 0 3
22081: PUSH
22082: LD_VAR 0 2
22086: PPUSH
22087: CALL_OW 255
22091: ST_TO_ADDR
// if j = 8 then
22092: LD_VAR 0 3
22096: PUSH
22097: LD_INT 8
22099: EQUAL
22100: IFFALSE 22112
// j := 0 else
22102: LD_ADDR_VAR 0 3
22106: PUSH
22107: LD_INT 0
22109: ST_TO_ADDR
22110: GO 22126
// j := j + 1 ;
22112: LD_ADDR_VAR 0 3
22116: PUSH
22117: LD_VAR 0 3
22121: PUSH
22122: LD_INT 1
22124: PLUS
22125: ST_TO_ADDR
// SetSide ( i , j ) ;
22126: LD_VAR 0 2
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 235
// end ;
22140: GO 22063
22142: POP
22143: POP
// end ;
22144: LD_VAR 0 1
22148: RET
// export function hHackFog ; begin
22149: LD_INT 0
22151: PPUSH
// FogOff ( true ) ;
22152: LD_INT 1
22154: PPUSH
22155: CALL_OW 344
// end ;
22159: LD_VAR 0 1
22163: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22164: LD_INT 0
22166: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_VAR 0 2
22176: PPUSH
22177: LD_VAR 0 3
22181: PPUSH
22182: LD_INT 1
22184: PPUSH
22185: LD_INT 1
22187: PPUSH
22188: CALL_OW 483
// CenterOnXY ( x , y ) ;
22192: LD_VAR 0 2
22196: PPUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: CALL_OW 84
// end ;
22206: LD_VAR 0 4
22210: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22215: LD_VAR 0 1
22219: NOT
22220: PUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: CALL_OW 488
22235: NOT
22236: OR
22237: PUSH
22238: LD_VAR 0 1
22242: PPUSH
22243: CALL_OW 266
22247: PUSH
22248: LD_INT 3
22250: NONEQUAL
22251: PUSH
22252: LD_VAR 0 1
22256: PPUSH
22257: CALL_OW 247
22261: PUSH
22262: LD_INT 1
22264: EQUAL
22265: NOT
22266: AND
22267: OR
22268: IFFALSE 22272
// exit ;
22270: GO 22421
// if GetType ( factory ) = unit_human then
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 247
22281: PUSH
22282: LD_INT 1
22284: EQUAL
22285: IFFALSE 22302
// factory := IsInUnit ( factory ) ;
22287: LD_ADDR_VAR 0 1
22291: PUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 310
22301: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22302: LD_VAR 0 1
22306: PPUSH
22307: CALL_OW 266
22311: PUSH
22312: LD_INT 3
22314: NONEQUAL
22315: IFFALSE 22319
// exit ;
22317: GO 22421
// if HexInfo ( x , y ) = factory then
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 428
22333: PUSH
22334: LD_VAR 0 1
22338: EQUAL
22339: IFFALSE 22366
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22341: LD_ADDR_EXP 78
22345: PUSH
22346: LD_EXP 78
22350: PPUSH
22351: LD_VAR 0 1
22355: PPUSH
22356: LD_INT 0
22358: PPUSH
22359: CALL_OW 1
22363: ST_TO_ADDR
22364: GO 22417
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22366: LD_ADDR_EXP 78
22370: PUSH
22371: LD_EXP 78
22375: PPUSH
22376: LD_VAR 0 1
22380: PPUSH
22381: LD_VAR 0 1
22385: PPUSH
22386: CALL_OW 255
22390: PUSH
22391: LD_VAR 0 1
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: LD_VAR 0 3
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 1
22416: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22417: CALL 22426 0 0
// end ;
22421: LD_VAR 0 4
22425: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22426: LD_INT 0
22428: PPUSH
22429: PPUSH
22430: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22431: LD_STRING resetFactoryWaypoint();
22433: PPUSH
22434: CALL_OW 559
// if factoryWaypoints then
22438: LD_EXP 78
22442: IFFALSE 22568
// begin list := PrepareArray ( factoryWaypoints ) ;
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: LD_EXP 78
22453: PPUSH
22454: CALL 64748 0 1
22458: ST_TO_ADDR
// for i := 1 to list do
22459: LD_ADDR_VAR 0 2
22463: PUSH
22464: DOUBLE
22465: LD_INT 1
22467: DEC
22468: ST_TO_ADDR
22469: LD_VAR 0 3
22473: PUSH
22474: FOR_TO
22475: IFFALSE 22566
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22477: LD_STRING setFactoryWaypointXY(
22479: PUSH
22480: LD_VAR 0 3
22484: PUSH
22485: LD_VAR 0 2
22489: ARRAY
22490: PUSH
22491: LD_INT 1
22493: ARRAY
22494: STR
22495: PUSH
22496: LD_STRING ,
22498: STR
22499: PUSH
22500: LD_VAR 0 3
22504: PUSH
22505: LD_VAR 0 2
22509: ARRAY
22510: PUSH
22511: LD_INT 2
22513: ARRAY
22514: STR
22515: PUSH
22516: LD_STRING ,
22518: STR
22519: PUSH
22520: LD_VAR 0 3
22524: PUSH
22525: LD_VAR 0 2
22529: ARRAY
22530: PUSH
22531: LD_INT 3
22533: ARRAY
22534: STR
22535: PUSH
22536: LD_STRING ,
22538: STR
22539: PUSH
22540: LD_VAR 0 3
22544: PUSH
22545: LD_VAR 0 2
22549: ARRAY
22550: PUSH
22551: LD_INT 4
22553: ARRAY
22554: STR
22555: PUSH
22556: LD_STRING )
22558: STR
22559: PPUSH
22560: CALL_OW 559
22564: GO 22474
22566: POP
22567: POP
// end ; end ;
22568: LD_VAR 0 1
22572: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22573: LD_INT 0
22575: PPUSH
// if HexInfo ( x , y ) = warehouse then
22576: LD_VAR 0 2
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: CALL_OW 428
22590: PUSH
22591: LD_VAR 0 1
22595: EQUAL
22596: IFFALSE 22623
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22598: LD_ADDR_EXP 79
22602: PUSH
22603: LD_EXP 79
22607: PPUSH
22608: LD_VAR 0 1
22612: PPUSH
22613: LD_INT 0
22615: PPUSH
22616: CALL_OW 1
22620: ST_TO_ADDR
22621: GO 22674
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22623: LD_ADDR_EXP 79
22627: PUSH
22628: LD_EXP 79
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 255
22647: PUSH
22648: LD_VAR 0 1
22652: PUSH
22653: LD_VAR 0 2
22657: PUSH
22658: LD_VAR 0 3
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 1
22673: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22674: CALL 22683 0 0
// end ;
22678: LD_VAR 0 4
22682: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
22687: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22688: LD_STRING resetWarehouseGatheringPoints();
22690: PPUSH
22691: CALL_OW 559
// if warehouseGatheringPoints then
22695: LD_EXP 79
22699: IFFALSE 22825
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22701: LD_ADDR_VAR 0 3
22705: PUSH
22706: LD_EXP 79
22710: PPUSH
22711: CALL 64748 0 1
22715: ST_TO_ADDR
// for i := 1 to list do
22716: LD_ADDR_VAR 0 2
22720: PUSH
22721: DOUBLE
22722: LD_INT 1
22724: DEC
22725: ST_TO_ADDR
22726: LD_VAR 0 3
22730: PUSH
22731: FOR_TO
22732: IFFALSE 22823
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22734: LD_STRING setWarehouseGatheringPointXY(
22736: PUSH
22737: LD_VAR 0 3
22741: PUSH
22742: LD_VAR 0 2
22746: ARRAY
22747: PUSH
22748: LD_INT 1
22750: ARRAY
22751: STR
22752: PUSH
22753: LD_STRING ,
22755: STR
22756: PUSH
22757: LD_VAR 0 3
22761: PUSH
22762: LD_VAR 0 2
22766: ARRAY
22767: PUSH
22768: LD_INT 2
22770: ARRAY
22771: STR
22772: PUSH
22773: LD_STRING ,
22775: STR
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: LD_VAR 0 2
22786: ARRAY
22787: PUSH
22788: LD_INT 3
22790: ARRAY
22791: STR
22792: PUSH
22793: LD_STRING ,
22795: STR
22796: PUSH
22797: LD_VAR 0 3
22801: PUSH
22802: LD_VAR 0 2
22806: ARRAY
22807: PUSH
22808: LD_INT 4
22810: ARRAY
22811: STR
22812: PUSH
22813: LD_STRING )
22815: STR
22816: PPUSH
22817: CALL_OW 559
22821: GO 22731
22823: POP
22824: POP
// end ; end ;
22825: LD_VAR 0 1
22829: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22830: LD_EXP 79
22834: IFFALSE 23519
22836: GO 22838
22838: DISABLE
22839: LD_INT 0
22841: PPUSH
22842: PPUSH
22843: PPUSH
22844: PPUSH
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
22849: PPUSH
// begin enable ;
22850: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_EXP 79
22860: PPUSH
22861: CALL 64748 0 1
22865: ST_TO_ADDR
// if not list then
22866: LD_VAR 0 3
22870: NOT
22871: IFFALSE 22875
// exit ;
22873: GO 23519
// for i := 1 to list do
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: DOUBLE
22881: LD_INT 1
22883: DEC
22884: ST_TO_ADDR
22885: LD_VAR 0 3
22889: PUSH
22890: FOR_TO
22891: IFFALSE 23517
// begin depot := list [ i ] [ 2 ] ;
22893: LD_ADDR_VAR 0 8
22897: PUSH
22898: LD_VAR 0 3
22902: PUSH
22903: LD_VAR 0 1
22907: ARRAY
22908: PUSH
22909: LD_INT 2
22911: ARRAY
22912: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22913: LD_ADDR_VAR 0 5
22917: PUSH
22918: LD_VAR 0 3
22922: PUSH
22923: LD_VAR 0 1
22927: ARRAY
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22933: LD_VAR 0 8
22937: PPUSH
22938: CALL_OW 301
22942: PUSH
22943: LD_VAR 0 5
22947: PUSH
22948: LD_VAR 0 8
22952: PPUSH
22953: CALL_OW 255
22957: NONEQUAL
22958: OR
22959: IFFALSE 22988
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22961: LD_ADDR_EXP 79
22965: PUSH
22966: LD_EXP 79
22970: PPUSH
22971: LD_VAR 0 8
22975: PPUSH
22976: LD_INT 0
22978: PPUSH
22979: CALL_OW 1
22983: ST_TO_ADDR
// exit ;
22984: POP
22985: POP
22986: GO 23519
// end ; x := list [ i ] [ 3 ] ;
22988: LD_ADDR_VAR 0 6
22992: PUSH
22993: LD_VAR 0 3
22997: PUSH
22998: LD_VAR 0 1
23002: ARRAY
23003: PUSH
23004: LD_INT 3
23006: ARRAY
23007: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23008: LD_ADDR_VAR 0 7
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_VAR 0 1
23022: ARRAY
23023: PUSH
23024: LD_INT 4
23026: ARRAY
23027: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23028: LD_ADDR_VAR 0 9
23032: PUSH
23033: LD_VAR 0 6
23037: PPUSH
23038: LD_VAR 0 7
23042: PPUSH
23043: LD_INT 16
23045: PPUSH
23046: CALL 63336 0 3
23050: ST_TO_ADDR
// if not cratesNearbyPoint then
23051: LD_VAR 0 9
23055: NOT
23056: IFFALSE 23062
// exit ;
23058: POP
23059: POP
23060: GO 23519
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23062: LD_ADDR_VAR 0 4
23066: PUSH
23067: LD_INT 22
23069: PUSH
23070: LD_VAR 0 5
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: LD_INT 60
23084: PUSH
23085: EMPTY
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 91
23094: PUSH
23095: LD_VAR 0 8
23099: PUSH
23100: LD_INT 6
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 25
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 25
23123: PUSH
23124: LD_INT 16
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: PPUSH
23142: CALL_OW 69
23146: PUSH
23147: LD_VAR 0 8
23151: PPUSH
23152: CALL_OW 313
23156: PPUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 60
23162: PUSH
23163: EMPTY
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: LD_INT 25
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 25
23185: PUSH
23186: LD_INT 16
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PPUSH
23202: CALL_OW 72
23206: UNION
23207: ST_TO_ADDR
// if tmp then
23208: LD_VAR 0 4
23212: IFFALSE 23292
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23214: LD_ADDR_VAR 0 4
23218: PUSH
23219: LD_VAR 0 4
23223: PPUSH
23224: LD_INT 3
23226: PPUSH
23227: CALL 61305 0 2
23231: ST_TO_ADDR
// for j in tmp do
23232: LD_ADDR_VAR 0 2
23236: PUSH
23237: LD_VAR 0 4
23241: PUSH
23242: FOR_IN
23243: IFFALSE 23286
// begin if IsInUnit ( j ) then
23245: LD_VAR 0 2
23249: PPUSH
23250: CALL_OW 310
23254: IFFALSE 23265
// ComExit ( j ) ;
23256: LD_VAR 0 2
23260: PPUSH
23261: CALL 61388 0 1
// AddComCollect ( j , x , y ) ;
23265: LD_VAR 0 2
23269: PPUSH
23270: LD_VAR 0 6
23274: PPUSH
23275: LD_VAR 0 7
23279: PPUSH
23280: CALL_OW 177
// end ;
23284: GO 23242
23286: POP
23287: POP
// exit ;
23288: POP
23289: POP
23290: GO 23519
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: LD_INT 22
23299: PUSH
23300: LD_VAR 0 5
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 91
23311: PUSH
23312: LD_VAR 0 8
23316: PUSH
23317: LD_INT 8
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: LD_INT 34
23330: PUSH
23331: LD_INT 12
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 34
23340: PUSH
23341: LD_INT 51
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 34
23350: PUSH
23351: LD_INT 32
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 89
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PPUSH
23380: CALL_OW 69
23384: ST_TO_ADDR
// if tmp then
23385: LD_VAR 0 4
23389: IFFALSE 23515
// begin for j in tmp do
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_VAR 0 4
23400: PUSH
23401: FOR_IN
23402: IFFALSE 23513
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23404: LD_VAR 0 2
23408: PPUSH
23409: CALL_OW 262
23413: PUSH
23414: LD_INT 3
23416: EQUAL
23417: PUSH
23418: LD_VAR 0 2
23422: PPUSH
23423: CALL_OW 261
23427: PUSH
23428: LD_INT 20
23430: GREATER
23431: OR
23432: PUSH
23433: LD_VAR 0 2
23437: PPUSH
23438: CALL_OW 314
23442: NOT
23443: AND
23444: PUSH
23445: LD_VAR 0 2
23449: PPUSH
23450: CALL_OW 263
23454: PUSH
23455: LD_INT 1
23457: NONEQUAL
23458: PUSH
23459: LD_VAR 0 2
23463: PPUSH
23464: CALL_OW 311
23468: OR
23469: AND
23470: IFFALSE 23511
// begin ComCollect ( j , x , y ) ;
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 6
23481: PPUSH
23482: LD_VAR 0 7
23486: PPUSH
23487: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_VAR 0 8
23500: PPUSH
23501: CALL_OW 172
// exit ;
23505: POP
23506: POP
23507: POP
23508: POP
23509: GO 23519
// end ;
23511: GO 23401
23513: POP
23514: POP
// end ; end ;
23515: GO 22890
23517: POP
23518: POP
// end ; end_of_file
23519: PPOPN 9
23521: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
// if exist_mode then
23526: LD_VAR 0 2
23530: IFFALSE 23555
// unit := CreateCharacter ( prefix & ident ) else
23532: LD_ADDR_VAR 0 5
23536: PUSH
23537: LD_VAR 0 3
23541: PUSH
23542: LD_VAR 0 1
23546: STR
23547: PPUSH
23548: CALL_OW 34
23552: ST_TO_ADDR
23553: GO 23570
// unit := NewCharacter ( ident ) ;
23555: LD_ADDR_VAR 0 5
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 25
23569: ST_TO_ADDR
// result := unit ;
23570: LD_ADDR_VAR 0 4
23574: PUSH
23575: LD_VAR 0 5
23579: ST_TO_ADDR
// end ;
23580: LD_VAR 0 4
23584: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23585: LD_INT 0
23587: PPUSH
23588: PPUSH
// if not side or not nation then
23589: LD_VAR 0 1
23593: NOT
23594: PUSH
23595: LD_VAR 0 2
23599: NOT
23600: OR
23601: IFFALSE 23605
// exit ;
23603: GO 24373
// case nation of nation_american :
23605: LD_VAR 0 2
23609: PUSH
23610: LD_INT 1
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23832
23618: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23619: LD_ADDR_VAR 0 4
23623: PUSH
23624: LD_INT 35
23626: PUSH
23627: LD_INT 45
23629: PUSH
23630: LD_INT 46
23632: PUSH
23633: LD_INT 47
23635: PUSH
23636: LD_INT 82
23638: PUSH
23639: LD_INT 83
23641: PUSH
23642: LD_INT 84
23644: PUSH
23645: LD_INT 85
23647: PUSH
23648: LD_INT 86
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: LD_INT 6
23659: PUSH
23660: LD_INT 15
23662: PUSH
23663: LD_INT 16
23665: PUSH
23666: LD_INT 7
23668: PUSH
23669: LD_INT 12
23671: PUSH
23672: LD_INT 13
23674: PUSH
23675: LD_INT 10
23677: PUSH
23678: LD_INT 14
23680: PUSH
23681: LD_INT 20
23683: PUSH
23684: LD_INT 21
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_INT 25
23692: PUSH
23693: LD_INT 32
23695: PUSH
23696: LD_INT 27
23698: PUSH
23699: LD_INT 36
23701: PUSH
23702: LD_INT 69
23704: PUSH
23705: LD_INT 39
23707: PUSH
23708: LD_INT 34
23710: PUSH
23711: LD_INT 40
23713: PUSH
23714: LD_INT 48
23716: PUSH
23717: LD_INT 49
23719: PUSH
23720: LD_INT 50
23722: PUSH
23723: LD_INT 51
23725: PUSH
23726: LD_INT 52
23728: PUSH
23729: LD_INT 53
23731: PUSH
23732: LD_INT 54
23734: PUSH
23735: LD_INT 55
23737: PUSH
23738: LD_INT 56
23740: PUSH
23741: LD_INT 57
23743: PUSH
23744: LD_INT 58
23746: PUSH
23747: LD_INT 59
23749: PUSH
23750: LD_INT 60
23752: PUSH
23753: LD_INT 61
23755: PUSH
23756: LD_INT 62
23758: PUSH
23759: LD_INT 80
23761: PUSH
23762: LD_INT 82
23764: PUSH
23765: LD_INT 83
23767: PUSH
23768: LD_INT 84
23770: PUSH
23771: LD_INT 85
23773: PUSH
23774: LD_INT 86
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
23830: GO 24297
23832: LD_INT 2
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 24066
23840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23841: LD_ADDR_VAR 0 4
23845: PUSH
23846: LD_INT 35
23848: PUSH
23849: LD_INT 45
23851: PUSH
23852: LD_INT 46
23854: PUSH
23855: LD_INT 47
23857: PUSH
23858: LD_INT 82
23860: PUSH
23861: LD_INT 83
23863: PUSH
23864: LD_INT 84
23866: PUSH
23867: LD_INT 85
23869: PUSH
23870: LD_INT 87
23872: PUSH
23873: LD_INT 70
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 11
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: LD_INT 4
23887: PUSH
23888: LD_INT 5
23890: PUSH
23891: LD_INT 6
23893: PUSH
23894: LD_INT 15
23896: PUSH
23897: LD_INT 18
23899: PUSH
23900: LD_INT 7
23902: PUSH
23903: LD_INT 17
23905: PUSH
23906: LD_INT 8
23908: PUSH
23909: LD_INT 20
23911: PUSH
23912: LD_INT 21
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 72
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: LD_INT 69
23926: PUSH
23927: LD_INT 39
23929: PUSH
23930: LD_INT 40
23932: PUSH
23933: LD_INT 41
23935: PUSH
23936: LD_INT 42
23938: PUSH
23939: LD_INT 43
23941: PUSH
23942: LD_INT 48
23944: PUSH
23945: LD_INT 49
23947: PUSH
23948: LD_INT 50
23950: PUSH
23951: LD_INT 51
23953: PUSH
23954: LD_INT 52
23956: PUSH
23957: LD_INT 53
23959: PUSH
23960: LD_INT 54
23962: PUSH
23963: LD_INT 55
23965: PUSH
23966: LD_INT 56
23968: PUSH
23969: LD_INT 60
23971: PUSH
23972: LD_INT 61
23974: PUSH
23975: LD_INT 62
23977: PUSH
23978: LD_INT 66
23980: PUSH
23981: LD_INT 67
23983: PUSH
23984: LD_INT 68
23986: PUSH
23987: LD_INT 81
23989: PUSH
23990: LD_INT 82
23992: PUSH
23993: LD_INT 83
23995: PUSH
23996: LD_INT 84
23998: PUSH
23999: LD_INT 85
24001: PUSH
24002: LD_INT 87
24004: PUSH
24005: LD_INT 88
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: ST_TO_ADDR
24064: GO 24297
24066: LD_INT 3
24068: DOUBLE
24069: EQUAL
24070: IFTRUE 24074
24072: GO 24296
24074: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_INT 46
24082: PUSH
24083: LD_INT 47
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 82
24094: PUSH
24095: LD_INT 83
24097: PUSH
24098: LD_INT 84
24100: PUSH
24101: LD_INT 85
24103: PUSH
24104: LD_INT 86
24106: PUSH
24107: LD_INT 11
24109: PUSH
24110: LD_INT 9
24112: PUSH
24113: LD_INT 20
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: LD_INT 21
24121: PUSH
24122: LD_INT 24
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 25
24130: PUSH
24131: LD_INT 28
24133: PUSH
24134: LD_INT 29
24136: PUSH
24137: LD_INT 30
24139: PUSH
24140: LD_INT 31
24142: PUSH
24143: LD_INT 37
24145: PUSH
24146: LD_INT 38
24148: PUSH
24149: LD_INT 32
24151: PUSH
24152: LD_INT 27
24154: PUSH
24155: LD_INT 33
24157: PUSH
24158: LD_INT 69
24160: PUSH
24161: LD_INT 39
24163: PUSH
24164: LD_INT 34
24166: PUSH
24167: LD_INT 40
24169: PUSH
24170: LD_INT 71
24172: PUSH
24173: LD_INT 23
24175: PUSH
24176: LD_INT 44
24178: PUSH
24179: LD_INT 48
24181: PUSH
24182: LD_INT 49
24184: PUSH
24185: LD_INT 50
24187: PUSH
24188: LD_INT 51
24190: PUSH
24191: LD_INT 52
24193: PUSH
24194: LD_INT 53
24196: PUSH
24197: LD_INT 54
24199: PUSH
24200: LD_INT 55
24202: PUSH
24203: LD_INT 56
24205: PUSH
24206: LD_INT 57
24208: PUSH
24209: LD_INT 58
24211: PUSH
24212: LD_INT 59
24214: PUSH
24215: LD_INT 63
24217: PUSH
24218: LD_INT 64
24220: PUSH
24221: LD_INT 65
24223: PUSH
24224: LD_INT 82
24226: PUSH
24227: LD_INT 83
24229: PUSH
24230: LD_INT 84
24232: PUSH
24233: LD_INT 85
24235: PUSH
24236: LD_INT 86
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
24294: GO 24297
24296: POP
// if state > - 1 and state < 3 then
24297: LD_VAR 0 3
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: GREATER
24306: PUSH
24307: LD_VAR 0 3
24311: PUSH
24312: LD_INT 3
24314: LESS
24315: AND
24316: IFFALSE 24373
// for i in result do
24318: LD_ADDR_VAR 0 5
24322: PUSH
24323: LD_VAR 0 4
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24371
// if GetTech ( i , side ) <> state then
24331: LD_VAR 0 5
24335: PPUSH
24336: LD_VAR 0 1
24340: PPUSH
24341: CALL_OW 321
24345: PUSH
24346: LD_VAR 0 3
24350: NONEQUAL
24351: IFFALSE 24369
// result := result diff i ;
24353: LD_ADDR_VAR 0 4
24357: PUSH
24358: LD_VAR 0 4
24362: PUSH
24363: LD_VAR 0 5
24367: DIFF
24368: ST_TO_ADDR
24369: GO 24328
24371: POP
24372: POP
// end ;
24373: LD_VAR 0 4
24377: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24378: LD_INT 0
24380: PPUSH
24381: PPUSH
24382: PPUSH
// result := true ;
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 1
24390: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24391: LD_ADDR_VAR 0 5
24395: PUSH
24396: LD_VAR 0 2
24400: PPUSH
24401: CALL_OW 480
24405: ST_TO_ADDR
// if not tmp then
24406: LD_VAR 0 5
24410: NOT
24411: IFFALSE 24415
// exit ;
24413: GO 24464
// for i in tmp do
24415: LD_ADDR_VAR 0 4
24419: PUSH
24420: LD_VAR 0 5
24424: PUSH
24425: FOR_IN
24426: IFFALSE 24462
// if GetTech ( i , side ) <> state_researched then
24428: LD_VAR 0 4
24432: PPUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 321
24442: PUSH
24443: LD_INT 2
24445: NONEQUAL
24446: IFFALSE 24460
// begin result := false ;
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: LD_INT 0
24455: ST_TO_ADDR
// exit ;
24456: POP
24457: POP
24458: GO 24464
// end ;
24460: GO 24425
24462: POP
24463: POP
// end ;
24464: LD_VAR 0 3
24468: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24484: LD_VAR 0 1
24488: NOT
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 257
24499: PUSH
24500: LD_INT 9
24502: NONEQUAL
24503: OR
24504: IFFALSE 24508
// exit ;
24506: GO 25081
// side := GetSide ( unit ) ;
24508: LD_ADDR_VAR 0 9
24512: PUSH
24513: LD_VAR 0 1
24517: PPUSH
24518: CALL_OW 255
24522: ST_TO_ADDR
// tech_space := tech_spacanom ;
24523: LD_ADDR_VAR 0 12
24527: PUSH
24528: LD_INT 29
24530: ST_TO_ADDR
// tech_time := tech_taurad ;
24531: LD_ADDR_VAR 0 13
24535: PUSH
24536: LD_INT 28
24538: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24539: LD_ADDR_VAR 0 11
24543: PUSH
24544: LD_VAR 0 1
24548: PPUSH
24549: CALL_OW 310
24553: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24554: LD_VAR 0 11
24558: PPUSH
24559: CALL_OW 247
24563: PUSH
24564: LD_INT 2
24566: EQUAL
24567: IFFALSE 24571
// exit ;
24569: GO 25081
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24571: LD_ADDR_VAR 0 8
24575: PUSH
24576: LD_INT 81
24578: PUSH
24579: LD_VAR 0 9
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 21
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PPUSH
24609: CALL_OW 69
24613: ST_TO_ADDR
// if not tmp then
24614: LD_VAR 0 8
24618: NOT
24619: IFFALSE 24623
// exit ;
24621: GO 25081
// if in_unit then
24623: LD_VAR 0 11
24627: IFFALSE 24651
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24629: LD_ADDR_VAR 0 10
24633: PUSH
24634: LD_VAR 0 8
24638: PPUSH
24639: LD_VAR 0 11
24643: PPUSH
24644: CALL_OW 74
24648: ST_TO_ADDR
24649: GO 24671
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24651: LD_ADDR_VAR 0 10
24655: PUSH
24656: LD_VAR 0 8
24660: PPUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL_OW 74
24670: ST_TO_ADDR
// if not enemy then
24671: LD_VAR 0 10
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 25081
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24680: LD_VAR 0 11
24684: PUSH
24685: LD_VAR 0 11
24689: PPUSH
24690: LD_VAR 0 10
24694: PPUSH
24695: CALL_OW 296
24699: PUSH
24700: LD_INT 13
24702: GREATER
24703: AND
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_VAR 0 10
24714: PPUSH
24715: CALL_OW 296
24719: PUSH
24720: LD_INT 12
24722: GREATER
24723: OR
24724: IFFALSE 24728
// exit ;
24726: GO 25081
// missile := [ 1 ] ;
24728: LD_ADDR_VAR 0 14
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24739: LD_VAR 0 9
24743: PPUSH
24744: LD_VAR 0 12
24748: PPUSH
24749: CALL_OW 325
24753: IFFALSE 24782
// missile := Replace ( missile , missile + 1 , 2 ) ;
24755: LD_ADDR_VAR 0 14
24759: PUSH
24760: LD_VAR 0 14
24764: PPUSH
24765: LD_VAR 0 14
24769: PUSH
24770: LD_INT 1
24772: PLUS
24773: PPUSH
24774: LD_INT 2
24776: PPUSH
24777: CALL_OW 1
24781: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24782: LD_VAR 0 9
24786: PPUSH
24787: LD_VAR 0 13
24791: PPUSH
24792: CALL_OW 325
24796: PUSH
24797: LD_VAR 0 10
24801: PPUSH
24802: CALL_OW 255
24806: PPUSH
24807: LD_VAR 0 13
24811: PPUSH
24812: CALL_OW 325
24816: NOT
24817: AND
24818: IFFALSE 24847
// missile := Replace ( missile , missile + 1 , 3 ) ;
24820: LD_ADDR_VAR 0 14
24824: PUSH
24825: LD_VAR 0 14
24829: PPUSH
24830: LD_VAR 0 14
24834: PUSH
24835: LD_INT 1
24837: PLUS
24838: PPUSH
24839: LD_INT 3
24841: PPUSH
24842: CALL_OW 1
24846: ST_TO_ADDR
// if missile < 2 then
24847: LD_VAR 0 14
24851: PUSH
24852: LD_INT 2
24854: LESS
24855: IFFALSE 24859
// exit ;
24857: GO 25081
// x := GetX ( enemy ) ;
24859: LD_ADDR_VAR 0 4
24863: PUSH
24864: LD_VAR 0 10
24868: PPUSH
24869: CALL_OW 250
24873: ST_TO_ADDR
// y := GetY ( enemy ) ;
24874: LD_ADDR_VAR 0 5
24878: PUSH
24879: LD_VAR 0 10
24883: PPUSH
24884: CALL_OW 251
24888: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24889: LD_ADDR_VAR 0 6
24893: PUSH
24894: LD_VAR 0 4
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PPUSH
24903: LD_INT 1
24905: PPUSH
24906: CALL_OW 12
24910: PLUS
24911: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24912: LD_ADDR_VAR 0 7
24916: PUSH
24917: LD_VAR 0 5
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PPUSH
24926: LD_INT 1
24928: PPUSH
24929: CALL_OW 12
24933: PLUS
24934: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24935: LD_VAR 0 6
24939: PPUSH
24940: LD_VAR 0 7
24944: PPUSH
24945: CALL_OW 488
24949: NOT
24950: IFFALSE 24972
// begin _x := x ;
24952: LD_ADDR_VAR 0 6
24956: PUSH
24957: LD_VAR 0 4
24961: ST_TO_ADDR
// _y := y ;
24962: LD_ADDR_VAR 0 7
24966: PUSH
24967: LD_VAR 0 5
24971: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 1
24979: PPUSH
24980: LD_VAR 0 14
24984: PPUSH
24985: CALL_OW 12
24989: ST_TO_ADDR
// case i of 1 :
24990: LD_VAR 0 3
24994: PUSH
24995: LD_INT 1
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25020
25003: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25004: LD_VAR 0 1
25008: PPUSH
25009: LD_VAR 0 10
25013: PPUSH
25014: CALL_OW 115
25018: GO 25081
25020: LD_INT 2
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25050
25028: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_VAR 0 6
25038: PPUSH
25039: LD_VAR 0 7
25043: PPUSH
25044: CALL_OW 153
25048: GO 25081
25050: LD_INT 3
25052: DOUBLE
25053: EQUAL
25054: IFTRUE 25058
25056: GO 25080
25058: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25059: LD_VAR 0 1
25063: PPUSH
25064: LD_VAR 0 6
25068: PPUSH
25069: LD_VAR 0 7
25073: PPUSH
25074: CALL_OW 154
25078: GO 25081
25080: POP
// end ;
25081: LD_VAR 0 2
25085: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25086: LD_INT 0
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
// if not unit or not building then
25094: LD_VAR 0 1
25098: NOT
25099: PUSH
25100: LD_VAR 0 2
25104: NOT
25105: OR
25106: IFFALSE 25110
// exit ;
25108: GO 25268
// x := GetX ( building ) ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_VAR 0 2
25119: PPUSH
25120: CALL_OW 250
25124: ST_TO_ADDR
// y := GetY ( building ) ;
25125: LD_ADDR_VAR 0 6
25129: PUSH
25130: LD_VAR 0 2
25134: PPUSH
25135: CALL_OW 251
25139: ST_TO_ADDR
// for i = 0 to 5 do
25140: LD_ADDR_VAR 0 4
25144: PUSH
25145: DOUBLE
25146: LD_INT 0
25148: DEC
25149: ST_TO_ADDR
25150: LD_INT 5
25152: PUSH
25153: FOR_TO
25154: IFFALSE 25266
// begin _x := ShiftX ( x , i , 3 ) ;
25156: LD_ADDR_VAR 0 7
25160: PUSH
25161: LD_VAR 0 5
25165: PPUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: LD_INT 3
25173: PPUSH
25174: CALL_OW 272
25178: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25179: LD_ADDR_VAR 0 8
25183: PUSH
25184: LD_VAR 0 6
25188: PPUSH
25189: LD_VAR 0 4
25193: PPUSH
25194: LD_INT 3
25196: PPUSH
25197: CALL_OW 273
25201: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25202: LD_VAR 0 7
25206: PPUSH
25207: LD_VAR 0 8
25211: PPUSH
25212: CALL_OW 488
25216: NOT
25217: IFFALSE 25221
// continue ;
25219: GO 25153
// if HexInfo ( _x , _y ) = 0 then
25221: LD_VAR 0 7
25225: PPUSH
25226: LD_VAR 0 8
25230: PPUSH
25231: CALL_OW 428
25235: PUSH
25236: LD_INT 0
25238: EQUAL
25239: IFFALSE 25264
// begin ComMoveXY ( unit , _x , _y ) ;
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_VAR 0 7
25250: PPUSH
25251: LD_VAR 0 8
25255: PPUSH
25256: CALL_OW 111
// exit ;
25260: POP
25261: POP
25262: GO 25268
// end ; end ;
25264: GO 25153
25266: POP
25267: POP
// end ;
25268: LD_VAR 0 3
25272: RET
// export function ScanBase ( side , base_area ) ; begin
25273: LD_INT 0
25275: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_VAR 0 2
25285: PPUSH
25286: LD_INT 81
25288: PUSH
25289: LD_VAR 0 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 70
25302: ST_TO_ADDR
// end ;
25303: LD_VAR 0 3
25307: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25308: LD_INT 0
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
// result := false ;
25314: LD_ADDR_VAR 0 2
25318: PUSH
25319: LD_INT 0
25321: ST_TO_ADDR
// side := GetSide ( unit ) ;
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_VAR 0 1
25331: PPUSH
25332: CALL_OW 255
25336: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25337: LD_ADDR_VAR 0 4
25341: PUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 248
25351: ST_TO_ADDR
// case nat of 1 :
25352: LD_VAR 0 4
25356: PUSH
25357: LD_INT 1
25359: DOUBLE
25360: EQUAL
25361: IFTRUE 25365
25363: GO 25376
25365: POP
// tech := tech_lassight ; 2 :
25366: LD_ADDR_VAR 0 5
25370: PUSH
25371: LD_INT 12
25373: ST_TO_ADDR
25374: GO 25415
25376: LD_INT 2
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25395
25384: POP
// tech := tech_mortar ; 3 :
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_INT 41
25392: ST_TO_ADDR
25393: GO 25415
25395: LD_INT 3
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25414
25403: POP
// tech := tech_bazooka ; end ;
25404: LD_ADDR_VAR 0 5
25408: PUSH
25409: LD_INT 44
25411: ST_TO_ADDR
25412: GO 25415
25414: POP
// if Researched ( side , tech ) then
25415: LD_VAR 0 3
25419: PPUSH
25420: LD_VAR 0 5
25424: PPUSH
25425: CALL_OW 325
25429: IFFALSE 25456
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25431: LD_ADDR_VAR 0 2
25435: PUSH
25436: LD_INT 5
25438: PUSH
25439: LD_INT 8
25441: PUSH
25442: LD_INT 9
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: PUSH
25450: LD_VAR 0 4
25454: ARRAY
25455: ST_TO_ADDR
// end ;
25456: LD_VAR 0 2
25460: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
25465: PPUSH
// if not mines then
25466: LD_VAR 0 2
25470: NOT
25471: IFFALSE 25475
// exit ;
25473: GO 25619
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25475: LD_ADDR_VAR 0 5
25479: PUSH
25480: LD_INT 81
25482: PUSH
25483: LD_VAR 0 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 3
25494: PUSH
25495: LD_INT 21
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: ST_TO_ADDR
// for i in mines do
25518: LD_ADDR_VAR 0 4
25522: PUSH
25523: LD_VAR 0 2
25527: PUSH
25528: FOR_IN
25529: IFFALSE 25617
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25531: LD_VAR 0 4
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: LD_VAR 0 4
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: PPUSH
25549: CALL_OW 458
25553: NOT
25554: IFFALSE 25558
// continue ;
25556: GO 25528
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25558: LD_VAR 0 4
25562: PUSH
25563: LD_INT 1
25565: ARRAY
25566: PPUSH
25567: LD_VAR 0 4
25571: PUSH
25572: LD_INT 2
25574: ARRAY
25575: PPUSH
25576: CALL_OW 428
25580: PUSH
25581: LD_VAR 0 5
25585: IN
25586: IFFALSE 25615
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25588: LD_VAR 0 4
25592: PUSH
25593: LD_INT 1
25595: ARRAY
25596: PPUSH
25597: LD_VAR 0 4
25601: PUSH
25602: LD_INT 2
25604: ARRAY
25605: PPUSH
25606: LD_VAR 0 1
25610: PPUSH
25611: CALL_OW 456
// end ;
25615: GO 25528
25617: POP
25618: POP
// end ;
25619: LD_VAR 0 3
25623: RET
// export function Count ( array ) ; var i ; begin
25624: LD_INT 0
25626: PPUSH
25627: PPUSH
// result := 0 ;
25628: LD_ADDR_VAR 0 2
25632: PUSH
25633: LD_INT 0
25635: ST_TO_ADDR
// for i in array do
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_VAR 0 1
25645: PUSH
25646: FOR_IN
25647: IFFALSE 25671
// if i then
25649: LD_VAR 0 3
25653: IFFALSE 25669
// result := result + 1 ;
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_VAR 0 2
25664: PUSH
25665: LD_INT 1
25667: PLUS
25668: ST_TO_ADDR
25669: GO 25646
25671: POP
25672: POP
// end ;
25673: LD_VAR 0 2
25677: RET
// export function IsEmpty ( building ) ; begin
25678: LD_INT 0
25680: PPUSH
// if not building then
25681: LD_VAR 0 1
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 25733
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25690: LD_ADDR_VAR 0 2
25694: PUSH
25695: LD_VAR 0 1
25699: PUSH
25700: LD_INT 22
25702: PUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 255
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 58
25719: PUSH
25720: EMPTY
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PPUSH
25727: CALL_OW 69
25731: IN
25732: ST_TO_ADDR
// end ;
25733: LD_VAR 0 2
25737: RET
// export function IsNotFull ( building ) ; var places ; begin
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
// if not building then
25742: LD_VAR 0 1
25746: NOT
25747: IFFALSE 25751
// exit ;
25749: GO 25922
// result := false ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_INT 0
25758: ST_TO_ADDR
// places := 0 ;
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 266
25776: PUSH
25777: LD_INT 0
25779: DOUBLE
25780: EQUAL
25781: IFTRUE 25839
25783: LD_INT 1
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25839
25789: LD_INT 6
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25839
25795: LD_INT 7
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25839
25801: LD_INT 8
25803: DOUBLE
25804: EQUAL
25805: IFTRUE 25839
25807: LD_INT 4
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25839
25813: LD_INT 5
25815: DOUBLE
25816: EQUAL
25817: IFTRUE 25839
25819: LD_INT 2
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25839
25825: LD_INT 3
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25839
25831: LD_INT 35
25833: DOUBLE
25834: EQUAL
25835: IFTRUE 25839
25837: GO 25850
25839: POP
// places := 6 ; b_bunker , b_breastwork :
25840: LD_ADDR_VAR 0 3
25844: PUSH
25845: LD_INT 6
25847: ST_TO_ADDR
25848: GO 25895
25850: LD_INT 32
25852: DOUBLE
25853: EQUAL
25854: IFTRUE 25864
25856: LD_INT 31
25858: DOUBLE
25859: EQUAL
25860: IFTRUE 25864
25862: GO 25875
25864: POP
// places := 1 ; b_control_tower :
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_INT 1
25872: ST_TO_ADDR
25873: GO 25895
25875: LD_INT 36
25877: DOUBLE
25878: EQUAL
25879: IFTRUE 25883
25881: GO 25894
25883: POP
// places := 3 ; end ;
25884: LD_ADDR_VAR 0 3
25888: PUSH
25889: LD_INT 3
25891: ST_TO_ADDR
25892: GO 25895
25894: POP
// if places then
25895: LD_VAR 0 3
25899: IFFALSE 25922
// result := UnitsInside ( building ) < places ;
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: CALL_OW 313
25915: PUSH
25916: LD_VAR 0 3
25920: LESS
25921: ST_TO_ADDR
// end ;
25922: LD_VAR 0 2
25926: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
// tmp := [ ] ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: EMPTY
25939: ST_TO_ADDR
// list := [ ] ;
25940: LD_ADDR_VAR 0 5
25944: PUSH
25945: EMPTY
25946: ST_TO_ADDR
// for i = 16 to 25 do
25947: LD_ADDR_VAR 0 4
25951: PUSH
25952: DOUBLE
25953: LD_INT 16
25955: DEC
25956: ST_TO_ADDR
25957: LD_INT 25
25959: PUSH
25960: FOR_TO
25961: IFFALSE 26034
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25963: LD_ADDR_VAR 0 3
25967: PUSH
25968: LD_VAR 0 3
25972: PUSH
25973: LD_INT 22
25975: PUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 255
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 91
25992: PUSH
25993: LD_VAR 0 1
25997: PUSH
25998: LD_INT 6
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 30
26008: PUSH
26009: LD_VAR 0 4
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: PUSH
26023: EMPTY
26024: LIST
26025: PPUSH
26026: CALL_OW 69
26030: ADD
26031: ST_TO_ADDR
26032: GO 25960
26034: POP
26035: POP
// for i = 1 to tmp do
26036: LD_ADDR_VAR 0 4
26040: PUSH
26041: DOUBLE
26042: LD_INT 1
26044: DEC
26045: ST_TO_ADDR
26046: LD_VAR 0 3
26050: PUSH
26051: FOR_TO
26052: IFFALSE 26140
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: LD_VAR 0 5
26063: PUSH
26064: LD_VAR 0 3
26068: PUSH
26069: LD_VAR 0 4
26073: ARRAY
26074: PPUSH
26075: CALL_OW 266
26079: PUSH
26080: LD_VAR 0 3
26084: PUSH
26085: LD_VAR 0 4
26089: ARRAY
26090: PPUSH
26091: CALL_OW 250
26095: PUSH
26096: LD_VAR 0 3
26100: PUSH
26101: LD_VAR 0 4
26105: ARRAY
26106: PPUSH
26107: CALL_OW 251
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: LD_VAR 0 4
26121: ARRAY
26122: PPUSH
26123: CALL_OW 254
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: ADD
26137: ST_TO_ADDR
26138: GO 26051
26140: POP
26141: POP
// result := list ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_VAR 0 5
26151: ST_TO_ADDR
// end ;
26152: LD_VAR 0 2
26156: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26157: LD_INT 0
26159: PPUSH
26160: PPUSH
26161: PPUSH
26162: PPUSH
26163: PPUSH
26164: PPUSH
26165: PPUSH
// if not factory then
26166: LD_VAR 0 1
26170: NOT
26171: IFFALSE 26175
// exit ;
26173: GO 26768
// if control = control_apeman then
26175: LD_VAR 0 4
26179: PUSH
26180: LD_INT 5
26182: EQUAL
26183: IFFALSE 26292
// begin tmp := UnitsInside ( factory ) ;
26185: LD_ADDR_VAR 0 8
26189: PUSH
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 313
26199: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26200: LD_VAR 0 8
26204: PPUSH
26205: LD_INT 25
26207: PUSH
26208: LD_INT 12
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PPUSH
26215: CALL_OW 72
26219: NOT
26220: IFFALSE 26230
// control := control_manual ;
26222: LD_ADDR_VAR 0 4
26226: PUSH
26227: LD_INT 1
26229: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26230: LD_ADDR_VAR 0 8
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL 25927 0 1
26244: ST_TO_ADDR
// if tmp then
26245: LD_VAR 0 8
26249: IFFALSE 26292
// begin for i in tmp do
26251: LD_ADDR_VAR 0 7
26255: PUSH
26256: LD_VAR 0 8
26260: PUSH
26261: FOR_IN
26262: IFFALSE 26290
// if i [ 1 ] = b_ext_radio then
26264: LD_VAR 0 7
26268: PUSH
26269: LD_INT 1
26271: ARRAY
26272: PUSH
26273: LD_INT 22
26275: EQUAL
26276: IFFALSE 26288
// begin control := control_remote ;
26278: LD_ADDR_VAR 0 4
26282: PUSH
26283: LD_INT 2
26285: ST_TO_ADDR
// break ;
26286: GO 26290
// end ;
26288: GO 26261
26290: POP
26291: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26292: LD_VAR 0 1
26296: PPUSH
26297: LD_VAR 0 2
26301: PPUSH
26302: LD_VAR 0 3
26306: PPUSH
26307: LD_VAR 0 4
26311: PPUSH
26312: LD_VAR 0 5
26316: PPUSH
26317: CALL_OW 448
26321: IFFALSE 26356
// begin result := [ chassis , engine , control , weapon ] ;
26323: LD_ADDR_VAR 0 6
26327: PUSH
26328: LD_VAR 0 2
26332: PUSH
26333: LD_VAR 0 3
26337: PUSH
26338: LD_VAR 0 4
26342: PUSH
26343: LD_VAR 0 5
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// exit ;
26354: GO 26768
// end ; _chassis := AvailableChassisList ( factory ) ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 475
26370: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26371: LD_ADDR_VAR 0 11
26375: PUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 476
26385: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26386: LD_ADDR_VAR 0 12
26390: PUSH
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 477
26400: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26401: LD_ADDR_VAR 0 10
26405: PUSH
26406: LD_VAR 0 1
26410: PPUSH
26411: CALL_OW 478
26415: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26416: LD_VAR 0 9
26420: NOT
26421: PUSH
26422: LD_VAR 0 11
26426: NOT
26427: OR
26428: PUSH
26429: LD_VAR 0 12
26433: NOT
26434: OR
26435: PUSH
26436: LD_VAR 0 10
26440: NOT
26441: OR
26442: IFFALSE 26477
// begin result := [ chassis , engine , control , weapon ] ;
26444: LD_ADDR_VAR 0 6
26448: PUSH
26449: LD_VAR 0 2
26453: PUSH
26454: LD_VAR 0 3
26458: PUSH
26459: LD_VAR 0 4
26463: PUSH
26464: LD_VAR 0 5
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
// exit ;
26475: GO 26768
// end ; if not chassis in _chassis then
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 9
26486: IN
26487: NOT
26488: IFFALSE 26514
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26490: LD_ADDR_VAR 0 2
26494: PUSH
26495: LD_VAR 0 9
26499: PUSH
26500: LD_INT 1
26502: PPUSH
26503: LD_VAR 0 9
26507: PPUSH
26508: CALL_OW 12
26512: ARRAY
26513: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26514: LD_VAR 0 2
26518: PPUSH
26519: LD_VAR 0 3
26523: PPUSH
26524: CALL 26773 0 2
26528: NOT
26529: IFFALSE 26588
// repeat engine := _engine [ 1 ] ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_VAR 0 11
26540: PUSH
26541: LD_INT 1
26543: ARRAY
26544: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26545: LD_ADDR_VAR 0 11
26549: PUSH
26550: LD_VAR 0 11
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: CALL_OW 3
26562: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26563: LD_VAR 0 2
26567: PPUSH
26568: LD_VAR 0 3
26572: PPUSH
26573: CALL 26773 0 2
26577: PUSH
26578: LD_VAR 0 11
26582: PUSH
26583: EMPTY
26584: EQUAL
26585: OR
26586: IFFALSE 26531
// if not control in _control then
26588: LD_VAR 0 4
26592: PUSH
26593: LD_VAR 0 12
26597: IN
26598: NOT
26599: IFFALSE 26625
// control := _control [ rand ( 1 , _control ) ] ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_VAR 0 12
26610: PUSH
26611: LD_INT 1
26613: PPUSH
26614: LD_VAR 0 12
26618: PPUSH
26619: CALL_OW 12
26623: ARRAY
26624: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26625: LD_VAR 0 2
26629: PPUSH
26630: LD_VAR 0 5
26634: PPUSH
26635: CALL 26993 0 2
26639: NOT
26640: IFFALSE 26699
// repeat weapon := _weapon [ 1 ] ;
26642: LD_ADDR_VAR 0 5
26646: PUSH
26647: LD_VAR 0 10
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26656: LD_ADDR_VAR 0 10
26660: PUSH
26661: LD_VAR 0 10
26665: PPUSH
26666: LD_INT 1
26668: PPUSH
26669: CALL_OW 3
26673: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26674: LD_VAR 0 2
26678: PPUSH
26679: LD_VAR 0 5
26683: PPUSH
26684: CALL 26993 0 2
26688: PUSH
26689: LD_VAR 0 10
26693: PUSH
26694: EMPTY
26695: EQUAL
26696: OR
26697: IFFALSE 26642
// result := [ ] ;
26699: LD_ADDR_VAR 0 6
26703: PUSH
26704: EMPTY
26705: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26706: LD_VAR 0 1
26710: PPUSH
26711: LD_VAR 0 2
26715: PPUSH
26716: LD_VAR 0 3
26720: PPUSH
26721: LD_VAR 0 4
26725: PPUSH
26726: LD_VAR 0 5
26730: PPUSH
26731: CALL_OW 448
26735: IFFALSE 26768
// result := [ chassis , engine , control , weapon ] ;
26737: LD_ADDR_VAR 0 6
26741: PUSH
26742: LD_VAR 0 2
26746: PUSH
26747: LD_VAR 0 3
26751: PUSH
26752: LD_VAR 0 4
26756: PUSH
26757: LD_VAR 0 5
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: ST_TO_ADDR
// end ;
26768: LD_VAR 0 6
26772: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26773: LD_INT 0
26775: PPUSH
// if not chassis or not engine then
26776: LD_VAR 0 1
26780: NOT
26781: PUSH
26782: LD_VAR 0 2
26786: NOT
26787: OR
26788: IFFALSE 26792
// exit ;
26790: GO 26988
// case engine of engine_solar :
26792: LD_VAR 0 2
26796: PUSH
26797: LD_INT 2
26799: DOUBLE
26800: EQUAL
26801: IFTRUE 26805
26803: GO 26843
26805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26806: LD_ADDR_VAR 0 3
26810: PUSH
26811: LD_INT 11
26813: PUSH
26814: LD_INT 12
26816: PUSH
26817: LD_INT 13
26819: PUSH
26820: LD_INT 14
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 3
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: ST_TO_ADDR
26841: GO 26972
26843: LD_INT 1
26845: DOUBLE
26846: EQUAL
26847: IFTRUE 26851
26849: GO 26913
26851: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26852: LD_ADDR_VAR 0 3
26856: PUSH
26857: LD_INT 11
26859: PUSH
26860: LD_INT 12
26862: PUSH
26863: LD_INT 13
26865: PUSH
26866: LD_INT 14
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: LD_INT 4
26880: PUSH
26881: LD_INT 5
26883: PUSH
26884: LD_INT 21
26886: PUSH
26887: LD_INT 23
26889: PUSH
26890: LD_INT 22
26892: PUSH
26893: LD_INT 24
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: ST_TO_ADDR
26911: GO 26972
26913: LD_INT 3
26915: DOUBLE
26916: EQUAL
26917: IFTRUE 26921
26919: GO 26971
26921: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26922: LD_ADDR_VAR 0 3
26926: PUSH
26927: LD_INT 13
26929: PUSH
26930: LD_INT 14
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: LD_INT 4
26941: PUSH
26942: LD_INT 5
26944: PUSH
26945: LD_INT 21
26947: PUSH
26948: LD_INT 22
26950: PUSH
26951: LD_INT 23
26953: PUSH
26954: LD_INT 24
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
26969: GO 26972
26971: POP
// result := ( chassis in result ) ;
26972: LD_ADDR_VAR 0 3
26976: PUSH
26977: LD_VAR 0 1
26981: PUSH
26982: LD_VAR 0 3
26986: IN
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 3
26992: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26993: LD_INT 0
26995: PPUSH
// if not chassis or not weapon then
26996: LD_VAR 0 1
27000: NOT
27001: PUSH
27002: LD_VAR 0 2
27006: NOT
27007: OR
27008: IFFALSE 27012
// exit ;
27010: GO 28072
// case weapon of us_machine_gun :
27012: LD_VAR 0 2
27016: PUSH
27017: LD_INT 2
27019: DOUBLE
27020: EQUAL
27021: IFTRUE 27025
27023: GO 27055
27025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27026: LD_ADDR_VAR 0 3
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: LD_INT 3
27039: PUSH
27040: LD_INT 4
27042: PUSH
27043: LD_INT 5
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: ST_TO_ADDR
27053: GO 28056
27055: LD_INT 3
27057: DOUBLE
27058: EQUAL
27059: IFTRUE 27063
27061: GO 27093
27063: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27064: LD_ADDR_VAR 0 3
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: LD_INT 4
27080: PUSH
27081: LD_INT 5
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
27091: GO 28056
27093: LD_INT 11
27095: DOUBLE
27096: EQUAL
27097: IFTRUE 27101
27099: GO 27131
27101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27102: LD_ADDR_VAR 0 3
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: LD_INT 3
27115: PUSH
27116: LD_INT 4
27118: PUSH
27119: LD_INT 5
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: ST_TO_ADDR
27129: GO 28056
27131: LD_INT 4
27133: DOUBLE
27134: EQUAL
27135: IFTRUE 27139
27137: GO 27165
27139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27140: LD_ADDR_VAR 0 3
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 4
27153: PUSH
27154: LD_INT 5
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: ST_TO_ADDR
27163: GO 28056
27165: LD_INT 5
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27173
27171: GO 27199
27173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27174: LD_ADDR_VAR 0 3
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: LD_INT 4
27187: PUSH
27188: LD_INT 5
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: ST_TO_ADDR
27197: GO 28056
27199: LD_INT 9
27201: DOUBLE
27202: EQUAL
27203: IFTRUE 27207
27205: GO 27233
27207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27208: LD_ADDR_VAR 0 3
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 4
27221: PUSH
27222: LD_INT 5
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: ST_TO_ADDR
27231: GO 28056
27233: LD_INT 7
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27267
27241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: LD_INT 4
27255: PUSH
27256: LD_INT 5
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: ST_TO_ADDR
27265: GO 28056
27267: LD_INT 12
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27301
27275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27276: LD_ADDR_VAR 0 3
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: LD_INT 4
27289: PUSH
27290: LD_INT 5
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: ST_TO_ADDR
27299: GO 28056
27301: LD_INT 13
27303: DOUBLE
27304: EQUAL
27305: IFTRUE 27309
27307: GO 27335
27309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: LD_INT 4
27323: PUSH
27324: LD_INT 5
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: ST_TO_ADDR
27333: GO 28056
27335: LD_INT 14
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27361
27343: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_INT 4
27351: PUSH
27352: LD_INT 5
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: ST_TO_ADDR
27359: GO 28056
27361: LD_INT 6
27363: DOUBLE
27364: EQUAL
27365: IFTRUE 27369
27367: GO 27387
27369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_INT 4
27377: PUSH
27378: LD_INT 5
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: ST_TO_ADDR
27385: GO 28056
27387: LD_INT 10
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 27413
27395: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27396: LD_ADDR_VAR 0 3
27400: PUSH
27401: LD_INT 4
27403: PUSH
27404: LD_INT 5
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: ST_TO_ADDR
27411: GO 28056
27413: LD_INT 22
27415: DOUBLE
27416: EQUAL
27417: IFTRUE 27421
27419: GO 27447
27421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: LD_INT 11
27429: PUSH
27430: LD_INT 12
27432: PUSH
27433: LD_INT 13
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: ST_TO_ADDR
27445: GO 28056
27447: LD_INT 23
27449: DOUBLE
27450: EQUAL
27451: IFTRUE 27455
27453: GO 27481
27455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_INT 11
27463: PUSH
27464: LD_INT 12
27466: PUSH
27467: LD_INT 13
27469: PUSH
27470: LD_INT 14
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 28056
27481: LD_INT 24
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27515
27489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27490: LD_ADDR_VAR 0 3
27494: PUSH
27495: LD_INT 11
27497: PUSH
27498: LD_INT 12
27500: PUSH
27501: LD_INT 13
27503: PUSH
27504: LD_INT 14
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 28056
27515: LD_INT 30
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27549
27523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 11
27531: PUSH
27532: LD_INT 12
27534: PUSH
27535: LD_INT 13
27537: PUSH
27538: LD_INT 14
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
27547: GO 28056
27549: LD_INT 25
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27575
27557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 13
27565: PUSH
27566: LD_INT 14
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: ST_TO_ADDR
27573: GO 28056
27575: LD_INT 27
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27601
27583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_INT 13
27591: PUSH
27592: LD_INT 14
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: ST_TO_ADDR
27599: GO 28056
27601: LD_INT 92
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27635
27609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_INT 11
27617: PUSH
27618: LD_INT 12
27620: PUSH
27621: LD_INT 13
27623: PUSH
27624: LD_INT 14
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
27633: GO 28056
27635: LD_INT 28
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27661
27643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27644: LD_ADDR_VAR 0 3
27648: PUSH
27649: LD_INT 13
27651: PUSH
27652: LD_INT 14
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: ST_TO_ADDR
27659: GO 28056
27661: LD_INT 29
27663: DOUBLE
27664: EQUAL
27665: IFTRUE 27669
27667: GO 27687
27669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27670: LD_ADDR_VAR 0 3
27674: PUSH
27675: LD_INT 13
27677: PUSH
27678: LD_INT 14
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 28056
27687: LD_INT 31
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27713
27695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_INT 13
27703: PUSH
27704: LD_INT 14
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: ST_TO_ADDR
27711: GO 28056
27713: LD_INT 26
27715: DOUBLE
27716: EQUAL
27717: IFTRUE 27721
27719: GO 27739
27721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27722: LD_ADDR_VAR 0 3
27726: PUSH
27727: LD_INT 13
27729: PUSH
27730: LD_INT 14
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: ST_TO_ADDR
27737: GO 28056
27739: LD_INT 42
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27773
27747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 21
27755: PUSH
27756: LD_INT 22
27758: PUSH
27759: LD_INT 23
27761: PUSH
27762: LD_INT 24
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 28056
27773: LD_INT 43
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27807
27781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: LD_INT 21
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_INT 23
27795: PUSH
27796: LD_INT 24
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 28056
27807: LD_INT 44
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27841
27815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_INT 21
27823: PUSH
27824: LD_INT 22
27826: PUSH
27827: LD_INT 23
27829: PUSH
27830: LD_INT 24
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: ST_TO_ADDR
27839: GO 28056
27841: LD_INT 45
27843: DOUBLE
27844: EQUAL
27845: IFTRUE 27849
27847: GO 27875
27849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27850: LD_ADDR_VAR 0 3
27854: PUSH
27855: LD_INT 21
27857: PUSH
27858: LD_INT 22
27860: PUSH
27861: LD_INT 23
27863: PUSH
27864: LD_INT 24
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
27873: GO 28056
27875: LD_INT 49
27877: DOUBLE
27878: EQUAL
27879: IFTRUE 27883
27881: GO 27909
27883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_INT 21
27891: PUSH
27892: LD_INT 22
27894: PUSH
27895: LD_INT 23
27897: PUSH
27898: LD_INT 24
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: ST_TO_ADDR
27907: GO 28056
27909: LD_INT 51
27911: DOUBLE
27912: EQUAL
27913: IFTRUE 27917
27915: GO 27943
27917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_INT 21
27925: PUSH
27926: LD_INT 22
27928: PUSH
27929: LD_INT 23
27931: PUSH
27932: LD_INT 24
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: ST_TO_ADDR
27941: GO 28056
27943: LD_INT 52
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27977
27951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_INT 21
27959: PUSH
27960: LD_INT 22
27962: PUSH
27963: LD_INT 23
27965: PUSH
27966: LD_INT 24
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: ST_TO_ADDR
27975: GO 28056
27977: LD_INT 53
27979: DOUBLE
27980: EQUAL
27981: IFTRUE 27985
27983: GO 28003
27985: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27986: LD_ADDR_VAR 0 3
27990: PUSH
27991: LD_INT 23
27993: PUSH
27994: LD_INT 24
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: ST_TO_ADDR
28001: GO 28056
28003: LD_INT 46
28005: DOUBLE
28006: EQUAL
28007: IFTRUE 28011
28009: GO 28029
28011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: LD_INT 23
28019: PUSH
28020: LD_INT 24
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: ST_TO_ADDR
28027: GO 28056
28029: LD_INT 47
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28055
28037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_INT 23
28045: PUSH
28046: LD_INT 24
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: ST_TO_ADDR
28053: GO 28056
28055: POP
// result := ( chassis in result ) ;
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_VAR 0 1
28065: PUSH
28066: LD_VAR 0 3
28070: IN
28071: ST_TO_ADDR
// end ;
28072: LD_VAR 0 3
28076: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28077: LD_INT 0
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
// result := array ;
28086: LD_ADDR_VAR 0 5
28090: PUSH
28091: LD_VAR 0 1
28095: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28096: LD_VAR 0 1
28100: NOT
28101: PUSH
28102: LD_VAR 0 2
28106: NOT
28107: OR
28108: PUSH
28109: LD_VAR 0 3
28113: NOT
28114: OR
28115: PUSH
28116: LD_VAR 0 2
28120: PUSH
28121: LD_VAR 0 1
28125: GREATER
28126: OR
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 1
28137: GREATER
28138: OR
28139: IFFALSE 28143
// exit ;
28141: GO 28439
// if direction then
28143: LD_VAR 0 4
28147: IFFALSE 28211
// begin d := 1 ;
28149: LD_ADDR_VAR 0 9
28153: PUSH
28154: LD_INT 1
28156: ST_TO_ADDR
// if i_from > i_to then
28157: LD_VAR 0 2
28161: PUSH
28162: LD_VAR 0 3
28166: GREATER
28167: IFFALSE 28193
// length := ( array - i_from ) + i_to else
28169: LD_ADDR_VAR 0 11
28173: PUSH
28174: LD_VAR 0 1
28178: PUSH
28179: LD_VAR 0 2
28183: MINUS
28184: PUSH
28185: LD_VAR 0 3
28189: PLUS
28190: ST_TO_ADDR
28191: GO 28209
// length := i_to - i_from ;
28193: LD_ADDR_VAR 0 11
28197: PUSH
28198: LD_VAR 0 3
28202: PUSH
28203: LD_VAR 0 2
28207: MINUS
28208: ST_TO_ADDR
// end else
28209: GO 28272
// begin d := - 1 ;
28211: LD_ADDR_VAR 0 9
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: ST_TO_ADDR
// if i_from > i_to then
28220: LD_VAR 0 2
28224: PUSH
28225: LD_VAR 0 3
28229: GREATER
28230: IFFALSE 28250
// length := i_from - i_to else
28232: LD_ADDR_VAR 0 11
28236: PUSH
28237: LD_VAR 0 2
28241: PUSH
28242: LD_VAR 0 3
28246: MINUS
28247: ST_TO_ADDR
28248: GO 28272
// length := ( array - i_to ) + i_from ;
28250: LD_ADDR_VAR 0 11
28254: PUSH
28255: LD_VAR 0 1
28259: PUSH
28260: LD_VAR 0 3
28264: MINUS
28265: PUSH
28266: LD_VAR 0 2
28270: PLUS
28271: ST_TO_ADDR
// end ; if not length then
28272: LD_VAR 0 11
28276: NOT
28277: IFFALSE 28281
// exit ;
28279: GO 28439
// tmp := array ;
28281: LD_ADDR_VAR 0 10
28285: PUSH
28286: LD_VAR 0 1
28290: ST_TO_ADDR
// for i = 1 to length do
28291: LD_ADDR_VAR 0 6
28295: PUSH
28296: DOUBLE
28297: LD_INT 1
28299: DEC
28300: ST_TO_ADDR
28301: LD_VAR 0 11
28305: PUSH
28306: FOR_TO
28307: IFFALSE 28427
// begin for j = 1 to array do
28309: LD_ADDR_VAR 0 7
28313: PUSH
28314: DOUBLE
28315: LD_INT 1
28317: DEC
28318: ST_TO_ADDR
28319: LD_VAR 0 1
28323: PUSH
28324: FOR_TO
28325: IFFALSE 28413
// begin k := j + d ;
28327: LD_ADDR_VAR 0 8
28331: PUSH
28332: LD_VAR 0 7
28336: PUSH
28337: LD_VAR 0 9
28341: PLUS
28342: ST_TO_ADDR
// if k > array then
28343: LD_VAR 0 8
28347: PUSH
28348: LD_VAR 0 1
28352: GREATER
28353: IFFALSE 28363
// k := 1 ;
28355: LD_ADDR_VAR 0 8
28359: PUSH
28360: LD_INT 1
28362: ST_TO_ADDR
// if not k then
28363: LD_VAR 0 8
28367: NOT
28368: IFFALSE 28380
// k := array ;
28370: LD_ADDR_VAR 0 8
28374: PUSH
28375: LD_VAR 0 1
28379: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28380: LD_ADDR_VAR 0 10
28384: PUSH
28385: LD_VAR 0 10
28389: PPUSH
28390: LD_VAR 0 8
28394: PPUSH
28395: LD_VAR 0 1
28399: PUSH
28400: LD_VAR 0 7
28404: ARRAY
28405: PPUSH
28406: CALL_OW 1
28410: ST_TO_ADDR
// end ;
28411: GO 28324
28413: POP
28414: POP
// array := tmp ;
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 10
28424: ST_TO_ADDR
// end ;
28425: GO 28306
28427: POP
28428: POP
// result := array ;
28429: LD_ADDR_VAR 0 5
28433: PUSH
28434: LD_VAR 0 1
28438: ST_TO_ADDR
// end ;
28439: LD_VAR 0 5
28443: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28444: LD_INT 0
28446: PPUSH
28447: PPUSH
// result := 0 ;
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_INT 0
28455: ST_TO_ADDR
// if not array or not value in array then
28456: LD_VAR 0 1
28460: NOT
28461: PUSH
28462: LD_VAR 0 2
28466: PUSH
28467: LD_VAR 0 1
28471: IN
28472: NOT
28473: OR
28474: IFFALSE 28478
// exit ;
28476: GO 28532
// for i = 1 to array do
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: DOUBLE
28484: LD_INT 1
28486: DEC
28487: ST_TO_ADDR
28488: LD_VAR 0 1
28492: PUSH
28493: FOR_TO
28494: IFFALSE 28530
// if value = array [ i ] then
28496: LD_VAR 0 2
28500: PUSH
28501: LD_VAR 0 1
28505: PUSH
28506: LD_VAR 0 4
28510: ARRAY
28511: EQUAL
28512: IFFALSE 28528
// begin result := i ;
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_VAR 0 4
28523: ST_TO_ADDR
// exit ;
28524: POP
28525: POP
28526: GO 28532
// end ;
28528: GO 28493
28530: POP
28531: POP
// end ;
28532: LD_VAR 0 3
28536: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28537: LD_INT 0
28539: PPUSH
// vc_chassis := chassis ;
28540: LD_ADDR_OWVAR 37
28544: PUSH
28545: LD_VAR 0 1
28549: ST_TO_ADDR
// vc_engine := engine ;
28550: LD_ADDR_OWVAR 39
28554: PUSH
28555: LD_VAR 0 2
28559: ST_TO_ADDR
// vc_control := control ;
28560: LD_ADDR_OWVAR 38
28564: PUSH
28565: LD_VAR 0 3
28569: ST_TO_ADDR
// vc_weapon := weapon ;
28570: LD_ADDR_OWVAR 40
28574: PUSH
28575: LD_VAR 0 4
28579: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28580: LD_ADDR_OWVAR 41
28584: PUSH
28585: LD_VAR 0 5
28589: ST_TO_ADDR
// end ;
28590: LD_VAR 0 6
28594: RET
// export function WantPlant ( unit ) ; var task ; begin
28595: LD_INT 0
28597: PPUSH
28598: PPUSH
// result := false ;
28599: LD_ADDR_VAR 0 2
28603: PUSH
28604: LD_INT 0
28606: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 437
28621: ST_TO_ADDR
// if task then
28622: LD_VAR 0 3
28626: IFFALSE 28654
// if task [ 1 ] [ 1 ] = p then
28628: LD_VAR 0 3
28632: PUSH
28633: LD_INT 1
28635: ARRAY
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: PUSH
28641: LD_STRING p
28643: EQUAL
28644: IFFALSE 28654
// result := true ;
28646: LD_ADDR_VAR 0 2
28650: PUSH
28651: LD_INT 1
28653: ST_TO_ADDR
// end ;
28654: LD_VAR 0 2
28658: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28659: LD_INT 0
28661: PPUSH
28662: PPUSH
28663: PPUSH
28664: PPUSH
// if pos < 1 then
28665: LD_VAR 0 2
28669: PUSH
28670: LD_INT 1
28672: LESS
28673: IFFALSE 28677
// exit ;
28675: GO 28980
// if pos = 1 then
28677: LD_VAR 0 2
28681: PUSH
28682: LD_INT 1
28684: EQUAL
28685: IFFALSE 28718
// result := Replace ( arr , pos [ 1 ] , value ) else
28687: LD_ADDR_VAR 0 4
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: LD_VAR 0 2
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: LD_VAR 0 3
28710: PPUSH
28711: CALL_OW 1
28715: ST_TO_ADDR
28716: GO 28980
// begin tmp := arr ;
28718: LD_ADDR_VAR 0 6
28722: PUSH
28723: LD_VAR 0 1
28727: ST_TO_ADDR
// s_arr := [ tmp ] ;
28728: LD_ADDR_VAR 0 7
28732: PUSH
28733: LD_VAR 0 6
28737: PUSH
28738: EMPTY
28739: LIST
28740: ST_TO_ADDR
// for i = 1 to pos - 1 do
28741: LD_ADDR_VAR 0 5
28745: PUSH
28746: DOUBLE
28747: LD_INT 1
28749: DEC
28750: ST_TO_ADDR
28751: LD_VAR 0 2
28755: PUSH
28756: LD_INT 1
28758: MINUS
28759: PUSH
28760: FOR_TO
28761: IFFALSE 28806
// begin tmp := tmp [ pos [ i ] ] ;
28763: LD_ADDR_VAR 0 6
28767: PUSH
28768: LD_VAR 0 6
28772: PUSH
28773: LD_VAR 0 2
28777: PUSH
28778: LD_VAR 0 5
28782: ARRAY
28783: ARRAY
28784: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28785: LD_ADDR_VAR 0 7
28789: PUSH
28790: LD_VAR 0 7
28794: PUSH
28795: LD_VAR 0 6
28799: PUSH
28800: EMPTY
28801: LIST
28802: ADD
28803: ST_TO_ADDR
// end ;
28804: GO 28760
28806: POP
28807: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28808: LD_ADDR_VAR 0 6
28812: PUSH
28813: LD_VAR 0 6
28817: PPUSH
28818: LD_VAR 0 2
28822: PUSH
28823: LD_VAR 0 2
28827: ARRAY
28828: PPUSH
28829: LD_VAR 0 3
28833: PPUSH
28834: CALL_OW 1
28838: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28839: LD_ADDR_VAR 0 7
28843: PUSH
28844: LD_VAR 0 7
28848: PPUSH
28849: LD_VAR 0 7
28853: PPUSH
28854: LD_VAR 0 6
28858: PPUSH
28859: CALL_OW 1
28863: ST_TO_ADDR
// for i = s_arr downto 2 do
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: DOUBLE
28870: LD_VAR 0 7
28874: INC
28875: ST_TO_ADDR
28876: LD_INT 2
28878: PUSH
28879: FOR_DOWNTO
28880: IFFALSE 28964
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28882: LD_ADDR_VAR 0 6
28886: PUSH
28887: LD_VAR 0 7
28891: PUSH
28892: LD_VAR 0 5
28896: PUSH
28897: LD_INT 1
28899: MINUS
28900: ARRAY
28901: PPUSH
28902: LD_VAR 0 2
28906: PUSH
28907: LD_VAR 0 5
28911: PUSH
28912: LD_INT 1
28914: MINUS
28915: ARRAY
28916: PPUSH
28917: LD_VAR 0 7
28921: PUSH
28922: LD_VAR 0 5
28926: ARRAY
28927: PPUSH
28928: CALL_OW 1
28932: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28933: LD_ADDR_VAR 0 7
28937: PUSH
28938: LD_VAR 0 7
28942: PPUSH
28943: LD_VAR 0 5
28947: PUSH
28948: LD_INT 1
28950: MINUS
28951: PPUSH
28952: LD_VAR 0 6
28956: PPUSH
28957: CALL_OW 1
28961: ST_TO_ADDR
// end ;
28962: GO 28879
28964: POP
28965: POP
// result := s_arr [ 1 ] ;
28966: LD_ADDR_VAR 0 4
28970: PUSH
28971: LD_VAR 0 7
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: ST_TO_ADDR
// end ; end ;
28980: LD_VAR 0 4
28984: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28985: LD_INT 0
28987: PPUSH
28988: PPUSH
// if not list then
28989: LD_VAR 0 1
28993: NOT
28994: IFFALSE 28998
// exit ;
28996: GO 29089
// i := list [ pos1 ] ;
28998: LD_ADDR_VAR 0 5
29002: PUSH
29003: LD_VAR 0 1
29007: PUSH
29008: LD_VAR 0 2
29012: ARRAY
29013: ST_TO_ADDR
// if not i then
29014: LD_VAR 0 5
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29089
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29023: LD_ADDR_VAR 0 1
29027: PUSH
29028: LD_VAR 0 1
29032: PPUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: LD_VAR 0 1
29042: PUSH
29043: LD_VAR 0 3
29047: ARRAY
29048: PPUSH
29049: CALL_OW 1
29053: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29054: LD_ADDR_VAR 0 1
29058: PUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: LD_VAR 0 3
29068: PPUSH
29069: LD_VAR 0 5
29073: PPUSH
29074: CALL_OW 1
29078: ST_TO_ADDR
// result := list ;
29079: LD_ADDR_VAR 0 4
29083: PUSH
29084: LD_VAR 0 1
29088: ST_TO_ADDR
// end ;
29089: LD_VAR 0 4
29093: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29094: LD_INT 0
29096: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29097: LD_ADDR_VAR 0 5
29101: PUSH
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 250
29111: PPUSH
29112: LD_VAR 0 1
29116: PPUSH
29117: CALL_OW 251
29121: PPUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: LD_VAR 0 4
29136: PPUSH
29137: CALL 29147 0 5
29141: ST_TO_ADDR
// end ;
29142: LD_VAR 0 5
29146: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29147: LD_INT 0
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
// if not list then
29153: LD_VAR 0 3
29157: NOT
29158: IFFALSE 29162
// exit ;
29160: GO 29550
// result := [ ] ;
29162: LD_ADDR_VAR 0 6
29166: PUSH
29167: EMPTY
29168: ST_TO_ADDR
// for i in list do
29169: LD_ADDR_VAR 0 7
29173: PUSH
29174: LD_VAR 0 3
29178: PUSH
29179: FOR_IN
29180: IFFALSE 29382
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29182: LD_ADDR_VAR 0 9
29186: PUSH
29187: LD_VAR 0 7
29191: PPUSH
29192: LD_VAR 0 1
29196: PPUSH
29197: LD_VAR 0 2
29201: PPUSH
29202: CALL_OW 297
29206: ST_TO_ADDR
// if not result then
29207: LD_VAR 0 6
29211: NOT
29212: IFFALSE 29238
// result := [ [ i , tmp ] ] else
29214: LD_ADDR_VAR 0 6
29218: PUSH
29219: LD_VAR 0 7
29223: PUSH
29224: LD_VAR 0 9
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: ST_TO_ADDR
29236: GO 29380
// begin if result [ result ] [ 2 ] < tmp then
29238: LD_VAR 0 6
29242: PUSH
29243: LD_VAR 0 6
29247: ARRAY
29248: PUSH
29249: LD_INT 2
29251: ARRAY
29252: PUSH
29253: LD_VAR 0 9
29257: LESS
29258: IFFALSE 29300
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29260: LD_ADDR_VAR 0 6
29264: PUSH
29265: LD_VAR 0 6
29269: PPUSH
29270: LD_VAR 0 6
29274: PUSH
29275: LD_INT 1
29277: PLUS
29278: PPUSH
29279: LD_VAR 0 7
29283: PUSH
29284: LD_VAR 0 9
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PPUSH
29293: CALL_OW 2
29297: ST_TO_ADDR
29298: GO 29380
// for j = 1 to result do
29300: LD_ADDR_VAR 0 8
29304: PUSH
29305: DOUBLE
29306: LD_INT 1
29308: DEC
29309: ST_TO_ADDR
29310: LD_VAR 0 6
29314: PUSH
29315: FOR_TO
29316: IFFALSE 29378
// begin if tmp < result [ j ] [ 2 ] then
29318: LD_VAR 0 9
29322: PUSH
29323: LD_VAR 0 6
29327: PUSH
29328: LD_VAR 0 8
29332: ARRAY
29333: PUSH
29334: LD_INT 2
29336: ARRAY
29337: LESS
29338: IFFALSE 29376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29340: LD_ADDR_VAR 0 6
29344: PUSH
29345: LD_VAR 0 6
29349: PPUSH
29350: LD_VAR 0 8
29354: PPUSH
29355: LD_VAR 0 7
29359: PUSH
29360: LD_VAR 0 9
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 2
29373: ST_TO_ADDR
// break ;
29374: GO 29378
// end ; end ;
29376: GO 29315
29378: POP
29379: POP
// end ; end ;
29380: GO 29179
29382: POP
29383: POP
// if result and not asc then
29384: LD_VAR 0 6
29388: PUSH
29389: LD_VAR 0 4
29393: NOT
29394: AND
29395: IFFALSE 29470
// begin tmp := result ;
29397: LD_ADDR_VAR 0 9
29401: PUSH
29402: LD_VAR 0 6
29406: ST_TO_ADDR
// for i = tmp downto 1 do
29407: LD_ADDR_VAR 0 7
29411: PUSH
29412: DOUBLE
29413: LD_VAR 0 9
29417: INC
29418: ST_TO_ADDR
29419: LD_INT 1
29421: PUSH
29422: FOR_DOWNTO
29423: IFFALSE 29468
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29425: LD_ADDR_VAR 0 6
29429: PUSH
29430: LD_VAR 0 6
29434: PPUSH
29435: LD_VAR 0 9
29439: PUSH
29440: LD_VAR 0 7
29444: MINUS
29445: PUSH
29446: LD_INT 1
29448: PLUS
29449: PPUSH
29450: LD_VAR 0 9
29454: PUSH
29455: LD_VAR 0 7
29459: ARRAY
29460: PPUSH
29461: CALL_OW 1
29465: ST_TO_ADDR
29466: GO 29422
29468: POP
29469: POP
// end ; tmp := [ ] ;
29470: LD_ADDR_VAR 0 9
29474: PUSH
29475: EMPTY
29476: ST_TO_ADDR
// if mode then
29477: LD_VAR 0 5
29481: IFFALSE 29550
// begin for i = 1 to result do
29483: LD_ADDR_VAR 0 7
29487: PUSH
29488: DOUBLE
29489: LD_INT 1
29491: DEC
29492: ST_TO_ADDR
29493: LD_VAR 0 6
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29538
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_VAR 0 9
29510: PPUSH
29511: LD_VAR 0 7
29515: PPUSH
29516: LD_VAR 0 6
29520: PUSH
29521: LD_VAR 0 7
29525: ARRAY
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 1
29535: ST_TO_ADDR
29536: GO 29498
29538: POP
29539: POP
// result := tmp ;
29540: LD_ADDR_VAR 0 6
29544: PUSH
29545: LD_VAR 0 9
29549: ST_TO_ADDR
// end ; end ;
29550: LD_VAR 0 6
29554: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29563: LD_ADDR_VAR 0 5
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// if not x or not y then
29585: LD_VAR 0 2
29589: NOT
29590: PUSH
29591: LD_VAR 0 3
29595: NOT
29596: OR
29597: IFFALSE 29601
// exit ;
29599: GO 31251
// if not range then
29601: LD_VAR 0 4
29605: NOT
29606: IFFALSE 29616
// range := 10 ;
29608: LD_ADDR_VAR 0 4
29612: PUSH
29613: LD_INT 10
29615: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29616: LD_ADDR_VAR 0 8
29620: PUSH
29621: LD_INT 81
29623: PUSH
29624: LD_VAR 0 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 92
29635: PUSH
29636: LD_VAR 0 2
29640: PUSH
29641: LD_VAR 0 3
29645: PUSH
29646: LD_VAR 0 4
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 21
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 69
29683: ST_TO_ADDR
// if not tmp then
29684: LD_VAR 0 8
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 31251
// for i in tmp do
29693: LD_ADDR_VAR 0 6
29697: PUSH
29698: LD_VAR 0 8
29702: PUSH
29703: FOR_IN
29704: IFFALSE 31226
// begin points := [ 0 , 0 , 0 ] ;
29706: LD_ADDR_VAR 0 9
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// bpoints := 1 ;
29725: LD_ADDR_VAR 0 10
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29733: LD_VAR 0 6
29737: PPUSH
29738: CALL_OW 247
29742: PUSH
29743: LD_INT 1
29745: DOUBLE
29746: EQUAL
29747: IFTRUE 29751
29749: GO 30329
29751: POP
// begin if GetClass ( i ) = 1 then
29752: LD_VAR 0 6
29756: PPUSH
29757: CALL_OW 257
29761: PUSH
29762: LD_INT 1
29764: EQUAL
29765: IFFALSE 29786
// points := [ 10 , 5 , 3 ] ;
29767: LD_ADDR_VAR 0 9
29771: PUSH
29772: LD_INT 10
29774: PUSH
29775: LD_INT 5
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29786: LD_VAR 0 6
29790: PPUSH
29791: CALL_OW 257
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 4
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: IN
29810: IFFALSE 29831
// points := [ 3 , 2 , 1 ] ;
29812: LD_ADDR_VAR 0 9
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29831: LD_VAR 0 6
29835: PPUSH
29836: CALL_OW 257
29840: PUSH
29841: LD_INT 5
29843: EQUAL
29844: IFFALSE 29865
// points := [ 130 , 5 , 2 ] ;
29846: LD_ADDR_VAR 0 9
29850: PUSH
29851: LD_INT 130
29853: PUSH
29854: LD_INT 5
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29865: LD_VAR 0 6
29869: PPUSH
29870: CALL_OW 257
29874: PUSH
29875: LD_INT 8
29877: EQUAL
29878: IFFALSE 29899
// points := [ 35 , 35 , 30 ] ;
29880: LD_ADDR_VAR 0 9
29884: PUSH
29885: LD_INT 35
29887: PUSH
29888: LD_INT 35
29890: PUSH
29891: LD_INT 30
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29899: LD_VAR 0 6
29903: PPUSH
29904: CALL_OW 257
29908: PUSH
29909: LD_INT 9
29911: EQUAL
29912: IFFALSE 29933
// points := [ 20 , 55 , 40 ] ;
29914: LD_ADDR_VAR 0 9
29918: PUSH
29919: LD_INT 20
29921: PUSH
29922: LD_INT 55
29924: PUSH
29925: LD_INT 40
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29933: LD_VAR 0 6
29937: PPUSH
29938: CALL_OW 257
29942: PUSH
29943: LD_INT 12
29945: PUSH
29946: LD_INT 16
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: IN
29953: IFFALSE 29974
// points := [ 5 , 3 , 2 ] ;
29955: LD_ADDR_VAR 0 9
29959: PUSH
29960: LD_INT 5
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29974: LD_VAR 0 6
29978: PPUSH
29979: CALL_OW 257
29983: PUSH
29984: LD_INT 17
29986: EQUAL
29987: IFFALSE 30008
// points := [ 100 , 50 , 75 ] ;
29989: LD_ADDR_VAR 0 9
29993: PUSH
29994: LD_INT 100
29996: PUSH
29997: LD_INT 50
29999: PUSH
30000: LD_INT 75
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30008: LD_VAR 0 6
30012: PPUSH
30013: CALL_OW 257
30017: PUSH
30018: LD_INT 15
30020: EQUAL
30021: IFFALSE 30042
// points := [ 10 , 5 , 3 ] ;
30023: LD_ADDR_VAR 0 9
30027: PUSH
30028: LD_INT 10
30030: PUSH
30031: LD_INT 5
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30042: LD_VAR 0 6
30046: PPUSH
30047: CALL_OW 257
30051: PUSH
30052: LD_INT 14
30054: EQUAL
30055: IFFALSE 30076
// points := [ 10 , 0 , 0 ] ;
30057: LD_ADDR_VAR 0 9
30061: PUSH
30062: LD_INT 10
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30076: LD_VAR 0 6
30080: PPUSH
30081: CALL_OW 257
30085: PUSH
30086: LD_INT 11
30088: EQUAL
30089: IFFALSE 30110
// points := [ 30 , 10 , 5 ] ;
30091: LD_ADDR_VAR 0 9
30095: PUSH
30096: LD_INT 30
30098: PUSH
30099: LD_INT 10
30101: PUSH
30102: LD_INT 5
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30110: LD_VAR 0 1
30114: PPUSH
30115: LD_INT 5
30117: PPUSH
30118: CALL_OW 321
30122: PUSH
30123: LD_INT 2
30125: EQUAL
30126: IFFALSE 30143
// bpoints := bpoints * 1.8 ;
30128: LD_ADDR_VAR 0 10
30132: PUSH
30133: LD_VAR 0 10
30137: PUSH
30138: LD_REAL  1.80000000000000E+0000
30141: MUL
30142: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30143: LD_VAR 0 6
30147: PPUSH
30148: CALL_OW 257
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 4
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: IN
30171: PUSH
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_INT 51
30179: PPUSH
30180: CALL_OW 321
30184: PUSH
30185: LD_INT 2
30187: EQUAL
30188: AND
30189: IFFALSE 30206
// bpoints := bpoints * 1.2 ;
30191: LD_ADDR_VAR 0 10
30195: PUSH
30196: LD_VAR 0 10
30200: PUSH
30201: LD_REAL  1.20000000000000E+0000
30204: MUL
30205: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30206: LD_VAR 0 6
30210: PPUSH
30211: CALL_OW 257
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: LD_INT 7
30221: PUSH
30222: LD_INT 9
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: IN
30230: PUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_INT 52
30238: PPUSH
30239: CALL_OW 321
30243: PUSH
30244: LD_INT 2
30246: EQUAL
30247: AND
30248: IFFALSE 30265
// bpoints := bpoints * 1.5 ;
30250: LD_ADDR_VAR 0 10
30254: PUSH
30255: LD_VAR 0 10
30259: PUSH
30260: LD_REAL  1.50000000000000E+0000
30263: MUL
30264: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30265: LD_VAR 0 1
30269: PPUSH
30270: LD_INT 66
30272: PPUSH
30273: CALL_OW 321
30277: PUSH
30278: LD_INT 2
30280: EQUAL
30281: IFFALSE 30298
// bpoints := bpoints * 1.1 ;
30283: LD_ADDR_VAR 0 10
30287: PUSH
30288: LD_VAR 0 10
30292: PUSH
30293: LD_REAL  1.10000000000000E+0000
30296: MUL
30297: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30298: LD_ADDR_VAR 0 10
30302: PUSH
30303: LD_VAR 0 10
30307: PUSH
30308: LD_VAR 0 6
30312: PPUSH
30313: LD_INT 1
30315: PPUSH
30316: CALL_OW 259
30320: PUSH
30321: LD_REAL  1.15000000000000E+0000
30324: MUL
30325: MUL
30326: ST_TO_ADDR
// end ; unit_vehicle :
30327: GO 31155
30329: LD_INT 2
30331: DOUBLE
30332: EQUAL
30333: IFTRUE 30337
30335: GO 31143
30337: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30338: LD_VAR 0 6
30342: PPUSH
30343: CALL_OW 264
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: LD_INT 42
30353: PUSH
30354: LD_INT 24
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: IN
30362: IFFALSE 30383
// points := [ 25 , 5 , 3 ] ;
30364: LD_ADDR_VAR 0 9
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 5
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30383: LD_VAR 0 6
30387: PPUSH
30388: CALL_OW 264
30392: PUSH
30393: LD_INT 4
30395: PUSH
30396: LD_INT 43
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: IN
30407: IFFALSE 30428
// points := [ 40 , 15 , 5 ] ;
30409: LD_ADDR_VAR 0 9
30413: PUSH
30414: LD_INT 40
30416: PUSH
30417: LD_INT 15
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30428: LD_VAR 0 6
30432: PPUSH
30433: CALL_OW 264
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 23
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: IN
30448: IFFALSE 30469
// points := [ 7 , 25 , 8 ] ;
30450: LD_ADDR_VAR 0 9
30454: PUSH
30455: LD_INT 7
30457: PUSH
30458: LD_INT 25
30460: PUSH
30461: LD_INT 8
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30469: LD_VAR 0 6
30473: PPUSH
30474: CALL_OW 264
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: LD_INT 27
30484: PUSH
30485: LD_INT 44
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: IN
30493: IFFALSE 30514
// points := [ 14 , 50 , 16 ] ;
30495: LD_ADDR_VAR 0 9
30499: PUSH
30500: LD_INT 14
30502: PUSH
30503: LD_INT 50
30505: PUSH
30506: LD_INT 16
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30514: LD_VAR 0 6
30518: PPUSH
30519: CALL_OW 264
30523: PUSH
30524: LD_INT 6
30526: PUSH
30527: LD_INT 46
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: IN
30534: IFFALSE 30555
// points := [ 32 , 120 , 70 ] ;
30536: LD_ADDR_VAR 0 9
30540: PUSH
30541: LD_INT 32
30543: PUSH
30544: LD_INT 120
30546: PUSH
30547: LD_INT 70
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30555: LD_VAR 0 6
30559: PPUSH
30560: CALL_OW 264
30564: PUSH
30565: LD_INT 7
30567: PUSH
30568: LD_INT 28
30570: PUSH
30571: LD_INT 45
30573: PUSH
30574: LD_INT 92
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: IN
30583: IFFALSE 30604
// points := [ 35 , 20 , 45 ] ;
30585: LD_ADDR_VAR 0 9
30589: PUSH
30590: LD_INT 35
30592: PUSH
30593: LD_INT 20
30595: PUSH
30596: LD_INT 45
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30604: LD_VAR 0 6
30608: PPUSH
30609: CALL_OW 264
30613: PUSH
30614: LD_INT 47
30616: PUSH
30617: EMPTY
30618: LIST
30619: IN
30620: IFFALSE 30641
// points := [ 67 , 45 , 75 ] ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_INT 67
30629: PUSH
30630: LD_INT 45
30632: PUSH
30633: LD_INT 75
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30641: LD_VAR 0 6
30645: PPUSH
30646: CALL_OW 264
30650: PUSH
30651: LD_INT 26
30653: PUSH
30654: EMPTY
30655: LIST
30656: IN
30657: IFFALSE 30678
// points := [ 120 , 30 , 80 ] ;
30659: LD_ADDR_VAR 0 9
30663: PUSH
30664: LD_INT 120
30666: PUSH
30667: LD_INT 30
30669: PUSH
30670: LD_INT 80
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30678: LD_VAR 0 6
30682: PPUSH
30683: CALL_OW 264
30687: PUSH
30688: LD_INT 22
30690: PUSH
30691: EMPTY
30692: LIST
30693: IN
30694: IFFALSE 30715
// points := [ 40 , 1 , 1 ] ;
30696: LD_ADDR_VAR 0 9
30700: PUSH
30701: LD_INT 40
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30715: LD_VAR 0 6
30719: PPUSH
30720: CALL_OW 264
30724: PUSH
30725: LD_INT 29
30727: PUSH
30728: EMPTY
30729: LIST
30730: IN
30731: IFFALSE 30752
// points := [ 70 , 200 , 400 ] ;
30733: LD_ADDR_VAR 0 9
30737: PUSH
30738: LD_INT 70
30740: PUSH
30741: LD_INT 200
30743: PUSH
30744: LD_INT 400
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30752: LD_VAR 0 6
30756: PPUSH
30757: CALL_OW 264
30761: PUSH
30762: LD_INT 14
30764: PUSH
30765: LD_INT 53
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: IN
30772: IFFALSE 30793
// points := [ 40 , 10 , 20 ] ;
30774: LD_ADDR_VAR 0 9
30778: PUSH
30779: LD_INT 40
30781: PUSH
30782: LD_INT 10
30784: PUSH
30785: LD_INT 20
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30793: LD_VAR 0 6
30797: PPUSH
30798: CALL_OW 264
30802: PUSH
30803: LD_INT 9
30805: PUSH
30806: EMPTY
30807: LIST
30808: IN
30809: IFFALSE 30830
// points := [ 5 , 70 , 20 ] ;
30811: LD_ADDR_VAR 0 9
30815: PUSH
30816: LD_INT 5
30818: PUSH
30819: LD_INT 70
30821: PUSH
30822: LD_INT 20
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30830: LD_VAR 0 6
30834: PPUSH
30835: CALL_OW 264
30839: PUSH
30840: LD_INT 10
30842: PUSH
30843: EMPTY
30844: LIST
30845: IN
30846: IFFALSE 30867
// points := [ 35 , 110 , 70 ] ;
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: LD_INT 35
30855: PUSH
30856: LD_INT 110
30858: PUSH
30859: LD_INT 70
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30867: LD_VAR 0 6
30871: PPUSH
30872: CALL_OW 265
30876: PUSH
30877: LD_INT 25
30879: EQUAL
30880: IFFALSE 30901
// points := [ 80 , 65 , 100 ] ;
30882: LD_ADDR_VAR 0 9
30886: PUSH
30887: LD_INT 80
30889: PUSH
30890: LD_INT 65
30892: PUSH
30893: LD_INT 100
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30901: LD_VAR 0 6
30905: PPUSH
30906: CALL_OW 263
30910: PUSH
30911: LD_INT 1
30913: EQUAL
30914: IFFALSE 30949
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30916: LD_ADDR_VAR 0 10
30920: PUSH
30921: LD_VAR 0 10
30925: PUSH
30926: LD_VAR 0 6
30930: PPUSH
30931: CALL_OW 311
30935: PPUSH
30936: LD_INT 3
30938: PPUSH
30939: CALL_OW 259
30943: PUSH
30944: LD_INT 4
30946: MUL
30947: MUL
30948: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30949: LD_VAR 0 6
30953: PPUSH
30954: CALL_OW 263
30958: PUSH
30959: LD_INT 2
30961: EQUAL
30962: IFFALSE 31013
// begin j := IsControledBy ( i ) ;
30964: LD_ADDR_VAR 0 7
30968: PUSH
30969: LD_VAR 0 6
30973: PPUSH
30974: CALL_OW 312
30978: ST_TO_ADDR
// if j then
30979: LD_VAR 0 7
30983: IFFALSE 31013
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30985: LD_ADDR_VAR 0 10
30989: PUSH
30990: LD_VAR 0 10
30994: PUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: LD_INT 3
31002: PPUSH
31003: CALL_OW 259
31007: PUSH
31008: LD_INT 3
31010: MUL
31011: MUL
31012: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31013: LD_VAR 0 6
31017: PPUSH
31018: CALL_OW 264
31022: PUSH
31023: LD_INT 5
31025: PUSH
31026: LD_INT 6
31028: PUSH
31029: LD_INT 46
31031: PUSH
31032: LD_INT 44
31034: PUSH
31035: LD_INT 47
31037: PUSH
31038: LD_INT 45
31040: PUSH
31041: LD_INT 28
31043: PUSH
31044: LD_INT 7
31046: PUSH
31047: LD_INT 27
31049: PUSH
31050: LD_INT 29
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: IN
31065: PUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_INT 52
31073: PPUSH
31074: CALL_OW 321
31078: PUSH
31079: LD_INT 2
31081: EQUAL
31082: AND
31083: IFFALSE 31100
// bpoints := bpoints * 1.2 ;
31085: LD_ADDR_VAR 0 10
31089: PUSH
31090: LD_VAR 0 10
31094: PUSH
31095: LD_REAL  1.20000000000000E+0000
31098: MUL
31099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31100: LD_VAR 0 6
31104: PPUSH
31105: CALL_OW 264
31109: PUSH
31110: LD_INT 6
31112: PUSH
31113: LD_INT 46
31115: PUSH
31116: LD_INT 47
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: IN
31124: IFFALSE 31141
// bpoints := bpoints * 1.2 ;
31126: LD_ADDR_VAR 0 10
31130: PUSH
31131: LD_VAR 0 10
31135: PUSH
31136: LD_REAL  1.20000000000000E+0000
31139: MUL
31140: ST_TO_ADDR
// end ; unit_building :
31141: GO 31155
31143: LD_INT 3
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31151
31149: GO 31154
31151: POP
// ; end ;
31152: GO 31155
31154: POP
// for j = 1 to 3 do
31155: LD_ADDR_VAR 0 7
31159: PUSH
31160: DOUBLE
31161: LD_INT 1
31163: DEC
31164: ST_TO_ADDR
31165: LD_INT 3
31167: PUSH
31168: FOR_TO
31169: IFFALSE 31222
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 5
31180: PPUSH
31181: LD_VAR 0 7
31185: PPUSH
31186: LD_VAR 0 5
31190: PUSH
31191: LD_VAR 0 7
31195: ARRAY
31196: PUSH
31197: LD_VAR 0 9
31201: PUSH
31202: LD_VAR 0 7
31206: ARRAY
31207: PUSH
31208: LD_VAR 0 10
31212: MUL
31213: PLUS
31214: PPUSH
31215: CALL_OW 1
31219: ST_TO_ADDR
31220: GO 31168
31222: POP
31223: POP
// end ;
31224: GO 29703
31226: POP
31227: POP
// result := Replace ( result , 4 , tmp ) ;
31228: LD_ADDR_VAR 0 5
31232: PUSH
31233: LD_VAR 0 5
31237: PPUSH
31238: LD_INT 4
31240: PPUSH
31241: LD_VAR 0 8
31245: PPUSH
31246: CALL_OW 1
31250: ST_TO_ADDR
// end ;
31251: LD_VAR 0 5
31255: RET
// export function DangerAtRange ( unit , range ) ; begin
31256: LD_INT 0
31258: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31259: LD_ADDR_VAR 0 3
31263: PUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 255
31273: PPUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: CALL_OW 250
31283: PPUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: CALL_OW 251
31293: PPUSH
31294: LD_VAR 0 2
31298: PPUSH
31299: CALL 29555 0 4
31303: ST_TO_ADDR
// end ;
31304: LD_VAR 0 3
31308: RET
// export function DangerInArea ( side , area ) ; begin
31309: LD_INT 0
31311: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31312: LD_ADDR_VAR 0 3
31316: PUSH
31317: LD_VAR 0 2
31321: PPUSH
31322: LD_INT 81
31324: PUSH
31325: LD_VAR 0 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PPUSH
31334: CALL_OW 70
31338: ST_TO_ADDR
// end ;
31339: LD_VAR 0 3
31343: RET
// export function IsExtension ( b ) ; begin
31344: LD_INT 0
31346: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31347: LD_ADDR_VAR 0 2
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: LD_INT 23
31359: PUSH
31360: LD_INT 20
31362: PUSH
31363: LD_INT 22
31365: PUSH
31366: LD_INT 17
31368: PUSH
31369: LD_INT 24
31371: PUSH
31372: LD_INT 21
31374: PUSH
31375: LD_INT 19
31377: PUSH
31378: LD_INT 16
31380: PUSH
31381: LD_INT 25
31383: PUSH
31384: LD_INT 18
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: IN
31399: ST_TO_ADDR
// end ;
31400: LD_VAR 0 2
31404: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
// result := [ ] ;
31410: LD_ADDR_VAR 0 4
31414: PUSH
31415: EMPTY
31416: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31417: LD_ADDR_VAR 0 5
31421: PUSH
31422: LD_VAR 0 2
31426: PPUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 70
31441: ST_TO_ADDR
// if not tmp then
31442: LD_VAR 0 5
31446: NOT
31447: IFFALSE 31451
// exit ;
31449: GO 31515
// if checkLink then
31451: LD_VAR 0 3
31455: IFFALSE 31505
// begin for i in tmp do
31457: LD_ADDR_VAR 0 6
31461: PUSH
31462: LD_VAR 0 5
31466: PUSH
31467: FOR_IN
31468: IFFALSE 31503
// if GetBase ( i ) <> base then
31470: LD_VAR 0 6
31474: PPUSH
31475: CALL_OW 274
31479: PUSH
31480: LD_VAR 0 1
31484: NONEQUAL
31485: IFFALSE 31501
// ComLinkToBase ( base , i ) ;
31487: LD_VAR 0 1
31491: PPUSH
31492: LD_VAR 0 6
31496: PPUSH
31497: CALL_OW 169
31501: GO 31467
31503: POP
31504: POP
// end ; result := tmp ;
31505: LD_ADDR_VAR 0 4
31509: PUSH
31510: LD_VAR 0 5
31514: ST_TO_ADDR
// end ;
31515: LD_VAR 0 4
31519: RET
// export function ComComplete ( units , b ) ; var i ; begin
31520: LD_INT 0
31522: PPUSH
31523: PPUSH
// if not units then
31524: LD_VAR 0 1
31528: NOT
31529: IFFALSE 31533
// exit ;
31531: GO 31623
// for i in units do
31533: LD_ADDR_VAR 0 4
31537: PUSH
31538: LD_VAR 0 1
31542: PUSH
31543: FOR_IN
31544: IFFALSE 31621
// if BuildingStatus ( b ) = bs_build then
31546: LD_VAR 0 2
31550: PPUSH
31551: CALL_OW 461
31555: PUSH
31556: LD_INT 1
31558: EQUAL
31559: IFFALSE 31619
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31561: LD_VAR 0 4
31565: PPUSH
31566: LD_STRING h
31568: PUSH
31569: LD_VAR 0 2
31573: PPUSH
31574: CALL_OW 250
31578: PUSH
31579: LD_VAR 0 2
31583: PPUSH
31584: CALL_OW 251
31588: PUSH
31589: LD_VAR 0 2
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: PPUSH
31615: CALL_OW 446
31619: GO 31543
31621: POP
31622: POP
// end ;
31623: LD_VAR 0 3
31627: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31628: LD_INT 0
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31636: LD_VAR 0 1
31640: NOT
31641: PUSH
31642: LD_VAR 0 1
31646: PPUSH
31647: CALL_OW 263
31651: PUSH
31652: LD_INT 2
31654: NONEQUAL
31655: OR
31656: IFFALSE 31660
// exit ;
31658: GO 31976
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31660: LD_ADDR_VAR 0 6
31664: PUSH
31665: LD_INT 22
31667: PUSH
31668: LD_VAR 0 1
31672: PPUSH
31673: CALL_OW 255
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: LD_INT 36
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 34
31697: PUSH
31698: LD_INT 31
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PPUSH
31714: CALL_OW 69
31718: ST_TO_ADDR
// if not tmp then
31719: LD_VAR 0 6
31723: NOT
31724: IFFALSE 31728
// exit ;
31726: GO 31976
// result := [ ] ;
31728: LD_ADDR_VAR 0 2
31732: PUSH
31733: EMPTY
31734: ST_TO_ADDR
// for i in tmp do
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_VAR 0 6
31744: PUSH
31745: FOR_IN
31746: IFFALSE 31817
// begin t := UnitsInside ( i ) ;
31748: LD_ADDR_VAR 0 4
31752: PUSH
31753: LD_VAR 0 3
31757: PPUSH
31758: CALL_OW 313
31762: ST_TO_ADDR
// if t then
31763: LD_VAR 0 4
31767: IFFALSE 31815
// for j in t do
31769: LD_ADDR_VAR 0 7
31773: PUSH
31774: LD_VAR 0 4
31778: PUSH
31779: FOR_IN
31780: IFFALSE 31813
// result := Replace ( result , result + 1 , j ) ;
31782: LD_ADDR_VAR 0 2
31786: PUSH
31787: LD_VAR 0 2
31791: PPUSH
31792: LD_VAR 0 2
31796: PUSH
31797: LD_INT 1
31799: PLUS
31800: PPUSH
31801: LD_VAR 0 7
31805: PPUSH
31806: CALL_OW 1
31810: ST_TO_ADDR
31811: GO 31779
31813: POP
31814: POP
// end ;
31815: GO 31745
31817: POP
31818: POP
// if not result then
31819: LD_VAR 0 2
31823: NOT
31824: IFFALSE 31828
// exit ;
31826: GO 31976
// mech := result [ 1 ] ;
31828: LD_ADDR_VAR 0 5
31832: PUSH
31833: LD_VAR 0 2
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: ST_TO_ADDR
// if result > 1 then
31842: LD_VAR 0 2
31846: PUSH
31847: LD_INT 1
31849: GREATER
31850: IFFALSE 31962
// begin for i = 2 to result do
31852: LD_ADDR_VAR 0 3
31856: PUSH
31857: DOUBLE
31858: LD_INT 2
31860: DEC
31861: ST_TO_ADDR
31862: LD_VAR 0 2
31866: PUSH
31867: FOR_TO
31868: IFFALSE 31960
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: LD_VAR 0 2
31879: PUSH
31880: LD_VAR 0 3
31884: ARRAY
31885: PPUSH
31886: LD_INT 3
31888: PPUSH
31889: CALL_OW 259
31893: PUSH
31894: LD_VAR 0 2
31898: PUSH
31899: LD_VAR 0 3
31903: ARRAY
31904: PPUSH
31905: CALL_OW 432
31909: MINUS
31910: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31911: LD_VAR 0 4
31915: PUSH
31916: LD_VAR 0 5
31920: PPUSH
31921: LD_INT 3
31923: PPUSH
31924: CALL_OW 259
31928: PUSH
31929: LD_VAR 0 5
31933: PPUSH
31934: CALL_OW 432
31938: MINUS
31939: GREATEREQUAL
31940: IFFALSE 31958
// mech := result [ i ] ;
31942: LD_ADDR_VAR 0 5
31946: PUSH
31947: LD_VAR 0 2
31951: PUSH
31952: LD_VAR 0 3
31956: ARRAY
31957: ST_TO_ADDR
// end ;
31958: GO 31867
31960: POP
31961: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31962: LD_VAR 0 1
31966: PPUSH
31967: LD_VAR 0 5
31971: PPUSH
31972: CALL_OW 135
// end ;
31976: LD_VAR 0 2
31980: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31981: LD_INT 0
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
// result := [ ] ;
31996: LD_ADDR_VAR 0 7
32000: PUSH
32001: EMPTY
32002: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 266
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: IN
32023: NOT
32024: IFFALSE 32028
// exit ;
32026: GO 33662
// if name then
32028: LD_VAR 0 3
32032: IFFALSE 32048
// SetBName ( base_dep , name ) ;
32034: LD_VAR 0 1
32038: PPUSH
32039: LD_VAR 0 3
32043: PPUSH
32044: CALL_OW 500
// base := GetBase ( base_dep ) ;
32048: LD_ADDR_VAR 0 15
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 274
32062: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32063: LD_ADDR_VAR 0 16
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 255
32077: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32078: LD_ADDR_VAR 0 17
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 248
32092: ST_TO_ADDR
// if sources then
32093: LD_VAR 0 5
32097: IFFALSE 32144
// for i = 1 to 3 do
32099: LD_ADDR_VAR 0 8
32103: PUSH
32104: DOUBLE
32105: LD_INT 1
32107: DEC
32108: ST_TO_ADDR
32109: LD_INT 3
32111: PUSH
32112: FOR_TO
32113: IFFALSE 32142
// AddResourceType ( base , i , sources [ i ] ) ;
32115: LD_VAR 0 15
32119: PPUSH
32120: LD_VAR 0 8
32124: PPUSH
32125: LD_VAR 0 5
32129: PUSH
32130: LD_VAR 0 8
32134: ARRAY
32135: PPUSH
32136: CALL_OW 276
32140: GO 32112
32142: POP
32143: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32144: LD_ADDR_VAR 0 18
32148: PUSH
32149: LD_VAR 0 15
32153: PPUSH
32154: LD_VAR 0 2
32158: PPUSH
32159: LD_INT 1
32161: PPUSH
32162: CALL 31405 0 3
32166: ST_TO_ADDR
// InitHc ;
32167: CALL_OW 19
// InitUc ;
32171: CALL_OW 18
// uc_side := side ;
32175: LD_ADDR_OWVAR 20
32179: PUSH
32180: LD_VAR 0 16
32184: ST_TO_ADDR
// uc_nation := nation ;
32185: LD_ADDR_OWVAR 21
32189: PUSH
32190: LD_VAR 0 17
32194: ST_TO_ADDR
// if buildings then
32195: LD_VAR 0 18
32199: IFFALSE 33521
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32201: LD_ADDR_VAR 0 19
32205: PUSH
32206: LD_VAR 0 18
32210: PPUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 30
32216: PUSH
32217: LD_INT 29
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 30
32226: PUSH
32227: LD_INT 30
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: PPUSH
32239: CALL_OW 72
32243: ST_TO_ADDR
// if tmp then
32244: LD_VAR 0 19
32248: IFFALSE 32296
// for i in tmp do
32250: LD_ADDR_VAR 0 8
32254: PUSH
32255: LD_VAR 0 19
32259: PUSH
32260: FOR_IN
32261: IFFALSE 32294
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32263: LD_VAR 0 8
32267: PPUSH
32268: CALL_OW 250
32272: PPUSH
32273: LD_VAR 0 8
32277: PPUSH
32278: CALL_OW 251
32282: PPUSH
32283: LD_VAR 0 16
32287: PPUSH
32288: CALL_OW 441
32292: GO 32260
32294: POP
32295: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32296: LD_VAR 0 18
32300: PPUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 32
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 30
32316: PUSH
32317: LD_INT 33
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: PPUSH
32329: CALL_OW 72
32333: IFFALSE 32421
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32335: LD_ADDR_VAR 0 8
32339: PUSH
32340: LD_VAR 0 18
32344: PPUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 30
32350: PUSH
32351: LD_INT 32
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 30
32360: PUSH
32361: LD_INT 33
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 72
32377: PUSH
32378: FOR_IN
32379: IFFALSE 32419
// begin if not GetBWeapon ( i ) then
32381: LD_VAR 0 8
32385: PPUSH
32386: CALL_OW 269
32390: NOT
32391: IFFALSE 32417
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32393: LD_VAR 0 8
32397: PPUSH
32398: LD_VAR 0 8
32402: PPUSH
32403: LD_VAR 0 2
32407: PPUSH
32408: CALL 33667 0 2
32412: PPUSH
32413: CALL_OW 431
// end ;
32417: GO 32378
32419: POP
32420: POP
// end ; for i = 1 to personel do
32421: LD_ADDR_VAR 0 8
32425: PUSH
32426: DOUBLE
32427: LD_INT 1
32429: DEC
32430: ST_TO_ADDR
32431: LD_VAR 0 6
32435: PUSH
32436: FOR_TO
32437: IFFALSE 33501
// begin if i > 4 then
32439: LD_VAR 0 8
32443: PUSH
32444: LD_INT 4
32446: GREATER
32447: IFFALSE 32451
// break ;
32449: GO 33501
// case i of 1 :
32451: LD_VAR 0 8
32455: PUSH
32456: LD_INT 1
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32464
32462: GO 32544
32464: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32465: LD_ADDR_VAR 0 12
32469: PUSH
32470: LD_VAR 0 18
32474: PPUSH
32475: LD_INT 22
32477: PUSH
32478: LD_VAR 0 16
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 58
32489: PUSH
32490: EMPTY
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 30
32498: PUSH
32499: LD_INT 32
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 30
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: PPUSH
32537: CALL_OW 72
32541: ST_TO_ADDR
32542: GO 32766
32544: LD_INT 2
32546: DOUBLE
32547: EQUAL
32548: IFTRUE 32552
32550: GO 32614
32552: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32553: LD_ADDR_VAR 0 12
32557: PUSH
32558: LD_VAR 0 18
32562: PPUSH
32563: LD_INT 22
32565: PUSH
32566: LD_VAR 0 16
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 30
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 30
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PPUSH
32607: CALL_OW 72
32611: ST_TO_ADDR
32612: GO 32766
32614: LD_INT 3
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32684
32622: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32623: LD_ADDR_VAR 0 12
32627: PUSH
32628: LD_VAR 0 18
32632: PPUSH
32633: LD_INT 22
32635: PUSH
32636: LD_VAR 0 16
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 30
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 30
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PPUSH
32677: CALL_OW 72
32681: ST_TO_ADDR
32682: GO 32766
32684: LD_INT 4
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32765
32692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32693: LD_ADDR_VAR 0 12
32697: PUSH
32698: LD_VAR 0 18
32702: PPUSH
32703: LD_INT 22
32705: PUSH
32706: LD_VAR 0 16
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 30
32720: PUSH
32721: LD_INT 6
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 30
32730: PUSH
32731: LD_INT 7
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 30
32740: PUSH
32741: LD_INT 8
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 72
32762: ST_TO_ADDR
32763: GO 32766
32765: POP
// if i = 1 then
32766: LD_VAR 0 8
32770: PUSH
32771: LD_INT 1
32773: EQUAL
32774: IFFALSE 32885
// begin tmp := [ ] ;
32776: LD_ADDR_VAR 0 19
32780: PUSH
32781: EMPTY
32782: ST_TO_ADDR
// for j in f do
32783: LD_ADDR_VAR 0 9
32787: PUSH
32788: LD_VAR 0 12
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32867
// if GetBType ( j ) = b_bunker then
32796: LD_VAR 0 9
32800: PPUSH
32801: CALL_OW 266
32805: PUSH
32806: LD_INT 32
32808: EQUAL
32809: IFFALSE 32836
// tmp := Insert ( tmp , 1 , j ) else
32811: LD_ADDR_VAR 0 19
32815: PUSH
32816: LD_VAR 0 19
32820: PPUSH
32821: LD_INT 1
32823: PPUSH
32824: LD_VAR 0 9
32828: PPUSH
32829: CALL_OW 2
32833: ST_TO_ADDR
32834: GO 32865
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32836: LD_ADDR_VAR 0 19
32840: PUSH
32841: LD_VAR 0 19
32845: PPUSH
32846: LD_VAR 0 19
32850: PUSH
32851: LD_INT 1
32853: PLUS
32854: PPUSH
32855: LD_VAR 0 9
32859: PPUSH
32860: CALL_OW 2
32864: ST_TO_ADDR
32865: GO 32793
32867: POP
32868: POP
// if tmp then
32869: LD_VAR 0 19
32873: IFFALSE 32885
// f := tmp ;
32875: LD_ADDR_VAR 0 12
32879: PUSH
32880: LD_VAR 0 19
32884: ST_TO_ADDR
// end ; x := personel [ i ] ;
32885: LD_ADDR_VAR 0 13
32889: PUSH
32890: LD_VAR 0 6
32894: PUSH
32895: LD_VAR 0 8
32899: ARRAY
32900: ST_TO_ADDR
// if x = - 1 then
32901: LD_VAR 0 13
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: EQUAL
32910: IFFALSE 33119
// begin for j in f do
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_VAR 0 12
32921: PUSH
32922: FOR_IN
32923: IFFALSE 33115
// repeat InitHc ;
32925: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32929: LD_VAR 0 9
32933: PPUSH
32934: CALL_OW 266
32938: PUSH
32939: LD_INT 5
32941: EQUAL
32942: IFFALSE 33012
// begin if UnitsInside ( j ) < 3 then
32944: LD_VAR 0 9
32948: PPUSH
32949: CALL_OW 313
32953: PUSH
32954: LD_INT 3
32956: LESS
32957: IFFALSE 32993
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32959: LD_INT 0
32961: PPUSH
32962: LD_INT 5
32964: PUSH
32965: LD_INT 8
32967: PUSH
32968: LD_INT 9
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: LD_VAR 0 17
32980: ARRAY
32981: PPUSH
32982: LD_VAR 0 4
32986: PPUSH
32987: CALL_OW 380
32991: GO 33010
// PrepareHuman ( false , i , skill ) ;
32993: LD_INT 0
32995: PPUSH
32996: LD_VAR 0 8
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: CALL_OW 380
// end else
33010: GO 33029
// PrepareHuman ( false , i , skill ) ;
33012: LD_INT 0
33014: PPUSH
33015: LD_VAR 0 8
33019: PPUSH
33020: LD_VAR 0 4
33024: PPUSH
33025: CALL_OW 380
// un := CreateHuman ;
33029: LD_ADDR_VAR 0 14
33033: PUSH
33034: CALL_OW 44
33038: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33039: LD_ADDR_VAR 0 7
33043: PUSH
33044: LD_VAR 0 7
33048: PPUSH
33049: LD_INT 1
33051: PPUSH
33052: LD_VAR 0 14
33056: PPUSH
33057: CALL_OW 2
33061: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33062: LD_VAR 0 14
33066: PPUSH
33067: LD_VAR 0 9
33071: PPUSH
33072: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33076: LD_VAR 0 9
33080: PPUSH
33081: CALL_OW 313
33085: PUSH
33086: LD_INT 6
33088: EQUAL
33089: PUSH
33090: LD_VAR 0 9
33094: PPUSH
33095: CALL_OW 266
33099: PUSH
33100: LD_INT 32
33102: PUSH
33103: LD_INT 31
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: IN
33110: OR
33111: IFFALSE 32925
33113: GO 32922
33115: POP
33116: POP
// end else
33117: GO 33499
// for j = 1 to x do
33119: LD_ADDR_VAR 0 9
33123: PUSH
33124: DOUBLE
33125: LD_INT 1
33127: DEC
33128: ST_TO_ADDR
33129: LD_VAR 0 13
33133: PUSH
33134: FOR_TO
33135: IFFALSE 33497
// begin InitHc ;
33137: CALL_OW 19
// if not f then
33141: LD_VAR 0 12
33145: NOT
33146: IFFALSE 33235
// begin PrepareHuman ( false , i , skill ) ;
33148: LD_INT 0
33150: PPUSH
33151: LD_VAR 0 8
33155: PPUSH
33156: LD_VAR 0 4
33160: PPUSH
33161: CALL_OW 380
// un := CreateHuman ;
33165: LD_ADDR_VAR 0 14
33169: PUSH
33170: CALL_OW 44
33174: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33175: LD_ADDR_VAR 0 7
33179: PUSH
33180: LD_VAR 0 7
33184: PPUSH
33185: LD_INT 1
33187: PPUSH
33188: LD_VAR 0 14
33192: PPUSH
33193: CALL_OW 2
33197: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33198: LD_VAR 0 14
33202: PPUSH
33203: LD_VAR 0 1
33207: PPUSH
33208: CALL_OW 250
33212: PPUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 251
33222: PPUSH
33223: LD_INT 10
33225: PPUSH
33226: LD_INT 0
33228: PPUSH
33229: CALL_OW 50
// continue ;
33233: GO 33134
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33235: LD_VAR 0 12
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: PPUSH
33244: CALL_OW 313
33248: PUSH
33249: LD_VAR 0 12
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: PPUSH
33258: CALL_OW 266
33262: PUSH
33263: LD_INT 32
33265: PUSH
33266: LD_INT 31
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: IN
33273: AND
33274: PUSH
33275: LD_VAR 0 12
33279: PUSH
33280: LD_INT 1
33282: ARRAY
33283: PPUSH
33284: CALL_OW 313
33288: PUSH
33289: LD_INT 6
33291: EQUAL
33292: OR
33293: IFFALSE 33313
// f := Delete ( f , 1 ) ;
33295: LD_ADDR_VAR 0 12
33299: PUSH
33300: LD_VAR 0 12
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: CALL_OW 3
33312: ST_TO_ADDR
// if not f then
33313: LD_VAR 0 12
33317: NOT
33318: IFFALSE 33336
// begin x := x + 2 ;
33320: LD_ADDR_VAR 0 13
33324: PUSH
33325: LD_VAR 0 13
33329: PUSH
33330: LD_INT 2
33332: PLUS
33333: ST_TO_ADDR
// continue ;
33334: GO 33134
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33336: LD_VAR 0 12
33340: PUSH
33341: LD_INT 1
33343: ARRAY
33344: PPUSH
33345: CALL_OW 266
33349: PUSH
33350: LD_INT 5
33352: EQUAL
33353: IFFALSE 33427
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33355: LD_VAR 0 12
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: PPUSH
33364: CALL_OW 313
33368: PUSH
33369: LD_INT 3
33371: LESS
33372: IFFALSE 33408
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33374: LD_INT 0
33376: PPUSH
33377: LD_INT 5
33379: PUSH
33380: LD_INT 8
33382: PUSH
33383: LD_INT 9
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: PUSH
33391: LD_VAR 0 17
33395: ARRAY
33396: PPUSH
33397: LD_VAR 0 4
33401: PPUSH
33402: CALL_OW 380
33406: GO 33425
// PrepareHuman ( false , i , skill ) ;
33408: LD_INT 0
33410: PPUSH
33411: LD_VAR 0 8
33415: PPUSH
33416: LD_VAR 0 4
33420: PPUSH
33421: CALL_OW 380
// end else
33425: GO 33444
// PrepareHuman ( false , i , skill ) ;
33427: LD_INT 0
33429: PPUSH
33430: LD_VAR 0 8
33434: PPUSH
33435: LD_VAR 0 4
33439: PPUSH
33440: CALL_OW 380
// un := CreateHuman ;
33444: LD_ADDR_VAR 0 14
33448: PUSH
33449: CALL_OW 44
33453: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33454: LD_ADDR_VAR 0 7
33458: PUSH
33459: LD_VAR 0 7
33463: PPUSH
33464: LD_INT 1
33466: PPUSH
33467: LD_VAR 0 14
33471: PPUSH
33472: CALL_OW 2
33476: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33477: LD_VAR 0 14
33481: PPUSH
33482: LD_VAR 0 12
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PPUSH
33491: CALL_OW 52
// end ;
33495: GO 33134
33497: POP
33498: POP
// end ;
33499: GO 32436
33501: POP
33502: POP
// result := result ^ buildings ;
33503: LD_ADDR_VAR 0 7
33507: PUSH
33508: LD_VAR 0 7
33512: PUSH
33513: LD_VAR 0 18
33517: ADD
33518: ST_TO_ADDR
// end else
33519: GO 33662
// begin for i = 1 to personel do
33521: LD_ADDR_VAR 0 8
33525: PUSH
33526: DOUBLE
33527: LD_INT 1
33529: DEC
33530: ST_TO_ADDR
33531: LD_VAR 0 6
33535: PUSH
33536: FOR_TO
33537: IFFALSE 33660
// begin if i > 4 then
33539: LD_VAR 0 8
33543: PUSH
33544: LD_INT 4
33546: GREATER
33547: IFFALSE 33551
// break ;
33549: GO 33660
// x := personel [ i ] ;
33551: LD_ADDR_VAR 0 13
33555: PUSH
33556: LD_VAR 0 6
33560: PUSH
33561: LD_VAR 0 8
33565: ARRAY
33566: ST_TO_ADDR
// if x = - 1 then
33567: LD_VAR 0 13
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: EQUAL
33576: IFFALSE 33580
// continue ;
33578: GO 33536
// PrepareHuman ( false , i , skill ) ;
33580: LD_INT 0
33582: PPUSH
33583: LD_VAR 0 8
33587: PPUSH
33588: LD_VAR 0 4
33592: PPUSH
33593: CALL_OW 380
// un := CreateHuman ;
33597: LD_ADDR_VAR 0 14
33601: PUSH
33602: CALL_OW 44
33606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33607: LD_VAR 0 14
33611: PPUSH
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 250
33621: PPUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 251
33631: PPUSH
33632: LD_INT 10
33634: PPUSH
33635: LD_INT 0
33637: PPUSH
33638: CALL_OW 50
// result := result ^ un ;
33642: LD_ADDR_VAR 0 7
33646: PUSH
33647: LD_VAR 0 7
33651: PUSH
33652: LD_VAR 0 14
33656: ADD
33657: ST_TO_ADDR
// end ;
33658: GO 33536
33660: POP
33661: POP
// end ; end ;
33662: LD_VAR 0 7
33666: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33667: LD_INT 0
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// result := false ;
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 0
33692: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33693: LD_VAR 0 1
33697: NOT
33698: PUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 266
33708: PUSH
33709: LD_INT 32
33711: PUSH
33712: LD_INT 33
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: IN
33719: NOT
33720: OR
33721: IFFALSE 33725
// exit ;
33723: GO 34834
// nat := GetNation ( tower ) ;
33725: LD_ADDR_VAR 0 12
33729: PUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: CALL_OW 248
33739: ST_TO_ADDR
// side := GetSide ( tower ) ;
33740: LD_ADDR_VAR 0 16
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 255
33754: ST_TO_ADDR
// x := GetX ( tower ) ;
33755: LD_ADDR_VAR 0 10
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 250
33769: ST_TO_ADDR
// y := GetY ( tower ) ;
33770: LD_ADDR_VAR 0 11
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 251
33784: ST_TO_ADDR
// if not x or not y then
33785: LD_VAR 0 10
33789: NOT
33790: PUSH
33791: LD_VAR 0 11
33795: NOT
33796: OR
33797: IFFALSE 33801
// exit ;
33799: GO 34834
// weapon := 0 ;
33801: LD_ADDR_VAR 0 18
33805: PUSH
33806: LD_INT 0
33808: ST_TO_ADDR
// fac_list := [ ] ;
33809: LD_ADDR_VAR 0 17
33813: PUSH
33814: EMPTY
33815: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33816: LD_ADDR_VAR 0 6
33820: PUSH
33821: LD_VAR 0 1
33825: PPUSH
33826: CALL_OW 274
33830: PPUSH
33831: LD_VAR 0 2
33835: PPUSH
33836: LD_INT 0
33838: PPUSH
33839: CALL 31405 0 3
33843: PPUSH
33844: LD_INT 30
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PPUSH
33854: CALL_OW 72
33858: ST_TO_ADDR
// if not factories then
33859: LD_VAR 0 6
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 34834
// for i in factories do
33868: LD_ADDR_VAR 0 8
33872: PUSH
33873: LD_VAR 0 6
33877: PUSH
33878: FOR_IN
33879: IFFALSE 33904
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33881: LD_ADDR_VAR 0 17
33885: PUSH
33886: LD_VAR 0 17
33890: PUSH
33891: LD_VAR 0 8
33895: PPUSH
33896: CALL_OW 478
33900: UNION
33901: ST_TO_ADDR
33902: GO 33878
33904: POP
33905: POP
// if not fac_list then
33906: LD_VAR 0 17
33910: NOT
33911: IFFALSE 33915
// exit ;
33913: GO 34834
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33915: LD_ADDR_VAR 0 5
33919: PUSH
33920: LD_INT 4
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 9
33928: PUSH
33929: LD_INT 10
33931: PUSH
33932: LD_INT 6
33934: PUSH
33935: LD_INT 7
33937: PUSH
33938: LD_INT 11
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 27
33952: PUSH
33953: LD_INT 28
33955: PUSH
33956: LD_INT 26
33958: PUSH
33959: LD_INT 30
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 43
33970: PUSH
33971: LD_INT 44
33973: PUSH
33974: LD_INT 46
33976: PUSH
33977: LD_INT 45
33979: PUSH
33980: LD_INT 47
33982: PUSH
33983: LD_INT 49
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: LD_VAR 0 12
34003: ARRAY
34004: ST_TO_ADDR
// list := list isect fac_list ;
34005: LD_ADDR_VAR 0 5
34009: PUSH
34010: LD_VAR 0 5
34014: PUSH
34015: LD_VAR 0 17
34019: ISECT
34020: ST_TO_ADDR
// if not list then
34021: LD_VAR 0 5
34025: NOT
34026: IFFALSE 34030
// exit ;
34028: GO 34834
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34030: LD_VAR 0 12
34034: PUSH
34035: LD_INT 3
34037: EQUAL
34038: PUSH
34039: LD_INT 49
34041: PUSH
34042: LD_VAR 0 5
34046: IN
34047: AND
34048: PUSH
34049: LD_INT 31
34051: PPUSH
34052: LD_VAR 0 16
34056: PPUSH
34057: CALL_OW 321
34061: PUSH
34062: LD_INT 2
34064: EQUAL
34065: AND
34066: IFFALSE 34126
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34068: LD_INT 22
34070: PUSH
34071: LD_VAR 0 16
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 35
34082: PUSH
34083: LD_INT 49
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 91
34092: PUSH
34093: LD_VAR 0 1
34097: PUSH
34098: LD_INT 10
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: PPUSH
34111: CALL_OW 69
34115: NOT
34116: IFFALSE 34126
// weapon := ru_time_lapser ;
34118: LD_ADDR_VAR 0 18
34122: PUSH
34123: LD_INT 49
34125: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34126: LD_VAR 0 12
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: IN
34141: PUSH
34142: LD_INT 11
34144: PUSH
34145: LD_VAR 0 5
34149: IN
34150: PUSH
34151: LD_INT 30
34153: PUSH
34154: LD_VAR 0 5
34158: IN
34159: OR
34160: AND
34161: PUSH
34162: LD_INT 6
34164: PPUSH
34165: LD_VAR 0 16
34169: PPUSH
34170: CALL_OW 321
34174: PUSH
34175: LD_INT 2
34177: EQUAL
34178: AND
34179: IFFALSE 34344
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34181: LD_INT 22
34183: PUSH
34184: LD_VAR 0 16
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 35
34198: PUSH
34199: LD_INT 11
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 35
34208: PUSH
34209: LD_INT 30
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 91
34223: PUSH
34224: LD_VAR 0 1
34228: PUSH
34229: LD_INT 18
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: PPUSH
34242: CALL_OW 69
34246: NOT
34247: PUSH
34248: LD_INT 22
34250: PUSH
34251: LD_VAR 0 16
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 30
34265: PUSH
34266: LD_INT 32
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 30
34275: PUSH
34276: LD_INT 33
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 91
34290: PUSH
34291: LD_VAR 0 1
34295: PUSH
34296: LD_INT 12
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: PUSH
34309: EMPTY
34310: LIST
34311: PPUSH
34312: CALL_OW 69
34316: PUSH
34317: LD_INT 2
34319: GREATER
34320: AND
34321: IFFALSE 34344
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34323: LD_ADDR_VAR 0 18
34327: PUSH
34328: LD_INT 11
34330: PUSH
34331: LD_INT 30
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_VAR 0 12
34342: ARRAY
34343: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34344: LD_VAR 0 18
34348: NOT
34349: PUSH
34350: LD_INT 40
34352: PPUSH
34353: LD_VAR 0 16
34357: PPUSH
34358: CALL_OW 321
34362: PUSH
34363: LD_INT 2
34365: EQUAL
34366: AND
34367: PUSH
34368: LD_INT 7
34370: PUSH
34371: LD_VAR 0 5
34375: IN
34376: PUSH
34377: LD_INT 28
34379: PUSH
34380: LD_VAR 0 5
34384: IN
34385: OR
34386: PUSH
34387: LD_INT 45
34389: PUSH
34390: LD_VAR 0 5
34394: IN
34395: OR
34396: AND
34397: IFFALSE 34651
// begin hex := GetHexInfo ( x , y ) ;
34399: LD_ADDR_VAR 0 4
34403: PUSH
34404: LD_VAR 0 10
34408: PPUSH
34409: LD_VAR 0 11
34413: PPUSH
34414: CALL_OW 546
34418: ST_TO_ADDR
// if hex [ 1 ] then
34419: LD_VAR 0 4
34423: PUSH
34424: LD_INT 1
34426: ARRAY
34427: IFFALSE 34431
// exit ;
34429: GO 34834
// height := hex [ 2 ] ;
34431: LD_ADDR_VAR 0 15
34435: PUSH
34436: LD_VAR 0 4
34440: PUSH
34441: LD_INT 2
34443: ARRAY
34444: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34445: LD_ADDR_VAR 0 14
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 3
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
// for i in tmp do
34468: LD_ADDR_VAR 0 8
34472: PUSH
34473: LD_VAR 0 14
34477: PUSH
34478: FOR_IN
34479: IFFALSE 34649
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_VAR 0 10
34490: PPUSH
34491: LD_VAR 0 8
34495: PPUSH
34496: LD_INT 5
34498: PPUSH
34499: CALL_OW 272
34503: PUSH
34504: LD_VAR 0 11
34508: PPUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: LD_INT 5
34516: PPUSH
34517: CALL_OW 273
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34526: LD_VAR 0 9
34530: PUSH
34531: LD_INT 1
34533: ARRAY
34534: PPUSH
34535: LD_VAR 0 9
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 488
34548: IFFALSE 34647
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34550: LD_ADDR_VAR 0 4
34554: PUSH
34555: LD_VAR 0 9
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: PPUSH
34564: LD_VAR 0 9
34568: PUSH
34569: LD_INT 2
34571: ARRAY
34572: PPUSH
34573: CALL_OW 546
34577: ST_TO_ADDR
// if hex [ 1 ] then
34578: LD_VAR 0 4
34582: PUSH
34583: LD_INT 1
34585: ARRAY
34586: IFFALSE 34590
// continue ;
34588: GO 34478
// h := hex [ 2 ] ;
34590: LD_ADDR_VAR 0 13
34594: PUSH
34595: LD_VAR 0 4
34599: PUSH
34600: LD_INT 2
34602: ARRAY
34603: ST_TO_ADDR
// if h + 7 < height then
34604: LD_VAR 0 13
34608: PUSH
34609: LD_INT 7
34611: PLUS
34612: PUSH
34613: LD_VAR 0 15
34617: LESS
34618: IFFALSE 34647
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34620: LD_ADDR_VAR 0 18
34624: PUSH
34625: LD_INT 7
34627: PUSH
34628: LD_INT 28
34630: PUSH
34631: LD_INT 45
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: PUSH
34639: LD_VAR 0 12
34643: ARRAY
34644: ST_TO_ADDR
// break ;
34645: GO 34649
// end ; end ; end ;
34647: GO 34478
34649: POP
34650: POP
// end ; if not weapon then
34651: LD_VAR 0 18
34655: NOT
34656: IFFALSE 34716
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34658: LD_ADDR_VAR 0 5
34662: PUSH
34663: LD_VAR 0 5
34667: PUSH
34668: LD_INT 11
34670: PUSH
34671: LD_INT 30
34673: PUSH
34674: LD_INT 49
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: DIFF
34682: ST_TO_ADDR
// if not list then
34683: LD_VAR 0 5
34687: NOT
34688: IFFALSE 34692
// exit ;
34690: GO 34834
// weapon := list [ rand ( 1 , list ) ] ;
34692: LD_ADDR_VAR 0 18
34696: PUSH
34697: LD_VAR 0 5
34701: PUSH
34702: LD_INT 1
34704: PPUSH
34705: LD_VAR 0 5
34709: PPUSH
34710: CALL_OW 12
34714: ARRAY
34715: ST_TO_ADDR
// end ; if weapon then
34716: LD_VAR 0 18
34720: IFFALSE 34834
// begin tmp := CostOfWeapon ( weapon ) ;
34722: LD_ADDR_VAR 0 14
34726: PUSH
34727: LD_VAR 0 18
34731: PPUSH
34732: CALL_OW 451
34736: ST_TO_ADDR
// j := GetBase ( tower ) ;
34737: LD_ADDR_VAR 0 9
34741: PUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 274
34751: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34752: LD_VAR 0 9
34756: PPUSH
34757: LD_INT 1
34759: PPUSH
34760: CALL_OW 275
34764: PUSH
34765: LD_VAR 0 14
34769: PUSH
34770: LD_INT 1
34772: ARRAY
34773: GREATEREQUAL
34774: PUSH
34775: LD_VAR 0 9
34779: PPUSH
34780: LD_INT 2
34782: PPUSH
34783: CALL_OW 275
34787: PUSH
34788: LD_VAR 0 14
34792: PUSH
34793: LD_INT 2
34795: ARRAY
34796: GREATEREQUAL
34797: AND
34798: PUSH
34799: LD_VAR 0 9
34803: PPUSH
34804: LD_INT 3
34806: PPUSH
34807: CALL_OW 275
34811: PUSH
34812: LD_VAR 0 14
34816: PUSH
34817: LD_INT 3
34819: ARRAY
34820: GREATEREQUAL
34821: AND
34822: IFFALSE 34834
// result := weapon ;
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_VAR 0 18
34833: ST_TO_ADDR
// end ; end ;
34834: LD_VAR 0 3
34838: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34839: LD_INT 0
34841: PPUSH
34842: PPUSH
// result := true ;
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: LD_INT 1
34850: ST_TO_ADDR
// if array1 = array2 then
34851: LD_VAR 0 1
34855: PUSH
34856: LD_VAR 0 2
34860: EQUAL
34861: IFFALSE 34921
// begin for i = 1 to array1 do
34863: LD_ADDR_VAR 0 4
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_VAR 0 1
34877: PUSH
34878: FOR_TO
34879: IFFALSE 34917
// if array1 [ i ] <> array2 [ i ] then
34881: LD_VAR 0 1
34885: PUSH
34886: LD_VAR 0 4
34890: ARRAY
34891: PUSH
34892: LD_VAR 0 2
34896: PUSH
34897: LD_VAR 0 4
34901: ARRAY
34902: NONEQUAL
34903: IFFALSE 34915
// begin result := false ;
34905: LD_ADDR_VAR 0 3
34909: PUSH
34910: LD_INT 0
34912: ST_TO_ADDR
// break ;
34913: GO 34917
// end ;
34915: GO 34878
34917: POP
34918: POP
// end else
34919: GO 34929
// result := false ;
34921: LD_ADDR_VAR 0 3
34925: PUSH
34926: LD_INT 0
34928: ST_TO_ADDR
// end ;
34929: LD_VAR 0 3
34933: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34934: LD_INT 0
34936: PPUSH
34937: PPUSH
// if not array1 or not array2 then
34938: LD_VAR 0 1
34942: NOT
34943: PUSH
34944: LD_VAR 0 2
34948: NOT
34949: OR
34950: IFFALSE 34954
// exit ;
34952: GO 35018
// result := true ;
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 1
34961: ST_TO_ADDR
// for i = 1 to array1 do
34962: LD_ADDR_VAR 0 4
34966: PUSH
34967: DOUBLE
34968: LD_INT 1
34970: DEC
34971: ST_TO_ADDR
34972: LD_VAR 0 1
34976: PUSH
34977: FOR_TO
34978: IFFALSE 35016
// if array1 [ i ] <> array2 [ i ] then
34980: LD_VAR 0 1
34984: PUSH
34985: LD_VAR 0 4
34989: ARRAY
34990: PUSH
34991: LD_VAR 0 2
34995: PUSH
34996: LD_VAR 0 4
35000: ARRAY
35001: NONEQUAL
35002: IFFALSE 35014
// begin result := false ;
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_INT 0
35011: ST_TO_ADDR
// break ;
35012: GO 35016
// end ;
35014: GO 34977
35016: POP
35017: POP
// end ;
35018: LD_VAR 0 3
35022: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35023: LD_INT 0
35025: PPUSH
35026: PPUSH
35027: PPUSH
// pom := GetBase ( fac ) ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: CALL_OW 274
35042: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35043: LD_ADDR_VAR 0 4
35047: PUSH
35048: LD_VAR 0 2
35052: PUSH
35053: LD_INT 1
35055: ARRAY
35056: PPUSH
35057: LD_VAR 0 2
35061: PUSH
35062: LD_INT 2
35064: ARRAY
35065: PPUSH
35066: LD_VAR 0 2
35070: PUSH
35071: LD_INT 3
35073: ARRAY
35074: PPUSH
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 4
35082: ARRAY
35083: PPUSH
35084: CALL_OW 449
35088: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_VAR 0 5
35098: PPUSH
35099: LD_INT 1
35101: PPUSH
35102: CALL_OW 275
35106: PUSH
35107: LD_VAR 0 4
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: GREATEREQUAL
35116: PUSH
35117: LD_VAR 0 5
35121: PPUSH
35122: LD_INT 2
35124: PPUSH
35125: CALL_OW 275
35129: PUSH
35130: LD_VAR 0 4
35134: PUSH
35135: LD_INT 2
35137: ARRAY
35138: GREATEREQUAL
35139: AND
35140: PUSH
35141: LD_VAR 0 5
35145: PPUSH
35146: LD_INT 3
35148: PPUSH
35149: CALL_OW 275
35153: PUSH
35154: LD_VAR 0 4
35158: PUSH
35159: LD_INT 3
35161: ARRAY
35162: GREATEREQUAL
35163: AND
35164: ST_TO_ADDR
// end ;
35165: LD_VAR 0 3
35169: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
// pom := GetBase ( building ) ;
35176: LD_ADDR_VAR 0 3
35180: PUSH
35181: LD_VAR 0 1
35185: PPUSH
35186: CALL_OW 274
35190: ST_TO_ADDR
// if not pom then
35191: LD_VAR 0 3
35195: NOT
35196: IFFALSE 35200
// exit ;
35198: GO 35370
// btype := GetBType ( building ) ;
35200: LD_ADDR_VAR 0 5
35204: PUSH
35205: LD_VAR 0 1
35209: PPUSH
35210: CALL_OW 266
35214: ST_TO_ADDR
// if btype = b_armoury then
35215: LD_VAR 0 5
35219: PUSH
35220: LD_INT 4
35222: EQUAL
35223: IFFALSE 35233
// btype := b_barracks ;
35225: LD_ADDR_VAR 0 5
35229: PUSH
35230: LD_INT 5
35232: ST_TO_ADDR
// if btype = b_depot then
35233: LD_VAR 0 5
35237: PUSH
35238: LD_INT 0
35240: EQUAL
35241: IFFALSE 35251
// btype := b_warehouse ;
35243: LD_ADDR_VAR 0 5
35247: PUSH
35248: LD_INT 1
35250: ST_TO_ADDR
// if btype = b_workshop then
35251: LD_VAR 0 5
35255: PUSH
35256: LD_INT 2
35258: EQUAL
35259: IFFALSE 35269
// btype := b_factory ;
35261: LD_ADDR_VAR 0 5
35265: PUSH
35266: LD_INT 3
35268: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: LD_VAR 0 5
35278: PPUSH
35279: LD_VAR 0 1
35283: PPUSH
35284: CALL_OW 248
35288: PPUSH
35289: CALL_OW 450
35293: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35294: LD_ADDR_VAR 0 2
35298: PUSH
35299: LD_VAR 0 3
35303: PPUSH
35304: LD_INT 1
35306: PPUSH
35307: CALL_OW 275
35311: PUSH
35312: LD_VAR 0 4
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: GREATEREQUAL
35321: PUSH
35322: LD_VAR 0 3
35326: PPUSH
35327: LD_INT 2
35329: PPUSH
35330: CALL_OW 275
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: GREATEREQUAL
35344: AND
35345: PUSH
35346: LD_VAR 0 3
35350: PPUSH
35351: LD_INT 3
35353: PPUSH
35354: CALL_OW 275
35358: PUSH
35359: LD_VAR 0 4
35363: PUSH
35364: LD_INT 3
35366: ARRAY
35367: GREATEREQUAL
35368: AND
35369: ST_TO_ADDR
// end ;
35370: LD_VAR 0 2
35374: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
// pom := GetBase ( building ) ;
35380: LD_ADDR_VAR 0 4
35384: PUSH
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 274
35394: ST_TO_ADDR
// if not pom then
35395: LD_VAR 0 4
35399: NOT
35400: IFFALSE 35404
// exit ;
35402: GO 35505
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35404: LD_ADDR_VAR 0 5
35408: PUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 248
35423: PPUSH
35424: CALL_OW 450
35428: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35429: LD_ADDR_VAR 0 3
35433: PUSH
35434: LD_VAR 0 4
35438: PPUSH
35439: LD_INT 1
35441: PPUSH
35442: CALL_OW 275
35446: PUSH
35447: LD_VAR 0 5
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: GREATEREQUAL
35456: PUSH
35457: LD_VAR 0 4
35461: PPUSH
35462: LD_INT 2
35464: PPUSH
35465: CALL_OW 275
35469: PUSH
35470: LD_VAR 0 5
35474: PUSH
35475: LD_INT 2
35477: ARRAY
35478: GREATEREQUAL
35479: AND
35480: PUSH
35481: LD_VAR 0 4
35485: PPUSH
35486: LD_INT 3
35488: PPUSH
35489: CALL_OW 275
35493: PUSH
35494: LD_VAR 0 5
35498: PUSH
35499: LD_INT 3
35501: ARRAY
35502: GREATEREQUAL
35503: AND
35504: ST_TO_ADDR
// end ;
35505: LD_VAR 0 3
35509: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35510: LD_INT 0
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
35521: PPUSH
35522: PPUSH
// result := false ;
35523: LD_ADDR_VAR 0 8
35527: PUSH
35528: LD_INT 0
35530: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35531: LD_VAR 0 5
35535: NOT
35536: PUSH
35537: LD_VAR 0 1
35541: NOT
35542: OR
35543: PUSH
35544: LD_VAR 0 2
35548: NOT
35549: OR
35550: PUSH
35551: LD_VAR 0 3
35555: NOT
35556: OR
35557: IFFALSE 35561
// exit ;
35559: GO 36375
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35561: LD_ADDR_VAR 0 14
35565: PUSH
35566: LD_VAR 0 1
35570: PPUSH
35571: LD_VAR 0 2
35575: PPUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: LD_VAR 0 5
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: CALL_OW 248
35599: PPUSH
35600: LD_INT 0
35602: PPUSH
35603: CALL 37608 0 6
35607: ST_TO_ADDR
// if not hexes then
35608: LD_VAR 0 14
35612: NOT
35613: IFFALSE 35617
// exit ;
35615: GO 36375
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35617: LD_ADDR_VAR 0 17
35621: PUSH
35622: LD_VAR 0 5
35626: PPUSH
35627: LD_INT 22
35629: PUSH
35630: LD_VAR 0 13
35634: PPUSH
35635: CALL_OW 255
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 30
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 30
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PPUSH
35676: CALL_OW 72
35680: ST_TO_ADDR
// for i = 1 to hexes do
35681: LD_ADDR_VAR 0 9
35685: PUSH
35686: DOUBLE
35687: LD_INT 1
35689: DEC
35690: ST_TO_ADDR
35691: LD_VAR 0 14
35695: PUSH
35696: FOR_TO
35697: IFFALSE 36373
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35699: LD_ADDR_VAR 0 13
35703: PUSH
35704: LD_VAR 0 14
35708: PUSH
35709: LD_VAR 0 9
35713: ARRAY
35714: PUSH
35715: LD_INT 1
35717: ARRAY
35718: PPUSH
35719: LD_VAR 0 14
35723: PUSH
35724: LD_VAR 0 9
35728: ARRAY
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: CALL_OW 428
35738: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35739: LD_VAR 0 14
35743: PUSH
35744: LD_VAR 0 9
35748: ARRAY
35749: PUSH
35750: LD_INT 1
35752: ARRAY
35753: PPUSH
35754: LD_VAR 0 14
35758: PUSH
35759: LD_VAR 0 9
35763: ARRAY
35764: PUSH
35765: LD_INT 2
35767: ARRAY
35768: PPUSH
35769: CALL_OW 351
35773: PUSH
35774: LD_VAR 0 14
35778: PUSH
35779: LD_VAR 0 9
35783: ARRAY
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: PPUSH
35789: LD_VAR 0 14
35793: PUSH
35794: LD_VAR 0 9
35798: ARRAY
35799: PUSH
35800: LD_INT 2
35802: ARRAY
35803: PPUSH
35804: CALL_OW 488
35808: NOT
35809: OR
35810: PUSH
35811: LD_VAR 0 13
35815: PPUSH
35816: CALL_OW 247
35820: PUSH
35821: LD_INT 3
35823: EQUAL
35824: OR
35825: IFFALSE 35831
// exit ;
35827: POP
35828: POP
35829: GO 36375
// if not tmp then
35831: LD_VAR 0 13
35835: NOT
35836: IFFALSE 35840
// continue ;
35838: GO 35696
// result := true ;
35840: LD_ADDR_VAR 0 8
35844: PUSH
35845: LD_INT 1
35847: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35848: LD_VAR 0 6
35852: PUSH
35853: LD_VAR 0 13
35857: PPUSH
35858: CALL_OW 247
35862: PUSH
35863: LD_INT 2
35865: EQUAL
35866: AND
35867: PUSH
35868: LD_VAR 0 13
35872: PPUSH
35873: CALL_OW 263
35877: PUSH
35878: LD_INT 1
35880: EQUAL
35881: AND
35882: IFFALSE 36046
// begin if IsDrivenBy ( tmp ) then
35884: LD_VAR 0 13
35888: PPUSH
35889: CALL_OW 311
35893: IFFALSE 35897
// continue ;
35895: GO 35696
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35897: LD_VAR 0 6
35901: PPUSH
35902: LD_INT 3
35904: PUSH
35905: LD_INT 60
35907: PUSH
35908: EMPTY
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: LD_INT 55
35920: PUSH
35921: EMPTY
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PPUSH
35932: CALL_OW 72
35936: IFFALSE 36044
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35938: LD_ADDR_VAR 0 18
35942: PUSH
35943: LD_VAR 0 6
35947: PPUSH
35948: LD_INT 3
35950: PUSH
35951: LD_INT 60
35953: PUSH
35954: EMPTY
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 3
35963: PUSH
35964: LD_INT 55
35966: PUSH
35967: EMPTY
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PPUSH
35978: CALL_OW 72
35982: PUSH
35983: LD_INT 1
35985: ARRAY
35986: ST_TO_ADDR
// if IsInUnit ( driver ) then
35987: LD_VAR 0 18
35991: PPUSH
35992: CALL_OW 310
35996: IFFALSE 36007
// ComExit ( driver ) ;
35998: LD_VAR 0 18
36002: PPUSH
36003: CALL 61388 0 1
// AddComEnterUnit ( driver , tmp ) ;
36007: LD_VAR 0 18
36011: PPUSH
36012: LD_VAR 0 13
36016: PPUSH
36017: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36021: LD_VAR 0 18
36025: PPUSH
36026: LD_VAR 0 7
36030: PPUSH
36031: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36035: LD_VAR 0 18
36039: PPUSH
36040: CALL_OW 181
// end ; continue ;
36044: GO 35696
// end ; if not cleaners or not tmp in cleaners then
36046: LD_VAR 0 6
36050: NOT
36051: PUSH
36052: LD_VAR 0 13
36056: PUSH
36057: LD_VAR 0 6
36061: IN
36062: NOT
36063: OR
36064: IFFALSE 36371
// begin if dep then
36066: LD_VAR 0 17
36070: IFFALSE 36206
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36072: LD_ADDR_VAR 0 16
36076: PUSH
36077: LD_VAR 0 17
36081: PUSH
36082: LD_INT 1
36084: ARRAY
36085: PPUSH
36086: CALL_OW 250
36090: PPUSH
36091: LD_VAR 0 17
36095: PUSH
36096: LD_INT 1
36098: ARRAY
36099: PPUSH
36100: CALL_OW 254
36104: PPUSH
36105: LD_INT 5
36107: PPUSH
36108: CALL_OW 272
36112: PUSH
36113: LD_VAR 0 17
36117: PUSH
36118: LD_INT 1
36120: ARRAY
36121: PPUSH
36122: CALL_OW 251
36126: PPUSH
36127: LD_VAR 0 17
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: CALL_OW 254
36140: PPUSH
36141: LD_INT 5
36143: PPUSH
36144: CALL_OW 273
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36153: LD_VAR 0 16
36157: PUSH
36158: LD_INT 1
36160: ARRAY
36161: PPUSH
36162: LD_VAR 0 16
36166: PUSH
36167: LD_INT 2
36169: ARRAY
36170: PPUSH
36171: CALL_OW 488
36175: IFFALSE 36206
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36177: LD_VAR 0 13
36181: PPUSH
36182: LD_VAR 0 16
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PPUSH
36191: LD_VAR 0 16
36195: PUSH
36196: LD_INT 2
36198: ARRAY
36199: PPUSH
36200: CALL_OW 111
// continue ;
36204: GO 35696
// end ; end ; r := GetDir ( tmp ) ;
36206: LD_ADDR_VAR 0 15
36210: PUSH
36211: LD_VAR 0 13
36215: PPUSH
36216: CALL_OW 254
36220: ST_TO_ADDR
// if r = 5 then
36221: LD_VAR 0 15
36225: PUSH
36226: LD_INT 5
36228: EQUAL
36229: IFFALSE 36239
// r := 0 ;
36231: LD_ADDR_VAR 0 15
36235: PUSH
36236: LD_INT 0
36238: ST_TO_ADDR
// for j = r to 5 do
36239: LD_ADDR_VAR 0 10
36243: PUSH
36244: DOUBLE
36245: LD_VAR 0 15
36249: DEC
36250: ST_TO_ADDR
36251: LD_INT 5
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36369
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36257: LD_ADDR_VAR 0 11
36261: PUSH
36262: LD_VAR 0 13
36266: PPUSH
36267: CALL_OW 250
36271: PPUSH
36272: LD_VAR 0 10
36276: PPUSH
36277: LD_INT 2
36279: PPUSH
36280: CALL_OW 272
36284: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36285: LD_ADDR_VAR 0 12
36289: PUSH
36290: LD_VAR 0 13
36294: PPUSH
36295: CALL_OW 251
36299: PPUSH
36300: LD_VAR 0 10
36304: PPUSH
36305: LD_INT 2
36307: PPUSH
36308: CALL_OW 273
36312: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36313: LD_VAR 0 11
36317: PPUSH
36318: LD_VAR 0 12
36322: PPUSH
36323: CALL_OW 488
36327: PUSH
36328: LD_VAR 0 11
36332: PPUSH
36333: LD_VAR 0 12
36337: PPUSH
36338: CALL_OW 428
36342: NOT
36343: AND
36344: IFFALSE 36367
// begin ComMoveXY ( tmp , _x , _y ) ;
36346: LD_VAR 0 13
36350: PPUSH
36351: LD_VAR 0 11
36355: PPUSH
36356: LD_VAR 0 12
36360: PPUSH
36361: CALL_OW 111
// break ;
36365: GO 36369
// end ; end ;
36367: GO 36254
36369: POP
36370: POP
// end ; end ;
36371: GO 35696
36373: POP
36374: POP
// end ;
36375: LD_VAR 0 8
36379: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36380: LD_INT 0
36382: PPUSH
// result := true ;
36383: LD_ADDR_VAR 0 3
36387: PUSH
36388: LD_INT 1
36390: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 24
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36410
36402: LD_INT 33
36404: DOUBLE
36405: EQUAL
36406: IFTRUE 36410
36408: GO 36435
36410: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36411: LD_ADDR_VAR 0 3
36415: PUSH
36416: LD_INT 32
36418: PPUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL_OW 321
36428: PUSH
36429: LD_INT 2
36431: EQUAL
36432: ST_TO_ADDR
36433: GO 36751
36435: LD_INT 20
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36443
36441: GO 36468
36443: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36444: LD_ADDR_VAR 0 3
36448: PUSH
36449: LD_INT 6
36451: PPUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 321
36461: PUSH
36462: LD_INT 2
36464: EQUAL
36465: ST_TO_ADDR
36466: GO 36751
36468: LD_INT 22
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36482
36474: LD_INT 36
36476: DOUBLE
36477: EQUAL
36478: IFTRUE 36482
36480: GO 36507
36482: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_INT 15
36490: PPUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 321
36500: PUSH
36501: LD_INT 2
36503: EQUAL
36504: ST_TO_ADDR
36505: GO 36751
36507: LD_INT 30
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 36540
36515: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_INT 20
36523: PPUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 321
36533: PUSH
36534: LD_INT 2
36536: EQUAL
36537: ST_TO_ADDR
36538: GO 36751
36540: LD_INT 28
36542: DOUBLE
36543: EQUAL
36544: IFTRUE 36554
36546: LD_INT 21
36548: DOUBLE
36549: EQUAL
36550: IFTRUE 36554
36552: GO 36579
36554: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36555: LD_ADDR_VAR 0 3
36559: PUSH
36560: LD_INT 21
36562: PPUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: CALL_OW 321
36572: PUSH
36573: LD_INT 2
36575: EQUAL
36576: ST_TO_ADDR
36577: GO 36751
36579: LD_INT 16
36581: DOUBLE
36582: EQUAL
36583: IFTRUE 36587
36585: GO 36612
36587: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36588: LD_ADDR_VAR 0 3
36592: PUSH
36593: LD_INT 84
36595: PPUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 321
36605: PUSH
36606: LD_INT 2
36608: EQUAL
36609: ST_TO_ADDR
36610: GO 36751
36612: LD_INT 19
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36626
36618: LD_INT 23
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36626
36624: GO 36651
36626: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36627: LD_ADDR_VAR 0 3
36631: PUSH
36632: LD_INT 83
36634: PPUSH
36635: LD_VAR 0 1
36639: PPUSH
36640: CALL_OW 321
36644: PUSH
36645: LD_INT 2
36647: EQUAL
36648: ST_TO_ADDR
36649: GO 36751
36651: LD_INT 17
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36684
36659: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_INT 39
36667: PPUSH
36668: LD_VAR 0 1
36672: PPUSH
36673: CALL_OW 321
36677: PUSH
36678: LD_INT 2
36680: EQUAL
36681: ST_TO_ADDR
36682: GO 36751
36684: LD_INT 18
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36717
36692: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_INT 40
36700: PPUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: CALL_OW 321
36710: PUSH
36711: LD_INT 2
36713: EQUAL
36714: ST_TO_ADDR
36715: GO 36751
36717: LD_INT 27
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 36750
36725: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: LD_INT 35
36733: PPUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: CALL_OW 321
36743: PUSH
36744: LD_INT 2
36746: EQUAL
36747: ST_TO_ADDR
36748: GO 36751
36750: POP
// end ;
36751: LD_VAR 0 3
36755: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36756: LD_INT 0
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
// result := false ;
36769: LD_ADDR_VAR 0 6
36773: PUSH
36774: LD_INT 0
36776: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36777: LD_VAR 0 1
36781: NOT
36782: PUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 266
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: IN
36803: NOT
36804: OR
36805: PUSH
36806: LD_VAR 0 2
36810: NOT
36811: OR
36812: PUSH
36813: LD_VAR 0 5
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: LD_INT 4
36832: PUSH
36833: LD_INT 5
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: IN
36844: NOT
36845: OR
36846: PUSH
36847: LD_VAR 0 3
36851: PPUSH
36852: LD_VAR 0 4
36856: PPUSH
36857: CALL_OW 488
36861: NOT
36862: OR
36863: IFFALSE 36867
// exit ;
36865: GO 37603
// side := GetSide ( depot ) ;
36867: LD_ADDR_VAR 0 9
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 255
36881: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36882: LD_VAR 0 9
36886: PPUSH
36887: LD_VAR 0 2
36891: PPUSH
36892: CALL 36380 0 2
36896: NOT
36897: IFFALSE 36901
// exit ;
36899: GO 37603
// pom := GetBase ( depot ) ;
36901: LD_ADDR_VAR 0 10
36905: PUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 274
36915: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36916: LD_ADDR_VAR 0 11
36920: PUSH
36921: LD_VAR 0 2
36925: PPUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL_OW 248
36935: PPUSH
36936: CALL_OW 450
36940: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36941: LD_VAR 0 10
36945: PPUSH
36946: LD_INT 1
36948: PPUSH
36949: CALL_OW 275
36953: PUSH
36954: LD_VAR 0 11
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: GREATEREQUAL
36963: PUSH
36964: LD_VAR 0 10
36968: PPUSH
36969: LD_INT 2
36971: PPUSH
36972: CALL_OW 275
36976: PUSH
36977: LD_VAR 0 11
36981: PUSH
36982: LD_INT 2
36984: ARRAY
36985: GREATEREQUAL
36986: AND
36987: PUSH
36988: LD_VAR 0 10
36992: PPUSH
36993: LD_INT 3
36995: PPUSH
36996: CALL_OW 275
37000: PUSH
37001: LD_VAR 0 11
37005: PUSH
37006: LD_INT 3
37008: ARRAY
37009: GREATEREQUAL
37010: AND
37011: NOT
37012: IFFALSE 37016
// exit ;
37014: GO 37603
// if GetBType ( depot ) = b_depot then
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 266
37025: PUSH
37026: LD_INT 0
37028: EQUAL
37029: IFFALSE 37041
// dist := 28 else
37031: LD_ADDR_VAR 0 14
37035: PUSH
37036: LD_INT 28
37038: ST_TO_ADDR
37039: GO 37049
// dist := 36 ;
37041: LD_ADDR_VAR 0 14
37045: PUSH
37046: LD_INT 36
37048: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37049: LD_VAR 0 1
37053: PPUSH
37054: LD_VAR 0 3
37058: PPUSH
37059: LD_VAR 0 4
37063: PPUSH
37064: CALL_OW 297
37068: PUSH
37069: LD_VAR 0 14
37073: GREATER
37074: IFFALSE 37078
// exit ;
37076: GO 37603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37078: LD_ADDR_VAR 0 12
37082: PUSH
37083: LD_VAR 0 2
37087: PPUSH
37088: LD_VAR 0 3
37092: PPUSH
37093: LD_VAR 0 4
37097: PPUSH
37098: LD_VAR 0 5
37102: PPUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: CALL_OW 248
37112: PPUSH
37113: LD_INT 0
37115: PPUSH
37116: CALL 37608 0 6
37120: ST_TO_ADDR
// if not hexes then
37121: LD_VAR 0 12
37125: NOT
37126: IFFALSE 37130
// exit ;
37128: GO 37603
// hex := GetHexInfo ( x , y ) ;
37130: LD_ADDR_VAR 0 15
37134: PUSH
37135: LD_VAR 0 3
37139: PPUSH
37140: LD_VAR 0 4
37144: PPUSH
37145: CALL_OW 546
37149: ST_TO_ADDR
// if hex [ 1 ] then
37150: LD_VAR 0 15
37154: PUSH
37155: LD_INT 1
37157: ARRAY
37158: IFFALSE 37162
// exit ;
37160: GO 37603
// height := hex [ 2 ] ;
37162: LD_ADDR_VAR 0 13
37166: PUSH
37167: LD_VAR 0 15
37171: PUSH
37172: LD_INT 2
37174: ARRAY
37175: ST_TO_ADDR
// for i = 1 to hexes do
37176: LD_ADDR_VAR 0 7
37180: PUSH
37181: DOUBLE
37182: LD_INT 1
37184: DEC
37185: ST_TO_ADDR
37186: LD_VAR 0 12
37190: PUSH
37191: FOR_TO
37192: IFFALSE 37522
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37194: LD_VAR 0 12
37198: PUSH
37199: LD_VAR 0 7
37203: ARRAY
37204: PUSH
37205: LD_INT 1
37207: ARRAY
37208: PPUSH
37209: LD_VAR 0 12
37213: PUSH
37214: LD_VAR 0 7
37218: ARRAY
37219: PUSH
37220: LD_INT 2
37222: ARRAY
37223: PPUSH
37224: CALL_OW 488
37228: NOT
37229: PUSH
37230: LD_VAR 0 12
37234: PUSH
37235: LD_VAR 0 7
37239: ARRAY
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 12
37249: PUSH
37250: LD_VAR 0 7
37254: ARRAY
37255: PUSH
37256: LD_INT 2
37258: ARRAY
37259: PPUSH
37260: CALL_OW 428
37264: PUSH
37265: LD_INT 0
37267: GREATER
37268: OR
37269: PUSH
37270: LD_VAR 0 12
37274: PUSH
37275: LD_VAR 0 7
37279: ARRAY
37280: PUSH
37281: LD_INT 1
37283: ARRAY
37284: PPUSH
37285: LD_VAR 0 12
37289: PUSH
37290: LD_VAR 0 7
37294: ARRAY
37295: PUSH
37296: LD_INT 2
37298: ARRAY
37299: PPUSH
37300: CALL_OW 351
37304: OR
37305: IFFALSE 37311
// exit ;
37307: POP
37308: POP
37309: GO 37603
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37311: LD_ADDR_VAR 0 8
37315: PUSH
37316: LD_VAR 0 12
37320: PUSH
37321: LD_VAR 0 7
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PPUSH
37331: LD_VAR 0 12
37335: PUSH
37336: LD_VAR 0 7
37340: ARRAY
37341: PUSH
37342: LD_INT 2
37344: ARRAY
37345: PPUSH
37346: CALL_OW 546
37350: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37351: LD_VAR 0 8
37355: PUSH
37356: LD_INT 1
37358: ARRAY
37359: PUSH
37360: LD_VAR 0 8
37364: PUSH
37365: LD_INT 2
37367: ARRAY
37368: PUSH
37369: LD_VAR 0 13
37373: PUSH
37374: LD_INT 2
37376: PLUS
37377: GREATER
37378: OR
37379: PUSH
37380: LD_VAR 0 8
37384: PUSH
37385: LD_INT 2
37387: ARRAY
37388: PUSH
37389: LD_VAR 0 13
37393: PUSH
37394: LD_INT 2
37396: MINUS
37397: LESS
37398: OR
37399: PUSH
37400: LD_VAR 0 8
37404: PUSH
37405: LD_INT 3
37407: ARRAY
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 8
37414: PUSH
37415: LD_INT 9
37417: PUSH
37418: LD_INT 10
37420: PUSH
37421: LD_INT 11
37423: PUSH
37424: LD_INT 12
37426: PUSH
37427: LD_INT 13
37429: PUSH
37430: LD_INT 16
37432: PUSH
37433: LD_INT 17
37435: PUSH
37436: LD_INT 18
37438: PUSH
37439: LD_INT 19
37441: PUSH
37442: LD_INT 20
37444: PUSH
37445: LD_INT 21
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: IN
37463: NOT
37464: OR
37465: PUSH
37466: LD_VAR 0 8
37470: PUSH
37471: LD_INT 5
37473: ARRAY
37474: NOT
37475: OR
37476: PUSH
37477: LD_VAR 0 8
37481: PUSH
37482: LD_INT 6
37484: ARRAY
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 7
37494: PUSH
37495: LD_INT 9
37497: PUSH
37498: LD_INT 10
37500: PUSH
37501: LD_INT 11
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: IN
37512: NOT
37513: OR
37514: IFFALSE 37520
// exit ;
37516: POP
37517: POP
37518: GO 37603
// end ;
37520: GO 37191
37522: POP
37523: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37524: LD_VAR 0 9
37528: PPUSH
37529: LD_VAR 0 3
37533: PPUSH
37534: LD_VAR 0 4
37538: PPUSH
37539: LD_INT 20
37541: PPUSH
37542: CALL 29555 0 4
37546: PUSH
37547: LD_INT 4
37549: ARRAY
37550: IFFALSE 37554
// exit ;
37552: GO 37603
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37554: LD_VAR 0 2
37558: PUSH
37559: LD_INT 29
37561: PUSH
37562: LD_INT 30
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: IN
37569: PUSH
37570: LD_VAR 0 3
37574: PPUSH
37575: LD_VAR 0 4
37579: PPUSH
37580: LD_VAR 0 9
37584: PPUSH
37585: CALL_OW 440
37589: NOT
37590: AND
37591: IFFALSE 37595
// exit ;
37593: GO 37603
// result := true ;
37595: LD_ADDR_VAR 0 6
37599: PUSH
37600: LD_INT 1
37602: ST_TO_ADDR
// end ;
37603: LD_VAR 0 6
37607: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37608: LD_INT 0
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
37658: PPUSH
37659: PPUSH
37660: PPUSH
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
// result = [ ] ;
37668: LD_ADDR_VAR 0 7
37672: PUSH
37673: EMPTY
37674: ST_TO_ADDR
// temp_list = [ ] ;
37675: LD_ADDR_VAR 0 9
37679: PUSH
37680: EMPTY
37681: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37682: LD_VAR 0 4
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 4
37701: PUSH
37702: LD_INT 5
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: IN
37713: NOT
37714: PUSH
37715: LD_VAR 0 1
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: IN
37730: PUSH
37731: LD_VAR 0 5
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: IN
37750: NOT
37751: AND
37752: OR
37753: IFFALSE 37757
// exit ;
37755: GO 56148
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37757: LD_VAR 0 1
37761: PUSH
37762: LD_INT 6
37764: PUSH
37765: LD_INT 7
37767: PUSH
37768: LD_INT 8
37770: PUSH
37771: LD_INT 13
37773: PUSH
37774: LD_INT 12
37776: PUSH
37777: LD_INT 15
37779: PUSH
37780: LD_INT 11
37782: PUSH
37783: LD_INT 14
37785: PUSH
37786: LD_INT 10
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: IN
37800: IFFALSE 37810
// btype = b_lab ;
37802: LD_ADDR_VAR 0 1
37806: PUSH
37807: LD_INT 6
37809: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37810: LD_VAR 0 6
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: IN
37829: NOT
37830: PUSH
37831: LD_VAR 0 1
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: LD_INT 6
37850: PUSH
37851: LD_INT 36
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: LD_INT 31
37862: PUSH
37863: LD_INT 32
37865: PUSH
37866: LD_INT 33
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: IN
37882: NOT
37883: PUSH
37884: LD_VAR 0 6
37888: PUSH
37889: LD_INT 1
37891: EQUAL
37892: AND
37893: OR
37894: PUSH
37895: LD_VAR 0 1
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 3
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: IN
37910: NOT
37911: PUSH
37912: LD_VAR 0 6
37916: PUSH
37917: LD_INT 2
37919: EQUAL
37920: AND
37921: OR
37922: IFFALSE 37932
// mode = 0 ;
37924: LD_ADDR_VAR 0 6
37928: PUSH
37929: LD_INT 0
37931: ST_TO_ADDR
// case mode of 0 :
37932: LD_VAR 0 6
37936: PUSH
37937: LD_INT 0
37939: DOUBLE
37940: EQUAL
37941: IFTRUE 37945
37943: GO 49398
37945: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37946: LD_ADDR_VAR 0 11
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 3
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38139: LD_ADDR_VAR 0 12
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 3
38307: NEG
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38335: LD_ADDR_VAR 0 13
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: LD_INT 3
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38534: LD_ADDR_VAR 0 14
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 3
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38730: LD_ADDR_VAR 0 15
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 3
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38923: LD_ADDR_VAR 0 16
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39116: LD_ADDR_VAR 0 17
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39346: LD_ADDR_VAR 0 18
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39576: LD_ADDR_VAR 0 19
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39806: LD_ADDR_VAR 0 20
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40036: LD_ADDR_VAR 0 21
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40266: LD_ADDR_VAR 0 22
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40496: LD_ADDR_VAR 0 23
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 2
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 3
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 3
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40776: LD_ADDR_VAR 0 24
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 3
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41052: LD_ADDR_VAR 0 25
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41326: LD_ADDR_VAR 0 26
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: LD_INT 2
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 3
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41602: LD_ADDR_VAR 0 27
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 2
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41882: LD_ADDR_VAR 0 28
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 3
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42164: LD_ADDR_VAR 0 29
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42443: LD_ADDR_VAR 0 30
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42721: LD_ADDR_VAR 0 31
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42999: LD_ADDR_VAR 0 32
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43277: LD_ADDR_VAR 0 33
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 3
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43556: LD_ADDR_VAR 0 34
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 3
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43836: LD_ADDR_VAR 0 35
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43948: LD_ADDR_VAR 0 36
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 2
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44060: LD_ADDR_VAR 0 37
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44172: LD_ADDR_VAR 0 38
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44284: LD_ADDR_VAR 0 39
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44396: LD_ADDR_VAR 0 40
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44508: LD_ADDR_VAR 0 41
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 3
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: LD_INT 3
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44858: LD_ADDR_VAR 0 42
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 3
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 3
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 3
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 3
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 3
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 3
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 3
45167: NEG
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45208: LD_ADDR_VAR 0 43
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 3
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45556: LD_ADDR_VAR 0 44
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 3
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 3
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: NEG
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45906: LD_ADDR_VAR 0 45
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 3
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 3
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46256: LD_ADDR_VAR 0 46
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 3
46552: NEG
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46604: LD_ADDR_VAR 0 47
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46755: LD_ADDR_VAR 0 48
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46902: LD_ADDR_VAR 0 49
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47046: LD_ADDR_VAR 0 50
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47190: LD_ADDR_VAR 0 51
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47337: LD_ADDR_VAR 0 52
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47488: LD_ADDR_VAR 0 53
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47718: LD_ADDR_VAR 0 54
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 55
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48178: LD_ADDR_VAR 0 56
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48408: LD_ADDR_VAR 0 57
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48638: LD_ADDR_VAR 0 58
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48868: LD_ADDR_VAR 0 59
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48956: LD_ADDR_VAR 0 60
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49044: LD_ADDR_VAR 0 61
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49132: LD_ADDR_VAR 0 62
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49220: LD_ADDR_VAR 0 63
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49308: LD_ADDR_VAR 0 64
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: ST_TO_ADDR
// end ; 1 :
49396: GO 55293
49398: LD_INT 1
49400: DOUBLE
49401: EQUAL
49402: IFTRUE 49406
49404: GO 52029
49406: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49407: LD_ADDR_VAR 0 11
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49451: LD_ADDR_VAR 0 12
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49492: LD_ADDR_VAR 0 13
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49532: LD_ADDR_VAR 0 14
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49573: LD_ADDR_VAR 0 15
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49617: LD_ADDR_VAR 0 16
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49663: LD_ADDR_VAR 0 17
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49707: LD_ADDR_VAR 0 18
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49748: LD_ADDR_VAR 0 19
49752: PUSH
49753: LD_INT 3
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49788: LD_ADDR_VAR 0 20
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 3
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49829: LD_ADDR_VAR 0 21
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49873: LD_ADDR_VAR 0 22
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49919: LD_ADDR_VAR 0 23
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 4
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49963: LD_ADDR_VAR 0 24
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50004: LD_ADDR_VAR 0 25
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 4
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 4
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50044: LD_ADDR_VAR 0 26
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 4
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50085: LD_ADDR_VAR 0 27
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50129: LD_ADDR_VAR 0 28
50133: PUSH
50134: LD_INT 3
50136: NEG
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 4
50160: NEG
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50175: LD_ADDR_VAR 0 29
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 4
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 4
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 3
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 5
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 5
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 4
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 6
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 6
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 5
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50330: LD_ADDR_VAR 0 30
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 4
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 4
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 5
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 5
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 5
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 6
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 6
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50473: LD_ADDR_VAR 0 31
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 4
50510: PUSH
50511: LD_INT 3
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: LD_INT 4
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 5
50540: PUSH
50541: LD_INT 4
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 5
50550: PUSH
50551: LD_INT 5
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: LD_INT 5
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 6
50570: PUSH
50571: LD_INT 5
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 6
50580: PUSH
50581: LD_INT 6
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 5
50590: PUSH
50591: LD_INT 6
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50612: LD_ADDR_VAR 0 32
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 4
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 5
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 4
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 6
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 6
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 5
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50755: LD_ADDR_VAR 0 33
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 4
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 5
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 5
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 5
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 6
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 6
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50910: LD_ADDR_VAR 0 34
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: LD_INT 4
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 4
50965: NEG
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 4
50977: NEG
50978: PUSH
50979: LD_INT 4
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 4
50989: NEG
50990: PUSH
50991: LD_INT 5
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 5
51001: NEG
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 5
51013: NEG
51014: PUSH
51015: LD_INT 5
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 5
51025: NEG
51026: PUSH
51027: LD_INT 6
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 6
51037: NEG
51038: PUSH
51039: LD_INT 5
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 6
51049: NEG
51050: PUSH
51051: LD_INT 6
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51073: LD_ADDR_VAR 0 41
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51117: LD_ADDR_VAR 0 42
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51158: LD_ADDR_VAR 0 43
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51198: LD_ADDR_VAR 0 44
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51239: LD_ADDR_VAR 0 45
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51283: LD_ADDR_VAR 0 46
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51329: LD_ADDR_VAR 0 47
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51362: LD_ADDR_VAR 0 48
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51393: LD_ADDR_VAR 0 49
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51422: LD_ADDR_VAR 0 50
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51451: LD_ADDR_VAR 0 51
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51482: LD_ADDR_VAR 0 52
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51515: LD_ADDR_VAR 0 53
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51559: LD_ADDR_VAR 0 54
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51600: LD_ADDR_VAR 0 55
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51640: LD_ADDR_VAR 0 56
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51681: LD_ADDR_VAR 0 57
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51725: LD_ADDR_VAR 0 58
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51771: LD_ADDR_VAR 0 59
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51815: LD_ADDR_VAR 0 60
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51856: LD_ADDR_VAR 0 61
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51896: LD_ADDR_VAR 0 62
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51937: LD_ADDR_VAR 0 63
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51981: LD_ADDR_VAR 0 64
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: ST_TO_ADDR
// end ; 2 :
52027: GO 55293
52029: LD_INT 2
52031: DOUBLE
52032: EQUAL
52033: IFTRUE 52037
52035: GO 55292
52037: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52038: LD_ADDR_VAR 0 29
52042: PUSH
52043: LD_INT 4
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 4
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 5
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 5
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 5
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 4
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 4
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 4
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 5
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 4
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: LD_INT 5
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 4
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 4
52423: NEG
52424: PUSH
52425: LD_INT 4
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 4
52435: NEG
52436: PUSH
52437: LD_INT 5
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 4
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 4
52471: NEG
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 5
52483: NEG
52484: PUSH
52485: LD_INT 4
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 5
52495: NEG
52496: PUSH
52497: LD_INT 5
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: LD_INT 5
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52576: LD_ADDR_VAR 0 30
52580: PUSH
52581: LD_INT 4
52583: PUSH
52584: LD_INT 4
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 5
52603: PUSH
52604: LD_INT 4
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 5
52613: PUSH
52614: LD_INT 5
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 4
52623: PUSH
52624: LD_INT 5
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 5
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 5
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 4
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 4
52766: NEG
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 4
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 5
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 5
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 5
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 4
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 4
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 4
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 5
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 4
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 4
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 5
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: LD_INT 5
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53123: LD_ADDR_VAR 0 31
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 4
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 5
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 5
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 4
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 4
53325: NEG
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 4
53337: NEG
53338: PUSH
53339: LD_INT 5
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 4
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: NEG
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 5
53385: NEG
53386: PUSH
53387: LD_INT 4
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 5
53397: NEG
53398: PUSH
53399: LD_INT 5
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 5
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 5
53421: NEG
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 4
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 5
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53673: LD_ADDR_VAR 0 32
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 4
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 4
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 5
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 4
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 4
53854: NEG
53855: PUSH
53856: LD_INT 4
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: LD_INT 4
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 4
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 5
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 4
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 5
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 5
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 4
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 4
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: LD_INT 4
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 5
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 5
54115: PUSH
54116: LD_INT 5
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 4
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: LD_INT 3
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: LD_INT 5
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54220: LD_ADDR_VAR 0 33
54224: PUSH
54225: LD_INT 4
54227: NEG
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 4
54239: NEG
54240: PUSH
54241: LD_INT 5
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: NEG
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 5
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 5
54299: NEG
54300: PUSH
54301: LD_INT 5
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: LD_INT 5
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 3
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 4
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 4
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 4
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 4
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 5
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 4
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 4
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 4
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 4
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 4
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 5
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 5
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 5
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54758: LD_ADDR_VAR 0 34
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 4
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 5
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 4
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: LD_INT 4
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 5
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 5
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 4
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 4
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 4
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 5
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 5
54990: PUSH
54991: LD_INT 5
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 4
55000: PUSH
55001: LD_INT 5
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: LD_INT 4
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 5
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: LD_INT 5
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 4
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 3
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 5
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 5
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 5
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: ST_TO_ADDR
// end ; end ;
55290: GO 55293
55292: POP
// case btype of b_depot , b_warehouse :
55293: LD_VAR 0 1
55297: PUSH
55298: LD_INT 0
55300: DOUBLE
55301: EQUAL
55302: IFTRUE 55312
55304: LD_INT 1
55306: DOUBLE
55307: EQUAL
55308: IFTRUE 55312
55310: GO 55513
55312: POP
// case nation of nation_american :
55313: LD_VAR 0 5
55317: PUSH
55318: LD_INT 1
55320: DOUBLE
55321: EQUAL
55322: IFTRUE 55326
55324: GO 55382
55326: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55327: LD_ADDR_VAR 0 9
55331: PUSH
55332: LD_VAR 0 11
55336: PUSH
55337: LD_VAR 0 12
55341: PUSH
55342: LD_VAR 0 13
55346: PUSH
55347: LD_VAR 0 14
55351: PUSH
55352: LD_VAR 0 15
55356: PUSH
55357: LD_VAR 0 16
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: PUSH
55370: LD_VAR 0 4
55374: PUSH
55375: LD_INT 1
55377: PLUS
55378: ARRAY
55379: ST_TO_ADDR
55380: GO 55511
55382: LD_INT 2
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55390
55388: GO 55446
55390: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55391: LD_ADDR_VAR 0 9
55395: PUSH
55396: LD_VAR 0 17
55400: PUSH
55401: LD_VAR 0 18
55405: PUSH
55406: LD_VAR 0 19
55410: PUSH
55411: LD_VAR 0 20
55415: PUSH
55416: LD_VAR 0 21
55420: PUSH
55421: LD_VAR 0 22
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: PUSH
55434: LD_VAR 0 4
55438: PUSH
55439: LD_INT 1
55441: PLUS
55442: ARRAY
55443: ST_TO_ADDR
55444: GO 55511
55446: LD_INT 3
55448: DOUBLE
55449: EQUAL
55450: IFTRUE 55454
55452: GO 55510
55454: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55455: LD_ADDR_VAR 0 9
55459: PUSH
55460: LD_VAR 0 23
55464: PUSH
55465: LD_VAR 0 24
55469: PUSH
55470: LD_VAR 0 25
55474: PUSH
55475: LD_VAR 0 26
55479: PUSH
55480: LD_VAR 0 27
55484: PUSH
55485: LD_VAR 0 28
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: PUSH
55498: LD_VAR 0 4
55502: PUSH
55503: LD_INT 1
55505: PLUS
55506: ARRAY
55507: ST_TO_ADDR
55508: GO 55511
55510: POP
55511: GO 56066
55513: LD_INT 2
55515: DOUBLE
55516: EQUAL
55517: IFTRUE 55527
55519: LD_INT 3
55521: DOUBLE
55522: EQUAL
55523: IFTRUE 55527
55525: GO 55583
55527: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55528: LD_ADDR_VAR 0 9
55532: PUSH
55533: LD_VAR 0 29
55537: PUSH
55538: LD_VAR 0 30
55542: PUSH
55543: LD_VAR 0 31
55547: PUSH
55548: LD_VAR 0 32
55552: PUSH
55553: LD_VAR 0 33
55557: PUSH
55558: LD_VAR 0 34
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: PUSH
55571: LD_VAR 0 4
55575: PUSH
55576: LD_INT 1
55578: PLUS
55579: ARRAY
55580: ST_TO_ADDR
55581: GO 56066
55583: LD_INT 16
55585: DOUBLE
55586: EQUAL
55587: IFTRUE 55645
55589: LD_INT 17
55591: DOUBLE
55592: EQUAL
55593: IFTRUE 55645
55595: LD_INT 18
55597: DOUBLE
55598: EQUAL
55599: IFTRUE 55645
55601: LD_INT 19
55603: DOUBLE
55604: EQUAL
55605: IFTRUE 55645
55607: LD_INT 22
55609: DOUBLE
55610: EQUAL
55611: IFTRUE 55645
55613: LD_INT 20
55615: DOUBLE
55616: EQUAL
55617: IFTRUE 55645
55619: LD_INT 21
55621: DOUBLE
55622: EQUAL
55623: IFTRUE 55645
55625: LD_INT 23
55627: DOUBLE
55628: EQUAL
55629: IFTRUE 55645
55631: LD_INT 24
55633: DOUBLE
55634: EQUAL
55635: IFTRUE 55645
55637: LD_INT 25
55639: DOUBLE
55640: EQUAL
55641: IFTRUE 55645
55643: GO 55701
55645: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55646: LD_ADDR_VAR 0 9
55650: PUSH
55651: LD_VAR 0 35
55655: PUSH
55656: LD_VAR 0 36
55660: PUSH
55661: LD_VAR 0 37
55665: PUSH
55666: LD_VAR 0 38
55670: PUSH
55671: LD_VAR 0 39
55675: PUSH
55676: LD_VAR 0 40
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: PUSH
55689: LD_VAR 0 4
55693: PUSH
55694: LD_INT 1
55696: PLUS
55697: ARRAY
55698: ST_TO_ADDR
55699: GO 56066
55701: LD_INT 6
55703: DOUBLE
55704: EQUAL
55705: IFTRUE 55757
55707: LD_INT 7
55709: DOUBLE
55710: EQUAL
55711: IFTRUE 55757
55713: LD_INT 8
55715: DOUBLE
55716: EQUAL
55717: IFTRUE 55757
55719: LD_INT 13
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55757
55725: LD_INT 12
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55757
55731: LD_INT 15
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55757
55737: LD_INT 11
55739: DOUBLE
55740: EQUAL
55741: IFTRUE 55757
55743: LD_INT 14
55745: DOUBLE
55746: EQUAL
55747: IFTRUE 55757
55749: LD_INT 10
55751: DOUBLE
55752: EQUAL
55753: IFTRUE 55757
55755: GO 55813
55757: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55758: LD_ADDR_VAR 0 9
55762: PUSH
55763: LD_VAR 0 41
55767: PUSH
55768: LD_VAR 0 42
55772: PUSH
55773: LD_VAR 0 43
55777: PUSH
55778: LD_VAR 0 44
55782: PUSH
55783: LD_VAR 0 45
55787: PUSH
55788: LD_VAR 0 46
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: PUSH
55801: LD_VAR 0 4
55805: PUSH
55806: LD_INT 1
55808: PLUS
55809: ARRAY
55810: ST_TO_ADDR
55811: GO 56066
55813: LD_INT 36
55815: DOUBLE
55816: EQUAL
55817: IFTRUE 55821
55819: GO 55877
55821: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55822: LD_ADDR_VAR 0 9
55826: PUSH
55827: LD_VAR 0 47
55831: PUSH
55832: LD_VAR 0 48
55836: PUSH
55837: LD_VAR 0 49
55841: PUSH
55842: LD_VAR 0 50
55846: PUSH
55847: LD_VAR 0 51
55851: PUSH
55852: LD_VAR 0 52
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: PUSH
55865: LD_VAR 0 4
55869: PUSH
55870: LD_INT 1
55872: PLUS
55873: ARRAY
55874: ST_TO_ADDR
55875: GO 56066
55877: LD_INT 4
55879: DOUBLE
55880: EQUAL
55881: IFTRUE 55903
55883: LD_INT 5
55885: DOUBLE
55886: EQUAL
55887: IFTRUE 55903
55889: LD_INT 34
55891: DOUBLE
55892: EQUAL
55893: IFTRUE 55903
55895: LD_INT 37
55897: DOUBLE
55898: EQUAL
55899: IFTRUE 55903
55901: GO 55959
55903: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55904: LD_ADDR_VAR 0 9
55908: PUSH
55909: LD_VAR 0 53
55913: PUSH
55914: LD_VAR 0 54
55918: PUSH
55919: LD_VAR 0 55
55923: PUSH
55924: LD_VAR 0 56
55928: PUSH
55929: LD_VAR 0 57
55933: PUSH
55934: LD_VAR 0 58
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: PUSH
55947: LD_VAR 0 4
55951: PUSH
55952: LD_INT 1
55954: PLUS
55955: ARRAY
55956: ST_TO_ADDR
55957: GO 56066
55959: LD_INT 31
55961: DOUBLE
55962: EQUAL
55963: IFTRUE 56009
55965: LD_INT 32
55967: DOUBLE
55968: EQUAL
55969: IFTRUE 56009
55971: LD_INT 33
55973: DOUBLE
55974: EQUAL
55975: IFTRUE 56009
55977: LD_INT 27
55979: DOUBLE
55980: EQUAL
55981: IFTRUE 56009
55983: LD_INT 26
55985: DOUBLE
55986: EQUAL
55987: IFTRUE 56009
55989: LD_INT 28
55991: DOUBLE
55992: EQUAL
55993: IFTRUE 56009
55995: LD_INT 29
55997: DOUBLE
55998: EQUAL
55999: IFTRUE 56009
56001: LD_INT 30
56003: DOUBLE
56004: EQUAL
56005: IFTRUE 56009
56007: GO 56065
56009: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56010: LD_ADDR_VAR 0 9
56014: PUSH
56015: LD_VAR 0 59
56019: PUSH
56020: LD_VAR 0 60
56024: PUSH
56025: LD_VAR 0 61
56029: PUSH
56030: LD_VAR 0 62
56034: PUSH
56035: LD_VAR 0 63
56039: PUSH
56040: LD_VAR 0 64
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: PUSH
56053: LD_VAR 0 4
56057: PUSH
56058: LD_INT 1
56060: PLUS
56061: ARRAY
56062: ST_TO_ADDR
56063: GO 56066
56065: POP
// temp_list2 = [ ] ;
56066: LD_ADDR_VAR 0 10
56070: PUSH
56071: EMPTY
56072: ST_TO_ADDR
// for i in temp_list do
56073: LD_ADDR_VAR 0 8
56077: PUSH
56078: LD_VAR 0 9
56082: PUSH
56083: FOR_IN
56084: IFFALSE 56136
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56086: LD_ADDR_VAR 0 10
56090: PUSH
56091: LD_VAR 0 10
56095: PUSH
56096: LD_VAR 0 8
56100: PUSH
56101: LD_INT 1
56103: ARRAY
56104: PUSH
56105: LD_VAR 0 2
56109: PLUS
56110: PUSH
56111: LD_VAR 0 8
56115: PUSH
56116: LD_INT 2
56118: ARRAY
56119: PUSH
56120: LD_VAR 0 3
56124: PLUS
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: ADD
56133: ST_TO_ADDR
56134: GO 56083
56136: POP
56137: POP
// result = temp_list2 ;
56138: LD_ADDR_VAR 0 7
56142: PUSH
56143: LD_VAR 0 10
56147: ST_TO_ADDR
// end ;
56148: LD_VAR 0 7
56152: RET
// export function EnemyInRange ( unit , dist ) ; begin
56153: LD_INT 0
56155: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56156: LD_ADDR_VAR 0 3
56160: PUSH
56161: LD_VAR 0 1
56165: PPUSH
56166: CALL_OW 255
56170: PPUSH
56171: LD_VAR 0 1
56175: PPUSH
56176: CALL_OW 250
56180: PPUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: CALL_OW 251
56190: PPUSH
56191: LD_VAR 0 2
56195: PPUSH
56196: CALL 29555 0 4
56200: PUSH
56201: LD_INT 4
56203: ARRAY
56204: ST_TO_ADDR
// end ;
56205: LD_VAR 0 3
56209: RET
// export function PlayerSeeMe ( unit ) ; begin
56210: LD_INT 0
56212: PPUSH
// result := See ( your_side , unit ) ;
56213: LD_ADDR_VAR 0 2
56217: PUSH
56218: LD_OWVAR 2
56222: PPUSH
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 292
56232: ST_TO_ADDR
// end ;
56233: LD_VAR 0 2
56237: RET
// export function ReverseDir ( unit ) ; begin
56238: LD_INT 0
56240: PPUSH
// if not unit then
56241: LD_VAR 0 1
56245: NOT
56246: IFFALSE 56250
// exit ;
56248: GO 56273
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56250: LD_ADDR_VAR 0 2
56254: PUSH
56255: LD_VAR 0 1
56259: PPUSH
56260: CALL_OW 254
56264: PUSH
56265: LD_INT 3
56267: PLUS
56268: PUSH
56269: LD_INT 6
56271: MOD
56272: ST_TO_ADDR
// end ;
56273: LD_VAR 0 2
56277: RET
// export function ReverseArray ( array ) ; var i ; begin
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
// if not array then
56282: LD_VAR 0 1
56286: NOT
56287: IFFALSE 56291
// exit ;
56289: GO 56346
// result := [ ] ;
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: EMPTY
56297: ST_TO_ADDR
// for i := array downto 1 do
56298: LD_ADDR_VAR 0 3
56302: PUSH
56303: DOUBLE
56304: LD_VAR 0 1
56308: INC
56309: ST_TO_ADDR
56310: LD_INT 1
56312: PUSH
56313: FOR_DOWNTO
56314: IFFALSE 56344
// result := Join ( result , array [ i ] ) ;
56316: LD_ADDR_VAR 0 2
56320: PUSH
56321: LD_VAR 0 2
56325: PPUSH
56326: LD_VAR 0 1
56330: PUSH
56331: LD_VAR 0 3
56335: ARRAY
56336: PPUSH
56337: CALL 60990 0 2
56341: ST_TO_ADDR
56342: GO 56313
56344: POP
56345: POP
// end ;
56346: LD_VAR 0 2
56350: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56351: LD_INT 0
56353: PPUSH
56354: PPUSH
56355: PPUSH
56356: PPUSH
56357: PPUSH
56358: PPUSH
// if not unit or not hexes then
56359: LD_VAR 0 1
56363: NOT
56364: PUSH
56365: LD_VAR 0 2
56369: NOT
56370: OR
56371: IFFALSE 56375
// exit ;
56373: GO 56498
// dist := 9999 ;
56375: LD_ADDR_VAR 0 5
56379: PUSH
56380: LD_INT 9999
56382: ST_TO_ADDR
// for i = 1 to hexes do
56383: LD_ADDR_VAR 0 4
56387: PUSH
56388: DOUBLE
56389: LD_INT 1
56391: DEC
56392: ST_TO_ADDR
56393: LD_VAR 0 2
56397: PUSH
56398: FOR_TO
56399: IFFALSE 56486
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56401: LD_ADDR_VAR 0 6
56405: PUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: LD_VAR 0 2
56415: PUSH
56416: LD_VAR 0 4
56420: ARRAY
56421: PUSH
56422: LD_INT 1
56424: ARRAY
56425: PPUSH
56426: LD_VAR 0 2
56430: PUSH
56431: LD_VAR 0 4
56435: ARRAY
56436: PUSH
56437: LD_INT 2
56439: ARRAY
56440: PPUSH
56441: CALL_OW 297
56445: ST_TO_ADDR
// if tdist < dist then
56446: LD_VAR 0 6
56450: PUSH
56451: LD_VAR 0 5
56455: LESS
56456: IFFALSE 56484
// begin hex := hexes [ i ] ;
56458: LD_ADDR_VAR 0 8
56462: PUSH
56463: LD_VAR 0 2
56467: PUSH
56468: LD_VAR 0 4
56472: ARRAY
56473: ST_TO_ADDR
// dist := tdist ;
56474: LD_ADDR_VAR 0 5
56478: PUSH
56479: LD_VAR 0 6
56483: ST_TO_ADDR
// end ; end ;
56484: GO 56398
56486: POP
56487: POP
// result := hex ;
56488: LD_ADDR_VAR 0 3
56492: PUSH
56493: LD_VAR 0 8
56497: ST_TO_ADDR
// end ;
56498: LD_VAR 0 3
56502: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56503: LD_INT 0
56505: PPUSH
56506: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56507: LD_VAR 0 1
56511: NOT
56512: PUSH
56513: LD_VAR 0 1
56517: PUSH
56518: LD_INT 21
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 23
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PPUSH
56542: CALL_OW 69
56546: IN
56547: NOT
56548: OR
56549: IFFALSE 56553
// exit ;
56551: GO 56600
// for i = 1 to 3 do
56553: LD_ADDR_VAR 0 3
56557: PUSH
56558: DOUBLE
56559: LD_INT 1
56561: DEC
56562: ST_TO_ADDR
56563: LD_INT 3
56565: PUSH
56566: FOR_TO
56567: IFFALSE 56598
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 250
56578: PPUSH
56579: LD_VAR 0 1
56583: PPUSH
56584: CALL_OW 251
56588: PPUSH
56589: LD_INT 1
56591: PPUSH
56592: CALL_OW 453
56596: GO 56566
56598: POP
56599: POP
// end ;
56600: LD_VAR 0 2
56604: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56605: LD_INT 0
56607: PPUSH
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
56612: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56613: LD_VAR 0 1
56617: NOT
56618: PUSH
56619: LD_VAR 0 2
56623: NOT
56624: OR
56625: PUSH
56626: LD_VAR 0 1
56630: PPUSH
56631: CALL_OW 314
56635: OR
56636: IFFALSE 56640
// exit ;
56638: GO 57107
// if GetLives ( i ) < 250 then
56640: LD_VAR 0 4
56644: PPUSH
56645: CALL_OW 256
56649: PUSH
56650: LD_INT 250
56652: LESS
56653: IFFALSE 56666
// begin ComAutodestruct ( i ) ;
56655: LD_VAR 0 4
56659: PPUSH
56660: CALL 56503 0 1
// exit ;
56664: GO 57107
// end ; x := GetX ( enemy_unit ) ;
56666: LD_ADDR_VAR 0 7
56670: PUSH
56671: LD_VAR 0 2
56675: PPUSH
56676: CALL_OW 250
56680: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56681: LD_ADDR_VAR 0 8
56685: PUSH
56686: LD_VAR 0 2
56690: PPUSH
56691: CALL_OW 251
56695: ST_TO_ADDR
// if not x or not y then
56696: LD_VAR 0 7
56700: NOT
56701: PUSH
56702: LD_VAR 0 8
56706: NOT
56707: OR
56708: IFFALSE 56712
// exit ;
56710: GO 57107
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56712: LD_ADDR_VAR 0 6
56716: PUSH
56717: LD_VAR 0 7
56721: PPUSH
56722: LD_INT 0
56724: PPUSH
56725: LD_INT 4
56727: PPUSH
56728: CALL_OW 272
56732: PUSH
56733: LD_VAR 0 8
56737: PPUSH
56738: LD_INT 0
56740: PPUSH
56741: LD_INT 4
56743: PPUSH
56744: CALL_OW 273
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_VAR 0 7
56757: PPUSH
56758: LD_INT 1
56760: PPUSH
56761: LD_INT 4
56763: PPUSH
56764: CALL_OW 272
56768: PUSH
56769: LD_VAR 0 8
56773: PPUSH
56774: LD_INT 1
56776: PPUSH
56777: LD_INT 4
56779: PPUSH
56780: CALL_OW 273
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_VAR 0 7
56793: PPUSH
56794: LD_INT 2
56796: PPUSH
56797: LD_INT 4
56799: PPUSH
56800: CALL_OW 272
56804: PUSH
56805: LD_VAR 0 8
56809: PPUSH
56810: LD_INT 2
56812: PPUSH
56813: LD_INT 4
56815: PPUSH
56816: CALL_OW 273
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_VAR 0 7
56829: PPUSH
56830: LD_INT 3
56832: PPUSH
56833: LD_INT 4
56835: PPUSH
56836: CALL_OW 272
56840: PUSH
56841: LD_VAR 0 8
56845: PPUSH
56846: LD_INT 3
56848: PPUSH
56849: LD_INT 4
56851: PPUSH
56852: CALL_OW 273
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_VAR 0 7
56865: PPUSH
56866: LD_INT 4
56868: PPUSH
56869: LD_INT 4
56871: PPUSH
56872: CALL_OW 272
56876: PUSH
56877: LD_VAR 0 8
56881: PPUSH
56882: LD_INT 4
56884: PPUSH
56885: LD_INT 4
56887: PPUSH
56888: CALL_OW 273
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_VAR 0 7
56901: PPUSH
56902: LD_INT 5
56904: PPUSH
56905: LD_INT 4
56907: PPUSH
56908: CALL_OW 272
56912: PUSH
56913: LD_VAR 0 8
56917: PPUSH
56918: LD_INT 5
56920: PPUSH
56921: LD_INT 4
56923: PPUSH
56924: CALL_OW 273
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// for i = tmp downto 1 do
56941: LD_ADDR_VAR 0 4
56945: PUSH
56946: DOUBLE
56947: LD_VAR 0 6
56951: INC
56952: ST_TO_ADDR
56953: LD_INT 1
56955: PUSH
56956: FOR_DOWNTO
56957: IFFALSE 57058
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56959: LD_VAR 0 6
56963: PUSH
56964: LD_VAR 0 4
56968: ARRAY
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PPUSH
56974: LD_VAR 0 6
56978: PUSH
56979: LD_VAR 0 4
56983: ARRAY
56984: PUSH
56985: LD_INT 2
56987: ARRAY
56988: PPUSH
56989: CALL_OW 488
56993: NOT
56994: PUSH
56995: LD_VAR 0 6
56999: PUSH
57000: LD_VAR 0 4
57004: ARRAY
57005: PUSH
57006: LD_INT 1
57008: ARRAY
57009: PPUSH
57010: LD_VAR 0 6
57014: PUSH
57015: LD_VAR 0 4
57019: ARRAY
57020: PUSH
57021: LD_INT 2
57023: ARRAY
57024: PPUSH
57025: CALL_OW 428
57029: PUSH
57030: LD_INT 0
57032: NONEQUAL
57033: OR
57034: IFFALSE 57056
// tmp := Delete ( tmp , i ) ;
57036: LD_ADDR_VAR 0 6
57040: PUSH
57041: LD_VAR 0 6
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: CALL_OW 3
57055: ST_TO_ADDR
57056: GO 56956
57058: POP
57059: POP
// j := GetClosestHex ( unit , tmp ) ;
57060: LD_ADDR_VAR 0 5
57064: PUSH
57065: LD_VAR 0 1
57069: PPUSH
57070: LD_VAR 0 6
57074: PPUSH
57075: CALL 56351 0 2
57079: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57080: LD_VAR 0 1
57084: PPUSH
57085: LD_VAR 0 5
57089: PUSH
57090: LD_INT 1
57092: ARRAY
57093: PPUSH
57094: LD_VAR 0 5
57098: PUSH
57099: LD_INT 2
57101: ARRAY
57102: PPUSH
57103: CALL_OW 111
// end ;
57107: LD_VAR 0 3
57111: RET
// export function PrepareApemanSoldier ( ) ; begin
57112: LD_INT 0
57114: PPUSH
// uc_nation := 0 ;
57115: LD_ADDR_OWVAR 21
57119: PUSH
57120: LD_INT 0
57122: ST_TO_ADDR
// hc_sex := sex_male ;
57123: LD_ADDR_OWVAR 27
57127: PUSH
57128: LD_INT 1
57130: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57131: LD_ADDR_OWVAR 28
57135: PUSH
57136: LD_INT 15
57138: ST_TO_ADDR
// hc_gallery :=  ;
57139: LD_ADDR_OWVAR 33
57143: PUSH
57144: LD_STRING 
57146: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57147: LD_ADDR_OWVAR 31
57151: PUSH
57152: LD_INT 0
57154: PPUSH
57155: LD_INT 3
57157: PPUSH
57158: CALL_OW 12
57162: PUSH
57163: LD_INT 0
57165: PPUSH
57166: LD_INT 3
57168: PPUSH
57169: CALL_OW 12
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: ST_TO_ADDR
// end ;
57186: LD_VAR 0 1
57190: RET
// export function PrepareApemanEngineer ( ) ; begin
57191: LD_INT 0
57193: PPUSH
// uc_nation := 0 ;
57194: LD_ADDR_OWVAR 21
57198: PUSH
57199: LD_INT 0
57201: ST_TO_ADDR
// hc_sex := sex_male ;
57202: LD_ADDR_OWVAR 27
57206: PUSH
57207: LD_INT 1
57209: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57210: LD_ADDR_OWVAR 28
57214: PUSH
57215: LD_INT 16
57217: ST_TO_ADDR
// hc_gallery :=  ;
57218: LD_ADDR_OWVAR 33
57222: PUSH
57223: LD_STRING 
57225: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57226: LD_ADDR_OWVAR 31
57230: PUSH
57231: LD_INT 0
57233: PPUSH
57234: LD_INT 3
57236: PPUSH
57237: CALL_OW 12
57241: PUSH
57242: LD_INT 0
57244: PPUSH
57245: LD_INT 3
57247: PPUSH
57248: CALL_OW 12
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// end ;
57265: LD_VAR 0 1
57269: RET
// export function PrepareApeman ( agressivity ) ; begin
57270: LD_INT 0
57272: PPUSH
// uc_side := 0 ;
57273: LD_ADDR_OWVAR 20
57277: PUSH
57278: LD_INT 0
57280: ST_TO_ADDR
// uc_nation := 0 ;
57281: LD_ADDR_OWVAR 21
57285: PUSH
57286: LD_INT 0
57288: ST_TO_ADDR
// hc_sex := sex_male ;
57289: LD_ADDR_OWVAR 27
57293: PUSH
57294: LD_INT 1
57296: ST_TO_ADDR
// hc_class := class_apeman ;
57297: LD_ADDR_OWVAR 28
57301: PUSH
57302: LD_INT 12
57304: ST_TO_ADDR
// hc_gallery :=  ;
57305: LD_ADDR_OWVAR 33
57309: PUSH
57310: LD_STRING 
57312: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57313: LD_ADDR_OWVAR 35
57317: PUSH
57318: LD_VAR 0 1
57322: NEG
57323: PPUSH
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 12
57333: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57334: LD_ADDR_OWVAR 31
57338: PUSH
57339: LD_INT 0
57341: PPUSH
57342: LD_INT 3
57344: PPUSH
57345: CALL_OW 12
57349: PUSH
57350: LD_INT 0
57352: PPUSH
57353: LD_INT 3
57355: PPUSH
57356: CALL_OW 12
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// end ;
57373: LD_VAR 0 2
57377: RET
// export function PrepareTiger ( agressivity ) ; begin
57378: LD_INT 0
57380: PPUSH
// uc_side := 0 ;
57381: LD_ADDR_OWVAR 20
57385: PUSH
57386: LD_INT 0
57388: ST_TO_ADDR
// uc_nation := 0 ;
57389: LD_ADDR_OWVAR 21
57393: PUSH
57394: LD_INT 0
57396: ST_TO_ADDR
// hc_class := class_tiger ;
57397: LD_ADDR_OWVAR 28
57401: PUSH
57402: LD_INT 14
57404: ST_TO_ADDR
// hc_gallery :=  ;
57405: LD_ADDR_OWVAR 33
57409: PUSH
57410: LD_STRING 
57412: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57413: LD_ADDR_OWVAR 35
57417: PUSH
57418: LD_VAR 0 1
57422: NEG
57423: PPUSH
57424: LD_VAR 0 1
57428: PPUSH
57429: CALL_OW 12
57433: ST_TO_ADDR
// end ;
57434: LD_VAR 0 2
57438: RET
// export function PrepareEnchidna ( ) ; begin
57439: LD_INT 0
57441: PPUSH
// uc_side := 0 ;
57442: LD_ADDR_OWVAR 20
57446: PUSH
57447: LD_INT 0
57449: ST_TO_ADDR
// uc_nation := 0 ;
57450: LD_ADDR_OWVAR 21
57454: PUSH
57455: LD_INT 0
57457: ST_TO_ADDR
// hc_class := class_baggie ;
57458: LD_ADDR_OWVAR 28
57462: PUSH
57463: LD_INT 13
57465: ST_TO_ADDR
// hc_gallery :=  ;
57466: LD_ADDR_OWVAR 33
57470: PUSH
57471: LD_STRING 
57473: ST_TO_ADDR
// end ;
57474: LD_VAR 0 1
57478: RET
// export function PrepareFrog ( ) ; begin
57479: LD_INT 0
57481: PPUSH
// uc_side := 0 ;
57482: LD_ADDR_OWVAR 20
57486: PUSH
57487: LD_INT 0
57489: ST_TO_ADDR
// uc_nation := 0 ;
57490: LD_ADDR_OWVAR 21
57494: PUSH
57495: LD_INT 0
57497: ST_TO_ADDR
// hc_class := class_frog ;
57498: LD_ADDR_OWVAR 28
57502: PUSH
57503: LD_INT 19
57505: ST_TO_ADDR
// hc_gallery :=  ;
57506: LD_ADDR_OWVAR 33
57510: PUSH
57511: LD_STRING 
57513: ST_TO_ADDR
// end ;
57514: LD_VAR 0 1
57518: RET
// export function PrepareFish ( ) ; begin
57519: LD_INT 0
57521: PPUSH
// uc_side := 0 ;
57522: LD_ADDR_OWVAR 20
57526: PUSH
57527: LD_INT 0
57529: ST_TO_ADDR
// uc_nation := 0 ;
57530: LD_ADDR_OWVAR 21
57534: PUSH
57535: LD_INT 0
57537: ST_TO_ADDR
// hc_class := class_fish ;
57538: LD_ADDR_OWVAR 28
57542: PUSH
57543: LD_INT 20
57545: ST_TO_ADDR
// hc_gallery :=  ;
57546: LD_ADDR_OWVAR 33
57550: PUSH
57551: LD_STRING 
57553: ST_TO_ADDR
// end ;
57554: LD_VAR 0 1
57558: RET
// export function PrepareBird ( ) ; begin
57559: LD_INT 0
57561: PPUSH
// uc_side := 0 ;
57562: LD_ADDR_OWVAR 20
57566: PUSH
57567: LD_INT 0
57569: ST_TO_ADDR
// uc_nation := 0 ;
57570: LD_ADDR_OWVAR 21
57574: PUSH
57575: LD_INT 0
57577: ST_TO_ADDR
// hc_class := class_phororhacos ;
57578: LD_ADDR_OWVAR 28
57582: PUSH
57583: LD_INT 18
57585: ST_TO_ADDR
// hc_gallery :=  ;
57586: LD_ADDR_OWVAR 33
57590: PUSH
57591: LD_STRING 
57593: ST_TO_ADDR
// end ;
57594: LD_VAR 0 1
57598: RET
// export function PrepareHorse ( ) ; begin
57599: LD_INT 0
57601: PPUSH
// uc_side := 0 ;
57602: LD_ADDR_OWVAR 20
57606: PUSH
57607: LD_INT 0
57609: ST_TO_ADDR
// uc_nation := 0 ;
57610: LD_ADDR_OWVAR 21
57614: PUSH
57615: LD_INT 0
57617: ST_TO_ADDR
// hc_class := class_horse ;
57618: LD_ADDR_OWVAR 28
57622: PUSH
57623: LD_INT 21
57625: ST_TO_ADDR
// hc_gallery :=  ;
57626: LD_ADDR_OWVAR 33
57630: PUSH
57631: LD_STRING 
57633: ST_TO_ADDR
// end ;
57634: LD_VAR 0 1
57638: RET
// export function PrepareMastodont ( ) ; begin
57639: LD_INT 0
57641: PPUSH
// uc_side := 0 ;
57642: LD_ADDR_OWVAR 20
57646: PUSH
57647: LD_INT 0
57649: ST_TO_ADDR
// uc_nation := 0 ;
57650: LD_ADDR_OWVAR 21
57654: PUSH
57655: LD_INT 0
57657: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57658: LD_ADDR_OWVAR 37
57662: PUSH
57663: LD_INT 31
57665: ST_TO_ADDR
// vc_control := control_rider ;
57666: LD_ADDR_OWVAR 38
57670: PUSH
57671: LD_INT 4
57673: ST_TO_ADDR
// end ;
57674: LD_VAR 0 1
57678: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57679: LD_INT 0
57681: PPUSH
57682: PPUSH
57683: PPUSH
// uc_side = 0 ;
57684: LD_ADDR_OWVAR 20
57688: PUSH
57689: LD_INT 0
57691: ST_TO_ADDR
// uc_nation = 0 ;
57692: LD_ADDR_OWVAR 21
57696: PUSH
57697: LD_INT 0
57699: ST_TO_ADDR
// InitHc_All ( ) ;
57700: CALL_OW 584
// InitVc ;
57704: CALL_OW 20
// if mastodonts then
57708: LD_VAR 0 6
57712: IFFALSE 57779
// for i = 1 to mastodonts do
57714: LD_ADDR_VAR 0 11
57718: PUSH
57719: DOUBLE
57720: LD_INT 1
57722: DEC
57723: ST_TO_ADDR
57724: LD_VAR 0 6
57728: PUSH
57729: FOR_TO
57730: IFFALSE 57777
// begin vc_chassis := 31 ;
57732: LD_ADDR_OWVAR 37
57736: PUSH
57737: LD_INT 31
57739: ST_TO_ADDR
// vc_control := control_rider ;
57740: LD_ADDR_OWVAR 38
57744: PUSH
57745: LD_INT 4
57747: ST_TO_ADDR
// animal := CreateVehicle ;
57748: LD_ADDR_VAR 0 12
57752: PUSH
57753: CALL_OW 45
57757: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57758: LD_VAR 0 12
57762: PPUSH
57763: LD_VAR 0 8
57767: PPUSH
57768: LD_INT 0
57770: PPUSH
57771: CALL 59907 0 3
// end ;
57775: GO 57729
57777: POP
57778: POP
// if horses then
57779: LD_VAR 0 5
57783: IFFALSE 57850
// for i = 1 to horses do
57785: LD_ADDR_VAR 0 11
57789: PUSH
57790: DOUBLE
57791: LD_INT 1
57793: DEC
57794: ST_TO_ADDR
57795: LD_VAR 0 5
57799: PUSH
57800: FOR_TO
57801: IFFALSE 57848
// begin hc_class := 21 ;
57803: LD_ADDR_OWVAR 28
57807: PUSH
57808: LD_INT 21
57810: ST_TO_ADDR
// hc_gallery :=  ;
57811: LD_ADDR_OWVAR 33
57815: PUSH
57816: LD_STRING 
57818: ST_TO_ADDR
// animal := CreateHuman ;
57819: LD_ADDR_VAR 0 12
57823: PUSH
57824: CALL_OW 44
57828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57829: LD_VAR 0 12
57833: PPUSH
57834: LD_VAR 0 8
57838: PPUSH
57839: LD_INT 0
57841: PPUSH
57842: CALL 59907 0 3
// end ;
57846: GO 57800
57848: POP
57849: POP
// if birds then
57850: LD_VAR 0 1
57854: IFFALSE 57921
// for i = 1 to birds do
57856: LD_ADDR_VAR 0 11
57860: PUSH
57861: DOUBLE
57862: LD_INT 1
57864: DEC
57865: ST_TO_ADDR
57866: LD_VAR 0 1
57870: PUSH
57871: FOR_TO
57872: IFFALSE 57919
// begin hc_class = 18 ;
57874: LD_ADDR_OWVAR 28
57878: PUSH
57879: LD_INT 18
57881: ST_TO_ADDR
// hc_gallery =  ;
57882: LD_ADDR_OWVAR 33
57886: PUSH
57887: LD_STRING 
57889: ST_TO_ADDR
// animal := CreateHuman ;
57890: LD_ADDR_VAR 0 12
57894: PUSH
57895: CALL_OW 44
57899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57900: LD_VAR 0 12
57904: PPUSH
57905: LD_VAR 0 8
57909: PPUSH
57910: LD_INT 0
57912: PPUSH
57913: CALL 59907 0 3
// end ;
57917: GO 57871
57919: POP
57920: POP
// if tigers then
57921: LD_VAR 0 2
57925: IFFALSE 58009
// for i = 1 to tigers do
57927: LD_ADDR_VAR 0 11
57931: PUSH
57932: DOUBLE
57933: LD_INT 1
57935: DEC
57936: ST_TO_ADDR
57937: LD_VAR 0 2
57941: PUSH
57942: FOR_TO
57943: IFFALSE 58007
// begin hc_class = class_tiger ;
57945: LD_ADDR_OWVAR 28
57949: PUSH
57950: LD_INT 14
57952: ST_TO_ADDR
// hc_gallery =  ;
57953: LD_ADDR_OWVAR 33
57957: PUSH
57958: LD_STRING 
57960: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57961: LD_ADDR_OWVAR 35
57965: PUSH
57966: LD_INT 7
57968: NEG
57969: PPUSH
57970: LD_INT 7
57972: PPUSH
57973: CALL_OW 12
57977: ST_TO_ADDR
// animal := CreateHuman ;
57978: LD_ADDR_VAR 0 12
57982: PUSH
57983: CALL_OW 44
57987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57988: LD_VAR 0 12
57992: PPUSH
57993: LD_VAR 0 8
57997: PPUSH
57998: LD_INT 0
58000: PPUSH
58001: CALL 59907 0 3
// end ;
58005: GO 57942
58007: POP
58008: POP
// if apemans then
58009: LD_VAR 0 3
58013: IFFALSE 58136
// for i = 1 to apemans do
58015: LD_ADDR_VAR 0 11
58019: PUSH
58020: DOUBLE
58021: LD_INT 1
58023: DEC
58024: ST_TO_ADDR
58025: LD_VAR 0 3
58029: PUSH
58030: FOR_TO
58031: IFFALSE 58134
// begin hc_class = class_apeman ;
58033: LD_ADDR_OWVAR 28
58037: PUSH
58038: LD_INT 12
58040: ST_TO_ADDR
// hc_gallery =  ;
58041: LD_ADDR_OWVAR 33
58045: PUSH
58046: LD_STRING 
58048: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58049: LD_ADDR_OWVAR 35
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PPUSH
58058: LD_INT 2
58060: PPUSH
58061: CALL_OW 12
58065: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58066: LD_ADDR_OWVAR 31
58070: PUSH
58071: LD_INT 1
58073: PPUSH
58074: LD_INT 3
58076: PPUSH
58077: CALL_OW 12
58081: PUSH
58082: LD_INT 1
58084: PPUSH
58085: LD_INT 3
58087: PPUSH
58088: CALL_OW 12
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// animal := CreateHuman ;
58105: LD_ADDR_VAR 0 12
58109: PUSH
58110: CALL_OW 44
58114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58115: LD_VAR 0 12
58119: PPUSH
58120: LD_VAR 0 8
58124: PPUSH
58125: LD_INT 0
58127: PPUSH
58128: CALL 59907 0 3
// end ;
58132: GO 58030
58134: POP
58135: POP
// if enchidnas then
58136: LD_VAR 0 4
58140: IFFALSE 58207
// for i = 1 to enchidnas do
58142: LD_ADDR_VAR 0 11
58146: PUSH
58147: DOUBLE
58148: LD_INT 1
58150: DEC
58151: ST_TO_ADDR
58152: LD_VAR 0 4
58156: PUSH
58157: FOR_TO
58158: IFFALSE 58205
// begin hc_class = 13 ;
58160: LD_ADDR_OWVAR 28
58164: PUSH
58165: LD_INT 13
58167: ST_TO_ADDR
// hc_gallery =  ;
58168: LD_ADDR_OWVAR 33
58172: PUSH
58173: LD_STRING 
58175: ST_TO_ADDR
// animal := CreateHuman ;
58176: LD_ADDR_VAR 0 12
58180: PUSH
58181: CALL_OW 44
58185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58186: LD_VAR 0 12
58190: PPUSH
58191: LD_VAR 0 8
58195: PPUSH
58196: LD_INT 0
58198: PPUSH
58199: CALL 59907 0 3
// end ;
58203: GO 58157
58205: POP
58206: POP
// if fishes then
58207: LD_VAR 0 7
58211: IFFALSE 58278
// for i = 1 to fishes do
58213: LD_ADDR_VAR 0 11
58217: PUSH
58218: DOUBLE
58219: LD_INT 1
58221: DEC
58222: ST_TO_ADDR
58223: LD_VAR 0 7
58227: PUSH
58228: FOR_TO
58229: IFFALSE 58276
// begin hc_class = 20 ;
58231: LD_ADDR_OWVAR 28
58235: PUSH
58236: LD_INT 20
58238: ST_TO_ADDR
// hc_gallery =  ;
58239: LD_ADDR_OWVAR 33
58243: PUSH
58244: LD_STRING 
58246: ST_TO_ADDR
// animal := CreateHuman ;
58247: LD_ADDR_VAR 0 12
58251: PUSH
58252: CALL_OW 44
58256: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58257: LD_VAR 0 12
58261: PPUSH
58262: LD_VAR 0 9
58266: PPUSH
58267: LD_INT 0
58269: PPUSH
58270: CALL 59907 0 3
// end ;
58274: GO 58228
58276: POP
58277: POP
// end ;
58278: LD_VAR 0 10
58282: RET
// export function WantHeal ( sci , unit ) ; begin
58283: LD_INT 0
58285: PPUSH
// if GetTaskList ( sci ) > 0 then
58286: LD_VAR 0 1
58290: PPUSH
58291: CALL_OW 437
58295: PUSH
58296: LD_INT 0
58298: GREATER
58299: IFFALSE 58369
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58301: LD_VAR 0 1
58305: PPUSH
58306: CALL_OW 437
58310: PUSH
58311: LD_INT 1
58313: ARRAY
58314: PUSH
58315: LD_INT 1
58317: ARRAY
58318: PUSH
58319: LD_STRING l
58321: EQUAL
58322: PUSH
58323: LD_VAR 0 1
58327: PPUSH
58328: CALL_OW 437
58332: PUSH
58333: LD_INT 1
58335: ARRAY
58336: PUSH
58337: LD_INT 4
58339: ARRAY
58340: PUSH
58341: LD_VAR 0 2
58345: EQUAL
58346: AND
58347: IFFALSE 58359
// result := true else
58349: LD_ADDR_VAR 0 3
58353: PUSH
58354: LD_INT 1
58356: ST_TO_ADDR
58357: GO 58367
// result := false ;
58359: LD_ADDR_VAR 0 3
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// end else
58367: GO 58377
// result := false ;
58369: LD_ADDR_VAR 0 3
58373: PUSH
58374: LD_INT 0
58376: ST_TO_ADDR
// end ;
58377: LD_VAR 0 3
58381: RET
// export function HealTarget ( sci ) ; begin
58382: LD_INT 0
58384: PPUSH
// if not sci then
58385: LD_VAR 0 1
58389: NOT
58390: IFFALSE 58394
// exit ;
58392: GO 58459
// result := 0 ;
58394: LD_ADDR_VAR 0 2
58398: PUSH
58399: LD_INT 0
58401: ST_TO_ADDR
// if GetTaskList ( sci ) then
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL_OW 437
58411: IFFALSE 58459
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58413: LD_VAR 0 1
58417: PPUSH
58418: CALL_OW 437
58422: PUSH
58423: LD_INT 1
58425: ARRAY
58426: PUSH
58427: LD_INT 1
58429: ARRAY
58430: PUSH
58431: LD_STRING l
58433: EQUAL
58434: IFFALSE 58459
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58436: LD_ADDR_VAR 0 2
58440: PUSH
58441: LD_VAR 0 1
58445: PPUSH
58446: CALL_OW 437
58450: PUSH
58451: LD_INT 1
58453: ARRAY
58454: PUSH
58455: LD_INT 4
58457: ARRAY
58458: ST_TO_ADDR
// end ;
58459: LD_VAR 0 2
58463: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58464: LD_INT 0
58466: PPUSH
58467: PPUSH
58468: PPUSH
58469: PPUSH
// if not base_units then
58470: LD_VAR 0 1
58474: NOT
58475: IFFALSE 58479
// exit ;
58477: GO 58566
// result := false ;
58479: LD_ADDR_VAR 0 2
58483: PUSH
58484: LD_INT 0
58486: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58487: LD_ADDR_VAR 0 5
58491: PUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: LD_INT 21
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PPUSH
58507: CALL_OW 72
58511: ST_TO_ADDR
// if not tmp then
58512: LD_VAR 0 5
58516: NOT
58517: IFFALSE 58521
// exit ;
58519: GO 58566
// for i in tmp do
58521: LD_ADDR_VAR 0 3
58525: PUSH
58526: LD_VAR 0 5
58530: PUSH
58531: FOR_IN
58532: IFFALSE 58564
// begin result := EnemyInRange ( i , 22 ) ;
58534: LD_ADDR_VAR 0 2
58538: PUSH
58539: LD_VAR 0 3
58543: PPUSH
58544: LD_INT 22
58546: PPUSH
58547: CALL 56153 0 2
58551: ST_TO_ADDR
// if result then
58552: LD_VAR 0 2
58556: IFFALSE 58562
// exit ;
58558: POP
58559: POP
58560: GO 58566
// end ;
58562: GO 58531
58564: POP
58565: POP
// end ;
58566: LD_VAR 0 2
58570: RET
// export function FilterByTag ( units , tag ) ; begin
58571: LD_INT 0
58573: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58574: LD_ADDR_VAR 0 3
58578: PUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_INT 120
58586: PUSH
58587: LD_VAR 0 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PPUSH
58596: CALL_OW 72
58600: ST_TO_ADDR
// end ;
58601: LD_VAR 0 3
58605: RET
// export function IsDriver ( un ) ; begin
58606: LD_INT 0
58608: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58609: LD_ADDR_VAR 0 2
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_INT 55
58621: PUSH
58622: EMPTY
58623: LIST
58624: PPUSH
58625: CALL_OW 69
58629: IN
58630: ST_TO_ADDR
// end ;
58631: LD_VAR 0 2
58635: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58636: LD_INT 0
58638: PPUSH
58639: PPUSH
// list := [ ] ;
58640: LD_ADDR_VAR 0 5
58644: PUSH
58645: EMPTY
58646: ST_TO_ADDR
// case d of 0 :
58647: LD_VAR 0 3
58651: PUSH
58652: LD_INT 0
58654: DOUBLE
58655: EQUAL
58656: IFTRUE 58660
58658: GO 58793
58660: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58661: LD_ADDR_VAR 0 5
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 4
58673: MINUS
58674: PUSH
58675: LD_VAR 0 2
58679: PUSH
58680: LD_INT 4
58682: MINUS
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: LD_INT 3
58699: MINUS
58700: PUSH
58701: LD_VAR 0 2
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 4
58721: PLUS
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_INT 4
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: PUSH
58736: LD_VAR 0 1
58740: PUSH
58741: LD_INT 3
58743: PLUS
58744: PUSH
58745: LD_VAR 0 2
58749: PUSH
58750: LD_INT 3
58752: PLUS
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: PUSH
58762: LD_VAR 0 1
58766: PUSH
58767: LD_VAR 0 2
58771: PUSH
58772: LD_INT 4
58774: PLUS
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// end ; 1 :
58791: GO 59491
58793: LD_INT 1
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58801
58799: GO 58934
58801: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58802: LD_ADDR_VAR 0 5
58806: PUSH
58807: LD_VAR 0 1
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 4
58819: MINUS
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 3
58836: MINUS
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: LD_INT 3
58845: MINUS
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: PUSH
58855: LD_VAR 0 1
58859: PUSH
58860: LD_INT 4
58862: MINUS
58863: PUSH
58864: LD_VAR 0 2
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 1
58881: PUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_INT 3
58889: PLUS
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: LD_INT 4
58906: PLUS
58907: PUSH
58908: LD_VAR 0 2
58912: PUSH
58913: LD_INT 4
58915: PLUS
58916: PUSH
58917: LD_INT 5
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: ST_TO_ADDR
// end ; 2 :
58932: GO 59491
58934: LD_INT 2
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58942
58940: GO 59071
58942: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58943: LD_ADDR_VAR 0 5
58947: PUSH
58948: LD_VAR 0 1
58952: PUSH
58953: LD_VAR 0 2
58957: PUSH
58958: LD_INT 3
58960: MINUS
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PUSH
58970: LD_VAR 0 1
58974: PUSH
58975: LD_INT 4
58977: PLUS
58978: PUSH
58979: LD_VAR 0 2
58983: PUSH
58984: LD_INT 4
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_VAR 0 2
59001: PUSH
59002: LD_INT 4
59004: PLUS
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 3
59021: MINUS
59022: PUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: PUSH
59036: LD_VAR 0 1
59040: PUSH
59041: LD_INT 4
59043: MINUS
59044: PUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_INT 4
59052: MINUS
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// end ; 3 :
59069: GO 59491
59071: LD_INT 3
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59079
59077: GO 59212
59079: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59080: LD_ADDR_VAR 0 5
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: LD_INT 3
59092: PLUS
59093: PUSH
59094: LD_VAR 0 2
59098: PUSH
59099: LD_INT 4
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: LD_INT 4
59114: PLUS
59115: PUSH
59116: LD_VAR 0 2
59120: PUSH
59121: LD_INT 4
59123: PLUS
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: LD_INT 4
59140: MINUS
59141: PUSH
59142: LD_VAR 0 2
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_VAR 0 2
59164: PUSH
59165: LD_INT 4
59167: MINUS
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: PUSH
59177: LD_VAR 0 1
59181: PUSH
59182: LD_INT 3
59184: MINUS
59185: PUSH
59186: LD_VAR 0 2
59190: PUSH
59191: LD_INT 3
59193: MINUS
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// end ; 4 :
59210: GO 59491
59212: LD_INT 4
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59220
59218: GO 59353
59220: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59221: LD_ADDR_VAR 0 5
59225: PUSH
59226: LD_VAR 0 1
59230: PUSH
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 4
59238: PLUS
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: LD_VAR 0 1
59252: PUSH
59253: LD_INT 3
59255: PLUS
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 3
59264: PLUS
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: PUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_INT 4
59281: PLUS
59282: PUSH
59283: LD_VAR 0 2
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_VAR 0 2
59305: PUSH
59306: LD_INT 3
59308: MINUS
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: LD_INT 4
59325: MINUS
59326: PUSH
59327: LD_VAR 0 2
59331: PUSH
59332: LD_INT 4
59334: MINUS
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// end ; 5 :
59351: GO 59491
59353: LD_INT 5
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59361
59359: GO 59490
59361: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_VAR 0 1
59371: PUSH
59372: LD_INT 4
59374: MINUS
59375: PUSH
59376: LD_VAR 0 2
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: LD_VAR 0 1
59393: PUSH
59394: LD_VAR 0 2
59398: PUSH
59399: LD_INT 4
59401: MINUS
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 1
59415: PUSH
59416: LD_INT 4
59418: PLUS
59419: PUSH
59420: LD_VAR 0 2
59424: PUSH
59425: LD_INT 4
59427: PLUS
59428: PUSH
59429: LD_INT 5
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PUSH
59437: LD_VAR 0 1
59441: PUSH
59442: LD_INT 3
59444: PLUS
59445: PUSH
59446: LD_VAR 0 2
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_VAR 0 2
59468: PUSH
59469: LD_INT 3
59471: PLUS
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// end ; end ;
59488: GO 59491
59490: POP
// result := list ;
59491: LD_ADDR_VAR 0 4
59495: PUSH
59496: LD_VAR 0 5
59500: ST_TO_ADDR
// end ;
59501: LD_VAR 0 4
59505: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59506: LD_INT 0
59508: PPUSH
59509: PPUSH
59510: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59511: LD_VAR 0 1
59515: NOT
59516: PUSH
59517: LD_VAR 0 2
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: IN
59540: NOT
59541: OR
59542: IFFALSE 59546
// exit ;
59544: GO 59629
// tmp := [ ] ;
59546: LD_ADDR_VAR 0 5
59550: PUSH
59551: EMPTY
59552: ST_TO_ADDR
// for i in units do
59553: LD_ADDR_VAR 0 4
59557: PUSH
59558: LD_VAR 0 1
59562: PUSH
59563: FOR_IN
59564: IFFALSE 59598
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59566: LD_ADDR_VAR 0 5
59570: PUSH
59571: LD_VAR 0 5
59575: PPUSH
59576: LD_VAR 0 4
59580: PPUSH
59581: LD_VAR 0 2
59585: PPUSH
59586: CALL_OW 259
59590: PPUSH
59591: CALL 60990 0 2
59595: ST_TO_ADDR
59596: GO 59563
59598: POP
59599: POP
// if not tmp then
59600: LD_VAR 0 5
59604: NOT
59605: IFFALSE 59609
// exit ;
59607: GO 59629
// result := SortListByListDesc ( units , tmp ) ;
59609: LD_ADDR_VAR 0 3
59613: PUSH
59614: LD_VAR 0 1
59618: PPUSH
59619: LD_VAR 0 5
59623: PPUSH
59624: CALL_OW 77
59628: ST_TO_ADDR
// end ;
59629: LD_VAR 0 3
59633: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59634: LD_INT 0
59636: PPUSH
59637: PPUSH
59638: PPUSH
// result := false ;
59639: LD_ADDR_VAR 0 3
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// if not building then
59647: LD_VAR 0 2
59651: NOT
59652: IFFALSE 59656
// exit ;
59654: GO 59794
// x := GetX ( building ) ;
59656: LD_ADDR_VAR 0 4
59660: PUSH
59661: LD_VAR 0 2
59665: PPUSH
59666: CALL_OW 250
59670: ST_TO_ADDR
// y := GetY ( building ) ;
59671: LD_ADDR_VAR 0 5
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: CALL_OW 251
59685: ST_TO_ADDR
// if not x or not y then
59686: LD_VAR 0 4
59690: NOT
59691: PUSH
59692: LD_VAR 0 5
59696: NOT
59697: OR
59698: IFFALSE 59702
// exit ;
59700: GO 59794
// if GetTaskList ( unit ) then
59702: LD_VAR 0 1
59706: PPUSH
59707: CALL_OW 437
59711: IFFALSE 59794
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59713: LD_STRING e
59715: PUSH
59716: LD_VAR 0 1
59720: PPUSH
59721: CALL_OW 437
59725: PUSH
59726: LD_INT 1
59728: ARRAY
59729: PUSH
59730: LD_INT 1
59732: ARRAY
59733: EQUAL
59734: PUSH
59735: LD_VAR 0 4
59739: PUSH
59740: LD_VAR 0 1
59744: PPUSH
59745: CALL_OW 437
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PUSH
59754: LD_INT 2
59756: ARRAY
59757: EQUAL
59758: AND
59759: PUSH
59760: LD_VAR 0 5
59764: PUSH
59765: LD_VAR 0 1
59769: PPUSH
59770: CALL_OW 437
59774: PUSH
59775: LD_INT 1
59777: ARRAY
59778: PUSH
59779: LD_INT 3
59781: ARRAY
59782: EQUAL
59783: AND
59784: IFFALSE 59794
// result := true end ;
59786: LD_ADDR_VAR 0 3
59790: PUSH
59791: LD_INT 1
59793: ST_TO_ADDR
// end ;
59794: LD_VAR 0 3
59798: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59799: LD_INT 0
59801: PPUSH
// result := false ;
59802: LD_ADDR_VAR 0 4
59806: PUSH
59807: LD_INT 0
59809: ST_TO_ADDR
// if GetTaskList ( unit ) then
59810: LD_VAR 0 1
59814: PPUSH
59815: CALL_OW 437
59819: IFFALSE 59902
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59821: LD_STRING M
59823: PUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL_OW 437
59833: PUSH
59834: LD_INT 1
59836: ARRAY
59837: PUSH
59838: LD_INT 1
59840: ARRAY
59841: EQUAL
59842: PUSH
59843: LD_VAR 0 2
59847: PUSH
59848: LD_VAR 0 1
59852: PPUSH
59853: CALL_OW 437
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PUSH
59862: LD_INT 2
59864: ARRAY
59865: EQUAL
59866: AND
59867: PUSH
59868: LD_VAR 0 3
59872: PUSH
59873: LD_VAR 0 1
59877: PPUSH
59878: CALL_OW 437
59882: PUSH
59883: LD_INT 1
59885: ARRAY
59886: PUSH
59887: LD_INT 3
59889: ARRAY
59890: EQUAL
59891: AND
59892: IFFALSE 59902
// result := true ;
59894: LD_ADDR_VAR 0 4
59898: PUSH
59899: LD_INT 1
59901: ST_TO_ADDR
// end ; end ;
59902: LD_VAR 0 4
59906: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
// if not unit or not area then
59913: LD_VAR 0 1
59917: NOT
59918: PUSH
59919: LD_VAR 0 2
59923: NOT
59924: OR
59925: IFFALSE 59929
// exit ;
59927: GO 60093
// tmp := AreaToList ( area , i ) ;
59929: LD_ADDR_VAR 0 6
59933: PUSH
59934: LD_VAR 0 2
59938: PPUSH
59939: LD_VAR 0 5
59943: PPUSH
59944: CALL_OW 517
59948: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59949: LD_ADDR_VAR 0 5
59953: PUSH
59954: DOUBLE
59955: LD_INT 1
59957: DEC
59958: ST_TO_ADDR
59959: LD_VAR 0 6
59963: PUSH
59964: LD_INT 1
59966: ARRAY
59967: PUSH
59968: FOR_TO
59969: IFFALSE 60091
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59971: LD_ADDR_VAR 0 7
59975: PUSH
59976: LD_VAR 0 6
59980: PUSH
59981: LD_INT 1
59983: ARRAY
59984: PUSH
59985: LD_VAR 0 5
59989: ARRAY
59990: PUSH
59991: LD_VAR 0 6
59995: PUSH
59996: LD_INT 2
59998: ARRAY
59999: PUSH
60000: LD_VAR 0 5
60004: ARRAY
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60010: LD_VAR 0 7
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: LD_VAR 0 7
60023: PUSH
60024: LD_INT 2
60026: ARRAY
60027: PPUSH
60028: CALL_OW 428
60032: PUSH
60033: LD_INT 0
60035: EQUAL
60036: IFFALSE 60089
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60038: LD_VAR 0 1
60042: PPUSH
60043: LD_VAR 0 7
60047: PUSH
60048: LD_INT 1
60050: ARRAY
60051: PPUSH
60052: LD_VAR 0 7
60056: PUSH
60057: LD_INT 2
60059: ARRAY
60060: PPUSH
60061: LD_VAR 0 3
60065: PPUSH
60066: CALL_OW 48
// result := IsPlaced ( unit ) ;
60070: LD_ADDR_VAR 0 4
60074: PUSH
60075: LD_VAR 0 1
60079: PPUSH
60080: CALL_OW 305
60084: ST_TO_ADDR
// exit ;
60085: POP
60086: POP
60087: GO 60093
// end ; end ;
60089: GO 59968
60091: POP
60092: POP
// end ;
60093: LD_VAR 0 4
60097: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60098: LD_INT 0
60100: PPUSH
60101: PPUSH
60102: PPUSH
// if not side or side > 8 then
60103: LD_VAR 0 1
60107: NOT
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_INT 8
60116: GREATER
60117: OR
60118: IFFALSE 60122
// exit ;
60120: GO 60309
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60122: LD_ADDR_VAR 0 4
60126: PUSH
60127: LD_INT 22
60129: PUSH
60130: LD_VAR 0 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 21
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PPUSH
60153: CALL_OW 69
60157: ST_TO_ADDR
// if not tmp then
60158: LD_VAR 0 4
60162: NOT
60163: IFFALSE 60167
// exit ;
60165: GO 60309
// enable_addtolog := true ;
60167: LD_ADDR_OWVAR 81
60171: PUSH
60172: LD_INT 1
60174: ST_TO_ADDR
// AddToLog ( [ ) ;
60175: LD_STRING [
60177: PPUSH
60178: CALL_OW 561
// for i in tmp do
60182: LD_ADDR_VAR 0 3
60186: PUSH
60187: LD_VAR 0 4
60191: PUSH
60192: FOR_IN
60193: IFFALSE 60300
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60195: LD_STRING [
60197: PUSH
60198: LD_VAR 0 3
60202: PPUSH
60203: CALL_OW 266
60207: STR
60208: PUSH
60209: LD_STRING , 
60211: STR
60212: PUSH
60213: LD_VAR 0 3
60217: PPUSH
60218: CALL_OW 250
60222: STR
60223: PUSH
60224: LD_STRING , 
60226: STR
60227: PUSH
60228: LD_VAR 0 3
60232: PPUSH
60233: CALL_OW 251
60237: STR
60238: PUSH
60239: LD_STRING , 
60241: STR
60242: PUSH
60243: LD_VAR 0 3
60247: PPUSH
60248: CALL_OW 254
60252: STR
60253: PUSH
60254: LD_STRING , 
60256: STR
60257: PUSH
60258: LD_VAR 0 3
60262: PPUSH
60263: LD_INT 1
60265: PPUSH
60266: CALL_OW 268
60270: STR
60271: PUSH
60272: LD_STRING , 
60274: STR
60275: PUSH
60276: LD_VAR 0 3
60280: PPUSH
60281: LD_INT 2
60283: PPUSH
60284: CALL_OW 268
60288: STR
60289: PUSH
60290: LD_STRING ],
60292: STR
60293: PPUSH
60294: CALL_OW 561
// end ;
60298: GO 60192
60300: POP
60301: POP
// AddToLog ( ]; ) ;
60302: LD_STRING ];
60304: PPUSH
60305: CALL_OW 561
// end ;
60309: LD_VAR 0 2
60313: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60314: LD_INT 0
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
60320: PPUSH
// if not area or not rate or not max then
60321: LD_VAR 0 1
60325: NOT
60326: PUSH
60327: LD_VAR 0 2
60331: NOT
60332: OR
60333: PUSH
60334: LD_VAR 0 4
60338: NOT
60339: OR
60340: IFFALSE 60344
// exit ;
60342: GO 60533
// while 1 do
60344: LD_INT 1
60346: IFFALSE 60533
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60348: LD_ADDR_VAR 0 9
60352: PUSH
60353: LD_VAR 0 1
60357: PPUSH
60358: LD_INT 1
60360: PPUSH
60361: CALL_OW 287
60365: PUSH
60366: LD_INT 10
60368: MUL
60369: ST_TO_ADDR
// r := rate / 10 ;
60370: LD_ADDR_VAR 0 7
60374: PUSH
60375: LD_VAR 0 2
60379: PUSH
60380: LD_INT 10
60382: DIVREAL
60383: ST_TO_ADDR
// time := 1 1$00 ;
60384: LD_ADDR_VAR 0 8
60388: PUSH
60389: LD_INT 2100
60391: ST_TO_ADDR
// if amount < min then
60392: LD_VAR 0 9
60396: PUSH
60397: LD_VAR 0 3
60401: LESS
60402: IFFALSE 60420
// r := r * 2 else
60404: LD_ADDR_VAR 0 7
60408: PUSH
60409: LD_VAR 0 7
60413: PUSH
60414: LD_INT 2
60416: MUL
60417: ST_TO_ADDR
60418: GO 60446
// if amount > max then
60420: LD_VAR 0 9
60424: PUSH
60425: LD_VAR 0 4
60429: GREATER
60430: IFFALSE 60446
// r := r / 2 ;
60432: LD_ADDR_VAR 0 7
60436: PUSH
60437: LD_VAR 0 7
60441: PUSH
60442: LD_INT 2
60444: DIVREAL
60445: ST_TO_ADDR
// time := time / r ;
60446: LD_ADDR_VAR 0 8
60450: PUSH
60451: LD_VAR 0 8
60455: PUSH
60456: LD_VAR 0 7
60460: DIVREAL
60461: ST_TO_ADDR
// if time < 0 then
60462: LD_VAR 0 8
60466: PUSH
60467: LD_INT 0
60469: LESS
60470: IFFALSE 60487
// time := time * - 1 ;
60472: LD_ADDR_VAR 0 8
60476: PUSH
60477: LD_VAR 0 8
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: MUL
60486: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60487: LD_VAR 0 8
60491: PUSH
60492: LD_INT 35
60494: PPUSH
60495: LD_INT 875
60497: PPUSH
60498: CALL_OW 12
60502: PLUS
60503: PPUSH
60504: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60508: LD_INT 1
60510: PPUSH
60511: LD_INT 5
60513: PPUSH
60514: CALL_OW 12
60518: PPUSH
60519: LD_VAR 0 1
60523: PPUSH
60524: LD_INT 1
60526: PPUSH
60527: CALL_OW 55
// end ;
60531: GO 60344
// end ;
60533: LD_VAR 0 5
60537: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60538: LD_INT 0
60540: PPUSH
60541: PPUSH
60542: PPUSH
60543: PPUSH
60544: PPUSH
60545: PPUSH
60546: PPUSH
60547: PPUSH
// if not turrets or not factories then
60548: LD_VAR 0 1
60552: NOT
60553: PUSH
60554: LD_VAR 0 2
60558: NOT
60559: OR
60560: IFFALSE 60564
// exit ;
60562: GO 60871
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60564: LD_ADDR_VAR 0 10
60568: PUSH
60569: LD_INT 5
60571: PUSH
60572: LD_INT 6
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: LD_INT 5
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 24
60606: PUSH
60607: LD_INT 25
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 23
60616: PUSH
60617: LD_INT 27
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 42
60630: PUSH
60631: LD_INT 43
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 44
60640: PUSH
60641: LD_INT 46
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 45
60650: PUSH
60651: LD_INT 47
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// result := [ ] ;
60668: LD_ADDR_VAR 0 3
60672: PUSH
60673: EMPTY
60674: ST_TO_ADDR
// for i in turrets do
60675: LD_ADDR_VAR 0 4
60679: PUSH
60680: LD_VAR 0 1
60684: PUSH
60685: FOR_IN
60686: IFFALSE 60869
// begin nat := GetNation ( i ) ;
60688: LD_ADDR_VAR 0 7
60692: PUSH
60693: LD_VAR 0 4
60697: PPUSH
60698: CALL_OW 248
60702: ST_TO_ADDR
// weapon := 0 ;
60703: LD_ADDR_VAR 0 8
60707: PUSH
60708: LD_INT 0
60710: ST_TO_ADDR
// if not nat then
60711: LD_VAR 0 7
60715: NOT
60716: IFFALSE 60720
// continue ;
60718: GO 60685
// for j in list [ nat ] do
60720: LD_ADDR_VAR 0 5
60724: PUSH
60725: LD_VAR 0 10
60729: PUSH
60730: LD_VAR 0 7
60734: ARRAY
60735: PUSH
60736: FOR_IN
60737: IFFALSE 60778
// if GetBWeapon ( i ) = j [ 1 ] then
60739: LD_VAR 0 4
60743: PPUSH
60744: CALL_OW 269
60748: PUSH
60749: LD_VAR 0 5
60753: PUSH
60754: LD_INT 1
60756: ARRAY
60757: EQUAL
60758: IFFALSE 60776
// begin weapon := j [ 2 ] ;
60760: LD_ADDR_VAR 0 8
60764: PUSH
60765: LD_VAR 0 5
60769: PUSH
60770: LD_INT 2
60772: ARRAY
60773: ST_TO_ADDR
// break ;
60774: GO 60778
// end ;
60776: GO 60736
60778: POP
60779: POP
// if not weapon then
60780: LD_VAR 0 8
60784: NOT
60785: IFFALSE 60789
// continue ;
60787: GO 60685
// for k in factories do
60789: LD_ADDR_VAR 0 6
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: FOR_IN
60800: IFFALSE 60865
// begin weapons := AvailableWeaponList ( k ) ;
60802: LD_ADDR_VAR 0 9
60806: PUSH
60807: LD_VAR 0 6
60811: PPUSH
60812: CALL_OW 478
60816: ST_TO_ADDR
// if not weapons then
60817: LD_VAR 0 9
60821: NOT
60822: IFFALSE 60826
// continue ;
60824: GO 60799
// if weapon in weapons then
60826: LD_VAR 0 8
60830: PUSH
60831: LD_VAR 0 9
60835: IN
60836: IFFALSE 60863
// begin result := [ i , weapon ] ;
60838: LD_ADDR_VAR 0 3
60842: PUSH
60843: LD_VAR 0 4
60847: PUSH
60848: LD_VAR 0 8
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// exit ;
60857: POP
60858: POP
60859: POP
60860: POP
60861: GO 60871
// end ; end ;
60863: GO 60799
60865: POP
60866: POP
// end ;
60867: GO 60685
60869: POP
60870: POP
// end ;
60871: LD_VAR 0 3
60875: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60876: LD_INT 0
60878: PPUSH
// if not side or side > 8 then
60879: LD_VAR 0 3
60883: NOT
60884: PUSH
60885: LD_VAR 0 3
60889: PUSH
60890: LD_INT 8
60892: GREATER
60893: OR
60894: IFFALSE 60898
// exit ;
60896: GO 60957
// if not range then
60898: LD_VAR 0 4
60902: NOT
60903: IFFALSE 60914
// range := - 12 ;
60905: LD_ADDR_VAR 0 4
60909: PUSH
60910: LD_INT 12
60912: NEG
60913: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60914: LD_VAR 0 1
60918: PPUSH
60919: LD_VAR 0 2
60923: PPUSH
60924: LD_VAR 0 3
60928: PPUSH
60929: LD_VAR 0 4
60933: PPUSH
60934: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_VAR 0 2
60947: PPUSH
60948: LD_VAR 0 3
60952: PPUSH
60953: CALL_OW 331
// end ;
60957: LD_VAR 0 5
60961: RET
// export function Video ( mode ) ; begin
60962: LD_INT 0
60964: PPUSH
// ingame_video = mode ;
60965: LD_ADDR_OWVAR 52
60969: PUSH
60970: LD_VAR 0 1
60974: ST_TO_ADDR
// interface_hidden = mode ;
60975: LD_ADDR_OWVAR 54
60979: PUSH
60980: LD_VAR 0 1
60984: ST_TO_ADDR
// end ;
60985: LD_VAR 0 2
60989: RET
// export function Join ( array , element ) ; begin
60990: LD_INT 0
60992: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 1
61007: PUSH
61008: LD_INT 1
61010: PLUS
61011: PPUSH
61012: LD_VAR 0 2
61016: PPUSH
61017: CALL_OW 1
61021: ST_TO_ADDR
// end ;
61022: LD_VAR 0 3
61026: RET
// export function JoinUnion ( array , element ) ; begin
61027: LD_INT 0
61029: PPUSH
// result := array union element ;
61030: LD_ADDR_VAR 0 3
61034: PUSH
61035: LD_VAR 0 1
61039: PUSH
61040: LD_VAR 0 2
61044: UNION
61045: ST_TO_ADDR
// end ;
61046: LD_VAR 0 3
61050: RET
// export function GetBehemoths ( side ) ; begin
61051: LD_INT 0
61053: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61054: LD_ADDR_VAR 0 2
61058: PUSH
61059: LD_INT 22
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 31
61073: PUSH
61074: LD_INT 25
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PPUSH
61085: CALL_OW 69
61089: ST_TO_ADDR
// end ;
61090: LD_VAR 0 2
61094: RET
// export function Shuffle ( array ) ; var i , index ; begin
61095: LD_INT 0
61097: PPUSH
61098: PPUSH
61099: PPUSH
// result := [ ] ;
61100: LD_ADDR_VAR 0 2
61104: PUSH
61105: EMPTY
61106: ST_TO_ADDR
// if not array then
61107: LD_VAR 0 1
61111: NOT
61112: IFFALSE 61116
// exit ;
61114: GO 61215
// Randomize ;
61116: CALL_OW 10
// for i = array downto 1 do
61120: LD_ADDR_VAR 0 3
61124: PUSH
61125: DOUBLE
61126: LD_VAR 0 1
61130: INC
61131: ST_TO_ADDR
61132: LD_INT 1
61134: PUSH
61135: FOR_DOWNTO
61136: IFFALSE 61213
// begin index := rand ( 1 , array ) ;
61138: LD_ADDR_VAR 0 4
61142: PUSH
61143: LD_INT 1
61145: PPUSH
61146: LD_VAR 0 1
61150: PPUSH
61151: CALL_OW 12
61155: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61156: LD_ADDR_VAR 0 2
61160: PUSH
61161: LD_VAR 0 2
61165: PPUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_INT 1
61173: PLUS
61174: PPUSH
61175: LD_VAR 0 1
61179: PUSH
61180: LD_VAR 0 4
61184: ARRAY
61185: PPUSH
61186: CALL_OW 2
61190: ST_TO_ADDR
// array := Delete ( array , index ) ;
61191: LD_ADDR_VAR 0 1
61195: PUSH
61196: LD_VAR 0 1
61200: PPUSH
61201: LD_VAR 0 4
61205: PPUSH
61206: CALL_OW 3
61210: ST_TO_ADDR
// end ;
61211: GO 61135
61213: POP
61214: POP
// end ;
61215: LD_VAR 0 2
61219: RET
// export function GetBaseMaterials ( base ) ; begin
61220: LD_INT 0
61222: PPUSH
// result := [ 0 , 0 , 0 ] ;
61223: LD_ADDR_VAR 0 2
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// if not base then
61242: LD_VAR 0 1
61246: NOT
61247: IFFALSE 61251
// exit ;
61249: GO 61300
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61251: LD_ADDR_VAR 0 2
61255: PUSH
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_INT 1
61263: PPUSH
61264: CALL_OW 275
61268: PUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: LD_INT 2
61276: PPUSH
61277: CALL_OW 275
61281: PUSH
61282: LD_VAR 0 1
61286: PPUSH
61287: LD_INT 3
61289: PPUSH
61290: CALL_OW 275
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// end ;
61300: LD_VAR 0 2
61304: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
// result := array ;
61309: LD_ADDR_VAR 0 3
61313: PUSH
61314: LD_VAR 0 1
61318: ST_TO_ADDR
// if size >= result then
61319: LD_VAR 0 2
61323: PUSH
61324: LD_VAR 0 3
61328: GREATEREQUAL
61329: IFFALSE 61333
// exit ;
61331: GO 61383
// if size then
61333: LD_VAR 0 2
61337: IFFALSE 61383
// for i := array downto size do
61339: LD_ADDR_VAR 0 4
61343: PUSH
61344: DOUBLE
61345: LD_VAR 0 1
61349: INC
61350: ST_TO_ADDR
61351: LD_VAR 0 2
61355: PUSH
61356: FOR_DOWNTO
61357: IFFALSE 61381
// result := Delete ( result , result ) ;
61359: LD_ADDR_VAR 0 3
61363: PUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: LD_VAR 0 3
61373: PPUSH
61374: CALL_OW 3
61378: ST_TO_ADDR
61379: GO 61356
61381: POP
61382: POP
// end ;
61383: LD_VAR 0 3
61387: RET
// export function ComExit ( unit ) ; var tmp ; begin
61388: LD_INT 0
61390: PPUSH
61391: PPUSH
// if not IsInUnit ( unit ) then
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 310
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61466
// tmp := IsInUnit ( unit ) ;
61406: LD_ADDR_VAR 0 3
61410: PUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 310
61420: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61421: LD_VAR 0 3
61425: PPUSH
61426: CALL_OW 247
61430: PUSH
61431: LD_INT 2
61433: EQUAL
61434: IFFALSE 61447
// ComExitVehicle ( unit ) else
61436: LD_VAR 0 1
61440: PPUSH
61441: CALL_OW 121
61445: GO 61456
// ComExitBuilding ( unit ) ;
61447: LD_VAR 0 1
61451: PPUSH
61452: CALL_OW 122
// result := tmp ;
61456: LD_ADDR_VAR 0 2
61460: PUSH
61461: LD_VAR 0 3
61465: ST_TO_ADDR
// end ;
61466: LD_VAR 0 2
61470: RET
// export function ComExitAll ( units ) ; var i ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
// if not units then
61475: LD_VAR 0 1
61479: NOT
61480: IFFALSE 61484
// exit ;
61482: GO 61510
// for i in units do
61484: LD_ADDR_VAR 0 3
61488: PUSH
61489: LD_VAR 0 1
61493: PUSH
61494: FOR_IN
61495: IFFALSE 61508
// ComExit ( i ) ;
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL 61388 0 1
61506: GO 61494
61508: POP
61509: POP
// end ;
61510: LD_VAR 0 2
61514: RET
// export function ResetHc ; begin
61515: LD_INT 0
61517: PPUSH
// InitHc ;
61518: CALL_OW 19
// hc_importance := 0 ;
61522: LD_ADDR_OWVAR 32
61526: PUSH
61527: LD_INT 0
61529: ST_TO_ADDR
// end ;
61530: LD_VAR 0 1
61534: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61535: LD_INT 0
61537: PPUSH
61538: PPUSH
61539: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61540: LD_ADDR_VAR 0 6
61544: PUSH
61545: LD_VAR 0 1
61549: PUSH
61550: LD_VAR 0 3
61554: PLUS
61555: PUSH
61556: LD_INT 2
61558: DIV
61559: ST_TO_ADDR
// if _x < 0 then
61560: LD_VAR 0 6
61564: PUSH
61565: LD_INT 0
61567: LESS
61568: IFFALSE 61585
// _x := _x * - 1 ;
61570: LD_ADDR_VAR 0 6
61574: PUSH
61575: LD_VAR 0 6
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: MUL
61584: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61585: LD_ADDR_VAR 0 7
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_VAR 0 4
61599: PLUS
61600: PUSH
61601: LD_INT 2
61603: DIV
61604: ST_TO_ADDR
// if _y < 0 then
61605: LD_VAR 0 7
61609: PUSH
61610: LD_INT 0
61612: LESS
61613: IFFALSE 61630
// _y := _y * - 1 ;
61615: LD_ADDR_VAR 0 7
61619: PUSH
61620: LD_VAR 0 7
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: MUL
61629: ST_TO_ADDR
// result := [ _x , _y ] ;
61630: LD_ADDR_VAR 0 5
61634: PUSH
61635: LD_VAR 0 6
61639: PUSH
61640: LD_VAR 0 7
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// end ;
61649: LD_VAR 0 5
61653: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61654: LD_INT 0
61656: PPUSH
61657: PPUSH
61658: PPUSH
61659: PPUSH
// task := GetTaskList ( unit ) ;
61660: LD_ADDR_VAR 0 7
61664: PUSH
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 437
61674: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61675: LD_VAR 0 7
61679: NOT
61680: PUSH
61681: LD_VAR 0 1
61685: PPUSH
61686: LD_VAR 0 2
61690: PPUSH
61691: CALL_OW 308
61695: NOT
61696: AND
61697: IFFALSE 61701
// exit ;
61699: GO 61819
// if IsInArea ( unit , area ) then
61701: LD_VAR 0 1
61705: PPUSH
61706: LD_VAR 0 2
61710: PPUSH
61711: CALL_OW 308
61715: IFFALSE 61733
// begin ComMoveToArea ( unit , goAway ) ;
61717: LD_VAR 0 1
61721: PPUSH
61722: LD_VAR 0 3
61726: PPUSH
61727: CALL_OW 113
// exit ;
61731: GO 61819
// end ; if task [ 1 ] [ 1 ] <> M then
61733: LD_VAR 0 7
61737: PUSH
61738: LD_INT 1
61740: ARRAY
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: PUSH
61746: LD_STRING M
61748: NONEQUAL
61749: IFFALSE 61753
// exit ;
61751: GO 61819
// x := task [ 1 ] [ 2 ] ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: LD_VAR 0 7
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: PUSH
61767: LD_INT 2
61769: ARRAY
61770: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61771: LD_ADDR_VAR 0 6
61775: PUSH
61776: LD_VAR 0 7
61780: PUSH
61781: LD_INT 1
61783: ARRAY
61784: PUSH
61785: LD_INT 3
61787: ARRAY
61788: ST_TO_ADDR
// if InArea ( x , y , area ) then
61789: LD_VAR 0 5
61793: PPUSH
61794: LD_VAR 0 6
61798: PPUSH
61799: LD_VAR 0 2
61803: PPUSH
61804: CALL_OW 309
61808: IFFALSE 61819
// ComStop ( unit ) ;
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL_OW 141
// end ;
61819: LD_VAR 0 4
61823: RET
// export function Abs ( value ) ; begin
61824: LD_INT 0
61826: PPUSH
// result := value ;
61827: LD_ADDR_VAR 0 2
61831: PUSH
61832: LD_VAR 0 1
61836: ST_TO_ADDR
// if value < 0 then
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 0
61844: LESS
61845: IFFALSE 61862
// result := value * - 1 ;
61847: LD_ADDR_VAR 0 2
61851: PUSH
61852: LD_VAR 0 1
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: MUL
61861: ST_TO_ADDR
// end ;
61862: LD_VAR 0 2
61866: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61867: LD_INT 0
61869: PPUSH
61870: PPUSH
61871: PPUSH
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
// if not unit or not building then
61877: LD_VAR 0 1
61881: NOT
61882: PUSH
61883: LD_VAR 0 2
61887: NOT
61888: OR
61889: IFFALSE 61893
// exit ;
61891: GO 62119
// x := GetX ( building ) ;
61893: LD_ADDR_VAR 0 4
61897: PUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: CALL_OW 250
61907: ST_TO_ADDR
// y := GetY ( building ) ;
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 2
61917: PPUSH
61918: CALL_OW 251
61922: ST_TO_ADDR
// d := GetDir ( building ) ;
61923: LD_ADDR_VAR 0 8
61927: PUSH
61928: LD_VAR 0 2
61932: PPUSH
61933: CALL_OW 254
61937: ST_TO_ADDR
// r := 4 ;
61938: LD_ADDR_VAR 0 9
61942: PUSH
61943: LD_INT 4
61945: ST_TO_ADDR
// for i := 1 to 5 do
61946: LD_ADDR_VAR 0 10
61950: PUSH
61951: DOUBLE
61952: LD_INT 1
61954: DEC
61955: ST_TO_ADDR
61956: LD_INT 5
61958: PUSH
61959: FOR_TO
61960: IFFALSE 62117
// begin _x := ShiftX ( x , d , r + i ) ;
61962: LD_ADDR_VAR 0 5
61966: PUSH
61967: LD_VAR 0 4
61971: PPUSH
61972: LD_VAR 0 8
61976: PPUSH
61977: LD_VAR 0 9
61981: PUSH
61982: LD_VAR 0 10
61986: PLUS
61987: PPUSH
61988: CALL_OW 272
61992: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61993: LD_ADDR_VAR 0 7
61997: PUSH
61998: LD_VAR 0 6
62002: PPUSH
62003: LD_VAR 0 8
62007: PPUSH
62008: LD_VAR 0 9
62012: PUSH
62013: LD_VAR 0 10
62017: PLUS
62018: PPUSH
62019: CALL_OW 273
62023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62024: LD_VAR 0 5
62028: PPUSH
62029: LD_VAR 0 7
62033: PPUSH
62034: CALL_OW 488
62038: PUSH
62039: LD_VAR 0 5
62043: PPUSH
62044: LD_VAR 0 7
62048: PPUSH
62049: CALL_OW 428
62053: PPUSH
62054: CALL_OW 247
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: IN
62069: NOT
62070: AND
62071: IFFALSE 62115
// begin ComMoveXY ( unit , _x , _y ) ;
62073: LD_VAR 0 1
62077: PPUSH
62078: LD_VAR 0 5
62082: PPUSH
62083: LD_VAR 0 7
62087: PPUSH
62088: CALL_OW 111
// result := [ _x , _y ] ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_VAR 0 5
62101: PUSH
62102: LD_VAR 0 7
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// exit ;
62111: POP
62112: POP
62113: GO 62119
// end ; end ;
62115: GO 61959
62117: POP
62118: POP
// end ;
62119: LD_VAR 0 3
62123: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62124: LD_INT 0
62126: PPUSH
62127: PPUSH
62128: PPUSH
// result := 0 ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_INT 0
62136: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 0
62144: LESS
62145: PUSH
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 8
62153: GREATER
62154: OR
62155: PUSH
62156: LD_VAR 0 2
62160: PUSH
62161: LD_INT 0
62163: LESS
62164: OR
62165: PUSH
62166: LD_VAR 0 2
62170: PUSH
62171: LD_INT 8
62173: GREATER
62174: OR
62175: IFFALSE 62179
// exit ;
62177: GO 62254
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62179: LD_ADDR_VAR 0 4
62183: PUSH
62184: LD_INT 22
62186: PUSH
62187: LD_VAR 0 2
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PPUSH
62196: CALL_OW 69
62200: PUSH
62201: FOR_IN
62202: IFFALSE 62252
// begin un := UnitShoot ( i ) ;
62204: LD_ADDR_VAR 0 5
62208: PUSH
62209: LD_VAR 0 4
62213: PPUSH
62214: CALL_OW 504
62218: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62219: LD_VAR 0 5
62223: PPUSH
62224: CALL_OW 255
62228: PUSH
62229: LD_VAR 0 1
62233: EQUAL
62234: IFFALSE 62250
// begin result := un ;
62236: LD_ADDR_VAR 0 3
62240: PUSH
62241: LD_VAR 0 5
62245: ST_TO_ADDR
// exit ;
62246: POP
62247: POP
62248: GO 62254
// end ; end ;
62250: GO 62201
62252: POP
62253: POP
// end ;
62254: LD_VAR 0 3
62258: RET
// export function GetCargoBay ( units ) ; begin
62259: LD_INT 0
62261: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: LD_VAR 0 1
62271: PPUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 34
62277: PUSH
62278: LD_INT 12
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 34
62287: PUSH
62288: LD_INT 51
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 34
62297: PUSH
62298: LD_INT 32
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 34
62307: PUSH
62308: LD_INT 89
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: PPUSH
62322: CALL_OW 72
62326: ST_TO_ADDR
// end ;
62327: LD_VAR 0 2
62331: RET
// export function Negate ( value ) ; begin
62332: LD_INT 0
62334: PPUSH
// result := not value ;
62335: LD_ADDR_VAR 0 2
62339: PUSH
62340: LD_VAR 0 1
62344: NOT
62345: ST_TO_ADDR
// end ;
62346: LD_VAR 0 2
62350: RET
// export function Inc ( value ) ; begin
62351: LD_INT 0
62353: PPUSH
// result := value + 1 ;
62354: LD_ADDR_VAR 0 2
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_INT 1
62366: PLUS
62367: ST_TO_ADDR
// end ;
62368: LD_VAR 0 2
62372: RET
// export function Dec ( value ) ; begin
62373: LD_INT 0
62375: PPUSH
// result := value - 1 ;
62376: LD_ADDR_VAR 0 2
62380: PUSH
62381: LD_VAR 0 1
62385: PUSH
62386: LD_INT 1
62388: MINUS
62389: ST_TO_ADDR
// end ;
62390: LD_VAR 0 2
62394: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62395: LD_INT 0
62397: PPUSH
62398: PPUSH
62399: PPUSH
62400: PPUSH
62401: PPUSH
62402: PPUSH
62403: PPUSH
62404: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62405: LD_VAR 0 1
62409: PPUSH
62410: LD_VAR 0 2
62414: PPUSH
62415: CALL_OW 488
62419: NOT
62420: PUSH
62421: LD_VAR 0 3
62425: PPUSH
62426: LD_VAR 0 4
62430: PPUSH
62431: CALL_OW 488
62435: NOT
62436: OR
62437: IFFALSE 62450
// begin result := - 1 ;
62439: LD_ADDR_VAR 0 5
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: ST_TO_ADDR
// exit ;
62448: GO 62685
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62450: LD_ADDR_VAR 0 12
62454: PUSH
62455: LD_VAR 0 1
62459: PPUSH
62460: LD_VAR 0 2
62464: PPUSH
62465: LD_VAR 0 3
62469: PPUSH
62470: LD_VAR 0 4
62474: PPUSH
62475: CALL 61535 0 4
62479: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62480: LD_ADDR_VAR 0 11
62484: PUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: LD_VAR 0 2
62494: PPUSH
62495: LD_VAR 0 12
62499: PUSH
62500: LD_INT 1
62502: ARRAY
62503: PPUSH
62504: LD_VAR 0 12
62508: PUSH
62509: LD_INT 2
62511: ARRAY
62512: PPUSH
62513: CALL_OW 298
62517: ST_TO_ADDR
// distance := 9999 ;
62518: LD_ADDR_VAR 0 10
62522: PUSH
62523: LD_INT 9999
62525: ST_TO_ADDR
// for i := 0 to 5 do
62526: LD_ADDR_VAR 0 6
62530: PUSH
62531: DOUBLE
62532: LD_INT 0
62534: DEC
62535: ST_TO_ADDR
62536: LD_INT 5
62538: PUSH
62539: FOR_TO
62540: IFFALSE 62683
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62542: LD_ADDR_VAR 0 7
62546: PUSH
62547: LD_VAR 0 1
62551: PPUSH
62552: LD_VAR 0 6
62556: PPUSH
62557: LD_VAR 0 11
62561: PPUSH
62562: CALL_OW 272
62566: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62567: LD_ADDR_VAR 0 8
62571: PUSH
62572: LD_VAR 0 2
62576: PPUSH
62577: LD_VAR 0 6
62581: PPUSH
62582: LD_VAR 0 11
62586: PPUSH
62587: CALL_OW 273
62591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62592: LD_VAR 0 7
62596: PPUSH
62597: LD_VAR 0 8
62601: PPUSH
62602: CALL_OW 488
62606: NOT
62607: IFFALSE 62611
// continue ;
62609: GO 62539
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62611: LD_ADDR_VAR 0 9
62615: PUSH
62616: LD_VAR 0 12
62620: PUSH
62621: LD_INT 1
62623: ARRAY
62624: PPUSH
62625: LD_VAR 0 12
62629: PUSH
62630: LD_INT 2
62632: ARRAY
62633: PPUSH
62634: LD_VAR 0 7
62638: PPUSH
62639: LD_VAR 0 8
62643: PPUSH
62644: CALL_OW 298
62648: ST_TO_ADDR
// if tmp < distance then
62649: LD_VAR 0 9
62653: PUSH
62654: LD_VAR 0 10
62658: LESS
62659: IFFALSE 62681
// begin result := i ;
62661: LD_ADDR_VAR 0 5
62665: PUSH
62666: LD_VAR 0 6
62670: ST_TO_ADDR
// distance := tmp ;
62671: LD_ADDR_VAR 0 10
62675: PUSH
62676: LD_VAR 0 9
62680: ST_TO_ADDR
// end ; end ;
62681: GO 62539
62683: POP
62684: POP
// end ;
62685: LD_VAR 0 5
62689: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62690: LD_INT 0
62692: PPUSH
62693: PPUSH
// if not driver or not IsInUnit ( driver ) then
62694: LD_VAR 0 1
62698: NOT
62699: PUSH
62700: LD_VAR 0 1
62704: PPUSH
62705: CALL_OW 310
62709: NOT
62710: OR
62711: IFFALSE 62715
// exit ;
62713: GO 62805
// vehicle := IsInUnit ( driver ) ;
62715: LD_ADDR_VAR 0 3
62719: PUSH
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 310
62729: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62730: LD_VAR 0 1
62734: PPUSH
62735: LD_STRING \
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: PUSH
62765: LD_STRING E
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_VAR 0 3
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PPUSH
62801: CALL_OW 446
// end ;
62805: LD_VAR 0 2
62809: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62810: LD_INT 0
62812: PPUSH
62813: PPUSH
// if not driver or not IsInUnit ( driver ) then
62814: LD_VAR 0 1
62818: NOT
62819: PUSH
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 310
62829: NOT
62830: OR
62831: IFFALSE 62835
// exit ;
62833: GO 62925
// vehicle := IsInUnit ( driver ) ;
62835: LD_ADDR_VAR 0 3
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: CALL_OW 310
62849: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62850: LD_VAR 0 1
62854: PPUSH
62855: LD_STRING \
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: PUSH
62885: LD_STRING E
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_VAR 0 3
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PPUSH
62921: CALL_OW 447
// end ;
62925: LD_VAR 0 2
62929: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62930: LD_INT 0
62932: PPUSH
62933: PPUSH
62934: PPUSH
// tmp := [ ] ;
62935: LD_ADDR_VAR 0 5
62939: PUSH
62940: EMPTY
62941: ST_TO_ADDR
// for i in units do
62942: LD_ADDR_VAR 0 4
62946: PUSH
62947: LD_VAR 0 1
62951: PUSH
62952: FOR_IN
62953: IFFALSE 62991
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62955: LD_ADDR_VAR 0 5
62959: PUSH
62960: LD_VAR 0 5
62964: PPUSH
62965: LD_VAR 0 5
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: PPUSH
62974: LD_VAR 0 4
62978: PPUSH
62979: CALL_OW 256
62983: PPUSH
62984: CALL_OW 2
62988: ST_TO_ADDR
62989: GO 62952
62991: POP
62992: POP
// if not tmp then
62993: LD_VAR 0 5
62997: NOT
62998: IFFALSE 63002
// exit ;
63000: GO 63050
// if asc then
63002: LD_VAR 0 2
63006: IFFALSE 63030
// result := SortListByListAsc ( units , tmp ) else
63008: LD_ADDR_VAR 0 3
63012: PUSH
63013: LD_VAR 0 1
63017: PPUSH
63018: LD_VAR 0 5
63022: PPUSH
63023: CALL_OW 76
63027: ST_TO_ADDR
63028: GO 63050
// result := SortListByListDesc ( units , tmp ) ;
63030: LD_ADDR_VAR 0 3
63034: PUSH
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_VAR 0 5
63044: PPUSH
63045: CALL_OW 77
63049: ST_TO_ADDR
// end ;
63050: LD_VAR 0 3
63054: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63055: LD_INT 0
63057: PPUSH
63058: PPUSH
// task := GetTaskList ( mech ) ;
63059: LD_ADDR_VAR 0 4
63063: PUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: CALL_OW 437
63073: ST_TO_ADDR
// if not task then
63074: LD_VAR 0 4
63078: NOT
63079: IFFALSE 63083
// exit ;
63081: GO 63125
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63083: LD_ADDR_VAR 0 3
63087: PUSH
63088: LD_VAR 0 4
63092: PUSH
63093: LD_INT 1
63095: ARRAY
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PUSH
63101: LD_STRING r
63103: EQUAL
63104: PUSH
63105: LD_VAR 0 4
63109: PUSH
63110: LD_INT 1
63112: ARRAY
63113: PUSH
63114: LD_INT 4
63116: ARRAY
63117: PUSH
63118: LD_VAR 0 2
63122: EQUAL
63123: AND
63124: ST_TO_ADDR
// end ;
63125: LD_VAR 0 3
63129: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63130: LD_INT 0
63132: PPUSH
// SetDir ( unit , d ) ;
63133: LD_VAR 0 1
63137: PPUSH
63138: LD_VAR 0 4
63142: PPUSH
63143: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63147: LD_VAR 0 1
63151: PPUSH
63152: LD_VAR 0 2
63156: PPUSH
63157: LD_VAR 0 3
63161: PPUSH
63162: LD_VAR 0 5
63166: PPUSH
63167: CALL_OW 48
// end ;
63171: LD_VAR 0 6
63175: RET
// export function ToNaturalNumber ( number ) ; begin
63176: LD_INT 0
63178: PPUSH
// result := number div 1 ;
63179: LD_ADDR_VAR 0 2
63183: PUSH
63184: LD_VAR 0 1
63188: PUSH
63189: LD_INT 1
63191: DIV
63192: ST_TO_ADDR
// if number < 0 then
63193: LD_VAR 0 1
63197: PUSH
63198: LD_INT 0
63200: LESS
63201: IFFALSE 63211
// result := 0 ;
63203: LD_ADDR_VAR 0 2
63207: PUSH
63208: LD_INT 0
63210: ST_TO_ADDR
// end ;
63211: LD_VAR 0 2
63215: RET
// export function SortByClass ( units , class ) ; var un ; begin
63216: LD_INT 0
63218: PPUSH
63219: PPUSH
// if not units or not class then
63220: LD_VAR 0 1
63224: NOT
63225: PUSH
63226: LD_VAR 0 2
63230: NOT
63231: OR
63232: IFFALSE 63236
// exit ;
63234: GO 63331
// result := [ ] ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: EMPTY
63242: ST_TO_ADDR
// for un in units do
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: FOR_IN
63254: IFFALSE 63329
// if GetClass ( un ) = class then
63256: LD_VAR 0 4
63260: PPUSH
63261: CALL_OW 257
63265: PUSH
63266: LD_VAR 0 2
63270: EQUAL
63271: IFFALSE 63298
// result := Insert ( result , 1 , un ) else
63273: LD_ADDR_VAR 0 3
63277: PUSH
63278: LD_VAR 0 3
63282: PPUSH
63283: LD_INT 1
63285: PPUSH
63286: LD_VAR 0 4
63290: PPUSH
63291: CALL_OW 2
63295: ST_TO_ADDR
63296: GO 63327
// result := Replace ( result , result + 1 , un ) ;
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_VAR 0 3
63307: PPUSH
63308: LD_VAR 0 3
63312: PUSH
63313: LD_INT 1
63315: PLUS
63316: PPUSH
63317: LD_VAR 0 4
63321: PPUSH
63322: CALL_OW 1
63326: ST_TO_ADDR
63327: GO 63253
63329: POP
63330: POP
// end ;
63331: LD_VAR 0 3
63335: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63336: LD_INT 0
63338: PPUSH
63339: PPUSH
63340: PPUSH
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
// result := [ ] ;
63345: LD_ADDR_VAR 0 4
63349: PUSH
63350: EMPTY
63351: ST_TO_ADDR
// if x - r < 0 then
63352: LD_VAR 0 1
63356: PUSH
63357: LD_VAR 0 3
63361: MINUS
63362: PUSH
63363: LD_INT 0
63365: LESS
63366: IFFALSE 63378
// min_x := 0 else
63368: LD_ADDR_VAR 0 8
63372: PUSH
63373: LD_INT 0
63375: ST_TO_ADDR
63376: GO 63394
// min_x := x - r ;
63378: LD_ADDR_VAR 0 8
63382: PUSH
63383: LD_VAR 0 1
63387: PUSH
63388: LD_VAR 0 3
63392: MINUS
63393: ST_TO_ADDR
// if y - r < 0 then
63394: LD_VAR 0 2
63398: PUSH
63399: LD_VAR 0 3
63403: MINUS
63404: PUSH
63405: LD_INT 0
63407: LESS
63408: IFFALSE 63420
// min_y := 0 else
63410: LD_ADDR_VAR 0 7
63414: PUSH
63415: LD_INT 0
63417: ST_TO_ADDR
63418: GO 63436
// min_y := y - r ;
63420: LD_ADDR_VAR 0 7
63424: PUSH
63425: LD_VAR 0 2
63429: PUSH
63430: LD_VAR 0 3
63434: MINUS
63435: ST_TO_ADDR
// max_x := x + r ;
63436: LD_ADDR_VAR 0 9
63440: PUSH
63441: LD_VAR 0 1
63445: PUSH
63446: LD_VAR 0 3
63450: PLUS
63451: ST_TO_ADDR
// max_y := y + r ;
63452: LD_ADDR_VAR 0 10
63456: PUSH
63457: LD_VAR 0 2
63461: PUSH
63462: LD_VAR 0 3
63466: PLUS
63467: ST_TO_ADDR
// for _x = min_x to max_x do
63468: LD_ADDR_VAR 0 5
63472: PUSH
63473: DOUBLE
63474: LD_VAR 0 8
63478: DEC
63479: ST_TO_ADDR
63480: LD_VAR 0 9
63484: PUSH
63485: FOR_TO
63486: IFFALSE 63587
// for _y = min_y to max_y do
63488: LD_ADDR_VAR 0 6
63492: PUSH
63493: DOUBLE
63494: LD_VAR 0 7
63498: DEC
63499: ST_TO_ADDR
63500: LD_VAR 0 10
63504: PUSH
63505: FOR_TO
63506: IFFALSE 63583
// begin if not ValidHex ( _x , _y ) then
63508: LD_VAR 0 5
63512: PPUSH
63513: LD_VAR 0 6
63517: PPUSH
63518: CALL_OW 488
63522: NOT
63523: IFFALSE 63527
// continue ;
63525: GO 63505
// if GetResourceTypeXY ( _x , _y ) then
63527: LD_VAR 0 5
63531: PPUSH
63532: LD_VAR 0 6
63536: PPUSH
63537: CALL_OW 283
63541: IFFALSE 63581
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63543: LD_ADDR_VAR 0 4
63547: PUSH
63548: LD_VAR 0 4
63552: PPUSH
63553: LD_VAR 0 4
63557: PUSH
63558: LD_INT 1
63560: PLUS
63561: PPUSH
63562: LD_VAR 0 5
63566: PUSH
63567: LD_VAR 0 6
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PPUSH
63576: CALL_OW 1
63580: ST_TO_ADDR
// end ;
63581: GO 63505
63583: POP
63584: POP
63585: GO 63485
63587: POP
63588: POP
// end ;
63589: LD_VAR 0 4
63593: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63594: LD_INT 0
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
63600: PPUSH
63601: PPUSH
63602: PPUSH
63603: PPUSH
// if not units then
63604: LD_VAR 0 1
63608: NOT
63609: IFFALSE 63613
// exit ;
63611: GO 64137
// result := UnitFilter ( units , [ f_ok ] ) ;
63613: LD_ADDR_VAR 0 3
63617: PUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: LD_INT 50
63625: PUSH
63626: EMPTY
63627: LIST
63628: PPUSH
63629: CALL_OW 72
63633: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63634: LD_ADDR_VAR 0 8
63638: PUSH
63639: LD_VAR 0 1
63643: PUSH
63644: LD_INT 1
63646: ARRAY
63647: PPUSH
63648: CALL_OW 255
63652: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63653: LD_ADDR_VAR 0 10
63657: PUSH
63658: LD_INT 29
63660: PUSH
63661: LD_INT 91
63663: PUSH
63664: LD_INT 49
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// if not result then
63672: LD_VAR 0 3
63676: NOT
63677: IFFALSE 63681
// exit ;
63679: GO 64137
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63681: LD_ADDR_VAR 0 5
63685: PUSH
63686: LD_INT 81
63688: PUSH
63689: LD_VAR 0 8
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PPUSH
63698: CALL_OW 69
63702: ST_TO_ADDR
// for i in result do
63703: LD_ADDR_VAR 0 4
63707: PUSH
63708: LD_VAR 0 3
63712: PUSH
63713: FOR_IN
63714: IFFALSE 64135
// begin tag := GetTag ( i ) + 1 ;
63716: LD_ADDR_VAR 0 9
63720: PUSH
63721: LD_VAR 0 4
63725: PPUSH
63726: CALL_OW 110
63730: PUSH
63731: LD_INT 1
63733: PLUS
63734: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63735: LD_ADDR_VAR 0 7
63739: PUSH
63740: LD_VAR 0 4
63744: PPUSH
63745: CALL_OW 250
63749: PPUSH
63750: LD_VAR 0 4
63754: PPUSH
63755: CALL_OW 251
63759: PPUSH
63760: LD_INT 6
63762: PPUSH
63763: CALL 63336 0 3
63767: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63768: LD_VAR 0 4
63772: PPUSH
63773: CALL_OW 247
63777: PUSH
63778: LD_INT 2
63780: EQUAL
63781: PUSH
63782: LD_VAR 0 7
63786: AND
63787: PUSH
63788: LD_VAR 0 4
63792: PPUSH
63793: CALL_OW 264
63797: PUSH
63798: LD_VAR 0 10
63802: IN
63803: NOT
63804: AND
63805: IFFALSE 63844
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_VAR 0 7
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: PUSH
63821: LD_INT 1
63823: ARRAY
63824: PPUSH
63825: LD_VAR 0 7
63829: PUSH
63830: LD_INT 1
63832: ARRAY
63833: PUSH
63834: LD_INT 2
63836: ARRAY
63837: PPUSH
63838: CALL_OW 116
63842: GO 64133
// if path > tag then
63844: LD_VAR 0 2
63848: PUSH
63849: LD_VAR 0 9
63853: GREATER
63854: IFFALSE 64062
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63856: LD_ADDR_VAR 0 6
63860: PUSH
63861: LD_VAR 0 5
63865: PPUSH
63866: LD_INT 91
63868: PUSH
63869: LD_VAR 0 4
63873: PUSH
63874: LD_INT 8
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: PPUSH
63882: CALL_OW 72
63886: ST_TO_ADDR
// if nearEnemy then
63887: LD_VAR 0 6
63891: IFFALSE 63960
// begin if GetWeapon ( i ) = ru_time_lapser then
63893: LD_VAR 0 4
63897: PPUSH
63898: CALL_OW 264
63902: PUSH
63903: LD_INT 49
63905: EQUAL
63906: IFFALSE 63934
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63908: LD_VAR 0 4
63912: PPUSH
63913: LD_VAR 0 6
63917: PPUSH
63918: LD_VAR 0 4
63922: PPUSH
63923: CALL_OW 74
63927: PPUSH
63928: CALL_OW 112
63932: GO 63958
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63934: LD_VAR 0 4
63938: PPUSH
63939: LD_VAR 0 6
63943: PPUSH
63944: LD_VAR 0 4
63948: PPUSH
63949: CALL_OW 74
63953: PPUSH
63954: CALL_OW 115
// end else
63958: GO 64060
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63960: LD_VAR 0 4
63964: PPUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_VAR 0 9
63974: ARRAY
63975: PUSH
63976: LD_INT 1
63978: ARRAY
63979: PPUSH
63980: LD_VAR 0 2
63984: PUSH
63985: LD_VAR 0 9
63989: ARRAY
63990: PUSH
63991: LD_INT 2
63993: ARRAY
63994: PPUSH
63995: CALL_OW 297
63999: PUSH
64000: LD_INT 6
64002: GREATER
64003: IFFALSE 64046
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64005: LD_VAR 0 4
64009: PPUSH
64010: LD_VAR 0 2
64014: PUSH
64015: LD_VAR 0 9
64019: ARRAY
64020: PUSH
64021: LD_INT 1
64023: ARRAY
64024: PPUSH
64025: LD_VAR 0 2
64029: PUSH
64030: LD_VAR 0 9
64034: ARRAY
64035: PUSH
64036: LD_INT 2
64038: ARRAY
64039: PPUSH
64040: CALL_OW 114
64044: GO 64060
// SetTag ( i , tag ) ;
64046: LD_VAR 0 4
64050: PPUSH
64051: LD_VAR 0 9
64055: PPUSH
64056: CALL_OW 109
// end else
64060: GO 64133
// if enemy then
64062: LD_VAR 0 5
64066: IFFALSE 64133
// begin if GetWeapon ( i ) = ru_time_lapser then
64068: LD_VAR 0 4
64072: PPUSH
64073: CALL_OW 264
64077: PUSH
64078: LD_INT 49
64080: EQUAL
64081: IFFALSE 64109
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64083: LD_VAR 0 4
64087: PPUSH
64088: LD_VAR 0 5
64092: PPUSH
64093: LD_VAR 0 4
64097: PPUSH
64098: CALL_OW 74
64102: PPUSH
64103: CALL_OW 112
64107: GO 64133
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64109: LD_VAR 0 4
64113: PPUSH
64114: LD_VAR 0 5
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: CALL_OW 74
64128: PPUSH
64129: CALL_OW 115
// end ; end ;
64133: GO 63713
64135: POP
64136: POP
// end ;
64137: LD_VAR 0 3
64141: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64142: LD_INT 0
64144: PPUSH
64145: PPUSH
64146: PPUSH
// if not unit or IsInUnit ( unit ) then
64147: LD_VAR 0 1
64151: NOT
64152: PUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: CALL_OW 310
64162: OR
64163: IFFALSE 64167
// exit ;
64165: GO 64258
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64167: LD_ADDR_VAR 0 4
64171: PUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: CALL_OW 250
64181: PPUSH
64182: LD_VAR 0 2
64186: PPUSH
64187: LD_INT 1
64189: PPUSH
64190: CALL_OW 272
64194: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64195: LD_ADDR_VAR 0 5
64199: PUSH
64200: LD_VAR 0 1
64204: PPUSH
64205: CALL_OW 251
64209: PPUSH
64210: LD_VAR 0 2
64214: PPUSH
64215: LD_INT 1
64217: PPUSH
64218: CALL_OW 273
64222: ST_TO_ADDR
// if ValidHex ( x , y ) then
64223: LD_VAR 0 4
64227: PPUSH
64228: LD_VAR 0 5
64232: PPUSH
64233: CALL_OW 488
64237: IFFALSE 64258
// ComTurnXY ( unit , x , y ) ;
64239: LD_VAR 0 1
64243: PPUSH
64244: LD_VAR 0 4
64248: PPUSH
64249: LD_VAR 0 5
64253: PPUSH
64254: CALL_OW 118
// end ;
64258: LD_VAR 0 3
64262: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64263: LD_INT 0
64265: PPUSH
64266: PPUSH
// result := false ;
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// if not units then
64275: LD_VAR 0 2
64279: NOT
64280: IFFALSE 64284
// exit ;
64282: GO 64329
// for i in units do
64284: LD_ADDR_VAR 0 4
64288: PUSH
64289: LD_VAR 0 2
64293: PUSH
64294: FOR_IN
64295: IFFALSE 64327
// if See ( side , i ) then
64297: LD_VAR 0 1
64301: PPUSH
64302: LD_VAR 0 4
64306: PPUSH
64307: CALL_OW 292
64311: IFFALSE 64325
// begin result := true ;
64313: LD_ADDR_VAR 0 3
64317: PUSH
64318: LD_INT 1
64320: ST_TO_ADDR
// exit ;
64321: POP
64322: POP
64323: GO 64329
// end ;
64325: GO 64294
64327: POP
64328: POP
// end ;
64329: LD_VAR 0 3
64333: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64334: LD_INT 0
64336: PPUSH
64337: PPUSH
64338: PPUSH
64339: PPUSH
// if not unit or not points then
64340: LD_VAR 0 1
64344: NOT
64345: PUSH
64346: LD_VAR 0 2
64350: NOT
64351: OR
64352: IFFALSE 64356
// exit ;
64354: GO 64446
// dist := 99999 ;
64356: LD_ADDR_VAR 0 5
64360: PUSH
64361: LD_INT 99999
64363: ST_TO_ADDR
// for i in points do
64364: LD_ADDR_VAR 0 4
64368: PUSH
64369: LD_VAR 0 2
64373: PUSH
64374: FOR_IN
64375: IFFALSE 64444
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64377: LD_ADDR_VAR 0 6
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: LD_VAR 0 4
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PPUSH
64396: LD_VAR 0 4
64400: PUSH
64401: LD_INT 2
64403: ARRAY
64404: PPUSH
64405: CALL_OW 297
64409: ST_TO_ADDR
// if tmpDist < dist then
64410: LD_VAR 0 6
64414: PUSH
64415: LD_VAR 0 5
64419: LESS
64420: IFFALSE 64442
// begin result := i ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_VAR 0 4
64431: ST_TO_ADDR
// dist := tmpDist ;
64432: LD_ADDR_VAR 0 5
64436: PUSH
64437: LD_VAR 0 6
64441: ST_TO_ADDR
// end ; end ;
64442: GO 64374
64444: POP
64445: POP
// end ;
64446: LD_VAR 0 3
64450: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64451: LD_INT 0
64453: PPUSH
// uc_side := side ;
64454: LD_ADDR_OWVAR 20
64458: PUSH
64459: LD_VAR 0 1
64463: ST_TO_ADDR
// uc_nation := 3 ;
64464: LD_ADDR_OWVAR 21
64468: PUSH
64469: LD_INT 3
64471: ST_TO_ADDR
// vc_chassis := 25 ;
64472: LD_ADDR_OWVAR 37
64476: PUSH
64477: LD_INT 25
64479: ST_TO_ADDR
// vc_engine := engine_siberite ;
64480: LD_ADDR_OWVAR 39
64484: PUSH
64485: LD_INT 3
64487: ST_TO_ADDR
// vc_control := control_computer ;
64488: LD_ADDR_OWVAR 38
64492: PUSH
64493: LD_INT 3
64495: ST_TO_ADDR
// vc_weapon := 59 ;
64496: LD_ADDR_OWVAR 40
64500: PUSH
64501: LD_INT 59
64503: ST_TO_ADDR
// result := CreateVehicle ;
64504: LD_ADDR_VAR 0 5
64508: PUSH
64509: CALL_OW 45
64513: ST_TO_ADDR
// SetDir ( result , d ) ;
64514: LD_VAR 0 5
64518: PPUSH
64519: LD_VAR 0 4
64523: PPUSH
64524: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64528: LD_VAR 0 5
64532: PPUSH
64533: LD_VAR 0 2
64537: PPUSH
64538: LD_VAR 0 3
64542: PPUSH
64543: LD_INT 0
64545: PPUSH
64546: CALL_OW 48
// end ;
64550: LD_VAR 0 5
64554: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64555: LD_INT 0
64557: PPUSH
64558: PPUSH
64559: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64560: LD_ADDR_VAR 0 2
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64583: LD_VAR 0 1
64587: NOT
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 264
64598: PUSH
64599: LD_INT 12
64601: PUSH
64602: LD_INT 51
64604: PUSH
64605: LD_INT 32
64607: PUSH
64608: LD_INT 89
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: IN
64617: NOT
64618: OR
64619: IFFALSE 64623
// exit ;
64621: GO 64721
// for i := 1 to 3 do
64623: LD_ADDR_VAR 0 3
64627: PUSH
64628: DOUBLE
64629: LD_INT 1
64631: DEC
64632: ST_TO_ADDR
64633: LD_INT 3
64635: PUSH
64636: FOR_TO
64637: IFFALSE 64719
// begin tmp := GetCargo ( cargo , i ) ;
64639: LD_ADDR_VAR 0 4
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL_OW 289
64658: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64659: LD_ADDR_VAR 0 2
64663: PUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: LD_VAR 0 3
64673: PPUSH
64674: LD_VAR 0 4
64678: PPUSH
64679: CALL_OW 1
64683: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64684: LD_ADDR_VAR 0 2
64688: PUSH
64689: LD_VAR 0 2
64693: PPUSH
64694: LD_INT 4
64696: PPUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_INT 4
64704: ARRAY
64705: PUSH
64706: LD_VAR 0 4
64710: PLUS
64711: PPUSH
64712: CALL_OW 1
64716: ST_TO_ADDR
// end ;
64717: GO 64636
64719: POP
64720: POP
// end ;
64721: LD_VAR 0 2
64725: RET
// export function Length ( array ) ; begin
64726: LD_INT 0
64728: PPUSH
// result := array + 0 ;
64729: LD_ADDR_VAR 0 2
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_INT 0
64741: PLUS
64742: ST_TO_ADDR
// end ;
64743: LD_VAR 0 2
64747: RET
// export function PrepareArray ( array ) ; begin
64748: LD_INT 0
64750: PPUSH
// result := array diff 0 ;
64751: LD_ADDR_VAR 0 2
64755: PUSH
64756: LD_VAR 0 1
64760: PUSH
64761: LD_INT 0
64763: DIFF
64764: ST_TO_ADDR
// if not result [ 1 ] then
64765: LD_VAR 0 2
64769: PUSH
64770: LD_INT 1
64772: ARRAY
64773: NOT
64774: IFFALSE 64794
// result := Delete ( result , 1 ) ;
64776: LD_ADDR_VAR 0 2
64780: PUSH
64781: LD_VAR 0 2
64785: PPUSH
64786: LD_INT 1
64788: PPUSH
64789: CALL_OW 3
64793: ST_TO_ADDR
// end ;
64794: LD_VAR 0 2
64798: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64799: LD_INT 0
64801: PPUSH
64802: PPUSH
64803: PPUSH
64804: PPUSH
// sibRocketRange := 25 ;
64805: LD_ADDR_VAR 0 6
64809: PUSH
64810: LD_INT 25
64812: ST_TO_ADDR
// result := false ;
64813: LD_ADDR_VAR 0 4
64817: PUSH
64818: LD_INT 0
64820: ST_TO_ADDR
// for i := 0 to 5 do
64821: LD_ADDR_VAR 0 5
64825: PUSH
64826: DOUBLE
64827: LD_INT 0
64829: DEC
64830: ST_TO_ADDR
64831: LD_INT 5
64833: PUSH
64834: FOR_TO
64835: IFFALSE 64902
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64837: LD_VAR 0 1
64841: PPUSH
64842: LD_VAR 0 5
64846: PPUSH
64847: LD_VAR 0 6
64851: PPUSH
64852: CALL_OW 272
64856: PPUSH
64857: LD_VAR 0 2
64861: PPUSH
64862: LD_VAR 0 5
64866: PPUSH
64867: LD_VAR 0 6
64871: PPUSH
64872: CALL_OW 273
64876: PPUSH
64877: LD_VAR 0 3
64881: PPUSH
64882: CALL_OW 309
64886: IFFALSE 64900
// begin result := true ;
64888: LD_ADDR_VAR 0 4
64892: PUSH
64893: LD_INT 1
64895: ST_TO_ADDR
// exit ;
64896: POP
64897: POP
64898: GO 64904
// end ;
64900: GO 64834
64902: POP
64903: POP
// end ;
64904: LD_VAR 0 4
64908: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64909: LD_INT 0
64911: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64912: LD_VAR 0 1
64916: PPUSH
64917: LD_VAR 0 2
64921: PPUSH
64922: LD_INT 0
64924: PPUSH
64925: LD_INT 0
64927: PPUSH
64928: LD_INT 1
64930: PPUSH
64931: LD_INT 0
64933: PPUSH
64934: CALL_OW 587
// end ; end_of_file
64938: LD_VAR 0 3
64942: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64943: LD_VAR 0 1
64947: PUSH
64948: LD_INT 200
64950: DOUBLE
64951: GREATEREQUAL
64952: IFFALSE 64960
64954: LD_INT 299
64956: DOUBLE
64957: LESSEQUAL
64958: IFTRUE 64962
64960: GO 64994
64962: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64963: LD_VAR 0 1
64967: PPUSH
64968: LD_VAR 0 2
64972: PPUSH
64973: LD_VAR 0 3
64977: PPUSH
64978: LD_VAR 0 4
64982: PPUSH
64983: LD_VAR 0 5
64987: PPUSH
64988: CALL 65482 0 5
64992: GO 65071
64994: LD_INT 300
64996: DOUBLE
64997: GREATEREQUAL
64998: IFFALSE 65006
65000: LD_INT 399
65002: DOUBLE
65003: LESSEQUAL
65004: IFTRUE 65008
65006: GO 65070
65008: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65009: LD_VAR 0 1
65013: PPUSH
65014: LD_VAR 0 2
65018: PPUSH
65019: LD_VAR 0 3
65023: PPUSH
65024: LD_VAR 0 4
65028: PPUSH
65029: LD_VAR 0 5
65033: PPUSH
65034: LD_VAR 0 6
65038: PPUSH
65039: LD_VAR 0 7
65043: PPUSH
65044: LD_VAR 0 8
65048: PPUSH
65049: LD_VAR 0 9
65053: PPUSH
65054: LD_VAR 0 10
65058: PPUSH
65059: LD_VAR 0 11
65063: PPUSH
65064: CALL 20231 0 11
65068: GO 65071
65070: POP
// end ;
65071: PPOPN 11
65073: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 2
65083: PPUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: LD_VAR 0 4
65093: PPUSH
65094: LD_VAR 0 5
65098: PPUSH
65099: CALL 65218 0 5
// end ; end_of_file
65103: PPOPN 5
65105: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65106: LD_INT 0
65108: PPUSH
65109: PPUSH
65110: PPUSH
65111: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 264
65121: PUSH
65122: LD_INT 91
65124: EQUAL
65125: IFFALSE 65197
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65127: LD_INT 68
65129: PPUSH
65130: LD_VAR 0 1
65134: PPUSH
65135: CALL_OW 255
65139: PPUSH
65140: CALL_OW 321
65144: PUSH
65145: LD_INT 2
65147: EQUAL
65148: IFFALSE 65160
// eff := 70 else
65150: LD_ADDR_VAR 0 4
65154: PUSH
65155: LD_INT 70
65157: ST_TO_ADDR
65158: GO 65168
// eff := 30 ;
65160: LD_ADDR_VAR 0 4
65164: PUSH
65165: LD_INT 30
65167: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65168: LD_VAR 0 1
65172: PPUSH
65173: CALL_OW 250
65177: PPUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 251
65187: PPUSH
65188: LD_VAR 0 4
65192: PPUSH
65193: CALL_OW 495
// end ; end ;
65197: LD_VAR 0 2
65201: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65202: LD_INT 0
65204: PPUSH
// end ;
65205: LD_VAR 0 4
65209: RET
// export function SOS_Command ( cmd ) ; begin
65210: LD_INT 0
65212: PPUSH
// end ;
65213: LD_VAR 0 2
65217: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65218: LD_INT 0
65220: PPUSH
// end ;
65221: LD_VAR 0 6
65225: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
// if not vehicle or not factory then
65230: LD_VAR 0 1
65234: NOT
65235: PUSH
65236: LD_VAR 0 2
65240: NOT
65241: OR
65242: IFFALSE 65246
// exit ;
65244: GO 65477
// if factoryWaypoints >= factory then
65246: LD_EXP 78
65250: PUSH
65251: LD_VAR 0 2
65255: GREATEREQUAL
65256: IFFALSE 65477
// if factoryWaypoints [ factory ] then
65258: LD_EXP 78
65262: PUSH
65263: LD_VAR 0 2
65267: ARRAY
65268: IFFALSE 65477
// begin if GetControl ( vehicle ) = control_manual then
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 263
65279: PUSH
65280: LD_INT 1
65282: EQUAL
65283: IFFALSE 65364
// begin driver := IsDrivenBy ( vehicle ) ;
65285: LD_ADDR_VAR 0 4
65289: PUSH
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 311
65299: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65300: LD_VAR 0 4
65304: PPUSH
65305: LD_EXP 78
65309: PUSH
65310: LD_VAR 0 2
65314: ARRAY
65315: PUSH
65316: LD_INT 3
65318: ARRAY
65319: PPUSH
65320: LD_EXP 78
65324: PUSH
65325: LD_VAR 0 2
65329: ARRAY
65330: PUSH
65331: LD_INT 4
65333: ARRAY
65334: PPUSH
65335: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65339: LD_VAR 0 4
65343: PPUSH
65344: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65348: LD_VAR 0 4
65352: PPUSH
65353: LD_VAR 0 2
65357: PPUSH
65358: CALL_OW 180
// end else
65362: GO 65477
// if GetControl ( vehicle ) = control_remote then
65364: LD_VAR 0 1
65368: PPUSH
65369: CALL_OW 263
65373: PUSH
65374: LD_INT 2
65376: EQUAL
65377: IFFALSE 65438
// begin wait ( 0 0$2 ) ;
65379: LD_INT 70
65381: PPUSH
65382: CALL_OW 67
// if Connect ( vehicle ) then
65386: LD_VAR 0 1
65390: PPUSH
65391: CALL 31628 0 1
65395: IFFALSE 65436
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65397: LD_VAR 0 1
65401: PPUSH
65402: LD_EXP 78
65406: PUSH
65407: LD_VAR 0 2
65411: ARRAY
65412: PUSH
65413: LD_INT 3
65415: ARRAY
65416: PPUSH
65417: LD_EXP 78
65421: PUSH
65422: LD_VAR 0 2
65426: ARRAY
65427: PUSH
65428: LD_INT 4
65430: ARRAY
65431: PPUSH
65432: CALL_OW 171
// end else
65436: GO 65477
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65438: LD_VAR 0 1
65442: PPUSH
65443: LD_EXP 78
65447: PUSH
65448: LD_VAR 0 2
65452: ARRAY
65453: PUSH
65454: LD_INT 3
65456: ARRAY
65457: PPUSH
65458: LD_EXP 78
65462: PUSH
65463: LD_VAR 0 2
65467: ARRAY
65468: PUSH
65469: LD_INT 4
65471: ARRAY
65472: PPUSH
65473: CALL_OW 171
// end ; end ;
65477: LD_VAR 0 3
65481: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65482: LD_INT 0
65484: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65485: LD_VAR 0 1
65489: PUSH
65490: LD_INT 250
65492: EQUAL
65493: PUSH
65494: LD_VAR 0 2
65498: PPUSH
65499: CALL_OW 264
65503: PUSH
65504: LD_INT 81
65506: EQUAL
65507: AND
65508: IFFALSE 65529
// MinerPlaceMine ( unit , x , y ) ;
65510: LD_VAR 0 2
65514: PPUSH
65515: LD_VAR 0 4
65519: PPUSH
65520: LD_VAR 0 5
65524: PPUSH
65525: CALL 67914 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65529: LD_VAR 0 1
65533: PUSH
65534: LD_INT 251
65536: EQUAL
65537: PUSH
65538: LD_VAR 0 2
65542: PPUSH
65543: CALL_OW 264
65547: PUSH
65548: LD_INT 81
65550: EQUAL
65551: AND
65552: IFFALSE 65573
// MinerDetonateMine ( unit , x , y ) ;
65554: LD_VAR 0 2
65558: PPUSH
65559: LD_VAR 0 4
65563: PPUSH
65564: LD_VAR 0 5
65568: PPUSH
65569: CALL 68189 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65573: LD_VAR 0 1
65577: PUSH
65578: LD_INT 252
65580: EQUAL
65581: PUSH
65582: LD_VAR 0 2
65586: PPUSH
65587: CALL_OW 264
65591: PUSH
65592: LD_INT 81
65594: EQUAL
65595: AND
65596: IFFALSE 65617
// MinerCreateMinefield ( unit , x , y ) ;
65598: LD_VAR 0 2
65602: PPUSH
65603: LD_VAR 0 4
65607: PPUSH
65608: LD_VAR 0 5
65612: PPUSH
65613: CALL 68606 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65617: LD_VAR 0 1
65621: PUSH
65622: LD_INT 253
65624: EQUAL
65625: PUSH
65626: LD_VAR 0 2
65630: PPUSH
65631: CALL_OW 257
65635: PUSH
65636: LD_INT 5
65638: EQUAL
65639: AND
65640: IFFALSE 65661
// ComBinocular ( unit , x , y ) ;
65642: LD_VAR 0 2
65646: PPUSH
65647: LD_VAR 0 4
65651: PPUSH
65652: LD_VAR 0 5
65656: PPUSH
65657: CALL 68975 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65661: LD_VAR 0 1
65665: PUSH
65666: LD_INT 254
65668: EQUAL
65669: PUSH
65670: LD_VAR 0 2
65674: PPUSH
65675: CALL_OW 264
65679: PUSH
65680: LD_INT 99
65682: EQUAL
65683: AND
65684: PUSH
65685: LD_VAR 0 3
65689: PPUSH
65690: CALL_OW 263
65694: PUSH
65695: LD_INT 3
65697: EQUAL
65698: AND
65699: IFFALSE 65715
// HackDestroyVehicle ( unit , selectedUnit ) ;
65701: LD_VAR 0 2
65705: PPUSH
65706: LD_VAR 0 3
65710: PPUSH
65711: CALL 67278 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65715: LD_VAR 0 1
65719: PUSH
65720: LD_INT 255
65722: EQUAL
65723: PUSH
65724: LD_VAR 0 2
65728: PPUSH
65729: CALL_OW 264
65733: PUSH
65734: LD_INT 14
65736: PUSH
65737: LD_INT 53
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: IN
65744: AND
65745: PUSH
65746: LD_VAR 0 4
65750: PPUSH
65751: LD_VAR 0 5
65755: PPUSH
65756: CALL_OW 488
65760: AND
65761: IFFALSE 65785
// CutTreeXYR ( unit , x , y , 12 ) ;
65763: LD_VAR 0 2
65767: PPUSH
65768: LD_VAR 0 4
65772: PPUSH
65773: LD_VAR 0 5
65777: PPUSH
65778: LD_INT 12
65780: PPUSH
65781: CALL 65848 0 4
// if cmd = 256 then
65785: LD_VAR 0 1
65789: PUSH
65790: LD_INT 256
65792: EQUAL
65793: IFFALSE 65814
// SetFactoryWaypoint ( unit , x , y ) ;
65795: LD_VAR 0 2
65799: PPUSH
65800: LD_VAR 0 4
65804: PPUSH
65805: LD_VAR 0 5
65809: PPUSH
65810: CALL 22211 0 3
// if cmd = 257 then
65814: LD_VAR 0 1
65818: PUSH
65819: LD_INT 257
65821: EQUAL
65822: IFFALSE 65843
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65824: LD_VAR 0 2
65828: PPUSH
65829: LD_VAR 0 4
65833: PPUSH
65834: LD_VAR 0 5
65838: PPUSH
65839: CALL 22573 0 3
// end ;
65843: LD_VAR 0 6
65847: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65848: LD_INT 0
65850: PPUSH
65851: PPUSH
65852: PPUSH
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
65858: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65859: LD_VAR 0 1
65863: NOT
65864: PUSH
65865: LD_VAR 0 2
65869: PPUSH
65870: LD_VAR 0 3
65874: PPUSH
65875: CALL_OW 488
65879: NOT
65880: OR
65881: PUSH
65882: LD_VAR 0 4
65886: NOT
65887: OR
65888: IFFALSE 65892
// exit ;
65890: GO 66232
// list := [ ] ;
65892: LD_ADDR_VAR 0 13
65896: PUSH
65897: EMPTY
65898: ST_TO_ADDR
// if x - r < 0 then
65899: LD_VAR 0 2
65903: PUSH
65904: LD_VAR 0 4
65908: MINUS
65909: PUSH
65910: LD_INT 0
65912: LESS
65913: IFFALSE 65925
// min_x := 0 else
65915: LD_ADDR_VAR 0 7
65919: PUSH
65920: LD_INT 0
65922: ST_TO_ADDR
65923: GO 65941
// min_x := x - r ;
65925: LD_ADDR_VAR 0 7
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_VAR 0 4
65939: MINUS
65940: ST_TO_ADDR
// if y - r < 0 then
65941: LD_VAR 0 3
65945: PUSH
65946: LD_VAR 0 4
65950: MINUS
65951: PUSH
65952: LD_INT 0
65954: LESS
65955: IFFALSE 65967
// min_y := 0 else
65957: LD_ADDR_VAR 0 8
65961: PUSH
65962: LD_INT 0
65964: ST_TO_ADDR
65965: GO 65983
// min_y := y - r ;
65967: LD_ADDR_VAR 0 8
65971: PUSH
65972: LD_VAR 0 3
65976: PUSH
65977: LD_VAR 0 4
65981: MINUS
65982: ST_TO_ADDR
// max_x := x + r ;
65983: LD_ADDR_VAR 0 9
65987: PUSH
65988: LD_VAR 0 2
65992: PUSH
65993: LD_VAR 0 4
65997: PLUS
65998: ST_TO_ADDR
// max_y := y + r ;
65999: LD_ADDR_VAR 0 10
66003: PUSH
66004: LD_VAR 0 3
66008: PUSH
66009: LD_VAR 0 4
66013: PLUS
66014: ST_TO_ADDR
// for _x = min_x to max_x do
66015: LD_ADDR_VAR 0 11
66019: PUSH
66020: DOUBLE
66021: LD_VAR 0 7
66025: DEC
66026: ST_TO_ADDR
66027: LD_VAR 0 9
66031: PUSH
66032: FOR_TO
66033: IFFALSE 66150
// for _y = min_y to max_y do
66035: LD_ADDR_VAR 0 12
66039: PUSH
66040: DOUBLE
66041: LD_VAR 0 8
66045: DEC
66046: ST_TO_ADDR
66047: LD_VAR 0 10
66051: PUSH
66052: FOR_TO
66053: IFFALSE 66146
// begin if not ValidHex ( _x , _y ) then
66055: LD_VAR 0 11
66059: PPUSH
66060: LD_VAR 0 12
66064: PPUSH
66065: CALL_OW 488
66069: NOT
66070: IFFALSE 66074
// continue ;
66072: GO 66052
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66074: LD_VAR 0 11
66078: PPUSH
66079: LD_VAR 0 12
66083: PPUSH
66084: CALL_OW 351
66088: PUSH
66089: LD_VAR 0 11
66093: PPUSH
66094: LD_VAR 0 12
66098: PPUSH
66099: CALL_OW 554
66103: AND
66104: IFFALSE 66144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66106: LD_ADDR_VAR 0 13
66110: PUSH
66111: LD_VAR 0 13
66115: PPUSH
66116: LD_VAR 0 13
66120: PUSH
66121: LD_INT 1
66123: PLUS
66124: PPUSH
66125: LD_VAR 0 11
66129: PUSH
66130: LD_VAR 0 12
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PPUSH
66139: CALL_OW 2
66143: ST_TO_ADDR
// end ;
66144: GO 66052
66146: POP
66147: POP
66148: GO 66032
66150: POP
66151: POP
// if not list then
66152: LD_VAR 0 13
66156: NOT
66157: IFFALSE 66161
// exit ;
66159: GO 66232
// for i in list do
66161: LD_ADDR_VAR 0 6
66165: PUSH
66166: LD_VAR 0 13
66170: PUSH
66171: FOR_IN
66172: IFFALSE 66230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66174: LD_VAR 0 1
66178: PPUSH
66179: LD_STRING M
66181: PUSH
66182: LD_VAR 0 6
66186: PUSH
66187: LD_INT 1
66189: ARRAY
66190: PUSH
66191: LD_VAR 0 6
66195: PUSH
66196: LD_INT 2
66198: ARRAY
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: PUSH
66221: EMPTY
66222: LIST
66223: PPUSH
66224: CALL_OW 447
66228: GO 66171
66230: POP
66231: POP
// end ;
66232: LD_VAR 0 5
66236: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66237: LD_EXP 81
66241: NOT
66242: IFFALSE 66292
66244: GO 66246
66246: DISABLE
// begin initHack := true ;
66247: LD_ADDR_EXP 81
66251: PUSH
66252: LD_INT 1
66254: ST_TO_ADDR
// hackTanks := [ ] ;
66255: LD_ADDR_EXP 82
66259: PUSH
66260: EMPTY
66261: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66262: LD_ADDR_EXP 83
66266: PUSH
66267: EMPTY
66268: ST_TO_ADDR
// hackLimit := 3 ;
66269: LD_ADDR_EXP 84
66273: PUSH
66274: LD_INT 3
66276: ST_TO_ADDR
// hackDist := 12 ;
66277: LD_ADDR_EXP 85
66281: PUSH
66282: LD_INT 12
66284: ST_TO_ADDR
// hackCounter := [ ] ;
66285: LD_ADDR_EXP 86
66289: PUSH
66290: EMPTY
66291: ST_TO_ADDR
// end ;
66292: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66293: LD_EXP 81
66297: PUSH
66298: LD_INT 34
66300: PUSH
66301: LD_INT 99
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PPUSH
66308: CALL_OW 69
66312: AND
66313: IFFALSE 66566
66315: GO 66317
66317: DISABLE
66318: LD_INT 0
66320: PPUSH
66321: PPUSH
// begin enable ;
66322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66323: LD_ADDR_VAR 0 1
66327: PUSH
66328: LD_INT 34
66330: PUSH
66331: LD_INT 99
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PPUSH
66338: CALL_OW 69
66342: PUSH
66343: FOR_IN
66344: IFFALSE 66564
// begin if not i in hackTanks then
66346: LD_VAR 0 1
66350: PUSH
66351: LD_EXP 82
66355: IN
66356: NOT
66357: IFFALSE 66440
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66359: LD_ADDR_EXP 82
66363: PUSH
66364: LD_EXP 82
66368: PPUSH
66369: LD_EXP 82
66373: PUSH
66374: LD_INT 1
66376: PLUS
66377: PPUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: CALL_OW 1
66387: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66388: LD_ADDR_EXP 83
66392: PUSH
66393: LD_EXP 83
66397: PPUSH
66398: LD_EXP 83
66402: PUSH
66403: LD_INT 1
66405: PLUS
66406: PPUSH
66407: EMPTY
66408: PPUSH
66409: CALL_OW 1
66413: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66414: LD_ADDR_EXP 86
66418: PUSH
66419: LD_EXP 86
66423: PPUSH
66424: LD_EXP 86
66428: PUSH
66429: LD_INT 1
66431: PLUS
66432: PPUSH
66433: EMPTY
66434: PPUSH
66435: CALL_OW 1
66439: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66440: LD_VAR 0 1
66444: PPUSH
66445: CALL_OW 302
66449: NOT
66450: IFFALSE 66463
// begin HackUnlinkAll ( i ) ;
66452: LD_VAR 0 1
66456: PPUSH
66457: CALL 66569 0 1
// continue ;
66461: GO 66343
// end ; HackCheckCapturedStatus ( i ) ;
66463: LD_VAR 0 1
66467: PPUSH
66468: CALL 67012 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66472: LD_ADDR_VAR 0 2
66476: PUSH
66477: LD_INT 81
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL_OW 255
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 33
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 91
66506: PUSH
66507: LD_VAR 0 1
66511: PUSH
66512: LD_EXP 85
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 50
66524: PUSH
66525: EMPTY
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: PPUSH
66534: CALL_OW 69
66538: ST_TO_ADDR
// if not tmp then
66539: LD_VAR 0 2
66543: NOT
66544: IFFALSE 66548
// continue ;
66546: GO 66343
// HackLink ( i , tmp ) ;
66548: LD_VAR 0 1
66552: PPUSH
66553: LD_VAR 0 2
66557: PPUSH
66558: CALL 66705 0 2
// end ;
66562: GO 66343
66564: POP
66565: POP
// end ;
66566: PPOPN 2
66568: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66569: LD_INT 0
66571: PPUSH
66572: PPUSH
66573: PPUSH
// if not hack in hackTanks then
66574: LD_VAR 0 1
66578: PUSH
66579: LD_EXP 82
66583: IN
66584: NOT
66585: IFFALSE 66589
// exit ;
66587: GO 66700
// index := GetElementIndex ( hackTanks , hack ) ;
66589: LD_ADDR_VAR 0 4
66593: PUSH
66594: LD_EXP 82
66598: PPUSH
66599: LD_VAR 0 1
66603: PPUSH
66604: CALL 28444 0 2
66608: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66609: LD_EXP 83
66613: PUSH
66614: LD_VAR 0 4
66618: ARRAY
66619: IFFALSE 66700
// begin for i in hackTanksCaptured [ index ] do
66621: LD_ADDR_VAR 0 3
66625: PUSH
66626: LD_EXP 83
66630: PUSH
66631: LD_VAR 0 4
66635: ARRAY
66636: PUSH
66637: FOR_IN
66638: IFFALSE 66664
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66640: LD_VAR 0 3
66644: PUSH
66645: LD_INT 1
66647: ARRAY
66648: PPUSH
66649: LD_VAR 0 3
66653: PUSH
66654: LD_INT 2
66656: ARRAY
66657: PPUSH
66658: CALL_OW 235
66662: GO 66637
66664: POP
66665: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66666: LD_ADDR_EXP 83
66670: PUSH
66671: LD_EXP 83
66675: PPUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: EMPTY
66682: PPUSH
66683: CALL_OW 1
66687: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66688: LD_VAR 0 1
66692: PPUSH
66693: LD_INT 0
66695: PPUSH
66696: CALL_OW 505
// end ; end ;
66700: LD_VAR 0 2
66704: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66705: LD_INT 0
66707: PPUSH
66708: PPUSH
66709: PPUSH
// if not hack in hackTanks or not vehicles then
66710: LD_VAR 0 1
66714: PUSH
66715: LD_EXP 82
66719: IN
66720: NOT
66721: PUSH
66722: LD_VAR 0 2
66726: NOT
66727: OR
66728: IFFALSE 66732
// exit ;
66730: GO 67007
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66732: LD_ADDR_VAR 0 2
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: LD_VAR 0 2
66746: PPUSH
66747: LD_INT 1
66749: PPUSH
66750: LD_INT 1
66752: PPUSH
66753: CALL 29094 0 4
66757: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66758: LD_ADDR_VAR 0 5
66762: PUSH
66763: LD_EXP 82
66767: PPUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL 28444 0 2
66777: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66778: LD_EXP 83
66782: PUSH
66783: LD_VAR 0 5
66787: ARRAY
66788: PUSH
66789: LD_EXP 84
66793: LESS
66794: IFFALSE 66983
// begin for i := 1 to vehicles do
66796: LD_ADDR_VAR 0 4
66800: PUSH
66801: DOUBLE
66802: LD_INT 1
66804: DEC
66805: ST_TO_ADDR
66806: LD_VAR 0 2
66810: PUSH
66811: FOR_TO
66812: IFFALSE 66981
// begin if hackTanksCaptured [ index ] = hackLimit then
66814: LD_EXP 83
66818: PUSH
66819: LD_VAR 0 5
66823: ARRAY
66824: PUSH
66825: LD_EXP 84
66829: EQUAL
66830: IFFALSE 66834
// break ;
66832: GO 66981
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66834: LD_ADDR_EXP 86
66838: PUSH
66839: LD_EXP 86
66843: PPUSH
66844: LD_VAR 0 5
66848: PPUSH
66849: LD_EXP 86
66853: PUSH
66854: LD_VAR 0 5
66858: ARRAY
66859: PUSH
66860: LD_INT 1
66862: PLUS
66863: PPUSH
66864: CALL_OW 1
66868: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66869: LD_ADDR_EXP 83
66873: PUSH
66874: LD_EXP 83
66878: PPUSH
66879: LD_VAR 0 5
66883: PUSH
66884: LD_EXP 83
66888: PUSH
66889: LD_VAR 0 5
66893: ARRAY
66894: PUSH
66895: LD_INT 1
66897: PLUS
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PPUSH
66903: LD_VAR 0 2
66907: PUSH
66908: LD_VAR 0 4
66912: ARRAY
66913: PUSH
66914: LD_VAR 0 2
66918: PUSH
66919: LD_VAR 0 4
66923: ARRAY
66924: PPUSH
66925: CALL_OW 255
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PPUSH
66934: CALL 28659 0 3
66938: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66939: LD_VAR 0 2
66943: PUSH
66944: LD_VAR 0 4
66948: ARRAY
66949: PPUSH
66950: LD_VAR 0 1
66954: PPUSH
66955: CALL_OW 255
66959: PPUSH
66960: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66964: LD_VAR 0 2
66968: PUSH
66969: LD_VAR 0 4
66973: ARRAY
66974: PPUSH
66975: CALL_OW 141
// end ;
66979: GO 66811
66981: POP
66982: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66983: LD_VAR 0 1
66987: PPUSH
66988: LD_EXP 83
66992: PUSH
66993: LD_VAR 0 5
66997: ARRAY
66998: PUSH
66999: LD_INT 0
67001: PLUS
67002: PPUSH
67003: CALL_OW 505
// end ;
67007: LD_VAR 0 3
67011: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67012: LD_INT 0
67014: PPUSH
67015: PPUSH
67016: PPUSH
67017: PPUSH
// if not hack in hackTanks then
67018: LD_VAR 0 1
67022: PUSH
67023: LD_EXP 82
67027: IN
67028: NOT
67029: IFFALSE 67033
// exit ;
67031: GO 67273
// index := GetElementIndex ( hackTanks , hack ) ;
67033: LD_ADDR_VAR 0 4
67037: PUSH
67038: LD_EXP 82
67042: PPUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL 28444 0 2
67052: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67053: LD_ADDR_VAR 0 3
67057: PUSH
67058: DOUBLE
67059: LD_EXP 83
67063: PUSH
67064: LD_VAR 0 4
67068: ARRAY
67069: INC
67070: ST_TO_ADDR
67071: LD_INT 1
67073: PUSH
67074: FOR_DOWNTO
67075: IFFALSE 67247
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: LD_EXP 83
67086: PUSH
67087: LD_VAR 0 4
67091: ARRAY
67092: PUSH
67093: LD_VAR 0 3
67097: ARRAY
67098: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67099: LD_VAR 0 5
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PPUSH
67108: CALL_OW 302
67112: NOT
67113: PUSH
67114: LD_VAR 0 5
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PPUSH
67123: CALL_OW 255
67127: PUSH
67128: LD_VAR 0 1
67132: PPUSH
67133: CALL_OW 255
67137: NONEQUAL
67138: OR
67139: IFFALSE 67245
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67141: LD_VAR 0 5
67145: PUSH
67146: LD_INT 1
67148: ARRAY
67149: PPUSH
67150: CALL_OW 305
67154: PUSH
67155: LD_VAR 0 5
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PPUSH
67164: CALL_OW 255
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: CALL_OW 255
67178: EQUAL
67179: AND
67180: IFFALSE 67204
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67182: LD_VAR 0 5
67186: PUSH
67187: LD_INT 1
67189: ARRAY
67190: PPUSH
67191: LD_VAR 0 5
67195: PUSH
67196: LD_INT 2
67198: ARRAY
67199: PPUSH
67200: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67204: LD_ADDR_EXP 83
67208: PUSH
67209: LD_EXP 83
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: LD_EXP 83
67223: PUSH
67224: LD_VAR 0 4
67228: ARRAY
67229: PPUSH
67230: LD_VAR 0 3
67234: PPUSH
67235: CALL_OW 3
67239: PPUSH
67240: CALL_OW 1
67244: ST_TO_ADDR
// end ; end ;
67245: GO 67074
67247: POP
67248: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67249: LD_VAR 0 1
67253: PPUSH
67254: LD_EXP 83
67258: PUSH
67259: LD_VAR 0 4
67263: ARRAY
67264: PUSH
67265: LD_INT 0
67267: PLUS
67268: PPUSH
67269: CALL_OW 505
// end ;
67273: LD_VAR 0 2
67277: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67278: LD_INT 0
67280: PPUSH
67281: PPUSH
67282: PPUSH
67283: PPUSH
// if not hack in hackTanks then
67284: LD_VAR 0 1
67288: PUSH
67289: LD_EXP 82
67293: IN
67294: NOT
67295: IFFALSE 67299
// exit ;
67297: GO 67384
// index := GetElementIndex ( hackTanks , hack ) ;
67299: LD_ADDR_VAR 0 5
67303: PUSH
67304: LD_EXP 82
67308: PPUSH
67309: LD_VAR 0 1
67313: PPUSH
67314: CALL 28444 0 2
67318: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67319: LD_ADDR_VAR 0 4
67323: PUSH
67324: DOUBLE
67325: LD_INT 1
67327: DEC
67328: ST_TO_ADDR
67329: LD_EXP 83
67333: PUSH
67334: LD_VAR 0 5
67338: ARRAY
67339: PUSH
67340: FOR_TO
67341: IFFALSE 67382
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67343: LD_EXP 83
67347: PUSH
67348: LD_VAR 0 5
67352: ARRAY
67353: PUSH
67354: LD_VAR 0 4
67358: ARRAY
67359: PUSH
67360: LD_INT 1
67362: ARRAY
67363: PUSH
67364: LD_VAR 0 2
67368: EQUAL
67369: IFFALSE 67380
// KillUnit ( vehicle ) ;
67371: LD_VAR 0 2
67375: PPUSH
67376: CALL_OW 66
67380: GO 67340
67382: POP
67383: POP
// end ;
67384: LD_VAR 0 3
67388: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67389: LD_EXP 87
67393: NOT
67394: IFFALSE 67429
67396: GO 67398
67398: DISABLE
// begin initMiner := true ;
67399: LD_ADDR_EXP 87
67403: PUSH
67404: LD_INT 1
67406: ST_TO_ADDR
// minersList := [ ] ;
67407: LD_ADDR_EXP 88
67411: PUSH
67412: EMPTY
67413: ST_TO_ADDR
// minerMinesList := [ ] ;
67414: LD_ADDR_EXP 89
67418: PUSH
67419: EMPTY
67420: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67421: LD_ADDR_EXP 90
67425: PUSH
67426: LD_INT 5
67428: ST_TO_ADDR
// end ;
67429: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67430: LD_EXP 87
67434: PUSH
67435: LD_INT 34
67437: PUSH
67438: LD_INT 81
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PPUSH
67445: CALL_OW 69
67449: AND
67450: IFFALSE 67911
67452: GO 67454
67454: DISABLE
67455: LD_INT 0
67457: PPUSH
67458: PPUSH
67459: PPUSH
67460: PPUSH
// begin enable ;
67461: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67462: LD_ADDR_VAR 0 1
67466: PUSH
67467: LD_INT 34
67469: PUSH
67470: LD_INT 81
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PPUSH
67477: CALL_OW 69
67481: PUSH
67482: FOR_IN
67483: IFFALSE 67555
// begin if not i in minersList then
67485: LD_VAR 0 1
67489: PUSH
67490: LD_EXP 88
67494: IN
67495: NOT
67496: IFFALSE 67553
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67498: LD_ADDR_EXP 88
67502: PUSH
67503: LD_EXP 88
67507: PPUSH
67508: LD_EXP 88
67512: PUSH
67513: LD_INT 1
67515: PLUS
67516: PPUSH
67517: LD_VAR 0 1
67521: PPUSH
67522: CALL_OW 1
67526: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67527: LD_ADDR_EXP 89
67531: PUSH
67532: LD_EXP 89
67536: PPUSH
67537: LD_EXP 89
67541: PUSH
67542: LD_INT 1
67544: PLUS
67545: PPUSH
67546: EMPTY
67547: PPUSH
67548: CALL_OW 1
67552: ST_TO_ADDR
// end end ;
67553: GO 67482
67555: POP
67556: POP
// for i := minerMinesList downto 1 do
67557: LD_ADDR_VAR 0 1
67561: PUSH
67562: DOUBLE
67563: LD_EXP 89
67567: INC
67568: ST_TO_ADDR
67569: LD_INT 1
67571: PUSH
67572: FOR_DOWNTO
67573: IFFALSE 67909
// begin if IsLive ( minersList [ i ] ) then
67575: LD_EXP 88
67579: PUSH
67580: LD_VAR 0 1
67584: ARRAY
67585: PPUSH
67586: CALL_OW 300
67590: IFFALSE 67618
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67592: LD_EXP 88
67596: PUSH
67597: LD_VAR 0 1
67601: ARRAY
67602: PPUSH
67603: LD_EXP 89
67607: PUSH
67608: LD_VAR 0 1
67612: ARRAY
67613: PPUSH
67614: CALL_OW 505
// if not minerMinesList [ i ] then
67618: LD_EXP 89
67622: PUSH
67623: LD_VAR 0 1
67627: ARRAY
67628: NOT
67629: IFFALSE 67633
// continue ;
67631: GO 67572
// for j := minerMinesList [ i ] downto 1 do
67633: LD_ADDR_VAR 0 2
67637: PUSH
67638: DOUBLE
67639: LD_EXP 89
67643: PUSH
67644: LD_VAR 0 1
67648: ARRAY
67649: INC
67650: ST_TO_ADDR
67651: LD_INT 1
67653: PUSH
67654: FOR_DOWNTO
67655: IFFALSE 67905
// begin side := GetSide ( minersList [ i ] ) ;
67657: LD_ADDR_VAR 0 3
67661: PUSH
67662: LD_EXP 88
67666: PUSH
67667: LD_VAR 0 1
67671: ARRAY
67672: PPUSH
67673: CALL_OW 255
67677: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67678: LD_ADDR_VAR 0 4
67682: PUSH
67683: LD_EXP 89
67687: PUSH
67688: LD_VAR 0 1
67692: ARRAY
67693: PUSH
67694: LD_VAR 0 2
67698: ARRAY
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PPUSH
67704: LD_EXP 89
67708: PUSH
67709: LD_VAR 0 1
67713: ARRAY
67714: PUSH
67715: LD_VAR 0 2
67719: ARRAY
67720: PUSH
67721: LD_INT 2
67723: ARRAY
67724: PPUSH
67725: CALL_OW 428
67729: ST_TO_ADDR
// if not tmp then
67730: LD_VAR 0 4
67734: NOT
67735: IFFALSE 67739
// continue ;
67737: GO 67654
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67739: LD_VAR 0 4
67743: PUSH
67744: LD_INT 81
67746: PUSH
67747: LD_VAR 0 3
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PPUSH
67756: CALL_OW 69
67760: IN
67761: PUSH
67762: LD_EXP 89
67766: PUSH
67767: LD_VAR 0 1
67771: ARRAY
67772: PUSH
67773: LD_VAR 0 2
67777: ARRAY
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PPUSH
67783: LD_EXP 89
67787: PUSH
67788: LD_VAR 0 1
67792: ARRAY
67793: PUSH
67794: LD_VAR 0 2
67798: ARRAY
67799: PUSH
67800: LD_INT 2
67802: ARRAY
67803: PPUSH
67804: CALL_OW 458
67808: AND
67809: IFFALSE 67903
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67811: LD_EXP 89
67815: PUSH
67816: LD_VAR 0 1
67820: ARRAY
67821: PUSH
67822: LD_VAR 0 2
67826: ARRAY
67827: PUSH
67828: LD_INT 1
67830: ARRAY
67831: PPUSH
67832: LD_EXP 89
67836: PUSH
67837: LD_VAR 0 1
67841: ARRAY
67842: PUSH
67843: LD_VAR 0 2
67847: ARRAY
67848: PUSH
67849: LD_INT 2
67851: ARRAY
67852: PPUSH
67853: LD_VAR 0 3
67857: PPUSH
67858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67862: LD_ADDR_EXP 89
67866: PUSH
67867: LD_EXP 89
67871: PPUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_EXP 89
67881: PUSH
67882: LD_VAR 0 1
67886: ARRAY
67887: PPUSH
67888: LD_VAR 0 2
67892: PPUSH
67893: CALL_OW 3
67897: PPUSH
67898: CALL_OW 1
67902: ST_TO_ADDR
// end ; end ;
67903: GO 67654
67905: POP
67906: POP
// end ;
67907: GO 67572
67909: POP
67910: POP
// end ;
67911: PPOPN 4
67913: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67914: LD_INT 0
67916: PPUSH
67917: PPUSH
// result := false ;
67918: LD_ADDR_VAR 0 4
67922: PUSH
67923: LD_INT 0
67925: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67926: LD_VAR 0 1
67930: PPUSH
67931: CALL_OW 264
67935: PUSH
67936: LD_INT 81
67938: EQUAL
67939: NOT
67940: IFFALSE 67944
// exit ;
67942: GO 68184
// index := GetElementIndex ( minersList , unit ) ;
67944: LD_ADDR_VAR 0 5
67948: PUSH
67949: LD_EXP 88
67953: PPUSH
67954: LD_VAR 0 1
67958: PPUSH
67959: CALL 28444 0 2
67963: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67964: LD_EXP 89
67968: PUSH
67969: LD_VAR 0 5
67973: ARRAY
67974: PUSH
67975: LD_EXP 90
67979: GREATEREQUAL
67980: IFFALSE 67984
// exit ;
67982: GO 68184
// ComMoveXY ( unit , x , y ) ;
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 2
67993: PPUSH
67994: LD_VAR 0 3
67998: PPUSH
67999: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68003: LD_INT 35
68005: PPUSH
68006: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68010: LD_VAR 0 1
68014: PPUSH
68015: LD_VAR 0 2
68019: PPUSH
68020: LD_VAR 0 3
68024: PPUSH
68025: CALL 59799 0 3
68029: NOT
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 314
68040: AND
68041: IFFALSE 68045
// exit ;
68043: GO 68184
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68045: LD_VAR 0 2
68049: PPUSH
68050: LD_VAR 0 3
68054: PPUSH
68055: CALL_OW 428
68059: PUSH
68060: LD_VAR 0 1
68064: EQUAL
68065: PUSH
68066: LD_VAR 0 1
68070: PPUSH
68071: CALL_OW 314
68075: NOT
68076: AND
68077: IFFALSE 68003
// PlaySoundXY ( x , y , PlantMine ) ;
68079: LD_VAR 0 2
68083: PPUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: LD_STRING PlantMine
68091: PPUSH
68092: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68096: LD_VAR 0 2
68100: PPUSH
68101: LD_VAR 0 3
68105: PPUSH
68106: LD_VAR 0 1
68110: PPUSH
68111: CALL_OW 255
68115: PPUSH
68116: LD_INT 0
68118: PPUSH
68119: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68123: LD_ADDR_EXP 89
68127: PUSH
68128: LD_EXP 89
68132: PPUSH
68133: LD_VAR 0 5
68137: PUSH
68138: LD_EXP 89
68142: PUSH
68143: LD_VAR 0 5
68147: ARRAY
68148: PUSH
68149: LD_INT 1
68151: PLUS
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PPUSH
68157: LD_VAR 0 2
68161: PUSH
68162: LD_VAR 0 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PPUSH
68171: CALL 28659 0 3
68175: ST_TO_ADDR
// result := true ;
68176: LD_ADDR_VAR 0 4
68180: PUSH
68181: LD_INT 1
68183: ST_TO_ADDR
// end ;
68184: LD_VAR 0 4
68188: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68189: LD_INT 0
68191: PPUSH
68192: PPUSH
68193: PPUSH
// if not unit in minersList then
68194: LD_VAR 0 1
68198: PUSH
68199: LD_EXP 88
68203: IN
68204: NOT
68205: IFFALSE 68209
// exit ;
68207: GO 68601
// index := GetElementIndex ( minersList , unit ) ;
68209: LD_ADDR_VAR 0 6
68213: PUSH
68214: LD_EXP 88
68218: PPUSH
68219: LD_VAR 0 1
68223: PPUSH
68224: CALL 28444 0 2
68228: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68229: LD_ADDR_VAR 0 5
68233: PUSH
68234: DOUBLE
68235: LD_EXP 89
68239: PUSH
68240: LD_VAR 0 6
68244: ARRAY
68245: INC
68246: ST_TO_ADDR
68247: LD_INT 1
68249: PUSH
68250: FOR_DOWNTO
68251: IFFALSE 68412
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68253: LD_EXP 89
68257: PUSH
68258: LD_VAR 0 6
68262: ARRAY
68263: PUSH
68264: LD_VAR 0 5
68268: ARRAY
68269: PUSH
68270: LD_INT 1
68272: ARRAY
68273: PUSH
68274: LD_VAR 0 2
68278: EQUAL
68279: PUSH
68280: LD_EXP 89
68284: PUSH
68285: LD_VAR 0 6
68289: ARRAY
68290: PUSH
68291: LD_VAR 0 5
68295: ARRAY
68296: PUSH
68297: LD_INT 2
68299: ARRAY
68300: PUSH
68301: LD_VAR 0 3
68305: EQUAL
68306: AND
68307: IFFALSE 68410
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68309: LD_EXP 89
68313: PUSH
68314: LD_VAR 0 6
68318: ARRAY
68319: PUSH
68320: LD_VAR 0 5
68324: ARRAY
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PPUSH
68330: LD_EXP 89
68334: PUSH
68335: LD_VAR 0 6
68339: ARRAY
68340: PUSH
68341: LD_VAR 0 5
68345: ARRAY
68346: PUSH
68347: LD_INT 2
68349: ARRAY
68350: PPUSH
68351: LD_VAR 0 1
68355: PPUSH
68356: CALL_OW 255
68360: PPUSH
68361: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68365: LD_ADDR_EXP 89
68369: PUSH
68370: LD_EXP 89
68374: PPUSH
68375: LD_VAR 0 6
68379: PPUSH
68380: LD_EXP 89
68384: PUSH
68385: LD_VAR 0 6
68389: ARRAY
68390: PPUSH
68391: LD_VAR 0 5
68395: PPUSH
68396: CALL_OW 3
68400: PPUSH
68401: CALL_OW 1
68405: ST_TO_ADDR
// exit ;
68406: POP
68407: POP
68408: GO 68601
// end ; end ;
68410: GO 68250
68412: POP
68413: POP
// for i := minerMinesList [ index ] downto 1 do
68414: LD_ADDR_VAR 0 5
68418: PUSH
68419: DOUBLE
68420: LD_EXP 89
68424: PUSH
68425: LD_VAR 0 6
68429: ARRAY
68430: INC
68431: ST_TO_ADDR
68432: LD_INT 1
68434: PUSH
68435: FOR_DOWNTO
68436: IFFALSE 68599
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68438: LD_EXP 89
68442: PUSH
68443: LD_VAR 0 6
68447: ARRAY
68448: PUSH
68449: LD_VAR 0 5
68453: ARRAY
68454: PUSH
68455: LD_INT 1
68457: ARRAY
68458: PPUSH
68459: LD_EXP 89
68463: PUSH
68464: LD_VAR 0 6
68468: ARRAY
68469: PUSH
68470: LD_VAR 0 5
68474: ARRAY
68475: PUSH
68476: LD_INT 2
68478: ARRAY
68479: PPUSH
68480: LD_VAR 0 2
68484: PPUSH
68485: LD_VAR 0 3
68489: PPUSH
68490: CALL_OW 298
68494: PUSH
68495: LD_INT 6
68497: LESS
68498: IFFALSE 68597
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68500: LD_EXP 89
68504: PUSH
68505: LD_VAR 0 6
68509: ARRAY
68510: PUSH
68511: LD_VAR 0 5
68515: ARRAY
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PPUSH
68521: LD_EXP 89
68525: PUSH
68526: LD_VAR 0 6
68530: ARRAY
68531: PUSH
68532: LD_VAR 0 5
68536: ARRAY
68537: PUSH
68538: LD_INT 2
68540: ARRAY
68541: PPUSH
68542: LD_VAR 0 1
68546: PPUSH
68547: CALL_OW 255
68551: PPUSH
68552: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68556: LD_ADDR_EXP 89
68560: PUSH
68561: LD_EXP 89
68565: PPUSH
68566: LD_VAR 0 6
68570: PPUSH
68571: LD_EXP 89
68575: PUSH
68576: LD_VAR 0 6
68580: ARRAY
68581: PPUSH
68582: LD_VAR 0 5
68586: PPUSH
68587: CALL_OW 3
68591: PPUSH
68592: CALL_OW 1
68596: ST_TO_ADDR
// end ; end ;
68597: GO 68435
68599: POP
68600: POP
// end ;
68601: LD_VAR 0 4
68605: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68606: LD_INT 0
68608: PPUSH
68609: PPUSH
68610: PPUSH
68611: PPUSH
68612: PPUSH
68613: PPUSH
68614: PPUSH
68615: PPUSH
68616: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68617: LD_VAR 0 1
68621: PPUSH
68622: CALL_OW 264
68626: PUSH
68627: LD_INT 81
68629: EQUAL
68630: NOT
68631: PUSH
68632: LD_VAR 0 1
68636: PUSH
68637: LD_EXP 88
68641: IN
68642: NOT
68643: OR
68644: IFFALSE 68648
// exit ;
68646: GO 68970
// index := GetElementIndex ( minersList , unit ) ;
68648: LD_ADDR_VAR 0 6
68652: PUSH
68653: LD_EXP 88
68657: PPUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: CALL 28444 0 2
68667: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68668: LD_ADDR_VAR 0 8
68672: PUSH
68673: LD_EXP 90
68677: PUSH
68678: LD_EXP 89
68682: PUSH
68683: LD_VAR 0 6
68687: ARRAY
68688: MINUS
68689: ST_TO_ADDR
// if not minesFreeAmount then
68690: LD_VAR 0 8
68694: NOT
68695: IFFALSE 68699
// exit ;
68697: GO 68970
// tmp := [ ] ;
68699: LD_ADDR_VAR 0 7
68703: PUSH
68704: EMPTY
68705: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68706: LD_ADDR_VAR 0 5
68710: PUSH
68711: DOUBLE
68712: LD_INT 1
68714: DEC
68715: ST_TO_ADDR
68716: LD_VAR 0 8
68720: PUSH
68721: FOR_TO
68722: IFFALSE 68917
// begin _d := rand ( 0 , 5 ) ;
68724: LD_ADDR_VAR 0 11
68728: PUSH
68729: LD_INT 0
68731: PPUSH
68732: LD_INT 5
68734: PPUSH
68735: CALL_OW 12
68739: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68740: LD_ADDR_VAR 0 12
68744: PUSH
68745: LD_INT 2
68747: PPUSH
68748: LD_INT 6
68750: PPUSH
68751: CALL_OW 12
68755: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68756: LD_ADDR_VAR 0 9
68760: PUSH
68761: LD_VAR 0 2
68765: PPUSH
68766: LD_VAR 0 11
68770: PPUSH
68771: LD_VAR 0 12
68775: PPUSH
68776: CALL_OW 272
68780: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68781: LD_ADDR_VAR 0 10
68785: PUSH
68786: LD_VAR 0 3
68790: PPUSH
68791: LD_VAR 0 11
68795: PPUSH
68796: LD_VAR 0 12
68800: PPUSH
68801: CALL_OW 273
68805: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68806: LD_VAR 0 9
68810: PPUSH
68811: LD_VAR 0 10
68815: PPUSH
68816: CALL_OW 488
68820: PUSH
68821: LD_VAR 0 9
68825: PUSH
68826: LD_VAR 0 10
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_VAR 0 7
68839: IN
68840: NOT
68841: AND
68842: PUSH
68843: LD_VAR 0 9
68847: PPUSH
68848: LD_VAR 0 10
68852: PPUSH
68853: CALL_OW 458
68857: NOT
68858: AND
68859: IFFALSE 68901
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68861: LD_ADDR_VAR 0 7
68865: PUSH
68866: LD_VAR 0 7
68870: PPUSH
68871: LD_VAR 0 7
68875: PUSH
68876: LD_INT 1
68878: PLUS
68879: PPUSH
68880: LD_VAR 0 9
68884: PUSH
68885: LD_VAR 0 10
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PPUSH
68894: CALL_OW 1
68898: ST_TO_ADDR
68899: GO 68915
// i := i - 1 ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_VAR 0 5
68910: PUSH
68911: LD_INT 1
68913: MINUS
68914: ST_TO_ADDR
// end ;
68915: GO 68721
68917: POP
68918: POP
// for i in tmp do
68919: LD_ADDR_VAR 0 5
68923: PUSH
68924: LD_VAR 0 7
68928: PUSH
68929: FOR_IN
68930: IFFALSE 68968
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68932: LD_VAR 0 1
68936: PPUSH
68937: LD_VAR 0 5
68941: PUSH
68942: LD_INT 1
68944: ARRAY
68945: PPUSH
68946: LD_VAR 0 5
68950: PUSH
68951: LD_INT 2
68953: ARRAY
68954: PPUSH
68955: CALL 67914 0 3
68959: NOT
68960: IFFALSE 68966
// exit ;
68962: POP
68963: POP
68964: GO 68970
68966: GO 68929
68968: POP
68969: POP
// end ;
68970: LD_VAR 0 4
68974: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68975: LD_INT 0
68977: PPUSH
68978: PPUSH
68979: PPUSH
68980: PPUSH
68981: PPUSH
68982: PPUSH
68983: PPUSH
// if not GetClass ( unit ) = class_sniper then
68984: LD_VAR 0 1
68988: PPUSH
68989: CALL_OW 257
68993: PUSH
68994: LD_INT 5
68996: EQUAL
68997: NOT
68998: IFFALSE 69002
// exit ;
69000: GO 69390
// dist := 8 ;
69002: LD_ADDR_VAR 0 5
69006: PUSH
69007: LD_INT 8
69009: ST_TO_ADDR
// viewRange := 12 ;
69010: LD_ADDR_VAR 0 7
69014: PUSH
69015: LD_INT 12
69017: ST_TO_ADDR
// side := GetSide ( unit ) ;
69018: LD_ADDR_VAR 0 6
69022: PUSH
69023: LD_VAR 0 1
69027: PPUSH
69028: CALL_OW 255
69032: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69033: LD_INT 61
69035: PPUSH
69036: LD_VAR 0 6
69040: PPUSH
69041: CALL_OW 321
69045: PUSH
69046: LD_INT 2
69048: EQUAL
69049: IFFALSE 69059
// viewRange := 16 ;
69051: LD_ADDR_VAR 0 7
69055: PUSH
69056: LD_INT 16
69058: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_VAR 0 2
69068: PPUSH
69069: LD_VAR 0 3
69073: PPUSH
69074: CALL_OW 297
69078: PUSH
69079: LD_VAR 0 5
69083: GREATER
69084: IFFALSE 69163
// begin ComMoveXY ( unit , x , y ) ;
69086: LD_VAR 0 1
69090: PPUSH
69091: LD_VAR 0 2
69095: PPUSH
69096: LD_VAR 0 3
69100: PPUSH
69101: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69105: LD_INT 35
69107: PPUSH
69108: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69112: LD_VAR 0 1
69116: PPUSH
69117: LD_VAR 0 2
69121: PPUSH
69122: LD_VAR 0 3
69126: PPUSH
69127: CALL 59799 0 3
69131: NOT
69132: IFFALSE 69136
// exit ;
69134: GO 69390
// until GetDistUnitXY ( unit , x , y ) < dist ;
69136: LD_VAR 0 1
69140: PPUSH
69141: LD_VAR 0 2
69145: PPUSH
69146: LD_VAR 0 3
69150: PPUSH
69151: CALL_OW 297
69155: PUSH
69156: LD_VAR 0 5
69160: LESS
69161: IFFALSE 69105
// end ; ComTurnXY ( unit , x , y ) ;
69163: LD_VAR 0 1
69167: PPUSH
69168: LD_VAR 0 2
69172: PPUSH
69173: LD_VAR 0 3
69177: PPUSH
69178: CALL_OW 118
// wait ( 5 ) ;
69182: LD_INT 5
69184: PPUSH
69185: CALL_OW 67
// _d := GetDir ( unit ) ;
69189: LD_ADDR_VAR 0 10
69193: PUSH
69194: LD_VAR 0 1
69198: PPUSH
69199: CALL_OW 254
69203: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69204: LD_ADDR_VAR 0 8
69208: PUSH
69209: LD_VAR 0 1
69213: PPUSH
69214: CALL_OW 250
69218: PPUSH
69219: LD_VAR 0 10
69223: PPUSH
69224: LD_VAR 0 5
69228: PPUSH
69229: CALL_OW 272
69233: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69234: LD_ADDR_VAR 0 9
69238: PUSH
69239: LD_VAR 0 1
69243: PPUSH
69244: CALL_OW 251
69248: PPUSH
69249: LD_VAR 0 10
69253: PPUSH
69254: LD_VAR 0 5
69258: PPUSH
69259: CALL_OW 273
69263: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69264: LD_VAR 0 8
69268: PPUSH
69269: LD_VAR 0 9
69273: PPUSH
69274: CALL_OW 488
69278: NOT
69279: IFFALSE 69283
// exit ;
69281: GO 69390
// ComAnimCustom ( unit , 1 ) ;
69283: LD_VAR 0 1
69287: PPUSH
69288: LD_INT 1
69290: PPUSH
69291: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69295: LD_VAR 0 8
69299: PPUSH
69300: LD_VAR 0 9
69304: PPUSH
69305: LD_VAR 0 6
69309: PPUSH
69310: LD_VAR 0 7
69314: PPUSH
69315: CALL_OW 330
// repeat wait ( 1 ) ;
69319: LD_INT 1
69321: PPUSH
69322: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69326: LD_VAR 0 1
69330: PPUSH
69331: CALL_OW 316
69335: PUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: CALL_OW 314
69345: OR
69346: PUSH
69347: LD_VAR 0 1
69351: PPUSH
69352: CALL_OW 302
69356: NOT
69357: OR
69358: PUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: CALL_OW 301
69368: OR
69369: IFFALSE 69319
// RemoveSeeing ( _x , _y , side ) ;
69371: LD_VAR 0 8
69375: PPUSH
69376: LD_VAR 0 9
69380: PPUSH
69381: LD_VAR 0 6
69385: PPUSH
69386: CALL_OW 331
// end ; end_of_file
69390: LD_VAR 0 4
69394: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69395: LD_VAR 0 1
69399: PPUSH
69400: LD_VAR 0 2
69404: PPUSH
69405: LD_VAR 0 3
69409: PPUSH
69410: LD_VAR 0 4
69414: PPUSH
69415: LD_VAR 0 5
69419: PPUSH
69420: LD_VAR 0 6
69424: PPUSH
69425: CALL 7851 0 6
// end ;
69429: PPOPN 6
69431: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69432: LD_INT 0
69434: PPUSH
// begin if not units then
69435: LD_VAR 0 1
69439: NOT
69440: IFFALSE 69444
// exit ;
69442: GO 69444
// end ;
69444: PPOPN 7
69446: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69447: CALL 7745 0 0
// end ;
69451: PPOPN 1
69453: END
