// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2193 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3128 0 0
// Action ;
  88: CALL 1261 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// player_commander := CreateHuman ;
 562: LD_ADDR_EXP 6
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 572: LD_ADDR_EXP 5
 576: PUSH
 577: LD_EXP 5
 581: PUSH
 582: LD_EXP 6
 586: ADD
 587: ST_TO_ADDR
// hc_importance := 0 ;
 588: LD_ADDR_OWVAR 32
 592: PUSH
 593: LD_INT 0
 595: ST_TO_ADDR
// case difficulty of 1 :
 596: LD_OWVAR 67
 600: PUSH
 601: LD_INT 1
 603: DOUBLE
 604: EQUAL
 605: IFTRUE 609
 607: GO 631
 609: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 610: LD_ADDR_VAR 0 4
 614: PUSH
 615: LD_INT 4
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
 629: GO 692
 631: LD_INT 2
 633: DOUBLE
 634: EQUAL
 635: IFTRUE 639
 637: GO 661
 639: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: LIST
 658: ST_TO_ADDR
 659: GO 692
 661: LD_INT 3
 663: DOUBLE
 664: EQUAL
 665: IFTRUE 669
 667: GO 691
 669: POP
// s = [ 3 , 1 , 1 ] ; end ;
 670: LD_ADDR_VAR 0 4
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
 689: GO 692
 691: POP
// ChangeSideFog ( 3 , 6 ) ;
 692: LD_INT 3
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 343
// for i = 1 to s [ 1 ] do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 4
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 767
// begin PrepareHuman ( false , 1 , sk ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_INT 1
 729: PPUSH
 730: LD_VAR 0 5
 734: PPUSH
 735: CALL_OW 380
// un := CreateHuman ;
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: CALL_OW 44
 748: ST_TO_ADDR
// player_force := player_force ^ un ;
 749: LD_ADDR_EXP 5
 753: PUSH
 754: LD_EXP 5
 758: PUSH
 759: LD_VAR 0 3
 763: ADD
 764: ST_TO_ADDR
// end ;
 765: GO 721
 767: POP
 768: POP
// SetClass ( un , class_bazooker ) ;
 769: LD_VAR 0 3
 773: PPUSH
 774: LD_INT 9
 776: PPUSH
 777: CALL_OW 336
// for i = 1 to s [ 2 ] do
 781: LD_ADDR_VAR 0 2
 785: PUSH
 786: DOUBLE
 787: LD_INT 1
 789: DEC
 790: ST_TO_ADDR
 791: LD_VAR 0 4
 795: PUSH
 796: LD_INT 2
 798: ARRAY
 799: PUSH
 800: FOR_TO
 801: IFFALSE 999
// begin if Prob ( 30 ) then
 803: LD_INT 30
 805: PPUSH
 806: CALL_OW 13
 810: IFFALSE 865
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_INT 3
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 22
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 43
 834: PUSH
 835: LD_INT 42
 837: PUSH
 838: LD_INT 44
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 3
 851: PPUSH
 852: CALL_OW 12
 856: ARRAY
 857: PPUSH
 858: CALL 7082 0 6
 862: ST_TO_ADDR
 863: GO 924
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 865: LD_ADDR_VAR 0 6
 869: PUSH
 870: LD_INT 3
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: LD_INT 22
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 1
 884: PPUSH
 885: LD_INT 43
 887: PUSH
 888: LD_INT 42
 890: PUSH
 891: LD_INT 44
 893: PUSH
 894: LD_INT 42
 896: PUSH
 897: LD_INT 44
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_INT 5
 912: PPUSH
 913: CALL_OW 12
 917: ARRAY
 918: PPUSH
 919: CALL 7082 0 6
 923: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 924: LD_INT 0
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_VAR 0 5
 934: PPUSH
 935: CALL_OW 380
// mech := CreateHuman ;
 939: LD_ADDR_VAR 0 8
 943: PUSH
 944: CALL_OW 44
 948: ST_TO_ADDR
// vehs := vehs ^ veh ;
 949: LD_ADDR_VAR 0 7
 953: PUSH
 954: LD_VAR 0 7
 958: PUSH
 959: LD_VAR 0 6
 963: ADD
 964: ST_TO_ADDR
// player_force := player_force ^ veh ;
 965: LD_ADDR_EXP 5
 969: PUSH
 970: LD_EXP 5
 974: PUSH
 975: LD_VAR 0 6
 979: ADD
 980: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
 981: LD_ADDR_VAR 0 9
 985: PUSH
 986: LD_VAR 0 9
 990: PUSH
 991: LD_VAR 0 8
 995: ADD
 996: ST_TO_ADDR
// end ;
 997: GO 800
 999: POP
1000: POP
// for i = 1 to s [ 3 ] do
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: DOUBLE
1007: LD_INT 1
1009: DEC
1010: ST_TO_ADDR
1011: LD_VAR 0 4
1015: PUSH
1016: LD_INT 3
1018: ARRAY
1019: PUSH
1020: FOR_TO
1021: IFFALSE 1066
// begin PrepareHuman ( false , 4 , sk ) ;
1023: LD_INT 0
1025: PPUSH
1026: LD_INT 4
1028: PPUSH
1029: LD_VAR 0 5
1033: PPUSH
1034: CALL_OW 380
// un := CreateHuman ;
1038: LD_ADDR_VAR 0 3
1042: PUSH
1043: CALL_OW 44
1047: ST_TO_ADDR
// player_force := player_force ^ un ;
1048: LD_ADDR_EXP 5
1052: PUSH
1053: LD_EXP 5
1057: PUSH
1058: LD_VAR 0 3
1062: ADD
1063: ST_TO_ADDR
// end ;
1064: GO 1020
1066: POP
1067: POP
// case road of 1 :
1068: LD_EXP 2
1072: PUSH
1073: LD_INT 1
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1100
1081: POP
// begin start_area := pos2 ;
1082: LD_ADDR_EXP 7
1086: PUSH
1087: LD_INT 4
1089: ST_TO_ADDR
// finish_area := pos3 ;
1090: LD_ADDR_EXP 8
1094: PUSH
1095: LD_INT 6
1097: ST_TO_ADDR
// end ; 2 :
1098: GO 1128
1100: LD_INT 2
1102: DOUBLE
1103: EQUAL
1104: IFTRUE 1108
1106: GO 1127
1108: POP
// begin start_area := pos1 ;
1109: LD_ADDR_EXP 7
1113: PUSH
1114: LD_INT 2
1116: ST_TO_ADDR
// finish_area := pos2 ;
1117: LD_ADDR_EXP 8
1121: PUSH
1122: LD_INT 4
1124: ST_TO_ADDR
// end ; end ;
1125: GO 1128
1127: POP
// for i = 1 to player_force do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: DOUBLE
1134: LD_INT 1
1136: DEC
1137: ST_TO_ADDR
1138: LD_EXP 5
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1202
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1146: LD_EXP 5
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 2
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_EXP 2
1171: ARRAY
1172: PPUSH
1173: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1177: LD_EXP 5
1181: PUSH
1182: LD_VAR 0 2
1186: ARRAY
1187: PPUSH
1188: LD_EXP 7
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// end ;
1200: GO 1143
1202: POP
1203: POP
// for i = 1 to s [ 2 ] do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_VAR 0 4
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1254
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1226: LD_VAR 0 9
1230: PUSH
1231: LD_VAR 0 2
1235: ARRAY
1236: PPUSH
1237: LD_VAR 0 7
1241: PUSH
1242: LD_VAR 0 2
1246: ARRAY
1247: PPUSH
1248: CALL_OW 52
1252: GO 1223
1254: POP
1255: POP
// end ;
1256: LD_VAR 0 1
1260: RET
// export function Action ; begin
1261: LD_INT 0
1263: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1264: LD_EXP 6
1268: PPUSH
1269: CALL_OW 87
// InGameOn ;
1273: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1277: LD_EXP 6
1281: PPUSH
1282: LD_STRING DS1
1284: PPUSH
1285: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1289: LD_EXP 6
1293: PPUSH
1294: LD_STRING DS2
1296: PPUSH
1297: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS3
1308: PPUSH
1309: CALL_OW 88
// InGameOff ;
1313: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1317: LD_STRING ObConv
1319: PPUSH
1320: CALL_OW 337
// if road = 1 then
1324: LD_EXP 2
1328: PUSH
1329: LD_INT 1
1331: EQUAL
1332: IFFALSE 1346
// SetAreaMapShow ( pos3 , 1 ) else
1334: LD_INT 6
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL_OW 424
1344: GO 1366
// if road = 2 then
1346: LD_EXP 2
1350: PUSH
1351: LD_INT 2
1353: EQUAL
1354: IFFALSE 1366
// SetAreaMapShow ( pos2 , 1 ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 1
1361: PPUSH
1362: CALL_OW 424
// end ;
1366: LD_VAR 0 1
1370: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1371: LD_EXP 8
1375: PPUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 51
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PPUSH
1386: CALL_OW 70
1390: PUSH
1391: LD_INT 0
1393: GREATER
1394: PUSH
1395: LD_INT 22
1397: PUSH
1398: LD_INT 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PUSH
1410: LD_INT 0
1412: EQUAL
1413: PUSH
1414: LD_EXP 1
1418: NOT
1419: AND
1420: OR
1421: IFFALSE 1562
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1429: LD_EXP 6
1433: PPUSH
1434: LD_STRING DS-6
1436: PPUSH
1437: CALL_OW 88
// Wait ( 0 0$01 ) ;
1441: LD_INT 35
1443: PPUSH
1444: CALL_OW 67
// AddMedal ( med , 1 ) ;
1448: LD_STRING med
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1458: LD_INT 22
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_INT 0
1475: EQUAL
1476: IFFALSE 1490
// AddMedal ( convoy_clear , 1 ) else
1478: LD_STRING convoy_clear
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL_OW 101
1488: GO 1501
// AddMedal ( convoy_clear , - 1 ) ;
1490: LD_STRING convoy_clear
1492: PPUSH
1493: LD_INT 1
1495: NEG
1496: PPUSH
1497: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1501: LD_INT 22
1503: PUSH
1504: LD_INT 6
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: PUSH
1516: LD_INT 2
1518: GREATEREQUAL
1519: IFFALSE 1540
// begin SetAchievement ( ACH_SAFECARGO ) ;
1521: LD_STRING ACH_SAFECARGO
1523: PPUSH
1524: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1528: LD_STRING convoy_cargos
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL_OW 101
// end else
1538: GO 1551
// AddMedal ( convoy_cargos , - 1 ) ;
1540: LD_STRING convoy_cargos
1542: PPUSH
1543: LD_INT 1
1545: NEG
1546: PPUSH
1547: CALL_OW 101
// GiveMedals ( MAIN ) ;
1551: LD_STRING MAIN
1553: PPUSH
1554: CALL_OW 102
// YouWin ;
1558: CALL_OW 103
// end ;
1562: PPOPN 1
1564: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1565: LD_VAR 0 1
1569: PPUSH
1570: CALL_OW 255
1574: PUSH
1575: LD_INT 3
1577: EQUAL
1578: PUSH
1579: LD_VAR 0 1
1583: PPUSH
1584: CALL_OW 247
1588: PUSH
1589: LD_INT 1
1591: EQUAL
1592: AND
1593: PUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_INT 26
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: LD_INT 1
1625: GREATER
1626: AND
1627: PUSH
1628: LD_EXP 9
1632: NOT
1633: AND
1634: IFFALSE 1690
// begin hurt := true ;
1636: LD_ADDR_EXP 9
1640: PUSH
1641: LD_INT 1
1643: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1644: LD_INT 22
1646: PUSH
1647: LD_INT 3
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 26
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 6
1677: DIFF
1678: PUSH
1679: LD_INT 1
1681: ARRAY
1682: PPUSH
1683: LD_STRING DM4
1685: PPUSH
1686: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1690: LD_VAR 0 1
1694: PUSH
1695: LD_INT 22
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 21
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: IN
1724: IFFALSE 1849
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1726: LD_INT 280
1728: PPUSH
1729: LD_INT 490
1731: PPUSH
1732: CALL_OW 12
1736: PPUSH
1737: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1741: LD_VAR 0 1
1745: PPUSH
1746: CALL_OW 250
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: CALL_OW 251
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: CALL_OW 250
1777: PPUSH
1778: LD_VAR 0 1
1782: PPUSH
1783: CALL_OW 251
1787: PPUSH
1788: LD_INT 10
1790: PPUSH
1791: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1795: LD_VAR 0 1
1799: PPUSH
1800: CALL_OW 250
1804: PPUSH
1805: LD_VAR 0 1
1809: PPUSH
1810: CALL_OW 251
1814: PPUSH
1815: LD_INT 10
1817: PPUSH
1818: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1822: LD_VAR 0 1
1826: PPUSH
1827: CALL_OW 250
1831: PPUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: CALL_OW 251
1841: PPUSH
1842: LD_INT 5
1844: PPUSH
1845: CALL_OW 453
// end ; end ;
1849: PPOPN 1
1851: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1852: LD_INT 3
1854: PPUSH
1855: LD_INT 31
1857: PUSH
1858: LD_INT 11
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL_OW 69
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: CALL_OW 292
1878: IFFALSE 1929
1880: GO 1882
1882: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1883: LD_INT 22
1885: PUSH
1886: LD_INT 3
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 26
1895: PUSH
1896: LD_INT 1
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PUSH
1912: LD_EXP 6
1916: DIFF
1917: PUSH
1918: LD_INT 1
1920: ARRAY
1921: PPUSH
1922: LD_STRING DM2
1924: PPUSH
1925: CALL_OW 88
// end ;
1929: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 22
1935: PUSH
1936: LD_INT 2
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 25
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: PPUSH
1962: LD_EXP 6
1966: PPUSH
1967: CALL_OW 74
1971: PPUSH
1972: CALL_OW 292
1976: IFFALSE 2027
1978: GO 1980
1980: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
1981: LD_INT 22
1983: PUSH
1984: LD_INT 3
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 26
1993: PUSH
1994: LD_INT 1
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PPUSH
2005: CALL_OW 69
2009: PUSH
2010: LD_EXP 6
2014: DIFF
2015: PUSH
2016: LD_INT 1
2018: ARRAY
2019: PPUSH
2020: LD_STRING DM3
2022: PPUSH
2023: CALL_OW 88
// end ;
2027: END
// every 0 0$01 trigger mines_trigger do
2028: LD_EXP 10
2032: IFFALSE 2103
2034: GO 2036
2036: DISABLE
// begin DialogueOn ;
2037: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2041: LD_INT 22
2043: PUSH
2044: LD_INT 3
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 26
2053: PUSH
2054: LD_INT 1
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PPUSH
2065: CALL_OW 69
2069: PUSH
2070: LD_EXP 6
2074: DIFF
2075: PUSH
2076: LD_INT 1
2078: ARRAY
2079: PPUSH
2080: LD_STRING DM1
2082: PPUSH
2083: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2087: LD_EXP 6
2091: PPUSH
2092: LD_STRING DS4
2094: PPUSH
2095: CALL_OW 88
// DialogueOff ;
2099: CALL_OW 7
// end ;
2103: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2104: LD_INT 34
2106: PUSH
2107: LD_INT 51
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: IFFALSE 2139
2124: GO 2126
2126: DISABLE
// begin Say ( player_commander , DS5 ) ;
2127: LD_EXP 6
2131: PPUSH
2132: LD_STRING DS5
2134: PPUSH
2135: CALL_OW 88
// end ;
2139: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2140: LD_INT 34
2142: PUSH
2143: LD_INT 51
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PPUSH
2150: CALL_OW 69
2154: PUSH
2155: LD_INT 0
2157: EQUAL
2158: IFFALSE 2170
2160: GO 2162
2162: DISABLE
// begin YouLost ( qconvl ) ;
2163: LD_STRING qconvl
2165: PPUSH
2166: CALL_OW 104
// end ;
2170: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2171: LD_EXP 6
2175: PPUSH
2176: CALL_OW 301
2180: IFFALSE 2192
2182: GO 2184
2184: DISABLE
// begin YouLost ( qcom ) ;
2185: LD_STRING qcom
2187: PPUSH
2188: CALL_OW 104
// end ; end_of_file
2192: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2193: LD_INT 0
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2200: LD_INT 3
2202: PPUSH
2203: LD_INT 6
2205: PPUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: CALL_OW 80
// case road of 1 :
2216: LD_EXP 2
2220: PUSH
2221: LD_INT 1
2223: DOUBLE
2224: EQUAL
2225: IFTRUE 2229
2227: GO 2255
2229: POP
// begin area := pos2 ;
2230: LD_ADDR_VAR 0 3
2234: PUSH
2235: LD_INT 4
2237: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2238: LD_ADDR_VAR 0 5
2242: PUSH
2243: LD_INT 30
2245: PUSH
2246: LD_INT 46
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// end ; 2 :
2253: GO 2290
2255: LD_INT 2
2257: DOUBLE
2258: EQUAL
2259: IFTRUE 2263
2261: GO 2289
2263: POP
// begin area := pos1 ;
2264: LD_ADDR_VAR 0 3
2268: PUSH
2269: LD_INT 2
2271: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2272: LD_ADDR_VAR 0 5
2276: PUSH
2277: LD_INT 18
2279: PUSH
2280: LD_INT 3
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// end ; end ;
2287: GO 2290
2289: POP
// if road = 1 then
2290: LD_EXP 2
2294: PUSH
2295: LD_INT 1
2297: EQUAL
2298: IFFALSE 2411
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2300: LD_ADDR_EXP 13
2304: PUSH
2305: LD_INT 36
2307: PUSH
2308: LD_INT 43
2310: PUSH
2311: LD_INT 40
2313: PUSH
2314: LD_INT 29
2316: PUSH
2317: LD_INT 56
2319: PUSH
2320: LD_INT 37
2322: PUSH
2323: LD_INT 70
2325: PUSH
2326: LD_INT 32
2328: PUSH
2329: LD_INT 63
2331: PUSH
2332: LD_INT 6
2334: PUSH
2335: LD_INT 84
2337: PUSH
2338: LD_INT 8
2340: PUSH
2341: LD_INT 90
2343: PUSH
2344: LD_INT 24
2346: PUSH
2347: LD_INT 96
2349: PUSH
2350: LD_INT 47
2352: PUSH
2353: LD_INT 110
2355: PUSH
2356: LD_INT 73
2358: PUSH
2359: LD_INT 143
2361: PUSH
2362: LD_INT 102
2364: PUSH
2365: LD_INT 121
2367: PUSH
2368: LD_INT 93
2370: PUSH
2371: LD_INT 98
2373: PUSH
2374: LD_INT 100
2376: PUSH
2377: LD_INT 62
2379: PUSH
2380: LD_INT 114
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// if road = 2 then
2411: LD_EXP 2
2415: PUSH
2416: LD_INT 2
2418: EQUAL
2419: IFFALSE 2556
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2421: LD_ADDR_EXP 13
2425: PUSH
2426: LD_INT 39
2428: PUSH
2429: LD_INT 18
2431: PUSH
2432: LD_INT 61
2434: PUSH
2435: LD_INT 36
2437: PUSH
2438: LD_INT 62
2440: PUSH
2441: LD_INT 15
2443: PUSH
2444: LD_INT 75
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: LD_INT 97
2452: PUSH
2453: LD_INT 17
2455: PUSH
2456: LD_INT 98
2458: PUSH
2459: LD_INT 30
2461: PUSH
2462: LD_INT 95
2464: PUSH
2465: LD_INT 49
2467: PUSH
2468: LD_INT 110
2470: PUSH
2471: LD_INT 71
2473: PUSH
2474: LD_INT 146
2476: PUSH
2477: LD_INT 112
2479: PUSH
2480: LD_INT 100
2482: PUSH
2483: LD_INT 81
2485: PUSH
2486: LD_INT 99
2488: PUSH
2489: LD_INT 115
2491: PUSH
2492: LD_INT 77
2494: PUSH
2495: LD_INT 105
2497: PUSH
2498: LD_INT 65
2500: PUSH
2501: LD_INT 75
2503: PUSH
2504: LD_INT 45
2506: PUSH
2507: LD_INT 46
2509: PUSH
2510: LD_INT 26
2512: PUSH
2513: LD_INT 47
2515: PUSH
2516: LD_INT 29
2518: PUSH
2519: LD_INT 54
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: ST_TO_ADDR
// conv_am := 1 ;
2556: LD_ADDR_EXP 12
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// conv := 0 ;
2564: LD_ADDR_EXP 11
2568: PUSH
2569: LD_INT 0
2571: ST_TO_ADDR
// uc_side := 6 ;
2572: LD_ADDR_OWVAR 20
2576: PUSH
2577: LD_INT 6
2579: ST_TO_ADDR
// uc_nation := 3 ;
2580: LD_ADDR_OWVAR 21
2584: PUSH
2585: LD_INT 3
2587: ST_TO_ADDR
// for i = 1 to 2 do
2588: LD_ADDR_VAR 0 4
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 2
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2707
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2604: LD_ADDR_VAR 0 2
2608: PUSH
2609: LD_INT 6
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: LD_INT 22
2617: PPUSH
2618: LD_INT 3
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 51
2626: PPUSH
2627: CALL 7082 0 6
2631: ST_TO_ADDR
// cargos := cargos ^ un ;
2632: LD_ADDR_EXP 4
2636: PUSH
2637: LD_EXP 4
2641: PUSH
2642: LD_VAR 0 2
2646: ADD
2647: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2648: LD_VAR 0 2
2652: PPUSH
2653: LD_INT 1
2655: PUSH
2656: LD_INT 2
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: LD_EXP 2
2667: ARRAY
2668: PPUSH
2669: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2673: LD_VAR 0 2
2677: PPUSH
2678: LD_VAR 0 3
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2690: LD_VAR 0 2
2694: PPUSH
2695: LD_INT 3
2697: PPUSH
2698: LD_INT 100
2700: PPUSH
2701: CALL_OW 290
// end ;
2705: GO 2601
2707: POP
2708: POP
// end ;
2709: LD_VAR 0 1
2713: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2714: LD_EXP 4
2718: IFFALSE 2830
2720: GO 2722
2722: DISABLE
// begin enable ;
2723: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2724: LD_EXP 4
2728: PUSH
2729: LD_INT 1
2731: ARRAY
2732: PPUSH
2733: CALL_OW 306
2737: PUSH
2738: LD_EXP 4
2742: PUSH
2743: LD_INT 2
2745: ARRAY
2746: PPUSH
2747: CALL_OW 306
2751: OR
2752: IFFALSE 2830
// begin if debug then
2754: LD_EXP 1
2758: IFFALSE 2770
// display_strings := conv ;
2760: LD_ADDR_OWVAR 47
2764: PUSH
2765: LD_EXP 11
2769: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2770: LD_STRING QConv
2772: PPUSH
2773: CALL_OW 97
2777: PUSH
2778: LD_INT 1
2780: DOUBLE
2781: EQUAL
2782: IFTRUE 2786
2784: GO 2797
2786: POP
// conv := 0 ; 2 :
2787: LD_ADDR_EXP 11
2791: PUSH
2792: LD_INT 0
2794: ST_TO_ADDR
2795: GO 2817
2797: LD_INT 2
2799: DOUBLE
2800: EQUAL
2801: IFTRUE 2805
2803: GO 2816
2805: POP
// conv := 1 ; end ;
2806: LD_ADDR_EXP 11
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
2814: GO 2817
2816: POP
// disable ( 01 ) ;
2817: LD_INT 1
2819: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2820: LD_INT 175
2822: PPUSH
2823: CALL_OW 67
// enable ( 01 ) ;
2827: LD_INT 1
2829: ENABLE_MARKED
// end ; end ;
2830: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2831: LD_EXP 11
2835: PUSH
2836: LD_INT 1
2838: EQUAL
2839: IFFALSE 3051
2841: GO 2843
2843: DISABLE
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
2848: PPUSH
// begin enable ;
2849: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2850: LD_ADDR_VAR 0 3
2854: PUSH
2855: LD_INT 34
2857: PUSH
2858: LD_INT 51
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// if debug then
2870: LD_EXP 1
2874: IFFALSE 2911
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2876: LD_ADDR_OWVAR 47
2880: PUSH
2881: LD_EXP 13
2885: PUSH
2886: LD_EXP 12
2890: ARRAY
2891: PUSH
2892: LD_EXP 13
2896: PUSH
2897: LD_EXP 12
2901: PUSH
2902: LD_INT 1
2904: PLUS
2905: ARRAY
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: ST_TO_ADDR
// for i = 1 to car do
2911: LD_ADDR_VAR 0 1
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_VAR 0 3
2925: PUSH
2926: FOR_TO
2927: IFFALSE 3049
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2929: LD_VAR 0 3
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PPUSH
2940: LD_EXP 13
2944: PUSH
2945: LD_EXP 12
2949: ARRAY
2950: PPUSH
2951: LD_EXP 13
2955: PUSH
2956: LD_EXP 12
2960: PUSH
2961: LD_INT 1
2963: PLUS
2964: ARRAY
2965: PPUSH
2966: CALL 7160 0 3
2970: IFFALSE 2988
// conv_am := conv_am + 2 else
2972: LD_ADDR_EXP 12
2976: PUSH
2977: LD_EXP 12
2981: PUSH
2982: LD_INT 2
2984: PLUS
2985: ST_TO_ADDR
2986: GO 3047
// if not HasTask ( car [ i ] ) then
2988: LD_VAR 0 3
2992: PUSH
2993: LD_VAR 0 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 314
3003: NOT
3004: IFFALSE 3047
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3006: LD_VAR 0 3
3010: PUSH
3011: LD_VAR 0 1
3015: ARRAY
3016: PPUSH
3017: LD_EXP 13
3021: PUSH
3022: LD_EXP 12
3026: ARRAY
3027: PPUSH
3028: LD_EXP 13
3032: PUSH
3033: LD_EXP 12
3037: PUSH
3038: LD_INT 1
3040: PLUS
3041: ARRAY
3042: PPUSH
3043: CALL_OW 111
// end ;
3047: GO 2926
3049: POP
3050: POP
// end ;
3051: PPOPN 3
3053: END
// every 0 0$01 trigger conv = 0 do var i ;
3054: LD_EXP 11
3058: PUSH
3059: LD_INT 0
3061: EQUAL
3062: IFFALSE 3125
3064: GO 3066
3066: DISABLE
3067: LD_INT 0
3069: PPUSH
// begin enable ;
3070: ENABLE
// for i = 1 to cargos do
3071: LD_ADDR_VAR 0 1
3075: PUSH
3076: DOUBLE
3077: LD_INT 1
3079: DEC
3080: ST_TO_ADDR
3081: LD_EXP 4
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3123
// if HasTask ( cargos [ i ] ) then
3089: LD_EXP 4
3093: PUSH
3094: LD_VAR 0 1
3098: ARRAY
3099: PPUSH
3100: CALL_OW 314
3104: IFFALSE 3121
// ComStop ( cargos [ i ] ) ;
3106: LD_EXP 4
3110: PUSH
3111: LD_VAR 0 1
3115: ARRAY
3116: PPUSH
3117: CALL_OW 141
3121: GO 3086
3123: POP
3124: POP
// end ; end_of_file
3125: PPOPN 1
3127: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3128: LD_INT 0
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
// uc_side := 2 ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_INT 2
3153: ST_TO_ADDR
// uc_nation := 2 ;
3154: LD_ADDR_OWVAR 21
3158: PUSH
3159: LD_INT 2
3161: ST_TO_ADDR
// if road = 1 then
3162: LD_EXP 2
3166: PUSH
3167: LD_INT 1
3169: EQUAL
3170: IFFALSE 3932
// begin case Difficulty of 1 :
3172: LD_OWVAR 67
3176: PUSH
3177: LD_INT 1
3179: DOUBLE
3180: EQUAL
3181: IFTRUE 3185
3183: GO 3492
3185: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_INT 56
3193: PUSH
3194: LD_INT 37
3196: PUSH
3197: LD_INT 2
3199: PUSH
3200: LD_INT 81
3202: PUSH
3203: LD_INT 6
3205: PUSH
3206: LD_INT 1
3208: PUSH
3209: LD_INT 90
3211: PUSH
3212: LD_INT 25
3214: PUSH
3215: LD_INT 3
3217: PUSH
3218: LD_INT 105
3220: PUSH
3221: LD_INT 68
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 96
3229: PUSH
3230: LD_INT 82
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 80
3238: PUSH
3239: LD_INT 109
3241: PUSH
3242: LD_INT 4
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: LD_INT 7
3272: PUSH
3273: LD_INT 9
3275: PUSH
3276: LD_INT 10
3278: PUSH
3279: LD_INT 11
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3288: LD_ADDR_VAR 0 4
3292: PUSH
3293: LD_INT 13
3295: PUSH
3296: LD_INT 14
3298: PUSH
3299: LD_INT 15
3301: PUSH
3302: LD_INT 16
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3311: LD_ADDR_VAR 0 15
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 5
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3334: LD_ADDR_VAR 0 8
3338: PUSH
3339: LD_INT 68
3341: PUSH
3342: LD_INT 5
3344: PUSH
3345: LD_INT 96
3347: PUSH
3348: LD_INT 53
3350: PUSH
3351: LD_INT 142
3353: PUSH
3354: LD_INT 98
3356: PUSH
3357: LD_INT 96
3359: PUSH
3360: LD_INT 82
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3373: LD_ADDR_VAR 0 6
3377: PUSH
3378: LD_INT 17
3380: PUSH
3381: LD_INT 2
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3388: LD_ADDR_VAR 0 5
3392: PUSH
3393: LD_INT 104
3395: PUSH
3396: LD_INT 21
3398: PUSH
3399: LD_INT 4
3401: PUSH
3402: LD_INT 100
3404: PUSH
3405: LD_INT 21
3407: PUSH
3408: LD_INT 4
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3419: LD_ADDR_VAR 0 7
3423: PUSH
3424: LD_INT 38
3426: PUSH
3427: LD_INT 28
3429: PUSH
3430: LD_INT 41
3432: PUSH
3433: LD_INT 29
3435: PUSH
3436: LD_INT 62
3438: PUSH
3439: LD_INT 5
3441: PUSH
3442: LD_INT 65
3444: PUSH
3445: LD_INT 7
3447: PUSH
3448: LD_INT 95
3450: PUSH
3451: LD_INT 55
3453: PUSH
3454: LD_INT 98
3456: PUSH
3457: LD_INT 54
3459: PUSH
3460: LD_INT 96
3462: PUSH
3463: LD_INT 111
3465: PUSH
3466: LD_INT 99
3468: PUSH
3469: LD_INT 112
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: ST_TO_ADDR
// end ; 2 , 3 :
3490: GO 3930
3492: LD_INT 2
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3506
3498: LD_INT 3
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3929
3506: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: LD_INT 56
3514: PUSH
3515: LD_INT 37
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 81
3523: PUSH
3524: LD_INT 6
3526: PUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 90
3532: PUSH
3533: LD_INT 25
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 105
3541: PUSH
3542: LD_INT 68
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: LD_INT 96
3550: PUSH
3551: LD_INT 82
3553: PUSH
3554: LD_INT 4
3556: PUSH
3557: LD_INT 80
3559: PUSH
3560: LD_INT 109
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: LD_INT 7
3593: PUSH
3594: LD_INT 8
3596: PUSH
3597: LD_INT 9
3599: PUSH
3600: LD_INT 10
3602: PUSH
3603: LD_INT 11
3605: PUSH
3606: LD_INT 12
3608: PUSH
3609: LD_INT 42
3611: PUSH
3612: LD_INT 43
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: LD_INT 13
3632: PUSH
3633: LD_INT 14
3635: PUSH
3636: LD_INT 15
3638: PUSH
3639: LD_INT 16
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3648: LD_ADDR_VAR 0 15
3652: PUSH
3653: LD_INT 4
3655: PUSH
3656: LD_INT 5
3658: PUSH
3659: LD_INT 0
3661: PUSH
3662: LD_INT 1
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3671: LD_ADDR_VAR 0 8
3675: PUSH
3676: LD_INT 68
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: LD_INT 96
3684: PUSH
3685: LD_INT 53
3687: PUSH
3688: LD_INT 142
3690: PUSH
3691: LD_INT 98
3693: PUSH
3694: LD_INT 96
3696: PUSH
3697: LD_INT 82
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3710: LD_ADDR_VAR 0 6
3714: PUSH
3715: LD_INT 17
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_INT 104
3732: PUSH
3733: LD_INT 21
3735: PUSH
3736: LD_INT 4
3738: PUSH
3739: LD_INT 100
3741: PUSH
3742: LD_INT 21
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: LD_INT 91
3750: PUSH
3751: LD_INT 28
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: LD_INT 92
3759: PUSH
3760: LD_INT 31
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: LD_INT 71
3768: PUSH
3769: LD_INT 106
3771: PUSH
3772: LD_INT 2
3774: PUSH
3775: LD_INT 71
3777: PUSH
3778: LD_INT 103
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 66
3786: PUSH
3787: LD_INT 102
3789: PUSH
3790: LD_INT 2
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3816: LD_ADDR_VAR 0 7
3820: PUSH
3821: LD_INT 38
3823: PUSH
3824: LD_INT 28
3826: PUSH
3827: LD_INT 41
3829: PUSH
3830: LD_INT 29
3832: PUSH
3833: LD_INT 62
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: LD_INT 65
3841: PUSH
3842: LD_INT 7
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 55
3850: PUSH
3851: LD_INT 98
3853: PUSH
3854: LD_INT 54
3856: PUSH
3857: LD_INT 96
3859: PUSH
3860: LD_INT 111
3862: PUSH
3863: LD_INT 99
3865: PUSH
3866: LD_INT 112
3868: PUSH
3869: LD_INT 86
3871: PUSH
3872: LD_INT 17
3874: PUSH
3875: LD_INT 89
3877: PUSH
3878: LD_INT 17
3880: PUSH
3881: LD_INT 136
3883: PUSH
3884: LD_INT 91
3886: PUSH
3887: LD_INT 140
3889: PUSH
3890: LD_INT 91
3892: PUSH
3893: LD_INT 102
3895: PUSH
3896: LD_INT 54
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: ST_TO_ADDR
// end ; end ;
3927: GO 3930
3929: POP
// end else
3930: GO 4872
// if road = 2 then
3932: LD_EXP 2
3936: PUSH
3937: LD_INT 2
3939: EQUAL
3940: IFFALSE 4872
// begin case Difficulty of 1 :
3942: LD_OWVAR 67
3946: PUSH
3947: LD_INT 1
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 4366
3955: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3956: LD_ADDR_VAR 0 2
3960: PUSH
3961: LD_INT 44
3963: PUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: LD_INT 62
3972: PUSH
3973: LD_INT 8
3975: PUSH
3976: LD_INT 0
3978: PUSH
3979: LD_INT 106
3981: PUSH
3982: LD_INT 68
3984: PUSH
3985: LD_INT 2
3987: PUSH
3988: LD_INT 143
3990: PUSH
3991: LD_INT 96
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: LD_INT 90
3999: PUSH
4000: LD_INT 115
4002: PUSH
4003: LD_INT 4
4005: PUSH
4006: LD_INT 56
4008: PUSH
4009: LD_INT 59
4011: PUSH
4012: LD_INT 5
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_INT 45
4042: PUSH
4043: LD_INT 46
4045: PUSH
4046: LD_INT 47
4048: PUSH
4049: LD_INT 48
4051: PUSH
4052: LD_INT 49
4054: PUSH
4055: LD_INT 50
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4066: LD_ADDR_VAR 0 4
4070: PUSH
4071: LD_INT 45
4073: PUSH
4074: LD_INT 46
4076: PUSH
4077: LD_INT 47
4079: PUSH
4080: LD_INT 48
4082: PUSH
4083: LD_INT 49
4085: PUSH
4086: LD_INT 50
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4097: LD_ADDR_VAR 0 15
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: LD_INT 1
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4128: LD_ADDR_VAR 0 8
4132: PUSH
4133: LD_INT 44
4135: PUSH
4136: LD_INT 22
4138: PUSH
4139: LD_INT 62
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 106
4147: PUSH
4148: LD_INT 68
4150: PUSH
4151: LD_INT 143
4153: PUSH
4154: LD_INT 96
4156: PUSH
4157: LD_INT 90
4159: PUSH
4160: LD_INT 115
4162: PUSH
4163: LD_INT 56
4165: PUSH
4166: LD_INT 59
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4183: LD_ADDR_VAR 0 6
4187: PUSH
4188: LD_INT 17
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4198: LD_ADDR_VAR 0 5
4202: PUSH
4203: LD_INT 51
4205: PUSH
4206: LD_INT 29
4208: PUSH
4209: LD_INT 5
4211: PUSH
4212: LD_INT 55
4214: PUSH
4215: LD_INT 33
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4229: LD_ADDR_VAR 0 7
4233: PUSH
4234: LD_INT 31
4236: PUSH
4237: LD_INT 13
4239: PUSH
4240: LD_INT 33
4242: PUSH
4243: LD_INT 13
4245: PUSH
4246: LD_INT 35
4248: PUSH
4249: LD_INT 13
4251: PUSH
4252: LD_INT 98
4254: PUSH
4255: LD_INT 20
4257: PUSH
4258: LD_INT 102
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 97
4266: PUSH
4267: LD_INT 33
4269: PUSH
4270: LD_INT 101
4272: PUSH
4273: LD_INT 54
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 54
4281: PUSH
4282: LD_INT 96
4284: PUSH
4285: LD_INT 55
4287: PUSH
4288: LD_INT 94
4290: PUSH
4291: LD_INT 56
4293: PUSH
4294: LD_INT 145
4296: PUSH
4297: LD_INT 102
4299: PUSH
4300: LD_INT 146
4302: PUSH
4303: LD_INT 100
4305: PUSH
4306: LD_INT 97
4308: PUSH
4309: LD_INT 114
4311: PUSH
4312: LD_INT 99
4314: PUSH
4315: LD_INT 117
4317: PUSH
4318: LD_INT 54
4320: PUSH
4321: LD_INT 58
4323: PUSH
4324: LD_INT 55
4326: PUSH
4327: LD_INT 56
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: ST_TO_ADDR
// end ; 2 , 3 :
4364: GO 4872
4366: LD_INT 2
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4380
4372: LD_INT 3
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4380
4378: GO 4871
4380: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_INT 44
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: LD_INT 62
4397: PUSH
4398: LD_INT 8
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: LD_INT 106
4406: PUSH
4407: LD_INT 68
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: LD_INT 143
4415: PUSH
4416: LD_INT 96
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: LD_INT 90
4424: PUSH
4425: LD_INT 115
4427: PUSH
4428: LD_INT 4
4430: PUSH
4431: LD_INT 56
4433: PUSH
4434: LD_INT 59
4436: PUSH
4437: LD_INT 5
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4460: LD_ADDR_VAR 0 3
4464: PUSH
4465: LD_INT 45
4467: PUSH
4468: LD_INT 46
4470: PUSH
4471: LD_INT 47
4473: PUSH
4474: LD_INT 48
4476: PUSH
4477: LD_INT 49
4479: PUSH
4480: LD_INT 50
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4491: LD_ADDR_VAR 0 4
4495: PUSH
4496: LD_INT 45
4498: PUSH
4499: LD_INT 46
4501: PUSH
4502: LD_INT 47
4504: PUSH
4505: LD_INT 48
4507: PUSH
4508: LD_INT 49
4510: PUSH
4511: LD_INT 50
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4522: LD_ADDR_VAR 0 15
4526: PUSH
4527: LD_INT 0
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 5
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: LD_INT 1
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4553: LD_ADDR_VAR 0 8
4557: PUSH
4558: LD_INT 21
4560: PUSH
4561: LD_INT 27
4563: PUSH
4564: LD_INT 44
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 62
4572: PUSH
4573: LD_INT 8
4575: PUSH
4576: LD_INT 106
4578: PUSH
4579: LD_INT 68
4581: PUSH
4582: LD_INT 143
4584: PUSH
4585: LD_INT 96
4587: PUSH
4588: LD_INT 90
4590: PUSH
4591: LD_INT 115
4593: PUSH
4594: LD_INT 56
4596: PUSH
4597: LD_INT 59
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4616: LD_ADDR_VAR 0 6
4620: PUSH
4621: LD_INT 17
4623: PUSH
4624: LD_INT 4
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4631: LD_ADDR_VAR 0 5
4635: PUSH
4636: LD_INT 51
4638: PUSH
4639: LD_INT 29
4641: PUSH
4642: LD_INT 5
4644: PUSH
4645: LD_INT 55
4647: PUSH
4648: LD_INT 33
4650: PUSH
4651: LD_INT 5
4653: PUSH
4654: LD_INT 97
4656: PUSH
4657: LD_INT 37
4659: PUSH
4660: LD_INT 0
4662: PUSH
4663: LD_INT 112
4665: PUSH
4666: LD_INT 72
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 120
4674: PUSH
4675: LD_INT 93
4677: PUSH
4678: LD_INT 2
4680: PUSH
4681: LD_INT 25
4683: PUSH
4684: LD_INT 45
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: LD_INT 27
4692: PUSH
4693: LD_INT 48
4695: PUSH
4696: LD_INT 1
4698: PUSH
4699: LD_INT 28
4701: PUSH
4702: LD_INT 51
4704: PUSH
4705: LD_INT 1
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4734: LD_ADDR_VAR 0 7
4738: PUSH
4739: LD_INT 31
4741: PUSH
4742: LD_INT 13
4744: PUSH
4745: LD_INT 33
4747: PUSH
4748: LD_INT 13
4750: PUSH
4751: LD_INT 35
4753: PUSH
4754: LD_INT 13
4756: PUSH
4757: LD_INT 98
4759: PUSH
4760: LD_INT 20
4762: PUSH
4763: LD_INT 102
4765: PUSH
4766: LD_INT 25
4768: PUSH
4769: LD_INT 97
4771: PUSH
4772: LD_INT 33
4774: PUSH
4775: LD_INT 101
4777: PUSH
4778: LD_INT 54
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 54
4786: PUSH
4787: LD_INT 96
4789: PUSH
4790: LD_INT 55
4792: PUSH
4793: LD_INT 94
4795: PUSH
4796: LD_INT 56
4798: PUSH
4799: LD_INT 145
4801: PUSH
4802: LD_INT 102
4804: PUSH
4805: LD_INT 146
4807: PUSH
4808: LD_INT 100
4810: PUSH
4811: LD_INT 97
4813: PUSH
4814: LD_INT 114
4816: PUSH
4817: LD_INT 99
4819: PUSH
4820: LD_INT 117
4822: PUSH
4823: LD_INT 54
4825: PUSH
4826: LD_INT 58
4828: PUSH
4829: LD_INT 55
4831: PUSH
4832: LD_INT 56
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
// end ; end ;
4869: GO 4872
4871: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4872: LD_ADDR_EXP 3
4876: PUSH
4877: LD_INT 4
4879: PUSH
4880: LD_INT 5
4882: PUSH
4883: LD_INT 6
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_OWVAR 67
4895: ARRAY
4896: ST_TO_ADDR
// if Difficulty > 1 then
4897: LD_OWVAR 67
4901: PUSH
4902: LD_INT 1
4904: GREATER
4905: IFFALSE 4920
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4907: LD_INT 5
4909: PPUSH
4910: LD_INT 2
4912: PPUSH
4913: LD_INT 2
4915: PPUSH
4916: CALL_OW 322
// if Difficulty > 1 then
4920: LD_OWVAR 67
4924: PUSH
4925: LD_INT 1
4927: GREATER
4928: IFFALSE 4943
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4930: LD_INT 52
4932: PPUSH
4933: LD_INT 2
4935: PPUSH
4936: LD_INT 2
4938: PPUSH
4939: CALL_OW 322
// miners := [ ] ;
4943: LD_ADDR_EXP 15
4947: PUSH
4948: EMPTY
4949: ST_TO_ADDR
// hovers := [ ] ;
4950: LD_ADDR_EXP 16
4954: PUSH
4955: EMPTY
4956: ST_TO_ADDR
// hovers_driver := [ ] ;
4957: LD_ADDR_EXP 17
4961: PUSH
4962: EMPTY
4963: ST_TO_ADDR
// tanks := [ ] ;
4964: LD_ADDR_EXP 18
4968: PUSH
4969: EMPTY
4970: ST_TO_ADDR
// p := 1 ;
4971: LD_ADDR_VAR 0 10
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4979: LD_ADDR_OWVAR 43
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 5
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: LD_INT 7
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: PUSH
5002: LD_OWVAR 67
5006: PUSH
5007: LD_INT 1
5009: PLUS
5010: ARRAY
5011: ST_TO_ADDR
// bc_type = b_breastwork ;
5012: LD_ADDR_OWVAR 42
5016: PUSH
5017: LD_INT 31
5019: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5020: LD_ADDR_VAR 0 9
5024: PUSH
5025: DOUBLE
5026: LD_INT 1
5028: DEC
5029: ST_TO_ADDR
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: DIVREAL
5038: PUSH
5039: FOR_TO
5040: IFFALSE 5217
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5042: LD_ADDR_VAR 0 13
5046: PUSH
5047: LD_VAR 0 2
5051: PUSH
5052: LD_VAR 0 10
5056: ARRAY
5057: PPUSH
5058: LD_VAR 0 2
5062: PUSH
5063: LD_VAR 0 10
5067: PUSH
5068: LD_INT 1
5070: PLUS
5071: ARRAY
5072: PPUSH
5073: LD_VAR 0 2
5077: PUSH
5078: LD_VAR 0 10
5082: PUSH
5083: LD_INT 2
5085: PLUS
5086: ARRAY
5087: PPUSH
5088: CALL_OW 47
5092: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_EXP 3
5103: PPUSH
5104: CALL_OW 380
// un := CreateHuman ;
5108: LD_ADDR_VAR 0 12
5112: PUSH
5113: CALL_OW 44
5117: ST_TO_ADDR
// dir := GetDir ( b ) ;
5118: LD_ADDR_VAR 0 16
5122: PUSH
5123: LD_VAR 0 13
5127: PPUSH
5128: CALL_OW 254
5132: ST_TO_ADDR
// if dir < 3 then
5133: LD_VAR 0 16
5137: PUSH
5138: LD_INT 3
5140: LESS
5141: IFFALSE 5159
// dir := dir + 3 else
5143: LD_ADDR_VAR 0 16
5147: PUSH
5148: LD_VAR 0 16
5152: PUSH
5153: LD_INT 3
5155: PLUS
5156: ST_TO_ADDR
5157: GO 5173
// dir := dir - 3 ;
5159: LD_ADDR_VAR 0 16
5163: PUSH
5164: LD_VAR 0 16
5168: PUSH
5169: LD_INT 3
5171: MINUS
5172: ST_TO_ADDR
// SetDir ( un , dir ) ;
5173: LD_VAR 0 12
5177: PPUSH
5178: LD_VAR 0 16
5182: PPUSH
5183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5187: LD_VAR 0 12
5191: PPUSH
5192: LD_VAR 0 13
5196: PPUSH
5197: CALL_OW 52
// p := p + 3 ;
5201: LD_ADDR_VAR 0 10
5205: PUSH
5206: LD_VAR 0 10
5210: PUSH
5211: LD_INT 3
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: GO 5039
5217: POP
5218: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5219: LD_ADDR_VAR 0 14
5223: PUSH
5224: LD_INT 2
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: LD_INT 4
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: PUSH
5238: LD_OWVAR 67
5242: ARRAY
5243: ST_TO_ADDR
// for i = 1 to sold_stand do
5244: LD_ADDR_VAR 0 9
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_VAR 0 3
5258: PUSH
5259: FOR_TO
5260: IFFALSE 5439
// for p = 1 to x do
5262: LD_ADDR_VAR 0 10
5266: PUSH
5267: DOUBLE
5268: LD_INT 1
5270: DEC
5271: ST_TO_ADDR
5272: LD_VAR 0 14
5276: PUSH
5277: FOR_TO
5278: IFFALSE 5435
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 9
5289: ARRAY
5290: PUSH
5291: LD_INT 10
5293: EQUAL
5294: PUSH
5295: LD_EXP 2
5299: PUSH
5300: LD_INT 2
5302: EQUAL
5303: PUSH
5304: LD_OWVAR 67
5308: PUSH
5309: LD_INT 1
5311: GREATER
5312: AND
5313: PUSH
5314: LD_VAR 0 10
5318: PUSH
5319: LD_VAR 0 14
5323: EQUAL
5324: AND
5325: OR
5326: IFFALSE 5345
// PrepareHuman ( false , class_mortar , skill ) else
5328: LD_INT 0
5330: PPUSH
5331: LD_INT 8
5333: PPUSH
5334: LD_EXP 3
5338: PPUSH
5339: CALL_OW 380
5343: GO 5360
// PrepareHuman ( false , 1 , skill ) ;
5345: LD_INT 0
5347: PPUSH
5348: LD_INT 1
5350: PPUSH
5351: LD_EXP 3
5355: PPUSH
5356: CALL_OW 380
// un := CreateHuman ;
5360: LD_ADDR_VAR 0 12
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5370: LD_VAR 0 12
5374: PPUSH
5375: CALL_OW 257
5379: PUSH
5380: LD_INT 1
5382: EQUAL
5383: IFFALSE 5401
// miners := miners ^ un ;
5385: LD_ADDR_EXP 15
5389: PUSH
5390: LD_EXP 15
5394: PUSH
5395: LD_VAR 0 12
5399: ADD
5400: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5401: LD_VAR 0 12
5405: PPUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 9
5415: ARRAY
5416: PPUSH
5417: LD_INT 0
5419: PPUSH
5420: CALL_OW 49
// ComHold ( un ) ;
5424: LD_VAR 0 12
5428: PPUSH
5429: CALL_OW 140
// end ;
5433: GO 5277
5435: POP
5436: POP
5437: GO 5259
5439: POP
5440: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5441: LD_ADDR_VAR 0 14
5445: PUSH
5446: LD_INT 3
5448: PUSH
5449: LD_INT 4
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: ST_TO_ADDR
// for i = 1 to sold_crawl do
5466: LD_ADDR_VAR 0 9
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_VAR 0 4
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5594
// for p = 1 to x do
5484: LD_ADDR_VAR 0 10
5488: PUSH
5489: DOUBLE
5490: LD_INT 1
5492: DEC
5493: ST_TO_ADDR
5494: LD_VAR 0 14
5498: PUSH
5499: FOR_TO
5500: IFFALSE 5590
// begin PrepareHuman ( false , 1 , skill ) ;
5502: LD_INT 0
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 380
// un := CreateHuman ;
5517: LD_ADDR_VAR 0 12
5521: PUSH
5522: CALL_OW 44
5526: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5527: LD_VAR 0 12
5531: PPUSH
5532: LD_VAR 0 15
5536: PUSH
5537: LD_VAR 0 9
5541: ARRAY
5542: PPUSH
5543: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5547: LD_VAR 0 12
5551: PPUSH
5552: LD_VAR 0 4
5556: PUSH
5557: LD_VAR 0 9
5561: ARRAY
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 49
// ComCrawl ( un ) ;
5570: LD_VAR 0 12
5574: PPUSH
5575: CALL_OW 137
// AddComHold ( un ) ;
5579: LD_VAR 0 12
5583: PPUSH
5584: CALL_OW 200
// end ;
5588: GO 5499
5590: POP
5591: POP
5592: GO 5481
5594: POP
5595: POP
// p := 1 ;
5596: LD_ADDR_VAR 0 10
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5604: LD_ADDR_VAR 0 9
5608: PUSH
5609: DOUBLE
5610: LD_INT 1
5612: DEC
5613: ST_TO_ADDR
5614: LD_VAR 0 8
5618: PUSH
5619: LD_INT 2
5621: DIVREAL
5622: PUSH
5623: FOR_TO
5624: IFFALSE 5678
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5626: LD_VAR 0 8
5630: PUSH
5631: LD_VAR 0 10
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 8
5641: PUSH
5642: LD_VAR 0 10
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: ARRAY
5651: PPUSH
5652: LD_INT 2
5654: PPUSH
5655: LD_INT 10
5657: PPUSH
5658: CALL_OW 330
// p := p + 2 ;
5662: LD_ADDR_VAR 0 10
5666: PUSH
5667: LD_VAR 0 10
5671: PUSH
5672: LD_INT 2
5674: PLUS
5675: ST_TO_ADDR
// end ;
5676: GO 5623
5678: POP
5679: POP
// for i = 1 to hover_x [ 2 ] do
5680: LD_ADDR_VAR 0 9
5684: PUSH
5685: DOUBLE
5686: LD_INT 1
5688: DEC
5689: ST_TO_ADDR
5690: LD_VAR 0 6
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PUSH
5699: FOR_TO
5700: IFFALSE 5849
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5702: LD_INT 0
5704: PPUSH
5705: LD_INT 3
5707: PPUSH
5708: LD_EXP 3
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: PPUSH
5717: CALL_OW 380
// un := CreateHuman ;
5721: LD_ADDR_VAR 0 12
5725: PUSH
5726: CALL_OW 44
5730: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5731: LD_ADDR_EXP 17
5735: PUSH
5736: LD_EXP 17
5740: PUSH
5741: LD_VAR 0 12
5745: ADD
5746: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5747: LD_ADDR_VAR 0 11
5751: PUSH
5752: LD_INT 2
5754: PPUSH
5755: LD_INT 2
5757: PPUSH
5758: LD_INT 11
5760: PPUSH
5761: LD_INT 2
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: LD_INT 92
5769: PUSH
5770: LD_INT 24
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_VAR 0 9
5781: PUSH
5782: LD_INT 2
5784: MOD
5785: PUSH
5786: LD_INT 1
5788: PLUS
5789: ARRAY
5790: PPUSH
5791: CALL 7082 0 6
5795: ST_TO_ADDR
// hovers := hovers ^ veh ;
5796: LD_ADDR_EXP 16
5800: PUSH
5801: LD_EXP 16
5805: PUSH
5806: LD_VAR 0 11
5810: ADD
5811: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5812: LD_VAR 0 11
5816: PPUSH
5817: LD_VAR 0 6
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5833: LD_VAR 0 12
5837: PPUSH
5838: LD_VAR 0 11
5842: PPUSH
5843: CALL_OW 52
// end ;
5847: GO 5699
5849: POP
5850: POP
// p := 1 ;
5851: LD_ADDR_VAR 0 10
5855: PUSH
5856: LD_INT 1
5858: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5859: LD_ADDR_VAR 0 9
5863: PUSH
5864: DOUBLE
5865: LD_INT 1
5867: DEC
5868: ST_TO_ADDR
5869: LD_VAR 0 5
5873: PUSH
5874: LD_INT 3
5876: DIVREAL
5877: PUSH
5878: FOR_TO
5879: IFFALSE 6053
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5881: LD_INT 0
5883: PPUSH
5884: LD_INT 1
5886: PPUSH
5887: LD_EXP 3
5891: PUSH
5892: LD_INT 1
5894: PLUS
5895: PPUSH
5896: CALL_OW 380
// un := CreateHuman ;
5900: LD_ADDR_VAR 0 12
5904: PUSH
5905: CALL_OW 44
5909: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5910: LD_ADDR_VAR 0 11
5914: PUSH
5915: LD_INT 2
5917: PPUSH
5918: LD_INT 2
5920: PPUSH
5921: LD_INT 14
5923: PPUSH
5924: LD_INT 2
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: LD_INT 27
5932: PUSH
5933: LD_INT 25
5935: PUSH
5936: LD_INT 26
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 3
5949: PPUSH
5950: CALL_OW 12
5954: ARRAY
5955: PPUSH
5956: CALL 7082 0 6
5960: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5961: LD_VAR 0 11
5965: PPUSH
5966: LD_VAR 0 5
5970: PUSH
5971: LD_VAR 0 10
5975: PUSH
5976: LD_INT 2
5978: PLUS
5979: ARRAY
5980: PPUSH
5981: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: ARRAY
6000: PPUSH
6001: LD_VAR 0 5
6005: PUSH
6006: LD_VAR 0 10
6010: PUSH
6011: LD_INT 1
6013: PLUS
6014: ARRAY
6015: PPUSH
6016: LD_INT 0
6018: PPUSH
6019: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6023: LD_VAR 0 12
6027: PPUSH
6028: LD_VAR 0 11
6032: PPUSH
6033: CALL_OW 52
// p := p + 3 ;
6037: LD_ADDR_VAR 0 10
6041: PUSH
6042: LD_VAR 0 10
6046: PUSH
6047: LD_INT 3
6049: PLUS
6050: ST_TO_ADDR
// end ;
6051: GO 5878
6053: POP
6054: POP
// p := 1 ;
6055: LD_ADDR_VAR 0 10
6059: PUSH
6060: LD_INT 1
6062: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6063: LD_ADDR_VAR 0 9
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_VAR 0 7
6077: PUSH
6078: LD_INT 2
6080: DIVREAL
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6137
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6085: LD_VAR 0 7
6089: PUSH
6090: LD_VAR 0 10
6094: ARRAY
6095: PPUSH
6096: LD_VAR 0 7
6100: PUSH
6101: LD_VAR 0 10
6105: PUSH
6106: LD_INT 1
6108: PLUS
6109: ARRAY
6110: PPUSH
6111: LD_INT 2
6113: PPUSH
6114: LD_INT 0
6116: PPUSH
6117: CALL_OW 454
// p := p + 2 ;
6121: LD_ADDR_VAR 0 10
6125: PUSH
6126: LD_VAR 0 10
6130: PUSH
6131: LD_INT 2
6133: PLUS
6134: ST_TO_ADDR
// end ;
6135: GO 6082
6137: POP
6138: POP
// mines := mines_xy ;
6139: LD_ADDR_EXP 14
6143: PUSH
6144: LD_VAR 0 7
6148: ST_TO_ADDR
// end ;
6149: LD_VAR 0 1
6153: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
// begin enable ;
6162: ENABLE
// if tanks > 0 then
6163: LD_EXP 18
6167: PUSH
6168: LD_INT 0
6170: GREATER
6171: IFFALSE 6279
// begin for i = 1 to tanks do
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: DOUBLE
6179: LD_INT 1
6181: DEC
6182: ST_TO_ADDR
6183: LD_EXP 18
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6277
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6191: LD_INT 2
6193: PPUSH
6194: LD_EXP 18
6198: PUSH
6199: LD_VAR 0 3
6203: ARRAY
6204: PPUSH
6205: CALL_OW 292
6209: PUSH
6210: LD_EXP 18
6214: PUSH
6215: LD_VAR 0 3
6219: ARRAY
6220: PPUSH
6221: CALL_OW 314
6225: NOT
6226: AND
6227: IFFALSE 6275
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6229: LD_EXP 18
6233: PUSH
6234: LD_VAR 0 3
6238: ARRAY
6239: PPUSH
6240: LD_INT 22
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PPUSH
6250: CALL_OW 69
6254: PPUSH
6255: LD_EXP 18
6259: PUSH
6260: LD_VAR 0 3
6264: ARRAY
6265: PPUSH
6266: CALL_OW 74
6270: PPUSH
6271: CALL_OW 115
6275: GO 6188
6277: POP
6278: POP
// end ; if hovers > 0 then
6279: LD_EXP 16
6283: PUSH
6284: LD_INT 0
6286: GREATER
6287: IFFALSE 6612
// begin for i = 1 to hovers do
6289: LD_ADDR_VAR 0 3
6293: PUSH
6294: DOUBLE
6295: LD_INT 1
6297: DEC
6298: ST_TO_ADDR
6299: LD_EXP 16
6303: PUSH
6304: FOR_TO
6305: IFFALSE 6610
// begin if GetLives ( hovers [ i ] ) < 600 then
6307: LD_EXP 16
6311: PUSH
6312: LD_VAR 0 3
6316: ARRAY
6317: PPUSH
6318: CALL_OW 256
6322: PUSH
6323: LD_INT 600
6325: LESS
6326: IFFALSE 6437
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6328: LD_EXP 16
6332: PUSH
6333: LD_VAR 0 3
6337: ARRAY
6338: PPUSH
6339: LD_INT 18
6341: PPUSH
6342: CALL_OW 308
6346: NOT
6347: IFFALSE 6369
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6349: LD_EXP 16
6353: PUSH
6354: LD_VAR 0 3
6358: ARRAY
6359: PPUSH
6360: LD_INT 18
6362: PPUSH
6363: CALL_OW 113
6367: GO 6437
// if IsDrivenBy ( hovers [ i ] ) then
6369: LD_EXP 16
6373: PUSH
6374: LD_VAR 0 3
6378: ARRAY
6379: PPUSH
6380: CALL_OW 311
6384: IFFALSE 6437
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6386: LD_EXP 16
6390: PUSH
6391: LD_VAR 0 3
6395: ARRAY
6396: PPUSH
6397: CALL_OW 311
6401: PPUSH
6402: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6406: LD_EXP 16
6410: PUSH
6411: LD_VAR 0 3
6415: ARRAY
6416: PPUSH
6417: CALL_OW 311
6421: PPUSH
6422: LD_EXP 16
6426: PUSH
6427: LD_VAR 0 3
6431: ARRAY
6432: PPUSH
6433: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6437: LD_EXP 16
6441: PUSH
6442: LD_VAR 0 3
6446: ARRAY
6447: PPUSH
6448: CALL_OW 256
6452: PUSH
6453: LD_INT 998
6455: GREATER
6456: IFFALSE 6608
// begin if not IsDrivenBy ( hovers [ i ] ) then
6458: LD_EXP 16
6462: PUSH
6463: LD_VAR 0 3
6467: ARRAY
6468: PPUSH
6469: CALL_OW 311
6473: NOT
6474: IFFALSE 6511
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6476: LD_EXP 17
6480: PUSH
6481: LD_VAR 0 3
6485: ARRAY
6486: PPUSH
6487: LD_EXP 16
6491: PPUSH
6492: LD_INT 58
6494: PUSH
6495: EMPTY
6496: LIST
6497: PPUSH
6498: CALL_OW 72
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: PPUSH
6507: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6511: LD_INT 19
6513: PPUSH
6514: LD_INT 22
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PPUSH
6524: CALL_OW 70
6528: PUSH
6529: LD_INT 0
6531: GREATER
6532: IFFALSE 6608
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6534: LD_EXP 16
6538: PUSH
6539: LD_VAR 0 3
6543: ARRAY
6544: PPUSH
6545: CALL_OW 311
6549: PPUSH
6550: CALL_OW 314
6554: NOT
6555: IFFALSE 6608
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6557: LD_EXP 16
6561: PUSH
6562: LD_VAR 0 3
6566: ARRAY
6567: PPUSH
6568: CALL_OW 311
6572: PPUSH
6573: LD_INT 22
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 69
6587: PPUSH
6588: LD_EXP 16
6592: PUSH
6593: LD_VAR 0 3
6597: ARRAY
6598: PPUSH
6599: CALL_OW 74
6603: PPUSH
6604: CALL_OW 115
// end ; end ;
6608: GO 6304
6610: POP
6611: POP
// end ; p := 1 ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 1
6619: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6620: LD_ADDR_VAR 0 3
6624: PUSH
6625: DOUBLE
6626: LD_INT 1
6628: DEC
6629: ST_TO_ADDR
6630: LD_EXP 14
6634: PUSH
6635: LD_INT 2
6637: DIVREAL
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6858
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6642: LD_EXP 14
6646: PUSH
6647: LD_VAR 0 2
6651: ARRAY
6652: PPUSH
6653: LD_EXP 14
6657: PUSH
6658: LD_VAR 0 2
6662: PUSH
6663: LD_INT 1
6665: PLUS
6666: ARRAY
6667: PPUSH
6668: CALL_OW 428
6672: PPUSH
6673: CALL_OW 255
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 6
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: IN
6688: IFFALSE 6842
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6690: LD_EXP 14
6694: PUSH
6695: LD_VAR 0 2
6699: ARRAY
6700: PPUSH
6701: LD_EXP 14
6705: PUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: PLUS
6714: ARRAY
6715: PPUSH
6716: CALL_OW 458
6720: IFFALSE 6842
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6722: LD_EXP 15
6726: PPUSH
6727: LD_EXP 14
6731: PUSH
6732: LD_VAR 0 2
6736: ARRAY
6737: PPUSH
6738: LD_EXP 14
6742: PUSH
6743: LD_VAR 0 2
6747: PUSH
6748: LD_INT 1
6750: PLUS
6751: ARRAY
6752: PPUSH
6753: CALL_OW 73
6757: PPUSH
6758: LD_EXP 14
6762: PUSH
6763: LD_VAR 0 2
6767: ARRAY
6768: PPUSH
6769: LD_EXP 14
6773: PUSH
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: PLUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 297
6788: PUSH
6789: LD_INT 30
6791: LESS
6792: IFFALSE 6842
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6794: LD_EXP 14
6798: PUSH
6799: LD_VAR 0 2
6803: ARRAY
6804: PPUSH
6805: LD_EXP 14
6809: PUSH
6810: LD_VAR 0 2
6814: PUSH
6815: LD_INT 1
6817: PLUS
6818: ARRAY
6819: PPUSH
6820: LD_INT 2
6822: PPUSH
6823: CALL_OW 456
// if not mines_trigger then
6827: LD_EXP 10
6831: NOT
6832: IFFALSE 6842
// mines_trigger := true ;
6834: LD_ADDR_EXP 10
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// end ; p := p + 2 ;
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: LD_INT 2
6854: PLUS
6855: ST_TO_ADDR
// end ;
6856: GO 6639
6858: POP
6859: POP
// end ;
6860: PPOPN 3
6862: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6863: LD_EXP 4
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: LD_EXP 6
6876: PPUSH
6877: CALL_OW 296
6881: PUSH
6882: LD_INT 20
6884: GREATER
6885: PUSH
6886: LD_EXP 4
6890: PUSH
6891: LD_INT 1
6893: ARRAY
6894: PPUSH
6895: LD_EXP 6
6899: PPUSH
6900: CALL_OW 296
6904: PUSH
6905: LD_INT 20
6907: GREATER
6908: OR
6909: IFFALSE 7024
6911: GO 6913
6913: DISABLE
6914: LD_INT 0
6916: PPUSH
6917: PPUSH
// begin for i = 1 to Difficulty + 1 do
6918: LD_ADDR_VAR 0 1
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_OWVAR 67
6932: PUSH
6933: LD_INT 1
6935: PLUS
6936: PUSH
6937: FOR_TO
6938: IFFALSE 7022
// begin uc_side := 2 ;
6940: LD_ADDR_OWVAR 20
6944: PUSH
6945: LD_INT 2
6947: ST_TO_ADDR
// uc_nation := 2 ;
6948: LD_ADDR_OWVAR 21
6952: PUSH
6953: LD_INT 2
6955: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6956: LD_INT 0
6958: PPUSH
6959: LD_INT 1
6961: PPUSH
6962: LD_EXP 3
6966: PPUSH
6967: CALL_OW 380
// un := CreateHuman ;
6971: LD_ADDR_VAR 0 2
6975: PUSH
6976: CALL_OW 44
6980: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
6981: LD_VAR 0 2
6985: PPUSH
6986: LD_INT 44
6988: PPUSH
6989: LD_INT 0
6991: PPUSH
6992: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_EXP 4
7005: PPUSH
7006: LD_VAR 0 2
7010: PPUSH
7011: CALL_OW 74
7015: PPUSH
7016: CALL_OW 115
// end ;
7020: GO 6937
7022: POP
7023: POP
// end ;
7024: PPOPN 2
7026: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7027: LD_VAR 0 2
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 11
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: IN
7068: IFFALSE 7079
// ComRetreat ( driver ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL 7211 0 1
// end ; end_of_file
7079: PPOPN 4
7081: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7082: LD_INT 0
7084: PPUSH
// uc_side := side ;
7085: LD_ADDR_OWVAR 20
7089: PUSH
7090: LD_VAR 0 1
7094: ST_TO_ADDR
// uc_nation := nation ;
7095: LD_ADDR_OWVAR 21
7099: PUSH
7100: LD_VAR 0 2
7104: ST_TO_ADDR
// vc_chassis := chassis ;
7105: LD_ADDR_OWVAR 37
7109: PUSH
7110: LD_VAR 0 3
7114: ST_TO_ADDR
// vc_engine := engine ;
7115: LD_ADDR_OWVAR 39
7119: PUSH
7120: LD_VAR 0 4
7124: ST_TO_ADDR
// vc_control := control ;
7125: LD_ADDR_OWVAR 38
7129: PUSH
7130: LD_VAR 0 5
7134: ST_TO_ADDR
// vc_weapon := weapon ;
7135: LD_ADDR_OWVAR 40
7139: PUSH
7140: LD_VAR 0 6
7144: ST_TO_ADDR
// result := CreateVehicle ;
7145: LD_ADDR_VAR 0 7
7149: PUSH
7150: CALL_OW 45
7154: ST_TO_ADDR
// end ;
7155: LD_VAR 0 7
7159: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7160: LD_INT 0
7162: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_VAR 0 2
7172: PPUSH
7173: LD_VAR 0 3
7177: PPUSH
7178: CALL_OW 297
7182: PUSH
7183: LD_INT 6
7185: LESS
7186: IFFALSE 7198
// result := true else
7188: LD_ADDR_VAR 0 4
7192: PUSH
7193: LD_INT 1
7195: ST_TO_ADDR
7196: GO 7206
// result := false ;
7198: LD_ADDR_VAR 0 4
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// end ;
7206: LD_VAR 0 4
7210: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7211: LD_INT 0
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7218: LD_VAR 0 1
7222: PPUSH
7223: LD_INT 81
7225: PUSH
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL_OW 255
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PPUSH
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 74
7254: PPUSH
7255: CALL_OW 119
// dir := GetDir ( un ) ;
7259: LD_ADDR_VAR 0 4
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: CALL_OW 254
7273: ST_TO_ADDR
// dir := dir - 3 ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_INT 3
7286: MINUS
7287: ST_TO_ADDR
// if dir < 0 then
7288: LD_VAR 0 4
7292: PUSH
7293: LD_INT 0
7295: LESS
7296: IFFALSE 7312
// dir := dir + 6 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 6
7310: PLUS
7311: ST_TO_ADDR
// while true do
7312: LD_INT 1
7314: IFFALSE 7685
// begin coord_dist := 3 ;
7316: LD_ADDR_VAR 0 3
7320: PUSH
7321: LD_INT 3
7323: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7324: LD_ADDR_VAR 0 5
7328: PUSH
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 250
7338: PPUSH
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_VAR 0 3
7348: PPUSH
7349: CALL_OW 272
7353: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7354: LD_ADDR_VAR 0 6
7358: PUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: CALL_OW 251
7368: PPUSH
7369: LD_VAR 0 4
7373: PPUSH
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 273
7383: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7384: LD_VAR 0 5
7388: PPUSH
7389: LD_VAR 0 6
7393: PPUSH
7394: CALL_OW 351
7398: PUSH
7399: LD_VAR 0 5
7403: PPUSH
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 488
7413: PUSH
7414: LD_INT 0
7416: EQUAL
7417: OR
7418: PUSH
7419: LD_VAR 0 5
7423: PPUSH
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 428
7433: PUSH
7434: LD_INT 0
7436: NONEQUAL
7437: OR
7438: IFFALSE 7599
// begin repeat begin coord_dist := coord_dist + 1 ;
7440: LD_ADDR_VAR 0 3
7444: PUSH
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 1
7452: PLUS
7453: ST_TO_ADDR
// dir := dir + 1 ;
7454: LD_ADDR_VAR 0 4
7458: PUSH
7459: LD_VAR 0 4
7463: PUSH
7464: LD_INT 1
7466: PLUS
7467: ST_TO_ADDR
// if dir > 5 then
7468: LD_VAR 0 4
7472: PUSH
7473: LD_INT 5
7475: GREATER
7476: IFFALSE 7486
// dir = 0 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7486: LD_ADDR_VAR 0 5
7490: PUSH
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 250
7500: PPUSH
7501: LD_VAR 0 4
7505: PPUSH
7506: LD_VAR 0 3
7510: PPUSH
7511: CALL_OW 272
7515: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7516: LD_ADDR_VAR 0 6
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 251
7530: PPUSH
7531: LD_VAR 0 4
7535: PPUSH
7536: LD_VAR 0 3
7540: PPUSH
7541: CALL_OW 273
7545: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7546: LD_VAR 0 5
7550: PPUSH
7551: LD_VAR 0 6
7555: PPUSH
7556: CALL_OW 351
7560: NOT
7561: PUSH
7562: LD_VAR 0 5
7566: PPUSH
7567: LD_VAR 0 6
7571: PPUSH
7572: CALL_OW 488
7576: AND
7577: PUSH
7578: LD_VAR 0 5
7582: PPUSH
7583: LD_VAR 0 6
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: AND
7597: IFFALSE 7440
// end ; ComMoveXY ( un , x , y ) ;
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_VAR 0 5
7608: PPUSH
7609: LD_VAR 0 6
7613: PPUSH
7614: CALL_OW 111
// Wait ( 0 0$1 ) ;
7618: LD_INT 35
7620: PPUSH
7621: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 81
7632: PUSH
7633: LD_VAR 0 1
7637: PPUSH
7638: CALL_OW 255
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PPUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: CALL_OW 74
7661: PPUSH
7662: CALL_OW 296
7666: PUSH
7667: LD_INT 10
7669: GREATEREQUAL
7670: IFFALSE 7683
// begin ComStop ( un ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 141
// break ;
7681: GO 7685
// end ; end ;
7683: GO 7312
// end ; end_of_file end_of_file
7685: LD_VAR 0 2
7689: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7690: GO 7692
7692: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7693: LD_STRING initStreamRollete();
7695: PPUSH
7696: CALL_OW 559
// InitStreamMode ;
7700: CALL 7709 0 0
// DefineStreamItems ( ) ;
7704: CALL 8149 0 0
// end ;
7708: END
// function InitStreamMode ; begin
7709: LD_INT 0
7711: PPUSH
// streamModeActive := false ;
7712: LD_ADDR_EXP 19
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// normalCounter := 36 ;
7720: LD_ADDR_EXP 20
7724: PUSH
7725: LD_INT 36
7727: ST_TO_ADDR
// hardcoreCounter := 16 ;
7728: LD_ADDR_EXP 21
7732: PUSH
7733: LD_INT 16
7735: ST_TO_ADDR
// sRocket := false ;
7736: LD_ADDR_EXP 24
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// sSpeed := false ;
7744: LD_ADDR_EXP 23
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// sEngine := false ;
7752: LD_ADDR_EXP 25
7756: PUSH
7757: LD_INT 0
7759: ST_TO_ADDR
// sSpec := false ;
7760: LD_ADDR_EXP 22
7764: PUSH
7765: LD_INT 0
7767: ST_TO_ADDR
// sLevel := false ;
7768: LD_ADDR_EXP 26
7772: PUSH
7773: LD_INT 0
7775: ST_TO_ADDR
// sArmoury := false ;
7776: LD_ADDR_EXP 27
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// sRadar := false ;
7784: LD_ADDR_EXP 28
7788: PUSH
7789: LD_INT 0
7791: ST_TO_ADDR
// sBunker := false ;
7792: LD_ADDR_EXP 29
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// sHack := false ;
7800: LD_ADDR_EXP 30
7804: PUSH
7805: LD_INT 0
7807: ST_TO_ADDR
// sFire := false ;
7808: LD_ADDR_EXP 31
7812: PUSH
7813: LD_INT 0
7815: ST_TO_ADDR
// sRefresh := false ;
7816: LD_ADDR_EXP 32
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// sExp := false ;
7824: LD_ADDR_EXP 33
7828: PUSH
7829: LD_INT 0
7831: ST_TO_ADDR
// sDepot := false ;
7832: LD_ADDR_EXP 34
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// sFlag := false ;
7840: LD_ADDR_EXP 35
7844: PUSH
7845: LD_INT 0
7847: ST_TO_ADDR
// sKamikadze := false ;
7848: LD_ADDR_EXP 43
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// sTroll := false ;
7856: LD_ADDR_EXP 44
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// sSlow := false ;
7864: LD_ADDR_EXP 45
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// sLack := false ;
7872: LD_ADDR_EXP 46
7876: PUSH
7877: LD_INT 0
7879: ST_TO_ADDR
// sTank := false ;
7880: LD_ADDR_EXP 48
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// sRemote := false ;
7888: LD_ADDR_EXP 49
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// sPowell := false ;
7896: LD_ADDR_EXP 50
7900: PUSH
7901: LD_INT 0
7903: ST_TO_ADDR
// sTeleport := false ;
7904: LD_ADDR_EXP 53
7908: PUSH
7909: LD_INT 0
7911: ST_TO_ADDR
// sOilTower := false ;
7912: LD_ADDR_EXP 55
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// sShovel := false ;
7920: LD_ADDR_EXP 56
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// sSheik := false ;
7928: LD_ADDR_EXP 57
7932: PUSH
7933: LD_INT 0
7935: ST_TO_ADDR
// sEarthquake := false ;
7936: LD_ADDR_EXP 59
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// sAI := false ;
7944: LD_ADDR_EXP 60
7948: PUSH
7949: LD_INT 0
7951: ST_TO_ADDR
// sCargo := false ;
7952: LD_ADDR_EXP 63
7956: PUSH
7957: LD_INT 0
7959: ST_TO_ADDR
// sDLaser := false ;
7960: LD_ADDR_EXP 64
7964: PUSH
7965: LD_INT 0
7967: ST_TO_ADDR
// sExchange := false ;
7968: LD_ADDR_EXP 65
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// sFac := false ;
7976: LD_ADDR_EXP 66
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// sPower := false ;
7984: LD_ADDR_EXP 67
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// sRandom := false ;
7992: LD_ADDR_EXP 68
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// sShield := false ;
8000: LD_ADDR_EXP 69
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// sTime := false ;
8008: LD_ADDR_EXP 70
8012: PUSH
8013: LD_INT 0
8015: ST_TO_ADDR
// sTools := false ;
8016: LD_ADDR_EXP 71
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// sSold := false ;
8024: LD_ADDR_EXP 36
8028: PUSH
8029: LD_INT 0
8031: ST_TO_ADDR
// sDiff := false ;
8032: LD_ADDR_EXP 37
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// sFog := false ;
8040: LD_ADDR_EXP 40
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// sReset := false ;
8048: LD_ADDR_EXP 41
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// sSun := false ;
8056: LD_ADDR_EXP 42
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// sTiger := false ;
8064: LD_ADDR_EXP 38
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// sBomb := false ;
8072: LD_ADDR_EXP 39
8076: PUSH
8077: LD_INT 0
8079: ST_TO_ADDR
// sWound := false ;
8080: LD_ADDR_EXP 47
8084: PUSH
8085: LD_INT 0
8087: ST_TO_ADDR
// sBetray := false ;
8088: LD_ADDR_EXP 51
8092: PUSH
8093: LD_INT 0
8095: ST_TO_ADDR
// sContamin := false ;
8096: LD_ADDR_EXP 52
8100: PUSH
8101: LD_INT 0
8103: ST_TO_ADDR
// sOil := false ;
8104: LD_ADDR_EXP 54
8108: PUSH
8109: LD_INT 0
8111: ST_TO_ADDR
// sStu := false ;
8112: LD_ADDR_EXP 58
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// sBazooka := false ;
8120: LD_ADDR_EXP 61
8124: PUSH
8125: LD_INT 0
8127: ST_TO_ADDR
// sMortar := false ;
8128: LD_ADDR_EXP 62
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// sRanger := false ;
8136: LD_ADDR_EXP 72
8140: PUSH
8141: LD_INT 0
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 1
8148: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8149: LD_INT 0
8151: PPUSH
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
// result := [ ] ;
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: EMPTY
8162: ST_TO_ADDR
// if campaign_id = 1 then
8163: LD_OWVAR 69
8167: PUSH
8168: LD_INT 1
8170: EQUAL
8171: IFFALSE 11109
// begin case mission_number of 1 :
8173: LD_OWVAR 70
8177: PUSH
8178: LD_INT 1
8180: DOUBLE
8181: EQUAL
8182: IFTRUE 8186
8184: GO 8250
8186: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8187: LD_ADDR_VAR 0 1
8191: PUSH
8192: LD_INT 2
8194: PUSH
8195: LD_INT 4
8197: PUSH
8198: LD_INT 11
8200: PUSH
8201: LD_INT 12
8203: PUSH
8204: LD_INT 15
8206: PUSH
8207: LD_INT 16
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_INT 23
8215: PUSH
8216: LD_INT 26
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 101
8232: PUSH
8233: LD_INT 102
8235: PUSH
8236: LD_INT 106
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: ST_TO_ADDR
8248: GO 11107
8250: LD_INT 2
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8330
8258: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8259: LD_ADDR_VAR 0 1
8263: PUSH
8264: LD_INT 2
8266: PUSH
8267: LD_INT 4
8269: PUSH
8270: LD_INT 11
8272: PUSH
8273: LD_INT 12
8275: PUSH
8276: LD_INT 15
8278: PUSH
8279: LD_INT 16
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 26
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 101
8304: PUSH
8305: LD_INT 102
8307: PUSH
8308: LD_INT 105
8310: PUSH
8311: LD_INT 106
8313: PUSH
8314: LD_INT 108
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: ST_TO_ADDR
8328: GO 11107
8330: LD_INT 3
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8414
8338: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: LD_INT 4
8349: PUSH
8350: LD_INT 5
8352: PUSH
8353: LD_INT 11
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: LD_INT 15
8361: PUSH
8362: LD_INT 16
8364: PUSH
8365: LD_INT 22
8367: PUSH
8368: LD_INT 26
8370: PUSH
8371: LD_INT 36
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 101
8388: PUSH
8389: LD_INT 102
8391: PUSH
8392: LD_INT 105
8394: PUSH
8395: LD_INT 106
8397: PUSH
8398: LD_INT 108
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
8412: GO 11107
8414: LD_INT 4
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8422
8420: GO 8506
8422: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 8
8439: PUSH
8440: LD_INT 11
8442: PUSH
8443: LD_INT 12
8445: PUSH
8446: LD_INT 15
8448: PUSH
8449: LD_INT 16
8451: PUSH
8452: LD_INT 22
8454: PUSH
8455: LD_INT 23
8457: PUSH
8458: LD_INT 26
8460: PUSH
8461: LD_INT 36
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 101
8480: PUSH
8481: LD_INT 102
8483: PUSH
8484: LD_INT 105
8486: PUSH
8487: LD_INT 106
8489: PUSH
8490: LD_INT 108
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: ST_TO_ADDR
8504: GO 11107
8506: LD_INT 5
8508: DOUBLE
8509: EQUAL
8510: IFTRUE 8514
8512: GO 8614
8514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_INT 2
8522: PUSH
8523: LD_INT 4
8525: PUSH
8526: LD_INT 5
8528: PUSH
8529: LD_INT 6
8531: PUSH
8532: LD_INT 8
8534: PUSH
8535: LD_INT 11
8537: PUSH
8538: LD_INT 12
8540: PUSH
8541: LD_INT 15
8543: PUSH
8544: LD_INT 16
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 23
8552: PUSH
8553: LD_INT 25
8555: PUSH
8556: LD_INT 26
8558: PUSH
8559: LD_INT 36
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 101
8580: PUSH
8581: LD_INT 102
8583: PUSH
8584: LD_INT 105
8586: PUSH
8587: LD_INT 106
8589: PUSH
8590: LD_INT 108
8592: PUSH
8593: LD_INT 109
8595: PUSH
8596: LD_INT 112
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: ST_TO_ADDR
8612: GO 11107
8614: LD_INT 6
8616: DOUBLE
8617: EQUAL
8618: IFTRUE 8622
8620: GO 8742
8622: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 4
8633: PUSH
8634: LD_INT 5
8636: PUSH
8637: LD_INT 6
8639: PUSH
8640: LD_INT 8
8642: PUSH
8643: LD_INT 11
8645: PUSH
8646: LD_INT 12
8648: PUSH
8649: LD_INT 15
8651: PUSH
8652: LD_INT 16
8654: PUSH
8655: LD_INT 20
8657: PUSH
8658: LD_INT 21
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_INT 23
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 26
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 31
8678: PUSH
8679: LD_INT 32
8681: PUSH
8682: LD_INT 36
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 101
8708: PUSH
8709: LD_INT 102
8711: PUSH
8712: LD_INT 105
8714: PUSH
8715: LD_INT 106
8717: PUSH
8718: LD_INT 108
8720: PUSH
8721: LD_INT 109
8723: PUSH
8724: LD_INT 112
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: ST_TO_ADDR
8740: GO 11107
8742: LD_INT 7
8744: DOUBLE
8745: EQUAL
8746: IFTRUE 8750
8748: GO 8850
8750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: LD_INT 4
8761: PUSH
8762: LD_INT 5
8764: PUSH
8765: LD_INT 7
8767: PUSH
8768: LD_INT 11
8770: PUSH
8771: LD_INT 12
8773: PUSH
8774: LD_INT 15
8776: PUSH
8777: LD_INT 16
8779: PUSH
8780: LD_INT 20
8782: PUSH
8783: LD_INT 21
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 23
8791: PUSH
8792: LD_INT 25
8794: PUSH
8795: LD_INT 26
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 101
8816: PUSH
8817: LD_INT 102
8819: PUSH
8820: LD_INT 103
8822: PUSH
8823: LD_INT 105
8825: PUSH
8826: LD_INT 106
8828: PUSH
8829: LD_INT 108
8831: PUSH
8832: LD_INT 112
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: ST_TO_ADDR
8848: GO 11107
8850: LD_INT 8
8852: DOUBLE
8853: EQUAL
8854: IFTRUE 8858
8856: GO 8986
8858: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: LD_INT 2
8866: PUSH
8867: LD_INT 4
8869: PUSH
8870: LD_INT 5
8872: PUSH
8873: LD_INT 6
8875: PUSH
8876: LD_INT 7
8878: PUSH
8879: LD_INT 8
8881: PUSH
8882: LD_INT 11
8884: PUSH
8885: LD_INT 12
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: LD_INT 20
8896: PUSH
8897: LD_INT 21
8899: PUSH
8900: LD_INT 22
8902: PUSH
8903: LD_INT 23
8905: PUSH
8906: LD_INT 25
8908: PUSH
8909: LD_INT 26
8911: PUSH
8912: LD_INT 30
8914: PUSH
8915: LD_INT 31
8917: PUSH
8918: LD_INT 32
8920: PUSH
8921: LD_INT 36
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 101
8948: PUSH
8949: LD_INT 102
8951: PUSH
8952: LD_INT 103
8954: PUSH
8955: LD_INT 105
8957: PUSH
8958: LD_INT 106
8960: PUSH
8961: LD_INT 108
8963: PUSH
8964: LD_INT 109
8966: PUSH
8967: LD_INT 112
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: ST_TO_ADDR
8984: GO 11107
8986: LD_INT 9
8988: DOUBLE
8989: EQUAL
8990: IFTRUE 8994
8992: GO 9130
8994: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8995: LD_ADDR_VAR 0 1
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 4
9005: PUSH
9006: LD_INT 5
9008: PUSH
9009: LD_INT 6
9011: PUSH
9012: LD_INT 7
9014: PUSH
9015: LD_INT 8
9017: PUSH
9018: LD_INT 11
9020: PUSH
9021: LD_INT 12
9023: PUSH
9024: LD_INT 15
9026: PUSH
9027: LD_INT 16
9029: PUSH
9030: LD_INT 20
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 22
9038: PUSH
9039: LD_INT 23
9041: PUSH
9042: LD_INT 25
9044: PUSH
9045: LD_INT 26
9047: PUSH
9048: LD_INT 28
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 31
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 36
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 101
9088: PUSH
9089: LD_INT 102
9091: PUSH
9092: LD_INT 103
9094: PUSH
9095: LD_INT 105
9097: PUSH
9098: LD_INT 106
9100: PUSH
9101: LD_INT 108
9103: PUSH
9104: LD_INT 109
9106: PUSH
9107: LD_INT 112
9109: PUSH
9110: LD_INT 114
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 11107
9130: LD_INT 10
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9322
9138: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: LD_INT 4
9149: PUSH
9150: LD_INT 5
9152: PUSH
9153: LD_INT 6
9155: PUSH
9156: LD_INT 7
9158: PUSH
9159: LD_INT 8
9161: PUSH
9162: LD_INT 9
9164: PUSH
9165: LD_INT 10
9167: PUSH
9168: LD_INT 11
9170: PUSH
9171: LD_INT 12
9173: PUSH
9174: LD_INT 13
9176: PUSH
9177: LD_INT 14
9179: PUSH
9180: LD_INT 15
9182: PUSH
9183: LD_INT 16
9185: PUSH
9186: LD_INT 17
9188: PUSH
9189: LD_INT 18
9191: PUSH
9192: LD_INT 19
9194: PUSH
9195: LD_INT 20
9197: PUSH
9198: LD_INT 21
9200: PUSH
9201: LD_INT 22
9203: PUSH
9204: LD_INT 23
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: LD_INT 25
9212: PUSH
9213: LD_INT 26
9215: PUSH
9216: LD_INT 28
9218: PUSH
9219: LD_INT 30
9221: PUSH
9222: LD_INT 31
9224: PUSH
9225: LD_INT 32
9227: PUSH
9228: LD_INT 36
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 101
9264: PUSH
9265: LD_INT 102
9267: PUSH
9268: LD_INT 103
9270: PUSH
9271: LD_INT 104
9273: PUSH
9274: LD_INT 105
9276: PUSH
9277: LD_INT 106
9279: PUSH
9280: LD_INT 107
9282: PUSH
9283: LD_INT 108
9285: PUSH
9286: LD_INT 109
9288: PUSH
9289: LD_INT 110
9291: PUSH
9292: LD_INT 111
9294: PUSH
9295: LD_INT 112
9297: PUSH
9298: LD_INT 114
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 11107
9322: LD_INT 11
9324: DOUBLE
9325: EQUAL
9326: IFTRUE 9330
9328: GO 9522
9330: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9331: LD_ADDR_VAR 0 1
9335: PUSH
9336: LD_INT 2
9338: PUSH
9339: LD_INT 3
9341: PUSH
9342: LD_INT 4
9344: PUSH
9345: LD_INT 5
9347: PUSH
9348: LD_INT 6
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: LD_INT 8
9356: PUSH
9357: LD_INT 9
9359: PUSH
9360: LD_INT 10
9362: PUSH
9363: LD_INT 11
9365: PUSH
9366: LD_INT 12
9368: PUSH
9369: LD_INT 13
9371: PUSH
9372: LD_INT 14
9374: PUSH
9375: LD_INT 15
9377: PUSH
9378: LD_INT 16
9380: PUSH
9381: LD_INT 17
9383: PUSH
9384: LD_INT 18
9386: PUSH
9387: LD_INT 19
9389: PUSH
9390: LD_INT 20
9392: PUSH
9393: LD_INT 21
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 23
9401: PUSH
9402: LD_INT 24
9404: PUSH
9405: LD_INT 25
9407: PUSH
9408: LD_INT 26
9410: PUSH
9411: LD_INT 28
9413: PUSH
9414: LD_INT 30
9416: PUSH
9417: LD_INT 31
9419: PUSH
9420: LD_INT 32
9422: PUSH
9423: LD_INT 34
9425: PUSH
9426: LD_INT 36
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 101
9464: PUSH
9465: LD_INT 102
9467: PUSH
9468: LD_INT 103
9470: PUSH
9471: LD_INT 104
9473: PUSH
9474: LD_INT 105
9476: PUSH
9477: LD_INT 106
9479: PUSH
9480: LD_INT 107
9482: PUSH
9483: LD_INT 108
9485: PUSH
9486: LD_INT 109
9488: PUSH
9489: LD_INT 110
9491: PUSH
9492: LD_INT 111
9494: PUSH
9495: LD_INT 112
9497: PUSH
9498: LD_INT 114
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 11107
9522: LD_INT 12
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9738
9530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9531: LD_ADDR_VAR 0 1
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: LD_INT 6
9553: PUSH
9554: LD_INT 7
9556: PUSH
9557: LD_INT 8
9559: PUSH
9560: LD_INT 9
9562: PUSH
9563: LD_INT 10
9565: PUSH
9566: LD_INT 11
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: LD_INT 13
9574: PUSH
9575: LD_INT 14
9577: PUSH
9578: LD_INT 15
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: LD_INT 17
9586: PUSH
9587: LD_INT 18
9589: PUSH
9590: LD_INT 19
9592: PUSH
9593: LD_INT 20
9595: PUSH
9596: LD_INT 21
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 24
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 26
9613: PUSH
9614: LD_INT 27
9616: PUSH
9617: LD_INT 28
9619: PUSH
9620: LD_INT 30
9622: PUSH
9623: LD_INT 31
9625: PUSH
9626: LD_INT 32
9628: PUSH
9629: LD_INT 33
9631: PUSH
9632: LD_INT 34
9634: PUSH
9635: LD_INT 36
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 101
9676: PUSH
9677: LD_INT 102
9679: PUSH
9680: LD_INT 103
9682: PUSH
9683: LD_INT 104
9685: PUSH
9686: LD_INT 105
9688: PUSH
9689: LD_INT 106
9691: PUSH
9692: LD_INT 107
9694: PUSH
9695: LD_INT 108
9697: PUSH
9698: LD_INT 109
9700: PUSH
9701: LD_INT 110
9703: PUSH
9704: LD_INT 111
9706: PUSH
9707: LD_INT 112
9709: PUSH
9710: LD_INT 113
9712: PUSH
9713: LD_INT 114
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: ST_TO_ADDR
9736: GO 11107
9738: LD_INT 13
9740: DOUBLE
9741: EQUAL
9742: IFTRUE 9746
9744: GO 9942
9746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9747: LD_ADDR_VAR 0 1
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: LD_INT 2
9757: PUSH
9758: LD_INT 3
9760: PUSH
9761: LD_INT 4
9763: PUSH
9764: LD_INT 5
9766: PUSH
9767: LD_INT 8
9769: PUSH
9770: LD_INT 9
9772: PUSH
9773: LD_INT 10
9775: PUSH
9776: LD_INT 11
9778: PUSH
9779: LD_INT 12
9781: PUSH
9782: LD_INT 14
9784: PUSH
9785: LD_INT 15
9787: PUSH
9788: LD_INT 16
9790: PUSH
9791: LD_INT 17
9793: PUSH
9794: LD_INT 18
9796: PUSH
9797: LD_INT 19
9799: PUSH
9800: LD_INT 20
9802: PUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 22
9808: PUSH
9809: LD_INT 23
9811: PUSH
9812: LD_INT 24
9814: PUSH
9815: LD_INT 25
9817: PUSH
9818: LD_INT 26
9820: PUSH
9821: LD_INT 27
9823: PUSH
9824: LD_INT 28
9826: PUSH
9827: LD_INT 30
9829: PUSH
9830: LD_INT 31
9832: PUSH
9833: LD_INT 32
9835: PUSH
9836: LD_INT 33
9838: PUSH
9839: LD_INT 34
9841: PUSH
9842: LD_INT 36
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 101
9880: PUSH
9881: LD_INT 102
9883: PUSH
9884: LD_INT 103
9886: PUSH
9887: LD_INT 104
9889: PUSH
9890: LD_INT 105
9892: PUSH
9893: LD_INT 106
9895: PUSH
9896: LD_INT 107
9898: PUSH
9899: LD_INT 108
9901: PUSH
9902: LD_INT 109
9904: PUSH
9905: LD_INT 110
9907: PUSH
9908: LD_INT 111
9910: PUSH
9911: LD_INT 112
9913: PUSH
9914: LD_INT 113
9916: PUSH
9917: LD_INT 114
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: ST_TO_ADDR
9940: GO 11107
9942: LD_INT 14
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9950
9948: GO 10162
9950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9951: LD_ADDR_VAR 0 1
9955: PUSH
9956: LD_INT 1
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: LD_INT 4
9967: PUSH
9968: LD_INT 5
9970: PUSH
9971: LD_INT 6
9973: PUSH
9974: LD_INT 7
9976: PUSH
9977: LD_INT 8
9979: PUSH
9980: LD_INT 9
9982: PUSH
9983: LD_INT 10
9985: PUSH
9986: LD_INT 11
9988: PUSH
9989: LD_INT 12
9991: PUSH
9992: LD_INT 13
9994: PUSH
9995: LD_INT 14
9997: PUSH
9998: LD_INT 15
10000: PUSH
10001: LD_INT 16
10003: PUSH
10004: LD_INT 17
10006: PUSH
10007: LD_INT 18
10009: PUSH
10010: LD_INT 19
10012: PUSH
10013: LD_INT 20
10015: PUSH
10016: LD_INT 21
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 23
10024: PUSH
10025: LD_INT 24
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 26
10033: PUSH
10034: LD_INT 27
10036: PUSH
10037: LD_INT 28
10039: PUSH
10040: LD_INT 29
10042: PUSH
10043: LD_INT 30
10045: PUSH
10046: LD_INT 31
10048: PUSH
10049: LD_INT 32
10051: PUSH
10052: LD_INT 33
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 36
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 101
10100: PUSH
10101: LD_INT 102
10103: PUSH
10104: LD_INT 103
10106: PUSH
10107: LD_INT 104
10109: PUSH
10110: LD_INT 105
10112: PUSH
10113: LD_INT 106
10115: PUSH
10116: LD_INT 107
10118: PUSH
10119: LD_INT 108
10121: PUSH
10122: LD_INT 109
10124: PUSH
10125: LD_INT 110
10127: PUSH
10128: LD_INT 111
10130: PUSH
10131: LD_INT 112
10133: PUSH
10134: LD_INT 113
10136: PUSH
10137: LD_INT 114
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: ST_TO_ADDR
10160: GO 11107
10162: LD_INT 15
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10382
10170: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10171: LD_ADDR_VAR 0 1
10175: PUSH
10176: LD_INT 1
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: LD_INT 3
10184: PUSH
10185: LD_INT 4
10187: PUSH
10188: LD_INT 5
10190: PUSH
10191: LD_INT 6
10193: PUSH
10194: LD_INT 7
10196: PUSH
10197: LD_INT 8
10199: PUSH
10200: LD_INT 9
10202: PUSH
10203: LD_INT 10
10205: PUSH
10206: LD_INT 11
10208: PUSH
10209: LD_INT 12
10211: PUSH
10212: LD_INT 13
10214: PUSH
10215: LD_INT 14
10217: PUSH
10218: LD_INT 15
10220: PUSH
10221: LD_INT 16
10223: PUSH
10224: LD_INT 17
10226: PUSH
10227: LD_INT 18
10229: PUSH
10230: LD_INT 19
10232: PUSH
10233: LD_INT 20
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 23
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: LD_INT 25
10250: PUSH
10251: LD_INT 26
10253: PUSH
10254: LD_INT 27
10256: PUSH
10257: LD_INT 28
10259: PUSH
10260: LD_INT 29
10262: PUSH
10263: LD_INT 30
10265: PUSH
10266: LD_INT 31
10268: PUSH
10269: LD_INT 32
10271: PUSH
10272: LD_INT 33
10274: PUSH
10275: LD_INT 34
10277: PUSH
10278: LD_INT 36
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 101
10320: PUSH
10321: LD_INT 102
10323: PUSH
10324: LD_INT 103
10326: PUSH
10327: LD_INT 104
10329: PUSH
10330: LD_INT 105
10332: PUSH
10333: LD_INT 106
10335: PUSH
10336: LD_INT 107
10338: PUSH
10339: LD_INT 108
10341: PUSH
10342: LD_INT 109
10344: PUSH
10345: LD_INT 110
10347: PUSH
10348: LD_INT 111
10350: PUSH
10351: LD_INT 112
10353: PUSH
10354: LD_INT 113
10356: PUSH
10357: LD_INT 114
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: ST_TO_ADDR
10380: GO 11107
10382: LD_INT 16
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10514
10390: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10391: LD_ADDR_VAR 0 1
10395: PUSH
10396: LD_INT 2
10398: PUSH
10399: LD_INT 4
10401: PUSH
10402: LD_INT 5
10404: PUSH
10405: LD_INT 7
10407: PUSH
10408: LD_INT 11
10410: PUSH
10411: LD_INT 12
10413: PUSH
10414: LD_INT 15
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: LD_INT 20
10422: PUSH
10423: LD_INT 21
10425: PUSH
10426: LD_INT 22
10428: PUSH
10429: LD_INT 23
10431: PUSH
10432: LD_INT 25
10434: PUSH
10435: LD_INT 26
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: LD_INT 31
10443: PUSH
10444: LD_INT 32
10446: PUSH
10447: LD_INT 33
10449: PUSH
10450: LD_INT 34
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 101
10476: PUSH
10477: LD_INT 102
10479: PUSH
10480: LD_INT 103
10482: PUSH
10483: LD_INT 106
10485: PUSH
10486: LD_INT 108
10488: PUSH
10489: LD_INT 112
10491: PUSH
10492: LD_INT 113
10494: PUSH
10495: LD_INT 114
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: ST_TO_ADDR
10512: GO 11107
10514: LD_INT 17
10516: DOUBLE
10517: EQUAL
10518: IFTRUE 10522
10520: GO 10734
10522: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10523: LD_ADDR_VAR 0 1
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: LD_INT 2
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: LD_INT 4
10539: PUSH
10540: LD_INT 5
10542: PUSH
10543: LD_INT 6
10545: PUSH
10546: LD_INT 7
10548: PUSH
10549: LD_INT 8
10551: PUSH
10552: LD_INT 9
10554: PUSH
10555: LD_INT 10
10557: PUSH
10558: LD_INT 11
10560: PUSH
10561: LD_INT 12
10563: PUSH
10564: LD_INT 13
10566: PUSH
10567: LD_INT 14
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 17
10578: PUSH
10579: LD_INT 18
10581: PUSH
10582: LD_INT 19
10584: PUSH
10585: LD_INT 20
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 23
10596: PUSH
10597: LD_INT 24
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 26
10605: PUSH
10606: LD_INT 27
10608: PUSH
10609: LD_INT 28
10611: PUSH
10612: LD_INT 29
10614: PUSH
10615: LD_INT 30
10617: PUSH
10618: LD_INT 31
10620: PUSH
10621: LD_INT 32
10623: PUSH
10624: LD_INT 33
10626: PUSH
10627: LD_INT 34
10629: PUSH
10630: LD_INT 36
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 101
10672: PUSH
10673: LD_INT 102
10675: PUSH
10676: LD_INT 103
10678: PUSH
10679: LD_INT 104
10681: PUSH
10682: LD_INT 105
10684: PUSH
10685: LD_INT 106
10687: PUSH
10688: LD_INT 107
10690: PUSH
10691: LD_INT 108
10693: PUSH
10694: LD_INT 109
10696: PUSH
10697: LD_INT 110
10699: PUSH
10700: LD_INT 111
10702: PUSH
10703: LD_INT 112
10705: PUSH
10706: LD_INT 113
10708: PUSH
10709: LD_INT 114
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: ST_TO_ADDR
10732: GO 11107
10734: LD_INT 18
10736: DOUBLE
10737: EQUAL
10738: IFTRUE 10742
10740: GO 10878
10742: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10743: LD_ADDR_VAR 0 1
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: LD_INT 4
10753: PUSH
10754: LD_INT 5
10756: PUSH
10757: LD_INT 7
10759: PUSH
10760: LD_INT 11
10762: PUSH
10763: LD_INT 12
10765: PUSH
10766: LD_INT 15
10768: PUSH
10769: LD_INT 16
10771: PUSH
10772: LD_INT 20
10774: PUSH
10775: LD_INT 21
10777: PUSH
10778: LD_INT 22
10780: PUSH
10781: LD_INT 23
10783: PUSH
10784: LD_INT 25
10786: PUSH
10787: LD_INT 26
10789: PUSH
10790: LD_INT 30
10792: PUSH
10793: LD_INT 31
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 33
10801: PUSH
10802: LD_INT 34
10804: PUSH
10805: LD_INT 35
10807: PUSH
10808: LD_INT 36
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 101
10836: PUSH
10837: LD_INT 102
10839: PUSH
10840: LD_INT 103
10842: PUSH
10843: LD_INT 106
10845: PUSH
10846: LD_INT 108
10848: PUSH
10849: LD_INT 112
10851: PUSH
10852: LD_INT 113
10854: PUSH
10855: LD_INT 114
10857: PUSH
10858: LD_INT 115
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: ST_TO_ADDR
10876: GO 11107
10878: LD_INT 19
10880: DOUBLE
10881: EQUAL
10882: IFTRUE 10886
10884: GO 11106
10886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10887: LD_ADDR_VAR 0 1
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 4
10903: PUSH
10904: LD_INT 5
10906: PUSH
10907: LD_INT 6
10909: PUSH
10910: LD_INT 7
10912: PUSH
10913: LD_INT 8
10915: PUSH
10916: LD_INT 9
10918: PUSH
10919: LD_INT 10
10921: PUSH
10922: LD_INT 11
10924: PUSH
10925: LD_INT 12
10927: PUSH
10928: LD_INT 13
10930: PUSH
10931: LD_INT 14
10933: PUSH
10934: LD_INT 15
10936: PUSH
10937: LD_INT 16
10939: PUSH
10940: LD_INT 17
10942: PUSH
10943: LD_INT 18
10945: PUSH
10946: LD_INT 19
10948: PUSH
10949: LD_INT 20
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 23
10960: PUSH
10961: LD_INT 24
10963: PUSH
10964: LD_INT 25
10966: PUSH
10967: LD_INT 26
10969: PUSH
10970: LD_INT 27
10972: PUSH
10973: LD_INT 28
10975: PUSH
10976: LD_INT 29
10978: PUSH
10979: LD_INT 30
10981: PUSH
10982: LD_INT 31
10984: PUSH
10985: LD_INT 32
10987: PUSH
10988: LD_INT 33
10990: PUSH
10991: LD_INT 34
10993: PUSH
10994: LD_INT 35
10996: PUSH
10997: LD_INT 36
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 101
11040: PUSH
11041: LD_INT 102
11043: PUSH
11044: LD_INT 103
11046: PUSH
11047: LD_INT 104
11049: PUSH
11050: LD_INT 105
11052: PUSH
11053: LD_INT 106
11055: PUSH
11056: LD_INT 107
11058: PUSH
11059: LD_INT 108
11061: PUSH
11062: LD_INT 109
11064: PUSH
11065: LD_INT 110
11067: PUSH
11068: LD_INT 111
11070: PUSH
11071: LD_INT 112
11073: PUSH
11074: LD_INT 113
11076: PUSH
11077: LD_INT 114
11079: PUSH
11080: LD_INT 115
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: ST_TO_ADDR
11104: GO 11107
11106: POP
// end else
11107: GO 11326
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: LD_INT 3
11122: PUSH
11123: LD_INT 4
11125: PUSH
11126: LD_INT 5
11128: PUSH
11129: LD_INT 6
11131: PUSH
11132: LD_INT 7
11134: PUSH
11135: LD_INT 8
11137: PUSH
11138: LD_INT 9
11140: PUSH
11141: LD_INT 10
11143: PUSH
11144: LD_INT 11
11146: PUSH
11147: LD_INT 12
11149: PUSH
11150: LD_INT 13
11152: PUSH
11153: LD_INT 14
11155: PUSH
11156: LD_INT 15
11158: PUSH
11159: LD_INT 16
11161: PUSH
11162: LD_INT 17
11164: PUSH
11165: LD_INT 18
11167: PUSH
11168: LD_INT 19
11170: PUSH
11171: LD_INT 20
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: LD_INT 25
11188: PUSH
11189: LD_INT 26
11191: PUSH
11192: LD_INT 27
11194: PUSH
11195: LD_INT 28
11197: PUSH
11198: LD_INT 29
11200: PUSH
11201: LD_INT 30
11203: PUSH
11204: LD_INT 31
11206: PUSH
11207: LD_INT 32
11209: PUSH
11210: LD_INT 33
11212: PUSH
11213: LD_INT 34
11215: PUSH
11216: LD_INT 35
11218: PUSH
11219: LD_INT 36
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 101
11262: PUSH
11263: LD_INT 102
11265: PUSH
11266: LD_INT 103
11268: PUSH
11269: LD_INT 104
11271: PUSH
11272: LD_INT 105
11274: PUSH
11275: LD_INT 106
11277: PUSH
11278: LD_INT 107
11280: PUSH
11281: LD_INT 108
11283: PUSH
11284: LD_INT 109
11286: PUSH
11287: LD_INT 110
11289: PUSH
11290: LD_INT 111
11292: PUSH
11293: LD_INT 112
11295: PUSH
11296: LD_INT 113
11298: PUSH
11299: LD_INT 114
11301: PUSH
11302: LD_INT 115
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: ST_TO_ADDR
// if result then
11326: LD_VAR 0 1
11330: IFFALSE 11619
// begin normal :=  ;
11332: LD_ADDR_VAR 0 3
11336: PUSH
11337: LD_STRING 
11339: ST_TO_ADDR
// hardcore :=  ;
11340: LD_ADDR_VAR 0 4
11344: PUSH
11345: LD_STRING 
11347: ST_TO_ADDR
// for i = 1 to normalCounter do
11348: LD_ADDR_VAR 0 5
11352: PUSH
11353: DOUBLE
11354: LD_INT 1
11356: DEC
11357: ST_TO_ADDR
11358: LD_EXP 20
11362: PUSH
11363: FOR_TO
11364: IFFALSE 11465
// begin tmp := 0 ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_STRING 0
11373: ST_TO_ADDR
// if result [ 1 ] then
11374: LD_VAR 0 1
11378: PUSH
11379: LD_INT 1
11381: ARRAY
11382: IFFALSE 11447
// if result [ 1 ] [ 1 ] = i then
11384: LD_VAR 0 1
11388: PUSH
11389: LD_INT 1
11391: ARRAY
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PUSH
11397: LD_VAR 0 5
11401: EQUAL
11402: IFFALSE 11447
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11404: LD_ADDR_VAR 0 1
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: LD_VAR 0 1
11421: PUSH
11422: LD_INT 1
11424: ARRAY
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 3
11433: PPUSH
11434: CALL_OW 1
11438: ST_TO_ADDR
// tmp := 1 ;
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_STRING 1
11446: ST_TO_ADDR
// end ; normal := normal & tmp ;
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_VAR 0 3
11456: PUSH
11457: LD_VAR 0 2
11461: STR
11462: ST_TO_ADDR
// end ;
11463: GO 11363
11465: POP
11466: POP
// for i = 1 to hardcoreCounter do
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_EXP 21
11481: PUSH
11482: FOR_TO
11483: IFFALSE 11588
// begin tmp := 0 ;
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: LD_STRING 0
11492: ST_TO_ADDR
// if result [ 2 ] then
11493: LD_VAR 0 1
11497: PUSH
11498: LD_INT 2
11500: ARRAY
11501: IFFALSE 11570
// if result [ 2 ] [ 1 ] = 100 + i then
11503: LD_VAR 0 1
11507: PUSH
11508: LD_INT 2
11510: ARRAY
11511: PUSH
11512: LD_INT 1
11514: ARRAY
11515: PUSH
11516: LD_INT 100
11518: PUSH
11519: LD_VAR 0 5
11523: PLUS
11524: EQUAL
11525: IFFALSE 11570
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11527: LD_ADDR_VAR 0 1
11531: PUSH
11532: LD_VAR 0 1
11536: PPUSH
11537: LD_INT 2
11539: PPUSH
11540: LD_VAR 0 1
11544: PUSH
11545: LD_INT 2
11547: ARRAY
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 3
11556: PPUSH
11557: CALL_OW 1
11561: ST_TO_ADDR
// tmp := 1 ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: LD_STRING 1
11569: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11570: LD_ADDR_VAR 0 4
11574: PUSH
11575: LD_VAR 0 4
11579: PUSH
11580: LD_VAR 0 2
11584: STR
11585: ST_TO_ADDR
// end ;
11586: GO 11482
11588: POP
11589: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11590: LD_STRING getStreamItemsFromMission("
11592: PUSH
11593: LD_VAR 0 3
11597: STR
11598: PUSH
11599: LD_STRING ","
11601: STR
11602: PUSH
11603: LD_VAR 0 4
11607: STR
11608: PUSH
11609: LD_STRING ")
11611: STR
11612: PPUSH
11613: CALL_OW 559
// end else
11617: GO 11626
// ToLua ( getStreamItemsFromMission("","") ) ;
11619: LD_STRING getStreamItemsFromMission("","")
11621: PPUSH
11622: CALL_OW 559
// end ;
11626: LD_VAR 0 1
11630: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11631: LD_VAR 0 2
11635: PUSH
11636: LD_INT 100
11638: EQUAL
11639: IFFALSE 12588
// begin if not StreamModeActive then
11641: LD_EXP 19
11645: NOT
11646: IFFALSE 11656
// StreamModeActive := true ;
11648: LD_ADDR_EXP 19
11652: PUSH
11653: LD_INT 1
11655: ST_TO_ADDR
// if p3 = 0 then
11656: LD_VAR 0 3
11660: PUSH
11661: LD_INT 0
11663: EQUAL
11664: IFFALSE 11670
// InitStreamMode ;
11666: CALL 7709 0 0
// if p3 = 1 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 1
11677: EQUAL
11678: IFFALSE 11688
// sRocket := true ;
11680: LD_ADDR_EXP 24
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 2 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 2
11695: EQUAL
11696: IFFALSE 11706
// sSpeed := true ;
11698: LD_ADDR_EXP 23
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 3 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 3
11713: EQUAL
11714: IFFALSE 11724
// sEngine := true ;
11716: LD_ADDR_EXP 25
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 4 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 4
11731: EQUAL
11732: IFFALSE 11742
// sSpec := true ;
11734: LD_ADDR_EXP 22
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 5 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 5
11749: EQUAL
11750: IFFALSE 11760
// sLevel := true ;
11752: LD_ADDR_EXP 26
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 6 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 6
11767: EQUAL
11768: IFFALSE 11778
// sArmoury := true ;
11770: LD_ADDR_EXP 27
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 7 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 7
11785: EQUAL
11786: IFFALSE 11796
// sRadar := true ;
11788: LD_ADDR_EXP 28
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 8 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 8
11803: EQUAL
11804: IFFALSE 11814
// sBunker := true ;
11806: LD_ADDR_EXP 29
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 9 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 9
11821: EQUAL
11822: IFFALSE 11832
// sHack := true ;
11824: LD_ADDR_EXP 30
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 10 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 10
11839: EQUAL
11840: IFFALSE 11850
// sFire := true ;
11842: LD_ADDR_EXP 31
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 11 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 11
11857: EQUAL
11858: IFFALSE 11868
// sRefresh := true ;
11860: LD_ADDR_EXP 32
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 12 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 12
11875: EQUAL
11876: IFFALSE 11886
// sExp := true ;
11878: LD_ADDR_EXP 33
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 13 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 13
11893: EQUAL
11894: IFFALSE 11904
// sDepot := true ;
11896: LD_ADDR_EXP 34
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 14 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 14
11911: EQUAL
11912: IFFALSE 11922
// sFlag := true ;
11914: LD_ADDR_EXP 35
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 15 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 15
11929: EQUAL
11930: IFFALSE 11940
// sKamikadze := true ;
11932: LD_ADDR_EXP 43
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 16 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 16
11947: EQUAL
11948: IFFALSE 11958
// sTroll := true ;
11950: LD_ADDR_EXP 44
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 17 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 17
11965: EQUAL
11966: IFFALSE 11976
// sSlow := true ;
11968: LD_ADDR_EXP 45
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 18 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 18
11983: EQUAL
11984: IFFALSE 11994
// sLack := true ;
11986: LD_ADDR_EXP 46
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 19 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 19
12001: EQUAL
12002: IFFALSE 12012
// sTank := true ;
12004: LD_ADDR_EXP 48
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 20 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 20
12019: EQUAL
12020: IFFALSE 12030
// sRemote := true ;
12022: LD_ADDR_EXP 49
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 21 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 21
12037: EQUAL
12038: IFFALSE 12048
// sPowell := true ;
12040: LD_ADDR_EXP 50
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 22 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 22
12055: EQUAL
12056: IFFALSE 12066
// sTeleport := true ;
12058: LD_ADDR_EXP 53
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 23 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 23
12073: EQUAL
12074: IFFALSE 12084
// sOilTower := true ;
12076: LD_ADDR_EXP 55
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 24 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 24
12091: EQUAL
12092: IFFALSE 12102
// sShovel := true ;
12094: LD_ADDR_EXP 56
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 25 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 25
12109: EQUAL
12110: IFFALSE 12120
// sSheik := true ;
12112: LD_ADDR_EXP 57
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 26 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 26
12127: EQUAL
12128: IFFALSE 12138
// sEarthquake := true ;
12130: LD_ADDR_EXP 59
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 27 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 27
12145: EQUAL
12146: IFFALSE 12156
// sAI := true ;
12148: LD_ADDR_EXP 60
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 28 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 28
12163: EQUAL
12164: IFFALSE 12174
// sCargo := true ;
12166: LD_ADDR_EXP 63
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if p3 = 29 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 29
12181: EQUAL
12182: IFFALSE 12192
// sDLaser := true ;
12184: LD_ADDR_EXP 64
12188: PUSH
12189: LD_INT 1
12191: ST_TO_ADDR
// if p3 = 30 then
12192: LD_VAR 0 3
12196: PUSH
12197: LD_INT 30
12199: EQUAL
12200: IFFALSE 12210
// sExchange := true ;
12202: LD_ADDR_EXP 65
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// if p3 = 31 then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 31
12217: EQUAL
12218: IFFALSE 12228
// sFac := true ;
12220: LD_ADDR_EXP 66
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// if p3 = 32 then
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 32
12235: EQUAL
12236: IFFALSE 12246
// sPower := true ;
12238: LD_ADDR_EXP 67
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 33 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 33
12253: EQUAL
12254: IFFALSE 12264
// sRandom := true ;
12256: LD_ADDR_EXP 68
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if p3 = 34 then
12264: LD_VAR 0 3
12268: PUSH
12269: LD_INT 34
12271: EQUAL
12272: IFFALSE 12282
// sShield := true ;
12274: LD_ADDR_EXP 69
12278: PUSH
12279: LD_INT 1
12281: ST_TO_ADDR
// if p3 = 35 then
12282: LD_VAR 0 3
12286: PUSH
12287: LD_INT 35
12289: EQUAL
12290: IFFALSE 12300
// sTime := true ;
12292: LD_ADDR_EXP 70
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// if p3 = 36 then
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 36
12307: EQUAL
12308: IFFALSE 12318
// sTools := true ;
12310: LD_ADDR_EXP 71
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// if p3 = 101 then
12318: LD_VAR 0 3
12322: PUSH
12323: LD_INT 101
12325: EQUAL
12326: IFFALSE 12336
// sSold := true ;
12328: LD_ADDR_EXP 36
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if p3 = 102 then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 102
12343: EQUAL
12344: IFFALSE 12354
// sDiff := true ;
12346: LD_ADDR_EXP 37
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// if p3 = 103 then
12354: LD_VAR 0 3
12358: PUSH
12359: LD_INT 103
12361: EQUAL
12362: IFFALSE 12372
// sFog := true ;
12364: LD_ADDR_EXP 40
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// if p3 = 104 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 104
12379: EQUAL
12380: IFFALSE 12390
// sReset := true ;
12382: LD_ADDR_EXP 41
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// if p3 = 105 then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 105
12397: EQUAL
12398: IFFALSE 12408
// sSun := true ;
12400: LD_ADDR_EXP 42
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if p3 = 106 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 106
12415: EQUAL
12416: IFFALSE 12426
// sTiger := true ;
12418: LD_ADDR_EXP 38
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 107 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 107
12433: EQUAL
12434: IFFALSE 12444
// sBomb := true ;
12436: LD_ADDR_EXP 39
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// if p3 = 108 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 108
12451: EQUAL
12452: IFFALSE 12462
// sWound := true ;
12454: LD_ADDR_EXP 47
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 109 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 109
12469: EQUAL
12470: IFFALSE 12480
// sBetray := true ;
12472: LD_ADDR_EXP 51
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 110 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 110
12487: EQUAL
12488: IFFALSE 12498
// sContamin := true ;
12490: LD_ADDR_EXP 52
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 111 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 111
12505: EQUAL
12506: IFFALSE 12516
// sOil := true ;
12508: LD_ADDR_EXP 54
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 112 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 112
12523: EQUAL
12524: IFFALSE 12534
// sStu := true ;
12526: LD_ADDR_EXP 58
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 113 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 113
12541: EQUAL
12542: IFFALSE 12552
// sBazooka := true ;
12544: LD_ADDR_EXP 61
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 114 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 114
12559: EQUAL
12560: IFFALSE 12570
// sMortar := true ;
12562: LD_ADDR_EXP 62
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 115 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 115
12577: EQUAL
12578: IFFALSE 12588
// sRanger := true ;
12580: LD_ADDR_EXP 72
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// end ; end ;
12588: PPOPN 6
12590: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12591: LD_EXP 19
12595: PUSH
12596: LD_EXP 24
12600: AND
12601: IFFALSE 12725
12603: GO 12605
12605: DISABLE
12606: LD_INT 0
12608: PPUSH
12609: PPUSH
// begin enable ;
12610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12611: LD_ADDR_VAR 0 2
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_OWVAR 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 2
12630: PUSH
12631: LD_INT 34
12633: PUSH
12634: LD_INT 7
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 34
12643: PUSH
12644: LD_INT 45
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 34
12653: PUSH
12654: LD_INT 28
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 34
12663: PUSH
12664: LD_INT 47
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: ST_TO_ADDR
// if not tmp then
12687: LD_VAR 0 2
12691: NOT
12692: IFFALSE 12696
// exit ;
12694: GO 12725
// for i in tmp do
12696: LD_ADDR_VAR 0 1
12700: PUSH
12701: LD_VAR 0 2
12705: PUSH
12706: FOR_IN
12707: IFFALSE 12723
// begin SetLives ( i , 0 ) ;
12709: LD_VAR 0 1
12713: PPUSH
12714: LD_INT 0
12716: PPUSH
12717: CALL_OW 234
// end ;
12721: GO 12706
12723: POP
12724: POP
// end ;
12725: PPOPN 2
12727: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12728: LD_EXP 19
12732: PUSH
12733: LD_EXP 25
12737: AND
12738: IFFALSE 12822
12740: GO 12742
12742: DISABLE
12743: LD_INT 0
12745: PPUSH
12746: PPUSH
// begin enable ;
12747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12748: LD_ADDR_VAR 0 2
12752: PUSH
12753: LD_INT 22
12755: PUSH
12756: LD_OWVAR 2
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 32
12767: PUSH
12768: LD_INT 3
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PPUSH
12779: CALL_OW 69
12783: ST_TO_ADDR
// if not tmp then
12784: LD_VAR 0 2
12788: NOT
12789: IFFALSE 12793
// exit ;
12791: GO 12822
// for i in tmp do
12793: LD_ADDR_VAR 0 1
12797: PUSH
12798: LD_VAR 0 2
12802: PUSH
12803: FOR_IN
12804: IFFALSE 12820
// begin SetLives ( i , 0 ) ;
12806: LD_VAR 0 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 234
// end ;
12818: GO 12803
12820: POP
12821: POP
// end ;
12822: PPOPN 2
12824: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12825: LD_EXP 19
12829: PUSH
12830: LD_EXP 22
12834: AND
12835: IFFALSE 12928
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_INT 22
12851: PUSH
12852: LD_OWVAR 2
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 2
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 5
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 9
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 8
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PPUSH
12904: CALL_OW 69
12908: PUSH
12909: FOR_IN
12910: IFFALSE 12926
// begin SetClass ( i , 1 ) ;
12912: LD_VAR 0 1
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 336
// end ;
12924: GO 12909
12926: POP
12927: POP
// end ;
12928: PPOPN 1
12930: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12931: LD_EXP 19
12935: PUSH
12936: LD_EXP 23
12940: AND
12941: PUSH
12942: LD_OWVAR 65
12946: PUSH
12947: LD_INT 7
12949: LESS
12950: AND
12951: IFFALSE 12965
12953: GO 12955
12955: DISABLE
// begin enable ;
12956: ENABLE
// game_speed := 7 ;
12957: LD_ADDR_OWVAR 65
12961: PUSH
12962: LD_INT 7
12964: ST_TO_ADDR
// end ;
12965: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12966: LD_EXP 19
12970: PUSH
12971: LD_EXP 26
12975: AND
12976: IFFALSE 13178
12978: GO 12980
12980: DISABLE
12981: LD_INT 0
12983: PPUSH
12984: PPUSH
12985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 81
12993: PUSH
12994: LD_OWVAR 2
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: LD_INT 21
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PPUSH
13017: CALL_OW 69
13021: ST_TO_ADDR
// if not tmp then
13022: LD_VAR 0 3
13026: NOT
13027: IFFALSE 13031
// exit ;
13029: GO 13178
// if tmp > 5 then
13031: LD_VAR 0 3
13035: PUSH
13036: LD_INT 5
13038: GREATER
13039: IFFALSE 13051
// k := 5 else
13041: LD_ADDR_VAR 0 2
13045: PUSH
13046: LD_INT 5
13048: ST_TO_ADDR
13049: GO 13061
// k := tmp ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: LD_VAR 0 3
13060: ST_TO_ADDR
// for i := 1 to k do
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: DOUBLE
13067: LD_INT 1
13069: DEC
13070: ST_TO_ADDR
13071: LD_VAR 0 2
13075: PUSH
13076: FOR_TO
13077: IFFALSE 13176
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_VAR 0 1
13088: ARRAY
13089: PPUSH
13090: LD_VAR 0 1
13094: PUSH
13095: LD_INT 4
13097: MOD
13098: PUSH
13099: LD_INT 1
13101: PLUS
13102: PPUSH
13103: CALL_OW 259
13107: PUSH
13108: LD_INT 10
13110: LESS
13111: IFFALSE 13174
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13113: LD_VAR 0 3
13117: PUSH
13118: LD_VAR 0 1
13122: ARRAY
13123: PPUSH
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 4
13131: MOD
13132: PUSH
13133: LD_INT 1
13135: PLUS
13136: PPUSH
13137: LD_VAR 0 3
13141: PUSH
13142: LD_VAR 0 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 4
13155: MOD
13156: PUSH
13157: LD_INT 1
13159: PLUS
13160: PPUSH
13161: CALL_OW 259
13165: PUSH
13166: LD_INT 1
13168: PLUS
13169: PPUSH
13170: CALL_OW 237
13174: GO 13076
13176: POP
13177: POP
// end ;
13178: PPOPN 3
13180: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13181: LD_EXP 19
13185: PUSH
13186: LD_EXP 27
13190: AND
13191: IFFALSE 13211
13193: GO 13195
13195: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13196: LD_INT 4
13198: PPUSH
13199: LD_OWVAR 2
13203: PPUSH
13204: LD_INT 0
13206: PPUSH
13207: CALL_OW 324
13211: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13212: LD_EXP 19
13216: PUSH
13217: LD_EXP 56
13221: AND
13222: IFFALSE 13242
13224: GO 13226
13226: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13227: LD_INT 19
13229: PPUSH
13230: LD_OWVAR 2
13234: PPUSH
13235: LD_INT 0
13237: PPUSH
13238: CALL_OW 324
13242: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13243: LD_EXP 19
13247: PUSH
13248: LD_EXP 28
13252: AND
13253: IFFALSE 13355
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
// begin enable ;
13262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_OWVAR 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 2
13282: PUSH
13283: LD_INT 34
13285: PUSH
13286: LD_INT 11
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 34
13295: PUSH
13296: LD_INT 30
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PPUSH
13312: CALL_OW 69
13316: ST_TO_ADDR
// if not tmp then
13317: LD_VAR 0 2
13321: NOT
13322: IFFALSE 13326
// exit ;
13324: GO 13355
// for i in tmp do
13326: LD_ADDR_VAR 0 1
13330: PUSH
13331: LD_VAR 0 2
13335: PUSH
13336: FOR_IN
13337: IFFALSE 13353
// begin SetLives ( i , 0 ) ;
13339: LD_VAR 0 1
13343: PPUSH
13344: LD_INT 0
13346: PPUSH
13347: CALL_OW 234
// end ;
13351: GO 13336
13353: POP
13354: POP
// end ;
13355: PPOPN 2
13357: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13358: LD_EXP 19
13362: PUSH
13363: LD_EXP 29
13367: AND
13368: IFFALSE 13388
13370: GO 13372
13372: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13373: LD_INT 32
13375: PPUSH
13376: LD_OWVAR 2
13380: PPUSH
13381: LD_INT 0
13383: PPUSH
13384: CALL_OW 324
13388: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13389: LD_EXP 19
13393: PUSH
13394: LD_EXP 30
13398: AND
13399: IFFALSE 13580
13401: GO 13403
13403: DISABLE
13404: LD_INT 0
13406: PPUSH
13407: PPUSH
13408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_OWVAR 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 33
13428: PUSH
13429: LD_INT 3
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: ST_TO_ADDR
// if not tmp then
13445: LD_VAR 0 2
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13580
// side := 0 ;
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
// for i := 1 to 8 do
13462: LD_ADDR_VAR 0 1
13466: PUSH
13467: DOUBLE
13468: LD_INT 1
13470: DEC
13471: ST_TO_ADDR
13472: LD_INT 8
13474: PUSH
13475: FOR_TO
13476: IFFALSE 13524
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13478: LD_OWVAR 2
13482: PUSH
13483: LD_VAR 0 1
13487: NONEQUAL
13488: PUSH
13489: LD_OWVAR 2
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 81
13503: PUSH
13504: LD_INT 2
13506: EQUAL
13507: AND
13508: IFFALSE 13522
// begin side := i ;
13510: LD_ADDR_VAR 0 3
13514: PUSH
13515: LD_VAR 0 1
13519: ST_TO_ADDR
// break ;
13520: GO 13524
// end ;
13522: GO 13475
13524: POP
13525: POP
// if not side then
13526: LD_VAR 0 3
13530: NOT
13531: IFFALSE 13535
// exit ;
13533: GO 13580
// for i := 1 to tmp do
13535: LD_ADDR_VAR 0 1
13539: PUSH
13540: DOUBLE
13541: LD_INT 1
13543: DEC
13544: ST_TO_ADDR
13545: LD_VAR 0 2
13549: PUSH
13550: FOR_TO
13551: IFFALSE 13578
// if Prob ( 60 ) then
13553: LD_INT 60
13555: PPUSH
13556: CALL_OW 13
13560: IFFALSE 13576
// SetSide ( i , side ) ;
13562: LD_VAR 0 1
13566: PPUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: CALL_OW 235
13576: GO 13550
13578: POP
13579: POP
// end ;
13580: PPOPN 3
13582: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13583: LD_EXP 19
13587: PUSH
13588: LD_EXP 32
13592: AND
13593: IFFALSE 13712
13595: GO 13597
13597: DISABLE
13598: LD_INT 0
13600: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_INT 22
13608: PUSH
13609: LD_OWVAR 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 21
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 3
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 0
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: PPUSH
13650: CALL_OW 69
13654: PUSH
13655: FOR_IN
13656: IFFALSE 13710
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 257
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: LD_INT 4
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: IN
13686: IFFALSE 13708
// SetClass ( un , rand ( 1 , 4 ) ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_INT 4
13698: PPUSH
13699: CALL_OW 12
13703: PPUSH
13704: CALL_OW 336
13708: GO 13655
13710: POP
13711: POP
// end ;
13712: PPOPN 1
13714: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13715: LD_EXP 19
13719: PUSH
13720: LD_EXP 31
13724: AND
13725: IFFALSE 13804
13727: GO 13729
13729: DISABLE
13730: LD_INT 0
13732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_OWVAR 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 3
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: ST_TO_ADDR
// if not tmp then
13769: LD_VAR 0 1
13773: NOT
13774: IFFALSE 13778
// exit ;
13776: GO 13804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13778: LD_VAR 0 1
13782: PUSH
13783: LD_INT 1
13785: PPUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 12
13795: ARRAY
13796: PPUSH
13797: LD_INT 100
13799: PPUSH
13800: CALL_OW 234
// end ;
13804: PPOPN 1
13806: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13807: LD_EXP 19
13811: PUSH
13812: LD_EXP 33
13816: AND
13817: IFFALSE 13915
13819: GO 13821
13821: DISABLE
13822: LD_INT 0
13824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13825: LD_ADDR_VAR 0 1
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_OWVAR 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 69
13860: ST_TO_ADDR
// if not tmp then
13861: LD_VAR 0 1
13865: NOT
13866: IFFALSE 13870
// exit ;
13868: GO 13915
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13870: LD_VAR 0 1
13874: PUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_VAR 0 1
13882: PPUSH
13883: CALL_OW 12
13887: ARRAY
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_INT 4
13894: PPUSH
13895: CALL_OW 12
13899: PPUSH
13900: LD_INT 3000
13902: PPUSH
13903: LD_INT 9000
13905: PPUSH
13906: CALL_OW 12
13910: PPUSH
13911: CALL_OW 492
// end ;
13915: PPOPN 1
13917: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13918: LD_EXP 19
13922: PUSH
13923: LD_EXP 34
13927: AND
13928: IFFALSE 13948
13930: GO 13932
13932: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13933: LD_INT 1
13935: PPUSH
13936: LD_OWVAR 2
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 324
13948: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13949: LD_EXP 19
13953: PUSH
13954: LD_EXP 35
13958: AND
13959: IFFALSE 14042
13961: GO 13963
13963: DISABLE
13964: LD_INT 0
13966: PPUSH
13967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13968: LD_ADDR_VAR 0 2
13972: PUSH
13973: LD_INT 22
13975: PUSH
13976: LD_OWVAR 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PPUSH
13999: CALL_OW 69
14003: ST_TO_ADDR
// if not tmp then
14004: LD_VAR 0 2
14008: NOT
14009: IFFALSE 14013
// exit ;
14011: GO 14042
// for i in tmp do
14013: LD_ADDR_VAR 0 1
14017: PUSH
14018: LD_VAR 0 2
14022: PUSH
14023: FOR_IN
14024: IFFALSE 14040
// SetBLevel ( i , 10 ) ;
14026: LD_VAR 0 1
14030: PPUSH
14031: LD_INT 10
14033: PPUSH
14034: CALL_OW 241
14038: GO 14023
14040: POP
14041: POP
// end ;
14042: PPOPN 2
14044: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14045: LD_EXP 19
14049: PUSH
14050: LD_EXP 36
14054: AND
14055: IFFALSE 14166
14057: GO 14059
14059: DISABLE
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_OWVAR 2
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 1
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PPUSH
14096: CALL_OW 69
14100: ST_TO_ADDR
// if not tmp then
14101: LD_VAR 0 3
14105: NOT
14106: IFFALSE 14110
// exit ;
14108: GO 14166
// un := tmp [ rand ( 1 , tmp ) ] ;
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: LD_VAR 0 3
14119: PUSH
14120: LD_INT 1
14122: PPUSH
14123: LD_VAR 0 3
14127: PPUSH
14128: CALL_OW 12
14132: ARRAY
14133: ST_TO_ADDR
// if Crawls ( un ) then
14134: LD_VAR 0 2
14138: PPUSH
14139: CALL_OW 318
14143: IFFALSE 14154
// ComWalk ( un ) ;
14145: LD_VAR 0 2
14149: PPUSH
14150: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_INT 5
14161: PPUSH
14162: CALL_OW 336
// end ;
14166: PPOPN 3
14168: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14169: LD_EXP 19
14173: PUSH
14174: LD_EXP 37
14178: AND
14179: PUSH
14180: LD_OWVAR 67
14184: PUSH
14185: LD_INT 3
14187: LESS
14188: AND
14189: IFFALSE 14208
14191: GO 14193
14193: DISABLE
// Difficulty := Difficulty + 1 ;
14194: LD_ADDR_OWVAR 67
14198: PUSH
14199: LD_OWVAR 67
14203: PUSH
14204: LD_INT 1
14206: PLUS
14207: ST_TO_ADDR
14208: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14209: LD_EXP 19
14213: PUSH
14214: LD_EXP 38
14218: AND
14219: IFFALSE 14322
14221: GO 14223
14223: DISABLE
14224: LD_INT 0
14226: PPUSH
// begin for i := 1 to 5 do
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: DOUBLE
14233: LD_INT 1
14235: DEC
14236: ST_TO_ADDR
14237: LD_INT 5
14239: PUSH
14240: FOR_TO
14241: IFFALSE 14320
// begin uc_nation := nation_nature ;
14243: LD_ADDR_OWVAR 21
14247: PUSH
14248: LD_INT 0
14250: ST_TO_ADDR
// uc_side := 0 ;
14251: LD_ADDR_OWVAR 20
14255: PUSH
14256: LD_INT 0
14258: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14259: LD_ADDR_OWVAR 29
14263: PUSH
14264: LD_INT 12
14266: PUSH
14267: LD_INT 12
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: ST_TO_ADDR
// hc_agressivity := 20 ;
14274: LD_ADDR_OWVAR 35
14278: PUSH
14279: LD_INT 20
14281: ST_TO_ADDR
// hc_class := class_tiger ;
14282: LD_ADDR_OWVAR 28
14286: PUSH
14287: LD_INT 14
14289: ST_TO_ADDR
// hc_gallery :=  ;
14290: LD_ADDR_OWVAR 33
14294: PUSH
14295: LD_STRING 
14297: ST_TO_ADDR
// hc_name :=  ;
14298: LD_ADDR_OWVAR 26
14302: PUSH
14303: LD_STRING 
14305: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14306: CALL_OW 44
14310: PPUSH
14311: LD_INT 0
14313: PPUSH
14314: CALL_OW 51
// end ;
14318: GO 14240
14320: POP
14321: POP
// end ;
14322: PPOPN 1
14324: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14325: LD_EXP 19
14329: PUSH
14330: LD_EXP 39
14334: AND
14335: IFFALSE 14344
14337: GO 14339
14339: DISABLE
// StreamSibBomb ;
14340: CALL 14345 0 0
14344: END
// export function StreamSibBomb ; var i , x , y ; begin
14345: LD_INT 0
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
// result := false ;
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// for i := 1 to 16 do
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: DOUBLE
14365: LD_INT 1
14367: DEC
14368: ST_TO_ADDR
14369: LD_INT 16
14371: PUSH
14372: FOR_TO
14373: IFFALSE 14572
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 10
14382: PUSH
14383: LD_INT 20
14385: PUSH
14386: LD_INT 30
14388: PUSH
14389: LD_INT 40
14391: PUSH
14392: LD_INT 50
14394: PUSH
14395: LD_INT 60
14397: PUSH
14398: LD_INT 70
14400: PUSH
14401: LD_INT 80
14403: PUSH
14404: LD_INT 90
14406: PUSH
14407: LD_INT 100
14409: PUSH
14410: LD_INT 110
14412: PUSH
14413: LD_INT 120
14415: PUSH
14416: LD_INT 130
14418: PUSH
14419: LD_INT 140
14421: PUSH
14422: LD_INT 150
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 1
14444: PPUSH
14445: LD_INT 15
14447: PPUSH
14448: CALL_OW 12
14452: ARRAY
14453: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14454: LD_ADDR_VAR 0 4
14458: PUSH
14459: LD_INT 10
14461: PUSH
14462: LD_INT 20
14464: PUSH
14465: LD_INT 30
14467: PUSH
14468: LD_INT 40
14470: PUSH
14471: LD_INT 50
14473: PUSH
14474: LD_INT 60
14476: PUSH
14477: LD_INT 70
14479: PUSH
14480: LD_INT 80
14482: PUSH
14483: LD_INT 90
14485: PUSH
14486: LD_INT 100
14488: PUSH
14489: LD_INT 110
14491: PUSH
14492: LD_INT 120
14494: PUSH
14495: LD_INT 130
14497: PUSH
14498: LD_INT 140
14500: PUSH
14501: LD_INT 150
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 1
14523: PPUSH
14524: LD_INT 15
14526: PPUSH
14527: CALL_OW 12
14531: ARRAY
14532: ST_TO_ADDR
// if ValidHex ( x , y ) then
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_VAR 0 4
14542: PPUSH
14543: CALL_OW 488
14547: IFFALSE 14570
// begin result := [ x , y ] ;
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: LD_VAR 0 3
14558: PUSH
14559: LD_VAR 0 4
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: ST_TO_ADDR
// break ;
14568: GO 14572
// end ; end ;
14570: GO 14372
14572: POP
14573: POP
// if result then
14574: LD_VAR 0 1
14578: IFFALSE 14638
// begin ToLua ( playSibBomb() ) ;
14580: LD_STRING playSibBomb()
14582: PPUSH
14583: CALL_OW 559
// wait ( 0 0$14 ) ;
14587: LD_INT 490
14589: PPUSH
14590: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PPUSH
14603: LD_VAR 0 1
14607: PUSH
14608: LD_INT 2
14610: ARRAY
14611: PPUSH
14612: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: LD_VAR 0 1
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: CALL_OW 429
// end ; end ;
14638: LD_VAR 0 1
14642: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14643: LD_EXP 19
14647: PUSH
14648: LD_EXP 41
14652: AND
14653: IFFALSE 14665
14655: GO 14657
14657: DISABLE
// YouLost (  ) ;
14658: LD_STRING 
14660: PPUSH
14661: CALL_OW 104
14665: END
// every 0 0$1 trigger StreamModeActive and sFog do
14666: LD_EXP 19
14670: PUSH
14671: LD_EXP 40
14675: AND
14676: IFFALSE 14690
14678: GO 14680
14680: DISABLE
// FogOff ( your_side ) ;
14681: LD_OWVAR 2
14685: PPUSH
14686: CALL_OW 344
14690: END
// every 0 0$1 trigger StreamModeActive and sSun do
14691: LD_EXP 19
14695: PUSH
14696: LD_EXP 42
14700: AND
14701: IFFALSE 14729
14703: GO 14705
14705: DISABLE
// begin solar_recharge_percent := 0 ;
14706: LD_ADDR_OWVAR 79
14710: PUSH
14711: LD_INT 0
14713: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14714: LD_INT 10500
14716: PPUSH
14717: CALL_OW 67
// solar_recharge_percent := 100 ;
14721: LD_ADDR_OWVAR 79
14725: PUSH
14726: LD_INT 100
14728: ST_TO_ADDR
// end ;
14729: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14730: LD_EXP 19
14734: PUSH
14735: LD_EXP 43
14739: AND
14740: IFFALSE 14979
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// begin tmp := [ ] ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: EMPTY
14756: ST_TO_ADDR
// for i := 1 to 6 do
14757: LD_ADDR_VAR 0 1
14761: PUSH
14762: DOUBLE
14763: LD_INT 1
14765: DEC
14766: ST_TO_ADDR
14767: LD_INT 6
14769: PUSH
14770: FOR_TO
14771: IFFALSE 14876
// begin uc_nation := nation_nature ;
14773: LD_ADDR_OWVAR 21
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// uc_side := 0 ;
14781: LD_ADDR_OWVAR 20
14785: PUSH
14786: LD_INT 0
14788: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14789: LD_ADDR_OWVAR 29
14793: PUSH
14794: LD_INT 12
14796: PUSH
14797: LD_INT 12
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: ST_TO_ADDR
// hc_agressivity := 20 ;
14804: LD_ADDR_OWVAR 35
14808: PUSH
14809: LD_INT 20
14811: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14812: LD_ADDR_OWVAR 28
14816: PUSH
14817: LD_INT 17
14819: ST_TO_ADDR
// hc_gallery :=  ;
14820: LD_ADDR_OWVAR 33
14824: PUSH
14825: LD_STRING 
14827: ST_TO_ADDR
// hc_name :=  ;
14828: LD_ADDR_OWVAR 26
14832: PUSH
14833: LD_STRING 
14835: ST_TO_ADDR
// un := CreateHuman ;
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: CALL_OW 44
14845: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14846: LD_VAR 0 2
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 51
// tmp := tmp ^ un ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_VAR 0 3
14867: PUSH
14868: LD_VAR 0 2
14872: ADD
14873: ST_TO_ADDR
// end ;
14874: GO 14770
14876: POP
14877: POP
// repeat wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// for un in tmp do
14885: LD_ADDR_VAR 0 2
14889: PUSH
14890: LD_VAR 0 3
14894: PUSH
14895: FOR_IN
14896: IFFALSE 14970
// begin if IsDead ( un ) then
14898: LD_VAR 0 2
14902: PPUSH
14903: CALL_OW 301
14907: IFFALSE 14927
// begin tmp := tmp diff un ;
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_VAR 0 3
14918: PUSH
14919: LD_VAR 0 2
14923: DIFF
14924: ST_TO_ADDR
// continue ;
14925: GO 14895
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: LD_INT 3
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: LD_INT 0
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: PPUSH
14954: LD_VAR 0 2
14958: PPUSH
14959: CALL_OW 74
14963: PPUSH
14964: CALL_OW 115
// end ;
14968: GO 14895
14970: POP
14971: POP
// until not tmp ;
14972: LD_VAR 0 3
14976: NOT
14977: IFFALSE 14878
// end ;
14979: PPOPN 3
14981: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14982: LD_EXP 19
14986: PUSH
14987: LD_EXP 44
14991: AND
14992: IFFALSE 15046
14994: GO 14996
14996: DISABLE
// begin ToLua ( displayTroll(); ) ;
14997: LD_STRING displayTroll();
14999: PPUSH
15000: CALL_OW 559
// wait ( 3 3$00 ) ;
15004: LD_INT 6300
15006: PPUSH
15007: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15011: LD_STRING hideTroll();
15013: PPUSH
15014: CALL_OW 559
// wait ( 1 1$00 ) ;
15018: LD_INT 2100
15020: PPUSH
15021: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15025: LD_STRING displayTroll();
15027: PPUSH
15028: CALL_OW 559
// wait ( 1 1$00 ) ;
15032: LD_INT 2100
15034: PPUSH
15035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15039: LD_STRING hideTroll();
15041: PPUSH
15042: CALL_OW 559
// end ;
15046: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15047: LD_EXP 19
15051: PUSH
15052: LD_EXP 45
15056: AND
15057: IFFALSE 15120
15059: GO 15061
15061: DISABLE
15062: LD_INT 0
15064: PPUSH
// begin p := 0 ;
15065: LD_ADDR_VAR 0 1
15069: PUSH
15070: LD_INT 0
15072: ST_TO_ADDR
// repeat game_speed := 1 ;
15073: LD_ADDR_OWVAR 65
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15081: LD_INT 35
15083: PPUSH
15084: CALL_OW 67
// p := p + 1 ;
15088: LD_ADDR_VAR 0 1
15092: PUSH
15093: LD_VAR 0 1
15097: PUSH
15098: LD_INT 1
15100: PLUS
15101: ST_TO_ADDR
// until p >= 60 ;
15102: LD_VAR 0 1
15106: PUSH
15107: LD_INT 60
15109: GREATEREQUAL
15110: IFFALSE 15073
// game_speed := 4 ;
15112: LD_ADDR_OWVAR 65
15116: PUSH
15117: LD_INT 4
15119: ST_TO_ADDR
// end ;
15120: PPOPN 1
15122: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15123: LD_EXP 19
15127: PUSH
15128: LD_EXP 46
15132: AND
15133: IFFALSE 15279
15135: GO 15137
15137: DISABLE
15138: LD_INT 0
15140: PPUSH
15141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15142: LD_ADDR_VAR 0 1
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_OWVAR 2
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 2
15161: PUSH
15162: LD_INT 30
15164: PUSH
15165: LD_INT 0
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 69
15195: ST_TO_ADDR
// if not depot then
15196: LD_VAR 0 1
15200: NOT
15201: IFFALSE 15205
// exit ;
15203: GO 15279
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15205: LD_ADDR_VAR 0 2
15209: PUSH
15210: LD_VAR 0 1
15214: PUSH
15215: LD_INT 1
15217: PPUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 12
15227: ARRAY
15228: PPUSH
15229: CALL_OW 274
15233: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15234: LD_VAR 0 2
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: LD_INT 0
15244: PPUSH
15245: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15249: LD_VAR 0 2
15253: PPUSH
15254: LD_INT 2
15256: PPUSH
15257: LD_INT 0
15259: PPUSH
15260: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15264: LD_VAR 0 2
15268: PPUSH
15269: LD_INT 3
15271: PPUSH
15272: LD_INT 0
15274: PPUSH
15275: CALL_OW 277
// end ;
15279: PPOPN 2
15281: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15282: LD_EXP 19
15286: PUSH
15287: LD_EXP 47
15291: AND
15292: IFFALSE 15389
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: LD_INT 22
15307: PUSH
15308: LD_OWVAR 2
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 3
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: PPUSH
15349: CALL_OW 69
15353: ST_TO_ADDR
// if not tmp then
15354: LD_VAR 0 1
15358: NOT
15359: IFFALSE 15363
// exit ;
15361: GO 15389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15363: LD_VAR 0 1
15367: PUSH
15368: LD_INT 1
15370: PPUSH
15371: LD_VAR 0 1
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: LD_INT 200
15384: PPUSH
15385: CALL_OW 234
// end ;
15389: PPOPN 1
15391: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15392: LD_EXP 19
15396: PUSH
15397: LD_EXP 48
15401: AND
15402: IFFALSE 15481
15404: GO 15406
15406: DISABLE
15407: LD_INT 0
15409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15410: LD_ADDR_VAR 0 1
15414: PUSH
15415: LD_INT 22
15417: PUSH
15418: LD_OWVAR 2
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 21
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: ST_TO_ADDR
// if not tmp then
15446: LD_VAR 0 1
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 1
15462: PPUSH
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 12
15472: ARRAY
15473: PPUSH
15474: LD_INT 60
15476: PPUSH
15477: CALL_OW 234
// end ;
15481: PPOPN 1
15483: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15484: LD_EXP 19
15488: PUSH
15489: LD_EXP 49
15493: AND
15494: IFFALSE 15593
15496: GO 15498
15498: DISABLE
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
// begin enable ;
15503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15504: LD_ADDR_VAR 0 1
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 61
15523: PUSH
15524: EMPTY
15525: LIST
15526: PUSH
15527: LD_INT 33
15529: PUSH
15530: LD_INT 2
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 69
15546: ST_TO_ADDR
// if not tmp then
15547: LD_VAR 0 1
15551: NOT
15552: IFFALSE 15556
// exit ;
15554: GO 15593
// for i in tmp do
15556: LD_ADDR_VAR 0 2
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15591
// if IsControledBy ( i ) then
15569: LD_VAR 0 2
15573: PPUSH
15574: CALL_OW 312
15578: IFFALSE 15589
// ComUnlink ( i ) ;
15580: LD_VAR 0 2
15584: PPUSH
15585: CALL_OW 136
15589: GO 15566
15591: POP
15592: POP
// end ;
15593: PPOPN 2
15595: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15596: LD_EXP 19
15600: PUSH
15601: LD_EXP 50
15605: AND
15606: IFFALSE 15746
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
// begin ToLua ( displayPowell(); ) ;
15615: LD_STRING displayPowell();
15617: PPUSH
15618: CALL_OW 559
// uc_side := 0 ;
15622: LD_ADDR_OWVAR 20
15626: PUSH
15627: LD_INT 0
15629: ST_TO_ADDR
// uc_nation := 2 ;
15630: LD_ADDR_OWVAR 21
15634: PUSH
15635: LD_INT 2
15637: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15638: LD_ADDR_OWVAR 37
15642: PUSH
15643: LD_INT 14
15645: ST_TO_ADDR
// vc_engine := engine_siberite ;
15646: LD_ADDR_OWVAR 39
15650: PUSH
15651: LD_INT 3
15653: ST_TO_ADDR
// vc_control := control_apeman ;
15654: LD_ADDR_OWVAR 38
15658: PUSH
15659: LD_INT 5
15661: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15662: LD_ADDR_OWVAR 40
15666: PUSH
15667: LD_INT 29
15669: ST_TO_ADDR
// un := CreateVehicle ;
15670: LD_ADDR_VAR 0 2
15674: PUSH
15675: CALL_OW 45
15679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_INT 1
15687: PPUSH
15688: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15692: LD_INT 35
15694: PPUSH
15695: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15699: LD_VAR 0 2
15703: PPUSH
15704: LD_INT 22
15706: PUSH
15707: LD_OWVAR 2
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: PPUSH
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL_OW 74
15730: PPUSH
15731: CALL_OW 115
// until IsDead ( un ) ;
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 301
15744: IFFALSE 15692
// end ;
15746: PPOPN 2
15748: END
// every 0 0$1 trigger StreamModeActive and sStu do
15749: LD_EXP 19
15753: PUSH
15754: LD_EXP 58
15758: AND
15759: IFFALSE 15775
15761: GO 15763
15763: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15764: LD_STRING displayStucuk();
15766: PPUSH
15767: CALL_OW 559
// ResetFog ;
15771: CALL_OW 335
// end ;
15775: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15776: LD_EXP 19
15780: PUSH
15781: LD_EXP 51
15785: AND
15786: IFFALSE 15927
15788: GO 15790
15790: DISABLE
15791: LD_INT 0
15793: PPUSH
15794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15795: LD_ADDR_VAR 0 2
15799: PUSH
15800: LD_INT 22
15802: PUSH
15803: LD_OWVAR 2
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 21
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PPUSH
15826: CALL_OW 69
15830: ST_TO_ADDR
// if not tmp then
15831: LD_VAR 0 2
15835: NOT
15836: IFFALSE 15840
// exit ;
15838: GO 15927
// un := tmp [ rand ( 1 , tmp ) ] ;
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: LD_VAR 0 2
15849: PUSH
15850: LD_INT 1
15852: PPUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 12
15862: ARRAY
15863: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15864: LD_VAR 0 1
15868: PPUSH
15869: LD_INT 0
15871: PPUSH
15872: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_OWVAR 3
15885: PUSH
15886: LD_VAR 0 1
15890: DIFF
15891: PPUSH
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 74
15901: PPUSH
15902: CALL_OW 115
// wait ( 0 0$20 ) ;
15906: LD_INT 700
15908: PPUSH
15909: CALL_OW 67
// SetSide ( un , your_side ) ;
15913: LD_VAR 0 1
15917: PPUSH
15918: LD_OWVAR 2
15922: PPUSH
15923: CALL_OW 235
// end ;
15927: PPOPN 2
15929: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15930: LD_EXP 19
15934: PUSH
15935: LD_EXP 52
15939: AND
15940: IFFALSE 16046
15942: GO 15944
15944: DISABLE
15945: LD_INT 0
15947: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15948: LD_ADDR_VAR 0 1
15952: PUSH
15953: LD_INT 22
15955: PUSH
15956: LD_OWVAR 2
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 30
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 30
15980: PUSH
15981: LD_INT 1
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if not depot then
16002: LD_VAR 0 1
16006: NOT
16007: IFFALSE 16011
// exit ;
16009: GO 16046
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16011: LD_VAR 0 1
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: CALL_OW 250
16024: PPUSH
16025: LD_VAR 0 1
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 251
16038: PPUSH
16039: LD_INT 70
16041: PPUSH
16042: CALL_OW 495
// end ;
16046: PPOPN 1
16048: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16049: LD_EXP 19
16053: PUSH
16054: LD_EXP 53
16058: AND
16059: IFFALSE 16270
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16071: LD_ADDR_VAR 0 5
16075: PUSH
16076: LD_INT 22
16078: PUSH
16079: LD_OWVAR 2
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 69
16106: ST_TO_ADDR
// if not tmp then
16107: LD_VAR 0 5
16111: NOT
16112: IFFALSE 16116
// exit ;
16114: GO 16270
// for i in tmp do
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_VAR 0 5
16125: PUSH
16126: FOR_IN
16127: IFFALSE 16268
// begin d := rand ( 0 , 5 ) ;
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: LD_INT 0
16136: PPUSH
16137: LD_INT 5
16139: PPUSH
16140: CALL_OW 12
16144: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16145: LD_ADDR_VAR 0 2
16149: PUSH
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL_OW 250
16159: PPUSH
16160: LD_VAR 0 4
16164: PPUSH
16165: LD_INT 3
16167: PPUSH
16168: LD_INT 12
16170: PPUSH
16171: CALL_OW 12
16175: PPUSH
16176: CALL_OW 272
16180: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 251
16195: PPUSH
16196: LD_VAR 0 4
16200: PPUSH
16201: LD_INT 3
16203: PPUSH
16204: LD_INT 12
16206: PPUSH
16207: CALL_OW 12
16211: PPUSH
16212: CALL_OW 273
16216: ST_TO_ADDR
// if ValidHex ( x , y ) then
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_VAR 0 3
16226: PPUSH
16227: CALL_OW 488
16231: IFFALSE 16266
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16233: LD_VAR 0 1
16237: PPUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 3
16250: PPUSH
16251: LD_INT 6
16253: PPUSH
16254: CALL_OW 12
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 483
// end ;
16266: GO 16126
16268: POP
16269: POP
// end ;
16270: PPOPN 5
16272: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16273: LD_EXP 19
16277: PUSH
16278: LD_EXP 54
16282: AND
16283: IFFALSE 16377
16285: GO 16287
16287: DISABLE
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_INT 22
16299: PUSH
16300: LD_OWVAR 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 32
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 21
16321: PUSH
16322: LD_INT 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: PPUSH
16334: CALL_OW 69
16338: ST_TO_ADDR
// if not tmp then
16339: LD_VAR 0 2
16343: NOT
16344: IFFALSE 16348
// exit ;
16346: GO 16377
// for i in tmp do
16348: LD_ADDR_VAR 0 1
16352: PUSH
16353: LD_VAR 0 2
16357: PUSH
16358: FOR_IN
16359: IFFALSE 16375
// SetFuel ( i , 0 ) ;
16361: LD_VAR 0 1
16365: PPUSH
16366: LD_INT 0
16368: PPUSH
16369: CALL_OW 240
16373: GO 16358
16375: POP
16376: POP
// end ;
16377: PPOPN 2
16379: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16380: LD_EXP 19
16384: PUSH
16385: LD_EXP 55
16389: AND
16390: IFFALSE 16456
16392: GO 16394
16394: DISABLE
16395: LD_INT 0
16397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: LD_INT 22
16405: PUSH
16406: LD_OWVAR 2
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: LD_INT 29
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PPUSH
16429: CALL_OW 69
16433: ST_TO_ADDR
// if not tmp then
16434: LD_VAR 0 1
16438: NOT
16439: IFFALSE 16443
// exit ;
16441: GO 16456
// DestroyUnit ( tmp [ 1 ] ) ;
16443: LD_VAR 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: CALL_OW 65
// end ;
16456: PPOPN 1
16458: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16459: LD_EXP 19
16463: PUSH
16464: LD_EXP 57
16468: AND
16469: IFFALSE 16598
16471: GO 16473
16473: DISABLE
16474: LD_INT 0
16476: PPUSH
// begin uc_side := 0 ;
16477: LD_ADDR_OWVAR 20
16481: PUSH
16482: LD_INT 0
16484: ST_TO_ADDR
// uc_nation := nation_arabian ;
16485: LD_ADDR_OWVAR 21
16489: PUSH
16490: LD_INT 2
16492: ST_TO_ADDR
// hc_gallery :=  ;
16493: LD_ADDR_OWVAR 33
16497: PUSH
16498: LD_STRING 
16500: ST_TO_ADDR
// hc_name :=  ;
16501: LD_ADDR_OWVAR 26
16505: PUSH
16506: LD_STRING 
16508: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16509: LD_INT 1
16511: PPUSH
16512: LD_INT 11
16514: PPUSH
16515: LD_INT 10
16517: PPUSH
16518: CALL_OW 380
// un := CreateHuman ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: CALL_OW 44
16531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16544: LD_INT 35
16546: PPUSH
16547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16551: LD_VAR 0 1
16555: PPUSH
16556: LD_INT 22
16558: PUSH
16559: LD_OWVAR 2
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PPUSH
16568: CALL_OW 69
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 74
16582: PPUSH
16583: CALL_OW 115
// until IsDead ( un ) ;
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 301
16596: IFFALSE 16544
// end ;
16598: PPOPN 1
16600: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16601: LD_EXP 19
16605: PUSH
16606: LD_EXP 59
16610: AND
16611: IFFALSE 16623
16613: GO 16615
16615: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16616: LD_STRING earthquake(getX(game), 0, 32)
16618: PPUSH
16619: CALL_OW 559
16623: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16624: LD_EXP 19
16628: PUSH
16629: LD_EXP 60
16633: AND
16634: IFFALSE 16725
16636: GO 16638
16638: DISABLE
16639: LD_INT 0
16641: PPUSH
// begin enable ;
16642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16643: LD_ADDR_VAR 0 1
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_OWVAR 2
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 21
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 33
16672: PUSH
16673: LD_INT 3
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: PPUSH
16685: CALL_OW 69
16689: ST_TO_ADDR
// if not tmp then
16690: LD_VAR 0 1
16694: NOT
16695: IFFALSE 16699
// exit ;
16697: GO 16725
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16699: LD_VAR 0 1
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 1
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: LD_INT 1
16720: PPUSH
16721: CALL_OW 234
// end ;
16725: PPOPN 1
16727: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16728: LD_EXP 19
16732: PUSH
16733: LD_EXP 61
16737: AND
16738: IFFALSE 16879
16740: GO 16742
16742: DISABLE
16743: LD_INT 0
16745: PPUSH
16746: PPUSH
16747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_INT 22
16755: PUSH
16756: LD_OWVAR 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 25
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 69
16783: ST_TO_ADDR
// if not tmp then
16784: LD_VAR 0 3
16788: NOT
16789: IFFALSE 16793
// exit ;
16791: GO 16879
// un := tmp [ rand ( 1 , tmp ) ] ;
16793: LD_ADDR_VAR 0 2
16797: PUSH
16798: LD_VAR 0 3
16802: PUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_VAR 0 3
16810: PPUSH
16811: CALL_OW 12
16815: ARRAY
16816: ST_TO_ADDR
// if Crawls ( un ) then
16817: LD_VAR 0 2
16821: PPUSH
16822: CALL_OW 318
16826: IFFALSE 16837
// ComWalk ( un ) ;
16828: LD_VAR 0 2
16832: PPUSH
16833: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16837: LD_VAR 0 2
16841: PPUSH
16842: LD_INT 9
16844: PPUSH
16845: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16849: LD_INT 28
16851: PPUSH
16852: LD_OWVAR 2
16856: PPUSH
16857: LD_INT 2
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16864: LD_INT 29
16866: PPUSH
16867: LD_OWVAR 2
16871: PPUSH
16872: LD_INT 2
16874: PPUSH
16875: CALL_OW 322
// end ;
16879: PPOPN 3
16881: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16882: LD_EXP 19
16886: PUSH
16887: LD_EXP 62
16891: AND
16892: IFFALSE 17003
16894: GO 16896
16896: DISABLE
16897: LD_INT 0
16899: PPUSH
16900: PPUSH
16901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16902: LD_ADDR_VAR 0 3
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_OWVAR 2
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 25
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PPUSH
16933: CALL_OW 69
16937: ST_TO_ADDR
// if not tmp then
16938: LD_VAR 0 3
16942: NOT
16943: IFFALSE 16947
// exit ;
16945: GO 17003
// un := tmp [ rand ( 1 , tmp ) ] ;
16947: LD_ADDR_VAR 0 2
16951: PUSH
16952: LD_VAR 0 3
16956: PUSH
16957: LD_INT 1
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: CALL_OW 12
16969: ARRAY
16970: ST_TO_ADDR
// if Crawls ( un ) then
16971: LD_VAR 0 2
16975: PPUSH
16976: CALL_OW 318
16980: IFFALSE 16991
// ComWalk ( un ) ;
16982: LD_VAR 0 2
16986: PPUSH
16987: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16991: LD_VAR 0 2
16995: PPUSH
16996: LD_INT 8
16998: PPUSH
16999: CALL_OW 336
// end ;
17003: PPOPN 3
17005: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17006: LD_EXP 19
17010: PUSH
17011: LD_EXP 63
17015: AND
17016: IFFALSE 17160
17018: GO 17020
17020: DISABLE
17021: LD_INT 0
17023: PPUSH
17024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17025: LD_ADDR_VAR 0 2
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_OWVAR 2
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 21
17044: PUSH
17045: LD_INT 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 2
17054: PUSH
17055: LD_INT 34
17057: PUSH
17058: LD_INT 12
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 34
17067: PUSH
17068: LD_INT 51
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 34
17077: PUSH
17078: LD_INT 32
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: PPUSH
17096: CALL_OW 69
17100: ST_TO_ADDR
// if not tmp then
17101: LD_VAR 0 2
17105: NOT
17106: IFFALSE 17110
// exit ;
17108: GO 17160
// for i in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17158
// if GetCargo ( i , mat_artifact ) = 0 then
17123: LD_VAR 0 1
17127: PPUSH
17128: LD_INT 4
17130: PPUSH
17131: CALL_OW 289
17135: PUSH
17136: LD_INT 0
17138: EQUAL
17139: IFFALSE 17156
// SetCargo ( i , mat_siberit , 100 ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_INT 3
17148: PPUSH
17149: LD_INT 100
17151: PPUSH
17152: CALL_OW 290
17156: GO 17120
17158: POP
17159: POP
// end ;
17160: PPOPN 2
17162: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17163: LD_EXP 19
17167: PUSH
17168: LD_EXP 64
17172: AND
17173: IFFALSE 17356
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
17181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17356
// for i := 1 to 2 do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: DOUBLE
17219: LD_INT 1
17221: DEC
17222: ST_TO_ADDR
17223: LD_INT 2
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17354
// begin uc_side := your_side ;
17229: LD_ADDR_OWVAR 20
17233: PUSH
17234: LD_OWVAR 2
17238: ST_TO_ADDR
// uc_nation := nation_american ;
17239: LD_ADDR_OWVAR 21
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// vc_chassis := us_morphling ;
17247: LD_ADDR_OWVAR 37
17251: PUSH
17252: LD_INT 5
17254: ST_TO_ADDR
// vc_engine := engine_siberite ;
17255: LD_ADDR_OWVAR 39
17259: PUSH
17260: LD_INT 3
17262: ST_TO_ADDR
// vc_control := control_computer ;
17263: LD_ADDR_OWVAR 38
17267: PUSH
17268: LD_INT 3
17270: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17271: LD_ADDR_OWVAR 40
17275: PUSH
17276: LD_INT 10
17278: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17279: LD_VAR 0 2
17283: PUSH
17284: LD_INT 1
17286: ARRAY
17287: PPUSH
17288: CALL_OW 310
17292: NOT
17293: IFFALSE 17340
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17295: CALL_OW 45
17299: PPUSH
17300: LD_VAR 0 2
17304: PUSH
17305: LD_INT 1
17307: ARRAY
17308: PPUSH
17309: CALL_OW 250
17313: PPUSH
17314: LD_VAR 0 2
17318: PUSH
17319: LD_INT 1
17321: ARRAY
17322: PPUSH
17323: CALL_OW 251
17327: PPUSH
17328: LD_INT 12
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 50
17338: GO 17352
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17340: CALL_OW 45
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 51
// end ;
17352: GO 17226
17354: POP
17355: POP
// end ;
17356: PPOPN 2
17358: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17359: LD_EXP 19
17363: PUSH
17364: LD_EXP 65
17368: AND
17369: IFFALSE 17591
17371: GO 17373
17373: DISABLE
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17382: LD_ADDR_VAR 0 6
17386: PUSH
17387: LD_INT 22
17389: PUSH
17390: LD_OWVAR 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 21
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 23
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: PPUSH
17431: CALL_OW 69
17435: ST_TO_ADDR
// if not tmp then
17436: LD_VAR 0 6
17440: NOT
17441: IFFALSE 17445
// exit ;
17443: GO 17591
// s1 := rand ( 1 , 4 ) ;
17445: LD_ADDR_VAR 0 2
17449: PUSH
17450: LD_INT 1
17452: PPUSH
17453: LD_INT 4
17455: PPUSH
17456: CALL_OW 12
17460: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17461: LD_ADDR_VAR 0 4
17465: PUSH
17466: LD_VAR 0 6
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PPUSH
17475: LD_VAR 0 2
17479: PPUSH
17480: CALL_OW 259
17484: ST_TO_ADDR
// if s1 = 1 then
17485: LD_VAR 0 2
17489: PUSH
17490: LD_INT 1
17492: EQUAL
17493: IFFALSE 17513
// s2 := rand ( 2 , 4 ) else
17495: LD_ADDR_VAR 0 3
17499: PUSH
17500: LD_INT 2
17502: PPUSH
17503: LD_INT 4
17505: PPUSH
17506: CALL_OW 12
17510: ST_TO_ADDR
17511: GO 17521
// s2 := 1 ;
17513: LD_ADDR_VAR 0 3
17517: PUSH
17518: LD_INT 1
17520: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17521: LD_ADDR_VAR 0 5
17525: PUSH
17526: LD_VAR 0 6
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: CALL_OW 259
17544: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17545: LD_VAR 0 6
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: LD_VAR 0 2
17558: PPUSH
17559: LD_VAR 0 5
17563: PPUSH
17564: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17568: LD_VAR 0 6
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: PPUSH
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_VAR 0 4
17586: PPUSH
17587: CALL_OW 237
// end ;
17591: PPOPN 6
17593: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17594: LD_EXP 19
17598: PUSH
17599: LD_EXP 66
17603: AND
17604: IFFALSE 17683
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_INT 22
17619: PUSH
17620: LD_OWVAR 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 30
17631: PUSH
17632: LD_INT 3
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: CALL_OW 69
17647: ST_TO_ADDR
// if not tmp then
17648: LD_VAR 0 1
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 17683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 12
17674: ARRAY
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 234
// end ;
17683: PPOPN 1
17685: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17686: LD_EXP 19
17690: PUSH
17691: LD_EXP 67
17695: AND
17696: IFFALSE 17808
17698: GO 17700
17700: DISABLE
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17705: LD_ADDR_VAR 0 2
17709: PUSH
17710: LD_INT 22
17712: PUSH
17713: LD_OWVAR 2
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 30
17727: PUSH
17728: LD_INT 27
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 30
17737: PUSH
17738: LD_INT 26
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 30
17747: PUSH
17748: LD_INT 28
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL_OW 69
17769: ST_TO_ADDR
// if not tmp then
17770: LD_VAR 0 2
17774: NOT
17775: IFFALSE 17779
// exit ;
17777: GO 17808
// for i in tmp do
17779: LD_ADDR_VAR 0 1
17783: PUSH
17784: LD_VAR 0 2
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17806
// SetLives ( i , 1 ) ;
17792: LD_VAR 0 1
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: CALL_OW 234
17804: GO 17789
17806: POP
17807: POP
// end ;
17808: PPOPN 2
17810: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17811: LD_EXP 19
17815: PUSH
17816: LD_EXP 68
17820: AND
17821: IFFALSE 18095
17823: GO 17825
17825: DISABLE
17826: LD_INT 0
17828: PPUSH
17829: PPUSH
17830: PPUSH
// begin i := rand ( 1 , 7 ) ;
17831: LD_ADDR_VAR 0 1
17835: PUSH
17836: LD_INT 1
17838: PPUSH
17839: LD_INT 7
17841: PPUSH
17842: CALL_OW 12
17846: ST_TO_ADDR
// case i of 1 :
17847: LD_VAR 0 1
17851: PUSH
17852: LD_INT 1
17854: DOUBLE
17855: EQUAL
17856: IFTRUE 17860
17858: GO 17870
17860: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17861: LD_STRING earthquake(getX(game), 0, 32)
17863: PPUSH
17864: CALL_OW 559
17868: GO 18095
17870: LD_INT 2
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17892
17878: POP
// begin ToLua ( displayStucuk(); ) ;
17879: LD_STRING displayStucuk();
17881: PPUSH
17882: CALL_OW 559
// ResetFog ;
17886: CALL_OW 335
// end ; 3 :
17890: GO 18095
17892: LD_INT 3
17894: DOUBLE
17895: EQUAL
17896: IFTRUE 17900
17898: GO 18004
17900: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17901: LD_ADDR_VAR 0 2
17905: PUSH
17906: LD_INT 22
17908: PUSH
17909: LD_OWVAR 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 25
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL_OW 69
17936: ST_TO_ADDR
// if not tmp then
17937: LD_VAR 0 2
17941: NOT
17942: IFFALSE 17946
// exit ;
17944: GO 18095
// un := tmp [ rand ( 1 , tmp ) ] ;
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: LD_VAR 0 2
17955: PUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_VAR 0 2
17963: PPUSH
17964: CALL_OW 12
17968: ARRAY
17969: ST_TO_ADDR
// if Crawls ( un ) then
17970: LD_VAR 0 3
17974: PPUSH
17975: CALL_OW 318
17979: IFFALSE 17990
// ComWalk ( un ) ;
17981: LD_VAR 0 3
17985: PPUSH
17986: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17990: LD_VAR 0 3
17994: PPUSH
17995: LD_INT 8
17997: PPUSH
17998: CALL_OW 336
// end ; 4 :
18002: GO 18095
18004: LD_INT 4
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18073
18012: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18013: LD_ADDR_VAR 0 2
18017: PUSH
18018: LD_INT 22
18020: PUSH
18021: LD_OWVAR 2
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 30
18032: PUSH
18033: LD_INT 29
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PPUSH
18044: CALL_OW 69
18048: ST_TO_ADDR
// if not tmp then
18049: LD_VAR 0 2
18053: NOT
18054: IFFALSE 18058
// exit ;
18056: GO 18095
// DestroyUnit ( tmp [ 1 ] ) ;
18058: LD_VAR 0 2
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: CALL_OW 65
// end ; 5 .. 7 :
18071: GO 18095
18073: LD_INT 5
18075: DOUBLE
18076: GREATEREQUAL
18077: IFFALSE 18085
18079: LD_INT 7
18081: DOUBLE
18082: LESSEQUAL
18083: IFTRUE 18087
18085: GO 18094
18087: POP
// StreamSibBomb ; end ;
18088: CALL 14345 0 0
18092: GO 18095
18094: POP
// end ;
18095: PPOPN 3
18097: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18098: LD_EXP 19
18102: PUSH
18103: LD_EXP 69
18107: AND
18108: IFFALSE 18264
18110: GO 18112
18112: DISABLE
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
18117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18118: LD_ADDR_VAR 0 2
18122: PUSH
18123: LD_INT 81
18125: PUSH
18126: LD_OWVAR 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: LD_INT 21
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 21
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 69
18171: ST_TO_ADDR
// if not tmp then
18172: LD_VAR 0 2
18176: NOT
18177: IFFALSE 18181
// exit ;
18179: GO 18264
// p := 0 ;
18181: LD_ADDR_VAR 0 3
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18189: LD_INT 35
18191: PPUSH
18192: CALL_OW 67
// p := p + 1 ;
18196: LD_ADDR_VAR 0 3
18200: PUSH
18201: LD_VAR 0 3
18205: PUSH
18206: LD_INT 1
18208: PLUS
18209: ST_TO_ADDR
// for i in tmp do
18210: LD_ADDR_VAR 0 1
18214: PUSH
18215: LD_VAR 0 2
18219: PUSH
18220: FOR_IN
18221: IFFALSE 18252
// if GetLives ( i ) < 1000 then
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 256
18232: PUSH
18233: LD_INT 1000
18235: LESS
18236: IFFALSE 18250
// SetLives ( i , 1000 ) ;
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_INT 1000
18245: PPUSH
18246: CALL_OW 234
18250: GO 18220
18252: POP
18253: POP
// until p > 20 ;
18254: LD_VAR 0 3
18258: PUSH
18259: LD_INT 20
18261: GREATER
18262: IFFALSE 18189
// end ;
18264: PPOPN 3
18266: END
// every 0 0$1 trigger StreamModeActive and sTime do
18267: LD_EXP 19
18271: PUSH
18272: LD_EXP 70
18276: AND
18277: IFFALSE 18312
18279: GO 18281
18281: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18282: LD_INT 28
18284: PPUSH
18285: LD_OWVAR 2
18289: PPUSH
18290: LD_INT 2
18292: PPUSH
18293: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18297: LD_INT 30
18299: PPUSH
18300: LD_OWVAR 2
18304: PPUSH
18305: LD_INT 2
18307: PPUSH
18308: CALL_OW 322
// end ;
18312: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18313: LD_EXP 19
18317: PUSH
18318: LD_EXP 71
18322: AND
18323: IFFALSE 18444
18325: GO 18327
18327: DISABLE
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 21
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 3
18361: PUSH
18362: LD_INT 23
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: ST_TO_ADDR
// if not tmp then
18386: LD_VAR 0 2
18390: NOT
18391: IFFALSE 18395
// exit ;
18393: GO 18444
// for i in tmp do
18395: LD_ADDR_VAR 0 1
18399: PUSH
18400: LD_VAR 0 2
18404: PUSH
18405: FOR_IN
18406: IFFALSE 18442
// begin if Crawls ( i ) then
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 318
18417: IFFALSE 18428
// ComWalk ( i ) ;
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 138
// SetClass ( i , 2 ) ;
18428: LD_VAR 0 1
18432: PPUSH
18433: LD_INT 2
18435: PPUSH
18436: CALL_OW 336
// end ;
18440: GO 18405
18442: POP
18443: POP
// end ;
18444: PPOPN 2
18446: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18447: LD_EXP 19
18451: PUSH
18452: LD_EXP 72
18456: AND
18457: IFFALSE 18738
18459: GO 18461
18461: DISABLE
18462: LD_INT 0
18464: PPUSH
18465: PPUSH
18466: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18467: LD_OWVAR 2
18471: PPUSH
18472: LD_INT 9
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18485: LD_INT 9
18487: PPUSH
18488: LD_OWVAR 2
18492: PPUSH
18493: CALL_OW 343
// uc_side := 9 ;
18497: LD_ADDR_OWVAR 20
18501: PUSH
18502: LD_INT 9
18504: ST_TO_ADDR
// uc_nation := 2 ;
18505: LD_ADDR_OWVAR 21
18509: PUSH
18510: LD_INT 2
18512: ST_TO_ADDR
// hc_name := Dark Warrior ;
18513: LD_ADDR_OWVAR 26
18517: PUSH
18518: LD_STRING Dark Warrior
18520: ST_TO_ADDR
// hc_gallery :=  ;
18521: LD_ADDR_OWVAR 33
18525: PUSH
18526: LD_STRING 
18528: ST_TO_ADDR
// hc_noskilllimit := true ;
18529: LD_ADDR_OWVAR 76
18533: PUSH
18534: LD_INT 1
18536: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18537: LD_ADDR_OWVAR 31
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: LD_INT 30
18550: PUSH
18551: LD_INT 30
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: ST_TO_ADDR
// un := CreateHuman ;
18560: LD_ADDR_VAR 0 3
18564: PUSH
18565: CALL_OW 44
18569: ST_TO_ADDR
// hc_noskilllimit := false ;
18570: LD_ADDR_OWVAR 76
18574: PUSH
18575: LD_INT 0
18577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18578: LD_VAR 0 3
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 51
// p := 0 ;
18590: LD_ADDR_VAR 0 2
18594: PUSH
18595: LD_INT 0
18597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18598: LD_INT 35
18600: PPUSH
18601: CALL_OW 67
// p := p + 1 ;
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_VAR 0 2
18614: PUSH
18615: LD_INT 1
18617: PLUS
18618: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18619: LD_VAR 0 3
18623: PPUSH
18624: CALL_OW 256
18628: PUSH
18629: LD_INT 1000
18631: LESS
18632: IFFALSE 18646
// SetLives ( un , 1000 ) ;
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1000
18641: PPUSH
18642: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18646: LD_VAR 0 3
18650: PPUSH
18651: LD_INT 81
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 91
18665: PUSH
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 30
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: PPUSH
18688: LD_VAR 0 3
18692: PPUSH
18693: CALL_OW 74
18697: PPUSH
18698: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18702: LD_VAR 0 2
18706: PUSH
18707: LD_INT 60
18709: GREATER
18710: PUSH
18711: LD_VAR 0 3
18715: PPUSH
18716: CALL_OW 301
18720: OR
18721: IFFALSE 18598
// if un then
18723: LD_VAR 0 3
18727: IFFALSE 18738
// RemoveUnit ( un ) ;
18729: LD_VAR 0 3
18733: PPUSH
18734: CALL_OW 64
// end ;
18738: PPOPN 3
18740: END
