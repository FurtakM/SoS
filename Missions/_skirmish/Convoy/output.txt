// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 100
7721: EQUAL
7722: IFFALSE 8671
// begin if not StreamModeActive then
7724: LD_EXP 19
7728: NOT
7729: IFFALSE 7739
// StreamModeActive := true ;
7731: LD_ADDR_EXP 19
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// if p3 = 0 then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 0
7746: EQUAL
7747: IFFALSE 7753
// InitStreamMode ;
7749: CALL 8829 0 0
// if p3 = 1 then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_INT 1
7760: EQUAL
7761: IFFALSE 7771
// sRocket := true ;
7763: LD_ADDR_EXP 24
7767: PUSH
7768: LD_INT 1
7770: ST_TO_ADDR
// if p3 = 2 then
7771: LD_VAR 0 3
7775: PUSH
7776: LD_INT 2
7778: EQUAL
7779: IFFALSE 7789
// sSpeed := true ;
7781: LD_ADDR_EXP 23
7785: PUSH
7786: LD_INT 1
7788: ST_TO_ADDR
// if p3 = 3 then
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 3
7796: EQUAL
7797: IFFALSE 7807
// sEngine := true ;
7799: LD_ADDR_EXP 25
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// if p3 = 4 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 4
7814: EQUAL
7815: IFFALSE 7825
// sSpec := true ;
7817: LD_ADDR_EXP 22
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 5 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 5
7832: EQUAL
7833: IFFALSE 7843
// sLevel := true ;
7835: LD_ADDR_EXP 26
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 6 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 6
7850: EQUAL
7851: IFFALSE 7861
// sArmoury := true ;
7853: LD_ADDR_EXP 27
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 7 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 7
7868: EQUAL
7869: IFFALSE 7879
// sRadar := true ;
7871: LD_ADDR_EXP 28
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 8 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 8
7886: EQUAL
7887: IFFALSE 7897
// sBunker := true ;
7889: LD_ADDR_EXP 29
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 9 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 9
7904: EQUAL
7905: IFFALSE 7915
// sHack := true ;
7907: LD_ADDR_EXP 30
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 10 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 10
7922: EQUAL
7923: IFFALSE 7933
// sFire := true ;
7925: LD_ADDR_EXP 31
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 11 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 11
7940: EQUAL
7941: IFFALSE 7951
// sRefresh := true ;
7943: LD_ADDR_EXP 32
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 12 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 12
7958: EQUAL
7959: IFFALSE 7969
// sExp := true ;
7961: LD_ADDR_EXP 33
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 13 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 13
7976: EQUAL
7977: IFFALSE 7987
// sDepot := true ;
7979: LD_ADDR_EXP 34
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 14 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 14
7994: EQUAL
7995: IFFALSE 8005
// sFlag := true ;
7997: LD_ADDR_EXP 35
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 15 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 15
8012: EQUAL
8013: IFFALSE 8023
// sKamikadze := true ;
8015: LD_ADDR_EXP 43
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 16 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 16
8030: EQUAL
8031: IFFALSE 8041
// sTroll := true ;
8033: LD_ADDR_EXP 44
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 17 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 17
8048: EQUAL
8049: IFFALSE 8059
// sSlow := true ;
8051: LD_ADDR_EXP 45
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 18 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 18
8066: EQUAL
8067: IFFALSE 8077
// sLack := true ;
8069: LD_ADDR_EXP 46
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 19 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 19
8084: EQUAL
8085: IFFALSE 8095
// sTank := true ;
8087: LD_ADDR_EXP 48
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 20 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 20
8102: EQUAL
8103: IFFALSE 8113
// sRemote := true ;
8105: LD_ADDR_EXP 49
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 21 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 21
8120: EQUAL
8121: IFFALSE 8131
// sPowell := true ;
8123: LD_ADDR_EXP 50
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 22 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 22
8138: EQUAL
8139: IFFALSE 8149
// sTeleport := true ;
8141: LD_ADDR_EXP 53
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 23 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 23
8156: EQUAL
8157: IFFALSE 8167
// sOilTower := true ;
8159: LD_ADDR_EXP 55
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 24 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 24
8174: EQUAL
8175: IFFALSE 8185
// sShovel := true ;
8177: LD_ADDR_EXP 56
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 25 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 25
8192: EQUAL
8193: IFFALSE 8203
// sSheik := true ;
8195: LD_ADDR_EXP 57
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 26 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 26
8210: EQUAL
8211: IFFALSE 8221
// sEarthquake := true ;
8213: LD_ADDR_EXP 59
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 27 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 27
8228: EQUAL
8229: IFFALSE 8239
// sAI := true ;
8231: LD_ADDR_EXP 60
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 28 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 28
8246: EQUAL
8247: IFFALSE 8257
// sCargo := true ;
8249: LD_ADDR_EXP 63
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 29 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 29
8264: EQUAL
8265: IFFALSE 8275
// sDLaser := true ;
8267: LD_ADDR_EXP 64
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 30 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 30
8282: EQUAL
8283: IFFALSE 8293
// sExchange := true ;
8285: LD_ADDR_EXP 65
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 31 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 31
8300: EQUAL
8301: IFFALSE 8311
// sFac := true ;
8303: LD_ADDR_EXP 66
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 32 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 32
8318: EQUAL
8319: IFFALSE 8329
// sPower := true ;
8321: LD_ADDR_EXP 67
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 33 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 33
8336: EQUAL
8337: IFFALSE 8347
// sRandom := true ;
8339: LD_ADDR_EXP 68
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 34 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 34
8354: EQUAL
8355: IFFALSE 8365
// sShield := true ;
8357: LD_ADDR_EXP 69
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 35 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 35
8372: EQUAL
8373: IFFALSE 8383
// sTime := true ;
8375: LD_ADDR_EXP 70
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 36 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 36
8390: EQUAL
8391: IFFALSE 8401
// sTools := true ;
8393: LD_ADDR_EXP 71
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 101 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 101
8408: EQUAL
8409: IFFALSE 8419
// sSold := true ;
8411: LD_ADDR_EXP 36
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 102 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 102
8426: EQUAL
8427: IFFALSE 8437
// sDiff := true ;
8429: LD_ADDR_EXP 37
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 103 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 103
8444: EQUAL
8445: IFFALSE 8455
// sFog := true ;
8447: LD_ADDR_EXP 40
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 104 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 104
8462: EQUAL
8463: IFFALSE 8473
// sReset := true ;
8465: LD_ADDR_EXP 41
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 105 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 105
8480: EQUAL
8481: IFFALSE 8491
// sSun := true ;
8483: LD_ADDR_EXP 42
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 106 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 106
8498: EQUAL
8499: IFFALSE 8509
// sTiger := true ;
8501: LD_ADDR_EXP 38
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 107 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 107
8516: EQUAL
8517: IFFALSE 8527
// sBomb := true ;
8519: LD_ADDR_EXP 39
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 108 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 108
8534: EQUAL
8535: IFFALSE 8545
// sWound := true ;
8537: LD_ADDR_EXP 47
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 109 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 109
8552: EQUAL
8553: IFFALSE 8563
// sBetray := true ;
8555: LD_ADDR_EXP 51
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 110 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 110
8570: EQUAL
8571: IFFALSE 8581
// sContamin := true ;
8573: LD_ADDR_EXP 52
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 111 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 111
8588: EQUAL
8589: IFFALSE 8599
// sOil := true ;
8591: LD_ADDR_EXP 54
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 112 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 112
8606: EQUAL
8607: IFFALSE 8617
// sStu := true ;
8609: LD_ADDR_EXP 58
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 113 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 113
8624: EQUAL
8625: IFFALSE 8635
// sBazooka := true ;
8627: LD_ADDR_EXP 61
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 114 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 114
8642: EQUAL
8643: IFFALSE 8653
// sMortar := true ;
8645: LD_ADDR_EXP 62
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 115 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 115
8660: EQUAL
8661: IFFALSE 8671
// sRanger := true ;
8663: LD_ADDR_EXP 72
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// end ; if p2 = 101 then
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 101
8678: EQUAL
8679: IFFALSE 8807
// begin case p3 of 1 :
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8701
8694: POP
// hHackUnlimitedResources ; 2 :
8695: CALL 19842 0 0
8699: GO 8807
8701: LD_INT 2
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8716
8709: POP
// hHackSetLevel10 ; 3 :
8710: CALL 19975 0 0
8714: GO 8807
8716: LD_INT 3
8718: DOUBLE
8719: EQUAL
8720: IFTRUE 8724
8722: GO 8731
8724: POP
// hHackSetLevel10YourUnits ; 4 :
8725: CALL 20060 0 0
8729: GO 8807
8731: LD_INT 4
8733: DOUBLE
8734: EQUAL
8735: IFTRUE 8739
8737: GO 8746
8739: POP
// hHackInvincible ; 5 :
8740: CALL 20508 0 0
8744: GO 8807
8746: LD_INT 5
8748: DOUBLE
8749: EQUAL
8750: IFTRUE 8754
8752: GO 8761
8754: POP
// hHackInvisible ; 6 :
8755: CALL 20619 0 0
8759: GO 8807
8761: LD_INT 6
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8776
8769: POP
// hHackChangeYourSide ; 7 :
8770: CALL 20676 0 0
8774: GO 8807
8776: LD_INT 7
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8791
8784: POP
// hHackChangeUnitSide ; 8 :
8785: CALL 20718 0 0
8789: GO 8807
8791: LD_INT 8
8793: DOUBLE
8794: EQUAL
8795: IFTRUE 8799
8797: GO 8806
8799: POP
// hHackFog ; end ;
8800: CALL 20819 0 0
8804: GO 8807
8806: POP
// end ; end ;
8807: PPOPN 6
8809: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8810: GO 8812
8812: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8813: LD_STRING initStreamRollete();
8815: PPUSH
8816: CALL_OW 559
// InitStreamMode ;
8820: CALL 8829 0 0
// DefineStreamItems ( ) ;
8824: CALL 9269 0 0
// end ;
8828: END
// function InitStreamMode ; begin
8829: LD_INT 0
8831: PPUSH
// streamModeActive := false ;
8832: LD_ADDR_EXP 19
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// normalCounter := 36 ;
8840: LD_ADDR_EXP 20
8844: PUSH
8845: LD_INT 36
8847: ST_TO_ADDR
// hardcoreCounter := 16 ;
8848: LD_ADDR_EXP 21
8852: PUSH
8853: LD_INT 16
8855: ST_TO_ADDR
// sRocket := false ;
8856: LD_ADDR_EXP 24
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sSpeed := false ;
8864: LD_ADDR_EXP 23
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sEngine := false ;
8872: LD_ADDR_EXP 25
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sSpec := false ;
8880: LD_ADDR_EXP 22
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sLevel := false ;
8888: LD_ADDR_EXP 26
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sArmoury := false ;
8896: LD_ADDR_EXP 27
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sRadar := false ;
8904: LD_ADDR_EXP 28
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sBunker := false ;
8912: LD_ADDR_EXP 29
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sHack := false ;
8920: LD_ADDR_EXP 30
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sFire := false ;
8928: LD_ADDR_EXP 31
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sRefresh := false ;
8936: LD_ADDR_EXP 32
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// sExp := false ;
8944: LD_ADDR_EXP 33
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// sDepot := false ;
8952: LD_ADDR_EXP 34
8956: PUSH
8957: LD_INT 0
8959: ST_TO_ADDR
// sFlag := false ;
8960: LD_ADDR_EXP 35
8964: PUSH
8965: LD_INT 0
8967: ST_TO_ADDR
// sKamikadze := false ;
8968: LD_ADDR_EXP 43
8972: PUSH
8973: LD_INT 0
8975: ST_TO_ADDR
// sTroll := false ;
8976: LD_ADDR_EXP 44
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// sSlow := false ;
8984: LD_ADDR_EXP 45
8988: PUSH
8989: LD_INT 0
8991: ST_TO_ADDR
// sLack := false ;
8992: LD_ADDR_EXP 46
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// sTank := false ;
9000: LD_ADDR_EXP 48
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// sRemote := false ;
9008: LD_ADDR_EXP 49
9012: PUSH
9013: LD_INT 0
9015: ST_TO_ADDR
// sPowell := false ;
9016: LD_ADDR_EXP 50
9020: PUSH
9021: LD_INT 0
9023: ST_TO_ADDR
// sTeleport := false ;
9024: LD_ADDR_EXP 53
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// sOilTower := false ;
9032: LD_ADDR_EXP 55
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// sShovel := false ;
9040: LD_ADDR_EXP 56
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// sSheik := false ;
9048: LD_ADDR_EXP 57
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// sEarthquake := false ;
9056: LD_ADDR_EXP 59
9060: PUSH
9061: LD_INT 0
9063: ST_TO_ADDR
// sAI := false ;
9064: LD_ADDR_EXP 60
9068: PUSH
9069: LD_INT 0
9071: ST_TO_ADDR
// sCargo := false ;
9072: LD_ADDR_EXP 63
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// sDLaser := false ;
9080: LD_ADDR_EXP 64
9084: PUSH
9085: LD_INT 0
9087: ST_TO_ADDR
// sExchange := false ;
9088: LD_ADDR_EXP 65
9092: PUSH
9093: LD_INT 0
9095: ST_TO_ADDR
// sFac := false ;
9096: LD_ADDR_EXP 66
9100: PUSH
9101: LD_INT 0
9103: ST_TO_ADDR
// sPower := false ;
9104: LD_ADDR_EXP 67
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// sRandom := false ;
9112: LD_ADDR_EXP 68
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// sShield := false ;
9120: LD_ADDR_EXP 69
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// sTime := false ;
9128: LD_ADDR_EXP 70
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sTools := false ;
9136: LD_ADDR_EXP 71
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sSold := false ;
9144: LD_ADDR_EXP 36
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sDiff := false ;
9152: LD_ADDR_EXP 37
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// sFog := false ;
9160: LD_ADDR_EXP 40
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sReset := false ;
9168: LD_ADDR_EXP 41
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sSun := false ;
9176: LD_ADDR_EXP 42
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sTiger := false ;
9184: LD_ADDR_EXP 38
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sBomb := false ;
9192: LD_ADDR_EXP 39
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sWound := false ;
9200: LD_ADDR_EXP 47
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sBetray := false ;
9208: LD_ADDR_EXP 51
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sContamin := false ;
9216: LD_ADDR_EXP 52
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sOil := false ;
9224: LD_ADDR_EXP 54
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sStu := false ;
9232: LD_ADDR_EXP 58
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sBazooka := false ;
9240: LD_ADDR_EXP 61
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sMortar := false ;
9248: LD_ADDR_EXP 62
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sRanger := false ;
9256: LD_ADDR_EXP 72
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 1
9268: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
9275: PPUSH
// result := [ ] ;
9276: LD_ADDR_VAR 0 1
9280: PUSH
9281: EMPTY
9282: ST_TO_ADDR
// if campaign_id = 1 then
9283: LD_OWVAR 69
9287: PUSH
9288: LD_INT 1
9290: EQUAL
9291: IFFALSE 12229
// begin case mission_number of 1 :
9293: LD_OWVAR 70
9297: PUSH
9298: LD_INT 1
9300: DOUBLE
9301: EQUAL
9302: IFTRUE 9306
9304: GO 9370
9306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
9307: LD_ADDR_VAR 0 1
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 4
9317: PUSH
9318: LD_INT 11
9320: PUSH
9321: LD_INT 12
9323: PUSH
9324: LD_INT 15
9326: PUSH
9327: LD_INT 16
9329: PUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 23
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 101
9352: PUSH
9353: LD_INT 102
9355: PUSH
9356: LD_INT 106
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: ST_TO_ADDR
9368: GO 12227
9370: LD_INT 2
9372: DOUBLE
9373: EQUAL
9374: IFTRUE 9378
9376: GO 9450
9378: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9379: LD_ADDR_VAR 0 1
9383: PUSH
9384: LD_INT 2
9386: PUSH
9387: LD_INT 4
9389: PUSH
9390: LD_INT 11
9392: PUSH
9393: LD_INT 12
9395: PUSH
9396: LD_INT 15
9398: PUSH
9399: LD_INT 16
9401: PUSH
9402: LD_INT 22
9404: PUSH
9405: LD_INT 23
9407: PUSH
9408: LD_INT 26
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 101
9424: PUSH
9425: LD_INT 102
9427: PUSH
9428: LD_INT 105
9430: PUSH
9431: LD_INT 106
9433: PUSH
9434: LD_INT 108
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 12227
9450: LD_INT 3
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9534
9458: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: LD_INT 5
9472: PUSH
9473: LD_INT 11
9475: PUSH
9476: LD_INT 12
9478: PUSH
9479: LD_INT 15
9481: PUSH
9482: LD_INT 16
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 36
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 101
9508: PUSH
9509: LD_INT 102
9511: PUSH
9512: LD_INT 105
9514: PUSH
9515: LD_INT 106
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: ST_TO_ADDR
9532: GO 12227
9534: LD_INT 4
9536: DOUBLE
9537: EQUAL
9538: IFTRUE 9542
9540: GO 9626
9542: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9543: LD_ADDR_VAR 0 1
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: LD_INT 4
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: LD_INT 8
9559: PUSH
9560: LD_INT 11
9562: PUSH
9563: LD_INT 12
9565: PUSH
9566: LD_INT 15
9568: PUSH
9569: LD_INT 16
9571: PUSH
9572: LD_INT 22
9574: PUSH
9575: LD_INT 23
9577: PUSH
9578: LD_INT 26
9580: PUSH
9581: LD_INT 36
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 101
9600: PUSH
9601: LD_INT 102
9603: PUSH
9604: LD_INT 105
9606: PUSH
9607: LD_INT 106
9609: PUSH
9610: LD_INT 108
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: ST_TO_ADDR
9624: GO 12227
9626: LD_INT 5
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9734
9634: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: LD_INT 4
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: LD_INT 6
9651: PUSH
9652: LD_INT 8
9654: PUSH
9655: LD_INT 11
9657: PUSH
9658: LD_INT 12
9660: PUSH
9661: LD_INT 15
9663: PUSH
9664: LD_INT 16
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_INT 23
9672: PUSH
9673: LD_INT 25
9675: PUSH
9676: LD_INT 26
9678: PUSH
9679: LD_INT 36
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 101
9700: PUSH
9701: LD_INT 102
9703: PUSH
9704: LD_INT 105
9706: PUSH
9707: LD_INT 106
9709: PUSH
9710: LD_INT 108
9712: PUSH
9713: LD_INT 109
9715: PUSH
9716: LD_INT 112
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: ST_TO_ADDR
9732: GO 12227
9734: LD_INT 6
9736: DOUBLE
9737: EQUAL
9738: IFTRUE 9742
9740: GO 9862
9742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9743: LD_ADDR_VAR 0 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 4
9753: PUSH
9754: LD_INT 5
9756: PUSH
9757: LD_INT 6
9759: PUSH
9760: LD_INT 8
9762: PUSH
9763: LD_INT 11
9765: PUSH
9766: LD_INT 12
9768: PUSH
9769: LD_INT 15
9771: PUSH
9772: LD_INT 16
9774: PUSH
9775: LD_INT 20
9777: PUSH
9778: LD_INT 21
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_INT 23
9786: PUSH
9787: LD_INT 25
9789: PUSH
9790: LD_INT 26
9792: PUSH
9793: LD_INT 30
9795: PUSH
9796: LD_INT 31
9798: PUSH
9799: LD_INT 32
9801: PUSH
9802: LD_INT 36
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 101
9828: PUSH
9829: LD_INT 102
9831: PUSH
9832: LD_INT 105
9834: PUSH
9835: LD_INT 106
9837: PUSH
9838: LD_INT 108
9840: PUSH
9841: LD_INT 109
9843: PUSH
9844: LD_INT 112
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: ST_TO_ADDR
9860: GO 12227
9862: LD_INT 7
9864: DOUBLE
9865: EQUAL
9866: IFTRUE 9870
9868: GO 9970
9870: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: LD_INT 4
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: LD_INT 7
9887: PUSH
9888: LD_INT 11
9890: PUSH
9891: LD_INT 12
9893: PUSH
9894: LD_INT 15
9896: PUSH
9897: LD_INT 16
9899: PUSH
9900: LD_INT 20
9902: PUSH
9903: LD_INT 21
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 23
9911: PUSH
9912: LD_INT 25
9914: PUSH
9915: LD_INT 26
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 101
9936: PUSH
9937: LD_INT 102
9939: PUSH
9940: LD_INT 103
9942: PUSH
9943: LD_INT 105
9945: PUSH
9946: LD_INT 106
9948: PUSH
9949: LD_INT 108
9951: PUSH
9952: LD_INT 112
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: ST_TO_ADDR
9968: GO 12227
9970: LD_INT 8
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 10106
9978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 6
9995: PUSH
9996: LD_INT 7
9998: PUSH
9999: LD_INT 8
10001: PUSH
10002: LD_INT 11
10004: PUSH
10005: LD_INT 12
10007: PUSH
10008: LD_INT 15
10010: PUSH
10011: LD_INT 16
10013: PUSH
10014: LD_INT 20
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 25
10028: PUSH
10029: LD_INT 26
10031: PUSH
10032: LD_INT 30
10034: PUSH
10035: LD_INT 31
10037: PUSH
10038: LD_INT 32
10040: PUSH
10041: LD_INT 36
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 101
10068: PUSH
10069: LD_INT 102
10071: PUSH
10072: LD_INT 103
10074: PUSH
10075: LD_INT 105
10077: PUSH
10078: LD_INT 106
10080: PUSH
10081: LD_INT 108
10083: PUSH
10084: LD_INT 109
10086: PUSH
10087: LD_INT 112
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: ST_TO_ADDR
10104: GO 12227
10106: LD_INT 9
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10250
10114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
10115: LD_ADDR_VAR 0 1
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 6
10131: PUSH
10132: LD_INT 7
10134: PUSH
10135: LD_INT 8
10137: PUSH
10138: LD_INT 11
10140: PUSH
10141: LD_INT 12
10143: PUSH
10144: LD_INT 15
10146: PUSH
10147: LD_INT 16
10149: PUSH
10150: LD_INT 20
10152: PUSH
10153: LD_INT 21
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_INT 23
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 26
10167: PUSH
10168: LD_INT 28
10170: PUSH
10171: LD_INT 30
10173: PUSH
10174: LD_INT 31
10176: PUSH
10177: LD_INT 32
10179: PUSH
10180: LD_INT 36
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 101
10208: PUSH
10209: LD_INT 102
10211: PUSH
10212: LD_INT 103
10214: PUSH
10215: LD_INT 105
10217: PUSH
10218: LD_INT 106
10220: PUSH
10221: LD_INT 108
10223: PUSH
10224: LD_INT 109
10226: PUSH
10227: LD_INT 112
10229: PUSH
10230: LD_INT 114
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: ST_TO_ADDR
10248: GO 12227
10250: LD_INT 10
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10442
10258: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
10259: LD_ADDR_VAR 0 1
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: LD_INT 4
10269: PUSH
10270: LD_INT 5
10272: PUSH
10273: LD_INT 6
10275: PUSH
10276: LD_INT 7
10278: PUSH
10279: LD_INT 8
10281: PUSH
10282: LD_INT 9
10284: PUSH
10285: LD_INT 10
10287: PUSH
10288: LD_INT 11
10290: PUSH
10291: LD_INT 12
10293: PUSH
10294: LD_INT 13
10296: PUSH
10297: LD_INT 14
10299: PUSH
10300: LD_INT 15
10302: PUSH
10303: LD_INT 16
10305: PUSH
10306: LD_INT 17
10308: PUSH
10309: LD_INT 18
10311: PUSH
10312: LD_INT 19
10314: PUSH
10315: LD_INT 20
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 23
10326: PUSH
10327: LD_INT 24
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: LD_INT 28
10338: PUSH
10339: LD_INT 30
10341: PUSH
10342: LD_INT 31
10344: PUSH
10345: LD_INT 32
10347: PUSH
10348: LD_INT 36
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 101
10384: PUSH
10385: LD_INT 102
10387: PUSH
10388: LD_INT 103
10390: PUSH
10391: LD_INT 104
10393: PUSH
10394: LD_INT 105
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 107
10402: PUSH
10403: LD_INT 108
10405: PUSH
10406: LD_INT 109
10408: PUSH
10409: LD_INT 110
10411: PUSH
10412: LD_INT 111
10414: PUSH
10415: LD_INT 112
10417: PUSH
10418: LD_INT 114
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: ST_TO_ADDR
10440: GO 12227
10442: LD_INT 11
10444: DOUBLE
10445: EQUAL
10446: IFTRUE 10450
10448: GO 10642
10450: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: LD_INT 4
10464: PUSH
10465: LD_INT 5
10467: PUSH
10468: LD_INT 6
10470: PUSH
10471: LD_INT 7
10473: PUSH
10474: LD_INT 8
10476: PUSH
10477: LD_INT 9
10479: PUSH
10480: LD_INT 10
10482: PUSH
10483: LD_INT 11
10485: PUSH
10486: LD_INT 12
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: LD_INT 15
10497: PUSH
10498: LD_INT 16
10500: PUSH
10501: LD_INT 17
10503: PUSH
10504: LD_INT 18
10506: PUSH
10507: LD_INT 19
10509: PUSH
10510: LD_INT 20
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 22
10518: PUSH
10519: LD_INT 23
10521: PUSH
10522: LD_INT 24
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 26
10530: PUSH
10531: LD_INT 28
10533: PUSH
10534: LD_INT 30
10536: PUSH
10537: LD_INT 31
10539: PUSH
10540: LD_INT 32
10542: PUSH
10543: LD_INT 34
10545: PUSH
10546: LD_INT 36
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 101
10584: PUSH
10585: LD_INT 102
10587: PUSH
10588: LD_INT 103
10590: PUSH
10591: LD_INT 104
10593: PUSH
10594: LD_INT 105
10596: PUSH
10597: LD_INT 106
10599: PUSH
10600: LD_INT 107
10602: PUSH
10603: LD_INT 108
10605: PUSH
10606: LD_INT 109
10608: PUSH
10609: LD_INT 110
10611: PUSH
10612: LD_INT 111
10614: PUSH
10615: LD_INT 112
10617: PUSH
10618: LD_INT 114
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: ST_TO_ADDR
10640: GO 12227
10642: LD_INT 12
10644: DOUBLE
10645: EQUAL
10646: IFTRUE 10650
10648: GO 10858
10650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10651: LD_ADDR_VAR 0 1
10655: PUSH
10656: LD_INT 1
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 4
10667: PUSH
10668: LD_INT 5
10670: PUSH
10671: LD_INT 6
10673: PUSH
10674: LD_INT 7
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 9
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 13
10694: PUSH
10695: LD_INT 14
10697: PUSH
10698: LD_INT 15
10700: PUSH
10701: LD_INT 16
10703: PUSH
10704: LD_INT 17
10706: PUSH
10707: LD_INT 18
10709: PUSH
10710: LD_INT 19
10712: PUSH
10713: LD_INT 20
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 22
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 24
10727: PUSH
10728: LD_INT 25
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: LD_INT 32
10748: PUSH
10749: LD_INT 33
10751: PUSH
10752: LD_INT 34
10754: PUSH
10755: LD_INT 36
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 101
10796: PUSH
10797: LD_INT 102
10799: PUSH
10800: LD_INT 103
10802: PUSH
10803: LD_INT 104
10805: PUSH
10806: LD_INT 105
10808: PUSH
10809: LD_INT 106
10811: PUSH
10812: LD_INT 107
10814: PUSH
10815: LD_INT 108
10817: PUSH
10818: LD_INT 109
10820: PUSH
10821: LD_INT 110
10823: PUSH
10824: LD_INT 111
10826: PUSH
10827: LD_INT 112
10829: PUSH
10830: LD_INT 113
10832: PUSH
10833: LD_INT 114
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: ST_TO_ADDR
10856: GO 12227
10858: LD_INT 13
10860: DOUBLE
10861: EQUAL
10862: IFTRUE 10866
10864: GO 11062
10866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10867: LD_ADDR_VAR 0 1
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 3
10880: PUSH
10881: LD_INT 4
10883: PUSH
10884: LD_INT 5
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: LD_INT 9
10892: PUSH
10893: LD_INT 10
10895: PUSH
10896: LD_INT 11
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: LD_INT 14
10904: PUSH
10905: LD_INT 15
10907: PUSH
10908: LD_INT 16
10910: PUSH
10911: LD_INT 17
10913: PUSH
10914: LD_INT 18
10916: PUSH
10917: LD_INT 19
10919: PUSH
10920: LD_INT 20
10922: PUSH
10923: LD_INT 21
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 24
10934: PUSH
10935: LD_INT 25
10937: PUSH
10938: LD_INT 26
10940: PUSH
10941: LD_INT 27
10943: PUSH
10944: LD_INT 28
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 33
10958: PUSH
10959: LD_INT 34
10961: PUSH
10962: LD_INT 36
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 101
11000: PUSH
11001: LD_INT 102
11003: PUSH
11004: LD_INT 103
11006: PUSH
11007: LD_INT 104
11009: PUSH
11010: LD_INT 105
11012: PUSH
11013: LD_INT 106
11015: PUSH
11016: LD_INT 107
11018: PUSH
11019: LD_INT 108
11021: PUSH
11022: LD_INT 109
11024: PUSH
11025: LD_INT 110
11027: PUSH
11028: LD_INT 111
11030: PUSH
11031: LD_INT 112
11033: PUSH
11034: LD_INT 113
11036: PUSH
11037: LD_INT 114
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: ST_TO_ADDR
11060: GO 12227
11062: LD_INT 14
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11282
11070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
11071: LD_ADDR_VAR 0 1
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 3
11084: PUSH
11085: LD_INT 4
11087: PUSH
11088: LD_INT 5
11090: PUSH
11091: LD_INT 6
11093: PUSH
11094: LD_INT 7
11096: PUSH
11097: LD_INT 8
11099: PUSH
11100: LD_INT 9
11102: PUSH
11103: LD_INT 10
11105: PUSH
11106: LD_INT 11
11108: PUSH
11109: LD_INT 12
11111: PUSH
11112: LD_INT 13
11114: PUSH
11115: LD_INT 14
11117: PUSH
11118: LD_INT 15
11120: PUSH
11121: LD_INT 16
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 18
11129: PUSH
11130: LD_INT 19
11132: PUSH
11133: LD_INT 20
11135: PUSH
11136: LD_INT 21
11138: PUSH
11139: LD_INT 22
11141: PUSH
11142: LD_INT 23
11144: PUSH
11145: LD_INT 24
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 26
11153: PUSH
11154: LD_INT 27
11156: PUSH
11157: LD_INT 28
11159: PUSH
11160: LD_INT 29
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 31
11168: PUSH
11169: LD_INT 32
11171: PUSH
11172: LD_INT 33
11174: PUSH
11175: LD_INT 34
11177: PUSH
11178: LD_INT 36
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 101
11220: PUSH
11221: LD_INT 102
11223: PUSH
11224: LD_INT 103
11226: PUSH
11227: LD_INT 104
11229: PUSH
11230: LD_INT 105
11232: PUSH
11233: LD_INT 106
11235: PUSH
11236: LD_INT 107
11238: PUSH
11239: LD_INT 108
11241: PUSH
11242: LD_INT 109
11244: PUSH
11245: LD_INT 110
11247: PUSH
11248: LD_INT 111
11250: PUSH
11251: LD_INT 112
11253: PUSH
11254: LD_INT 113
11256: PUSH
11257: LD_INT 114
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: ST_TO_ADDR
11280: GO 12227
11282: LD_INT 15
11284: DOUBLE
11285: EQUAL
11286: IFTRUE 11290
11288: GO 11502
11290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 4
11307: PUSH
11308: LD_INT 5
11310: PUSH
11311: LD_INT 6
11313: PUSH
11314: LD_INT 7
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: LD_INT 9
11322: PUSH
11323: LD_INT 10
11325: PUSH
11326: LD_INT 11
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 13
11334: PUSH
11335: LD_INT 14
11337: PUSH
11338: LD_INT 15
11340: PUSH
11341: LD_INT 16
11343: PUSH
11344: LD_INT 17
11346: PUSH
11347: LD_INT 18
11349: PUSH
11350: LD_INT 19
11352: PUSH
11353: LD_INT 20
11355: PUSH
11356: LD_INT 21
11358: PUSH
11359: LD_INT 22
11361: PUSH
11362: LD_INT 23
11364: PUSH
11365: LD_INT 24
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 26
11373: PUSH
11374: LD_INT 27
11376: PUSH
11377: LD_INT 28
11379: PUSH
11380: LD_INT 29
11382: PUSH
11383: LD_INT 30
11385: PUSH
11386: LD_INT 31
11388: PUSH
11389: LD_INT 32
11391: PUSH
11392: LD_INT 33
11394: PUSH
11395: LD_INT 34
11397: PUSH
11398: LD_INT 36
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 101
11440: PUSH
11441: LD_INT 102
11443: PUSH
11444: LD_INT 103
11446: PUSH
11447: LD_INT 104
11449: PUSH
11450: LD_INT 105
11452: PUSH
11453: LD_INT 106
11455: PUSH
11456: LD_INT 107
11458: PUSH
11459: LD_INT 108
11461: PUSH
11462: LD_INT 109
11464: PUSH
11465: LD_INT 110
11467: PUSH
11468: LD_INT 111
11470: PUSH
11471: LD_INT 112
11473: PUSH
11474: LD_INT 113
11476: PUSH
11477: LD_INT 114
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: ST_TO_ADDR
11500: GO 12227
11502: LD_INT 16
11504: DOUBLE
11505: EQUAL
11506: IFTRUE 11510
11508: GO 11634
11510: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11511: LD_ADDR_VAR 0 1
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 4
11521: PUSH
11522: LD_INT 5
11524: PUSH
11525: LD_INT 7
11527: PUSH
11528: LD_INT 11
11530: PUSH
11531: LD_INT 12
11533: PUSH
11534: LD_INT 15
11536: PUSH
11537: LD_INT 16
11539: PUSH
11540: LD_INT 20
11542: PUSH
11543: LD_INT 21
11545: PUSH
11546: LD_INT 22
11548: PUSH
11549: LD_INT 23
11551: PUSH
11552: LD_INT 25
11554: PUSH
11555: LD_INT 26
11557: PUSH
11558: LD_INT 30
11560: PUSH
11561: LD_INT 31
11563: PUSH
11564: LD_INT 32
11566: PUSH
11567: LD_INT 33
11569: PUSH
11570: LD_INT 34
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 101
11596: PUSH
11597: LD_INT 102
11599: PUSH
11600: LD_INT 103
11602: PUSH
11603: LD_INT 106
11605: PUSH
11606: LD_INT 108
11608: PUSH
11609: LD_INT 112
11611: PUSH
11612: LD_INT 113
11614: PUSH
11615: LD_INT 114
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: ST_TO_ADDR
11632: GO 12227
11634: LD_INT 17
11636: DOUBLE
11637: EQUAL
11638: IFTRUE 11642
11640: GO 11854
11642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: LD_INT 4
11659: PUSH
11660: LD_INT 5
11662: PUSH
11663: LD_INT 6
11665: PUSH
11666: LD_INT 7
11668: PUSH
11669: LD_INT 8
11671: PUSH
11672: LD_INT 9
11674: PUSH
11675: LD_INT 10
11677: PUSH
11678: LD_INT 11
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: LD_INT 13
11686: PUSH
11687: LD_INT 14
11689: PUSH
11690: LD_INT 15
11692: PUSH
11693: LD_INT 16
11695: PUSH
11696: LD_INT 17
11698: PUSH
11699: LD_INT 18
11701: PUSH
11702: LD_INT 19
11704: PUSH
11705: LD_INT 20
11707: PUSH
11708: LD_INT 21
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 23
11716: PUSH
11717: LD_INT 24
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 26
11725: PUSH
11726: LD_INT 27
11728: PUSH
11729: LD_INT 28
11731: PUSH
11732: LD_INT 29
11734: PUSH
11735: LD_INT 30
11737: PUSH
11738: LD_INT 31
11740: PUSH
11741: LD_INT 32
11743: PUSH
11744: LD_INT 33
11746: PUSH
11747: LD_INT 34
11749: PUSH
11750: LD_INT 36
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 101
11792: PUSH
11793: LD_INT 102
11795: PUSH
11796: LD_INT 103
11798: PUSH
11799: LD_INT 104
11801: PUSH
11802: LD_INT 105
11804: PUSH
11805: LD_INT 106
11807: PUSH
11808: LD_INT 107
11810: PUSH
11811: LD_INT 108
11813: PUSH
11814: LD_INT 109
11816: PUSH
11817: LD_INT 110
11819: PUSH
11820: LD_INT 111
11822: PUSH
11823: LD_INT 112
11825: PUSH
11826: LD_INT 113
11828: PUSH
11829: LD_INT 114
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: ST_TO_ADDR
11852: GO 12227
11854: LD_INT 18
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11998
11862: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 7
11879: PUSH
11880: LD_INT 11
11882: PUSH
11883: LD_INT 12
11885: PUSH
11886: LD_INT 15
11888: PUSH
11889: LD_INT 16
11891: PUSH
11892: LD_INT 20
11894: PUSH
11895: LD_INT 21
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_INT 23
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 26
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 31
11915: PUSH
11916: LD_INT 32
11918: PUSH
11919: LD_INT 33
11921: PUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 35
11927: PUSH
11928: LD_INT 36
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 101
11956: PUSH
11957: LD_INT 102
11959: PUSH
11960: LD_INT 103
11962: PUSH
11963: LD_INT 106
11965: PUSH
11966: LD_INT 108
11968: PUSH
11969: LD_INT 112
11971: PUSH
11972: LD_INT 113
11974: PUSH
11975: LD_INT 114
11977: PUSH
11978: LD_INT 115
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: ST_TO_ADDR
11996: GO 12227
11998: LD_INT 19
12000: DOUBLE
12001: EQUAL
12002: IFTRUE 12006
12004: GO 12226
12006: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
12007: LD_ADDR_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: LD_INT 3
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: LD_INT 5
12026: PUSH
12027: LD_INT 6
12029: PUSH
12030: LD_INT 7
12032: PUSH
12033: LD_INT 8
12035: PUSH
12036: LD_INT 9
12038: PUSH
12039: LD_INT 10
12041: PUSH
12042: LD_INT 11
12044: PUSH
12045: LD_INT 12
12047: PUSH
12048: LD_INT 13
12050: PUSH
12051: LD_INT 14
12053: PUSH
12054: LD_INT 15
12056: PUSH
12057: LD_INT 16
12059: PUSH
12060: LD_INT 17
12062: PUSH
12063: LD_INT 18
12065: PUSH
12066: LD_INT 19
12068: PUSH
12069: LD_INT 20
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_INT 23
12080: PUSH
12081: LD_INT 24
12083: PUSH
12084: LD_INT 25
12086: PUSH
12087: LD_INT 26
12089: PUSH
12090: LD_INT 27
12092: PUSH
12093: LD_INT 28
12095: PUSH
12096: LD_INT 29
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 31
12104: PUSH
12105: LD_INT 32
12107: PUSH
12108: LD_INT 33
12110: PUSH
12111: LD_INT 34
12113: PUSH
12114: LD_INT 35
12116: PUSH
12117: LD_INT 36
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 101
12160: PUSH
12161: LD_INT 102
12163: PUSH
12164: LD_INT 103
12166: PUSH
12167: LD_INT 104
12169: PUSH
12170: LD_INT 105
12172: PUSH
12173: LD_INT 106
12175: PUSH
12176: LD_INT 107
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 109
12184: PUSH
12185: LD_INT 110
12187: PUSH
12188: LD_INT 111
12190: PUSH
12191: LD_INT 112
12193: PUSH
12194: LD_INT 113
12196: PUSH
12197: LD_INT 114
12199: PUSH
12200: LD_INT 115
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: ST_TO_ADDR
12224: GO 12227
12226: POP
// end else
12227: GO 12446
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
12229: LD_ADDR_VAR 0 1
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: LD_INT 3
12242: PUSH
12243: LD_INT 4
12245: PUSH
12246: LD_INT 5
12248: PUSH
12249: LD_INT 6
12251: PUSH
12252: LD_INT 7
12254: PUSH
12255: LD_INT 8
12257: PUSH
12258: LD_INT 9
12260: PUSH
12261: LD_INT 10
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 13
12272: PUSH
12273: LD_INT 14
12275: PUSH
12276: LD_INT 15
12278: PUSH
12279: LD_INT 16
12281: PUSH
12282: LD_INT 17
12284: PUSH
12285: LD_INT 18
12287: PUSH
12288: LD_INT 19
12290: PUSH
12291: LD_INT 20
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_INT 23
12302: PUSH
12303: LD_INT 24
12305: PUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 27
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 29
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: LD_INT 31
12326: PUSH
12327: LD_INT 32
12329: PUSH
12330: LD_INT 33
12332: PUSH
12333: LD_INT 34
12335: PUSH
12336: LD_INT 35
12338: PUSH
12339: LD_INT 36
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 101
12382: PUSH
12383: LD_INT 102
12385: PUSH
12386: LD_INT 103
12388: PUSH
12389: LD_INT 104
12391: PUSH
12392: LD_INT 105
12394: PUSH
12395: LD_INT 106
12397: PUSH
12398: LD_INT 107
12400: PUSH
12401: LD_INT 108
12403: PUSH
12404: LD_INT 109
12406: PUSH
12407: LD_INT 110
12409: PUSH
12410: LD_INT 111
12412: PUSH
12413: LD_INT 112
12415: PUSH
12416: LD_INT 113
12418: PUSH
12419: LD_INT 114
12421: PUSH
12422: LD_INT 115
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: ST_TO_ADDR
// if result then
12446: LD_VAR 0 1
12450: IFFALSE 12739
// begin normal :=  ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_STRING 
12459: ST_TO_ADDR
// hardcore :=  ;
12460: LD_ADDR_VAR 0 4
12464: PUSH
12465: LD_STRING 
12467: ST_TO_ADDR
// for i = 1 to normalCounter do
12468: LD_ADDR_VAR 0 5
12472: PUSH
12473: DOUBLE
12474: LD_INT 1
12476: DEC
12477: ST_TO_ADDR
12478: LD_EXP 20
12482: PUSH
12483: FOR_TO
12484: IFFALSE 12585
// begin tmp := 0 ;
12486: LD_ADDR_VAR 0 2
12490: PUSH
12491: LD_STRING 0
12493: ST_TO_ADDR
// if result [ 1 ] then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: IFFALSE 12567
// if result [ 1 ] [ 1 ] = i then
12504: LD_VAR 0 1
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PUSH
12517: LD_VAR 0 5
12521: EQUAL
12522: IFFALSE 12567
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12524: LD_ADDR_VAR 0 1
12528: PUSH
12529: LD_VAR 0 1
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: LD_VAR 0 1
12541: PUSH
12542: LD_INT 1
12544: ARRAY
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 3
12553: PPUSH
12554: CALL_OW 1
12558: ST_TO_ADDR
// tmp := 1 ;
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_STRING 1
12566: ST_TO_ADDR
// end ; normal := normal & tmp ;
12567: LD_ADDR_VAR 0 3
12571: PUSH
12572: LD_VAR 0 3
12576: PUSH
12577: LD_VAR 0 2
12581: STR
12582: ST_TO_ADDR
// end ;
12583: GO 12483
12585: POP
12586: POP
// for i = 1 to hardcoreCounter do
12587: LD_ADDR_VAR 0 5
12591: PUSH
12592: DOUBLE
12593: LD_INT 1
12595: DEC
12596: ST_TO_ADDR
12597: LD_EXP 21
12601: PUSH
12602: FOR_TO
12603: IFFALSE 12708
// begin tmp := 0 ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_STRING 0
12612: ST_TO_ADDR
// if result [ 2 ] then
12613: LD_VAR 0 1
12617: PUSH
12618: LD_INT 2
12620: ARRAY
12621: IFFALSE 12690
// if result [ 2 ] [ 1 ] = 100 + i then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_INT 2
12630: ARRAY
12631: PUSH
12632: LD_INT 1
12634: ARRAY
12635: PUSH
12636: LD_INT 100
12638: PUSH
12639: LD_VAR 0 5
12643: PLUS
12644: EQUAL
12645: IFFALSE 12690
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 2
12659: PPUSH
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 2
12667: ARRAY
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 3
12676: PPUSH
12677: CALL_OW 1
12681: ST_TO_ADDR
// tmp := 1 ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_STRING 1
12689: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12690: LD_ADDR_VAR 0 4
12694: PUSH
12695: LD_VAR 0 4
12699: PUSH
12700: LD_VAR 0 2
12704: STR
12705: ST_TO_ADDR
// end ;
12706: GO 12602
12708: POP
12709: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12710: LD_STRING getStreamItemsFromMission("
12712: PUSH
12713: LD_VAR 0 3
12717: STR
12718: PUSH
12719: LD_STRING ","
12721: STR
12722: PUSH
12723: LD_VAR 0 4
12727: STR
12728: PUSH
12729: LD_STRING ")
12731: STR
12732: PPUSH
12733: CALL_OW 559
// end else
12737: GO 12746
// ToLua ( getStreamItemsFromMission("","") ) ;
12739: LD_STRING getStreamItemsFromMission("","")
12741: PPUSH
12742: CALL_OW 559
// end ;
12746: LD_VAR 0 1
12750: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12751: LD_EXP 19
12755: PUSH
12756: LD_EXP 24
12760: AND
12761: IFFALSE 12885
12763: GO 12765
12765: DISABLE
12766: LD_INT 0
12768: PPUSH
12769: PPUSH
// begin enable ;
12770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12771: LD_ADDR_VAR 0 2
12775: PUSH
12776: LD_INT 22
12778: PUSH
12779: LD_OWVAR 2
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: LD_INT 34
12793: PUSH
12794: LD_INT 7
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 34
12803: PUSH
12804: LD_INT 45
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 34
12813: PUSH
12814: LD_INT 28
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 34
12823: PUSH
12824: LD_INT 47
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// if not tmp then
12847: LD_VAR 0 2
12851: NOT
12852: IFFALSE 12856
// exit ;
12854: GO 12885
// for i in tmp do
12856: LD_ADDR_VAR 0 1
12860: PUSH
12861: LD_VAR 0 2
12865: PUSH
12866: FOR_IN
12867: IFFALSE 12883
// begin SetLives ( i , 0 ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 234
// end ;
12881: GO 12866
12883: POP
12884: POP
// end ;
12885: PPOPN 2
12887: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12888: LD_EXP 19
12892: PUSH
12893: LD_EXP 25
12897: AND
12898: IFFALSE 12982
12900: GO 12902
12902: DISABLE
12903: LD_INT 0
12905: PPUSH
12906: PPUSH
// begin enable ;
12907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_OWVAR 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 32
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: ST_TO_ADDR
// if not tmp then
12944: LD_VAR 0 2
12948: NOT
12949: IFFALSE 12953
// exit ;
12951: GO 12982
// for i in tmp do
12953: LD_ADDR_VAR 0 1
12957: PUSH
12958: LD_VAR 0 2
12962: PUSH
12963: FOR_IN
12964: IFFALSE 12980
// begin SetLives ( i , 0 ) ;
12966: LD_VAR 0 1
12970: PPUSH
12971: LD_INT 0
12973: PPUSH
12974: CALL_OW 234
// end ;
12978: GO 12963
12980: POP
12981: POP
// end ;
12982: PPOPN 2
12984: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12985: LD_EXP 19
12989: PUSH
12990: LD_EXP 22
12994: AND
12995: IFFALSE 13088
12997: GO 12999
12999: DISABLE
13000: LD_INT 0
13002: PPUSH
// begin enable ;
13003: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13004: LD_ADDR_VAR 0 1
13008: PUSH
13009: LD_INT 22
13011: PUSH
13012: LD_OWVAR 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 5
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 25
13036: PUSH
13037: LD_INT 9
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PPUSH
13064: CALL_OW 69
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13086
// begin SetClass ( i , 1 ) ;
13072: LD_VAR 0 1
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 336
// end ;
13084: GO 13069
13086: POP
13087: POP
// end ;
13088: PPOPN 1
13090: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13091: LD_EXP 19
13095: PUSH
13096: LD_EXP 23
13100: AND
13101: PUSH
13102: LD_OWVAR 65
13106: PUSH
13107: LD_INT 7
13109: LESS
13110: AND
13111: IFFALSE 13125
13113: GO 13115
13115: DISABLE
// begin enable ;
13116: ENABLE
// game_speed := 7 ;
13117: LD_ADDR_OWVAR 65
13121: PUSH
13122: LD_INT 7
13124: ST_TO_ADDR
// end ;
13125: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13126: LD_EXP 19
13130: PUSH
13131: LD_EXP 26
13135: AND
13136: IFFALSE 13338
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
13144: PPUSH
13145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_INT 81
13153: PUSH
13154: LD_OWVAR 2
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 21
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: ST_TO_ADDR
// if not tmp then
13182: LD_VAR 0 3
13186: NOT
13187: IFFALSE 13191
// exit ;
13189: GO 13338
// if tmp > 5 then
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 5
13198: GREATER
13199: IFFALSE 13211
// k := 5 else
13201: LD_ADDR_VAR 0 2
13205: PUSH
13206: LD_INT 5
13208: ST_TO_ADDR
13209: GO 13221
// k := tmp ;
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_VAR 0 3
13220: ST_TO_ADDR
// for i := 1 to k do
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: DOUBLE
13227: LD_INT 1
13229: DEC
13230: ST_TO_ADDR
13231: LD_VAR 0 2
13235: PUSH
13236: FOR_TO
13237: IFFALSE 13336
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_VAR 0 1
13248: ARRAY
13249: PPUSH
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 4
13257: MOD
13258: PUSH
13259: LD_INT 1
13261: PLUS
13262: PPUSH
13263: CALL_OW 259
13267: PUSH
13268: LD_INT 10
13270: LESS
13271: IFFALSE 13334
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13273: LD_VAR 0 3
13277: PUSH
13278: LD_VAR 0 1
13282: ARRAY
13283: PPUSH
13284: LD_VAR 0 1
13288: PUSH
13289: LD_INT 4
13291: MOD
13292: PUSH
13293: LD_INT 1
13295: PLUS
13296: PPUSH
13297: LD_VAR 0 3
13301: PUSH
13302: LD_VAR 0 1
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 4
13315: MOD
13316: PUSH
13317: LD_INT 1
13319: PLUS
13320: PPUSH
13321: CALL_OW 259
13325: PUSH
13326: LD_INT 1
13328: PLUS
13329: PPUSH
13330: CALL_OW 237
13334: GO 13236
13336: POP
13337: POP
// end ;
13338: PPOPN 3
13340: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13341: LD_EXP 19
13345: PUSH
13346: LD_EXP 27
13350: AND
13351: IFFALSE 13371
13353: GO 13355
13355: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13356: LD_INT 4
13358: PPUSH
13359: LD_OWVAR 2
13363: PPUSH
13364: LD_INT 0
13366: PPUSH
13367: CALL_OW 324
13371: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13372: LD_EXP 19
13376: PUSH
13377: LD_EXP 56
13381: AND
13382: IFFALSE 13402
13384: GO 13386
13386: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13387: LD_INT 19
13389: PPUSH
13390: LD_OWVAR 2
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 324
13402: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13403: LD_EXP 19
13407: PUSH
13408: LD_EXP 28
13412: AND
13413: IFFALSE 13515
13415: GO 13417
13417: DISABLE
13418: LD_INT 0
13420: PPUSH
13421: PPUSH
// begin enable ;
13422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_INT 22
13430: PUSH
13431: LD_OWVAR 2
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: LD_INT 34
13445: PUSH
13446: LD_INT 11
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 34
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: ST_TO_ADDR
// if not tmp then
13477: LD_VAR 0 2
13481: NOT
13482: IFFALSE 13486
// exit ;
13484: GO 13515
// for i in tmp do
13486: LD_ADDR_VAR 0 1
13490: PUSH
13491: LD_VAR 0 2
13495: PUSH
13496: FOR_IN
13497: IFFALSE 13513
// begin SetLives ( i , 0 ) ;
13499: LD_VAR 0 1
13503: PPUSH
13504: LD_INT 0
13506: PPUSH
13507: CALL_OW 234
// end ;
13511: GO 13496
13513: POP
13514: POP
// end ;
13515: PPOPN 2
13517: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13518: LD_EXP 19
13522: PUSH
13523: LD_EXP 29
13527: AND
13528: IFFALSE 13548
13530: GO 13532
13532: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13533: LD_INT 32
13535: PPUSH
13536: LD_OWVAR 2
13540: PPUSH
13541: LD_INT 0
13543: PPUSH
13544: CALL_OW 324
13548: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13549: LD_EXP 19
13553: PUSH
13554: LD_EXP 30
13558: AND
13559: IFFALSE 13740
13561: GO 13563
13563: DISABLE
13564: LD_INT 0
13566: PPUSH
13567: PPUSH
13568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13569: LD_ADDR_VAR 0 2
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_OWVAR 2
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 33
13588: PUSH
13589: LD_INT 3
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: ST_TO_ADDR
// if not tmp then
13605: LD_VAR 0 2
13609: NOT
13610: IFFALSE 13614
// exit ;
13612: GO 13740
// side := 0 ;
13614: LD_ADDR_VAR 0 3
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// for i := 1 to 8 do
13622: LD_ADDR_VAR 0 1
13626: PUSH
13627: DOUBLE
13628: LD_INT 1
13630: DEC
13631: ST_TO_ADDR
13632: LD_INT 8
13634: PUSH
13635: FOR_TO
13636: IFFALSE 13684
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13638: LD_OWVAR 2
13642: PUSH
13643: LD_VAR 0 1
13647: NONEQUAL
13648: PUSH
13649: LD_OWVAR 2
13653: PPUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 81
13663: PUSH
13664: LD_INT 2
13666: EQUAL
13667: AND
13668: IFFALSE 13682
// begin side := i ;
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_VAR 0 1
13679: ST_TO_ADDR
// break ;
13680: GO 13684
// end ;
13682: GO 13635
13684: POP
13685: POP
// if not side then
13686: LD_VAR 0 3
13690: NOT
13691: IFFALSE 13695
// exit ;
13693: GO 13740
// for i := 1 to tmp do
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: DOUBLE
13701: LD_INT 1
13703: DEC
13704: ST_TO_ADDR
13705: LD_VAR 0 2
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13738
// if Prob ( 60 ) then
13713: LD_INT 60
13715: PPUSH
13716: CALL_OW 13
13720: IFFALSE 13736
// SetSide ( i , side ) ;
13722: LD_VAR 0 1
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: CALL_OW 235
13736: GO 13710
13738: POP
13739: POP
// end ;
13740: PPOPN 3
13742: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13743: LD_EXP 19
13747: PUSH
13748: LD_EXP 32
13752: AND
13753: IFFALSE 13872
13755: GO 13757
13757: DISABLE
13758: LD_INT 0
13760: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13761: LD_ADDR_VAR 0 1
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_OWVAR 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 3
13790: PUSH
13791: LD_INT 23
13793: PUSH
13794: LD_INT 0
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13870
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 257
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 3
13836: PUSH
13837: LD_INT 4
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: IN
13846: IFFALSE 13868
// SetClass ( un , rand ( 1 , 4 ) ) ;
13848: LD_VAR 0 1
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: LD_INT 4
13858: PPUSH
13859: CALL_OW 12
13863: PPUSH
13864: CALL_OW 336
13868: GO 13815
13870: POP
13871: POP
// end ;
13872: PPOPN 1
13874: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13875: LD_EXP 19
13879: PUSH
13880: LD_EXP 31
13884: AND
13885: IFFALSE 13964
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13893: LD_ADDR_VAR 0 1
13897: PUSH
13898: LD_INT 22
13900: PUSH
13901: LD_OWVAR 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 3
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: ST_TO_ADDR
// if not tmp then
13929: LD_VAR 0 1
13933: NOT
13934: IFFALSE 13938
// exit ;
13936: GO 13964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13938: LD_VAR 0 1
13942: PUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 12
13955: ARRAY
13956: PPUSH
13957: LD_INT 100
13959: PPUSH
13960: CALL_OW 234
// end ;
13964: PPOPN 1
13966: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13967: LD_EXP 19
13971: PUSH
13972: LD_EXP 33
13976: AND
13977: IFFALSE 14075
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13985: LD_ADDR_VAR 0 1
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_OWVAR 2
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 69
14020: ST_TO_ADDR
// if not tmp then
14021: LD_VAR 0 1
14025: NOT
14026: IFFALSE 14030
// exit ;
14028: GO 14075
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 1
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 12
14047: ARRAY
14048: PPUSH
14049: LD_INT 1
14051: PPUSH
14052: LD_INT 4
14054: PPUSH
14055: CALL_OW 12
14059: PPUSH
14060: LD_INT 3000
14062: PPUSH
14063: LD_INT 9000
14065: PPUSH
14066: CALL_OW 12
14070: PPUSH
14071: CALL_OW 492
// end ;
14075: PPOPN 1
14077: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14078: LD_EXP 19
14082: PUSH
14083: LD_EXP 34
14087: AND
14088: IFFALSE 14108
14090: GO 14092
14092: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14093: LD_INT 1
14095: PPUSH
14096: LD_OWVAR 2
14100: PPUSH
14101: LD_INT 0
14103: PPUSH
14104: CALL_OW 324
14108: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14109: LD_EXP 19
14113: PUSH
14114: LD_EXP 35
14118: AND
14119: IFFALSE 14202
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
14127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_OWVAR 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PPUSH
14159: CALL_OW 69
14163: ST_TO_ADDR
// if not tmp then
14164: LD_VAR 0 2
14168: NOT
14169: IFFALSE 14173
// exit ;
14171: GO 14202
// for i in tmp do
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_VAR 0 2
14182: PUSH
14183: FOR_IN
14184: IFFALSE 14200
// SetBLevel ( i , 10 ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_INT 10
14193: PPUSH
14194: CALL_OW 241
14198: GO 14183
14200: POP
14201: POP
// end ;
14202: PPOPN 2
14204: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14205: LD_EXP 19
14209: PUSH
14210: LD_EXP 36
14214: AND
14215: IFFALSE 14326
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14225: LD_ADDR_VAR 0 3
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 25
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 3
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14326
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// if Crawls ( un ) then
14294: LD_VAR 0 2
14298: PPUSH
14299: CALL_OW 318
14303: IFFALSE 14314
// ComWalk ( un ) ;
14305: LD_VAR 0 2
14309: PPUSH
14310: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_INT 5
14321: PPUSH
14322: CALL_OW 336
// end ;
14326: PPOPN 3
14328: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14329: LD_EXP 19
14333: PUSH
14334: LD_EXP 37
14338: AND
14339: PUSH
14340: LD_OWVAR 67
14344: PUSH
14345: LD_INT 3
14347: LESS
14348: AND
14349: IFFALSE 14368
14351: GO 14353
14353: DISABLE
// Difficulty := Difficulty + 1 ;
14354: LD_ADDR_OWVAR 67
14358: PUSH
14359: LD_OWVAR 67
14363: PUSH
14364: LD_INT 1
14366: PLUS
14367: ST_TO_ADDR
14368: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14369: LD_EXP 19
14373: PUSH
14374: LD_EXP 38
14378: AND
14379: IFFALSE 14482
14381: GO 14383
14383: DISABLE
14384: LD_INT 0
14386: PPUSH
// begin for i := 1 to 5 do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_INT 5
14399: PUSH
14400: FOR_TO
14401: IFFALSE 14480
// begin uc_nation := nation_nature ;
14403: LD_ADDR_OWVAR 21
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// uc_side := 0 ;
14411: LD_ADDR_OWVAR 20
14415: PUSH
14416: LD_INT 0
14418: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14419: LD_ADDR_OWVAR 29
14423: PUSH
14424: LD_INT 12
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: ST_TO_ADDR
// hc_agressivity := 20 ;
14434: LD_ADDR_OWVAR 35
14438: PUSH
14439: LD_INT 20
14441: ST_TO_ADDR
// hc_class := class_tiger ;
14442: LD_ADDR_OWVAR 28
14446: PUSH
14447: LD_INT 14
14449: ST_TO_ADDR
// hc_gallery :=  ;
14450: LD_ADDR_OWVAR 33
14454: PUSH
14455: LD_STRING 
14457: ST_TO_ADDR
// hc_name :=  ;
14458: LD_ADDR_OWVAR 26
14462: PUSH
14463: LD_STRING 
14465: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14466: CALL_OW 44
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 51
// end ;
14478: GO 14400
14480: POP
14481: POP
// end ;
14482: PPOPN 1
14484: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14485: LD_EXP 19
14489: PUSH
14490: LD_EXP 39
14494: AND
14495: IFFALSE 14504
14497: GO 14499
14499: DISABLE
// StreamSibBomb ;
14500: CALL 14505 0 0
14504: END
// export function StreamSibBomb ; var i , x , y ; begin
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
14509: PPUSH
14510: PPUSH
// result := false ;
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// for i := 1 to 16 do
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: DOUBLE
14525: LD_INT 1
14527: DEC
14528: ST_TO_ADDR
14529: LD_INT 16
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14732
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_INT 10
14542: PUSH
14543: LD_INT 20
14545: PUSH
14546: LD_INT 30
14548: PUSH
14549: LD_INT 40
14551: PUSH
14552: LD_INT 50
14554: PUSH
14555: LD_INT 60
14557: PUSH
14558: LD_INT 70
14560: PUSH
14561: LD_INT 80
14563: PUSH
14564: LD_INT 90
14566: PUSH
14567: LD_INT 100
14569: PUSH
14570: LD_INT 110
14572: PUSH
14573: LD_INT 120
14575: PUSH
14576: LD_INT 130
14578: PUSH
14579: LD_INT 140
14581: PUSH
14582: LD_INT 150
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 1
14604: PPUSH
14605: LD_INT 15
14607: PPUSH
14608: CALL_OW 12
14612: ARRAY
14613: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14614: LD_ADDR_VAR 0 4
14618: PUSH
14619: LD_INT 10
14621: PUSH
14622: LD_INT 20
14624: PUSH
14625: LD_INT 30
14627: PUSH
14628: LD_INT 40
14630: PUSH
14631: LD_INT 50
14633: PUSH
14634: LD_INT 60
14636: PUSH
14637: LD_INT 70
14639: PUSH
14640: LD_INT 80
14642: PUSH
14643: LD_INT 90
14645: PUSH
14646: LD_INT 100
14648: PUSH
14649: LD_INT 110
14651: PUSH
14652: LD_INT 120
14654: PUSH
14655: LD_INT 130
14657: PUSH
14658: LD_INT 140
14660: PUSH
14661: LD_INT 150
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 1
14683: PPUSH
14684: LD_INT 15
14686: PPUSH
14687: CALL_OW 12
14691: ARRAY
14692: ST_TO_ADDR
// if ValidHex ( x , y ) then
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_VAR 0 4
14702: PPUSH
14703: CALL_OW 488
14707: IFFALSE 14730
// begin result := [ x , y ] ;
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_VAR 0 3
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
// break ;
14728: GO 14732
// end ; end ;
14730: GO 14532
14732: POP
14733: POP
// if result then
14734: LD_VAR 0 1
14738: IFFALSE 14798
// begin ToLua ( playSibBomb() ) ;
14740: LD_STRING playSibBomb()
14742: PPUSH
14743: CALL_OW 559
// wait ( 0 0$14 ) ;
14747: LD_INT 490
14749: PPUSH
14750: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14754: LD_VAR 0 1
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 1
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PPUSH
14772: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: PPUSH
14794: CALL_OW 429
// end ; end ;
14798: LD_VAR 0 1
14802: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14803: LD_EXP 19
14807: PUSH
14808: LD_EXP 41
14812: AND
14813: IFFALSE 14825
14815: GO 14817
14817: DISABLE
// YouLost (  ) ;
14818: LD_STRING 
14820: PPUSH
14821: CALL_OW 104
14825: END
// every 0 0$1 trigger StreamModeActive and sFog do
14826: LD_EXP 19
14830: PUSH
14831: LD_EXP 40
14835: AND
14836: IFFALSE 14850
14838: GO 14840
14840: DISABLE
// FogOff ( your_side ) ;
14841: LD_OWVAR 2
14845: PPUSH
14846: CALL_OW 344
14850: END
// every 0 0$1 trigger StreamModeActive and sSun do
14851: LD_EXP 19
14855: PUSH
14856: LD_EXP 42
14860: AND
14861: IFFALSE 14889
14863: GO 14865
14865: DISABLE
// begin solar_recharge_percent := 0 ;
14866: LD_ADDR_OWVAR 79
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14874: LD_INT 10500
14876: PPUSH
14877: CALL_OW 67
// solar_recharge_percent := 100 ;
14881: LD_ADDR_OWVAR 79
14885: PUSH
14886: LD_INT 100
14888: ST_TO_ADDR
// end ;
14889: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14890: LD_EXP 19
14894: PUSH
14895: LD_EXP 43
14899: AND
14900: IFFALSE 15139
14902: GO 14904
14904: DISABLE
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
14909: PPUSH
// begin tmp := [ ] ;
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: EMPTY
14916: ST_TO_ADDR
// for i := 1 to 6 do
14917: LD_ADDR_VAR 0 1
14921: PUSH
14922: DOUBLE
14923: LD_INT 1
14925: DEC
14926: ST_TO_ADDR
14927: LD_INT 6
14929: PUSH
14930: FOR_TO
14931: IFFALSE 15036
// begin uc_nation := nation_nature ;
14933: LD_ADDR_OWVAR 21
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// uc_side := 0 ;
14941: LD_ADDR_OWVAR 20
14945: PUSH
14946: LD_INT 0
14948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14949: LD_ADDR_OWVAR 29
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 12
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
// hc_agressivity := 20 ;
14964: LD_ADDR_OWVAR 35
14968: PUSH
14969: LD_INT 20
14971: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14972: LD_ADDR_OWVAR 28
14976: PUSH
14977: LD_INT 17
14979: ST_TO_ADDR
// hc_gallery :=  ;
14980: LD_ADDR_OWVAR 33
14984: PUSH
14985: LD_STRING 
14987: ST_TO_ADDR
// hc_name :=  ;
14988: LD_ADDR_OWVAR 26
14992: PUSH
14993: LD_STRING 
14995: ST_TO_ADDR
// un := CreateHuman ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: CALL_OW 44
15005: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15006: LD_VAR 0 2
15010: PPUSH
15011: LD_INT 1
15013: PPUSH
15014: CALL_OW 51
// tmp := tmp ^ un ;
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_VAR 0 3
15027: PUSH
15028: LD_VAR 0 2
15032: ADD
15033: ST_TO_ADDR
// end ;
15034: GO 14930
15036: POP
15037: POP
// repeat wait ( 0 0$1 ) ;
15038: LD_INT 35
15040: PPUSH
15041: CALL_OW 67
// for un in tmp do
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_VAR 0 3
15054: PUSH
15055: FOR_IN
15056: IFFALSE 15130
// begin if IsDead ( un ) then
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 301
15067: IFFALSE 15087
// begin tmp := tmp diff un ;
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_VAR 0 2
15083: DIFF
15084: ST_TO_ADDR
// continue ;
15085: GO 15055
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PPUSH
15114: LD_VAR 0 2
15118: PPUSH
15119: CALL_OW 74
15123: PPUSH
15124: CALL_OW 115
// end ;
15128: GO 15055
15130: POP
15131: POP
// until not tmp ;
15132: LD_VAR 0 3
15136: NOT
15137: IFFALSE 15038
// end ;
15139: PPOPN 3
15141: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15142: LD_EXP 19
15146: PUSH
15147: LD_EXP 44
15151: AND
15152: IFFALSE 15206
15154: GO 15156
15156: DISABLE
// begin ToLua ( displayTroll(); ) ;
15157: LD_STRING displayTroll();
15159: PPUSH
15160: CALL_OW 559
// wait ( 3 3$00 ) ;
15164: LD_INT 6300
15166: PPUSH
15167: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15171: LD_STRING hideTroll();
15173: PPUSH
15174: CALL_OW 559
// wait ( 1 1$00 ) ;
15178: LD_INT 2100
15180: PPUSH
15181: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15185: LD_STRING displayTroll();
15187: PPUSH
15188: CALL_OW 559
// wait ( 1 1$00 ) ;
15192: LD_INT 2100
15194: PPUSH
15195: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15199: LD_STRING hideTroll();
15201: PPUSH
15202: CALL_OW 559
// end ;
15206: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15207: LD_EXP 19
15211: PUSH
15212: LD_EXP 45
15216: AND
15217: IFFALSE 15280
15219: GO 15221
15221: DISABLE
15222: LD_INT 0
15224: PPUSH
// begin p := 0 ;
15225: LD_ADDR_VAR 0 1
15229: PUSH
15230: LD_INT 0
15232: ST_TO_ADDR
// repeat game_speed := 1 ;
15233: LD_ADDR_OWVAR 65
15237: PUSH
15238: LD_INT 1
15240: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15241: LD_INT 35
15243: PPUSH
15244: CALL_OW 67
// p := p + 1 ;
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_VAR 0 1
15257: PUSH
15258: LD_INT 1
15260: PLUS
15261: ST_TO_ADDR
// until p >= 60 ;
15262: LD_VAR 0 1
15266: PUSH
15267: LD_INT 60
15269: GREATEREQUAL
15270: IFFALSE 15233
// game_speed := 4 ;
15272: LD_ADDR_OWVAR 65
15276: PUSH
15277: LD_INT 4
15279: ST_TO_ADDR
// end ;
15280: PPOPN 1
15282: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15283: LD_EXP 19
15287: PUSH
15288: LD_EXP 46
15292: AND
15293: IFFALSE 15439
15295: GO 15297
15297: DISABLE
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 0
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PPUSH
15351: CALL_OW 69
15355: ST_TO_ADDR
// if not depot then
15356: LD_VAR 0 1
15360: NOT
15361: IFFALSE 15365
// exit ;
15363: GO 15439
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15365: LD_ADDR_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 1
15377: PPUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 12
15387: ARRAY
15388: PPUSH
15389: CALL_OW 274
15393: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15394: LD_VAR 0 2
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 0
15404: PPUSH
15405: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_INT 2
15416: PPUSH
15417: LD_INT 0
15419: PPUSH
15420: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15424: LD_VAR 0 2
15428: PPUSH
15429: LD_INT 3
15431: PPUSH
15432: LD_INT 0
15434: PPUSH
15435: CALL_OW 277
// end ;
15439: PPOPN 2
15441: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15442: LD_EXP 19
15446: PUSH
15447: LD_EXP 47
15451: AND
15452: IFFALSE 15549
15454: GO 15456
15456: DISABLE
15457: LD_INT 0
15459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15460: LD_ADDR_VAR 0 1
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_OWVAR 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 23
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: PPUSH
15509: CALL_OW 69
15513: ST_TO_ADDR
// if not tmp then
15514: LD_VAR 0 1
15518: NOT
15519: IFFALSE 15523
// exit ;
15521: GO 15549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15523: LD_VAR 0 1
15527: PUSH
15528: LD_INT 1
15530: PPUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 12
15540: ARRAY
15541: PPUSH
15542: LD_INT 200
15544: PPUSH
15545: CALL_OW 234
// end ;
15549: PPOPN 1
15551: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15552: LD_EXP 19
15556: PUSH
15557: LD_EXP 48
15561: AND
15562: IFFALSE 15641
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15570: LD_ADDR_VAR 0 1
15574: PUSH
15575: LD_INT 22
15577: PUSH
15578: LD_OWVAR 2
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 69
15605: ST_TO_ADDR
// if not tmp then
15606: LD_VAR 0 1
15610: NOT
15611: IFFALSE 15615
// exit ;
15613: GO 15641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 12
15632: ARRAY
15633: PPUSH
15634: LD_INT 60
15636: PPUSH
15637: CALL_OW 234
// end ;
15641: PPOPN 1
15643: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15644: LD_EXP 19
15648: PUSH
15649: LD_EXP 49
15653: AND
15654: IFFALSE 15753
15656: GO 15658
15658: DISABLE
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
// begin enable ;
15663: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_OWVAR 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 61
15683: PUSH
15684: EMPTY
15685: LIST
15686: PUSH
15687: LD_INT 33
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 1
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15753
// for i in tmp do
15716: LD_ADDR_VAR 0 2
15720: PUSH
15721: LD_VAR 0 1
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15751
// if IsControledBy ( i ) then
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 312
15738: IFFALSE 15749
// ComUnlink ( i ) ;
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL_OW 136
15749: GO 15726
15751: POP
15752: POP
// end ;
15753: PPOPN 2
15755: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15756: LD_EXP 19
15760: PUSH
15761: LD_EXP 50
15765: AND
15766: IFFALSE 15906
15768: GO 15770
15770: DISABLE
15771: LD_INT 0
15773: PPUSH
15774: PPUSH
// begin ToLua ( displayPowell(); ) ;
15775: LD_STRING displayPowell();
15777: PPUSH
15778: CALL_OW 559
// uc_side := 0 ;
15782: LD_ADDR_OWVAR 20
15786: PUSH
15787: LD_INT 0
15789: ST_TO_ADDR
// uc_nation := 2 ;
15790: LD_ADDR_OWVAR 21
15794: PUSH
15795: LD_INT 2
15797: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15798: LD_ADDR_OWVAR 37
15802: PUSH
15803: LD_INT 14
15805: ST_TO_ADDR
// vc_engine := engine_siberite ;
15806: LD_ADDR_OWVAR 39
15810: PUSH
15811: LD_INT 3
15813: ST_TO_ADDR
// vc_control := control_apeman ;
15814: LD_ADDR_OWVAR 38
15818: PUSH
15819: LD_INT 5
15821: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15822: LD_ADDR_OWVAR 40
15826: PUSH
15827: LD_INT 29
15829: ST_TO_ADDR
// un := CreateVehicle ;
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: CALL_OW 45
15839: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15840: LD_VAR 0 2
15844: PPUSH
15845: LD_INT 1
15847: PPUSH
15848: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15852: LD_INT 35
15854: PPUSH
15855: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15859: LD_VAR 0 2
15863: PPUSH
15864: LD_INT 22
15866: PUSH
15867: LD_OWVAR 2
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: PPUSH
15881: LD_VAR 0 2
15885: PPUSH
15886: CALL_OW 74
15890: PPUSH
15891: CALL_OW 115
// until IsDead ( un ) ;
15895: LD_VAR 0 2
15899: PPUSH
15900: CALL_OW 301
15904: IFFALSE 15852
// end ;
15906: PPOPN 2
15908: END
// every 0 0$1 trigger StreamModeActive and sStu do
15909: LD_EXP 19
15913: PUSH
15914: LD_EXP 58
15918: AND
15919: IFFALSE 15935
15921: GO 15923
15923: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15924: LD_STRING displayStucuk();
15926: PPUSH
15927: CALL_OW 559
// ResetFog ;
15931: CALL_OW 335
// end ;
15935: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15936: LD_EXP 19
15940: PUSH
15941: LD_EXP 51
15945: AND
15946: IFFALSE 16087
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 2
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16087
// un := tmp [ rand ( 1 , tmp ) ] ;
16000: LD_ADDR_VAR 0 1
16004: PUSH
16005: LD_VAR 0 2
16009: PUSH
16010: LD_INT 1
16012: PPUSH
16013: LD_VAR 0 2
16017: PPUSH
16018: CALL_OW 12
16022: ARRAY
16023: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 0
16031: PPUSH
16032: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16036: LD_VAR 0 1
16040: PPUSH
16041: LD_OWVAR 3
16045: PUSH
16046: LD_VAR 0 1
16050: DIFF
16051: PPUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 74
16061: PPUSH
16062: CALL_OW 115
// wait ( 0 0$20 ) ;
16066: LD_INT 700
16068: PPUSH
16069: CALL_OW 67
// SetSide ( un , your_side ) ;
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_OWVAR 2
16082: PPUSH
16083: CALL_OW 235
// end ;
16087: PPOPN 2
16089: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16090: LD_EXP 19
16094: PUSH
16095: LD_EXP 52
16099: AND
16100: IFFALSE 16206
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: LD_INT 22
16115: PUSH
16116: LD_OWVAR 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: LD_INT 30
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: ST_TO_ADDR
// if not depot then
16162: LD_VAR 0 1
16166: NOT
16167: IFFALSE 16171
// exit ;
16169: GO 16206
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16171: LD_VAR 0 1
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 250
16184: PPUSH
16185: LD_VAR 0 1
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: CALL_OW 251
16198: PPUSH
16199: LD_INT 70
16201: PPUSH
16202: CALL_OW 495
// end ;
16206: PPOPN 1
16208: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16209: LD_EXP 19
16213: PUSH
16214: LD_EXP 53
16218: AND
16219: IFFALSE 16430
16221: GO 16223
16223: DISABLE
16224: LD_INT 0
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16231: LD_ADDR_VAR 0 5
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: ST_TO_ADDR
// if not tmp then
16267: LD_VAR 0 5
16271: NOT
16272: IFFALSE 16276
// exit ;
16274: GO 16430
// for i in tmp do
16276: LD_ADDR_VAR 0 1
16280: PUSH
16281: LD_VAR 0 5
16285: PUSH
16286: FOR_IN
16287: IFFALSE 16428
// begin d := rand ( 0 , 5 ) ;
16289: LD_ADDR_VAR 0 4
16293: PUSH
16294: LD_INT 0
16296: PPUSH
16297: LD_INT 5
16299: PPUSH
16300: CALL_OW 12
16304: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16305: LD_ADDR_VAR 0 2
16309: PUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 250
16319: PPUSH
16320: LD_VAR 0 4
16324: PPUSH
16325: LD_INT 3
16327: PPUSH
16328: LD_INT 12
16330: PPUSH
16331: CALL_OW 12
16335: PPUSH
16336: CALL_OW 272
16340: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16341: LD_ADDR_VAR 0 3
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 251
16355: PPUSH
16356: LD_VAR 0 4
16360: PPUSH
16361: LD_INT 3
16363: PPUSH
16364: LD_INT 12
16366: PPUSH
16367: CALL_OW 12
16371: PPUSH
16372: CALL_OW 273
16376: ST_TO_ADDR
// if ValidHex ( x , y ) then
16377: LD_VAR 0 2
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: CALL_OW 488
16391: IFFALSE 16426
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: LD_INT 3
16410: PPUSH
16411: LD_INT 6
16413: PPUSH
16414: CALL_OW 12
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 483
// end ;
16426: GO 16286
16428: POP
16429: POP
// end ;
16430: PPOPN 5
16432: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16433: LD_EXP 19
16437: PUSH
16438: LD_EXP 54
16442: AND
16443: IFFALSE 16537
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
16451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: LD_INT 22
16459: PUSH
16460: LD_OWVAR 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 32
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 2
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 16537
// for i in tmp do
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16535
// SetFuel ( i , 0 ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 0
16528: PPUSH
16529: CALL_OW 240
16533: GO 16518
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16540: LD_EXP 19
16544: PUSH
16545: LD_EXP 55
16549: AND
16550: IFFALSE 16616
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_INT 22
16565: PUSH
16566: LD_OWVAR 2
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 30
16577: PUSH
16578: LD_INT 29
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: ST_TO_ADDR
// if not tmp then
16594: LD_VAR 0 1
16598: NOT
16599: IFFALSE 16603
// exit ;
16601: GO 16616
// DestroyUnit ( tmp [ 1 ] ) ;
16603: LD_VAR 0 1
16607: PUSH
16608: LD_INT 1
16610: ARRAY
16611: PPUSH
16612: CALL_OW 65
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16619: LD_EXP 19
16623: PUSH
16624: LD_EXP 57
16628: AND
16629: IFFALSE 16758
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
// begin uc_side := 0 ;
16637: LD_ADDR_OWVAR 20
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// uc_nation := nation_arabian ;
16645: LD_ADDR_OWVAR 21
16649: PUSH
16650: LD_INT 2
16652: ST_TO_ADDR
// hc_gallery :=  ;
16653: LD_ADDR_OWVAR 33
16657: PUSH
16658: LD_STRING 
16660: ST_TO_ADDR
// hc_name :=  ;
16661: LD_ADDR_OWVAR 26
16665: PUSH
16666: LD_STRING 
16668: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16669: LD_INT 1
16671: PPUSH
16672: LD_INT 11
16674: PPUSH
16675: LD_INT 10
16677: PPUSH
16678: CALL_OW 380
// un := CreateHuman ;
16682: LD_ADDR_VAR 0 1
16686: PUSH
16687: CALL_OW 44
16691: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16704: LD_INT 35
16706: PPUSH
16707: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16711: LD_VAR 0 1
16715: PPUSH
16716: LD_INT 22
16718: PUSH
16719: LD_OWVAR 2
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PPUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 74
16742: PPUSH
16743: CALL_OW 115
// until IsDead ( un ) ;
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 301
16756: IFFALSE 16704
// end ;
16758: PPOPN 1
16760: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16761: LD_EXP 19
16765: PUSH
16766: LD_EXP 59
16770: AND
16771: IFFALSE 16783
16773: GO 16775
16775: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16776: LD_STRING earthquake(getX(game), 0, 32)
16778: PPUSH
16779: CALL_OW 559
16783: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16784: LD_EXP 19
16788: PUSH
16789: LD_EXP 60
16793: AND
16794: IFFALSE 16885
16796: GO 16798
16798: DISABLE
16799: LD_INT 0
16801: PPUSH
// begin enable ;
16802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_OWVAR 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 33
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// if not tmp then
16850: LD_VAR 0 1
16854: NOT
16855: IFFALSE 16859
// exit ;
16857: GO 16885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16859: LD_VAR 0 1
16863: PUSH
16864: LD_INT 1
16866: PPUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 12
16876: ARRAY
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 234
// end ;
16885: PPOPN 1
16887: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16888: LD_EXP 19
16892: PUSH
16893: LD_EXP 61
16897: AND
16898: IFFALSE 17039
16900: GO 16902
16902: DISABLE
16903: LD_INT 0
16905: PPUSH
16906: PPUSH
16907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16908: LD_ADDR_VAR 0 3
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_OWVAR 2
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 25
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: ST_TO_ADDR
// if not tmp then
16944: LD_VAR 0 3
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 17039
// un := tmp [ rand ( 1 , tmp ) ] ;
16953: LD_ADDR_VAR 0 2
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_INT 1
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: CALL_OW 12
16975: ARRAY
16976: ST_TO_ADDR
// if Crawls ( un ) then
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 318
16986: IFFALSE 16997
// ComWalk ( un ) ;
16988: LD_VAR 0 2
16992: PPUSH
16993: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16997: LD_VAR 0 2
17001: PPUSH
17002: LD_INT 9
17004: PPUSH
17005: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17009: LD_INT 28
17011: PPUSH
17012: LD_OWVAR 2
17016: PPUSH
17017: LD_INT 2
17019: PPUSH
17020: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17024: LD_INT 29
17026: PPUSH
17027: LD_OWVAR 2
17031: PPUSH
17032: LD_INT 2
17034: PPUSH
17035: CALL_OW 322
// end ;
17039: PPOPN 3
17041: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17042: LD_EXP 19
17046: PUSH
17047: LD_EXP 62
17051: AND
17052: IFFALSE 17163
17054: GO 17056
17056: DISABLE
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
17061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17062: LD_ADDR_VAR 0 3
17066: PUSH
17067: LD_INT 22
17069: PUSH
17070: LD_OWVAR 2
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 25
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PPUSH
17093: CALL_OW 69
17097: ST_TO_ADDR
// if not tmp then
17098: LD_VAR 0 3
17102: NOT
17103: IFFALSE 17107
// exit ;
17105: GO 17163
// un := tmp [ rand ( 1 , tmp ) ] ;
17107: LD_ADDR_VAR 0 2
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 1
17119: PPUSH
17120: LD_VAR 0 3
17124: PPUSH
17125: CALL_OW 12
17129: ARRAY
17130: ST_TO_ADDR
// if Crawls ( un ) then
17131: LD_VAR 0 2
17135: PPUSH
17136: CALL_OW 318
17140: IFFALSE 17151
// ComWalk ( un ) ;
17142: LD_VAR 0 2
17146: PPUSH
17147: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17151: LD_VAR 0 2
17155: PPUSH
17156: LD_INT 8
17158: PPUSH
17159: CALL_OW 336
// end ;
17163: PPOPN 3
17165: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17166: LD_EXP 19
17170: PUSH
17171: LD_EXP 63
17175: AND
17176: IFFALSE 17320
17178: GO 17180
17180: DISABLE
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: LD_INT 34
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 34
17227: PUSH
17228: LD_INT 51
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_INT 32
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 2
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17320
// for i in tmp do
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_VAR 0 2
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17318
// if GetCargo ( i , mat_artifact ) = 0 then
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 4
17290: PPUSH
17291: CALL_OW 289
17295: PUSH
17296: LD_INT 0
17298: EQUAL
17299: IFFALSE 17316
// SetCargo ( i , mat_siberit , 100 ) ;
17301: LD_VAR 0 1
17305: PPUSH
17306: LD_INT 3
17308: PPUSH
17309: LD_INT 100
17311: PPUSH
17312: CALL_OW 290
17316: GO 17280
17318: POP
17319: POP
// end ;
17320: PPOPN 2
17322: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17323: LD_EXP 19
17327: PUSH
17328: LD_EXP 64
17332: AND
17333: IFFALSE 17516
17335: GO 17337
17337: DISABLE
17338: LD_INT 0
17340: PPUSH
17341: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_OWVAR 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: ST_TO_ADDR
// if not tmp then
17364: LD_VAR 0 2
17368: NOT
17369: IFFALSE 17373
// exit ;
17371: GO 17516
// for i := 1 to 2 do
17373: LD_ADDR_VAR 0 1
17377: PUSH
17378: DOUBLE
17379: LD_INT 1
17381: DEC
17382: ST_TO_ADDR
17383: LD_INT 2
17385: PUSH
17386: FOR_TO
17387: IFFALSE 17514
// begin uc_side := your_side ;
17389: LD_ADDR_OWVAR 20
17393: PUSH
17394: LD_OWVAR 2
17398: ST_TO_ADDR
// uc_nation := nation_american ;
17399: LD_ADDR_OWVAR 21
17403: PUSH
17404: LD_INT 1
17406: ST_TO_ADDR
// vc_chassis := us_morphling ;
17407: LD_ADDR_OWVAR 37
17411: PUSH
17412: LD_INT 5
17414: ST_TO_ADDR
// vc_engine := engine_siberite ;
17415: LD_ADDR_OWVAR 39
17419: PUSH
17420: LD_INT 3
17422: ST_TO_ADDR
// vc_control := control_computer ;
17423: LD_ADDR_OWVAR 38
17427: PUSH
17428: LD_INT 3
17430: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17431: LD_ADDR_OWVAR 40
17435: PUSH
17436: LD_INT 10
17438: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17439: LD_VAR 0 2
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PPUSH
17448: CALL_OW 310
17452: NOT
17453: IFFALSE 17500
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17455: CALL_OW 45
17459: PPUSH
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 1
17467: ARRAY
17468: PPUSH
17469: CALL_OW 250
17473: PPUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 251
17487: PPUSH
17488: LD_INT 12
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 50
17498: GO 17512
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17500: CALL_OW 45
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 51
// end ;
17512: GO 17386
17514: POP
17515: POP
// end ;
17516: PPOPN 2
17518: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17519: LD_EXP 19
17523: PUSH
17524: LD_EXP 65
17528: AND
17529: IFFALSE 17751
17531: GO 17533
17533: DISABLE
17534: LD_INT 0
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17542: LD_ADDR_VAR 0 6
17546: PUSH
17547: LD_INT 22
17549: PUSH
17550: LD_OWVAR 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 21
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: LD_INT 23
17574: PUSH
17575: LD_INT 0
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 6
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17751
// s1 := rand ( 1 , 4 ) ;
17605: LD_ADDR_VAR 0 2
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_INT 4
17615: PPUSH
17616: CALL_OW 12
17620: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17621: LD_ADDR_VAR 0 4
17625: PUSH
17626: LD_VAR 0 6
17630: PUSH
17631: LD_INT 1
17633: ARRAY
17634: PPUSH
17635: LD_VAR 0 2
17639: PPUSH
17640: CALL_OW 259
17644: ST_TO_ADDR
// if s1 = 1 then
17645: LD_VAR 0 2
17649: PUSH
17650: LD_INT 1
17652: EQUAL
17653: IFFALSE 17673
// s2 := rand ( 2 , 4 ) else
17655: LD_ADDR_VAR 0 3
17659: PUSH
17660: LD_INT 2
17662: PPUSH
17663: LD_INT 4
17665: PPUSH
17666: CALL_OW 12
17670: ST_TO_ADDR
17671: GO 17681
// s2 := 1 ;
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: LD_INT 1
17680: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17681: LD_ADDR_VAR 0 5
17685: PUSH
17686: LD_VAR 0 6
17690: PUSH
17691: LD_INT 1
17693: ARRAY
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: CALL_OW 259
17704: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17705: LD_VAR 0 6
17709: PUSH
17710: LD_INT 1
17712: ARRAY
17713: PPUSH
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_VAR 0 5
17723: PPUSH
17724: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17728: LD_VAR 0 6
17732: PUSH
17733: LD_INT 1
17735: ARRAY
17736: PPUSH
17737: LD_VAR 0 3
17741: PPUSH
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 237
// end ;
17751: PPOPN 6
17753: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17754: LD_EXP 19
17758: PUSH
17759: LD_EXP 66
17763: AND
17764: IFFALSE 17843
17766: GO 17768
17768: DISABLE
17769: LD_INT 0
17771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17772: LD_ADDR_VAR 0 1
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_OWVAR 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 30
17791: PUSH
17792: LD_INT 3
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: ST_TO_ADDR
// if not tmp then
17808: LD_VAR 0 1
17812: NOT
17813: IFFALSE 17817
// exit ;
17815: GO 17843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17817: LD_VAR 0 1
17821: PUSH
17822: LD_INT 1
17824: PPUSH
17825: LD_VAR 0 1
17829: PPUSH
17830: CALL_OW 12
17834: ARRAY
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 234
// end ;
17843: PPOPN 1
17845: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17846: LD_EXP 19
17850: PUSH
17851: LD_EXP 67
17855: AND
17856: IFFALSE 17968
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_OWVAR 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 30
17887: PUSH
17888: LD_INT 27
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 30
17897: PUSH
17898: LD_INT 26
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 30
17907: PUSH
17908: LD_INT 28
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: ST_TO_ADDR
// if not tmp then
17930: LD_VAR 0 2
17934: NOT
17935: IFFALSE 17939
// exit ;
17937: GO 17968
// for i in tmp do
17939: LD_ADDR_VAR 0 1
17943: PUSH
17944: LD_VAR 0 2
17948: PUSH
17949: FOR_IN
17950: IFFALSE 17966
// SetLives ( i , 1 ) ;
17952: LD_VAR 0 1
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 234
17964: GO 17949
17966: POP
17967: POP
// end ;
17968: PPOPN 2
17970: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17971: LD_EXP 19
17975: PUSH
17976: LD_EXP 68
17980: AND
17981: IFFALSE 18255
17983: GO 17985
17985: DISABLE
17986: LD_INT 0
17988: PPUSH
17989: PPUSH
17990: PPUSH
// begin i := rand ( 1 , 7 ) ;
17991: LD_ADDR_VAR 0 1
17995: PUSH
17996: LD_INT 1
17998: PPUSH
17999: LD_INT 7
18001: PPUSH
18002: CALL_OW 12
18006: ST_TO_ADDR
// case i of 1 :
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 1
18014: DOUBLE
18015: EQUAL
18016: IFTRUE 18020
18018: GO 18030
18020: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18021: LD_STRING earthquake(getX(game), 0, 32)
18023: PPUSH
18024: CALL_OW 559
18028: GO 18255
18030: LD_INT 2
18032: DOUBLE
18033: EQUAL
18034: IFTRUE 18038
18036: GO 18052
18038: POP
// begin ToLua ( displayStucuk(); ) ;
18039: LD_STRING displayStucuk();
18041: PPUSH
18042: CALL_OW 559
// ResetFog ;
18046: CALL_OW 335
// end ; 3 :
18050: GO 18255
18052: LD_INT 3
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18164
18060: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18061: LD_ADDR_VAR 0 2
18065: PUSH
18066: LD_INT 22
18068: PUSH
18069: LD_OWVAR 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 25
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// if not tmp then
18097: LD_VAR 0 2
18101: NOT
18102: IFFALSE 18106
// exit ;
18104: GO 18255
// un := tmp [ rand ( 1 , tmp ) ] ;
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: LD_VAR 0 2
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if Crawls ( un ) then
18130: LD_VAR 0 3
18134: PPUSH
18135: CALL_OW 318
18139: IFFALSE 18150
// ComWalk ( un ) ;
18141: LD_VAR 0 3
18145: PPUSH
18146: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_INT 8
18157: PPUSH
18158: CALL_OW 336
// end ; 4 :
18162: GO 18255
18164: LD_INT 4
18166: DOUBLE
18167: EQUAL
18168: IFTRUE 18172
18170: GO 18233
18172: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18173: LD_ADDR_VAR 0 2
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_OWVAR 2
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 30
18192: PUSH
18193: LD_INT 29
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL_OW 69
18208: ST_TO_ADDR
// if not tmp then
18209: LD_VAR 0 2
18213: NOT
18214: IFFALSE 18218
// exit ;
18216: GO 18255
// DestroyUnit ( tmp [ 1 ] ) ;
18218: LD_VAR 0 2
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: PPUSH
18227: CALL_OW 65
// end ; 5 .. 7 :
18231: GO 18255
18233: LD_INT 5
18235: DOUBLE
18236: GREATEREQUAL
18237: IFFALSE 18245
18239: LD_INT 7
18241: DOUBLE
18242: LESSEQUAL
18243: IFTRUE 18247
18245: GO 18254
18247: POP
// StreamSibBomb ; end ;
18248: CALL 14505 0 0
18252: GO 18255
18254: POP
// end ;
18255: PPOPN 3
18257: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18258: LD_EXP 19
18262: PUSH
18263: LD_EXP 69
18267: AND
18268: IFFALSE 18424
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
18277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18278: LD_ADDR_VAR 0 2
18282: PUSH
18283: LD_INT 81
18285: PUSH
18286: LD_OWVAR 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 21
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 21
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 69
18331: ST_TO_ADDR
// if not tmp then
18332: LD_VAR 0 2
18336: NOT
18337: IFFALSE 18341
// exit ;
18339: GO 18424
// p := 0 ;
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18349: LD_INT 35
18351: PPUSH
18352: CALL_OW 67
// p := p + 1 ;
18356: LD_ADDR_VAR 0 3
18360: PUSH
18361: LD_VAR 0 3
18365: PUSH
18366: LD_INT 1
18368: PLUS
18369: ST_TO_ADDR
// for i in tmp do
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: LD_VAR 0 2
18379: PUSH
18380: FOR_IN
18381: IFFALSE 18412
// if GetLives ( i ) < 1000 then
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 256
18392: PUSH
18393: LD_INT 1000
18395: LESS
18396: IFFALSE 18410
// SetLives ( i , 1000 ) ;
18398: LD_VAR 0 1
18402: PPUSH
18403: LD_INT 1000
18405: PPUSH
18406: CALL_OW 234
18410: GO 18380
18412: POP
18413: POP
// until p > 20 ;
18414: LD_VAR 0 3
18418: PUSH
18419: LD_INT 20
18421: GREATER
18422: IFFALSE 18349
// end ;
18424: PPOPN 3
18426: END
// every 0 0$1 trigger StreamModeActive and sTime do
18427: LD_EXP 19
18431: PUSH
18432: LD_EXP 70
18436: AND
18437: IFFALSE 18472
18439: GO 18441
18441: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18442: LD_INT 28
18444: PPUSH
18445: LD_OWVAR 2
18449: PPUSH
18450: LD_INT 2
18452: PPUSH
18453: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18457: LD_INT 30
18459: PPUSH
18460: LD_OWVAR 2
18464: PPUSH
18465: LD_INT 2
18467: PPUSH
18468: CALL_OW 322
// end ;
18472: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18473: LD_EXP 19
18477: PUSH
18478: LD_EXP 71
18482: AND
18483: IFFALSE 18604
18485: GO 18487
18487: DISABLE
18488: LD_INT 0
18490: PPUSH
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18492: LD_ADDR_VAR 0 2
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 3
18521: PUSH
18522: LD_INT 23
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: PPUSH
18541: CALL_OW 69
18545: ST_TO_ADDR
// if not tmp then
18546: LD_VAR 0 2
18550: NOT
18551: IFFALSE 18555
// exit ;
18553: GO 18604
// for i in tmp do
18555: LD_ADDR_VAR 0 1
18559: PUSH
18560: LD_VAR 0 2
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18602
// begin if Crawls ( i ) then
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 318
18577: IFFALSE 18588
// ComWalk ( i ) ;
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 138
// SetClass ( i , 2 ) ;
18588: LD_VAR 0 1
18592: PPUSH
18593: LD_INT 2
18595: PPUSH
18596: CALL_OW 336
// end ;
18600: GO 18565
18602: POP
18603: POP
// end ;
18604: PPOPN 2
18606: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18607: LD_EXP 19
18611: PUSH
18612: LD_EXP 72
18616: AND
18617: IFFALSE 18898
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
18626: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18627: LD_OWVAR 2
18631: PPUSH
18632: LD_INT 9
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18645: LD_INT 9
18647: PPUSH
18648: LD_OWVAR 2
18652: PPUSH
18653: CALL_OW 343
// uc_side := 9 ;
18657: LD_ADDR_OWVAR 20
18661: PUSH
18662: LD_INT 9
18664: ST_TO_ADDR
// uc_nation := 2 ;
18665: LD_ADDR_OWVAR 21
18669: PUSH
18670: LD_INT 2
18672: ST_TO_ADDR
// hc_name := Dark Warrior ;
18673: LD_ADDR_OWVAR 26
18677: PUSH
18678: LD_STRING Dark Warrior
18680: ST_TO_ADDR
// hc_gallery :=  ;
18681: LD_ADDR_OWVAR 33
18685: PUSH
18686: LD_STRING 
18688: ST_TO_ADDR
// hc_noskilllimit := true ;
18689: LD_ADDR_OWVAR 76
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18697: LD_ADDR_OWVAR 31
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 30
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: ST_TO_ADDR
// un := CreateHuman ;
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: CALL_OW 44
18729: ST_TO_ADDR
// hc_noskilllimit := false ;
18730: LD_ADDR_OWVAR 76
18734: PUSH
18735: LD_INT 0
18737: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18738: LD_VAR 0 3
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL_OW 51
// p := 0 ;
18750: LD_ADDR_VAR 0 2
18754: PUSH
18755: LD_INT 0
18757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18758: LD_INT 35
18760: PPUSH
18761: CALL_OW 67
// p := p + 1 ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_VAR 0 2
18774: PUSH
18775: LD_INT 1
18777: PLUS
18778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18779: LD_VAR 0 3
18783: PPUSH
18784: CALL_OW 256
18788: PUSH
18789: LD_INT 1000
18791: LESS
18792: IFFALSE 18806
// SetLives ( un , 1000 ) ;
18794: LD_VAR 0 3
18798: PPUSH
18799: LD_INT 1000
18801: PPUSH
18802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_INT 81
18813: PUSH
18814: LD_OWVAR 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 91
18825: PUSH
18826: LD_VAR 0 3
18830: PUSH
18831: LD_INT 30
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: CALL_OW 74
18857: PPUSH
18858: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18862: LD_VAR 0 2
18866: PUSH
18867: LD_INT 60
18869: GREATER
18870: PUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: CALL_OW 301
18880: OR
18881: IFFALSE 18758
// if un then
18883: LD_VAR 0 3
18887: IFFALSE 18898
// RemoveUnit ( un ) ;
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL_OW 64
// end ;
18898: PPOPN 3
18900: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18901: LD_INT 0
18903: PPUSH
// case cmd of 301 :
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 301
18911: DOUBLE
18912: EQUAL
18913: IFTRUE 18917
18915: GO 18949
18917: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18918: LD_VAR 0 6
18922: PPUSH
18923: LD_VAR 0 7
18927: PPUSH
18928: LD_VAR 0 8
18932: PPUSH
18933: LD_VAR 0 4
18937: PPUSH
18938: LD_VAR 0 5
18942: PPUSH
18943: CALL 20150 0 5
18947: GO 19070
18949: LD_INT 302
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18994
18957: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18958: LD_VAR 0 6
18962: PPUSH
18963: LD_VAR 0 7
18967: PPUSH
18968: LD_VAR 0 8
18972: PPUSH
18973: LD_VAR 0 9
18977: PPUSH
18978: LD_VAR 0 4
18982: PPUSH
18983: LD_VAR 0 5
18987: PPUSH
18988: CALL 20241 0 6
18992: GO 19070
18994: LD_INT 303
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19039
19002: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19003: LD_VAR 0 6
19007: PPUSH
19008: LD_VAR 0 7
19012: PPUSH
19013: LD_VAR 0 8
19017: PPUSH
19018: LD_VAR 0 9
19022: PPUSH
19023: LD_VAR 0 4
19027: PPUSH
19028: LD_VAR 0 5
19032: PPUSH
19033: CALL 19075 0 6
19037: GO 19070
19039: LD_INT 304
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19069
19047: POP
// hHackTeleport ( unit , x , y ) ; end ;
19048: LD_VAR 0 2
19052: PPUSH
19053: LD_VAR 0 4
19057: PPUSH
19058: LD_VAR 0 5
19062: PPUSH
19063: CALL 20834 0 3
19067: GO 19070
19069: POP
// end ;
19070: LD_VAR 0 12
19074: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19075: LD_INT 0
19077: PPUSH
19078: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 1
19086: LESS
19087: PUSH
19088: LD_VAR 0 1
19092: PUSH
19093: LD_INT 3
19095: GREATER
19096: OR
19097: PUSH
19098: LD_VAR 0 5
19102: PPUSH
19103: LD_VAR 0 6
19107: PPUSH
19108: CALL_OW 428
19112: OR
19113: IFFALSE 19117
// exit ;
19115: GO 19837
// uc_side := your_side ;
19117: LD_ADDR_OWVAR 20
19121: PUSH
19122: LD_OWVAR 2
19126: ST_TO_ADDR
// uc_nation := nation ;
19127: LD_ADDR_OWVAR 21
19131: PUSH
19132: LD_VAR 0 1
19136: ST_TO_ADDR
// bc_level = 1 ;
19137: LD_ADDR_OWVAR 43
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// case btype of 1 :
19145: LD_VAR 0 2
19149: PUSH
19150: LD_INT 1
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_depot ; 2 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 0
19166: ST_TO_ADDR
19167: GO 19781
19169: LD_INT 2
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_warehouse ; 3 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 1
19185: ST_TO_ADDR
19186: GO 19781
19188: LD_INT 3
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_lab ; 4 .. 9 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 6
19204: ST_TO_ADDR
19205: GO 19781
19207: LD_INT 4
19209: DOUBLE
19210: GREATEREQUAL
19211: IFFALSE 19219
19213: LD_INT 9
19215: DOUBLE
19216: LESSEQUAL
19217: IFTRUE 19221
19219: GO 19273
19221: POP
// begin bc_type := b_lab_half ;
19222: LD_ADDR_OWVAR 42
19226: PUSH
19227: LD_INT 7
19229: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19230: LD_ADDR_OWVAR 44
19234: PUSH
19235: LD_INT 10
19237: PUSH
19238: LD_INT 11
19240: PUSH
19241: LD_INT 12
19243: PUSH
19244: LD_INT 15
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: LD_INT 13
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: PUSH
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 3
19268: MINUS
19269: ARRAY
19270: ST_TO_ADDR
// end ; 10 .. 13 :
19271: GO 19781
19273: LD_INT 10
19275: DOUBLE
19276: GREATEREQUAL
19277: IFFALSE 19285
19279: LD_INT 13
19281: DOUBLE
19282: LESSEQUAL
19283: IFTRUE 19287
19285: GO 19364
19287: POP
// begin bc_type := b_lab_full ;
19288: LD_ADDR_OWVAR 42
19292: PUSH
19293: LD_INT 8
19295: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19296: LD_ADDR_OWVAR 44
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 12
19306: PUSH
19307: LD_INT 14
19309: PUSH
19310: LD_INT 13
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 9
19326: MINUS
19327: ARRAY
19328: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19329: LD_ADDR_OWVAR 45
19333: PUSH
19334: LD_INT 11
19336: PUSH
19337: LD_INT 15
19339: PUSH
19340: LD_INT 12
19342: PUSH
19343: LD_INT 15
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_VAR 0 2
19356: PUSH
19357: LD_INT 9
19359: MINUS
19360: ARRAY
19361: ST_TO_ADDR
// end ; 14 :
19362: GO 19781
19364: LD_INT 14
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19383
19372: POP
// bc_type := b_workshop ; 15 :
19373: LD_ADDR_OWVAR 42
19377: PUSH
19378: LD_INT 2
19380: ST_TO_ADDR
19381: GO 19781
19383: LD_INT 15
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 19402
19391: POP
// bc_type := b_factory ; 16 :
19392: LD_ADDR_OWVAR 42
19396: PUSH
19397: LD_INT 3
19399: ST_TO_ADDR
19400: GO 19781
19402: LD_INT 16
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19421
19410: POP
// bc_type := b_ext_gun ; 17 :
19411: LD_ADDR_OWVAR 42
19415: PUSH
19416: LD_INT 17
19418: ST_TO_ADDR
19419: GO 19781
19421: LD_INT 17
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19457
19429: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19430: LD_ADDR_OWVAR 42
19434: PUSH
19435: LD_INT 19
19437: PUSH
19438: LD_INT 23
19440: PUSH
19441: LD_INT 19
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: LD_VAR 0 1
19453: ARRAY
19454: ST_TO_ADDR
19455: GO 19781
19457: LD_INT 18
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19476
19465: POP
// bc_type := b_ext_radar ; 19 :
19466: LD_ADDR_OWVAR 42
19470: PUSH
19471: LD_INT 20
19473: ST_TO_ADDR
19474: GO 19781
19476: LD_INT 19
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19495
19484: POP
// bc_type := b_ext_radio ; 20 :
19485: LD_ADDR_OWVAR 42
19489: PUSH
19490: LD_INT 22
19492: ST_TO_ADDR
19493: GO 19781
19495: LD_INT 20
19497: DOUBLE
19498: EQUAL
19499: IFTRUE 19503
19501: GO 19514
19503: POP
// bc_type := b_ext_siberium ; 21 :
19504: LD_ADDR_OWVAR 42
19508: PUSH
19509: LD_INT 21
19511: ST_TO_ADDR
19512: GO 19781
19514: LD_INT 21
19516: DOUBLE
19517: EQUAL
19518: IFTRUE 19522
19520: GO 19533
19522: POP
// bc_type := b_ext_computer ; 22 :
19523: LD_ADDR_OWVAR 42
19527: PUSH
19528: LD_INT 24
19530: ST_TO_ADDR
19531: GO 19781
19533: LD_INT 22
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19552
19541: POP
// bc_type := b_ext_track ; 23 :
19542: LD_ADDR_OWVAR 42
19546: PUSH
19547: LD_INT 16
19549: ST_TO_ADDR
19550: GO 19781
19552: LD_INT 23
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19571
19560: POP
// bc_type := b_ext_laser ; 24 :
19561: LD_ADDR_OWVAR 42
19565: PUSH
19566: LD_INT 25
19568: ST_TO_ADDR
19569: GO 19781
19571: LD_INT 24
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19590
19579: POP
// bc_type := b_control_tower ; 25 :
19580: LD_ADDR_OWVAR 42
19584: PUSH
19585: LD_INT 36
19587: ST_TO_ADDR
19588: GO 19781
19590: LD_INT 25
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19609
19598: POP
// bc_type := b_breastwork ; 26 :
19599: LD_ADDR_OWVAR 42
19603: PUSH
19604: LD_INT 31
19606: ST_TO_ADDR
19607: GO 19781
19609: LD_INT 26
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19628
19617: POP
// bc_type := b_bunker ; 27 :
19618: LD_ADDR_OWVAR 42
19622: PUSH
19623: LD_INT 32
19625: ST_TO_ADDR
19626: GO 19781
19628: LD_INT 27
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19647
19636: POP
// bc_type := b_turret ; 28 :
19637: LD_ADDR_OWVAR 42
19641: PUSH
19642: LD_INT 33
19644: ST_TO_ADDR
19645: GO 19781
19647: LD_INT 28
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19666
19655: POP
// bc_type := b_armoury ; 29 :
19656: LD_ADDR_OWVAR 42
19660: PUSH
19661: LD_INT 4
19663: ST_TO_ADDR
19664: GO 19781
19666: LD_INT 29
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19685
19674: POP
// bc_type := b_barracks ; 30 :
19675: LD_ADDR_OWVAR 42
19679: PUSH
19680: LD_INT 5
19682: ST_TO_ADDR
19683: GO 19781
19685: LD_INT 30
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19704
19693: POP
// bc_type := b_solar_power ; 31 :
19694: LD_ADDR_OWVAR 42
19698: PUSH
19699: LD_INT 27
19701: ST_TO_ADDR
19702: GO 19781
19704: LD_INT 31
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19723
19712: POP
// bc_type := b_oil_power ; 32 :
19713: LD_ADDR_OWVAR 42
19717: PUSH
19718: LD_INT 26
19720: ST_TO_ADDR
19721: GO 19781
19723: LD_INT 32
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19742
19731: POP
// bc_type := b_siberite_power ; 33 :
19732: LD_ADDR_OWVAR 42
19736: PUSH
19737: LD_INT 28
19739: ST_TO_ADDR
19740: GO 19781
19742: LD_INT 33
19744: DOUBLE
19745: EQUAL
19746: IFTRUE 19750
19748: GO 19761
19750: POP
// bc_type := b_oil_mine ; 34 :
19751: LD_ADDR_OWVAR 42
19755: PUSH
19756: LD_INT 29
19758: ST_TO_ADDR
19759: GO 19781
19761: LD_INT 34
19763: DOUBLE
19764: EQUAL
19765: IFTRUE 19769
19767: GO 19780
19769: POP
// bc_type := b_siberite_mine ; end ;
19770: LD_ADDR_OWVAR 42
19774: PUSH
19775: LD_INT 30
19777: ST_TO_ADDR
19778: GO 19781
19780: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19781: LD_ADDR_VAR 0 8
19785: PUSH
19786: LD_VAR 0 5
19790: PPUSH
19791: LD_VAR 0 6
19795: PPUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: CALL_OW 47
19805: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19806: LD_OWVAR 42
19810: PUSH
19811: LD_INT 32
19813: PUSH
19814: LD_INT 33
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: IN
19821: IFFALSE 19837
// PlaceWeaponTurret ( b , weapon ) ;
19823: LD_VAR 0 8
19827: PPUSH
19828: LD_VAR 0 4
19832: PPUSH
19833: CALL_OW 431
// end ;
19837: LD_VAR 0 7
19841: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19848: LD_ADDR_VAR 0 4
19852: PUSH
19853: LD_INT 22
19855: PUSH
19856: LD_OWVAR 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: LD_INT 30
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 30
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PPUSH
19897: CALL_OW 69
19901: ST_TO_ADDR
// if not tmp then
19902: LD_VAR 0 4
19906: NOT
19907: IFFALSE 19911
// exit ;
19909: GO 19970
// for i in tmp do
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: LD_VAR 0 4
19920: PUSH
19921: FOR_IN
19922: IFFALSE 19968
// for j = 1 to 3 do
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: DOUBLE
19930: LD_INT 1
19932: DEC
19933: ST_TO_ADDR
19934: LD_INT 3
19936: PUSH
19937: FOR_TO
19938: IFFALSE 19964
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19940: LD_VAR 0 2
19944: PPUSH
19945: CALL_OW 274
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_INT 99999
19957: PPUSH
19958: CALL_OW 277
19962: GO 19937
19964: POP
19965: POP
19966: GO 19921
19968: POP
19969: POP
// end ;
19970: LD_VAR 0 1
19974: RET
// export function hHackSetLevel10 ; var i , j ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_INT 21
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PPUSH
19995: CALL_OW 69
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20053
// if IsSelected ( i ) then
20003: LD_VAR 0 2
20007: PPUSH
20008: CALL_OW 306
20012: IFFALSE 20051
// begin for j := 1 to 4 do
20014: LD_ADDR_VAR 0 3
20018: PUSH
20019: DOUBLE
20020: LD_INT 1
20022: DEC
20023: ST_TO_ADDR
20024: LD_INT 4
20026: PUSH
20027: FOR_TO
20028: IFFALSE 20049
// SetSkill ( i , j , 10 ) ;
20030: LD_VAR 0 2
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: LD_INT 10
20042: PPUSH
20043: CALL_OW 237
20047: GO 20027
20049: POP
20050: POP
// end ;
20051: GO 20000
20053: POP
20054: POP
// end ;
20055: LD_VAR 0 1
20059: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20065: LD_ADDR_VAR 0 2
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_OWVAR 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 21
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20143
// begin for j := 1 to 4 do
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: DOUBLE
20110: LD_INT 1
20112: DEC
20113: ST_TO_ADDR
20114: LD_INT 4
20116: PUSH
20117: FOR_TO
20118: IFFALSE 20139
// SetSkill ( i , j , 10 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 10
20132: PPUSH
20133: CALL_OW 237
20137: GO 20117
20139: POP
20140: POP
// end ;
20141: GO 20101
20143: POP
20144: POP
// end ;
20145: LD_VAR 0 1
20149: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20150: LD_INT 0
20152: PPUSH
// uc_side := your_side ;
20153: LD_ADDR_OWVAR 20
20157: PUSH
20158: LD_OWVAR 2
20162: ST_TO_ADDR
// uc_nation := nation ;
20163: LD_ADDR_OWVAR 21
20167: PUSH
20168: LD_VAR 0 1
20172: ST_TO_ADDR
// InitHc ;
20173: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20177: LD_INT 0
20179: PPUSH
20180: LD_VAR 0 2
20184: PPUSH
20185: LD_VAR 0 3
20189: PPUSH
20190: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20194: LD_VAR 0 4
20198: PPUSH
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL_OW 428
20208: PUSH
20209: LD_INT 0
20211: EQUAL
20212: IFFALSE 20236
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20214: CALL_OW 44
20218: PPUSH
20219: LD_VAR 0 4
20223: PPUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 48
// end ;
20236: LD_VAR 0 6
20240: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20241: LD_INT 0
20243: PPUSH
20244: PPUSH
// uc_side := your_side ;
20245: LD_ADDR_OWVAR 20
20249: PUSH
20250: LD_OWVAR 2
20254: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20255: LD_VAR 0 1
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: LD_INT 4
20271: PUSH
20272: LD_INT 5
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: IN
20282: IFFALSE 20294
// uc_nation := nation_american else
20284: LD_ADDR_OWVAR 21
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
20292: GO 20337
// if chassis in [ 11 , 12 , 13 , 14 ] then
20294: LD_VAR 0 1
20298: PUSH
20299: LD_INT 11
20301: PUSH
20302: LD_INT 12
20304: PUSH
20305: LD_INT 13
20307: PUSH
20308: LD_INT 14
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: IN
20317: IFFALSE 20329
// uc_nation := nation_arabian else
20319: LD_ADDR_OWVAR 21
20323: PUSH
20324: LD_INT 2
20326: ST_TO_ADDR
20327: GO 20337
// uc_nation := nation_russian ;
20329: LD_ADDR_OWVAR 21
20333: PUSH
20334: LD_INT 3
20336: ST_TO_ADDR
// vc_chassis := chassis ;
20337: LD_ADDR_OWVAR 37
20341: PUSH
20342: LD_VAR 0 1
20346: ST_TO_ADDR
// vc_engine := engine ;
20347: LD_ADDR_OWVAR 39
20351: PUSH
20352: LD_VAR 0 2
20356: ST_TO_ADDR
// vc_control := control ;
20357: LD_ADDR_OWVAR 38
20361: PUSH
20362: LD_VAR 0 3
20366: ST_TO_ADDR
// vc_weapon := weapon ;
20367: LD_ADDR_OWVAR 40
20371: PUSH
20372: LD_VAR 0 4
20376: ST_TO_ADDR
// un := CreateVehicle ;
20377: LD_ADDR_VAR 0 8
20381: PUSH
20382: CALL_OW 45
20386: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20387: LD_VAR 0 8
20391: PPUSH
20392: LD_INT 0
20394: PPUSH
20395: LD_INT 5
20397: PPUSH
20398: CALL_OW 12
20402: PPUSH
20403: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20407: LD_VAR 0 8
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: LD_VAR 0 6
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: CALL_OW 48
// end ;
20429: LD_VAR 0 7
20433: RET
// export hInvincible ; every 1 do
20434: GO 20436
20436: DISABLE
// hInvincible := [ ] ;
20437: LD_ADDR_EXP 73
20441: PUSH
20442: EMPTY
20443: ST_TO_ADDR
20444: END
// every 10 do var i ;
20445: GO 20447
20447: DISABLE
20448: LD_INT 0
20450: PPUSH
// begin enable ;
20451: ENABLE
// if not hInvincible then
20452: LD_EXP 73
20456: NOT
20457: IFFALSE 20461
// exit ;
20459: GO 20505
// for i in hInvincible do
20461: LD_ADDR_VAR 0 1
20465: PUSH
20466: LD_EXP 73
20470: PUSH
20471: FOR_IN
20472: IFFALSE 20503
// if GetLives ( i ) < 1000 then
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 256
20483: PUSH
20484: LD_INT 1000
20486: LESS
20487: IFFALSE 20501
// SetLives ( i , 1000 ) ;
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_INT 1000
20496: PPUSH
20497: CALL_OW 234
20501: GO 20471
20503: POP
20504: POP
// end ;
20505: PPOPN 1
20507: END
// export function hHackInvincible ; var i ; begin
20508: LD_INT 0
20510: PPUSH
20511: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 21
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: PUSH
20550: FOR_IN
20551: IFFALSE 20612
// if IsSelected ( i ) then
20553: LD_VAR 0 2
20557: PPUSH
20558: CALL_OW 306
20562: IFFALSE 20610
// begin if i in hInvincible then
20564: LD_VAR 0 2
20568: PUSH
20569: LD_EXP 73
20573: IN
20574: IFFALSE 20594
// hInvincible := hInvincible diff i else
20576: LD_ADDR_EXP 73
20580: PUSH
20581: LD_EXP 73
20585: PUSH
20586: LD_VAR 0 2
20590: DIFF
20591: ST_TO_ADDR
20592: GO 20610
// hInvincible := hInvincible union i ;
20594: LD_ADDR_EXP 73
20598: PUSH
20599: LD_EXP 73
20603: PUSH
20604: LD_VAR 0 2
20608: UNION
20609: ST_TO_ADDR
// end ;
20610: GO 20550
20612: POP
20613: POP
// end ;
20614: LD_VAR 0 1
20618: RET
// export function hHackInvisible ; var i , j ; begin
20619: LD_INT 0
20621: PPUSH
20622: PPUSH
20623: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20624: LD_ADDR_VAR 0 2
20628: PUSH
20629: LD_INT 21
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PPUSH
20639: CALL_OW 69
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20669
// if IsSelected ( i ) then
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 306
20656: IFFALSE 20667
// ComForceInvisible ( i ) ;
20658: LD_VAR 0 2
20662: PPUSH
20663: CALL_OW 496
20667: GO 20644
20669: POP
20670: POP
// end ;
20671: LD_VAR 0 1
20675: RET
// export function hHackChangeYourSide ; begin
20676: LD_INT 0
20678: PPUSH
// if your_side = 8 then
20679: LD_OWVAR 2
20683: PUSH
20684: LD_INT 8
20686: EQUAL
20687: IFFALSE 20699
// your_side := 0 else
20689: LD_ADDR_OWVAR 2
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
20697: GO 20713
// your_side := your_side + 1 ;
20699: LD_ADDR_OWVAR 2
20703: PUSH
20704: LD_OWVAR 2
20708: PUSH
20709: LD_INT 1
20711: PLUS
20712: ST_TO_ADDR
// end ;
20713: LD_VAR 0 1
20717: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20718: LD_INT 0
20720: PPUSH
20721: PPUSH
20722: PPUSH
// for i in all_units do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: LD_OWVAR 3
20732: PUSH
20733: FOR_IN
20734: IFFALSE 20812
// if IsSelected ( i ) then
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL_OW 306
20745: IFFALSE 20810
// begin j := GetSide ( i ) ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_VAR 0 2
20756: PPUSH
20757: CALL_OW 255
20761: ST_TO_ADDR
// if j = 8 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 8
20769: EQUAL
20770: IFFALSE 20782
// j := 0 else
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
20780: GO 20796
// j := j + 1 ;
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 1
20794: PLUS
20795: ST_TO_ADDR
// SetSide ( i , j ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: CALL_OW 235
// end ;
20810: GO 20733
20812: POP
20813: POP
// end ;
20814: LD_VAR 0 1
20818: RET
// export function hHackFog ; begin
20819: LD_INT 0
20821: PPUSH
// FogOff ( true ) ;
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 344
// end ;
20829: LD_VAR 0 1
20833: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20834: LD_INT 0
20836: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20837: LD_VAR 0 1
20841: PPUSH
20842: LD_VAR 0 2
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 483
// CenterOnXY ( x , y ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL_OW 84
// end ; end_of_file
20876: LD_VAR 0 4
20880: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
// if exist_mode then
20885: LD_VAR 0 2
20889: IFFALSE 20914
// unit := CreateCharacter ( prefix & ident ) else
20891: LD_ADDR_VAR 0 5
20895: PUSH
20896: LD_VAR 0 3
20900: PUSH
20901: LD_VAR 0 1
20905: STR
20906: PPUSH
20907: CALL_OW 34
20911: ST_TO_ADDR
20912: GO 20929
// unit := NewCharacter ( ident ) ;
20914: LD_ADDR_VAR 0 5
20918: PUSH
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 25
20928: ST_TO_ADDR
// result := unit ;
20929: LD_ADDR_VAR 0 4
20933: PUSH
20934: LD_VAR 0 5
20938: ST_TO_ADDR
// end ;
20939: LD_VAR 0 4
20943: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20944: LD_INT 0
20946: PPUSH
20947: PPUSH
// if not side or not nation then
20948: LD_VAR 0 1
20952: NOT
20953: PUSH
20954: LD_VAR 0 2
20958: NOT
20959: OR
20960: IFFALSE 20964
// exit ;
20962: GO 21728
// case nation of nation_american :
20964: LD_VAR 0 2
20968: PUSH
20969: LD_INT 1
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 21191
20977: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_INT 35
20985: PUSH
20986: LD_INT 45
20988: PUSH
20989: LD_INT 46
20991: PUSH
20992: LD_INT 47
20994: PUSH
20995: LD_INT 82
20997: PUSH
20998: LD_INT 83
21000: PUSH
21001: LD_INT 84
21003: PUSH
21004: LD_INT 85
21006: PUSH
21007: LD_INT 86
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 6
21018: PUSH
21019: LD_INT 15
21021: PUSH
21022: LD_INT 16
21024: PUSH
21025: LD_INT 7
21027: PUSH
21028: LD_INT 12
21030: PUSH
21031: LD_INT 13
21033: PUSH
21034: LD_INT 10
21036: PUSH
21037: LD_INT 14
21039: PUSH
21040: LD_INT 20
21042: PUSH
21043: LD_INT 21
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_INT 25
21051: PUSH
21052: LD_INT 32
21054: PUSH
21055: LD_INT 27
21057: PUSH
21058: LD_INT 36
21060: PUSH
21061: LD_INT 69
21063: PUSH
21064: LD_INT 39
21066: PUSH
21067: LD_INT 34
21069: PUSH
21070: LD_INT 40
21072: PUSH
21073: LD_INT 48
21075: PUSH
21076: LD_INT 49
21078: PUSH
21079: LD_INT 50
21081: PUSH
21082: LD_INT 51
21084: PUSH
21085: LD_INT 52
21087: PUSH
21088: LD_INT 53
21090: PUSH
21091: LD_INT 54
21093: PUSH
21094: LD_INT 55
21096: PUSH
21097: LD_INT 56
21099: PUSH
21100: LD_INT 57
21102: PUSH
21103: LD_INT 58
21105: PUSH
21106: LD_INT 59
21108: PUSH
21109: LD_INT 60
21111: PUSH
21112: LD_INT 61
21114: PUSH
21115: LD_INT 62
21117: PUSH
21118: LD_INT 80
21120: PUSH
21121: LD_INT 82
21123: PUSH
21124: LD_INT 83
21126: PUSH
21127: LD_INT 84
21129: PUSH
21130: LD_INT 85
21132: PUSH
21133: LD_INT 86
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 21652
21191: LD_INT 2
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21421
21199: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21200: LD_ADDR_VAR 0 4
21204: PUSH
21205: LD_INT 35
21207: PUSH
21208: LD_INT 45
21210: PUSH
21211: LD_INT 46
21213: PUSH
21214: LD_INT 47
21216: PUSH
21217: LD_INT 82
21219: PUSH
21220: LD_INT 83
21222: PUSH
21223: LD_INT 84
21225: PUSH
21226: LD_INT 85
21228: PUSH
21229: LD_INT 87
21231: PUSH
21232: LD_INT 70
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: LD_INT 11
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: LD_INT 5
21249: PUSH
21250: LD_INT 6
21252: PUSH
21253: LD_INT 15
21255: PUSH
21256: LD_INT 18
21258: PUSH
21259: LD_INT 7
21261: PUSH
21262: LD_INT 17
21264: PUSH
21265: LD_INT 8
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 72
21279: PUSH
21280: LD_INT 26
21282: PUSH
21283: LD_INT 69
21285: PUSH
21286: LD_INT 39
21288: PUSH
21289: LD_INT 40
21291: PUSH
21292: LD_INT 41
21294: PUSH
21295: LD_INT 42
21297: PUSH
21298: LD_INT 43
21300: PUSH
21301: LD_INT 48
21303: PUSH
21304: LD_INT 49
21306: PUSH
21307: LD_INT 50
21309: PUSH
21310: LD_INT 51
21312: PUSH
21313: LD_INT 52
21315: PUSH
21316: LD_INT 53
21318: PUSH
21319: LD_INT 54
21321: PUSH
21322: LD_INT 55
21324: PUSH
21325: LD_INT 56
21327: PUSH
21328: LD_INT 60
21330: PUSH
21331: LD_INT 61
21333: PUSH
21334: LD_INT 62
21336: PUSH
21337: LD_INT 66
21339: PUSH
21340: LD_INT 67
21342: PUSH
21343: LD_INT 68
21345: PUSH
21346: LD_INT 81
21348: PUSH
21349: LD_INT 82
21351: PUSH
21352: LD_INT 83
21354: PUSH
21355: LD_INT 84
21357: PUSH
21358: LD_INT 85
21360: PUSH
21361: LD_INT 87
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
21419: GO 21652
21421: LD_INT 3
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21651
21429: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21430: LD_ADDR_VAR 0 4
21434: PUSH
21435: LD_INT 46
21437: PUSH
21438: LD_INT 47
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: LD_INT 2
21446: PUSH
21447: LD_INT 82
21449: PUSH
21450: LD_INT 83
21452: PUSH
21453: LD_INT 84
21455: PUSH
21456: LD_INT 85
21458: PUSH
21459: LD_INT 86
21461: PUSH
21462: LD_INT 11
21464: PUSH
21465: LD_INT 9
21467: PUSH
21468: LD_INT 20
21470: PUSH
21471: LD_INT 19
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 24
21479: PUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 25
21485: PUSH
21486: LD_INT 28
21488: PUSH
21489: LD_INT 29
21491: PUSH
21492: LD_INT 30
21494: PUSH
21495: LD_INT 31
21497: PUSH
21498: LD_INT 37
21500: PUSH
21501: LD_INT 38
21503: PUSH
21504: LD_INT 32
21506: PUSH
21507: LD_INT 27
21509: PUSH
21510: LD_INT 33
21512: PUSH
21513: LD_INT 69
21515: PUSH
21516: LD_INT 39
21518: PUSH
21519: LD_INT 34
21521: PUSH
21522: LD_INT 40
21524: PUSH
21525: LD_INT 71
21527: PUSH
21528: LD_INT 23
21530: PUSH
21531: LD_INT 44
21533: PUSH
21534: LD_INT 48
21536: PUSH
21537: LD_INT 49
21539: PUSH
21540: LD_INT 50
21542: PUSH
21543: LD_INT 51
21545: PUSH
21546: LD_INT 52
21548: PUSH
21549: LD_INT 53
21551: PUSH
21552: LD_INT 54
21554: PUSH
21555: LD_INT 55
21557: PUSH
21558: LD_INT 56
21560: PUSH
21561: LD_INT 57
21563: PUSH
21564: LD_INT 58
21566: PUSH
21567: LD_INT 59
21569: PUSH
21570: LD_INT 63
21572: PUSH
21573: LD_INT 64
21575: PUSH
21576: LD_INT 65
21578: PUSH
21579: LD_INT 82
21581: PUSH
21582: LD_INT 83
21584: PUSH
21585: LD_INT 84
21587: PUSH
21588: LD_INT 85
21590: PUSH
21591: LD_INT 86
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: ST_TO_ADDR
21649: GO 21652
21651: POP
// if state > - 1 and state < 3 then
21652: LD_VAR 0 3
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: GREATER
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_INT 3
21669: LESS
21670: AND
21671: IFFALSE 21728
// for i in result do
21673: LD_ADDR_VAR 0 5
21677: PUSH
21678: LD_VAR 0 4
21682: PUSH
21683: FOR_IN
21684: IFFALSE 21726
// if GetTech ( i , side ) <> state then
21686: LD_VAR 0 5
21690: PPUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 321
21700: PUSH
21701: LD_VAR 0 3
21705: NONEQUAL
21706: IFFALSE 21724
// result := result diff i ;
21708: LD_ADDR_VAR 0 4
21712: PUSH
21713: LD_VAR 0 4
21717: PUSH
21718: LD_VAR 0 5
21722: DIFF
21723: ST_TO_ADDR
21724: GO 21683
21726: POP
21727: POP
// end ;
21728: LD_VAR 0 4
21732: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21733: LD_INT 0
21735: PPUSH
21736: PPUSH
21737: PPUSH
// result := true ;
21738: LD_ADDR_VAR 0 3
21742: PUSH
21743: LD_INT 1
21745: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21746: LD_ADDR_VAR 0 5
21750: PUSH
21751: LD_VAR 0 2
21755: PPUSH
21756: CALL_OW 480
21760: ST_TO_ADDR
// if not tmp then
21761: LD_VAR 0 5
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 21819
// for i in tmp do
21770: LD_ADDR_VAR 0 4
21774: PUSH
21775: LD_VAR 0 5
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21817
// if GetTech ( i , side ) <> state_researched then
21783: LD_VAR 0 4
21787: PPUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 321
21797: PUSH
21798: LD_INT 2
21800: NONEQUAL
21801: IFFALSE 21815
// begin result := false ;
21803: LD_ADDR_VAR 0 3
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// exit ;
21811: POP
21812: POP
21813: GO 21819
// end ;
21815: GO 21780
21817: POP
21818: POP
// end ;
21819: LD_VAR 0 3
21823: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21839: LD_VAR 0 1
21843: NOT
21844: PUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 257
21854: PUSH
21855: LD_INT 9
21857: NONEQUAL
21858: OR
21859: IFFALSE 21863
// exit ;
21861: GO 22436
// side := GetSide ( unit ) ;
21863: LD_ADDR_VAR 0 9
21867: PUSH
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 255
21877: ST_TO_ADDR
// tech_space := tech_spacanom ;
21878: LD_ADDR_VAR 0 12
21882: PUSH
21883: LD_INT 29
21885: ST_TO_ADDR
// tech_time := tech_taurad ;
21886: LD_ADDR_VAR 0 13
21890: PUSH
21891: LD_INT 28
21893: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21894: LD_ADDR_VAR 0 11
21898: PUSH
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 310
21908: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21909: LD_VAR 0 11
21913: PPUSH
21914: CALL_OW 247
21918: PUSH
21919: LD_INT 2
21921: EQUAL
21922: IFFALSE 21926
// exit ;
21924: GO 22436
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21926: LD_ADDR_VAR 0 8
21930: PUSH
21931: LD_INT 81
21933: PUSH
21934: LD_VAR 0 9
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: LD_INT 21
21948: PUSH
21949: LD_INT 3
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PPUSH
21964: CALL_OW 69
21968: ST_TO_ADDR
// if not tmp then
21969: LD_VAR 0 8
21973: NOT
21974: IFFALSE 21978
// exit ;
21976: GO 22436
// if in_unit then
21978: LD_VAR 0 11
21982: IFFALSE 22006
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21984: LD_ADDR_VAR 0 10
21988: PUSH
21989: LD_VAR 0 8
21993: PPUSH
21994: LD_VAR 0 11
21998: PPUSH
21999: CALL_OW 74
22003: ST_TO_ADDR
22004: GO 22026
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22006: LD_ADDR_VAR 0 10
22010: PUSH
22011: LD_VAR 0 8
22015: PPUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 74
22025: ST_TO_ADDR
// if not enemy then
22026: LD_VAR 0 10
22030: NOT
22031: IFFALSE 22035
// exit ;
22033: GO 22436
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22035: LD_VAR 0 11
22039: PUSH
22040: LD_VAR 0 11
22044: PPUSH
22045: LD_VAR 0 10
22049: PPUSH
22050: CALL_OW 296
22054: PUSH
22055: LD_INT 13
22057: GREATER
22058: AND
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: LD_VAR 0 10
22069: PPUSH
22070: CALL_OW 296
22074: PUSH
22075: LD_INT 12
22077: GREATER
22078: OR
22079: IFFALSE 22083
// exit ;
22081: GO 22436
// missile := [ 1 ] ;
22083: LD_ADDR_VAR 0 14
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22094: LD_VAR 0 9
22098: PPUSH
22099: LD_VAR 0 12
22103: PPUSH
22104: CALL_OW 325
22108: IFFALSE 22137
// missile := Insert ( missile , missile + 1 , 2 ) ;
22110: LD_ADDR_VAR 0 14
22114: PUSH
22115: LD_VAR 0 14
22119: PPUSH
22120: LD_VAR 0 14
22124: PUSH
22125: LD_INT 1
22127: PLUS
22128: PPUSH
22129: LD_INT 2
22131: PPUSH
22132: CALL_OW 2
22136: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22137: LD_VAR 0 9
22141: PPUSH
22142: LD_VAR 0 13
22146: PPUSH
22147: CALL_OW 325
22151: PUSH
22152: LD_VAR 0 10
22156: PPUSH
22157: CALL_OW 255
22161: PPUSH
22162: LD_VAR 0 13
22166: PPUSH
22167: CALL_OW 325
22171: NOT
22172: AND
22173: IFFALSE 22202
// missile := Insert ( missile , missile + 1 , 3 ) ;
22175: LD_ADDR_VAR 0 14
22179: PUSH
22180: LD_VAR 0 14
22184: PPUSH
22185: LD_VAR 0 14
22189: PUSH
22190: LD_INT 1
22192: PLUS
22193: PPUSH
22194: LD_INT 3
22196: PPUSH
22197: CALL_OW 2
22201: ST_TO_ADDR
// if missile < 2 then
22202: LD_VAR 0 14
22206: PUSH
22207: LD_INT 2
22209: LESS
22210: IFFALSE 22214
// exit ;
22212: GO 22436
// x := GetX ( enemy ) ;
22214: LD_ADDR_VAR 0 4
22218: PUSH
22219: LD_VAR 0 10
22223: PPUSH
22224: CALL_OW 250
22228: ST_TO_ADDR
// y := GetY ( enemy ) ;
22229: LD_ADDR_VAR 0 5
22233: PUSH
22234: LD_VAR 0 10
22238: PPUSH
22239: CALL_OW 251
22243: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22244: LD_ADDR_VAR 0 6
22248: PUSH
22249: LD_VAR 0 4
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 12
22265: PLUS
22266: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22267: LD_ADDR_VAR 0 7
22271: PUSH
22272: LD_VAR 0 5
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL_OW 12
22288: PLUS
22289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22290: LD_VAR 0 6
22294: PPUSH
22295: LD_VAR 0 7
22299: PPUSH
22300: CALL_OW 488
22304: NOT
22305: IFFALSE 22327
// begin _x := x ;
22307: LD_ADDR_VAR 0 6
22311: PUSH
22312: LD_VAR 0 4
22316: ST_TO_ADDR
// _y := y ;
22317: LD_ADDR_VAR 0 7
22321: PUSH
22322: LD_VAR 0 5
22326: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22327: LD_ADDR_VAR 0 3
22331: PUSH
22332: LD_INT 1
22334: PPUSH
22335: LD_VAR 0 14
22339: PPUSH
22340: CALL_OW 12
22344: ST_TO_ADDR
// case i of 1 :
22345: LD_VAR 0 3
22349: PUSH
22350: LD_INT 1
22352: DOUBLE
22353: EQUAL
22354: IFTRUE 22358
22356: GO 22375
22358: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_VAR 0 10
22368: PPUSH
22369: CALL_OW 115
22373: GO 22436
22375: LD_INT 2
22377: DOUBLE
22378: EQUAL
22379: IFTRUE 22383
22381: GO 22405
22383: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22384: LD_VAR 0 1
22388: PPUSH
22389: LD_VAR 0 6
22393: PPUSH
22394: LD_VAR 0 7
22398: PPUSH
22399: CALL_OW 153
22403: GO 22436
22405: LD_INT 3
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22435
22413: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22414: LD_VAR 0 1
22418: PPUSH
22419: LD_VAR 0 6
22423: PPUSH
22424: LD_VAR 0 7
22428: PPUSH
22429: CALL_OW 154
22433: GO 22436
22435: POP
// end ;
22436: LD_VAR 0 2
22440: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22441: LD_INT 0
22443: PPUSH
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
22448: PPUSH
// if not unit or not building then
22449: LD_VAR 0 1
22453: NOT
22454: PUSH
22455: LD_VAR 0 2
22459: NOT
22460: OR
22461: IFFALSE 22465
// exit ;
22463: GO 22623
// x := GetX ( building ) ;
22465: LD_ADDR_VAR 0 5
22469: PUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: CALL_OW 250
22479: ST_TO_ADDR
// y := GetY ( building ) ;
22480: LD_ADDR_VAR 0 6
22484: PUSH
22485: LD_VAR 0 2
22489: PPUSH
22490: CALL_OW 251
22494: ST_TO_ADDR
// for i = 0 to 5 do
22495: LD_ADDR_VAR 0 4
22499: PUSH
22500: DOUBLE
22501: LD_INT 0
22503: DEC
22504: ST_TO_ADDR
22505: LD_INT 5
22507: PUSH
22508: FOR_TO
22509: IFFALSE 22621
// begin _x := ShiftX ( x , i , 3 ) ;
22511: LD_ADDR_VAR 0 7
22515: PUSH
22516: LD_VAR 0 5
22520: PPUSH
22521: LD_VAR 0 4
22525: PPUSH
22526: LD_INT 3
22528: PPUSH
22529: CALL_OW 272
22533: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22534: LD_ADDR_VAR 0 8
22538: PUSH
22539: LD_VAR 0 6
22543: PPUSH
22544: LD_VAR 0 4
22548: PPUSH
22549: LD_INT 3
22551: PPUSH
22552: CALL_OW 273
22556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22557: LD_VAR 0 7
22561: PPUSH
22562: LD_VAR 0 8
22566: PPUSH
22567: CALL_OW 488
22571: NOT
22572: IFFALSE 22576
// continue ;
22574: GO 22508
// if HexInfo ( _x , _y ) = 0 then
22576: LD_VAR 0 7
22580: PPUSH
22581: LD_VAR 0 8
22585: PPUSH
22586: CALL_OW 428
22590: PUSH
22591: LD_INT 0
22593: EQUAL
22594: IFFALSE 22619
// begin ComMoveXY ( unit , _x , _y ) ;
22596: LD_VAR 0 1
22600: PPUSH
22601: LD_VAR 0 7
22605: PPUSH
22606: LD_VAR 0 8
22610: PPUSH
22611: CALL_OW 111
// exit ;
22615: POP
22616: POP
22617: GO 22623
// end ; end ;
22619: GO 22508
22621: POP
22622: POP
// end ;
22623: LD_VAR 0 3
22627: RET
// export function ScanBase ( side , base_area ) ; begin
22628: LD_INT 0
22630: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22631: LD_ADDR_VAR 0 3
22635: PUSH
22636: LD_VAR 0 2
22640: PPUSH
22641: LD_INT 81
22643: PUSH
22644: LD_VAR 0 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 70
22657: ST_TO_ADDR
// end ;
22658: LD_VAR 0 3
22662: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22663: LD_INT 0
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
// result := false ;
22669: LD_ADDR_VAR 0 2
22673: PUSH
22674: LD_INT 0
22676: ST_TO_ADDR
// side := GetSide ( unit ) ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: CALL_OW 255
22691: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 248
22706: ST_TO_ADDR
// case nat of 1 :
22707: LD_VAR 0 4
22711: PUSH
22712: LD_INT 1
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22731
22720: POP
// tech := tech_lassight ; 2 :
22721: LD_ADDR_VAR 0 5
22725: PUSH
22726: LD_INT 12
22728: ST_TO_ADDR
22729: GO 22770
22731: LD_INT 2
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22750
22739: POP
// tech := tech_mortar ; 3 :
22740: LD_ADDR_VAR 0 5
22744: PUSH
22745: LD_INT 41
22747: ST_TO_ADDR
22748: GO 22770
22750: LD_INT 3
22752: DOUBLE
22753: EQUAL
22754: IFTRUE 22758
22756: GO 22769
22758: POP
// tech := tech_bazooka ; end ;
22759: LD_ADDR_VAR 0 5
22763: PUSH
22764: LD_INT 44
22766: ST_TO_ADDR
22767: GO 22770
22769: POP
// if Researched ( side , tech ) then
22770: LD_VAR 0 3
22774: PPUSH
22775: LD_VAR 0 5
22779: PPUSH
22780: CALL_OW 325
22784: IFFALSE 22811
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22786: LD_ADDR_VAR 0 2
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 8
22796: PUSH
22797: LD_INT 9
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_VAR 0 4
22809: ARRAY
22810: ST_TO_ADDR
// end ;
22811: LD_VAR 0 2
22815: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22816: LD_INT 0
22818: PPUSH
22819: PPUSH
22820: PPUSH
// if not mines then
22821: LD_VAR 0 2
22825: NOT
22826: IFFALSE 22830
// exit ;
22828: GO 22974
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22830: LD_ADDR_VAR 0 5
22834: PUSH
22835: LD_INT 81
22837: PUSH
22838: LD_VAR 0 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 21
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: ST_TO_ADDR
// for i in mines do
22873: LD_ADDR_VAR 0 4
22877: PUSH
22878: LD_VAR 0 2
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22972
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22886: LD_VAR 0 4
22890: PUSH
22891: LD_INT 1
22893: ARRAY
22894: PPUSH
22895: LD_VAR 0 4
22899: PUSH
22900: LD_INT 2
22902: ARRAY
22903: PPUSH
22904: CALL_OW 458
22908: NOT
22909: IFFALSE 22913
// continue ;
22911: GO 22883
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22913: LD_VAR 0 4
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PPUSH
22922: LD_VAR 0 4
22926: PUSH
22927: LD_INT 2
22929: ARRAY
22930: PPUSH
22931: CALL_OW 428
22935: PUSH
22936: LD_VAR 0 5
22940: IN
22941: IFFALSE 22970
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22943: LD_VAR 0 4
22947: PUSH
22948: LD_INT 1
22950: ARRAY
22951: PPUSH
22952: LD_VAR 0 4
22956: PUSH
22957: LD_INT 2
22959: ARRAY
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 456
// end ;
22970: GO 22883
22972: POP
22973: POP
// end ;
22974: LD_VAR 0 3
22978: RET
// export function Count ( array ) ; var i ; begin
22979: LD_INT 0
22981: PPUSH
22982: PPUSH
// result := 0 ;
22983: LD_ADDR_VAR 0 2
22987: PUSH
22988: LD_INT 0
22990: ST_TO_ADDR
// for i in array do
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_VAR 0 1
23000: PUSH
23001: FOR_IN
23002: IFFALSE 23026
// if i then
23004: LD_VAR 0 3
23008: IFFALSE 23024
// result := result + 1 ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
23024: GO 23001
23026: POP
23027: POP
// end ;
23028: LD_VAR 0 2
23032: RET
// export function IsEmpty ( building ) ; begin
23033: LD_INT 0
23035: PPUSH
// if not building then
23036: LD_VAR 0 1
23040: NOT
23041: IFFALSE 23045
// exit ;
23043: GO 23088
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_VAR 0 1
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 255
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 58
23074: PUSH
23075: EMPTY
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: IN
23087: ST_TO_ADDR
// end ;
23088: LD_VAR 0 2
23092: RET
// export function IsNotFull ( building ) ; begin
23093: LD_INT 0
23095: PPUSH
// if not building then
23096: LD_VAR 0 1
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23124
// result := UnitsInside ( building ) < 6 ;
23105: LD_ADDR_VAR 0 2
23109: PUSH
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 313
23119: PUSH
23120: LD_INT 6
23122: LESS
23123: ST_TO_ADDR
// end ;
23124: LD_VAR 0 2
23128: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23129: LD_INT 0
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
// tmp := [ ] ;
23135: LD_ADDR_VAR 0 3
23139: PUSH
23140: EMPTY
23141: ST_TO_ADDR
// list := [ ] ;
23142: LD_ADDR_VAR 0 5
23146: PUSH
23147: EMPTY
23148: ST_TO_ADDR
// for i = 16 to 25 do
23149: LD_ADDR_VAR 0 4
23153: PUSH
23154: DOUBLE
23155: LD_INT 16
23157: DEC
23158: ST_TO_ADDR
23159: LD_INT 25
23161: PUSH
23162: FOR_TO
23163: IFFALSE 23236
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_VAR 0 3
23174: PUSH
23175: LD_INT 22
23177: PUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 255
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 91
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 6
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 30
23210: PUSH
23211: LD_VAR 0 4
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: PPUSH
23228: CALL_OW 69
23232: ADD
23233: ST_TO_ADDR
23234: GO 23162
23236: POP
23237: POP
// for i = 1 to tmp do
23238: LD_ADDR_VAR 0 4
23242: PUSH
23243: DOUBLE
23244: LD_INT 1
23246: DEC
23247: ST_TO_ADDR
23248: LD_VAR 0 3
23252: PUSH
23253: FOR_TO
23254: IFFALSE 23342
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: LD_VAR 0 5
23265: PUSH
23266: LD_VAR 0 3
23270: PUSH
23271: LD_VAR 0 4
23275: ARRAY
23276: PPUSH
23277: CALL_OW 266
23281: PUSH
23282: LD_VAR 0 3
23286: PUSH
23287: LD_VAR 0 4
23291: ARRAY
23292: PPUSH
23293: CALL_OW 250
23297: PUSH
23298: LD_VAR 0 3
23302: PUSH
23303: LD_VAR 0 4
23307: ARRAY
23308: PPUSH
23309: CALL_OW 251
23313: PUSH
23314: LD_VAR 0 3
23318: PUSH
23319: LD_VAR 0 4
23323: ARRAY
23324: PPUSH
23325: CALL_OW 254
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: ADD
23339: ST_TO_ADDR
23340: GO 23253
23342: POP
23343: POP
// result := list ;
23344: LD_ADDR_VAR 0 2
23348: PUSH
23349: LD_VAR 0 5
23353: ST_TO_ADDR
// end ;
23354: LD_VAR 0 2
23358: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23359: LD_INT 0
23361: PPUSH
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
// if not factory then
23368: LD_VAR 0 1
23372: NOT
23373: IFFALSE 23377
// exit ;
23375: GO 23970
// if control = control_apeman then
23377: LD_VAR 0 4
23381: PUSH
23382: LD_INT 5
23384: EQUAL
23385: IFFALSE 23494
// begin tmp := UnitsInside ( factory ) ;
23387: LD_ADDR_VAR 0 8
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 313
23401: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23402: LD_VAR 0 8
23406: PPUSH
23407: LD_INT 25
23409: PUSH
23410: LD_INT 12
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PPUSH
23417: CALL_OW 72
23421: NOT
23422: IFFALSE 23432
// control := control_manual ;
23424: LD_ADDR_VAR 0 4
23428: PUSH
23429: LD_INT 1
23431: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23432: LD_ADDR_VAR 0 8
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL 23129 0 1
23446: ST_TO_ADDR
// if tmp then
23447: LD_VAR 0 8
23451: IFFALSE 23494
// begin for i in tmp do
23453: LD_ADDR_VAR 0 7
23457: PUSH
23458: LD_VAR 0 8
23462: PUSH
23463: FOR_IN
23464: IFFALSE 23492
// if i [ 1 ] = b_ext_radio then
23466: LD_VAR 0 7
23470: PUSH
23471: LD_INT 1
23473: ARRAY
23474: PUSH
23475: LD_INT 22
23477: EQUAL
23478: IFFALSE 23490
// begin control := control_remote ;
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: LD_INT 2
23487: ST_TO_ADDR
// break ;
23488: GO 23492
// end ;
23490: GO 23463
23492: POP
23493: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: LD_VAR 0 4
23513: PPUSH
23514: LD_VAR 0 5
23518: PPUSH
23519: CALL_OW 448
23523: IFFALSE 23558
// begin result := [ chassis , engine , control , weapon ] ;
23525: LD_ADDR_VAR 0 6
23529: PUSH
23530: LD_VAR 0 2
23534: PUSH
23535: LD_VAR 0 3
23539: PUSH
23540: LD_VAR 0 4
23544: PUSH
23545: LD_VAR 0 5
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: ST_TO_ADDR
// exit ;
23556: GO 23970
// end ; _chassis := AvailableChassisList ( factory ) ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 475
23572: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23573: LD_ADDR_VAR 0 11
23577: PUSH
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 476
23587: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23588: LD_ADDR_VAR 0 12
23592: PUSH
23593: LD_VAR 0 1
23597: PPUSH
23598: CALL_OW 477
23602: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23603: LD_ADDR_VAR 0 10
23607: PUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 478
23617: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23618: LD_VAR 0 9
23622: NOT
23623: PUSH
23624: LD_VAR 0 11
23628: NOT
23629: OR
23630: PUSH
23631: LD_VAR 0 12
23635: NOT
23636: OR
23637: PUSH
23638: LD_VAR 0 10
23642: NOT
23643: OR
23644: IFFALSE 23679
// begin result := [ chassis , engine , control , weapon ] ;
23646: LD_ADDR_VAR 0 6
23650: PUSH
23651: LD_VAR 0 2
23655: PUSH
23656: LD_VAR 0 3
23660: PUSH
23661: LD_VAR 0 4
23665: PUSH
23666: LD_VAR 0 5
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: ST_TO_ADDR
// exit ;
23677: GO 23970
// end ; if not chassis in _chassis then
23679: LD_VAR 0 2
23683: PUSH
23684: LD_VAR 0 9
23688: IN
23689: NOT
23690: IFFALSE 23716
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23692: LD_ADDR_VAR 0 2
23696: PUSH
23697: LD_VAR 0 9
23701: PUSH
23702: LD_INT 1
23704: PPUSH
23705: LD_VAR 0 9
23709: PPUSH
23710: CALL_OW 12
23714: ARRAY
23715: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: CALL 23975 0 2
23730: NOT
23731: IFFALSE 23790
// repeat engine := _engine [ 1 ] ;
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_VAR 0 11
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23747: LD_ADDR_VAR 0 11
23751: PUSH
23752: LD_VAR 0 11
23756: PPUSH
23757: LD_INT 1
23759: PPUSH
23760: CALL_OW 3
23764: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: CALL 23975 0 2
23779: PUSH
23780: LD_VAR 0 11
23784: PUSH
23785: EMPTY
23786: EQUAL
23787: OR
23788: IFFALSE 23733
// if not control in _control then
23790: LD_VAR 0 4
23794: PUSH
23795: LD_VAR 0 12
23799: IN
23800: NOT
23801: IFFALSE 23827
// control := _control [ rand ( 1 , _control ) ] ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_VAR 0 12
23812: PUSH
23813: LD_INT 1
23815: PPUSH
23816: LD_VAR 0 12
23820: PPUSH
23821: CALL_OW 12
23825: ARRAY
23826: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23827: LD_VAR 0 2
23831: PPUSH
23832: LD_VAR 0 5
23836: PPUSH
23837: CALL 24195 0 2
23841: NOT
23842: IFFALSE 23901
// repeat weapon := _weapon [ 1 ] ;
23844: LD_ADDR_VAR 0 5
23848: PUSH
23849: LD_VAR 0 10
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23858: LD_ADDR_VAR 0 10
23862: PUSH
23863: LD_VAR 0 10
23867: PPUSH
23868: LD_INT 1
23870: PPUSH
23871: CALL_OW 3
23875: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23876: LD_VAR 0 2
23880: PPUSH
23881: LD_VAR 0 5
23885: PPUSH
23886: CALL 24195 0 2
23890: PUSH
23891: LD_VAR 0 10
23895: PUSH
23896: EMPTY
23897: EQUAL
23898: OR
23899: IFFALSE 23844
// result := [ ] ;
23901: LD_ADDR_VAR 0 6
23905: PUSH
23906: EMPTY
23907: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_VAR 0 4
23927: PPUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: CALL_OW 448
23937: IFFALSE 23970
// result := [ chassis , engine , control , weapon ] ;
23939: LD_ADDR_VAR 0 6
23943: PUSH
23944: LD_VAR 0 2
23948: PUSH
23949: LD_VAR 0 3
23953: PUSH
23954: LD_VAR 0 4
23958: PUSH
23959: LD_VAR 0 5
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: ST_TO_ADDR
// end ;
23970: LD_VAR 0 6
23974: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23975: LD_INT 0
23977: PPUSH
// if not chassis or not engine then
23978: LD_VAR 0 1
23982: NOT
23983: PUSH
23984: LD_VAR 0 2
23988: NOT
23989: OR
23990: IFFALSE 23994
// exit ;
23992: GO 24190
// case engine of engine_solar :
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 2
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24045
24007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_INT 11
24015: PUSH
24016: LD_INT 12
24018: PUSH
24019: LD_INT 13
24021: PUSH
24022: LD_INT 14
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 3
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: ST_TO_ADDR
24043: GO 24174
24045: LD_INT 1
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24115
24053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: LD_INT 11
24061: PUSH
24062: LD_INT 12
24064: PUSH
24065: LD_INT 13
24067: PUSH
24068: LD_INT 14
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: LD_INT 4
24082: PUSH
24083: LD_INT 5
24085: PUSH
24086: LD_INT 21
24088: PUSH
24089: LD_INT 23
24091: PUSH
24092: LD_INT 22
24094: PUSH
24095: LD_INT 24
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
24113: GO 24174
24115: LD_INT 3
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24173
24123: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: LD_INT 13
24131: PUSH
24132: LD_INT 14
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: LD_INT 21
24149: PUSH
24150: LD_INT 22
24152: PUSH
24153: LD_INT 23
24155: PUSH
24156: LD_INT 24
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
24171: GO 24174
24173: POP
// result := ( chassis in result ) ;
24174: LD_ADDR_VAR 0 3
24178: PUSH
24179: LD_VAR 0 1
24183: PUSH
24184: LD_VAR 0 3
24188: IN
24189: ST_TO_ADDR
// end ;
24190: LD_VAR 0 3
24194: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24195: LD_INT 0
24197: PPUSH
// if not chassis or not weapon then
24198: LD_VAR 0 1
24202: NOT
24203: PUSH
24204: LD_VAR 0 2
24208: NOT
24209: OR
24210: IFFALSE 24214
// exit ;
24212: GO 25240
// case weapon of us_machine_gun :
24214: LD_VAR 0 2
24218: PUSH
24219: LD_INT 2
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24257
24227: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: LD_INT 4
24244: PUSH
24245: LD_INT 5
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
24255: GO 25224
24257: LD_INT 3
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24265
24263: GO 24295
24265: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: LD_INT 4
24282: PUSH
24283: LD_INT 5
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: ST_TO_ADDR
24293: GO 25224
24295: LD_INT 11
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24333
24303: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: LD_INT 4
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
24331: GO 25224
24333: LD_INT 4
24335: DOUBLE
24336: EQUAL
24337: IFTRUE 24341
24339: GO 24367
24341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 4
24355: PUSH
24356: LD_INT 5
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: ST_TO_ADDR
24365: GO 25224
24367: LD_INT 5
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24375
24373: GO 24401
24375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_INT 2
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: LD_INT 4
24389: PUSH
24390: LD_INT 5
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 25224
24401: LD_INT 9
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24435
24409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 4
24423: PUSH
24424: LD_INT 5
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 25224
24435: LD_INT 7
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24469
24443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: ST_TO_ADDR
24467: GO 25224
24469: LD_INT 12
24471: DOUBLE
24472: EQUAL
24473: IFTRUE 24477
24475: GO 24503
24477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24478: LD_ADDR_VAR 0 3
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: LD_INT 4
24491: PUSH
24492: LD_INT 5
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 25224
24503: LD_INT 13
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24537
24511: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 3
24522: PUSH
24523: LD_INT 4
24525: PUSH
24526: LD_INT 5
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
24535: GO 25224
24537: LD_INT 14
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24563
24545: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 4
24553: PUSH
24554: LD_INT 5
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: ST_TO_ADDR
24561: GO 25224
24563: LD_INT 6
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24589
24571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24572: LD_ADDR_VAR 0 3
24576: PUSH
24577: LD_INT 4
24579: PUSH
24580: LD_INT 5
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: ST_TO_ADDR
24587: GO 25224
24589: LD_INT 10
24591: DOUBLE
24592: EQUAL
24593: IFTRUE 24597
24595: GO 24615
24597: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24598: LD_ADDR_VAR 0 3
24602: PUSH
24603: LD_INT 4
24605: PUSH
24606: LD_INT 5
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: ST_TO_ADDR
24613: GO 25224
24615: LD_INT 22
24617: DOUBLE
24618: EQUAL
24619: IFTRUE 24623
24621: GO 24649
24623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24624: LD_ADDR_VAR 0 3
24628: PUSH
24629: LD_INT 11
24631: PUSH
24632: LD_INT 12
24634: PUSH
24635: LD_INT 13
24637: PUSH
24638: LD_INT 14
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: ST_TO_ADDR
24647: GO 25224
24649: LD_INT 23
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24683
24657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24658: LD_ADDR_VAR 0 3
24662: PUSH
24663: LD_INT 11
24665: PUSH
24666: LD_INT 12
24668: PUSH
24669: LD_INT 13
24671: PUSH
24672: LD_INT 14
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: ST_TO_ADDR
24681: GO 25224
24683: LD_INT 24
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24717
24691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_INT 11
24699: PUSH
24700: LD_INT 12
24702: PUSH
24703: LD_INT 13
24705: PUSH
24706: LD_INT 14
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: ST_TO_ADDR
24715: GO 25224
24717: LD_INT 30
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24751
24725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 11
24733: PUSH
24734: LD_INT 12
24736: PUSH
24737: LD_INT 13
24739: PUSH
24740: LD_INT 14
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25224
24751: LD_INT 25
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24777
24759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_INT 13
24767: PUSH
24768: LD_INT 14
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 25224
24777: LD_INT 27
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24803
24785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: LD_INT 13
24793: PUSH
24794: LD_INT 14
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: ST_TO_ADDR
24801: GO 25224
24803: LD_INT 28
24805: DOUBLE
24806: EQUAL
24807: IFTRUE 24811
24809: GO 24829
24811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_INT 13
24819: PUSH
24820: LD_INT 14
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: ST_TO_ADDR
24827: GO 25224
24829: LD_INT 29
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24855
24837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_INT 13
24845: PUSH
24846: LD_INT 14
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: ST_TO_ADDR
24853: GO 25224
24855: LD_INT 31
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24881
24863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: LD_INT 14
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 25224
24881: LD_INT 26
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 24907
24889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24890: LD_ADDR_VAR 0 3
24894: PUSH
24895: LD_INT 13
24897: PUSH
24898: LD_INT 14
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25224
24907: LD_INT 42
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24941
24915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_INT 21
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_INT 23
24929: PUSH
24930: LD_INT 24
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 25224
24941: LD_INT 43
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 24975
24949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_INT 21
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_INT 23
24963: PUSH
24964: LD_INT 24
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
24973: GO 25224
24975: LD_INT 44
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25009
24983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 21
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_INT 23
24997: PUSH
24998: LD_INT 24
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
25007: GO 25224
25009: LD_INT 45
25011: DOUBLE
25012: EQUAL
25013: IFTRUE 25017
25015: GO 25043
25017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25018: LD_ADDR_VAR 0 3
25022: PUSH
25023: LD_INT 21
25025: PUSH
25026: LD_INT 22
25028: PUSH
25029: LD_INT 23
25031: PUSH
25032: LD_INT 24
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: ST_TO_ADDR
25041: GO 25224
25043: LD_INT 49
25045: DOUBLE
25046: EQUAL
25047: IFTRUE 25051
25049: GO 25077
25051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25052: LD_ADDR_VAR 0 3
25056: PUSH
25057: LD_INT 21
25059: PUSH
25060: LD_INT 22
25062: PUSH
25063: LD_INT 23
25065: PUSH
25066: LD_INT 24
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: ST_TO_ADDR
25075: GO 25224
25077: LD_INT 51
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25111
25085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25086: LD_ADDR_VAR 0 3
25090: PUSH
25091: LD_INT 21
25093: PUSH
25094: LD_INT 22
25096: PUSH
25097: LD_INT 23
25099: PUSH
25100: LD_INT 24
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
25109: GO 25224
25111: LD_INT 52
25113: DOUBLE
25114: EQUAL
25115: IFTRUE 25119
25117: GO 25145
25119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25120: LD_ADDR_VAR 0 3
25124: PUSH
25125: LD_INT 21
25127: PUSH
25128: LD_INT 22
25130: PUSH
25131: LD_INT 23
25133: PUSH
25134: LD_INT 24
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
25143: GO 25224
25145: LD_INT 53
25147: DOUBLE
25148: EQUAL
25149: IFTRUE 25153
25151: GO 25171
25153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: LD_INT 23
25161: PUSH
25162: LD_INT 24
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: ST_TO_ADDR
25169: GO 25224
25171: LD_INT 46
25173: DOUBLE
25174: EQUAL
25175: IFTRUE 25179
25177: GO 25197
25179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: ST_TO_ADDR
25195: GO 25224
25197: LD_INT 47
25199: DOUBLE
25200: EQUAL
25201: IFTRUE 25205
25203: GO 25223
25205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25206: LD_ADDR_VAR 0 3
25210: PUSH
25211: LD_INT 23
25213: PUSH
25214: LD_INT 24
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: ST_TO_ADDR
25221: GO 25224
25223: POP
// result := ( chassis in result ) ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_VAR 0 3
25238: IN
25239: ST_TO_ADDR
// end ;
25240: LD_VAR 0 3
25244: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25245: LD_INT 0
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// result := array ;
25254: LD_ADDR_VAR 0 5
25258: PUSH
25259: LD_VAR 0 1
25263: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25264: LD_VAR 0 1
25268: NOT
25269: PUSH
25270: LD_VAR 0 2
25274: NOT
25275: OR
25276: PUSH
25277: LD_VAR 0 3
25281: NOT
25282: OR
25283: PUSH
25284: LD_VAR 0 2
25288: PUSH
25289: LD_VAR 0 1
25293: GREATER
25294: OR
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 1
25305: GREATER
25306: OR
25307: IFFALSE 25311
// exit ;
25309: GO 25607
// if direction then
25311: LD_VAR 0 4
25315: IFFALSE 25379
// begin d := 1 ;
25317: LD_ADDR_VAR 0 9
25321: PUSH
25322: LD_INT 1
25324: ST_TO_ADDR
// if i_from > i_to then
25325: LD_VAR 0 2
25329: PUSH
25330: LD_VAR 0 3
25334: GREATER
25335: IFFALSE 25361
// length := ( array - i_from ) + i_to else
25337: LD_ADDR_VAR 0 11
25341: PUSH
25342: LD_VAR 0 1
25346: PUSH
25347: LD_VAR 0 2
25351: MINUS
25352: PUSH
25353: LD_VAR 0 3
25357: PLUS
25358: ST_TO_ADDR
25359: GO 25377
// length := i_to - i_from ;
25361: LD_ADDR_VAR 0 11
25365: PUSH
25366: LD_VAR 0 3
25370: PUSH
25371: LD_VAR 0 2
25375: MINUS
25376: ST_TO_ADDR
// end else
25377: GO 25440
// begin d := - 1 ;
25379: LD_ADDR_VAR 0 9
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: ST_TO_ADDR
// if i_from > i_to then
25388: LD_VAR 0 2
25392: PUSH
25393: LD_VAR 0 3
25397: GREATER
25398: IFFALSE 25418
// length := i_from - i_to else
25400: LD_ADDR_VAR 0 11
25404: PUSH
25405: LD_VAR 0 2
25409: PUSH
25410: LD_VAR 0 3
25414: MINUS
25415: ST_TO_ADDR
25416: GO 25440
// length := ( array - i_to ) + i_from ;
25418: LD_ADDR_VAR 0 11
25422: PUSH
25423: LD_VAR 0 1
25427: PUSH
25428: LD_VAR 0 3
25432: MINUS
25433: PUSH
25434: LD_VAR 0 2
25438: PLUS
25439: ST_TO_ADDR
// end ; if not length then
25440: LD_VAR 0 11
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25607
// tmp := array ;
25449: LD_ADDR_VAR 0 10
25453: PUSH
25454: LD_VAR 0 1
25458: ST_TO_ADDR
// for i = 1 to length do
25459: LD_ADDR_VAR 0 6
25463: PUSH
25464: DOUBLE
25465: LD_INT 1
25467: DEC
25468: ST_TO_ADDR
25469: LD_VAR 0 11
25473: PUSH
25474: FOR_TO
25475: IFFALSE 25595
// begin for j = 1 to array do
25477: LD_ADDR_VAR 0 7
25481: PUSH
25482: DOUBLE
25483: LD_INT 1
25485: DEC
25486: ST_TO_ADDR
25487: LD_VAR 0 1
25491: PUSH
25492: FOR_TO
25493: IFFALSE 25581
// begin k := j + d ;
25495: LD_ADDR_VAR 0 8
25499: PUSH
25500: LD_VAR 0 7
25504: PUSH
25505: LD_VAR 0 9
25509: PLUS
25510: ST_TO_ADDR
// if k > array then
25511: LD_VAR 0 8
25515: PUSH
25516: LD_VAR 0 1
25520: GREATER
25521: IFFALSE 25531
// k := 1 ;
25523: LD_ADDR_VAR 0 8
25527: PUSH
25528: LD_INT 1
25530: ST_TO_ADDR
// if not k then
25531: LD_VAR 0 8
25535: NOT
25536: IFFALSE 25548
// k := array ;
25538: LD_ADDR_VAR 0 8
25542: PUSH
25543: LD_VAR 0 1
25547: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25548: LD_ADDR_VAR 0 10
25552: PUSH
25553: LD_VAR 0 10
25557: PPUSH
25558: LD_VAR 0 8
25562: PPUSH
25563: LD_VAR 0 1
25567: PUSH
25568: LD_VAR 0 7
25572: ARRAY
25573: PPUSH
25574: CALL_OW 1
25578: ST_TO_ADDR
// end ;
25579: GO 25492
25581: POP
25582: POP
// array := tmp ;
25583: LD_ADDR_VAR 0 1
25587: PUSH
25588: LD_VAR 0 10
25592: ST_TO_ADDR
// end ;
25593: GO 25474
25595: POP
25596: POP
// result := array ;
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: LD_VAR 0 1
25606: ST_TO_ADDR
// end ;
25607: LD_VAR 0 5
25611: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25612: LD_INT 0
25614: PPUSH
25615: PPUSH
// result := 0 ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// if not array or not value in array then
25624: LD_VAR 0 1
25628: NOT
25629: PUSH
25630: LD_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: IN
25640: NOT
25641: OR
25642: IFFALSE 25646
// exit ;
25644: GO 25700
// for i = 1 to array do
25646: LD_ADDR_VAR 0 4
25650: PUSH
25651: DOUBLE
25652: LD_INT 1
25654: DEC
25655: ST_TO_ADDR
25656: LD_VAR 0 1
25660: PUSH
25661: FOR_TO
25662: IFFALSE 25698
// if value = array [ i ] then
25664: LD_VAR 0 2
25668: PUSH
25669: LD_VAR 0 1
25673: PUSH
25674: LD_VAR 0 4
25678: ARRAY
25679: EQUAL
25680: IFFALSE 25696
// begin result := i ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_VAR 0 4
25691: ST_TO_ADDR
// exit ;
25692: POP
25693: POP
25694: GO 25700
// end ;
25696: GO 25661
25698: POP
25699: POP
// end ;
25700: LD_VAR 0 3
25704: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25705: LD_INT 0
25707: PPUSH
// vc_chassis := chassis ;
25708: LD_ADDR_OWVAR 37
25712: PUSH
25713: LD_VAR 0 1
25717: ST_TO_ADDR
// vc_engine := engine ;
25718: LD_ADDR_OWVAR 39
25722: PUSH
25723: LD_VAR 0 2
25727: ST_TO_ADDR
// vc_control := control ;
25728: LD_ADDR_OWVAR 38
25732: PUSH
25733: LD_VAR 0 3
25737: ST_TO_ADDR
// vc_weapon := weapon ;
25738: LD_ADDR_OWVAR 40
25742: PUSH
25743: LD_VAR 0 4
25747: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25748: LD_ADDR_OWVAR 41
25752: PUSH
25753: LD_VAR 0 5
25757: ST_TO_ADDR
// end ;
25758: LD_VAR 0 6
25762: RET
// export function WantPlant ( unit ) ; var task ; begin
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// result := false ;
25767: LD_ADDR_VAR 0 2
25771: PUSH
25772: LD_INT 0
25774: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 437
25789: ST_TO_ADDR
// if task then
25790: LD_VAR 0 3
25794: IFFALSE 25822
// if task [ 1 ] [ 1 ] = p then
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 1
25803: ARRAY
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: PUSH
25809: LD_STRING p
25811: EQUAL
25812: IFFALSE 25822
// result := true ;
25814: LD_ADDR_VAR 0 2
25818: PUSH
25819: LD_INT 1
25821: ST_TO_ADDR
// end ;
25822: LD_VAR 0 2
25826: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
// if pos < 1 then
25833: LD_VAR 0 2
25837: PUSH
25838: LD_INT 1
25840: LESS
25841: IFFALSE 25845
// exit ;
25843: GO 26148
// if pos = 1 then
25845: LD_VAR 0 2
25849: PUSH
25850: LD_INT 1
25852: EQUAL
25853: IFFALSE 25886
// result := Replace ( arr , pos [ 1 ] , value ) else
25855: LD_ADDR_VAR 0 4
25859: PUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_VAR 0 2
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_VAR 0 3
25878: PPUSH
25879: CALL_OW 1
25883: ST_TO_ADDR
25884: GO 26148
// begin tmp := arr ;
25886: LD_ADDR_VAR 0 6
25890: PUSH
25891: LD_VAR 0 1
25895: ST_TO_ADDR
// s_arr := [ tmp ] ;
25896: LD_ADDR_VAR 0 7
25900: PUSH
25901: LD_VAR 0 6
25905: PUSH
25906: EMPTY
25907: LIST
25908: ST_TO_ADDR
// for i = 1 to pos - 1 do
25909: LD_ADDR_VAR 0 5
25913: PUSH
25914: DOUBLE
25915: LD_INT 1
25917: DEC
25918: ST_TO_ADDR
25919: LD_VAR 0 2
25923: PUSH
25924: LD_INT 1
25926: MINUS
25927: PUSH
25928: FOR_TO
25929: IFFALSE 25974
// begin tmp := tmp [ pos [ i ] ] ;
25931: LD_ADDR_VAR 0 6
25935: PUSH
25936: LD_VAR 0 6
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: LD_VAR 0 5
25950: ARRAY
25951: ARRAY
25952: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25953: LD_ADDR_VAR 0 7
25957: PUSH
25958: LD_VAR 0 7
25962: PUSH
25963: LD_VAR 0 6
25967: PUSH
25968: EMPTY
25969: LIST
25970: ADD
25971: ST_TO_ADDR
// end ;
25972: GO 25928
25974: POP
25975: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25976: LD_ADDR_VAR 0 6
25980: PUSH
25981: LD_VAR 0 6
25985: PPUSH
25986: LD_VAR 0 2
25990: PUSH
25991: LD_VAR 0 2
25995: ARRAY
25996: PPUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: CALL_OW 1
26006: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26007: LD_ADDR_VAR 0 7
26011: PUSH
26012: LD_VAR 0 7
26016: PPUSH
26017: LD_VAR 0 7
26021: PPUSH
26022: LD_VAR 0 6
26026: PPUSH
26027: CALL_OW 1
26031: ST_TO_ADDR
// for i = s_arr downto 2 do
26032: LD_ADDR_VAR 0 5
26036: PUSH
26037: DOUBLE
26038: LD_VAR 0 7
26042: INC
26043: ST_TO_ADDR
26044: LD_INT 2
26046: PUSH
26047: FOR_DOWNTO
26048: IFFALSE 26132
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26050: LD_ADDR_VAR 0 6
26054: PUSH
26055: LD_VAR 0 7
26059: PUSH
26060: LD_VAR 0 5
26064: PUSH
26065: LD_INT 1
26067: MINUS
26068: ARRAY
26069: PPUSH
26070: LD_VAR 0 2
26074: PUSH
26075: LD_VAR 0 5
26079: PUSH
26080: LD_INT 1
26082: MINUS
26083: ARRAY
26084: PPUSH
26085: LD_VAR 0 7
26089: PUSH
26090: LD_VAR 0 5
26094: ARRAY
26095: PPUSH
26096: CALL_OW 1
26100: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26101: LD_ADDR_VAR 0 7
26105: PUSH
26106: LD_VAR 0 7
26110: PPUSH
26111: LD_VAR 0 5
26115: PUSH
26116: LD_INT 1
26118: MINUS
26119: PPUSH
26120: LD_VAR 0 6
26124: PPUSH
26125: CALL_OW 1
26129: ST_TO_ADDR
// end ;
26130: GO 26047
26132: POP
26133: POP
// result := s_arr [ 1 ] ;
26134: LD_ADDR_VAR 0 4
26138: PUSH
26139: LD_VAR 0 7
26143: PUSH
26144: LD_INT 1
26146: ARRAY
26147: ST_TO_ADDR
// end ; end ;
26148: LD_VAR 0 4
26152: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
// if not list then
26157: LD_VAR 0 1
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26257
// i := list [ pos1 ] ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_VAR 0 1
26175: PUSH
26176: LD_VAR 0 2
26180: ARRAY
26181: ST_TO_ADDR
// if not i then
26182: LD_VAR 0 5
26186: NOT
26187: IFFALSE 26191
// exit ;
26189: GO 26257
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26191: LD_ADDR_VAR 0 1
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_VAR 0 2
26205: PPUSH
26206: LD_VAR 0 1
26210: PUSH
26211: LD_VAR 0 3
26215: ARRAY
26216: PPUSH
26217: CALL_OW 1
26221: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26222: LD_ADDR_VAR 0 1
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_VAR 0 3
26236: PPUSH
26237: LD_VAR 0 5
26241: PPUSH
26242: CALL_OW 1
26246: ST_TO_ADDR
// result := list ;
26247: LD_ADDR_VAR 0 4
26251: PUSH
26252: LD_VAR 0 1
26256: ST_TO_ADDR
// end ;
26257: LD_VAR 0 4
26261: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26262: LD_INT 0
26264: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26265: LD_ADDR_VAR 0 5
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 250
26279: PPUSH
26280: LD_VAR 0 1
26284: PPUSH
26285: CALL_OW 251
26289: PPUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_VAR 0 3
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: CALL 26315 0 5
26309: ST_TO_ADDR
// end ;
26310: LD_VAR 0 5
26314: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26315: LD_INT 0
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
// if not list then
26321: LD_VAR 0 3
26325: NOT
26326: IFFALSE 26330
// exit ;
26328: GO 26718
// result := [ ] ;
26330: LD_ADDR_VAR 0 6
26334: PUSH
26335: EMPTY
26336: ST_TO_ADDR
// for i in list do
26337: LD_ADDR_VAR 0 7
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26550
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26350: LD_ADDR_VAR 0 9
26354: PUSH
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: LD_VAR 0 2
26369: PPUSH
26370: CALL_OW 297
26374: ST_TO_ADDR
// if not result then
26375: LD_VAR 0 6
26379: NOT
26380: IFFALSE 26406
// result := [ [ i , tmp ] ] else
26382: LD_ADDR_VAR 0 6
26386: PUSH
26387: LD_VAR 0 7
26391: PUSH
26392: LD_VAR 0 9
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: ST_TO_ADDR
26404: GO 26548
// begin if result [ result ] [ 2 ] < tmp then
26406: LD_VAR 0 6
26410: PUSH
26411: LD_VAR 0 6
26415: ARRAY
26416: PUSH
26417: LD_INT 2
26419: ARRAY
26420: PUSH
26421: LD_VAR 0 9
26425: LESS
26426: IFFALSE 26468
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26428: LD_ADDR_VAR 0 6
26432: PUSH
26433: LD_VAR 0 6
26437: PPUSH
26438: LD_VAR 0 6
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: LD_VAR 0 7
26451: PUSH
26452: LD_VAR 0 9
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PPUSH
26461: CALL_OW 2
26465: ST_TO_ADDR
26466: GO 26548
// for j = 1 to result do
26468: LD_ADDR_VAR 0 8
26472: PUSH
26473: DOUBLE
26474: LD_INT 1
26476: DEC
26477: ST_TO_ADDR
26478: LD_VAR 0 6
26482: PUSH
26483: FOR_TO
26484: IFFALSE 26546
// begin if tmp < result [ j ] [ 2 ] then
26486: LD_VAR 0 9
26490: PUSH
26491: LD_VAR 0 6
26495: PUSH
26496: LD_VAR 0 8
26500: ARRAY
26501: PUSH
26502: LD_INT 2
26504: ARRAY
26505: LESS
26506: IFFALSE 26544
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26508: LD_ADDR_VAR 0 6
26512: PUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: LD_VAR 0 8
26522: PPUSH
26523: LD_VAR 0 7
26527: PUSH
26528: LD_VAR 0 9
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: CALL_OW 2
26541: ST_TO_ADDR
// break ;
26542: GO 26546
// end ; end ;
26544: GO 26483
26546: POP
26547: POP
// end ; end ;
26548: GO 26347
26550: POP
26551: POP
// if result and not asc then
26552: LD_VAR 0 6
26556: PUSH
26557: LD_VAR 0 4
26561: NOT
26562: AND
26563: IFFALSE 26638
// begin tmp := result ;
26565: LD_ADDR_VAR 0 9
26569: PUSH
26570: LD_VAR 0 6
26574: ST_TO_ADDR
// for i = tmp downto 1 do
26575: LD_ADDR_VAR 0 7
26579: PUSH
26580: DOUBLE
26581: LD_VAR 0 9
26585: INC
26586: ST_TO_ADDR
26587: LD_INT 1
26589: PUSH
26590: FOR_DOWNTO
26591: IFFALSE 26636
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26593: LD_ADDR_VAR 0 6
26597: PUSH
26598: LD_VAR 0 6
26602: PPUSH
26603: LD_VAR 0 9
26607: PUSH
26608: LD_VAR 0 7
26612: MINUS
26613: PUSH
26614: LD_INT 1
26616: PLUS
26617: PPUSH
26618: LD_VAR 0 9
26622: PUSH
26623: LD_VAR 0 7
26627: ARRAY
26628: PPUSH
26629: CALL_OW 1
26633: ST_TO_ADDR
26634: GO 26590
26636: POP
26637: POP
// end ; tmp := [ ] ;
26638: LD_ADDR_VAR 0 9
26642: PUSH
26643: EMPTY
26644: ST_TO_ADDR
// if mode then
26645: LD_VAR 0 5
26649: IFFALSE 26718
// begin for i = 1 to result do
26651: LD_ADDR_VAR 0 7
26655: PUSH
26656: DOUBLE
26657: LD_INT 1
26659: DEC
26660: ST_TO_ADDR
26661: LD_VAR 0 6
26665: PUSH
26666: FOR_TO
26667: IFFALSE 26706
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26669: LD_ADDR_VAR 0 9
26673: PUSH
26674: LD_VAR 0 9
26678: PPUSH
26679: LD_VAR 0 7
26683: PPUSH
26684: LD_VAR 0 6
26688: PUSH
26689: LD_VAR 0 7
26693: ARRAY
26694: PUSH
26695: LD_INT 1
26697: ARRAY
26698: PPUSH
26699: CALL_OW 1
26703: ST_TO_ADDR
26704: GO 26666
26706: POP
26707: POP
// result := tmp ;
26708: LD_ADDR_VAR 0 6
26712: PUSH
26713: LD_VAR 0 9
26717: ST_TO_ADDR
// end ; end ;
26718: LD_VAR 0 6
26722: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
// if not x or not y then
26753: LD_VAR 0 2
26757: NOT
26758: PUSH
26759: LD_VAR 0 3
26763: NOT
26764: OR
26765: IFFALSE 26769
// exit ;
26767: GO 28415
// if not range then
26769: LD_VAR 0 4
26773: NOT
26774: IFFALSE 26784
// range := 10 ;
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: LD_INT 10
26783: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26784: LD_ADDR_VAR 0 8
26788: PUSH
26789: LD_INT 81
26791: PUSH
26792: LD_VAR 0 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 92
26803: PUSH
26804: LD_VAR 0 2
26808: PUSH
26809: LD_VAR 0 3
26813: PUSH
26814: LD_VAR 0 4
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: LD_INT 21
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: ST_TO_ADDR
// if not tmp then
26852: LD_VAR 0 8
26856: NOT
26857: IFFALSE 26861
// exit ;
26859: GO 28415
// for i in tmp do
26861: LD_ADDR_VAR 0 6
26865: PUSH
26866: LD_VAR 0 8
26870: PUSH
26871: FOR_IN
26872: IFFALSE 28390
// begin points := [ 0 , 0 , 0 ] ;
26874: LD_ADDR_VAR 0 9
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// bpoints := 1 ;
26893: LD_ADDR_VAR 0 10
26897: PUSH
26898: LD_INT 1
26900: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26901: LD_VAR 0 6
26905: PPUSH
26906: CALL_OW 247
26910: PUSH
26911: LD_INT 1
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26919
26917: GO 27497
26919: POP
// begin if GetClass ( i ) = 1 then
26920: LD_VAR 0 6
26924: PPUSH
26925: CALL_OW 257
26929: PUSH
26930: LD_INT 1
26932: EQUAL
26933: IFFALSE 26954
// points := [ 10 , 5 , 3 ] ;
26935: LD_ADDR_VAR 0 9
26939: PUSH
26940: LD_INT 10
26942: PUSH
26943: LD_INT 5
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26954: LD_VAR 0 6
26958: PPUSH
26959: CALL_OW 257
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 3
26969: PUSH
26970: LD_INT 4
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: IN
26978: IFFALSE 26999
// points := [ 3 , 2 , 1 ] ;
26980: LD_ADDR_VAR 0 9
26984: PUSH
26985: LD_INT 3
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26999: LD_VAR 0 6
27003: PPUSH
27004: CALL_OW 257
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27033
// points := [ 130 , 5 , 2 ] ;
27014: LD_ADDR_VAR 0 9
27018: PUSH
27019: LD_INT 130
27021: PUSH
27022: LD_INT 5
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27033: LD_VAR 0 6
27037: PPUSH
27038: CALL_OW 257
27042: PUSH
27043: LD_INT 8
27045: EQUAL
27046: IFFALSE 27067
// points := [ 35 , 35 , 30 ] ;
27048: LD_ADDR_VAR 0 9
27052: PUSH
27053: LD_INT 35
27055: PUSH
27056: LD_INT 35
27058: PUSH
27059: LD_INT 30
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27067: LD_VAR 0 6
27071: PPUSH
27072: CALL_OW 257
27076: PUSH
27077: LD_INT 9
27079: EQUAL
27080: IFFALSE 27101
// points := [ 20 , 55 , 40 ] ;
27082: LD_ADDR_VAR 0 9
27086: PUSH
27087: LD_INT 20
27089: PUSH
27090: LD_INT 55
27092: PUSH
27093: LD_INT 40
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27101: LD_VAR 0 6
27105: PPUSH
27106: CALL_OW 257
27110: PUSH
27111: LD_INT 12
27113: PUSH
27114: LD_INT 16
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: IN
27121: IFFALSE 27142
// points := [ 5 , 3 , 2 ] ;
27123: LD_ADDR_VAR 0 9
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: LD_INT 3
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27142: LD_VAR 0 6
27146: PPUSH
27147: CALL_OW 257
27151: PUSH
27152: LD_INT 17
27154: EQUAL
27155: IFFALSE 27176
// points := [ 100 , 50 , 75 ] ;
27157: LD_ADDR_VAR 0 9
27161: PUSH
27162: LD_INT 100
27164: PUSH
27165: LD_INT 50
27167: PUSH
27168: LD_INT 75
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27176: LD_VAR 0 6
27180: PPUSH
27181: CALL_OW 257
27185: PUSH
27186: LD_INT 15
27188: EQUAL
27189: IFFALSE 27210
// points := [ 10 , 5 , 3 ] ;
27191: LD_ADDR_VAR 0 9
27195: PUSH
27196: LD_INT 10
27198: PUSH
27199: LD_INT 5
27201: PUSH
27202: LD_INT 3
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27210: LD_VAR 0 6
27214: PPUSH
27215: CALL_OW 257
27219: PUSH
27220: LD_INT 14
27222: EQUAL
27223: IFFALSE 27244
// points := [ 10 , 0 , 0 ] ;
27225: LD_ADDR_VAR 0 9
27229: PUSH
27230: LD_INT 10
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27244: LD_VAR 0 6
27248: PPUSH
27249: CALL_OW 257
27253: PUSH
27254: LD_INT 11
27256: EQUAL
27257: IFFALSE 27278
// points := [ 30 , 10 , 5 ] ;
27259: LD_ADDR_VAR 0 9
27263: PUSH
27264: LD_INT 30
27266: PUSH
27267: LD_INT 10
27269: PUSH
27270: LD_INT 5
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27278: LD_VAR 0 1
27282: PPUSH
27283: LD_INT 5
27285: PPUSH
27286: CALL_OW 321
27290: PUSH
27291: LD_INT 2
27293: EQUAL
27294: IFFALSE 27311
// bpoints := bpoints * 1.8 ;
27296: LD_ADDR_VAR 0 10
27300: PUSH
27301: LD_VAR 0 10
27305: PUSH
27306: LD_REAL  1.80000000000000E+0000
27309: MUL
27310: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27311: LD_VAR 0 6
27315: PPUSH
27316: CALL_OW 257
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: LD_INT 4
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: IN
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 51
27347: PPUSH
27348: CALL_OW 321
27352: PUSH
27353: LD_INT 2
27355: EQUAL
27356: AND
27357: IFFALSE 27374
// bpoints := bpoints * 1.2 ;
27359: LD_ADDR_VAR 0 10
27363: PUSH
27364: LD_VAR 0 10
27368: PUSH
27369: LD_REAL  1.20000000000000E+0000
27372: MUL
27373: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 257
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: LD_INT 7
27389: PUSH
27390: LD_INT 9
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: IN
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: LD_INT 52
27406: PPUSH
27407: CALL_OW 321
27411: PUSH
27412: LD_INT 2
27414: EQUAL
27415: AND
27416: IFFALSE 27433
// bpoints := bpoints * 1.5 ;
27418: LD_ADDR_VAR 0 10
27422: PUSH
27423: LD_VAR 0 10
27427: PUSH
27428: LD_REAL  1.50000000000000E+0000
27431: MUL
27432: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_INT 66
27440: PPUSH
27441: CALL_OW 321
27445: PUSH
27446: LD_INT 2
27448: EQUAL
27449: IFFALSE 27466
// bpoints := bpoints * 1.1 ;
27451: LD_ADDR_VAR 0 10
27455: PUSH
27456: LD_VAR 0 10
27460: PUSH
27461: LD_REAL  1.10000000000000E+0000
27464: MUL
27465: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27466: LD_ADDR_VAR 0 10
27470: PUSH
27471: LD_VAR 0 10
27475: PUSH
27476: LD_VAR 0 6
27480: PPUSH
27481: LD_INT 1
27483: PPUSH
27484: CALL_OW 259
27488: PUSH
27489: LD_REAL  1.15000000000000E+0000
27492: MUL
27493: MUL
27494: ST_TO_ADDR
// end ; unit_vehicle :
27495: GO 28319
27497: LD_INT 2
27499: DOUBLE
27500: EQUAL
27501: IFTRUE 27505
27503: GO 28307
27505: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27506: LD_VAR 0 6
27510: PPUSH
27511: CALL_OW 264
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 42
27521: PUSH
27522: LD_INT 24
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: IN
27530: IFFALSE 27551
// points := [ 25 , 5 , 3 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 25
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: LD_INT 3
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 264
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: LD_INT 43
27566: PUSH
27567: LD_INT 25
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: IN
27575: IFFALSE 27596
// points := [ 40 , 15 , 5 ] ;
27577: LD_ADDR_VAR 0 9
27581: PUSH
27582: LD_INT 40
27584: PUSH
27585: LD_INT 15
27587: PUSH
27588: LD_INT 5
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27596: LD_VAR 0 6
27600: PPUSH
27601: CALL_OW 264
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 23
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: IN
27616: IFFALSE 27637
// points := [ 7 , 25 , 8 ] ;
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: LD_INT 7
27625: PUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 8
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27637: LD_VAR 0 6
27641: PPUSH
27642: CALL_OW 264
27646: PUSH
27647: LD_INT 5
27649: PUSH
27650: LD_INT 27
27652: PUSH
27653: LD_INT 44
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: IN
27661: IFFALSE 27682
// points := [ 14 , 50 , 16 ] ;
27663: LD_ADDR_VAR 0 9
27667: PUSH
27668: LD_INT 14
27670: PUSH
27671: LD_INT 50
27673: PUSH
27674: LD_INT 16
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27682: LD_VAR 0 6
27686: PPUSH
27687: CALL_OW 264
27691: PUSH
27692: LD_INT 6
27694: PUSH
27695: LD_INT 46
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: IN
27702: IFFALSE 27723
// points := [ 32 , 120 , 70 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 32
27711: PUSH
27712: LD_INT 120
27714: PUSH
27715: LD_INT 70
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 264
27732: PUSH
27733: LD_INT 7
27735: PUSH
27736: LD_INT 28
27738: PUSH
27739: LD_INT 45
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: IN
27747: IFFALSE 27768
// points := [ 35 , 20 , 45 ] ;
27749: LD_ADDR_VAR 0 9
27753: PUSH
27754: LD_INT 35
27756: PUSH
27757: LD_INT 20
27759: PUSH
27760: LD_INT 45
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27768: LD_VAR 0 6
27772: PPUSH
27773: CALL_OW 264
27777: PUSH
27778: LD_INT 47
27780: PUSH
27781: EMPTY
27782: LIST
27783: IN
27784: IFFALSE 27805
// points := [ 67 , 45 , 75 ] ;
27786: LD_ADDR_VAR 0 9
27790: PUSH
27791: LD_INT 67
27793: PUSH
27794: LD_INT 45
27796: PUSH
27797: LD_INT 75
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 264
27814: PUSH
27815: LD_INT 26
27817: PUSH
27818: EMPTY
27819: LIST
27820: IN
27821: IFFALSE 27842
// points := [ 120 , 30 , 80 ] ;
27823: LD_ADDR_VAR 0 9
27827: PUSH
27828: LD_INT 120
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: LD_INT 80
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 264
27851: PUSH
27852: LD_INT 22
27854: PUSH
27855: EMPTY
27856: LIST
27857: IN
27858: IFFALSE 27879
// points := [ 40 , 1 , 1 ] ;
27860: LD_ADDR_VAR 0 9
27864: PUSH
27865: LD_INT 40
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27879: LD_VAR 0 6
27883: PPUSH
27884: CALL_OW 264
27888: PUSH
27889: LD_INT 29
27891: PUSH
27892: EMPTY
27893: LIST
27894: IN
27895: IFFALSE 27916
// points := [ 70 , 200 , 400 ] ;
27897: LD_ADDR_VAR 0 9
27901: PUSH
27902: LD_INT 70
27904: PUSH
27905: LD_INT 200
27907: PUSH
27908: LD_INT 400
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27916: LD_VAR 0 6
27920: PPUSH
27921: CALL_OW 264
27925: PUSH
27926: LD_INT 14
27928: PUSH
27929: LD_INT 53
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: IN
27936: IFFALSE 27957
// points := [ 40 , 10 , 20 ] ;
27938: LD_ADDR_VAR 0 9
27942: PUSH
27943: LD_INT 40
27945: PUSH
27946: LD_INT 10
27948: PUSH
27949: LD_INT 20
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27957: LD_VAR 0 6
27961: PPUSH
27962: CALL_OW 264
27966: PUSH
27967: LD_INT 9
27969: PUSH
27970: EMPTY
27971: LIST
27972: IN
27973: IFFALSE 27994
// points := [ 5 , 70 , 20 ] ;
27975: LD_ADDR_VAR 0 9
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: LD_INT 70
27985: PUSH
27986: LD_INT 20
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27994: LD_VAR 0 6
27998: PPUSH
27999: CALL_OW 264
28003: PUSH
28004: LD_INT 10
28006: PUSH
28007: EMPTY
28008: LIST
28009: IN
28010: IFFALSE 28031
// points := [ 35 , 110 , 70 ] ;
28012: LD_ADDR_VAR 0 9
28016: PUSH
28017: LD_INT 35
28019: PUSH
28020: LD_INT 110
28022: PUSH
28023: LD_INT 70
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28031: LD_VAR 0 6
28035: PPUSH
28036: CALL_OW 265
28040: PUSH
28041: LD_INT 25
28043: EQUAL
28044: IFFALSE 28065
// points := [ 80 , 65 , 100 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 80
28053: PUSH
28054: LD_INT 65
28056: PUSH
28057: LD_INT 100
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 263
28074: PUSH
28075: LD_INT 1
28077: EQUAL
28078: IFFALSE 28113
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28080: LD_ADDR_VAR 0 10
28084: PUSH
28085: LD_VAR 0 10
28089: PUSH
28090: LD_VAR 0 6
28094: PPUSH
28095: CALL_OW 311
28099: PPUSH
28100: LD_INT 3
28102: PPUSH
28103: CALL_OW 259
28107: PUSH
28108: LD_INT 4
28110: MUL
28111: MUL
28112: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 263
28122: PUSH
28123: LD_INT 2
28125: EQUAL
28126: IFFALSE 28177
// begin j := IsControledBy ( i ) ;
28128: LD_ADDR_VAR 0 7
28132: PUSH
28133: LD_VAR 0 6
28137: PPUSH
28138: CALL_OW 312
28142: ST_TO_ADDR
// if j then
28143: LD_VAR 0 7
28147: IFFALSE 28177
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28149: LD_ADDR_VAR 0 10
28153: PUSH
28154: LD_VAR 0 10
28158: PUSH
28159: LD_VAR 0 7
28163: PPUSH
28164: LD_INT 3
28166: PPUSH
28167: CALL_OW 259
28171: PUSH
28172: LD_INT 3
28174: MUL
28175: MUL
28176: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28177: LD_VAR 0 6
28181: PPUSH
28182: CALL_OW 264
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: LD_INT 6
28192: PUSH
28193: LD_INT 46
28195: PUSH
28196: LD_INT 44
28198: PUSH
28199: LD_INT 47
28201: PUSH
28202: LD_INT 45
28204: PUSH
28205: LD_INT 28
28207: PUSH
28208: LD_INT 7
28210: PUSH
28211: LD_INT 27
28213: PUSH
28214: LD_INT 29
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: IN
28229: PUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: LD_INT 52
28237: PPUSH
28238: CALL_OW 321
28242: PUSH
28243: LD_INT 2
28245: EQUAL
28246: AND
28247: IFFALSE 28264
// bpoints := bpoints * 1.2 ;
28249: LD_ADDR_VAR 0 10
28253: PUSH
28254: LD_VAR 0 10
28258: PUSH
28259: LD_REAL  1.20000000000000E+0000
28262: MUL
28263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 264
28273: PUSH
28274: LD_INT 6
28276: PUSH
28277: LD_INT 46
28279: PUSH
28280: LD_INT 47
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: IN
28288: IFFALSE 28305
// bpoints := bpoints * 1.2 ;
28290: LD_ADDR_VAR 0 10
28294: PUSH
28295: LD_VAR 0 10
28299: PUSH
28300: LD_REAL  1.20000000000000E+0000
28303: MUL
28304: ST_TO_ADDR
// end ; unit_building :
28305: GO 28319
28307: LD_INT 3
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 28318
28315: POP
// ; end ;
28316: GO 28319
28318: POP
// for j = 1 to 3 do
28319: LD_ADDR_VAR 0 7
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_INT 3
28331: PUSH
28332: FOR_TO
28333: IFFALSE 28386
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28335: LD_ADDR_VAR 0 5
28339: PUSH
28340: LD_VAR 0 5
28344: PPUSH
28345: LD_VAR 0 7
28349: PPUSH
28350: LD_VAR 0 5
28354: PUSH
28355: LD_VAR 0 7
28359: ARRAY
28360: PUSH
28361: LD_VAR 0 9
28365: PUSH
28366: LD_VAR 0 7
28370: ARRAY
28371: PUSH
28372: LD_VAR 0 10
28376: MUL
28377: PLUS
28378: PPUSH
28379: CALL_OW 1
28383: ST_TO_ADDR
28384: GO 28332
28386: POP
28387: POP
// end ;
28388: GO 26871
28390: POP
28391: POP
// result := Replace ( result , 4 , tmp ) ;
28392: LD_ADDR_VAR 0 5
28396: PUSH
28397: LD_VAR 0 5
28401: PPUSH
28402: LD_INT 4
28404: PPUSH
28405: LD_VAR 0 8
28409: PPUSH
28410: CALL_OW 1
28414: ST_TO_ADDR
// end ;
28415: LD_VAR 0 5
28419: RET
// export function DangerAtRange ( unit , range ) ; begin
28420: LD_INT 0
28422: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 255
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 250
28447: PPUSH
28448: LD_VAR 0 1
28452: PPUSH
28453: CALL_OW 251
28457: PPUSH
28458: LD_VAR 0 2
28462: PPUSH
28463: CALL 26723 0 4
28467: ST_TO_ADDR
// end ;
28468: LD_VAR 0 3
28472: RET
// export function DangerInArea ( side , area ) ; begin
28473: LD_INT 0
28475: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: LD_VAR 0 2
28485: PPUSH
28486: LD_INT 81
28488: PUSH
28489: LD_VAR 0 1
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PPUSH
28498: CALL_OW 70
28502: ST_TO_ADDR
// end ;
28503: LD_VAR 0 3
28507: RET
// export function IsExtension ( b ) ; begin
28508: LD_INT 0
28510: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28511: LD_ADDR_VAR 0 2
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 23
28523: PUSH
28524: LD_INT 20
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_INT 17
28532: PUSH
28533: LD_INT 24
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 19
28541: PUSH
28542: LD_INT 16
28544: PUSH
28545: LD_INT 25
28547: PUSH
28548: LD_INT 18
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: IN
28563: ST_TO_ADDR
// end ;
28564: LD_VAR 0 2
28568: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
// result := [ ] ;
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: EMPTY
28580: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: LD_INT 21
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 70
28605: ST_TO_ADDR
// if not tmp then
28606: LD_VAR 0 4
28610: NOT
28611: IFFALSE 28615
// exit ;
28613: GO 28673
// for i in tmp do
28615: LD_ADDR_VAR 0 5
28619: PUSH
28620: LD_VAR 0 4
28624: PUSH
28625: FOR_IN
28626: IFFALSE 28661
// if GetBase ( i ) <> base then
28628: LD_VAR 0 5
28632: PPUSH
28633: CALL_OW 274
28637: PUSH
28638: LD_VAR 0 1
28642: NONEQUAL
28643: IFFALSE 28659
// ComLinkToBase ( base , i ) ;
28645: LD_VAR 0 1
28649: PPUSH
28650: LD_VAR 0 5
28654: PPUSH
28655: CALL_OW 169
28659: GO 28625
28661: POP
28662: POP
// result := tmp ;
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_VAR 0 4
28672: ST_TO_ADDR
// end ;
28673: LD_VAR 0 3
28677: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28678: LD_INT 0
28680: PPUSH
28681: PPUSH
// if BuildingStatus ( b ) = bs_build then
28682: LD_VAR 0 2
28686: PPUSH
28687: CALL_OW 461
28691: PUSH
28692: LD_INT 1
28694: EQUAL
28695: IFFALSE 28755
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28697: LD_VAR 0 1
28701: PPUSH
28702: LD_STRING h
28704: PUSH
28705: LD_VAR 0 2
28709: PPUSH
28710: CALL_OW 250
28714: PUSH
28715: LD_VAR 0 2
28719: PPUSH
28720: CALL_OW 251
28724: PUSH
28725: LD_VAR 0 2
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: PPUSH
28751: CALL_OW 446
// end ;
28755: LD_VAR 0 3
28759: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28760: LD_INT 0
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28768: LD_VAR 0 1
28772: NOT
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 263
28783: PUSH
28784: LD_INT 2
28786: EQUAL
28787: NOT
28788: OR
28789: IFFALSE 28793
// exit ;
28791: GO 29109
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28793: LD_ADDR_VAR 0 6
28797: PUSH
28798: LD_INT 22
28800: PUSH
28801: LD_VAR 0 1
28805: PPUSH
28806: CALL_OW 255
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 30
28820: PUSH
28821: LD_INT 36
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 34
28830: PUSH
28831: LD_INT 31
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PPUSH
28847: CALL_OW 69
28851: ST_TO_ADDR
// if not tmp then
28852: LD_VAR 0 6
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 29109
// result := [ ] ;
28861: LD_ADDR_VAR 0 2
28865: PUSH
28866: EMPTY
28867: ST_TO_ADDR
// for i in tmp do
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_VAR 0 6
28877: PUSH
28878: FOR_IN
28879: IFFALSE 28950
// begin t := UnitsInside ( i ) ;
28881: LD_ADDR_VAR 0 4
28885: PUSH
28886: LD_VAR 0 3
28890: PPUSH
28891: CALL_OW 313
28895: ST_TO_ADDR
// if t then
28896: LD_VAR 0 4
28900: IFFALSE 28948
// for j in t do
28902: LD_ADDR_VAR 0 7
28906: PUSH
28907: LD_VAR 0 4
28911: PUSH
28912: FOR_IN
28913: IFFALSE 28946
// result := Insert ( result , result + 1 , j ) ;
28915: LD_ADDR_VAR 0 2
28919: PUSH
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_VAR 0 2
28929: PUSH
28930: LD_INT 1
28932: PLUS
28933: PPUSH
28934: LD_VAR 0 7
28938: PPUSH
28939: CALL_OW 2
28943: ST_TO_ADDR
28944: GO 28912
28946: POP
28947: POP
// end ;
28948: GO 28878
28950: POP
28951: POP
// if not result then
28952: LD_VAR 0 2
28956: NOT
28957: IFFALSE 28961
// exit ;
28959: GO 29109
// mech := result [ 1 ] ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: ST_TO_ADDR
// if result > 1 then
28975: LD_VAR 0 2
28979: PUSH
28980: LD_INT 1
28982: GREATER
28983: IFFALSE 29095
// for i = 2 to result do
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: DOUBLE
28991: LD_INT 2
28993: DEC
28994: ST_TO_ADDR
28995: LD_VAR 0 2
28999: PUSH
29000: FOR_TO
29001: IFFALSE 29093
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29003: LD_ADDR_VAR 0 4
29007: PUSH
29008: LD_VAR 0 2
29012: PUSH
29013: LD_VAR 0 3
29017: ARRAY
29018: PPUSH
29019: LD_INT 3
29021: PPUSH
29022: CALL_OW 259
29026: PUSH
29027: LD_VAR 0 2
29031: PUSH
29032: LD_VAR 0 3
29036: ARRAY
29037: PPUSH
29038: CALL_OW 432
29042: MINUS
29043: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29044: LD_VAR 0 4
29048: PUSH
29049: LD_VAR 0 5
29053: PPUSH
29054: LD_INT 3
29056: PPUSH
29057: CALL_OW 259
29061: PUSH
29062: LD_VAR 0 5
29066: PPUSH
29067: CALL_OW 432
29071: MINUS
29072: GREATEREQUAL
29073: IFFALSE 29091
// mech := result [ i ] ;
29075: LD_ADDR_VAR 0 5
29079: PUSH
29080: LD_VAR 0 2
29084: PUSH
29085: LD_VAR 0 3
29089: ARRAY
29090: ST_TO_ADDR
// end ;
29091: GO 29000
29093: POP
29094: POP
// ComLinkTo ( vehicle , mech ) ;
29095: LD_VAR 0 1
29099: PPUSH
29100: LD_VAR 0 5
29104: PPUSH
29105: CALL_OW 135
// end ;
29109: LD_VAR 0 2
29113: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
29118: PPUSH
29119: PPUSH
29120: PPUSH
29121: PPUSH
29122: PPUSH
29123: PPUSH
29124: PPUSH
29125: PPUSH
29126: PPUSH
29127: PPUSH
29128: PPUSH
// result := [ ] ;
29129: LD_ADDR_VAR 0 7
29133: PUSH
29134: EMPTY
29135: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 266
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: IN
29156: NOT
29157: IFFALSE 29161
// exit ;
29159: GO 30792
// if name then
29161: LD_VAR 0 3
29165: IFFALSE 29181
// SetBName ( base_dep , name ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 500
// base := GetBase ( base_dep ) ;
29181: LD_ADDR_VAR 0 15
29185: PUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 274
29195: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29196: LD_ADDR_VAR 0 16
29200: PUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 255
29210: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29211: LD_ADDR_VAR 0 17
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 248
29225: ST_TO_ADDR
// if sources then
29226: LD_VAR 0 5
29230: IFFALSE 29277
// for i = 1 to 3 do
29232: LD_ADDR_VAR 0 8
29236: PUSH
29237: DOUBLE
29238: LD_INT 1
29240: DEC
29241: ST_TO_ADDR
29242: LD_INT 3
29244: PUSH
29245: FOR_TO
29246: IFFALSE 29275
// AddResourceType ( base , i , sources [ i ] ) ;
29248: LD_VAR 0 15
29252: PPUSH
29253: LD_VAR 0 8
29257: PPUSH
29258: LD_VAR 0 5
29262: PUSH
29263: LD_VAR 0 8
29267: ARRAY
29268: PPUSH
29269: CALL_OW 276
29273: GO 29245
29275: POP
29276: POP
// buildings := GetBaseBuildings ( base , area ) ;
29277: LD_ADDR_VAR 0 18
29281: PUSH
29282: LD_VAR 0 15
29286: PPUSH
29287: LD_VAR 0 2
29291: PPUSH
29292: CALL 28569 0 2
29296: ST_TO_ADDR
// InitHc ;
29297: CALL_OW 19
// InitUc ;
29301: CALL_OW 18
// uc_side := side ;
29305: LD_ADDR_OWVAR 20
29309: PUSH
29310: LD_VAR 0 16
29314: ST_TO_ADDR
// uc_nation := nation ;
29315: LD_ADDR_OWVAR 21
29319: PUSH
29320: LD_VAR 0 17
29324: ST_TO_ADDR
// if buildings then
29325: LD_VAR 0 18
29329: IFFALSE 30651
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29331: LD_ADDR_VAR 0 19
29335: PUSH
29336: LD_VAR 0 18
29340: PPUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 30
29346: PUSH
29347: LD_INT 29
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 30
29356: PUSH
29357: LD_INT 30
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 72
29373: ST_TO_ADDR
// if tmp then
29374: LD_VAR 0 19
29378: IFFALSE 29426
// for i in tmp do
29380: LD_ADDR_VAR 0 8
29384: PUSH
29385: LD_VAR 0 19
29389: PUSH
29390: FOR_IN
29391: IFFALSE 29424
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29393: LD_VAR 0 8
29397: PPUSH
29398: CALL_OW 250
29402: PPUSH
29403: LD_VAR 0 8
29407: PPUSH
29408: CALL_OW 251
29412: PPUSH
29413: LD_VAR 0 16
29417: PPUSH
29418: CALL_OW 441
29422: GO 29390
29424: POP
29425: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29426: LD_VAR 0 18
29430: PPUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 30
29436: PUSH
29437: LD_INT 32
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 30
29446: PUSH
29447: LD_INT 33
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: PPUSH
29459: CALL_OW 72
29463: IFFALSE 29551
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29465: LD_ADDR_VAR 0 8
29469: PUSH
29470: LD_VAR 0 18
29474: PPUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 30
29480: PUSH
29481: LD_INT 32
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 30
29490: PUSH
29491: LD_INT 33
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: PPUSH
29503: CALL_OW 72
29507: PUSH
29508: FOR_IN
29509: IFFALSE 29549
// begin if not GetBWeapon ( i ) then
29511: LD_VAR 0 8
29515: PPUSH
29516: CALL_OW 269
29520: NOT
29521: IFFALSE 29547
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29523: LD_VAR 0 8
29527: PPUSH
29528: LD_VAR 0 8
29532: PPUSH
29533: LD_VAR 0 2
29537: PPUSH
29538: CALL 30797 0 2
29542: PPUSH
29543: CALL_OW 431
// end ;
29547: GO 29508
29549: POP
29550: POP
// end ; for i = 1 to personel do
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: DOUBLE
29557: LD_INT 1
29559: DEC
29560: ST_TO_ADDR
29561: LD_VAR 0 6
29565: PUSH
29566: FOR_TO
29567: IFFALSE 30631
// begin if i > 4 then
29569: LD_VAR 0 8
29573: PUSH
29574: LD_INT 4
29576: GREATER
29577: IFFALSE 29581
// break ;
29579: GO 30631
// case i of 1 :
29581: LD_VAR 0 8
29585: PUSH
29586: LD_INT 1
29588: DOUBLE
29589: EQUAL
29590: IFTRUE 29594
29592: GO 29674
29594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29595: LD_ADDR_VAR 0 12
29599: PUSH
29600: LD_VAR 0 18
29604: PPUSH
29605: LD_INT 22
29607: PUSH
29608: LD_VAR 0 16
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 58
29619: PUSH
29620: EMPTY
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 30
29628: PUSH
29629: LD_INT 32
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 30
29638: PUSH
29639: LD_INT 4
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 30
29648: PUSH
29649: LD_INT 5
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 72
29671: ST_TO_ADDR
29672: GO 29896
29674: LD_INT 2
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29744
29682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29683: LD_ADDR_VAR 0 12
29687: PUSH
29688: LD_VAR 0 18
29692: PPUSH
29693: LD_INT 22
29695: PUSH
29696: LD_VAR 0 16
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 30
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 30
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PPUSH
29737: CALL_OW 72
29741: ST_TO_ADDR
29742: GO 29896
29744: LD_INT 3
29746: DOUBLE
29747: EQUAL
29748: IFTRUE 29752
29750: GO 29814
29752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29753: LD_ADDR_VAR 0 12
29757: PUSH
29758: LD_VAR 0 18
29762: PPUSH
29763: LD_INT 22
29765: PUSH
29766: LD_VAR 0 16
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 30
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PPUSH
29807: CALL_OW 72
29811: ST_TO_ADDR
29812: GO 29896
29814: LD_INT 4
29816: DOUBLE
29817: EQUAL
29818: IFTRUE 29822
29820: GO 29895
29822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29823: LD_ADDR_VAR 0 12
29827: PUSH
29828: LD_VAR 0 18
29832: PPUSH
29833: LD_INT 22
29835: PUSH
29836: LD_VAR 0 16
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 30
29850: PUSH
29851: LD_INT 6
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: LD_INT 7
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 8
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PPUSH
29888: CALL_OW 72
29892: ST_TO_ADDR
29893: GO 29896
29895: POP
// if i = 1 then
29896: LD_VAR 0 8
29900: PUSH
29901: LD_INT 1
29903: EQUAL
29904: IFFALSE 30015
// begin tmp := [ ] ;
29906: LD_ADDR_VAR 0 19
29910: PUSH
29911: EMPTY
29912: ST_TO_ADDR
// for j in f do
29913: LD_ADDR_VAR 0 9
29917: PUSH
29918: LD_VAR 0 12
29922: PUSH
29923: FOR_IN
29924: IFFALSE 29997
// if GetBType ( j ) = b_bunker then
29926: LD_VAR 0 9
29930: PPUSH
29931: CALL_OW 266
29935: PUSH
29936: LD_INT 32
29938: EQUAL
29939: IFFALSE 29966
// tmp := Insert ( tmp , 1 , j ) else
29941: LD_ADDR_VAR 0 19
29945: PUSH
29946: LD_VAR 0 19
29950: PPUSH
29951: LD_INT 1
29953: PPUSH
29954: LD_VAR 0 9
29958: PPUSH
29959: CALL_OW 2
29963: ST_TO_ADDR
29964: GO 29995
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29966: LD_ADDR_VAR 0 19
29970: PUSH
29971: LD_VAR 0 19
29975: PPUSH
29976: LD_VAR 0 19
29980: PUSH
29981: LD_INT 1
29983: PLUS
29984: PPUSH
29985: LD_VAR 0 9
29989: PPUSH
29990: CALL_OW 2
29994: ST_TO_ADDR
29995: GO 29923
29997: POP
29998: POP
// if tmp then
29999: LD_VAR 0 19
30003: IFFALSE 30015
// f := tmp ;
30005: LD_ADDR_VAR 0 12
30009: PUSH
30010: LD_VAR 0 19
30014: ST_TO_ADDR
// end ; x := personel [ i ] ;
30015: LD_ADDR_VAR 0 13
30019: PUSH
30020: LD_VAR 0 6
30024: PUSH
30025: LD_VAR 0 8
30029: ARRAY
30030: ST_TO_ADDR
// if x = - 1 then
30031: LD_VAR 0 13
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: EQUAL
30040: IFFALSE 30249
// begin for j in f do
30042: LD_ADDR_VAR 0 9
30046: PUSH
30047: LD_VAR 0 12
30051: PUSH
30052: FOR_IN
30053: IFFALSE 30245
// repeat InitHc ;
30055: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30059: LD_VAR 0 9
30063: PPUSH
30064: CALL_OW 266
30068: PUSH
30069: LD_INT 5
30071: EQUAL
30072: IFFALSE 30142
// begin if UnitsInside ( j ) < 3 then
30074: LD_VAR 0 9
30078: PPUSH
30079: CALL_OW 313
30083: PUSH
30084: LD_INT 3
30086: LESS
30087: IFFALSE 30123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30089: LD_INT 0
30091: PPUSH
30092: LD_INT 5
30094: PUSH
30095: LD_INT 8
30097: PUSH
30098: LD_INT 9
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: PUSH
30106: LD_VAR 0 17
30110: ARRAY
30111: PPUSH
30112: LD_VAR 0 4
30116: PPUSH
30117: CALL_OW 380
30121: GO 30140
// PrepareHuman ( false , i , skill ) ;
30123: LD_INT 0
30125: PPUSH
30126: LD_VAR 0 8
30130: PPUSH
30131: LD_VAR 0 4
30135: PPUSH
30136: CALL_OW 380
// end else
30140: GO 30159
// PrepareHuman ( false , i , skill ) ;
30142: LD_INT 0
30144: PPUSH
30145: LD_VAR 0 8
30149: PPUSH
30150: LD_VAR 0 4
30154: PPUSH
30155: CALL_OW 380
// un := CreateHuman ;
30159: LD_ADDR_VAR 0 14
30163: PUSH
30164: CALL_OW 44
30168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30169: LD_ADDR_VAR 0 7
30173: PUSH
30174: LD_VAR 0 7
30178: PPUSH
30179: LD_INT 1
30181: PPUSH
30182: LD_VAR 0 14
30186: PPUSH
30187: CALL_OW 2
30191: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30192: LD_VAR 0 14
30196: PPUSH
30197: LD_VAR 0 9
30201: PPUSH
30202: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30206: LD_VAR 0 9
30210: PPUSH
30211: CALL_OW 313
30215: PUSH
30216: LD_INT 6
30218: EQUAL
30219: PUSH
30220: LD_VAR 0 9
30224: PPUSH
30225: CALL_OW 266
30229: PUSH
30230: LD_INT 32
30232: PUSH
30233: LD_INT 31
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: IN
30240: OR
30241: IFFALSE 30055
30243: GO 30052
30245: POP
30246: POP
// end else
30247: GO 30629
// for j = 1 to x do
30249: LD_ADDR_VAR 0 9
30253: PUSH
30254: DOUBLE
30255: LD_INT 1
30257: DEC
30258: ST_TO_ADDR
30259: LD_VAR 0 13
30263: PUSH
30264: FOR_TO
30265: IFFALSE 30627
// begin InitHc ;
30267: CALL_OW 19
// if not f then
30271: LD_VAR 0 12
30275: NOT
30276: IFFALSE 30365
// begin PrepareHuman ( false , i , skill ) ;
30278: LD_INT 0
30280: PPUSH
30281: LD_VAR 0 8
30285: PPUSH
30286: LD_VAR 0 4
30290: PPUSH
30291: CALL_OW 380
// un := CreateHuman ;
30295: LD_ADDR_VAR 0 14
30299: PUSH
30300: CALL_OW 44
30304: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30305: LD_ADDR_VAR 0 7
30309: PUSH
30310: LD_VAR 0 7
30314: PPUSH
30315: LD_INT 1
30317: PPUSH
30318: LD_VAR 0 14
30322: PPUSH
30323: CALL_OW 2
30327: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30328: LD_VAR 0 14
30332: PPUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 250
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 251
30352: PPUSH
30353: LD_INT 10
30355: PPUSH
30356: LD_INT 0
30358: PPUSH
30359: CALL_OW 50
// continue ;
30363: GO 30264
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30365: LD_VAR 0 12
30369: PUSH
30370: LD_INT 1
30372: ARRAY
30373: PPUSH
30374: CALL_OW 313
30378: PUSH
30379: LD_VAR 0 12
30383: PUSH
30384: LD_INT 1
30386: ARRAY
30387: PPUSH
30388: CALL_OW 266
30392: PUSH
30393: LD_INT 32
30395: PUSH
30396: LD_INT 31
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: IN
30403: AND
30404: PUSH
30405: LD_VAR 0 12
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 313
30418: PUSH
30419: LD_INT 6
30421: EQUAL
30422: OR
30423: IFFALSE 30443
// f := Delete ( f , 1 ) ;
30425: LD_ADDR_VAR 0 12
30429: PUSH
30430: LD_VAR 0 12
30434: PPUSH
30435: LD_INT 1
30437: PPUSH
30438: CALL_OW 3
30442: ST_TO_ADDR
// if not f then
30443: LD_VAR 0 12
30447: NOT
30448: IFFALSE 30466
// begin x := x + 2 ;
30450: LD_ADDR_VAR 0 13
30454: PUSH
30455: LD_VAR 0 13
30459: PUSH
30460: LD_INT 2
30462: PLUS
30463: ST_TO_ADDR
// continue ;
30464: GO 30264
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30466: LD_VAR 0 12
30470: PUSH
30471: LD_INT 1
30473: ARRAY
30474: PPUSH
30475: CALL_OW 266
30479: PUSH
30480: LD_INT 5
30482: EQUAL
30483: IFFALSE 30557
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30485: LD_VAR 0 12
30489: PUSH
30490: LD_INT 1
30492: ARRAY
30493: PPUSH
30494: CALL_OW 313
30498: PUSH
30499: LD_INT 3
30501: LESS
30502: IFFALSE 30538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30504: LD_INT 0
30506: PPUSH
30507: LD_INT 5
30509: PUSH
30510: LD_INT 8
30512: PUSH
30513: LD_INT 9
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: PUSH
30521: LD_VAR 0 17
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 4
30531: PPUSH
30532: CALL_OW 380
30536: GO 30555
// PrepareHuman ( false , i , skill ) ;
30538: LD_INT 0
30540: PPUSH
30541: LD_VAR 0 8
30545: PPUSH
30546: LD_VAR 0 4
30550: PPUSH
30551: CALL_OW 380
// end else
30555: GO 30574
// PrepareHuman ( false , i , skill ) ;
30557: LD_INT 0
30559: PPUSH
30560: LD_VAR 0 8
30564: PPUSH
30565: LD_VAR 0 4
30569: PPUSH
30570: CALL_OW 380
// un := CreateHuman ;
30574: LD_ADDR_VAR 0 14
30578: PUSH
30579: CALL_OW 44
30583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30584: LD_ADDR_VAR 0 7
30588: PUSH
30589: LD_VAR 0 7
30593: PPUSH
30594: LD_INT 1
30596: PPUSH
30597: LD_VAR 0 14
30601: PPUSH
30602: CALL_OW 2
30606: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30607: LD_VAR 0 14
30611: PPUSH
30612: LD_VAR 0 12
30616: PUSH
30617: LD_INT 1
30619: ARRAY
30620: PPUSH
30621: CALL_OW 52
// end ;
30625: GO 30264
30627: POP
30628: POP
// end ;
30629: GO 29566
30631: POP
30632: POP
// result := result ^ buildings ;
30633: LD_ADDR_VAR 0 7
30637: PUSH
30638: LD_VAR 0 7
30642: PUSH
30643: LD_VAR 0 18
30647: ADD
30648: ST_TO_ADDR
// end else
30649: GO 30792
// begin for i = 1 to personel do
30651: LD_ADDR_VAR 0 8
30655: PUSH
30656: DOUBLE
30657: LD_INT 1
30659: DEC
30660: ST_TO_ADDR
30661: LD_VAR 0 6
30665: PUSH
30666: FOR_TO
30667: IFFALSE 30790
// begin if i > 4 then
30669: LD_VAR 0 8
30673: PUSH
30674: LD_INT 4
30676: GREATER
30677: IFFALSE 30681
// break ;
30679: GO 30790
// x := personel [ i ] ;
30681: LD_ADDR_VAR 0 13
30685: PUSH
30686: LD_VAR 0 6
30690: PUSH
30691: LD_VAR 0 8
30695: ARRAY
30696: ST_TO_ADDR
// if x = - 1 then
30697: LD_VAR 0 13
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: EQUAL
30706: IFFALSE 30710
// continue ;
30708: GO 30666
// PrepareHuman ( false , i , skill ) ;
30710: LD_INT 0
30712: PPUSH
30713: LD_VAR 0 8
30717: PPUSH
30718: LD_VAR 0 4
30722: PPUSH
30723: CALL_OW 380
// un := CreateHuman ;
30727: LD_ADDR_VAR 0 14
30731: PUSH
30732: CALL_OW 44
30736: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30737: LD_VAR 0 14
30741: PPUSH
30742: LD_VAR 0 1
30746: PPUSH
30747: CALL_OW 250
30751: PPUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: CALL_OW 251
30761: PPUSH
30762: LD_INT 10
30764: PPUSH
30765: LD_INT 0
30767: PPUSH
30768: CALL_OW 50
// result := result ^ un ;
30772: LD_ADDR_VAR 0 7
30776: PUSH
30777: LD_VAR 0 7
30781: PUSH
30782: LD_VAR 0 14
30786: ADD
30787: ST_TO_ADDR
// end ;
30788: GO 30666
30790: POP
30791: POP
// end ; end ;
30792: LD_VAR 0 7
30796: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30797: LD_INT 0
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
30809: PPUSH
30810: PPUSH
30811: PPUSH
30812: PPUSH
30813: PPUSH
30814: PPUSH
// result := false ;
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 0
30822: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30823: LD_VAR 0 1
30827: NOT
30828: PUSH
30829: LD_VAR 0 1
30833: PPUSH
30834: CALL_OW 266
30838: PUSH
30839: LD_INT 32
30841: PUSH
30842: LD_INT 33
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: IN
30849: NOT
30850: OR
30851: IFFALSE 30855
// exit ;
30853: GO 31991
// nat := GetNation ( tower ) ;
30855: LD_ADDR_VAR 0 12
30859: PUSH
30860: LD_VAR 0 1
30864: PPUSH
30865: CALL_OW 248
30869: ST_TO_ADDR
// side := GetSide ( tower ) ;
30870: LD_ADDR_VAR 0 16
30874: PUSH
30875: LD_VAR 0 1
30879: PPUSH
30880: CALL_OW 255
30884: ST_TO_ADDR
// x := GetX ( tower ) ;
30885: LD_ADDR_VAR 0 10
30889: PUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 250
30899: ST_TO_ADDR
// y := GetY ( tower ) ;
30900: LD_ADDR_VAR 0 11
30904: PUSH
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 251
30914: ST_TO_ADDR
// if not x or not y then
30915: LD_VAR 0 10
30919: NOT
30920: PUSH
30921: LD_VAR 0 11
30925: NOT
30926: OR
30927: IFFALSE 30931
// exit ;
30929: GO 31991
// weapon := 0 ;
30931: LD_ADDR_VAR 0 18
30935: PUSH
30936: LD_INT 0
30938: ST_TO_ADDR
// fac_list := [ ] ;
30939: LD_ADDR_VAR 0 17
30943: PUSH
30944: EMPTY
30945: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30946: LD_ADDR_VAR 0 6
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 274
30960: PPUSH
30961: LD_VAR 0 2
30965: PPUSH
30966: CALL 28569 0 2
30970: PPUSH
30971: LD_INT 30
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 72
30985: ST_TO_ADDR
// if not factories then
30986: LD_VAR 0 6
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31991
// for i in factories do
30995: LD_ADDR_VAR 0 8
30999: PUSH
31000: LD_VAR 0 6
31004: PUSH
31005: FOR_IN
31006: IFFALSE 31031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31008: LD_ADDR_VAR 0 17
31012: PUSH
31013: LD_VAR 0 17
31017: PUSH
31018: LD_VAR 0 8
31022: PPUSH
31023: CALL_OW 478
31027: UNION
31028: ST_TO_ADDR
31029: GO 31005
31031: POP
31032: POP
// if not fac_list then
31033: LD_VAR 0 17
31037: NOT
31038: IFFALSE 31042
// exit ;
31040: GO 31991
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31042: LD_ADDR_VAR 0 5
31046: PUSH
31047: LD_INT 4
31049: PUSH
31050: LD_INT 5
31052: PUSH
31053: LD_INT 9
31055: PUSH
31056: LD_INT 10
31058: PUSH
31059: LD_INT 6
31061: PUSH
31062: LD_INT 7
31064: PUSH
31065: LD_INT 11
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 27
31079: PUSH
31080: LD_INT 28
31082: PUSH
31083: LD_INT 26
31085: PUSH
31086: LD_INT 30
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 43
31097: PUSH
31098: LD_INT 44
31100: PUSH
31101: LD_INT 46
31103: PUSH
31104: LD_INT 45
31106: PUSH
31107: LD_INT 47
31109: PUSH
31110: LD_INT 49
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: PUSH
31126: LD_VAR 0 12
31130: ARRAY
31131: ST_TO_ADDR
// for i in list do
31132: LD_ADDR_VAR 0 8
31136: PUSH
31137: LD_VAR 0 5
31141: PUSH
31142: FOR_IN
31143: IFFALSE 31176
// if not i in fac_list then
31145: LD_VAR 0 8
31149: PUSH
31150: LD_VAR 0 17
31154: IN
31155: NOT
31156: IFFALSE 31174
// list := list diff i ;
31158: LD_ADDR_VAR 0 5
31162: PUSH
31163: LD_VAR 0 5
31167: PUSH
31168: LD_VAR 0 8
31172: DIFF
31173: ST_TO_ADDR
31174: GO 31142
31176: POP
31177: POP
// if not list then
31178: LD_VAR 0 5
31182: NOT
31183: IFFALSE 31187
// exit ;
31185: GO 31991
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31187: LD_VAR 0 12
31191: PUSH
31192: LD_INT 3
31194: EQUAL
31195: PUSH
31196: LD_INT 49
31198: PUSH
31199: LD_VAR 0 5
31203: IN
31204: AND
31205: PUSH
31206: LD_INT 31
31208: PPUSH
31209: LD_VAR 0 16
31213: PPUSH
31214: CALL_OW 321
31218: PUSH
31219: LD_INT 2
31221: EQUAL
31222: AND
31223: IFFALSE 31283
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31225: LD_INT 22
31227: PUSH
31228: LD_VAR 0 16
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 35
31239: PUSH
31240: LD_INT 49
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 91
31249: PUSH
31250: LD_VAR 0 1
31254: PUSH
31255: LD_INT 10
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: NOT
31273: IFFALSE 31283
// weapon := ru_time_lapser ;
31275: LD_ADDR_VAR 0 18
31279: PUSH
31280: LD_INT 49
31282: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31283: LD_VAR 0 12
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: IN
31298: PUSH
31299: LD_INT 11
31301: PUSH
31302: LD_VAR 0 5
31306: IN
31307: PUSH
31308: LD_INT 30
31310: PUSH
31311: LD_VAR 0 5
31315: IN
31316: OR
31317: AND
31318: PUSH
31319: LD_INT 6
31321: PPUSH
31322: LD_VAR 0 16
31326: PPUSH
31327: CALL_OW 321
31331: PUSH
31332: LD_INT 2
31334: EQUAL
31335: AND
31336: IFFALSE 31501
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31338: LD_INT 22
31340: PUSH
31341: LD_VAR 0 16
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 35
31355: PUSH
31356: LD_INT 11
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 35
31365: PUSH
31366: LD_INT 30
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 91
31380: PUSH
31381: LD_VAR 0 1
31385: PUSH
31386: LD_INT 18
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: PPUSH
31399: CALL_OW 69
31403: NOT
31404: PUSH
31405: LD_INT 22
31407: PUSH
31408: LD_VAR 0 16
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 30
31422: PUSH
31423: LD_INT 32
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 30
31432: PUSH
31433: LD_INT 33
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 91
31447: PUSH
31448: LD_VAR 0 1
31452: PUSH
31453: LD_INT 12
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: PPUSH
31469: CALL_OW 69
31473: PUSH
31474: LD_INT 2
31476: GREATER
31477: AND
31478: IFFALSE 31501
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31480: LD_ADDR_VAR 0 18
31484: PUSH
31485: LD_INT 11
31487: PUSH
31488: LD_INT 30
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_VAR 0 12
31499: ARRAY
31500: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31501: LD_VAR 0 18
31505: NOT
31506: PUSH
31507: LD_INT 40
31509: PPUSH
31510: LD_VAR 0 16
31514: PPUSH
31515: CALL_OW 321
31519: PUSH
31520: LD_INT 2
31522: EQUAL
31523: AND
31524: PUSH
31525: LD_INT 7
31527: PUSH
31528: LD_VAR 0 5
31532: IN
31533: PUSH
31534: LD_INT 28
31536: PUSH
31537: LD_VAR 0 5
31541: IN
31542: OR
31543: PUSH
31544: LD_INT 45
31546: PUSH
31547: LD_VAR 0 5
31551: IN
31552: OR
31553: AND
31554: IFFALSE 31808
// begin hex := GetHexInfo ( x , y ) ;
31556: LD_ADDR_VAR 0 4
31560: PUSH
31561: LD_VAR 0 10
31565: PPUSH
31566: LD_VAR 0 11
31570: PPUSH
31571: CALL_OW 546
31575: ST_TO_ADDR
// if hex [ 1 ] then
31576: LD_VAR 0 4
31580: PUSH
31581: LD_INT 1
31583: ARRAY
31584: IFFALSE 31588
// exit ;
31586: GO 31991
// height := hex [ 2 ] ;
31588: LD_ADDR_VAR 0 15
31592: PUSH
31593: LD_VAR 0 4
31597: PUSH
31598: LD_INT 2
31600: ARRAY
31601: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31602: LD_ADDR_VAR 0 14
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 5
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// for i in tmp do
31625: LD_ADDR_VAR 0 8
31629: PUSH
31630: LD_VAR 0 14
31634: PUSH
31635: FOR_IN
31636: IFFALSE 31806
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31638: LD_ADDR_VAR 0 9
31642: PUSH
31643: LD_VAR 0 10
31647: PPUSH
31648: LD_VAR 0 8
31652: PPUSH
31653: LD_INT 5
31655: PPUSH
31656: CALL_OW 272
31660: PUSH
31661: LD_VAR 0 11
31665: PPUSH
31666: LD_VAR 0 8
31670: PPUSH
31671: LD_INT 5
31673: PPUSH
31674: CALL_OW 273
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31683: LD_VAR 0 9
31687: PUSH
31688: LD_INT 1
31690: ARRAY
31691: PPUSH
31692: LD_VAR 0 9
31696: PUSH
31697: LD_INT 2
31699: ARRAY
31700: PPUSH
31701: CALL_OW 488
31705: IFFALSE 31804
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31707: LD_ADDR_VAR 0 4
31711: PUSH
31712: LD_VAR 0 9
31716: PUSH
31717: LD_INT 1
31719: ARRAY
31720: PPUSH
31721: LD_VAR 0 9
31725: PUSH
31726: LD_INT 2
31728: ARRAY
31729: PPUSH
31730: CALL_OW 546
31734: ST_TO_ADDR
// if hex [ 1 ] then
31735: LD_VAR 0 4
31739: PUSH
31740: LD_INT 1
31742: ARRAY
31743: IFFALSE 31747
// continue ;
31745: GO 31635
// h := hex [ 2 ] ;
31747: LD_ADDR_VAR 0 13
31751: PUSH
31752: LD_VAR 0 4
31756: PUSH
31757: LD_INT 2
31759: ARRAY
31760: ST_TO_ADDR
// if h + 7 < height then
31761: LD_VAR 0 13
31765: PUSH
31766: LD_INT 7
31768: PLUS
31769: PUSH
31770: LD_VAR 0 15
31774: LESS
31775: IFFALSE 31804
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31777: LD_ADDR_VAR 0 18
31781: PUSH
31782: LD_INT 7
31784: PUSH
31785: LD_INT 28
31787: PUSH
31788: LD_INT 45
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: LD_VAR 0 12
31800: ARRAY
31801: ST_TO_ADDR
// break ;
31802: GO 31806
// end ; end ; end ;
31804: GO 31635
31806: POP
31807: POP
// end ; if not weapon then
31808: LD_VAR 0 18
31812: NOT
31813: IFFALSE 31873
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31815: LD_ADDR_VAR 0 5
31819: PUSH
31820: LD_VAR 0 5
31824: PUSH
31825: LD_INT 11
31827: PUSH
31828: LD_INT 30
31830: PUSH
31831: LD_INT 49
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: DIFF
31839: ST_TO_ADDR
// if not list then
31840: LD_VAR 0 5
31844: NOT
31845: IFFALSE 31849
// exit ;
31847: GO 31991
// weapon := list [ rand ( 1 , list ) ] ;
31849: LD_ADDR_VAR 0 18
31853: PUSH
31854: LD_VAR 0 5
31858: PUSH
31859: LD_INT 1
31861: PPUSH
31862: LD_VAR 0 5
31866: PPUSH
31867: CALL_OW 12
31871: ARRAY
31872: ST_TO_ADDR
// end ; if weapon then
31873: LD_VAR 0 18
31877: IFFALSE 31991
// begin tmp := CostOfWeapon ( weapon ) ;
31879: LD_ADDR_VAR 0 14
31883: PUSH
31884: LD_VAR 0 18
31888: PPUSH
31889: CALL_OW 451
31893: ST_TO_ADDR
// j := GetBase ( tower ) ;
31894: LD_ADDR_VAR 0 9
31898: PUSH
31899: LD_VAR 0 1
31903: PPUSH
31904: CALL_OW 274
31908: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31909: LD_VAR 0 9
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: CALL_OW 275
31921: PUSH
31922: LD_VAR 0 14
31926: PUSH
31927: LD_INT 1
31929: ARRAY
31930: GREATEREQUAL
31931: PUSH
31932: LD_VAR 0 9
31936: PPUSH
31937: LD_INT 2
31939: PPUSH
31940: CALL_OW 275
31944: PUSH
31945: LD_VAR 0 14
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: GREATEREQUAL
31954: AND
31955: PUSH
31956: LD_VAR 0 9
31960: PPUSH
31961: LD_INT 3
31963: PPUSH
31964: CALL_OW 275
31968: PUSH
31969: LD_VAR 0 14
31973: PUSH
31974: LD_INT 3
31976: ARRAY
31977: GREATEREQUAL
31978: AND
31979: IFFALSE 31991
// result := weapon ;
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_VAR 0 18
31990: ST_TO_ADDR
// end ; end ;
31991: LD_VAR 0 3
31995: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
// result := true ;
32000: LD_ADDR_VAR 0 3
32004: PUSH
32005: LD_INT 1
32007: ST_TO_ADDR
// if array1 = array2 then
32008: LD_VAR 0 1
32012: PUSH
32013: LD_VAR 0 2
32017: EQUAL
32018: IFFALSE 32078
// begin for i = 1 to array1 do
32020: LD_ADDR_VAR 0 4
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_VAR 0 1
32034: PUSH
32035: FOR_TO
32036: IFFALSE 32074
// if array1 [ i ] <> array2 [ i ] then
32038: LD_VAR 0 1
32042: PUSH
32043: LD_VAR 0 4
32047: ARRAY
32048: PUSH
32049: LD_VAR 0 2
32053: PUSH
32054: LD_VAR 0 4
32058: ARRAY
32059: NONEQUAL
32060: IFFALSE 32072
// begin result := false ;
32062: LD_ADDR_VAR 0 3
32066: PUSH
32067: LD_INT 0
32069: ST_TO_ADDR
// break ;
32070: GO 32074
// end ;
32072: GO 32035
32074: POP
32075: POP
// end else
32076: GO 32086
// result := false ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// end ;
32086: LD_VAR 0 3
32090: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32091: LD_INT 0
32093: PPUSH
32094: PPUSH
32095: PPUSH
// pom := GetBase ( fac ) ;
32096: LD_ADDR_VAR 0 5
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 274
32110: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32111: LD_ADDR_VAR 0 4
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: LD_VAR 0 2
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: LD_VAR 0 2
32138: PUSH
32139: LD_INT 3
32141: ARRAY
32142: PPUSH
32143: LD_VAR 0 2
32147: PUSH
32148: LD_INT 4
32150: ARRAY
32151: PPUSH
32152: CALL_OW 449
32156: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32157: LD_ADDR_VAR 0 3
32161: PUSH
32162: LD_VAR 0 5
32166: PPUSH
32167: LD_INT 1
32169: PPUSH
32170: CALL_OW 275
32174: PUSH
32175: LD_VAR 0 4
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: GREATEREQUAL
32184: PUSH
32185: LD_VAR 0 5
32189: PPUSH
32190: LD_INT 2
32192: PPUSH
32193: CALL_OW 275
32197: PUSH
32198: LD_VAR 0 4
32202: PUSH
32203: LD_INT 2
32205: ARRAY
32206: GREATEREQUAL
32207: AND
32208: PUSH
32209: LD_VAR 0 5
32213: PPUSH
32214: LD_INT 3
32216: PPUSH
32217: CALL_OW 275
32221: PUSH
32222: LD_VAR 0 4
32226: PUSH
32227: LD_INT 3
32229: ARRAY
32230: GREATEREQUAL
32231: AND
32232: ST_TO_ADDR
// end ;
32233: LD_VAR 0 3
32237: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
// pom := GetBase ( building ) ;
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 274
32258: ST_TO_ADDR
// if not pom then
32259: LD_VAR 0 3
32263: NOT
32264: IFFALSE 32268
// exit ;
32266: GO 32438
// btype := GetBType ( building ) ;
32268: LD_ADDR_VAR 0 5
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 266
32282: ST_TO_ADDR
// if btype = b_armoury then
32283: LD_VAR 0 5
32287: PUSH
32288: LD_INT 4
32290: EQUAL
32291: IFFALSE 32301
// btype := b_barracks ;
32293: LD_ADDR_VAR 0 5
32297: PUSH
32298: LD_INT 5
32300: ST_TO_ADDR
// if btype = b_depot then
32301: LD_VAR 0 5
32305: PUSH
32306: LD_INT 0
32308: EQUAL
32309: IFFALSE 32319
// btype := b_warehouse ;
32311: LD_ADDR_VAR 0 5
32315: PUSH
32316: LD_INT 1
32318: ST_TO_ADDR
// if btype = b_workshop then
32319: LD_VAR 0 5
32323: PUSH
32324: LD_INT 2
32326: EQUAL
32327: IFFALSE 32337
// btype := b_factory ;
32329: LD_ADDR_VAR 0 5
32333: PUSH
32334: LD_INT 3
32336: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32337: LD_ADDR_VAR 0 4
32341: PUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 248
32356: PPUSH
32357: CALL_OW 450
32361: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32362: LD_ADDR_VAR 0 2
32366: PUSH
32367: LD_VAR 0 3
32371: PPUSH
32372: LD_INT 1
32374: PPUSH
32375: CALL_OW 275
32379: PUSH
32380: LD_VAR 0 4
32384: PUSH
32385: LD_INT 1
32387: ARRAY
32388: GREATEREQUAL
32389: PUSH
32390: LD_VAR 0 3
32394: PPUSH
32395: LD_INT 2
32397: PPUSH
32398: CALL_OW 275
32402: PUSH
32403: LD_VAR 0 4
32407: PUSH
32408: LD_INT 2
32410: ARRAY
32411: GREATEREQUAL
32412: AND
32413: PUSH
32414: LD_VAR 0 3
32418: PPUSH
32419: LD_INT 3
32421: PPUSH
32422: CALL_OW 275
32426: PUSH
32427: LD_VAR 0 4
32431: PUSH
32432: LD_INT 3
32434: ARRAY
32435: GREATEREQUAL
32436: AND
32437: ST_TO_ADDR
// end ;
32438: LD_VAR 0 2
32442: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
32447: PPUSH
// pom := GetBase ( building ) ;
32448: LD_ADDR_VAR 0 4
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 274
32462: ST_TO_ADDR
// if not pom then
32463: LD_VAR 0 4
32467: NOT
32468: IFFALSE 32472
// exit ;
32470: GO 32573
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32472: LD_ADDR_VAR 0 5
32476: PUSH
32477: LD_VAR 0 2
32481: PPUSH
32482: LD_VAR 0 1
32486: PPUSH
32487: CALL_OW 248
32491: PPUSH
32492: CALL_OW 450
32496: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32497: LD_ADDR_VAR 0 3
32501: PUSH
32502: LD_VAR 0 4
32506: PPUSH
32507: LD_INT 1
32509: PPUSH
32510: CALL_OW 275
32514: PUSH
32515: LD_VAR 0 5
32519: PUSH
32520: LD_INT 1
32522: ARRAY
32523: GREATEREQUAL
32524: PUSH
32525: LD_VAR 0 4
32529: PPUSH
32530: LD_INT 2
32532: PPUSH
32533: CALL_OW 275
32537: PUSH
32538: LD_VAR 0 5
32542: PUSH
32543: LD_INT 2
32545: ARRAY
32546: GREATEREQUAL
32547: AND
32548: PUSH
32549: LD_VAR 0 4
32553: PPUSH
32554: LD_INT 3
32556: PPUSH
32557: CALL_OW 275
32561: PUSH
32562: LD_VAR 0 5
32566: PUSH
32567: LD_INT 3
32569: ARRAY
32570: GREATEREQUAL
32571: AND
32572: ST_TO_ADDR
// end ;
32573: LD_VAR 0 3
32577: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32578: LD_INT 0
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
// result := false ;
32590: LD_ADDR_VAR 0 6
32594: PUSH
32595: LD_INT 0
32597: ST_TO_ADDR
// if not base or not btype or not x or not y then
32598: LD_VAR 0 1
32602: NOT
32603: PUSH
32604: LD_VAR 0 2
32608: NOT
32609: OR
32610: PUSH
32611: LD_VAR 0 3
32615: NOT
32616: OR
32617: PUSH
32618: LD_VAR 0 4
32622: NOT
32623: OR
32624: IFFALSE 32628
// exit ;
32626: GO 33237
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32628: LD_ADDR_VAR 0 12
32632: PUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: LD_VAR 0 3
32642: PPUSH
32643: LD_VAR 0 4
32647: PPUSH
32648: LD_VAR 0 5
32652: PPUSH
32653: LD_VAR 0 1
32657: PUSH
32658: LD_INT 1
32660: ARRAY
32661: PPUSH
32662: CALL_OW 248
32666: PPUSH
32667: LD_INT 0
32669: PPUSH
32670: CALL 34074 0 6
32674: ST_TO_ADDR
// if not hexes then
32675: LD_VAR 0 12
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 33237
// for i = 1 to hexes do
32684: LD_ADDR_VAR 0 7
32688: PUSH
32689: DOUBLE
32690: LD_INT 1
32692: DEC
32693: ST_TO_ADDR
32694: LD_VAR 0 12
32698: PUSH
32699: FOR_TO
32700: IFFALSE 33235
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32702: LD_ADDR_VAR 0 11
32706: PUSH
32707: LD_VAR 0 12
32711: PUSH
32712: LD_VAR 0 7
32716: ARRAY
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: LD_VAR 0 12
32726: PUSH
32727: LD_VAR 0 7
32731: ARRAY
32732: PUSH
32733: LD_INT 2
32735: ARRAY
32736: PPUSH
32737: CALL_OW 428
32741: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32742: LD_VAR 0 12
32746: PUSH
32747: LD_VAR 0 7
32751: ARRAY
32752: PUSH
32753: LD_INT 1
32755: ARRAY
32756: PPUSH
32757: LD_VAR 0 12
32761: PUSH
32762: LD_VAR 0 7
32766: ARRAY
32767: PUSH
32768: LD_INT 2
32770: ARRAY
32771: PPUSH
32772: CALL_OW 351
32776: PUSH
32777: LD_VAR 0 12
32781: PUSH
32782: LD_VAR 0 7
32786: ARRAY
32787: PUSH
32788: LD_INT 1
32790: ARRAY
32791: PPUSH
32792: LD_VAR 0 12
32796: PUSH
32797: LD_VAR 0 7
32801: ARRAY
32802: PUSH
32803: LD_INT 2
32805: ARRAY
32806: PPUSH
32807: CALL_OW 488
32811: NOT
32812: OR
32813: PUSH
32814: LD_VAR 0 11
32818: PPUSH
32819: CALL_OW 247
32823: PUSH
32824: LD_INT 3
32826: EQUAL
32827: OR
32828: IFFALSE 32834
// exit ;
32830: POP
32831: POP
32832: GO 33237
// if not tmp or not tmp in base then
32834: LD_VAR 0 11
32838: NOT
32839: PUSH
32840: LD_VAR 0 11
32844: PUSH
32845: LD_VAR 0 1
32849: IN
32850: NOT
32851: OR
32852: IFFALSE 32856
// continue ;
32854: GO 32699
// result := true ;
32856: LD_ADDR_VAR 0 6
32860: PUSH
32861: LD_INT 1
32863: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32864: LD_ADDR_VAR 0 15
32868: PUSH
32869: LD_VAR 0 1
32873: PPUSH
32874: LD_INT 22
32876: PUSH
32877: LD_VAR 0 11
32881: PPUSH
32882: CALL_OW 255
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 30
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 30
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 72
32927: ST_TO_ADDR
// if dep then
32928: LD_VAR 0 15
32932: IFFALSE 33068
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32934: LD_ADDR_VAR 0 14
32938: PUSH
32939: LD_VAR 0 15
32943: PUSH
32944: LD_INT 1
32946: ARRAY
32947: PPUSH
32948: CALL_OW 250
32952: PPUSH
32953: LD_VAR 0 15
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: PPUSH
32962: CALL_OW 254
32966: PPUSH
32967: LD_INT 5
32969: PPUSH
32970: CALL_OW 272
32974: PUSH
32975: LD_VAR 0 15
32979: PUSH
32980: LD_INT 1
32982: ARRAY
32983: PPUSH
32984: CALL_OW 251
32988: PPUSH
32989: LD_VAR 0 15
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: CALL_OW 254
33002: PPUSH
33003: LD_INT 5
33005: PPUSH
33006: CALL_OW 273
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33015: LD_VAR 0 14
33019: PUSH
33020: LD_INT 1
33022: ARRAY
33023: PPUSH
33024: LD_VAR 0 14
33028: PUSH
33029: LD_INT 2
33031: ARRAY
33032: PPUSH
33033: CALL_OW 488
33037: IFFALSE 33068
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33039: LD_VAR 0 11
33043: PPUSH
33044: LD_VAR 0 14
33048: PUSH
33049: LD_INT 1
33051: ARRAY
33052: PPUSH
33053: LD_VAR 0 14
33057: PUSH
33058: LD_INT 2
33060: ARRAY
33061: PPUSH
33062: CALL_OW 111
// continue ;
33066: GO 32699
// end ; end ; r := GetDir ( tmp ) ;
33068: LD_ADDR_VAR 0 13
33072: PUSH
33073: LD_VAR 0 11
33077: PPUSH
33078: CALL_OW 254
33082: ST_TO_ADDR
// if r = 5 then
33083: LD_VAR 0 13
33087: PUSH
33088: LD_INT 5
33090: EQUAL
33091: IFFALSE 33101
// r := 0 ;
33093: LD_ADDR_VAR 0 13
33097: PUSH
33098: LD_INT 0
33100: ST_TO_ADDR
// for j = r to 5 do
33101: LD_ADDR_VAR 0 8
33105: PUSH
33106: DOUBLE
33107: LD_VAR 0 13
33111: DEC
33112: ST_TO_ADDR
33113: LD_INT 5
33115: PUSH
33116: FOR_TO
33117: IFFALSE 33231
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33119: LD_ADDR_VAR 0 9
33123: PUSH
33124: LD_VAR 0 11
33128: PPUSH
33129: CALL_OW 250
33133: PPUSH
33134: LD_VAR 0 8
33138: PPUSH
33139: LD_INT 2
33141: PPUSH
33142: CALL_OW 272
33146: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33147: LD_ADDR_VAR 0 10
33151: PUSH
33152: LD_VAR 0 11
33156: PPUSH
33157: CALL_OW 251
33161: PPUSH
33162: LD_VAR 0 8
33166: PPUSH
33167: LD_INT 2
33169: PPUSH
33170: CALL_OW 273
33174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33175: LD_VAR 0 9
33179: PPUSH
33180: LD_VAR 0 10
33184: PPUSH
33185: CALL_OW 488
33189: PUSH
33190: LD_VAR 0 9
33194: PPUSH
33195: LD_VAR 0 10
33199: PPUSH
33200: CALL_OW 428
33204: NOT
33205: AND
33206: IFFALSE 33229
// begin ComMoveXY ( tmp , _x , _y ) ;
33208: LD_VAR 0 11
33212: PPUSH
33213: LD_VAR 0 9
33217: PPUSH
33218: LD_VAR 0 10
33222: PPUSH
33223: CALL_OW 111
// break ;
33227: GO 33231
// end ; end ;
33229: GO 33116
33231: POP
33232: POP
// end ;
33233: GO 32699
33235: POP
33236: POP
// end ;
33237: LD_VAR 0 6
33241: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33242: LD_INT 0
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
// result := false ;
33254: LD_ADDR_VAR 0 6
33258: PUSH
33259: LD_INT 0
33261: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33262: LD_VAR 0 1
33266: NOT
33267: PUSH
33268: LD_VAR 0 1
33272: PPUSH
33273: CALL_OW 266
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: IN
33288: NOT
33289: OR
33290: PUSH
33291: LD_VAR 0 2
33295: NOT
33296: OR
33297: PUSH
33298: LD_VAR 0 5
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 1
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 3
33314: PUSH
33315: LD_INT 4
33317: PUSH
33318: LD_INT 5
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: IN
33329: NOT
33330: OR
33331: PUSH
33332: LD_VAR 0 3
33336: PPUSH
33337: LD_VAR 0 4
33341: PPUSH
33342: CALL_OW 488
33346: NOT
33347: OR
33348: IFFALSE 33352
// exit ;
33350: GO 34069
// pom := GetBase ( depot ) ;
33352: LD_ADDR_VAR 0 10
33356: PUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: CALL_OW 274
33366: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33367: LD_ADDR_VAR 0 11
33371: PUSH
33372: LD_VAR 0 2
33376: PPUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: CALL_OW 248
33386: PPUSH
33387: CALL_OW 450
33391: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33392: LD_VAR 0 10
33396: PPUSH
33397: LD_INT 1
33399: PPUSH
33400: CALL_OW 275
33404: PUSH
33405: LD_VAR 0 11
33409: PUSH
33410: LD_INT 1
33412: ARRAY
33413: GREATEREQUAL
33414: PUSH
33415: LD_VAR 0 10
33419: PPUSH
33420: LD_INT 2
33422: PPUSH
33423: CALL_OW 275
33427: PUSH
33428: LD_VAR 0 11
33432: PUSH
33433: LD_INT 2
33435: ARRAY
33436: GREATEREQUAL
33437: AND
33438: PUSH
33439: LD_VAR 0 10
33443: PPUSH
33444: LD_INT 3
33446: PPUSH
33447: CALL_OW 275
33451: PUSH
33452: LD_VAR 0 11
33456: PUSH
33457: LD_INT 3
33459: ARRAY
33460: GREATEREQUAL
33461: AND
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 34069
// if GetBType ( depot ) = b_depot then
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 266
33476: PUSH
33477: LD_INT 0
33479: EQUAL
33480: IFFALSE 33492
// dist := 28 else
33482: LD_ADDR_VAR 0 14
33486: PUSH
33487: LD_INT 28
33489: ST_TO_ADDR
33490: GO 33500
// dist := 36 ;
33492: LD_ADDR_VAR 0 14
33496: PUSH
33497: LD_INT 36
33499: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33500: LD_VAR 0 1
33504: PPUSH
33505: LD_VAR 0 3
33509: PPUSH
33510: LD_VAR 0 4
33514: PPUSH
33515: CALL_OW 297
33519: PUSH
33520: LD_VAR 0 14
33524: GREATER
33525: IFFALSE 33529
// exit ;
33527: GO 34069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33529: LD_ADDR_VAR 0 12
33533: PUSH
33534: LD_VAR 0 2
33538: PPUSH
33539: LD_VAR 0 3
33543: PPUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: LD_VAR 0 5
33553: PPUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: CALL_OW 248
33563: PPUSH
33564: LD_INT 0
33566: PPUSH
33567: CALL 34074 0 6
33571: ST_TO_ADDR
// if not hexes then
33572: LD_VAR 0 12
33576: NOT
33577: IFFALSE 33581
// exit ;
33579: GO 34069
// hex := GetHexInfo ( x , y ) ;
33581: LD_ADDR_VAR 0 15
33585: PUSH
33586: LD_VAR 0 3
33590: PPUSH
33591: LD_VAR 0 4
33595: PPUSH
33596: CALL_OW 546
33600: ST_TO_ADDR
// if hex [ 1 ] then
33601: LD_VAR 0 15
33605: PUSH
33606: LD_INT 1
33608: ARRAY
33609: IFFALSE 33613
// exit ;
33611: GO 34069
// height := hex [ 2 ] ;
33613: LD_ADDR_VAR 0 13
33617: PUSH
33618: LD_VAR 0 15
33622: PUSH
33623: LD_INT 2
33625: ARRAY
33626: ST_TO_ADDR
// for i = 1 to hexes do
33627: LD_ADDR_VAR 0 7
33631: PUSH
33632: DOUBLE
33633: LD_INT 1
33635: DEC
33636: ST_TO_ADDR
33637: LD_VAR 0 12
33641: PUSH
33642: FOR_TO
33643: IFFALSE 33973
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33645: LD_VAR 0 12
33649: PUSH
33650: LD_VAR 0 7
33654: ARRAY
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PPUSH
33660: LD_VAR 0 12
33664: PUSH
33665: LD_VAR 0 7
33669: ARRAY
33670: PUSH
33671: LD_INT 2
33673: ARRAY
33674: PPUSH
33675: CALL_OW 488
33679: NOT
33680: PUSH
33681: LD_VAR 0 12
33685: PUSH
33686: LD_VAR 0 7
33690: ARRAY
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: PPUSH
33696: LD_VAR 0 12
33700: PUSH
33701: LD_VAR 0 7
33705: ARRAY
33706: PUSH
33707: LD_INT 2
33709: ARRAY
33710: PPUSH
33711: CALL_OW 428
33715: PUSH
33716: LD_INT 0
33718: GREATER
33719: OR
33720: PUSH
33721: LD_VAR 0 12
33725: PUSH
33726: LD_VAR 0 7
33730: ARRAY
33731: PUSH
33732: LD_INT 1
33734: ARRAY
33735: PPUSH
33736: LD_VAR 0 12
33740: PUSH
33741: LD_VAR 0 7
33745: ARRAY
33746: PUSH
33747: LD_INT 2
33749: ARRAY
33750: PPUSH
33751: CALL_OW 351
33755: OR
33756: IFFALSE 33762
// exit ;
33758: POP
33759: POP
33760: GO 34069
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33762: LD_ADDR_VAR 0 8
33766: PUSH
33767: LD_VAR 0 12
33771: PUSH
33772: LD_VAR 0 7
33776: ARRAY
33777: PUSH
33778: LD_INT 1
33780: ARRAY
33781: PPUSH
33782: LD_VAR 0 12
33786: PUSH
33787: LD_VAR 0 7
33791: ARRAY
33792: PUSH
33793: LD_INT 2
33795: ARRAY
33796: PPUSH
33797: CALL_OW 546
33801: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33802: LD_VAR 0 8
33806: PUSH
33807: LD_INT 1
33809: ARRAY
33810: PUSH
33811: LD_VAR 0 8
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: PUSH
33820: LD_VAR 0 13
33824: PUSH
33825: LD_INT 2
33827: PLUS
33828: GREATER
33829: OR
33830: PUSH
33831: LD_VAR 0 8
33835: PUSH
33836: LD_INT 2
33838: ARRAY
33839: PUSH
33840: LD_VAR 0 13
33844: PUSH
33845: LD_INT 2
33847: MINUS
33848: LESS
33849: OR
33850: PUSH
33851: LD_VAR 0 8
33855: PUSH
33856: LD_INT 3
33858: ARRAY
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 8
33865: PUSH
33866: LD_INT 9
33868: PUSH
33869: LD_INT 10
33871: PUSH
33872: LD_INT 11
33874: PUSH
33875: LD_INT 12
33877: PUSH
33878: LD_INT 13
33880: PUSH
33881: LD_INT 16
33883: PUSH
33884: LD_INT 17
33886: PUSH
33887: LD_INT 18
33889: PUSH
33890: LD_INT 19
33892: PUSH
33893: LD_INT 20
33895: PUSH
33896: LD_INT 21
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: IN
33914: NOT
33915: OR
33916: PUSH
33917: LD_VAR 0 8
33921: PUSH
33922: LD_INT 5
33924: ARRAY
33925: NOT
33926: OR
33927: PUSH
33928: LD_VAR 0 8
33932: PUSH
33933: LD_INT 6
33935: ARRAY
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: LD_INT 7
33945: PUSH
33946: LD_INT 9
33948: PUSH
33949: LD_INT 10
33951: PUSH
33952: LD_INT 11
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: IN
33963: NOT
33964: OR
33965: IFFALSE 33971
// exit ;
33967: POP
33968: POP
33969: GO 34069
// end ;
33971: GO 33642
33973: POP
33974: POP
// side := GetSide ( depot ) ;
33975: LD_ADDR_VAR 0 9
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 255
33989: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33990: LD_VAR 0 9
33994: PPUSH
33995: LD_VAR 0 3
33999: PPUSH
34000: LD_VAR 0 4
34004: PPUSH
34005: LD_INT 20
34007: PPUSH
34008: CALL 26723 0 4
34012: PUSH
34013: LD_INT 4
34015: ARRAY
34016: IFFALSE 34020
// exit ;
34018: GO 34069
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34020: LD_VAR 0 2
34024: PUSH
34025: LD_INT 29
34027: PUSH
34028: LD_INT 30
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: IN
34035: PUSH
34036: LD_VAR 0 3
34040: PPUSH
34041: LD_VAR 0 4
34045: PPUSH
34046: LD_VAR 0 9
34050: PPUSH
34051: CALL_OW 440
34055: NOT
34056: AND
34057: IFFALSE 34061
// exit ;
34059: GO 34069
// result := true ;
34061: LD_ADDR_VAR 0 6
34065: PUSH
34066: LD_INT 1
34068: ST_TO_ADDR
// end ;
34069: LD_VAR 0 6
34073: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34074: LD_INT 0
34076: PPUSH
34077: PPUSH
34078: PPUSH
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
34109: PPUSH
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
34126: PPUSH
34127: PPUSH
34128: PPUSH
34129: PPUSH
34130: PPUSH
34131: PPUSH
34132: PPUSH
34133: PPUSH
// result = [ ] ;
34134: LD_ADDR_VAR 0 7
34138: PUSH
34139: EMPTY
34140: ST_TO_ADDR
// temp_list = [ ] ;
34141: LD_ADDR_VAR 0 9
34145: PUSH
34146: EMPTY
34147: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34148: LD_VAR 0 4
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 4
34167: PUSH
34168: LD_INT 5
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: IN
34179: NOT
34180: PUSH
34181: LD_VAR 0 1
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: IN
34196: PUSH
34197: LD_VAR 0 5
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: IN
34216: NOT
34217: AND
34218: OR
34219: IFFALSE 34223
// exit ;
34221: GO 52614
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34223: LD_VAR 0 1
34227: PUSH
34228: LD_INT 6
34230: PUSH
34231: LD_INT 7
34233: PUSH
34234: LD_INT 8
34236: PUSH
34237: LD_INT 13
34239: PUSH
34240: LD_INT 12
34242: PUSH
34243: LD_INT 15
34245: PUSH
34246: LD_INT 11
34248: PUSH
34249: LD_INT 14
34251: PUSH
34252: LD_INT 10
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: IN
34266: IFFALSE 34276
// btype = b_lab ;
34268: LD_ADDR_VAR 0 1
34272: PUSH
34273: LD_INT 6
34275: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34276: LD_VAR 0 6
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: IN
34295: NOT
34296: PUSH
34297: LD_VAR 0 1
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: LD_INT 6
34316: PUSH
34317: LD_INT 36
34319: PUSH
34320: LD_INT 4
34322: PUSH
34323: LD_INT 5
34325: PUSH
34326: LD_INT 31
34328: PUSH
34329: LD_INT 32
34331: PUSH
34332: LD_INT 33
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: IN
34348: NOT
34349: PUSH
34350: LD_VAR 0 6
34354: PUSH
34355: LD_INT 1
34357: EQUAL
34358: AND
34359: OR
34360: PUSH
34361: LD_VAR 0 1
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: IN
34376: NOT
34377: PUSH
34378: LD_VAR 0 6
34382: PUSH
34383: LD_INT 2
34385: EQUAL
34386: AND
34387: OR
34388: IFFALSE 34398
// mode = 0 ;
34390: LD_ADDR_VAR 0 6
34394: PUSH
34395: LD_INT 0
34397: ST_TO_ADDR
// case mode of 0 :
34398: LD_VAR 0 6
34402: PUSH
34403: LD_INT 0
34405: DOUBLE
34406: EQUAL
34407: IFTRUE 34411
34409: GO 45864
34411: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34412: LD_ADDR_VAR 0 11
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34605: LD_ADDR_VAR 0 12
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34801: LD_ADDR_VAR 0 13
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: LD_INT 2
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 3
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 3
34960: NEG
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: NEG
34973: PUSH
34974: LD_INT 3
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35000: LD_ADDR_VAR 0 14
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 2
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 3
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 3
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35196: LD_ADDR_VAR 0 15
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35389: LD_ADDR_VAR 0 16
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35582: LD_ADDR_VAR 0 17
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35812: LD_ADDR_VAR 0 18
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36042: LD_ADDR_VAR 0 19
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36272: LD_ADDR_VAR 0 20
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 2
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36502: LD_ADDR_VAR 0 21
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: LD_INT 2
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36732: LD_ADDR_VAR 0 22
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36962: LD_ADDR_VAR 0 23
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37242: LD_ADDR_VAR 0 24
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37518: LD_ADDR_VAR 0 25
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: LD_INT 2
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: LD_INT 2
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 3
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37792: LD_ADDR_VAR 0 26
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 3
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 3
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38068: LD_ADDR_VAR 0 27
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 3
38301: NEG
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 3
38313: NEG
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38348: LD_ADDR_VAR 0 28
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 3
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 3
38595: NEG
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38630: LD_ADDR_VAR 0 29
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: LD_INT 3
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: NEG
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38909: LD_ADDR_VAR 0 30
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 2
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39187: LD_ADDR_VAR 0 31
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: LD_INT 3
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39465: LD_ADDR_VAR 0 32
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 3
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39743: LD_ADDR_VAR 0 33
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 3
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40022: LD_ADDR_VAR 0 34
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 2
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: NEG
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 3
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40302: LD_ADDR_VAR 0 35
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40414: LD_ADDR_VAR 0 36
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40526: LD_ADDR_VAR 0 37
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40638: LD_ADDR_VAR 0 38
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40750: LD_ADDR_VAR 0 39
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40862: LD_ADDR_VAR 0 40
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40974: LD_ADDR_VAR 0 41
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: LD_INT 3
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 3
41248: NEG
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 3
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41324: LD_ADDR_VAR 0 42
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 3
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 3
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: PUSH
41571: LD_INT 3
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 3
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 3
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: LD_INT 3
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41674: LD_ADDR_VAR 0 43
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: LD_INT 3
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 3
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 3
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 3
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42022: LD_ADDR_VAR 0 44
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42372: LD_ADDR_VAR 0 45
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 3
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 3
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 3
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 3
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42722: LD_ADDR_VAR 0 46
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 3
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43070: LD_ADDR_VAR 0 47
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43221: LD_ADDR_VAR 0 48
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43368: LD_ADDR_VAR 0 49
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43512: LD_ADDR_VAR 0 50
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43656: LD_ADDR_VAR 0 51
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43803: LD_ADDR_VAR 0 52
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43954: LD_ADDR_VAR 0 53
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44184: LD_ADDR_VAR 0 54
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44414: LD_ADDR_VAR 0 55
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 2
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44644: LD_ADDR_VAR 0 56
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44874: LD_ADDR_VAR 0 57
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45104: LD_ADDR_VAR 0 58
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45334: LD_ADDR_VAR 0 59
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45422: LD_ADDR_VAR 0 60
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45510: LD_ADDR_VAR 0 61
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45598: LD_ADDR_VAR 0 62
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45686: LD_ADDR_VAR 0 63
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45774: LD_ADDR_VAR 0 64
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// end ; 1 :
45862: GO 51759
45864: LD_INT 1
45866: DOUBLE
45867: EQUAL
45868: IFTRUE 45872
45870: GO 48495
45872: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45873: LD_ADDR_VAR 0 11
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45917: LD_ADDR_VAR 0 12
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45958: LD_ADDR_VAR 0 13
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45998: LD_ADDR_VAR 0 14
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46039: LD_ADDR_VAR 0 15
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 3
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46083: LD_ADDR_VAR 0 16
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46129: LD_ADDR_VAR 0 17
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46173: LD_ADDR_VAR 0 18
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46214: LD_ADDR_VAR 0 19
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: LD_INT 3
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46254: LD_ADDR_VAR 0 20
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46295: LD_ADDR_VAR 0 21
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46339: LD_ADDR_VAR 0 22
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 3
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46385: LD_ADDR_VAR 0 23
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 4
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46429: LD_ADDR_VAR 0 24
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 4
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46470: LD_ADDR_VAR 0 25
46474: PUSH
46475: LD_INT 3
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 4
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 4
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46510: LD_ADDR_VAR 0 26
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 4
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46551: LD_ADDR_VAR 0 27
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46595: LD_ADDR_VAR 0 28
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: LD_INT 4
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 4
46626: NEG
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46641: LD_ADDR_VAR 0 29
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 4
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 4
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: LD_INT 5
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 5
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 4
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 6
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 6
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 5
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46796: LD_ADDR_VAR 0 30
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 4
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 4
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 4
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 5
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 5
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 5
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 6
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 6
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46939: LD_ADDR_VAR 0 31
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: PUSH
46977: LD_INT 3
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 4
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 3
46996: PUSH
46997: LD_INT 4
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 4
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 5
47016: PUSH
47017: LD_INT 5
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 5
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 6
47036: PUSH
47037: LD_INT 5
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 6
47046: PUSH
47047: LD_INT 6
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 5
47056: PUSH
47057: LD_INT 6
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47078: LD_ADDR_VAR 0 32
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 3
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 4
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 5
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 5
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 6
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 6
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 5
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47221: LD_ADDR_VAR 0 33
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 4
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 5
47307: NEG
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 5
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 5
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 6
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 6
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47376: LD_ADDR_VAR 0 34
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: LD_INT 3
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: NEG
47420: PUSH
47421: LD_INT 4
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 4
47431: NEG
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 4
47443: NEG
47444: PUSH
47445: LD_INT 4
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 4
47455: NEG
47456: PUSH
47457: LD_INT 5
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 5
47467: NEG
47468: PUSH
47469: LD_INT 4
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 5
47479: NEG
47480: PUSH
47481: LD_INT 5
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 5
47491: NEG
47492: PUSH
47493: LD_INT 6
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 6
47503: NEG
47504: PUSH
47505: LD_INT 5
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 6
47515: NEG
47516: PUSH
47517: LD_INT 6
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47539: LD_ADDR_VAR 0 41
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47583: LD_ADDR_VAR 0 42
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47624: LD_ADDR_VAR 0 43
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47664: LD_ADDR_VAR 0 44
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47705: LD_ADDR_VAR 0 45
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47749: LD_ADDR_VAR 0 46
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47795: LD_ADDR_VAR 0 47
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47828: LD_ADDR_VAR 0 48
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47859: LD_ADDR_VAR 0 49
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47888: LD_ADDR_VAR 0 50
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 3
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47917: LD_ADDR_VAR 0 51
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 52
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47981: LD_ADDR_VAR 0 53
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48025: LD_ADDR_VAR 0 54
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48066: LD_ADDR_VAR 0 55
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48106: LD_ADDR_VAR 0 56
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48147: LD_ADDR_VAR 0 57
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48191: LD_ADDR_VAR 0 58
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 3
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48237: LD_ADDR_VAR 0 59
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48281: LD_ADDR_VAR 0 60
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48322: LD_ADDR_VAR 0 61
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48362: LD_ADDR_VAR 0 62
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48403: LD_ADDR_VAR 0 63
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48447: LD_ADDR_VAR 0 64
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// end ; 2 :
48493: GO 51759
48495: LD_INT 2
48497: DOUBLE
48498: EQUAL
48499: IFTRUE 48503
48501: GO 51758
48503: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48504: LD_ADDR_VAR 0 29
48508: PUSH
48509: LD_INT 4
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 4
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 5
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 4
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 3
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 5
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: PUSH
48625: LD_INT 3
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: LD_INT 4
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: LD_INT 4
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 3
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 4
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 4
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 4
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 4
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 5
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 5
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 5
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 4
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 4
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 4
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 4
48889: NEG
48890: PUSH
48891: LD_INT 4
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 4
48901: NEG
48902: PUSH
48903: LD_INT 5
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: NEG
48914: PUSH
48915: LD_INT 4
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: NEG
48926: PUSH
48927: LD_INT 3
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 4
48937: NEG
48938: PUSH
48939: LD_INT 3
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 5
48949: NEG
48950: PUSH
48951: LD_INT 4
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 5
48961: NEG
48962: PUSH
48963: LD_INT 5
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: NEG
48974: PUSH
48975: LD_INT 5
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 5
48985: NEG
48986: PUSH
48987: LD_INT 3
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49042: LD_ADDR_VAR 0 30
49046: PUSH
49047: LD_INT 4
49049: PUSH
49050: LD_INT 4
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 4
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 5
49069: PUSH
49070: LD_INT 4
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 5
49079: PUSH
49080: LD_INT 5
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: PUSH
49090: LD_INT 5
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: PUSH
49100: LD_INT 4
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 5
49119: PUSH
49120: LD_INT 3
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: LD_INT 5
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 4
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 4
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 4
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 4
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 4
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 4
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 5
49288: NEG
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 5
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 5
49311: NEG
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: LD_INT 3
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 3
49346: NEG
49347: PUSH
49348: LD_INT 4
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 4
49394: NEG
49395: PUSH
49396: LD_INT 3
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: NEG
49407: PUSH
49408: LD_INT 4
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 4
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 4
49430: NEG
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 4
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 5
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 4
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 4
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 5
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 5
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49589: LD_ADDR_VAR 0 31
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 5
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 5
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 4
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 5
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 3
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 4
49745: NEG
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 4
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 4
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: LD_INT 4
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 4
49803: NEG
49804: PUSH
49805: LD_INT 5
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: LD_INT 4
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 5
49851: NEG
49852: PUSH
49853: LD_INT 4
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 5
49863: NEG
49864: PUSH
49865: LD_INT 5
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: LD_INT 5
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 5
49887: NEG
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 4
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 4
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 4
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 5
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 5
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 5
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50139: LD_ADDR_VAR 0 32
50143: PUSH
50144: LD_INT 4
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 4
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 4
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 5
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 5
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: LD_INT 4
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 4
50308: NEG
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 4
50320: NEG
50321: PUSH
50322: LD_INT 4
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 4
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 4
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 5
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 4
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 5
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 5
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 4
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 4
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 4
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 4
50551: PUSH
50552: LD_INT 4
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 5
50571: PUSH
50572: LD_INT 4
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: PUSH
50592: LD_INT 5
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50686: LD_ADDR_VAR 0 33
50690: PUSH
50691: LD_INT 4
50693: NEG
50694: PUSH
50695: LD_INT 4
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: LD_INT 5
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: LD_INT 4
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 3
50729: NEG
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 5
50753: NEG
50754: PUSH
50755: LD_INT 4
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 5
50765: NEG
50766: PUSH
50767: LD_INT 5
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 5
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 5
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 3
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 4
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 3
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 4
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 4
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 4
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 5
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 5
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 4
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 5
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 4
51026: PUSH
51027: LD_INT 4
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 4
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: LD_INT 4
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 4
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 5
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 5
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 4
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 5
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51224: LD_ADDR_VAR 0 34
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 4
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 5
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 4
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 5
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 5
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 4
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: LD_INT 4
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: LD_INT 5
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 4
51466: PUSH
51467: LD_INT 5
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: LD_INT 4
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 5
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 5
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 4
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 4
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 4
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 4
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 5
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 5
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 5
51688: NEG
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// end ; end ;
51756: GO 51759
51758: POP
// case btype of b_depot , b_warehouse :
51759: LD_VAR 0 1
51763: PUSH
51764: LD_INT 0
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51778
51770: LD_INT 1
51772: DOUBLE
51773: EQUAL
51774: IFTRUE 51778
51776: GO 51979
51778: POP
// case nation of nation_american :
51779: LD_VAR 0 5
51783: PUSH
51784: LD_INT 1
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51792
51790: GO 51848
51792: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51793: LD_ADDR_VAR 0 9
51797: PUSH
51798: LD_VAR 0 11
51802: PUSH
51803: LD_VAR 0 12
51807: PUSH
51808: LD_VAR 0 13
51812: PUSH
51813: LD_VAR 0 14
51817: PUSH
51818: LD_VAR 0 15
51822: PUSH
51823: LD_VAR 0 16
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: PUSH
51836: LD_VAR 0 4
51840: PUSH
51841: LD_INT 1
51843: PLUS
51844: ARRAY
51845: ST_TO_ADDR
51846: GO 51977
51848: LD_INT 2
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51856
51854: GO 51912
51856: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51857: LD_ADDR_VAR 0 9
51861: PUSH
51862: LD_VAR 0 17
51866: PUSH
51867: LD_VAR 0 18
51871: PUSH
51872: LD_VAR 0 19
51876: PUSH
51877: LD_VAR 0 20
51881: PUSH
51882: LD_VAR 0 21
51886: PUSH
51887: LD_VAR 0 22
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: PUSH
51900: LD_VAR 0 4
51904: PUSH
51905: LD_INT 1
51907: PLUS
51908: ARRAY
51909: ST_TO_ADDR
51910: GO 51977
51912: LD_INT 3
51914: DOUBLE
51915: EQUAL
51916: IFTRUE 51920
51918: GO 51976
51920: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51921: LD_ADDR_VAR 0 9
51925: PUSH
51926: LD_VAR 0 23
51930: PUSH
51931: LD_VAR 0 24
51935: PUSH
51936: LD_VAR 0 25
51940: PUSH
51941: LD_VAR 0 26
51945: PUSH
51946: LD_VAR 0 27
51950: PUSH
51951: LD_VAR 0 28
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: PUSH
51964: LD_VAR 0 4
51968: PUSH
51969: LD_INT 1
51971: PLUS
51972: ARRAY
51973: ST_TO_ADDR
51974: GO 51977
51976: POP
51977: GO 52532
51979: LD_INT 2
51981: DOUBLE
51982: EQUAL
51983: IFTRUE 51993
51985: LD_INT 3
51987: DOUBLE
51988: EQUAL
51989: IFTRUE 51993
51991: GO 52049
51993: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51994: LD_ADDR_VAR 0 9
51998: PUSH
51999: LD_VAR 0 29
52003: PUSH
52004: LD_VAR 0 30
52008: PUSH
52009: LD_VAR 0 31
52013: PUSH
52014: LD_VAR 0 32
52018: PUSH
52019: LD_VAR 0 33
52023: PUSH
52024: LD_VAR 0 34
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: PUSH
52037: LD_VAR 0 4
52041: PUSH
52042: LD_INT 1
52044: PLUS
52045: ARRAY
52046: ST_TO_ADDR
52047: GO 52532
52049: LD_INT 16
52051: DOUBLE
52052: EQUAL
52053: IFTRUE 52111
52055: LD_INT 17
52057: DOUBLE
52058: EQUAL
52059: IFTRUE 52111
52061: LD_INT 18
52063: DOUBLE
52064: EQUAL
52065: IFTRUE 52111
52067: LD_INT 19
52069: DOUBLE
52070: EQUAL
52071: IFTRUE 52111
52073: LD_INT 22
52075: DOUBLE
52076: EQUAL
52077: IFTRUE 52111
52079: LD_INT 20
52081: DOUBLE
52082: EQUAL
52083: IFTRUE 52111
52085: LD_INT 21
52087: DOUBLE
52088: EQUAL
52089: IFTRUE 52111
52091: LD_INT 23
52093: DOUBLE
52094: EQUAL
52095: IFTRUE 52111
52097: LD_INT 24
52099: DOUBLE
52100: EQUAL
52101: IFTRUE 52111
52103: LD_INT 25
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52111
52109: GO 52167
52111: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52112: LD_ADDR_VAR 0 9
52116: PUSH
52117: LD_VAR 0 35
52121: PUSH
52122: LD_VAR 0 36
52126: PUSH
52127: LD_VAR 0 37
52131: PUSH
52132: LD_VAR 0 38
52136: PUSH
52137: LD_VAR 0 39
52141: PUSH
52142: LD_VAR 0 40
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: PUSH
52155: LD_VAR 0 4
52159: PUSH
52160: LD_INT 1
52162: PLUS
52163: ARRAY
52164: ST_TO_ADDR
52165: GO 52532
52167: LD_INT 6
52169: DOUBLE
52170: EQUAL
52171: IFTRUE 52223
52173: LD_INT 7
52175: DOUBLE
52176: EQUAL
52177: IFTRUE 52223
52179: LD_INT 8
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52223
52185: LD_INT 13
52187: DOUBLE
52188: EQUAL
52189: IFTRUE 52223
52191: LD_INT 12
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52223
52197: LD_INT 15
52199: DOUBLE
52200: EQUAL
52201: IFTRUE 52223
52203: LD_INT 11
52205: DOUBLE
52206: EQUAL
52207: IFTRUE 52223
52209: LD_INT 14
52211: DOUBLE
52212: EQUAL
52213: IFTRUE 52223
52215: LD_INT 10
52217: DOUBLE
52218: EQUAL
52219: IFTRUE 52223
52221: GO 52279
52223: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52224: LD_ADDR_VAR 0 9
52228: PUSH
52229: LD_VAR 0 41
52233: PUSH
52234: LD_VAR 0 42
52238: PUSH
52239: LD_VAR 0 43
52243: PUSH
52244: LD_VAR 0 44
52248: PUSH
52249: LD_VAR 0 45
52253: PUSH
52254: LD_VAR 0 46
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: LD_VAR 0 4
52271: PUSH
52272: LD_INT 1
52274: PLUS
52275: ARRAY
52276: ST_TO_ADDR
52277: GO 52532
52279: LD_INT 36
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52287
52285: GO 52343
52287: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52288: LD_ADDR_VAR 0 9
52292: PUSH
52293: LD_VAR 0 47
52297: PUSH
52298: LD_VAR 0 48
52302: PUSH
52303: LD_VAR 0 49
52307: PUSH
52308: LD_VAR 0 50
52312: PUSH
52313: LD_VAR 0 51
52317: PUSH
52318: LD_VAR 0 52
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: PUSH
52331: LD_VAR 0 4
52335: PUSH
52336: LD_INT 1
52338: PLUS
52339: ARRAY
52340: ST_TO_ADDR
52341: GO 52532
52343: LD_INT 4
52345: DOUBLE
52346: EQUAL
52347: IFTRUE 52369
52349: LD_INT 5
52351: DOUBLE
52352: EQUAL
52353: IFTRUE 52369
52355: LD_INT 34
52357: DOUBLE
52358: EQUAL
52359: IFTRUE 52369
52361: LD_INT 37
52363: DOUBLE
52364: EQUAL
52365: IFTRUE 52369
52367: GO 52425
52369: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52370: LD_ADDR_VAR 0 9
52374: PUSH
52375: LD_VAR 0 53
52379: PUSH
52380: LD_VAR 0 54
52384: PUSH
52385: LD_VAR 0 55
52389: PUSH
52390: LD_VAR 0 56
52394: PUSH
52395: LD_VAR 0 57
52399: PUSH
52400: LD_VAR 0 58
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: PUSH
52413: LD_VAR 0 4
52417: PUSH
52418: LD_INT 1
52420: PLUS
52421: ARRAY
52422: ST_TO_ADDR
52423: GO 52532
52425: LD_INT 31
52427: DOUBLE
52428: EQUAL
52429: IFTRUE 52475
52431: LD_INT 32
52433: DOUBLE
52434: EQUAL
52435: IFTRUE 52475
52437: LD_INT 33
52439: DOUBLE
52440: EQUAL
52441: IFTRUE 52475
52443: LD_INT 27
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52475
52449: LD_INT 26
52451: DOUBLE
52452: EQUAL
52453: IFTRUE 52475
52455: LD_INT 28
52457: DOUBLE
52458: EQUAL
52459: IFTRUE 52475
52461: LD_INT 29
52463: DOUBLE
52464: EQUAL
52465: IFTRUE 52475
52467: LD_INT 30
52469: DOUBLE
52470: EQUAL
52471: IFTRUE 52475
52473: GO 52531
52475: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52476: LD_ADDR_VAR 0 9
52480: PUSH
52481: LD_VAR 0 59
52485: PUSH
52486: LD_VAR 0 60
52490: PUSH
52491: LD_VAR 0 61
52495: PUSH
52496: LD_VAR 0 62
52500: PUSH
52501: LD_VAR 0 63
52505: PUSH
52506: LD_VAR 0 64
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: PUSH
52519: LD_VAR 0 4
52523: PUSH
52524: LD_INT 1
52526: PLUS
52527: ARRAY
52528: ST_TO_ADDR
52529: GO 52532
52531: POP
// temp_list2 = [ ] ;
52532: LD_ADDR_VAR 0 10
52536: PUSH
52537: EMPTY
52538: ST_TO_ADDR
// for i in temp_list do
52539: LD_ADDR_VAR 0 8
52543: PUSH
52544: LD_VAR 0 9
52548: PUSH
52549: FOR_IN
52550: IFFALSE 52602
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52552: LD_ADDR_VAR 0 10
52556: PUSH
52557: LD_VAR 0 10
52561: PUSH
52562: LD_VAR 0 8
52566: PUSH
52567: LD_INT 1
52569: ARRAY
52570: PUSH
52571: LD_VAR 0 2
52575: PLUS
52576: PUSH
52577: LD_VAR 0 8
52581: PUSH
52582: LD_INT 2
52584: ARRAY
52585: PUSH
52586: LD_VAR 0 3
52590: PLUS
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: EMPTY
52597: LIST
52598: ADD
52599: ST_TO_ADDR
52600: GO 52549
52602: POP
52603: POP
// result = temp_list2 ;
52604: LD_ADDR_VAR 0 7
52608: PUSH
52609: LD_VAR 0 10
52613: ST_TO_ADDR
// end ;
52614: LD_VAR 0 7
52618: RET
// export function EnemyInRange ( unit , dist ) ; begin
52619: LD_INT 0
52621: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52622: LD_ADDR_VAR 0 3
52626: PUSH
52627: LD_VAR 0 1
52631: PPUSH
52632: CALL_OW 255
52636: PPUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 250
52646: PPUSH
52647: LD_VAR 0 1
52651: PPUSH
52652: CALL_OW 251
52656: PPUSH
52657: LD_VAR 0 2
52661: PPUSH
52662: CALL 26723 0 4
52666: PUSH
52667: LD_INT 4
52669: ARRAY
52670: ST_TO_ADDR
// end ;
52671: LD_VAR 0 3
52675: RET
// export function PlayerSeeMe ( unit ) ; begin
52676: LD_INT 0
52678: PPUSH
// result := See ( your_side , unit ) ;
52679: LD_ADDR_VAR 0 2
52683: PUSH
52684: LD_OWVAR 2
52688: PPUSH
52689: LD_VAR 0 1
52693: PPUSH
52694: CALL_OW 292
52698: ST_TO_ADDR
// end ;
52699: LD_VAR 0 2
52703: RET
// export function ReverseDir ( unit ) ; begin
52704: LD_INT 0
52706: PPUSH
// if not unit then
52707: LD_VAR 0 1
52711: NOT
52712: IFFALSE 52716
// exit ;
52714: GO 52739
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52716: LD_ADDR_VAR 0 2
52720: PUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: CALL_OW 254
52730: PUSH
52731: LD_INT 3
52733: PLUS
52734: PUSH
52735: LD_INT 6
52737: MOD
52738: ST_TO_ADDR
// end ;
52739: LD_VAR 0 2
52743: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52744: LD_INT 0
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
// if not hexes then
52751: LD_VAR 0 2
52755: NOT
52756: IFFALSE 52760
// exit ;
52758: GO 52908
// dist := 9999 ;
52760: LD_ADDR_VAR 0 5
52764: PUSH
52765: LD_INT 9999
52767: ST_TO_ADDR
// for i = 1 to hexes do
52768: LD_ADDR_VAR 0 4
52772: PUSH
52773: DOUBLE
52774: LD_INT 1
52776: DEC
52777: ST_TO_ADDR
52778: LD_VAR 0 2
52782: PUSH
52783: FOR_TO
52784: IFFALSE 52896
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52786: LD_VAR 0 1
52790: PPUSH
52791: LD_VAR 0 2
52795: PUSH
52796: LD_VAR 0 4
52800: ARRAY
52801: PUSH
52802: LD_INT 1
52804: ARRAY
52805: PPUSH
52806: LD_VAR 0 2
52810: PUSH
52811: LD_VAR 0 4
52815: ARRAY
52816: PUSH
52817: LD_INT 2
52819: ARRAY
52820: PPUSH
52821: CALL_OW 297
52825: PUSH
52826: LD_VAR 0 5
52830: LESS
52831: IFFALSE 52894
// begin hex := hexes [ i ] ;
52833: LD_ADDR_VAR 0 7
52837: PUSH
52838: LD_VAR 0 2
52842: PUSH
52843: LD_VAR 0 4
52847: ARRAY
52848: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52849: LD_ADDR_VAR 0 5
52853: PUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_VAR 0 4
52868: ARRAY
52869: PUSH
52870: LD_INT 1
52872: ARRAY
52873: PPUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_VAR 0 4
52883: ARRAY
52884: PUSH
52885: LD_INT 2
52887: ARRAY
52888: PPUSH
52889: CALL_OW 297
52893: ST_TO_ADDR
// end ; end ;
52894: GO 52783
52896: POP
52897: POP
// result := hex ;
52898: LD_ADDR_VAR 0 3
52902: PUSH
52903: LD_VAR 0 7
52907: ST_TO_ADDR
// end ;
52908: LD_VAR 0 3
52912: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52913: LD_INT 0
52915: PPUSH
52916: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52917: LD_VAR 0 1
52921: NOT
52922: PUSH
52923: LD_VAR 0 1
52927: PUSH
52928: LD_INT 21
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 23
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PPUSH
52952: CALL_OW 69
52956: IN
52957: NOT
52958: OR
52959: IFFALSE 52963
// exit ;
52961: GO 53010
// for i = 1 to 3 do
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: DOUBLE
52969: LD_INT 1
52971: DEC
52972: ST_TO_ADDR
52973: LD_INT 3
52975: PUSH
52976: FOR_TO
52977: IFFALSE 53008
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 250
52988: PPUSH
52989: LD_VAR 0 1
52993: PPUSH
52994: CALL_OW 251
52998: PPUSH
52999: LD_INT 1
53001: PPUSH
53002: CALL_OW 453
53006: GO 52976
53008: POP
53009: POP
// end ;
53010: LD_VAR 0 2
53014: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53015: LD_INT 0
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53023: LD_VAR 0 1
53027: NOT
53028: PUSH
53029: LD_VAR 0 2
53033: NOT
53034: OR
53035: PUSH
53036: LD_VAR 0 1
53040: PPUSH
53041: CALL_OW 314
53045: OR
53046: IFFALSE 53050
// exit ;
53048: GO 53491
// x := GetX ( enemy_unit ) ;
53050: LD_ADDR_VAR 0 7
53054: PUSH
53055: LD_VAR 0 2
53059: PPUSH
53060: CALL_OW 250
53064: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53065: LD_ADDR_VAR 0 8
53069: PUSH
53070: LD_VAR 0 2
53074: PPUSH
53075: CALL_OW 251
53079: ST_TO_ADDR
// if not x or not y then
53080: LD_VAR 0 7
53084: NOT
53085: PUSH
53086: LD_VAR 0 8
53090: NOT
53091: OR
53092: IFFALSE 53096
// exit ;
53094: GO 53491
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53096: LD_ADDR_VAR 0 6
53100: PUSH
53101: LD_VAR 0 7
53105: PPUSH
53106: LD_INT 0
53108: PPUSH
53109: LD_INT 4
53111: PPUSH
53112: CALL_OW 272
53116: PUSH
53117: LD_VAR 0 8
53121: PPUSH
53122: LD_INT 0
53124: PPUSH
53125: LD_INT 4
53127: PPUSH
53128: CALL_OW 273
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_VAR 0 7
53141: PPUSH
53142: LD_INT 1
53144: PPUSH
53145: LD_INT 4
53147: PPUSH
53148: CALL_OW 272
53152: PUSH
53153: LD_VAR 0 8
53157: PPUSH
53158: LD_INT 1
53160: PPUSH
53161: LD_INT 4
53163: PPUSH
53164: CALL_OW 273
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_VAR 0 7
53177: PPUSH
53178: LD_INT 2
53180: PPUSH
53181: LD_INT 4
53183: PPUSH
53184: CALL_OW 272
53188: PUSH
53189: LD_VAR 0 8
53193: PPUSH
53194: LD_INT 2
53196: PPUSH
53197: LD_INT 4
53199: PPUSH
53200: CALL_OW 273
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_VAR 0 7
53213: PPUSH
53214: LD_INT 3
53216: PPUSH
53217: LD_INT 4
53219: PPUSH
53220: CALL_OW 272
53224: PUSH
53225: LD_VAR 0 8
53229: PPUSH
53230: LD_INT 3
53232: PPUSH
53233: LD_INT 4
53235: PPUSH
53236: CALL_OW 273
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_VAR 0 7
53249: PPUSH
53250: LD_INT 4
53252: PPUSH
53253: LD_INT 4
53255: PPUSH
53256: CALL_OW 272
53260: PUSH
53261: LD_VAR 0 8
53265: PPUSH
53266: LD_INT 4
53268: PPUSH
53269: LD_INT 4
53271: PPUSH
53272: CALL_OW 273
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_VAR 0 7
53285: PPUSH
53286: LD_INT 5
53288: PPUSH
53289: LD_INT 4
53291: PPUSH
53292: CALL_OW 272
53296: PUSH
53297: LD_VAR 0 8
53301: PPUSH
53302: LD_INT 5
53304: PPUSH
53305: LD_INT 4
53307: PPUSH
53308: CALL_OW 273
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// for i = tmp downto 1 do
53325: LD_ADDR_VAR 0 4
53329: PUSH
53330: DOUBLE
53331: LD_VAR 0 6
53335: INC
53336: ST_TO_ADDR
53337: LD_INT 1
53339: PUSH
53340: FOR_DOWNTO
53341: IFFALSE 53442
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53343: LD_VAR 0 6
53347: PUSH
53348: LD_VAR 0 4
53352: ARRAY
53353: PUSH
53354: LD_INT 1
53356: ARRAY
53357: PPUSH
53358: LD_VAR 0 6
53362: PUSH
53363: LD_VAR 0 4
53367: ARRAY
53368: PUSH
53369: LD_INT 2
53371: ARRAY
53372: PPUSH
53373: CALL_OW 488
53377: NOT
53378: PUSH
53379: LD_VAR 0 6
53383: PUSH
53384: LD_VAR 0 4
53388: ARRAY
53389: PUSH
53390: LD_INT 1
53392: ARRAY
53393: PPUSH
53394: LD_VAR 0 6
53398: PUSH
53399: LD_VAR 0 4
53403: ARRAY
53404: PUSH
53405: LD_INT 2
53407: ARRAY
53408: PPUSH
53409: CALL_OW 428
53413: PUSH
53414: LD_INT 0
53416: NONEQUAL
53417: OR
53418: IFFALSE 53440
// tmp := Delete ( tmp , i ) ;
53420: LD_ADDR_VAR 0 6
53424: PUSH
53425: LD_VAR 0 6
53429: PPUSH
53430: LD_VAR 0 4
53434: PPUSH
53435: CALL_OW 3
53439: ST_TO_ADDR
53440: GO 53340
53442: POP
53443: POP
// j := GetClosestHex ( unit , tmp ) ;
53444: LD_ADDR_VAR 0 5
53448: PUSH
53449: LD_VAR 0 1
53453: PPUSH
53454: LD_VAR 0 6
53458: PPUSH
53459: CALL 52744 0 2
53463: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53464: LD_VAR 0 1
53468: PPUSH
53469: LD_VAR 0 5
53473: PUSH
53474: LD_INT 1
53476: ARRAY
53477: PPUSH
53478: LD_VAR 0 5
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: PPUSH
53487: CALL_OW 111
// end ;
53491: LD_VAR 0 3
53495: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53496: LD_INT 0
53498: PPUSH
53499: PPUSH
53500: PPUSH
// uc_side = 0 ;
53501: LD_ADDR_OWVAR 20
53505: PUSH
53506: LD_INT 0
53508: ST_TO_ADDR
// uc_nation = 0 ;
53509: LD_ADDR_OWVAR 21
53513: PUSH
53514: LD_INT 0
53516: ST_TO_ADDR
// InitHc_All ( ) ;
53517: CALL_OW 584
// InitVc ;
53521: CALL_OW 20
// if mastodonts then
53525: LD_VAR 0 6
53529: IFFALSE 53596
// for i = 1 to mastodonts do
53531: LD_ADDR_VAR 0 11
53535: PUSH
53536: DOUBLE
53537: LD_INT 1
53539: DEC
53540: ST_TO_ADDR
53541: LD_VAR 0 6
53545: PUSH
53546: FOR_TO
53547: IFFALSE 53594
// begin vc_chassis := 31 ;
53549: LD_ADDR_OWVAR 37
53553: PUSH
53554: LD_INT 31
53556: ST_TO_ADDR
// vc_control := control_rider ;
53557: LD_ADDR_OWVAR 38
53561: PUSH
53562: LD_INT 4
53564: ST_TO_ADDR
// animal := CreateVehicle ;
53565: LD_ADDR_VAR 0 12
53569: PUSH
53570: CALL_OW 45
53574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53575: LD_VAR 0 12
53579: PPUSH
53580: LD_VAR 0 8
53584: PPUSH
53585: LD_INT 0
53587: PPUSH
53588: CALL 55784 0 3
// end ;
53592: GO 53546
53594: POP
53595: POP
// if horses then
53596: LD_VAR 0 5
53600: IFFALSE 53667
// for i = 1 to horses do
53602: LD_ADDR_VAR 0 11
53606: PUSH
53607: DOUBLE
53608: LD_INT 1
53610: DEC
53611: ST_TO_ADDR
53612: LD_VAR 0 5
53616: PUSH
53617: FOR_TO
53618: IFFALSE 53665
// begin hc_class := 21 ;
53620: LD_ADDR_OWVAR 28
53624: PUSH
53625: LD_INT 21
53627: ST_TO_ADDR
// hc_gallery :=  ;
53628: LD_ADDR_OWVAR 33
53632: PUSH
53633: LD_STRING 
53635: ST_TO_ADDR
// animal := CreateHuman ;
53636: LD_ADDR_VAR 0 12
53640: PUSH
53641: CALL_OW 44
53645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53646: LD_VAR 0 12
53650: PPUSH
53651: LD_VAR 0 8
53655: PPUSH
53656: LD_INT 0
53658: PPUSH
53659: CALL 55784 0 3
// end ;
53663: GO 53617
53665: POP
53666: POP
// if birds then
53667: LD_VAR 0 1
53671: IFFALSE 53738
// for i = 1 to birds do
53673: LD_ADDR_VAR 0 11
53677: PUSH
53678: DOUBLE
53679: LD_INT 1
53681: DEC
53682: ST_TO_ADDR
53683: LD_VAR 0 1
53687: PUSH
53688: FOR_TO
53689: IFFALSE 53736
// begin hc_class = 18 ;
53691: LD_ADDR_OWVAR 28
53695: PUSH
53696: LD_INT 18
53698: ST_TO_ADDR
// hc_gallery =  ;
53699: LD_ADDR_OWVAR 33
53703: PUSH
53704: LD_STRING 
53706: ST_TO_ADDR
// animal := CreateHuman ;
53707: LD_ADDR_VAR 0 12
53711: PUSH
53712: CALL_OW 44
53716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53717: LD_VAR 0 12
53721: PPUSH
53722: LD_VAR 0 8
53726: PPUSH
53727: LD_INT 0
53729: PPUSH
53730: CALL 55784 0 3
// end ;
53734: GO 53688
53736: POP
53737: POP
// if tigers then
53738: LD_VAR 0 2
53742: IFFALSE 53826
// for i = 1 to tigers do
53744: LD_ADDR_VAR 0 11
53748: PUSH
53749: DOUBLE
53750: LD_INT 1
53752: DEC
53753: ST_TO_ADDR
53754: LD_VAR 0 2
53758: PUSH
53759: FOR_TO
53760: IFFALSE 53824
// begin hc_class = class_tiger ;
53762: LD_ADDR_OWVAR 28
53766: PUSH
53767: LD_INT 14
53769: ST_TO_ADDR
// hc_gallery =  ;
53770: LD_ADDR_OWVAR 33
53774: PUSH
53775: LD_STRING 
53777: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53778: LD_ADDR_OWVAR 35
53782: PUSH
53783: LD_INT 7
53785: NEG
53786: PPUSH
53787: LD_INT 7
53789: PPUSH
53790: CALL_OW 12
53794: ST_TO_ADDR
// animal := CreateHuman ;
53795: LD_ADDR_VAR 0 12
53799: PUSH
53800: CALL_OW 44
53804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53805: LD_VAR 0 12
53809: PPUSH
53810: LD_VAR 0 8
53814: PPUSH
53815: LD_INT 0
53817: PPUSH
53818: CALL 55784 0 3
// end ;
53822: GO 53759
53824: POP
53825: POP
// if apemans then
53826: LD_VAR 0 3
53830: IFFALSE 53953
// for i = 1 to apemans do
53832: LD_ADDR_VAR 0 11
53836: PUSH
53837: DOUBLE
53838: LD_INT 1
53840: DEC
53841: ST_TO_ADDR
53842: LD_VAR 0 3
53846: PUSH
53847: FOR_TO
53848: IFFALSE 53951
// begin hc_class = class_apeman ;
53850: LD_ADDR_OWVAR 28
53854: PUSH
53855: LD_INT 12
53857: ST_TO_ADDR
// hc_gallery =  ;
53858: LD_ADDR_OWVAR 33
53862: PUSH
53863: LD_STRING 
53865: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53866: LD_ADDR_OWVAR 35
53870: PUSH
53871: LD_INT 5
53873: NEG
53874: PPUSH
53875: LD_INT 5
53877: PPUSH
53878: CALL_OW 12
53882: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53883: LD_ADDR_OWVAR 31
53887: PUSH
53888: LD_INT 1
53890: PPUSH
53891: LD_INT 3
53893: PPUSH
53894: CALL_OW 12
53898: PUSH
53899: LD_INT 1
53901: PPUSH
53902: LD_INT 3
53904: PPUSH
53905: CALL_OW 12
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// animal := CreateHuman ;
53922: LD_ADDR_VAR 0 12
53926: PUSH
53927: CALL_OW 44
53931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53932: LD_VAR 0 12
53936: PPUSH
53937: LD_VAR 0 8
53941: PPUSH
53942: LD_INT 0
53944: PPUSH
53945: CALL 55784 0 3
// end ;
53949: GO 53847
53951: POP
53952: POP
// if enchidnas then
53953: LD_VAR 0 4
53957: IFFALSE 54024
// for i = 1 to enchidnas do
53959: LD_ADDR_VAR 0 11
53963: PUSH
53964: DOUBLE
53965: LD_INT 1
53967: DEC
53968: ST_TO_ADDR
53969: LD_VAR 0 4
53973: PUSH
53974: FOR_TO
53975: IFFALSE 54022
// begin hc_class = 13 ;
53977: LD_ADDR_OWVAR 28
53981: PUSH
53982: LD_INT 13
53984: ST_TO_ADDR
// hc_gallery =  ;
53985: LD_ADDR_OWVAR 33
53989: PUSH
53990: LD_STRING 
53992: ST_TO_ADDR
// animal := CreateHuman ;
53993: LD_ADDR_VAR 0 12
53997: PUSH
53998: CALL_OW 44
54002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54003: LD_VAR 0 12
54007: PPUSH
54008: LD_VAR 0 8
54012: PPUSH
54013: LD_INT 0
54015: PPUSH
54016: CALL 55784 0 3
// end ;
54020: GO 53974
54022: POP
54023: POP
// if fishes then
54024: LD_VAR 0 7
54028: IFFALSE 54095
// for i = 1 to fishes do
54030: LD_ADDR_VAR 0 11
54034: PUSH
54035: DOUBLE
54036: LD_INT 1
54038: DEC
54039: ST_TO_ADDR
54040: LD_VAR 0 7
54044: PUSH
54045: FOR_TO
54046: IFFALSE 54093
// begin hc_class = 20 ;
54048: LD_ADDR_OWVAR 28
54052: PUSH
54053: LD_INT 20
54055: ST_TO_ADDR
// hc_gallery =  ;
54056: LD_ADDR_OWVAR 33
54060: PUSH
54061: LD_STRING 
54063: ST_TO_ADDR
// animal := CreateHuman ;
54064: LD_ADDR_VAR 0 12
54068: PUSH
54069: CALL_OW 44
54073: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54074: LD_VAR 0 12
54078: PPUSH
54079: LD_VAR 0 9
54083: PPUSH
54084: LD_INT 0
54086: PPUSH
54087: CALL 55784 0 3
// end ;
54091: GO 54045
54093: POP
54094: POP
// end ;
54095: LD_VAR 0 10
54099: RET
// export function WantHeal ( sci , unit ) ; begin
54100: LD_INT 0
54102: PPUSH
// if GetTaskList ( sci ) > 0 then
54103: LD_VAR 0 1
54107: PPUSH
54108: CALL_OW 437
54112: PUSH
54113: LD_INT 0
54115: GREATER
54116: IFFALSE 54186
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54118: LD_VAR 0 1
54122: PPUSH
54123: CALL_OW 437
54127: PUSH
54128: LD_INT 1
54130: ARRAY
54131: PUSH
54132: LD_INT 1
54134: ARRAY
54135: PUSH
54136: LD_STRING l
54138: EQUAL
54139: PUSH
54140: LD_VAR 0 1
54144: PPUSH
54145: CALL_OW 437
54149: PUSH
54150: LD_INT 1
54152: ARRAY
54153: PUSH
54154: LD_INT 4
54156: ARRAY
54157: PUSH
54158: LD_VAR 0 2
54162: EQUAL
54163: AND
54164: IFFALSE 54176
// result := true else
54166: LD_ADDR_VAR 0 3
54170: PUSH
54171: LD_INT 1
54173: ST_TO_ADDR
54174: GO 54184
// result := false ;
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_INT 0
54183: ST_TO_ADDR
// end else
54184: GO 54194
// result := false ;
54186: LD_ADDR_VAR 0 3
54190: PUSH
54191: LD_INT 0
54193: ST_TO_ADDR
// end ;
54194: LD_VAR 0 3
54198: RET
// export function HealTarget ( sci ) ; begin
54199: LD_INT 0
54201: PPUSH
// if not sci then
54202: LD_VAR 0 1
54206: NOT
54207: IFFALSE 54211
// exit ;
54209: GO 54276
// result := 0 ;
54211: LD_ADDR_VAR 0 2
54215: PUSH
54216: LD_INT 0
54218: ST_TO_ADDR
// if GetTaskList ( sci ) then
54219: LD_VAR 0 1
54223: PPUSH
54224: CALL_OW 437
54228: IFFALSE 54276
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54230: LD_VAR 0 1
54234: PPUSH
54235: CALL_OW 437
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PUSH
54244: LD_INT 1
54246: ARRAY
54247: PUSH
54248: LD_STRING l
54250: EQUAL
54251: IFFALSE 54276
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54253: LD_ADDR_VAR 0 2
54257: PUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 437
54267: PUSH
54268: LD_INT 1
54270: ARRAY
54271: PUSH
54272: LD_INT 4
54274: ARRAY
54275: ST_TO_ADDR
// end ;
54276: LD_VAR 0 2
54280: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54281: LD_INT 0
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
// if not base_units then
54287: LD_VAR 0 1
54291: NOT
54292: IFFALSE 54296
// exit ;
54294: GO 54383
// result := false ;
54296: LD_ADDR_VAR 0 2
54300: PUSH
54301: LD_INT 0
54303: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54304: LD_ADDR_VAR 0 5
54308: PUSH
54309: LD_VAR 0 1
54313: PPUSH
54314: LD_INT 21
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PPUSH
54324: CALL_OW 72
54328: ST_TO_ADDR
// if not tmp then
54329: LD_VAR 0 5
54333: NOT
54334: IFFALSE 54338
// exit ;
54336: GO 54383
// for i in tmp do
54338: LD_ADDR_VAR 0 3
54342: PUSH
54343: LD_VAR 0 5
54347: PUSH
54348: FOR_IN
54349: IFFALSE 54381
// begin result := EnemyInRange ( i , 22 ) ;
54351: LD_ADDR_VAR 0 2
54355: PUSH
54356: LD_VAR 0 3
54360: PPUSH
54361: LD_INT 22
54363: PPUSH
54364: CALL 52619 0 2
54368: ST_TO_ADDR
// if result then
54369: LD_VAR 0 2
54373: IFFALSE 54379
// exit ;
54375: POP
54376: POP
54377: GO 54383
// end ;
54379: GO 54348
54381: POP
54382: POP
// end ;
54383: LD_VAR 0 2
54387: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54388: LD_INT 0
54390: PPUSH
54391: PPUSH
// if not units then
54392: LD_VAR 0 1
54396: NOT
54397: IFFALSE 54401
// exit ;
54399: GO 54471
// result := [ ] ;
54401: LD_ADDR_VAR 0 3
54405: PUSH
54406: EMPTY
54407: ST_TO_ADDR
// for i in units do
54408: LD_ADDR_VAR 0 4
54412: PUSH
54413: LD_VAR 0 1
54417: PUSH
54418: FOR_IN
54419: IFFALSE 54469
// if GetTag ( i ) = tag then
54421: LD_VAR 0 4
54425: PPUSH
54426: CALL_OW 110
54430: PUSH
54431: LD_VAR 0 2
54435: EQUAL
54436: IFFALSE 54467
// result := Insert ( result , result + 1 , i ) ;
54438: LD_ADDR_VAR 0 3
54442: PUSH
54443: LD_VAR 0 3
54447: PPUSH
54448: LD_VAR 0 3
54452: PUSH
54453: LD_INT 1
54455: PLUS
54456: PPUSH
54457: LD_VAR 0 4
54461: PPUSH
54462: CALL_OW 2
54466: ST_TO_ADDR
54467: GO 54418
54469: POP
54470: POP
// end ;
54471: LD_VAR 0 3
54475: RET
// export function IsDriver ( un ) ; begin
54476: LD_INT 0
54478: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54479: LD_ADDR_VAR 0 2
54483: PUSH
54484: LD_VAR 0 1
54488: PUSH
54489: LD_INT 55
54491: PUSH
54492: EMPTY
54493: LIST
54494: PPUSH
54495: CALL_OW 69
54499: IN
54500: ST_TO_ADDR
// end ;
54501: LD_VAR 0 2
54505: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54506: LD_INT 0
54508: PPUSH
54509: PPUSH
// list := [ ] ;
54510: LD_ADDR_VAR 0 5
54514: PUSH
54515: EMPTY
54516: ST_TO_ADDR
// case d of 0 :
54517: LD_VAR 0 3
54521: PUSH
54522: LD_INT 0
54524: DOUBLE
54525: EQUAL
54526: IFTRUE 54530
54528: GO 54663
54530: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54531: LD_ADDR_VAR 0 5
54535: PUSH
54536: LD_VAR 0 1
54540: PUSH
54541: LD_INT 4
54543: MINUS
54544: PUSH
54545: LD_VAR 0 2
54549: PUSH
54550: LD_INT 4
54552: MINUS
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_INT 3
54569: MINUS
54570: PUSH
54571: LD_VAR 0 2
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: PUSH
54584: LD_VAR 0 1
54588: PUSH
54589: LD_INT 4
54591: PLUS
54592: PUSH
54593: LD_VAR 0 2
54597: PUSH
54598: LD_INT 4
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_INT 3
54613: PLUS
54614: PUSH
54615: LD_VAR 0 2
54619: PUSH
54620: LD_INT 3
54622: PLUS
54623: PUSH
54624: LD_INT 5
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: PUSH
54632: LD_VAR 0 1
54636: PUSH
54637: LD_VAR 0 2
54641: PUSH
54642: LD_INT 4
54644: PLUS
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// end ; 1 :
54661: GO 55361
54663: LD_INT 1
54665: DOUBLE
54666: EQUAL
54667: IFTRUE 54671
54669: GO 54804
54671: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54672: LD_ADDR_VAR 0 5
54676: PUSH
54677: LD_VAR 0 1
54681: PUSH
54682: LD_VAR 0 2
54686: PUSH
54687: LD_INT 4
54689: MINUS
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: PUSH
54699: LD_VAR 0 1
54703: PUSH
54704: LD_INT 3
54706: MINUS
54707: PUSH
54708: LD_VAR 0 2
54712: PUSH
54713: LD_INT 3
54715: MINUS
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: PUSH
54725: LD_VAR 0 1
54729: PUSH
54730: LD_INT 4
54732: MINUS
54733: PUSH
54734: LD_VAR 0 2
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: PUSH
54747: LD_VAR 0 1
54751: PUSH
54752: LD_VAR 0 2
54756: PUSH
54757: LD_INT 3
54759: PLUS
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: PUSH
54769: LD_VAR 0 1
54773: PUSH
54774: LD_INT 4
54776: PLUS
54777: PUSH
54778: LD_VAR 0 2
54782: PUSH
54783: LD_INT 4
54785: PLUS
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// end ; 2 :
54802: GO 55361
54804: LD_INT 2
54806: DOUBLE
54807: EQUAL
54808: IFTRUE 54812
54810: GO 54941
54812: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54813: LD_ADDR_VAR 0 5
54817: PUSH
54818: LD_VAR 0 1
54822: PUSH
54823: LD_VAR 0 2
54827: PUSH
54828: LD_INT 3
54830: MINUS
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: PUSH
54840: LD_VAR 0 1
54844: PUSH
54845: LD_INT 4
54847: PLUS
54848: PUSH
54849: LD_VAR 0 2
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: PUSH
54862: LD_VAR 0 1
54866: PUSH
54867: LD_VAR 0 2
54871: PUSH
54872: LD_INT 4
54874: PLUS
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: PUSH
54884: LD_VAR 0 1
54888: PUSH
54889: LD_INT 3
54891: MINUS
54892: PUSH
54893: LD_VAR 0 2
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: PUSH
54906: LD_VAR 0 1
54910: PUSH
54911: LD_INT 4
54913: MINUS
54914: PUSH
54915: LD_VAR 0 2
54919: PUSH
54920: LD_INT 4
54922: MINUS
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// end ; 3 :
54939: GO 55361
54941: LD_INT 3
54943: DOUBLE
54944: EQUAL
54945: IFTRUE 54949
54947: GO 55082
54949: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54950: LD_ADDR_VAR 0 5
54954: PUSH
54955: LD_VAR 0 1
54959: PUSH
54960: LD_INT 3
54962: PLUS
54963: PUSH
54964: LD_VAR 0 2
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: PUSH
54977: LD_VAR 0 1
54981: PUSH
54982: LD_INT 4
54984: PLUS
54985: PUSH
54986: LD_VAR 0 2
54990: PUSH
54991: LD_INT 4
54993: PLUS
54994: PUSH
54995: LD_INT 5
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: PUSH
55003: LD_VAR 0 1
55007: PUSH
55008: LD_INT 4
55010: MINUS
55011: PUSH
55012: LD_VAR 0 2
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: PUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_VAR 0 2
55034: PUSH
55035: LD_INT 4
55037: MINUS
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: PUSH
55047: LD_VAR 0 1
55051: PUSH
55052: LD_INT 3
55054: MINUS
55055: PUSH
55056: LD_VAR 0 2
55060: PUSH
55061: LD_INT 3
55063: MINUS
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: ST_TO_ADDR
// end ; 4 :
55080: GO 55361
55082: LD_INT 4
55084: DOUBLE
55085: EQUAL
55086: IFTRUE 55090
55088: GO 55223
55090: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55091: LD_ADDR_VAR 0 5
55095: PUSH
55096: LD_VAR 0 1
55100: PUSH
55101: LD_VAR 0 2
55105: PUSH
55106: LD_INT 4
55108: PLUS
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: LIST
55117: PUSH
55118: LD_VAR 0 1
55122: PUSH
55123: LD_INT 3
55125: PLUS
55126: PUSH
55127: LD_VAR 0 2
55131: PUSH
55132: LD_INT 3
55134: PLUS
55135: PUSH
55136: LD_INT 5
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: PUSH
55144: LD_VAR 0 1
55148: PUSH
55149: LD_INT 4
55151: PLUS
55152: PUSH
55153: LD_VAR 0 2
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: LIST
55165: PUSH
55166: LD_VAR 0 1
55170: PUSH
55171: LD_VAR 0 2
55175: PUSH
55176: LD_INT 3
55178: MINUS
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: PUSH
55188: LD_VAR 0 1
55192: PUSH
55193: LD_INT 4
55195: MINUS
55196: PUSH
55197: LD_VAR 0 2
55201: PUSH
55202: LD_INT 4
55204: MINUS
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// end ; 5 :
55221: GO 55361
55223: LD_INT 5
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55231
55229: GO 55360
55231: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55232: LD_ADDR_VAR 0 5
55236: PUSH
55237: LD_VAR 0 1
55241: PUSH
55242: LD_INT 4
55244: MINUS
55245: PUSH
55246: LD_VAR 0 2
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: PUSH
55259: LD_VAR 0 1
55263: PUSH
55264: LD_VAR 0 2
55268: PUSH
55269: LD_INT 4
55271: MINUS
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: PUSH
55281: LD_VAR 0 1
55285: PUSH
55286: LD_INT 4
55288: PLUS
55289: PUSH
55290: LD_VAR 0 2
55294: PUSH
55295: LD_INT 4
55297: PLUS
55298: PUSH
55299: LD_INT 5
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: PUSH
55307: LD_VAR 0 1
55311: PUSH
55312: LD_INT 3
55314: PLUS
55315: PUSH
55316: LD_VAR 0 2
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: PUSH
55329: LD_VAR 0 1
55333: PUSH
55334: LD_VAR 0 2
55338: PUSH
55339: LD_INT 3
55341: PLUS
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// end ; end ;
55358: GO 55361
55360: POP
// result := list ;
55361: LD_ADDR_VAR 0 4
55365: PUSH
55366: LD_VAR 0 5
55370: ST_TO_ADDR
// end ;
55371: LD_VAR 0 4
55375: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55376: LD_INT 0
55378: PPUSH
55379: PPUSH
55380: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55381: LD_VAR 0 1
55385: NOT
55386: PUSH
55387: LD_VAR 0 2
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: IN
55410: NOT
55411: OR
55412: IFFALSE 55416
// exit ;
55414: GO 55508
// tmp := [ ] ;
55416: LD_ADDR_VAR 0 5
55420: PUSH
55421: EMPTY
55422: ST_TO_ADDR
// for i in units do
55423: LD_ADDR_VAR 0 4
55427: PUSH
55428: LD_VAR 0 1
55432: PUSH
55433: FOR_IN
55434: IFFALSE 55477
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55436: LD_ADDR_VAR 0 5
55440: PUSH
55441: LD_VAR 0 5
55445: PPUSH
55446: LD_VAR 0 5
55450: PUSH
55451: LD_INT 1
55453: PLUS
55454: PPUSH
55455: LD_VAR 0 4
55459: PPUSH
55460: LD_VAR 0 2
55464: PPUSH
55465: CALL_OW 259
55469: PPUSH
55470: CALL_OW 2
55474: ST_TO_ADDR
55475: GO 55433
55477: POP
55478: POP
// if not tmp then
55479: LD_VAR 0 5
55483: NOT
55484: IFFALSE 55488
// exit ;
55486: GO 55508
// result := SortListByListDesc ( units , tmp ) ;
55488: LD_ADDR_VAR 0 3
55492: PUSH
55493: LD_VAR 0 1
55497: PPUSH
55498: LD_VAR 0 5
55502: PPUSH
55503: CALL_OW 77
55507: ST_TO_ADDR
// end ;
55508: LD_VAR 0 3
55512: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55513: LD_INT 0
55515: PPUSH
55516: PPUSH
55517: PPUSH
// result := false ;
55518: LD_ADDR_VAR 0 3
55522: PUSH
55523: LD_INT 0
55525: ST_TO_ADDR
// x := GetX ( building ) ;
55526: LD_ADDR_VAR 0 4
55530: PUSH
55531: LD_VAR 0 2
55535: PPUSH
55536: CALL_OW 250
55540: ST_TO_ADDR
// y := GetY ( building ) ;
55541: LD_ADDR_VAR 0 5
55545: PUSH
55546: LD_VAR 0 2
55550: PPUSH
55551: CALL_OW 251
55555: ST_TO_ADDR
// if not building or not x or not y then
55556: LD_VAR 0 2
55560: NOT
55561: PUSH
55562: LD_VAR 0 4
55566: NOT
55567: OR
55568: PUSH
55569: LD_VAR 0 5
55573: NOT
55574: OR
55575: IFFALSE 55579
// exit ;
55577: GO 55671
// if GetTaskList ( unit ) then
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 437
55588: IFFALSE 55671
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55590: LD_STRING e
55592: PUSH
55593: LD_VAR 0 1
55597: PPUSH
55598: CALL_OW 437
55602: PUSH
55603: LD_INT 1
55605: ARRAY
55606: PUSH
55607: LD_INT 1
55609: ARRAY
55610: EQUAL
55611: PUSH
55612: LD_VAR 0 4
55616: PUSH
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 437
55626: PUSH
55627: LD_INT 1
55629: ARRAY
55630: PUSH
55631: LD_INT 2
55633: ARRAY
55634: EQUAL
55635: AND
55636: PUSH
55637: LD_VAR 0 5
55641: PUSH
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 437
55651: PUSH
55652: LD_INT 1
55654: ARRAY
55655: PUSH
55656: LD_INT 3
55658: ARRAY
55659: EQUAL
55660: AND
55661: IFFALSE 55671
// result := true end ;
55663: LD_ADDR_VAR 0 3
55667: PUSH
55668: LD_INT 1
55670: ST_TO_ADDR
// end ;
55671: LD_VAR 0 3
55675: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55676: LD_INT 0
55678: PPUSH
// result := false ;
55679: LD_ADDR_VAR 0 4
55683: PUSH
55684: LD_INT 0
55686: ST_TO_ADDR
// if GetTaskList ( unit ) then
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 437
55696: IFFALSE 55779
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55698: LD_STRING M
55700: PUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 437
55710: PUSH
55711: LD_INT 1
55713: ARRAY
55714: PUSH
55715: LD_INT 1
55717: ARRAY
55718: EQUAL
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: LD_VAR 0 1
55729: PPUSH
55730: CALL_OW 437
55734: PUSH
55735: LD_INT 1
55737: ARRAY
55738: PUSH
55739: LD_INT 2
55741: ARRAY
55742: EQUAL
55743: AND
55744: PUSH
55745: LD_VAR 0 3
55749: PUSH
55750: LD_VAR 0 1
55754: PPUSH
55755: CALL_OW 437
55759: PUSH
55760: LD_INT 1
55762: ARRAY
55763: PUSH
55764: LD_INT 3
55766: ARRAY
55767: EQUAL
55768: AND
55769: IFFALSE 55779
// result := true ;
55771: LD_ADDR_VAR 0 4
55775: PUSH
55776: LD_INT 1
55778: ST_TO_ADDR
// end ; end ;
55779: LD_VAR 0 4
55783: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55784: LD_INT 0
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
// if not unit or not area then
55790: LD_VAR 0 1
55794: NOT
55795: PUSH
55796: LD_VAR 0 2
55800: NOT
55801: OR
55802: IFFALSE 55806
// exit ;
55804: GO 55970
// tmp := AreaToList ( area , i ) ;
55806: LD_ADDR_VAR 0 6
55810: PUSH
55811: LD_VAR 0 2
55815: PPUSH
55816: LD_VAR 0 5
55820: PPUSH
55821: CALL_OW 517
55825: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55826: LD_ADDR_VAR 0 5
55830: PUSH
55831: DOUBLE
55832: LD_INT 1
55834: DEC
55835: ST_TO_ADDR
55836: LD_VAR 0 6
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: PUSH
55845: FOR_TO
55846: IFFALSE 55968
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55848: LD_ADDR_VAR 0 7
55852: PUSH
55853: LD_VAR 0 6
55857: PUSH
55858: LD_INT 1
55860: ARRAY
55861: PUSH
55862: LD_VAR 0 5
55866: ARRAY
55867: PUSH
55868: LD_VAR 0 6
55872: PUSH
55873: LD_INT 2
55875: ARRAY
55876: PUSH
55877: LD_VAR 0 5
55881: ARRAY
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55887: LD_VAR 0 7
55891: PUSH
55892: LD_INT 1
55894: ARRAY
55895: PPUSH
55896: LD_VAR 0 7
55900: PUSH
55901: LD_INT 2
55903: ARRAY
55904: PPUSH
55905: CALL_OW 428
55909: PUSH
55910: LD_INT 0
55912: EQUAL
55913: IFFALSE 55966
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55915: LD_VAR 0 1
55919: PPUSH
55920: LD_VAR 0 7
55924: PUSH
55925: LD_INT 1
55927: ARRAY
55928: PPUSH
55929: LD_VAR 0 7
55933: PUSH
55934: LD_INT 2
55936: ARRAY
55937: PPUSH
55938: LD_VAR 0 3
55942: PPUSH
55943: CALL_OW 48
// result := IsPlaced ( unit ) ;
55947: LD_ADDR_VAR 0 4
55951: PUSH
55952: LD_VAR 0 1
55956: PPUSH
55957: CALL_OW 305
55961: ST_TO_ADDR
// exit ;
55962: POP
55963: POP
55964: GO 55970
// end ; end ;
55966: GO 55845
55968: POP
55969: POP
// end ;
55970: LD_VAR 0 4
55974: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55975: LD_INT 0
55977: PPUSH
55978: PPUSH
55979: PPUSH
// if not side or side > 8 then
55980: LD_VAR 0 1
55984: NOT
55985: PUSH
55986: LD_VAR 0 1
55990: PUSH
55991: LD_INT 8
55993: GREATER
55994: OR
55995: IFFALSE 55999
// exit ;
55997: GO 56186
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55999: LD_ADDR_VAR 0 4
56003: PUSH
56004: LD_INT 22
56006: PUSH
56007: LD_VAR 0 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 21
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PPUSH
56030: CALL_OW 69
56034: ST_TO_ADDR
// if not tmp then
56035: LD_VAR 0 4
56039: NOT
56040: IFFALSE 56044
// exit ;
56042: GO 56186
// enable_addtolog := true ;
56044: LD_ADDR_OWVAR 81
56048: PUSH
56049: LD_INT 1
56051: ST_TO_ADDR
// AddToLog ( [ ) ;
56052: LD_STRING [
56054: PPUSH
56055: CALL_OW 561
// for i in tmp do
56059: LD_ADDR_VAR 0 3
56063: PUSH
56064: LD_VAR 0 4
56068: PUSH
56069: FOR_IN
56070: IFFALSE 56177
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56072: LD_STRING [
56074: PUSH
56075: LD_VAR 0 3
56079: PPUSH
56080: CALL_OW 266
56084: STR
56085: PUSH
56086: LD_STRING , 
56088: STR
56089: PUSH
56090: LD_VAR 0 3
56094: PPUSH
56095: CALL_OW 250
56099: STR
56100: PUSH
56101: LD_STRING , 
56103: STR
56104: PUSH
56105: LD_VAR 0 3
56109: PPUSH
56110: CALL_OW 251
56114: STR
56115: PUSH
56116: LD_STRING , 
56118: STR
56119: PUSH
56120: LD_VAR 0 3
56124: PPUSH
56125: CALL_OW 254
56129: STR
56130: PUSH
56131: LD_STRING , 
56133: STR
56134: PUSH
56135: LD_VAR 0 3
56139: PPUSH
56140: LD_INT 1
56142: PPUSH
56143: CALL_OW 268
56147: STR
56148: PUSH
56149: LD_STRING , 
56151: STR
56152: PUSH
56153: LD_VAR 0 3
56157: PPUSH
56158: LD_INT 2
56160: PPUSH
56161: CALL_OW 268
56165: STR
56166: PUSH
56167: LD_STRING ],
56169: STR
56170: PPUSH
56171: CALL_OW 561
// end ;
56175: GO 56069
56177: POP
56178: POP
// AddToLog ( ]; ) ;
56179: LD_STRING ];
56181: PPUSH
56182: CALL_OW 561
// end ;
56186: LD_VAR 0 2
56190: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56191: LD_INT 0
56193: PPUSH
56194: PPUSH
56195: PPUSH
56196: PPUSH
56197: PPUSH
// if not area or not rate or not max then
56198: LD_VAR 0 1
56202: NOT
56203: PUSH
56204: LD_VAR 0 2
56208: NOT
56209: OR
56210: PUSH
56211: LD_VAR 0 4
56215: NOT
56216: OR
56217: IFFALSE 56221
// exit ;
56219: GO 56413
// while 1 do
56221: LD_INT 1
56223: IFFALSE 56413
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56225: LD_ADDR_VAR 0 9
56229: PUSH
56230: LD_VAR 0 1
56234: PPUSH
56235: LD_INT 1
56237: PPUSH
56238: CALL_OW 287
56242: PUSH
56243: LD_INT 10
56245: MUL
56246: ST_TO_ADDR
// r := rate / 10 ;
56247: LD_ADDR_VAR 0 7
56251: PUSH
56252: LD_VAR 0 2
56256: PUSH
56257: LD_INT 10
56259: DIVREAL
56260: ST_TO_ADDR
// time := 1 1$00 ;
56261: LD_ADDR_VAR 0 8
56265: PUSH
56266: LD_INT 2100
56268: ST_TO_ADDR
// if amount < min then
56269: LD_VAR 0 9
56273: PUSH
56274: LD_VAR 0 3
56278: LESS
56279: IFFALSE 56297
// r := r * 2 else
56281: LD_ADDR_VAR 0 7
56285: PUSH
56286: LD_VAR 0 7
56290: PUSH
56291: LD_INT 2
56293: MUL
56294: ST_TO_ADDR
56295: GO 56323
// if amount > max then
56297: LD_VAR 0 9
56301: PUSH
56302: LD_VAR 0 4
56306: GREATER
56307: IFFALSE 56323
// r := r / 2 ;
56309: LD_ADDR_VAR 0 7
56313: PUSH
56314: LD_VAR 0 7
56318: PUSH
56319: LD_INT 2
56321: DIVREAL
56322: ST_TO_ADDR
// time := time / r ;
56323: LD_ADDR_VAR 0 8
56327: PUSH
56328: LD_VAR 0 8
56332: PUSH
56333: LD_VAR 0 7
56337: DIVREAL
56338: ST_TO_ADDR
// if time < 0 then
56339: LD_VAR 0 8
56343: PUSH
56344: LD_INT 0
56346: LESS
56347: IFFALSE 56364
// time := time * - 1 ;
56349: LD_ADDR_VAR 0 8
56353: PUSH
56354: LD_VAR 0 8
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: MUL
56363: ST_TO_ADDR
// wait ( time ) ;
56364: LD_VAR 0 8
56368: PPUSH
56369: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56373: LD_INT 35
56375: PPUSH
56376: LD_INT 875
56378: PPUSH
56379: CALL_OW 12
56383: PPUSH
56384: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56388: LD_INT 1
56390: PPUSH
56391: LD_INT 5
56393: PPUSH
56394: CALL_OW 12
56398: PPUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: LD_INT 1
56406: PPUSH
56407: CALL_OW 55
// end ;
56411: GO 56221
// end ;
56413: LD_VAR 0 5
56417: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56418: LD_INT 0
56420: PPUSH
56421: PPUSH
56422: PPUSH
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
// if not turrets or not factories then
56428: LD_VAR 0 1
56432: NOT
56433: PUSH
56434: LD_VAR 0 2
56438: NOT
56439: OR
56440: IFFALSE 56444
// exit ;
56442: GO 56751
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56444: LD_ADDR_VAR 0 10
56448: PUSH
56449: LD_INT 5
56451: PUSH
56452: LD_INT 6
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 4
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: LD_INT 5
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 24
56486: PUSH
56487: LD_INT 25
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 23
56496: PUSH
56497: LD_INT 27
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 42
56510: PUSH
56511: LD_INT 43
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 44
56520: PUSH
56521: LD_INT 46
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 45
56530: PUSH
56531: LD_INT 47
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// result := [ ] ;
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: EMPTY
56554: ST_TO_ADDR
// for i in turrets do
56555: LD_ADDR_VAR 0 4
56559: PUSH
56560: LD_VAR 0 1
56564: PUSH
56565: FOR_IN
56566: IFFALSE 56749
// begin nat := GetNation ( i ) ;
56568: LD_ADDR_VAR 0 7
56572: PUSH
56573: LD_VAR 0 4
56577: PPUSH
56578: CALL_OW 248
56582: ST_TO_ADDR
// weapon := 0 ;
56583: LD_ADDR_VAR 0 8
56587: PUSH
56588: LD_INT 0
56590: ST_TO_ADDR
// if not nat then
56591: LD_VAR 0 7
56595: NOT
56596: IFFALSE 56600
// continue ;
56598: GO 56565
// for j in list [ nat ] do
56600: LD_ADDR_VAR 0 5
56604: PUSH
56605: LD_VAR 0 10
56609: PUSH
56610: LD_VAR 0 7
56614: ARRAY
56615: PUSH
56616: FOR_IN
56617: IFFALSE 56658
// if GetBWeapon ( i ) = j [ 1 ] then
56619: LD_VAR 0 4
56623: PPUSH
56624: CALL_OW 269
56628: PUSH
56629: LD_VAR 0 5
56633: PUSH
56634: LD_INT 1
56636: ARRAY
56637: EQUAL
56638: IFFALSE 56656
// begin weapon := j [ 2 ] ;
56640: LD_ADDR_VAR 0 8
56644: PUSH
56645: LD_VAR 0 5
56649: PUSH
56650: LD_INT 2
56652: ARRAY
56653: ST_TO_ADDR
// break ;
56654: GO 56658
// end ;
56656: GO 56616
56658: POP
56659: POP
// if not weapon then
56660: LD_VAR 0 8
56664: NOT
56665: IFFALSE 56669
// continue ;
56667: GO 56565
// for k in factories do
56669: LD_ADDR_VAR 0 6
56673: PUSH
56674: LD_VAR 0 2
56678: PUSH
56679: FOR_IN
56680: IFFALSE 56745
// begin weapons := AvailableWeaponList ( k ) ;
56682: LD_ADDR_VAR 0 9
56686: PUSH
56687: LD_VAR 0 6
56691: PPUSH
56692: CALL_OW 478
56696: ST_TO_ADDR
// if not weapons then
56697: LD_VAR 0 9
56701: NOT
56702: IFFALSE 56706
// continue ;
56704: GO 56679
// if weapon in weapons then
56706: LD_VAR 0 8
56710: PUSH
56711: LD_VAR 0 9
56715: IN
56716: IFFALSE 56743
// begin result := [ i , weapon ] ;
56718: LD_ADDR_VAR 0 3
56722: PUSH
56723: LD_VAR 0 4
56727: PUSH
56728: LD_VAR 0 8
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// exit ;
56737: POP
56738: POP
56739: POP
56740: POP
56741: GO 56751
// end ; end ;
56743: GO 56679
56745: POP
56746: POP
// end ;
56747: GO 56565
56749: POP
56750: POP
// end ;
56751: LD_VAR 0 3
56755: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56756: LD_INT 0
56758: PPUSH
// if not side or side > 8 then
56759: LD_VAR 0 3
56763: NOT
56764: PUSH
56765: LD_VAR 0 3
56769: PUSH
56770: LD_INT 8
56772: GREATER
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 56837
// if not range then
56778: LD_VAR 0 4
56782: NOT
56783: IFFALSE 56794
// range := - 12 ;
56785: LD_ADDR_VAR 0 4
56789: PUSH
56790: LD_INT 12
56792: NEG
56793: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56794: LD_VAR 0 1
56798: PPUSH
56799: LD_VAR 0 2
56803: PPUSH
56804: LD_VAR 0 3
56808: PPUSH
56809: LD_VAR 0 4
56813: PPUSH
56814: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56818: LD_VAR 0 1
56822: PPUSH
56823: LD_VAR 0 2
56827: PPUSH
56828: LD_VAR 0 3
56832: PPUSH
56833: CALL_OW 331
// end ;
56837: LD_VAR 0 5
56841: RET
// export function Video ( mode ) ; begin
56842: LD_INT 0
56844: PPUSH
// ingame_video = mode ;
56845: LD_ADDR_OWVAR 52
56849: PUSH
56850: LD_VAR 0 1
56854: ST_TO_ADDR
// interface_hidden = mode ;
56855: LD_ADDR_OWVAR 54
56859: PUSH
56860: LD_VAR 0 1
56864: ST_TO_ADDR
// end ;
56865: LD_VAR 0 2
56869: RET
// export function Join ( array , element ) ; begin
56870: LD_INT 0
56872: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56873: LD_ADDR_VAR 0 3
56877: PUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: LD_VAR 0 1
56887: PUSH
56888: LD_INT 1
56890: PLUS
56891: PPUSH
56892: LD_VAR 0 2
56896: PPUSH
56897: CALL_OW 1
56901: ST_TO_ADDR
// end ;
56902: LD_VAR 0 3
56906: RET
// export function JoinUnion ( array , element ) ; begin
56907: LD_INT 0
56909: PPUSH
// result := array union element ;
56910: LD_ADDR_VAR 0 3
56914: PUSH
56915: LD_VAR 0 1
56919: PUSH
56920: LD_VAR 0 2
56924: UNION
56925: ST_TO_ADDR
// end ;
56926: LD_VAR 0 3
56930: RET
// export function GetBehemoths ( side ) ; begin
56931: LD_INT 0
56933: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56934: LD_ADDR_VAR 0 2
56938: PUSH
56939: LD_INT 22
56941: PUSH
56942: LD_VAR 0 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 31
56953: PUSH
56954: LD_INT 25
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PPUSH
56965: CALL_OW 69
56969: ST_TO_ADDR
// end ;
56970: LD_VAR 0 2
56974: RET
// export function Shuffle ( array ) ; var i , index ; begin
56975: LD_INT 0
56977: PPUSH
56978: PPUSH
56979: PPUSH
// result := [ ] ;
56980: LD_ADDR_VAR 0 2
56984: PUSH
56985: EMPTY
56986: ST_TO_ADDR
// if not array then
56987: LD_VAR 0 1
56991: NOT
56992: IFFALSE 56996
// exit ;
56994: GO 57095
// Randomize ;
56996: CALL_OW 10
// for i = array downto 1 do
57000: LD_ADDR_VAR 0 3
57004: PUSH
57005: DOUBLE
57006: LD_VAR 0 1
57010: INC
57011: ST_TO_ADDR
57012: LD_INT 1
57014: PUSH
57015: FOR_DOWNTO
57016: IFFALSE 57093
// begin index := rand ( 1 , array ) ;
57018: LD_ADDR_VAR 0 4
57022: PUSH
57023: LD_INT 1
57025: PPUSH
57026: LD_VAR 0 1
57030: PPUSH
57031: CALL_OW 12
57035: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57036: LD_ADDR_VAR 0 2
57040: PUSH
57041: LD_VAR 0 2
57045: PPUSH
57046: LD_VAR 0 2
57050: PUSH
57051: LD_INT 1
57053: PLUS
57054: PPUSH
57055: LD_VAR 0 1
57059: PUSH
57060: LD_VAR 0 4
57064: ARRAY
57065: PPUSH
57066: CALL_OW 2
57070: ST_TO_ADDR
// array := Delete ( array , index ) ;
57071: LD_ADDR_VAR 0 1
57075: PUSH
57076: LD_VAR 0 1
57080: PPUSH
57081: LD_VAR 0 4
57085: PPUSH
57086: CALL_OW 3
57090: ST_TO_ADDR
// end ;
57091: GO 57015
57093: POP
57094: POP
// end ;
57095: LD_VAR 0 2
57099: RET
// export function GetBaseMaterials ( base ) ; begin
57100: LD_INT 0
57102: PPUSH
// result := [ 0 , 0 , 0 ] ;
57103: LD_ADDR_VAR 0 2
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// if not base then
57122: LD_VAR 0 1
57126: NOT
57127: IFFALSE 57131
// exit ;
57129: GO 57180
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57131: LD_ADDR_VAR 0 2
57135: PUSH
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_INT 1
57143: PPUSH
57144: CALL_OW 275
57148: PUSH
57149: LD_VAR 0 1
57153: PPUSH
57154: LD_INT 2
57156: PPUSH
57157: CALL_OW 275
57161: PUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: LD_INT 3
57169: PPUSH
57170: CALL_OW 275
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// end ;
57180: LD_VAR 0 2
57184: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57185: LD_INT 0
57187: PPUSH
57188: PPUSH
// result := array ;
57189: LD_ADDR_VAR 0 3
57193: PUSH
57194: LD_VAR 0 1
57198: ST_TO_ADDR
// if size > 0 then
57199: LD_VAR 0 2
57203: PUSH
57204: LD_INT 0
57206: GREATER
57207: IFFALSE 57253
// for i := array downto size do
57209: LD_ADDR_VAR 0 4
57213: PUSH
57214: DOUBLE
57215: LD_VAR 0 1
57219: INC
57220: ST_TO_ADDR
57221: LD_VAR 0 2
57225: PUSH
57226: FOR_DOWNTO
57227: IFFALSE 57251
// result := Delete ( result , result ) ;
57229: LD_ADDR_VAR 0 3
57233: PUSH
57234: LD_VAR 0 3
57238: PPUSH
57239: LD_VAR 0 3
57243: PPUSH
57244: CALL_OW 3
57248: ST_TO_ADDR
57249: GO 57226
57251: POP
57252: POP
// end ;
57253: LD_VAR 0 3
57257: RET
// export function ComExit ( unit ) ; var tmp ; begin
57258: LD_INT 0
57260: PPUSH
57261: PPUSH
// if not IsInUnit ( unit ) then
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 310
57271: NOT
57272: IFFALSE 57276
// exit ;
57274: GO 57336
// tmp := IsInUnit ( unit ) ;
57276: LD_ADDR_VAR 0 3
57280: PUSH
57281: LD_VAR 0 1
57285: PPUSH
57286: CALL_OW 310
57290: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57291: LD_VAR 0 3
57295: PPUSH
57296: CALL_OW 247
57300: PUSH
57301: LD_INT 2
57303: EQUAL
57304: IFFALSE 57317
// ComExitVehicle ( unit ) else
57306: LD_VAR 0 1
57310: PPUSH
57311: CALL_OW 121
57315: GO 57326
// ComExitBuilding ( unit ) ;
57317: LD_VAR 0 1
57321: PPUSH
57322: CALL_OW 122
// result := tmp ;
57326: LD_ADDR_VAR 0 2
57330: PUSH
57331: LD_VAR 0 3
57335: ST_TO_ADDR
// end ;
57336: LD_VAR 0 2
57340: RET
// export function ResetHc ; begin
57341: LD_INT 0
57343: PPUSH
// InitHc ;
57344: CALL_OW 19
// hc_importance := 0 ;
57348: LD_ADDR_OWVAR 32
57352: PUSH
57353: LD_INT 0
57355: ST_TO_ADDR
// end ;
57356: LD_VAR 0 1
57360: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57361: LD_INT 0
57363: PPUSH
57364: PPUSH
57365: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57366: LD_ADDR_VAR 0 6
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_VAR 0 3
57380: PLUS
57381: PUSH
57382: LD_INT 2
57384: DIV
57385: ST_TO_ADDR
// if _x < 0 then
57386: LD_VAR 0 6
57390: PUSH
57391: LD_INT 0
57393: LESS
57394: IFFALSE 57411
// _x := _x * - 1 ;
57396: LD_ADDR_VAR 0 6
57400: PUSH
57401: LD_VAR 0 6
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: MUL
57410: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57411: LD_ADDR_VAR 0 7
57415: PUSH
57416: LD_VAR 0 2
57420: PUSH
57421: LD_VAR 0 4
57425: PLUS
57426: PUSH
57427: LD_INT 2
57429: DIV
57430: ST_TO_ADDR
// if _y < 0 then
57431: LD_VAR 0 7
57435: PUSH
57436: LD_INT 0
57438: LESS
57439: IFFALSE 57456
// _y := _y * - 1 ;
57441: LD_ADDR_VAR 0 7
57445: PUSH
57446: LD_VAR 0 7
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: MUL
57455: ST_TO_ADDR
// result := [ _x , _y ] ;
57456: LD_ADDR_VAR 0 5
57460: PUSH
57461: LD_VAR 0 6
57465: PUSH
57466: LD_VAR 0 7
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// end ;
57475: LD_VAR 0 5
57479: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57480: LD_INT 0
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
// task := GetTaskList ( unit ) ;
57486: LD_ADDR_VAR 0 7
57490: PUSH
57491: LD_VAR 0 1
57495: PPUSH
57496: CALL_OW 437
57500: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57501: LD_VAR 0 7
57505: NOT
57506: PUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: LD_VAR 0 2
57516: PPUSH
57517: CALL_OW 308
57521: NOT
57522: AND
57523: IFFALSE 57527
// exit ;
57525: GO 57645
// if IsInArea ( unit , area ) then
57527: LD_VAR 0 1
57531: PPUSH
57532: LD_VAR 0 2
57536: PPUSH
57537: CALL_OW 308
57541: IFFALSE 57559
// begin ComMoveToArea ( unit , goAway ) ;
57543: LD_VAR 0 1
57547: PPUSH
57548: LD_VAR 0 3
57552: PPUSH
57553: CALL_OW 113
// exit ;
57557: GO 57645
// end ; if task [ 1 ] [ 1 ] <> M then
57559: LD_VAR 0 7
57563: PUSH
57564: LD_INT 1
57566: ARRAY
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: PUSH
57572: LD_STRING M
57574: NONEQUAL
57575: IFFALSE 57579
// exit ;
57577: GO 57645
// x := task [ 1 ] [ 2 ] ;
57579: LD_ADDR_VAR 0 5
57583: PUSH
57584: LD_VAR 0 7
57588: PUSH
57589: LD_INT 1
57591: ARRAY
57592: PUSH
57593: LD_INT 2
57595: ARRAY
57596: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57597: LD_ADDR_VAR 0 6
57601: PUSH
57602: LD_VAR 0 7
57606: PUSH
57607: LD_INT 1
57609: ARRAY
57610: PUSH
57611: LD_INT 3
57613: ARRAY
57614: ST_TO_ADDR
// if InArea ( x , y , area ) then
57615: LD_VAR 0 5
57619: PPUSH
57620: LD_VAR 0 6
57624: PPUSH
57625: LD_VAR 0 2
57629: PPUSH
57630: CALL_OW 309
57634: IFFALSE 57645
// ComStop ( unit ) ;
57636: LD_VAR 0 1
57640: PPUSH
57641: CALL_OW 141
// end ;
57645: LD_VAR 0 4
57649: RET
// export function Abs ( value ) ; begin
57650: LD_INT 0
57652: PPUSH
// result := value ;
57653: LD_ADDR_VAR 0 2
57657: PUSH
57658: LD_VAR 0 1
57662: ST_TO_ADDR
// if value < 0 then
57663: LD_VAR 0 1
57667: PUSH
57668: LD_INT 0
57670: LESS
57671: IFFALSE 57688
// result := value * - 1 ;
57673: LD_ADDR_VAR 0 2
57677: PUSH
57678: LD_VAR 0 1
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: MUL
57687: ST_TO_ADDR
// end ;
57688: LD_VAR 0 2
57692: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57693: LD_INT 0
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
// if not unit or not building then
57703: LD_VAR 0 1
57707: NOT
57708: PUSH
57709: LD_VAR 0 2
57713: NOT
57714: OR
57715: IFFALSE 57719
// exit ;
57717: GO 57945
// x := GetX ( building ) ;
57719: LD_ADDR_VAR 0 4
57723: PUSH
57724: LD_VAR 0 2
57728: PPUSH
57729: CALL_OW 250
57733: ST_TO_ADDR
// y := GetY ( building ) ;
57734: LD_ADDR_VAR 0 6
57738: PUSH
57739: LD_VAR 0 2
57743: PPUSH
57744: CALL_OW 251
57748: ST_TO_ADDR
// d := GetDir ( building ) ;
57749: LD_ADDR_VAR 0 8
57753: PUSH
57754: LD_VAR 0 2
57758: PPUSH
57759: CALL_OW 254
57763: ST_TO_ADDR
// r := 4 ;
57764: LD_ADDR_VAR 0 9
57768: PUSH
57769: LD_INT 4
57771: ST_TO_ADDR
// for i := 1 to 5 do
57772: LD_ADDR_VAR 0 10
57776: PUSH
57777: DOUBLE
57778: LD_INT 1
57780: DEC
57781: ST_TO_ADDR
57782: LD_INT 5
57784: PUSH
57785: FOR_TO
57786: IFFALSE 57943
// begin _x := ShiftX ( x , d , r + i ) ;
57788: LD_ADDR_VAR 0 5
57792: PUSH
57793: LD_VAR 0 4
57797: PPUSH
57798: LD_VAR 0 8
57802: PPUSH
57803: LD_VAR 0 9
57807: PUSH
57808: LD_VAR 0 10
57812: PLUS
57813: PPUSH
57814: CALL_OW 272
57818: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57819: LD_ADDR_VAR 0 7
57823: PUSH
57824: LD_VAR 0 6
57828: PPUSH
57829: LD_VAR 0 8
57833: PPUSH
57834: LD_VAR 0 9
57838: PUSH
57839: LD_VAR 0 10
57843: PLUS
57844: PPUSH
57845: CALL_OW 273
57849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57850: LD_VAR 0 5
57854: PPUSH
57855: LD_VAR 0 7
57859: PPUSH
57860: CALL_OW 488
57864: PUSH
57865: LD_VAR 0 5
57869: PPUSH
57870: LD_VAR 0 7
57874: PPUSH
57875: CALL_OW 428
57879: PPUSH
57880: CALL_OW 247
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: IN
57895: NOT
57896: AND
57897: IFFALSE 57941
// begin ComMoveXY ( unit , _x , _y ) ;
57899: LD_VAR 0 1
57903: PPUSH
57904: LD_VAR 0 5
57908: PPUSH
57909: LD_VAR 0 7
57913: PPUSH
57914: CALL_OW 111
// result := [ _x , _y ] ;
57918: LD_ADDR_VAR 0 3
57922: PUSH
57923: LD_VAR 0 5
57927: PUSH
57928: LD_VAR 0 7
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: ST_TO_ADDR
// exit ;
57937: POP
57938: POP
57939: GO 57945
// end ; end ;
57941: GO 57785
57943: POP
57944: POP
// end ;
57945: LD_VAR 0 3
57949: RET
