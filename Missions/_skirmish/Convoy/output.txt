// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7714: LD_INT 0
7716: PPUSH
// if p2 = 100 then
7717: LD_VAR 0 2
7721: PUSH
7722: LD_INT 100
7724: EQUAL
7725: IFFALSE 8728
// begin if not StreamModeActive then
7727: LD_EXP 19
7731: NOT
7732: IFFALSE 7742
// StreamModeActive := true ;
7734: LD_ADDR_EXP 19
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// if p3 = 0 then
7742: LD_VAR 0 3
7746: PUSH
7747: LD_INT 0
7749: EQUAL
7750: IFFALSE 7756
// InitStreamMode ;
7752: CALL 8888 0 0
// if p3 = 1 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 1
7763: EQUAL
7764: IFFALSE 7774
// sRocket := true ;
7766: LD_ADDR_EXP 24
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 2 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 2
7781: EQUAL
7782: IFFALSE 7792
// sSpeed := true ;
7784: LD_ADDR_EXP 23
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 3 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: IFFALSE 7810
// sEngine := true ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 4 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 4
7817: EQUAL
7818: IFFALSE 7828
// sSpec := true ;
7820: LD_ADDR_EXP 22
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 5 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 5
7835: EQUAL
7836: IFFALSE 7846
// sLevel := true ;
7838: LD_ADDR_EXP 26
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 6 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 6
7853: EQUAL
7854: IFFALSE 7864
// sArmoury := true ;
7856: LD_ADDR_EXP 27
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 7 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 7
7871: EQUAL
7872: IFFALSE 7882
// sRadar := true ;
7874: LD_ADDR_EXP 28
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 8 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 8
7889: EQUAL
7890: IFFALSE 7900
// sBunker := true ;
7892: LD_ADDR_EXP 29
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 9 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 9
7907: EQUAL
7908: IFFALSE 7918
// sHack := true ;
7910: LD_ADDR_EXP 30
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 10 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 10
7925: EQUAL
7926: IFFALSE 7936
// sFire := true ;
7928: LD_ADDR_EXP 31
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 11 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 11
7943: EQUAL
7944: IFFALSE 7954
// sRefresh := true ;
7946: LD_ADDR_EXP 32
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 12 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 12
7961: EQUAL
7962: IFFALSE 7972
// sExp := true ;
7964: LD_ADDR_EXP 33
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 13 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 13
7979: EQUAL
7980: IFFALSE 7990
// sDepot := true ;
7982: LD_ADDR_EXP 34
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 14 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 14
7997: EQUAL
7998: IFFALSE 8008
// sFlag := true ;
8000: LD_ADDR_EXP 35
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 15 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 15
8015: EQUAL
8016: IFFALSE 8026
// sKamikadze := true ;
8018: LD_ADDR_EXP 43
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 16 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 16
8033: EQUAL
8034: IFFALSE 8044
// sTroll := true ;
8036: LD_ADDR_EXP 44
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 17 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 17
8051: EQUAL
8052: IFFALSE 8062
// sSlow := true ;
8054: LD_ADDR_EXP 45
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 18 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 18
8069: EQUAL
8070: IFFALSE 8080
// sLack := true ;
8072: LD_ADDR_EXP 46
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 19 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 19
8087: EQUAL
8088: IFFALSE 8098
// sTank := true ;
8090: LD_ADDR_EXP 48
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 20 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 20
8105: EQUAL
8106: IFFALSE 8116
// sRemote := true ;
8108: LD_ADDR_EXP 49
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 21 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 21
8123: EQUAL
8124: IFFALSE 8134
// sPowell := true ;
8126: LD_ADDR_EXP 50
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 22 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 22
8141: EQUAL
8142: IFFALSE 8152
// sTeleport := true ;
8144: LD_ADDR_EXP 53
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 23 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 23
8159: EQUAL
8160: IFFALSE 8170
// sOilTower := true ;
8162: LD_ADDR_EXP 55
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 24 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 24
8177: EQUAL
8178: IFFALSE 8188
// sShovel := true ;
8180: LD_ADDR_EXP 56
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 25 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 25
8195: EQUAL
8196: IFFALSE 8206
// sSheik := true ;
8198: LD_ADDR_EXP 57
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 26 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 26
8213: EQUAL
8214: IFFALSE 8224
// sEarthquake := true ;
8216: LD_ADDR_EXP 59
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 27 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 27
8231: EQUAL
8232: IFFALSE 8242
// sAI := true ;
8234: LD_ADDR_EXP 60
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 28 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 28
8249: EQUAL
8250: IFFALSE 8260
// sCargo := true ;
8252: LD_ADDR_EXP 63
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 29 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 29
8267: EQUAL
8268: IFFALSE 8278
// sDLaser := true ;
8270: LD_ADDR_EXP 64
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 30 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 30
8285: EQUAL
8286: IFFALSE 8296
// sExchange := true ;
8288: LD_ADDR_EXP 65
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 31 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 31
8303: EQUAL
8304: IFFALSE 8314
// sFac := true ;
8306: LD_ADDR_EXP 66
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 32 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 32
8321: EQUAL
8322: IFFALSE 8332
// sPower := true ;
8324: LD_ADDR_EXP 67
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 33 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 33
8339: EQUAL
8340: IFFALSE 8350
// sRandom := true ;
8342: LD_ADDR_EXP 68
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 34 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 34
8357: EQUAL
8358: IFFALSE 8368
// sShield := true ;
8360: LD_ADDR_EXP 69
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 35 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 35
8375: EQUAL
8376: IFFALSE 8386
// sTime := true ;
8378: LD_ADDR_EXP 70
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 36 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 36
8393: EQUAL
8394: IFFALSE 8404
// sTools := true ;
8396: LD_ADDR_EXP 71
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 101 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 101
8411: EQUAL
8412: IFFALSE 8422
// sSold := true ;
8414: LD_ADDR_EXP 36
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 102 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 102
8429: EQUAL
8430: IFFALSE 8440
// sDiff := true ;
8432: LD_ADDR_EXP 37
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 103 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 103
8447: EQUAL
8448: IFFALSE 8458
// sFog := true ;
8450: LD_ADDR_EXP 40
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 104 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 104
8465: EQUAL
8466: IFFALSE 8476
// sReset := true ;
8468: LD_ADDR_EXP 41
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 105 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 105
8483: EQUAL
8484: IFFALSE 8494
// sSun := true ;
8486: LD_ADDR_EXP 42
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 106 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 106
8501: EQUAL
8502: IFFALSE 8512
// sTiger := true ;
8504: LD_ADDR_EXP 38
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 107 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 107
8519: EQUAL
8520: IFFALSE 8530
// sBomb := true ;
8522: LD_ADDR_EXP 39
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 108 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 108
8537: EQUAL
8538: IFFALSE 8548
// sWound := true ;
8540: LD_ADDR_EXP 47
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 109 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 109
8555: EQUAL
8556: IFFALSE 8566
// sBetray := true ;
8558: LD_ADDR_EXP 51
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 110 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 110
8573: EQUAL
8574: IFFALSE 8584
// sContamin := true ;
8576: LD_ADDR_EXP 52
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 111 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 111
8591: EQUAL
8592: IFFALSE 8602
// sOil := true ;
8594: LD_ADDR_EXP 54
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 112 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 112
8609: EQUAL
8610: IFFALSE 8620
// sStu := true ;
8612: LD_ADDR_EXP 58
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 113 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 113
8627: EQUAL
8628: IFFALSE 8638
// sBazooka := true ;
8630: LD_ADDR_EXP 61
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 114 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 114
8645: EQUAL
8646: IFFALSE 8656
// sMortar := true ;
8648: LD_ADDR_EXP 62
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 115 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 115
8663: EQUAL
8664: IFFALSE 8674
// sRanger := true ;
8666: LD_ADDR_EXP 72
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 116 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 116
8681: EQUAL
8682: IFFALSE 8692
// sComputer := true ;
8684: LD_ADDR_EXP 73
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 117 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 117
8699: EQUAL
8700: IFFALSE 8710
// s30 := true ;
8702: LD_ADDR_EXP 74
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 118 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 118
8717: EQUAL
8718: IFFALSE 8728
// s60 := true ;
8720: LD_ADDR_EXP 75
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// end ; if p2 = 101 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 101
8735: EQUAL
8736: IFFALSE 8864
// begin case p3 of 1 :
8738: LD_VAR 0 3
8742: PUSH
8743: LD_INT 1
8745: DOUBLE
8746: EQUAL
8747: IFTRUE 8751
8749: GO 8758
8751: POP
// hHackUnlimitedResources ; 2 :
8752: CALL 20460 0 0
8756: GO 8864
8758: LD_INT 2
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8773
8766: POP
// hHackSetLevel10 ; 3 :
8767: CALL 20593 0 0
8771: GO 8864
8773: LD_INT 3
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8788
8781: POP
// hHackSetLevel10YourUnits ; 4 :
8782: CALL 20678 0 0
8786: GO 8864
8788: LD_INT 4
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8803
8796: POP
// hHackInvincible ; 5 :
8797: CALL 21126 0 0
8801: GO 8864
8803: LD_INT 5
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 8818
8811: POP
// hHackInvisible ; 6 :
8812: CALL 21237 0 0
8816: GO 8864
8818: LD_INT 6
8820: DOUBLE
8821: EQUAL
8822: IFTRUE 8826
8824: GO 8833
8826: POP
// hHackChangeYourSide ; 7 :
8827: CALL 21294 0 0
8831: GO 8864
8833: LD_INT 7
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8848
8841: POP
// hHackChangeUnitSide ; 8 :
8842: CALL 21336 0 0
8846: GO 8864
8848: LD_INT 8
8850: DOUBLE
8851: EQUAL
8852: IFTRUE 8856
8854: GO 8863
8856: POP
// hHackFog ; end ;
8857: CALL 21437 0 0
8861: GO 8864
8863: POP
// end ; end ;
8864: LD_VAR 0 7
8868: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8869: GO 8871
8871: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8872: LD_STRING initStreamRollete();
8874: PPUSH
8875: CALL_OW 559
// InitStreamMode ;
8879: CALL 8888 0 0
// DefineStreamItems ( ) ;
8883: CALL 9352 0 0
// end ;
8887: END
// function InitStreamMode ; begin
8888: LD_INT 0
8890: PPUSH
// streamModeActive := false ;
8891: LD_ADDR_EXP 19
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// normalCounter := 36 ;
8899: LD_ADDR_EXP 20
8903: PUSH
8904: LD_INT 36
8906: ST_TO_ADDR
// hardcoreCounter := 16 ;
8907: LD_ADDR_EXP 21
8911: PUSH
8912: LD_INT 16
8914: ST_TO_ADDR
// sRocket := false ;
8915: LD_ADDR_EXP 24
8919: PUSH
8920: LD_INT 0
8922: ST_TO_ADDR
// sSpeed := false ;
8923: LD_ADDR_EXP 23
8927: PUSH
8928: LD_INT 0
8930: ST_TO_ADDR
// sEngine := false ;
8931: LD_ADDR_EXP 25
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// sSpec := false ;
8939: LD_ADDR_EXP 22
8943: PUSH
8944: LD_INT 0
8946: ST_TO_ADDR
// sLevel := false ;
8947: LD_ADDR_EXP 26
8951: PUSH
8952: LD_INT 0
8954: ST_TO_ADDR
// sArmoury := false ;
8955: LD_ADDR_EXP 27
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// sRadar := false ;
8963: LD_ADDR_EXP 28
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// sBunker := false ;
8971: LD_ADDR_EXP 29
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// sHack := false ;
8979: LD_ADDR_EXP 30
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// sFire := false ;
8987: LD_ADDR_EXP 31
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// sRefresh := false ;
8995: LD_ADDR_EXP 32
8999: PUSH
9000: LD_INT 0
9002: ST_TO_ADDR
// sExp := false ;
9003: LD_ADDR_EXP 33
9007: PUSH
9008: LD_INT 0
9010: ST_TO_ADDR
// sDepot := false ;
9011: LD_ADDR_EXP 34
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// sFlag := false ;
9019: LD_ADDR_EXP 35
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// sKamikadze := false ;
9027: LD_ADDR_EXP 43
9031: PUSH
9032: LD_INT 0
9034: ST_TO_ADDR
// sTroll := false ;
9035: LD_ADDR_EXP 44
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// sSlow := false ;
9043: LD_ADDR_EXP 45
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// sLack := false ;
9051: LD_ADDR_EXP 46
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// sTank := false ;
9059: LD_ADDR_EXP 48
9063: PUSH
9064: LD_INT 0
9066: ST_TO_ADDR
// sRemote := false ;
9067: LD_ADDR_EXP 49
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// sPowell := false ;
9075: LD_ADDR_EXP 50
9079: PUSH
9080: LD_INT 0
9082: ST_TO_ADDR
// sTeleport := false ;
9083: LD_ADDR_EXP 53
9087: PUSH
9088: LD_INT 0
9090: ST_TO_ADDR
// sOilTower := false ;
9091: LD_ADDR_EXP 55
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// sShovel := false ;
9099: LD_ADDR_EXP 56
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// sSheik := false ;
9107: LD_ADDR_EXP 57
9111: PUSH
9112: LD_INT 0
9114: ST_TO_ADDR
// sEarthquake := false ;
9115: LD_ADDR_EXP 59
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// sAI := false ;
9123: LD_ADDR_EXP 60
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sCargo := false ;
9131: LD_ADDR_EXP 63
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sDLaser := false ;
9139: LD_ADDR_EXP 64
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sExchange := false ;
9147: LD_ADDR_EXP 65
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sFac := false ;
9155: LD_ADDR_EXP 66
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sPower := false ;
9163: LD_ADDR_EXP 67
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sRandom := false ;
9171: LD_ADDR_EXP 68
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sShield := false ;
9179: LD_ADDR_EXP 69
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sTime := false ;
9187: LD_ADDR_EXP 70
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sTools := false ;
9195: LD_ADDR_EXP 71
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sSold := false ;
9203: LD_ADDR_EXP 36
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sDiff := false ;
9211: LD_ADDR_EXP 37
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sFog := false ;
9219: LD_ADDR_EXP 40
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sReset := false ;
9227: LD_ADDR_EXP 41
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sSun := false ;
9235: LD_ADDR_EXP 42
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sTiger := false ;
9243: LD_ADDR_EXP 38
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sBomb := false ;
9251: LD_ADDR_EXP 39
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sWound := false ;
9259: LD_ADDR_EXP 47
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sBetray := false ;
9267: LD_ADDR_EXP 51
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sContamin := false ;
9275: LD_ADDR_EXP 52
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sOil := false ;
9283: LD_ADDR_EXP 54
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sStu := false ;
9291: LD_ADDR_EXP 58
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sBazooka := false ;
9299: LD_ADDR_EXP 61
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sMortar := false ;
9307: LD_ADDR_EXP 62
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sRanger := false ;
9315: LD_ADDR_EXP 72
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sComputer := false ;
9323: LD_ADDR_EXP 73
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// s30 := false ;
9331: LD_ADDR_EXP 74
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// s60 := false ;
9339: LD_ADDR_EXP 75
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// end ;
9347: LD_VAR 0 1
9351: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
9357: PPUSH
9358: PPUSH
// result := [ ] ;
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: EMPTY
9365: ST_TO_ADDR
// if campaign_id = 1 then
9366: LD_OWVAR 69
9370: PUSH
9371: LD_INT 1
9373: EQUAL
9374: IFFALSE 12540
// begin case mission_number of 1 :
9376: LD_OWVAR 70
9380: PUSH
9381: LD_INT 1
9383: DOUBLE
9384: EQUAL
9385: IFTRUE 9389
9387: GO 9465
9389: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9390: LD_ADDR_VAR 0 1
9394: PUSH
9395: LD_INT 2
9397: PUSH
9398: LD_INT 4
9400: PUSH
9401: LD_INT 11
9403: PUSH
9404: LD_INT 12
9406: PUSH
9407: LD_INT 15
9409: PUSH
9410: LD_INT 16
9412: PUSH
9413: LD_INT 22
9415: PUSH
9416: LD_INT 23
9418: PUSH
9419: LD_INT 26
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 101
9435: PUSH
9436: LD_INT 102
9438: PUSH
9439: LD_INT 106
9441: PUSH
9442: LD_INT 116
9444: PUSH
9445: LD_INT 117
9447: PUSH
9448: LD_INT 118
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: ST_TO_ADDR
9463: GO 12538
9465: LD_INT 2
9467: DOUBLE
9468: EQUAL
9469: IFTRUE 9473
9471: GO 9557
9473: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9474: LD_ADDR_VAR 0 1
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: LD_INT 4
9484: PUSH
9485: LD_INT 11
9487: PUSH
9488: LD_INT 12
9490: PUSH
9491: LD_INT 15
9493: PUSH
9494: LD_INT 16
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_INT 23
9502: PUSH
9503: LD_INT 26
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 101
9519: PUSH
9520: LD_INT 102
9522: PUSH
9523: LD_INT 105
9525: PUSH
9526: LD_INT 106
9528: PUSH
9529: LD_INT 108
9531: PUSH
9532: LD_INT 116
9534: PUSH
9535: LD_INT 117
9537: PUSH
9538: LD_INT 118
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: ST_TO_ADDR
9555: GO 12538
9557: LD_INT 3
9559: DOUBLE
9560: EQUAL
9561: IFTRUE 9565
9563: GO 9653
9565: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: LD_INT 4
9576: PUSH
9577: LD_INT 5
9579: PUSH
9580: LD_INT 11
9582: PUSH
9583: LD_INT 12
9585: PUSH
9586: LD_INT 15
9588: PUSH
9589: LD_INT 16
9591: PUSH
9592: LD_INT 22
9594: PUSH
9595: LD_INT 26
9597: PUSH
9598: LD_INT 36
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 101
9615: PUSH
9616: LD_INT 102
9618: PUSH
9619: LD_INT 105
9621: PUSH
9622: LD_INT 106
9624: PUSH
9625: LD_INT 108
9627: PUSH
9628: LD_INT 116
9630: PUSH
9631: LD_INT 117
9633: PUSH
9634: LD_INT 118
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: ST_TO_ADDR
9651: GO 12538
9653: LD_INT 4
9655: DOUBLE
9656: EQUAL
9657: IFTRUE 9661
9659: GO 9757
9661: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9662: LD_ADDR_VAR 0 1
9666: PUSH
9667: LD_INT 2
9669: PUSH
9670: LD_INT 4
9672: PUSH
9673: LD_INT 5
9675: PUSH
9676: LD_INT 8
9678: PUSH
9679: LD_INT 11
9681: PUSH
9682: LD_INT 12
9684: PUSH
9685: LD_INT 15
9687: PUSH
9688: LD_INT 16
9690: PUSH
9691: LD_INT 22
9693: PUSH
9694: LD_INT 23
9696: PUSH
9697: LD_INT 26
9699: PUSH
9700: LD_INT 36
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 101
9719: PUSH
9720: LD_INT 102
9722: PUSH
9723: LD_INT 105
9725: PUSH
9726: LD_INT 106
9728: PUSH
9729: LD_INT 108
9731: PUSH
9732: LD_INT 116
9734: PUSH
9735: LD_INT 117
9737: PUSH
9738: LD_INT 118
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: ST_TO_ADDR
9755: GO 12538
9757: LD_INT 5
9759: DOUBLE
9760: EQUAL
9761: IFTRUE 9765
9763: GO 9877
9765: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9766: LD_ADDR_VAR 0 1
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: LD_INT 4
9776: PUSH
9777: LD_INT 5
9779: PUSH
9780: LD_INT 6
9782: PUSH
9783: LD_INT 8
9785: PUSH
9786: LD_INT 11
9788: PUSH
9789: LD_INT 12
9791: PUSH
9792: LD_INT 15
9794: PUSH
9795: LD_INT 16
9797: PUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 25
9806: PUSH
9807: LD_INT 26
9809: PUSH
9810: LD_INT 36
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 101
9831: PUSH
9832: LD_INT 102
9834: PUSH
9835: LD_INT 105
9837: PUSH
9838: LD_INT 106
9840: PUSH
9841: LD_INT 108
9843: PUSH
9844: LD_INT 109
9846: PUSH
9847: LD_INT 112
9849: PUSH
9850: LD_INT 116
9852: PUSH
9853: LD_INT 117
9855: PUSH
9856: LD_INT 118
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: ST_TO_ADDR
9875: GO 12538
9877: LD_INT 6
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 10017
9885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9886: LD_ADDR_VAR 0 1
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: LD_INT 11
9908: PUSH
9909: LD_INT 12
9911: PUSH
9912: LD_INT 15
9914: PUSH
9915: LD_INT 16
9917: PUSH
9918: LD_INT 20
9920: PUSH
9921: LD_INT 21
9923: PUSH
9924: LD_INT 22
9926: PUSH
9927: LD_INT 23
9929: PUSH
9930: LD_INT 25
9932: PUSH
9933: LD_INT 26
9935: PUSH
9936: LD_INT 30
9938: PUSH
9939: LD_INT 31
9941: PUSH
9942: LD_INT 32
9944: PUSH
9945: LD_INT 36
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 101
9971: PUSH
9972: LD_INT 102
9974: PUSH
9975: LD_INT 105
9977: PUSH
9978: LD_INT 106
9980: PUSH
9981: LD_INT 108
9983: PUSH
9984: LD_INT 109
9986: PUSH
9987: LD_INT 112
9989: PUSH
9990: LD_INT 116
9992: PUSH
9993: LD_INT 117
9995: PUSH
9996: LD_INT 118
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: ST_TO_ADDR
10015: GO 12538
10017: LD_INT 7
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10137
10025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10026: LD_ADDR_VAR 0 1
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 4
10036: PUSH
10037: LD_INT 5
10039: PUSH
10040: LD_INT 7
10042: PUSH
10043: LD_INT 11
10045: PUSH
10046: LD_INT 12
10048: PUSH
10049: LD_INT 15
10051: PUSH
10052: LD_INT 16
10054: PUSH
10055: LD_INT 20
10057: PUSH
10058: LD_INT 21
10060: PUSH
10061: LD_INT 22
10063: PUSH
10064: LD_INT 23
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 26
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 101
10091: PUSH
10092: LD_INT 102
10094: PUSH
10095: LD_INT 103
10097: PUSH
10098: LD_INT 105
10100: PUSH
10101: LD_INT 106
10103: PUSH
10104: LD_INT 108
10106: PUSH
10107: LD_INT 112
10109: PUSH
10110: LD_INT 116
10112: PUSH
10113: LD_INT 117
10115: PUSH
10116: LD_INT 118
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: ST_TO_ADDR
10135: GO 12538
10137: LD_INT 8
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10285
10145: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: LD_INT 4
10156: PUSH
10157: LD_INT 5
10159: PUSH
10160: LD_INT 6
10162: PUSH
10163: LD_INT 7
10165: PUSH
10166: LD_INT 8
10168: PUSH
10169: LD_INT 11
10171: PUSH
10172: LD_INT 12
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 20
10183: PUSH
10184: LD_INT 21
10186: PUSH
10187: LD_INT 22
10189: PUSH
10190: LD_INT 23
10192: PUSH
10193: LD_INT 25
10195: PUSH
10196: LD_INT 26
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 31
10204: PUSH
10205: LD_INT 32
10207: PUSH
10208: LD_INT 36
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 101
10235: PUSH
10236: LD_INT 102
10238: PUSH
10239: LD_INT 103
10241: PUSH
10242: LD_INT 105
10244: PUSH
10245: LD_INT 106
10247: PUSH
10248: LD_INT 108
10250: PUSH
10251: LD_INT 109
10253: PUSH
10254: LD_INT 112
10256: PUSH
10257: LD_INT 116
10259: PUSH
10260: LD_INT 117
10262: PUSH
10263: LD_INT 118
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: ST_TO_ADDR
10283: GO 12538
10285: LD_INT 9
10287: DOUBLE
10288: EQUAL
10289: IFTRUE 10293
10291: GO 10441
10293: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10294: LD_ADDR_VAR 0 1
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 4
10304: PUSH
10305: LD_INT 5
10307: PUSH
10308: LD_INT 6
10310: PUSH
10311: LD_INT 7
10313: PUSH
10314: LD_INT 8
10316: PUSH
10317: LD_INT 11
10319: PUSH
10320: LD_INT 12
10322: PUSH
10323: LD_INT 15
10325: PUSH
10326: LD_INT 16
10328: PUSH
10329: LD_INT 20
10331: PUSH
10332: LD_INT 21
10334: PUSH
10335: LD_INT 22
10337: PUSH
10338: LD_INT 23
10340: PUSH
10341: LD_INT 25
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 28
10349: PUSH
10350: LD_INT 30
10352: PUSH
10353: LD_INT 31
10355: PUSH
10356: LD_INT 32
10358: PUSH
10359: LD_INT 36
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 101
10387: PUSH
10388: LD_INT 102
10390: PUSH
10391: LD_INT 103
10393: PUSH
10394: LD_INT 105
10396: PUSH
10397: LD_INT 106
10399: PUSH
10400: LD_INT 108
10402: PUSH
10403: LD_INT 109
10405: PUSH
10406: LD_INT 112
10408: PUSH
10409: LD_INT 114
10411: PUSH
10412: LD_INT 116
10414: PUSH
10415: LD_INT 117
10417: PUSH
10418: LD_INT 118
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: ST_TO_ADDR
10439: GO 12538
10441: LD_INT 10
10443: DOUBLE
10444: EQUAL
10445: IFTRUE 10449
10447: GO 10645
10449: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10450: LD_ADDR_VAR 0 1
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: LD_INT 4
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: LD_INT 6
10466: PUSH
10467: LD_INT 7
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: LD_INT 9
10475: PUSH
10476: LD_INT 10
10478: PUSH
10479: LD_INT 11
10481: PUSH
10482: LD_INT 12
10484: PUSH
10485: LD_INT 13
10487: PUSH
10488: LD_INT 14
10490: PUSH
10491: LD_INT 15
10493: PUSH
10494: LD_INT 16
10496: PUSH
10497: LD_INT 17
10499: PUSH
10500: LD_INT 18
10502: PUSH
10503: LD_INT 19
10505: PUSH
10506: LD_INT 20
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 22
10514: PUSH
10515: LD_INT 23
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 28
10529: PUSH
10530: LD_INT 30
10532: PUSH
10533: LD_INT 31
10535: PUSH
10536: LD_INT 32
10538: PUSH
10539: LD_INT 36
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 101
10575: PUSH
10576: LD_INT 102
10578: PUSH
10579: LD_INT 103
10581: PUSH
10582: LD_INT 104
10584: PUSH
10585: LD_INT 105
10587: PUSH
10588: LD_INT 106
10590: PUSH
10591: LD_INT 107
10593: PUSH
10594: LD_INT 108
10596: PUSH
10597: LD_INT 109
10599: PUSH
10600: LD_INT 110
10602: PUSH
10603: LD_INT 111
10605: PUSH
10606: LD_INT 112
10608: PUSH
10609: LD_INT 114
10611: PUSH
10612: LD_INT 116
10614: PUSH
10615: LD_INT 117
10617: PUSH
10618: LD_INT 118
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: ST_TO_ADDR
10643: GO 12538
10645: LD_INT 11
10647: DOUBLE
10648: EQUAL
10649: IFTRUE 10653
10651: GO 10857
10653: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10654: LD_ADDR_VAR 0 1
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: LD_INT 4
10667: PUSH
10668: LD_INT 5
10670: PUSH
10671: LD_INT 6
10673: PUSH
10674: LD_INT 7
10676: PUSH
10677: LD_INT 8
10679: PUSH
10680: LD_INT 9
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: LD_INT 11
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: LD_INT 13
10694: PUSH
10695: LD_INT 14
10697: PUSH
10698: LD_INT 15
10700: PUSH
10701: LD_INT 16
10703: PUSH
10704: LD_INT 17
10706: PUSH
10707: LD_INT 18
10709: PUSH
10710: LD_INT 19
10712: PUSH
10713: LD_INT 20
10715: PUSH
10716: LD_INT 21
10718: PUSH
10719: LD_INT 22
10721: PUSH
10722: LD_INT 23
10724: PUSH
10725: LD_INT 24
10727: PUSH
10728: LD_INT 25
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: LD_INT 28
10736: PUSH
10737: LD_INT 30
10739: PUSH
10740: LD_INT 31
10742: PUSH
10743: LD_INT 32
10745: PUSH
10746: LD_INT 34
10748: PUSH
10749: LD_INT 36
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 101
10787: PUSH
10788: LD_INT 102
10790: PUSH
10791: LD_INT 103
10793: PUSH
10794: LD_INT 104
10796: PUSH
10797: LD_INT 105
10799: PUSH
10800: LD_INT 106
10802: PUSH
10803: LD_INT 107
10805: PUSH
10806: LD_INT 108
10808: PUSH
10809: LD_INT 109
10811: PUSH
10812: LD_INT 110
10814: PUSH
10815: LD_INT 111
10817: PUSH
10818: LD_INT 112
10820: PUSH
10821: LD_INT 114
10823: PUSH
10824: LD_INT 116
10826: PUSH
10827: LD_INT 117
10829: PUSH
10830: LD_INT 118
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: ST_TO_ADDR
10855: GO 12538
10857: LD_INT 12
10859: DOUBLE
10860: EQUAL
10861: IFTRUE 10865
10863: GO 11085
10865: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: LD_INT 1
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: LD_INT 4
10882: PUSH
10883: LD_INT 5
10885: PUSH
10886: LD_INT 6
10888: PUSH
10889: LD_INT 7
10891: PUSH
10892: LD_INT 8
10894: PUSH
10895: LD_INT 9
10897: PUSH
10898: LD_INT 10
10900: PUSH
10901: LD_INT 11
10903: PUSH
10904: LD_INT 12
10906: PUSH
10907: LD_INT 13
10909: PUSH
10910: LD_INT 14
10912: PUSH
10913: LD_INT 15
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: LD_INT 17
10921: PUSH
10922: LD_INT 18
10924: PUSH
10925: LD_INT 19
10927: PUSH
10928: LD_INT 20
10930: PUSH
10931: LD_INT 21
10933: PUSH
10934: LD_INT 22
10936: PUSH
10937: LD_INT 23
10939: PUSH
10940: LD_INT 24
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 26
10948: PUSH
10949: LD_INT 27
10951: PUSH
10952: LD_INT 28
10954: PUSH
10955: LD_INT 30
10957: PUSH
10958: LD_INT 31
10960: PUSH
10961: LD_INT 32
10963: PUSH
10964: LD_INT 33
10966: PUSH
10967: LD_INT 34
10969: PUSH
10970: LD_INT 36
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 101
11011: PUSH
11012: LD_INT 102
11014: PUSH
11015: LD_INT 103
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 105
11023: PUSH
11024: LD_INT 106
11026: PUSH
11027: LD_INT 107
11029: PUSH
11030: LD_INT 108
11032: PUSH
11033: LD_INT 109
11035: PUSH
11036: LD_INT 110
11038: PUSH
11039: LD_INT 111
11041: PUSH
11042: LD_INT 112
11044: PUSH
11045: LD_INT 113
11047: PUSH
11048: LD_INT 114
11050: PUSH
11051: LD_INT 116
11053: PUSH
11054: LD_INT 117
11056: PUSH
11057: LD_INT 118
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: ST_TO_ADDR
11083: GO 12538
11085: LD_INT 13
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11301
11093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: LD_INT 8
11116: PUSH
11117: LD_INT 9
11119: PUSH
11120: LD_INT 10
11122: PUSH
11123: LD_INT 11
11125: PUSH
11126: LD_INT 12
11128: PUSH
11129: LD_INT 14
11131: PUSH
11132: LD_INT 15
11134: PUSH
11135: LD_INT 16
11137: PUSH
11138: LD_INT 17
11140: PUSH
11141: LD_INT 18
11143: PUSH
11144: LD_INT 19
11146: PUSH
11147: LD_INT 20
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 22
11155: PUSH
11156: LD_INT 23
11158: PUSH
11159: LD_INT 24
11161: PUSH
11162: LD_INT 25
11164: PUSH
11165: LD_INT 26
11167: PUSH
11168: LD_INT 27
11170: PUSH
11171: LD_INT 28
11173: PUSH
11174: LD_INT 30
11176: PUSH
11177: LD_INT 31
11179: PUSH
11180: LD_INT 32
11182: PUSH
11183: LD_INT 33
11185: PUSH
11186: LD_INT 34
11188: PUSH
11189: LD_INT 36
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 101
11227: PUSH
11228: LD_INT 102
11230: PUSH
11231: LD_INT 103
11233: PUSH
11234: LD_INT 104
11236: PUSH
11237: LD_INT 105
11239: PUSH
11240: LD_INT 106
11242: PUSH
11243: LD_INT 107
11245: PUSH
11246: LD_INT 108
11248: PUSH
11249: LD_INT 109
11251: PUSH
11252: LD_INT 110
11254: PUSH
11255: LD_INT 111
11257: PUSH
11258: LD_INT 112
11260: PUSH
11261: LD_INT 113
11263: PUSH
11264: LD_INT 114
11266: PUSH
11267: LD_INT 116
11269: PUSH
11270: LD_INT 117
11272: PUSH
11273: LD_INT 118
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: ST_TO_ADDR
11299: GO 12538
11301: LD_INT 14
11303: DOUBLE
11304: EQUAL
11305: IFTRUE 11309
11307: GO 11533
11309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: LD_INT 2
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: LD_INT 4
11326: PUSH
11327: LD_INT 5
11329: PUSH
11330: LD_INT 6
11332: PUSH
11333: LD_INT 7
11335: PUSH
11336: LD_INT 8
11338: PUSH
11339: LD_INT 9
11341: PUSH
11342: LD_INT 10
11344: PUSH
11345: LD_INT 11
11347: PUSH
11348: LD_INT 12
11350: PUSH
11351: LD_INT 13
11353: PUSH
11354: LD_INT 14
11356: PUSH
11357: LD_INT 15
11359: PUSH
11360: LD_INT 16
11362: PUSH
11363: LD_INT 17
11365: PUSH
11366: LD_INT 18
11368: PUSH
11369: LD_INT 19
11371: PUSH
11372: LD_INT 20
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 22
11380: PUSH
11381: LD_INT 23
11383: PUSH
11384: LD_INT 24
11386: PUSH
11387: LD_INT 25
11389: PUSH
11390: LD_INT 26
11392: PUSH
11393: LD_INT 27
11395: PUSH
11396: LD_INT 28
11398: PUSH
11399: LD_INT 29
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 31
11407: PUSH
11408: LD_INT 32
11410: PUSH
11411: LD_INT 33
11413: PUSH
11414: LD_INT 34
11416: PUSH
11417: LD_INT 36
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 101
11459: PUSH
11460: LD_INT 102
11462: PUSH
11463: LD_INT 103
11465: PUSH
11466: LD_INT 104
11468: PUSH
11469: LD_INT 105
11471: PUSH
11472: LD_INT 106
11474: PUSH
11475: LD_INT 107
11477: PUSH
11478: LD_INT 108
11480: PUSH
11481: LD_INT 109
11483: PUSH
11484: LD_INT 110
11486: PUSH
11487: LD_INT 111
11489: PUSH
11490: LD_INT 112
11492: PUSH
11493: LD_INT 113
11495: PUSH
11496: LD_INT 114
11498: PUSH
11499: LD_INT 116
11501: PUSH
11502: LD_INT 117
11504: PUSH
11505: LD_INT 118
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: ST_TO_ADDR
11531: GO 12538
11533: LD_INT 15
11535: DOUBLE
11536: EQUAL
11537: IFTRUE 11541
11539: GO 11765
11541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11542: LD_ADDR_VAR 0 1
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: LD_INT 2
11552: PUSH
11553: LD_INT 3
11555: PUSH
11556: LD_INT 4
11558: PUSH
11559: LD_INT 5
11561: PUSH
11562: LD_INT 6
11564: PUSH
11565: LD_INT 7
11567: PUSH
11568: LD_INT 8
11570: PUSH
11571: LD_INT 9
11573: PUSH
11574: LD_INT 10
11576: PUSH
11577: LD_INT 11
11579: PUSH
11580: LD_INT 12
11582: PUSH
11583: LD_INT 13
11585: PUSH
11586: LD_INT 14
11588: PUSH
11589: LD_INT 15
11591: PUSH
11592: LD_INT 16
11594: PUSH
11595: LD_INT 17
11597: PUSH
11598: LD_INT 18
11600: PUSH
11601: LD_INT 19
11603: PUSH
11604: LD_INT 20
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 23
11615: PUSH
11616: LD_INT 24
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 26
11624: PUSH
11625: LD_INT 27
11627: PUSH
11628: LD_INT 28
11630: PUSH
11631: LD_INT 29
11633: PUSH
11634: LD_INT 30
11636: PUSH
11637: LD_INT 31
11639: PUSH
11640: LD_INT 32
11642: PUSH
11643: LD_INT 33
11645: PUSH
11646: LD_INT 34
11648: PUSH
11649: LD_INT 36
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 101
11691: PUSH
11692: LD_INT 102
11694: PUSH
11695: LD_INT 103
11697: PUSH
11698: LD_INT 104
11700: PUSH
11701: LD_INT 105
11703: PUSH
11704: LD_INT 106
11706: PUSH
11707: LD_INT 107
11709: PUSH
11710: LD_INT 108
11712: PUSH
11713: LD_INT 109
11715: PUSH
11716: LD_INT 110
11718: PUSH
11719: LD_INT 111
11721: PUSH
11722: LD_INT 112
11724: PUSH
11725: LD_INT 113
11727: PUSH
11728: LD_INT 114
11730: PUSH
11731: LD_INT 116
11733: PUSH
11734: LD_INT 117
11736: PUSH
11737: LD_INT 118
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: ST_TO_ADDR
11763: GO 12538
11765: LD_INT 16
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11909
11773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: LD_INT 4
11784: PUSH
11785: LD_INT 5
11787: PUSH
11788: LD_INT 7
11790: PUSH
11791: LD_INT 11
11793: PUSH
11794: LD_INT 12
11796: PUSH
11797: LD_INT 15
11799: PUSH
11800: LD_INT 16
11802: PUSH
11803: LD_INT 20
11805: PUSH
11806: LD_INT 21
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_INT 23
11814: PUSH
11815: LD_INT 25
11817: PUSH
11818: LD_INT 26
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 31
11826: PUSH
11827: LD_INT 32
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 34
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 101
11859: PUSH
11860: LD_INT 102
11862: PUSH
11863: LD_INT 103
11865: PUSH
11866: LD_INT 106
11868: PUSH
11869: LD_INT 108
11871: PUSH
11872: LD_INT 112
11874: PUSH
11875: LD_INT 113
11877: PUSH
11878: LD_INT 114
11880: PUSH
11881: LD_INT 116
11883: PUSH
11884: LD_INT 117
11886: PUSH
11887: LD_INT 118
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: ST_TO_ADDR
11907: GO 12538
11909: LD_INT 17
11911: DOUBLE
11912: EQUAL
11913: IFTRUE 11917
11915: GO 12141
11917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11918: LD_ADDR_VAR 0 1
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: LD_INT 2
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 5
11937: PUSH
11938: LD_INT 6
11940: PUSH
11941: LD_INT 7
11943: PUSH
11944: LD_INT 8
11946: PUSH
11947: LD_INT 9
11949: PUSH
11950: LD_INT 10
11952: PUSH
11953: LD_INT 11
11955: PUSH
11956: LD_INT 12
11958: PUSH
11959: LD_INT 13
11961: PUSH
11962: LD_INT 14
11964: PUSH
11965: LD_INT 15
11967: PUSH
11968: LD_INT 16
11970: PUSH
11971: LD_INT 17
11973: PUSH
11974: LD_INT 18
11976: PUSH
11977: LD_INT 19
11979: PUSH
11980: LD_INT 20
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 24
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: LD_INT 26
12000: PUSH
12001: LD_INT 27
12003: PUSH
12004: LD_INT 28
12006: PUSH
12007: LD_INT 29
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 31
12015: PUSH
12016: LD_INT 32
12018: PUSH
12019: LD_INT 33
12021: PUSH
12022: LD_INT 34
12024: PUSH
12025: LD_INT 36
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 101
12067: PUSH
12068: LD_INT 102
12070: PUSH
12071: LD_INT 103
12073: PUSH
12074: LD_INT 104
12076: PUSH
12077: LD_INT 105
12079: PUSH
12080: LD_INT 106
12082: PUSH
12083: LD_INT 107
12085: PUSH
12086: LD_INT 108
12088: PUSH
12089: LD_INT 109
12091: PUSH
12092: LD_INT 110
12094: PUSH
12095: LD_INT 111
12097: PUSH
12098: LD_INT 112
12100: PUSH
12101: LD_INT 113
12103: PUSH
12104: LD_INT 114
12106: PUSH
12107: LD_INT 116
12109: PUSH
12110: LD_INT 117
12112: PUSH
12113: LD_INT 118
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: ST_TO_ADDR
12139: GO 12538
12141: LD_INT 18
12143: DOUBLE
12144: EQUAL
12145: IFTRUE 12149
12147: GO 12297
12149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12150: LD_ADDR_VAR 0 1
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: LD_INT 4
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: LD_INT 7
12166: PUSH
12167: LD_INT 11
12169: PUSH
12170: LD_INT 12
12172: PUSH
12173: LD_INT 15
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: LD_INT 20
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 23
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 26
12196: PUSH
12197: LD_INT 30
12199: PUSH
12200: LD_INT 31
12202: PUSH
12203: LD_INT 32
12205: PUSH
12206: LD_INT 33
12208: PUSH
12209: LD_INT 34
12211: PUSH
12212: LD_INT 35
12214: PUSH
12215: LD_INT 36
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 101
12243: PUSH
12244: LD_INT 102
12246: PUSH
12247: LD_INT 103
12249: PUSH
12250: LD_INT 106
12252: PUSH
12253: LD_INT 108
12255: PUSH
12256: LD_INT 112
12258: PUSH
12259: LD_INT 113
12261: PUSH
12262: LD_INT 114
12264: PUSH
12265: LD_INT 115
12267: PUSH
12268: LD_INT 116
12270: PUSH
12271: LD_INT 117
12273: PUSH
12274: LD_INT 118
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: ST_TO_ADDR
12295: GO 12538
12297: LD_INT 19
12299: DOUBLE
12300: EQUAL
12301: IFTRUE 12305
12303: GO 12537
12305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: LD_INT 4
12322: PUSH
12323: LD_INT 5
12325: PUSH
12326: LD_INT 6
12328: PUSH
12329: LD_INT 7
12331: PUSH
12332: LD_INT 8
12334: PUSH
12335: LD_INT 9
12337: PUSH
12338: LD_INT 10
12340: PUSH
12341: LD_INT 11
12343: PUSH
12344: LD_INT 12
12346: PUSH
12347: LD_INT 13
12349: PUSH
12350: LD_INT 14
12352: PUSH
12353: LD_INT 15
12355: PUSH
12356: LD_INT 16
12358: PUSH
12359: LD_INT 17
12361: PUSH
12362: LD_INT 18
12364: PUSH
12365: LD_INT 19
12367: PUSH
12368: LD_INT 20
12370: PUSH
12371: LD_INT 21
12373: PUSH
12374: LD_INT 22
12376: PUSH
12377: LD_INT 23
12379: PUSH
12380: LD_INT 24
12382: PUSH
12383: LD_INT 25
12385: PUSH
12386: LD_INT 26
12388: PUSH
12389: LD_INT 27
12391: PUSH
12392: LD_INT 28
12394: PUSH
12395: LD_INT 29
12397: PUSH
12398: LD_INT 30
12400: PUSH
12401: LD_INT 31
12403: PUSH
12404: LD_INT 32
12406: PUSH
12407: LD_INT 33
12409: PUSH
12410: LD_INT 34
12412: PUSH
12413: LD_INT 35
12415: PUSH
12416: LD_INT 36
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 101
12459: PUSH
12460: LD_INT 102
12462: PUSH
12463: LD_INT 103
12465: PUSH
12466: LD_INT 104
12468: PUSH
12469: LD_INT 105
12471: PUSH
12472: LD_INT 106
12474: PUSH
12475: LD_INT 107
12477: PUSH
12478: LD_INT 108
12480: PUSH
12481: LD_INT 109
12483: PUSH
12484: LD_INT 110
12486: PUSH
12487: LD_INT 111
12489: PUSH
12490: LD_INT 112
12492: PUSH
12493: LD_INT 113
12495: PUSH
12496: LD_INT 114
12498: PUSH
12499: LD_INT 115
12501: PUSH
12502: LD_INT 116
12504: PUSH
12505: LD_INT 117
12507: PUSH
12508: LD_INT 118
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 12538
12537: POP
// end else
12538: GO 12769
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12540: LD_ADDR_VAR 0 1
12544: PUSH
12545: LD_INT 1
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: LD_INT 4
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: LD_INT 6
12562: PUSH
12563: LD_INT 7
12565: PUSH
12566: LD_INT 8
12568: PUSH
12569: LD_INT 9
12571: PUSH
12572: LD_INT 10
12574: PUSH
12575: LD_INT 11
12577: PUSH
12578: LD_INT 12
12580: PUSH
12581: LD_INT 13
12583: PUSH
12584: LD_INT 14
12586: PUSH
12587: LD_INT 15
12589: PUSH
12590: LD_INT 16
12592: PUSH
12593: LD_INT 17
12595: PUSH
12596: LD_INT 18
12598: PUSH
12599: LD_INT 19
12601: PUSH
12602: LD_INT 20
12604: PUSH
12605: LD_INT 21
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 23
12613: PUSH
12614: LD_INT 24
12616: PUSH
12617: LD_INT 25
12619: PUSH
12620: LD_INT 26
12622: PUSH
12623: LD_INT 27
12625: PUSH
12626: LD_INT 28
12628: PUSH
12629: LD_INT 29
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 31
12637: PUSH
12638: LD_INT 32
12640: PUSH
12641: LD_INT 33
12643: PUSH
12644: LD_INT 34
12646: PUSH
12647: LD_INT 35
12649: PUSH
12650: LD_INT 36
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 101
12693: PUSH
12694: LD_INT 102
12696: PUSH
12697: LD_INT 103
12699: PUSH
12700: LD_INT 104
12702: PUSH
12703: LD_INT 105
12705: PUSH
12706: LD_INT 106
12708: PUSH
12709: LD_INT 107
12711: PUSH
12712: LD_INT 108
12714: PUSH
12715: LD_INT 109
12717: PUSH
12718: LD_INT 110
12720: PUSH
12721: LD_INT 111
12723: PUSH
12724: LD_INT 112
12726: PUSH
12727: LD_INT 113
12729: PUSH
12730: LD_INT 114
12732: PUSH
12733: LD_INT 115
12735: PUSH
12736: LD_INT 116
12738: PUSH
12739: LD_INT 117
12741: PUSH
12742: LD_INT 118
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: ST_TO_ADDR
// if result then
12769: LD_VAR 0 1
12773: IFFALSE 13062
// begin normal :=  ;
12775: LD_ADDR_VAR 0 3
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hardcore :=  ;
12783: LD_ADDR_VAR 0 4
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// for i = 1 to normalCounter do
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: DOUBLE
12797: LD_INT 1
12799: DEC
12800: ST_TO_ADDR
12801: LD_EXP 20
12805: PUSH
12806: FOR_TO
12807: IFFALSE 12908
// begin tmp := 0 ;
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_STRING 0
12816: ST_TO_ADDR
// if result [ 1 ] then
12817: LD_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: ARRAY
12825: IFFALSE 12890
// if result [ 1 ] [ 1 ] = i then
12827: LD_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: PUSH
12836: LD_INT 1
12838: ARRAY
12839: PUSH
12840: LD_VAR 0 5
12844: EQUAL
12845: IFFALSE 12890
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12847: LD_ADDR_VAR 0 1
12851: PUSH
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: LD_VAR 0 1
12864: PUSH
12865: LD_INT 1
12867: ARRAY
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 3
12876: PPUSH
12877: CALL_OW 1
12881: ST_TO_ADDR
// tmp := 1 ;
12882: LD_ADDR_VAR 0 2
12886: PUSH
12887: LD_STRING 1
12889: ST_TO_ADDR
// end ; normal := normal & tmp ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_VAR 0 3
12899: PUSH
12900: LD_VAR 0 2
12904: STR
12905: ST_TO_ADDR
// end ;
12906: GO 12806
12908: POP
12909: POP
// for i = 1 to hardcoreCounter do
12910: LD_ADDR_VAR 0 5
12914: PUSH
12915: DOUBLE
12916: LD_INT 1
12918: DEC
12919: ST_TO_ADDR
12920: LD_EXP 21
12924: PUSH
12925: FOR_TO
12926: IFFALSE 13031
// begin tmp := 0 ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_STRING 0
12935: ST_TO_ADDR
// if result [ 2 ] then
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 2
12943: ARRAY
12944: IFFALSE 13013
// if result [ 2 ] [ 1 ] = 100 + i then
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 2
12953: ARRAY
12954: PUSH
12955: LD_INT 1
12957: ARRAY
12958: PUSH
12959: LD_INT 100
12961: PUSH
12962: LD_VAR 0 5
12966: PLUS
12967: EQUAL
12968: IFFALSE 13013
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12970: LD_ADDR_VAR 0 1
12974: PUSH
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 2
12982: PPUSH
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 2
12990: ARRAY
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 3
12999: PPUSH
13000: CALL_OW 1
13004: ST_TO_ADDR
// tmp := 1 ;
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_STRING 1
13012: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13013: LD_ADDR_VAR 0 4
13017: PUSH
13018: LD_VAR 0 4
13022: PUSH
13023: LD_VAR 0 2
13027: STR
13028: ST_TO_ADDR
// end ;
13029: GO 12925
13031: POP
13032: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
13033: LD_STRING getStreamItemsFromMission("
13035: PUSH
13036: LD_VAR 0 3
13040: STR
13041: PUSH
13042: LD_STRING ","
13044: STR
13045: PUSH
13046: LD_VAR 0 4
13050: STR
13051: PUSH
13052: LD_STRING ")
13054: STR
13055: PPUSH
13056: CALL_OW 559
// end else
13060: GO 13069
// ToLua ( getStreamItemsFromMission("","") ) ;
13062: LD_STRING getStreamItemsFromMission("","")
13064: PPUSH
13065: CALL_OW 559
// end ;
13069: LD_VAR 0 1
13073: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13074: LD_EXP 19
13078: PUSH
13079: LD_EXP 24
13083: AND
13084: IFFALSE 13208
13086: GO 13088
13088: DISABLE
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
// begin enable ;
13093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13094: LD_ADDR_VAR 0 2
13098: PUSH
13099: LD_INT 22
13101: PUSH
13102: LD_OWVAR 2
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 34
13116: PUSH
13117: LD_INT 7
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 34
13126: PUSH
13127: LD_INT 45
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 34
13136: PUSH
13137: LD_INT 28
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 34
13146: PUSH
13147: LD_INT 47
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: ST_TO_ADDR
// if not tmp then
13170: LD_VAR 0 2
13174: NOT
13175: IFFALSE 13179
// exit ;
13177: GO 13208
// for i in tmp do
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: LD_VAR 0 2
13188: PUSH
13189: FOR_IN
13190: IFFALSE 13206
// begin SetLives ( i , 0 ) ;
13192: LD_VAR 0 1
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 234
// end ;
13204: GO 13189
13206: POP
13207: POP
// end ;
13208: PPOPN 2
13210: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13211: LD_EXP 19
13215: PUSH
13216: LD_EXP 25
13220: AND
13221: IFFALSE 13305
13223: GO 13225
13225: DISABLE
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
// begin enable ;
13230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_INT 22
13238: PUSH
13239: LD_OWVAR 2
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 32
13250: PUSH
13251: LD_INT 3
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PPUSH
13262: CALL_OW 69
13266: ST_TO_ADDR
// if not tmp then
13267: LD_VAR 0 2
13271: NOT
13272: IFFALSE 13276
// exit ;
13274: GO 13305
// for i in tmp do
13276: LD_ADDR_VAR 0 1
13280: PUSH
13281: LD_VAR 0 2
13285: PUSH
13286: FOR_IN
13287: IFFALSE 13303
// begin SetLives ( i , 0 ) ;
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 0
13296: PPUSH
13297: CALL_OW 234
// end ;
13301: GO 13286
13303: POP
13304: POP
// end ;
13305: PPOPN 2
13307: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13308: LD_EXP 19
13312: PUSH
13313: LD_EXP 22
13317: AND
13318: IFFALSE 13411
13320: GO 13322
13322: DISABLE
13323: LD_INT 0
13325: PPUSH
// begin enable ;
13326: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_OWVAR 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: LD_INT 25
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 25
13359: PUSH
13360: LD_INT 9
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 25
13369: PUSH
13370: LD_INT 8
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: PUSH
13392: FOR_IN
13393: IFFALSE 13409
// begin SetClass ( i , 1 ) ;
13395: LD_VAR 0 1
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 336
// end ;
13407: GO 13392
13409: POP
13410: POP
// end ;
13411: PPOPN 1
13413: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13414: LD_EXP 19
13418: PUSH
13419: LD_EXP 23
13423: AND
13424: PUSH
13425: LD_OWVAR 65
13429: PUSH
13430: LD_INT 7
13432: LESS
13433: AND
13434: IFFALSE 13448
13436: GO 13438
13438: DISABLE
// begin enable ;
13439: ENABLE
// game_speed := 7 ;
13440: LD_ADDR_OWVAR 65
13444: PUSH
13445: LD_INT 7
13447: ST_TO_ADDR
// end ;
13448: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13449: LD_EXP 19
13453: PUSH
13454: LD_EXP 26
13458: AND
13459: IFFALSE 13661
13461: GO 13463
13463: DISABLE
13464: LD_INT 0
13466: PPUSH
13467: PPUSH
13468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13469: LD_ADDR_VAR 0 3
13473: PUSH
13474: LD_INT 81
13476: PUSH
13477: LD_OWVAR 2
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 1
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PPUSH
13500: CALL_OW 69
13504: ST_TO_ADDR
// if not tmp then
13505: LD_VAR 0 3
13509: NOT
13510: IFFALSE 13514
// exit ;
13512: GO 13661
// if tmp > 5 then
13514: LD_VAR 0 3
13518: PUSH
13519: LD_INT 5
13521: GREATER
13522: IFFALSE 13534
// k := 5 else
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 5
13531: ST_TO_ADDR
13532: GO 13544
// k := tmp ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_VAR 0 3
13543: ST_TO_ADDR
// for i := 1 to k do
13544: LD_ADDR_VAR 0 1
13548: PUSH
13549: DOUBLE
13550: LD_INT 1
13552: DEC
13553: ST_TO_ADDR
13554: LD_VAR 0 2
13558: PUSH
13559: FOR_TO
13560: IFFALSE 13659
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_VAR 0 1
13571: ARRAY
13572: PPUSH
13573: LD_VAR 0 1
13577: PUSH
13578: LD_INT 4
13580: MOD
13581: PUSH
13582: LD_INT 1
13584: PLUS
13585: PPUSH
13586: CALL_OW 259
13590: PUSH
13591: LD_INT 10
13593: LESS
13594: IFFALSE 13657
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13596: LD_VAR 0 3
13600: PUSH
13601: LD_VAR 0 1
13605: ARRAY
13606: PPUSH
13607: LD_VAR 0 1
13611: PUSH
13612: LD_INT 4
13614: MOD
13615: PUSH
13616: LD_INT 1
13618: PLUS
13619: PPUSH
13620: LD_VAR 0 3
13624: PUSH
13625: LD_VAR 0 1
13629: ARRAY
13630: PPUSH
13631: LD_VAR 0 1
13635: PUSH
13636: LD_INT 4
13638: MOD
13639: PUSH
13640: LD_INT 1
13642: PLUS
13643: PPUSH
13644: CALL_OW 259
13648: PUSH
13649: LD_INT 1
13651: PLUS
13652: PPUSH
13653: CALL_OW 237
13657: GO 13559
13659: POP
13660: POP
// end ;
13661: PPOPN 3
13663: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13664: LD_EXP 19
13668: PUSH
13669: LD_EXP 27
13673: AND
13674: IFFALSE 13694
13676: GO 13678
13678: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13679: LD_INT 4
13681: PPUSH
13682: LD_OWVAR 2
13686: PPUSH
13687: LD_INT 0
13689: PPUSH
13690: CALL_OW 324
13694: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13695: LD_EXP 19
13699: PUSH
13700: LD_EXP 56
13704: AND
13705: IFFALSE 13725
13707: GO 13709
13709: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13710: LD_INT 19
13712: PPUSH
13713: LD_OWVAR 2
13717: PPUSH
13718: LD_INT 0
13720: PPUSH
13721: CALL_OW 324
13725: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13726: LD_EXP 19
13730: PUSH
13731: LD_EXP 28
13735: AND
13736: IFFALSE 13838
13738: GO 13740
13740: DISABLE
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
// begin enable ;
13745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_OWVAR 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: LD_INT 34
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 34
13778: PUSH
13779: LD_INT 30
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: ST_TO_ADDR
// if not tmp then
13800: LD_VAR 0 2
13804: NOT
13805: IFFALSE 13809
// exit ;
13807: GO 13838
// for i in tmp do
13809: LD_ADDR_VAR 0 1
13813: PUSH
13814: LD_VAR 0 2
13818: PUSH
13819: FOR_IN
13820: IFFALSE 13836
// begin SetLives ( i , 0 ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_INT 0
13829: PPUSH
13830: CALL_OW 234
// end ;
13834: GO 13819
13836: POP
13837: POP
// end ;
13838: PPOPN 2
13840: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13841: LD_EXP 19
13845: PUSH
13846: LD_EXP 29
13850: AND
13851: IFFALSE 13871
13853: GO 13855
13855: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13856: LD_INT 32
13858: PPUSH
13859: LD_OWVAR 2
13863: PPUSH
13864: LD_INT 0
13866: PPUSH
13867: CALL_OW 324
13871: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13872: LD_EXP 19
13876: PUSH
13877: LD_EXP 30
13881: AND
13882: IFFALSE 14063
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 33
13911: PUSH
13912: LD_INT 3
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 69
13927: ST_TO_ADDR
// if not tmp then
13928: LD_VAR 0 2
13932: NOT
13933: IFFALSE 13937
// exit ;
13935: GO 14063
// side := 0 ;
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// for i := 1 to 8 do
13945: LD_ADDR_VAR 0 1
13949: PUSH
13950: DOUBLE
13951: LD_INT 1
13953: DEC
13954: ST_TO_ADDR
13955: LD_INT 8
13957: PUSH
13958: FOR_TO
13959: IFFALSE 14007
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13961: LD_OWVAR 2
13965: PUSH
13966: LD_VAR 0 1
13970: NONEQUAL
13971: PUSH
13972: LD_OWVAR 2
13976: PPUSH
13977: LD_VAR 0 1
13981: PPUSH
13982: CALL_OW 81
13986: PUSH
13987: LD_INT 2
13989: EQUAL
13990: AND
13991: IFFALSE 14005
// begin side := i ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_VAR 0 1
14002: ST_TO_ADDR
// break ;
14003: GO 14007
// end ;
14005: GO 13958
14007: POP
14008: POP
// if not side then
14009: LD_VAR 0 3
14013: NOT
14014: IFFALSE 14018
// exit ;
14016: GO 14063
// for i := 1 to tmp do
14018: LD_ADDR_VAR 0 1
14022: PUSH
14023: DOUBLE
14024: LD_INT 1
14026: DEC
14027: ST_TO_ADDR
14028: LD_VAR 0 2
14032: PUSH
14033: FOR_TO
14034: IFFALSE 14061
// if Prob ( 60 ) then
14036: LD_INT 60
14038: PPUSH
14039: CALL_OW 13
14043: IFFALSE 14059
// SetSide ( i , side ) ;
14045: LD_VAR 0 1
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: CALL_OW 235
14059: GO 14033
14061: POP
14062: POP
// end ;
14063: PPOPN 3
14065: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14066: LD_EXP 19
14070: PUSH
14071: LD_EXP 32
14075: AND
14076: IFFALSE 14195
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_OWVAR 2
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 3
14113: PUSH
14114: LD_INT 23
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: PPUSH
14133: CALL_OW 69
14137: PUSH
14138: FOR_IN
14139: IFFALSE 14193
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14141: LD_VAR 0 1
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: LD_INT 2
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: LD_INT 4
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: IN
14169: IFFALSE 14191
// SetClass ( un , rand ( 1 , 4 ) ) ;
14171: LD_VAR 0 1
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: LD_INT 4
14181: PPUSH
14182: CALL_OW 12
14186: PPUSH
14187: CALL_OW 336
14191: GO 14138
14193: POP
14194: POP
// end ;
14195: PPOPN 1
14197: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14198: LD_EXP 19
14202: PUSH
14203: LD_EXP 31
14207: AND
14208: IFFALSE 14287
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14216: LD_ADDR_VAR 0 1
14220: PUSH
14221: LD_INT 22
14223: PUSH
14224: LD_OWVAR 2
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 21
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PPUSH
14247: CALL_OW 69
14251: ST_TO_ADDR
// if not tmp then
14252: LD_VAR 0 1
14256: NOT
14257: IFFALSE 14261
// exit ;
14259: GO 14287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14261: LD_VAR 0 1
14265: PUSH
14266: LD_INT 1
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 12
14278: ARRAY
14279: PPUSH
14280: LD_INT 100
14282: PPUSH
14283: CALL_OW 234
// end ;
14287: PPOPN 1
14289: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14290: LD_EXP 19
14294: PUSH
14295: LD_EXP 33
14299: AND
14300: IFFALSE 14398
14302: GO 14304
14304: DISABLE
14305: LD_INT 0
14307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_OWVAR 2
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 69
14343: ST_TO_ADDR
// if not tmp then
14344: LD_VAR 0 1
14348: NOT
14349: IFFALSE 14353
// exit ;
14351: GO 14398
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 1
14360: PPUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: CALL_OW 12
14370: ARRAY
14371: PPUSH
14372: LD_INT 1
14374: PPUSH
14375: LD_INT 4
14377: PPUSH
14378: CALL_OW 12
14382: PPUSH
14383: LD_INT 3000
14385: PPUSH
14386: LD_INT 9000
14388: PPUSH
14389: CALL_OW 12
14393: PPUSH
14394: CALL_OW 492
// end ;
14398: PPOPN 1
14400: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14401: LD_EXP 19
14405: PUSH
14406: LD_EXP 34
14410: AND
14411: IFFALSE 14431
14413: GO 14415
14415: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14416: LD_INT 1
14418: PPUSH
14419: LD_OWVAR 2
14423: PPUSH
14424: LD_INT 0
14426: PPUSH
14427: CALL_OW 324
14431: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14432: LD_EXP 19
14436: PUSH
14437: LD_EXP 35
14441: AND
14442: IFFALSE 14525
14444: GO 14446
14446: DISABLE
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14451: LD_ADDR_VAR 0 2
14455: PUSH
14456: LD_INT 22
14458: PUSH
14459: LD_OWVAR 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: ST_TO_ADDR
// if not tmp then
14487: LD_VAR 0 2
14491: NOT
14492: IFFALSE 14496
// exit ;
14494: GO 14525
// for i in tmp do
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: LD_VAR 0 2
14505: PUSH
14506: FOR_IN
14507: IFFALSE 14523
// SetBLevel ( i , 10 ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_INT 10
14516: PPUSH
14517: CALL_OW 241
14521: GO 14506
14523: POP
14524: POP
// end ;
14525: PPOPN 2
14527: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14528: LD_EXP 19
14532: PUSH
14533: LD_EXP 36
14537: AND
14538: IFFALSE 14649
14540: GO 14542
14542: DISABLE
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
14547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_OWVAR 2
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 25
14567: PUSH
14568: LD_INT 1
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 69
14583: ST_TO_ADDR
// if not tmp then
14584: LD_VAR 0 3
14588: NOT
14589: IFFALSE 14593
// exit ;
14591: GO 14649
// un := tmp [ rand ( 1 , tmp ) ] ;
14593: LD_ADDR_VAR 0 2
14597: PUSH
14598: LD_VAR 0 3
14602: PUSH
14603: LD_INT 1
14605: PPUSH
14606: LD_VAR 0 3
14610: PPUSH
14611: CALL_OW 12
14615: ARRAY
14616: ST_TO_ADDR
// if Crawls ( un ) then
14617: LD_VAR 0 2
14621: PPUSH
14622: CALL_OW 318
14626: IFFALSE 14637
// ComWalk ( un ) ;
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14637: LD_VAR 0 2
14641: PPUSH
14642: LD_INT 5
14644: PPUSH
14645: CALL_OW 336
// end ;
14649: PPOPN 3
14651: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14652: LD_EXP 19
14656: PUSH
14657: LD_EXP 37
14661: AND
14662: PUSH
14663: LD_OWVAR 67
14667: PUSH
14668: LD_INT 4
14670: LESS
14671: AND
14672: IFFALSE 14691
14674: GO 14676
14676: DISABLE
// begin Difficulty := Difficulty + 1 ;
14677: LD_ADDR_OWVAR 67
14681: PUSH
14682: LD_OWVAR 67
14686: PUSH
14687: LD_INT 1
14689: PLUS
14690: ST_TO_ADDR
// end ;
14691: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14692: LD_EXP 19
14696: PUSH
14697: LD_EXP 38
14701: AND
14702: IFFALSE 14805
14704: GO 14706
14706: DISABLE
14707: LD_INT 0
14709: PPUSH
// begin for i := 1 to 5 do
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: DOUBLE
14716: LD_INT 1
14718: DEC
14719: ST_TO_ADDR
14720: LD_INT 5
14722: PUSH
14723: FOR_TO
14724: IFFALSE 14803
// begin uc_nation := nation_nature ;
14726: LD_ADDR_OWVAR 21
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// uc_side := 0 ;
14734: LD_ADDR_OWVAR 20
14738: PUSH
14739: LD_INT 0
14741: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14742: LD_ADDR_OWVAR 29
14746: PUSH
14747: LD_INT 12
14749: PUSH
14750: LD_INT 12
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: ST_TO_ADDR
// hc_agressivity := 20 ;
14757: LD_ADDR_OWVAR 35
14761: PUSH
14762: LD_INT 20
14764: ST_TO_ADDR
// hc_class := class_tiger ;
14765: LD_ADDR_OWVAR 28
14769: PUSH
14770: LD_INT 14
14772: ST_TO_ADDR
// hc_gallery :=  ;
14773: LD_ADDR_OWVAR 33
14777: PUSH
14778: LD_STRING 
14780: ST_TO_ADDR
// hc_name :=  ;
14781: LD_ADDR_OWVAR 26
14785: PUSH
14786: LD_STRING 
14788: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14789: CALL_OW 44
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 51
// end ;
14801: GO 14723
14803: POP
14804: POP
// end ;
14805: PPOPN 1
14807: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14808: LD_EXP 19
14812: PUSH
14813: LD_EXP 39
14817: AND
14818: IFFALSE 14827
14820: GO 14822
14822: DISABLE
// StreamSibBomb ;
14823: CALL 14828 0 0
14827: END
// export function StreamSibBomb ; var i , x , y ; begin
14828: LD_INT 0
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
// result := false ;
14834: LD_ADDR_VAR 0 1
14838: PUSH
14839: LD_INT 0
14841: ST_TO_ADDR
// for i := 1 to 16 do
14842: LD_ADDR_VAR 0 2
14846: PUSH
14847: DOUBLE
14848: LD_INT 1
14850: DEC
14851: ST_TO_ADDR
14852: LD_INT 16
14854: PUSH
14855: FOR_TO
14856: IFFALSE 15055
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_INT 10
14865: PUSH
14866: LD_INT 20
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 40
14874: PUSH
14875: LD_INT 50
14877: PUSH
14878: LD_INT 60
14880: PUSH
14881: LD_INT 70
14883: PUSH
14884: LD_INT 80
14886: PUSH
14887: LD_INT 90
14889: PUSH
14890: LD_INT 100
14892: PUSH
14893: LD_INT 110
14895: PUSH
14896: LD_INT 120
14898: PUSH
14899: LD_INT 130
14901: PUSH
14902: LD_INT 140
14904: PUSH
14905: LD_INT 150
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_INT 15
14930: PPUSH
14931: CALL_OW 12
14935: ARRAY
14936: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14937: LD_ADDR_VAR 0 4
14941: PUSH
14942: LD_INT 10
14944: PUSH
14945: LD_INT 20
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 40
14953: PUSH
14954: LD_INT 50
14956: PUSH
14957: LD_INT 60
14959: PUSH
14960: LD_INT 70
14962: PUSH
14963: LD_INT 80
14965: PUSH
14966: LD_INT 90
14968: PUSH
14969: LD_INT 100
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 120
14977: PUSH
14978: LD_INT 130
14980: PUSH
14981: LD_INT 140
14983: PUSH
14984: LD_INT 150
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 1
15006: PPUSH
15007: LD_INT 15
15009: PPUSH
15010: CALL_OW 12
15014: ARRAY
15015: ST_TO_ADDR
// if ValidHex ( x , y ) then
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_VAR 0 4
15025: PPUSH
15026: CALL_OW 488
15030: IFFALSE 15053
// begin result := [ x , y ] ;
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_VAR 0 3
15041: PUSH
15042: LD_VAR 0 4
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: ST_TO_ADDR
// break ;
15051: GO 15055
// end ; end ;
15053: GO 14855
15055: POP
15056: POP
// if result then
15057: LD_VAR 0 1
15061: IFFALSE 15121
// begin ToLua ( playSibBomb() ) ;
15063: LD_STRING playSibBomb()
15065: PPUSH
15066: CALL_OW 559
// wait ( 0 0$14 ) ;
15070: LD_INT 490
15072: PPUSH
15073: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15077: LD_VAR 0 1
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: LD_VAR 0 1
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PPUSH
15095: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15099: LD_VAR 0 1
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: LD_VAR 0 1
15112: PUSH
15113: LD_INT 2
15115: ARRAY
15116: PPUSH
15117: CALL_OW 429
// end ; end ;
15121: LD_VAR 0 1
15125: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15126: LD_EXP 19
15130: PUSH
15131: LD_EXP 41
15135: AND
15136: IFFALSE 15148
15138: GO 15140
15140: DISABLE
// YouLost (  ) ;
15141: LD_STRING 
15143: PPUSH
15144: CALL_OW 104
15148: END
// every 0 0$1 trigger StreamModeActive and sFog do
15149: LD_EXP 19
15153: PUSH
15154: LD_EXP 40
15158: AND
15159: IFFALSE 15173
15161: GO 15163
15163: DISABLE
// FogOff ( your_side ) ;
15164: LD_OWVAR 2
15168: PPUSH
15169: CALL_OW 344
15173: END
// every 0 0$1 trigger StreamModeActive and sSun do
15174: LD_EXP 19
15178: PUSH
15179: LD_EXP 42
15183: AND
15184: IFFALSE 15212
15186: GO 15188
15188: DISABLE
// begin solar_recharge_percent := 0 ;
15189: LD_ADDR_OWVAR 79
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15197: LD_INT 10500
15199: PPUSH
15200: CALL_OW 67
// solar_recharge_percent := 100 ;
15204: LD_ADDR_OWVAR 79
15208: PUSH
15209: LD_INT 100
15211: ST_TO_ADDR
// end ;
15212: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15213: LD_EXP 19
15217: PUSH
15218: LD_EXP 43
15222: AND
15223: IFFALSE 15462
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
15231: PPUSH
15232: PPUSH
// begin tmp := [ ] ;
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: EMPTY
15239: ST_TO_ADDR
// for i := 1 to 6 do
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: DOUBLE
15246: LD_INT 1
15248: DEC
15249: ST_TO_ADDR
15250: LD_INT 6
15252: PUSH
15253: FOR_TO
15254: IFFALSE 15359
// begin uc_nation := nation_nature ;
15256: LD_ADDR_OWVAR 21
15260: PUSH
15261: LD_INT 0
15263: ST_TO_ADDR
// uc_side := 0 ;
15264: LD_ADDR_OWVAR 20
15268: PUSH
15269: LD_INT 0
15271: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15272: LD_ADDR_OWVAR 29
15276: PUSH
15277: LD_INT 12
15279: PUSH
15280: LD_INT 12
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: ST_TO_ADDR
// hc_agressivity := 20 ;
15287: LD_ADDR_OWVAR 35
15291: PUSH
15292: LD_INT 20
15294: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15295: LD_ADDR_OWVAR 28
15299: PUSH
15300: LD_INT 17
15302: ST_TO_ADDR
// hc_gallery :=  ;
15303: LD_ADDR_OWVAR 33
15307: PUSH
15308: LD_STRING 
15310: ST_TO_ADDR
// hc_name :=  ;
15311: LD_ADDR_OWVAR 26
15315: PUSH
15316: LD_STRING 
15318: ST_TO_ADDR
// un := CreateHuman ;
15319: LD_ADDR_VAR 0 2
15323: PUSH
15324: CALL_OW 44
15328: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15329: LD_VAR 0 2
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 51
// tmp := tmp ^ un ;
15341: LD_ADDR_VAR 0 3
15345: PUSH
15346: LD_VAR 0 3
15350: PUSH
15351: LD_VAR 0 2
15355: ADD
15356: ST_TO_ADDR
// end ;
15357: GO 15253
15359: POP
15360: POP
// repeat wait ( 0 0$1 ) ;
15361: LD_INT 35
15363: PPUSH
15364: CALL_OW 67
// for un in tmp do
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_VAR 0 3
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15453
// begin if IsDead ( un ) then
15381: LD_VAR 0 2
15385: PPUSH
15386: CALL_OW 301
15390: IFFALSE 15410
// begin tmp := tmp diff un ;
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: LD_VAR 0 3
15401: PUSH
15402: LD_VAR 0 2
15406: DIFF
15407: ST_TO_ADDR
// continue ;
15408: GO 15378
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15410: LD_VAR 0 2
15414: PPUSH
15415: LD_INT 3
15417: PUSH
15418: LD_INT 22
15420: PUSH
15421: LD_INT 0
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 74
15446: PPUSH
15447: CALL_OW 115
// end ;
15451: GO 15378
15453: POP
15454: POP
// until not tmp ;
15455: LD_VAR 0 3
15459: NOT
15460: IFFALSE 15361
// end ;
15462: PPOPN 3
15464: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15465: LD_EXP 19
15469: PUSH
15470: LD_EXP 44
15474: AND
15475: IFFALSE 15529
15477: GO 15479
15479: DISABLE
// begin ToLua ( displayTroll(); ) ;
15480: LD_STRING displayTroll();
15482: PPUSH
15483: CALL_OW 559
// wait ( 3 3$00 ) ;
15487: LD_INT 6300
15489: PPUSH
15490: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15494: LD_STRING hideTroll();
15496: PPUSH
15497: CALL_OW 559
// wait ( 1 1$00 ) ;
15501: LD_INT 2100
15503: PPUSH
15504: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15508: LD_STRING displayTroll();
15510: PPUSH
15511: CALL_OW 559
// wait ( 1 1$00 ) ;
15515: LD_INT 2100
15517: PPUSH
15518: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15522: LD_STRING hideTroll();
15524: PPUSH
15525: CALL_OW 559
// end ;
15529: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15530: LD_EXP 19
15534: PUSH
15535: LD_EXP 45
15539: AND
15540: IFFALSE 15603
15542: GO 15544
15544: DISABLE
15545: LD_INT 0
15547: PPUSH
// begin p := 0 ;
15548: LD_ADDR_VAR 0 1
15552: PUSH
15553: LD_INT 0
15555: ST_TO_ADDR
// repeat game_speed := 1 ;
15556: LD_ADDR_OWVAR 65
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15564: LD_INT 35
15566: PPUSH
15567: CALL_OW 67
// p := p + 1 ;
15571: LD_ADDR_VAR 0 1
15575: PUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 1
15583: PLUS
15584: ST_TO_ADDR
// until p >= 60 ;
15585: LD_VAR 0 1
15589: PUSH
15590: LD_INT 60
15592: GREATEREQUAL
15593: IFFALSE 15556
// game_speed := 4 ;
15595: LD_ADDR_OWVAR 65
15599: PUSH
15600: LD_INT 4
15602: ST_TO_ADDR
// end ;
15603: PPOPN 1
15605: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15606: LD_EXP 19
15610: PUSH
15611: LD_EXP 46
15615: AND
15616: IFFALSE 15762
15618: GO 15620
15620: DISABLE
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_OWVAR 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 2
15644: PUSH
15645: LD_INT 30
15647: PUSH
15648: LD_INT 0
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 1
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 69
15678: ST_TO_ADDR
// if not depot then
15679: LD_VAR 0 1
15683: NOT
15684: IFFALSE 15688
// exit ;
15686: GO 15762
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15688: LD_ADDR_VAR 0 2
15692: PUSH
15693: LD_VAR 0 1
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 12
15710: ARRAY
15711: PPUSH
15712: CALL_OW 274
15716: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15717: LD_VAR 0 2
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: LD_INT 0
15727: PPUSH
15728: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_INT 2
15739: PPUSH
15740: LD_INT 0
15742: PPUSH
15743: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15747: LD_VAR 0 2
15751: PPUSH
15752: LD_INT 3
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL_OW 277
// end ;
15762: PPOPN 2
15764: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15765: LD_EXP 19
15769: PUSH
15770: LD_EXP 47
15774: AND
15775: IFFALSE 15872
15777: GO 15779
15779: DISABLE
15780: LD_INT 0
15782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_INT 22
15790: PUSH
15791: LD_OWVAR 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 21
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: LD_INT 23
15815: PUSH
15816: LD_INT 0
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if not tmp then
15837: LD_VAR 0 1
15841: NOT
15842: IFFALSE 15846
// exit ;
15844: GO 15872
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15846: LD_VAR 0 1
15850: PUSH
15851: LD_INT 1
15853: PPUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 12
15863: ARRAY
15864: PPUSH
15865: LD_INT 200
15867: PPUSH
15868: CALL_OW 234
// end ;
15872: PPOPN 1
15874: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15875: LD_EXP 19
15879: PUSH
15880: LD_EXP 48
15884: AND
15885: IFFALSE 15964
15887: GO 15889
15889: DISABLE
15890: LD_INT 0
15892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15893: LD_ADDR_VAR 0 1
15897: PUSH
15898: LD_INT 22
15900: PUSH
15901: LD_OWVAR 2
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 21
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PPUSH
15924: CALL_OW 69
15928: ST_TO_ADDR
// if not tmp then
15929: LD_VAR 0 1
15933: NOT
15934: IFFALSE 15938
// exit ;
15936: GO 15964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15938: LD_VAR 0 1
15942: PUSH
15943: LD_INT 1
15945: PPUSH
15946: LD_VAR 0 1
15950: PPUSH
15951: CALL_OW 12
15955: ARRAY
15956: PPUSH
15957: LD_INT 60
15959: PPUSH
15960: CALL_OW 234
// end ;
15964: PPOPN 1
15966: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15967: LD_EXP 19
15971: PUSH
15972: LD_EXP 49
15976: AND
15977: IFFALSE 16076
15979: GO 15981
15981: DISABLE
15982: LD_INT 0
15984: PPUSH
15985: PPUSH
// begin enable ;
15986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15987: LD_ADDR_VAR 0 1
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_OWVAR 2
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 61
16006: PUSH
16007: EMPTY
16008: LIST
16009: PUSH
16010: LD_INT 33
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: ST_TO_ADDR
// if not tmp then
16030: LD_VAR 0 1
16034: NOT
16035: IFFALSE 16039
// exit ;
16037: GO 16076
// for i in tmp do
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_VAR 0 1
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16074
// if IsControledBy ( i ) then
16052: LD_VAR 0 2
16056: PPUSH
16057: CALL_OW 312
16061: IFFALSE 16072
// ComUnlink ( i ) ;
16063: LD_VAR 0 2
16067: PPUSH
16068: CALL_OW 136
16072: GO 16049
16074: POP
16075: POP
// end ;
16076: PPOPN 2
16078: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16079: LD_EXP 19
16083: PUSH
16084: LD_EXP 50
16088: AND
16089: IFFALSE 16229
16091: GO 16093
16093: DISABLE
16094: LD_INT 0
16096: PPUSH
16097: PPUSH
// begin ToLua ( displayPowell(); ) ;
16098: LD_STRING displayPowell();
16100: PPUSH
16101: CALL_OW 559
// uc_side := 0 ;
16105: LD_ADDR_OWVAR 20
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// uc_nation := 2 ;
16113: LD_ADDR_OWVAR 21
16117: PUSH
16118: LD_INT 2
16120: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16121: LD_ADDR_OWVAR 37
16125: PUSH
16126: LD_INT 14
16128: ST_TO_ADDR
// vc_engine := engine_siberite ;
16129: LD_ADDR_OWVAR 39
16133: PUSH
16134: LD_INT 3
16136: ST_TO_ADDR
// vc_control := control_apeman ;
16137: LD_ADDR_OWVAR 38
16141: PUSH
16142: LD_INT 5
16144: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16145: LD_ADDR_OWVAR 40
16149: PUSH
16150: LD_INT 29
16152: ST_TO_ADDR
// un := CreateVehicle ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: CALL_OW 45
16162: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16163: LD_VAR 0 2
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16175: LD_INT 35
16177: PPUSH
16178: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_INT 22
16189: PUSH
16190: LD_OWVAR 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: PPUSH
16204: LD_VAR 0 2
16208: PPUSH
16209: CALL_OW 74
16213: PPUSH
16214: CALL_OW 115
// until IsDead ( un ) ;
16218: LD_VAR 0 2
16222: PPUSH
16223: CALL_OW 301
16227: IFFALSE 16175
// end ;
16229: PPOPN 2
16231: END
// every 0 0$1 trigger StreamModeActive and sStu do
16232: LD_EXP 19
16236: PUSH
16237: LD_EXP 58
16241: AND
16242: IFFALSE 16258
16244: GO 16246
16246: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16247: LD_STRING displayStucuk();
16249: PPUSH
16250: CALL_OW 559
// ResetFog ;
16254: CALL_OW 335
// end ;
16258: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16259: LD_EXP 19
16263: PUSH
16264: LD_EXP 51
16268: AND
16269: IFFALSE 16410
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_INT 22
16285: PUSH
16286: LD_OWVAR 2
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: ST_TO_ADDR
// if not tmp then
16314: LD_VAR 0 2
16318: NOT
16319: IFFALSE 16323
// exit ;
16321: GO 16410
// un := tmp [ rand ( 1 , tmp ) ] ;
16323: LD_ADDR_VAR 0 1
16327: PUSH
16328: LD_VAR 0 2
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_VAR 0 2
16340: PPUSH
16341: CALL_OW 12
16345: ARRAY
16346: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16347: LD_VAR 0 1
16351: PPUSH
16352: LD_INT 0
16354: PPUSH
16355: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16359: LD_VAR 0 1
16363: PPUSH
16364: LD_OWVAR 3
16368: PUSH
16369: LD_VAR 0 1
16373: DIFF
16374: PPUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 74
16384: PPUSH
16385: CALL_OW 115
// wait ( 0 0$20 ) ;
16389: LD_INT 700
16391: PPUSH
16392: CALL_OW 67
// SetSide ( un , your_side ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: LD_OWVAR 2
16405: PPUSH
16406: CALL_OW 235
// end ;
16410: PPOPN 2
16412: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16413: LD_EXP 19
16417: PUSH
16418: LD_EXP 52
16422: AND
16423: IFFALSE 16529
16425: GO 16427
16427: DISABLE
16428: LD_INT 0
16430: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16431: LD_ADDR_VAR 0 1
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_OWVAR 2
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 30
16453: PUSH
16454: LD_INT 0
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 30
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
// if not depot then
16485: LD_VAR 0 1
16489: NOT
16490: IFFALSE 16494
// exit ;
16492: GO 16529
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16494: LD_VAR 0 1
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: CALL_OW 250
16507: PPUSH
16508: LD_VAR 0 1
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: CALL_OW 251
16521: PPUSH
16522: LD_INT 70
16524: PPUSH
16525: CALL_OW 495
// end ;
16529: PPOPN 1
16531: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16532: LD_EXP 19
16536: PUSH
16537: LD_EXP 53
16541: AND
16542: IFFALSE 16753
16544: GO 16546
16546: DISABLE
16547: LD_INT 0
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
16553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16554: LD_ADDR_VAR 0 5
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_OWVAR 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: ST_TO_ADDR
// if not tmp then
16590: LD_VAR 0 5
16594: NOT
16595: IFFALSE 16599
// exit ;
16597: GO 16753
// for i in tmp do
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_VAR 0 5
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16751
// begin d := rand ( 0 , 5 ) ;
16612: LD_ADDR_VAR 0 4
16616: PUSH
16617: LD_INT 0
16619: PPUSH
16620: LD_INT 5
16622: PPUSH
16623: CALL_OW 12
16627: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 250
16642: PPUSH
16643: LD_VAR 0 4
16647: PPUSH
16648: LD_INT 3
16650: PPUSH
16651: LD_INT 12
16653: PPUSH
16654: CALL_OW 12
16658: PPUSH
16659: CALL_OW 272
16663: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 251
16678: PPUSH
16679: LD_VAR 0 4
16683: PPUSH
16684: LD_INT 3
16686: PPUSH
16687: LD_INT 12
16689: PPUSH
16690: CALL_OW 12
16694: PPUSH
16695: CALL_OW 273
16699: ST_TO_ADDR
// if ValidHex ( x , y ) then
16700: LD_VAR 0 2
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: CALL_OW 488
16714: IFFALSE 16749
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16716: LD_VAR 0 1
16720: PPUSH
16721: LD_VAR 0 2
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: LD_INT 3
16733: PPUSH
16734: LD_INT 6
16736: PPUSH
16737: CALL_OW 12
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 483
// end ;
16749: GO 16609
16751: POP
16752: POP
// end ;
16753: PPOPN 5
16755: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16756: LD_EXP 19
16760: PUSH
16761: LD_EXP 54
16765: AND
16766: IFFALSE 16860
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16775: LD_ADDR_VAR 0 2
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_OWVAR 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 32
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: PPUSH
16817: CALL_OW 69
16821: ST_TO_ADDR
// if not tmp then
16822: LD_VAR 0 2
16826: NOT
16827: IFFALSE 16831
// exit ;
16829: GO 16860
// for i in tmp do
16831: LD_ADDR_VAR 0 1
16835: PUSH
16836: LD_VAR 0 2
16840: PUSH
16841: FOR_IN
16842: IFFALSE 16858
// SetFuel ( i , 0 ) ;
16844: LD_VAR 0 1
16848: PPUSH
16849: LD_INT 0
16851: PPUSH
16852: CALL_OW 240
16856: GO 16841
16858: POP
16859: POP
// end ;
16860: PPOPN 2
16862: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16863: LD_EXP 19
16867: PUSH
16868: LD_EXP 55
16872: AND
16873: IFFALSE 16939
16875: GO 16877
16877: DISABLE
16878: LD_INT 0
16880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: LD_INT 22
16888: PUSH
16889: LD_OWVAR 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 30
16900: PUSH
16901: LD_INT 29
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PPUSH
16912: CALL_OW 69
16916: ST_TO_ADDR
// if not tmp then
16917: LD_VAR 0 1
16921: NOT
16922: IFFALSE 16926
// exit ;
16924: GO 16939
// DestroyUnit ( tmp [ 1 ] ) ;
16926: LD_VAR 0 1
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: CALL_OW 65
// end ;
16939: PPOPN 1
16941: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16942: LD_EXP 19
16946: PUSH
16947: LD_EXP 57
16951: AND
16952: IFFALSE 17081
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
// begin uc_side := 0 ;
16960: LD_ADDR_OWVAR 20
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// uc_nation := nation_arabian ;
16968: LD_ADDR_OWVAR 21
16972: PUSH
16973: LD_INT 2
16975: ST_TO_ADDR
// hc_gallery :=  ;
16976: LD_ADDR_OWVAR 33
16980: PUSH
16981: LD_STRING 
16983: ST_TO_ADDR
// hc_name :=  ;
16984: LD_ADDR_OWVAR 26
16988: PUSH
16989: LD_STRING 
16991: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 11
16997: PPUSH
16998: LD_INT 10
17000: PPUSH
17001: CALL_OW 380
// un := CreateHuman ;
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: CALL_OW 44
17014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 1
17022: PPUSH
17023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17027: LD_INT 35
17029: PPUSH
17030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17034: LD_VAR 0 1
17038: PPUSH
17039: LD_INT 22
17041: PUSH
17042: LD_OWVAR 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 69
17055: PPUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 74
17065: PPUSH
17066: CALL_OW 115
// until IsDead ( un ) ;
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 301
17079: IFFALSE 17027
// end ;
17081: PPOPN 1
17083: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17084: LD_EXP 19
17088: PUSH
17089: LD_EXP 59
17093: AND
17094: IFFALSE 17106
17096: GO 17098
17098: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17099: LD_STRING earthquake(getX(game), 0, 32)
17101: PPUSH
17102: CALL_OW 559
17106: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17107: LD_EXP 19
17111: PUSH
17112: LD_EXP 60
17116: AND
17117: IFFALSE 17208
17119: GO 17121
17121: DISABLE
17122: LD_INT 0
17124: PPUSH
// begin enable ;
17125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17126: LD_ADDR_VAR 0 1
17130: PUSH
17131: LD_INT 22
17133: PUSH
17134: LD_OWVAR 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 21
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 33
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: ST_TO_ADDR
// if not tmp then
17173: LD_VAR 0 1
17177: NOT
17178: IFFALSE 17182
// exit ;
17180: GO 17208
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17182: LD_VAR 0 1
17186: PUSH
17187: LD_INT 1
17189: PPUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 12
17199: ARRAY
17200: PPUSH
17201: LD_INT 1
17203: PPUSH
17204: CALL_OW 234
// end ;
17208: PPOPN 1
17210: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17211: LD_EXP 19
17215: PUSH
17216: LD_EXP 61
17220: AND
17221: IFFALSE 17362
17223: GO 17225
17225: DISABLE
17226: LD_INT 0
17228: PPUSH
17229: PPUSH
17230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17231: LD_ADDR_VAR 0 3
17235: PUSH
17236: LD_INT 22
17238: PUSH
17239: LD_OWVAR 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 25
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PPUSH
17262: CALL_OW 69
17266: ST_TO_ADDR
// if not tmp then
17267: LD_VAR 0 3
17271: NOT
17272: IFFALSE 17276
// exit ;
17274: GO 17362
// un := tmp [ rand ( 1 , tmp ) ] ;
17276: LD_ADDR_VAR 0 2
17280: PUSH
17281: LD_VAR 0 3
17285: PUSH
17286: LD_INT 1
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: CALL_OW 12
17298: ARRAY
17299: ST_TO_ADDR
// if Crawls ( un ) then
17300: LD_VAR 0 2
17304: PPUSH
17305: CALL_OW 318
17309: IFFALSE 17320
// ComWalk ( un ) ;
17311: LD_VAR 0 2
17315: PPUSH
17316: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17320: LD_VAR 0 2
17324: PPUSH
17325: LD_INT 9
17327: PPUSH
17328: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17332: LD_INT 28
17334: PPUSH
17335: LD_OWVAR 2
17339: PPUSH
17340: LD_INT 2
17342: PPUSH
17343: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17347: LD_INT 29
17349: PPUSH
17350: LD_OWVAR 2
17354: PPUSH
17355: LD_INT 2
17357: PPUSH
17358: CALL_OW 322
// end ;
17362: PPOPN 3
17364: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17365: LD_EXP 19
17369: PUSH
17370: LD_EXP 62
17374: AND
17375: IFFALSE 17486
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
17383: PPUSH
17384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17385: LD_ADDR_VAR 0 3
17389: PUSH
17390: LD_INT 22
17392: PUSH
17393: LD_OWVAR 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 25
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PPUSH
17416: CALL_OW 69
17420: ST_TO_ADDR
// if not tmp then
17421: LD_VAR 0 3
17425: NOT
17426: IFFALSE 17430
// exit ;
17428: GO 17486
// un := tmp [ rand ( 1 , tmp ) ] ;
17430: LD_ADDR_VAR 0 2
17434: PUSH
17435: LD_VAR 0 3
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// if Crawls ( un ) then
17454: LD_VAR 0 2
17458: PPUSH
17459: CALL_OW 318
17463: IFFALSE 17474
// ComWalk ( un ) ;
17465: LD_VAR 0 2
17469: PPUSH
17470: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17474: LD_VAR 0 2
17478: PPUSH
17479: LD_INT 8
17481: PPUSH
17482: CALL_OW 336
// end ;
17486: PPOPN 3
17488: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17489: LD_EXP 19
17493: PUSH
17494: LD_EXP 63
17498: AND
17499: IFFALSE 17643
17501: GO 17503
17503: DISABLE
17504: LD_INT 0
17506: PPUSH
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: LD_INT 34
17540: PUSH
17541: LD_INT 12
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 34
17550: PUSH
17551: LD_INT 51
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 34
17560: PUSH
17561: LD_INT 32
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: ST_TO_ADDR
// if not tmp then
17584: LD_VAR 0 2
17588: NOT
17589: IFFALSE 17593
// exit ;
17591: GO 17643
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17641
// if GetCargo ( i , mat_artifact ) = 0 then
17606: LD_VAR 0 1
17610: PPUSH
17611: LD_INT 4
17613: PPUSH
17614: CALL_OW 289
17618: PUSH
17619: LD_INT 0
17621: EQUAL
17622: IFFALSE 17639
// SetCargo ( i , mat_siberit , 100 ) ;
17624: LD_VAR 0 1
17628: PPUSH
17629: LD_INT 3
17631: PPUSH
17632: LD_INT 100
17634: PPUSH
17635: CALL_OW 290
17639: GO 17603
17641: POP
17642: POP
// end ;
17643: PPOPN 2
17645: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17646: LD_EXP 19
17650: PUSH
17651: LD_EXP 64
17655: AND
17656: IFFALSE 17839
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17665: LD_ADDR_VAR 0 2
17669: PUSH
17670: LD_INT 22
17672: PUSH
17673: LD_OWVAR 2
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PPUSH
17682: CALL_OW 69
17686: ST_TO_ADDR
// if not tmp then
17687: LD_VAR 0 2
17691: NOT
17692: IFFALSE 17696
// exit ;
17694: GO 17839
// for i := 1 to 2 do
17696: LD_ADDR_VAR 0 1
17700: PUSH
17701: DOUBLE
17702: LD_INT 1
17704: DEC
17705: ST_TO_ADDR
17706: LD_INT 2
17708: PUSH
17709: FOR_TO
17710: IFFALSE 17837
// begin uc_side := your_side ;
17712: LD_ADDR_OWVAR 20
17716: PUSH
17717: LD_OWVAR 2
17721: ST_TO_ADDR
// uc_nation := nation_american ;
17722: LD_ADDR_OWVAR 21
17726: PUSH
17727: LD_INT 1
17729: ST_TO_ADDR
// vc_chassis := us_morphling ;
17730: LD_ADDR_OWVAR 37
17734: PUSH
17735: LD_INT 5
17737: ST_TO_ADDR
// vc_engine := engine_siberite ;
17738: LD_ADDR_OWVAR 39
17742: PUSH
17743: LD_INT 3
17745: ST_TO_ADDR
// vc_control := control_computer ;
17746: LD_ADDR_OWVAR 38
17750: PUSH
17751: LD_INT 3
17753: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17754: LD_ADDR_OWVAR 40
17758: PUSH
17759: LD_INT 10
17761: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17762: LD_VAR 0 2
17766: PUSH
17767: LD_INT 1
17769: ARRAY
17770: PPUSH
17771: CALL_OW 310
17775: NOT
17776: IFFALSE 17823
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17778: CALL_OW 45
17782: PPUSH
17783: LD_VAR 0 2
17787: PUSH
17788: LD_INT 1
17790: ARRAY
17791: PPUSH
17792: CALL_OW 250
17796: PPUSH
17797: LD_VAR 0 2
17801: PUSH
17802: LD_INT 1
17804: ARRAY
17805: PPUSH
17806: CALL_OW 251
17810: PPUSH
17811: LD_INT 12
17813: PPUSH
17814: LD_INT 1
17816: PPUSH
17817: CALL_OW 50
17821: GO 17835
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17823: CALL_OW 45
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 51
// end ;
17835: GO 17709
17837: POP
17838: POP
// end ;
17839: PPOPN 2
17841: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17842: LD_EXP 19
17846: PUSH
17847: LD_EXP 65
17851: AND
17852: IFFALSE 18074
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
17861: PPUSH
17862: PPUSH
17863: PPUSH
17864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17865: LD_ADDR_VAR 0 6
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_OWVAR 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 21
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 3
17894: PUSH
17895: LD_INT 23
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 69
17918: ST_TO_ADDR
// if not tmp then
17919: LD_VAR 0 6
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 18074
// s1 := rand ( 1 , 4 ) ;
17928: LD_ADDR_VAR 0 2
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_INT 4
17938: PPUSH
17939: CALL_OW 12
17943: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17944: LD_ADDR_VAR 0 4
17948: PUSH
17949: LD_VAR 0 6
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 259
17967: ST_TO_ADDR
// if s1 = 1 then
17968: LD_VAR 0 2
17972: PUSH
17973: LD_INT 1
17975: EQUAL
17976: IFFALSE 17996
// s2 := rand ( 2 , 4 ) else
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_INT 2
17985: PPUSH
17986: LD_INT 4
17988: PPUSH
17989: CALL_OW 12
17993: ST_TO_ADDR
17994: GO 18004
// s2 := 1 ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_INT 1
18003: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18004: LD_ADDR_VAR 0 5
18008: PUSH
18009: LD_VAR 0 6
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: CALL_OW 259
18027: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18028: LD_VAR 0 6
18032: PUSH
18033: LD_INT 1
18035: ARRAY
18036: PPUSH
18037: LD_VAR 0 2
18041: PPUSH
18042: LD_VAR 0 5
18046: PPUSH
18047: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18051: LD_VAR 0 6
18055: PUSH
18056: LD_INT 1
18058: ARRAY
18059: PPUSH
18060: LD_VAR 0 3
18064: PPUSH
18065: LD_VAR 0 4
18069: PPUSH
18070: CALL_OW 237
// end ;
18074: PPOPN 6
18076: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18077: LD_EXP 19
18081: PUSH
18082: LD_EXP 66
18086: AND
18087: IFFALSE 18166
18089: GO 18091
18091: DISABLE
18092: LD_INT 0
18094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_INT 22
18102: PUSH
18103: LD_OWVAR 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 30
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: ST_TO_ADDR
// if not tmp then
18131: LD_VAR 0 1
18135: NOT
18136: IFFALSE 18140
// exit ;
18138: GO 18166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18140: LD_VAR 0 1
18144: PUSH
18145: LD_INT 1
18147: PPUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 12
18157: ARRAY
18158: PPUSH
18159: LD_INT 1
18161: PPUSH
18162: CALL_OW 234
// end ;
18166: PPOPN 1
18168: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18169: LD_EXP 19
18173: PUSH
18174: LD_EXP 67
18178: AND
18179: IFFALSE 18291
18181: GO 18183
18183: DISABLE
18184: LD_INT 0
18186: PPUSH
18187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18188: LD_ADDR_VAR 0 2
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_OWVAR 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 27
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 30
18220: PUSH
18221: LD_INT 26
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 30
18230: PUSH
18231: LD_INT 28
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: ST_TO_ADDR
// if not tmp then
18253: LD_VAR 0 2
18257: NOT
18258: IFFALSE 18262
// exit ;
18260: GO 18291
// for i in tmp do
18262: LD_ADDR_VAR 0 1
18266: PUSH
18267: LD_VAR 0 2
18271: PUSH
18272: FOR_IN
18273: IFFALSE 18289
// SetLives ( i , 1 ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_INT 1
18282: PPUSH
18283: CALL_OW 234
18287: GO 18272
18289: POP
18290: POP
// end ;
18291: PPOPN 2
18293: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18294: LD_EXP 19
18298: PUSH
18299: LD_EXP 68
18303: AND
18304: IFFALSE 18591
18306: GO 18308
18308: DISABLE
18309: LD_INT 0
18311: PPUSH
18312: PPUSH
18313: PPUSH
// begin i := rand ( 1 , 7 ) ;
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_INT 7
18324: PPUSH
18325: CALL_OW 12
18329: ST_TO_ADDR
// case i of 1 :
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: DOUBLE
18338: EQUAL
18339: IFTRUE 18343
18341: GO 18353
18343: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18344: LD_STRING earthquake(getX(game), 0, 32)
18346: PPUSH
18347: CALL_OW 559
18351: GO 18591
18353: LD_INT 2
18355: DOUBLE
18356: EQUAL
18357: IFTRUE 18361
18359: GO 18375
18361: POP
// begin ToLua ( displayStucuk(); ) ;
18362: LD_STRING displayStucuk();
18364: PPUSH
18365: CALL_OW 559
// ResetFog ;
18369: CALL_OW 335
// end ; 3 :
18373: GO 18591
18375: LD_INT 3
18377: DOUBLE
18378: EQUAL
18379: IFTRUE 18383
18381: GO 18487
18383: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_INT 22
18391: PUSH
18392: LD_OWVAR 2
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 25
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: ST_TO_ADDR
// if not tmp then
18420: LD_VAR 0 2
18424: NOT
18425: IFFALSE 18429
// exit ;
18427: GO 18591
// un := tmp [ rand ( 1 , tmp ) ] ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PUSH
18439: LD_INT 1
18441: PPUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: CALL_OW 12
18451: ARRAY
18452: ST_TO_ADDR
// if Crawls ( un ) then
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 318
18462: IFFALSE 18473
// ComWalk ( un ) ;
18464: LD_VAR 0 3
18468: PPUSH
18469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18473: LD_VAR 0 3
18477: PPUSH
18478: LD_INT 8
18480: PPUSH
18481: CALL_OW 336
// end ; 4 :
18485: GO 18591
18487: LD_INT 4
18489: DOUBLE
18490: EQUAL
18491: IFTRUE 18495
18493: GO 18569
18495: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18496: LD_ADDR_VAR 0 2
18500: PUSH
18501: LD_INT 22
18503: PUSH
18504: LD_OWVAR 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 30
18515: PUSH
18516: LD_INT 29
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: ST_TO_ADDR
// if not tmp then
18532: LD_VAR 0 2
18536: NOT
18537: IFFALSE 18541
// exit ;
18539: GO 18591
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18541: LD_VAR 0 2
18545: PUSH
18546: LD_INT 1
18548: ARRAY
18549: PPUSH
18550: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18554: LD_VAR 0 2
18558: PUSH
18559: LD_INT 1
18561: ARRAY
18562: PPUSH
18563: CALL_OW 65
// end ; 5 .. 7 :
18567: GO 18591
18569: LD_INT 5
18571: DOUBLE
18572: GREATEREQUAL
18573: IFFALSE 18581
18575: LD_INT 7
18577: DOUBLE
18578: LESSEQUAL
18579: IFTRUE 18583
18581: GO 18590
18583: POP
// StreamSibBomb ; end ;
18584: CALL 14828 0 0
18588: GO 18591
18590: POP
// end ;
18591: PPOPN 3
18593: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18594: LD_EXP 19
18598: PUSH
18599: LD_EXP 69
18603: AND
18604: IFFALSE 18760
18606: GO 18608
18608: DISABLE
18609: LD_INT 0
18611: PPUSH
18612: PPUSH
18613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 81
18621: PUSH
18622: LD_OWVAR 2
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: LD_INT 21
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 21
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
// if not tmp then
18668: LD_VAR 0 2
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 18760
// p := 0 ;
18677: LD_ADDR_VAR 0 3
18681: PUSH
18682: LD_INT 0
18684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18685: LD_INT 35
18687: PPUSH
18688: CALL_OW 67
// p := p + 1 ;
18692: LD_ADDR_VAR 0 3
18696: PUSH
18697: LD_VAR 0 3
18701: PUSH
18702: LD_INT 1
18704: PLUS
18705: ST_TO_ADDR
// for i in tmp do
18706: LD_ADDR_VAR 0 1
18710: PUSH
18711: LD_VAR 0 2
18715: PUSH
18716: FOR_IN
18717: IFFALSE 18748
// if GetLives ( i ) < 1000 then
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 256
18728: PUSH
18729: LD_INT 1000
18731: LESS
18732: IFFALSE 18746
// SetLives ( i , 1000 ) ;
18734: LD_VAR 0 1
18738: PPUSH
18739: LD_INT 1000
18741: PPUSH
18742: CALL_OW 234
18746: GO 18716
18748: POP
18749: POP
// until p > 20 ;
18750: LD_VAR 0 3
18754: PUSH
18755: LD_INT 20
18757: GREATER
18758: IFFALSE 18685
// end ;
18760: PPOPN 3
18762: END
// every 0 0$1 trigger StreamModeActive and sTime do
18763: LD_EXP 19
18767: PUSH
18768: LD_EXP 70
18772: AND
18773: IFFALSE 18808
18775: GO 18777
18777: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18778: LD_INT 28
18780: PPUSH
18781: LD_OWVAR 2
18785: PPUSH
18786: LD_INT 2
18788: PPUSH
18789: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18793: LD_INT 30
18795: PPUSH
18796: LD_OWVAR 2
18800: PPUSH
18801: LD_INT 2
18803: PPUSH
18804: CALL_OW 322
// end ;
18808: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18809: LD_EXP 19
18813: PUSH
18814: LD_EXP 71
18818: AND
18819: IFFALSE 18940
18821: GO 18823
18823: DISABLE
18824: LD_INT 0
18826: PPUSH
18827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18828: LD_ADDR_VAR 0 2
18832: PUSH
18833: LD_INT 22
18835: PUSH
18836: LD_OWVAR 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 21
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: LD_INT 23
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: PPUSH
18877: CALL_OW 69
18881: ST_TO_ADDR
// if not tmp then
18882: LD_VAR 0 2
18886: NOT
18887: IFFALSE 18891
// exit ;
18889: GO 18940
// for i in tmp do
18891: LD_ADDR_VAR 0 1
18895: PUSH
18896: LD_VAR 0 2
18900: PUSH
18901: FOR_IN
18902: IFFALSE 18938
// begin if Crawls ( i ) then
18904: LD_VAR 0 1
18908: PPUSH
18909: CALL_OW 318
18913: IFFALSE 18924
// ComWalk ( i ) ;
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 138
// SetClass ( i , 2 ) ;
18924: LD_VAR 0 1
18928: PPUSH
18929: LD_INT 2
18931: PPUSH
18932: CALL_OW 336
// end ;
18936: GO 18901
18938: POP
18939: POP
// end ;
18940: PPOPN 2
18942: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18943: LD_EXP 19
18947: PUSH
18948: LD_EXP 72
18952: AND
18953: IFFALSE 19241
18955: GO 18957
18957: DISABLE
18958: LD_INT 0
18960: PPUSH
18961: PPUSH
18962: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18963: LD_OWVAR 2
18967: PPUSH
18968: LD_INT 9
18970: PPUSH
18971: LD_INT 1
18973: PPUSH
18974: LD_INT 1
18976: PPUSH
18977: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18981: LD_INT 9
18983: PPUSH
18984: LD_OWVAR 2
18988: PPUSH
18989: CALL_OW 343
// uc_side := 9 ;
18993: LD_ADDR_OWVAR 20
18997: PUSH
18998: LD_INT 9
19000: ST_TO_ADDR
// uc_nation := 2 ;
19001: LD_ADDR_OWVAR 21
19005: PUSH
19006: LD_INT 2
19008: ST_TO_ADDR
// hc_name := Dark Warrior ;
19009: LD_ADDR_OWVAR 26
19013: PUSH
19014: LD_STRING Dark Warrior
19016: ST_TO_ADDR
// hc_gallery :=  ;
19017: LD_ADDR_OWVAR 33
19021: PUSH
19022: LD_STRING 
19024: ST_TO_ADDR
// hc_noskilllimit := true ;
19025: LD_ADDR_OWVAR 76
19029: PUSH
19030: LD_INT 1
19032: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19033: LD_ADDR_OWVAR 31
19037: PUSH
19038: LD_INT 30
19040: PUSH
19041: LD_INT 30
19043: PUSH
19044: LD_INT 30
19046: PUSH
19047: LD_INT 30
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: ST_TO_ADDR
// un := CreateHuman ;
19056: LD_ADDR_VAR 0 3
19060: PUSH
19061: CALL_OW 44
19065: ST_TO_ADDR
// hc_noskilllimit := false ;
19066: LD_ADDR_OWVAR 76
19070: PUSH
19071: LD_INT 0
19073: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19074: LD_VAR 0 3
19078: PPUSH
19079: LD_INT 1
19081: PPUSH
19082: CALL_OW 51
// ToLua ( playRanger() ) ;
19086: LD_STRING playRanger()
19088: PPUSH
19089: CALL_OW 559
// p := 0 ;
19093: LD_ADDR_VAR 0 2
19097: PUSH
19098: LD_INT 0
19100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19101: LD_INT 35
19103: PPUSH
19104: CALL_OW 67
// p := p + 1 ;
19108: LD_ADDR_VAR 0 2
19112: PUSH
19113: LD_VAR 0 2
19117: PUSH
19118: LD_INT 1
19120: PLUS
19121: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19122: LD_VAR 0 3
19126: PPUSH
19127: CALL_OW 256
19131: PUSH
19132: LD_INT 1000
19134: LESS
19135: IFFALSE 19149
// SetLives ( un , 1000 ) ;
19137: LD_VAR 0 3
19141: PPUSH
19142: LD_INT 1000
19144: PPUSH
19145: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 81
19156: PUSH
19157: LD_OWVAR 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 91
19168: PUSH
19169: LD_VAR 0 3
19173: PUSH
19174: LD_INT 30
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: CALL_OW 74
19200: PPUSH
19201: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19205: LD_VAR 0 2
19209: PUSH
19210: LD_INT 80
19212: GREATER
19213: PUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: CALL_OW 301
19223: OR
19224: IFFALSE 19101
// if un then
19226: LD_VAR 0 3
19230: IFFALSE 19241
// RemoveUnit ( un ) ;
19232: LD_VAR 0 3
19236: PPUSH
19237: CALL_OW 64
// end ;
19241: PPOPN 3
19243: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19244: LD_EXP 73
19248: IFFALSE 19364
19250: GO 19252
19252: DISABLE
19253: LD_INT 0
19255: PPUSH
19256: PPUSH
19257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: LD_INT 81
19265: PUSH
19266: LD_OWVAR 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 21
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// if not tmp then
19294: LD_VAR 0 2
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19364
// ToLua ( playComputer() ) ;
19303: LD_STRING playComputer()
19305: PPUSH
19306: CALL_OW 559
// for i in tmp do
19310: LD_ADDR_VAR 0 1
19314: PUSH
19315: LD_VAR 0 2
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19362
// for j := 1 to 4 do
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_INT 4
19335: PUSH
19336: FOR_TO
19337: IFFALSE 19358
// SetSkill ( i , j , 10 ) ;
19339: LD_VAR 0 1
19343: PPUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 10
19351: PPUSH
19352: CALL_OW 237
19356: GO 19336
19358: POP
19359: POP
19360: GO 19320
19362: POP
19363: POP
// end ;
19364: PPOPN 3
19366: END
// every 0 0$1 trigger s30 do var i , tmp ;
19367: LD_EXP 74
19371: IFFALSE 19440
19373: GO 19375
19375: DISABLE
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19380: LD_ADDR_VAR 0 2
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_OWVAR 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: ST_TO_ADDR
// if not tmp then
19402: LD_VAR 0 2
19406: NOT
19407: IFFALSE 19411
// exit ;
19409: GO 19440
// for i in tmp do
19411: LD_ADDR_VAR 0 1
19415: PUSH
19416: LD_VAR 0 2
19420: PUSH
19421: FOR_IN
19422: IFFALSE 19438
// SetLives ( i , 300 ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: LD_INT 300
19431: PPUSH
19432: CALL_OW 234
19436: GO 19421
19438: POP
19439: POP
// end ;
19440: PPOPN 2
19442: END
// every 0 0$1 trigger s60 do var i , tmp ;
19443: LD_EXP 75
19447: IFFALSE 19516
19449: GO 19451
19451: DISABLE
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_INT 22
19463: PUSH
19464: LD_OWVAR 2
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: ST_TO_ADDR
// if not tmp then
19478: LD_VAR 0 2
19482: NOT
19483: IFFALSE 19487
// exit ;
19485: GO 19516
// for i in tmp do
19487: LD_ADDR_VAR 0 1
19491: PUSH
19492: LD_VAR 0 2
19496: PUSH
19497: FOR_IN
19498: IFFALSE 19514
// SetLives ( i , 600 ) ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_INT 600
19507: PPUSH
19508: CALL_OW 234
19512: GO 19497
19514: POP
19515: POP
// end ;
19516: PPOPN 2
19518: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19519: LD_INT 0
19521: PPUSH
// case cmd of 301 :
19522: LD_VAR 0 1
19526: PUSH
19527: LD_INT 301
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19567
19535: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19536: LD_VAR 0 6
19540: PPUSH
19541: LD_VAR 0 7
19545: PPUSH
19546: LD_VAR 0 8
19550: PPUSH
19551: LD_VAR 0 4
19555: PPUSH
19556: LD_VAR 0 5
19560: PPUSH
19561: CALL 20768 0 5
19565: GO 19688
19567: LD_INT 302
19569: DOUBLE
19570: EQUAL
19571: IFTRUE 19575
19573: GO 19612
19575: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19576: LD_VAR 0 6
19580: PPUSH
19581: LD_VAR 0 7
19585: PPUSH
19586: LD_VAR 0 8
19590: PPUSH
19591: LD_VAR 0 9
19595: PPUSH
19596: LD_VAR 0 4
19600: PPUSH
19601: LD_VAR 0 5
19605: PPUSH
19606: CALL 20859 0 6
19610: GO 19688
19612: LD_INT 303
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19657
19620: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19621: LD_VAR 0 6
19625: PPUSH
19626: LD_VAR 0 7
19630: PPUSH
19631: LD_VAR 0 8
19635: PPUSH
19636: LD_VAR 0 9
19640: PPUSH
19641: LD_VAR 0 4
19645: PPUSH
19646: LD_VAR 0 5
19650: PPUSH
19651: CALL 19693 0 6
19655: GO 19688
19657: LD_INT 304
19659: DOUBLE
19660: EQUAL
19661: IFTRUE 19665
19663: GO 19687
19665: POP
// hHackTeleport ( unit , x , y ) ; end ;
19666: LD_VAR 0 2
19670: PPUSH
19671: LD_VAR 0 4
19675: PPUSH
19676: LD_VAR 0 5
19680: PPUSH
19681: CALL 21452 0 3
19685: GO 19688
19687: POP
// end ;
19688: LD_VAR 0 12
19692: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19693: LD_INT 0
19695: PPUSH
19696: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19697: LD_VAR 0 1
19701: PUSH
19702: LD_INT 1
19704: LESS
19705: PUSH
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 3
19713: GREATER
19714: OR
19715: PUSH
19716: LD_VAR 0 5
19720: PPUSH
19721: LD_VAR 0 6
19725: PPUSH
19726: CALL_OW 428
19730: OR
19731: IFFALSE 19735
// exit ;
19733: GO 20455
// uc_side := your_side ;
19735: LD_ADDR_OWVAR 20
19739: PUSH
19740: LD_OWVAR 2
19744: ST_TO_ADDR
// uc_nation := nation ;
19745: LD_ADDR_OWVAR 21
19749: PUSH
19750: LD_VAR 0 1
19754: ST_TO_ADDR
// bc_level = 1 ;
19755: LD_ADDR_OWVAR 43
19759: PUSH
19760: LD_INT 1
19762: ST_TO_ADDR
// case btype of 1 :
19763: LD_VAR 0 2
19767: PUSH
19768: LD_INT 1
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19787
19776: POP
// bc_type := b_depot ; 2 :
19777: LD_ADDR_OWVAR 42
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
19785: GO 20399
19787: LD_INT 2
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19806
19795: POP
// bc_type := b_warehouse ; 3 :
19796: LD_ADDR_OWVAR 42
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
19804: GO 20399
19806: LD_INT 3
19808: DOUBLE
19809: EQUAL
19810: IFTRUE 19814
19812: GO 19825
19814: POP
// bc_type := b_lab ; 4 .. 9 :
19815: LD_ADDR_OWVAR 42
19819: PUSH
19820: LD_INT 6
19822: ST_TO_ADDR
19823: GO 20399
19825: LD_INT 4
19827: DOUBLE
19828: GREATEREQUAL
19829: IFFALSE 19837
19831: LD_INT 9
19833: DOUBLE
19834: LESSEQUAL
19835: IFTRUE 19839
19837: GO 19891
19839: POP
// begin bc_type := b_lab_half ;
19840: LD_ADDR_OWVAR 42
19844: PUSH
19845: LD_INT 7
19847: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19848: LD_ADDR_OWVAR 44
19852: PUSH
19853: LD_INT 10
19855: PUSH
19856: LD_INT 11
19858: PUSH
19859: LD_INT 12
19861: PUSH
19862: LD_INT 15
19864: PUSH
19865: LD_INT 14
19867: PUSH
19868: LD_INT 13
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: PUSH
19879: LD_VAR 0 2
19883: PUSH
19884: LD_INT 3
19886: MINUS
19887: ARRAY
19888: ST_TO_ADDR
// end ; 10 .. 13 :
19889: GO 20399
19891: LD_INT 10
19893: DOUBLE
19894: GREATEREQUAL
19895: IFFALSE 19903
19897: LD_INT 13
19899: DOUBLE
19900: LESSEQUAL
19901: IFTRUE 19905
19903: GO 19982
19905: POP
// begin bc_type := b_lab_full ;
19906: LD_ADDR_OWVAR 42
19910: PUSH
19911: LD_INT 8
19913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19914: LD_ADDR_OWVAR 44
19918: PUSH
19919: LD_INT 10
19921: PUSH
19922: LD_INT 12
19924: PUSH
19925: LD_INT 14
19927: PUSH
19928: LD_INT 13
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: LD_VAR 0 2
19941: PUSH
19942: LD_INT 9
19944: MINUS
19945: ARRAY
19946: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19947: LD_ADDR_OWVAR 45
19951: PUSH
19952: LD_INT 11
19954: PUSH
19955: LD_INT 15
19957: PUSH
19958: LD_INT 12
19960: PUSH
19961: LD_INT 15
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: PUSH
19970: LD_VAR 0 2
19974: PUSH
19975: LD_INT 9
19977: MINUS
19978: ARRAY
19979: ST_TO_ADDR
// end ; 14 :
19980: GO 20399
19982: LD_INT 14
19984: DOUBLE
19985: EQUAL
19986: IFTRUE 19990
19988: GO 20001
19990: POP
// bc_type := b_workshop ; 15 :
19991: LD_ADDR_OWVAR 42
19995: PUSH
19996: LD_INT 2
19998: ST_TO_ADDR
19999: GO 20399
20001: LD_INT 15
20003: DOUBLE
20004: EQUAL
20005: IFTRUE 20009
20007: GO 20020
20009: POP
// bc_type := b_factory ; 16 :
20010: LD_ADDR_OWVAR 42
20014: PUSH
20015: LD_INT 3
20017: ST_TO_ADDR
20018: GO 20399
20020: LD_INT 16
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20039
20028: POP
// bc_type := b_ext_gun ; 17 :
20029: LD_ADDR_OWVAR 42
20033: PUSH
20034: LD_INT 17
20036: ST_TO_ADDR
20037: GO 20399
20039: LD_INT 17
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20075
20047: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20048: LD_ADDR_OWVAR 42
20052: PUSH
20053: LD_INT 19
20055: PUSH
20056: LD_INT 23
20058: PUSH
20059: LD_INT 19
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: PUSH
20067: LD_VAR 0 1
20071: ARRAY
20072: ST_TO_ADDR
20073: GO 20399
20075: LD_INT 18
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20094
20083: POP
// bc_type := b_ext_radar ; 19 :
20084: LD_ADDR_OWVAR 42
20088: PUSH
20089: LD_INT 20
20091: ST_TO_ADDR
20092: GO 20399
20094: LD_INT 19
20096: DOUBLE
20097: EQUAL
20098: IFTRUE 20102
20100: GO 20113
20102: POP
// bc_type := b_ext_radio ; 20 :
20103: LD_ADDR_OWVAR 42
20107: PUSH
20108: LD_INT 22
20110: ST_TO_ADDR
20111: GO 20399
20113: LD_INT 20
20115: DOUBLE
20116: EQUAL
20117: IFTRUE 20121
20119: GO 20132
20121: POP
// bc_type := b_ext_siberium ; 21 :
20122: LD_ADDR_OWVAR 42
20126: PUSH
20127: LD_INT 21
20129: ST_TO_ADDR
20130: GO 20399
20132: LD_INT 21
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20151
20140: POP
// bc_type := b_ext_computer ; 22 :
20141: LD_ADDR_OWVAR 42
20145: PUSH
20146: LD_INT 24
20148: ST_TO_ADDR
20149: GO 20399
20151: LD_INT 22
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20170
20159: POP
// bc_type := b_ext_track ; 23 :
20160: LD_ADDR_OWVAR 42
20164: PUSH
20165: LD_INT 16
20167: ST_TO_ADDR
20168: GO 20399
20170: LD_INT 23
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20189
20178: POP
// bc_type := b_ext_laser ; 24 :
20179: LD_ADDR_OWVAR 42
20183: PUSH
20184: LD_INT 25
20186: ST_TO_ADDR
20187: GO 20399
20189: LD_INT 24
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20208
20197: POP
// bc_type := b_control_tower ; 25 :
20198: LD_ADDR_OWVAR 42
20202: PUSH
20203: LD_INT 36
20205: ST_TO_ADDR
20206: GO 20399
20208: LD_INT 25
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20227
20216: POP
// bc_type := b_breastwork ; 26 :
20217: LD_ADDR_OWVAR 42
20221: PUSH
20222: LD_INT 31
20224: ST_TO_ADDR
20225: GO 20399
20227: LD_INT 26
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20246
20235: POP
// bc_type := b_bunker ; 27 :
20236: LD_ADDR_OWVAR 42
20240: PUSH
20241: LD_INT 32
20243: ST_TO_ADDR
20244: GO 20399
20246: LD_INT 27
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20265
20254: POP
// bc_type := b_turret ; 28 :
20255: LD_ADDR_OWVAR 42
20259: PUSH
20260: LD_INT 33
20262: ST_TO_ADDR
20263: GO 20399
20265: LD_INT 28
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20284
20273: POP
// bc_type := b_armoury ; 29 :
20274: LD_ADDR_OWVAR 42
20278: PUSH
20279: LD_INT 4
20281: ST_TO_ADDR
20282: GO 20399
20284: LD_INT 29
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20303
20292: POP
// bc_type := b_barracks ; 30 :
20293: LD_ADDR_OWVAR 42
20297: PUSH
20298: LD_INT 5
20300: ST_TO_ADDR
20301: GO 20399
20303: LD_INT 30
20305: DOUBLE
20306: EQUAL
20307: IFTRUE 20311
20309: GO 20322
20311: POP
// bc_type := b_solar_power ; 31 :
20312: LD_ADDR_OWVAR 42
20316: PUSH
20317: LD_INT 27
20319: ST_TO_ADDR
20320: GO 20399
20322: LD_INT 31
20324: DOUBLE
20325: EQUAL
20326: IFTRUE 20330
20328: GO 20341
20330: POP
// bc_type := b_oil_power ; 32 :
20331: LD_ADDR_OWVAR 42
20335: PUSH
20336: LD_INT 26
20338: ST_TO_ADDR
20339: GO 20399
20341: LD_INT 32
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20360
20349: POP
// bc_type := b_siberite_power ; 33 :
20350: LD_ADDR_OWVAR 42
20354: PUSH
20355: LD_INT 28
20357: ST_TO_ADDR
20358: GO 20399
20360: LD_INT 33
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20379
20368: POP
// bc_type := b_oil_mine ; 34 :
20369: LD_ADDR_OWVAR 42
20373: PUSH
20374: LD_INT 29
20376: ST_TO_ADDR
20377: GO 20399
20379: LD_INT 34
20381: DOUBLE
20382: EQUAL
20383: IFTRUE 20387
20385: GO 20398
20387: POP
// bc_type := b_siberite_mine ; end ;
20388: LD_ADDR_OWVAR 42
20392: PUSH
20393: LD_INT 30
20395: ST_TO_ADDR
20396: GO 20399
20398: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20399: LD_ADDR_VAR 0 8
20403: PUSH
20404: LD_VAR 0 5
20408: PPUSH
20409: LD_VAR 0 6
20413: PPUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 47
20423: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20424: LD_OWVAR 42
20428: PUSH
20429: LD_INT 32
20431: PUSH
20432: LD_INT 33
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: IN
20439: IFFALSE 20455
// PlaceWeaponTurret ( b , weapon ) ;
20441: LD_VAR 0 8
20445: PPUSH
20446: LD_VAR 0 4
20450: PPUSH
20451: CALL_OW 431
// end ;
20455: LD_VAR 0 7
20459: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20466: LD_ADDR_VAR 0 4
20470: PUSH
20471: LD_INT 22
20473: PUSH
20474: LD_OWVAR 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: LD_INT 30
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PPUSH
20515: CALL_OW 69
20519: ST_TO_ADDR
// if not tmp then
20520: LD_VAR 0 4
20524: NOT
20525: IFFALSE 20529
// exit ;
20527: GO 20588
// for i in tmp do
20529: LD_ADDR_VAR 0 2
20533: PUSH
20534: LD_VAR 0 4
20538: PUSH
20539: FOR_IN
20540: IFFALSE 20586
// for j = 1 to 3 do
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: DOUBLE
20548: LD_INT 1
20550: DEC
20551: ST_TO_ADDR
20552: LD_INT 3
20554: PUSH
20555: FOR_TO
20556: IFFALSE 20582
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 274
20567: PPUSH
20568: LD_VAR 0 3
20572: PPUSH
20573: LD_INT 99999
20575: PPUSH
20576: CALL_OW 277
20580: GO 20555
20582: POP
20583: POP
20584: GO 20539
20586: POP
20587: POP
// end ;
20588: LD_VAR 0 1
20592: RET
// export function hHackSetLevel10 ; var i , j ; begin
20593: LD_INT 0
20595: PPUSH
20596: PPUSH
20597: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20598: LD_ADDR_VAR 0 2
20602: PUSH
20603: LD_INT 21
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PPUSH
20613: CALL_OW 69
20617: PUSH
20618: FOR_IN
20619: IFFALSE 20671
// if IsSelected ( i ) then
20621: LD_VAR 0 2
20625: PPUSH
20626: CALL_OW 306
20630: IFFALSE 20669
// begin for j := 1 to 4 do
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: DOUBLE
20638: LD_INT 1
20640: DEC
20641: ST_TO_ADDR
20642: LD_INT 4
20644: PUSH
20645: FOR_TO
20646: IFFALSE 20667
// SetSkill ( i , j , 10 ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_VAR 0 3
20657: PPUSH
20658: LD_INT 10
20660: PPUSH
20661: CALL_OW 237
20665: GO 20645
20667: POP
20668: POP
// end ;
20669: GO 20618
20671: POP
20672: POP
// end ;
20673: LD_VAR 0 1
20677: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20678: LD_INT 0
20680: PPUSH
20681: PPUSH
20682: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20683: LD_ADDR_VAR 0 2
20687: PUSH
20688: LD_INT 22
20690: PUSH
20691: LD_OWVAR 2
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 21
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PPUSH
20714: CALL_OW 69
20718: PUSH
20719: FOR_IN
20720: IFFALSE 20761
// begin for j := 1 to 4 do
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: DOUBLE
20728: LD_INT 1
20730: DEC
20731: ST_TO_ADDR
20732: LD_INT 4
20734: PUSH
20735: FOR_TO
20736: IFFALSE 20757
// SetSkill ( i , j , 10 ) ;
20738: LD_VAR 0 2
20742: PPUSH
20743: LD_VAR 0 3
20747: PPUSH
20748: LD_INT 10
20750: PPUSH
20751: CALL_OW 237
20755: GO 20735
20757: POP
20758: POP
// end ;
20759: GO 20719
20761: POP
20762: POP
// end ;
20763: LD_VAR 0 1
20767: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20768: LD_INT 0
20770: PPUSH
// uc_side := your_side ;
20771: LD_ADDR_OWVAR 20
20775: PUSH
20776: LD_OWVAR 2
20780: ST_TO_ADDR
// uc_nation := nation ;
20781: LD_ADDR_OWVAR 21
20785: PUSH
20786: LD_VAR 0 1
20790: ST_TO_ADDR
// InitHc ;
20791: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20795: LD_INT 0
20797: PPUSH
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20812: LD_VAR 0 4
20816: PPUSH
20817: LD_VAR 0 5
20821: PPUSH
20822: CALL_OW 428
20826: PUSH
20827: LD_INT 0
20829: EQUAL
20830: IFFALSE 20854
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20832: CALL_OW 44
20836: PPUSH
20837: LD_VAR 0 4
20841: PPUSH
20842: LD_VAR 0 5
20846: PPUSH
20847: LD_INT 1
20849: PPUSH
20850: CALL_OW 48
// end ;
20854: LD_VAR 0 6
20858: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
// uc_side := your_side ;
20863: LD_ADDR_OWVAR 20
20867: PUSH
20868: LD_OWVAR 2
20872: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20873: LD_VAR 0 1
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 3
20886: PUSH
20887: LD_INT 4
20889: PUSH
20890: LD_INT 5
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: IN
20900: IFFALSE 20912
// uc_nation := nation_american else
20902: LD_ADDR_OWVAR 21
20906: PUSH
20907: LD_INT 1
20909: ST_TO_ADDR
20910: GO 20955
// if chassis in [ 11 , 12 , 13 , 14 ] then
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 11
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: LD_INT 13
20925: PUSH
20926: LD_INT 14
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: IN
20935: IFFALSE 20947
// uc_nation := nation_arabian else
20937: LD_ADDR_OWVAR 21
20941: PUSH
20942: LD_INT 2
20944: ST_TO_ADDR
20945: GO 20955
// uc_nation := nation_russian ;
20947: LD_ADDR_OWVAR 21
20951: PUSH
20952: LD_INT 3
20954: ST_TO_ADDR
// vc_chassis := chassis ;
20955: LD_ADDR_OWVAR 37
20959: PUSH
20960: LD_VAR 0 1
20964: ST_TO_ADDR
// vc_engine := engine ;
20965: LD_ADDR_OWVAR 39
20969: PUSH
20970: LD_VAR 0 2
20974: ST_TO_ADDR
// vc_control := control ;
20975: LD_ADDR_OWVAR 38
20979: PUSH
20980: LD_VAR 0 3
20984: ST_TO_ADDR
// vc_weapon := weapon ;
20985: LD_ADDR_OWVAR 40
20989: PUSH
20990: LD_VAR 0 4
20994: ST_TO_ADDR
// un := CreateVehicle ;
20995: LD_ADDR_VAR 0 8
20999: PUSH
21000: CALL_OW 45
21004: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21005: LD_VAR 0 8
21009: PPUSH
21010: LD_INT 0
21012: PPUSH
21013: LD_INT 5
21015: PPUSH
21016: CALL_OW 12
21020: PPUSH
21021: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21025: LD_VAR 0 8
21029: PPUSH
21030: LD_VAR 0 5
21034: PPUSH
21035: LD_VAR 0 6
21039: PPUSH
21040: LD_INT 1
21042: PPUSH
21043: CALL_OW 48
// end ;
21047: LD_VAR 0 7
21051: RET
// export hInvincible ; every 1 do
21052: GO 21054
21054: DISABLE
// hInvincible := [ ] ;
21055: LD_ADDR_EXP 76
21059: PUSH
21060: EMPTY
21061: ST_TO_ADDR
21062: END
// every 10 do var i ;
21063: GO 21065
21065: DISABLE
21066: LD_INT 0
21068: PPUSH
// begin enable ;
21069: ENABLE
// if not hInvincible then
21070: LD_EXP 76
21074: NOT
21075: IFFALSE 21079
// exit ;
21077: GO 21123
// for i in hInvincible do
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_EXP 76
21088: PUSH
21089: FOR_IN
21090: IFFALSE 21121
// if GetLives ( i ) < 1000 then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 256
21101: PUSH
21102: LD_INT 1000
21104: LESS
21105: IFFALSE 21119
// SetLives ( i , 1000 ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_INT 1000
21114: PPUSH
21115: CALL_OW 234
21119: GO 21089
21121: POP
21122: POP
// end ;
21123: PPOPN 1
21125: END
// export function hHackInvincible ; var i ; begin
21126: LD_INT 0
21128: PPUSH
21129: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 21
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: PPUSH
21163: CALL_OW 69
21167: PUSH
21168: FOR_IN
21169: IFFALSE 21230
// if IsSelected ( i ) then
21171: LD_VAR 0 2
21175: PPUSH
21176: CALL_OW 306
21180: IFFALSE 21228
// begin if i in hInvincible then
21182: LD_VAR 0 2
21186: PUSH
21187: LD_EXP 76
21191: IN
21192: IFFALSE 21212
// hInvincible := hInvincible diff i else
21194: LD_ADDR_EXP 76
21198: PUSH
21199: LD_EXP 76
21203: PUSH
21204: LD_VAR 0 2
21208: DIFF
21209: ST_TO_ADDR
21210: GO 21228
// hInvincible := hInvincible union i ;
21212: LD_ADDR_EXP 76
21216: PUSH
21217: LD_EXP 76
21221: PUSH
21222: LD_VAR 0 2
21226: UNION
21227: ST_TO_ADDR
// end ;
21228: GO 21168
21230: POP
21231: POP
// end ;
21232: LD_VAR 0 1
21236: RET
// export function hHackInvisible ; var i , j ; begin
21237: LD_INT 0
21239: PPUSH
21240: PPUSH
21241: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21242: LD_ADDR_VAR 0 2
21246: PUSH
21247: LD_INT 21
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PPUSH
21257: CALL_OW 69
21261: PUSH
21262: FOR_IN
21263: IFFALSE 21287
// if IsSelected ( i ) then
21265: LD_VAR 0 2
21269: PPUSH
21270: CALL_OW 306
21274: IFFALSE 21285
// ComForceInvisible ( i ) ;
21276: LD_VAR 0 2
21280: PPUSH
21281: CALL_OW 496
21285: GO 21262
21287: POP
21288: POP
// end ;
21289: LD_VAR 0 1
21293: RET
// export function hHackChangeYourSide ; begin
21294: LD_INT 0
21296: PPUSH
// if your_side = 8 then
21297: LD_OWVAR 2
21301: PUSH
21302: LD_INT 8
21304: EQUAL
21305: IFFALSE 21317
// your_side := 0 else
21307: LD_ADDR_OWVAR 2
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
21315: GO 21331
// your_side := your_side + 1 ;
21317: LD_ADDR_OWVAR 2
21321: PUSH
21322: LD_OWVAR 2
21326: PUSH
21327: LD_INT 1
21329: PLUS
21330: ST_TO_ADDR
// end ;
21331: LD_VAR 0 1
21335: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21336: LD_INT 0
21338: PPUSH
21339: PPUSH
21340: PPUSH
// for i in all_units do
21341: LD_ADDR_VAR 0 2
21345: PUSH
21346: LD_OWVAR 3
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21430
// if IsSelected ( i ) then
21354: LD_VAR 0 2
21358: PPUSH
21359: CALL_OW 306
21363: IFFALSE 21428
// begin j := GetSide ( i ) ;
21365: LD_ADDR_VAR 0 3
21369: PUSH
21370: LD_VAR 0 2
21374: PPUSH
21375: CALL_OW 255
21379: ST_TO_ADDR
// if j = 8 then
21380: LD_VAR 0 3
21384: PUSH
21385: LD_INT 8
21387: EQUAL
21388: IFFALSE 21400
// j := 0 else
21390: LD_ADDR_VAR 0 3
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
21398: GO 21414
// j := j + 1 ;
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 1
21412: PLUS
21413: ST_TO_ADDR
// SetSide ( i , j ) ;
21414: LD_VAR 0 2
21418: PPUSH
21419: LD_VAR 0 3
21423: PPUSH
21424: CALL_OW 235
// end ;
21428: GO 21351
21430: POP
21431: POP
// end ;
21432: LD_VAR 0 1
21436: RET
// export function hHackFog ; begin
21437: LD_INT 0
21439: PPUSH
// FogOff ( true ) ;
21440: LD_INT 1
21442: PPUSH
21443: CALL_OW 344
// end ;
21447: LD_VAR 0 1
21451: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21452: LD_INT 0
21454: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21455: LD_VAR 0 1
21459: PPUSH
21460: LD_VAR 0 2
21464: PPUSH
21465: LD_VAR 0 3
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: CALL_OW 483
// CenterOnXY ( x , y ) ;
21480: LD_VAR 0 2
21484: PPUSH
21485: LD_VAR 0 3
21489: PPUSH
21490: CALL_OW 84
// end ; end_of_file
21494: LD_VAR 0 4
21498: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21499: LD_INT 0
21501: PPUSH
21502: PPUSH
// if exist_mode then
21503: LD_VAR 0 2
21507: IFFALSE 21532
// unit := CreateCharacter ( prefix & ident ) else
21509: LD_ADDR_VAR 0 5
21513: PUSH
21514: LD_VAR 0 3
21518: PUSH
21519: LD_VAR 0 1
21523: STR
21524: PPUSH
21525: CALL_OW 34
21529: ST_TO_ADDR
21530: GO 21547
// unit := NewCharacter ( ident ) ;
21532: LD_ADDR_VAR 0 5
21536: PUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 25
21546: ST_TO_ADDR
// result := unit ;
21547: LD_ADDR_VAR 0 4
21551: PUSH
21552: LD_VAR 0 5
21556: ST_TO_ADDR
// end ;
21557: LD_VAR 0 4
21561: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21562: LD_INT 0
21564: PPUSH
21565: PPUSH
// if not side or not nation then
21566: LD_VAR 0 1
21570: NOT
21571: PUSH
21572: LD_VAR 0 2
21576: NOT
21577: OR
21578: IFFALSE 21582
// exit ;
21580: GO 22350
// case nation of nation_american :
21582: LD_VAR 0 2
21586: PUSH
21587: LD_INT 1
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21809
21595: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21596: LD_ADDR_VAR 0 4
21600: PUSH
21601: LD_INT 35
21603: PUSH
21604: LD_INT 45
21606: PUSH
21607: LD_INT 46
21609: PUSH
21610: LD_INT 47
21612: PUSH
21613: LD_INT 82
21615: PUSH
21616: LD_INT 83
21618: PUSH
21619: LD_INT 84
21621: PUSH
21622: LD_INT 85
21624: PUSH
21625: LD_INT 86
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 6
21636: PUSH
21637: LD_INT 15
21639: PUSH
21640: LD_INT 16
21642: PUSH
21643: LD_INT 7
21645: PUSH
21646: LD_INT 12
21648: PUSH
21649: LD_INT 13
21651: PUSH
21652: LD_INT 10
21654: PUSH
21655: LD_INT 14
21657: PUSH
21658: LD_INT 20
21660: PUSH
21661: LD_INT 21
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_INT 25
21669: PUSH
21670: LD_INT 32
21672: PUSH
21673: LD_INT 27
21675: PUSH
21676: LD_INT 36
21678: PUSH
21679: LD_INT 69
21681: PUSH
21682: LD_INT 39
21684: PUSH
21685: LD_INT 34
21687: PUSH
21688: LD_INT 40
21690: PUSH
21691: LD_INT 48
21693: PUSH
21694: LD_INT 49
21696: PUSH
21697: LD_INT 50
21699: PUSH
21700: LD_INT 51
21702: PUSH
21703: LD_INT 52
21705: PUSH
21706: LD_INT 53
21708: PUSH
21709: LD_INT 54
21711: PUSH
21712: LD_INT 55
21714: PUSH
21715: LD_INT 56
21717: PUSH
21718: LD_INT 57
21720: PUSH
21721: LD_INT 58
21723: PUSH
21724: LD_INT 59
21726: PUSH
21727: LD_INT 60
21729: PUSH
21730: LD_INT 61
21732: PUSH
21733: LD_INT 62
21735: PUSH
21736: LD_INT 80
21738: PUSH
21739: LD_INT 82
21741: PUSH
21742: LD_INT 83
21744: PUSH
21745: LD_INT 84
21747: PUSH
21748: LD_INT 85
21750: PUSH
21751: LD_INT 86
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: ST_TO_ADDR
21807: GO 22274
21809: LD_INT 2
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 22043
21817: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21818: LD_ADDR_VAR 0 4
21822: PUSH
21823: LD_INT 35
21825: PUSH
21826: LD_INT 45
21828: PUSH
21829: LD_INT 46
21831: PUSH
21832: LD_INT 47
21834: PUSH
21835: LD_INT 82
21837: PUSH
21838: LD_INT 83
21840: PUSH
21841: LD_INT 84
21843: PUSH
21844: LD_INT 85
21846: PUSH
21847: LD_INT 87
21849: PUSH
21850: LD_INT 70
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 11
21858: PUSH
21859: LD_INT 3
21861: PUSH
21862: LD_INT 4
21864: PUSH
21865: LD_INT 5
21867: PUSH
21868: LD_INT 6
21870: PUSH
21871: LD_INT 15
21873: PUSH
21874: LD_INT 18
21876: PUSH
21877: LD_INT 7
21879: PUSH
21880: LD_INT 17
21882: PUSH
21883: LD_INT 8
21885: PUSH
21886: LD_INT 20
21888: PUSH
21889: LD_INT 21
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_INT 72
21897: PUSH
21898: LD_INT 26
21900: PUSH
21901: LD_INT 69
21903: PUSH
21904: LD_INT 39
21906: PUSH
21907: LD_INT 40
21909: PUSH
21910: LD_INT 41
21912: PUSH
21913: LD_INT 42
21915: PUSH
21916: LD_INT 43
21918: PUSH
21919: LD_INT 48
21921: PUSH
21922: LD_INT 49
21924: PUSH
21925: LD_INT 50
21927: PUSH
21928: LD_INT 51
21930: PUSH
21931: LD_INT 52
21933: PUSH
21934: LD_INT 53
21936: PUSH
21937: LD_INT 54
21939: PUSH
21940: LD_INT 55
21942: PUSH
21943: LD_INT 56
21945: PUSH
21946: LD_INT 60
21948: PUSH
21949: LD_INT 61
21951: PUSH
21952: LD_INT 62
21954: PUSH
21955: LD_INT 66
21957: PUSH
21958: LD_INT 67
21960: PUSH
21961: LD_INT 68
21963: PUSH
21964: LD_INT 81
21966: PUSH
21967: LD_INT 82
21969: PUSH
21970: LD_INT 83
21972: PUSH
21973: LD_INT 84
21975: PUSH
21976: LD_INT 85
21978: PUSH
21979: LD_INT 87
21981: PUSH
21982: LD_INT 88
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: ST_TO_ADDR
22041: GO 22274
22043: LD_INT 3
22045: DOUBLE
22046: EQUAL
22047: IFTRUE 22051
22049: GO 22273
22051: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22052: LD_ADDR_VAR 0 4
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: LD_INT 47
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 82
22071: PUSH
22072: LD_INT 83
22074: PUSH
22075: LD_INT 84
22077: PUSH
22078: LD_INT 85
22080: PUSH
22081: LD_INT 86
22083: PUSH
22084: LD_INT 11
22086: PUSH
22087: LD_INT 9
22089: PUSH
22090: LD_INT 20
22092: PUSH
22093: LD_INT 19
22095: PUSH
22096: LD_INT 21
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 29
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 31
22119: PUSH
22120: LD_INT 37
22122: PUSH
22123: LD_INT 38
22125: PUSH
22126: LD_INT 32
22128: PUSH
22129: LD_INT 27
22131: PUSH
22132: LD_INT 33
22134: PUSH
22135: LD_INT 69
22137: PUSH
22138: LD_INT 39
22140: PUSH
22141: LD_INT 34
22143: PUSH
22144: LD_INT 40
22146: PUSH
22147: LD_INT 71
22149: PUSH
22150: LD_INT 23
22152: PUSH
22153: LD_INT 44
22155: PUSH
22156: LD_INT 48
22158: PUSH
22159: LD_INT 49
22161: PUSH
22162: LD_INT 50
22164: PUSH
22165: LD_INT 51
22167: PUSH
22168: LD_INT 52
22170: PUSH
22171: LD_INT 53
22173: PUSH
22174: LD_INT 54
22176: PUSH
22177: LD_INT 55
22179: PUSH
22180: LD_INT 56
22182: PUSH
22183: LD_INT 57
22185: PUSH
22186: LD_INT 58
22188: PUSH
22189: LD_INT 59
22191: PUSH
22192: LD_INT 63
22194: PUSH
22195: LD_INT 64
22197: PUSH
22198: LD_INT 65
22200: PUSH
22201: LD_INT 82
22203: PUSH
22204: LD_INT 83
22206: PUSH
22207: LD_INT 84
22209: PUSH
22210: LD_INT 85
22212: PUSH
22213: LD_INT 86
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: ST_TO_ADDR
22271: GO 22274
22273: POP
// if state > - 1 and state < 3 then
22274: LD_VAR 0 3
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: GREATER
22283: PUSH
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 3
22291: LESS
22292: AND
22293: IFFALSE 22350
// for i in result do
22295: LD_ADDR_VAR 0 5
22299: PUSH
22300: LD_VAR 0 4
22304: PUSH
22305: FOR_IN
22306: IFFALSE 22348
// if GetTech ( i , side ) <> state then
22308: LD_VAR 0 5
22312: PPUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 321
22322: PUSH
22323: LD_VAR 0 3
22327: NONEQUAL
22328: IFFALSE 22346
// result := result diff i ;
22330: LD_ADDR_VAR 0 4
22334: PUSH
22335: LD_VAR 0 4
22339: PUSH
22340: LD_VAR 0 5
22344: DIFF
22345: ST_TO_ADDR
22346: GO 22305
22348: POP
22349: POP
// end ;
22350: LD_VAR 0 4
22354: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
// result := true ;
22360: LD_ADDR_VAR 0 3
22364: PUSH
22365: LD_INT 1
22367: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22368: LD_ADDR_VAR 0 5
22372: PUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: CALL_OW 480
22382: ST_TO_ADDR
// if not tmp then
22383: LD_VAR 0 5
22387: NOT
22388: IFFALSE 22392
// exit ;
22390: GO 22441
// for i in tmp do
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_VAR 0 5
22401: PUSH
22402: FOR_IN
22403: IFFALSE 22439
// if GetTech ( i , side ) <> state_researched then
22405: LD_VAR 0 4
22409: PPUSH
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL_OW 321
22419: PUSH
22420: LD_INT 2
22422: NONEQUAL
22423: IFFALSE 22437
// begin result := false ;
22425: LD_ADDR_VAR 0 3
22429: PUSH
22430: LD_INT 0
22432: ST_TO_ADDR
// exit ;
22433: POP
22434: POP
22435: GO 22441
// end ;
22437: GO 22402
22439: POP
22440: POP
// end ;
22441: LD_VAR 0 3
22445: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22461: LD_VAR 0 1
22465: NOT
22466: PUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL_OW 257
22476: PUSH
22477: LD_INT 9
22479: NONEQUAL
22480: OR
22481: IFFALSE 22485
// exit ;
22483: GO 23058
// side := GetSide ( unit ) ;
22485: LD_ADDR_VAR 0 9
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 255
22499: ST_TO_ADDR
// tech_space := tech_spacanom ;
22500: LD_ADDR_VAR 0 12
22504: PUSH
22505: LD_INT 29
22507: ST_TO_ADDR
// tech_time := tech_taurad ;
22508: LD_ADDR_VAR 0 13
22512: PUSH
22513: LD_INT 28
22515: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22516: LD_ADDR_VAR 0 11
22520: PUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 310
22530: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22531: LD_VAR 0 11
22535: PPUSH
22536: CALL_OW 247
22540: PUSH
22541: LD_INT 2
22543: EQUAL
22544: IFFALSE 22548
// exit ;
22546: GO 23058
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22548: LD_ADDR_VAR 0 8
22552: PUSH
22553: LD_INT 81
22555: PUSH
22556: LD_VAR 0 9
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PPUSH
22586: CALL_OW 69
22590: ST_TO_ADDR
// if not tmp then
22591: LD_VAR 0 8
22595: NOT
22596: IFFALSE 22600
// exit ;
22598: GO 23058
// if in_unit then
22600: LD_VAR 0 11
22604: IFFALSE 22628
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22606: LD_ADDR_VAR 0 10
22610: PUSH
22611: LD_VAR 0 8
22615: PPUSH
22616: LD_VAR 0 11
22620: PPUSH
22621: CALL_OW 74
22625: ST_TO_ADDR
22626: GO 22648
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22628: LD_ADDR_VAR 0 10
22632: PUSH
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 74
22647: ST_TO_ADDR
// if not enemy then
22648: LD_VAR 0 10
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 23058
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22657: LD_VAR 0 11
22661: PUSH
22662: LD_VAR 0 11
22666: PPUSH
22667: LD_VAR 0 10
22671: PPUSH
22672: CALL_OW 296
22676: PUSH
22677: LD_INT 13
22679: GREATER
22680: AND
22681: PUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_VAR 0 10
22691: PPUSH
22692: CALL_OW 296
22696: PUSH
22697: LD_INT 12
22699: GREATER
22700: OR
22701: IFFALSE 22705
// exit ;
22703: GO 23058
// missile := [ 1 ] ;
22705: LD_ADDR_VAR 0 14
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22716: LD_VAR 0 9
22720: PPUSH
22721: LD_VAR 0 12
22725: PPUSH
22726: CALL_OW 325
22730: IFFALSE 22759
// missile := Insert ( missile , missile + 1 , 2 ) ;
22732: LD_ADDR_VAR 0 14
22736: PUSH
22737: LD_VAR 0 14
22741: PPUSH
22742: LD_VAR 0 14
22746: PUSH
22747: LD_INT 1
22749: PLUS
22750: PPUSH
22751: LD_INT 2
22753: PPUSH
22754: CALL_OW 2
22758: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22759: LD_VAR 0 9
22763: PPUSH
22764: LD_VAR 0 13
22768: PPUSH
22769: CALL_OW 325
22773: PUSH
22774: LD_VAR 0 10
22778: PPUSH
22779: CALL_OW 255
22783: PPUSH
22784: LD_VAR 0 13
22788: PPUSH
22789: CALL_OW 325
22793: NOT
22794: AND
22795: IFFALSE 22824
// missile := Insert ( missile , missile + 1 , 3 ) ;
22797: LD_ADDR_VAR 0 14
22801: PUSH
22802: LD_VAR 0 14
22806: PPUSH
22807: LD_VAR 0 14
22811: PUSH
22812: LD_INT 1
22814: PLUS
22815: PPUSH
22816: LD_INT 3
22818: PPUSH
22819: CALL_OW 2
22823: ST_TO_ADDR
// if missile < 2 then
22824: LD_VAR 0 14
22828: PUSH
22829: LD_INT 2
22831: LESS
22832: IFFALSE 22836
// exit ;
22834: GO 23058
// x := GetX ( enemy ) ;
22836: LD_ADDR_VAR 0 4
22840: PUSH
22841: LD_VAR 0 10
22845: PPUSH
22846: CALL_OW 250
22850: ST_TO_ADDR
// y := GetY ( enemy ) ;
22851: LD_ADDR_VAR 0 5
22855: PUSH
22856: LD_VAR 0 10
22860: PPUSH
22861: CALL_OW 251
22865: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22866: LD_ADDR_VAR 0 6
22870: PUSH
22871: LD_VAR 0 4
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 12
22887: PLUS
22888: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22889: LD_ADDR_VAR 0 7
22893: PUSH
22894: LD_VAR 0 5
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 12
22910: PLUS
22911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22912: LD_VAR 0 6
22916: PPUSH
22917: LD_VAR 0 7
22921: PPUSH
22922: CALL_OW 488
22926: NOT
22927: IFFALSE 22949
// begin _x := x ;
22929: LD_ADDR_VAR 0 6
22933: PUSH
22934: LD_VAR 0 4
22938: ST_TO_ADDR
// _y := y ;
22939: LD_ADDR_VAR 0 7
22943: PUSH
22944: LD_VAR 0 5
22948: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22949: LD_ADDR_VAR 0 3
22953: PUSH
22954: LD_INT 1
22956: PPUSH
22957: LD_VAR 0 14
22961: PPUSH
22962: CALL_OW 12
22966: ST_TO_ADDR
// case i of 1 :
22967: LD_VAR 0 3
22971: PUSH
22972: LD_INT 1
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 22997
22980: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_VAR 0 10
22990: PPUSH
22991: CALL_OW 115
22995: GO 23058
22997: LD_INT 2
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23027
23005: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_VAR 0 6
23015: PPUSH
23016: LD_VAR 0 7
23020: PPUSH
23021: CALL_OW 153
23025: GO 23058
23027: LD_INT 3
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23057
23035: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_VAR 0 6
23045: PPUSH
23046: LD_VAR 0 7
23050: PPUSH
23051: CALL_OW 154
23055: GO 23058
23057: POP
// end ;
23058: LD_VAR 0 2
23062: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23063: LD_INT 0
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
23070: PPUSH
// if not unit or not building then
23071: LD_VAR 0 1
23075: NOT
23076: PUSH
23077: LD_VAR 0 2
23081: NOT
23082: OR
23083: IFFALSE 23087
// exit ;
23085: GO 23245
// x := GetX ( building ) ;
23087: LD_ADDR_VAR 0 5
23091: PUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 250
23101: ST_TO_ADDR
// y := GetY ( building ) ;
23102: LD_ADDR_VAR 0 6
23106: PUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 251
23116: ST_TO_ADDR
// for i = 0 to 5 do
23117: LD_ADDR_VAR 0 4
23121: PUSH
23122: DOUBLE
23123: LD_INT 0
23125: DEC
23126: ST_TO_ADDR
23127: LD_INT 5
23129: PUSH
23130: FOR_TO
23131: IFFALSE 23243
// begin _x := ShiftX ( x , i , 3 ) ;
23133: LD_ADDR_VAR 0 7
23137: PUSH
23138: LD_VAR 0 5
23142: PPUSH
23143: LD_VAR 0 4
23147: PPUSH
23148: LD_INT 3
23150: PPUSH
23151: CALL_OW 272
23155: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23156: LD_ADDR_VAR 0 8
23160: PUSH
23161: LD_VAR 0 6
23165: PPUSH
23166: LD_VAR 0 4
23170: PPUSH
23171: LD_INT 3
23173: PPUSH
23174: CALL_OW 273
23178: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23179: LD_VAR 0 7
23183: PPUSH
23184: LD_VAR 0 8
23188: PPUSH
23189: CALL_OW 488
23193: NOT
23194: IFFALSE 23198
// continue ;
23196: GO 23130
// if HexInfo ( _x , _y ) = 0 then
23198: LD_VAR 0 7
23202: PPUSH
23203: LD_VAR 0 8
23207: PPUSH
23208: CALL_OW 428
23212: PUSH
23213: LD_INT 0
23215: EQUAL
23216: IFFALSE 23241
// begin ComMoveXY ( unit , _x , _y ) ;
23218: LD_VAR 0 1
23222: PPUSH
23223: LD_VAR 0 7
23227: PPUSH
23228: LD_VAR 0 8
23232: PPUSH
23233: CALL_OW 111
// exit ;
23237: POP
23238: POP
23239: GO 23245
// end ; end ;
23241: GO 23130
23243: POP
23244: POP
// end ;
23245: LD_VAR 0 3
23249: RET
// export function ScanBase ( side , base_area ) ; begin
23250: LD_INT 0
23252: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 81
23265: PUSH
23266: LD_VAR 0 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 70
23279: ST_TO_ADDR
// end ;
23280: LD_VAR 0 3
23284: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
23289: PPUSH
23290: PPUSH
// result := false ;
23291: LD_ADDR_VAR 0 2
23295: PUSH
23296: LD_INT 0
23298: ST_TO_ADDR
// side := GetSide ( unit ) ;
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: CALL_OW 255
23313: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23314: LD_ADDR_VAR 0 4
23318: PUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 248
23328: ST_TO_ADDR
// case nat of 1 :
23329: LD_VAR 0 4
23333: PUSH
23334: LD_INT 1
23336: DOUBLE
23337: EQUAL
23338: IFTRUE 23342
23340: GO 23353
23342: POP
// tech := tech_lassight ; 2 :
23343: LD_ADDR_VAR 0 5
23347: PUSH
23348: LD_INT 12
23350: ST_TO_ADDR
23351: GO 23392
23353: LD_INT 2
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23372
23361: POP
// tech := tech_mortar ; 3 :
23362: LD_ADDR_VAR 0 5
23366: PUSH
23367: LD_INT 41
23369: ST_TO_ADDR
23370: GO 23392
23372: LD_INT 3
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23380
23378: GO 23391
23380: POP
// tech := tech_bazooka ; end ;
23381: LD_ADDR_VAR 0 5
23385: PUSH
23386: LD_INT 44
23388: ST_TO_ADDR
23389: GO 23392
23391: POP
// if Researched ( side , tech ) then
23392: LD_VAR 0 3
23396: PPUSH
23397: LD_VAR 0 5
23401: PPUSH
23402: CALL_OW 325
23406: IFFALSE 23433
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23408: LD_ADDR_VAR 0 2
23412: PUSH
23413: LD_INT 5
23415: PUSH
23416: LD_INT 8
23418: PUSH
23419: LD_INT 9
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_VAR 0 4
23431: ARRAY
23432: ST_TO_ADDR
// end ;
23433: LD_VAR 0 2
23437: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23438: LD_INT 0
23440: PPUSH
23441: PPUSH
23442: PPUSH
// if not mines then
23443: LD_VAR 0 2
23447: NOT
23448: IFFALSE 23452
// exit ;
23450: GO 23596
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23452: LD_ADDR_VAR 0 5
23456: PUSH
23457: LD_INT 81
23459: PUSH
23460: LD_VAR 0 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: LD_INT 21
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// for i in mines do
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: LD_VAR 0 2
23504: PUSH
23505: FOR_IN
23506: IFFALSE 23594
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23508: LD_VAR 0 4
23512: PUSH
23513: LD_INT 1
23515: ARRAY
23516: PPUSH
23517: LD_VAR 0 4
23521: PUSH
23522: LD_INT 2
23524: ARRAY
23525: PPUSH
23526: CALL_OW 458
23530: NOT
23531: IFFALSE 23535
// continue ;
23533: GO 23505
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23535: LD_VAR 0 4
23539: PUSH
23540: LD_INT 1
23542: ARRAY
23543: PPUSH
23544: LD_VAR 0 4
23548: PUSH
23549: LD_INT 2
23551: ARRAY
23552: PPUSH
23553: CALL_OW 428
23557: PUSH
23558: LD_VAR 0 5
23562: IN
23563: IFFALSE 23592
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23565: LD_VAR 0 4
23569: PUSH
23570: LD_INT 1
23572: ARRAY
23573: PPUSH
23574: LD_VAR 0 4
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL_OW 456
// end ;
23592: GO 23505
23594: POP
23595: POP
// end ;
23596: LD_VAR 0 3
23600: RET
// export function Count ( array ) ; var i ; begin
23601: LD_INT 0
23603: PPUSH
23604: PPUSH
// result := 0 ;
23605: LD_ADDR_VAR 0 2
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// for i in array do
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_VAR 0 1
23622: PUSH
23623: FOR_IN
23624: IFFALSE 23648
// if i then
23626: LD_VAR 0 3
23630: IFFALSE 23646
// result := result + 1 ;
23632: LD_ADDR_VAR 0 2
23636: PUSH
23637: LD_VAR 0 2
23641: PUSH
23642: LD_INT 1
23644: PLUS
23645: ST_TO_ADDR
23646: GO 23623
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 2
23654: RET
// export function IsEmpty ( building ) ; begin
23655: LD_INT 0
23657: PPUSH
// if not building then
23658: LD_VAR 0 1
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23710
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_VAR 0 1
23676: PUSH
23677: LD_INT 22
23679: PUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 255
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 58
23696: PUSH
23697: EMPTY
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 69
23708: IN
23709: ST_TO_ADDR
// end ;
23710: LD_VAR 0 2
23714: RET
// export function IsNotFull ( building ) ; begin
23715: LD_INT 0
23717: PPUSH
// if not building then
23718: LD_VAR 0 1
23722: NOT
23723: IFFALSE 23727
// exit ;
23725: GO 23746
// result := UnitsInside ( building ) < 6 ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_VAR 0 1
23736: PPUSH
23737: CALL_OW 313
23741: PUSH
23742: LD_INT 6
23744: LESS
23745: ST_TO_ADDR
// end ;
23746: LD_VAR 0 2
23750: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23751: LD_INT 0
23753: PPUSH
23754: PPUSH
23755: PPUSH
23756: PPUSH
// tmp := [ ] ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: EMPTY
23763: ST_TO_ADDR
// list := [ ] ;
23764: LD_ADDR_VAR 0 5
23768: PUSH
23769: EMPTY
23770: ST_TO_ADDR
// for i = 16 to 25 do
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: DOUBLE
23777: LD_INT 16
23779: DEC
23780: ST_TO_ADDR
23781: LD_INT 25
23783: PUSH
23784: FOR_TO
23785: IFFALSE 23858
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_VAR 0 3
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 255
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 91
23816: PUSH
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 30
23832: PUSH
23833: LD_VAR 0 4
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ADD
23855: ST_TO_ADDR
23856: GO 23784
23858: POP
23859: POP
// for i = 1 to tmp do
23860: LD_ADDR_VAR 0 4
23864: PUSH
23865: DOUBLE
23866: LD_INT 1
23868: DEC
23869: ST_TO_ADDR
23870: LD_VAR 0 3
23874: PUSH
23875: FOR_TO
23876: IFFALSE 23964
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23878: LD_ADDR_VAR 0 5
23882: PUSH
23883: LD_VAR 0 5
23887: PUSH
23888: LD_VAR 0 3
23892: PUSH
23893: LD_VAR 0 4
23897: ARRAY
23898: PPUSH
23899: CALL_OW 266
23903: PUSH
23904: LD_VAR 0 3
23908: PUSH
23909: LD_VAR 0 4
23913: ARRAY
23914: PPUSH
23915: CALL_OW 250
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 251
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: ARRAY
23946: PPUSH
23947: CALL_OW 254
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: ADD
23961: ST_TO_ADDR
23962: GO 23875
23964: POP
23965: POP
// result := list ;
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_VAR 0 5
23975: ST_TO_ADDR
// end ;
23976: LD_VAR 0 2
23980: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
// if not factory then
23990: LD_VAR 0 1
23994: NOT
23995: IFFALSE 23999
// exit ;
23997: GO 24592
// if control = control_apeman then
23999: LD_VAR 0 4
24003: PUSH
24004: LD_INT 5
24006: EQUAL
24007: IFFALSE 24116
// begin tmp := UnitsInside ( factory ) ;
24009: LD_ADDR_VAR 0 8
24013: PUSH
24014: LD_VAR 0 1
24018: PPUSH
24019: CALL_OW 313
24023: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24024: LD_VAR 0 8
24028: PPUSH
24029: LD_INT 25
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 72
24043: NOT
24044: IFFALSE 24054
// control := control_manual ;
24046: LD_ADDR_VAR 0 4
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24054: LD_ADDR_VAR 0 8
24058: PUSH
24059: LD_VAR 0 1
24063: PPUSH
24064: CALL 23751 0 1
24068: ST_TO_ADDR
// if tmp then
24069: LD_VAR 0 8
24073: IFFALSE 24116
// begin for i in tmp do
24075: LD_ADDR_VAR 0 7
24079: PUSH
24080: LD_VAR 0 8
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24114
// if i [ 1 ] = b_ext_radio then
24088: LD_VAR 0 7
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PUSH
24097: LD_INT 22
24099: EQUAL
24100: IFFALSE 24112
// begin control := control_remote ;
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
// break ;
24110: GO 24114
// end ;
24112: GO 24085
24114: POP
24115: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 3
24130: PPUSH
24131: LD_VAR 0 4
24135: PPUSH
24136: LD_VAR 0 5
24140: PPUSH
24141: CALL_OW 448
24145: IFFALSE 24180
// begin result := [ chassis , engine , control , weapon ] ;
24147: LD_ADDR_VAR 0 6
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: LD_VAR 0 4
24166: PUSH
24167: LD_VAR 0 5
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// exit ;
24178: GO 24592
// end ; _chassis := AvailableChassisList ( factory ) ;
24180: LD_ADDR_VAR 0 9
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 475
24194: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24195: LD_ADDR_VAR 0 11
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 476
24209: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24210: LD_ADDR_VAR 0 12
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 477
24224: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24225: LD_ADDR_VAR 0 10
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 478
24239: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24240: LD_VAR 0 9
24244: NOT
24245: PUSH
24246: LD_VAR 0 11
24250: NOT
24251: OR
24252: PUSH
24253: LD_VAR 0 12
24257: NOT
24258: OR
24259: PUSH
24260: LD_VAR 0 10
24264: NOT
24265: OR
24266: IFFALSE 24301
// begin result := [ chassis , engine , control , weapon ] ;
24268: LD_ADDR_VAR 0 6
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_VAR 0 3
24282: PUSH
24283: LD_VAR 0 4
24287: PUSH
24288: LD_VAR 0 5
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// exit ;
24299: GO 24592
// end ; if not chassis in _chassis then
24301: LD_VAR 0 2
24305: PUSH
24306: LD_VAR 0 9
24310: IN
24311: NOT
24312: IFFALSE 24338
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24314: LD_ADDR_VAR 0 2
24318: PUSH
24319: LD_VAR 0 9
24323: PUSH
24324: LD_INT 1
24326: PPUSH
24327: LD_VAR 0 9
24331: PPUSH
24332: CALL_OW 12
24336: ARRAY
24337: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 3
24347: PPUSH
24348: CALL 24597 0 2
24352: NOT
24353: IFFALSE 24412
// repeat engine := _engine [ 1 ] ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_VAR 0 11
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24369: LD_ADDR_VAR 0 11
24373: PUSH
24374: LD_VAR 0 11
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: CALL_OW 3
24386: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24387: LD_VAR 0 2
24391: PPUSH
24392: LD_VAR 0 3
24396: PPUSH
24397: CALL 24597 0 2
24401: PUSH
24402: LD_VAR 0 11
24406: PUSH
24407: EMPTY
24408: EQUAL
24409: OR
24410: IFFALSE 24355
// if not control in _control then
24412: LD_VAR 0 4
24416: PUSH
24417: LD_VAR 0 12
24421: IN
24422: NOT
24423: IFFALSE 24449
// control := _control [ rand ( 1 , _control ) ] ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_VAR 0 12
24434: PUSH
24435: LD_INT 1
24437: PPUSH
24438: LD_VAR 0 12
24442: PPUSH
24443: CALL_OW 12
24447: ARRAY
24448: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24449: LD_VAR 0 2
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL 24817 0 2
24463: NOT
24464: IFFALSE 24523
// repeat weapon := _weapon [ 1 ] ;
24466: LD_ADDR_VAR 0 5
24470: PUSH
24471: LD_VAR 0 10
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24480: LD_ADDR_VAR 0 10
24484: PUSH
24485: LD_VAR 0 10
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 3
24497: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_VAR 0 5
24507: PPUSH
24508: CALL 24817 0 2
24512: PUSH
24513: LD_VAR 0 10
24517: PUSH
24518: EMPTY
24519: EQUAL
24520: OR
24521: IFFALSE 24466
// result := [ ] ;
24523: LD_ADDR_VAR 0 6
24527: PUSH
24528: EMPTY
24529: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24530: LD_VAR 0 1
24534: PPUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_VAR 0 4
24549: PPUSH
24550: LD_VAR 0 5
24554: PPUSH
24555: CALL_OW 448
24559: IFFALSE 24592
// result := [ chassis , engine , control , weapon ] ;
24561: LD_ADDR_VAR 0 6
24565: PUSH
24566: LD_VAR 0 2
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 4
24580: PUSH
24581: LD_VAR 0 5
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// end ;
24592: LD_VAR 0 6
24596: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24597: LD_INT 0
24599: PPUSH
// if not chassis or not engine then
24600: LD_VAR 0 1
24604: NOT
24605: PUSH
24606: LD_VAR 0 2
24610: NOT
24611: OR
24612: IFFALSE 24616
// exit ;
24614: GO 24812
// case engine of engine_solar :
24616: LD_VAR 0 2
24620: PUSH
24621: LD_INT 2
24623: DOUBLE
24624: EQUAL
24625: IFTRUE 24629
24627: GO 24667
24629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 13
24643: PUSH
24644: LD_INT 14
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: ST_TO_ADDR
24665: GO 24796
24667: LD_INT 1
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24737
24675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 11
24683: PUSH
24684: LD_INT 12
24686: PUSH
24687: LD_INT 13
24689: PUSH
24690: LD_INT 14
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 4
24704: PUSH
24705: LD_INT 5
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 23
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_INT 24
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24796
24737: LD_INT 3
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24795
24745: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24746: LD_ADDR_VAR 0 3
24750: PUSH
24751: LD_INT 13
24753: PUSH
24754: LD_INT 14
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: LD_INT 21
24771: PUSH
24772: LD_INT 22
24774: PUSH
24775: LD_INT 23
24777: PUSH
24778: LD_INT 24
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 24796
24795: POP
// result := ( chassis in result ) ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_VAR 0 1
24805: PUSH
24806: LD_VAR 0 3
24810: IN
24811: ST_TO_ADDR
// end ;
24812: LD_VAR 0 3
24816: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24817: LD_INT 0
24819: PPUSH
// if not chassis or not weapon then
24820: LD_VAR 0 1
24824: NOT
24825: PUSH
24826: LD_VAR 0 2
24830: NOT
24831: OR
24832: IFFALSE 24836
// exit ;
24834: GO 25898
// case weapon of us_machine_gun :
24836: LD_VAR 0 2
24840: PUSH
24841: LD_INT 2
24843: DOUBLE
24844: EQUAL
24845: IFTRUE 24849
24847: GO 24879
24849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25882
24879: LD_INT 3
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24917
24887: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: LD_INT 4
24904: PUSH
24905: LD_INT 5
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
24915: GO 25882
24917: LD_INT 11
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 24955
24925: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24926: LD_ADDR_VAR 0 3
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: LD_INT 4
24942: PUSH
24943: LD_INT 5
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
24953: GO 25882
24955: LD_INT 4
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24989
24963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 4
24977: PUSH
24978: LD_INT 5
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25882
24989: LD_INT 5
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25023
24997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 4
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: ST_TO_ADDR
25021: GO 25882
25023: LD_INT 9
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25057
25031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: LD_INT 4
25045: PUSH
25046: LD_INT 5
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25882
25057: LD_INT 7
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25091
25065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: LD_INT 3
25076: PUSH
25077: LD_INT 4
25079: PUSH
25080: LD_INT 5
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
25089: GO 25882
25091: LD_INT 12
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25125
25099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_INT 2
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: LD_INT 4
25113: PUSH
25114: LD_INT 5
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25882
25125: LD_INT 13
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25159
25133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: LD_INT 4
25147: PUSH
25148: LD_INT 5
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 25882
25159: LD_INT 14
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25185
25167: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 4
25175: PUSH
25176: LD_INT 5
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 25882
25185: LD_INT 6
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25211
25193: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25194: LD_ADDR_VAR 0 3
25198: PUSH
25199: LD_INT 4
25201: PUSH
25202: LD_INT 5
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 25882
25211: LD_INT 10
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25237
25219: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 4
25227: PUSH
25228: LD_INT 5
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: ST_TO_ADDR
25235: GO 25882
25237: LD_INT 22
25239: DOUBLE
25240: EQUAL
25241: IFTRUE 25245
25243: GO 25271
25245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_INT 11
25253: PUSH
25254: LD_INT 12
25256: PUSH
25257: LD_INT 13
25259: PUSH
25260: LD_INT 14
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
25269: GO 25882
25271: LD_INT 23
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25305
25279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25280: LD_ADDR_VAR 0 3
25284: PUSH
25285: LD_INT 11
25287: PUSH
25288: LD_INT 12
25290: PUSH
25291: LD_INT 13
25293: PUSH
25294: LD_INT 14
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25882
25305: LD_INT 24
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25339
25313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 12
25324: PUSH
25325: LD_INT 13
25327: PUSH
25328: LD_INT 14
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25882
25339: LD_INT 30
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25373
25347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 11
25355: PUSH
25356: LD_INT 12
25358: PUSH
25359: LD_INT 13
25361: PUSH
25362: LD_INT 14
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 25882
25373: LD_INT 25
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25399
25381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 13
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 25882
25399: LD_INT 27
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25425
25407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 13
25415: PUSH
25416: LD_INT 14
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 25882
25425: LD_EXP 82
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25461
25435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 11
25443: PUSH
25444: LD_INT 12
25446: PUSH
25447: LD_INT 13
25449: PUSH
25450: LD_INT 14
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: ST_TO_ADDR
25459: GO 25882
25461: LD_INT 28
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25487
25469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_INT 13
25477: PUSH
25478: LD_INT 14
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: ST_TO_ADDR
25485: GO 25882
25487: LD_INT 29
25489: DOUBLE
25490: EQUAL
25491: IFTRUE 25495
25493: GO 25513
25495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25496: LD_ADDR_VAR 0 3
25500: PUSH
25501: LD_INT 13
25503: PUSH
25504: LD_INT 14
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: ST_TO_ADDR
25511: GO 25882
25513: LD_INT 31
25515: DOUBLE
25516: EQUAL
25517: IFTRUE 25521
25519: GO 25539
25521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25522: LD_ADDR_VAR 0 3
25526: PUSH
25527: LD_INT 13
25529: PUSH
25530: LD_INT 14
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: ST_TO_ADDR
25537: GO 25882
25539: LD_INT 26
25541: DOUBLE
25542: EQUAL
25543: IFTRUE 25547
25545: GO 25565
25547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_INT 13
25555: PUSH
25556: LD_INT 14
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: ST_TO_ADDR
25563: GO 25882
25565: LD_INT 42
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25599
25573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 22
25584: PUSH
25585: LD_INT 23
25587: PUSH
25588: LD_INT 24
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
25597: GO 25882
25599: LD_INT 43
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25633
25607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_INT 21
25615: PUSH
25616: LD_INT 22
25618: PUSH
25619: LD_INT 23
25621: PUSH
25622: LD_INT 24
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: ST_TO_ADDR
25631: GO 25882
25633: LD_INT 44
25635: DOUBLE
25636: EQUAL
25637: IFTRUE 25641
25639: GO 25667
25641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25642: LD_ADDR_VAR 0 3
25646: PUSH
25647: LD_INT 21
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_INT 23
25655: PUSH
25656: LD_INT 24
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: ST_TO_ADDR
25665: GO 25882
25667: LD_INT 45
25669: DOUBLE
25670: EQUAL
25671: IFTRUE 25675
25673: GO 25701
25675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_INT 21
25683: PUSH
25684: LD_INT 22
25686: PUSH
25687: LD_INT 23
25689: PUSH
25690: LD_INT 24
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: ST_TO_ADDR
25699: GO 25882
25701: LD_INT 49
25703: DOUBLE
25704: EQUAL
25705: IFTRUE 25709
25707: GO 25735
25709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25710: LD_ADDR_VAR 0 3
25714: PUSH
25715: LD_INT 21
25717: PUSH
25718: LD_INT 22
25720: PUSH
25721: LD_INT 23
25723: PUSH
25724: LD_INT 24
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: ST_TO_ADDR
25733: GO 25882
25735: LD_INT 51
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25769
25743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_INT 21
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 23
25757: PUSH
25758: LD_INT 24
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: ST_TO_ADDR
25767: GO 25882
25769: LD_INT 52
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25777
25775: GO 25803
25777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: LD_INT 21
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_INT 23
25791: PUSH
25792: LD_INT 24
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: ST_TO_ADDR
25801: GO 25882
25803: LD_INT 53
25805: DOUBLE
25806: EQUAL
25807: IFTRUE 25811
25809: GO 25829
25811: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_INT 23
25819: PUSH
25820: LD_INT 24
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: ST_TO_ADDR
25827: GO 25882
25829: LD_INT 46
25831: DOUBLE
25832: EQUAL
25833: IFTRUE 25837
25835: GO 25855
25837: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25838: LD_ADDR_VAR 0 3
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 24
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: ST_TO_ADDR
25853: GO 25882
25855: LD_INT 47
25857: DOUBLE
25858: EQUAL
25859: IFTRUE 25863
25861: GO 25881
25863: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: LD_INT 23
25871: PUSH
25872: LD_INT 24
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: ST_TO_ADDR
25879: GO 25882
25881: POP
// result := ( chassis in result ) ;
25882: LD_ADDR_VAR 0 3
25886: PUSH
25887: LD_VAR 0 1
25891: PUSH
25892: LD_VAR 0 3
25896: IN
25897: ST_TO_ADDR
// end ;
25898: LD_VAR 0 3
25902: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
// result := array ;
25912: LD_ADDR_VAR 0 5
25916: PUSH
25917: LD_VAR 0 1
25921: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25922: LD_VAR 0 1
25926: NOT
25927: PUSH
25928: LD_VAR 0 2
25932: NOT
25933: OR
25934: PUSH
25935: LD_VAR 0 3
25939: NOT
25940: OR
25941: PUSH
25942: LD_VAR 0 2
25946: PUSH
25947: LD_VAR 0 1
25951: GREATER
25952: OR
25953: PUSH
25954: LD_VAR 0 3
25958: PUSH
25959: LD_VAR 0 1
25963: GREATER
25964: OR
25965: IFFALSE 25969
// exit ;
25967: GO 26265
// if direction then
25969: LD_VAR 0 4
25973: IFFALSE 26037
// begin d := 1 ;
25975: LD_ADDR_VAR 0 9
25979: PUSH
25980: LD_INT 1
25982: ST_TO_ADDR
// if i_from > i_to then
25983: LD_VAR 0 2
25987: PUSH
25988: LD_VAR 0 3
25992: GREATER
25993: IFFALSE 26019
// length := ( array - i_from ) + i_to else
25995: LD_ADDR_VAR 0 11
25999: PUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_VAR 0 2
26009: MINUS
26010: PUSH
26011: LD_VAR 0 3
26015: PLUS
26016: ST_TO_ADDR
26017: GO 26035
// length := i_to - i_from ;
26019: LD_ADDR_VAR 0 11
26023: PUSH
26024: LD_VAR 0 3
26028: PUSH
26029: LD_VAR 0 2
26033: MINUS
26034: ST_TO_ADDR
// end else
26035: GO 26098
// begin d := - 1 ;
26037: LD_ADDR_VAR 0 9
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: ST_TO_ADDR
// if i_from > i_to then
26046: LD_VAR 0 2
26050: PUSH
26051: LD_VAR 0 3
26055: GREATER
26056: IFFALSE 26076
// length := i_from - i_to else
26058: LD_ADDR_VAR 0 11
26062: PUSH
26063: LD_VAR 0 2
26067: PUSH
26068: LD_VAR 0 3
26072: MINUS
26073: ST_TO_ADDR
26074: GO 26098
// length := ( array - i_to ) + i_from ;
26076: LD_ADDR_VAR 0 11
26080: PUSH
26081: LD_VAR 0 1
26085: PUSH
26086: LD_VAR 0 3
26090: MINUS
26091: PUSH
26092: LD_VAR 0 2
26096: PLUS
26097: ST_TO_ADDR
// end ; if not length then
26098: LD_VAR 0 11
26102: NOT
26103: IFFALSE 26107
// exit ;
26105: GO 26265
// tmp := array ;
26107: LD_ADDR_VAR 0 10
26111: PUSH
26112: LD_VAR 0 1
26116: ST_TO_ADDR
// for i = 1 to length do
26117: LD_ADDR_VAR 0 6
26121: PUSH
26122: DOUBLE
26123: LD_INT 1
26125: DEC
26126: ST_TO_ADDR
26127: LD_VAR 0 11
26131: PUSH
26132: FOR_TO
26133: IFFALSE 26253
// begin for j = 1 to array do
26135: LD_ADDR_VAR 0 7
26139: PUSH
26140: DOUBLE
26141: LD_INT 1
26143: DEC
26144: ST_TO_ADDR
26145: LD_VAR 0 1
26149: PUSH
26150: FOR_TO
26151: IFFALSE 26239
// begin k := j + d ;
26153: LD_ADDR_VAR 0 8
26157: PUSH
26158: LD_VAR 0 7
26162: PUSH
26163: LD_VAR 0 9
26167: PLUS
26168: ST_TO_ADDR
// if k > array then
26169: LD_VAR 0 8
26173: PUSH
26174: LD_VAR 0 1
26178: GREATER
26179: IFFALSE 26189
// k := 1 ;
26181: LD_ADDR_VAR 0 8
26185: PUSH
26186: LD_INT 1
26188: ST_TO_ADDR
// if not k then
26189: LD_VAR 0 8
26193: NOT
26194: IFFALSE 26206
// k := array ;
26196: LD_ADDR_VAR 0 8
26200: PUSH
26201: LD_VAR 0 1
26205: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26206: LD_ADDR_VAR 0 10
26210: PUSH
26211: LD_VAR 0 10
26215: PPUSH
26216: LD_VAR 0 8
26220: PPUSH
26221: LD_VAR 0 1
26225: PUSH
26226: LD_VAR 0 7
26230: ARRAY
26231: PPUSH
26232: CALL_OW 1
26236: ST_TO_ADDR
// end ;
26237: GO 26150
26239: POP
26240: POP
// array := tmp ;
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: LD_VAR 0 10
26250: ST_TO_ADDR
// end ;
26251: GO 26132
26253: POP
26254: POP
// result := array ;
26255: LD_ADDR_VAR 0 5
26259: PUSH
26260: LD_VAR 0 1
26264: ST_TO_ADDR
// end ;
26265: LD_VAR 0 5
26269: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26270: LD_INT 0
26272: PPUSH
26273: PPUSH
// result := 0 ;
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_INT 0
26281: ST_TO_ADDR
// if not array or not value in array then
26282: LD_VAR 0 1
26286: NOT
26287: PUSH
26288: LD_VAR 0 2
26292: PUSH
26293: LD_VAR 0 1
26297: IN
26298: NOT
26299: OR
26300: IFFALSE 26304
// exit ;
26302: GO 26358
// for i = 1 to array do
26304: LD_ADDR_VAR 0 4
26308: PUSH
26309: DOUBLE
26310: LD_INT 1
26312: DEC
26313: ST_TO_ADDR
26314: LD_VAR 0 1
26318: PUSH
26319: FOR_TO
26320: IFFALSE 26356
// if value = array [ i ] then
26322: LD_VAR 0 2
26326: PUSH
26327: LD_VAR 0 1
26331: PUSH
26332: LD_VAR 0 4
26336: ARRAY
26337: EQUAL
26338: IFFALSE 26354
// begin result := i ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_VAR 0 4
26349: ST_TO_ADDR
// exit ;
26350: POP
26351: POP
26352: GO 26358
// end ;
26354: GO 26319
26356: POP
26357: POP
// end ;
26358: LD_VAR 0 3
26362: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26363: LD_INT 0
26365: PPUSH
// vc_chassis := chassis ;
26366: LD_ADDR_OWVAR 37
26370: PUSH
26371: LD_VAR 0 1
26375: ST_TO_ADDR
// vc_engine := engine ;
26376: LD_ADDR_OWVAR 39
26380: PUSH
26381: LD_VAR 0 2
26385: ST_TO_ADDR
// vc_control := control ;
26386: LD_ADDR_OWVAR 38
26390: PUSH
26391: LD_VAR 0 3
26395: ST_TO_ADDR
// vc_weapon := weapon ;
26396: LD_ADDR_OWVAR 40
26400: PUSH
26401: LD_VAR 0 4
26405: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26406: LD_ADDR_OWVAR 41
26410: PUSH
26411: LD_VAR 0 5
26415: ST_TO_ADDR
// end ;
26416: LD_VAR 0 6
26420: RET
// export function WantPlant ( unit ) ; var task ; begin
26421: LD_INT 0
26423: PPUSH
26424: PPUSH
// result := false ;
26425: LD_ADDR_VAR 0 2
26429: PUSH
26430: LD_INT 0
26432: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26433: LD_ADDR_VAR 0 3
26437: PUSH
26438: LD_VAR 0 1
26442: PPUSH
26443: CALL_OW 437
26447: ST_TO_ADDR
// if task then
26448: LD_VAR 0 3
26452: IFFALSE 26480
// if task [ 1 ] [ 1 ] = p then
26454: LD_VAR 0 3
26458: PUSH
26459: LD_INT 1
26461: ARRAY
26462: PUSH
26463: LD_INT 1
26465: ARRAY
26466: PUSH
26467: LD_STRING p
26469: EQUAL
26470: IFFALSE 26480
// result := true ;
26472: LD_ADDR_VAR 0 2
26476: PUSH
26477: LD_INT 1
26479: ST_TO_ADDR
// end ;
26480: LD_VAR 0 2
26484: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26485: LD_INT 0
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
// if pos < 1 then
26491: LD_VAR 0 2
26495: PUSH
26496: LD_INT 1
26498: LESS
26499: IFFALSE 26503
// exit ;
26501: GO 26806
// if pos = 1 then
26503: LD_VAR 0 2
26507: PUSH
26508: LD_INT 1
26510: EQUAL
26511: IFFALSE 26544
// result := Replace ( arr , pos [ 1 ] , value ) else
26513: LD_ADDR_VAR 0 4
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_VAR 0 2
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: PPUSH
26532: LD_VAR 0 3
26536: PPUSH
26537: CALL_OW 1
26541: ST_TO_ADDR
26542: GO 26806
// begin tmp := arr ;
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: LD_VAR 0 1
26553: ST_TO_ADDR
// s_arr := [ tmp ] ;
26554: LD_ADDR_VAR 0 7
26558: PUSH
26559: LD_VAR 0 6
26563: PUSH
26564: EMPTY
26565: LIST
26566: ST_TO_ADDR
// for i = 1 to pos - 1 do
26567: LD_ADDR_VAR 0 5
26571: PUSH
26572: DOUBLE
26573: LD_INT 1
26575: DEC
26576: ST_TO_ADDR
26577: LD_VAR 0 2
26581: PUSH
26582: LD_INT 1
26584: MINUS
26585: PUSH
26586: FOR_TO
26587: IFFALSE 26632
// begin tmp := tmp [ pos [ i ] ] ;
26589: LD_ADDR_VAR 0 6
26593: PUSH
26594: LD_VAR 0 6
26598: PUSH
26599: LD_VAR 0 2
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: ARRAY
26610: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26611: LD_ADDR_VAR 0 7
26615: PUSH
26616: LD_VAR 0 7
26620: PUSH
26621: LD_VAR 0 6
26625: PUSH
26626: EMPTY
26627: LIST
26628: ADD
26629: ST_TO_ADDR
// end ;
26630: GO 26586
26632: POP
26633: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26634: LD_ADDR_VAR 0 6
26638: PUSH
26639: LD_VAR 0 6
26643: PPUSH
26644: LD_VAR 0 2
26648: PUSH
26649: LD_VAR 0 2
26653: ARRAY
26654: PPUSH
26655: LD_VAR 0 3
26659: PPUSH
26660: CALL_OW 1
26664: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26665: LD_ADDR_VAR 0 7
26669: PUSH
26670: LD_VAR 0 7
26674: PPUSH
26675: LD_VAR 0 7
26679: PPUSH
26680: LD_VAR 0 6
26684: PPUSH
26685: CALL_OW 1
26689: ST_TO_ADDR
// for i = s_arr downto 2 do
26690: LD_ADDR_VAR 0 5
26694: PUSH
26695: DOUBLE
26696: LD_VAR 0 7
26700: INC
26701: ST_TO_ADDR
26702: LD_INT 2
26704: PUSH
26705: FOR_DOWNTO
26706: IFFALSE 26790
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26708: LD_ADDR_VAR 0 6
26712: PUSH
26713: LD_VAR 0 7
26717: PUSH
26718: LD_VAR 0 5
26722: PUSH
26723: LD_INT 1
26725: MINUS
26726: ARRAY
26727: PPUSH
26728: LD_VAR 0 2
26732: PUSH
26733: LD_VAR 0 5
26737: PUSH
26738: LD_INT 1
26740: MINUS
26741: ARRAY
26742: PPUSH
26743: LD_VAR 0 7
26747: PUSH
26748: LD_VAR 0 5
26752: ARRAY
26753: PPUSH
26754: CALL_OW 1
26758: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26759: LD_ADDR_VAR 0 7
26763: PUSH
26764: LD_VAR 0 7
26768: PPUSH
26769: LD_VAR 0 5
26773: PUSH
26774: LD_INT 1
26776: MINUS
26777: PPUSH
26778: LD_VAR 0 6
26782: PPUSH
26783: CALL_OW 1
26787: ST_TO_ADDR
// end ;
26788: GO 26705
26790: POP
26791: POP
// result := s_arr [ 1 ] ;
26792: LD_ADDR_VAR 0 4
26796: PUSH
26797: LD_VAR 0 7
26801: PUSH
26802: LD_INT 1
26804: ARRAY
26805: ST_TO_ADDR
// end ; end ;
26806: LD_VAR 0 4
26810: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
// if not list then
26815: LD_VAR 0 1
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26915
// i := list [ pos1 ] ;
26824: LD_ADDR_VAR 0 5
26828: PUSH
26829: LD_VAR 0 1
26833: PUSH
26834: LD_VAR 0 2
26838: ARRAY
26839: ST_TO_ADDR
// if not i then
26840: LD_VAR 0 5
26844: NOT
26845: IFFALSE 26849
// exit ;
26847: GO 26915
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: LD_VAR 0 2
26863: PPUSH
26864: LD_VAR 0 1
26868: PUSH
26869: LD_VAR 0 3
26873: ARRAY
26874: PPUSH
26875: CALL_OW 1
26879: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26880: LD_ADDR_VAR 0 1
26884: PUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_VAR 0 3
26894: PPUSH
26895: LD_VAR 0 5
26899: PPUSH
26900: CALL_OW 1
26904: ST_TO_ADDR
// result := list ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_VAR 0 1
26914: ST_TO_ADDR
// end ;
26915: LD_VAR 0 4
26919: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26920: LD_INT 0
26922: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL_OW 250
26937: PPUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 251
26947: PPUSH
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_VAR 0 3
26957: PPUSH
26958: LD_VAR 0 4
26962: PPUSH
26963: CALL 26973 0 5
26967: ST_TO_ADDR
// end ;
26968: LD_VAR 0 5
26972: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26973: LD_INT 0
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
// if not list then
26979: LD_VAR 0 3
26983: NOT
26984: IFFALSE 26988
// exit ;
26986: GO 27376
// result := [ ] ;
26988: LD_ADDR_VAR 0 6
26992: PUSH
26993: EMPTY
26994: ST_TO_ADDR
// for i in list do
26995: LD_ADDR_VAR 0 7
26999: PUSH
27000: LD_VAR 0 3
27004: PUSH
27005: FOR_IN
27006: IFFALSE 27208
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27008: LD_ADDR_VAR 0 9
27012: PUSH
27013: LD_VAR 0 7
27017: PPUSH
27018: LD_VAR 0 1
27022: PPUSH
27023: LD_VAR 0 2
27027: PPUSH
27028: CALL_OW 297
27032: ST_TO_ADDR
// if not result then
27033: LD_VAR 0 6
27037: NOT
27038: IFFALSE 27064
// result := [ [ i , tmp ] ] else
27040: LD_ADDR_VAR 0 6
27044: PUSH
27045: LD_VAR 0 7
27049: PUSH
27050: LD_VAR 0 9
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: ST_TO_ADDR
27062: GO 27206
// begin if result [ result ] [ 2 ] < tmp then
27064: LD_VAR 0 6
27068: PUSH
27069: LD_VAR 0 6
27073: ARRAY
27074: PUSH
27075: LD_INT 2
27077: ARRAY
27078: PUSH
27079: LD_VAR 0 9
27083: LESS
27084: IFFALSE 27126
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27086: LD_ADDR_VAR 0 6
27090: PUSH
27091: LD_VAR 0 6
27095: PPUSH
27096: LD_VAR 0 6
27100: PUSH
27101: LD_INT 1
27103: PLUS
27104: PPUSH
27105: LD_VAR 0 7
27109: PUSH
27110: LD_VAR 0 9
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PPUSH
27119: CALL_OW 2
27123: ST_TO_ADDR
27124: GO 27206
// for j = 1 to result do
27126: LD_ADDR_VAR 0 8
27130: PUSH
27131: DOUBLE
27132: LD_INT 1
27134: DEC
27135: ST_TO_ADDR
27136: LD_VAR 0 6
27140: PUSH
27141: FOR_TO
27142: IFFALSE 27204
// begin if tmp < result [ j ] [ 2 ] then
27144: LD_VAR 0 9
27148: PUSH
27149: LD_VAR 0 6
27153: PUSH
27154: LD_VAR 0 8
27158: ARRAY
27159: PUSH
27160: LD_INT 2
27162: ARRAY
27163: LESS
27164: IFFALSE 27202
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27166: LD_ADDR_VAR 0 6
27170: PUSH
27171: LD_VAR 0 6
27175: PPUSH
27176: LD_VAR 0 8
27180: PPUSH
27181: LD_VAR 0 7
27185: PUSH
27186: LD_VAR 0 9
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 2
27199: ST_TO_ADDR
// break ;
27200: GO 27204
// end ; end ;
27202: GO 27141
27204: POP
27205: POP
// end ; end ;
27206: GO 27005
27208: POP
27209: POP
// if result and not asc then
27210: LD_VAR 0 6
27214: PUSH
27215: LD_VAR 0 4
27219: NOT
27220: AND
27221: IFFALSE 27296
// begin tmp := result ;
27223: LD_ADDR_VAR 0 9
27227: PUSH
27228: LD_VAR 0 6
27232: ST_TO_ADDR
// for i = tmp downto 1 do
27233: LD_ADDR_VAR 0 7
27237: PUSH
27238: DOUBLE
27239: LD_VAR 0 9
27243: INC
27244: ST_TO_ADDR
27245: LD_INT 1
27247: PUSH
27248: FOR_DOWNTO
27249: IFFALSE 27294
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27251: LD_ADDR_VAR 0 6
27255: PUSH
27256: LD_VAR 0 6
27260: PPUSH
27261: LD_VAR 0 9
27265: PUSH
27266: LD_VAR 0 7
27270: MINUS
27271: PUSH
27272: LD_INT 1
27274: PLUS
27275: PPUSH
27276: LD_VAR 0 9
27280: PUSH
27281: LD_VAR 0 7
27285: ARRAY
27286: PPUSH
27287: CALL_OW 1
27291: ST_TO_ADDR
27292: GO 27248
27294: POP
27295: POP
// end ; tmp := [ ] ;
27296: LD_ADDR_VAR 0 9
27300: PUSH
27301: EMPTY
27302: ST_TO_ADDR
// if mode then
27303: LD_VAR 0 5
27307: IFFALSE 27376
// begin for i = 1 to result do
27309: LD_ADDR_VAR 0 7
27313: PUSH
27314: DOUBLE
27315: LD_INT 1
27317: DEC
27318: ST_TO_ADDR
27319: LD_VAR 0 6
27323: PUSH
27324: FOR_TO
27325: IFFALSE 27364
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27327: LD_ADDR_VAR 0 9
27331: PUSH
27332: LD_VAR 0 9
27336: PPUSH
27337: LD_VAR 0 7
27341: PPUSH
27342: LD_VAR 0 6
27346: PUSH
27347: LD_VAR 0 7
27351: ARRAY
27352: PUSH
27353: LD_INT 1
27355: ARRAY
27356: PPUSH
27357: CALL_OW 1
27361: ST_TO_ADDR
27362: GO 27324
27364: POP
27365: POP
// result := tmp ;
27366: LD_ADDR_VAR 0 6
27370: PUSH
27371: LD_VAR 0 9
27375: ST_TO_ADDR
// end ; end ;
27376: LD_VAR 0 6
27380: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27381: LD_INT 0
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27389: LD_ADDR_VAR 0 5
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
// if not x or not y then
27411: LD_VAR 0 2
27415: NOT
27416: PUSH
27417: LD_VAR 0 3
27421: NOT
27422: OR
27423: IFFALSE 27427
// exit ;
27425: GO 29079
// if not range then
27427: LD_VAR 0 4
27431: NOT
27432: IFFALSE 27442
// range := 10 ;
27434: LD_ADDR_VAR 0 4
27438: PUSH
27439: LD_INT 10
27441: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27442: LD_ADDR_VAR 0 8
27446: PUSH
27447: LD_INT 81
27449: PUSH
27450: LD_VAR 0 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 92
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 4
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 3
27485: PUSH
27486: LD_INT 21
27488: PUSH
27489: LD_INT 3
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: PPUSH
27505: CALL_OW 69
27509: ST_TO_ADDR
// if not tmp then
27510: LD_VAR 0 8
27514: NOT
27515: IFFALSE 27519
// exit ;
27517: GO 29079
// for i in tmp do
27519: LD_ADDR_VAR 0 6
27523: PUSH
27524: LD_VAR 0 8
27528: PUSH
27529: FOR_IN
27530: IFFALSE 29054
// begin points := [ 0 , 0 , 0 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// bpoints := 1 ;
27551: LD_ADDR_VAR 0 10
27555: PUSH
27556: LD_INT 1
27558: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27559: LD_VAR 0 6
27563: PPUSH
27564: CALL_OW 247
27568: PUSH
27569: LD_INT 1
27571: DOUBLE
27572: EQUAL
27573: IFTRUE 27577
27575: GO 28155
27577: POP
// begin if GetClass ( i ) = 1 then
27578: LD_VAR 0 6
27582: PPUSH
27583: CALL_OW 257
27587: PUSH
27588: LD_INT 1
27590: EQUAL
27591: IFFALSE 27612
// points := [ 10 , 5 , 3 ] ;
27593: LD_ADDR_VAR 0 9
27597: PUSH
27598: LD_INT 10
27600: PUSH
27601: LD_INT 5
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27612: LD_VAR 0 6
27616: PPUSH
27617: CALL_OW 257
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: LD_INT 4
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: IN
27636: IFFALSE 27657
// points := [ 3 , 2 , 1 ] ;
27638: LD_ADDR_VAR 0 9
27642: PUSH
27643: LD_INT 3
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27657: LD_VAR 0 6
27661: PPUSH
27662: CALL_OW 257
27666: PUSH
27667: LD_INT 5
27669: EQUAL
27670: IFFALSE 27691
// points := [ 130 , 5 , 2 ] ;
27672: LD_ADDR_VAR 0 9
27676: PUSH
27677: LD_INT 130
27679: PUSH
27680: LD_INT 5
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27691: LD_VAR 0 6
27695: PPUSH
27696: CALL_OW 257
27700: PUSH
27701: LD_INT 8
27703: EQUAL
27704: IFFALSE 27725
// points := [ 35 , 35 , 30 ] ;
27706: LD_ADDR_VAR 0 9
27710: PUSH
27711: LD_INT 35
27713: PUSH
27714: LD_INT 35
27716: PUSH
27717: LD_INT 30
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27725: LD_VAR 0 6
27729: PPUSH
27730: CALL_OW 257
27734: PUSH
27735: LD_INT 9
27737: EQUAL
27738: IFFALSE 27759
// points := [ 20 , 55 , 40 ] ;
27740: LD_ADDR_VAR 0 9
27744: PUSH
27745: LD_INT 20
27747: PUSH
27748: LD_INT 55
27750: PUSH
27751: LD_INT 40
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27759: LD_VAR 0 6
27763: PPUSH
27764: CALL_OW 257
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 16
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: IN
27779: IFFALSE 27800
// points := [ 5 , 3 , 2 ] ;
27781: LD_ADDR_VAR 0 9
27785: PUSH
27786: LD_INT 5
27788: PUSH
27789: LD_INT 3
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27800: LD_VAR 0 6
27804: PPUSH
27805: CALL_OW 257
27809: PUSH
27810: LD_INT 17
27812: EQUAL
27813: IFFALSE 27834
// points := [ 100 , 50 , 75 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 100
27822: PUSH
27823: LD_INT 50
27825: PUSH
27826: LD_INT 75
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27834: LD_VAR 0 6
27838: PPUSH
27839: CALL_OW 257
27843: PUSH
27844: LD_INT 15
27846: EQUAL
27847: IFFALSE 27868
// points := [ 10 , 5 , 3 ] ;
27849: LD_ADDR_VAR 0 9
27853: PUSH
27854: LD_INT 10
27856: PUSH
27857: LD_INT 5
27859: PUSH
27860: LD_INT 3
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27868: LD_VAR 0 6
27872: PPUSH
27873: CALL_OW 257
27877: PUSH
27878: LD_INT 14
27880: EQUAL
27881: IFFALSE 27902
// points := [ 10 , 0 , 0 ] ;
27883: LD_ADDR_VAR 0 9
27887: PUSH
27888: LD_INT 10
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27902: LD_VAR 0 6
27906: PPUSH
27907: CALL_OW 257
27911: PUSH
27912: LD_INT 11
27914: EQUAL
27915: IFFALSE 27936
// points := [ 30 , 10 , 5 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 30
27924: PUSH
27925: LD_INT 10
27927: PUSH
27928: LD_INT 5
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27936: LD_VAR 0 1
27940: PPUSH
27941: LD_INT 5
27943: PPUSH
27944: CALL_OW 321
27948: PUSH
27949: LD_INT 2
27951: EQUAL
27952: IFFALSE 27969
// bpoints := bpoints * 1.8 ;
27954: LD_ADDR_VAR 0 10
27958: PUSH
27959: LD_VAR 0 10
27963: PUSH
27964: LD_REAL  1.80000000000000E+0000
27967: MUL
27968: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27969: LD_VAR 0 6
27973: PPUSH
27974: CALL_OW 257
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: LD_INT 4
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: IN
27997: PUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: LD_INT 51
28005: PPUSH
28006: CALL_OW 321
28010: PUSH
28011: LD_INT 2
28013: EQUAL
28014: AND
28015: IFFALSE 28032
// bpoints := bpoints * 1.2 ;
28017: LD_ADDR_VAR 0 10
28021: PUSH
28022: LD_VAR 0 10
28026: PUSH
28027: LD_REAL  1.20000000000000E+0000
28030: MUL
28031: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28032: LD_VAR 0 6
28036: PPUSH
28037: CALL_OW 257
28041: PUSH
28042: LD_INT 5
28044: PUSH
28045: LD_INT 7
28047: PUSH
28048: LD_INT 9
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: IN
28056: PUSH
28057: LD_VAR 0 1
28061: PPUSH
28062: LD_INT 52
28064: PPUSH
28065: CALL_OW 321
28069: PUSH
28070: LD_INT 2
28072: EQUAL
28073: AND
28074: IFFALSE 28091
// bpoints := bpoints * 1.5 ;
28076: LD_ADDR_VAR 0 10
28080: PUSH
28081: LD_VAR 0 10
28085: PUSH
28086: LD_REAL  1.50000000000000E+0000
28089: MUL
28090: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28091: LD_VAR 0 1
28095: PPUSH
28096: LD_INT 66
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 2
28106: EQUAL
28107: IFFALSE 28124
// bpoints := bpoints * 1.1 ;
28109: LD_ADDR_VAR 0 10
28113: PUSH
28114: LD_VAR 0 10
28118: PUSH
28119: LD_REAL  1.10000000000000E+0000
28122: MUL
28123: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28124: LD_ADDR_VAR 0 10
28128: PUSH
28129: LD_VAR 0 10
28133: PUSH
28134: LD_VAR 0 6
28138: PPUSH
28139: LD_INT 1
28141: PPUSH
28142: CALL_OW 259
28146: PUSH
28147: LD_REAL  1.15000000000000E+0000
28150: MUL
28151: MUL
28152: ST_TO_ADDR
// end ; unit_vehicle :
28153: GO 28983
28155: LD_INT 2
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28971
28163: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28164: LD_VAR 0 6
28168: PPUSH
28169: CALL_OW 264
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 42
28179: PUSH
28180: LD_INT 24
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: IN
28188: IFFALSE 28209
// points := [ 25 , 5 , 3 ] ;
28190: LD_ADDR_VAR 0 9
28194: PUSH
28195: LD_INT 25
28197: PUSH
28198: LD_INT 5
28200: PUSH
28201: LD_INT 3
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28209: LD_VAR 0 6
28213: PPUSH
28214: CALL_OW 264
28218: PUSH
28219: LD_INT 4
28221: PUSH
28222: LD_INT 43
28224: PUSH
28225: LD_INT 25
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: IN
28233: IFFALSE 28254
// points := [ 40 , 15 , 5 ] ;
28235: LD_ADDR_VAR 0 9
28239: PUSH
28240: LD_INT 40
28242: PUSH
28243: LD_INT 15
28245: PUSH
28246: LD_INT 5
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: LIST
28253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28254: LD_VAR 0 6
28258: PPUSH
28259: CALL_OW 264
28263: PUSH
28264: LD_INT 3
28266: PUSH
28267: LD_INT 23
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: IN
28274: IFFALSE 28295
// points := [ 7 , 25 , 8 ] ;
28276: LD_ADDR_VAR 0 9
28280: PUSH
28281: LD_INT 7
28283: PUSH
28284: LD_INT 25
28286: PUSH
28287: LD_INT 8
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28295: LD_VAR 0 6
28299: PPUSH
28300: CALL_OW 264
28304: PUSH
28305: LD_INT 5
28307: PUSH
28308: LD_INT 27
28310: PUSH
28311: LD_INT 44
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: IN
28319: IFFALSE 28340
// points := [ 14 , 50 , 16 ] ;
28321: LD_ADDR_VAR 0 9
28325: PUSH
28326: LD_INT 14
28328: PUSH
28329: LD_INT 50
28331: PUSH
28332: LD_INT 16
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28340: LD_VAR 0 6
28344: PPUSH
28345: CALL_OW 264
28349: PUSH
28350: LD_INT 6
28352: PUSH
28353: LD_INT 46
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: IN
28360: IFFALSE 28381
// points := [ 32 , 120 , 70 ] ;
28362: LD_ADDR_VAR 0 9
28366: PUSH
28367: LD_INT 32
28369: PUSH
28370: LD_INT 120
28372: PUSH
28373: LD_INT 70
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28381: LD_VAR 0 6
28385: PPUSH
28386: CALL_OW 264
28390: PUSH
28391: LD_INT 7
28393: PUSH
28394: LD_INT 28
28396: PUSH
28397: LD_INT 45
28399: PUSH
28400: LD_EXP 82
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: IN
28411: IFFALSE 28432
// points := [ 35 , 20 , 45 ] ;
28413: LD_ADDR_VAR 0 9
28417: PUSH
28418: LD_INT 35
28420: PUSH
28421: LD_INT 20
28423: PUSH
28424: LD_INT 45
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28432: LD_VAR 0 6
28436: PPUSH
28437: CALL_OW 264
28441: PUSH
28442: LD_INT 47
28444: PUSH
28445: EMPTY
28446: LIST
28447: IN
28448: IFFALSE 28469
// points := [ 67 , 45 , 75 ] ;
28450: LD_ADDR_VAR 0 9
28454: PUSH
28455: LD_INT 67
28457: PUSH
28458: LD_INT 45
28460: PUSH
28461: LD_INT 75
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28469: LD_VAR 0 6
28473: PPUSH
28474: CALL_OW 264
28478: PUSH
28479: LD_INT 26
28481: PUSH
28482: EMPTY
28483: LIST
28484: IN
28485: IFFALSE 28506
// points := [ 120 , 30 , 80 ] ;
28487: LD_ADDR_VAR 0 9
28491: PUSH
28492: LD_INT 120
28494: PUSH
28495: LD_INT 30
28497: PUSH
28498: LD_INT 80
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28506: LD_VAR 0 6
28510: PPUSH
28511: CALL_OW 264
28515: PUSH
28516: LD_INT 22
28518: PUSH
28519: EMPTY
28520: LIST
28521: IN
28522: IFFALSE 28543
// points := [ 40 , 1 , 1 ] ;
28524: LD_ADDR_VAR 0 9
28528: PUSH
28529: LD_INT 40
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28543: LD_VAR 0 6
28547: PPUSH
28548: CALL_OW 264
28552: PUSH
28553: LD_INT 29
28555: PUSH
28556: EMPTY
28557: LIST
28558: IN
28559: IFFALSE 28580
// points := [ 70 , 200 , 400 ] ;
28561: LD_ADDR_VAR 0 9
28565: PUSH
28566: LD_INT 70
28568: PUSH
28569: LD_INT 200
28571: PUSH
28572: LD_INT 400
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28580: LD_VAR 0 6
28584: PPUSH
28585: CALL_OW 264
28589: PUSH
28590: LD_INT 14
28592: PUSH
28593: LD_INT 53
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: IN
28600: IFFALSE 28621
// points := [ 40 , 10 , 20 ] ;
28602: LD_ADDR_VAR 0 9
28606: PUSH
28607: LD_INT 40
28609: PUSH
28610: LD_INT 10
28612: PUSH
28613: LD_INT 20
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28621: LD_VAR 0 6
28625: PPUSH
28626: CALL_OW 264
28630: PUSH
28631: LD_INT 9
28633: PUSH
28634: EMPTY
28635: LIST
28636: IN
28637: IFFALSE 28658
// points := [ 5 , 70 , 20 ] ;
28639: LD_ADDR_VAR 0 9
28643: PUSH
28644: LD_INT 5
28646: PUSH
28647: LD_INT 70
28649: PUSH
28650: LD_INT 20
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28658: LD_VAR 0 6
28662: PPUSH
28663: CALL_OW 264
28667: PUSH
28668: LD_INT 10
28670: PUSH
28671: EMPTY
28672: LIST
28673: IN
28674: IFFALSE 28695
// points := [ 35 , 110 , 70 ] ;
28676: LD_ADDR_VAR 0 9
28680: PUSH
28681: LD_INT 35
28683: PUSH
28684: LD_INT 110
28686: PUSH
28687: LD_INT 70
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28695: LD_VAR 0 6
28699: PPUSH
28700: CALL_OW 265
28704: PUSH
28705: LD_INT 25
28707: EQUAL
28708: IFFALSE 28729
// points := [ 80 , 65 , 100 ] ;
28710: LD_ADDR_VAR 0 9
28714: PUSH
28715: LD_INT 80
28717: PUSH
28718: LD_INT 65
28720: PUSH
28721: LD_INT 100
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28729: LD_VAR 0 6
28733: PPUSH
28734: CALL_OW 263
28738: PUSH
28739: LD_INT 1
28741: EQUAL
28742: IFFALSE 28777
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28744: LD_ADDR_VAR 0 10
28748: PUSH
28749: LD_VAR 0 10
28753: PUSH
28754: LD_VAR 0 6
28758: PPUSH
28759: CALL_OW 311
28763: PPUSH
28764: LD_INT 3
28766: PPUSH
28767: CALL_OW 259
28771: PUSH
28772: LD_INT 4
28774: MUL
28775: MUL
28776: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28777: LD_VAR 0 6
28781: PPUSH
28782: CALL_OW 263
28786: PUSH
28787: LD_INT 2
28789: EQUAL
28790: IFFALSE 28841
// begin j := IsControledBy ( i ) ;
28792: LD_ADDR_VAR 0 7
28796: PUSH
28797: LD_VAR 0 6
28801: PPUSH
28802: CALL_OW 312
28806: ST_TO_ADDR
// if j then
28807: LD_VAR 0 7
28811: IFFALSE 28841
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28813: LD_ADDR_VAR 0 10
28817: PUSH
28818: LD_VAR 0 10
28822: PUSH
28823: LD_VAR 0 7
28827: PPUSH
28828: LD_INT 3
28830: PPUSH
28831: CALL_OW 259
28835: PUSH
28836: LD_INT 3
28838: MUL
28839: MUL
28840: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28841: LD_VAR 0 6
28845: PPUSH
28846: CALL_OW 264
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 6
28856: PUSH
28857: LD_INT 46
28859: PUSH
28860: LD_INT 44
28862: PUSH
28863: LD_INT 47
28865: PUSH
28866: LD_INT 45
28868: PUSH
28869: LD_INT 28
28871: PUSH
28872: LD_INT 7
28874: PUSH
28875: LD_INT 27
28877: PUSH
28878: LD_INT 29
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: IN
28893: PUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: LD_INT 52
28901: PPUSH
28902: CALL_OW 321
28906: PUSH
28907: LD_INT 2
28909: EQUAL
28910: AND
28911: IFFALSE 28928
// bpoints := bpoints * 1.2 ;
28913: LD_ADDR_VAR 0 10
28917: PUSH
28918: LD_VAR 0 10
28922: PUSH
28923: LD_REAL  1.20000000000000E+0000
28926: MUL
28927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28928: LD_VAR 0 6
28932: PPUSH
28933: CALL_OW 264
28937: PUSH
28938: LD_INT 6
28940: PUSH
28941: LD_INT 46
28943: PUSH
28944: LD_INT 47
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: IN
28952: IFFALSE 28969
// bpoints := bpoints * 1.2 ;
28954: LD_ADDR_VAR 0 10
28958: PUSH
28959: LD_VAR 0 10
28963: PUSH
28964: LD_REAL  1.20000000000000E+0000
28967: MUL
28968: ST_TO_ADDR
// end ; unit_building :
28969: GO 28983
28971: LD_INT 3
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28982
28979: POP
// ; end ;
28980: GO 28983
28982: POP
// for j = 1 to 3 do
28983: LD_ADDR_VAR 0 7
28987: PUSH
28988: DOUBLE
28989: LD_INT 1
28991: DEC
28992: ST_TO_ADDR
28993: LD_INT 3
28995: PUSH
28996: FOR_TO
28997: IFFALSE 29050
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28999: LD_ADDR_VAR 0 5
29003: PUSH
29004: LD_VAR 0 5
29008: PPUSH
29009: LD_VAR 0 7
29013: PPUSH
29014: LD_VAR 0 5
29018: PUSH
29019: LD_VAR 0 7
29023: ARRAY
29024: PUSH
29025: LD_VAR 0 9
29029: PUSH
29030: LD_VAR 0 7
29034: ARRAY
29035: PUSH
29036: LD_VAR 0 10
29040: MUL
29041: PLUS
29042: PPUSH
29043: CALL_OW 1
29047: ST_TO_ADDR
29048: GO 28996
29050: POP
29051: POP
// end ;
29052: GO 27529
29054: POP
29055: POP
// result := Replace ( result , 4 , tmp ) ;
29056: LD_ADDR_VAR 0 5
29060: PUSH
29061: LD_VAR 0 5
29065: PPUSH
29066: LD_INT 4
29068: PPUSH
29069: LD_VAR 0 8
29073: PPUSH
29074: CALL_OW 1
29078: ST_TO_ADDR
// end ;
29079: LD_VAR 0 5
29083: RET
// export function DangerAtRange ( unit , range ) ; begin
29084: LD_INT 0
29086: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29087: LD_ADDR_VAR 0 3
29091: PUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 255
29101: PPUSH
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 250
29111: PPUSH
29112: LD_VAR 0 1
29116: PPUSH
29117: CALL_OW 251
29121: PPUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: CALL 27381 0 4
29131: ST_TO_ADDR
// end ;
29132: LD_VAR 0 3
29136: RET
// export function DangerInArea ( side , area ) ; begin
29137: LD_INT 0
29139: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29140: LD_ADDR_VAR 0 3
29144: PUSH
29145: LD_VAR 0 2
29149: PPUSH
29150: LD_INT 81
29152: PUSH
29153: LD_VAR 0 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 70
29166: ST_TO_ADDR
// end ;
29167: LD_VAR 0 3
29171: RET
// export function IsExtension ( b ) ; begin
29172: LD_INT 0
29174: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: LD_VAR 0 1
29184: PUSH
29185: LD_INT 23
29187: PUSH
29188: LD_INT 20
29190: PUSH
29191: LD_INT 22
29193: PUSH
29194: LD_INT 17
29196: PUSH
29197: LD_INT 24
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 19
29205: PUSH
29206: LD_INT 16
29208: PUSH
29209: LD_INT 25
29211: PUSH
29212: LD_INT 18
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: IN
29227: ST_TO_ADDR
// end ;
29228: LD_VAR 0 2
29232: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
29237: PPUSH
// result := [ ] ;
29238: LD_ADDR_VAR 0 4
29242: PUSH
29243: EMPTY
29244: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29245: LD_ADDR_VAR 0 5
29249: PUSH
29250: LD_VAR 0 2
29254: PPUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 70
29269: ST_TO_ADDR
// if not tmp then
29270: LD_VAR 0 5
29274: NOT
29275: IFFALSE 29279
// exit ;
29277: GO 29343
// if checkLink then
29279: LD_VAR 0 3
29283: IFFALSE 29333
// begin for i in tmp do
29285: LD_ADDR_VAR 0 6
29289: PUSH
29290: LD_VAR 0 5
29294: PUSH
29295: FOR_IN
29296: IFFALSE 29331
// if GetBase ( i ) <> base then
29298: LD_VAR 0 6
29302: PPUSH
29303: CALL_OW 274
29307: PUSH
29308: LD_VAR 0 1
29312: NONEQUAL
29313: IFFALSE 29329
// ComLinkToBase ( base , i ) ;
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_VAR 0 6
29324: PPUSH
29325: CALL_OW 169
29329: GO 29295
29331: POP
29332: POP
// end ; result := tmp ;
29333: LD_ADDR_VAR 0 4
29337: PUSH
29338: LD_VAR 0 5
29342: ST_TO_ADDR
// end ;
29343: LD_VAR 0 4
29347: RET
// export function ComComplete ( units , b ) ; var i ; begin
29348: LD_INT 0
29350: PPUSH
29351: PPUSH
// if not units then
29352: LD_VAR 0 1
29356: NOT
29357: IFFALSE 29361
// exit ;
29359: GO 29451
// for i in units do
29361: LD_ADDR_VAR 0 4
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: FOR_IN
29372: IFFALSE 29449
// if BuildingStatus ( b ) = bs_build then
29374: LD_VAR 0 2
29378: PPUSH
29379: CALL_OW 461
29383: PUSH
29384: LD_INT 1
29386: EQUAL
29387: IFFALSE 29447
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29389: LD_VAR 0 4
29393: PPUSH
29394: LD_STRING h
29396: PUSH
29397: LD_VAR 0 2
29401: PPUSH
29402: CALL_OW 250
29406: PUSH
29407: LD_VAR 0 2
29411: PPUSH
29412: CALL_OW 251
29416: PUSH
29417: LD_VAR 0 2
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: PPUSH
29443: CALL_OW 446
29447: GO 29371
29449: POP
29450: POP
// end ;
29451: LD_VAR 0 3
29455: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29464: LD_VAR 0 1
29468: NOT
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 263
29479: PUSH
29480: LD_INT 2
29482: NONEQUAL
29483: OR
29484: IFFALSE 29488
// exit ;
29486: GO 29804
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29488: LD_ADDR_VAR 0 6
29492: PUSH
29493: LD_INT 22
29495: PUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 255
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 30
29515: PUSH
29516: LD_INT 36
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 34
29525: PUSH
29526: LD_INT 31
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 69
29546: ST_TO_ADDR
// if not tmp then
29547: LD_VAR 0 6
29551: NOT
29552: IFFALSE 29556
// exit ;
29554: GO 29804
// result := [ ] ;
29556: LD_ADDR_VAR 0 2
29560: PUSH
29561: EMPTY
29562: ST_TO_ADDR
// for i in tmp do
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_VAR 0 6
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29645
// begin t := UnitsInside ( i ) ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_VAR 0 3
29585: PPUSH
29586: CALL_OW 313
29590: ST_TO_ADDR
// if t then
29591: LD_VAR 0 4
29595: IFFALSE 29643
// for j in t do
29597: LD_ADDR_VAR 0 7
29601: PUSH
29602: LD_VAR 0 4
29606: PUSH
29607: FOR_IN
29608: IFFALSE 29641
// result := Replace ( result , result + 1 , j ) ;
29610: LD_ADDR_VAR 0 2
29614: PUSH
29615: LD_VAR 0 2
29619: PPUSH
29620: LD_VAR 0 2
29624: PUSH
29625: LD_INT 1
29627: PLUS
29628: PPUSH
29629: LD_VAR 0 7
29633: PPUSH
29634: CALL_OW 1
29638: ST_TO_ADDR
29639: GO 29607
29641: POP
29642: POP
// end ;
29643: GO 29573
29645: POP
29646: POP
// if not result then
29647: LD_VAR 0 2
29651: NOT
29652: IFFALSE 29656
// exit ;
29654: GO 29804
// mech := result [ 1 ] ;
29656: LD_ADDR_VAR 0 5
29660: PUSH
29661: LD_VAR 0 2
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: ST_TO_ADDR
// if result > 1 then
29670: LD_VAR 0 2
29674: PUSH
29675: LD_INT 1
29677: GREATER
29678: IFFALSE 29790
// begin for i = 2 to result do
29680: LD_ADDR_VAR 0 3
29684: PUSH
29685: DOUBLE
29686: LD_INT 2
29688: DEC
29689: ST_TO_ADDR
29690: LD_VAR 0 2
29694: PUSH
29695: FOR_TO
29696: IFFALSE 29788
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29698: LD_ADDR_VAR 0 4
29702: PUSH
29703: LD_VAR 0 2
29707: PUSH
29708: LD_VAR 0 3
29712: ARRAY
29713: PPUSH
29714: LD_INT 3
29716: PPUSH
29717: CALL_OW 259
29721: PUSH
29722: LD_VAR 0 2
29726: PUSH
29727: LD_VAR 0 3
29731: ARRAY
29732: PPUSH
29733: CALL_OW 432
29737: MINUS
29738: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29739: LD_VAR 0 4
29743: PUSH
29744: LD_VAR 0 5
29748: PPUSH
29749: LD_INT 3
29751: PPUSH
29752: CALL_OW 259
29756: PUSH
29757: LD_VAR 0 5
29761: PPUSH
29762: CALL_OW 432
29766: MINUS
29767: GREATEREQUAL
29768: IFFALSE 29786
// mech := result [ i ] ;
29770: LD_ADDR_VAR 0 5
29774: PUSH
29775: LD_VAR 0 2
29779: PUSH
29780: LD_VAR 0 3
29784: ARRAY
29785: ST_TO_ADDR
// end ;
29786: GO 29695
29788: POP
29789: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29790: LD_VAR 0 1
29794: PPUSH
29795: LD_VAR 0 5
29799: PPUSH
29800: CALL_OW 135
// end ;
29804: LD_VAR 0 2
29808: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29809: LD_INT 0
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
// result := [ ] ;
29824: LD_ADDR_VAR 0 7
29828: PUSH
29829: EMPTY
29830: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29831: LD_VAR 0 1
29835: PPUSH
29836: CALL_OW 266
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: IN
29851: NOT
29852: IFFALSE 29856
// exit ;
29854: GO 31490
// if name then
29856: LD_VAR 0 3
29860: IFFALSE 29876
// SetBName ( base_dep , name ) ;
29862: LD_VAR 0 1
29866: PPUSH
29867: LD_VAR 0 3
29871: PPUSH
29872: CALL_OW 500
// base := GetBase ( base_dep ) ;
29876: LD_ADDR_VAR 0 15
29880: PUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL_OW 274
29890: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29891: LD_ADDR_VAR 0 16
29895: PUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 255
29905: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29906: LD_ADDR_VAR 0 17
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: CALL_OW 248
29920: ST_TO_ADDR
// if sources then
29921: LD_VAR 0 5
29925: IFFALSE 29972
// for i = 1 to 3 do
29927: LD_ADDR_VAR 0 8
29931: PUSH
29932: DOUBLE
29933: LD_INT 1
29935: DEC
29936: ST_TO_ADDR
29937: LD_INT 3
29939: PUSH
29940: FOR_TO
29941: IFFALSE 29970
// AddResourceType ( base , i , sources [ i ] ) ;
29943: LD_VAR 0 15
29947: PPUSH
29948: LD_VAR 0 8
29952: PPUSH
29953: LD_VAR 0 5
29957: PUSH
29958: LD_VAR 0 8
29962: ARRAY
29963: PPUSH
29964: CALL_OW 276
29968: GO 29940
29970: POP
29971: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29972: LD_ADDR_VAR 0 18
29976: PUSH
29977: LD_VAR 0 15
29981: PPUSH
29982: LD_VAR 0 2
29986: PPUSH
29987: LD_INT 1
29989: PPUSH
29990: CALL 29233 0 3
29994: ST_TO_ADDR
// InitHc ;
29995: CALL_OW 19
// InitUc ;
29999: CALL_OW 18
// uc_side := side ;
30003: LD_ADDR_OWVAR 20
30007: PUSH
30008: LD_VAR 0 16
30012: ST_TO_ADDR
// uc_nation := nation ;
30013: LD_ADDR_OWVAR 21
30017: PUSH
30018: LD_VAR 0 17
30022: ST_TO_ADDR
// if buildings then
30023: LD_VAR 0 18
30027: IFFALSE 31349
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30029: LD_ADDR_VAR 0 19
30033: PUSH
30034: LD_VAR 0 18
30038: PPUSH
30039: LD_INT 2
30041: PUSH
30042: LD_INT 30
30044: PUSH
30045: LD_INT 29
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 30
30054: PUSH
30055: LD_INT 30
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL_OW 72
30071: ST_TO_ADDR
// if tmp then
30072: LD_VAR 0 19
30076: IFFALSE 30124
// for i in tmp do
30078: LD_ADDR_VAR 0 8
30082: PUSH
30083: LD_VAR 0 19
30087: PUSH
30088: FOR_IN
30089: IFFALSE 30122
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30091: LD_VAR 0 8
30095: PPUSH
30096: CALL_OW 250
30100: PPUSH
30101: LD_VAR 0 8
30105: PPUSH
30106: CALL_OW 251
30110: PPUSH
30111: LD_VAR 0 16
30115: PPUSH
30116: CALL_OW 441
30120: GO 30088
30122: POP
30123: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30124: LD_VAR 0 18
30128: PPUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 32
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 33
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: PPUSH
30157: CALL_OW 72
30161: IFFALSE 30249
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30163: LD_ADDR_VAR 0 8
30167: PUSH
30168: LD_VAR 0 18
30172: PPUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 32
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 30
30188: PUSH
30189: LD_INT 33
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: PPUSH
30201: CALL_OW 72
30205: PUSH
30206: FOR_IN
30207: IFFALSE 30247
// begin if not GetBWeapon ( i ) then
30209: LD_VAR 0 8
30213: PPUSH
30214: CALL_OW 269
30218: NOT
30219: IFFALSE 30245
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30221: LD_VAR 0 8
30225: PPUSH
30226: LD_VAR 0 8
30230: PPUSH
30231: LD_VAR 0 2
30235: PPUSH
30236: CALL 31495 0 2
30240: PPUSH
30241: CALL_OW 431
// end ;
30245: GO 30206
30247: POP
30248: POP
// end ; for i = 1 to personel do
30249: LD_ADDR_VAR 0 8
30253: PUSH
30254: DOUBLE
30255: LD_INT 1
30257: DEC
30258: ST_TO_ADDR
30259: LD_VAR 0 6
30263: PUSH
30264: FOR_TO
30265: IFFALSE 31329
// begin if i > 4 then
30267: LD_VAR 0 8
30271: PUSH
30272: LD_INT 4
30274: GREATER
30275: IFFALSE 30279
// break ;
30277: GO 31329
// case i of 1 :
30279: LD_VAR 0 8
30283: PUSH
30284: LD_INT 1
30286: DOUBLE
30287: EQUAL
30288: IFTRUE 30292
30290: GO 30372
30292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30293: LD_ADDR_VAR 0 12
30297: PUSH
30298: LD_VAR 0 18
30302: PPUSH
30303: LD_INT 22
30305: PUSH
30306: LD_VAR 0 16
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 58
30317: PUSH
30318: EMPTY
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: LD_INT 30
30326: PUSH
30327: LD_INT 32
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 30
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 30
30346: PUSH
30347: LD_INT 5
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 72
30369: ST_TO_ADDR
30370: GO 30594
30372: LD_INT 2
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30442
30380: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30381: LD_ADDR_VAR 0 12
30385: PUSH
30386: LD_VAR 0 18
30390: PPUSH
30391: LD_INT 22
30393: PUSH
30394: LD_VAR 0 16
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: LD_INT 30
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 30
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PPUSH
30435: CALL_OW 72
30439: ST_TO_ADDR
30440: GO 30594
30442: LD_INT 3
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30450
30448: GO 30512
30450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30451: LD_ADDR_VAR 0 12
30455: PUSH
30456: LD_VAR 0 18
30460: PPUSH
30461: LD_INT 22
30463: PUSH
30464: LD_VAR 0 16
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 30
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PPUSH
30505: CALL_OW 72
30509: ST_TO_ADDR
30510: GO 30594
30512: LD_INT 4
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 30593
30520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30521: LD_ADDR_VAR 0 12
30525: PUSH
30526: LD_VAR 0 18
30530: PPUSH
30531: LD_INT 22
30533: PUSH
30534: LD_VAR 0 16
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 30
30548: PUSH
30549: LD_INT 6
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 30
30558: PUSH
30559: LD_INT 7
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_INT 8
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 72
30590: ST_TO_ADDR
30591: GO 30594
30593: POP
// if i = 1 then
30594: LD_VAR 0 8
30598: PUSH
30599: LD_INT 1
30601: EQUAL
30602: IFFALSE 30713
// begin tmp := [ ] ;
30604: LD_ADDR_VAR 0 19
30608: PUSH
30609: EMPTY
30610: ST_TO_ADDR
// for j in f do
30611: LD_ADDR_VAR 0 9
30615: PUSH
30616: LD_VAR 0 12
30620: PUSH
30621: FOR_IN
30622: IFFALSE 30695
// if GetBType ( j ) = b_bunker then
30624: LD_VAR 0 9
30628: PPUSH
30629: CALL_OW 266
30633: PUSH
30634: LD_INT 32
30636: EQUAL
30637: IFFALSE 30664
// tmp := Insert ( tmp , 1 , j ) else
30639: LD_ADDR_VAR 0 19
30643: PUSH
30644: LD_VAR 0 19
30648: PPUSH
30649: LD_INT 1
30651: PPUSH
30652: LD_VAR 0 9
30656: PPUSH
30657: CALL_OW 2
30661: ST_TO_ADDR
30662: GO 30693
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30664: LD_ADDR_VAR 0 19
30668: PUSH
30669: LD_VAR 0 19
30673: PPUSH
30674: LD_VAR 0 19
30678: PUSH
30679: LD_INT 1
30681: PLUS
30682: PPUSH
30683: LD_VAR 0 9
30687: PPUSH
30688: CALL_OW 2
30692: ST_TO_ADDR
30693: GO 30621
30695: POP
30696: POP
// if tmp then
30697: LD_VAR 0 19
30701: IFFALSE 30713
// f := tmp ;
30703: LD_ADDR_VAR 0 12
30707: PUSH
30708: LD_VAR 0 19
30712: ST_TO_ADDR
// end ; x := personel [ i ] ;
30713: LD_ADDR_VAR 0 13
30717: PUSH
30718: LD_VAR 0 6
30722: PUSH
30723: LD_VAR 0 8
30727: ARRAY
30728: ST_TO_ADDR
// if x = - 1 then
30729: LD_VAR 0 13
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: EQUAL
30738: IFFALSE 30947
// begin for j in f do
30740: LD_ADDR_VAR 0 9
30744: PUSH
30745: LD_VAR 0 12
30749: PUSH
30750: FOR_IN
30751: IFFALSE 30943
// repeat InitHc ;
30753: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30757: LD_VAR 0 9
30761: PPUSH
30762: CALL_OW 266
30766: PUSH
30767: LD_INT 5
30769: EQUAL
30770: IFFALSE 30840
// begin if UnitsInside ( j ) < 3 then
30772: LD_VAR 0 9
30776: PPUSH
30777: CALL_OW 313
30781: PUSH
30782: LD_INT 3
30784: LESS
30785: IFFALSE 30821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30787: LD_INT 0
30789: PPUSH
30790: LD_INT 5
30792: PUSH
30793: LD_INT 8
30795: PUSH
30796: LD_INT 9
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: PUSH
30804: LD_VAR 0 17
30808: ARRAY
30809: PPUSH
30810: LD_VAR 0 4
30814: PPUSH
30815: CALL_OW 380
30819: GO 30838
// PrepareHuman ( false , i , skill ) ;
30821: LD_INT 0
30823: PPUSH
30824: LD_VAR 0 8
30828: PPUSH
30829: LD_VAR 0 4
30833: PPUSH
30834: CALL_OW 380
// end else
30838: GO 30857
// PrepareHuman ( false , i , skill ) ;
30840: LD_INT 0
30842: PPUSH
30843: LD_VAR 0 8
30847: PPUSH
30848: LD_VAR 0 4
30852: PPUSH
30853: CALL_OW 380
// un := CreateHuman ;
30857: LD_ADDR_VAR 0 14
30861: PUSH
30862: CALL_OW 44
30866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30867: LD_ADDR_VAR 0 7
30871: PUSH
30872: LD_VAR 0 7
30876: PPUSH
30877: LD_INT 1
30879: PPUSH
30880: LD_VAR 0 14
30884: PPUSH
30885: CALL_OW 2
30889: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30890: LD_VAR 0 14
30894: PPUSH
30895: LD_VAR 0 9
30899: PPUSH
30900: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30904: LD_VAR 0 9
30908: PPUSH
30909: CALL_OW 313
30913: PUSH
30914: LD_INT 6
30916: EQUAL
30917: PUSH
30918: LD_VAR 0 9
30922: PPUSH
30923: CALL_OW 266
30927: PUSH
30928: LD_INT 32
30930: PUSH
30931: LD_INT 31
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: IN
30938: OR
30939: IFFALSE 30753
30941: GO 30750
30943: POP
30944: POP
// end else
30945: GO 31327
// for j = 1 to x do
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: DOUBLE
30953: LD_INT 1
30955: DEC
30956: ST_TO_ADDR
30957: LD_VAR 0 13
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31325
// begin InitHc ;
30965: CALL_OW 19
// if not f then
30969: LD_VAR 0 12
30973: NOT
30974: IFFALSE 31063
// begin PrepareHuman ( false , i , skill ) ;
30976: LD_INT 0
30978: PPUSH
30979: LD_VAR 0 8
30983: PPUSH
30984: LD_VAR 0 4
30988: PPUSH
30989: CALL_OW 380
// un := CreateHuman ;
30993: LD_ADDR_VAR 0 14
30997: PUSH
30998: CALL_OW 44
31002: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31003: LD_ADDR_VAR 0 7
31007: PUSH
31008: LD_VAR 0 7
31012: PPUSH
31013: LD_INT 1
31015: PPUSH
31016: LD_VAR 0 14
31020: PPUSH
31021: CALL_OW 2
31025: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31026: LD_VAR 0 14
31030: PPUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 250
31040: PPUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 251
31050: PPUSH
31051: LD_INT 10
31053: PPUSH
31054: LD_INT 0
31056: PPUSH
31057: CALL_OW 50
// continue ;
31061: GO 30962
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31063: LD_VAR 0 12
31067: PUSH
31068: LD_INT 1
31070: ARRAY
31071: PPUSH
31072: CALL_OW 313
31076: PUSH
31077: LD_VAR 0 12
31081: PUSH
31082: LD_INT 1
31084: ARRAY
31085: PPUSH
31086: CALL_OW 266
31090: PUSH
31091: LD_INT 32
31093: PUSH
31094: LD_INT 31
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: IN
31101: AND
31102: PUSH
31103: LD_VAR 0 12
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: CALL_OW 313
31116: PUSH
31117: LD_INT 6
31119: EQUAL
31120: OR
31121: IFFALSE 31141
// f := Delete ( f , 1 ) ;
31123: LD_ADDR_VAR 0 12
31127: PUSH
31128: LD_VAR 0 12
31132: PPUSH
31133: LD_INT 1
31135: PPUSH
31136: CALL_OW 3
31140: ST_TO_ADDR
// if not f then
31141: LD_VAR 0 12
31145: NOT
31146: IFFALSE 31164
// begin x := x + 2 ;
31148: LD_ADDR_VAR 0 13
31152: PUSH
31153: LD_VAR 0 13
31157: PUSH
31158: LD_INT 2
31160: PLUS
31161: ST_TO_ADDR
// continue ;
31162: GO 30962
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31164: LD_VAR 0 12
31168: PUSH
31169: LD_INT 1
31171: ARRAY
31172: PPUSH
31173: CALL_OW 266
31177: PUSH
31178: LD_INT 5
31180: EQUAL
31181: IFFALSE 31255
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31183: LD_VAR 0 12
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: PPUSH
31192: CALL_OW 313
31196: PUSH
31197: LD_INT 3
31199: LESS
31200: IFFALSE 31236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31202: LD_INT 0
31204: PPUSH
31205: LD_INT 5
31207: PUSH
31208: LD_INT 8
31210: PUSH
31211: LD_INT 9
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PUSH
31219: LD_VAR 0 17
31223: ARRAY
31224: PPUSH
31225: LD_VAR 0 4
31229: PPUSH
31230: CALL_OW 380
31234: GO 31253
// PrepareHuman ( false , i , skill ) ;
31236: LD_INT 0
31238: PPUSH
31239: LD_VAR 0 8
31243: PPUSH
31244: LD_VAR 0 4
31248: PPUSH
31249: CALL_OW 380
// end else
31253: GO 31272
// PrepareHuman ( false , i , skill ) ;
31255: LD_INT 0
31257: PPUSH
31258: LD_VAR 0 8
31262: PPUSH
31263: LD_VAR 0 4
31267: PPUSH
31268: CALL_OW 380
// un := CreateHuman ;
31272: LD_ADDR_VAR 0 14
31276: PUSH
31277: CALL_OW 44
31281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31282: LD_ADDR_VAR 0 7
31286: PUSH
31287: LD_VAR 0 7
31291: PPUSH
31292: LD_INT 1
31294: PPUSH
31295: LD_VAR 0 14
31299: PPUSH
31300: CALL_OW 2
31304: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31305: LD_VAR 0 14
31309: PPUSH
31310: LD_VAR 0 12
31314: PUSH
31315: LD_INT 1
31317: ARRAY
31318: PPUSH
31319: CALL_OW 52
// end ;
31323: GO 30962
31325: POP
31326: POP
// end ;
31327: GO 30264
31329: POP
31330: POP
// result := result ^ buildings ;
31331: LD_ADDR_VAR 0 7
31335: PUSH
31336: LD_VAR 0 7
31340: PUSH
31341: LD_VAR 0 18
31345: ADD
31346: ST_TO_ADDR
// end else
31347: GO 31490
// begin for i = 1 to personel do
31349: LD_ADDR_VAR 0 8
31353: PUSH
31354: DOUBLE
31355: LD_INT 1
31357: DEC
31358: ST_TO_ADDR
31359: LD_VAR 0 6
31363: PUSH
31364: FOR_TO
31365: IFFALSE 31488
// begin if i > 4 then
31367: LD_VAR 0 8
31371: PUSH
31372: LD_INT 4
31374: GREATER
31375: IFFALSE 31379
// break ;
31377: GO 31488
// x := personel [ i ] ;
31379: LD_ADDR_VAR 0 13
31383: PUSH
31384: LD_VAR 0 6
31388: PUSH
31389: LD_VAR 0 8
31393: ARRAY
31394: ST_TO_ADDR
// if x = - 1 then
31395: LD_VAR 0 13
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: EQUAL
31404: IFFALSE 31408
// continue ;
31406: GO 31364
// PrepareHuman ( false , i , skill ) ;
31408: LD_INT 0
31410: PPUSH
31411: LD_VAR 0 8
31415: PPUSH
31416: LD_VAR 0 4
31420: PPUSH
31421: CALL_OW 380
// un := CreateHuman ;
31425: LD_ADDR_VAR 0 14
31429: PUSH
31430: CALL_OW 44
31434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31435: LD_VAR 0 14
31439: PPUSH
31440: LD_VAR 0 1
31444: PPUSH
31445: CALL_OW 250
31449: PPUSH
31450: LD_VAR 0 1
31454: PPUSH
31455: CALL_OW 251
31459: PPUSH
31460: LD_INT 10
31462: PPUSH
31463: LD_INT 0
31465: PPUSH
31466: CALL_OW 50
// result := result ^ un ;
31470: LD_ADDR_VAR 0 7
31474: PUSH
31475: LD_VAR 0 7
31479: PUSH
31480: LD_VAR 0 14
31484: ADD
31485: ST_TO_ADDR
// end ;
31486: GO 31364
31488: POP
31489: POP
// end ; end ;
31490: LD_VAR 0 7
31494: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31495: LD_INT 0
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
31502: PPUSH
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
// result := false ;
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31521: LD_VAR 0 1
31525: NOT
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 266
31536: PUSH
31537: LD_INT 32
31539: PUSH
31540: LD_INT 33
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: IN
31547: NOT
31548: OR
31549: IFFALSE 31553
// exit ;
31551: GO 32662
// nat := GetNation ( tower ) ;
31553: LD_ADDR_VAR 0 12
31557: PUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL_OW 248
31567: ST_TO_ADDR
// side := GetSide ( tower ) ;
31568: LD_ADDR_VAR 0 16
31572: PUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 255
31582: ST_TO_ADDR
// x := GetX ( tower ) ;
31583: LD_ADDR_VAR 0 10
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 250
31597: ST_TO_ADDR
// y := GetY ( tower ) ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 251
31612: ST_TO_ADDR
// if not x or not y then
31613: LD_VAR 0 10
31617: NOT
31618: PUSH
31619: LD_VAR 0 11
31623: NOT
31624: OR
31625: IFFALSE 31629
// exit ;
31627: GO 32662
// weapon := 0 ;
31629: LD_ADDR_VAR 0 18
31633: PUSH
31634: LD_INT 0
31636: ST_TO_ADDR
// fac_list := [ ] ;
31637: LD_ADDR_VAR 0 17
31641: PUSH
31642: EMPTY
31643: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31644: LD_ADDR_VAR 0 6
31648: PUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL_OW 274
31658: PPUSH
31659: LD_VAR 0 2
31663: PPUSH
31664: LD_INT 0
31666: PPUSH
31667: CALL 29233 0 3
31671: PPUSH
31672: LD_INT 30
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PPUSH
31682: CALL_OW 72
31686: ST_TO_ADDR
// if not factories then
31687: LD_VAR 0 6
31691: NOT
31692: IFFALSE 31696
// exit ;
31694: GO 32662
// for i in factories do
31696: LD_ADDR_VAR 0 8
31700: PUSH
31701: LD_VAR 0 6
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31732
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31709: LD_ADDR_VAR 0 17
31713: PUSH
31714: LD_VAR 0 17
31718: PUSH
31719: LD_VAR 0 8
31723: PPUSH
31724: CALL_OW 478
31728: UNION
31729: ST_TO_ADDR
31730: GO 31706
31732: POP
31733: POP
// if not fac_list then
31734: LD_VAR 0 17
31738: NOT
31739: IFFALSE 31743
// exit ;
31741: GO 32662
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31743: LD_ADDR_VAR 0 5
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: LD_INT 5
31753: PUSH
31754: LD_INT 9
31756: PUSH
31757: LD_INT 10
31759: PUSH
31760: LD_INT 6
31762: PUSH
31763: LD_INT 7
31765: PUSH
31766: LD_INT 11
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 27
31780: PUSH
31781: LD_INT 28
31783: PUSH
31784: LD_INT 26
31786: PUSH
31787: LD_INT 30
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 43
31798: PUSH
31799: LD_INT 44
31801: PUSH
31802: LD_INT 46
31804: PUSH
31805: LD_INT 45
31807: PUSH
31808: LD_INT 47
31810: PUSH
31811: LD_INT 49
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: PUSH
31827: LD_VAR 0 12
31831: ARRAY
31832: ST_TO_ADDR
// list := list isect fac_list ;
31833: LD_ADDR_VAR 0 5
31837: PUSH
31838: LD_VAR 0 5
31842: PUSH
31843: LD_VAR 0 17
31847: ISECT
31848: ST_TO_ADDR
// if not list then
31849: LD_VAR 0 5
31853: NOT
31854: IFFALSE 31858
// exit ;
31856: GO 32662
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31858: LD_VAR 0 12
31862: PUSH
31863: LD_INT 3
31865: EQUAL
31866: PUSH
31867: LD_INT 49
31869: PUSH
31870: LD_VAR 0 5
31874: IN
31875: AND
31876: PUSH
31877: LD_INT 31
31879: PPUSH
31880: LD_VAR 0 16
31884: PPUSH
31885: CALL_OW 321
31889: PUSH
31890: LD_INT 2
31892: EQUAL
31893: AND
31894: IFFALSE 31954
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31896: LD_INT 22
31898: PUSH
31899: LD_VAR 0 16
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 35
31910: PUSH
31911: LD_INT 49
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 91
31920: PUSH
31921: LD_VAR 0 1
31925: PUSH
31926: LD_INT 10
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL_OW 69
31943: NOT
31944: IFFALSE 31954
// weapon := ru_time_lapser ;
31946: LD_ADDR_VAR 0 18
31950: PUSH
31951: LD_INT 49
31953: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31954: LD_VAR 0 12
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: IN
31969: PUSH
31970: LD_INT 11
31972: PUSH
31973: LD_VAR 0 5
31977: IN
31978: PUSH
31979: LD_INT 30
31981: PUSH
31982: LD_VAR 0 5
31986: IN
31987: OR
31988: AND
31989: PUSH
31990: LD_INT 6
31992: PPUSH
31993: LD_VAR 0 16
31997: PPUSH
31998: CALL_OW 321
32002: PUSH
32003: LD_INT 2
32005: EQUAL
32006: AND
32007: IFFALSE 32172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32009: LD_INT 22
32011: PUSH
32012: LD_VAR 0 16
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: LD_INT 35
32026: PUSH
32027: LD_INT 11
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 35
32036: PUSH
32037: LD_INT 30
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 91
32051: PUSH
32052: LD_VAR 0 1
32056: PUSH
32057: LD_INT 18
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: PPUSH
32070: CALL_OW 69
32074: NOT
32075: PUSH
32076: LD_INT 22
32078: PUSH
32079: LD_VAR 0 16
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 30
32093: PUSH
32094: LD_INT 32
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 30
32103: PUSH
32104: LD_INT 33
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 91
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: LD_INT 12
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: EMPTY
32138: LIST
32139: PPUSH
32140: CALL_OW 69
32144: PUSH
32145: LD_INT 2
32147: GREATER
32148: AND
32149: IFFALSE 32172
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32151: LD_ADDR_VAR 0 18
32155: PUSH
32156: LD_INT 11
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_VAR 0 12
32170: ARRAY
32171: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32172: LD_VAR 0 18
32176: NOT
32177: PUSH
32178: LD_INT 40
32180: PPUSH
32181: LD_VAR 0 16
32185: PPUSH
32186: CALL_OW 321
32190: PUSH
32191: LD_INT 2
32193: EQUAL
32194: AND
32195: PUSH
32196: LD_INT 7
32198: PUSH
32199: LD_VAR 0 5
32203: IN
32204: PUSH
32205: LD_INT 28
32207: PUSH
32208: LD_VAR 0 5
32212: IN
32213: OR
32214: PUSH
32215: LD_INT 45
32217: PUSH
32218: LD_VAR 0 5
32222: IN
32223: OR
32224: AND
32225: IFFALSE 32479
// begin hex := GetHexInfo ( x , y ) ;
32227: LD_ADDR_VAR 0 4
32231: PUSH
32232: LD_VAR 0 10
32236: PPUSH
32237: LD_VAR 0 11
32241: PPUSH
32242: CALL_OW 546
32246: ST_TO_ADDR
// if hex [ 1 ] then
32247: LD_VAR 0 4
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: IFFALSE 32259
// exit ;
32257: GO 32662
// height := hex [ 2 ] ;
32259: LD_ADDR_VAR 0 15
32263: PUSH
32264: LD_VAR 0 4
32268: PUSH
32269: LD_INT 2
32271: ARRAY
32272: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32273: LD_ADDR_VAR 0 14
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 3
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// for i in tmp do
32296: LD_ADDR_VAR 0 8
32300: PUSH
32301: LD_VAR 0 14
32305: PUSH
32306: FOR_IN
32307: IFFALSE 32477
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_VAR 0 10
32318: PPUSH
32319: LD_VAR 0 8
32323: PPUSH
32324: LD_INT 5
32326: PPUSH
32327: CALL_OW 272
32331: PUSH
32332: LD_VAR 0 11
32336: PPUSH
32337: LD_VAR 0 8
32341: PPUSH
32342: LD_INT 5
32344: PPUSH
32345: CALL_OW 273
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32354: LD_VAR 0 9
32358: PUSH
32359: LD_INT 1
32361: ARRAY
32362: PPUSH
32363: LD_VAR 0 9
32367: PUSH
32368: LD_INT 2
32370: ARRAY
32371: PPUSH
32372: CALL_OW 488
32376: IFFALSE 32475
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32378: LD_ADDR_VAR 0 4
32382: PUSH
32383: LD_VAR 0 9
32387: PUSH
32388: LD_INT 1
32390: ARRAY
32391: PPUSH
32392: LD_VAR 0 9
32396: PUSH
32397: LD_INT 2
32399: ARRAY
32400: PPUSH
32401: CALL_OW 546
32405: ST_TO_ADDR
// if hex [ 1 ] then
32406: LD_VAR 0 4
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: IFFALSE 32418
// continue ;
32416: GO 32306
// h := hex [ 2 ] ;
32418: LD_ADDR_VAR 0 13
32422: PUSH
32423: LD_VAR 0 4
32427: PUSH
32428: LD_INT 2
32430: ARRAY
32431: ST_TO_ADDR
// if h + 7 < height then
32432: LD_VAR 0 13
32436: PUSH
32437: LD_INT 7
32439: PLUS
32440: PUSH
32441: LD_VAR 0 15
32445: LESS
32446: IFFALSE 32475
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32448: LD_ADDR_VAR 0 18
32452: PUSH
32453: LD_INT 7
32455: PUSH
32456: LD_INT 28
32458: PUSH
32459: LD_INT 45
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: PUSH
32467: LD_VAR 0 12
32471: ARRAY
32472: ST_TO_ADDR
// break ;
32473: GO 32477
// end ; end ; end ;
32475: GO 32306
32477: POP
32478: POP
// end ; if not weapon then
32479: LD_VAR 0 18
32483: NOT
32484: IFFALSE 32544
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32486: LD_ADDR_VAR 0 5
32490: PUSH
32491: LD_VAR 0 5
32495: PUSH
32496: LD_INT 11
32498: PUSH
32499: LD_INT 30
32501: PUSH
32502: LD_INT 49
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: DIFF
32510: ST_TO_ADDR
// if not list then
32511: LD_VAR 0 5
32515: NOT
32516: IFFALSE 32520
// exit ;
32518: GO 32662
// weapon := list [ rand ( 1 , list ) ] ;
32520: LD_ADDR_VAR 0 18
32524: PUSH
32525: LD_VAR 0 5
32529: PUSH
32530: LD_INT 1
32532: PPUSH
32533: LD_VAR 0 5
32537: PPUSH
32538: CALL_OW 12
32542: ARRAY
32543: ST_TO_ADDR
// end ; if weapon then
32544: LD_VAR 0 18
32548: IFFALSE 32662
// begin tmp := CostOfWeapon ( weapon ) ;
32550: LD_ADDR_VAR 0 14
32554: PUSH
32555: LD_VAR 0 18
32559: PPUSH
32560: CALL_OW 451
32564: ST_TO_ADDR
// j := GetBase ( tower ) ;
32565: LD_ADDR_VAR 0 9
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 274
32579: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32580: LD_VAR 0 9
32584: PPUSH
32585: LD_INT 1
32587: PPUSH
32588: CALL_OW 275
32592: PUSH
32593: LD_VAR 0 14
32597: PUSH
32598: LD_INT 1
32600: ARRAY
32601: GREATEREQUAL
32602: PUSH
32603: LD_VAR 0 9
32607: PPUSH
32608: LD_INT 2
32610: PPUSH
32611: CALL_OW 275
32615: PUSH
32616: LD_VAR 0 14
32620: PUSH
32621: LD_INT 2
32623: ARRAY
32624: GREATEREQUAL
32625: AND
32626: PUSH
32627: LD_VAR 0 9
32631: PPUSH
32632: LD_INT 3
32634: PPUSH
32635: CALL_OW 275
32639: PUSH
32640: LD_VAR 0 14
32644: PUSH
32645: LD_INT 3
32647: ARRAY
32648: GREATEREQUAL
32649: AND
32650: IFFALSE 32662
// result := weapon ;
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_VAR 0 18
32661: ST_TO_ADDR
// end ; end ;
32662: LD_VAR 0 3
32666: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32667: LD_INT 0
32669: PPUSH
32670: PPUSH
// result := true ;
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 1
32678: ST_TO_ADDR
// if array1 = array2 then
32679: LD_VAR 0 1
32683: PUSH
32684: LD_VAR 0 2
32688: EQUAL
32689: IFFALSE 32749
// begin for i = 1 to array1 do
32691: LD_ADDR_VAR 0 4
32695: PUSH
32696: DOUBLE
32697: LD_INT 1
32699: DEC
32700: ST_TO_ADDR
32701: LD_VAR 0 1
32705: PUSH
32706: FOR_TO
32707: IFFALSE 32745
// if array1 [ i ] <> array2 [ i ] then
32709: LD_VAR 0 1
32713: PUSH
32714: LD_VAR 0 4
32718: ARRAY
32719: PUSH
32720: LD_VAR 0 2
32724: PUSH
32725: LD_VAR 0 4
32729: ARRAY
32730: NONEQUAL
32731: IFFALSE 32743
// begin result := false ;
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_INT 0
32740: ST_TO_ADDR
// break ;
32741: GO 32745
// end ;
32743: GO 32706
32745: POP
32746: POP
// end else
32747: GO 32757
// result := false ;
32749: LD_ADDR_VAR 0 3
32753: PUSH
32754: LD_INT 0
32756: ST_TO_ADDR
// end ;
32757: LD_VAR 0 3
32761: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32762: LD_INT 0
32764: PPUSH
32765: PPUSH
// if not array1 or not array2 then
32766: LD_VAR 0 1
32770: NOT
32771: PUSH
32772: LD_VAR 0 2
32776: NOT
32777: OR
32778: IFFALSE 32782
// exit ;
32780: GO 32846
// result := true ;
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_INT 1
32789: ST_TO_ADDR
// for i = 1 to array1 do
32790: LD_ADDR_VAR 0 4
32794: PUSH
32795: DOUBLE
32796: LD_INT 1
32798: DEC
32799: ST_TO_ADDR
32800: LD_VAR 0 1
32804: PUSH
32805: FOR_TO
32806: IFFALSE 32844
// if array1 [ i ] <> array2 [ i ] then
32808: LD_VAR 0 1
32812: PUSH
32813: LD_VAR 0 4
32817: ARRAY
32818: PUSH
32819: LD_VAR 0 2
32823: PUSH
32824: LD_VAR 0 4
32828: ARRAY
32829: NONEQUAL
32830: IFFALSE 32842
// begin result := false ;
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: LD_INT 0
32839: ST_TO_ADDR
// break ;
32840: GO 32844
// end ;
32842: GO 32805
32844: POP
32845: POP
// end ;
32846: LD_VAR 0 3
32850: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
32855: PPUSH
// pom := GetBase ( fac ) ;
32856: LD_ADDR_VAR 0 5
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 274
32870: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32871: LD_ADDR_VAR 0 4
32875: PUSH
32876: LD_VAR 0 2
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: PPUSH
32885: LD_VAR 0 2
32889: PUSH
32890: LD_INT 2
32892: ARRAY
32893: PPUSH
32894: LD_VAR 0 2
32898: PUSH
32899: LD_INT 3
32901: ARRAY
32902: PPUSH
32903: LD_VAR 0 2
32907: PUSH
32908: LD_INT 4
32910: ARRAY
32911: PPUSH
32912: CALL_OW 449
32916: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32917: LD_ADDR_VAR 0 3
32921: PUSH
32922: LD_VAR 0 5
32926: PPUSH
32927: LD_INT 1
32929: PPUSH
32930: CALL_OW 275
32934: PUSH
32935: LD_VAR 0 4
32939: PUSH
32940: LD_INT 1
32942: ARRAY
32943: GREATEREQUAL
32944: PUSH
32945: LD_VAR 0 5
32949: PPUSH
32950: LD_INT 2
32952: PPUSH
32953: CALL_OW 275
32957: PUSH
32958: LD_VAR 0 4
32962: PUSH
32963: LD_INT 2
32965: ARRAY
32966: GREATEREQUAL
32967: AND
32968: PUSH
32969: LD_VAR 0 5
32973: PPUSH
32974: LD_INT 3
32976: PPUSH
32977: CALL_OW 275
32981: PUSH
32982: LD_VAR 0 4
32986: PUSH
32987: LD_INT 3
32989: ARRAY
32990: GREATEREQUAL
32991: AND
32992: ST_TO_ADDR
// end ;
32993: LD_VAR 0 3
32997: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32998: LD_INT 0
33000: PPUSH
33001: PPUSH
33002: PPUSH
33003: PPUSH
// pom := GetBase ( building ) ;
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 274
33018: ST_TO_ADDR
// if not pom then
33019: LD_VAR 0 3
33023: NOT
33024: IFFALSE 33028
// exit ;
33026: GO 33198
// btype := GetBType ( building ) ;
33028: LD_ADDR_VAR 0 5
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 266
33042: ST_TO_ADDR
// if btype = b_armoury then
33043: LD_VAR 0 5
33047: PUSH
33048: LD_INT 4
33050: EQUAL
33051: IFFALSE 33061
// btype := b_barracks ;
33053: LD_ADDR_VAR 0 5
33057: PUSH
33058: LD_INT 5
33060: ST_TO_ADDR
// if btype = b_depot then
33061: LD_VAR 0 5
33065: PUSH
33066: LD_INT 0
33068: EQUAL
33069: IFFALSE 33079
// btype := b_warehouse ;
33071: LD_ADDR_VAR 0 5
33075: PUSH
33076: LD_INT 1
33078: ST_TO_ADDR
// if btype = b_workshop then
33079: LD_VAR 0 5
33083: PUSH
33084: LD_INT 2
33086: EQUAL
33087: IFFALSE 33097
// btype := b_factory ;
33089: LD_ADDR_VAR 0 5
33093: PUSH
33094: LD_INT 3
33096: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: LD_VAR 0 5
33106: PPUSH
33107: LD_VAR 0 1
33111: PPUSH
33112: CALL_OW 248
33116: PPUSH
33117: CALL_OW 450
33121: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33122: LD_ADDR_VAR 0 2
33126: PUSH
33127: LD_VAR 0 3
33131: PPUSH
33132: LD_INT 1
33134: PPUSH
33135: CALL_OW 275
33139: PUSH
33140: LD_VAR 0 4
33144: PUSH
33145: LD_INT 1
33147: ARRAY
33148: GREATEREQUAL
33149: PUSH
33150: LD_VAR 0 3
33154: PPUSH
33155: LD_INT 2
33157: PPUSH
33158: CALL_OW 275
33162: PUSH
33163: LD_VAR 0 4
33167: PUSH
33168: LD_INT 2
33170: ARRAY
33171: GREATEREQUAL
33172: AND
33173: PUSH
33174: LD_VAR 0 3
33178: PPUSH
33179: LD_INT 3
33181: PPUSH
33182: CALL_OW 275
33186: PUSH
33187: LD_VAR 0 4
33191: PUSH
33192: LD_INT 3
33194: ARRAY
33195: GREATEREQUAL
33196: AND
33197: ST_TO_ADDR
// end ;
33198: LD_VAR 0 2
33202: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33203: LD_INT 0
33205: PPUSH
33206: PPUSH
33207: PPUSH
// pom := GetBase ( building ) ;
33208: LD_ADDR_VAR 0 4
33212: PUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 274
33222: ST_TO_ADDR
// if not pom then
33223: LD_VAR 0 4
33227: NOT
33228: IFFALSE 33232
// exit ;
33230: GO 33333
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33232: LD_ADDR_VAR 0 5
33236: PUSH
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 1
33246: PPUSH
33247: CALL_OW 248
33251: PPUSH
33252: CALL_OW 450
33256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_VAR 0 4
33266: PPUSH
33267: LD_INT 1
33269: PPUSH
33270: CALL_OW 275
33274: PUSH
33275: LD_VAR 0 5
33279: PUSH
33280: LD_INT 1
33282: ARRAY
33283: GREATEREQUAL
33284: PUSH
33285: LD_VAR 0 4
33289: PPUSH
33290: LD_INT 2
33292: PPUSH
33293: CALL_OW 275
33297: PUSH
33298: LD_VAR 0 5
33302: PUSH
33303: LD_INT 2
33305: ARRAY
33306: GREATEREQUAL
33307: AND
33308: PUSH
33309: LD_VAR 0 4
33313: PPUSH
33314: LD_INT 3
33316: PPUSH
33317: CALL_OW 275
33321: PUSH
33322: LD_VAR 0 5
33326: PUSH
33327: LD_INT 3
33329: ARRAY
33330: GREATEREQUAL
33331: AND
33332: ST_TO_ADDR
// end ;
33333: LD_VAR 0 3
33337: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33338: LD_INT 0
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
// result := false ;
33351: LD_ADDR_VAR 0 8
33355: PUSH
33356: LD_INT 0
33358: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33359: LD_VAR 0 5
33363: NOT
33364: PUSH
33365: LD_VAR 0 1
33369: NOT
33370: OR
33371: PUSH
33372: LD_VAR 0 2
33376: NOT
33377: OR
33378: PUSH
33379: LD_VAR 0 3
33383: NOT
33384: OR
33385: IFFALSE 33389
// exit ;
33387: GO 34203
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33389: LD_ADDR_VAR 0 14
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: LD_VAR 0 2
33403: PPUSH
33404: LD_VAR 0 3
33408: PPUSH
33409: LD_VAR 0 4
33413: PPUSH
33414: LD_VAR 0 5
33418: PUSH
33419: LD_INT 1
33421: ARRAY
33422: PPUSH
33423: CALL_OW 248
33427: PPUSH
33428: LD_INT 0
33430: PPUSH
33431: CALL 35440 0 6
33435: ST_TO_ADDR
// if not hexes then
33436: LD_VAR 0 14
33440: NOT
33441: IFFALSE 33445
// exit ;
33443: GO 34203
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33445: LD_ADDR_VAR 0 17
33449: PUSH
33450: LD_VAR 0 5
33454: PPUSH
33455: LD_INT 22
33457: PUSH
33458: LD_VAR 0 13
33462: PPUSH
33463: CALL_OW 255
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: LD_INT 30
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 30
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 72
33508: ST_TO_ADDR
// for i = 1 to hexes do
33509: LD_ADDR_VAR 0 9
33513: PUSH
33514: DOUBLE
33515: LD_INT 1
33517: DEC
33518: ST_TO_ADDR
33519: LD_VAR 0 14
33523: PUSH
33524: FOR_TO
33525: IFFALSE 34201
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33527: LD_ADDR_VAR 0 13
33531: PUSH
33532: LD_VAR 0 14
33536: PUSH
33537: LD_VAR 0 9
33541: ARRAY
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: LD_VAR 0 14
33551: PUSH
33552: LD_VAR 0 9
33556: ARRAY
33557: PUSH
33558: LD_INT 2
33560: ARRAY
33561: PPUSH
33562: CALL_OW 428
33566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33567: LD_VAR 0 14
33571: PUSH
33572: LD_VAR 0 9
33576: ARRAY
33577: PUSH
33578: LD_INT 1
33580: ARRAY
33581: PPUSH
33582: LD_VAR 0 14
33586: PUSH
33587: LD_VAR 0 9
33591: ARRAY
33592: PUSH
33593: LD_INT 2
33595: ARRAY
33596: PPUSH
33597: CALL_OW 351
33601: PUSH
33602: LD_VAR 0 14
33606: PUSH
33607: LD_VAR 0 9
33611: ARRAY
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: LD_VAR 0 14
33621: PUSH
33622: LD_VAR 0 9
33626: ARRAY
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: CALL_OW 488
33636: NOT
33637: OR
33638: PUSH
33639: LD_VAR 0 13
33643: PPUSH
33644: CALL_OW 247
33648: PUSH
33649: LD_INT 3
33651: EQUAL
33652: OR
33653: IFFALSE 33659
// exit ;
33655: POP
33656: POP
33657: GO 34203
// if not tmp then
33659: LD_VAR 0 13
33663: NOT
33664: IFFALSE 33668
// continue ;
33666: GO 33524
// result := true ;
33668: LD_ADDR_VAR 0 8
33672: PUSH
33673: LD_INT 1
33675: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33676: LD_VAR 0 6
33680: PUSH
33681: LD_VAR 0 13
33685: PPUSH
33686: CALL_OW 247
33690: PUSH
33691: LD_INT 2
33693: EQUAL
33694: AND
33695: PUSH
33696: LD_VAR 0 13
33700: PPUSH
33701: CALL_OW 263
33705: PUSH
33706: LD_INT 1
33708: EQUAL
33709: AND
33710: IFFALSE 33874
// begin if IsDrivenBy ( tmp ) then
33712: LD_VAR 0 13
33716: PPUSH
33717: CALL_OW 311
33721: IFFALSE 33725
// continue ;
33723: GO 33524
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33725: LD_VAR 0 6
33729: PPUSH
33730: LD_INT 3
33732: PUSH
33733: LD_INT 60
33735: PUSH
33736: EMPTY
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: LD_INT 55
33748: PUSH
33749: EMPTY
33750: LIST
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PPUSH
33760: CALL_OW 72
33764: IFFALSE 33872
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33766: LD_ADDR_VAR 0 18
33770: PUSH
33771: LD_VAR 0 6
33775: PPUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 60
33781: PUSH
33782: EMPTY
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: LD_INT 55
33794: PUSH
33795: EMPTY
33796: LIST
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PPUSH
33806: CALL_OW 72
33810: PUSH
33811: LD_INT 1
33813: ARRAY
33814: ST_TO_ADDR
// if IsInUnit ( driver ) then
33815: LD_VAR 0 18
33819: PPUSH
33820: CALL_OW 310
33824: IFFALSE 33835
// ComExit ( driver ) ;
33826: LD_VAR 0 18
33830: PPUSH
33831: CALL 58624 0 1
// AddComEnterUnit ( driver , tmp ) ;
33835: LD_VAR 0 18
33839: PPUSH
33840: LD_VAR 0 13
33844: PPUSH
33845: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33849: LD_VAR 0 18
33853: PPUSH
33854: LD_VAR 0 7
33858: PPUSH
33859: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33863: LD_VAR 0 18
33867: PPUSH
33868: CALL_OW 181
// end ; continue ;
33872: GO 33524
// end ; if not cleaners or not tmp in cleaners then
33874: LD_VAR 0 6
33878: NOT
33879: PUSH
33880: LD_VAR 0 13
33884: PUSH
33885: LD_VAR 0 6
33889: IN
33890: NOT
33891: OR
33892: IFFALSE 34199
// begin if dep then
33894: LD_VAR 0 17
33898: IFFALSE 34034
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33900: LD_ADDR_VAR 0 16
33904: PUSH
33905: LD_VAR 0 17
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: CALL_OW 250
33918: PPUSH
33919: LD_VAR 0 17
33923: PUSH
33924: LD_INT 1
33926: ARRAY
33927: PPUSH
33928: CALL_OW 254
33932: PPUSH
33933: LD_INT 5
33935: PPUSH
33936: CALL_OW 272
33940: PUSH
33941: LD_VAR 0 17
33945: PUSH
33946: LD_INT 1
33948: ARRAY
33949: PPUSH
33950: CALL_OW 251
33954: PPUSH
33955: LD_VAR 0 17
33959: PUSH
33960: LD_INT 1
33962: ARRAY
33963: PPUSH
33964: CALL_OW 254
33968: PPUSH
33969: LD_INT 5
33971: PPUSH
33972: CALL_OW 273
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33981: LD_VAR 0 16
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: PPUSH
33990: LD_VAR 0 16
33994: PUSH
33995: LD_INT 2
33997: ARRAY
33998: PPUSH
33999: CALL_OW 488
34003: IFFALSE 34034
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34005: LD_VAR 0 13
34009: PPUSH
34010: LD_VAR 0 16
34014: PUSH
34015: LD_INT 1
34017: ARRAY
34018: PPUSH
34019: LD_VAR 0 16
34023: PUSH
34024: LD_INT 2
34026: ARRAY
34027: PPUSH
34028: CALL_OW 111
// continue ;
34032: GO 33524
// end ; end ; r := GetDir ( tmp ) ;
34034: LD_ADDR_VAR 0 15
34038: PUSH
34039: LD_VAR 0 13
34043: PPUSH
34044: CALL_OW 254
34048: ST_TO_ADDR
// if r = 5 then
34049: LD_VAR 0 15
34053: PUSH
34054: LD_INT 5
34056: EQUAL
34057: IFFALSE 34067
// r := 0 ;
34059: LD_ADDR_VAR 0 15
34063: PUSH
34064: LD_INT 0
34066: ST_TO_ADDR
// for j = r to 5 do
34067: LD_ADDR_VAR 0 10
34071: PUSH
34072: DOUBLE
34073: LD_VAR 0 15
34077: DEC
34078: ST_TO_ADDR
34079: LD_INT 5
34081: PUSH
34082: FOR_TO
34083: IFFALSE 34197
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34085: LD_ADDR_VAR 0 11
34089: PUSH
34090: LD_VAR 0 13
34094: PPUSH
34095: CALL_OW 250
34099: PPUSH
34100: LD_VAR 0 10
34104: PPUSH
34105: LD_INT 2
34107: PPUSH
34108: CALL_OW 272
34112: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34113: LD_ADDR_VAR 0 12
34117: PUSH
34118: LD_VAR 0 13
34122: PPUSH
34123: CALL_OW 251
34127: PPUSH
34128: LD_VAR 0 10
34132: PPUSH
34133: LD_INT 2
34135: PPUSH
34136: CALL_OW 273
34140: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34141: LD_VAR 0 11
34145: PPUSH
34146: LD_VAR 0 12
34150: PPUSH
34151: CALL_OW 488
34155: PUSH
34156: LD_VAR 0 11
34160: PPUSH
34161: LD_VAR 0 12
34165: PPUSH
34166: CALL_OW 428
34170: NOT
34171: AND
34172: IFFALSE 34195
// begin ComMoveXY ( tmp , _x , _y ) ;
34174: LD_VAR 0 13
34178: PPUSH
34179: LD_VAR 0 11
34183: PPUSH
34184: LD_VAR 0 12
34188: PPUSH
34189: CALL_OW 111
// break ;
34193: GO 34197
// end ; end ;
34195: GO 34082
34197: POP
34198: POP
// end ; end ;
34199: GO 33524
34201: POP
34202: POP
// end ;
34203: LD_VAR 0 8
34207: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34208: LD_INT 0
34210: PPUSH
// result := true ;
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_INT 1
34218: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34219: LD_VAR 0 2
34223: PUSH
34224: LD_INT 24
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34238
34230: LD_INT 33
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34263
34238: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_INT 32
34246: PPUSH
34247: LD_VAR 0 1
34251: PPUSH
34252: CALL_OW 321
34256: PUSH
34257: LD_INT 2
34259: EQUAL
34260: ST_TO_ADDR
34261: GO 34583
34263: LD_INT 20
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34271
34269: GO 34296
34271: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34272: LD_ADDR_VAR 0 3
34276: PUSH
34277: LD_INT 6
34279: PPUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL_OW 321
34289: PUSH
34290: LD_INT 2
34292: EQUAL
34293: ST_TO_ADDR
34294: GO 34583
34296: LD_INT 22
34298: DOUBLE
34299: EQUAL
34300: IFTRUE 34310
34302: LD_INT 36
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34310
34308: GO 34335
34310: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_INT 15
34318: PPUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 321
34328: PUSH
34329: LD_INT 2
34331: EQUAL
34332: ST_TO_ADDR
34333: GO 34583
34335: LD_INT 30
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34368
34343: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 20
34351: PPUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 321
34361: PUSH
34362: LD_INT 2
34364: EQUAL
34365: ST_TO_ADDR
34366: GO 34583
34368: LD_INT 28
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34382
34374: LD_INT 21
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34382
34380: GO 34407
34382: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_INT 21
34390: PPUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 321
34400: PUSH
34401: LD_INT 2
34403: EQUAL
34404: ST_TO_ADDR
34405: GO 34583
34407: LD_INT 16
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34442
34415: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_EXP 89
34425: PPUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 321
34435: PUSH
34436: LD_INT 2
34438: EQUAL
34439: ST_TO_ADDR
34440: GO 34583
34442: LD_INT 19
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34456
34448: LD_INT 23
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34483
34456: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_EXP 88
34466: PPUSH
34467: LD_VAR 0 1
34471: PPUSH
34472: CALL_OW 321
34476: PUSH
34477: LD_INT 2
34479: EQUAL
34480: ST_TO_ADDR
34481: GO 34583
34483: LD_INT 17
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34516
34491: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_INT 39
34499: PPUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 321
34509: PUSH
34510: LD_INT 2
34512: EQUAL
34513: ST_TO_ADDR
34514: GO 34583
34516: LD_INT 18
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34524
34522: GO 34549
34524: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34525: LD_ADDR_VAR 0 3
34529: PUSH
34530: LD_INT 40
34532: PPUSH
34533: LD_VAR 0 1
34537: PPUSH
34538: CALL_OW 321
34542: PUSH
34543: LD_INT 2
34545: EQUAL
34546: ST_TO_ADDR
34547: GO 34583
34549: LD_INT 27
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34582
34557: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 35
34565: PPUSH
34566: LD_VAR 0 1
34570: PPUSH
34571: CALL_OW 321
34575: PUSH
34576: LD_INT 2
34578: EQUAL
34579: ST_TO_ADDR
34580: GO 34583
34582: POP
// end ;
34583: LD_VAR 0 3
34587: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34588: LD_INT 0
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
// result := false ;
34601: LD_ADDR_VAR 0 6
34605: PUSH
34606: LD_INT 0
34608: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34609: LD_VAR 0 1
34613: NOT
34614: PUSH
34615: LD_VAR 0 1
34619: PPUSH
34620: CALL_OW 266
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: IN
34635: NOT
34636: OR
34637: PUSH
34638: LD_VAR 0 2
34642: NOT
34643: OR
34644: PUSH
34645: LD_VAR 0 5
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: LD_INT 3
34661: PUSH
34662: LD_INT 4
34664: PUSH
34665: LD_INT 5
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: IN
34676: NOT
34677: OR
34678: PUSH
34679: LD_VAR 0 3
34683: PPUSH
34684: LD_VAR 0 4
34688: PPUSH
34689: CALL_OW 488
34693: NOT
34694: OR
34695: IFFALSE 34699
// exit ;
34697: GO 35435
// side := GetSide ( depot ) ;
34699: LD_ADDR_VAR 0 9
34703: PUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 255
34713: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34714: LD_VAR 0 9
34718: PPUSH
34719: LD_VAR 0 2
34723: PPUSH
34724: CALL 34208 0 2
34728: NOT
34729: IFFALSE 34733
// exit ;
34731: GO 35435
// pom := GetBase ( depot ) ;
34733: LD_ADDR_VAR 0 10
34737: PUSH
34738: LD_VAR 0 1
34742: PPUSH
34743: CALL_OW 274
34747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34748: LD_ADDR_VAR 0 11
34752: PUSH
34753: LD_VAR 0 2
34757: PPUSH
34758: LD_VAR 0 1
34762: PPUSH
34763: CALL_OW 248
34767: PPUSH
34768: CALL_OW 450
34772: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34773: LD_VAR 0 10
34777: PPUSH
34778: LD_INT 1
34780: PPUSH
34781: CALL_OW 275
34785: PUSH
34786: LD_VAR 0 11
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: GREATEREQUAL
34795: PUSH
34796: LD_VAR 0 10
34800: PPUSH
34801: LD_INT 2
34803: PPUSH
34804: CALL_OW 275
34808: PUSH
34809: LD_VAR 0 11
34813: PUSH
34814: LD_INT 2
34816: ARRAY
34817: GREATEREQUAL
34818: AND
34819: PUSH
34820: LD_VAR 0 10
34824: PPUSH
34825: LD_INT 3
34827: PPUSH
34828: CALL_OW 275
34832: PUSH
34833: LD_VAR 0 11
34837: PUSH
34838: LD_INT 3
34840: ARRAY
34841: GREATEREQUAL
34842: AND
34843: NOT
34844: IFFALSE 34848
// exit ;
34846: GO 35435
// if GetBType ( depot ) = b_depot then
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL_OW 266
34857: PUSH
34858: LD_INT 0
34860: EQUAL
34861: IFFALSE 34873
// dist := 28 else
34863: LD_ADDR_VAR 0 14
34867: PUSH
34868: LD_INT 28
34870: ST_TO_ADDR
34871: GO 34881
// dist := 36 ;
34873: LD_ADDR_VAR 0 14
34877: PUSH
34878: LD_INT 36
34880: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34881: LD_VAR 0 1
34885: PPUSH
34886: LD_VAR 0 3
34890: PPUSH
34891: LD_VAR 0 4
34895: PPUSH
34896: CALL_OW 297
34900: PUSH
34901: LD_VAR 0 14
34905: GREATER
34906: IFFALSE 34910
// exit ;
34908: GO 35435
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34910: LD_ADDR_VAR 0 12
34914: PUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: LD_VAR 0 3
34924: PPUSH
34925: LD_VAR 0 4
34929: PPUSH
34930: LD_VAR 0 5
34934: PPUSH
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 248
34944: PPUSH
34945: LD_INT 0
34947: PPUSH
34948: CALL 35440 0 6
34952: ST_TO_ADDR
// if not hexes then
34953: LD_VAR 0 12
34957: NOT
34958: IFFALSE 34962
// exit ;
34960: GO 35435
// hex := GetHexInfo ( x , y ) ;
34962: LD_ADDR_VAR 0 15
34966: PUSH
34967: LD_VAR 0 3
34971: PPUSH
34972: LD_VAR 0 4
34976: PPUSH
34977: CALL_OW 546
34981: ST_TO_ADDR
// if hex [ 1 ] then
34982: LD_VAR 0 15
34986: PUSH
34987: LD_INT 1
34989: ARRAY
34990: IFFALSE 34994
// exit ;
34992: GO 35435
// height := hex [ 2 ] ;
34994: LD_ADDR_VAR 0 13
34998: PUSH
34999: LD_VAR 0 15
35003: PUSH
35004: LD_INT 2
35006: ARRAY
35007: ST_TO_ADDR
// for i = 1 to hexes do
35008: LD_ADDR_VAR 0 7
35012: PUSH
35013: DOUBLE
35014: LD_INT 1
35016: DEC
35017: ST_TO_ADDR
35018: LD_VAR 0 12
35022: PUSH
35023: FOR_TO
35024: IFFALSE 35354
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35026: LD_VAR 0 12
35030: PUSH
35031: LD_VAR 0 7
35035: ARRAY
35036: PUSH
35037: LD_INT 1
35039: ARRAY
35040: PPUSH
35041: LD_VAR 0 12
35045: PUSH
35046: LD_VAR 0 7
35050: ARRAY
35051: PUSH
35052: LD_INT 2
35054: ARRAY
35055: PPUSH
35056: CALL_OW 488
35060: NOT
35061: PUSH
35062: LD_VAR 0 12
35066: PUSH
35067: LD_VAR 0 7
35071: ARRAY
35072: PUSH
35073: LD_INT 1
35075: ARRAY
35076: PPUSH
35077: LD_VAR 0 12
35081: PUSH
35082: LD_VAR 0 7
35086: ARRAY
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: PPUSH
35092: CALL_OW 428
35096: PUSH
35097: LD_INT 0
35099: GREATER
35100: OR
35101: PUSH
35102: LD_VAR 0 12
35106: PUSH
35107: LD_VAR 0 7
35111: ARRAY
35112: PUSH
35113: LD_INT 1
35115: ARRAY
35116: PPUSH
35117: LD_VAR 0 12
35121: PUSH
35122: LD_VAR 0 7
35126: ARRAY
35127: PUSH
35128: LD_INT 2
35130: ARRAY
35131: PPUSH
35132: CALL_OW 351
35136: OR
35137: IFFALSE 35143
// exit ;
35139: POP
35140: POP
35141: GO 35435
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35143: LD_ADDR_VAR 0 8
35147: PUSH
35148: LD_VAR 0 12
35152: PUSH
35153: LD_VAR 0 7
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: LD_VAR 0 12
35167: PUSH
35168: LD_VAR 0 7
35172: ARRAY
35173: PUSH
35174: LD_INT 2
35176: ARRAY
35177: PPUSH
35178: CALL_OW 546
35182: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35183: LD_VAR 0 8
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PUSH
35192: LD_VAR 0 8
35196: PUSH
35197: LD_INT 2
35199: ARRAY
35200: PUSH
35201: LD_VAR 0 13
35205: PUSH
35206: LD_INT 2
35208: PLUS
35209: GREATER
35210: OR
35211: PUSH
35212: LD_VAR 0 8
35216: PUSH
35217: LD_INT 2
35219: ARRAY
35220: PUSH
35221: LD_VAR 0 13
35225: PUSH
35226: LD_INT 2
35228: MINUS
35229: LESS
35230: OR
35231: PUSH
35232: LD_VAR 0 8
35236: PUSH
35237: LD_INT 3
35239: ARRAY
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 8
35246: PUSH
35247: LD_INT 9
35249: PUSH
35250: LD_INT 10
35252: PUSH
35253: LD_INT 11
35255: PUSH
35256: LD_INT 12
35258: PUSH
35259: LD_INT 13
35261: PUSH
35262: LD_INT 16
35264: PUSH
35265: LD_INT 17
35267: PUSH
35268: LD_INT 18
35270: PUSH
35271: LD_INT 19
35273: PUSH
35274: LD_INT 20
35276: PUSH
35277: LD_INT 21
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: IN
35295: NOT
35296: OR
35297: PUSH
35298: LD_VAR 0 8
35302: PUSH
35303: LD_INT 5
35305: ARRAY
35306: NOT
35307: OR
35308: PUSH
35309: LD_VAR 0 8
35313: PUSH
35314: LD_INT 6
35316: ARRAY
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 7
35326: PUSH
35327: LD_INT 9
35329: PUSH
35330: LD_INT 10
35332: PUSH
35333: LD_INT 11
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: IN
35344: NOT
35345: OR
35346: IFFALSE 35352
// exit ;
35348: POP
35349: POP
35350: GO 35435
// end ;
35352: GO 35023
35354: POP
35355: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35356: LD_VAR 0 9
35360: PPUSH
35361: LD_VAR 0 3
35365: PPUSH
35366: LD_VAR 0 4
35370: PPUSH
35371: LD_INT 20
35373: PPUSH
35374: CALL 27381 0 4
35378: PUSH
35379: LD_INT 4
35381: ARRAY
35382: IFFALSE 35386
// exit ;
35384: GO 35435
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35386: LD_VAR 0 2
35390: PUSH
35391: LD_INT 29
35393: PUSH
35394: LD_INT 30
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: IN
35401: PUSH
35402: LD_VAR 0 3
35406: PPUSH
35407: LD_VAR 0 4
35411: PPUSH
35412: LD_VAR 0 9
35416: PPUSH
35417: CALL_OW 440
35421: NOT
35422: AND
35423: IFFALSE 35427
// exit ;
35425: GO 35435
// result := true ;
35427: LD_ADDR_VAR 0 6
35431: PUSH
35432: LD_INT 1
35434: ST_TO_ADDR
// end ;
35435: LD_VAR 0 6
35439: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
35473: PPUSH
35474: PPUSH
35475: PPUSH
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
// result = [ ] ;
35500: LD_ADDR_VAR 0 7
35504: PUSH
35505: EMPTY
35506: ST_TO_ADDR
// temp_list = [ ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: EMPTY
35513: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35514: LD_VAR 0 4
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: LD_INT 4
35533: PUSH
35534: LD_INT 5
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: IN
35545: NOT
35546: PUSH
35547: LD_VAR 0 1
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: IN
35562: PUSH
35563: LD_VAR 0 5
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: IN
35582: NOT
35583: AND
35584: OR
35585: IFFALSE 35589
// exit ;
35587: GO 53980
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35589: LD_VAR 0 1
35593: PUSH
35594: LD_INT 6
35596: PUSH
35597: LD_INT 7
35599: PUSH
35600: LD_INT 8
35602: PUSH
35603: LD_INT 13
35605: PUSH
35606: LD_INT 12
35608: PUSH
35609: LD_INT 15
35611: PUSH
35612: LD_INT 11
35614: PUSH
35615: LD_INT 14
35617: PUSH
35618: LD_INT 10
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: IN
35632: IFFALSE 35642
// btype = b_lab ;
35634: LD_ADDR_VAR 0 1
35638: PUSH
35639: LD_INT 6
35641: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35642: LD_VAR 0 6
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: IN
35661: NOT
35662: PUSH
35663: LD_VAR 0 1
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: LD_INT 6
35682: PUSH
35683: LD_INT 36
35685: PUSH
35686: LD_INT 4
35688: PUSH
35689: LD_INT 5
35691: PUSH
35692: LD_INT 31
35694: PUSH
35695: LD_INT 32
35697: PUSH
35698: LD_INT 33
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: IN
35714: NOT
35715: PUSH
35716: LD_VAR 0 6
35720: PUSH
35721: LD_INT 1
35723: EQUAL
35724: AND
35725: OR
35726: PUSH
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: IN
35742: NOT
35743: PUSH
35744: LD_VAR 0 6
35748: PUSH
35749: LD_INT 2
35751: EQUAL
35752: AND
35753: OR
35754: IFFALSE 35764
// mode = 0 ;
35756: LD_ADDR_VAR 0 6
35760: PUSH
35761: LD_INT 0
35763: ST_TO_ADDR
// case mode of 0 :
35764: LD_VAR 0 6
35768: PUSH
35769: LD_INT 0
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35777
35775: GO 47230
35777: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35778: LD_ADDR_VAR 0 11
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 3
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35971: LD_ADDR_VAR 0 12
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: NEG
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 3
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36167: LD_ADDR_VAR 0 13
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 2
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: LD_INT 3
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 3
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: LD_INT 3
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36366: LD_ADDR_VAR 0 14
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 3
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 3
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36562: LD_ADDR_VAR 0 15
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36755: LD_ADDR_VAR 0 16
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 3
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36948: LD_ADDR_VAR 0 17
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 2
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 2
37147: NEG
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37178: LD_ADDR_VAR 0 18
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37408: LD_ADDR_VAR 0 19
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: NEG
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37638: LD_ADDR_VAR 0 20
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37868: LD_ADDR_VAR 0 21
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 2
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38098: LD_ADDR_VAR 0 22
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38328: LD_ADDR_VAR 0 23
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 2
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 2
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 3
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 3
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38608: LD_ADDR_VAR 0 24
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38884: LD_ADDR_VAR 0 25
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 3
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39158: LD_ADDR_VAR 0 26
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 3
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39434: LD_ADDR_VAR 0 27
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: LD_INT 2
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39714: LD_ADDR_VAR 0 28
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: LD_INT 3
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 3
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 3
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39996: LD_ADDR_VAR 0 29
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 2
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40275: LD_ADDR_VAR 0 30
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 3
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 3
40518: NEG
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40553: LD_ADDR_VAR 0 31
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40831: LD_ADDR_VAR 0 32
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41109: LD_ADDR_VAR 0 33
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 2
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: NEG
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41388: LD_ADDR_VAR 0 34
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41668: LD_ADDR_VAR 0 35
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41780: LD_ADDR_VAR 0 36
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41892: LD_ADDR_VAR 0 37
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42004: LD_ADDR_VAR 0 38
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42116: LD_ADDR_VAR 0 39
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42228: LD_ADDR_VAR 0 40
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42340: LD_ADDR_VAR 0 41
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: LD_INT 3
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 3
42614: NEG
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 3
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: NEG
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: NEG
42650: PUSH
42651: LD_INT 3
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42690: LD_ADDR_VAR 0 42
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 3
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 3
42987: NEG
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 3
42999: NEG
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43040: LD_ADDR_VAR 0 43
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 3
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 3
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43388: LD_ADDR_VAR 0 44
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 3
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 3
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 3
43662: NEG
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 3
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: LD_INT 3
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43738: LD_ADDR_VAR 0 45
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 3
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: LD_INT 3
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 3
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 3
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: NEG
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44088: LD_ADDR_VAR 0 46
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 3
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 3
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44436: LD_ADDR_VAR 0 47
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44587: LD_ADDR_VAR 0 48
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44734: LD_ADDR_VAR 0 49
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44878: LD_ADDR_VAR 0 50
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45022: LD_ADDR_VAR 0 51
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45169: LD_ADDR_VAR 0 52
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45320: LD_ADDR_VAR 0 53
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45550: LD_ADDR_VAR 0 54
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45780: LD_ADDR_VAR 0 55
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46010: LD_ADDR_VAR 0 56
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46240: LD_ADDR_VAR 0 57
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46470: LD_ADDR_VAR 0 58
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46700: LD_ADDR_VAR 0 59
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46788: LD_ADDR_VAR 0 60
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46876: LD_ADDR_VAR 0 61
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46964: LD_ADDR_VAR 0 62
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47052: LD_ADDR_VAR 0 63
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47140: LD_ADDR_VAR 0 64
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: ST_TO_ADDR
// end ; 1 :
47228: GO 53125
47230: LD_INT 1
47232: DOUBLE
47233: EQUAL
47234: IFTRUE 47238
47236: GO 49861
47238: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47239: LD_ADDR_VAR 0 11
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47283: LD_ADDR_VAR 0 12
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47324: LD_ADDR_VAR 0 13
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47364: LD_ADDR_VAR 0 14
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 3
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47405: LD_ADDR_VAR 0 15
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47449: LD_ADDR_VAR 0 16
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47495: LD_ADDR_VAR 0 17
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47539: LD_ADDR_VAR 0 18
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47580: LD_ADDR_VAR 0 19
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47620: LD_ADDR_VAR 0 20
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 3
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47661: LD_ADDR_VAR 0 21
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47705: LD_ADDR_VAR 0 22
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47751: LD_ADDR_VAR 0 23
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 3
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 4
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47795: LD_ADDR_VAR 0 24
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 4
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47836: LD_ADDR_VAR 0 25
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 4
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47876: LD_ADDR_VAR 0 26
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47917: LD_ADDR_VAR 0 27
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 4
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47961: LD_ADDR_VAR 0 28
47965: PUSH
47966: LD_INT 3
47968: NEG
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 3
47980: NEG
47981: PUSH
47982: LD_INT 4
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 4
47992: NEG
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48007: LD_ADDR_VAR 0 29
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 3
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 4
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 4
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 3
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 5
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 5
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 4
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 6
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 6
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 5
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48162: LD_ADDR_VAR 0 30
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 4
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 4
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 4
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 5
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 5
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 5
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 6
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 6
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48305: LD_ADDR_VAR 0 31
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 4
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 4
48352: PUSH
48353: LD_INT 4
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 5
48372: PUSH
48373: LD_INT 4
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 5
48382: PUSH
48383: LD_INT 5
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 4
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 6
48402: PUSH
48403: LD_INT 5
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 6
48412: PUSH
48413: LD_INT 6
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 5
48422: PUSH
48423: LD_INT 6
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48444: LD_ADDR_VAR 0 32
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 4
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 5
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 5
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 4
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 6
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 6
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 5
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48587: LD_ADDR_VAR 0 33
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 4
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 4
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 4
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 5
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 5
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 5
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 6
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 6
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48742: LD_ADDR_VAR 0 34
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 3
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 4
48809: NEG
48810: PUSH
48811: LD_INT 4
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 4
48821: NEG
48822: PUSH
48823: LD_INT 5
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 5
48833: NEG
48834: PUSH
48835: LD_INT 4
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 5
48845: NEG
48846: PUSH
48847: LD_INT 5
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 5
48857: NEG
48858: PUSH
48859: LD_INT 6
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 6
48869: NEG
48870: PUSH
48871: LD_INT 5
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 6
48881: NEG
48882: PUSH
48883: LD_INT 6
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48905: LD_ADDR_VAR 0 41
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48949: LD_ADDR_VAR 0 42
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48990: LD_ADDR_VAR 0 43
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49030: LD_ADDR_VAR 0 44
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: LIST
49070: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49071: LD_ADDR_VAR 0 45
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49115: LD_ADDR_VAR 0 46
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49161: LD_ADDR_VAR 0 47
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49194: LD_ADDR_VAR 0 48
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49225: LD_ADDR_VAR 0 49
49229: PUSH
49230: LD_INT 3
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49254: LD_ADDR_VAR 0 50
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49283: LD_ADDR_VAR 0 51
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49314: LD_ADDR_VAR 0 52
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49347: LD_ADDR_VAR 0 53
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49391: LD_ADDR_VAR 0 54
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49432: LD_ADDR_VAR 0 55
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49472: LD_ADDR_VAR 0 56
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49513: LD_ADDR_VAR 0 57
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49557: LD_ADDR_VAR 0 58
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49603: LD_ADDR_VAR 0 59
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49647: LD_ADDR_VAR 0 60
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49688: LD_ADDR_VAR 0 61
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49728: LD_ADDR_VAR 0 62
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49769: LD_ADDR_VAR 0 63
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49813: LD_ADDR_VAR 0 64
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// end ; 2 :
49859: GO 53125
49861: LD_INT 2
49863: DOUBLE
49864: EQUAL
49865: IFTRUE 49869
49867: GO 53124
49869: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49870: LD_ADDR_VAR 0 29
49874: PUSH
49875: LD_INT 4
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 5
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 5
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 4
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 5
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 4
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 4
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: LD_INT 4
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 4
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 4
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 4
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 4
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 5
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 5
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 4
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 5
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 4
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 4
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 4
50255: NEG
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 4
50267: NEG
50268: PUSH
50269: LD_INT 5
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: NEG
50280: PUSH
50281: LD_INT 4
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 4
50303: NEG
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 5
50315: NEG
50316: PUSH
50317: LD_INT 4
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 5
50327: NEG
50328: PUSH
50329: LD_INT 5
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: LD_INT 5
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 5
50351: NEG
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50408: LD_ADDR_VAR 0 30
50412: PUSH
50413: LD_INT 4
50415: PUSH
50416: LD_INT 4
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 4
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 5
50435: PUSH
50436: LD_INT 4
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 5
50445: PUSH
50446: LD_INT 5
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 4
50455: PUSH
50456: LD_INT 5
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 5
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 5
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 4
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 4
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 4
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 4
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 4
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 5
50654: NEG
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 5
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 5
50677: NEG
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 4
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 4
50760: NEG
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 4
50772: NEG
50773: PUSH
50774: LD_INT 4
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 4
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: NEG
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 4
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 5
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 4
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 4
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 5
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 5
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50955: LD_ADDR_VAR 0 31
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 4
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 5
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 5
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 5
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 4
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 4
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: LD_INT 5
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 5
51217: NEG
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 5
51229: NEG
51230: PUSH
51231: LD_INT 5
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: LD_INT 5
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 5
51253: NEG
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 4
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 4
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 4
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 4
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 4
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 5
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 5
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 3
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 5
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51505: LD_ADDR_VAR 0 32
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 3
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 4
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 5
51568: NEG
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 5
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 5
51591: NEG
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 4
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 4
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: NEG
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 5
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 4
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 3
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: LD_INT 4
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 5
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 5
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: LD_INT 4
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 4
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 5
51937: PUSH
51938: LD_INT 4
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 5
51947: PUSH
51948: LD_INT 5
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: PUSH
51958: LD_INT 5
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: LD_INT 4
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52052: LD_ADDR_VAR 0 33
52056: PUSH
52057: LD_INT 4
52059: NEG
52060: PUSH
52061: LD_INT 4
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: LD_INT 5
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 3
52095: NEG
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 5
52119: NEG
52120: PUSH
52121: LD_INT 4
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 5
52131: NEG
52132: PUSH
52133: LD_INT 5
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 5
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 5
52155: NEG
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 4
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 3
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 4
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 4
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 4
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 5
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 5
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 4
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 5
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 4
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 4
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: LD_INT 4
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 4
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 4
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 4
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 4
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 5
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 5
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 5
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52590: LD_ADDR_VAR 0 34
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 4
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 5
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 4
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: LD_INT 4
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 5
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 5
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 4
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 4
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 4
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 5
52812: PUSH
52813: LD_INT 4
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 5
52822: PUSH
52823: LD_INT 5
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 4
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 5
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: LD_INT 5
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 4
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 4
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 4
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 4
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 4
53020: NEG
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 5
53031: NEG
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 5
53042: NEG
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 5
53054: NEG
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// end ; end ;
53122: GO 53125
53124: POP
// case btype of b_depot , b_warehouse :
53125: LD_VAR 0 1
53129: PUSH
53130: LD_INT 0
53132: DOUBLE
53133: EQUAL
53134: IFTRUE 53144
53136: LD_INT 1
53138: DOUBLE
53139: EQUAL
53140: IFTRUE 53144
53142: GO 53345
53144: POP
// case nation of nation_american :
53145: LD_VAR 0 5
53149: PUSH
53150: LD_INT 1
53152: DOUBLE
53153: EQUAL
53154: IFTRUE 53158
53156: GO 53214
53158: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53159: LD_ADDR_VAR 0 9
53163: PUSH
53164: LD_VAR 0 11
53168: PUSH
53169: LD_VAR 0 12
53173: PUSH
53174: LD_VAR 0 13
53178: PUSH
53179: LD_VAR 0 14
53183: PUSH
53184: LD_VAR 0 15
53188: PUSH
53189: LD_VAR 0 16
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: PUSH
53202: LD_VAR 0 4
53206: PUSH
53207: LD_INT 1
53209: PLUS
53210: ARRAY
53211: ST_TO_ADDR
53212: GO 53343
53214: LD_INT 2
53216: DOUBLE
53217: EQUAL
53218: IFTRUE 53222
53220: GO 53278
53222: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53223: LD_ADDR_VAR 0 9
53227: PUSH
53228: LD_VAR 0 17
53232: PUSH
53233: LD_VAR 0 18
53237: PUSH
53238: LD_VAR 0 19
53242: PUSH
53243: LD_VAR 0 20
53247: PUSH
53248: LD_VAR 0 21
53252: PUSH
53253: LD_VAR 0 22
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: PUSH
53266: LD_VAR 0 4
53270: PUSH
53271: LD_INT 1
53273: PLUS
53274: ARRAY
53275: ST_TO_ADDR
53276: GO 53343
53278: LD_INT 3
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53342
53286: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53287: LD_ADDR_VAR 0 9
53291: PUSH
53292: LD_VAR 0 23
53296: PUSH
53297: LD_VAR 0 24
53301: PUSH
53302: LD_VAR 0 25
53306: PUSH
53307: LD_VAR 0 26
53311: PUSH
53312: LD_VAR 0 27
53316: PUSH
53317: LD_VAR 0 28
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: PUSH
53330: LD_VAR 0 4
53334: PUSH
53335: LD_INT 1
53337: PLUS
53338: ARRAY
53339: ST_TO_ADDR
53340: GO 53343
53342: POP
53343: GO 53898
53345: LD_INT 2
53347: DOUBLE
53348: EQUAL
53349: IFTRUE 53359
53351: LD_INT 3
53353: DOUBLE
53354: EQUAL
53355: IFTRUE 53359
53357: GO 53415
53359: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53360: LD_ADDR_VAR 0 9
53364: PUSH
53365: LD_VAR 0 29
53369: PUSH
53370: LD_VAR 0 30
53374: PUSH
53375: LD_VAR 0 31
53379: PUSH
53380: LD_VAR 0 32
53384: PUSH
53385: LD_VAR 0 33
53389: PUSH
53390: LD_VAR 0 34
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: LD_VAR 0 4
53407: PUSH
53408: LD_INT 1
53410: PLUS
53411: ARRAY
53412: ST_TO_ADDR
53413: GO 53898
53415: LD_INT 16
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53477
53421: LD_INT 17
53423: DOUBLE
53424: EQUAL
53425: IFTRUE 53477
53427: LD_INT 18
53429: DOUBLE
53430: EQUAL
53431: IFTRUE 53477
53433: LD_INT 19
53435: DOUBLE
53436: EQUAL
53437: IFTRUE 53477
53439: LD_INT 22
53441: DOUBLE
53442: EQUAL
53443: IFTRUE 53477
53445: LD_INT 20
53447: DOUBLE
53448: EQUAL
53449: IFTRUE 53477
53451: LD_INT 21
53453: DOUBLE
53454: EQUAL
53455: IFTRUE 53477
53457: LD_INT 23
53459: DOUBLE
53460: EQUAL
53461: IFTRUE 53477
53463: LD_INT 24
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53477
53469: LD_INT 25
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 53533
53477: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53478: LD_ADDR_VAR 0 9
53482: PUSH
53483: LD_VAR 0 35
53487: PUSH
53488: LD_VAR 0 36
53492: PUSH
53493: LD_VAR 0 37
53497: PUSH
53498: LD_VAR 0 38
53502: PUSH
53503: LD_VAR 0 39
53507: PUSH
53508: LD_VAR 0 40
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 4
53525: PUSH
53526: LD_INT 1
53528: PLUS
53529: ARRAY
53530: ST_TO_ADDR
53531: GO 53898
53533: LD_INT 6
53535: DOUBLE
53536: EQUAL
53537: IFTRUE 53589
53539: LD_INT 7
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53589
53545: LD_INT 8
53547: DOUBLE
53548: EQUAL
53549: IFTRUE 53589
53551: LD_INT 13
53553: DOUBLE
53554: EQUAL
53555: IFTRUE 53589
53557: LD_INT 12
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53589
53563: LD_INT 15
53565: DOUBLE
53566: EQUAL
53567: IFTRUE 53589
53569: LD_INT 11
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53589
53575: LD_INT 14
53577: DOUBLE
53578: EQUAL
53579: IFTRUE 53589
53581: LD_INT 10
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53589
53587: GO 53645
53589: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53590: LD_ADDR_VAR 0 9
53594: PUSH
53595: LD_VAR 0 41
53599: PUSH
53600: LD_VAR 0 42
53604: PUSH
53605: LD_VAR 0 43
53609: PUSH
53610: LD_VAR 0 44
53614: PUSH
53615: LD_VAR 0 45
53619: PUSH
53620: LD_VAR 0 46
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 4
53637: PUSH
53638: LD_INT 1
53640: PLUS
53641: ARRAY
53642: ST_TO_ADDR
53643: GO 53898
53645: LD_INT 36
53647: DOUBLE
53648: EQUAL
53649: IFTRUE 53653
53651: GO 53709
53653: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53654: LD_ADDR_VAR 0 9
53658: PUSH
53659: LD_VAR 0 47
53663: PUSH
53664: LD_VAR 0 48
53668: PUSH
53669: LD_VAR 0 49
53673: PUSH
53674: LD_VAR 0 50
53678: PUSH
53679: LD_VAR 0 51
53683: PUSH
53684: LD_VAR 0 52
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: PUSH
53697: LD_VAR 0 4
53701: PUSH
53702: LD_INT 1
53704: PLUS
53705: ARRAY
53706: ST_TO_ADDR
53707: GO 53898
53709: LD_INT 4
53711: DOUBLE
53712: EQUAL
53713: IFTRUE 53735
53715: LD_INT 5
53717: DOUBLE
53718: EQUAL
53719: IFTRUE 53735
53721: LD_INT 34
53723: DOUBLE
53724: EQUAL
53725: IFTRUE 53735
53727: LD_INT 37
53729: DOUBLE
53730: EQUAL
53731: IFTRUE 53735
53733: GO 53791
53735: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53736: LD_ADDR_VAR 0 9
53740: PUSH
53741: LD_VAR 0 53
53745: PUSH
53746: LD_VAR 0 54
53750: PUSH
53751: LD_VAR 0 55
53755: PUSH
53756: LD_VAR 0 56
53760: PUSH
53761: LD_VAR 0 57
53765: PUSH
53766: LD_VAR 0 58
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: PUSH
53779: LD_VAR 0 4
53783: PUSH
53784: LD_INT 1
53786: PLUS
53787: ARRAY
53788: ST_TO_ADDR
53789: GO 53898
53791: LD_INT 31
53793: DOUBLE
53794: EQUAL
53795: IFTRUE 53841
53797: LD_INT 32
53799: DOUBLE
53800: EQUAL
53801: IFTRUE 53841
53803: LD_INT 33
53805: DOUBLE
53806: EQUAL
53807: IFTRUE 53841
53809: LD_INT 27
53811: DOUBLE
53812: EQUAL
53813: IFTRUE 53841
53815: LD_INT 26
53817: DOUBLE
53818: EQUAL
53819: IFTRUE 53841
53821: LD_INT 28
53823: DOUBLE
53824: EQUAL
53825: IFTRUE 53841
53827: LD_INT 29
53829: DOUBLE
53830: EQUAL
53831: IFTRUE 53841
53833: LD_INT 30
53835: DOUBLE
53836: EQUAL
53837: IFTRUE 53841
53839: GO 53897
53841: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53842: LD_ADDR_VAR 0 9
53846: PUSH
53847: LD_VAR 0 59
53851: PUSH
53852: LD_VAR 0 60
53856: PUSH
53857: LD_VAR 0 61
53861: PUSH
53862: LD_VAR 0 62
53866: PUSH
53867: LD_VAR 0 63
53871: PUSH
53872: LD_VAR 0 64
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: PUSH
53885: LD_VAR 0 4
53889: PUSH
53890: LD_INT 1
53892: PLUS
53893: ARRAY
53894: ST_TO_ADDR
53895: GO 53898
53897: POP
// temp_list2 = [ ] ;
53898: LD_ADDR_VAR 0 10
53902: PUSH
53903: EMPTY
53904: ST_TO_ADDR
// for i in temp_list do
53905: LD_ADDR_VAR 0 8
53909: PUSH
53910: LD_VAR 0 9
53914: PUSH
53915: FOR_IN
53916: IFFALSE 53968
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53918: LD_ADDR_VAR 0 10
53922: PUSH
53923: LD_VAR 0 10
53927: PUSH
53928: LD_VAR 0 8
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_VAR 0 2
53941: PLUS
53942: PUSH
53943: LD_VAR 0 8
53947: PUSH
53948: LD_INT 2
53950: ARRAY
53951: PUSH
53952: LD_VAR 0 3
53956: PLUS
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: ADD
53965: ST_TO_ADDR
53966: GO 53915
53968: POP
53969: POP
// result = temp_list2 ;
53970: LD_ADDR_VAR 0 7
53974: PUSH
53975: LD_VAR 0 10
53979: ST_TO_ADDR
// end ;
53980: LD_VAR 0 7
53984: RET
// export function EnemyInRange ( unit , dist ) ; begin
53985: LD_INT 0
53987: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53988: LD_ADDR_VAR 0 3
53992: PUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 255
54002: PPUSH
54003: LD_VAR 0 1
54007: PPUSH
54008: CALL_OW 250
54012: PPUSH
54013: LD_VAR 0 1
54017: PPUSH
54018: CALL_OW 251
54022: PPUSH
54023: LD_VAR 0 2
54027: PPUSH
54028: CALL 27381 0 4
54032: PUSH
54033: LD_INT 4
54035: ARRAY
54036: ST_TO_ADDR
// end ;
54037: LD_VAR 0 3
54041: RET
// export function PlayerSeeMe ( unit ) ; begin
54042: LD_INT 0
54044: PPUSH
// result := See ( your_side , unit ) ;
54045: LD_ADDR_VAR 0 2
54049: PUSH
54050: LD_OWVAR 2
54054: PPUSH
54055: LD_VAR 0 1
54059: PPUSH
54060: CALL_OW 292
54064: ST_TO_ADDR
// end ;
54065: LD_VAR 0 2
54069: RET
// export function ReverseDir ( unit ) ; begin
54070: LD_INT 0
54072: PPUSH
// if not unit then
54073: LD_VAR 0 1
54077: NOT
54078: IFFALSE 54082
// exit ;
54080: GO 54105
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54082: LD_ADDR_VAR 0 2
54086: PUSH
54087: LD_VAR 0 1
54091: PPUSH
54092: CALL_OW 254
54096: PUSH
54097: LD_INT 3
54099: PLUS
54100: PUSH
54101: LD_INT 6
54103: MOD
54104: ST_TO_ADDR
// end ;
54105: LD_VAR 0 2
54109: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54110: LD_INT 0
54112: PPUSH
54113: PPUSH
54114: PPUSH
54115: PPUSH
54116: PPUSH
// if not hexes then
54117: LD_VAR 0 2
54121: NOT
54122: IFFALSE 54126
// exit ;
54124: GO 54274
// dist := 9999 ;
54126: LD_ADDR_VAR 0 5
54130: PUSH
54131: LD_INT 9999
54133: ST_TO_ADDR
// for i = 1 to hexes do
54134: LD_ADDR_VAR 0 4
54138: PUSH
54139: DOUBLE
54140: LD_INT 1
54142: DEC
54143: ST_TO_ADDR
54144: LD_VAR 0 2
54148: PUSH
54149: FOR_TO
54150: IFFALSE 54262
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54152: LD_VAR 0 1
54156: PPUSH
54157: LD_VAR 0 2
54161: PUSH
54162: LD_VAR 0 4
54166: ARRAY
54167: PUSH
54168: LD_INT 1
54170: ARRAY
54171: PPUSH
54172: LD_VAR 0 2
54176: PUSH
54177: LD_VAR 0 4
54181: ARRAY
54182: PUSH
54183: LD_INT 2
54185: ARRAY
54186: PPUSH
54187: CALL_OW 297
54191: PUSH
54192: LD_VAR 0 5
54196: LESS
54197: IFFALSE 54260
// begin hex := hexes [ i ] ;
54199: LD_ADDR_VAR 0 7
54203: PUSH
54204: LD_VAR 0 2
54208: PUSH
54209: LD_VAR 0 4
54213: ARRAY
54214: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54215: LD_ADDR_VAR 0 5
54219: PUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: LD_VAR 0 2
54229: PUSH
54230: LD_VAR 0 4
54234: ARRAY
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PPUSH
54240: LD_VAR 0 2
54244: PUSH
54245: LD_VAR 0 4
54249: ARRAY
54250: PUSH
54251: LD_INT 2
54253: ARRAY
54254: PPUSH
54255: CALL_OW 297
54259: ST_TO_ADDR
// end ; end ;
54260: GO 54149
54262: POP
54263: POP
// result := hex ;
54264: LD_ADDR_VAR 0 3
54268: PUSH
54269: LD_VAR 0 7
54273: ST_TO_ADDR
// end ;
54274: LD_VAR 0 3
54278: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54279: LD_INT 0
54281: PPUSH
54282: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54283: LD_VAR 0 1
54287: NOT
54288: PUSH
54289: LD_VAR 0 1
54293: PUSH
54294: LD_INT 21
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 23
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PPUSH
54318: CALL_OW 69
54322: IN
54323: NOT
54324: OR
54325: IFFALSE 54329
// exit ;
54327: GO 54376
// for i = 1 to 3 do
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: DOUBLE
54335: LD_INT 1
54337: DEC
54338: ST_TO_ADDR
54339: LD_INT 3
54341: PUSH
54342: FOR_TO
54343: IFFALSE 54374
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL_OW 250
54354: PPUSH
54355: LD_VAR 0 1
54359: PPUSH
54360: CALL_OW 251
54364: PPUSH
54365: LD_INT 1
54367: PPUSH
54368: CALL_OW 453
54372: GO 54342
54374: POP
54375: POP
// end ;
54376: LD_VAR 0 2
54380: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54381: LD_INT 0
54383: PPUSH
54384: PPUSH
54385: PPUSH
54386: PPUSH
54387: PPUSH
54388: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54389: LD_VAR 0 1
54393: NOT
54394: PUSH
54395: LD_VAR 0 2
54399: NOT
54400: OR
54401: PUSH
54402: LD_VAR 0 1
54406: PPUSH
54407: CALL_OW 314
54411: OR
54412: IFFALSE 54416
// exit ;
54414: GO 54857
// x := GetX ( enemy_unit ) ;
54416: LD_ADDR_VAR 0 7
54420: PUSH
54421: LD_VAR 0 2
54425: PPUSH
54426: CALL_OW 250
54430: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54431: LD_ADDR_VAR 0 8
54435: PUSH
54436: LD_VAR 0 2
54440: PPUSH
54441: CALL_OW 251
54445: ST_TO_ADDR
// if not x or not y then
54446: LD_VAR 0 7
54450: NOT
54451: PUSH
54452: LD_VAR 0 8
54456: NOT
54457: OR
54458: IFFALSE 54462
// exit ;
54460: GO 54857
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54462: LD_ADDR_VAR 0 6
54466: PUSH
54467: LD_VAR 0 7
54471: PPUSH
54472: LD_INT 0
54474: PPUSH
54475: LD_INT 4
54477: PPUSH
54478: CALL_OW 272
54482: PUSH
54483: LD_VAR 0 8
54487: PPUSH
54488: LD_INT 0
54490: PPUSH
54491: LD_INT 4
54493: PPUSH
54494: CALL_OW 273
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_VAR 0 7
54507: PPUSH
54508: LD_INT 1
54510: PPUSH
54511: LD_INT 4
54513: PPUSH
54514: CALL_OW 272
54518: PUSH
54519: LD_VAR 0 8
54523: PPUSH
54524: LD_INT 1
54526: PPUSH
54527: LD_INT 4
54529: PPUSH
54530: CALL_OW 273
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_VAR 0 7
54543: PPUSH
54544: LD_INT 2
54546: PPUSH
54547: LD_INT 4
54549: PPUSH
54550: CALL_OW 272
54554: PUSH
54555: LD_VAR 0 8
54559: PPUSH
54560: LD_INT 2
54562: PPUSH
54563: LD_INT 4
54565: PPUSH
54566: CALL_OW 273
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_VAR 0 7
54579: PPUSH
54580: LD_INT 3
54582: PPUSH
54583: LD_INT 4
54585: PPUSH
54586: CALL_OW 272
54590: PUSH
54591: LD_VAR 0 8
54595: PPUSH
54596: LD_INT 3
54598: PPUSH
54599: LD_INT 4
54601: PPUSH
54602: CALL_OW 273
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_VAR 0 7
54615: PPUSH
54616: LD_INT 4
54618: PPUSH
54619: LD_INT 4
54621: PPUSH
54622: CALL_OW 272
54626: PUSH
54627: LD_VAR 0 8
54631: PPUSH
54632: LD_INT 4
54634: PPUSH
54635: LD_INT 4
54637: PPUSH
54638: CALL_OW 273
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_VAR 0 7
54651: PPUSH
54652: LD_INT 5
54654: PPUSH
54655: LD_INT 4
54657: PPUSH
54658: CALL_OW 272
54662: PUSH
54663: LD_VAR 0 8
54667: PPUSH
54668: LD_INT 5
54670: PPUSH
54671: LD_INT 4
54673: PPUSH
54674: CALL_OW 273
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// for i = tmp downto 1 do
54691: LD_ADDR_VAR 0 4
54695: PUSH
54696: DOUBLE
54697: LD_VAR 0 6
54701: INC
54702: ST_TO_ADDR
54703: LD_INT 1
54705: PUSH
54706: FOR_DOWNTO
54707: IFFALSE 54808
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54709: LD_VAR 0 6
54713: PUSH
54714: LD_VAR 0 4
54718: ARRAY
54719: PUSH
54720: LD_INT 1
54722: ARRAY
54723: PPUSH
54724: LD_VAR 0 6
54728: PUSH
54729: LD_VAR 0 4
54733: ARRAY
54734: PUSH
54735: LD_INT 2
54737: ARRAY
54738: PPUSH
54739: CALL_OW 488
54743: NOT
54744: PUSH
54745: LD_VAR 0 6
54749: PUSH
54750: LD_VAR 0 4
54754: ARRAY
54755: PUSH
54756: LD_INT 1
54758: ARRAY
54759: PPUSH
54760: LD_VAR 0 6
54764: PUSH
54765: LD_VAR 0 4
54769: ARRAY
54770: PUSH
54771: LD_INT 2
54773: ARRAY
54774: PPUSH
54775: CALL_OW 428
54779: PUSH
54780: LD_INT 0
54782: NONEQUAL
54783: OR
54784: IFFALSE 54806
// tmp := Delete ( tmp , i ) ;
54786: LD_ADDR_VAR 0 6
54790: PUSH
54791: LD_VAR 0 6
54795: PPUSH
54796: LD_VAR 0 4
54800: PPUSH
54801: CALL_OW 3
54805: ST_TO_ADDR
54806: GO 54706
54808: POP
54809: POP
// j := GetClosestHex ( unit , tmp ) ;
54810: LD_ADDR_VAR 0 5
54814: PUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: LD_VAR 0 6
54824: PPUSH
54825: CALL 54110 0 2
54829: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54830: LD_VAR 0 1
54834: PPUSH
54835: LD_VAR 0 5
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PPUSH
54844: LD_VAR 0 5
54848: PUSH
54849: LD_INT 2
54851: ARRAY
54852: PPUSH
54853: CALL_OW 111
// end ;
54857: LD_VAR 0 3
54861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54862: LD_INT 0
54864: PPUSH
54865: PPUSH
54866: PPUSH
// uc_side = 0 ;
54867: LD_ADDR_OWVAR 20
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// uc_nation = 0 ;
54875: LD_ADDR_OWVAR 21
54879: PUSH
54880: LD_INT 0
54882: ST_TO_ADDR
// InitHc_All ( ) ;
54883: CALL_OW 584
// InitVc ;
54887: CALL_OW 20
// if mastodonts then
54891: LD_VAR 0 6
54895: IFFALSE 54962
// for i = 1 to mastodonts do
54897: LD_ADDR_VAR 0 11
54901: PUSH
54902: DOUBLE
54903: LD_INT 1
54905: DEC
54906: ST_TO_ADDR
54907: LD_VAR 0 6
54911: PUSH
54912: FOR_TO
54913: IFFALSE 54960
// begin vc_chassis := 31 ;
54915: LD_ADDR_OWVAR 37
54919: PUSH
54920: LD_INT 31
54922: ST_TO_ADDR
// vc_control := control_rider ;
54923: LD_ADDR_OWVAR 38
54927: PUSH
54928: LD_INT 4
54930: ST_TO_ADDR
// animal := CreateVehicle ;
54931: LD_ADDR_VAR 0 12
54935: PUSH
54936: CALL_OW 45
54940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54941: LD_VAR 0 12
54945: PPUSH
54946: LD_VAR 0 8
54950: PPUSH
54951: LD_INT 0
54953: PPUSH
54954: CALL 57150 0 3
// end ;
54958: GO 54912
54960: POP
54961: POP
// if horses then
54962: LD_VAR 0 5
54966: IFFALSE 55033
// for i = 1 to horses do
54968: LD_ADDR_VAR 0 11
54972: PUSH
54973: DOUBLE
54974: LD_INT 1
54976: DEC
54977: ST_TO_ADDR
54978: LD_VAR 0 5
54982: PUSH
54983: FOR_TO
54984: IFFALSE 55031
// begin hc_class := 21 ;
54986: LD_ADDR_OWVAR 28
54990: PUSH
54991: LD_INT 21
54993: ST_TO_ADDR
// hc_gallery :=  ;
54994: LD_ADDR_OWVAR 33
54998: PUSH
54999: LD_STRING 
55001: ST_TO_ADDR
// animal := CreateHuman ;
55002: LD_ADDR_VAR 0 12
55006: PUSH
55007: CALL_OW 44
55011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55012: LD_VAR 0 12
55016: PPUSH
55017: LD_VAR 0 8
55021: PPUSH
55022: LD_INT 0
55024: PPUSH
55025: CALL 57150 0 3
// end ;
55029: GO 54983
55031: POP
55032: POP
// if birds then
55033: LD_VAR 0 1
55037: IFFALSE 55104
// for i = 1 to birds do
55039: LD_ADDR_VAR 0 11
55043: PUSH
55044: DOUBLE
55045: LD_INT 1
55047: DEC
55048: ST_TO_ADDR
55049: LD_VAR 0 1
55053: PUSH
55054: FOR_TO
55055: IFFALSE 55102
// begin hc_class = 18 ;
55057: LD_ADDR_OWVAR 28
55061: PUSH
55062: LD_INT 18
55064: ST_TO_ADDR
// hc_gallery =  ;
55065: LD_ADDR_OWVAR 33
55069: PUSH
55070: LD_STRING 
55072: ST_TO_ADDR
// animal := CreateHuman ;
55073: LD_ADDR_VAR 0 12
55077: PUSH
55078: CALL_OW 44
55082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55083: LD_VAR 0 12
55087: PPUSH
55088: LD_VAR 0 8
55092: PPUSH
55093: LD_INT 0
55095: PPUSH
55096: CALL 57150 0 3
// end ;
55100: GO 55054
55102: POP
55103: POP
// if tigers then
55104: LD_VAR 0 2
55108: IFFALSE 55192
// for i = 1 to tigers do
55110: LD_ADDR_VAR 0 11
55114: PUSH
55115: DOUBLE
55116: LD_INT 1
55118: DEC
55119: ST_TO_ADDR
55120: LD_VAR 0 2
55124: PUSH
55125: FOR_TO
55126: IFFALSE 55190
// begin hc_class = class_tiger ;
55128: LD_ADDR_OWVAR 28
55132: PUSH
55133: LD_INT 14
55135: ST_TO_ADDR
// hc_gallery =  ;
55136: LD_ADDR_OWVAR 33
55140: PUSH
55141: LD_STRING 
55143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55144: LD_ADDR_OWVAR 35
55148: PUSH
55149: LD_INT 7
55151: NEG
55152: PPUSH
55153: LD_INT 7
55155: PPUSH
55156: CALL_OW 12
55160: ST_TO_ADDR
// animal := CreateHuman ;
55161: LD_ADDR_VAR 0 12
55165: PUSH
55166: CALL_OW 44
55170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55171: LD_VAR 0 12
55175: PPUSH
55176: LD_VAR 0 8
55180: PPUSH
55181: LD_INT 0
55183: PPUSH
55184: CALL 57150 0 3
// end ;
55188: GO 55125
55190: POP
55191: POP
// if apemans then
55192: LD_VAR 0 3
55196: IFFALSE 55319
// for i = 1 to apemans do
55198: LD_ADDR_VAR 0 11
55202: PUSH
55203: DOUBLE
55204: LD_INT 1
55206: DEC
55207: ST_TO_ADDR
55208: LD_VAR 0 3
55212: PUSH
55213: FOR_TO
55214: IFFALSE 55317
// begin hc_class = class_apeman ;
55216: LD_ADDR_OWVAR 28
55220: PUSH
55221: LD_INT 12
55223: ST_TO_ADDR
// hc_gallery =  ;
55224: LD_ADDR_OWVAR 33
55228: PUSH
55229: LD_STRING 
55231: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55232: LD_ADDR_OWVAR 35
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PPUSH
55241: LD_INT 2
55243: PPUSH
55244: CALL_OW 12
55248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55249: LD_ADDR_OWVAR 31
55253: PUSH
55254: LD_INT 1
55256: PPUSH
55257: LD_INT 3
55259: PPUSH
55260: CALL_OW 12
55264: PUSH
55265: LD_INT 1
55267: PPUSH
55268: LD_INT 3
55270: PPUSH
55271: CALL_OW 12
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// animal := CreateHuman ;
55288: LD_ADDR_VAR 0 12
55292: PUSH
55293: CALL_OW 44
55297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55298: LD_VAR 0 12
55302: PPUSH
55303: LD_VAR 0 8
55307: PPUSH
55308: LD_INT 0
55310: PPUSH
55311: CALL 57150 0 3
// end ;
55315: GO 55213
55317: POP
55318: POP
// if enchidnas then
55319: LD_VAR 0 4
55323: IFFALSE 55390
// for i = 1 to enchidnas do
55325: LD_ADDR_VAR 0 11
55329: PUSH
55330: DOUBLE
55331: LD_INT 1
55333: DEC
55334: ST_TO_ADDR
55335: LD_VAR 0 4
55339: PUSH
55340: FOR_TO
55341: IFFALSE 55388
// begin hc_class = 13 ;
55343: LD_ADDR_OWVAR 28
55347: PUSH
55348: LD_INT 13
55350: ST_TO_ADDR
// hc_gallery =  ;
55351: LD_ADDR_OWVAR 33
55355: PUSH
55356: LD_STRING 
55358: ST_TO_ADDR
// animal := CreateHuman ;
55359: LD_ADDR_VAR 0 12
55363: PUSH
55364: CALL_OW 44
55368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55369: LD_VAR 0 12
55373: PPUSH
55374: LD_VAR 0 8
55378: PPUSH
55379: LD_INT 0
55381: PPUSH
55382: CALL 57150 0 3
// end ;
55386: GO 55340
55388: POP
55389: POP
// if fishes then
55390: LD_VAR 0 7
55394: IFFALSE 55461
// for i = 1 to fishes do
55396: LD_ADDR_VAR 0 11
55400: PUSH
55401: DOUBLE
55402: LD_INT 1
55404: DEC
55405: ST_TO_ADDR
55406: LD_VAR 0 7
55410: PUSH
55411: FOR_TO
55412: IFFALSE 55459
// begin hc_class = 20 ;
55414: LD_ADDR_OWVAR 28
55418: PUSH
55419: LD_INT 20
55421: ST_TO_ADDR
// hc_gallery =  ;
55422: LD_ADDR_OWVAR 33
55426: PUSH
55427: LD_STRING 
55429: ST_TO_ADDR
// animal := CreateHuman ;
55430: LD_ADDR_VAR 0 12
55434: PUSH
55435: CALL_OW 44
55439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55440: LD_VAR 0 12
55444: PPUSH
55445: LD_VAR 0 9
55449: PPUSH
55450: LD_INT 0
55452: PPUSH
55453: CALL 57150 0 3
// end ;
55457: GO 55411
55459: POP
55460: POP
// end ;
55461: LD_VAR 0 10
55465: RET
// export function WantHeal ( sci , unit ) ; begin
55466: LD_INT 0
55468: PPUSH
// if GetTaskList ( sci ) > 0 then
55469: LD_VAR 0 1
55473: PPUSH
55474: CALL_OW 437
55478: PUSH
55479: LD_INT 0
55481: GREATER
55482: IFFALSE 55552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55484: LD_VAR 0 1
55488: PPUSH
55489: CALL_OW 437
55493: PUSH
55494: LD_INT 1
55496: ARRAY
55497: PUSH
55498: LD_INT 1
55500: ARRAY
55501: PUSH
55502: LD_STRING l
55504: EQUAL
55505: PUSH
55506: LD_VAR 0 1
55510: PPUSH
55511: CALL_OW 437
55515: PUSH
55516: LD_INT 1
55518: ARRAY
55519: PUSH
55520: LD_INT 4
55522: ARRAY
55523: PUSH
55524: LD_VAR 0 2
55528: EQUAL
55529: AND
55530: IFFALSE 55542
// result := true else
55532: LD_ADDR_VAR 0 3
55536: PUSH
55537: LD_INT 1
55539: ST_TO_ADDR
55540: GO 55550
// result := false ;
55542: LD_ADDR_VAR 0 3
55546: PUSH
55547: LD_INT 0
55549: ST_TO_ADDR
// end else
55550: GO 55560
// result := false ;
55552: LD_ADDR_VAR 0 3
55556: PUSH
55557: LD_INT 0
55559: ST_TO_ADDR
// end ;
55560: LD_VAR 0 3
55564: RET
// export function HealTarget ( sci ) ; begin
55565: LD_INT 0
55567: PPUSH
// if not sci then
55568: LD_VAR 0 1
55572: NOT
55573: IFFALSE 55577
// exit ;
55575: GO 55642
// result := 0 ;
55577: LD_ADDR_VAR 0 2
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// if GetTaskList ( sci ) then
55585: LD_VAR 0 1
55589: PPUSH
55590: CALL_OW 437
55594: IFFALSE 55642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55596: LD_VAR 0 1
55600: PPUSH
55601: CALL_OW 437
55605: PUSH
55606: LD_INT 1
55608: ARRAY
55609: PUSH
55610: LD_INT 1
55612: ARRAY
55613: PUSH
55614: LD_STRING l
55616: EQUAL
55617: IFFALSE 55642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL_OW 437
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PUSH
55638: LD_INT 4
55640: ARRAY
55641: ST_TO_ADDR
// end ;
55642: LD_VAR 0 2
55646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55647: LD_INT 0
55649: PPUSH
55650: PPUSH
55651: PPUSH
55652: PPUSH
// if not base_units then
55653: LD_VAR 0 1
55657: NOT
55658: IFFALSE 55662
// exit ;
55660: GO 55749
// result := false ;
55662: LD_ADDR_VAR 0 2
55666: PUSH
55667: LD_INT 0
55669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55670: LD_ADDR_VAR 0 5
55674: PUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: LD_INT 21
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PPUSH
55690: CALL_OW 72
55694: ST_TO_ADDR
// if not tmp then
55695: LD_VAR 0 5
55699: NOT
55700: IFFALSE 55704
// exit ;
55702: GO 55749
// for i in tmp do
55704: LD_ADDR_VAR 0 3
55708: PUSH
55709: LD_VAR 0 5
55713: PUSH
55714: FOR_IN
55715: IFFALSE 55747
// begin result := EnemyInRange ( i , 22 ) ;
55717: LD_ADDR_VAR 0 2
55721: PUSH
55722: LD_VAR 0 3
55726: PPUSH
55727: LD_INT 22
55729: PPUSH
55730: CALL 53985 0 2
55734: ST_TO_ADDR
// if result then
55735: LD_VAR 0 2
55739: IFFALSE 55745
// exit ;
55741: POP
55742: POP
55743: GO 55749
// end ;
55745: GO 55714
55747: POP
55748: POP
// end ;
55749: LD_VAR 0 2
55753: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55754: LD_INT 0
55756: PPUSH
55757: PPUSH
// if not units then
55758: LD_VAR 0 1
55762: NOT
55763: IFFALSE 55767
// exit ;
55765: GO 55837
// result := [ ] ;
55767: LD_ADDR_VAR 0 3
55771: PUSH
55772: EMPTY
55773: ST_TO_ADDR
// for i in units do
55774: LD_ADDR_VAR 0 4
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: FOR_IN
55785: IFFALSE 55835
// if GetTag ( i ) = tag then
55787: LD_VAR 0 4
55791: PPUSH
55792: CALL_OW 110
55796: PUSH
55797: LD_VAR 0 2
55801: EQUAL
55802: IFFALSE 55833
// result := Replace ( result , result + 1 , i ) ;
55804: LD_ADDR_VAR 0 3
55808: PUSH
55809: LD_VAR 0 3
55813: PPUSH
55814: LD_VAR 0 3
55818: PUSH
55819: LD_INT 1
55821: PLUS
55822: PPUSH
55823: LD_VAR 0 4
55827: PPUSH
55828: CALL_OW 1
55832: ST_TO_ADDR
55833: GO 55784
55835: POP
55836: POP
// end ;
55837: LD_VAR 0 3
55841: RET
// export function IsDriver ( un ) ; begin
55842: LD_INT 0
55844: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55845: LD_ADDR_VAR 0 2
55849: PUSH
55850: LD_VAR 0 1
55854: PUSH
55855: LD_INT 55
55857: PUSH
55858: EMPTY
55859: LIST
55860: PPUSH
55861: CALL_OW 69
55865: IN
55866: ST_TO_ADDR
// end ;
55867: LD_VAR 0 2
55871: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55872: LD_INT 0
55874: PPUSH
55875: PPUSH
// list := [ ] ;
55876: LD_ADDR_VAR 0 5
55880: PUSH
55881: EMPTY
55882: ST_TO_ADDR
// case d of 0 :
55883: LD_VAR 0 3
55887: PUSH
55888: LD_INT 0
55890: DOUBLE
55891: EQUAL
55892: IFTRUE 55896
55894: GO 56029
55896: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55897: LD_ADDR_VAR 0 5
55901: PUSH
55902: LD_VAR 0 1
55906: PUSH
55907: LD_INT 4
55909: MINUS
55910: PUSH
55911: LD_VAR 0 2
55915: PUSH
55916: LD_INT 4
55918: MINUS
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: PUSH
55928: LD_VAR 0 1
55932: PUSH
55933: LD_INT 3
55935: MINUS
55936: PUSH
55937: LD_VAR 0 2
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: PUSH
55950: LD_VAR 0 1
55954: PUSH
55955: LD_INT 4
55957: PLUS
55958: PUSH
55959: LD_VAR 0 2
55963: PUSH
55964: LD_INT 4
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: PUSH
55972: LD_VAR 0 1
55976: PUSH
55977: LD_INT 3
55979: PLUS
55980: PUSH
55981: LD_VAR 0 2
55985: PUSH
55986: LD_INT 3
55988: PLUS
55989: PUSH
55990: LD_INT 5
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: PUSH
55998: LD_VAR 0 1
56002: PUSH
56003: LD_VAR 0 2
56007: PUSH
56008: LD_INT 4
56010: PLUS
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// end ; 1 :
56027: GO 56727
56029: LD_INT 1
56031: DOUBLE
56032: EQUAL
56033: IFTRUE 56037
56035: GO 56170
56037: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56038: LD_ADDR_VAR 0 5
56042: PUSH
56043: LD_VAR 0 1
56047: PUSH
56048: LD_VAR 0 2
56052: PUSH
56053: LD_INT 4
56055: MINUS
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: PUSH
56065: LD_VAR 0 1
56069: PUSH
56070: LD_INT 3
56072: MINUS
56073: PUSH
56074: LD_VAR 0 2
56078: PUSH
56079: LD_INT 3
56081: MINUS
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: PUSH
56091: LD_VAR 0 1
56095: PUSH
56096: LD_INT 4
56098: MINUS
56099: PUSH
56100: LD_VAR 0 2
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: PUSH
56113: LD_VAR 0 1
56117: PUSH
56118: LD_VAR 0 2
56122: PUSH
56123: LD_INT 3
56125: PLUS
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: PUSH
56135: LD_VAR 0 1
56139: PUSH
56140: LD_INT 4
56142: PLUS
56143: PUSH
56144: LD_VAR 0 2
56148: PUSH
56149: LD_INT 4
56151: PLUS
56152: PUSH
56153: LD_INT 5
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// end ; 2 :
56168: GO 56727
56170: LD_INT 2
56172: DOUBLE
56173: EQUAL
56174: IFTRUE 56178
56176: GO 56307
56178: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56179: LD_ADDR_VAR 0 5
56183: PUSH
56184: LD_VAR 0 1
56188: PUSH
56189: LD_VAR 0 2
56193: PUSH
56194: LD_INT 3
56196: MINUS
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: PUSH
56206: LD_VAR 0 1
56210: PUSH
56211: LD_INT 4
56213: PLUS
56214: PUSH
56215: LD_VAR 0 2
56219: PUSH
56220: LD_INT 4
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: PUSH
56228: LD_VAR 0 1
56232: PUSH
56233: LD_VAR 0 2
56237: PUSH
56238: LD_INT 4
56240: PLUS
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: PUSH
56250: LD_VAR 0 1
56254: PUSH
56255: LD_INT 3
56257: MINUS
56258: PUSH
56259: LD_VAR 0 2
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 1
56276: PUSH
56277: LD_INT 4
56279: MINUS
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 4
56288: MINUS
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// end ; 3 :
56305: GO 56727
56307: LD_INT 3
56309: DOUBLE
56310: EQUAL
56311: IFTRUE 56315
56313: GO 56448
56315: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56316: LD_ADDR_VAR 0 5
56320: PUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_INT 3
56328: PLUS
56329: PUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_INT 4
56350: PLUS
56351: PUSH
56352: LD_VAR 0 2
56356: PUSH
56357: LD_INT 4
56359: PLUS
56360: PUSH
56361: LD_INT 5
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: PUSH
56369: LD_VAR 0 1
56373: PUSH
56374: LD_INT 4
56376: MINUS
56377: PUSH
56378: LD_VAR 0 2
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: PUSH
56391: LD_VAR 0 1
56395: PUSH
56396: LD_VAR 0 2
56400: PUSH
56401: LD_INT 4
56403: MINUS
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: PUSH
56413: LD_VAR 0 1
56417: PUSH
56418: LD_INT 3
56420: MINUS
56421: PUSH
56422: LD_VAR 0 2
56426: PUSH
56427: LD_INT 3
56429: MINUS
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: ST_TO_ADDR
// end ; 4 :
56446: GO 56727
56448: LD_INT 4
56450: DOUBLE
56451: EQUAL
56452: IFTRUE 56456
56454: GO 56589
56456: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56457: LD_ADDR_VAR 0 5
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_VAR 0 2
56471: PUSH
56472: LD_INT 4
56474: PLUS
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 3
56491: PLUS
56492: PUSH
56493: LD_VAR 0 2
56497: PUSH
56498: LD_INT 3
56500: PLUS
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: PUSH
56510: LD_VAR 0 1
56514: PUSH
56515: LD_INT 4
56517: PLUS
56518: PUSH
56519: LD_VAR 0 2
56523: PUSH
56524: LD_INT 4
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: LD_VAR 0 1
56536: PUSH
56537: LD_VAR 0 2
56541: PUSH
56542: LD_INT 3
56544: MINUS
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_VAR 0 1
56558: PUSH
56559: LD_INT 4
56561: MINUS
56562: PUSH
56563: LD_VAR 0 2
56567: PUSH
56568: LD_INT 4
56570: MINUS
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// end ; 5 :
56587: GO 56727
56589: LD_INT 5
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56597
56595: GO 56726
56597: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56598: LD_ADDR_VAR 0 5
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_INT 4
56610: MINUS
56611: PUSH
56612: LD_VAR 0 2
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_VAR 0 2
56634: PUSH
56635: LD_INT 4
56637: MINUS
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: LD_INT 4
56654: PLUS
56655: PUSH
56656: LD_VAR 0 2
56660: PUSH
56661: LD_INT 4
56663: PLUS
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: LD_VAR 0 1
56677: PUSH
56678: LD_INT 3
56680: PLUS
56681: PUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: LD_VAR 0 1
56699: PUSH
56700: LD_VAR 0 2
56704: PUSH
56705: LD_INT 3
56707: PLUS
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: ST_TO_ADDR
// end ; end ;
56724: GO 56727
56726: POP
// result := list ;
56727: LD_ADDR_VAR 0 4
56731: PUSH
56732: LD_VAR 0 5
56736: ST_TO_ADDR
// end ;
56737: LD_VAR 0 4
56741: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56742: LD_INT 0
56744: PPUSH
56745: PPUSH
56746: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56747: LD_VAR 0 1
56751: NOT
56752: PUSH
56753: LD_VAR 0 2
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 4
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: IN
56776: NOT
56777: OR
56778: IFFALSE 56782
// exit ;
56780: GO 56874
// tmp := [ ] ;
56782: LD_ADDR_VAR 0 5
56786: PUSH
56787: EMPTY
56788: ST_TO_ADDR
// for i in units do
56789: LD_ADDR_VAR 0 4
56793: PUSH
56794: LD_VAR 0 1
56798: PUSH
56799: FOR_IN
56800: IFFALSE 56843
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56802: LD_ADDR_VAR 0 5
56806: PUSH
56807: LD_VAR 0 5
56811: PPUSH
56812: LD_VAR 0 5
56816: PUSH
56817: LD_INT 1
56819: PLUS
56820: PPUSH
56821: LD_VAR 0 4
56825: PPUSH
56826: LD_VAR 0 2
56830: PPUSH
56831: CALL_OW 259
56835: PPUSH
56836: CALL_OW 2
56840: ST_TO_ADDR
56841: GO 56799
56843: POP
56844: POP
// if not tmp then
56845: LD_VAR 0 5
56849: NOT
56850: IFFALSE 56854
// exit ;
56852: GO 56874
// result := SortListByListDesc ( units , tmp ) ;
56854: LD_ADDR_VAR 0 3
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_VAR 0 5
56868: PPUSH
56869: CALL_OW 77
56873: ST_TO_ADDR
// end ;
56874: LD_VAR 0 3
56878: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56879: LD_INT 0
56881: PPUSH
56882: PPUSH
56883: PPUSH
// result := false ;
56884: LD_ADDR_VAR 0 3
56888: PUSH
56889: LD_INT 0
56891: ST_TO_ADDR
// x := GetX ( building ) ;
56892: LD_ADDR_VAR 0 4
56896: PUSH
56897: LD_VAR 0 2
56901: PPUSH
56902: CALL_OW 250
56906: ST_TO_ADDR
// y := GetY ( building ) ;
56907: LD_ADDR_VAR 0 5
56911: PUSH
56912: LD_VAR 0 2
56916: PPUSH
56917: CALL_OW 251
56921: ST_TO_ADDR
// if not building or not x or not y then
56922: LD_VAR 0 2
56926: NOT
56927: PUSH
56928: LD_VAR 0 4
56932: NOT
56933: OR
56934: PUSH
56935: LD_VAR 0 5
56939: NOT
56940: OR
56941: IFFALSE 56945
// exit ;
56943: GO 57037
// if GetTaskList ( unit ) then
56945: LD_VAR 0 1
56949: PPUSH
56950: CALL_OW 437
56954: IFFALSE 57037
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56956: LD_STRING e
56958: PUSH
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL_OW 437
56968: PUSH
56969: LD_INT 1
56971: ARRAY
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: EQUAL
56977: PUSH
56978: LD_VAR 0 4
56982: PUSH
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL_OW 437
56992: PUSH
56993: LD_INT 1
56995: ARRAY
56996: PUSH
56997: LD_INT 2
56999: ARRAY
57000: EQUAL
57001: AND
57002: PUSH
57003: LD_VAR 0 5
57007: PUSH
57008: LD_VAR 0 1
57012: PPUSH
57013: CALL_OW 437
57017: PUSH
57018: LD_INT 1
57020: ARRAY
57021: PUSH
57022: LD_INT 3
57024: ARRAY
57025: EQUAL
57026: AND
57027: IFFALSE 57037
// result := true end ;
57029: LD_ADDR_VAR 0 3
57033: PUSH
57034: LD_INT 1
57036: ST_TO_ADDR
// end ;
57037: LD_VAR 0 3
57041: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57042: LD_INT 0
57044: PPUSH
// result := false ;
57045: LD_ADDR_VAR 0 4
57049: PUSH
57050: LD_INT 0
57052: ST_TO_ADDR
// if GetTaskList ( unit ) then
57053: LD_VAR 0 1
57057: PPUSH
57058: CALL_OW 437
57062: IFFALSE 57145
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57064: LD_STRING M
57066: PUSH
57067: LD_VAR 0 1
57071: PPUSH
57072: CALL_OW 437
57076: PUSH
57077: LD_INT 1
57079: ARRAY
57080: PUSH
57081: LD_INT 1
57083: ARRAY
57084: EQUAL
57085: PUSH
57086: LD_VAR 0 2
57090: PUSH
57091: LD_VAR 0 1
57095: PPUSH
57096: CALL_OW 437
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: PUSH
57105: LD_INT 2
57107: ARRAY
57108: EQUAL
57109: AND
57110: PUSH
57111: LD_VAR 0 3
57115: PUSH
57116: LD_VAR 0 1
57120: PPUSH
57121: CALL_OW 437
57125: PUSH
57126: LD_INT 1
57128: ARRAY
57129: PUSH
57130: LD_INT 3
57132: ARRAY
57133: EQUAL
57134: AND
57135: IFFALSE 57145
// result := true ;
57137: LD_ADDR_VAR 0 4
57141: PUSH
57142: LD_INT 1
57144: ST_TO_ADDR
// end ; end ;
57145: LD_VAR 0 4
57149: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57150: LD_INT 0
57152: PPUSH
57153: PPUSH
57154: PPUSH
57155: PPUSH
// if not unit or not area then
57156: LD_VAR 0 1
57160: NOT
57161: PUSH
57162: LD_VAR 0 2
57166: NOT
57167: OR
57168: IFFALSE 57172
// exit ;
57170: GO 57336
// tmp := AreaToList ( area , i ) ;
57172: LD_ADDR_VAR 0 6
57176: PUSH
57177: LD_VAR 0 2
57181: PPUSH
57182: LD_VAR 0 5
57186: PPUSH
57187: CALL_OW 517
57191: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57192: LD_ADDR_VAR 0 5
57196: PUSH
57197: DOUBLE
57198: LD_INT 1
57200: DEC
57201: ST_TO_ADDR
57202: LD_VAR 0 6
57206: PUSH
57207: LD_INT 1
57209: ARRAY
57210: PUSH
57211: FOR_TO
57212: IFFALSE 57334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57214: LD_ADDR_VAR 0 7
57218: PUSH
57219: LD_VAR 0 6
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: PUSH
57228: LD_VAR 0 5
57232: ARRAY
57233: PUSH
57234: LD_VAR 0 6
57238: PUSH
57239: LD_INT 2
57241: ARRAY
57242: PUSH
57243: LD_VAR 0 5
57247: ARRAY
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57253: LD_VAR 0 7
57257: PUSH
57258: LD_INT 1
57260: ARRAY
57261: PPUSH
57262: LD_VAR 0 7
57266: PUSH
57267: LD_INT 2
57269: ARRAY
57270: PPUSH
57271: CALL_OW 428
57275: PUSH
57276: LD_INT 0
57278: EQUAL
57279: IFFALSE 57332
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57281: LD_VAR 0 1
57285: PPUSH
57286: LD_VAR 0 7
57290: PUSH
57291: LD_INT 1
57293: ARRAY
57294: PPUSH
57295: LD_VAR 0 7
57299: PUSH
57300: LD_INT 2
57302: ARRAY
57303: PPUSH
57304: LD_VAR 0 3
57308: PPUSH
57309: CALL_OW 48
// result := IsPlaced ( unit ) ;
57313: LD_ADDR_VAR 0 4
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 305
57327: ST_TO_ADDR
// exit ;
57328: POP
57329: POP
57330: GO 57336
// end ; end ;
57332: GO 57211
57334: POP
57335: POP
// end ;
57336: LD_VAR 0 4
57340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57341: LD_INT 0
57343: PPUSH
57344: PPUSH
57345: PPUSH
// if not side or side > 8 then
57346: LD_VAR 0 1
57350: NOT
57351: PUSH
57352: LD_VAR 0 1
57356: PUSH
57357: LD_INT 8
57359: GREATER
57360: OR
57361: IFFALSE 57365
// exit ;
57363: GO 57552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57365: LD_ADDR_VAR 0 4
57369: PUSH
57370: LD_INT 22
57372: PUSH
57373: LD_VAR 0 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 21
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PPUSH
57396: CALL_OW 69
57400: ST_TO_ADDR
// if not tmp then
57401: LD_VAR 0 4
57405: NOT
57406: IFFALSE 57410
// exit ;
57408: GO 57552
// enable_addtolog := true ;
57410: LD_ADDR_OWVAR 81
57414: PUSH
57415: LD_INT 1
57417: ST_TO_ADDR
// AddToLog ( [ ) ;
57418: LD_STRING [
57420: PPUSH
57421: CALL_OW 561
// for i in tmp do
57425: LD_ADDR_VAR 0 3
57429: PUSH
57430: LD_VAR 0 4
57434: PUSH
57435: FOR_IN
57436: IFFALSE 57543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57438: LD_STRING [
57440: PUSH
57441: LD_VAR 0 3
57445: PPUSH
57446: CALL_OW 266
57450: STR
57451: PUSH
57452: LD_STRING , 
57454: STR
57455: PUSH
57456: LD_VAR 0 3
57460: PPUSH
57461: CALL_OW 250
57465: STR
57466: PUSH
57467: LD_STRING , 
57469: STR
57470: PUSH
57471: LD_VAR 0 3
57475: PPUSH
57476: CALL_OW 251
57480: STR
57481: PUSH
57482: LD_STRING , 
57484: STR
57485: PUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 254
57495: STR
57496: PUSH
57497: LD_STRING , 
57499: STR
57500: PUSH
57501: LD_VAR 0 3
57505: PPUSH
57506: LD_INT 1
57508: PPUSH
57509: CALL_OW 268
57513: STR
57514: PUSH
57515: LD_STRING , 
57517: STR
57518: PUSH
57519: LD_VAR 0 3
57523: PPUSH
57524: LD_INT 2
57526: PPUSH
57527: CALL_OW 268
57531: STR
57532: PUSH
57533: LD_STRING ],
57535: STR
57536: PPUSH
57537: CALL_OW 561
// end ;
57541: GO 57435
57543: POP
57544: POP
// AddToLog ( ]; ) ;
57545: LD_STRING ];
57547: PPUSH
57548: CALL_OW 561
// end ;
57552: LD_VAR 0 2
57556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57557: LD_INT 0
57559: PPUSH
57560: PPUSH
57561: PPUSH
57562: PPUSH
57563: PPUSH
// if not area or not rate or not max then
57564: LD_VAR 0 1
57568: NOT
57569: PUSH
57570: LD_VAR 0 2
57574: NOT
57575: OR
57576: PUSH
57577: LD_VAR 0 4
57581: NOT
57582: OR
57583: IFFALSE 57587
// exit ;
57585: GO 57779
// while 1 do
57587: LD_INT 1
57589: IFFALSE 57779
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57591: LD_ADDR_VAR 0 9
57595: PUSH
57596: LD_VAR 0 1
57600: PPUSH
57601: LD_INT 1
57603: PPUSH
57604: CALL_OW 287
57608: PUSH
57609: LD_INT 10
57611: MUL
57612: ST_TO_ADDR
// r := rate / 10 ;
57613: LD_ADDR_VAR 0 7
57617: PUSH
57618: LD_VAR 0 2
57622: PUSH
57623: LD_INT 10
57625: DIVREAL
57626: ST_TO_ADDR
// time := 1 1$00 ;
57627: LD_ADDR_VAR 0 8
57631: PUSH
57632: LD_INT 2100
57634: ST_TO_ADDR
// if amount < min then
57635: LD_VAR 0 9
57639: PUSH
57640: LD_VAR 0 3
57644: LESS
57645: IFFALSE 57663
// r := r * 2 else
57647: LD_ADDR_VAR 0 7
57651: PUSH
57652: LD_VAR 0 7
57656: PUSH
57657: LD_INT 2
57659: MUL
57660: ST_TO_ADDR
57661: GO 57689
// if amount > max then
57663: LD_VAR 0 9
57667: PUSH
57668: LD_VAR 0 4
57672: GREATER
57673: IFFALSE 57689
// r := r / 2 ;
57675: LD_ADDR_VAR 0 7
57679: PUSH
57680: LD_VAR 0 7
57684: PUSH
57685: LD_INT 2
57687: DIVREAL
57688: ST_TO_ADDR
// time := time / r ;
57689: LD_ADDR_VAR 0 8
57693: PUSH
57694: LD_VAR 0 8
57698: PUSH
57699: LD_VAR 0 7
57703: DIVREAL
57704: ST_TO_ADDR
// if time < 0 then
57705: LD_VAR 0 8
57709: PUSH
57710: LD_INT 0
57712: LESS
57713: IFFALSE 57730
// time := time * - 1 ;
57715: LD_ADDR_VAR 0 8
57719: PUSH
57720: LD_VAR 0 8
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: MUL
57729: ST_TO_ADDR
// wait ( time ) ;
57730: LD_VAR 0 8
57734: PPUSH
57735: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57739: LD_INT 35
57741: PPUSH
57742: LD_INT 875
57744: PPUSH
57745: CALL_OW 12
57749: PPUSH
57750: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57754: LD_INT 1
57756: PPUSH
57757: LD_INT 5
57759: PPUSH
57760: CALL_OW 12
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: LD_INT 1
57772: PPUSH
57773: CALL_OW 55
// end ;
57777: GO 57587
// end ;
57779: LD_VAR 0 5
57783: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57784: LD_INT 0
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
57792: PPUSH
57793: PPUSH
// if not turrets or not factories then
57794: LD_VAR 0 1
57798: NOT
57799: PUSH
57800: LD_VAR 0 2
57804: NOT
57805: OR
57806: IFFALSE 57810
// exit ;
57808: GO 58117
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57810: LD_ADDR_VAR 0 10
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 6
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 24
57852: PUSH
57853: LD_INT 25
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 23
57862: PUSH
57863: LD_INT 27
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 42
57876: PUSH
57877: LD_INT 43
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 44
57886: PUSH
57887: LD_INT 46
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 45
57896: PUSH
57897: LD_INT 47
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// result := [ ] ;
57914: LD_ADDR_VAR 0 3
57918: PUSH
57919: EMPTY
57920: ST_TO_ADDR
// for i in turrets do
57921: LD_ADDR_VAR 0 4
57925: PUSH
57926: LD_VAR 0 1
57930: PUSH
57931: FOR_IN
57932: IFFALSE 58115
// begin nat := GetNation ( i ) ;
57934: LD_ADDR_VAR 0 7
57938: PUSH
57939: LD_VAR 0 4
57943: PPUSH
57944: CALL_OW 248
57948: ST_TO_ADDR
// weapon := 0 ;
57949: LD_ADDR_VAR 0 8
57953: PUSH
57954: LD_INT 0
57956: ST_TO_ADDR
// if not nat then
57957: LD_VAR 0 7
57961: NOT
57962: IFFALSE 57966
// continue ;
57964: GO 57931
// for j in list [ nat ] do
57966: LD_ADDR_VAR 0 5
57970: PUSH
57971: LD_VAR 0 10
57975: PUSH
57976: LD_VAR 0 7
57980: ARRAY
57981: PUSH
57982: FOR_IN
57983: IFFALSE 58024
// if GetBWeapon ( i ) = j [ 1 ] then
57985: LD_VAR 0 4
57989: PPUSH
57990: CALL_OW 269
57994: PUSH
57995: LD_VAR 0 5
57999: PUSH
58000: LD_INT 1
58002: ARRAY
58003: EQUAL
58004: IFFALSE 58022
// begin weapon := j [ 2 ] ;
58006: LD_ADDR_VAR 0 8
58010: PUSH
58011: LD_VAR 0 5
58015: PUSH
58016: LD_INT 2
58018: ARRAY
58019: ST_TO_ADDR
// break ;
58020: GO 58024
// end ;
58022: GO 57982
58024: POP
58025: POP
// if not weapon then
58026: LD_VAR 0 8
58030: NOT
58031: IFFALSE 58035
// continue ;
58033: GO 57931
// for k in factories do
58035: LD_ADDR_VAR 0 6
58039: PUSH
58040: LD_VAR 0 2
58044: PUSH
58045: FOR_IN
58046: IFFALSE 58111
// begin weapons := AvailableWeaponList ( k ) ;
58048: LD_ADDR_VAR 0 9
58052: PUSH
58053: LD_VAR 0 6
58057: PPUSH
58058: CALL_OW 478
58062: ST_TO_ADDR
// if not weapons then
58063: LD_VAR 0 9
58067: NOT
58068: IFFALSE 58072
// continue ;
58070: GO 58045
// if weapon in weapons then
58072: LD_VAR 0 8
58076: PUSH
58077: LD_VAR 0 9
58081: IN
58082: IFFALSE 58109
// begin result := [ i , weapon ] ;
58084: LD_ADDR_VAR 0 3
58088: PUSH
58089: LD_VAR 0 4
58093: PUSH
58094: LD_VAR 0 8
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: ST_TO_ADDR
// exit ;
58103: POP
58104: POP
58105: POP
58106: POP
58107: GO 58117
// end ; end ;
58109: GO 58045
58111: POP
58112: POP
// end ;
58113: GO 57931
58115: POP
58116: POP
// end ;
58117: LD_VAR 0 3
58121: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58122: LD_INT 0
58124: PPUSH
// if not side or side > 8 then
58125: LD_VAR 0 3
58129: NOT
58130: PUSH
58131: LD_VAR 0 3
58135: PUSH
58136: LD_INT 8
58138: GREATER
58139: OR
58140: IFFALSE 58144
// exit ;
58142: GO 58203
// if not range then
58144: LD_VAR 0 4
58148: NOT
58149: IFFALSE 58160
// range := - 12 ;
58151: LD_ADDR_VAR 0 4
58155: PUSH
58156: LD_INT 12
58158: NEG
58159: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58160: LD_VAR 0 1
58164: PPUSH
58165: LD_VAR 0 2
58169: PPUSH
58170: LD_VAR 0 3
58174: PPUSH
58175: LD_VAR 0 4
58179: PPUSH
58180: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58184: LD_VAR 0 1
58188: PPUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: LD_VAR 0 3
58198: PPUSH
58199: CALL_OW 331
// end ;
58203: LD_VAR 0 5
58207: RET
// export function Video ( mode ) ; begin
58208: LD_INT 0
58210: PPUSH
// ingame_video = mode ;
58211: LD_ADDR_OWVAR 52
58215: PUSH
58216: LD_VAR 0 1
58220: ST_TO_ADDR
// interface_hidden = mode ;
58221: LD_ADDR_OWVAR 54
58225: PUSH
58226: LD_VAR 0 1
58230: ST_TO_ADDR
// end ;
58231: LD_VAR 0 2
58235: RET
// export function Join ( array , element ) ; begin
58236: LD_INT 0
58238: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58239: LD_ADDR_VAR 0 3
58243: PUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_INT 1
58256: PLUS
58257: PPUSH
58258: LD_VAR 0 2
58262: PPUSH
58263: CALL_OW 1
58267: ST_TO_ADDR
// end ;
58268: LD_VAR 0 3
58272: RET
// export function JoinUnion ( array , element ) ; begin
58273: LD_INT 0
58275: PPUSH
// result := array union element ;
58276: LD_ADDR_VAR 0 3
58280: PUSH
58281: LD_VAR 0 1
58285: PUSH
58286: LD_VAR 0 2
58290: UNION
58291: ST_TO_ADDR
// end ;
58292: LD_VAR 0 3
58296: RET
// export function GetBehemoths ( side ) ; begin
58297: LD_INT 0
58299: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58300: LD_ADDR_VAR 0 2
58304: PUSH
58305: LD_INT 22
58307: PUSH
58308: LD_VAR 0 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 31
58319: PUSH
58320: LD_INT 25
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PPUSH
58331: CALL_OW 69
58335: ST_TO_ADDR
// end ;
58336: LD_VAR 0 2
58340: RET
// export function Shuffle ( array ) ; var i , index ; begin
58341: LD_INT 0
58343: PPUSH
58344: PPUSH
58345: PPUSH
// result := [ ] ;
58346: LD_ADDR_VAR 0 2
58350: PUSH
58351: EMPTY
58352: ST_TO_ADDR
// if not array then
58353: LD_VAR 0 1
58357: NOT
58358: IFFALSE 58362
// exit ;
58360: GO 58461
// Randomize ;
58362: CALL_OW 10
// for i = array downto 1 do
58366: LD_ADDR_VAR 0 3
58370: PUSH
58371: DOUBLE
58372: LD_VAR 0 1
58376: INC
58377: ST_TO_ADDR
58378: LD_INT 1
58380: PUSH
58381: FOR_DOWNTO
58382: IFFALSE 58459
// begin index := rand ( 1 , array ) ;
58384: LD_ADDR_VAR 0 4
58388: PUSH
58389: LD_INT 1
58391: PPUSH
58392: LD_VAR 0 1
58396: PPUSH
58397: CALL_OW 12
58401: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58402: LD_ADDR_VAR 0 2
58406: PUSH
58407: LD_VAR 0 2
58411: PPUSH
58412: LD_VAR 0 2
58416: PUSH
58417: LD_INT 1
58419: PLUS
58420: PPUSH
58421: LD_VAR 0 1
58425: PUSH
58426: LD_VAR 0 4
58430: ARRAY
58431: PPUSH
58432: CALL_OW 2
58436: ST_TO_ADDR
// array := Delete ( array , index ) ;
58437: LD_ADDR_VAR 0 1
58441: PUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: LD_VAR 0 4
58451: PPUSH
58452: CALL_OW 3
58456: ST_TO_ADDR
// end ;
58457: GO 58381
58459: POP
58460: POP
// end ;
58461: LD_VAR 0 2
58465: RET
// export function GetBaseMaterials ( base ) ; begin
58466: LD_INT 0
58468: PPUSH
// result := [ 0 , 0 , 0 ] ;
58469: LD_ADDR_VAR 0 2
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// if not base then
58488: LD_VAR 0 1
58492: NOT
58493: IFFALSE 58497
// exit ;
58495: GO 58546
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58497: LD_ADDR_VAR 0 2
58501: PUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: LD_INT 1
58509: PPUSH
58510: CALL_OW 275
58514: PUSH
58515: LD_VAR 0 1
58519: PPUSH
58520: LD_INT 2
58522: PPUSH
58523: CALL_OW 275
58527: PUSH
58528: LD_VAR 0 1
58532: PPUSH
58533: LD_INT 3
58535: PPUSH
58536: CALL_OW 275
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// end ;
58546: LD_VAR 0 2
58550: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58551: LD_INT 0
58553: PPUSH
58554: PPUSH
// result := array ;
58555: LD_ADDR_VAR 0 3
58559: PUSH
58560: LD_VAR 0 1
58564: ST_TO_ADDR
// if size > 0 then
58565: LD_VAR 0 2
58569: PUSH
58570: LD_INT 0
58572: GREATER
58573: IFFALSE 58619
// for i := array downto size do
58575: LD_ADDR_VAR 0 4
58579: PUSH
58580: DOUBLE
58581: LD_VAR 0 1
58585: INC
58586: ST_TO_ADDR
58587: LD_VAR 0 2
58591: PUSH
58592: FOR_DOWNTO
58593: IFFALSE 58617
// result := Delete ( result , result ) ;
58595: LD_ADDR_VAR 0 3
58599: PUSH
58600: LD_VAR 0 3
58604: PPUSH
58605: LD_VAR 0 3
58609: PPUSH
58610: CALL_OW 3
58614: ST_TO_ADDR
58615: GO 58592
58617: POP
58618: POP
// end ;
58619: LD_VAR 0 3
58623: RET
// export function ComExit ( unit ) ; var tmp ; begin
58624: LD_INT 0
58626: PPUSH
58627: PPUSH
// if not IsInUnit ( unit ) then
58628: LD_VAR 0 1
58632: PPUSH
58633: CALL_OW 310
58637: NOT
58638: IFFALSE 58642
// exit ;
58640: GO 58702
// tmp := IsInUnit ( unit ) ;
58642: LD_ADDR_VAR 0 3
58646: PUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 310
58656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58657: LD_VAR 0 3
58661: PPUSH
58662: CALL_OW 247
58666: PUSH
58667: LD_INT 2
58669: EQUAL
58670: IFFALSE 58683
// ComExitVehicle ( unit ) else
58672: LD_VAR 0 1
58676: PPUSH
58677: CALL_OW 121
58681: GO 58692
// ComExitBuilding ( unit ) ;
58683: LD_VAR 0 1
58687: PPUSH
58688: CALL_OW 122
// result := tmp ;
58692: LD_ADDR_VAR 0 2
58696: PUSH
58697: LD_VAR 0 3
58701: ST_TO_ADDR
// end ;
58702: LD_VAR 0 2
58706: RET
// export function ComExitAll ( units ) ; var i ; begin
58707: LD_INT 0
58709: PPUSH
58710: PPUSH
// if not units then
58711: LD_VAR 0 1
58715: NOT
58716: IFFALSE 58720
// exit ;
58718: GO 58746
// for i in units do
58720: LD_ADDR_VAR 0 3
58724: PUSH
58725: LD_VAR 0 1
58729: PUSH
58730: FOR_IN
58731: IFFALSE 58744
// ComExit ( i ) ;
58733: LD_VAR 0 3
58737: PPUSH
58738: CALL 58624 0 1
58742: GO 58730
58744: POP
58745: POP
// end ;
58746: LD_VAR 0 2
58750: RET
// export function ResetHc ; begin
58751: LD_INT 0
58753: PPUSH
// InitHc ;
58754: CALL_OW 19
// hc_importance := 0 ;
58758: LD_ADDR_OWVAR 32
58762: PUSH
58763: LD_INT 0
58765: ST_TO_ADDR
// end ;
58766: LD_VAR 0 1
58770: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58771: LD_INT 0
58773: PPUSH
58774: PPUSH
58775: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58776: LD_ADDR_VAR 0 6
58780: PUSH
58781: LD_VAR 0 1
58785: PUSH
58786: LD_VAR 0 3
58790: PLUS
58791: PUSH
58792: LD_INT 2
58794: DIV
58795: ST_TO_ADDR
// if _x < 0 then
58796: LD_VAR 0 6
58800: PUSH
58801: LD_INT 0
58803: LESS
58804: IFFALSE 58821
// _x := _x * - 1 ;
58806: LD_ADDR_VAR 0 6
58810: PUSH
58811: LD_VAR 0 6
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: MUL
58820: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58821: LD_ADDR_VAR 0 7
58825: PUSH
58826: LD_VAR 0 2
58830: PUSH
58831: LD_VAR 0 4
58835: PLUS
58836: PUSH
58837: LD_INT 2
58839: DIV
58840: ST_TO_ADDR
// if _y < 0 then
58841: LD_VAR 0 7
58845: PUSH
58846: LD_INT 0
58848: LESS
58849: IFFALSE 58866
// _y := _y * - 1 ;
58851: LD_ADDR_VAR 0 7
58855: PUSH
58856: LD_VAR 0 7
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: MUL
58865: ST_TO_ADDR
// result := [ _x , _y ] ;
58866: LD_ADDR_VAR 0 5
58870: PUSH
58871: LD_VAR 0 6
58875: PUSH
58876: LD_VAR 0 7
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// end ;
58885: LD_VAR 0 5
58889: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58890: LD_INT 0
58892: PPUSH
58893: PPUSH
58894: PPUSH
58895: PPUSH
// task := GetTaskList ( unit ) ;
58896: LD_ADDR_VAR 0 7
58900: PUSH
58901: LD_VAR 0 1
58905: PPUSH
58906: CALL_OW 437
58910: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58911: LD_VAR 0 7
58915: NOT
58916: PUSH
58917: LD_VAR 0 1
58921: PPUSH
58922: LD_VAR 0 2
58926: PPUSH
58927: CALL_OW 308
58931: NOT
58932: AND
58933: IFFALSE 58937
// exit ;
58935: GO 59055
// if IsInArea ( unit , area ) then
58937: LD_VAR 0 1
58941: PPUSH
58942: LD_VAR 0 2
58946: PPUSH
58947: CALL_OW 308
58951: IFFALSE 58969
// begin ComMoveToArea ( unit , goAway ) ;
58953: LD_VAR 0 1
58957: PPUSH
58958: LD_VAR 0 3
58962: PPUSH
58963: CALL_OW 113
// exit ;
58967: GO 59055
// end ; if task [ 1 ] [ 1 ] <> M then
58969: LD_VAR 0 7
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: PUSH
58978: LD_INT 1
58980: ARRAY
58981: PUSH
58982: LD_STRING M
58984: NONEQUAL
58985: IFFALSE 58989
// exit ;
58987: GO 59055
// x := task [ 1 ] [ 2 ] ;
58989: LD_ADDR_VAR 0 5
58993: PUSH
58994: LD_VAR 0 7
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: PUSH
59003: LD_INT 2
59005: ARRAY
59006: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59007: LD_ADDR_VAR 0 6
59011: PUSH
59012: LD_VAR 0 7
59016: PUSH
59017: LD_INT 1
59019: ARRAY
59020: PUSH
59021: LD_INT 3
59023: ARRAY
59024: ST_TO_ADDR
// if InArea ( x , y , area ) then
59025: LD_VAR 0 5
59029: PPUSH
59030: LD_VAR 0 6
59034: PPUSH
59035: LD_VAR 0 2
59039: PPUSH
59040: CALL_OW 309
59044: IFFALSE 59055
// ComStop ( unit ) ;
59046: LD_VAR 0 1
59050: PPUSH
59051: CALL_OW 141
// end ;
59055: LD_VAR 0 4
59059: RET
// export function Abs ( value ) ; begin
59060: LD_INT 0
59062: PPUSH
// result := value ;
59063: LD_ADDR_VAR 0 2
59067: PUSH
59068: LD_VAR 0 1
59072: ST_TO_ADDR
// if value < 0 then
59073: LD_VAR 0 1
59077: PUSH
59078: LD_INT 0
59080: LESS
59081: IFFALSE 59098
// result := value * - 1 ;
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: LD_VAR 0 1
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: MUL
59097: ST_TO_ADDR
// end ;
59098: LD_VAR 0 2
59102: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59103: LD_INT 0
59105: PPUSH
59106: PPUSH
59107: PPUSH
59108: PPUSH
59109: PPUSH
59110: PPUSH
59111: PPUSH
59112: PPUSH
// if not unit or not building then
59113: LD_VAR 0 1
59117: NOT
59118: PUSH
59119: LD_VAR 0 2
59123: NOT
59124: OR
59125: IFFALSE 59129
// exit ;
59127: GO 59355
// x := GetX ( building ) ;
59129: LD_ADDR_VAR 0 4
59133: PUSH
59134: LD_VAR 0 2
59138: PPUSH
59139: CALL_OW 250
59143: ST_TO_ADDR
// y := GetY ( building ) ;
59144: LD_ADDR_VAR 0 6
59148: PUSH
59149: LD_VAR 0 2
59153: PPUSH
59154: CALL_OW 251
59158: ST_TO_ADDR
// d := GetDir ( building ) ;
59159: LD_ADDR_VAR 0 8
59163: PUSH
59164: LD_VAR 0 2
59168: PPUSH
59169: CALL_OW 254
59173: ST_TO_ADDR
// r := 4 ;
59174: LD_ADDR_VAR 0 9
59178: PUSH
59179: LD_INT 4
59181: ST_TO_ADDR
// for i := 1 to 5 do
59182: LD_ADDR_VAR 0 10
59186: PUSH
59187: DOUBLE
59188: LD_INT 1
59190: DEC
59191: ST_TO_ADDR
59192: LD_INT 5
59194: PUSH
59195: FOR_TO
59196: IFFALSE 59353
// begin _x := ShiftX ( x , d , r + i ) ;
59198: LD_ADDR_VAR 0 5
59202: PUSH
59203: LD_VAR 0 4
59207: PPUSH
59208: LD_VAR 0 8
59212: PPUSH
59213: LD_VAR 0 9
59217: PUSH
59218: LD_VAR 0 10
59222: PLUS
59223: PPUSH
59224: CALL_OW 272
59228: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59229: LD_ADDR_VAR 0 7
59233: PUSH
59234: LD_VAR 0 6
59238: PPUSH
59239: LD_VAR 0 8
59243: PPUSH
59244: LD_VAR 0 9
59248: PUSH
59249: LD_VAR 0 10
59253: PLUS
59254: PPUSH
59255: CALL_OW 273
59259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59260: LD_VAR 0 5
59264: PPUSH
59265: LD_VAR 0 7
59269: PPUSH
59270: CALL_OW 488
59274: PUSH
59275: LD_VAR 0 5
59279: PPUSH
59280: LD_VAR 0 7
59284: PPUSH
59285: CALL_OW 428
59289: PPUSH
59290: CALL_OW 247
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: IN
59305: NOT
59306: AND
59307: IFFALSE 59351
// begin ComMoveXY ( unit , _x , _y ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_VAR 0 5
59318: PPUSH
59319: LD_VAR 0 7
59323: PPUSH
59324: CALL_OW 111
// result := [ _x , _y ] ;
59328: LD_ADDR_VAR 0 3
59332: PUSH
59333: LD_VAR 0 5
59337: PUSH
59338: LD_VAR 0 7
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// exit ;
59347: POP
59348: POP
59349: GO 59355
// end ; end ;
59351: GO 59195
59353: POP
59354: POP
// end ;
59355: LD_VAR 0 3
59359: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59360: LD_INT 0
59362: PPUSH
59363: PPUSH
59364: PPUSH
// result := 0 ;
59365: LD_ADDR_VAR 0 3
59369: PUSH
59370: LD_INT 0
59372: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59373: LD_VAR 0 1
59377: PUSH
59378: LD_INT 0
59380: LESS
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: LD_INT 8
59389: GREATER
59390: OR
59391: PUSH
59392: LD_VAR 0 2
59396: PUSH
59397: LD_INT 0
59399: LESS
59400: OR
59401: PUSH
59402: LD_VAR 0 2
59406: PUSH
59407: LD_INT 8
59409: GREATER
59410: OR
59411: IFFALSE 59415
// exit ;
59413: GO 59490
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59415: LD_ADDR_VAR 0 4
59419: PUSH
59420: LD_INT 22
59422: PUSH
59423: LD_VAR 0 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PPUSH
59432: CALL_OW 69
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59488
// begin un := UnitShoot ( i ) ;
59440: LD_ADDR_VAR 0 5
59444: PUSH
59445: LD_VAR 0 4
59449: PPUSH
59450: CALL_OW 504
59454: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59455: LD_VAR 0 5
59459: PPUSH
59460: CALL_OW 255
59464: PUSH
59465: LD_VAR 0 1
59469: EQUAL
59470: IFFALSE 59486
// begin result := un ;
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: LD_VAR 0 5
59481: ST_TO_ADDR
// exit ;
59482: POP
59483: POP
59484: GO 59490
// end ; end ;
59486: GO 59437
59488: POP
59489: POP
// end ;
59490: LD_VAR 0 3
59494: RET
// export function GetCargoBay ( units ) ; begin
59495: LD_INT 0
59497: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59498: LD_ADDR_VAR 0 2
59502: PUSH
59503: LD_VAR 0 1
59507: PPUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 34
59513: PUSH
59514: LD_INT 12
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 34
59523: PUSH
59524: LD_INT 51
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 34
59533: PUSH
59534: LD_INT 32
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 34
59543: PUSH
59544: LD_EXP 78
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: PPUSH
59560: CALL_OW 72
59564: ST_TO_ADDR
// end ;
59565: LD_VAR 0 2
59569: RET
// export function Negate ( value ) ; begin
59570: LD_INT 0
59572: PPUSH
// result := not value ;
59573: LD_ADDR_VAR 0 2
59577: PUSH
59578: LD_VAR 0 1
59582: NOT
59583: ST_TO_ADDR
// end ;
59584: LD_VAR 0 2
59588: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
59589: LD_INT 0
59591: PPUSH
// if x1 = x2 then
59592: LD_VAR 0 1
59596: PUSH
59597: LD_VAR 0 3
59601: EQUAL
59602: IFFALSE 59636
// begin if y1 > y2 then
59604: LD_VAR 0 2
59608: PUSH
59609: LD_VAR 0 4
59613: GREATER
59614: IFFALSE 59626
// result := 0 else
59616: LD_ADDR_VAR 0 5
59620: PUSH
59621: LD_INT 0
59623: ST_TO_ADDR
59624: GO 59634
// result := 3 ;
59626: LD_ADDR_VAR 0 5
59630: PUSH
59631: LD_INT 3
59633: ST_TO_ADDR
// exit ;
59634: GO 59722
// end ; if y1 = y2 then
59636: LD_VAR 0 2
59640: PUSH
59641: LD_VAR 0 4
59645: EQUAL
59646: IFFALSE 59680
// begin if x1 > x2 then
59648: LD_VAR 0 1
59652: PUSH
59653: LD_VAR 0 3
59657: GREATER
59658: IFFALSE 59670
// result := 1 else
59660: LD_ADDR_VAR 0 5
59664: PUSH
59665: LD_INT 1
59667: ST_TO_ADDR
59668: GO 59678
// result := 4 ;
59670: LD_ADDR_VAR 0 5
59674: PUSH
59675: LD_INT 4
59677: ST_TO_ADDR
// exit ;
59678: GO 59722
// end ; if x1 > x2 and y1 > y2 then
59680: LD_VAR 0 1
59684: PUSH
59685: LD_VAR 0 3
59689: GREATER
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: LD_VAR 0 4
59700: GREATER
59701: AND
59702: IFFALSE 59714
// result := 2 else
59704: LD_ADDR_VAR 0 5
59708: PUSH
59709: LD_INT 2
59711: ST_TO_ADDR
59712: GO 59722
// result := 5 ;
59714: LD_ADDR_VAR 0 5
59718: PUSH
59719: LD_INT 5
59721: ST_TO_ADDR
// end ;
59722: LD_VAR 0 5
59726: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59727: LD_INT 0
59729: PPUSH
59730: PPUSH
// if not driver or not IsInUnit ( driver ) then
59731: LD_VAR 0 1
59735: NOT
59736: PUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: CALL_OW 310
59746: NOT
59747: OR
59748: IFFALSE 59752
// exit ;
59750: GO 59842
// vehicle := IsInUnit ( driver ) ;
59752: LD_ADDR_VAR 0 3
59756: PUSH
59757: LD_VAR 0 1
59761: PPUSH
59762: CALL_OW 310
59766: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59767: LD_VAR 0 1
59771: PPUSH
59772: LD_STRING \
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_STRING E
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_VAR 0 3
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PPUSH
59838: CALL_OW 446
// end ;
59842: LD_VAR 0 2
59846: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
// if not driver or not IsInUnit ( driver ) then
59851: LD_VAR 0 1
59855: NOT
59856: PUSH
59857: LD_VAR 0 1
59861: PPUSH
59862: CALL_OW 310
59866: NOT
59867: OR
59868: IFFALSE 59872
// exit ;
59870: GO 59962
// vehicle := IsInUnit ( driver ) ;
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: LD_VAR 0 1
59881: PPUSH
59882: CALL_OW 310
59886: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59887: LD_VAR 0 1
59891: PPUSH
59892: LD_STRING \
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: PUSH
59922: LD_STRING E
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_VAR 0 3
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PPUSH
59958: CALL_OW 447
// end ;
59962: LD_VAR 0 2
59966: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
59971: PPUSH
// tmp := [ ] ;
59972: LD_ADDR_VAR 0 5
59976: PUSH
59977: EMPTY
59978: ST_TO_ADDR
// for i in units do
59979: LD_ADDR_VAR 0 4
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: FOR_IN
59990: IFFALSE 60028
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59992: LD_ADDR_VAR 0 5
59996: PUSH
59997: LD_VAR 0 5
60001: PPUSH
60002: LD_VAR 0 5
60006: PUSH
60007: LD_INT 1
60009: PLUS
60010: PPUSH
60011: LD_VAR 0 4
60015: PPUSH
60016: CALL_OW 256
60020: PPUSH
60021: CALL_OW 2
60025: ST_TO_ADDR
60026: GO 59989
60028: POP
60029: POP
// if not tmp then
60030: LD_VAR 0 5
60034: NOT
60035: IFFALSE 60039
// exit ;
60037: GO 60087
// if asc then
60039: LD_VAR 0 2
60043: IFFALSE 60067
// result := SortListByListAsc ( units , tmp ) else
60045: LD_ADDR_VAR 0 3
60049: PUSH
60050: LD_VAR 0 1
60054: PPUSH
60055: LD_VAR 0 5
60059: PPUSH
60060: CALL_OW 76
60064: ST_TO_ADDR
60065: GO 60087
// result := SortListByListDesc ( units , tmp ) ;
60067: LD_ADDR_VAR 0 3
60071: PUSH
60072: LD_VAR 0 1
60076: PPUSH
60077: LD_VAR 0 5
60081: PPUSH
60082: CALL_OW 77
60086: ST_TO_ADDR
// end ;
60087: LD_VAR 0 3
60091: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
// task := GetTaskList ( mech ) ;
60096: LD_ADDR_VAR 0 4
60100: PUSH
60101: LD_VAR 0 1
60105: PPUSH
60106: CALL_OW 437
60110: ST_TO_ADDR
// if not task then
60111: LD_VAR 0 4
60115: NOT
60116: IFFALSE 60120
// exit ;
60118: GO 60162
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60120: LD_ADDR_VAR 0 3
60124: PUSH
60125: LD_VAR 0 4
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PUSH
60134: LD_INT 1
60136: ARRAY
60137: PUSH
60138: LD_STRING r
60140: EQUAL
60141: PUSH
60142: LD_VAR 0 4
60146: PUSH
60147: LD_INT 1
60149: ARRAY
60150: PUSH
60151: LD_INT 4
60153: ARRAY
60154: PUSH
60155: LD_VAR 0 2
60159: EQUAL
60160: AND
60161: ST_TO_ADDR
// end ;
60162: LD_VAR 0 3
60166: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60167: LD_INT 0
60169: PPUSH
// SetDir ( unit , d ) ;
60170: LD_VAR 0 1
60174: PPUSH
60175: LD_VAR 0 4
60179: PPUSH
60180: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_VAR 0 2
60193: PPUSH
60194: LD_VAR 0 3
60198: PPUSH
60199: LD_VAR 0 5
60203: PPUSH
60204: CALL_OW 48
// end ;
60208: LD_VAR 0 6
60212: RET
// export function ToNaturalNumber ( number ) ; begin
60213: LD_INT 0
60215: PPUSH
// result := number div 1 ;
60216: LD_ADDR_VAR 0 2
60220: PUSH
60221: LD_VAR 0 1
60225: PUSH
60226: LD_INT 1
60228: DIV
60229: ST_TO_ADDR
// if number < 0 then
60230: LD_VAR 0 1
60234: PUSH
60235: LD_INT 0
60237: LESS
60238: IFFALSE 60248
// result := 0 ;
60240: LD_ADDR_VAR 0 2
60244: PUSH
60245: LD_INT 0
60247: ST_TO_ADDR
// end ;
60248: LD_VAR 0 2
60252: RET
// export function SortByClass ( units , class ) ; var un ; begin
60253: LD_INT 0
60255: PPUSH
60256: PPUSH
// if not units or not class then
60257: LD_VAR 0 1
60261: NOT
60262: PUSH
60263: LD_VAR 0 2
60267: NOT
60268: OR
60269: IFFALSE 60273
// exit ;
60271: GO 60368
// result := [ ] ;
60273: LD_ADDR_VAR 0 3
60277: PUSH
60278: EMPTY
60279: ST_TO_ADDR
// for un in units do
60280: LD_ADDR_VAR 0 4
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: FOR_IN
60291: IFFALSE 60366
// if GetClass ( un ) = class then
60293: LD_VAR 0 4
60297: PPUSH
60298: CALL_OW 257
60302: PUSH
60303: LD_VAR 0 2
60307: EQUAL
60308: IFFALSE 60335
// result := Insert ( result , 1 , un ) else
60310: LD_ADDR_VAR 0 3
60314: PUSH
60315: LD_VAR 0 3
60319: PPUSH
60320: LD_INT 1
60322: PPUSH
60323: LD_VAR 0 4
60327: PPUSH
60328: CALL_OW 2
60332: ST_TO_ADDR
60333: GO 60364
// result := Replace ( result , result + 1 , un ) ;
60335: LD_ADDR_VAR 0 3
60339: PUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: LD_VAR 0 3
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: PPUSH
60354: LD_VAR 0 4
60358: PPUSH
60359: CALL_OW 1
60363: ST_TO_ADDR
60364: GO 60290
60366: POP
60367: POP
// end ;
60368: LD_VAR 0 3
60372: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
60381: PPUSH
// result := [ ] ;
60382: LD_ADDR_VAR 0 4
60386: PUSH
60387: EMPTY
60388: ST_TO_ADDR
// if x - r < 0 then
60389: LD_VAR 0 1
60393: PUSH
60394: LD_VAR 0 3
60398: MINUS
60399: PUSH
60400: LD_INT 0
60402: LESS
60403: IFFALSE 60415
// min_x := 0 else
60405: LD_ADDR_VAR 0 8
60409: PUSH
60410: LD_INT 0
60412: ST_TO_ADDR
60413: GO 60431
// min_x := x - r ;
60415: LD_ADDR_VAR 0 8
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: LD_VAR 0 3
60429: MINUS
60430: ST_TO_ADDR
// if y - r < 0 then
60431: LD_VAR 0 2
60435: PUSH
60436: LD_VAR 0 3
60440: MINUS
60441: PUSH
60442: LD_INT 0
60444: LESS
60445: IFFALSE 60457
// min_y := 0 else
60447: LD_ADDR_VAR 0 7
60451: PUSH
60452: LD_INT 0
60454: ST_TO_ADDR
60455: GO 60473
// min_y := y - r ;
60457: LD_ADDR_VAR 0 7
60461: PUSH
60462: LD_VAR 0 2
60466: PUSH
60467: LD_VAR 0 3
60471: MINUS
60472: ST_TO_ADDR
// max_x := x + r ;
60473: LD_ADDR_VAR 0 9
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_VAR 0 3
60487: PLUS
60488: ST_TO_ADDR
// max_y := y + r ;
60489: LD_ADDR_VAR 0 10
60493: PUSH
60494: LD_VAR 0 2
60498: PUSH
60499: LD_VAR 0 3
60503: PLUS
60504: ST_TO_ADDR
// for _x = min_x to max_x do
60505: LD_ADDR_VAR 0 5
60509: PUSH
60510: DOUBLE
60511: LD_VAR 0 8
60515: DEC
60516: ST_TO_ADDR
60517: LD_VAR 0 9
60521: PUSH
60522: FOR_TO
60523: IFFALSE 60624
// for _y = min_y to max_y do
60525: LD_ADDR_VAR 0 6
60529: PUSH
60530: DOUBLE
60531: LD_VAR 0 7
60535: DEC
60536: ST_TO_ADDR
60537: LD_VAR 0 10
60541: PUSH
60542: FOR_TO
60543: IFFALSE 60620
// begin if not ValidHex ( _x , _y ) then
60545: LD_VAR 0 5
60549: PPUSH
60550: LD_VAR 0 6
60554: PPUSH
60555: CALL_OW 488
60559: NOT
60560: IFFALSE 60564
// continue ;
60562: GO 60542
// if GetResourceTypeXY ( _x , _y ) then
60564: LD_VAR 0 5
60568: PPUSH
60569: LD_VAR 0 6
60573: PPUSH
60574: CALL_OW 283
60578: IFFALSE 60618
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60580: LD_ADDR_VAR 0 4
60584: PUSH
60585: LD_VAR 0 4
60589: PPUSH
60590: LD_VAR 0 4
60594: PUSH
60595: LD_INT 1
60597: PLUS
60598: PPUSH
60599: LD_VAR 0 5
60603: PUSH
60604: LD_VAR 0 6
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PPUSH
60613: CALL_OW 1
60617: ST_TO_ADDR
// end ;
60618: GO 60542
60620: POP
60621: POP
60622: GO 60522
60624: POP
60625: POP
// end ;
60626: LD_VAR 0 4
60630: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
60637: PPUSH
60638: PPUSH
// if not units then
60639: LD_VAR 0 1
60643: NOT
60644: IFFALSE 60648
// exit ;
60646: GO 61049
// result := UnitFilter ( units , [ f_ok ] ) ;
60648: LD_ADDR_VAR 0 3
60652: PUSH
60653: LD_VAR 0 1
60657: PPUSH
60658: LD_INT 50
60660: PUSH
60661: EMPTY
60662: LIST
60663: PPUSH
60664: CALL_OW 72
60668: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60669: LD_ADDR_VAR 0 7
60673: PUSH
60674: LD_VAR 0 1
60678: PUSH
60679: LD_INT 1
60681: ARRAY
60682: PPUSH
60683: CALL_OW 255
60687: ST_TO_ADDR
// if not result then
60688: LD_VAR 0 3
60692: NOT
60693: IFFALSE 60697
// exit ;
60695: GO 61049
// for i in result do
60697: LD_ADDR_VAR 0 4
60701: PUSH
60702: LD_VAR 0 3
60706: PUSH
60707: FOR_IN
60708: IFFALSE 61047
// begin tag := GetTag ( i ) + 1 ;
60710: LD_ADDR_VAR 0 8
60714: PUSH
60715: LD_VAR 0 4
60719: PPUSH
60720: CALL_OW 110
60724: PUSH
60725: LD_INT 1
60727: PLUS
60728: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60729: LD_ADDR_VAR 0 6
60733: PUSH
60734: LD_VAR 0 4
60738: PPUSH
60739: CALL_OW 250
60743: PPUSH
60744: LD_VAR 0 4
60748: PPUSH
60749: CALL_OW 251
60753: PPUSH
60754: LD_INT 6
60756: PPUSH
60757: CALL 60373 0 3
60761: ST_TO_ADDR
// if cr then
60762: LD_VAR 0 6
60766: IFFALSE 60805
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60768: LD_VAR 0 4
60772: PPUSH
60773: LD_VAR 0 6
60777: PUSH
60778: LD_INT 1
60780: ARRAY
60781: PUSH
60782: LD_INT 1
60784: ARRAY
60785: PPUSH
60786: LD_VAR 0 6
60790: PUSH
60791: LD_INT 1
60793: ARRAY
60794: PUSH
60795: LD_INT 2
60797: ARRAY
60798: PPUSH
60799: CALL_OW 116
60803: GO 61045
// if path > tag then
60805: LD_VAR 0 2
60809: PUSH
60810: LD_VAR 0 8
60814: GREATER
60815: IFFALSE 60993
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
60817: LD_ADDR_VAR 0 5
60821: PUSH
60822: LD_INT 81
60824: PUSH
60825: LD_VAR 0 7
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 91
60836: PUSH
60837: LD_VAR 0 4
60841: PUSH
60842: LD_INT 12
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PPUSH
60854: CALL_OW 69
60858: ST_TO_ADDR
// if enemy then
60859: LD_VAR 0 5
60863: IFFALSE 60891
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60865: LD_VAR 0 4
60869: PPUSH
60870: LD_VAR 0 5
60874: PPUSH
60875: LD_VAR 0 4
60879: PPUSH
60880: CALL_OW 74
60884: PPUSH
60885: CALL_OW 115
60889: GO 60991
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60891: LD_VAR 0 4
60895: PPUSH
60896: LD_VAR 0 2
60900: PUSH
60901: LD_VAR 0 8
60905: ARRAY
60906: PUSH
60907: LD_INT 1
60909: ARRAY
60910: PPUSH
60911: LD_VAR 0 2
60915: PUSH
60916: LD_VAR 0 8
60920: ARRAY
60921: PUSH
60922: LD_INT 2
60924: ARRAY
60925: PPUSH
60926: CALL_OW 297
60930: PUSH
60931: LD_INT 6
60933: GREATER
60934: IFFALSE 60977
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60936: LD_VAR 0 4
60940: PPUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_VAR 0 8
60950: ARRAY
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: PPUSH
60956: LD_VAR 0 2
60960: PUSH
60961: LD_VAR 0 8
60965: ARRAY
60966: PUSH
60967: LD_INT 2
60969: ARRAY
60970: PPUSH
60971: CALL_OW 114
60975: GO 60991
// SetTag ( i , tag ) ;
60977: LD_VAR 0 4
60981: PPUSH
60982: LD_VAR 0 8
60986: PPUSH
60987: CALL_OW 109
// end else
60991: GO 61045
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60993: LD_ADDR_VAR 0 5
60997: PUSH
60998: LD_INT 81
61000: PUSH
61001: LD_VAR 0 7
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 69
61014: ST_TO_ADDR
// if enemy then
61015: LD_VAR 0 5
61019: IFFALSE 61045
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61021: LD_VAR 0 4
61025: PPUSH
61026: LD_VAR 0 5
61030: PPUSH
61031: LD_VAR 0 4
61035: PPUSH
61036: CALL_OW 74
61040: PPUSH
61041: CALL_OW 115
// end ; end ;
61045: GO 60707
61047: POP
61048: POP
// end ; end_of_file
61049: LD_VAR 0 3
61053: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
61054: LD_INT 0
61056: PPUSH
// ar_miner := 81 ;
61057: LD_ADDR_EXP 84
61061: PUSH
61062: LD_INT 81
61064: ST_TO_ADDR
// ar_crane := 88 ;
61065: LD_ADDR_EXP 83
61069: PUSH
61070: LD_INT 88
61072: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61073: LD_ADDR_EXP 78
61077: PUSH
61078: LD_INT 89
61080: ST_TO_ADDR
// us_hack := 99 ;
61081: LD_ADDR_EXP 79
61085: PUSH
61086: LD_INT 99
61088: ST_TO_ADDR
// us_artillery := 97 ;
61089: LD_ADDR_EXP 80
61093: PUSH
61094: LD_INT 97
61096: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61097: LD_ADDR_EXP 81
61101: PUSH
61102: LD_INT 91
61104: ST_TO_ADDR
// ar_mortar := 92 ;
61105: LD_ADDR_EXP 82
61109: PUSH
61110: LD_INT 92
61112: ST_TO_ADDR
// ru_radar := 98 ;
61113: LD_ADDR_EXP 77
61117: PUSH
61118: LD_INT 98
61120: ST_TO_ADDR
// tech_Artillery := 80 ;
61121: LD_ADDR_EXP 85
61125: PUSH
61126: LD_INT 80
61128: ST_TO_ADDR
// tech_RadMat := 81 ;
61129: LD_ADDR_EXP 86
61133: PUSH
61134: LD_INT 81
61136: ST_TO_ADDR
// tech_BasicTools := 82 ;
61137: LD_ADDR_EXP 87
61141: PUSH
61142: LD_INT 82
61144: ST_TO_ADDR
// tech_Cargo := 83 ;
61145: LD_ADDR_EXP 88
61149: PUSH
61150: LD_INT 83
61152: ST_TO_ADDR
// tech_Track := 84 ;
61153: LD_ADDR_EXP 89
61157: PUSH
61158: LD_INT 84
61160: ST_TO_ADDR
// tech_Crane := 85 ;
61161: LD_ADDR_EXP 90
61165: PUSH
61166: LD_INT 85
61168: ST_TO_ADDR
// tech_Bulldozer := 86 ;
61169: LD_ADDR_EXP 91
61173: PUSH
61174: LD_INT 86
61176: ST_TO_ADDR
// tech_Hovercraft := 87 ;
61177: LD_ADDR_EXP 92
61181: PUSH
61182: LD_INT 87
61184: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
61185: LD_ADDR_EXP 93
61189: PUSH
61190: LD_INT 88
61192: ST_TO_ADDR
// class_mastodont := 31 ;
61193: LD_ADDR_EXP 94
61197: PUSH
61198: LD_INT 31
61200: ST_TO_ADDR
// class_horse := 21 ;
61201: LD_ADDR_EXP 95
61205: PUSH
61206: LD_INT 21
61208: ST_TO_ADDR
// end ;
61209: LD_VAR 0 1
61213: RET
// every 1 do
61214: GO 61216
61216: DISABLE
// InitGlobalVariables ; end_of_file
61217: CALL 61054 0 0
61221: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61222: LD_VAR 0 1
61226: PUSH
61227: LD_INT 200
61229: DOUBLE
61230: GREATEREQUAL
61231: IFFALSE 61239
61233: LD_INT 299
61235: DOUBLE
61236: LESSEQUAL
61237: IFTRUE 61241
61239: GO 61273
61241: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61242: LD_VAR 0 1
61246: PPUSH
61247: LD_VAR 0 2
61251: PPUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: LD_VAR 0 4
61261: PPUSH
61262: LD_VAR 0 5
61266: PPUSH
61267: CALL 61507 0 5
61271: GO 61350
61273: LD_INT 300
61275: DOUBLE
61276: GREATEREQUAL
61277: IFFALSE 61285
61279: LD_INT 399
61281: DOUBLE
61282: LESSEQUAL
61283: IFTRUE 61287
61285: GO 61349
61287: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61288: LD_VAR 0 1
61292: PPUSH
61293: LD_VAR 0 2
61297: PPUSH
61298: LD_VAR 0 3
61302: PPUSH
61303: LD_VAR 0 4
61307: PPUSH
61308: LD_VAR 0 5
61312: PPUSH
61313: LD_VAR 0 6
61317: PPUSH
61318: LD_VAR 0 7
61322: PPUSH
61323: LD_VAR 0 8
61327: PPUSH
61328: LD_VAR 0 9
61332: PPUSH
61333: LD_VAR 0 10
61337: PPUSH
61338: LD_VAR 0 11
61342: PPUSH
61343: CALL 19519 0 11
61347: GO 61350
61349: POP
// end ;
61350: PPOPN 11
61352: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61353: LD_VAR 0 1
61357: PPUSH
61358: LD_VAR 0 2
61362: PPUSH
61363: LD_VAR 0 3
61367: PPUSH
61368: LD_VAR 0 4
61372: PPUSH
61373: LD_VAR 0 5
61377: PPUSH
61378: CALL 61499 0 5
// end ; end_of_file
61382: PPOPN 5
61384: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61385: LD_INT 0
61387: PPUSH
61388: PPUSH
61389: PPUSH
61390: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 264
61400: PUSH
61401: LD_EXP 81
61405: EQUAL
61406: IFFALSE 61478
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61408: LD_INT 68
61410: PPUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 255
61420: PPUSH
61421: CALL_OW 321
61425: PUSH
61426: LD_INT 2
61428: EQUAL
61429: IFFALSE 61441
// eff := 70 else
61431: LD_ADDR_VAR 0 4
61435: PUSH
61436: LD_INT 70
61438: ST_TO_ADDR
61439: GO 61449
// eff := 30 ;
61441: LD_ADDR_VAR 0 4
61445: PUSH
61446: LD_INT 30
61448: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61449: LD_VAR 0 1
61453: PPUSH
61454: CALL_OW 250
61458: PPUSH
61459: LD_VAR 0 1
61463: PPUSH
61464: CALL_OW 251
61468: PPUSH
61469: LD_VAR 0 4
61473: PPUSH
61474: CALL_OW 495
// end ; end ;
61478: LD_VAR 0 2
61482: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61483: LD_INT 0
61485: PPUSH
// end ;
61486: LD_VAR 0 4
61490: RET
// export function SOS_Command ( cmd ) ; begin
61491: LD_INT 0
61493: PPUSH
// end ;
61494: LD_VAR 0 2
61498: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61499: LD_INT 0
61501: PPUSH
// end ;
61502: LD_VAR 0 6
61506: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61507: LD_INT 0
61509: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61510: LD_VAR 0 1
61514: PUSH
61515: LD_INT 250
61517: EQUAL
61518: PUSH
61519: LD_VAR 0 2
61523: PPUSH
61524: CALL_OW 264
61528: PUSH
61529: LD_EXP 84
61533: EQUAL
61534: AND
61535: IFFALSE 61556
// MinerPlaceMine ( unit , x , y ) ;
61537: LD_VAR 0 2
61541: PPUSH
61542: LD_VAR 0 4
61546: PPUSH
61547: LD_VAR 0 5
61551: PPUSH
61552: CALL 63905 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61556: LD_VAR 0 1
61560: PUSH
61561: LD_INT 251
61563: EQUAL
61564: PUSH
61565: LD_VAR 0 2
61569: PPUSH
61570: CALL_OW 264
61574: PUSH
61575: LD_EXP 84
61579: EQUAL
61580: AND
61581: IFFALSE 61602
// MinerDetonateMine ( unit , x , y ) ;
61583: LD_VAR 0 2
61587: PPUSH
61588: LD_VAR 0 4
61592: PPUSH
61593: LD_VAR 0 5
61597: PPUSH
61598: CALL 64182 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61602: LD_VAR 0 1
61606: PUSH
61607: LD_INT 252
61609: EQUAL
61610: PUSH
61611: LD_VAR 0 2
61615: PPUSH
61616: CALL_OW 264
61620: PUSH
61621: LD_EXP 84
61625: EQUAL
61626: AND
61627: IFFALSE 61648
// MinerCreateMinefield ( unit , x , y ) ;
61629: LD_VAR 0 2
61633: PPUSH
61634: LD_VAR 0 4
61638: PPUSH
61639: LD_VAR 0 5
61643: PPUSH
61644: CALL 64599 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61648: LD_VAR 0 1
61652: PUSH
61653: LD_INT 253
61655: EQUAL
61656: PUSH
61657: LD_VAR 0 2
61661: PPUSH
61662: CALL_OW 257
61666: PUSH
61667: LD_INT 5
61669: EQUAL
61670: AND
61671: IFFALSE 61692
// ComBinocular ( unit , x , y ) ;
61673: LD_VAR 0 2
61677: PPUSH
61678: LD_VAR 0 4
61682: PPUSH
61683: LD_VAR 0 5
61687: PPUSH
61688: CALL 64970 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61692: LD_VAR 0 1
61696: PUSH
61697: LD_INT 254
61699: EQUAL
61700: PUSH
61701: LD_VAR 0 2
61705: PPUSH
61706: CALL_OW 264
61710: PUSH
61711: LD_EXP 79
61715: EQUAL
61716: AND
61717: PUSH
61718: LD_VAR 0 3
61722: PPUSH
61723: CALL_OW 263
61727: PUSH
61728: LD_INT 3
61730: EQUAL
61731: AND
61732: IFFALSE 61748
// HackDestroyVehicle ( unit , selectedUnit ) ;
61734: LD_VAR 0 2
61738: PPUSH
61739: LD_VAR 0 3
61743: PPUSH
61744: CALL 63265 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61748: LD_VAR 0 1
61752: PUSH
61753: LD_INT 255
61755: EQUAL
61756: PUSH
61757: LD_VAR 0 2
61761: PPUSH
61762: CALL_OW 264
61766: PUSH
61767: LD_INT 14
61769: PUSH
61770: LD_INT 53
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: IN
61777: AND
61778: PUSH
61779: LD_VAR 0 4
61783: PPUSH
61784: LD_VAR 0 5
61788: PPUSH
61789: CALL_OW 488
61793: AND
61794: IFFALSE 61818
// CutTreeXYR ( unit , x , y , 12 ) ;
61796: LD_VAR 0 2
61800: PPUSH
61801: LD_VAR 0 4
61805: PPUSH
61806: LD_VAR 0 5
61810: PPUSH
61811: LD_INT 12
61813: PPUSH
61814: CALL 61831 0 4
// end ;
61818: LD_VAR 0 6
61822: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
61823: LD_INT 0
61825: PPUSH
// end ;
61826: LD_VAR 0 4
61830: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61831: LD_INT 0
61833: PPUSH
61834: PPUSH
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61842: LD_VAR 0 1
61846: NOT
61847: PUSH
61848: LD_VAR 0 2
61852: PPUSH
61853: LD_VAR 0 3
61857: PPUSH
61858: CALL_OW 488
61862: NOT
61863: OR
61864: PUSH
61865: LD_VAR 0 4
61869: NOT
61870: OR
61871: IFFALSE 61875
// exit ;
61873: GO 62215
// list := [ ] ;
61875: LD_ADDR_VAR 0 13
61879: PUSH
61880: EMPTY
61881: ST_TO_ADDR
// if x - r < 0 then
61882: LD_VAR 0 2
61886: PUSH
61887: LD_VAR 0 4
61891: MINUS
61892: PUSH
61893: LD_INT 0
61895: LESS
61896: IFFALSE 61908
// min_x := 0 else
61898: LD_ADDR_VAR 0 7
61902: PUSH
61903: LD_INT 0
61905: ST_TO_ADDR
61906: GO 61924
// min_x := x - r ;
61908: LD_ADDR_VAR 0 7
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: LD_VAR 0 4
61922: MINUS
61923: ST_TO_ADDR
// if y - r < 0 then
61924: LD_VAR 0 3
61928: PUSH
61929: LD_VAR 0 4
61933: MINUS
61934: PUSH
61935: LD_INT 0
61937: LESS
61938: IFFALSE 61950
// min_y := 0 else
61940: LD_ADDR_VAR 0 8
61944: PUSH
61945: LD_INT 0
61947: ST_TO_ADDR
61948: GO 61966
// min_y := y - r ;
61950: LD_ADDR_VAR 0 8
61954: PUSH
61955: LD_VAR 0 3
61959: PUSH
61960: LD_VAR 0 4
61964: MINUS
61965: ST_TO_ADDR
// max_x := x + r ;
61966: LD_ADDR_VAR 0 9
61970: PUSH
61971: LD_VAR 0 2
61975: PUSH
61976: LD_VAR 0 4
61980: PLUS
61981: ST_TO_ADDR
// max_y := y + r ;
61982: LD_ADDR_VAR 0 10
61986: PUSH
61987: LD_VAR 0 3
61991: PUSH
61992: LD_VAR 0 4
61996: PLUS
61997: ST_TO_ADDR
// for _x = min_x to max_x do
61998: LD_ADDR_VAR 0 11
62002: PUSH
62003: DOUBLE
62004: LD_VAR 0 7
62008: DEC
62009: ST_TO_ADDR
62010: LD_VAR 0 9
62014: PUSH
62015: FOR_TO
62016: IFFALSE 62133
// for _y = min_y to max_y do
62018: LD_ADDR_VAR 0 12
62022: PUSH
62023: DOUBLE
62024: LD_VAR 0 8
62028: DEC
62029: ST_TO_ADDR
62030: LD_VAR 0 10
62034: PUSH
62035: FOR_TO
62036: IFFALSE 62129
// begin if not ValidHex ( _x , _y ) then
62038: LD_VAR 0 11
62042: PPUSH
62043: LD_VAR 0 12
62047: PPUSH
62048: CALL_OW 488
62052: NOT
62053: IFFALSE 62057
// continue ;
62055: GO 62035
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62057: LD_VAR 0 11
62061: PPUSH
62062: LD_VAR 0 12
62066: PPUSH
62067: CALL_OW 351
62071: PUSH
62072: LD_VAR 0 11
62076: PPUSH
62077: LD_VAR 0 12
62081: PPUSH
62082: CALL_OW 554
62086: AND
62087: IFFALSE 62127
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62089: LD_ADDR_VAR 0 13
62093: PUSH
62094: LD_VAR 0 13
62098: PPUSH
62099: LD_VAR 0 13
62103: PUSH
62104: LD_INT 1
62106: PLUS
62107: PPUSH
62108: LD_VAR 0 11
62112: PUSH
62113: LD_VAR 0 12
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PPUSH
62122: CALL_OW 2
62126: ST_TO_ADDR
// end ;
62127: GO 62035
62129: POP
62130: POP
62131: GO 62015
62133: POP
62134: POP
// if not list then
62135: LD_VAR 0 13
62139: NOT
62140: IFFALSE 62144
// exit ;
62142: GO 62215
// for i in list do
62144: LD_ADDR_VAR 0 6
62148: PUSH
62149: LD_VAR 0 13
62153: PUSH
62154: FOR_IN
62155: IFFALSE 62213
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62157: LD_VAR 0 1
62161: PPUSH
62162: LD_STRING M
62164: PUSH
62165: LD_VAR 0 6
62169: PUSH
62170: LD_INT 1
62172: ARRAY
62173: PUSH
62174: LD_VAR 0 6
62178: PUSH
62179: LD_INT 2
62181: ARRAY
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: PPUSH
62207: CALL_OW 447
62211: GO 62154
62213: POP
62214: POP
// end ;
62215: LD_VAR 0 5
62219: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62220: LD_EXP 98
62224: NOT
62225: IFFALSE 62275
62227: GO 62229
62229: DISABLE
// begin initHack := true ;
62230: LD_ADDR_EXP 98
62234: PUSH
62235: LD_INT 1
62237: ST_TO_ADDR
// hackTanks := [ ] ;
62238: LD_ADDR_EXP 99
62242: PUSH
62243: EMPTY
62244: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62245: LD_ADDR_EXP 100
62249: PUSH
62250: EMPTY
62251: ST_TO_ADDR
// hackLimit := 3 ;
62252: LD_ADDR_EXP 101
62256: PUSH
62257: LD_INT 3
62259: ST_TO_ADDR
// hackDist := 12 ;
62260: LD_ADDR_EXP 102
62264: PUSH
62265: LD_INT 12
62267: ST_TO_ADDR
// hackCounter := [ ] ;
62268: LD_ADDR_EXP 103
62272: PUSH
62273: EMPTY
62274: ST_TO_ADDR
// end ;
62275: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62276: LD_EXP 98
62280: PUSH
62281: LD_INT 34
62283: PUSH
62284: LD_EXP 79
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PPUSH
62293: CALL_OW 69
62297: AND
62298: IFFALSE 62553
62300: GO 62302
62302: DISABLE
62303: LD_INT 0
62305: PPUSH
62306: PPUSH
// begin enable ;
62307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62308: LD_ADDR_VAR 0 1
62312: PUSH
62313: LD_INT 34
62315: PUSH
62316: LD_EXP 79
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PPUSH
62325: CALL_OW 69
62329: PUSH
62330: FOR_IN
62331: IFFALSE 62551
// begin if not i in hackTanks then
62333: LD_VAR 0 1
62337: PUSH
62338: LD_EXP 99
62342: IN
62343: NOT
62344: IFFALSE 62427
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62346: LD_ADDR_EXP 99
62350: PUSH
62351: LD_EXP 99
62355: PPUSH
62356: LD_EXP 99
62360: PUSH
62361: LD_INT 1
62363: PLUS
62364: PPUSH
62365: LD_VAR 0 1
62369: PPUSH
62370: CALL_OW 1
62374: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62375: LD_ADDR_EXP 100
62379: PUSH
62380: LD_EXP 100
62384: PPUSH
62385: LD_EXP 100
62389: PUSH
62390: LD_INT 1
62392: PLUS
62393: PPUSH
62394: EMPTY
62395: PPUSH
62396: CALL_OW 1
62400: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62401: LD_ADDR_EXP 103
62405: PUSH
62406: LD_EXP 103
62410: PPUSH
62411: LD_EXP 103
62415: PUSH
62416: LD_INT 1
62418: PLUS
62419: PPUSH
62420: EMPTY
62421: PPUSH
62422: CALL_OW 1
62426: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62427: LD_VAR 0 1
62431: PPUSH
62432: CALL_OW 302
62436: NOT
62437: IFFALSE 62450
// begin HackUnlinkAll ( i ) ;
62439: LD_VAR 0 1
62443: PPUSH
62444: CALL 62556 0 1
// continue ;
62448: GO 62330
// end ; HackCheckCapturedStatus ( i ) ;
62450: LD_VAR 0 1
62454: PPUSH
62455: CALL 62999 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62459: LD_ADDR_VAR 0 2
62463: PUSH
62464: LD_INT 81
62466: PUSH
62467: LD_VAR 0 1
62471: PPUSH
62472: CALL_OW 255
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 33
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 91
62493: PUSH
62494: LD_VAR 0 1
62498: PUSH
62499: LD_EXP 102
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 50
62511: PUSH
62512: EMPTY
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: PPUSH
62521: CALL_OW 69
62525: ST_TO_ADDR
// if not tmp then
62526: LD_VAR 0 2
62530: NOT
62531: IFFALSE 62535
// continue ;
62533: GO 62330
// HackLink ( i , tmp ) ;
62535: LD_VAR 0 1
62539: PPUSH
62540: LD_VAR 0 2
62544: PPUSH
62545: CALL 62692 0 2
// end ;
62549: GO 62330
62551: POP
62552: POP
// end ;
62553: PPOPN 2
62555: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62556: LD_INT 0
62558: PPUSH
62559: PPUSH
62560: PPUSH
// if not hack in hackTanks then
62561: LD_VAR 0 1
62565: PUSH
62566: LD_EXP 99
62570: IN
62571: NOT
62572: IFFALSE 62576
// exit ;
62574: GO 62687
// index := GetElementIndex ( hackTanks , hack ) ;
62576: LD_ADDR_VAR 0 4
62580: PUSH
62581: LD_EXP 99
62585: PPUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL 26270 0 2
62595: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62596: LD_EXP 100
62600: PUSH
62601: LD_VAR 0 4
62605: ARRAY
62606: IFFALSE 62687
// begin for i in hackTanksCaptured [ index ] do
62608: LD_ADDR_VAR 0 3
62612: PUSH
62613: LD_EXP 100
62617: PUSH
62618: LD_VAR 0 4
62622: ARRAY
62623: PUSH
62624: FOR_IN
62625: IFFALSE 62651
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62627: LD_VAR 0 3
62631: PUSH
62632: LD_INT 1
62634: ARRAY
62635: PPUSH
62636: LD_VAR 0 3
62640: PUSH
62641: LD_INT 2
62643: ARRAY
62644: PPUSH
62645: CALL_OW 235
62649: GO 62624
62651: POP
62652: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62653: LD_ADDR_EXP 100
62657: PUSH
62658: LD_EXP 100
62662: PPUSH
62663: LD_VAR 0 4
62667: PPUSH
62668: EMPTY
62669: PPUSH
62670: CALL_OW 1
62674: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_INT 0
62682: PPUSH
62683: CALL_OW 505
// end ; end ;
62687: LD_VAR 0 2
62691: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62692: LD_INT 0
62694: PPUSH
62695: PPUSH
62696: PPUSH
// if not hack in hackTanks or not vehicles then
62697: LD_VAR 0 1
62701: PUSH
62702: LD_EXP 99
62706: IN
62707: NOT
62708: PUSH
62709: LD_VAR 0 2
62713: NOT
62714: OR
62715: IFFALSE 62719
// exit ;
62717: GO 62994
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62719: LD_ADDR_VAR 0 2
62723: PUSH
62724: LD_VAR 0 1
62728: PPUSH
62729: LD_VAR 0 2
62733: PPUSH
62734: LD_INT 1
62736: PPUSH
62737: LD_INT 1
62739: PPUSH
62740: CALL 26920 0 4
62744: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62745: LD_ADDR_VAR 0 5
62749: PUSH
62750: LD_EXP 99
62754: PPUSH
62755: LD_VAR 0 1
62759: PPUSH
62760: CALL 26270 0 2
62764: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62765: LD_EXP 100
62769: PUSH
62770: LD_VAR 0 5
62774: ARRAY
62775: PUSH
62776: LD_EXP 101
62780: LESS
62781: IFFALSE 62970
// begin for i := 1 to vehicles do
62783: LD_ADDR_VAR 0 4
62787: PUSH
62788: DOUBLE
62789: LD_INT 1
62791: DEC
62792: ST_TO_ADDR
62793: LD_VAR 0 2
62797: PUSH
62798: FOR_TO
62799: IFFALSE 62968
// begin if hackTanksCaptured [ index ] = hackLimit then
62801: LD_EXP 100
62805: PUSH
62806: LD_VAR 0 5
62810: ARRAY
62811: PUSH
62812: LD_EXP 101
62816: EQUAL
62817: IFFALSE 62821
// break ;
62819: GO 62968
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62821: LD_ADDR_EXP 103
62825: PUSH
62826: LD_EXP 103
62830: PPUSH
62831: LD_VAR 0 5
62835: PPUSH
62836: LD_EXP 103
62840: PUSH
62841: LD_VAR 0 5
62845: ARRAY
62846: PUSH
62847: LD_INT 1
62849: PLUS
62850: PPUSH
62851: CALL_OW 1
62855: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62856: LD_ADDR_EXP 100
62860: PUSH
62861: LD_EXP 100
62865: PPUSH
62866: LD_VAR 0 5
62870: PUSH
62871: LD_EXP 100
62875: PUSH
62876: LD_VAR 0 5
62880: ARRAY
62881: PUSH
62882: LD_INT 1
62884: PLUS
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PPUSH
62890: LD_VAR 0 2
62894: PUSH
62895: LD_VAR 0 4
62899: ARRAY
62900: PUSH
62901: LD_VAR 0 2
62905: PUSH
62906: LD_VAR 0 4
62910: ARRAY
62911: PPUSH
62912: CALL_OW 255
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PPUSH
62921: CALL 26485 0 3
62925: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62926: LD_VAR 0 2
62930: PUSH
62931: LD_VAR 0 4
62935: ARRAY
62936: PPUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: CALL_OW 255
62946: PPUSH
62947: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62951: LD_VAR 0 2
62955: PUSH
62956: LD_VAR 0 4
62960: ARRAY
62961: PPUSH
62962: CALL_OW 141
// end ;
62966: GO 62798
62968: POP
62969: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62970: LD_VAR 0 1
62974: PPUSH
62975: LD_EXP 100
62979: PUSH
62980: LD_VAR 0 5
62984: ARRAY
62985: PUSH
62986: LD_INT 0
62988: PLUS
62989: PPUSH
62990: CALL_OW 505
// end ;
62994: LD_VAR 0 3
62998: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62999: LD_INT 0
63001: PPUSH
63002: PPUSH
63003: PPUSH
63004: PPUSH
// if not hack in hackTanks then
63005: LD_VAR 0 1
63009: PUSH
63010: LD_EXP 99
63014: IN
63015: NOT
63016: IFFALSE 63020
// exit ;
63018: GO 63260
// index := GetElementIndex ( hackTanks , hack ) ;
63020: LD_ADDR_VAR 0 4
63024: PUSH
63025: LD_EXP 99
63029: PPUSH
63030: LD_VAR 0 1
63034: PPUSH
63035: CALL 26270 0 2
63039: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63040: LD_ADDR_VAR 0 3
63044: PUSH
63045: DOUBLE
63046: LD_EXP 100
63050: PUSH
63051: LD_VAR 0 4
63055: ARRAY
63056: INC
63057: ST_TO_ADDR
63058: LD_INT 1
63060: PUSH
63061: FOR_DOWNTO
63062: IFFALSE 63234
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63064: LD_ADDR_VAR 0 5
63068: PUSH
63069: LD_EXP 100
63073: PUSH
63074: LD_VAR 0 4
63078: ARRAY
63079: PUSH
63080: LD_VAR 0 3
63084: ARRAY
63085: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63086: LD_VAR 0 5
63090: PUSH
63091: LD_INT 1
63093: ARRAY
63094: PPUSH
63095: CALL_OW 302
63099: NOT
63100: PUSH
63101: LD_VAR 0 5
63105: PUSH
63106: LD_INT 1
63108: ARRAY
63109: PPUSH
63110: CALL_OW 255
63114: PUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 255
63124: NONEQUAL
63125: OR
63126: IFFALSE 63232
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63128: LD_VAR 0 5
63132: PUSH
63133: LD_INT 1
63135: ARRAY
63136: PPUSH
63137: CALL_OW 305
63141: PUSH
63142: LD_VAR 0 5
63146: PUSH
63147: LD_INT 1
63149: ARRAY
63150: PPUSH
63151: CALL_OW 255
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 255
63165: EQUAL
63166: AND
63167: IFFALSE 63191
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63169: LD_VAR 0 5
63173: PUSH
63174: LD_INT 1
63176: ARRAY
63177: PPUSH
63178: LD_VAR 0 5
63182: PUSH
63183: LD_INT 2
63185: ARRAY
63186: PPUSH
63187: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63191: LD_ADDR_EXP 100
63195: PUSH
63196: LD_EXP 100
63200: PPUSH
63201: LD_VAR 0 4
63205: PPUSH
63206: LD_EXP 100
63210: PUSH
63211: LD_VAR 0 4
63215: ARRAY
63216: PPUSH
63217: LD_VAR 0 3
63221: PPUSH
63222: CALL_OW 3
63226: PPUSH
63227: CALL_OW 1
63231: ST_TO_ADDR
// end ; end ;
63232: GO 63061
63234: POP
63235: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63236: LD_VAR 0 1
63240: PPUSH
63241: LD_EXP 100
63245: PUSH
63246: LD_VAR 0 4
63250: ARRAY
63251: PUSH
63252: LD_INT 0
63254: PLUS
63255: PPUSH
63256: CALL_OW 505
// end ;
63260: LD_VAR 0 2
63264: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63265: LD_INT 0
63267: PPUSH
63268: PPUSH
63269: PPUSH
63270: PPUSH
// if not hack in hackTanks then
63271: LD_VAR 0 1
63275: PUSH
63276: LD_EXP 99
63280: IN
63281: NOT
63282: IFFALSE 63286
// exit ;
63284: GO 63371
// index := GetElementIndex ( hackTanks , hack ) ;
63286: LD_ADDR_VAR 0 5
63290: PUSH
63291: LD_EXP 99
63295: PPUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL 26270 0 2
63305: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63306: LD_ADDR_VAR 0 4
63310: PUSH
63311: DOUBLE
63312: LD_INT 1
63314: DEC
63315: ST_TO_ADDR
63316: LD_EXP 100
63320: PUSH
63321: LD_VAR 0 5
63325: ARRAY
63326: PUSH
63327: FOR_TO
63328: IFFALSE 63369
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63330: LD_EXP 100
63334: PUSH
63335: LD_VAR 0 5
63339: ARRAY
63340: PUSH
63341: LD_VAR 0 4
63345: ARRAY
63346: PUSH
63347: LD_INT 1
63349: ARRAY
63350: PUSH
63351: LD_VAR 0 2
63355: EQUAL
63356: IFFALSE 63367
// KillUnit ( vehicle ) ;
63358: LD_VAR 0 2
63362: PPUSH
63363: CALL_OW 66
63367: GO 63327
63369: POP
63370: POP
// end ;
63371: LD_VAR 0 3
63375: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63376: LD_EXP 104
63380: NOT
63381: IFFALSE 63416
63383: GO 63385
63385: DISABLE
// begin initMiner := true ;
63386: LD_ADDR_EXP 104
63390: PUSH
63391: LD_INT 1
63393: ST_TO_ADDR
// minersList := [ ] ;
63394: LD_ADDR_EXP 105
63398: PUSH
63399: EMPTY
63400: ST_TO_ADDR
// minerMinesList := [ ] ;
63401: LD_ADDR_EXP 106
63405: PUSH
63406: EMPTY
63407: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63408: LD_ADDR_EXP 107
63412: PUSH
63413: LD_INT 5
63415: ST_TO_ADDR
// end ;
63416: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63417: LD_EXP 104
63421: PUSH
63422: LD_INT 34
63424: PUSH
63425: LD_EXP 84
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PPUSH
63434: CALL_OW 69
63438: AND
63439: IFFALSE 63902
63441: GO 63443
63443: DISABLE
63444: LD_INT 0
63446: PPUSH
63447: PPUSH
63448: PPUSH
63449: PPUSH
// begin enable ;
63450: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63451: LD_ADDR_VAR 0 1
63455: PUSH
63456: LD_INT 34
63458: PUSH
63459: LD_EXP 84
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PPUSH
63468: CALL_OW 69
63472: PUSH
63473: FOR_IN
63474: IFFALSE 63546
// begin if not i in minersList then
63476: LD_VAR 0 1
63480: PUSH
63481: LD_EXP 105
63485: IN
63486: NOT
63487: IFFALSE 63544
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63489: LD_ADDR_EXP 105
63493: PUSH
63494: LD_EXP 105
63498: PPUSH
63499: LD_EXP 105
63503: PUSH
63504: LD_INT 1
63506: PLUS
63507: PPUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 1
63517: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63518: LD_ADDR_EXP 106
63522: PUSH
63523: LD_EXP 106
63527: PPUSH
63528: LD_EXP 106
63532: PUSH
63533: LD_INT 1
63535: PLUS
63536: PPUSH
63537: EMPTY
63538: PPUSH
63539: CALL_OW 1
63543: ST_TO_ADDR
// end end ;
63544: GO 63473
63546: POP
63547: POP
// for i := minerMinesList downto 1 do
63548: LD_ADDR_VAR 0 1
63552: PUSH
63553: DOUBLE
63554: LD_EXP 106
63558: INC
63559: ST_TO_ADDR
63560: LD_INT 1
63562: PUSH
63563: FOR_DOWNTO
63564: IFFALSE 63900
// begin if IsLive ( minersList [ i ] ) then
63566: LD_EXP 105
63570: PUSH
63571: LD_VAR 0 1
63575: ARRAY
63576: PPUSH
63577: CALL_OW 300
63581: IFFALSE 63609
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63583: LD_EXP 105
63587: PUSH
63588: LD_VAR 0 1
63592: ARRAY
63593: PPUSH
63594: LD_EXP 106
63598: PUSH
63599: LD_VAR 0 1
63603: ARRAY
63604: PPUSH
63605: CALL_OW 505
// if not minerMinesList [ i ] then
63609: LD_EXP 106
63613: PUSH
63614: LD_VAR 0 1
63618: ARRAY
63619: NOT
63620: IFFALSE 63624
// continue ;
63622: GO 63563
// for j := minerMinesList [ i ] downto 1 do
63624: LD_ADDR_VAR 0 2
63628: PUSH
63629: DOUBLE
63630: LD_EXP 106
63634: PUSH
63635: LD_VAR 0 1
63639: ARRAY
63640: INC
63641: ST_TO_ADDR
63642: LD_INT 1
63644: PUSH
63645: FOR_DOWNTO
63646: IFFALSE 63896
// begin side := GetSide ( minersList [ i ] ) ;
63648: LD_ADDR_VAR 0 3
63652: PUSH
63653: LD_EXP 105
63657: PUSH
63658: LD_VAR 0 1
63662: ARRAY
63663: PPUSH
63664: CALL_OW 255
63668: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63669: LD_ADDR_VAR 0 4
63673: PUSH
63674: LD_EXP 106
63678: PUSH
63679: LD_VAR 0 1
63683: ARRAY
63684: PUSH
63685: LD_VAR 0 2
63689: ARRAY
63690: PUSH
63691: LD_INT 1
63693: ARRAY
63694: PPUSH
63695: LD_EXP 106
63699: PUSH
63700: LD_VAR 0 1
63704: ARRAY
63705: PUSH
63706: LD_VAR 0 2
63710: ARRAY
63711: PUSH
63712: LD_INT 2
63714: ARRAY
63715: PPUSH
63716: CALL_OW 428
63720: ST_TO_ADDR
// if not tmp then
63721: LD_VAR 0 4
63725: NOT
63726: IFFALSE 63730
// continue ;
63728: GO 63645
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63730: LD_VAR 0 4
63734: PUSH
63735: LD_INT 81
63737: PUSH
63738: LD_VAR 0 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PPUSH
63747: CALL_OW 69
63751: IN
63752: PUSH
63753: LD_EXP 106
63757: PUSH
63758: LD_VAR 0 1
63762: ARRAY
63763: PUSH
63764: LD_VAR 0 2
63768: ARRAY
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PPUSH
63774: LD_EXP 106
63778: PUSH
63779: LD_VAR 0 1
63783: ARRAY
63784: PUSH
63785: LD_VAR 0 2
63789: ARRAY
63790: PUSH
63791: LD_INT 2
63793: ARRAY
63794: PPUSH
63795: CALL_OW 458
63799: AND
63800: IFFALSE 63894
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63802: LD_EXP 106
63806: PUSH
63807: LD_VAR 0 1
63811: ARRAY
63812: PUSH
63813: LD_VAR 0 2
63817: ARRAY
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_EXP 106
63827: PUSH
63828: LD_VAR 0 1
63832: ARRAY
63833: PUSH
63834: LD_VAR 0 2
63838: ARRAY
63839: PUSH
63840: LD_INT 2
63842: ARRAY
63843: PPUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63853: LD_ADDR_EXP 106
63857: PUSH
63858: LD_EXP 106
63862: PPUSH
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_EXP 106
63872: PUSH
63873: LD_VAR 0 1
63877: ARRAY
63878: PPUSH
63879: LD_VAR 0 2
63883: PPUSH
63884: CALL_OW 3
63888: PPUSH
63889: CALL_OW 1
63893: ST_TO_ADDR
// end ; end ;
63894: GO 63645
63896: POP
63897: POP
// end ;
63898: GO 63563
63900: POP
63901: POP
// end ;
63902: PPOPN 4
63904: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63905: LD_INT 0
63907: PPUSH
63908: PPUSH
// result := false ;
63909: LD_ADDR_VAR 0 4
63913: PUSH
63914: LD_INT 0
63916: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63917: LD_VAR 0 1
63921: PPUSH
63922: CALL_OW 264
63926: PUSH
63927: LD_EXP 84
63931: EQUAL
63932: NOT
63933: IFFALSE 63937
// exit ;
63935: GO 64177
// index := GetElementIndex ( minersList , unit ) ;
63937: LD_ADDR_VAR 0 5
63941: PUSH
63942: LD_EXP 105
63946: PPUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: CALL 26270 0 2
63956: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63957: LD_EXP 106
63961: PUSH
63962: LD_VAR 0 5
63966: ARRAY
63967: PUSH
63968: LD_EXP 107
63972: GREATEREQUAL
63973: IFFALSE 63977
// exit ;
63975: GO 64177
// ComMoveXY ( unit , x , y ) ;
63977: LD_VAR 0 1
63981: PPUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: LD_VAR 0 3
63991: PPUSH
63992: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63996: LD_INT 35
63998: PPUSH
63999: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: LD_VAR 0 3
64017: PPUSH
64018: CALL 57042 0 3
64022: NOT
64023: PUSH
64024: LD_VAR 0 1
64028: PPUSH
64029: CALL_OW 314
64033: AND
64034: IFFALSE 64038
// exit ;
64036: GO 64177
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_VAR 0 3
64047: PPUSH
64048: CALL_OW 428
64052: PUSH
64053: LD_VAR 0 1
64057: EQUAL
64058: PUSH
64059: LD_VAR 0 1
64063: PPUSH
64064: CALL_OW 314
64068: NOT
64069: AND
64070: IFFALSE 63996
// PlaySoundXY ( x , y , PlantMine ) ;
64072: LD_VAR 0 2
64076: PPUSH
64077: LD_VAR 0 3
64081: PPUSH
64082: LD_STRING PlantMine
64084: PPUSH
64085: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64089: LD_VAR 0 2
64093: PPUSH
64094: LD_VAR 0 3
64098: PPUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 255
64108: PPUSH
64109: LD_INT 0
64111: PPUSH
64112: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64116: LD_ADDR_EXP 106
64120: PUSH
64121: LD_EXP 106
64125: PPUSH
64126: LD_VAR 0 5
64130: PUSH
64131: LD_EXP 106
64135: PUSH
64136: LD_VAR 0 5
64140: ARRAY
64141: PUSH
64142: LD_INT 1
64144: PLUS
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PPUSH
64150: LD_VAR 0 2
64154: PUSH
64155: LD_VAR 0 3
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PPUSH
64164: CALL 26485 0 3
64168: ST_TO_ADDR
// result := true ;
64169: LD_ADDR_VAR 0 4
64173: PUSH
64174: LD_INT 1
64176: ST_TO_ADDR
// end ;
64177: LD_VAR 0 4
64181: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64182: LD_INT 0
64184: PPUSH
64185: PPUSH
64186: PPUSH
// if not unit in minersList then
64187: LD_VAR 0 1
64191: PUSH
64192: LD_EXP 105
64196: IN
64197: NOT
64198: IFFALSE 64202
// exit ;
64200: GO 64594
// index := GetElementIndex ( minersList , unit ) ;
64202: LD_ADDR_VAR 0 6
64206: PUSH
64207: LD_EXP 105
64211: PPUSH
64212: LD_VAR 0 1
64216: PPUSH
64217: CALL 26270 0 2
64221: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64222: LD_ADDR_VAR 0 5
64226: PUSH
64227: DOUBLE
64228: LD_EXP 106
64232: PUSH
64233: LD_VAR 0 6
64237: ARRAY
64238: INC
64239: ST_TO_ADDR
64240: LD_INT 1
64242: PUSH
64243: FOR_DOWNTO
64244: IFFALSE 64405
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64246: LD_EXP 106
64250: PUSH
64251: LD_VAR 0 6
64255: ARRAY
64256: PUSH
64257: LD_VAR 0 5
64261: ARRAY
64262: PUSH
64263: LD_INT 1
64265: ARRAY
64266: PUSH
64267: LD_VAR 0 2
64271: EQUAL
64272: PUSH
64273: LD_EXP 106
64277: PUSH
64278: LD_VAR 0 6
64282: ARRAY
64283: PUSH
64284: LD_VAR 0 5
64288: ARRAY
64289: PUSH
64290: LD_INT 2
64292: ARRAY
64293: PUSH
64294: LD_VAR 0 3
64298: EQUAL
64299: AND
64300: IFFALSE 64403
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64302: LD_EXP 106
64306: PUSH
64307: LD_VAR 0 6
64311: ARRAY
64312: PUSH
64313: LD_VAR 0 5
64317: ARRAY
64318: PUSH
64319: LD_INT 1
64321: ARRAY
64322: PPUSH
64323: LD_EXP 106
64327: PUSH
64328: LD_VAR 0 6
64332: ARRAY
64333: PUSH
64334: LD_VAR 0 5
64338: ARRAY
64339: PUSH
64340: LD_INT 2
64342: ARRAY
64343: PPUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: CALL_OW 255
64353: PPUSH
64354: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64358: LD_ADDR_EXP 106
64362: PUSH
64363: LD_EXP 106
64367: PPUSH
64368: LD_VAR 0 6
64372: PPUSH
64373: LD_EXP 106
64377: PUSH
64378: LD_VAR 0 6
64382: ARRAY
64383: PPUSH
64384: LD_VAR 0 5
64388: PPUSH
64389: CALL_OW 3
64393: PPUSH
64394: CALL_OW 1
64398: ST_TO_ADDR
// exit ;
64399: POP
64400: POP
64401: GO 64594
// end ; end ;
64403: GO 64243
64405: POP
64406: POP
// for i := minerMinesList [ index ] downto 1 do
64407: LD_ADDR_VAR 0 5
64411: PUSH
64412: DOUBLE
64413: LD_EXP 106
64417: PUSH
64418: LD_VAR 0 6
64422: ARRAY
64423: INC
64424: ST_TO_ADDR
64425: LD_INT 1
64427: PUSH
64428: FOR_DOWNTO
64429: IFFALSE 64592
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64431: LD_EXP 106
64435: PUSH
64436: LD_VAR 0 6
64440: ARRAY
64441: PUSH
64442: LD_VAR 0 5
64446: ARRAY
64447: PUSH
64448: LD_INT 1
64450: ARRAY
64451: PPUSH
64452: LD_EXP 106
64456: PUSH
64457: LD_VAR 0 6
64461: ARRAY
64462: PUSH
64463: LD_VAR 0 5
64467: ARRAY
64468: PUSH
64469: LD_INT 2
64471: ARRAY
64472: PPUSH
64473: LD_VAR 0 2
64477: PPUSH
64478: LD_VAR 0 3
64482: PPUSH
64483: CALL_OW 298
64487: PUSH
64488: LD_INT 6
64490: LESS
64491: IFFALSE 64590
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64493: LD_EXP 106
64497: PUSH
64498: LD_VAR 0 6
64502: ARRAY
64503: PUSH
64504: LD_VAR 0 5
64508: ARRAY
64509: PUSH
64510: LD_INT 1
64512: ARRAY
64513: PPUSH
64514: LD_EXP 106
64518: PUSH
64519: LD_VAR 0 6
64523: ARRAY
64524: PUSH
64525: LD_VAR 0 5
64529: ARRAY
64530: PUSH
64531: LD_INT 2
64533: ARRAY
64534: PPUSH
64535: LD_VAR 0 1
64539: PPUSH
64540: CALL_OW 255
64544: PPUSH
64545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64549: LD_ADDR_EXP 106
64553: PUSH
64554: LD_EXP 106
64558: PPUSH
64559: LD_VAR 0 6
64563: PPUSH
64564: LD_EXP 106
64568: PUSH
64569: LD_VAR 0 6
64573: ARRAY
64574: PPUSH
64575: LD_VAR 0 5
64579: PPUSH
64580: CALL_OW 3
64584: PPUSH
64585: CALL_OW 1
64589: ST_TO_ADDR
// end ; end ;
64590: GO 64428
64592: POP
64593: POP
// end ;
64594: LD_VAR 0 4
64598: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64599: LD_INT 0
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
64606: PPUSH
64607: PPUSH
64608: PPUSH
64609: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64610: LD_VAR 0 1
64614: PPUSH
64615: CALL_OW 264
64619: PUSH
64620: LD_EXP 84
64624: EQUAL
64625: NOT
64626: PUSH
64627: LD_VAR 0 1
64631: PUSH
64632: LD_EXP 105
64636: IN
64637: NOT
64638: OR
64639: IFFALSE 64643
// exit ;
64641: GO 64965
// index := GetElementIndex ( minersList , unit ) ;
64643: LD_ADDR_VAR 0 6
64647: PUSH
64648: LD_EXP 105
64652: PPUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL 26270 0 2
64662: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64663: LD_ADDR_VAR 0 8
64667: PUSH
64668: LD_EXP 107
64672: PUSH
64673: LD_EXP 106
64677: PUSH
64678: LD_VAR 0 6
64682: ARRAY
64683: MINUS
64684: ST_TO_ADDR
// if not minesFreeAmount then
64685: LD_VAR 0 8
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 64965
// tmp := [ ] ;
64694: LD_ADDR_VAR 0 7
64698: PUSH
64699: EMPTY
64700: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64701: LD_ADDR_VAR 0 5
64705: PUSH
64706: DOUBLE
64707: LD_INT 1
64709: DEC
64710: ST_TO_ADDR
64711: LD_VAR 0 8
64715: PUSH
64716: FOR_TO
64717: IFFALSE 64912
// begin _d := rand ( 0 , 5 ) ;
64719: LD_ADDR_VAR 0 11
64723: PUSH
64724: LD_INT 0
64726: PPUSH
64727: LD_INT 5
64729: PPUSH
64730: CALL_OW 12
64734: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64735: LD_ADDR_VAR 0 12
64739: PUSH
64740: LD_INT 2
64742: PPUSH
64743: LD_INT 6
64745: PPUSH
64746: CALL_OW 12
64750: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64751: LD_ADDR_VAR 0 9
64755: PUSH
64756: LD_VAR 0 2
64760: PPUSH
64761: LD_VAR 0 11
64765: PPUSH
64766: LD_VAR 0 12
64770: PPUSH
64771: CALL_OW 272
64775: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64776: LD_ADDR_VAR 0 10
64780: PUSH
64781: LD_VAR 0 3
64785: PPUSH
64786: LD_VAR 0 11
64790: PPUSH
64791: LD_VAR 0 12
64795: PPUSH
64796: CALL_OW 273
64800: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64801: LD_VAR 0 9
64805: PPUSH
64806: LD_VAR 0 10
64810: PPUSH
64811: CALL_OW 488
64815: PUSH
64816: LD_VAR 0 9
64820: PUSH
64821: LD_VAR 0 10
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_VAR 0 7
64834: IN
64835: NOT
64836: AND
64837: PUSH
64838: LD_VAR 0 9
64842: PPUSH
64843: LD_VAR 0 10
64847: PPUSH
64848: CALL_OW 458
64852: NOT
64853: AND
64854: IFFALSE 64896
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64856: LD_ADDR_VAR 0 7
64860: PUSH
64861: LD_VAR 0 7
64865: PPUSH
64866: LD_VAR 0 7
64870: PUSH
64871: LD_INT 1
64873: PLUS
64874: PPUSH
64875: LD_VAR 0 9
64879: PUSH
64880: LD_VAR 0 10
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PPUSH
64889: CALL_OW 1
64893: ST_TO_ADDR
64894: GO 64910
// i := i - 1 ;
64896: LD_ADDR_VAR 0 5
64900: PUSH
64901: LD_VAR 0 5
64905: PUSH
64906: LD_INT 1
64908: MINUS
64909: ST_TO_ADDR
// end ;
64910: GO 64716
64912: POP
64913: POP
// for i in tmp do
64914: LD_ADDR_VAR 0 5
64918: PUSH
64919: LD_VAR 0 7
64923: PUSH
64924: FOR_IN
64925: IFFALSE 64963
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64927: LD_VAR 0 1
64931: PPUSH
64932: LD_VAR 0 5
64936: PUSH
64937: LD_INT 1
64939: ARRAY
64940: PPUSH
64941: LD_VAR 0 5
64945: PUSH
64946: LD_INT 2
64948: ARRAY
64949: PPUSH
64950: CALL 63905 0 3
64954: NOT
64955: IFFALSE 64961
// exit ;
64957: POP
64958: POP
64959: GO 64965
64961: GO 64924
64963: POP
64964: POP
// end ;
64965: LD_VAR 0 4
64969: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64970: LD_INT 0
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
64977: PPUSH
64978: PPUSH
// if not GetClass ( unit ) = class_sniper then
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 257
64988: PUSH
64989: LD_INT 5
64991: EQUAL
64992: NOT
64993: IFFALSE 64997
// exit ;
64995: GO 65385
// dist := 8 ;
64997: LD_ADDR_VAR 0 5
65001: PUSH
65002: LD_INT 8
65004: ST_TO_ADDR
// viewRange := 12 ;
65005: LD_ADDR_VAR 0 7
65009: PUSH
65010: LD_INT 12
65012: ST_TO_ADDR
// side := GetSide ( unit ) ;
65013: LD_ADDR_VAR 0 6
65017: PUSH
65018: LD_VAR 0 1
65022: PPUSH
65023: CALL_OW 255
65027: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65028: LD_INT 61
65030: PPUSH
65031: LD_VAR 0 6
65035: PPUSH
65036: CALL_OW 321
65040: PUSH
65041: LD_INT 2
65043: EQUAL
65044: IFFALSE 65054
// viewRange := 16 ;
65046: LD_ADDR_VAR 0 7
65050: PUSH
65051: LD_INT 16
65053: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65054: LD_VAR 0 1
65058: PPUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: LD_VAR 0 3
65068: PPUSH
65069: CALL_OW 297
65073: PUSH
65074: LD_VAR 0 5
65078: GREATER
65079: IFFALSE 65158
// begin ComMoveXY ( unit , x , y ) ;
65081: LD_VAR 0 1
65085: PPUSH
65086: LD_VAR 0 2
65090: PPUSH
65091: LD_VAR 0 3
65095: PPUSH
65096: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65100: LD_INT 35
65102: PPUSH
65103: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65107: LD_VAR 0 1
65111: PPUSH
65112: LD_VAR 0 2
65116: PPUSH
65117: LD_VAR 0 3
65121: PPUSH
65122: CALL 57042 0 3
65126: NOT
65127: IFFALSE 65131
// exit ;
65129: GO 65385
// until GetDistUnitXY ( unit , x , y ) < dist ;
65131: LD_VAR 0 1
65135: PPUSH
65136: LD_VAR 0 2
65140: PPUSH
65141: LD_VAR 0 3
65145: PPUSH
65146: CALL_OW 297
65150: PUSH
65151: LD_VAR 0 5
65155: LESS
65156: IFFALSE 65100
// end ; ComTurnXY ( unit , x , y ) ;
65158: LD_VAR 0 1
65162: PPUSH
65163: LD_VAR 0 2
65167: PPUSH
65168: LD_VAR 0 3
65172: PPUSH
65173: CALL_OW 118
// wait ( 5 ) ;
65177: LD_INT 5
65179: PPUSH
65180: CALL_OW 67
// _d := GetDir ( unit ) ;
65184: LD_ADDR_VAR 0 10
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 254
65198: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65199: LD_ADDR_VAR 0 8
65203: PUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 250
65213: PPUSH
65214: LD_VAR 0 10
65218: PPUSH
65219: LD_VAR 0 5
65223: PPUSH
65224: CALL_OW 272
65228: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65229: LD_ADDR_VAR 0 9
65233: PUSH
65234: LD_VAR 0 1
65238: PPUSH
65239: CALL_OW 251
65243: PPUSH
65244: LD_VAR 0 10
65248: PPUSH
65249: LD_VAR 0 5
65253: PPUSH
65254: CALL_OW 273
65258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65259: LD_VAR 0 8
65263: PPUSH
65264: LD_VAR 0 9
65268: PPUSH
65269: CALL_OW 488
65273: NOT
65274: IFFALSE 65278
// exit ;
65276: GO 65385
// ComAnimCustom ( unit , 1 ) ;
65278: LD_VAR 0 1
65282: PPUSH
65283: LD_INT 1
65285: PPUSH
65286: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65290: LD_VAR 0 8
65294: PPUSH
65295: LD_VAR 0 9
65299: PPUSH
65300: LD_VAR 0 6
65304: PPUSH
65305: LD_VAR 0 7
65309: PPUSH
65310: CALL_OW 330
// repeat wait ( 1 ) ;
65314: LD_INT 1
65316: PPUSH
65317: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65321: LD_VAR 0 1
65325: PPUSH
65326: CALL_OW 316
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 314
65340: OR
65341: PUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 302
65351: NOT
65352: OR
65353: PUSH
65354: LD_VAR 0 1
65358: PPUSH
65359: CALL_OW 301
65363: OR
65364: IFFALSE 65314
// RemoveSeeing ( _x , _y , side ) ;
65366: LD_VAR 0 8
65370: PPUSH
65371: LD_VAR 0 9
65375: PPUSH
65376: LD_VAR 0 6
65380: PPUSH
65381: CALL_OW 331
// end ; end_of_file
65385: LD_VAR 0 4
65389: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65390: LD_VAR 0 1
65394: PPUSH
65395: LD_VAR 0 2
65399: PPUSH
65400: LD_VAR 0 3
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: LD_VAR 0 5
65414: PPUSH
65415: LD_VAR 0 6
65419: PPUSH
65420: CALL 7714 0 6
// end ;
65424: PPOPN 6
65426: END
