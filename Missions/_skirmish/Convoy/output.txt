// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2186 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3121 0 0
// Action ;
  88: CALL 1261 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// player_commander := CreateHuman ;
 562: LD_ADDR_EXP 6
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 572: LD_ADDR_EXP 5
 576: PUSH
 577: LD_EXP 5
 581: PUSH
 582: LD_EXP 6
 586: ADD
 587: ST_TO_ADDR
// hc_importance := 0 ;
 588: LD_ADDR_OWVAR 32
 592: PUSH
 593: LD_INT 0
 595: ST_TO_ADDR
// case difficulty of 1 :
 596: LD_OWVAR 67
 600: PUSH
 601: LD_INT 1
 603: DOUBLE
 604: EQUAL
 605: IFTRUE 609
 607: GO 631
 609: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 610: LD_ADDR_VAR 0 4
 614: PUSH
 615: LD_INT 4
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
 629: GO 692
 631: LD_INT 2
 633: DOUBLE
 634: EQUAL
 635: IFTRUE 639
 637: GO 661
 639: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: LIST
 658: ST_TO_ADDR
 659: GO 692
 661: LD_INT 3
 663: DOUBLE
 664: EQUAL
 665: IFTRUE 669
 667: GO 691
 669: POP
// s = [ 3 , 1 , 1 ] ; end ;
 670: LD_ADDR_VAR 0 4
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
 689: GO 692
 691: POP
// ChangeSideFog ( 3 , 6 ) ;
 692: LD_INT 3
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 343
// for i = 1 to s [ 1 ] do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 4
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 767
// begin PrepareHuman ( false , 1 , sk ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_INT 1
 729: PPUSH
 730: LD_VAR 0 5
 734: PPUSH
 735: CALL_OW 380
// un := CreateHuman ;
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: CALL_OW 44
 748: ST_TO_ADDR
// player_force := player_force ^ un ;
 749: LD_ADDR_EXP 5
 753: PUSH
 754: LD_EXP 5
 758: PUSH
 759: LD_VAR 0 3
 763: ADD
 764: ST_TO_ADDR
// end ;
 765: GO 721
 767: POP
 768: POP
// SetClass ( un , class_bazooker ) ;
 769: LD_VAR 0 3
 773: PPUSH
 774: LD_INT 9
 776: PPUSH
 777: CALL_OW 336
// for i = 1 to s [ 2 ] do
 781: LD_ADDR_VAR 0 2
 785: PUSH
 786: DOUBLE
 787: LD_INT 1
 789: DEC
 790: ST_TO_ADDR
 791: LD_VAR 0 4
 795: PUSH
 796: LD_INT 2
 798: ARRAY
 799: PUSH
 800: FOR_TO
 801: IFFALSE 999
// begin if Prob ( 30 ) then
 803: LD_INT 30
 805: PPUSH
 806: CALL_OW 13
 810: IFFALSE 865
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_INT 3
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 22
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 43
 834: PUSH
 835: LD_INT 42
 837: PUSH
 838: LD_INT 44
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 3
 851: PPUSH
 852: CALL_OW 12
 856: ARRAY
 857: PPUSH
 858: CALL 7075 0 6
 862: ST_TO_ADDR
 863: GO 924
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 865: LD_ADDR_VAR 0 6
 869: PUSH
 870: LD_INT 3
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: LD_INT 22
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 1
 884: PPUSH
 885: LD_INT 43
 887: PUSH
 888: LD_INT 42
 890: PUSH
 891: LD_INT 44
 893: PUSH
 894: LD_INT 42
 896: PUSH
 897: LD_INT 44
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_INT 5
 912: PPUSH
 913: CALL_OW 12
 917: ARRAY
 918: PPUSH
 919: CALL 7075 0 6
 923: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 924: LD_INT 0
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_VAR 0 5
 934: PPUSH
 935: CALL_OW 380
// mech := CreateHuman ;
 939: LD_ADDR_VAR 0 8
 943: PUSH
 944: CALL_OW 44
 948: ST_TO_ADDR
// vehs := vehs ^ veh ;
 949: LD_ADDR_VAR 0 7
 953: PUSH
 954: LD_VAR 0 7
 958: PUSH
 959: LD_VAR 0 6
 963: ADD
 964: ST_TO_ADDR
// player_force := player_force ^ veh ;
 965: LD_ADDR_EXP 5
 969: PUSH
 970: LD_EXP 5
 974: PUSH
 975: LD_VAR 0 6
 979: ADD
 980: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
 981: LD_ADDR_VAR 0 9
 985: PUSH
 986: LD_VAR 0 9
 990: PUSH
 991: LD_VAR 0 8
 995: ADD
 996: ST_TO_ADDR
// end ;
 997: GO 800
 999: POP
1000: POP
// for i = 1 to s [ 3 ] do
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: DOUBLE
1007: LD_INT 1
1009: DEC
1010: ST_TO_ADDR
1011: LD_VAR 0 4
1015: PUSH
1016: LD_INT 3
1018: ARRAY
1019: PUSH
1020: FOR_TO
1021: IFFALSE 1066
// begin PrepareHuman ( false , 4 , sk ) ;
1023: LD_INT 0
1025: PPUSH
1026: LD_INT 4
1028: PPUSH
1029: LD_VAR 0 5
1033: PPUSH
1034: CALL_OW 380
// un := CreateHuman ;
1038: LD_ADDR_VAR 0 3
1042: PUSH
1043: CALL_OW 44
1047: ST_TO_ADDR
// player_force := player_force ^ un ;
1048: LD_ADDR_EXP 5
1052: PUSH
1053: LD_EXP 5
1057: PUSH
1058: LD_VAR 0 3
1062: ADD
1063: ST_TO_ADDR
// end ;
1064: GO 1020
1066: POP
1067: POP
// case road of 1 :
1068: LD_EXP 2
1072: PUSH
1073: LD_INT 1
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1100
1081: POP
// begin start_area := pos2 ;
1082: LD_ADDR_EXP 7
1086: PUSH
1087: LD_INT 4
1089: ST_TO_ADDR
// finish_area := pos3 ;
1090: LD_ADDR_EXP 8
1094: PUSH
1095: LD_INT 6
1097: ST_TO_ADDR
// end ; 2 :
1098: GO 1128
1100: LD_INT 2
1102: DOUBLE
1103: EQUAL
1104: IFTRUE 1108
1106: GO 1127
1108: POP
// begin start_area := pos1 ;
1109: LD_ADDR_EXP 7
1113: PUSH
1114: LD_INT 2
1116: ST_TO_ADDR
// finish_area := pos2 ;
1117: LD_ADDR_EXP 8
1121: PUSH
1122: LD_INT 4
1124: ST_TO_ADDR
// end ; end ;
1125: GO 1128
1127: POP
// for i = 1 to player_force do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: DOUBLE
1134: LD_INT 1
1136: DEC
1137: ST_TO_ADDR
1138: LD_EXP 5
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1202
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1146: LD_EXP 5
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 2
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_EXP 2
1171: ARRAY
1172: PPUSH
1173: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1177: LD_EXP 5
1181: PUSH
1182: LD_VAR 0 2
1186: ARRAY
1187: PPUSH
1188: LD_EXP 7
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// end ;
1200: GO 1143
1202: POP
1203: POP
// for i = 1 to s [ 2 ] do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_VAR 0 4
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1254
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1226: LD_VAR 0 9
1230: PUSH
1231: LD_VAR 0 2
1235: ARRAY
1236: PPUSH
1237: LD_VAR 0 7
1241: PUSH
1242: LD_VAR 0 2
1246: ARRAY
1247: PPUSH
1248: CALL_OW 52
1252: GO 1223
1254: POP
1255: POP
// end ;
1256: LD_VAR 0 1
1260: RET
// export function Action ; begin
1261: LD_INT 0
1263: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1264: LD_EXP 6
1268: PPUSH
1269: CALL_OW 87
// InGameOn ;
1273: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1277: LD_EXP 6
1281: PPUSH
1282: LD_STRING DS1
1284: PPUSH
1285: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1289: LD_EXP 6
1293: PPUSH
1294: LD_STRING DS2
1296: PPUSH
1297: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS3
1308: PPUSH
1309: CALL_OW 88
// InGameOff ;
1313: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1317: LD_STRING ObConv
1319: PPUSH
1320: CALL_OW 337
// if road = 1 then
1324: LD_EXP 2
1328: PUSH
1329: LD_INT 1
1331: EQUAL
1332: IFFALSE 1346
// SetAreaMapShow ( pos3 , 1 ) else
1334: LD_INT 6
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL_OW 424
1344: GO 1366
// if road = 2 then
1346: LD_EXP 2
1350: PUSH
1351: LD_INT 2
1353: EQUAL
1354: IFFALSE 1366
// SetAreaMapShow ( pos2 , 1 ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 1
1361: PPUSH
1362: CALL_OW 424
// end ;
1366: LD_VAR 0 1
1370: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1371: LD_EXP 8
1375: PPUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 51
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PPUSH
1386: CALL_OW 70
1390: PUSH
1391: LD_INT 0
1393: GREATER
1394: PUSH
1395: LD_INT 22
1397: PUSH
1398: LD_INT 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PUSH
1410: LD_INT 0
1412: EQUAL
1413: PUSH
1414: LD_EXP 1
1418: NOT
1419: AND
1420: OR
1421: IFFALSE 1555
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1429: LD_EXP 6
1433: PPUSH
1434: LD_STRING DS-6
1436: PPUSH
1437: CALL_OW 88
// Wait ( 0 0$01 ) ;
1441: LD_INT 35
1443: PPUSH
1444: CALL_OW 67
// AddMedal ( med , 1 ) ;
1448: LD_STRING med
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1458: LD_INT 22
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_INT 0
1475: EQUAL
1476: IFFALSE 1490
// AddMedal ( convoy_clear , 1 ) else
1478: LD_STRING convoy_clear
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL_OW 101
1488: GO 1501
// AddMedal ( convoy_clear , - 1 ) ;
1490: LD_STRING convoy_clear
1492: PPUSH
1493: LD_INT 1
1495: NEG
1496: PPUSH
1497: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1501: LD_INT 22
1503: PUSH
1504: LD_INT 6
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: PUSH
1516: LD_INT 2
1518: GREATEREQUAL
1519: IFFALSE 1533
// AddMedal ( convoy_cargos , 1 ) else
1521: LD_STRING convoy_cargos
1523: PPUSH
1524: LD_INT 1
1526: PPUSH
1527: CALL_OW 101
1531: GO 1544
// AddMedal ( convoy_cargos , - 1 ) ;
1533: LD_STRING convoy_cargos
1535: PPUSH
1536: LD_INT 1
1538: NEG
1539: PPUSH
1540: CALL_OW 101
// GiveMedals ( MAIN ) ;
1544: LD_STRING MAIN
1546: PPUSH
1547: CALL_OW 102
// YouWin ;
1551: CALL_OW 103
// end ;
1555: PPOPN 1
1557: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 255
1567: PUSH
1568: LD_INT 3
1570: EQUAL
1571: PUSH
1572: LD_VAR 0 1
1576: PPUSH
1577: CALL_OW 247
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_INT 22
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 26
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: GREATER
1619: AND
1620: PUSH
1621: LD_EXP 9
1625: NOT
1626: AND
1627: IFFALSE 1683
// begin hurt := true ;
1629: LD_ADDR_EXP 9
1633: PUSH
1634: LD_INT 1
1636: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1637: LD_INT 22
1639: PUSH
1640: LD_INT 3
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 26
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: DIFF
1671: PUSH
1672: LD_INT 1
1674: ARRAY
1675: PPUSH
1676: LD_STRING DM4
1678: PPUSH
1679: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1683: LD_VAR 0 1
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 21
1700: PUSH
1701: LD_INT 2
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: IN
1717: IFFALSE 1842
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1719: LD_INT 280
1721: PPUSH
1722: LD_INT 490
1724: PPUSH
1725: CALL_OW 12
1729: PPUSH
1730: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 250
1743: PPUSH
1744: LD_VAR 0 1
1748: PPUSH
1749: CALL_OW 251
1753: PPUSH
1754: LD_INT 10
1756: PPUSH
1757: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1761: LD_VAR 0 1
1765: PPUSH
1766: CALL_OW 250
1770: PPUSH
1771: LD_VAR 0 1
1775: PPUSH
1776: CALL_OW 251
1780: PPUSH
1781: LD_INT 10
1783: PPUSH
1784: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 250
1797: PPUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 251
1807: PPUSH
1808: LD_INT 10
1810: PPUSH
1811: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 250
1824: PPUSH
1825: LD_VAR 0 1
1829: PPUSH
1830: CALL_OW 251
1834: PPUSH
1835: LD_INT 5
1837: PPUSH
1838: CALL_OW 453
// end ; end ;
1842: PPOPN 1
1844: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1845: LD_INT 3
1847: PPUSH
1848: LD_INT 31
1850: PUSH
1851: LD_INT 11
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: LD_INT 1
1865: ARRAY
1866: PPUSH
1867: CALL_OW 292
1871: IFFALSE 1922
1873: GO 1875
1875: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1876: LD_INT 22
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 26
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PPUSH
1900: CALL_OW 69
1904: PUSH
1905: LD_EXP 6
1909: DIFF
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PPUSH
1915: LD_STRING DM2
1917: PPUSH
1918: CALL_OW 88
// end ;
1922: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1923: LD_INT 3
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 2
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 25
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PPUSH
1950: CALL_OW 69
1954: PPUSH
1955: LD_EXP 6
1959: PPUSH
1960: CALL_OW 74
1964: PPUSH
1965: CALL_OW 292
1969: IFFALSE 2020
1971: GO 1973
1973: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
1974: LD_INT 22
1976: PUSH
1977: LD_INT 3
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 26
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PPUSH
1998: CALL_OW 69
2002: PUSH
2003: LD_EXP 6
2007: DIFF
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: LD_STRING DM3
2015: PPUSH
2016: CALL_OW 88
// end ;
2020: END
// every 0 0$01 trigger mines_trigger do
2021: LD_EXP 10
2025: IFFALSE 2096
2027: GO 2029
2029: DISABLE
// begin DialogueOn ;
2030: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2034: LD_INT 22
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 26
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PPUSH
2058: CALL_OW 69
2062: PUSH
2063: LD_EXP 6
2067: DIFF
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: LD_STRING DM1
2075: PPUSH
2076: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2080: LD_EXP 6
2084: PPUSH
2085: LD_STRING DS4
2087: PPUSH
2088: CALL_OW 88
// DialogueOff ;
2092: CALL_OW 7
// end ;
2096: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2097: LD_INT 34
2099: PUSH
2100: LD_INT 51
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PPUSH
2107: CALL_OW 69
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
2117: GO 2119
2119: DISABLE
// begin Say ( player_commander , DS5 ) ;
2120: LD_EXP 6
2124: PPUSH
2125: LD_STRING DS5
2127: PPUSH
2128: CALL_OW 88
// end ;
2132: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2133: LD_INT 34
2135: PUSH
2136: LD_INT 51
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 0
2150: EQUAL
2151: IFFALSE 2163
2153: GO 2155
2155: DISABLE
// begin YouLost ( qconvl ) ;
2156: LD_STRING qconvl
2158: PPUSH
2159: CALL_OW 104
// end ;
2163: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2164: LD_EXP 6
2168: PPUSH
2169: CALL_OW 301
2173: IFFALSE 2185
2175: GO 2177
2177: DISABLE
// begin YouLost ( qcom ) ;
2178: LD_STRING qcom
2180: PPUSH
2181: CALL_OW 104
// end ; end_of_file
2185: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2186: LD_INT 0
2188: PPUSH
2189: PPUSH
2190: PPUSH
2191: PPUSH
2192: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2193: LD_INT 3
2195: PPUSH
2196: LD_INT 6
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: CALL_OW 80
// case road of 1 :
2209: LD_EXP 2
2213: PUSH
2214: LD_INT 1
2216: DOUBLE
2217: EQUAL
2218: IFTRUE 2222
2220: GO 2248
2222: POP
// begin area := pos2 ;
2223: LD_ADDR_VAR 0 3
2227: PUSH
2228: LD_INT 4
2230: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2231: LD_ADDR_VAR 0 5
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 46
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// end ; 2 :
2246: GO 2283
2248: LD_INT 2
2250: DOUBLE
2251: EQUAL
2252: IFTRUE 2256
2254: GO 2282
2256: POP
// begin area := pos1 ;
2257: LD_ADDR_VAR 0 3
2261: PUSH
2262: LD_INT 2
2264: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_INT 18
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: ST_TO_ADDR
// end ; end ;
2280: GO 2283
2282: POP
// if road = 1 then
2283: LD_EXP 2
2287: PUSH
2288: LD_INT 1
2290: EQUAL
2291: IFFALSE 2404
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2293: LD_ADDR_EXP 13
2297: PUSH
2298: LD_INT 36
2300: PUSH
2301: LD_INT 43
2303: PUSH
2304: LD_INT 40
2306: PUSH
2307: LD_INT 29
2309: PUSH
2310: LD_INT 56
2312: PUSH
2313: LD_INT 37
2315: PUSH
2316: LD_INT 70
2318: PUSH
2319: LD_INT 32
2321: PUSH
2322: LD_INT 63
2324: PUSH
2325: LD_INT 6
2327: PUSH
2328: LD_INT 84
2330: PUSH
2331: LD_INT 8
2333: PUSH
2334: LD_INT 90
2336: PUSH
2337: LD_INT 24
2339: PUSH
2340: LD_INT 96
2342: PUSH
2343: LD_INT 47
2345: PUSH
2346: LD_INT 110
2348: PUSH
2349: LD_INT 73
2351: PUSH
2352: LD_INT 143
2354: PUSH
2355: LD_INT 102
2357: PUSH
2358: LD_INT 121
2360: PUSH
2361: LD_INT 93
2363: PUSH
2364: LD_INT 98
2366: PUSH
2367: LD_INT 100
2369: PUSH
2370: LD_INT 62
2372: PUSH
2373: LD_INT 114
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// if road = 2 then
2404: LD_EXP 2
2408: PUSH
2409: LD_INT 2
2411: EQUAL
2412: IFFALSE 2549
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2414: LD_ADDR_EXP 13
2418: PUSH
2419: LD_INT 39
2421: PUSH
2422: LD_INT 18
2424: PUSH
2425: LD_INT 61
2427: PUSH
2428: LD_INT 36
2430: PUSH
2431: LD_INT 62
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 75
2439: PUSH
2440: LD_INT 5
2442: PUSH
2443: LD_INT 97
2445: PUSH
2446: LD_INT 17
2448: PUSH
2449: LD_INT 98
2451: PUSH
2452: LD_INT 30
2454: PUSH
2455: LD_INT 95
2457: PUSH
2458: LD_INT 49
2460: PUSH
2461: LD_INT 110
2463: PUSH
2464: LD_INT 71
2466: PUSH
2467: LD_INT 146
2469: PUSH
2470: LD_INT 112
2472: PUSH
2473: LD_INT 100
2475: PUSH
2476: LD_INT 81
2478: PUSH
2479: LD_INT 99
2481: PUSH
2482: LD_INT 115
2484: PUSH
2485: LD_INT 77
2487: PUSH
2488: LD_INT 105
2490: PUSH
2491: LD_INT 65
2493: PUSH
2494: LD_INT 75
2496: PUSH
2497: LD_INT 45
2499: PUSH
2500: LD_INT 46
2502: PUSH
2503: LD_INT 26
2505: PUSH
2506: LD_INT 47
2508: PUSH
2509: LD_INT 29
2511: PUSH
2512: LD_INT 54
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// conv_am := 1 ;
2549: LD_ADDR_EXP 12
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// conv := 0 ;
2557: LD_ADDR_EXP 11
2561: PUSH
2562: LD_INT 0
2564: ST_TO_ADDR
// uc_side := 6 ;
2565: LD_ADDR_OWVAR 20
2569: PUSH
2570: LD_INT 6
2572: ST_TO_ADDR
// uc_nation := 3 ;
2573: LD_ADDR_OWVAR 21
2577: PUSH
2578: LD_INT 3
2580: ST_TO_ADDR
// for i = 1 to 2 do
2581: LD_ADDR_VAR 0 4
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 2
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2700
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2597: LD_ADDR_VAR 0 2
2601: PUSH
2602: LD_INT 6
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_INT 22
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: LD_INT 51
2619: PPUSH
2620: CALL 7075 0 6
2624: ST_TO_ADDR
// cargos := cargos ^ un ;
2625: LD_ADDR_EXP 4
2629: PUSH
2630: LD_EXP 4
2634: PUSH
2635: LD_VAR 0 2
2639: ADD
2640: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_EXP 2
2660: ARRAY
2661: PPUSH
2662: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: LD_VAR 0 3
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2683: LD_VAR 0 2
2687: PPUSH
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 100
2693: PPUSH
2694: CALL_OW 290
// end ;
2698: GO 2594
2700: POP
2701: POP
// end ;
2702: LD_VAR 0 1
2706: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2707: LD_EXP 4
2711: IFFALSE 2823
2713: GO 2715
2715: DISABLE
// begin enable ;
2716: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2717: LD_EXP 4
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PPUSH
2726: CALL_OW 306
2730: PUSH
2731: LD_EXP 4
2735: PUSH
2736: LD_INT 2
2738: ARRAY
2739: PPUSH
2740: CALL_OW 306
2744: OR
2745: IFFALSE 2823
// begin if debug then
2747: LD_EXP 1
2751: IFFALSE 2763
// display_strings := conv ;
2753: LD_ADDR_OWVAR 47
2757: PUSH
2758: LD_EXP 11
2762: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2763: LD_STRING QConv
2765: PPUSH
2766: CALL_OW 97
2770: PUSH
2771: LD_INT 1
2773: DOUBLE
2774: EQUAL
2775: IFTRUE 2779
2777: GO 2790
2779: POP
// conv := 0 ; 2 :
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 0
2787: ST_TO_ADDR
2788: GO 2810
2790: LD_INT 2
2792: DOUBLE
2793: EQUAL
2794: IFTRUE 2798
2796: GO 2809
2798: POP
// conv := 1 ; end ;
2799: LD_ADDR_EXP 11
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
2807: GO 2810
2809: POP
// disable ( 01 ) ;
2810: LD_INT 1
2812: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2813: LD_INT 175
2815: PPUSH
2816: CALL_OW 67
// enable ( 01 ) ;
2820: LD_INT 1
2822: ENABLE_MARKED
// end ; end ;
2823: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2824: LD_EXP 11
2828: PUSH
2829: LD_INT 1
2831: EQUAL
2832: IFFALSE 3044
2834: GO 2836
2836: DISABLE
2837: LD_INT 0
2839: PPUSH
2840: PPUSH
2841: PPUSH
// begin enable ;
2842: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2843: LD_ADDR_VAR 0 3
2847: PUSH
2848: LD_INT 34
2850: PUSH
2851: LD_INT 51
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PPUSH
2858: CALL_OW 69
2862: ST_TO_ADDR
// if debug then
2863: LD_EXP 1
2867: IFFALSE 2904
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2869: LD_ADDR_OWVAR 47
2873: PUSH
2874: LD_EXP 13
2878: PUSH
2879: LD_EXP 12
2883: ARRAY
2884: PUSH
2885: LD_EXP 13
2889: PUSH
2890: LD_EXP 12
2894: PUSH
2895: LD_INT 1
2897: PLUS
2898: ARRAY
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// for i = 1 to car do
2904: LD_ADDR_VAR 0 1
2908: PUSH
2909: DOUBLE
2910: LD_INT 1
2912: DEC
2913: ST_TO_ADDR
2914: LD_VAR 0 3
2918: PUSH
2919: FOR_TO
2920: IFFALSE 3042
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2922: LD_VAR 0 3
2926: PUSH
2927: LD_VAR 0 1
2931: ARRAY
2932: PPUSH
2933: LD_EXP 13
2937: PUSH
2938: LD_EXP 12
2942: ARRAY
2943: PPUSH
2944: LD_EXP 13
2948: PUSH
2949: LD_EXP 12
2953: PUSH
2954: LD_INT 1
2956: PLUS
2957: ARRAY
2958: PPUSH
2959: CALL 7153 0 3
2963: IFFALSE 2981
// conv_am := conv_am + 2 else
2965: LD_ADDR_EXP 12
2969: PUSH
2970: LD_EXP 12
2974: PUSH
2975: LD_INT 2
2977: PLUS
2978: ST_TO_ADDR
2979: GO 3040
// if not HasTask ( car [ i ] ) then
2981: LD_VAR 0 3
2985: PUSH
2986: LD_VAR 0 1
2990: ARRAY
2991: PPUSH
2992: CALL_OW 314
2996: NOT
2997: IFFALSE 3040
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2999: LD_VAR 0 3
3003: PUSH
3004: LD_VAR 0 1
3008: ARRAY
3009: PPUSH
3010: LD_EXP 13
3014: PUSH
3015: LD_EXP 12
3019: ARRAY
3020: PPUSH
3021: LD_EXP 13
3025: PUSH
3026: LD_EXP 12
3030: PUSH
3031: LD_INT 1
3033: PLUS
3034: ARRAY
3035: PPUSH
3036: CALL_OW 111
// end ;
3040: GO 2919
3042: POP
3043: POP
// end ;
3044: PPOPN 3
3046: END
// every 0 0$01 trigger conv = 0 do var i ;
3047: LD_EXP 11
3051: PUSH
3052: LD_INT 0
3054: EQUAL
3055: IFFALSE 3118
3057: GO 3059
3059: DISABLE
3060: LD_INT 0
3062: PPUSH
// begin enable ;
3063: ENABLE
// for i = 1 to cargos do
3064: LD_ADDR_VAR 0 1
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_EXP 4
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3116
// if HasTask ( cargos [ i ] ) then
3082: LD_EXP 4
3086: PUSH
3087: LD_VAR 0 1
3091: ARRAY
3092: PPUSH
3093: CALL_OW 314
3097: IFFALSE 3114
// ComStop ( cargos [ i ] ) ;
3099: LD_EXP 4
3103: PUSH
3104: LD_VAR 0 1
3108: ARRAY
3109: PPUSH
3110: CALL_OW 141
3114: GO 3079
3116: POP
3117: POP
// end ; end_of_file
3118: PPOPN 1
3120: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
3138: PPUSH
// uc_side := 2 ;
3139: LD_ADDR_OWVAR 20
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// uc_nation := 2 ;
3147: LD_ADDR_OWVAR 21
3151: PUSH
3152: LD_INT 2
3154: ST_TO_ADDR
// if road = 1 then
3155: LD_EXP 2
3159: PUSH
3160: LD_INT 1
3162: EQUAL
3163: IFFALSE 3925
// begin case Difficulty of 1 :
3165: LD_OWVAR 67
3169: PUSH
3170: LD_INT 1
3172: DOUBLE
3173: EQUAL
3174: IFTRUE 3178
3176: GO 3485
3178: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_INT 56
3186: PUSH
3187: LD_INT 37
3189: PUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 81
3195: PUSH
3196: LD_INT 6
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: LD_INT 90
3204: PUSH
3205: LD_INT 25
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: LD_INT 105
3213: PUSH
3214: LD_INT 68
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 96
3222: PUSH
3223: LD_INT 82
3225: PUSH
3226: LD_INT 4
3228: PUSH
3229: LD_INT 80
3231: PUSH
3232: LD_INT 109
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: LD_INT 9
3268: PUSH
3269: LD_INT 10
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3281: LD_ADDR_VAR 0 4
3285: PUSH
3286: LD_INT 13
3288: PUSH
3289: LD_INT 14
3291: PUSH
3292: LD_INT 15
3294: PUSH
3295: LD_INT 16
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3304: LD_ADDR_VAR 0 15
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 0
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3327: LD_ADDR_VAR 0 8
3331: PUSH
3332: LD_INT 68
3334: PUSH
3335: LD_INT 5
3337: PUSH
3338: LD_INT 96
3340: PUSH
3341: LD_INT 53
3343: PUSH
3344: LD_INT 142
3346: PUSH
3347: LD_INT 98
3349: PUSH
3350: LD_INT 96
3352: PUSH
3353: LD_INT 82
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3366: LD_ADDR_VAR 0 6
3370: PUSH
3371: LD_INT 17
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3381: LD_ADDR_VAR 0 5
3385: PUSH
3386: LD_INT 104
3388: PUSH
3389: LD_INT 21
3391: PUSH
3392: LD_INT 4
3394: PUSH
3395: LD_INT 100
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3412: LD_ADDR_VAR 0 7
3416: PUSH
3417: LD_INT 38
3419: PUSH
3420: LD_INT 28
3422: PUSH
3423: LD_INT 41
3425: PUSH
3426: LD_INT 29
3428: PUSH
3429: LD_INT 62
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: LD_INT 65
3437: PUSH
3438: LD_INT 7
3440: PUSH
3441: LD_INT 95
3443: PUSH
3444: LD_INT 55
3446: PUSH
3447: LD_INT 98
3449: PUSH
3450: LD_INT 54
3452: PUSH
3453: LD_INT 96
3455: PUSH
3456: LD_INT 111
3458: PUSH
3459: LD_INT 99
3461: PUSH
3462: LD_INT 112
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: ST_TO_ADDR
// end ; 2 , 3 :
3483: GO 3923
3485: LD_INT 2
3487: DOUBLE
3488: EQUAL
3489: IFTRUE 3499
3491: LD_INT 3
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3922
3499: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: LD_INT 56
3507: PUSH
3508: LD_INT 37
3510: PUSH
3511: LD_INT 2
3513: PUSH
3514: LD_INT 81
3516: PUSH
3517: LD_INT 6
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 90
3525: PUSH
3526: LD_INT 25
3528: PUSH
3529: LD_INT 3
3531: PUSH
3532: LD_INT 105
3534: PUSH
3535: LD_INT 68
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 96
3543: PUSH
3544: LD_INT 82
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: LD_INT 80
3552: PUSH
3553: LD_INT 109
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3579: LD_ADDR_VAR 0 3
3583: PUSH
3584: LD_INT 7
3586: PUSH
3587: LD_INT 8
3589: PUSH
3590: LD_INT 9
3592: PUSH
3593: LD_INT 10
3595: PUSH
3596: LD_INT 11
3598: PUSH
3599: LD_INT 12
3601: PUSH
3602: LD_INT 42
3604: PUSH
3605: LD_INT 43
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3618: LD_ADDR_VAR 0 4
3622: PUSH
3623: LD_INT 13
3625: PUSH
3626: LD_INT 14
3628: PUSH
3629: LD_INT 15
3631: PUSH
3632: LD_INT 16
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3641: LD_ADDR_VAR 0 15
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3664: LD_ADDR_VAR 0 8
3668: PUSH
3669: LD_INT 68
3671: PUSH
3672: LD_INT 5
3674: PUSH
3675: LD_INT 96
3677: PUSH
3678: LD_INT 53
3680: PUSH
3681: LD_INT 142
3683: PUSH
3684: LD_INT 98
3686: PUSH
3687: LD_INT 96
3689: PUSH
3690: LD_INT 82
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3703: LD_ADDR_VAR 0 6
3707: PUSH
3708: LD_INT 17
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3718: LD_ADDR_VAR 0 5
3722: PUSH
3723: LD_INT 104
3725: PUSH
3726: LD_INT 21
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 100
3734: PUSH
3735: LD_INT 21
3737: PUSH
3738: LD_INT 4
3740: PUSH
3741: LD_INT 91
3743: PUSH
3744: LD_INT 28
3746: PUSH
3747: LD_INT 0
3749: PUSH
3750: LD_INT 92
3752: PUSH
3753: LD_INT 31
3755: PUSH
3756: LD_INT 1
3758: PUSH
3759: LD_INT 71
3761: PUSH
3762: LD_INT 106
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 71
3770: PUSH
3771: LD_INT 103
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 66
3779: PUSH
3780: LD_INT 102
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3809: LD_ADDR_VAR 0 7
3813: PUSH
3814: LD_INT 38
3816: PUSH
3817: LD_INT 28
3819: PUSH
3820: LD_INT 41
3822: PUSH
3823: LD_INT 29
3825: PUSH
3826: LD_INT 62
3828: PUSH
3829: LD_INT 5
3831: PUSH
3832: LD_INT 65
3834: PUSH
3835: LD_INT 7
3837: PUSH
3838: LD_INT 95
3840: PUSH
3841: LD_INT 55
3843: PUSH
3844: LD_INT 98
3846: PUSH
3847: LD_INT 54
3849: PUSH
3850: LD_INT 96
3852: PUSH
3853: LD_INT 111
3855: PUSH
3856: LD_INT 99
3858: PUSH
3859: LD_INT 112
3861: PUSH
3862: LD_INT 86
3864: PUSH
3865: LD_INT 17
3867: PUSH
3868: LD_INT 89
3870: PUSH
3871: LD_INT 17
3873: PUSH
3874: LD_INT 136
3876: PUSH
3877: LD_INT 91
3879: PUSH
3880: LD_INT 140
3882: PUSH
3883: LD_INT 91
3885: PUSH
3886: LD_INT 102
3888: PUSH
3889: LD_INT 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: ST_TO_ADDR
// end ; end ;
3920: GO 3923
3922: POP
// end else
3923: GO 4865
// if road = 2 then
3925: LD_EXP 2
3929: PUSH
3930: LD_INT 2
3932: EQUAL
3933: IFFALSE 4865
// begin case Difficulty of 1 :
3935: LD_OWVAR 67
3939: PUSH
3940: LD_INT 1
3942: DOUBLE
3943: EQUAL
3944: IFTRUE 3948
3946: GO 4359
3948: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: LD_INT 44
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 62
3965: PUSH
3966: LD_INT 8
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 68
3977: PUSH
3978: LD_INT 2
3980: PUSH
3981: LD_INT 143
3983: PUSH
3984: LD_INT 96
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 90
3992: PUSH
3993: LD_INT 115
3995: PUSH
3996: LD_INT 4
3998: PUSH
3999: LD_INT 56
4001: PUSH
4002: LD_INT 59
4004: PUSH
4005: LD_INT 5
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: LD_INT 45
4035: PUSH
4036: LD_INT 46
4038: PUSH
4039: LD_INT 47
4041: PUSH
4042: LD_INT 48
4044: PUSH
4045: LD_INT 49
4047: PUSH
4048: LD_INT 50
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 4
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4090: LD_ADDR_VAR 0 15
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 0
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: LD_INT 0
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4121: LD_ADDR_VAR 0 8
4125: PUSH
4126: LD_INT 44
4128: PUSH
4129: LD_INT 22
4131: PUSH
4132: LD_INT 62
4134: PUSH
4135: LD_INT 8
4137: PUSH
4138: LD_INT 106
4140: PUSH
4141: LD_INT 68
4143: PUSH
4144: LD_INT 143
4146: PUSH
4147: LD_INT 96
4149: PUSH
4150: LD_INT 90
4152: PUSH
4153: LD_INT 115
4155: PUSH
4156: LD_INT 56
4158: PUSH
4159: LD_INT 59
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4176: LD_ADDR_VAR 0 6
4180: PUSH
4181: LD_INT 17
4183: PUSH
4184: LD_INT 3
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4191: LD_ADDR_VAR 0 5
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: LD_INT 29
4201: PUSH
4202: LD_INT 5
4204: PUSH
4205: LD_INT 55
4207: PUSH
4208: LD_INT 33
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4222: LD_ADDR_VAR 0 7
4226: PUSH
4227: LD_INT 31
4229: PUSH
4230: LD_INT 13
4232: PUSH
4233: LD_INT 33
4235: PUSH
4236: LD_INT 13
4238: PUSH
4239: LD_INT 35
4241: PUSH
4242: LD_INT 13
4244: PUSH
4245: LD_INT 98
4247: PUSH
4248: LD_INT 20
4250: PUSH
4251: LD_INT 102
4253: PUSH
4254: LD_INT 25
4256: PUSH
4257: LD_INT 97
4259: PUSH
4260: LD_INT 33
4262: PUSH
4263: LD_INT 101
4265: PUSH
4266: LD_INT 54
4268: PUSH
4269: LD_INT 98
4271: PUSH
4272: LD_INT 54
4274: PUSH
4275: LD_INT 96
4277: PUSH
4278: LD_INT 55
4280: PUSH
4281: LD_INT 94
4283: PUSH
4284: LD_INT 56
4286: PUSH
4287: LD_INT 145
4289: PUSH
4290: LD_INT 102
4292: PUSH
4293: LD_INT 146
4295: PUSH
4296: LD_INT 100
4298: PUSH
4299: LD_INT 97
4301: PUSH
4302: LD_INT 114
4304: PUSH
4305: LD_INT 99
4307: PUSH
4308: LD_INT 117
4310: PUSH
4311: LD_INT 54
4313: PUSH
4314: LD_INT 58
4316: PUSH
4317: LD_INT 55
4319: PUSH
4320: LD_INT 56
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
// end ; 2 , 3 :
4357: GO 4865
4359: LD_INT 2
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4373
4365: LD_INT 3
4367: DOUBLE
4368: EQUAL
4369: IFTRUE 4373
4371: GO 4864
4373: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4374: LD_ADDR_VAR 0 2
4378: PUSH
4379: LD_INT 44
4381: PUSH
4382: LD_INT 22
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 62
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: LD_INT 0
4396: PUSH
4397: LD_INT 106
4399: PUSH
4400: LD_INT 68
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 96
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 90
4417: PUSH
4418: LD_INT 115
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: LD_INT 56
4426: PUSH
4427: LD_INT 59
4429: PUSH
4430: LD_INT 5
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 45
4460: PUSH
4461: LD_INT 46
4463: PUSH
4464: LD_INT 47
4466: PUSH
4467: LD_INT 48
4469: PUSH
4470: LD_INT 49
4472: PUSH
4473: LD_INT 50
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4515: LD_ADDR_VAR 0 15
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 5
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4546: LD_ADDR_VAR 0 8
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 27
4556: PUSH
4557: LD_INT 44
4559: PUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 62
4565: PUSH
4566: LD_INT 8
4568: PUSH
4569: LD_INT 106
4571: PUSH
4572: LD_INT 68
4574: PUSH
4575: LD_INT 143
4577: PUSH
4578: LD_INT 96
4580: PUSH
4581: LD_INT 90
4583: PUSH
4584: LD_INT 115
4586: PUSH
4587: LD_INT 56
4589: PUSH
4590: LD_INT 59
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4609: LD_ADDR_VAR 0 6
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4624: LD_ADDR_VAR 0 5
4628: PUSH
4629: LD_INT 51
4631: PUSH
4632: LD_INT 29
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 55
4640: PUSH
4641: LD_INT 33
4643: PUSH
4644: LD_INT 5
4646: PUSH
4647: LD_INT 97
4649: PUSH
4650: LD_INT 37
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 112
4658: PUSH
4659: LD_INT 72
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 120
4667: PUSH
4668: LD_INT 93
4670: PUSH
4671: LD_INT 2
4673: PUSH
4674: LD_INT 25
4676: PUSH
4677: LD_INT 45
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: LD_INT 27
4685: PUSH
4686: LD_INT 48
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: LD_INT 28
4694: PUSH
4695: LD_INT 51
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4727: LD_ADDR_VAR 0 7
4731: PUSH
4732: LD_INT 31
4734: PUSH
4735: LD_INT 13
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 13
4743: PUSH
4744: LD_INT 35
4746: PUSH
4747: LD_INT 13
4749: PUSH
4750: LD_INT 98
4752: PUSH
4753: LD_INT 20
4755: PUSH
4756: LD_INT 102
4758: PUSH
4759: LD_INT 25
4761: PUSH
4762: LD_INT 97
4764: PUSH
4765: LD_INT 33
4767: PUSH
4768: LD_INT 101
4770: PUSH
4771: LD_INT 54
4773: PUSH
4774: LD_INT 98
4776: PUSH
4777: LD_INT 54
4779: PUSH
4780: LD_INT 96
4782: PUSH
4783: LD_INT 55
4785: PUSH
4786: LD_INT 94
4788: PUSH
4789: LD_INT 56
4791: PUSH
4792: LD_INT 145
4794: PUSH
4795: LD_INT 102
4797: PUSH
4798: LD_INT 146
4800: PUSH
4801: LD_INT 100
4803: PUSH
4804: LD_INT 97
4806: PUSH
4807: LD_INT 114
4809: PUSH
4810: LD_INT 99
4812: PUSH
4813: LD_INT 117
4815: PUSH
4816: LD_INT 54
4818: PUSH
4819: LD_INT 58
4821: PUSH
4822: LD_INT 55
4824: PUSH
4825: LD_INT 56
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: ST_TO_ADDR
// end ; end ;
4862: GO 4865
4864: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4865: LD_ADDR_EXP 3
4869: PUSH
4870: LD_INT 4
4872: PUSH
4873: LD_INT 5
4875: PUSH
4876: LD_INT 6
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: PUSH
4884: LD_OWVAR 67
4888: ARRAY
4889: ST_TO_ADDR
// if Difficulty > 1 then
4890: LD_OWVAR 67
4894: PUSH
4895: LD_INT 1
4897: GREATER
4898: IFFALSE 4913
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4900: LD_INT 5
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: LD_INT 2
4908: PPUSH
4909: CALL_OW 322
// if Difficulty > 1 then
4913: LD_OWVAR 67
4917: PUSH
4918: LD_INT 1
4920: GREATER
4921: IFFALSE 4936
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4923: LD_INT 52
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: LD_INT 2
4931: PPUSH
4932: CALL_OW 322
// miners := [ ] ;
4936: LD_ADDR_EXP 15
4940: PUSH
4941: EMPTY
4942: ST_TO_ADDR
// hovers := [ ] ;
4943: LD_ADDR_EXP 16
4947: PUSH
4948: EMPTY
4949: ST_TO_ADDR
// hovers_driver := [ ] ;
4950: LD_ADDR_EXP 17
4954: PUSH
4955: EMPTY
4956: ST_TO_ADDR
// tanks := [ ] ;
4957: LD_ADDR_EXP 18
4961: PUSH
4962: EMPTY
4963: ST_TO_ADDR
// p := 1 ;
4964: LD_ADDR_VAR 0 10
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4972: LD_ADDR_OWVAR 43
4976: PUSH
4977: LD_INT 4
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: LD_INT 6
4985: PUSH
4986: LD_INT 7
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_OWVAR 67
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: ARRAY
5004: ST_TO_ADDR
// bc_type = b_breastwork ;
5005: LD_ADDR_OWVAR 42
5009: PUSH
5010: LD_INT 31
5012: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5013: LD_ADDR_VAR 0 9
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 3
5030: DIVREAL
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5210
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5035: LD_ADDR_VAR 0 13
5039: PUSH
5040: LD_VAR 0 2
5044: PUSH
5045: LD_VAR 0 10
5049: ARRAY
5050: PPUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_VAR 0 10
5060: PUSH
5061: LD_INT 1
5063: PLUS
5064: ARRAY
5065: PPUSH
5066: LD_VAR 0 2
5070: PUSH
5071: LD_VAR 0 10
5075: PUSH
5076: LD_INT 2
5078: PLUS
5079: ARRAY
5080: PPUSH
5081: CALL_OW 47
5085: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5086: LD_INT 0
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_EXP 3
5096: PPUSH
5097: CALL_OW 380
// un := CreateHuman ;
5101: LD_ADDR_VAR 0 12
5105: PUSH
5106: CALL_OW 44
5110: ST_TO_ADDR
// dir := GetDir ( b ) ;
5111: LD_ADDR_VAR 0 16
5115: PUSH
5116: LD_VAR 0 13
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// if dir < 3 then
5126: LD_VAR 0 16
5130: PUSH
5131: LD_INT 3
5133: LESS
5134: IFFALSE 5152
// dir := dir + 3 else
5136: LD_ADDR_VAR 0 16
5140: PUSH
5141: LD_VAR 0 16
5145: PUSH
5146: LD_INT 3
5148: PLUS
5149: ST_TO_ADDR
5150: GO 5166
// dir := dir - 3 ;
5152: LD_ADDR_VAR 0 16
5156: PUSH
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: MINUS
5165: ST_TO_ADDR
// SetDir ( un , dir ) ;
5166: LD_VAR 0 12
5170: PPUSH
5171: LD_VAR 0 16
5175: PPUSH
5176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5180: LD_VAR 0 12
5184: PPUSH
5185: LD_VAR 0 13
5189: PPUSH
5190: CALL_OW 52
// p := p + 3 ;
5194: LD_ADDR_VAR 0 10
5198: PUSH
5199: LD_VAR 0 10
5203: PUSH
5204: LD_INT 3
5206: PLUS
5207: ST_TO_ADDR
// end ;
5208: GO 5032
5210: POP
5211: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5212: LD_ADDR_VAR 0 14
5216: PUSH
5217: LD_INT 2
5219: PUSH
5220: LD_INT 3
5222: PUSH
5223: LD_INT 4
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: LD_OWVAR 67
5235: ARRAY
5236: ST_TO_ADDR
// for i = 1 to sold_stand do
5237: LD_ADDR_VAR 0 9
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_VAR 0 3
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5432
// for p = 1 to x do
5255: LD_ADDR_VAR 0 10
5259: PUSH
5260: DOUBLE
5261: LD_INT 1
5263: DEC
5264: ST_TO_ADDR
5265: LD_VAR 0 14
5269: PUSH
5270: FOR_TO
5271: IFFALSE 5428
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_VAR 0 9
5282: ARRAY
5283: PUSH
5284: LD_INT 10
5286: EQUAL
5287: PUSH
5288: LD_EXP 2
5292: PUSH
5293: LD_INT 2
5295: EQUAL
5296: PUSH
5297: LD_OWVAR 67
5301: PUSH
5302: LD_INT 1
5304: GREATER
5305: AND
5306: PUSH
5307: LD_VAR 0 10
5311: PUSH
5312: LD_VAR 0 14
5316: EQUAL
5317: AND
5318: OR
5319: IFFALSE 5338
// PrepareHuman ( false , class_mortar , skill ) else
5321: LD_INT 0
5323: PPUSH
5324: LD_INT 8
5326: PPUSH
5327: LD_EXP 3
5331: PPUSH
5332: CALL_OW 380
5336: GO 5353
// PrepareHuman ( false , 1 , skill ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_EXP 3
5348: PPUSH
5349: CALL_OW 380
// un := CreateHuman ;
5353: LD_ADDR_VAR 0 12
5357: PUSH
5358: CALL_OW 44
5362: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5363: LD_VAR 0 12
5367: PPUSH
5368: CALL_OW 257
5372: PUSH
5373: LD_INT 1
5375: EQUAL
5376: IFFALSE 5394
// miners := miners ^ un ;
5378: LD_ADDR_EXP 15
5382: PUSH
5383: LD_EXP 15
5387: PUSH
5388: LD_VAR 0 12
5392: ADD
5393: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5394: LD_VAR 0 12
5398: PPUSH
5399: LD_VAR 0 3
5403: PUSH
5404: LD_VAR 0 9
5408: ARRAY
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// ComHold ( un ) ;
5417: LD_VAR 0 12
5421: PPUSH
5422: CALL_OW 140
// end ;
5426: GO 5270
5428: POP
5429: POP
5430: GO 5252
5432: POP
5433: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5434: LD_ADDR_VAR 0 14
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: LD_INT 4
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_OWVAR 67
5457: ARRAY
5458: ST_TO_ADDR
// for i = 1 to sold_crawl do
5459: LD_ADDR_VAR 0 9
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_VAR 0 4
5473: PUSH
5474: FOR_TO
5475: IFFALSE 5587
// for p = 1 to x do
5477: LD_ADDR_VAR 0 10
5481: PUSH
5482: DOUBLE
5483: LD_INT 1
5485: DEC
5486: ST_TO_ADDR
5487: LD_VAR 0 14
5491: PUSH
5492: FOR_TO
5493: IFFALSE 5583
// begin PrepareHuman ( false , 1 , skill ) ;
5495: LD_INT 0
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: LD_EXP 3
5505: PPUSH
5506: CALL_OW 380
// un := CreateHuman ;
5510: LD_ADDR_VAR 0 12
5514: PUSH
5515: CALL_OW 44
5519: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5520: LD_VAR 0 12
5524: PPUSH
5525: LD_VAR 0 15
5529: PUSH
5530: LD_VAR 0 9
5534: ARRAY
5535: PPUSH
5536: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5540: LD_VAR 0 12
5544: PPUSH
5545: LD_VAR 0 4
5549: PUSH
5550: LD_VAR 0 9
5554: ARRAY
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// ComCrawl ( un ) ;
5563: LD_VAR 0 12
5567: PPUSH
5568: CALL_OW 137
// AddComHold ( un ) ;
5572: LD_VAR 0 12
5576: PPUSH
5577: CALL_OW 200
// end ;
5581: GO 5492
5583: POP
5584: POP
5585: GO 5474
5587: POP
5588: POP
// p := 1 ;
5589: LD_ADDR_VAR 0 10
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5597: LD_ADDR_VAR 0 9
5601: PUSH
5602: DOUBLE
5603: LD_INT 1
5605: DEC
5606: ST_TO_ADDR
5607: LD_VAR 0 8
5611: PUSH
5612: LD_INT 2
5614: DIVREAL
5615: PUSH
5616: FOR_TO
5617: IFFALSE 5671
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5619: LD_VAR 0 8
5623: PUSH
5624: LD_VAR 0 10
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 8
5634: PUSH
5635: LD_VAR 0 10
5639: PUSH
5640: LD_INT 1
5642: PLUS
5643: ARRAY
5644: PPUSH
5645: LD_INT 2
5647: PPUSH
5648: LD_INT 10
5650: PPUSH
5651: CALL_OW 330
// p := p + 2 ;
5655: LD_ADDR_VAR 0 10
5659: PUSH
5660: LD_VAR 0 10
5664: PUSH
5665: LD_INT 2
5667: PLUS
5668: ST_TO_ADDR
// end ;
5669: GO 5616
5671: POP
5672: POP
// for i = 1 to hover_x [ 2 ] do
5673: LD_ADDR_VAR 0 9
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_VAR 0 6
5687: PUSH
5688: LD_INT 2
5690: ARRAY
5691: PUSH
5692: FOR_TO
5693: IFFALSE 5842
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5695: LD_INT 0
5697: PPUSH
5698: LD_INT 3
5700: PPUSH
5701: LD_EXP 3
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: CALL_OW 380
// un := CreateHuman ;
5714: LD_ADDR_VAR 0 12
5718: PUSH
5719: CALL_OW 44
5723: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5724: LD_ADDR_EXP 17
5728: PUSH
5729: LD_EXP 17
5733: PUSH
5734: LD_VAR 0 12
5738: ADD
5739: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5740: LD_ADDR_VAR 0 11
5744: PUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: LD_INT 11
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: LD_INT 92
5762: PUSH
5763: LD_INT 24
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_VAR 0 9
5774: PUSH
5775: LD_INT 2
5777: MOD
5778: PUSH
5779: LD_INT 1
5781: PLUS
5782: ARRAY
5783: PPUSH
5784: CALL 7075 0 6
5788: ST_TO_ADDR
// hovers := hovers ^ veh ;
5789: LD_ADDR_EXP 16
5793: PUSH
5794: LD_EXP 16
5798: PUSH
5799: LD_VAR 0 11
5803: ADD
5804: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5805: LD_VAR 0 11
5809: PPUSH
5810: LD_VAR 0 6
5814: PUSH
5815: LD_INT 1
5817: ARRAY
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5826: LD_VAR 0 12
5830: PPUSH
5831: LD_VAR 0 11
5835: PPUSH
5836: CALL_OW 52
// end ;
5840: GO 5692
5842: POP
5843: POP
// p := 1 ;
5844: LD_ADDR_VAR 0 10
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: DOUBLE
5858: LD_INT 1
5860: DEC
5861: ST_TO_ADDR
5862: LD_VAR 0 5
5866: PUSH
5867: LD_INT 3
5869: DIVREAL
5870: PUSH
5871: FOR_TO
5872: IFFALSE 6046
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 3
5884: PUSH
5885: LD_INT 1
5887: PLUS
5888: PPUSH
5889: CALL_OW 380
// un := CreateHuman ;
5893: LD_ADDR_VAR 0 12
5897: PUSH
5898: CALL_OW 44
5902: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5903: LD_ADDR_VAR 0 11
5907: PUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 2
5913: PPUSH
5914: LD_INT 14
5916: PPUSH
5917: LD_INT 2
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: LD_INT 27
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 26
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_INT 3
5942: PPUSH
5943: CALL_OW 12
5947: ARRAY
5948: PPUSH
5949: CALL 7075 0 6
5953: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5954: LD_VAR 0 11
5958: PPUSH
5959: LD_VAR 0 5
5963: PUSH
5964: LD_VAR 0 10
5968: PUSH
5969: LD_INT 2
5971: PLUS
5972: ARRAY
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5978: LD_VAR 0 11
5982: PPUSH
5983: LD_VAR 0 5
5987: PUSH
5988: LD_VAR 0 10
5992: ARRAY
5993: PPUSH
5994: LD_VAR 0 5
5998: PUSH
5999: LD_VAR 0 10
6003: PUSH
6004: LD_INT 1
6006: PLUS
6007: ARRAY
6008: PPUSH
6009: LD_INT 0
6011: PPUSH
6012: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6016: LD_VAR 0 12
6020: PPUSH
6021: LD_VAR 0 11
6025: PPUSH
6026: CALL_OW 52
// p := p + 3 ;
6030: LD_ADDR_VAR 0 10
6034: PUSH
6035: LD_VAR 0 10
6039: PUSH
6040: LD_INT 3
6042: PLUS
6043: ST_TO_ADDR
// end ;
6044: GO 5871
6046: POP
6047: POP
// p := 1 ;
6048: LD_ADDR_VAR 0 10
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6056: LD_ADDR_VAR 0 9
6060: PUSH
6061: DOUBLE
6062: LD_INT 1
6064: DEC
6065: ST_TO_ADDR
6066: LD_VAR 0 7
6070: PUSH
6071: LD_INT 2
6073: DIVREAL
6074: PUSH
6075: FOR_TO
6076: IFFALSE 6130
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6078: LD_VAR 0 7
6082: PUSH
6083: LD_VAR 0 10
6087: ARRAY
6088: PPUSH
6089: LD_VAR 0 7
6093: PUSH
6094: LD_VAR 0 10
6098: PUSH
6099: LD_INT 1
6101: PLUS
6102: ARRAY
6103: PPUSH
6104: LD_INT 2
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 454
// p := p + 2 ;
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: LD_VAR 0 10
6123: PUSH
6124: LD_INT 2
6126: PLUS
6127: ST_TO_ADDR
// end ;
6128: GO 6075
6130: POP
6131: POP
// mines := mines_xy ;
6132: LD_ADDR_EXP 14
6136: PUSH
6137: LD_VAR 0 7
6141: ST_TO_ADDR
// end ;
6142: LD_VAR 0 1
6146: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6147: GO 6149
6149: DISABLE
6150: LD_INT 0
6152: PPUSH
6153: PPUSH
6154: PPUSH
// begin enable ;
6155: ENABLE
// if tanks > 0 then
6156: LD_EXP 18
6160: PUSH
6161: LD_INT 0
6163: GREATER
6164: IFFALSE 6272
// begin for i = 1 to tanks do
6166: LD_ADDR_VAR 0 3
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_EXP 18
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6270
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6184: LD_INT 2
6186: PPUSH
6187: LD_EXP 18
6191: PUSH
6192: LD_VAR 0 3
6196: ARRAY
6197: PPUSH
6198: CALL_OW 292
6202: PUSH
6203: LD_EXP 18
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: PPUSH
6214: CALL_OW 314
6218: NOT
6219: AND
6220: IFFALSE 6268
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6222: LD_EXP 18
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: PPUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: PPUSH
6248: LD_EXP 18
6252: PUSH
6253: LD_VAR 0 3
6257: ARRAY
6258: PPUSH
6259: CALL_OW 74
6263: PPUSH
6264: CALL_OW 115
6268: GO 6181
6270: POP
6271: POP
// end ; if hovers > 0 then
6272: LD_EXP 16
6276: PUSH
6277: LD_INT 0
6279: GREATER
6280: IFFALSE 6605
// begin for i = 1 to hovers do
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: DOUBLE
6288: LD_INT 1
6290: DEC
6291: ST_TO_ADDR
6292: LD_EXP 16
6296: PUSH
6297: FOR_TO
6298: IFFALSE 6603
// begin if GetLives ( hovers [ i ] ) < 600 then
6300: LD_EXP 16
6304: PUSH
6305: LD_VAR 0 3
6309: ARRAY
6310: PPUSH
6311: CALL_OW 256
6315: PUSH
6316: LD_INT 600
6318: LESS
6319: IFFALSE 6430
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6321: LD_EXP 16
6325: PUSH
6326: LD_VAR 0 3
6330: ARRAY
6331: PPUSH
6332: LD_INT 18
6334: PPUSH
6335: CALL_OW 308
6339: NOT
6340: IFFALSE 6362
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6342: LD_EXP 16
6346: PUSH
6347: LD_VAR 0 3
6351: ARRAY
6352: PPUSH
6353: LD_INT 18
6355: PPUSH
6356: CALL_OW 113
6360: GO 6430
// if IsDrivenBy ( hovers [ i ] ) then
6362: LD_EXP 16
6366: PUSH
6367: LD_VAR 0 3
6371: ARRAY
6372: PPUSH
6373: CALL_OW 311
6377: IFFALSE 6430
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6379: LD_EXP 16
6383: PUSH
6384: LD_VAR 0 3
6388: ARRAY
6389: PPUSH
6390: CALL_OW 311
6394: PPUSH
6395: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6399: LD_EXP 16
6403: PUSH
6404: LD_VAR 0 3
6408: ARRAY
6409: PPUSH
6410: CALL_OW 311
6414: PPUSH
6415: LD_EXP 16
6419: PUSH
6420: LD_VAR 0 3
6424: ARRAY
6425: PPUSH
6426: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 256
6445: PUSH
6446: LD_INT 998
6448: GREATER
6449: IFFALSE 6601
// begin if not IsDrivenBy ( hovers [ i ] ) then
6451: LD_EXP 16
6455: PUSH
6456: LD_VAR 0 3
6460: ARRAY
6461: PPUSH
6462: CALL_OW 311
6466: NOT
6467: IFFALSE 6504
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6469: LD_EXP 17
6473: PUSH
6474: LD_VAR 0 3
6478: ARRAY
6479: PPUSH
6480: LD_EXP 16
6484: PPUSH
6485: LD_INT 58
6487: PUSH
6488: EMPTY
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: PPUSH
6500: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6504: LD_INT 19
6506: PPUSH
6507: LD_INT 22
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PPUSH
6517: CALL_OW 70
6521: PUSH
6522: LD_INT 0
6524: GREATER
6525: IFFALSE 6601
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6527: LD_EXP 16
6531: PUSH
6532: LD_VAR 0 3
6536: ARRAY
6537: PPUSH
6538: CALL_OW 311
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: IFFALSE 6601
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6550: LD_EXP 16
6554: PUSH
6555: LD_VAR 0 3
6559: ARRAY
6560: PPUSH
6561: CALL_OW 311
6565: PPUSH
6566: LD_INT 22
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 69
6580: PPUSH
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 74
6596: PPUSH
6597: CALL_OW 115
// end ; end ;
6601: GO 6297
6603: POP
6604: POP
// end ; p := 1 ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_EXP 14
6627: PUSH
6628: LD_INT 2
6630: DIVREAL
6631: PUSH
6632: FOR_TO
6633: IFFALSE 6851
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6635: LD_EXP 14
6639: PUSH
6640: LD_VAR 0 2
6644: ARRAY
6645: PPUSH
6646: LD_EXP 14
6650: PUSH
6651: LD_VAR 0 2
6655: PUSH
6656: LD_INT 1
6658: PLUS
6659: ARRAY
6660: PPUSH
6661: CALL_OW 428
6665: PPUSH
6666: CALL_OW 255
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 6
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: IN
6681: IFFALSE 6835
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6683: LD_EXP 14
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: LD_EXP 14
6698: PUSH
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 1
6706: PLUS
6707: ARRAY
6708: PPUSH
6709: CALL_OW 458
6713: IFFALSE 6835
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6715: LD_EXP 15
6719: PPUSH
6720: LD_EXP 14
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: LD_EXP 14
6735: PUSH
6736: LD_VAR 0 2
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PPUSH
6746: CALL_OW 73
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 297
6781: PUSH
6782: LD_INT 30
6784: LESS
6785: IFFALSE 6835
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6787: LD_EXP 14
6791: PUSH
6792: LD_VAR 0 2
6796: ARRAY
6797: PPUSH
6798: LD_EXP 14
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_INT 1
6810: PLUS
6811: ARRAY
6812: PPUSH
6813: LD_INT 2
6815: PPUSH
6816: CALL_OW 456
// if not mines_trigger then
6820: LD_EXP 10
6824: NOT
6825: IFFALSE 6835
// mines_trigger := true ;
6827: LD_ADDR_EXP 10
6831: PUSH
6832: LD_INT 1
6834: ST_TO_ADDR
// end ; p := p + 2 ;
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: LD_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: PLUS
6848: ST_TO_ADDR
// end ;
6849: GO 6632
6851: POP
6852: POP
// end ;
6853: PPOPN 3
6855: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6856: LD_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: LD_EXP 6
6869: PPUSH
6870: CALL_OW 296
6874: PUSH
6875: LD_INT 20
6877: GREATER
6878: PUSH
6879: LD_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 6
6892: PPUSH
6893: CALL_OW 296
6897: PUSH
6898: LD_INT 20
6900: GREATER
6901: OR
6902: IFFALSE 7017
6904: GO 6906
6906: DISABLE
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
// begin for i = 1 to Difficulty + 1 do
6911: LD_ADDR_VAR 0 1
6915: PUSH
6916: DOUBLE
6917: LD_INT 1
6919: DEC
6920: ST_TO_ADDR
6921: LD_OWVAR 67
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7015
// begin uc_side := 2 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 2
6940: ST_TO_ADDR
// uc_nation := 2 ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6949: LD_INT 0
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 380
// un := CreateHuman ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: CALL_OW 44
6973: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
6974: LD_VAR 0 2
6978: PPUSH
6979: LD_INT 44
6981: PPUSH
6982: LD_INT 0
6984: PPUSH
6985: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
6989: LD_VAR 0 2
6993: PPUSH
6994: LD_EXP 4
6998: PPUSH
6999: LD_VAR 0 2
7003: PPUSH
7004: CALL_OW 74
7008: PPUSH
7009: CALL_OW 115
// end ;
7013: GO 6930
7015: POP
7016: POP
// end ;
7017: PPOPN 2
7019: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7020: LD_VAR 0 2
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: LD_INT 31
7040: PUSH
7041: LD_INT 11
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 69
7060: IN
7061: IFFALSE 7072
// ComRetreat ( driver ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: CALL 7204 0 1
// end ; end_of_file
7072: PPOPN 4
7074: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7075: LD_INT 0
7077: PPUSH
// uc_side := side ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_VAR 0 1
7087: ST_TO_ADDR
// uc_nation := nation ;
7088: LD_ADDR_OWVAR 21
7092: PUSH
7093: LD_VAR 0 2
7097: ST_TO_ADDR
// vc_chassis := chassis ;
7098: LD_ADDR_OWVAR 37
7102: PUSH
7103: LD_VAR 0 3
7107: ST_TO_ADDR
// vc_engine := engine ;
7108: LD_ADDR_OWVAR 39
7112: PUSH
7113: LD_VAR 0 4
7117: ST_TO_ADDR
// vc_control := control ;
7118: LD_ADDR_OWVAR 38
7122: PUSH
7123: LD_VAR 0 5
7127: ST_TO_ADDR
// vc_weapon := weapon ;
7128: LD_ADDR_OWVAR 40
7132: PUSH
7133: LD_VAR 0 6
7137: ST_TO_ADDR
// result := CreateVehicle ;
7138: LD_ADDR_VAR 0 7
7142: PUSH
7143: CALL_OW 45
7147: ST_TO_ADDR
// end ;
7148: LD_VAR 0 7
7152: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7153: LD_INT 0
7155: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 297
7175: PUSH
7176: LD_INT 6
7178: LESS
7179: IFFALSE 7191
// result := true else
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
7189: GO 7199
// result := false ;
7191: LD_ADDR_VAR 0 4
7195: PUSH
7196: LD_INT 0
7198: ST_TO_ADDR
// end ;
7199: LD_VAR 0 4
7203: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7204: LD_INT 0
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
7210: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_INT 81
7218: PUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 255
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 69
7237: PPUSH
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 74
7247: PPUSH
7248: CALL_OW 119
// dir := GetDir ( un ) ;
7252: LD_ADDR_VAR 0 4
7256: PUSH
7257: LD_VAR 0 1
7261: PPUSH
7262: CALL_OW 254
7266: ST_TO_ADDR
// dir := dir - 3 ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_VAR 0 4
7276: PUSH
7277: LD_INT 3
7279: MINUS
7280: ST_TO_ADDR
// if dir < 0 then
7281: LD_VAR 0 4
7285: PUSH
7286: LD_INT 0
7288: LESS
7289: IFFALSE 7305
// dir := dir + 6 ;
7291: LD_ADDR_VAR 0 4
7295: PUSH
7296: LD_VAR 0 4
7300: PUSH
7301: LD_INT 6
7303: PLUS
7304: ST_TO_ADDR
// while true do
7305: LD_INT 1
7307: IFFALSE 7678
// begin coord_dist := 3 ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 3
7316: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 250
7331: PPUSH
7332: LD_VAR 0 4
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 272
7346: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7347: LD_ADDR_VAR 0 6
7351: PUSH
7352: LD_VAR 0 1
7356: PPUSH
7357: CALL_OW 251
7361: PPUSH
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_VAR 0 3
7371: PPUSH
7372: CALL_OW 273
7376: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7377: LD_VAR 0 5
7381: PPUSH
7382: LD_VAR 0 6
7386: PPUSH
7387: CALL_OW 351
7391: PUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: LD_VAR 0 6
7401: PPUSH
7402: CALL_OW 488
7406: PUSH
7407: LD_INT 0
7409: EQUAL
7410: OR
7411: PUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: LD_VAR 0 6
7421: PPUSH
7422: CALL_OW 428
7426: PUSH
7427: LD_INT 0
7429: NONEQUAL
7430: OR
7431: IFFALSE 7592
// begin repeat begin coord_dist := coord_dist + 1 ;
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: ST_TO_ADDR
// dir := dir + 1 ;
7447: LD_ADDR_VAR 0 4
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: PLUS
7460: ST_TO_ADDR
// if dir > 5 then
7461: LD_VAR 0 4
7465: PUSH
7466: LD_INT 5
7468: GREATER
7469: IFFALSE 7479
// dir = 0 ;
7471: LD_ADDR_VAR 0 4
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7479: LD_ADDR_VAR 0 5
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 250
7493: PPUSH
7494: LD_VAR 0 4
7498: PPUSH
7499: LD_VAR 0 3
7503: PPUSH
7504: CALL_OW 272
7508: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7509: LD_ADDR_VAR 0 6
7513: PUSH
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 251
7523: PPUSH
7524: LD_VAR 0 4
7528: PPUSH
7529: LD_VAR 0 3
7533: PPUSH
7534: CALL_OW 273
7538: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7539: LD_VAR 0 5
7543: PPUSH
7544: LD_VAR 0 6
7548: PPUSH
7549: CALL_OW 351
7553: NOT
7554: PUSH
7555: LD_VAR 0 5
7559: PPUSH
7560: LD_VAR 0 6
7564: PPUSH
7565: CALL_OW 488
7569: AND
7570: PUSH
7571: LD_VAR 0 5
7575: PPUSH
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 428
7585: PUSH
7586: LD_INT 0
7588: EQUAL
7589: AND
7590: IFFALSE 7433
// end ; ComMoveXY ( un , x , y ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_VAR 0 5
7601: PPUSH
7602: LD_VAR 0 6
7606: PPUSH
7607: CALL_OW 111
// Wait ( 0 0$1 ) ;
7611: LD_INT 35
7613: PPUSH
7614: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_INT 81
7625: PUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: CALL_OW 255
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 69
7644: PPUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 74
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 10
7662: GREATEREQUAL
7663: IFFALSE 7676
// begin ComStop ( un ) ;
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 141
// break ;
7674: GO 7678
// end ; end ;
7676: GO 7305
// end ; end_of_file
7678: LD_VAR 0 2
7682: RET
