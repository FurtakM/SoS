// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3118 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7115 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7115 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7115 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2820
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2820
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// conv := Query ( QConv ) - 1 ;
2794: LD_ADDR_EXP 11
2798: PUSH
2799: LD_STRING QConv
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: MINUS
2810: ST_TO_ADDR
// DeselectUnits ( cargos ) ;
2811: LD_EXP 4
2815: PPUSH
2816: CALL_OW 491
// end ; end ;
2820: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2821: LD_EXP 11
2825: PUSH
2826: LD_INT 1
2828: EQUAL
2829: IFFALSE 3041
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// begin enable ;
2839: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 51
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 69
2859: ST_TO_ADDR
// if debug then
2860: LD_EXP 1
2864: IFFALSE 2901
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2866: LD_ADDR_OWVAR 47
2870: PUSH
2871: LD_EXP 13
2875: PUSH
2876: LD_EXP 12
2880: ARRAY
2881: PUSH
2882: LD_EXP 13
2886: PUSH
2887: LD_EXP 12
2891: PUSH
2892: LD_INT 1
2894: PLUS
2895: ARRAY
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: ST_TO_ADDR
// for i = 1 to car do
2901: LD_ADDR_VAR 0 1
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 3
2915: PUSH
2916: FOR_TO
2917: IFFALSE 3039
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: PPUSH
2930: LD_EXP 13
2934: PUSH
2935: LD_EXP 12
2939: ARRAY
2940: PPUSH
2941: LD_EXP 13
2945: PUSH
2946: LD_EXP 12
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: ARRAY
2955: PPUSH
2956: CALL 7193 0 3
2960: IFFALSE 2978
// conv_am := conv_am + 2 else
2962: LD_ADDR_EXP 12
2966: PUSH
2967: LD_EXP 12
2971: PUSH
2972: LD_INT 2
2974: PLUS
2975: ST_TO_ADDR
2976: GO 3037
// if not HasTask ( car [ i ] ) then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 314
2993: NOT
2994: IFFALSE 3037
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2996: LD_VAR 0 3
3000: PUSH
3001: LD_VAR 0 1
3005: ARRAY
3006: PPUSH
3007: LD_EXP 13
3011: PUSH
3012: LD_EXP 12
3016: ARRAY
3017: PPUSH
3018: LD_EXP 13
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_INT 1
3030: PLUS
3031: ARRAY
3032: PPUSH
3033: CALL_OW 111
// end ;
3037: GO 2916
3039: POP
3040: POP
// end ;
3041: PPOPN 3
3043: END
// every 0 0$01 trigger conv = 0 do var i ;
3044: LD_EXP 11
3048: PUSH
3049: LD_INT 0
3051: EQUAL
3052: IFFALSE 3115
3054: GO 3056
3056: DISABLE
3057: LD_INT 0
3059: PPUSH
// begin enable ;
3060: ENABLE
// for i = 1 to cargos do
3061: LD_ADDR_VAR 0 1
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_EXP 4
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3113
// if HasTask ( cargos [ i ] ) then
3079: LD_EXP 4
3083: PUSH
3084: LD_VAR 0 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 314
3094: IFFALSE 3111
// ComStop ( cargos [ i ] ) ;
3096: LD_EXP 4
3100: PUSH
3101: LD_VAR 0 1
3105: ARRAY
3106: PPUSH
3107: CALL_OW 141
3111: GO 3076
3113: POP
3114: POP
// end ; end_of_file
3115: PPOPN 1
3117: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3118: LD_INT 0
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
// uc_side := 2 ;
3136: LD_ADDR_OWVAR 20
3140: PUSH
3141: LD_INT 2
3143: ST_TO_ADDR
// uc_nation := 2 ;
3144: LD_ADDR_OWVAR 21
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// if road = 1 then
3152: LD_EXP 2
3156: PUSH
3157: LD_INT 1
3159: EQUAL
3160: IFFALSE 3922
// begin case Difficulty of 1 :
3162: LD_OWVAR 67
3166: PUSH
3167: LD_INT 1
3169: DOUBLE
3170: EQUAL
3171: IFTRUE 3175
3173: GO 3482
3175: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 56
3183: PUSH
3184: LD_INT 37
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 81
3192: PUSH
3193: LD_INT 6
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: LD_INT 90
3201: PUSH
3202: LD_INT 25
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 68
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 96
3219: PUSH
3220: LD_INT 82
3222: PUSH
3223: LD_INT 4
3225: PUSH
3226: LD_INT 80
3228: PUSH
3229: LD_INT 109
3231: PUSH
3232: LD_INT 4
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 9
3265: PUSH
3266: LD_INT 10
3268: PUSH
3269: LD_INT 11
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3278: LD_ADDR_VAR 0 4
3282: PUSH
3283: LD_INT 13
3285: PUSH
3286: LD_INT 14
3288: PUSH
3289: LD_INT 15
3291: PUSH
3292: LD_INT 16
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3301: LD_ADDR_VAR 0 15
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 5
3311: PUSH
3312: LD_INT 0
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3324: LD_ADDR_VAR 0 8
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 5
3334: PUSH
3335: LD_INT 96
3337: PUSH
3338: LD_INT 53
3340: PUSH
3341: LD_INT 142
3343: PUSH
3344: LD_INT 98
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 82
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3363: LD_ADDR_VAR 0 6
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 4
3391: PUSH
3392: LD_INT 100
3394: PUSH
3395: LD_INT 21
3397: PUSH
3398: LD_INT 4
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3409: LD_ADDR_VAR 0 7
3413: PUSH
3414: LD_INT 38
3416: PUSH
3417: LD_INT 28
3419: PUSH
3420: LD_INT 41
3422: PUSH
3423: LD_INT 29
3425: PUSH
3426: LD_INT 62
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 65
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: LD_INT 95
3440: PUSH
3441: LD_INT 55
3443: PUSH
3444: LD_INT 98
3446: PUSH
3447: LD_INT 54
3449: PUSH
3450: LD_INT 96
3452: PUSH
3453: LD_INT 111
3455: PUSH
3456: LD_INT 99
3458: PUSH
3459: LD_INT 112
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// end ; 2 , 3 :
3480: GO 3920
3482: LD_INT 2
3484: DOUBLE
3485: EQUAL
3486: IFTRUE 3496
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3919
3496: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: LD_INT 37
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 81
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 90
3522: PUSH
3523: LD_INT 25
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 105
3531: PUSH
3532: LD_INT 68
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 96
3540: PUSH
3541: LD_INT 82
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 80
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_INT 7
3583: PUSH
3584: LD_INT 8
3586: PUSH
3587: LD_INT 9
3589: PUSH
3590: LD_INT 10
3592: PUSH
3593: LD_INT 11
3595: PUSH
3596: LD_INT 12
3598: PUSH
3599: LD_INT 42
3601: PUSH
3602: LD_INT 43
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 13
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 15
3628: PUSH
3629: LD_INT 16
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3638: LD_ADDR_VAR 0 15
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 5
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: LD_INT 1
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3661: LD_ADDR_VAR 0 8
3665: PUSH
3666: LD_INT 68
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: LD_INT 96
3674: PUSH
3675: LD_INT 53
3677: PUSH
3678: LD_INT 142
3680: PUSH
3681: LD_INT 98
3683: PUSH
3684: LD_INT 96
3686: PUSH
3687: LD_INT 82
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3700: LD_ADDR_VAR 0 6
3704: PUSH
3705: LD_INT 17
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3715: LD_ADDR_VAR 0 5
3719: PUSH
3720: LD_INT 104
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 100
3731: PUSH
3732: LD_INT 21
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 91
3740: PUSH
3741: LD_INT 28
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_INT 31
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 71
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 71
3767: PUSH
3768: LD_INT 103
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 66
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3806: LD_ADDR_VAR 0 7
3810: PUSH
3811: LD_INT 38
3813: PUSH
3814: LD_INT 28
3816: PUSH
3817: LD_INT 41
3819: PUSH
3820: LD_INT 29
3822: PUSH
3823: LD_INT 62
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 65
3831: PUSH
3832: LD_INT 7
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 55
3840: PUSH
3841: LD_INT 98
3843: PUSH
3844: LD_INT 54
3846: PUSH
3847: LD_INT 96
3849: PUSH
3850: LD_INT 111
3852: PUSH
3853: LD_INT 99
3855: PUSH
3856: LD_INT 112
3858: PUSH
3859: LD_INT 86
3861: PUSH
3862: LD_INT 17
3864: PUSH
3865: LD_INT 89
3867: PUSH
3868: LD_INT 17
3870: PUSH
3871: LD_INT 136
3873: PUSH
3874: LD_INT 91
3876: PUSH
3877: LD_INT 140
3879: PUSH
3880: LD_INT 91
3882: PUSH
3883: LD_INT 102
3885: PUSH
3886: LD_INT 54
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// end ; end ;
3917: GO 3920
3919: POP
// end else
3920: GO 4862
// if road = 2 then
3922: LD_EXP 2
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: IFFALSE 4862
// begin case Difficulty of 1 :
3932: LD_OWVAR 67
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4356
3945: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: LD_INT 62
3962: PUSH
3963: LD_INT 8
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: LD_INT 106
3971: PUSH
3972: LD_INT 68
3974: PUSH
3975: LD_INT 2
3977: PUSH
3978: LD_INT 143
3980: PUSH
3981: LD_INT 96
3983: PUSH
3984: LD_INT 3
3986: PUSH
3987: LD_INT 90
3989: PUSH
3990: LD_INT 115
3992: PUSH
3993: LD_INT 4
3995: PUSH
3996: LD_INT 56
3998: PUSH
3999: LD_INT 59
4001: PUSH
4002: LD_INT 5
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 45
4032: PUSH
4033: LD_INT 46
4035: PUSH
4036: LD_INT 47
4038: PUSH
4039: LD_INT 48
4041: PUSH
4042: LD_INT 49
4044: PUSH
4045: LD_INT 50
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 45
4063: PUSH
4064: LD_INT 46
4066: PUSH
4067: LD_INT 47
4069: PUSH
4070: LD_INT 48
4072: PUSH
4073: LD_INT 49
4075: PUSH
4076: LD_INT 50
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4087: LD_ADDR_VAR 0 15
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 0
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4118: LD_ADDR_VAR 0 8
4122: PUSH
4123: LD_INT 44
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 62
4131: PUSH
4132: LD_INT 8
4134: PUSH
4135: LD_INT 106
4137: PUSH
4138: LD_INT 68
4140: PUSH
4141: LD_INT 143
4143: PUSH
4144: LD_INT 96
4146: PUSH
4147: LD_INT 90
4149: PUSH
4150: LD_INT 115
4152: PUSH
4153: LD_INT 56
4155: PUSH
4156: LD_INT 59
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4173: LD_ADDR_VAR 0 6
4177: PUSH
4178: LD_INT 17
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4188: LD_ADDR_VAR 0 5
4192: PUSH
4193: LD_INT 51
4195: PUSH
4196: LD_INT 29
4198: PUSH
4199: LD_INT 5
4201: PUSH
4202: LD_INT 55
4204: PUSH
4205: LD_INT 33
4207: PUSH
4208: LD_INT 5
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4219: LD_ADDR_VAR 0 7
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 33
4232: PUSH
4233: LD_INT 13
4235: PUSH
4236: LD_INT 35
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 98
4244: PUSH
4245: LD_INT 20
4247: PUSH
4248: LD_INT 102
4250: PUSH
4251: LD_INT 25
4253: PUSH
4254: LD_INT 97
4256: PUSH
4257: LD_INT 33
4259: PUSH
4260: LD_INT 101
4262: PUSH
4263: LD_INT 54
4265: PUSH
4266: LD_INT 98
4268: PUSH
4269: LD_INT 54
4271: PUSH
4272: LD_INT 96
4274: PUSH
4275: LD_INT 55
4277: PUSH
4278: LD_INT 94
4280: PUSH
4281: LD_INT 56
4283: PUSH
4284: LD_INT 145
4286: PUSH
4287: LD_INT 102
4289: PUSH
4290: LD_INT 146
4292: PUSH
4293: LD_INT 100
4295: PUSH
4296: LD_INT 97
4298: PUSH
4299: LD_INT 114
4301: PUSH
4302: LD_INT 99
4304: PUSH
4305: LD_INT 117
4307: PUSH
4308: LD_INT 54
4310: PUSH
4311: LD_INT 58
4313: PUSH
4314: LD_INT 55
4316: PUSH
4317: LD_INT 56
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
// end ; 2 , 3 :
4354: GO 4862
4356: LD_INT 2
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4370
4362: LD_INT 3
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4861
4370: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4371: LD_ADDR_VAR 0 2
4375: PUSH
4376: LD_INT 44
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 62
4387: PUSH
4388: LD_INT 8
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 106
4396: PUSH
4397: LD_INT 68
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 143
4405: PUSH
4406: LD_INT 96
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 90
4414: PUSH
4415: LD_INT 115
4417: PUSH
4418: LD_INT 4
4420: PUSH
4421: LD_INT 56
4423: PUSH
4424: LD_INT 59
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 45
4457: PUSH
4458: LD_INT 46
4460: PUSH
4461: LD_INT 47
4463: PUSH
4464: LD_INT 48
4466: PUSH
4467: LD_INT 49
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4481: LD_ADDR_VAR 0 4
4485: PUSH
4486: LD_INT 45
4488: PUSH
4489: LD_INT 46
4491: PUSH
4492: LD_INT 47
4494: PUSH
4495: LD_INT 48
4497: PUSH
4498: LD_INT 49
4500: PUSH
4501: LD_INT 50
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4512: LD_ADDR_VAR 0 15
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4543: LD_ADDR_VAR 0 8
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 27
4553: PUSH
4554: LD_INT 44
4556: PUSH
4557: LD_INT 22
4559: PUSH
4560: LD_INT 62
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 106
4568: PUSH
4569: LD_INT 68
4571: PUSH
4572: LD_INT 143
4574: PUSH
4575: LD_INT 96
4577: PUSH
4578: LD_INT 90
4580: PUSH
4581: LD_INT 115
4583: PUSH
4584: LD_INT 56
4586: PUSH
4587: LD_INT 59
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4606: LD_ADDR_VAR 0 6
4610: PUSH
4611: LD_INT 17
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 29
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 55
4637: PUSH
4638: LD_INT 33
4640: PUSH
4641: LD_INT 5
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 37
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 72
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 120
4664: PUSH
4665: LD_INT 93
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 25
4673: PUSH
4674: LD_INT 45
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: LD_INT 27
4682: PUSH
4683: LD_INT 48
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 51
4694: PUSH
4695: LD_INT 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4724: LD_ADDR_VAR 0 7
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 13
4734: PUSH
4735: LD_INT 33
4737: PUSH
4738: LD_INT 13
4740: PUSH
4741: LD_INT 35
4743: PUSH
4744: LD_INT 13
4746: PUSH
4747: LD_INT 98
4749: PUSH
4750: LD_INT 20
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 97
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 101
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: LD_INT 98
4773: PUSH
4774: LD_INT 54
4776: PUSH
4777: LD_INT 96
4779: PUSH
4780: LD_INT 55
4782: PUSH
4783: LD_INT 94
4785: PUSH
4786: LD_INT 56
4788: PUSH
4789: LD_INT 145
4791: PUSH
4792: LD_INT 102
4794: PUSH
4795: LD_INT 146
4797: PUSH
4798: LD_INT 100
4800: PUSH
4801: LD_INT 97
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 99
4809: PUSH
4810: LD_INT 117
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: LD_INT 58
4818: PUSH
4819: LD_INT 55
4821: PUSH
4822: LD_INT 56
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: ST_TO_ADDR
// end ; end ;
4859: GO 4862
4861: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4862: LD_ADDR_EXP 3
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: LD_OWVAR 67
4885: ARRAY
4886: ST_TO_ADDR
// if Difficulty > 1 then
4887: LD_OWVAR 67
4891: PUSH
4892: LD_INT 1
4894: GREATER
4895: IFFALSE 4910
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: CALL_OW 322
// if Difficulty > 1 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 1
4917: GREATER
4918: IFFALSE 4933
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4920: LD_INT 52
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: CALL_OW 322
// miners := [ ] ;
4933: LD_ADDR_EXP 15
4937: PUSH
4938: EMPTY
4939: ST_TO_ADDR
// hovers := [ ] ;
4940: LD_ADDR_EXP 16
4944: PUSH
4945: EMPTY
4946: ST_TO_ADDR
// hovers_driver := [ ] ;
4947: LD_ADDR_EXP 17
4951: PUSH
4952: EMPTY
4953: ST_TO_ADDR
// tanks := [ ] ;
4954: LD_ADDR_EXP 18
4958: PUSH
4959: EMPTY
4960: ST_TO_ADDR
// p := 1 ;
4961: LD_ADDR_VAR 0 10
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4969: LD_ADDR_OWVAR 43
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: LD_INT 6
4982: PUSH
4983: LD_INT 7
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: LD_OWVAR 67
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ARRAY
5001: ST_TO_ADDR
// bc_type = b_breastwork ;
5002: LD_ADDR_OWVAR 42
5006: PUSH
5007: LD_INT 31
5009: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 3
5027: DIVREAL
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5207
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5032: LD_ADDR_VAR 0 13
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 10
5046: ARRAY
5047: PPUSH
5048: LD_VAR 0 2
5052: PUSH
5053: LD_VAR 0 10
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ARRAY
5062: PPUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 10
5072: PUSH
5073: LD_INT 2
5075: PLUS
5076: ARRAY
5077: PPUSH
5078: CALL_OW 47
5082: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5083: LD_INT 0
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_EXP 3
5093: PPUSH
5094: CALL_OW 380
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 12
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// dir := GetDir ( b ) ;
5108: LD_ADDR_VAR 0 16
5112: PUSH
5113: LD_VAR 0 13
5117: PPUSH
5118: CALL_OW 254
5122: ST_TO_ADDR
// if dir < 3 then
5123: LD_VAR 0 16
5127: PUSH
5128: LD_INT 3
5130: LESS
5131: IFFALSE 5149
// dir := dir + 3 else
5133: LD_ADDR_VAR 0 16
5137: PUSH
5138: LD_VAR 0 16
5142: PUSH
5143: LD_INT 3
5145: PLUS
5146: ST_TO_ADDR
5147: GO 5163
// dir := dir - 3 ;
5149: LD_ADDR_VAR 0 16
5153: PUSH
5154: LD_VAR 0 16
5158: PUSH
5159: LD_INT 3
5161: MINUS
5162: ST_TO_ADDR
// SetDir ( un , dir ) ;
5163: LD_VAR 0 12
5167: PPUSH
5168: LD_VAR 0 16
5172: PPUSH
5173: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5177: LD_VAR 0 12
5181: PPUSH
5182: LD_VAR 0 13
5186: PPUSH
5187: CALL_OW 52
// p := p + 3 ;
5191: LD_ADDR_VAR 0 10
5195: PUSH
5196: LD_VAR 0 10
5200: PUSH
5201: LD_INT 3
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: GO 5029
5207: POP
5208: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5209: LD_ADDR_VAR 0 14
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: LD_INT 3
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: ST_TO_ADDR
// for i = 1 to sold_stand do
5234: LD_ADDR_VAR 0 9
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5429
// for p = 1 to x do
5252: LD_ADDR_VAR 0 10
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 14
5266: PUSH
5267: FOR_TO
5268: IFFALSE 5425
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_VAR 0 9
5279: ARRAY
5280: PUSH
5281: LD_INT 10
5283: EQUAL
5284: PUSH
5285: LD_EXP 2
5289: PUSH
5290: LD_INT 2
5292: EQUAL
5293: PUSH
5294: LD_OWVAR 67
5298: PUSH
5299: LD_INT 1
5301: GREATER
5302: AND
5303: PUSH
5304: LD_VAR 0 10
5308: PUSH
5309: LD_VAR 0 14
5313: EQUAL
5314: AND
5315: OR
5316: IFFALSE 5335
// PrepareHuman ( false , class_mortar , skill ) else
5318: LD_INT 0
5320: PPUSH
5321: LD_INT 8
5323: PPUSH
5324: LD_EXP 3
5328: PPUSH
5329: CALL_OW 380
5333: GO 5350
// PrepareHuman ( false , 1 , skill ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_EXP 3
5345: PPUSH
5346: CALL_OW 380
// un := CreateHuman ;
5350: LD_ADDR_VAR 0 12
5354: PUSH
5355: CALL_OW 44
5359: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5360: LD_VAR 0 12
5364: PPUSH
5365: CALL_OW 257
5369: PUSH
5370: LD_INT 1
5372: EQUAL
5373: IFFALSE 5391
// miners := miners ^ un ;
5375: LD_ADDR_EXP 15
5379: PUSH
5380: LD_EXP 15
5384: PUSH
5385: LD_VAR 0 12
5389: ADD
5390: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5391: LD_VAR 0 12
5395: PPUSH
5396: LD_VAR 0 3
5400: PUSH
5401: LD_VAR 0 9
5405: ARRAY
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// ComHold ( un ) ;
5414: LD_VAR 0 12
5418: PPUSH
5419: CALL_OW 140
// end ;
5423: GO 5267
5425: POP
5426: POP
5427: GO 5249
5429: POP
5430: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5431: LD_ADDR_VAR 0 14
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 4
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: ST_TO_ADDR
// for i = 1 to sold_crawl do
5456: LD_ADDR_VAR 0 9
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_VAR 0 4
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5584
// for p = 1 to x do
5474: LD_ADDR_VAR 0 10
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_VAR 0 14
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5580
// begin PrepareHuman ( false , 1 , skill ) ;
5492: LD_INT 0
5494: PPUSH
5495: LD_INT 1
5497: PPUSH
5498: LD_EXP 3
5502: PPUSH
5503: CALL_OW 380
// un := CreateHuman ;
5507: LD_ADDR_VAR 0 12
5511: PUSH
5512: CALL_OW 44
5516: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5517: LD_VAR 0 12
5521: PPUSH
5522: LD_VAR 0 15
5526: PUSH
5527: LD_VAR 0 9
5531: ARRAY
5532: PPUSH
5533: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5537: LD_VAR 0 12
5541: PPUSH
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 9
5551: ARRAY
5552: PPUSH
5553: LD_INT 0
5555: PPUSH
5556: CALL_OW 49
// ComCrawl ( un ) ;
5560: LD_VAR 0 12
5564: PPUSH
5565: CALL_OW 137
// AddComHold ( un ) ;
5569: LD_VAR 0 12
5573: PPUSH
5574: CALL_OW 200
// end ;
5578: GO 5489
5580: POP
5581: POP
5582: GO 5471
5584: POP
5585: POP
// p := 1 ;
5586: LD_ADDR_VAR 0 10
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5594: LD_ADDR_VAR 0 9
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 8
5608: PUSH
5609: LD_INT 2
5611: DIVREAL
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5668
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5616: LD_VAR 0 8
5620: PUSH
5621: LD_VAR 0 10
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 8
5631: PUSH
5632: LD_VAR 0 10
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_INT 10
5647: PPUSH
5648: CALL_OW 330
// p := p + 2 ;
5652: LD_ADDR_VAR 0 10
5656: PUSH
5657: LD_VAR 0 10
5661: PUSH
5662: LD_INT 2
5664: PLUS
5665: ST_TO_ADDR
// end ;
5666: GO 5613
5668: POP
5669: POP
// for i = 1 to hover_x [ 2 ] do
5670: LD_ADDR_VAR 0 9
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_VAR 0 6
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PUSH
5689: FOR_TO
5690: IFFALSE 5839
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5692: LD_INT 0
5694: PPUSH
5695: LD_INT 3
5697: PPUSH
5698: LD_EXP 3
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 12
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5721: LD_ADDR_EXP 17
5725: PUSH
5726: LD_EXP 17
5730: PUSH
5731: LD_VAR 0 12
5735: ADD
5736: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5737: LD_ADDR_VAR 0 11
5741: PUSH
5742: LD_INT 2
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 11
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: LD_INT 92
5759: PUSH
5760: LD_INT 24
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_VAR 0 9
5771: PUSH
5772: LD_INT 2
5774: MOD
5775: PUSH
5776: LD_INT 1
5778: PLUS
5779: ARRAY
5780: PPUSH
5781: CALL 7115 0 6
5785: ST_TO_ADDR
// hovers := hovers ^ veh ;
5786: LD_ADDR_EXP 16
5790: PUSH
5791: LD_EXP 16
5795: PUSH
5796: LD_VAR 0 11
5800: ADD
5801: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5802: LD_VAR 0 11
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_INT 0
5818: PPUSH
5819: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5823: LD_VAR 0 12
5827: PPUSH
5828: LD_VAR 0 11
5832: PPUSH
5833: CALL_OW 52
// end ;
5837: GO 5689
5839: POP
5840: POP
// p := 1 ;
5841: LD_ADDR_VAR 0 10
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5849: LD_ADDR_VAR 0 9
5853: PUSH
5854: DOUBLE
5855: LD_INT 1
5857: DEC
5858: ST_TO_ADDR
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: DIVREAL
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6043
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 3
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 380
// un := CreateHuman ;
5890: LD_ADDR_VAR 0 12
5894: PUSH
5895: CALL_OW 44
5899: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5900: LD_ADDR_VAR 0 11
5904: PUSH
5905: LD_INT 2
5907: PPUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 14
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 27
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 1
5936: PPUSH
5937: LD_INT 3
5939: PPUSH
5940: CALL_OW 12
5944: ARRAY
5945: PPUSH
5946: CALL 7115 0 6
5950: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5951: LD_VAR 0 11
5955: PPUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 10
5965: PUSH
5966: LD_INT 2
5968: PLUS
5969: ARRAY
5970: PPUSH
5971: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5975: LD_VAR 0 11
5979: PPUSH
5980: LD_VAR 0 5
5984: PUSH
5985: LD_VAR 0 10
5989: ARRAY
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 10
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ARRAY
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_VAR 0 11
6022: PPUSH
6023: CALL_OW 52
// p := p + 3 ;
6027: LD_ADDR_VAR 0 10
6031: PUSH
6032: LD_VAR 0 10
6036: PUSH
6037: LD_INT 3
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: GO 5868
6043: POP
6044: POP
// p := 1 ;
6045: LD_ADDR_VAR 0 10
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6053: LD_ADDR_VAR 0 9
6057: PUSH
6058: DOUBLE
6059: LD_INT 1
6061: DEC
6062: ST_TO_ADDR
6063: LD_VAR 0 7
6067: PUSH
6068: LD_INT 2
6070: DIVREAL
6071: PUSH
6072: FOR_TO
6073: IFFALSE 6127
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6075: LD_VAR 0 7
6079: PUSH
6080: LD_VAR 0 10
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_VAR 0 10
6095: PUSH
6096: LD_INT 1
6098: PLUS
6099: ARRAY
6100: PPUSH
6101: LD_INT 2
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 454
// p := p + 2 ;
6111: LD_ADDR_VAR 0 10
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: LD_INT 2
6123: PLUS
6124: ST_TO_ADDR
// end ;
6125: GO 6072
6127: POP
6128: POP
// mines := mines_xy ;
6129: LD_ADDR_EXP 14
6133: PUSH
6134: LD_VAR 0 7
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 1
6143: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i , tmp ;
6144: GO 6146
6146: DISABLE
6147: LD_INT 0
6149: PPUSH
6150: PPUSH
6151: PPUSH
6152: PPUSH
// begin enable ;
6153: ENABLE
// if tanks > 0 then
6154: LD_EXP 18
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: IFFALSE 6270
// begin for i = 1 to tanks do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_EXP 18
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6268
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6182: LD_INT 2
6184: PPUSH
6185: LD_EXP 18
6189: PUSH
6190: LD_VAR 0 3
6194: ARRAY
6195: PPUSH
6196: CALL_OW 292
6200: PUSH
6201: LD_EXP 18
6205: PUSH
6206: LD_VAR 0 3
6210: ARRAY
6211: PPUSH
6212: CALL_OW 314
6216: NOT
6217: AND
6218: IFFALSE 6266
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6220: LD_EXP 18
6224: PUSH
6225: LD_VAR 0 3
6229: ARRAY
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: PPUSH
6246: LD_EXP 18
6250: PUSH
6251: LD_VAR 0 3
6255: ARRAY
6256: PPUSH
6257: CALL_OW 74
6261: PPUSH
6262: CALL_OW 115
6266: GO 6179
6268: POP
6269: POP
// end ; if hovers > 0 then
6270: LD_EXP 16
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: IFFALSE 6603
// begin for i = 1 to hovers do
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_EXP 16
6294: PUSH
6295: FOR_TO
6296: IFFALSE 6601
// begin if GetLives ( hovers [ i ] ) < 600 then
6298: LD_EXP 16
6302: PUSH
6303: LD_VAR 0 3
6307: ARRAY
6308: PPUSH
6309: CALL_OW 256
6313: PUSH
6314: LD_INT 600
6316: LESS
6317: IFFALSE 6428
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6319: LD_EXP 16
6323: PUSH
6324: LD_VAR 0 3
6328: ARRAY
6329: PPUSH
6330: LD_INT 18
6332: PPUSH
6333: CALL_OW 308
6337: NOT
6338: IFFALSE 6360
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6340: LD_EXP 16
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: PPUSH
6351: LD_INT 18
6353: PPUSH
6354: CALL_OW 113
6358: GO 6428
// if IsDrivenBy ( hovers [ i ] ) then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 311
6375: IFFALSE 6428
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6377: LD_EXP 16
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: PPUSH
6388: CALL_OW 311
6392: PPUSH
6393: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6397: LD_EXP 16
6401: PUSH
6402: LD_VAR 0 3
6406: ARRAY
6407: PPUSH
6408: CALL_OW 311
6412: PPUSH
6413: LD_EXP 16
6417: PUSH
6418: LD_VAR 0 3
6422: ARRAY
6423: PPUSH
6424: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6428: LD_EXP 16
6432: PUSH
6433: LD_VAR 0 3
6437: ARRAY
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 998
6446: GREATER
6447: IFFALSE 6599
// begin if not IsDrivenBy ( hovers [ i ] ) then
6449: LD_EXP 16
6453: PUSH
6454: LD_VAR 0 3
6458: ARRAY
6459: PPUSH
6460: CALL_OW 311
6464: NOT
6465: IFFALSE 6502
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6467: LD_EXP 17
6471: PUSH
6472: LD_VAR 0 3
6476: ARRAY
6477: PPUSH
6478: LD_EXP 16
6482: PPUSH
6483: LD_INT 58
6485: PUSH
6486: EMPTY
6487: LIST
6488: PPUSH
6489: CALL_OW 72
6493: PUSH
6494: LD_INT 1
6496: ARRAY
6497: PPUSH
6498: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6502: LD_INT 19
6504: PPUSH
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 70
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: IFFALSE 6599
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6525: LD_EXP 16
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PPUSH
6536: CALL_OW 311
6540: PPUSH
6541: CALL_OW 314
6545: NOT
6546: IFFALSE 6599
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6548: LD_EXP 16
6552: PUSH
6553: LD_VAR 0 3
6557: ARRAY
6558: PPUSH
6559: CALL_OW 311
6563: PPUSH
6564: LD_INT 22
6566: PUSH
6567: LD_INT 3
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_EXP 16
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: PPUSH
6590: CALL_OW 74
6594: PPUSH
6595: CALL_OW 115
// end ; end ;
6599: GO 6295
6601: POP
6602: POP
// end ; p := 1 ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_EXP 14
6625: PUSH
6626: LD_INT 2
6628: DIVREAL
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6891
// begin tmp := HexInfo ( mines [ p ] , mines [ p + 1 ] ) ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 14
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PPUSH
6649: LD_EXP 14
6653: PUSH
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: PLUS
6662: ARRAY
6663: PPUSH
6664: CALL_OW 428
6668: ST_TO_ADDR
// if tmp and MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6669: LD_VAR 0 4
6673: PUSH
6674: LD_EXP 14
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PPUSH
6685: LD_EXP 14
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: ARRAY
6699: PPUSH
6700: CALL_OW 458
6704: AND
6705: IFFALSE 6875
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] and GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6707: LD_EXP 14
6711: PUSH
6712: LD_VAR 0 2
6716: ARRAY
6717: PPUSH
6718: LD_EXP 14
6722: PUSH
6723: LD_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: PPUSH
6733: CALL_OW 428
6737: PPUSH
6738: CALL_OW 255
6742: PUSH
6743: LD_INT 3
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: IN
6753: PUSH
6754: LD_EXP 15
6758: PPUSH
6759: LD_EXP 14
6763: PUSH
6764: LD_VAR 0 2
6768: ARRAY
6769: PPUSH
6770: LD_EXP 14
6774: PUSH
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ARRAY
6784: PPUSH
6785: CALL_OW 73
6789: PPUSH
6790: LD_EXP 14
6794: PUSH
6795: LD_VAR 0 2
6799: ARRAY
6800: PPUSH
6801: LD_EXP 14
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PLUS
6814: ARRAY
6815: PPUSH
6816: CALL_OW 297
6820: PUSH
6821: LD_INT 30
6823: LESS
6824: AND
6825: IFFALSE 6875
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6827: LD_EXP 14
6831: PUSH
6832: LD_VAR 0 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 14
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 456
// if not mines_trigger then
6860: LD_EXP 10
6864: NOT
6865: IFFALSE 6875
// mines_trigger := true ;
6867: LD_ADDR_EXP 10
6871: PUSH
6872: LD_INT 1
6874: ST_TO_ADDR
// end ; p := p + 2 ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: PLUS
6888: ST_TO_ADDR
// end ;
6889: GO 6630
6891: POP
6892: POP
// end ;
6893: PPOPN 4
6895: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6896: LD_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_EXP 6
6909: PPUSH
6910: CALL_OW 296
6914: PUSH
6915: LD_INT 20
6917: GREATER
6918: PUSH
6919: LD_EXP 4
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_EXP 6
6932: PPUSH
6933: CALL_OW 296
6937: PUSH
6938: LD_INT 20
6940: GREATER
6941: OR
6942: IFFALSE 7057
6944: GO 6946
6946: DISABLE
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
// begin for i = 1 to Difficulty + 1 do
6951: LD_ADDR_VAR 0 1
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_OWVAR 67
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7055
// begin uc_side := 2 ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_INT 2
6980: ST_TO_ADDR
// uc_nation := 2 ;
6981: LD_ADDR_OWVAR 21
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6989: LD_INT 0
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: LD_EXP 3
6999: PPUSH
7000: CALL_OW 380
// un := CreateHuman ;
7004: LD_ADDR_VAR 0 2
7008: PUSH
7009: CALL_OW 44
7013: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7014: LD_VAR 0 2
7018: PPUSH
7019: LD_INT 44
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_EXP 4
7038: PPUSH
7039: LD_VAR 0 2
7043: PPUSH
7044: CALL_OW 74
7048: PPUSH
7049: CALL_OW 115
// end ;
7053: GO 6970
7055: POP
7056: POP
// end ;
7057: PPOPN 2
7059: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7060: LD_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: IN
7101: IFFALSE 7112
// ComRetreat ( driver ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL 7244 0 1
// end ; end_of_file
7112: PPOPN 4
7114: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7115: LD_INT 0
7117: PPUSH
// uc_side := side ;
7118: LD_ADDR_OWVAR 20
7122: PUSH
7123: LD_VAR 0 1
7127: ST_TO_ADDR
// uc_nation := nation ;
7128: LD_ADDR_OWVAR 21
7132: PUSH
7133: LD_VAR 0 2
7137: ST_TO_ADDR
// vc_chassis := chassis ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_VAR 0 3
7147: ST_TO_ADDR
// vc_engine := engine ;
7148: LD_ADDR_OWVAR 39
7152: PUSH
7153: LD_VAR 0 4
7157: ST_TO_ADDR
// vc_control := control ;
7158: LD_ADDR_OWVAR 38
7162: PUSH
7163: LD_VAR 0 5
7167: ST_TO_ADDR
// vc_weapon := weapon ;
7168: LD_ADDR_OWVAR 40
7172: PUSH
7173: LD_VAR 0 6
7177: ST_TO_ADDR
// result := CreateVehicle ;
7178: LD_ADDR_VAR 0 7
7182: PUSH
7183: CALL_OW 45
7187: ST_TO_ADDR
// end ;
7188: LD_VAR 0 7
7192: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7193: LD_INT 0
7195: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 3
7210: PPUSH
7211: CALL_OW 297
7215: PUSH
7216: LD_INT 6
7218: LESS
7219: IFFALSE 7231
// result := true else
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
7229: GO 7239
// result := false ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_INT 0
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 4
7243: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PPUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 74
7287: PPUSH
7288: CALL_OW 119
// dir := GetDir ( un ) ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: CALL_OW 254
7306: ST_TO_ADDR
// dir := dir - 3 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 3
7319: MINUS
7320: ST_TO_ADDR
// if dir < 0 then
7321: LD_VAR 0 4
7325: PUSH
7326: LD_INT 0
7328: LESS
7329: IFFALSE 7345
// dir := dir + 6 ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 6
7343: PLUS
7344: ST_TO_ADDR
// while true do
7345: LD_INT 1
7347: IFFALSE 7718
// begin coord_dist := 3 ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7357: LD_ADDR_VAR 0 5
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 250
7371: PPUSH
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_VAR 0 3
7381: PPUSH
7382: CALL_OW 272
7386: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7387: LD_ADDR_VAR 0 6
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 251
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 273
7416: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7417: LD_VAR 0 5
7421: PPUSH
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 351
7431: PUSH
7432: LD_VAR 0 5
7436: PPUSH
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 488
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: OR
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 6
7461: PPUSH
7462: CALL_OW 428
7466: PUSH
7467: LD_INT 0
7469: NONEQUAL
7470: OR
7471: IFFALSE 7632
// begin repeat begin coord_dist := coord_dist + 1 ;
7473: LD_ADDR_VAR 0 3
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: PLUS
7486: ST_TO_ADDR
// dir := dir + 1 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 1
7499: PLUS
7500: ST_TO_ADDR
// if dir > 5 then
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 5
7508: GREATER
7509: IFFALSE 7519
// dir = 0 ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7519: LD_ADDR_VAR 0 5
7523: PUSH
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 250
7533: PPUSH
7534: LD_VAR 0 4
7538: PPUSH
7539: LD_VAR 0 3
7543: PPUSH
7544: CALL_OW 272
7548: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 251
7563: PPUSH
7564: LD_VAR 0 4
7568: PPUSH
7569: LD_VAR 0 3
7573: PPUSH
7574: CALL_OW 273
7578: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 351
7593: NOT
7594: PUSH
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_VAR 0 6
7604: PPUSH
7605: CALL_OW 488
7609: AND
7610: PUSH
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_VAR 0 6
7620: PPUSH
7621: CALL_OW 428
7625: PUSH
7626: LD_INT 0
7628: EQUAL
7629: AND
7630: IFFALSE 7473
// end ; ComMoveXY ( un , x , y ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_VAR 0 5
7641: PPUSH
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 111
// Wait ( 0 0$1 ) ;
7651: LD_INT 35
7653: PPUSH
7654: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_INT 81
7665: PUSH
7666: LD_VAR 0 1
7670: PPUSH
7671: CALL_OW 255
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PPUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 74
7694: PPUSH
7695: CALL_OW 296
7699: PUSH
7700: LD_INT 10
7702: GREATEREQUAL
7703: IFFALSE 7716
// begin ComStop ( un ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 141
// break ;
7714: GO 7718
// end ; end ;
7716: GO 7345
// end ; end_of_file end_of_file
7718: LD_VAR 0 2
7722: RET
// export globalGameSaveCounter ; every 0 0$1 do
7723: GO 7725
7725: DISABLE
// begin enable ;
7726: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7727: LD_STRING updateTimer(
7729: PUSH
7730: LD_OWVAR 1
7734: STR
7735: PUSH
7736: LD_STRING );
7738: STR
7739: PPUSH
7740: CALL_OW 559
// end ;
7744: END
// every 0 0$1 do
7745: GO 7747
7747: DISABLE
// begin globalGameSaveCounter := 0 ;
7748: LD_ADDR_EXP 19
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7756: LD_STRING setGameSaveCounter(0)
7758: PPUSH
7759: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7763: LD_STRING initStreamRollete();
7765: PPUSH
7766: CALL_OW 559
// InitStreamMode ;
7770: CALL 9096 0 0
// DefineStreamItems ( false ) ;
7774: LD_INT 0
7776: PPUSH
7777: CALL 9560 0 1
// end ;
7781: END
// export function SOS_MapStart ( ) ; begin
7782: LD_INT 0
7784: PPUSH
// if streamModeActive then
7785: LD_EXP 20
7789: IFFALSE 7798
// DefineStreamItems ( true ) ;
7791: LD_INT 1
7793: PPUSH
7794: CALL 9560 0 1
// UpdateLuaVariables ( ) ;
7798: CALL 7815 0 0
// UpdateFactoryWaypoints ( ) ;
7802: CALL 22429 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7806: CALL 22686 0 0
// end ;
7810: LD_VAR 0 1
7814: RET
// function UpdateLuaVariables ( ) ; begin
7815: LD_INT 0
7817: PPUSH
// if globalGameSaveCounter then
7818: LD_EXP 19
7822: IFFALSE 7856
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7824: LD_ADDR_EXP 19
7828: PUSH
7829: LD_EXP 19
7833: PPUSH
7834: CALL 62207 0 1
7838: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7839: LD_STRING setGameSaveCounter(
7841: PUSH
7842: LD_EXP 19
7846: STR
7847: PUSH
7848: LD_STRING )
7850: STR
7851: PPUSH
7852: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7856: LD_STRING setGameDifficulty(
7858: PUSH
7859: LD_OWVAR 67
7863: STR
7864: PUSH
7865: LD_STRING )
7867: STR
7868: PPUSH
7869: CALL_OW 559
// end ;
7873: LD_VAR 0 1
7877: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7878: LD_INT 0
7880: PPUSH
// if p2 = stream_mode then
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 100
7888: EQUAL
7889: IFFALSE 8892
// begin if not StreamModeActive then
7891: LD_EXP 20
7895: NOT
7896: IFFALSE 7906
// StreamModeActive := true ;
7898: LD_ADDR_EXP 20
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 0 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 0
7913: EQUAL
7914: IFFALSE 7920
// InitStreamMode ;
7916: CALL 9096 0 0
// if p3 = 1 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: EQUAL
7928: IFFALSE 7938
// sRocket := true ;
7930: LD_ADDR_EXP 25
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 2 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 2
7945: EQUAL
7946: IFFALSE 7956
// sSpeed := true ;
7948: LD_ADDR_EXP 24
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 3 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: IFFALSE 7974
// sEngine := true ;
7966: LD_ADDR_EXP 26
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 4 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 4
7981: EQUAL
7982: IFFALSE 7992
// sSpec := true ;
7984: LD_ADDR_EXP 23
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 5 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 5
7999: EQUAL
8000: IFFALSE 8010
// sLevel := true ;
8002: LD_ADDR_EXP 27
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 6 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 6
8017: EQUAL
8018: IFFALSE 8028
// sArmoury := true ;
8020: LD_ADDR_EXP 28
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 7 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 7
8035: EQUAL
8036: IFFALSE 8046
// sRadar := true ;
8038: LD_ADDR_EXP 29
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 8 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 8
8053: EQUAL
8054: IFFALSE 8064
// sBunker := true ;
8056: LD_ADDR_EXP 30
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 9 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 9
8071: EQUAL
8072: IFFALSE 8082
// sHack := true ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 10 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 10
8089: EQUAL
8090: IFFALSE 8100
// sFire := true ;
8092: LD_ADDR_EXP 32
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 11 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 11
8107: EQUAL
8108: IFFALSE 8118
// sRefresh := true ;
8110: LD_ADDR_EXP 33
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 12 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 12
8125: EQUAL
8126: IFFALSE 8136
// sExp := true ;
8128: LD_ADDR_EXP 34
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 13 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 13
8143: EQUAL
8144: IFFALSE 8154
// sDepot := true ;
8146: LD_ADDR_EXP 35
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 14 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 14
8161: EQUAL
8162: IFFALSE 8172
// sFlag := true ;
8164: LD_ADDR_EXP 36
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// if p3 = 15 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 15
8179: EQUAL
8180: IFFALSE 8190
// sKamikadze := true ;
8182: LD_ADDR_EXP 44
8186: PUSH
8187: LD_INT 1
8189: ST_TO_ADDR
// if p3 = 16 then
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 16
8197: EQUAL
8198: IFFALSE 8208
// sTroll := true ;
8200: LD_ADDR_EXP 45
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// if p3 = 17 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 17
8215: EQUAL
8216: IFFALSE 8226
// sSlow := true ;
8218: LD_ADDR_EXP 46
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// if p3 = 18 then
8226: LD_VAR 0 3
8230: PUSH
8231: LD_INT 18
8233: EQUAL
8234: IFFALSE 8244
// sLack := true ;
8236: LD_ADDR_EXP 47
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// if p3 = 19 then
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 19
8251: EQUAL
8252: IFFALSE 8262
// sTank := true ;
8254: LD_ADDR_EXP 49
8258: PUSH
8259: LD_INT 1
8261: ST_TO_ADDR
// if p3 = 20 then
8262: LD_VAR 0 3
8266: PUSH
8267: LD_INT 20
8269: EQUAL
8270: IFFALSE 8280
// sRemote := true ;
8272: LD_ADDR_EXP 50
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// if p3 = 21 then
8280: LD_VAR 0 3
8284: PUSH
8285: LD_INT 21
8287: EQUAL
8288: IFFALSE 8298
// sPowell := true ;
8290: LD_ADDR_EXP 51
8294: PUSH
8295: LD_INT 1
8297: ST_TO_ADDR
// if p3 = 22 then
8298: LD_VAR 0 3
8302: PUSH
8303: LD_INT 22
8305: EQUAL
8306: IFFALSE 8316
// sTeleport := true ;
8308: LD_ADDR_EXP 54
8312: PUSH
8313: LD_INT 1
8315: ST_TO_ADDR
// if p3 = 23 then
8316: LD_VAR 0 3
8320: PUSH
8321: LD_INT 23
8323: EQUAL
8324: IFFALSE 8334
// sOilTower := true ;
8326: LD_ADDR_EXP 56
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// if p3 = 24 then
8334: LD_VAR 0 3
8338: PUSH
8339: LD_INT 24
8341: EQUAL
8342: IFFALSE 8352
// sShovel := true ;
8344: LD_ADDR_EXP 57
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// if p3 = 25 then
8352: LD_VAR 0 3
8356: PUSH
8357: LD_INT 25
8359: EQUAL
8360: IFFALSE 8370
// sSheik := true ;
8362: LD_ADDR_EXP 58
8366: PUSH
8367: LD_INT 1
8369: ST_TO_ADDR
// if p3 = 26 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 26
8377: EQUAL
8378: IFFALSE 8388
// sEarthquake := true ;
8380: LD_ADDR_EXP 60
8384: PUSH
8385: LD_INT 1
8387: ST_TO_ADDR
// if p3 = 27 then
8388: LD_VAR 0 3
8392: PUSH
8393: LD_INT 27
8395: EQUAL
8396: IFFALSE 8406
// sAI := true ;
8398: LD_ADDR_EXP 61
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// if p3 = 28 then
8406: LD_VAR 0 3
8410: PUSH
8411: LD_INT 28
8413: EQUAL
8414: IFFALSE 8424
// sCargo := true ;
8416: LD_ADDR_EXP 64
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// if p3 = 29 then
8424: LD_VAR 0 3
8428: PUSH
8429: LD_INT 29
8431: EQUAL
8432: IFFALSE 8442
// sDLaser := true ;
8434: LD_ADDR_EXP 65
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// if p3 = 30 then
8442: LD_VAR 0 3
8446: PUSH
8447: LD_INT 30
8449: EQUAL
8450: IFFALSE 8460
// sExchange := true ;
8452: LD_ADDR_EXP 66
8456: PUSH
8457: LD_INT 1
8459: ST_TO_ADDR
// if p3 = 31 then
8460: LD_VAR 0 3
8464: PUSH
8465: LD_INT 31
8467: EQUAL
8468: IFFALSE 8478
// sFac := true ;
8470: LD_ADDR_EXP 67
8474: PUSH
8475: LD_INT 1
8477: ST_TO_ADDR
// if p3 = 32 then
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 32
8485: EQUAL
8486: IFFALSE 8496
// sPower := true ;
8488: LD_ADDR_EXP 68
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// if p3 = 33 then
8496: LD_VAR 0 3
8500: PUSH
8501: LD_INT 33
8503: EQUAL
8504: IFFALSE 8514
// sRandom := true ;
8506: LD_ADDR_EXP 69
8510: PUSH
8511: LD_INT 1
8513: ST_TO_ADDR
// if p3 = 34 then
8514: LD_VAR 0 3
8518: PUSH
8519: LD_INT 34
8521: EQUAL
8522: IFFALSE 8532
// sShield := true ;
8524: LD_ADDR_EXP 70
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// if p3 = 35 then
8532: LD_VAR 0 3
8536: PUSH
8537: LD_INT 35
8539: EQUAL
8540: IFFALSE 8550
// sTime := true ;
8542: LD_ADDR_EXP 71
8546: PUSH
8547: LD_INT 1
8549: ST_TO_ADDR
// if p3 = 36 then
8550: LD_VAR 0 3
8554: PUSH
8555: LD_INT 36
8557: EQUAL
8558: IFFALSE 8568
// sTools := true ;
8560: LD_ADDR_EXP 72
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// if p3 = 101 then
8568: LD_VAR 0 3
8572: PUSH
8573: LD_INT 101
8575: EQUAL
8576: IFFALSE 8586
// sSold := true ;
8578: LD_ADDR_EXP 37
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// if p3 = 102 then
8586: LD_VAR 0 3
8590: PUSH
8591: LD_INT 102
8593: EQUAL
8594: IFFALSE 8604
// sDiff := true ;
8596: LD_ADDR_EXP 38
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// if p3 = 103 then
8604: LD_VAR 0 3
8608: PUSH
8609: LD_INT 103
8611: EQUAL
8612: IFFALSE 8622
// sFog := true ;
8614: LD_ADDR_EXP 41
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// if p3 = 104 then
8622: LD_VAR 0 3
8626: PUSH
8627: LD_INT 104
8629: EQUAL
8630: IFFALSE 8640
// sReset := true ;
8632: LD_ADDR_EXP 42
8636: PUSH
8637: LD_INT 1
8639: ST_TO_ADDR
// if p3 = 105 then
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 105
8647: EQUAL
8648: IFFALSE 8658
// sSun := true ;
8650: LD_ADDR_EXP 43
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// if p3 = 106 then
8658: LD_VAR 0 3
8662: PUSH
8663: LD_INT 106
8665: EQUAL
8666: IFFALSE 8676
// sTiger := true ;
8668: LD_ADDR_EXP 39
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// if p3 = 107 then
8676: LD_VAR 0 3
8680: PUSH
8681: LD_INT 107
8683: EQUAL
8684: IFFALSE 8694
// sBomb := true ;
8686: LD_ADDR_EXP 40
8690: PUSH
8691: LD_INT 1
8693: ST_TO_ADDR
// if p3 = 108 then
8694: LD_VAR 0 3
8698: PUSH
8699: LD_INT 108
8701: EQUAL
8702: IFFALSE 8712
// sWound := true ;
8704: LD_ADDR_EXP 48
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// if p3 = 109 then
8712: LD_VAR 0 3
8716: PUSH
8717: LD_INT 109
8719: EQUAL
8720: IFFALSE 8730
// sBetray := true ;
8722: LD_ADDR_EXP 52
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// if p3 = 110 then
8730: LD_VAR 0 3
8734: PUSH
8735: LD_INT 110
8737: EQUAL
8738: IFFALSE 8748
// sContamin := true ;
8740: LD_ADDR_EXP 53
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if p3 = 111 then
8748: LD_VAR 0 3
8752: PUSH
8753: LD_INT 111
8755: EQUAL
8756: IFFALSE 8766
// sOil := true ;
8758: LD_ADDR_EXP 55
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// if p3 = 112 then
8766: LD_VAR 0 3
8770: PUSH
8771: LD_INT 112
8773: EQUAL
8774: IFFALSE 8784
// sStu := true ;
8776: LD_ADDR_EXP 59
8780: PUSH
8781: LD_INT 1
8783: ST_TO_ADDR
// if p3 = 113 then
8784: LD_VAR 0 3
8788: PUSH
8789: LD_INT 113
8791: EQUAL
8792: IFFALSE 8802
// sBazooka := true ;
8794: LD_ADDR_EXP 62
8798: PUSH
8799: LD_INT 1
8801: ST_TO_ADDR
// if p3 = 114 then
8802: LD_VAR 0 3
8806: PUSH
8807: LD_INT 114
8809: EQUAL
8810: IFFALSE 8820
// sMortar := true ;
8812: LD_ADDR_EXP 63
8816: PUSH
8817: LD_INT 1
8819: ST_TO_ADDR
// if p3 = 115 then
8820: LD_VAR 0 3
8824: PUSH
8825: LD_INT 115
8827: EQUAL
8828: IFFALSE 8838
// sRanger := true ;
8830: LD_ADDR_EXP 73
8834: PUSH
8835: LD_INT 1
8837: ST_TO_ADDR
// if p3 = 116 then
8838: LD_VAR 0 3
8842: PUSH
8843: LD_INT 116
8845: EQUAL
8846: IFFALSE 8856
// sComputer := true ;
8848: LD_ADDR_EXP 74
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// if p3 = 117 then
8856: LD_VAR 0 3
8860: PUSH
8861: LD_INT 117
8863: EQUAL
8864: IFFALSE 8874
// s30 := true ;
8866: LD_ADDR_EXP 75
8870: PUSH
8871: LD_INT 1
8873: ST_TO_ADDR
// if p3 = 118 then
8874: LD_VAR 0 3
8878: PUSH
8879: LD_INT 118
8881: EQUAL
8882: IFFALSE 8892
// s60 := true ;
8884: LD_ADDR_EXP 76
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// end ; if p2 = hack_mode then
8892: LD_VAR 0 2
8896: PUSH
8897: LD_INT 101
8899: EQUAL
8900: IFFALSE 9028
// begin case p3 of 1 :
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 1
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8922
8915: POP
// hHackUnlimitedResources ; 2 :
8916: CALL 21175 0 0
8920: GO 9028
8922: LD_INT 2
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8937
8930: POP
// hHackSetLevel10 ; 3 :
8931: CALL 21308 0 0
8935: GO 9028
8937: LD_INT 3
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8952
8945: POP
// hHackSetLevel10YourUnits ; 4 :
8946: CALL 21393 0 0
8950: GO 9028
8952: LD_INT 4
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8967
8960: POP
// hHackInvincible ; 5 :
8961: CALL 21841 0 0
8965: GO 9028
8967: LD_INT 5
8969: DOUBLE
8970: EQUAL
8971: IFTRUE 8975
8973: GO 8982
8975: POP
// hHackInvisible ; 6 :
8976: CALL 21952 0 0
8980: GO 9028
8982: LD_INT 6
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 8997
8990: POP
// hHackChangeYourSide ; 7 :
8991: CALL 22009 0 0
8995: GO 9028
8997: LD_INT 7
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9012
9005: POP
// hHackChangeUnitSide ; 8 :
9006: CALL 22051 0 0
9010: GO 9028
9012: LD_INT 8
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9027
9020: POP
// hHackFog ; end ;
9021: CALL 22152 0 0
9025: GO 9028
9027: POP
// end ; if p2 = game_save_mode then
9028: LD_VAR 0 2
9032: PUSH
9033: LD_INT 102
9035: EQUAL
9036: IFFALSE 9091
// begin if p3 = 1 then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_INT 1
9045: EQUAL
9046: IFFALSE 9058
// globalGameSaveCounter := p4 ;
9048: LD_ADDR_EXP 19
9052: PUSH
9053: LD_VAR 0 4
9057: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 2
9065: EQUAL
9066: PUSH
9067: LD_EXP 19
9071: AND
9072: IFFALSE 9091
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9074: LD_STRING setGameSaveCounter(
9076: PUSH
9077: LD_EXP 19
9081: STR
9082: PUSH
9083: LD_STRING )
9085: STR
9086: PPUSH
9087: CALL_OW 559
// end ; end ;
9091: LD_VAR 0 7
9095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9096: LD_INT 0
9098: PPUSH
// streamModeActive := false ;
9099: LD_ADDR_EXP 20
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// normalCounter := 36 ;
9107: LD_ADDR_EXP 21
9111: PUSH
9112: LD_INT 36
9114: ST_TO_ADDR
// hardcoreCounter := 18 ;
9115: LD_ADDR_EXP 22
9119: PUSH
9120: LD_INT 18
9122: ST_TO_ADDR
// sRocket := false ;
9123: LD_ADDR_EXP 25
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// sSpeed := false ;
9131: LD_ADDR_EXP 24
9135: PUSH
9136: LD_INT 0
9138: ST_TO_ADDR
// sEngine := false ;
9139: LD_ADDR_EXP 26
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
// sSpec := false ;
9147: LD_ADDR_EXP 23
9151: PUSH
9152: LD_INT 0
9154: ST_TO_ADDR
// sLevel := false ;
9155: LD_ADDR_EXP 27
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// sArmoury := false ;
9163: LD_ADDR_EXP 28
9167: PUSH
9168: LD_INT 0
9170: ST_TO_ADDR
// sRadar := false ;
9171: LD_ADDR_EXP 29
9175: PUSH
9176: LD_INT 0
9178: ST_TO_ADDR
// sBunker := false ;
9179: LD_ADDR_EXP 30
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// sHack := false ;
9187: LD_ADDR_EXP 31
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// sFire := false ;
9195: LD_ADDR_EXP 32
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// sRefresh := false ;
9203: LD_ADDR_EXP 33
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// sExp := false ;
9211: LD_ADDR_EXP 34
9215: PUSH
9216: LD_INT 0
9218: ST_TO_ADDR
// sDepot := false ;
9219: LD_ADDR_EXP 35
9223: PUSH
9224: LD_INT 0
9226: ST_TO_ADDR
// sFlag := false ;
9227: LD_ADDR_EXP 36
9231: PUSH
9232: LD_INT 0
9234: ST_TO_ADDR
// sKamikadze := false ;
9235: LD_ADDR_EXP 44
9239: PUSH
9240: LD_INT 0
9242: ST_TO_ADDR
// sTroll := false ;
9243: LD_ADDR_EXP 45
9247: PUSH
9248: LD_INT 0
9250: ST_TO_ADDR
// sSlow := false ;
9251: LD_ADDR_EXP 46
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// sLack := false ;
9259: LD_ADDR_EXP 47
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// sTank := false ;
9267: LD_ADDR_EXP 49
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// sRemote := false ;
9275: LD_ADDR_EXP 50
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// sPowell := false ;
9283: LD_ADDR_EXP 51
9287: PUSH
9288: LD_INT 0
9290: ST_TO_ADDR
// sTeleport := false ;
9291: LD_ADDR_EXP 54
9295: PUSH
9296: LD_INT 0
9298: ST_TO_ADDR
// sOilTower := false ;
9299: LD_ADDR_EXP 56
9303: PUSH
9304: LD_INT 0
9306: ST_TO_ADDR
// sShovel := false ;
9307: LD_ADDR_EXP 57
9311: PUSH
9312: LD_INT 0
9314: ST_TO_ADDR
// sSheik := false ;
9315: LD_ADDR_EXP 58
9319: PUSH
9320: LD_INT 0
9322: ST_TO_ADDR
// sEarthquake := false ;
9323: LD_ADDR_EXP 60
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// sAI := false ;
9331: LD_ADDR_EXP 61
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// sCargo := false ;
9339: LD_ADDR_EXP 64
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// sDLaser := false ;
9347: LD_ADDR_EXP 65
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// sExchange := false ;
9355: LD_ADDR_EXP 66
9359: PUSH
9360: LD_INT 0
9362: ST_TO_ADDR
// sFac := false ;
9363: LD_ADDR_EXP 67
9367: PUSH
9368: LD_INT 0
9370: ST_TO_ADDR
// sPower := false ;
9371: LD_ADDR_EXP 68
9375: PUSH
9376: LD_INT 0
9378: ST_TO_ADDR
// sRandom := false ;
9379: LD_ADDR_EXP 69
9383: PUSH
9384: LD_INT 0
9386: ST_TO_ADDR
// sShield := false ;
9387: LD_ADDR_EXP 70
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// sTime := false ;
9395: LD_ADDR_EXP 71
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// sTools := false ;
9403: LD_ADDR_EXP 72
9407: PUSH
9408: LD_INT 0
9410: ST_TO_ADDR
// sSold := false ;
9411: LD_ADDR_EXP 37
9415: PUSH
9416: LD_INT 0
9418: ST_TO_ADDR
// sDiff := false ;
9419: LD_ADDR_EXP 38
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// sFog := false ;
9427: LD_ADDR_EXP 41
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// sReset := false ;
9435: LD_ADDR_EXP 42
9439: PUSH
9440: LD_INT 0
9442: ST_TO_ADDR
// sSun := false ;
9443: LD_ADDR_EXP 43
9447: PUSH
9448: LD_INT 0
9450: ST_TO_ADDR
// sTiger := false ;
9451: LD_ADDR_EXP 39
9455: PUSH
9456: LD_INT 0
9458: ST_TO_ADDR
// sBomb := false ;
9459: LD_ADDR_EXP 40
9463: PUSH
9464: LD_INT 0
9466: ST_TO_ADDR
// sWound := false ;
9467: LD_ADDR_EXP 48
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// sBetray := false ;
9475: LD_ADDR_EXP 52
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// sContamin := false ;
9483: LD_ADDR_EXP 53
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// sOil := false ;
9491: LD_ADDR_EXP 55
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// sStu := false ;
9499: LD_ADDR_EXP 59
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// sBazooka := false ;
9507: LD_ADDR_EXP 62
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// sMortar := false ;
9515: LD_ADDR_EXP 63
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// sRanger := false ;
9523: LD_ADDR_EXP 73
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// sComputer := false ;
9531: LD_ADDR_EXP 74
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// s30 := false ;
9539: LD_ADDR_EXP 75
9543: PUSH
9544: LD_INT 0
9546: ST_TO_ADDR
// s60 := false ;
9547: LD_ADDR_EXP 76
9551: PUSH
9552: LD_INT 0
9554: ST_TO_ADDR
// end ;
9555: LD_VAR 0 1
9559: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
// result := [ ] ;
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: EMPTY
9575: ST_TO_ADDR
// if campaign_id = 1 then
9576: LD_OWVAR 69
9580: PUSH
9581: LD_INT 1
9583: EQUAL
9584: IFFALSE 12750
// begin case mission_number of 1 :
9586: LD_OWVAR 70
9590: PUSH
9591: LD_INT 1
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9675
9599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 11
9613: PUSH
9614: LD_INT 12
9616: PUSH
9617: LD_INT 15
9619: PUSH
9620: LD_INT 16
9622: PUSH
9623: LD_INT 22
9625: PUSH
9626: LD_INT 23
9628: PUSH
9629: LD_INT 26
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: ST_TO_ADDR
9673: GO 12748
9675: LD_INT 2
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9767
9683: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9684: LD_ADDR_VAR 0 2
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 15
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 101
9729: PUSH
9730: LD_INT 102
9732: PUSH
9733: LD_INT 105
9735: PUSH
9736: LD_INT 106
9738: PUSH
9739: LD_INT 108
9741: PUSH
9742: LD_INT 116
9744: PUSH
9745: LD_INT 117
9747: PUSH
9748: LD_INT 118
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: ST_TO_ADDR
9765: GO 12748
9767: LD_INT 3
9769: DOUBLE
9770: EQUAL
9771: IFTRUE 9775
9773: GO 9863
9775: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 11
9792: PUSH
9793: LD_INT 12
9795: PUSH
9796: LD_INT 15
9798: PUSH
9799: LD_INT 16
9801: PUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 36
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 101
9825: PUSH
9826: LD_INT 102
9828: PUSH
9829: LD_INT 105
9831: PUSH
9832: LD_INT 106
9834: PUSH
9835: LD_INT 108
9837: PUSH
9838: LD_INT 116
9840: PUSH
9841: LD_INT 117
9843: PUSH
9844: LD_INT 118
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: ST_TO_ADDR
9861: GO 12748
9863: LD_INT 4
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9967
9871: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9872: LD_ADDR_VAR 0 2
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 4
9882: PUSH
9883: LD_INT 5
9885: PUSH
9886: LD_INT 8
9888: PUSH
9889: LD_INT 11
9891: PUSH
9892: LD_INT 12
9894: PUSH
9895: LD_INT 15
9897: PUSH
9898: LD_INT 16
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 23
9906: PUSH
9907: LD_INT 26
9909: PUSH
9910: LD_INT 36
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 105
9935: PUSH
9936: LD_INT 106
9938: PUSH
9939: LD_INT 108
9941: PUSH
9942: LD_INT 116
9944: PUSH
9945: LD_INT 117
9947: PUSH
9948: LD_INT 118
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: ST_TO_ADDR
9965: GO 12748
9967: LD_INT 5
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10087
9975: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 4
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 8
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 15
10004: PUSH
10005: LD_INT 16
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 23
10013: PUSH
10014: LD_INT 25
10016: PUSH
10017: LD_INT 26
10019: PUSH
10020: LD_INT 36
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 101
10041: PUSH
10042: LD_INT 102
10044: PUSH
10045: LD_INT 105
10047: PUSH
10048: LD_INT 106
10050: PUSH
10051: LD_INT 108
10053: PUSH
10054: LD_INT 109
10056: PUSH
10057: LD_INT 112
10059: PUSH
10060: LD_INT 116
10062: PUSH
10063: LD_INT 117
10065: PUSH
10066: LD_INT 118
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: ST_TO_ADDR
10085: GO 12748
10087: LD_INT 6
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10227
10095: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10096: LD_ADDR_VAR 0 2
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 4
10106: PUSH
10107: LD_INT 5
10109: PUSH
10110: LD_INT 6
10112: PUSH
10113: LD_INT 8
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 15
10124: PUSH
10125: LD_INT 16
10127: PUSH
10128: LD_INT 20
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 22
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 26
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 31
10151: PUSH
10152: LD_INT 32
10154: PUSH
10155: LD_INT 36
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 101
10181: PUSH
10182: LD_INT 102
10184: PUSH
10185: LD_INT 105
10187: PUSH
10188: LD_INT 106
10190: PUSH
10191: LD_INT 108
10193: PUSH
10194: LD_INT 109
10196: PUSH
10197: LD_INT 112
10199: PUSH
10200: LD_INT 116
10202: PUSH
10203: LD_INT 117
10205: PUSH
10206: LD_INT 118
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: ST_TO_ADDR
10225: GO 12748
10227: LD_INT 7
10229: DOUBLE
10230: EQUAL
10231: IFTRUE 10235
10233: GO 10347
10235: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 4
10246: PUSH
10247: LD_INT 5
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: LD_INT 11
10255: PUSH
10256: LD_INT 12
10258: PUSH
10259: LD_INT 15
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 101
10301: PUSH
10302: LD_INT 102
10304: PUSH
10305: LD_INT 103
10307: PUSH
10308: LD_INT 105
10310: PUSH
10311: LD_INT 106
10313: PUSH
10314: LD_INT 108
10316: PUSH
10317: LD_INT 112
10319: PUSH
10320: LD_INT 116
10322: PUSH
10323: LD_INT 117
10325: PUSH
10326: LD_INT 118
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: ST_TO_ADDR
10345: GO 12748
10347: LD_INT 8
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10495
10355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 4
10366: PUSH
10367: LD_INT 5
10369: PUSH
10370: LD_INT 6
10372: PUSH
10373: LD_INT 7
10375: PUSH
10376: LD_INT 8
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 12
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 20
10393: PUSH
10394: LD_INT 21
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 23
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: LD_INT 30
10411: PUSH
10412: LD_INT 31
10414: PUSH
10415: LD_INT 32
10417: PUSH
10418: LD_INT 36
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 101
10445: PUSH
10446: LD_INT 102
10448: PUSH
10449: LD_INT 103
10451: PUSH
10452: LD_INT 105
10454: PUSH
10455: LD_INT 106
10457: PUSH
10458: LD_INT 108
10460: PUSH
10461: LD_INT 109
10463: PUSH
10464: LD_INT 112
10466: PUSH
10467: LD_INT 116
10469: PUSH
10470: LD_INT 117
10472: PUSH
10473: LD_INT 118
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: ST_TO_ADDR
10493: GO 12748
10495: LD_INT 9
10497: DOUBLE
10498: EQUAL
10499: IFTRUE 10503
10501: GO 10651
10503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: LD_INT 5
10517: PUSH
10518: LD_INT 6
10520: PUSH
10521: LD_INT 7
10523: PUSH
10524: LD_INT 8
10526: PUSH
10527: LD_INT 11
10529: PUSH
10530: LD_INT 12
10532: PUSH
10533: LD_INT 15
10535: PUSH
10536: LD_INT 16
10538: PUSH
10539: LD_INT 20
10541: PUSH
10542: LD_INT 21
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 25
10553: PUSH
10554: LD_INT 26
10556: PUSH
10557: LD_INT 28
10559: PUSH
10560: LD_INT 30
10562: PUSH
10563: LD_INT 31
10565: PUSH
10566: LD_INT 32
10568: PUSH
10569: LD_INT 36
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 101
10597: PUSH
10598: LD_INT 102
10600: PUSH
10601: LD_INT 103
10603: PUSH
10604: LD_INT 105
10606: PUSH
10607: LD_INT 106
10609: PUSH
10610: LD_INT 108
10612: PUSH
10613: LD_INT 109
10615: PUSH
10616: LD_INT 112
10618: PUSH
10619: LD_INT 114
10621: PUSH
10622: LD_INT 116
10624: PUSH
10625: LD_INT 117
10627: PUSH
10628: LD_INT 118
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 12748
10651: LD_INT 10
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10855
10659: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10660: LD_ADDR_VAR 0 2
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 6
10676: PUSH
10677: LD_INT 7
10679: PUSH
10680: LD_INT 8
10682: PUSH
10683: LD_INT 9
10685: PUSH
10686: LD_INT 10
10688: PUSH
10689: LD_INT 11
10691: PUSH
10692: LD_INT 12
10694: PUSH
10695: LD_INT 13
10697: PUSH
10698: LD_INT 14
10700: PUSH
10701: LD_INT 15
10703: PUSH
10704: LD_INT 16
10706: PUSH
10707: LD_INT 17
10709: PUSH
10710: LD_INT 18
10712: PUSH
10713: LD_INT 19
10715: PUSH
10716: LD_INT 20
10718: PUSH
10719: LD_INT 21
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_INT 23
10727: PUSH
10728: LD_INT 24
10730: PUSH
10731: LD_INT 25
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_INT 31
10745: PUSH
10746: LD_INT 32
10748: PUSH
10749: LD_INT 36
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 101
10785: PUSH
10786: LD_INT 102
10788: PUSH
10789: LD_INT 103
10791: PUSH
10792: LD_INT 104
10794: PUSH
10795: LD_INT 105
10797: PUSH
10798: LD_INT 106
10800: PUSH
10801: LD_INT 107
10803: PUSH
10804: LD_INT 108
10806: PUSH
10807: LD_INT 109
10809: PUSH
10810: LD_INT 110
10812: PUSH
10813: LD_INT 111
10815: PUSH
10816: LD_INT 112
10818: PUSH
10819: LD_INT 114
10821: PUSH
10822: LD_INT 116
10824: PUSH
10825: LD_INT 117
10827: PUSH
10828: LD_INT 118
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: ST_TO_ADDR
10853: GO 12748
10855: LD_INT 11
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 11067
10863: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 3
10874: PUSH
10875: LD_INT 4
10877: PUSH
10878: LD_INT 5
10880: PUSH
10881: LD_INT 6
10883: PUSH
10884: LD_INT 7
10886: PUSH
10887: LD_INT 8
10889: PUSH
10890: LD_INT 9
10892: PUSH
10893: LD_INT 10
10895: PUSH
10896: LD_INT 11
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: LD_INT 13
10904: PUSH
10905: LD_INT 14
10907: PUSH
10908: LD_INT 15
10910: PUSH
10911: LD_INT 16
10913: PUSH
10914: LD_INT 17
10916: PUSH
10917: LD_INT 18
10919: PUSH
10920: LD_INT 19
10922: PUSH
10923: LD_INT 20
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 23
10934: PUSH
10935: LD_INT 24
10937: PUSH
10938: LD_INT 25
10940: PUSH
10941: LD_INT 26
10943: PUSH
10944: LD_INT 28
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 102
11000: PUSH
11001: LD_INT 103
11003: PUSH
11004: LD_INT 104
11006: PUSH
11007: LD_INT 105
11009: PUSH
11010: LD_INT 106
11012: PUSH
11013: LD_INT 107
11015: PUSH
11016: LD_INT 108
11018: PUSH
11019: LD_INT 109
11021: PUSH
11022: LD_INT 110
11024: PUSH
11025: LD_INT 111
11027: PUSH
11028: LD_INT 112
11030: PUSH
11031: LD_INT 114
11033: PUSH
11034: LD_INT 116
11036: PUSH
11037: LD_INT 117
11039: PUSH
11040: LD_INT 118
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: ST_TO_ADDR
11065: GO 12748
11067: LD_INT 12
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11295
11075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: LD_INT 4
11092: PUSH
11093: LD_INT 5
11095: PUSH
11096: LD_INT 6
11098: PUSH
11099: LD_INT 7
11101: PUSH
11102: LD_INT 8
11104: PUSH
11105: LD_INT 9
11107: PUSH
11108: LD_INT 10
11110: PUSH
11111: LD_INT 11
11113: PUSH
11114: LD_INT 12
11116: PUSH
11117: LD_INT 13
11119: PUSH
11120: LD_INT 14
11122: PUSH
11123: LD_INT 15
11125: PUSH
11126: LD_INT 16
11128: PUSH
11129: LD_INT 17
11131: PUSH
11132: LD_INT 18
11134: PUSH
11135: LD_INT 19
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_INT 23
11149: PUSH
11150: LD_INT 24
11152: PUSH
11153: LD_INT 25
11155: PUSH
11156: LD_INT 26
11158: PUSH
11159: LD_INT 27
11161: PUSH
11162: LD_INT 28
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 31
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: LD_INT 33
11176: PUSH
11177: LD_INT 34
11179: PUSH
11180: LD_INT 36
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 102
11224: PUSH
11225: LD_INT 103
11227: PUSH
11228: LD_INT 104
11230: PUSH
11231: LD_INT 105
11233: PUSH
11234: LD_INT 106
11236: PUSH
11237: LD_INT 107
11239: PUSH
11240: LD_INT 108
11242: PUSH
11243: LD_INT 109
11245: PUSH
11246: LD_INT 110
11248: PUSH
11249: LD_INT 111
11251: PUSH
11252: LD_INT 112
11254: PUSH
11255: LD_INT 113
11257: PUSH
11258: LD_INT 114
11260: PUSH
11261: LD_INT 116
11263: PUSH
11264: LD_INT 117
11266: PUSH
11267: LD_INT 118
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: ST_TO_ADDR
11293: GO 12748
11295: LD_INT 13
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11511
11303: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: LD_INT 5
11323: PUSH
11324: LD_INT 8
11326: PUSH
11327: LD_INT 9
11329: PUSH
11330: LD_INT 10
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 15
11344: PUSH
11345: LD_INT 16
11347: PUSH
11348: LD_INT 17
11350: PUSH
11351: LD_INT 18
11353: PUSH
11354: LD_INT 19
11356: PUSH
11357: LD_INT 20
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 23
11368: PUSH
11369: LD_INT 24
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: LD_INT 27
11380: PUSH
11381: LD_INT 28
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 36
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 101
11437: PUSH
11438: LD_INT 102
11440: PUSH
11441: LD_INT 103
11443: PUSH
11444: LD_INT 104
11446: PUSH
11447: LD_INT 105
11449: PUSH
11450: LD_INT 106
11452: PUSH
11453: LD_INT 107
11455: PUSH
11456: LD_INT 108
11458: PUSH
11459: LD_INT 109
11461: PUSH
11462: LD_INT 110
11464: PUSH
11465: LD_INT 111
11467: PUSH
11468: LD_INT 112
11470: PUSH
11471: LD_INT 113
11473: PUSH
11474: LD_INT 114
11476: PUSH
11477: LD_INT 116
11479: PUSH
11480: LD_INT 117
11482: PUSH
11483: LD_INT 118
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 12748
11511: LD_INT 14
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11743
11519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: LD_INT 5
11539: PUSH
11540: LD_INT 6
11542: PUSH
11543: LD_INT 7
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: LD_INT 9
11551: PUSH
11552: LD_INT 10
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: LD_INT 12
11560: PUSH
11561: LD_INT 13
11563: PUSH
11564: LD_INT 14
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 17
11575: PUSH
11576: LD_INT 18
11578: PUSH
11579: LD_INT 19
11581: PUSH
11582: LD_INT 20
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 23
11593: PUSH
11594: LD_INT 24
11596: PUSH
11597: LD_INT 25
11599: PUSH
11600: LD_INT 26
11602: PUSH
11603: LD_INT 27
11605: PUSH
11606: LD_INT 28
11608: PUSH
11609: LD_INT 29
11611: PUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 31
11617: PUSH
11618: LD_INT 32
11620: PUSH
11621: LD_INT 33
11623: PUSH
11624: LD_INT 34
11626: PUSH
11627: LD_INT 36
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 101
11669: PUSH
11670: LD_INT 102
11672: PUSH
11673: LD_INT 103
11675: PUSH
11676: LD_INT 104
11678: PUSH
11679: LD_INT 105
11681: PUSH
11682: LD_INT 106
11684: PUSH
11685: LD_INT 107
11687: PUSH
11688: LD_INT 108
11690: PUSH
11691: LD_INT 109
11693: PUSH
11694: LD_INT 110
11696: PUSH
11697: LD_INT 111
11699: PUSH
11700: LD_INT 112
11702: PUSH
11703: LD_INT 113
11705: PUSH
11706: LD_INT 114
11708: PUSH
11709: LD_INT 116
11711: PUSH
11712: LD_INT 117
11714: PUSH
11715: LD_INT 118
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: ST_TO_ADDR
11741: GO 12748
11743: LD_INT 15
11745: DOUBLE
11746: EQUAL
11747: IFTRUE 11751
11749: GO 11975
11751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11752: LD_ADDR_VAR 0 2
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: LD_INT 3
11765: PUSH
11766: LD_INT 4
11768: PUSH
11769: LD_INT 5
11771: PUSH
11772: LD_INT 6
11774: PUSH
11775: LD_INT 7
11777: PUSH
11778: LD_INT 8
11780: PUSH
11781: LD_INT 9
11783: PUSH
11784: LD_INT 10
11786: PUSH
11787: LD_INT 11
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: LD_INT 13
11795: PUSH
11796: LD_INT 14
11798: PUSH
11799: LD_INT 15
11801: PUSH
11802: LD_INT 16
11804: PUSH
11805: LD_INT 17
11807: PUSH
11808: LD_INT 18
11810: PUSH
11811: LD_INT 19
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 23
11825: PUSH
11826: LD_INT 24
11828: PUSH
11829: LD_INT 25
11831: PUSH
11832: LD_INT 26
11834: PUSH
11835: LD_INT 27
11837: PUSH
11838: LD_INT 28
11840: PUSH
11841: LD_INT 29
11843: PUSH
11844: LD_INT 30
11846: PUSH
11847: LD_INT 31
11849: PUSH
11850: LD_INT 32
11852: PUSH
11853: LD_INT 33
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_INT 36
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 101
11901: PUSH
11902: LD_INT 102
11904: PUSH
11905: LD_INT 103
11907: PUSH
11908: LD_INT 104
11910: PUSH
11911: LD_INT 105
11913: PUSH
11914: LD_INT 106
11916: PUSH
11917: LD_INT 107
11919: PUSH
11920: LD_INT 108
11922: PUSH
11923: LD_INT 109
11925: PUSH
11926: LD_INT 110
11928: PUSH
11929: LD_INT 111
11931: PUSH
11932: LD_INT 112
11934: PUSH
11935: LD_INT 113
11937: PUSH
11938: LD_INT 114
11940: PUSH
11941: LD_INT 116
11943: PUSH
11944: LD_INT 117
11946: PUSH
11947: LD_INT 118
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: ST_TO_ADDR
11973: GO 12748
11975: LD_INT 16
11977: DOUBLE
11978: EQUAL
11979: IFTRUE 11983
11981: GO 12119
11983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 4
11994: PUSH
11995: LD_INT 5
11997: PUSH
11998: LD_INT 7
12000: PUSH
12001: LD_INT 11
12003: PUSH
12004: LD_INT 12
12006: PUSH
12007: LD_INT 15
12009: PUSH
12010: LD_INT 16
12012: PUSH
12013: LD_INT 20
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 23
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 26
12030: PUSH
12031: LD_INT 30
12033: PUSH
12034: LD_INT 31
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: LD_INT 33
12042: PUSH
12043: LD_INT 34
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 101
12069: PUSH
12070: LD_INT 102
12072: PUSH
12073: LD_INT 103
12075: PUSH
12076: LD_INT 106
12078: PUSH
12079: LD_INT 108
12081: PUSH
12082: LD_INT 112
12084: PUSH
12085: LD_INT 113
12087: PUSH
12088: LD_INT 114
12090: PUSH
12091: LD_INT 116
12093: PUSH
12094: LD_INT 117
12096: PUSH
12097: LD_INT 118
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: ST_TO_ADDR
12117: GO 12748
12119: LD_INT 17
12121: DOUBLE
12122: EQUAL
12123: IFTRUE 12127
12125: GO 12351
12127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: LD_INT 6
12150: PUSH
12151: LD_INT 7
12153: PUSH
12154: LD_INT 8
12156: PUSH
12157: LD_INT 9
12159: PUSH
12160: LD_INT 10
12162: PUSH
12163: LD_INT 11
12165: PUSH
12166: LD_INT 12
12168: PUSH
12169: LD_INT 13
12171: PUSH
12172: LD_INT 14
12174: PUSH
12175: LD_INT 15
12177: PUSH
12178: LD_INT 16
12180: PUSH
12181: LD_INT 17
12183: PUSH
12184: LD_INT 18
12186: PUSH
12187: LD_INT 19
12189: PUSH
12190: LD_INT 20
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 23
12201: PUSH
12202: LD_INT 24
12204: PUSH
12205: LD_INT 25
12207: PUSH
12208: LD_INT 26
12210: PUSH
12211: LD_INT 27
12213: PUSH
12214: LD_INT 28
12216: PUSH
12217: LD_INT 29
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 31
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 36
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 101
12277: PUSH
12278: LD_INT 102
12280: PUSH
12281: LD_INT 103
12283: PUSH
12284: LD_INT 104
12286: PUSH
12287: LD_INT 105
12289: PUSH
12290: LD_INT 106
12292: PUSH
12293: LD_INT 107
12295: PUSH
12296: LD_INT 108
12298: PUSH
12299: LD_INT 109
12301: PUSH
12302: LD_INT 110
12304: PUSH
12305: LD_INT 111
12307: PUSH
12308: LD_INT 112
12310: PUSH
12311: LD_INT 113
12313: PUSH
12314: LD_INT 114
12316: PUSH
12317: LD_INT 116
12319: PUSH
12320: LD_INT 117
12322: PUSH
12323: LD_INT 118
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: ST_TO_ADDR
12349: GO 12748
12351: LD_INT 18
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12507
12359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: LD_INT 4
12370: PUSH
12371: LD_INT 5
12373: PUSH
12374: LD_INT 7
12376: PUSH
12377: LD_INT 11
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: LD_INT 15
12385: PUSH
12386: LD_INT 16
12388: PUSH
12389: LD_INT 20
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 26
12406: PUSH
12407: LD_INT 30
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: LD_INT 32
12415: PUSH
12416: LD_INT 33
12418: PUSH
12419: LD_INT 34
12421: PUSH
12422: LD_INT 35
12424: PUSH
12425: LD_INT 36
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 101
12453: PUSH
12454: LD_INT 102
12456: PUSH
12457: LD_INT 103
12459: PUSH
12460: LD_INT 106
12462: PUSH
12463: LD_INT 108
12465: PUSH
12466: LD_INT 112
12468: PUSH
12469: LD_INT 113
12471: PUSH
12472: LD_INT 114
12474: PUSH
12475: LD_INT 115
12477: PUSH
12478: LD_INT 116
12480: PUSH
12481: LD_INT 117
12483: PUSH
12484: LD_INT 118
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12748
12507: LD_INT 19
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12747
12515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 7
12541: PUSH
12542: LD_INT 8
12544: PUSH
12545: LD_INT 9
12547: PUSH
12548: LD_INT 10
12550: PUSH
12551: LD_INT 11
12553: PUSH
12554: LD_INT 12
12556: PUSH
12557: LD_INT 13
12559: PUSH
12560: LD_INT 14
12562: PUSH
12563: LD_INT 15
12565: PUSH
12566: LD_INT 16
12568: PUSH
12569: LD_INT 17
12571: PUSH
12572: LD_INT 18
12574: PUSH
12575: LD_INT 19
12577: PUSH
12578: LD_INT 20
12580: PUSH
12581: LD_INT 21
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_INT 23
12589: PUSH
12590: LD_INT 24
12592: PUSH
12593: LD_INT 25
12595: PUSH
12596: LD_INT 26
12598: PUSH
12599: LD_INT 27
12601: PUSH
12602: LD_INT 28
12604: PUSH
12605: LD_INT 29
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 31
12613: PUSH
12614: LD_INT 32
12616: PUSH
12617: LD_INT 33
12619: PUSH
12620: LD_INT 34
12622: PUSH
12623: LD_INT 35
12625: PUSH
12626: LD_INT 36
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 101
12669: PUSH
12670: LD_INT 102
12672: PUSH
12673: LD_INT 103
12675: PUSH
12676: LD_INT 104
12678: PUSH
12679: LD_INT 105
12681: PUSH
12682: LD_INT 106
12684: PUSH
12685: LD_INT 107
12687: PUSH
12688: LD_INT 108
12690: PUSH
12691: LD_INT 109
12693: PUSH
12694: LD_INT 110
12696: PUSH
12697: LD_INT 111
12699: PUSH
12700: LD_INT 112
12702: PUSH
12703: LD_INT 113
12705: PUSH
12706: LD_INT 114
12708: PUSH
12709: LD_INT 115
12711: PUSH
12712: LD_INT 116
12714: PUSH
12715: LD_INT 117
12717: PUSH
12718: LD_INT 118
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: ST_TO_ADDR
12745: GO 12748
12747: POP
// end else
12748: GO 12979
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 3
12763: PUSH
12764: LD_INT 4
12766: PUSH
12767: LD_INT 5
12769: PUSH
12770: LD_INT 6
12772: PUSH
12773: LD_INT 7
12775: PUSH
12776: LD_INT 8
12778: PUSH
12779: LD_INT 9
12781: PUSH
12782: LD_INT 10
12784: PUSH
12785: LD_INT 11
12787: PUSH
12788: LD_INT 12
12790: PUSH
12791: LD_INT 13
12793: PUSH
12794: LD_INT 14
12796: PUSH
12797: LD_INT 15
12799: PUSH
12800: LD_INT 16
12802: PUSH
12803: LD_INT 17
12805: PUSH
12806: LD_INT 18
12808: PUSH
12809: LD_INT 19
12811: PUSH
12812: LD_INT 20
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 23
12823: PUSH
12824: LD_INT 24
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: LD_INT 27
12835: PUSH
12836: LD_INT 28
12838: PUSH
12839: LD_INT 29
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 31
12847: PUSH
12848: LD_INT 32
12850: PUSH
12851: LD_INT 33
12853: PUSH
12854: LD_INT 34
12856: PUSH
12857: LD_INT 35
12859: PUSH
12860: LD_INT 36
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 101
12903: PUSH
12904: LD_INT 102
12906: PUSH
12907: LD_INT 103
12909: PUSH
12910: LD_INT 104
12912: PUSH
12913: LD_INT 105
12915: PUSH
12916: LD_INT 106
12918: PUSH
12919: LD_INT 107
12921: PUSH
12922: LD_INT 108
12924: PUSH
12925: LD_INT 109
12927: PUSH
12928: LD_INT 110
12930: PUSH
12931: LD_INT 111
12933: PUSH
12934: LD_INT 112
12936: PUSH
12937: LD_INT 113
12939: PUSH
12940: LD_INT 114
12942: PUSH
12943: LD_INT 115
12945: PUSH
12946: LD_INT 116
12948: PUSH
12949: LD_INT 117
12951: PUSH
12952: LD_INT 118
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: ST_TO_ADDR
// if result then
12979: LD_VAR 0 2
12983: IFFALSE 13769
// begin normal :=  ;
12985: LD_ADDR_VAR 0 5
12989: PUSH
12990: LD_STRING 
12992: ST_TO_ADDR
// hardcore :=  ;
12993: LD_ADDR_VAR 0 6
12997: PUSH
12998: LD_STRING 
13000: ST_TO_ADDR
// active :=  ;
13001: LD_ADDR_VAR 0 7
13005: PUSH
13006: LD_STRING 
13008: ST_TO_ADDR
// for i = 1 to normalCounter do
13009: LD_ADDR_VAR 0 8
13013: PUSH
13014: DOUBLE
13015: LD_INT 1
13017: DEC
13018: ST_TO_ADDR
13019: LD_EXP 21
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13126
// begin tmp := 0 ;
13027: LD_ADDR_VAR 0 3
13031: PUSH
13032: LD_STRING 0
13034: ST_TO_ADDR
// if result [ 1 ] then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: IFFALSE 13108
// if result [ 1 ] [ 1 ] = i then
13045: LD_VAR 0 2
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PUSH
13058: LD_VAR 0 8
13062: EQUAL
13063: IFFALSE 13108
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: LD_VAR 0 2
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 3
13094: PPUSH
13095: CALL_OW 1
13099: ST_TO_ADDR
// tmp := 1 ;
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_STRING 1
13107: ST_TO_ADDR
// end ; normal := normal & tmp ;
13108: LD_ADDR_VAR 0 5
13112: PUSH
13113: LD_VAR 0 5
13117: PUSH
13118: LD_VAR 0 3
13122: STR
13123: ST_TO_ADDR
// end ;
13124: GO 13024
13126: POP
13127: POP
// for i = 1 to hardcoreCounter do
13128: LD_ADDR_VAR 0 8
13132: PUSH
13133: DOUBLE
13134: LD_INT 1
13136: DEC
13137: ST_TO_ADDR
13138: LD_EXP 22
13142: PUSH
13143: FOR_TO
13144: IFFALSE 13249
// begin tmp := 0 ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_STRING 0
13153: ST_TO_ADDR
// if result [ 2 ] then
13154: LD_VAR 0 2
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: IFFALSE 13231
// if result [ 2 ] [ 1 ] = 100 + i then
13164: LD_VAR 0 2
13168: PUSH
13169: LD_INT 2
13171: ARRAY
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PUSH
13177: LD_INT 100
13179: PUSH
13180: LD_VAR 0 8
13184: PLUS
13185: EQUAL
13186: IFFALSE 13231
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 2
13197: PPUSH
13198: LD_INT 2
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 2
13208: ARRAY
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 3
13217: PPUSH
13218: CALL_OW 1
13222: ST_TO_ADDR
// tmp := 1 ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_STRING 1
13230: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13231: LD_ADDR_VAR 0 6
13235: PUSH
13236: LD_VAR 0 6
13240: PUSH
13241: LD_VAR 0 3
13245: STR
13246: ST_TO_ADDR
// end ;
13247: GO 13143
13249: POP
13250: POP
// if isGameLoad then
13251: LD_VAR 0 1
13255: IFFALSE 13730
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_EXP 25
13266: PUSH
13267: LD_EXP 24
13271: PUSH
13272: LD_EXP 26
13276: PUSH
13277: LD_EXP 23
13281: PUSH
13282: LD_EXP 27
13286: PUSH
13287: LD_EXP 28
13291: PUSH
13292: LD_EXP 29
13296: PUSH
13297: LD_EXP 30
13301: PUSH
13302: LD_EXP 31
13306: PUSH
13307: LD_EXP 32
13311: PUSH
13312: LD_EXP 33
13316: PUSH
13317: LD_EXP 34
13321: PUSH
13322: LD_EXP 35
13326: PUSH
13327: LD_EXP 36
13331: PUSH
13332: LD_EXP 44
13336: PUSH
13337: LD_EXP 45
13341: PUSH
13342: LD_EXP 46
13346: PUSH
13347: LD_EXP 47
13351: PUSH
13352: LD_EXP 49
13356: PUSH
13357: LD_EXP 50
13361: PUSH
13362: LD_EXP 51
13366: PUSH
13367: LD_EXP 54
13371: PUSH
13372: LD_EXP 56
13376: PUSH
13377: LD_EXP 57
13381: PUSH
13382: LD_EXP 58
13386: PUSH
13387: LD_EXP 60
13391: PUSH
13392: LD_EXP 61
13396: PUSH
13397: LD_EXP 64
13401: PUSH
13402: LD_EXP 65
13406: PUSH
13407: LD_EXP 66
13411: PUSH
13412: LD_EXP 67
13416: PUSH
13417: LD_EXP 68
13421: PUSH
13422: LD_EXP 69
13426: PUSH
13427: LD_EXP 70
13431: PUSH
13432: LD_EXP 71
13436: PUSH
13437: LD_EXP 72
13441: PUSH
13442: LD_EXP 37
13446: PUSH
13447: LD_EXP 38
13451: PUSH
13452: LD_EXP 41
13456: PUSH
13457: LD_EXP 42
13461: PUSH
13462: LD_EXP 43
13466: PUSH
13467: LD_EXP 39
13471: PUSH
13472: LD_EXP 40
13476: PUSH
13477: LD_EXP 48
13481: PUSH
13482: LD_EXP 52
13486: PUSH
13487: LD_EXP 53
13491: PUSH
13492: LD_EXP 55
13496: PUSH
13497: LD_EXP 59
13501: PUSH
13502: LD_EXP 62
13506: PUSH
13507: LD_EXP 63
13511: PUSH
13512: LD_EXP 73
13516: PUSH
13517: LD_EXP 74
13521: PUSH
13522: LD_EXP 75
13526: PUSH
13527: LD_EXP 76
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// tmp :=  ;
13588: LD_ADDR_VAR 0 3
13592: PUSH
13593: LD_STRING 
13595: ST_TO_ADDR
// for i = 1 to normalCounter do
13596: LD_ADDR_VAR 0 8
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_EXP 21
13610: PUSH
13611: FOR_TO
13612: IFFALSE 13648
// begin if flags [ i ] then
13614: LD_VAR 0 4
13618: PUSH
13619: LD_VAR 0 8
13623: ARRAY
13624: IFFALSE 13646
// tmp := tmp & i & ; ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: LD_VAR 0 8
13640: STR
13641: PUSH
13642: LD_STRING ;
13644: STR
13645: ST_TO_ADDR
// end ;
13646: GO 13611
13648: POP
13649: POP
// for i = 1 to hardcoreCounter do
13650: LD_ADDR_VAR 0 8
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_EXP 22
13664: PUSH
13665: FOR_TO
13666: IFFALSE 13712
// begin if flags [ normalCounter + i ] then
13668: LD_VAR 0 4
13672: PUSH
13673: LD_EXP 21
13677: PUSH
13678: LD_VAR 0 8
13682: PLUS
13683: ARRAY
13684: IFFALSE 13710
// tmp := tmp & ( 100 + i ) & ; ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_VAR 0 3
13695: PUSH
13696: LD_INT 100
13698: PUSH
13699: LD_VAR 0 8
13703: PLUS
13704: STR
13705: PUSH
13706: LD_STRING ;
13708: STR
13709: ST_TO_ADDR
// end ;
13710: GO 13665
13712: POP
13713: POP
// if tmp then
13714: LD_VAR 0 3
13718: IFFALSE 13730
// active := tmp ;
13720: LD_ADDR_VAR 0 7
13724: PUSH
13725: LD_VAR 0 3
13729: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13730: LD_STRING getStreamItemsFromMission("
13732: PUSH
13733: LD_VAR 0 5
13737: STR
13738: PUSH
13739: LD_STRING ","
13741: STR
13742: PUSH
13743: LD_VAR 0 6
13747: STR
13748: PUSH
13749: LD_STRING ","
13751: STR
13752: PUSH
13753: LD_VAR 0 7
13757: STR
13758: PUSH
13759: LD_STRING ")
13761: STR
13762: PPUSH
13763: CALL_OW 559
// end else
13767: GO 13776
// ToLua ( getStreamItemsFromMission("","","") ) ;
13769: LD_STRING getStreamItemsFromMission("","","")
13771: PPUSH
13772: CALL_OW 559
// end ;
13776: LD_VAR 0 2
13780: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13781: LD_EXP 20
13785: PUSH
13786: LD_EXP 25
13790: AND
13791: IFFALSE 13915
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
// begin enable ;
13800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_INT 22
13808: PUSH
13809: LD_OWVAR 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 2
13820: PUSH
13821: LD_INT 34
13823: PUSH
13824: LD_INT 7
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 34
13833: PUSH
13834: LD_INT 45
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 34
13843: PUSH
13844: LD_INT 28
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 34
13853: PUSH
13854: LD_INT 47
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: ST_TO_ADDR
// if not tmp then
13877: LD_VAR 0 2
13881: NOT
13882: IFFALSE 13886
// exit ;
13884: GO 13915
// for i in tmp do
13886: LD_ADDR_VAR 0 1
13890: PUSH
13891: LD_VAR 0 2
13895: PUSH
13896: FOR_IN
13897: IFFALSE 13913
// begin SetLives ( i , 0 ) ;
13899: LD_VAR 0 1
13903: PPUSH
13904: LD_INT 0
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: GO 13896
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13918: LD_EXP 20
13922: PUSH
13923: LD_EXP 26
13927: AND
13928: IFFALSE 14012
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin enable ;
13937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: ST_TO_ADDR
// if not tmp then
13974: LD_VAR 0 2
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14012
// for i in tmp do
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: LD_VAR 0 2
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14010
// begin SetLives ( i , 0 ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL_OW 234
// end ;
14008: GO 13993
14010: POP
14011: POP
// end ;
14012: PPOPN 2
14014: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14015: LD_EXP 20
14019: PUSH
14020: LD_EXP 23
14024: AND
14025: IFFALSE 14118
14027: GO 14029
14029: DISABLE
14030: LD_INT 0
14032: PPUSH
// begin enable ;
14033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: LD_INT 22
14041: PUSH
14042: LD_OWVAR 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 2
14053: PUSH
14054: LD_INT 25
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 25
14066: PUSH
14067: LD_INT 9
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 25
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PUSH
14099: FOR_IN
14100: IFFALSE 14116
// begin SetClass ( i , 1 ) ;
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 336
// end ;
14114: GO 14099
14116: POP
14117: POP
// end ;
14118: PPOPN 1
14120: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14121: LD_EXP 20
14125: PUSH
14126: LD_EXP 24
14130: AND
14131: PUSH
14132: LD_OWVAR 65
14136: PUSH
14137: LD_INT 7
14139: LESS
14140: AND
14141: IFFALSE 14155
14143: GO 14145
14145: DISABLE
// begin enable ;
14146: ENABLE
// game_speed := 7 ;
14147: LD_ADDR_OWVAR 65
14151: PUSH
14152: LD_INT 7
14154: ST_TO_ADDR
// end ;
14155: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14156: LD_EXP 20
14160: PUSH
14161: LD_EXP 27
14165: AND
14166: IFFALSE 14368
14168: GO 14170
14170: DISABLE
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
14175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 81
14183: PUSH
14184: LD_OWVAR 2
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: ST_TO_ADDR
// if not tmp then
14212: LD_VAR 0 3
14216: NOT
14217: IFFALSE 14221
// exit ;
14219: GO 14368
// if tmp > 5 then
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 5
14228: GREATER
14229: IFFALSE 14241
// k := 5 else
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_INT 5
14238: ST_TO_ADDR
14239: GO 14251
// k := tmp ;
14241: LD_ADDR_VAR 0 2
14245: PUSH
14246: LD_VAR 0 3
14250: ST_TO_ADDR
// for i := 1 to k do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_VAR 0 2
14265: PUSH
14266: FOR_TO
14267: IFFALSE 14366
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14269: LD_VAR 0 3
14273: PUSH
14274: LD_VAR 0 1
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 1
14284: PUSH
14285: LD_INT 4
14287: MOD
14288: PUSH
14289: LD_INT 1
14291: PLUS
14292: PPUSH
14293: CALL_OW 259
14297: PUSH
14298: LD_INT 10
14300: LESS
14301: IFFALSE 14364
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14303: LD_VAR 0 3
14307: PUSH
14308: LD_VAR 0 1
14312: ARRAY
14313: PPUSH
14314: LD_VAR 0 1
14318: PUSH
14319: LD_INT 4
14321: MOD
14322: PUSH
14323: LD_INT 1
14325: PLUS
14326: PPUSH
14327: LD_VAR 0 3
14331: PUSH
14332: LD_VAR 0 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 4
14345: MOD
14346: PUSH
14347: LD_INT 1
14349: PLUS
14350: PPUSH
14351: CALL_OW 259
14355: PUSH
14356: LD_INT 1
14358: PLUS
14359: PPUSH
14360: CALL_OW 237
14364: GO 14266
14366: POP
14367: POP
// end ;
14368: PPOPN 3
14370: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14371: LD_EXP 20
14375: PUSH
14376: LD_EXP 28
14380: AND
14381: IFFALSE 14401
14383: GO 14385
14385: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14386: LD_INT 4
14388: PPUSH
14389: LD_OWVAR 2
14393: PPUSH
14394: LD_INT 0
14396: PPUSH
14397: CALL_OW 324
14401: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14402: LD_EXP 20
14406: PUSH
14407: LD_EXP 57
14411: AND
14412: IFFALSE 14432
14414: GO 14416
14416: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14417: LD_INT 19
14419: PPUSH
14420: LD_OWVAR 2
14424: PPUSH
14425: LD_INT 0
14427: PPUSH
14428: CALL_OW 324
14432: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14433: LD_EXP 20
14437: PUSH
14438: LD_EXP 29
14442: AND
14443: IFFALSE 14545
14445: GO 14447
14447: DISABLE
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// begin enable ;
14452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_INT 22
14460: PUSH
14461: LD_OWVAR 2
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: LD_INT 34
14475: PUSH
14476: LD_INT 11
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 34
14485: PUSH
14486: LD_INT 30
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: ST_TO_ADDR
// if not tmp then
14507: LD_VAR 0 2
14511: NOT
14512: IFFALSE 14516
// exit ;
14514: GO 14545
// for i in tmp do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: LD_VAR 0 2
14525: PUSH
14526: FOR_IN
14527: IFFALSE 14543
// begin SetLives ( i , 0 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 0
14536: PPUSH
14537: CALL_OW 234
// end ;
14541: GO 14526
14543: POP
14544: POP
// end ;
14545: PPOPN 2
14547: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14548: LD_EXP 20
14552: PUSH
14553: LD_EXP 30
14557: AND
14558: IFFALSE 14578
14560: GO 14562
14562: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14563: LD_INT 32
14565: PPUSH
14566: LD_OWVAR 2
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 324
14578: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14579: LD_EXP 20
14583: PUSH
14584: LD_EXP 31
14588: AND
14589: IFFALSE 14770
14591: GO 14593
14593: DISABLE
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
14598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_OWVAR 2
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 33
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: ST_TO_ADDR
// if not tmp then
14635: LD_VAR 0 2
14639: NOT
14640: IFFALSE 14644
// exit ;
14642: GO 14770
// side := 0 ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 0
14651: ST_TO_ADDR
// for i := 1 to 8 do
14652: LD_ADDR_VAR 0 1
14656: PUSH
14657: DOUBLE
14658: LD_INT 1
14660: DEC
14661: ST_TO_ADDR
14662: LD_INT 8
14664: PUSH
14665: FOR_TO
14666: IFFALSE 14714
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14668: LD_OWVAR 2
14672: PUSH
14673: LD_VAR 0 1
14677: NONEQUAL
14678: PUSH
14679: LD_OWVAR 2
14683: PPUSH
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 81
14693: PUSH
14694: LD_INT 2
14696: EQUAL
14697: AND
14698: IFFALSE 14712
// begin side := i ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_VAR 0 1
14709: ST_TO_ADDR
// break ;
14710: GO 14714
// end ;
14712: GO 14665
14714: POP
14715: POP
// if not side then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14770
// for i := 1 to tmp do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: DOUBLE
14731: LD_INT 1
14733: DEC
14734: ST_TO_ADDR
14735: LD_VAR 0 2
14739: PUSH
14740: FOR_TO
14741: IFFALSE 14768
// if Prob ( 60 ) then
14743: LD_INT 60
14745: PPUSH
14746: CALL_OW 13
14750: IFFALSE 14766
// SetSide ( i , side ) ;
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: CALL_OW 235
14766: GO 14740
14768: POP
14769: POP
// end ;
14770: PPOPN 3
14772: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14773: LD_EXP 20
14777: PUSH
14778: LD_EXP 33
14782: AND
14783: IFFALSE 14902
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14900
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 257
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: LD_INT 4
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: IN
14876: IFFALSE 14898
// SetClass ( un , rand ( 1 , 4 ) ) ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 4
14888: PPUSH
14889: CALL_OW 12
14893: PPUSH
14894: CALL_OW 336
14898: GO 14845
14900: POP
14901: POP
// end ;
14902: PPOPN 1
14904: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14905: LD_EXP 20
14909: PUSH
14910: LD_EXP 32
14914: AND
14915: IFFALSE 14994
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_OWVAR 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: ST_TO_ADDR
// if not tmp then
14959: LD_VAR 0 1
14963: NOT
14964: IFFALSE 14968
// exit ;
14966: GO 14994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: PPUSH
14987: LD_INT 100
14989: PPUSH
14990: CALL_OW 234
// end ;
14994: PPOPN 1
14996: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14997: LD_EXP 20
15001: PUSH
15002: LD_EXP 34
15006: AND
15007: IFFALSE 15105
15009: GO 15011
15011: DISABLE
15012: LD_INT 0
15014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_OWVAR 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 21
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: ST_TO_ADDR
// if not tmp then
15051: LD_VAR 0 1
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15105
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15060: LD_VAR 0 1
15064: PUSH
15065: LD_INT 1
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL_OW 12
15077: ARRAY
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 4
15084: PPUSH
15085: CALL_OW 12
15089: PPUSH
15090: LD_INT 3000
15092: PPUSH
15093: LD_INT 9000
15095: PPUSH
15096: CALL_OW 12
15100: PPUSH
15101: CALL_OW 492
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15108: LD_EXP 20
15112: PUSH
15113: LD_EXP 35
15117: AND
15118: IFFALSE 15138
15120: GO 15122
15122: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15123: LD_INT 1
15125: PPUSH
15126: LD_OWVAR 2
15130: PPUSH
15131: LD_INT 0
15133: PPUSH
15134: CALL_OW 324
15138: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15139: LD_EXP 20
15143: PUSH
15144: LD_EXP 36
15148: AND
15149: IFFALSE 15232
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15158: LD_ADDR_VAR 0 2
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_OWVAR 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 21
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not tmp then
15194: LD_VAR 0 2
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15232
// for i in tmp do
15203: LD_ADDR_VAR 0 1
15207: PUSH
15208: LD_VAR 0 2
15212: PUSH
15213: FOR_IN
15214: IFFALSE 15230
// SetBLevel ( i , 10 ) ;
15216: LD_VAR 0 1
15220: PPUSH
15221: LD_INT 10
15223: PPUSH
15224: CALL_OW 241
15228: GO 15213
15230: POP
15231: POP
// end ;
15232: PPOPN 2
15234: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15235: LD_EXP 20
15239: PUSH
15240: LD_EXP 37
15244: AND
15245: IFFALSE 15356
15247: GO 15249
15249: DISABLE
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
15254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15255: LD_ADDR_VAR 0 3
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_OWVAR 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 25
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: ST_TO_ADDR
// if not tmp then
15291: LD_VAR 0 3
15295: NOT
15296: IFFALSE 15300
// exit ;
15298: GO 15356
// un := tmp [ rand ( 1 , tmp ) ] ;
15300: LD_ADDR_VAR 0 2
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: ST_TO_ADDR
// if Crawls ( un ) then
15324: LD_VAR 0 2
15328: PPUSH
15329: CALL_OW 318
15333: IFFALSE 15344
// ComWalk ( un ) ;
15335: LD_VAR 0 2
15339: PPUSH
15340: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15344: LD_VAR 0 2
15348: PPUSH
15349: LD_INT 5
15351: PPUSH
15352: CALL_OW 336
// end ;
15356: PPOPN 3
15358: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15359: LD_EXP 20
15363: PUSH
15364: LD_EXP 38
15368: AND
15369: PUSH
15370: LD_OWVAR 67
15374: PUSH
15375: LD_INT 4
15377: LESS
15378: AND
15379: IFFALSE 15398
15381: GO 15383
15383: DISABLE
// begin Difficulty := Difficulty + 1 ;
15384: LD_ADDR_OWVAR 67
15388: PUSH
15389: LD_OWVAR 67
15393: PUSH
15394: LD_INT 1
15396: PLUS
15397: ST_TO_ADDR
// end ;
15398: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15399: LD_EXP 20
15403: PUSH
15404: LD_EXP 39
15408: AND
15409: IFFALSE 15512
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
// begin for i := 1 to 5 do
15417: LD_ADDR_VAR 0 1
15421: PUSH
15422: DOUBLE
15423: LD_INT 1
15425: DEC
15426: ST_TO_ADDR
15427: LD_INT 5
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15510
// begin uc_nation := nation_nature ;
15433: LD_ADDR_OWVAR 21
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_side := 0 ;
15441: LD_ADDR_OWVAR 20
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15449: LD_ADDR_OWVAR 29
15453: PUSH
15454: LD_INT 12
15456: PUSH
15457: LD_INT 12
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: ST_TO_ADDR
// hc_agressivity := 20 ;
15464: LD_ADDR_OWVAR 35
15468: PUSH
15469: LD_INT 20
15471: ST_TO_ADDR
// hc_class := class_tiger ;
15472: LD_ADDR_OWVAR 28
15476: PUSH
15477: LD_INT 14
15479: ST_TO_ADDR
// hc_gallery :=  ;
15480: LD_ADDR_OWVAR 33
15484: PUSH
15485: LD_STRING 
15487: ST_TO_ADDR
// hc_name :=  ;
15488: LD_ADDR_OWVAR 26
15492: PUSH
15493: LD_STRING 
15495: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15496: CALL_OW 44
15500: PPUSH
15501: LD_INT 0
15503: PPUSH
15504: CALL_OW 51
// end ;
15508: GO 15430
15510: POP
15511: POP
// end ;
15512: PPOPN 1
15514: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15515: LD_EXP 20
15519: PUSH
15520: LD_EXP 40
15524: AND
15525: IFFALSE 15534
15527: GO 15529
15529: DISABLE
// StreamSibBomb ;
15530: CALL 15535 0 0
15534: END
// export function StreamSibBomb ; var i , x , y ; begin
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
// result := false ;
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
// for i := 1 to 16 do
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_INT 16
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15762
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 10
15572: PUSH
15573: LD_INT 20
15575: PUSH
15576: LD_INT 30
15578: PUSH
15579: LD_INT 40
15581: PUSH
15582: LD_INT 50
15584: PUSH
15585: LD_INT 60
15587: PUSH
15588: LD_INT 70
15590: PUSH
15591: LD_INT 80
15593: PUSH
15594: LD_INT 90
15596: PUSH
15597: LD_INT 100
15599: PUSH
15600: LD_INT 110
15602: PUSH
15603: LD_INT 120
15605: PUSH
15606: LD_INT 130
15608: PUSH
15609: LD_INT 140
15611: PUSH
15612: LD_INT 150
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_INT 15
15637: PPUSH
15638: CALL_OW 12
15642: ARRAY
15643: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15644: LD_ADDR_VAR 0 4
15648: PUSH
15649: LD_INT 10
15651: PUSH
15652: LD_INT 20
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 40
15660: PUSH
15661: LD_INT 50
15663: PUSH
15664: LD_INT 60
15666: PUSH
15667: LD_INT 70
15669: PUSH
15670: LD_INT 80
15672: PUSH
15673: LD_INT 90
15675: PUSH
15676: LD_INT 100
15678: PUSH
15679: LD_INT 110
15681: PUSH
15682: LD_INT 120
15684: PUSH
15685: LD_INT 130
15687: PUSH
15688: LD_INT 140
15690: PUSH
15691: LD_INT 150
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_INT 15
15716: PPUSH
15717: CALL_OW 12
15721: ARRAY
15722: ST_TO_ADDR
// if ValidHex ( x , y ) then
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_VAR 0 4
15732: PPUSH
15733: CALL_OW 488
15737: IFFALSE 15760
// begin result := [ x , y ] ;
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_VAR 0 3
15748: PUSH
15749: LD_VAR 0 4
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: ST_TO_ADDR
// break ;
15758: GO 15762
// end ; end ;
15760: GO 15562
15762: POP
15763: POP
// if result then
15764: LD_VAR 0 1
15768: IFFALSE 15828
// begin ToLua ( playSibBomb() ) ;
15770: LD_STRING playSibBomb()
15772: PPUSH
15773: CALL_OW 559
// wait ( 0 0$14 ) ;
15777: LD_INT 490
15779: PPUSH
15780: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: PPUSH
15802: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15806: LD_VAR 0 1
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: LD_VAR 0 1
15819: PUSH
15820: LD_INT 2
15822: ARRAY
15823: PPUSH
15824: CALL_OW 429
// end ; end ;
15828: LD_VAR 0 1
15832: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15833: LD_EXP 20
15837: PUSH
15838: LD_EXP 42
15842: AND
15843: IFFALSE 15855
15845: GO 15847
15847: DISABLE
// YouLost (  ) ;
15848: LD_STRING 
15850: PPUSH
15851: CALL_OW 104
15855: END
// every 0 0$1 trigger StreamModeActive and sFog do
15856: LD_EXP 20
15860: PUSH
15861: LD_EXP 41
15865: AND
15866: IFFALSE 15880
15868: GO 15870
15870: DISABLE
// FogOff ( your_side ) ;
15871: LD_OWVAR 2
15875: PPUSH
15876: CALL_OW 344
15880: END
// every 0 0$1 trigger StreamModeActive and sSun do
15881: LD_EXP 20
15885: PUSH
15886: LD_EXP 43
15890: AND
15891: IFFALSE 15919
15893: GO 15895
15895: DISABLE
// begin solar_recharge_percent := 0 ;
15896: LD_ADDR_OWVAR 79
15900: PUSH
15901: LD_INT 0
15903: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15904: LD_INT 10500
15906: PPUSH
15907: CALL_OW 67
// solar_recharge_percent := 100 ;
15911: LD_ADDR_OWVAR 79
15915: PUSH
15916: LD_INT 100
15918: ST_TO_ADDR
// end ;
15919: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15920: LD_EXP 20
15924: PUSH
15925: LD_EXP 44
15929: AND
15930: IFFALSE 16169
15932: GO 15934
15934: DISABLE
15935: LD_INT 0
15937: PPUSH
15938: PPUSH
15939: PPUSH
// begin tmp := [ ] ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: EMPTY
15946: ST_TO_ADDR
// for i := 1 to 6 do
15947: LD_ADDR_VAR 0 1
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_INT 6
15959: PUSH
15960: FOR_TO
15961: IFFALSE 16066
// begin uc_nation := nation_nature ;
15963: LD_ADDR_OWVAR 21
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// uc_side := 0 ;
15971: LD_ADDR_OWVAR 20
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15979: LD_ADDR_OWVAR 29
15983: PUSH
15984: LD_INT 12
15986: PUSH
15987: LD_INT 12
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: ST_TO_ADDR
// hc_agressivity := 20 ;
15994: LD_ADDR_OWVAR 35
15998: PUSH
15999: LD_INT 20
16001: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16002: LD_ADDR_OWVAR 28
16006: PUSH
16007: LD_INT 17
16009: ST_TO_ADDR
// hc_gallery :=  ;
16010: LD_ADDR_OWVAR 33
16014: PUSH
16015: LD_STRING 
16017: ST_TO_ADDR
// hc_name :=  ;
16018: LD_ADDR_OWVAR 26
16022: PUSH
16023: LD_STRING 
16025: ST_TO_ADDR
// un := CreateHuman ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: CALL_OW 44
16035: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16036: LD_VAR 0 2
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 51
// tmp := tmp ^ un ;
16048: LD_ADDR_VAR 0 3
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_VAR 0 2
16062: ADD
16063: ST_TO_ADDR
// end ;
16064: GO 15960
16066: POP
16067: POP
// repeat wait ( 0 0$1 ) ;
16068: LD_INT 35
16070: PPUSH
16071: CALL_OW 67
// for un in tmp do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: FOR_IN
16086: IFFALSE 16160
// begin if IsDead ( un ) then
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 301
16097: IFFALSE 16117
// begin tmp := tmp diff un ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_VAR 0 3
16108: PUSH
16109: LD_VAR 0 2
16113: DIFF
16114: ST_TO_ADDR
// continue ;
16115: GO 16085
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 22
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: PPUSH
16144: LD_VAR 0 2
16148: PPUSH
16149: CALL_OW 74
16153: PPUSH
16154: CALL_OW 115
// end ;
16158: GO 16085
16160: POP
16161: POP
// until not tmp ;
16162: LD_VAR 0 3
16166: NOT
16167: IFFALSE 16068
// end ;
16169: PPOPN 3
16171: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16172: LD_EXP 20
16176: PUSH
16177: LD_EXP 45
16181: AND
16182: IFFALSE 16236
16184: GO 16186
16186: DISABLE
// begin ToLua ( displayTroll(); ) ;
16187: LD_STRING displayTroll();
16189: PPUSH
16190: CALL_OW 559
// wait ( 3 3$00 ) ;
16194: LD_INT 6300
16196: PPUSH
16197: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16201: LD_STRING hideTroll();
16203: PPUSH
16204: CALL_OW 559
// wait ( 1 1$00 ) ;
16208: LD_INT 2100
16210: PPUSH
16211: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16215: LD_STRING displayTroll();
16217: PPUSH
16218: CALL_OW 559
// wait ( 1 1$00 ) ;
16222: LD_INT 2100
16224: PPUSH
16225: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16229: LD_STRING hideTroll();
16231: PPUSH
16232: CALL_OW 559
// end ;
16236: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16237: LD_EXP 20
16241: PUSH
16242: LD_EXP 46
16246: AND
16247: IFFALSE 16310
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
// begin p := 0 ;
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// repeat game_speed := 1 ;
16263: LD_ADDR_OWVAR 65
16267: PUSH
16268: LD_INT 1
16270: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16271: LD_INT 35
16273: PPUSH
16274: CALL_OW 67
// p := p + 1 ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: PLUS
16291: ST_TO_ADDR
// until p >= 60 ;
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 60
16299: GREATEREQUAL
16300: IFFALSE 16263
// game_speed := 4 ;
16302: LD_ADDR_OWVAR 65
16306: PUSH
16307: LD_INT 4
16309: ST_TO_ADDR
// end ;
16310: PPOPN 1
16312: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16313: LD_EXP 20
16317: PUSH
16318: LD_EXP 47
16322: AND
16323: IFFALSE 16469
16325: GO 16327
16327: DISABLE
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16332: LD_ADDR_VAR 0 1
16336: PUSH
16337: LD_INT 22
16339: PUSH
16340: LD_OWVAR 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: LD_INT 30
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 30
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not depot then
16386: LD_VAR 0 1
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16469
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: PPUSH
16419: CALL_OW 274
16423: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 0
16434: PPUSH
16435: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16439: LD_VAR 0 2
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: LD_INT 0
16449: PPUSH
16450: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 3
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 277
// end ;
16469: PPOPN 2
16471: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16472: LD_EXP 20
16476: PUSH
16477: LD_EXP 48
16481: AND
16482: IFFALSE 16579
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_OWVAR 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not tmp then
16544: LD_VAR 0 1
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16553: LD_VAR 0 1
16557: PUSH
16558: LD_INT 1
16560: PPUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 12
16570: ARRAY
16571: PPUSH
16572: LD_INT 200
16574: PPUSH
16575: CALL_OW 234
// end ;
16579: PPOPN 1
16581: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16582: LD_EXP 20
16586: PUSH
16587: LD_EXP 49
16591: AND
16592: IFFALSE 16671
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_OWVAR 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 21
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PPUSH
16631: CALL_OW 69
16635: ST_TO_ADDR
// if not tmp then
16636: LD_VAR 0 1
16640: NOT
16641: IFFALSE 16645
// exit ;
16643: GO 16671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16645: LD_VAR 0 1
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 12
16662: ARRAY
16663: PPUSH
16664: LD_INT 60
16666: PPUSH
16667: CALL_OW 234
// end ;
16671: PPOPN 1
16673: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16674: LD_EXP 20
16678: PUSH
16679: LD_EXP 50
16683: AND
16684: IFFALSE 16783
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
// begin enable ;
16693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 22
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 61
16713: PUSH
16714: EMPTY
16715: LIST
16716: PUSH
16717: LD_INT 33
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 1
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16783
// for i in tmp do
16746: LD_ADDR_VAR 0 2
16750: PUSH
16751: LD_VAR 0 1
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16781
// if IsControledBy ( i ) then
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 312
16768: IFFALSE 16779
// ComUnlink ( i ) ;
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 136
16779: GO 16756
16781: POP
16782: POP
// end ;
16783: PPOPN 2
16785: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16786: LD_EXP 20
16790: PUSH
16791: LD_EXP 51
16795: AND
16796: IFFALSE 16936
16798: GO 16800
16800: DISABLE
16801: LD_INT 0
16803: PPUSH
16804: PPUSH
// begin ToLua ( displayPowell(); ) ;
16805: LD_STRING displayPowell();
16807: PPUSH
16808: CALL_OW 559
// uc_side := 0 ;
16812: LD_ADDR_OWVAR 20
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// uc_nation := 2 ;
16820: LD_ADDR_OWVAR 21
16824: PUSH
16825: LD_INT 2
16827: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16828: LD_ADDR_OWVAR 37
16832: PUSH
16833: LD_INT 14
16835: ST_TO_ADDR
// vc_engine := engine_siberite ;
16836: LD_ADDR_OWVAR 39
16840: PUSH
16841: LD_INT 3
16843: ST_TO_ADDR
// vc_control := control_apeman ;
16844: LD_ADDR_OWVAR 38
16848: PUSH
16849: LD_INT 5
16851: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16852: LD_ADDR_OWVAR 40
16856: PUSH
16857: LD_INT 29
16859: ST_TO_ADDR
// un := CreateVehicle ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: CALL_OW 45
16869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16870: LD_VAR 0 2
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16882: LD_INT 35
16884: PPUSH
16885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 22
16896: PUSH
16897: LD_OWVAR 2
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: PPUSH
16911: LD_VAR 0 2
16915: PPUSH
16916: CALL_OW 74
16920: PPUSH
16921: CALL_OW 115
// until IsDead ( un ) ;
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL_OW 301
16934: IFFALSE 16882
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sStu do
16939: LD_EXP 20
16943: PUSH
16944: LD_EXP 59
16948: AND
16949: IFFALSE 16965
16951: GO 16953
16953: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16954: LD_STRING displayStucuk();
16956: PPUSH
16957: CALL_OW 559
// ResetFog ;
16961: CALL_OW 335
// end ;
16965: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16966: LD_EXP 20
16970: PUSH
16971: LD_EXP 52
16975: AND
16976: IFFALSE 17117
16978: GO 16980
16980: DISABLE
16981: LD_INT 0
16983: PPUSH
16984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_OWVAR 2
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: ST_TO_ADDR
// if not tmp then
17021: LD_VAR 0 2
17025: NOT
17026: IFFALSE 17030
// exit ;
17028: GO 17117
// un := tmp [ rand ( 1 , tmp ) ] ;
17030: LD_ADDR_VAR 0 1
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 1
17042: PPUSH
17043: LD_VAR 0 2
17047: PPUSH
17048: CALL_OW 12
17052: ARRAY
17053: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 0
17061: PPUSH
17062: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_OWVAR 3
17075: PUSH
17076: LD_VAR 0 1
17080: DIFF
17081: PPUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 74
17091: PPUSH
17092: CALL_OW 115
// wait ( 0 0$20 ) ;
17096: LD_INT 700
17098: PPUSH
17099: CALL_OW 67
// SetSide ( un , your_side ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_OWVAR 2
17112: PPUSH
17113: CALL_OW 235
// end ;
17117: PPOPN 2
17119: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17120: LD_EXP 20
17124: PUSH
17125: LD_EXP 53
17129: AND
17130: IFFALSE 17236
17132: GO 17134
17134: DISABLE
17135: LD_INT 0
17137: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not depot then
17192: LD_VAR 0 1
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17236
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17201: LD_VAR 0 1
17205: PUSH
17206: LD_INT 1
17208: ARRAY
17209: PPUSH
17210: CALL_OW 250
17214: PPUSH
17215: LD_VAR 0 1
17219: PUSH
17220: LD_INT 1
17222: ARRAY
17223: PPUSH
17224: CALL_OW 251
17228: PPUSH
17229: LD_INT 70
17231: PPUSH
17232: CALL_OW 495
// end ;
17236: PPOPN 1
17238: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17239: LD_EXP 20
17243: PUSH
17244: LD_EXP 54
17248: AND
17249: IFFALSE 17460
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17261: LD_ADDR_VAR 0 5
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 21
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 5
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17460
// for i in tmp do
17306: LD_ADDR_VAR 0 1
17310: PUSH
17311: LD_VAR 0 5
17315: PUSH
17316: FOR_IN
17317: IFFALSE 17458
// begin d := rand ( 0 , 5 ) ;
17319: LD_ADDR_VAR 0 4
17323: PUSH
17324: LD_INT 0
17326: PPUSH
17327: LD_INT 5
17329: PPUSH
17330: CALL_OW 12
17334: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 250
17349: PPUSH
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 3
17357: PPUSH
17358: LD_INT 12
17360: PPUSH
17361: CALL_OW 12
17365: PPUSH
17366: CALL_OW 272
17370: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 251
17385: PPUSH
17386: LD_VAR 0 4
17390: PPUSH
17391: LD_INT 3
17393: PPUSH
17394: LD_INT 12
17396: PPUSH
17397: CALL_OW 12
17401: PPUSH
17402: CALL_OW 273
17406: ST_TO_ADDR
// if ValidHex ( x , y ) then
17407: LD_VAR 0 2
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: CALL_OW 488
17421: IFFALSE 17456
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_INT 3
17440: PPUSH
17441: LD_INT 6
17443: PPUSH
17444: CALL_OW 12
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 483
// end ;
17456: GO 17316
17458: POP
17459: POP
// end ;
17460: PPOPN 5
17462: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17463: LD_EXP 20
17467: PUSH
17468: LD_EXP 55
17472: AND
17473: IFFALSE 17567
17475: GO 17477
17477: DISABLE
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17482: LD_ADDR_VAR 0 2
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_OWVAR 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 32
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 21
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 2
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17567
// for i in tmp do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_VAR 0 2
17547: PUSH
17548: FOR_IN
17549: IFFALSE 17565
// SetFuel ( i , 0 ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_INT 0
17558: PPUSH
17559: CALL_OW 240
17563: GO 17548
17565: POP
17566: POP
// end ;
17567: PPOPN 2
17569: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17570: LD_EXP 20
17574: PUSH
17575: LD_EXP 56
17579: AND
17580: IFFALSE 17646
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17588: LD_ADDR_VAR 0 1
17592: PUSH
17593: LD_INT 22
17595: PUSH
17596: LD_OWVAR 2
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 29
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: ST_TO_ADDR
// if not tmp then
17624: LD_VAR 0 1
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17646
// DestroyUnit ( tmp [ 1 ] ) ;
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 1
17640: ARRAY
17641: PPUSH
17642: CALL_OW 65
// end ;
17646: PPOPN 1
17648: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17649: LD_EXP 20
17653: PUSH
17654: LD_EXP 58
17658: AND
17659: IFFALSE 17788
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
// begin uc_side := 0 ;
17667: LD_ADDR_OWVAR 20
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// uc_nation := nation_arabian ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_INT 2
17682: ST_TO_ADDR
// hc_gallery :=  ;
17683: LD_ADDR_OWVAR 33
17687: PUSH
17688: LD_STRING 
17690: ST_TO_ADDR
// hc_name :=  ;
17691: LD_ADDR_OWVAR 26
17695: PUSH
17696: LD_STRING 
17698: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17699: LD_INT 1
17701: PPUSH
17702: LD_INT 11
17704: PPUSH
17705: LD_INT 10
17707: PPUSH
17708: CALL_OW 380
// un := CreateHuman ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: CALL_OW 44
17721: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17722: LD_VAR 0 1
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17734: LD_INT 35
17736: PPUSH
17737: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 74
17772: PPUSH
17773: CALL_OW 115
// until IsDead ( un ) ;
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 301
17786: IFFALSE 17734
// end ;
17788: PPOPN 1
17790: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17791: LD_EXP 20
17795: PUSH
17796: LD_EXP 60
17800: AND
17801: IFFALSE 17813
17803: GO 17805
17805: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17806: LD_STRING earthquake(getX(game), 0, 32)
17808: PPUSH
17809: CALL_OW 559
17813: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17814: LD_EXP 20
17818: PUSH
17819: LD_EXP 61
17823: AND
17824: IFFALSE 17915
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
// begin enable ;
17832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17833: LD_ADDR_VAR 0 1
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_OWVAR 2
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 21
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 33
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: CALL_OW 69
17879: ST_TO_ADDR
// if not tmp then
17880: LD_VAR 0 1
17884: NOT
17885: IFFALSE 17889
// exit ;
17887: GO 17915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 12
17906: ARRAY
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 234
// end ;
17915: PPOPN 1
17917: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17918: LD_EXP 20
17922: PUSH
17923: LD_EXP 62
17927: AND
17928: IFFALSE 18069
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
17937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 25
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 3
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18069
// un := tmp [ rand ( 1 , tmp ) ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_INT 1
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: CALL_OW 12
18005: ARRAY
18006: ST_TO_ADDR
// if Crawls ( un ) then
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 318
18016: IFFALSE 18027
// ComWalk ( un ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18027: LD_VAR 0 2
18031: PPUSH
18032: LD_INT 9
18034: PPUSH
18035: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18039: LD_INT 28
18041: PPUSH
18042: LD_OWVAR 2
18046: PPUSH
18047: LD_INT 2
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18054: LD_INT 29
18056: PPUSH
18057: LD_OWVAR 2
18061: PPUSH
18062: LD_INT 2
18064: PPUSH
18065: CALL_OW 322
// end ;
18069: PPOPN 3
18071: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18072: LD_EXP 20
18076: PUSH
18077: LD_EXP 63
18081: AND
18082: IFFALSE 18193
18084: GO 18086
18086: DISABLE
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18092: LD_ADDR_VAR 0 3
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_OWVAR 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 25
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: ST_TO_ADDR
// if not tmp then
18128: LD_VAR 0 3
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 18193
// un := tmp [ rand ( 1 , tmp ) ] ;
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: LD_VAR 0 3
18146: PUSH
18147: LD_INT 1
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: CALL_OW 12
18159: ARRAY
18160: ST_TO_ADDR
// if Crawls ( un ) then
18161: LD_VAR 0 2
18165: PPUSH
18166: CALL_OW 318
18170: IFFALSE 18181
// ComWalk ( un ) ;
18172: LD_VAR 0 2
18176: PPUSH
18177: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18181: LD_VAR 0 2
18185: PPUSH
18186: LD_INT 8
18188: PPUSH
18189: CALL_OW 336
// end ;
18193: PPOPN 3
18195: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18196: LD_EXP 20
18200: PUSH
18201: LD_EXP 64
18205: AND
18206: IFFALSE 18350
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_INT 22
18222: PUSH
18223: LD_OWVAR 2
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 21
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 34
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 34
18257: PUSH
18258: LD_INT 51
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 34
18267: PUSH
18268: LD_INT 32
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: PPUSH
18286: CALL_OW 69
18290: ST_TO_ADDR
// if not tmp then
18291: LD_VAR 0 2
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18350
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 2
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18348
// if GetCargo ( i , mat_artifact ) = 0 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 4
18320: PPUSH
18321: CALL_OW 289
18325: PUSH
18326: LD_INT 0
18328: EQUAL
18329: IFFALSE 18346
// SetCargo ( i , mat_siberit , 100 ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 100
18341: PPUSH
18342: CALL_OW 290
18346: GO 18310
18348: POP
18349: POP
// end ;
18350: PPOPN 2
18352: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18353: LD_EXP 20
18357: PUSH
18358: LD_EXP 65
18362: AND
18363: IFFALSE 18546
18365: GO 18367
18367: DISABLE
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18372: LD_ADDR_VAR 0 2
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_OWVAR 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PPUSH
18389: CALL_OW 69
18393: ST_TO_ADDR
// if not tmp then
18394: LD_VAR 0 2
18398: NOT
18399: IFFALSE 18403
// exit ;
18401: GO 18546
// for i := 1 to 2 do
18403: LD_ADDR_VAR 0 1
18407: PUSH
18408: DOUBLE
18409: LD_INT 1
18411: DEC
18412: ST_TO_ADDR
18413: LD_INT 2
18415: PUSH
18416: FOR_TO
18417: IFFALSE 18544
// begin uc_side := your_side ;
18419: LD_ADDR_OWVAR 20
18423: PUSH
18424: LD_OWVAR 2
18428: ST_TO_ADDR
// uc_nation := nation_american ;
18429: LD_ADDR_OWVAR 21
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// vc_chassis := us_morphling ;
18437: LD_ADDR_OWVAR 37
18441: PUSH
18442: LD_INT 5
18444: ST_TO_ADDR
// vc_engine := engine_siberite ;
18445: LD_ADDR_OWVAR 39
18449: PUSH
18450: LD_INT 3
18452: ST_TO_ADDR
// vc_control := control_computer ;
18453: LD_ADDR_OWVAR 38
18457: PUSH
18458: LD_INT 3
18460: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18461: LD_ADDR_OWVAR 40
18465: PUSH
18466: LD_INT 10
18468: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18469: LD_VAR 0 2
18473: PUSH
18474: LD_INT 1
18476: ARRAY
18477: PPUSH
18478: CALL_OW 310
18482: NOT
18483: IFFALSE 18530
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18485: CALL_OW 45
18489: PPUSH
18490: LD_VAR 0 2
18494: PUSH
18495: LD_INT 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 250
18503: PPUSH
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 251
18517: PPUSH
18518: LD_INT 12
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 50
18528: GO 18542
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18530: CALL_OW 45
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: CALL_OW 51
// end ;
18542: GO 18416
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18549: LD_EXP 20
18553: PUSH
18554: LD_EXP 66
18558: AND
18559: IFFALSE 18781
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18572: LD_ADDR_VAR 0 6
18576: PUSH
18577: LD_INT 22
18579: PUSH
18580: LD_OWVAR 2
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 3
18601: PUSH
18602: LD_INT 23
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if not tmp then
18626: LD_VAR 0 6
18630: NOT
18631: IFFALSE 18635
// exit ;
18633: GO 18781
// s1 := rand ( 1 , 4 ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 4
18645: PPUSH
18646: CALL_OW 12
18650: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18651: LD_ADDR_VAR 0 4
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: LD_VAR 0 2
18669: PPUSH
18670: CALL_OW 259
18674: ST_TO_ADDR
// if s1 = 1 then
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 1
18682: EQUAL
18683: IFFALSE 18703
// s2 := rand ( 2 , 4 ) else
18685: LD_ADDR_VAR 0 3
18689: PUSH
18690: LD_INT 2
18692: PPUSH
18693: LD_INT 4
18695: PPUSH
18696: CALL_OW 12
18700: ST_TO_ADDR
18701: GO 18711
// s2 := 1 ;
18703: LD_ADDR_VAR 0 3
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18711: LD_ADDR_VAR 0 5
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_INT 1
18723: ARRAY
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: CALL_OW 259
18734: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18735: LD_VAR 0 6
18739: PUSH
18740: LD_INT 1
18742: ARRAY
18743: PPUSH
18744: LD_VAR 0 2
18748: PPUSH
18749: LD_VAR 0 5
18753: PPUSH
18754: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18758: LD_VAR 0 6
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_VAR 0 4
18776: PPUSH
18777: CALL_OW 237
// end ;
18781: PPOPN 6
18783: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18784: LD_EXP 20
18788: PUSH
18789: LD_EXP 67
18793: AND
18794: IFFALSE 18873
18796: GO 18798
18798: DISABLE
18799: LD_INT 0
18801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18802: LD_ADDR_VAR 0 1
18806: PUSH
18807: LD_INT 22
18809: PUSH
18810: LD_OWVAR 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: LD_INT 3
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PPUSH
18833: CALL_OW 69
18837: ST_TO_ADDR
// if not tmp then
18838: LD_VAR 0 1
18842: NOT
18843: IFFALSE 18847
// exit ;
18845: GO 18873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18847: LD_VAR 0 1
18851: PUSH
18852: LD_INT 1
18854: PPUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 12
18864: ARRAY
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: CALL_OW 234
// end ;
18873: PPOPN 1
18875: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18876: LD_EXP 20
18880: PUSH
18881: LD_EXP 68
18885: AND
18886: IFFALSE 18998
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18895: LD_ADDR_VAR 0 2
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 30
18917: PUSH
18918: LD_INT 27
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 26
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 28
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: ST_TO_ADDR
// if not tmp then
18960: LD_VAR 0 2
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 18998
// for i in tmp do
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 2
18978: PUSH
18979: FOR_IN
18980: IFFALSE 18996
// SetLives ( i , 1 ) ;
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 234
18994: GO 18979
18996: POP
18997: POP
// end ;
18998: PPOPN 2
19000: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19001: LD_EXP 20
19005: PUSH
19006: LD_EXP 69
19010: AND
19011: IFFALSE 19298
19013: GO 19015
19015: DISABLE
19016: LD_INT 0
19018: PPUSH
19019: PPUSH
19020: PPUSH
// begin i := rand ( 1 , 7 ) ;
19021: LD_ADDR_VAR 0 1
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 7
19031: PPUSH
19032: CALL_OW 12
19036: ST_TO_ADDR
// case i of 1 :
19037: LD_VAR 0 1
19041: PUSH
19042: LD_INT 1
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19060
19050: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19051: LD_STRING earthquake(getX(game), 0, 32)
19053: PPUSH
19054: CALL_OW 559
19058: GO 19298
19060: LD_INT 2
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19082
19068: POP
// begin ToLua ( displayStucuk(); ) ;
19069: LD_STRING displayStucuk();
19071: PPUSH
19072: CALL_OW 559
// ResetFog ;
19076: CALL_OW 335
// end ; 3 :
19080: GO 19298
19082: LD_INT 3
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19194
19090: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_OWVAR 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: ST_TO_ADDR
// if not tmp then
19127: LD_VAR 0 2
19131: NOT
19132: IFFALSE 19136
// exit ;
19134: GO 19298
// un := tmp [ rand ( 1 , tmp ) ] ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_VAR 0 2
19153: PPUSH
19154: CALL_OW 12
19158: ARRAY
19159: ST_TO_ADDR
// if Crawls ( un ) then
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 318
19169: IFFALSE 19180
// ComWalk ( un ) ;
19171: LD_VAR 0 3
19175: PPUSH
19176: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19180: LD_VAR 0 3
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 336
// end ; 4 :
19192: GO 19298
19194: LD_INT 4
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19276
19202: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_OWVAR 2
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 30
19222: PUSH
19223: LD_INT 29
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: ST_TO_ADDR
// if not tmp then
19239: LD_VAR 0 2
19243: NOT
19244: IFFALSE 19248
// exit ;
19246: GO 19298
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19248: LD_VAR 0 2
19252: PUSH
19253: LD_INT 1
19255: ARRAY
19256: PPUSH
19257: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: CALL_OW 65
// end ; 5 .. 7 :
19274: GO 19298
19276: LD_INT 5
19278: DOUBLE
19279: GREATEREQUAL
19280: IFFALSE 19288
19282: LD_INT 7
19284: DOUBLE
19285: LESSEQUAL
19286: IFTRUE 19290
19288: GO 19297
19290: POP
// StreamSibBomb ; end ;
19291: CALL 15535 0 0
19295: GO 19298
19297: POP
// end ;
19298: PPOPN 3
19300: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19301: LD_EXP 20
19305: PUSH
19306: LD_EXP 70
19310: AND
19311: IFFALSE 19467
19313: GO 19315
19315: DISABLE
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_INT 81
19328: PUSH
19329: LD_OWVAR 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 21
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 2
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19467
// p := 0 ;
19384: LD_ADDR_VAR 0 3
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19392: LD_INT 35
19394: PPUSH
19395: CALL_OW 67
// p := p + 1 ;
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 1
19411: PLUS
19412: ST_TO_ADDR
// for i in tmp do
19413: LD_ADDR_VAR 0 1
19417: PUSH
19418: LD_VAR 0 2
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19455
// if GetLives ( i ) < 1000 then
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 256
19435: PUSH
19436: LD_INT 1000
19438: LESS
19439: IFFALSE 19453
// SetLives ( i , 1000 ) ;
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 1000
19448: PPUSH
19449: CALL_OW 234
19453: GO 19423
19455: POP
19456: POP
// until p > 20 ;
19457: LD_VAR 0 3
19461: PUSH
19462: LD_INT 20
19464: GREATER
19465: IFFALSE 19392
// end ;
19467: PPOPN 3
19469: END
// every 0 0$1 trigger StreamModeActive and sTime do
19470: LD_EXP 20
19474: PUSH
19475: LD_EXP 71
19479: AND
19480: IFFALSE 19515
19482: GO 19484
19484: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19485: LD_INT 28
19487: PPUSH
19488: LD_OWVAR 2
19492: PPUSH
19493: LD_INT 2
19495: PPUSH
19496: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19500: LD_INT 30
19502: PPUSH
19503: LD_OWVAR 2
19507: PPUSH
19508: LD_INT 2
19510: PPUSH
19511: CALL_OW 322
// end ;
19515: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19516: LD_EXP 20
19520: PUSH
19521: LD_EXP 72
19525: AND
19526: IFFALSE 19647
19528: GO 19530
19530: DISABLE
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 21
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: ST_TO_ADDR
// if not tmp then
19589: LD_VAR 0 2
19593: NOT
19594: IFFALSE 19598
// exit ;
19596: GO 19647
// for i in tmp do
19598: LD_ADDR_VAR 0 1
19602: PUSH
19603: LD_VAR 0 2
19607: PUSH
19608: FOR_IN
19609: IFFALSE 19645
// begin if Crawls ( i ) then
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 318
19620: IFFALSE 19631
// ComWalk ( i ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 138
// SetClass ( i , 2 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 2
19638: PPUSH
19639: CALL_OW 336
// end ;
19643: GO 19608
19645: POP
19646: POP
// end ;
19647: PPOPN 2
19649: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19650: LD_EXP 20
19654: PUSH
19655: LD_EXP 73
19659: AND
19660: IFFALSE 19948
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
19669: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19670: LD_OWVAR 2
19674: PPUSH
19675: LD_INT 9
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19688: LD_INT 9
19690: PPUSH
19691: LD_OWVAR 2
19695: PPUSH
19696: CALL_OW 343
// uc_side := 9 ;
19700: LD_ADDR_OWVAR 20
19704: PUSH
19705: LD_INT 9
19707: ST_TO_ADDR
// uc_nation := 2 ;
19708: LD_ADDR_OWVAR 21
19712: PUSH
19713: LD_INT 2
19715: ST_TO_ADDR
// hc_name := Dark Warrior ;
19716: LD_ADDR_OWVAR 26
19720: PUSH
19721: LD_STRING Dark Warrior
19723: ST_TO_ADDR
// hc_gallery :=  ;
19724: LD_ADDR_OWVAR 33
19728: PUSH
19729: LD_STRING 
19731: ST_TO_ADDR
// hc_noskilllimit := true ;
19732: LD_ADDR_OWVAR 76
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19740: LD_ADDR_OWVAR 31
19744: PUSH
19745: LD_INT 30
19747: PUSH
19748: LD_INT 30
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 30
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// un := CreateHuman ;
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: CALL_OW 44
19772: ST_TO_ADDR
// hc_noskilllimit := false ;
19773: LD_ADDR_OWVAR 76
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 51
// ToLua ( playRanger() ) ;
19793: LD_STRING playRanger()
19795: PPUSH
19796: CALL_OW 559
// p := 0 ;
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19808: LD_INT 35
19810: PPUSH
19811: CALL_OW 67
// p := p + 1 ;
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_VAR 0 2
19824: PUSH
19825: LD_INT 1
19827: PLUS
19828: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19829: LD_VAR 0 3
19833: PPUSH
19834: CALL_OW 256
19838: PUSH
19839: LD_INT 1000
19841: LESS
19842: IFFALSE 19856
// SetLives ( un , 1000 ) ;
19844: LD_VAR 0 3
19848: PPUSH
19849: LD_INT 1000
19851: PPUSH
19852: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_INT 81
19863: PUSH
19864: LD_OWVAR 2
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 91
19875: PUSH
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 30
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PPUSH
19893: CALL_OW 69
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL_OW 74
19907: PPUSH
19908: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19912: LD_VAR 0 2
19916: PUSH
19917: LD_INT 80
19919: GREATER
19920: PUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 301
19930: OR
19931: IFFALSE 19808
// if un then
19933: LD_VAR 0 3
19937: IFFALSE 19948
// RemoveUnit ( un ) ;
19939: LD_VAR 0 3
19943: PPUSH
19944: CALL_OW 64
// end ;
19948: PPOPN 3
19950: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19951: LD_EXP 74
19955: IFFALSE 20071
19957: GO 19959
19959: DISABLE
19960: LD_INT 0
19962: PPUSH
19963: PPUSH
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19965: LD_ADDR_VAR 0 2
19969: PUSH
19970: LD_INT 81
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 21
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20001: LD_STRING playComputer()
20003: PPUSH
20004: CALL_OW 559
// if not tmp then
20008: LD_VAR 0 2
20012: NOT
20013: IFFALSE 20017
// exit ;
20015: GO 20071
// for i in tmp do
20017: LD_ADDR_VAR 0 1
20021: PUSH
20022: LD_VAR 0 2
20026: PUSH
20027: FOR_IN
20028: IFFALSE 20069
// for j := 1 to 4 do
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: DOUBLE
20036: LD_INT 1
20038: DEC
20039: ST_TO_ADDR
20040: LD_INT 4
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20065
// SetSkill ( i , j , 10 ) ;
20046: LD_VAR 0 1
20050: PPUSH
20051: LD_VAR 0 3
20055: PPUSH
20056: LD_INT 10
20058: PPUSH
20059: CALL_OW 237
20063: GO 20043
20065: POP
20066: POP
20067: GO 20027
20069: POP
20070: POP
// end ;
20071: PPOPN 3
20073: END
// every 0 0$1 trigger s30 do var i , tmp ;
20074: LD_EXP 75
20078: IFFALSE 20147
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_INT 22
20094: PUSH
20095: LD_OWVAR 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PPUSH
20104: CALL_OW 69
20108: ST_TO_ADDR
// if not tmp then
20109: LD_VAR 0 2
20113: NOT
20114: IFFALSE 20118
// exit ;
20116: GO 20147
// for i in tmp do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: LD_VAR 0 2
20127: PUSH
20128: FOR_IN
20129: IFFALSE 20145
// SetLives ( i , 300 ) ;
20131: LD_VAR 0 1
20135: PPUSH
20136: LD_INT 300
20138: PPUSH
20139: CALL_OW 234
20143: GO 20128
20145: POP
20146: POP
// end ;
20147: PPOPN 2
20149: END
// every 0 0$1 trigger s60 do var i , tmp ;
20150: LD_EXP 76
20154: IFFALSE 20223
20156: GO 20158
20158: DISABLE
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_OWVAR 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: ST_TO_ADDR
// if not tmp then
20185: LD_VAR 0 2
20189: NOT
20190: IFFALSE 20194
// exit ;
20192: GO 20223
// for i in tmp do
20194: LD_ADDR_VAR 0 1
20198: PUSH
20199: LD_VAR 0 2
20203: PUSH
20204: FOR_IN
20205: IFFALSE 20221
// SetLives ( i , 600 ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_INT 600
20214: PPUSH
20215: CALL_OW 234
20219: GO 20204
20221: POP
20222: POP
// end ;
20223: PPOPN 2
20225: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20226: LD_INT 0
20228: PPUSH
// case cmd of 301 :
20229: LD_VAR 0 1
20233: PUSH
20234: LD_INT 301
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20274
20242: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20243: LD_VAR 0 6
20247: PPUSH
20248: LD_VAR 0 7
20252: PPUSH
20253: LD_VAR 0 8
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: LD_VAR 0 5
20267: PPUSH
20268: CALL 21483 0 5
20272: GO 20395
20274: LD_INT 302
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20319
20282: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20283: LD_VAR 0 6
20287: PPUSH
20288: LD_VAR 0 7
20292: PPUSH
20293: LD_VAR 0 8
20297: PPUSH
20298: LD_VAR 0 9
20302: PPUSH
20303: LD_VAR 0 4
20307: PPUSH
20308: LD_VAR 0 5
20312: PPUSH
20313: CALL 21574 0 6
20317: GO 20395
20319: LD_INT 303
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20364
20327: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20328: LD_VAR 0 6
20332: PPUSH
20333: LD_VAR 0 7
20337: PPUSH
20338: LD_VAR 0 8
20342: PPUSH
20343: LD_VAR 0 9
20347: PPUSH
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_VAR 0 5
20357: PPUSH
20358: CALL 20400 0 6
20362: GO 20395
20364: LD_INT 304
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20394
20372: POP
// hHackTeleport ( unit , x , y ) ; end ;
20373: LD_VAR 0 2
20377: PPUSH
20378: LD_VAR 0 4
20382: PPUSH
20383: LD_VAR 0 5
20387: PPUSH
20388: CALL 22167 0 3
20392: GO 20395
20394: POP
// end ;
20395: LD_VAR 0 12
20399: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20400: LD_INT 0
20402: PPUSH
20403: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20404: LD_VAR 0 1
20408: PUSH
20409: LD_INT 1
20411: LESS
20412: PUSH
20413: LD_VAR 0 1
20417: PUSH
20418: LD_INT 3
20420: GREATER
20421: OR
20422: PUSH
20423: LD_VAR 0 5
20427: PPUSH
20428: LD_VAR 0 6
20432: PPUSH
20433: CALL_OW 428
20437: OR
20438: IFFALSE 20442
// exit ;
20440: GO 21170
// uc_side := your_side ;
20442: LD_ADDR_OWVAR 20
20446: PUSH
20447: LD_OWVAR 2
20451: ST_TO_ADDR
// uc_nation := nation ;
20452: LD_ADDR_OWVAR 21
20456: PUSH
20457: LD_VAR 0 1
20461: ST_TO_ADDR
// bc_level = 1 ;
20462: LD_ADDR_OWVAR 43
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// case btype of 1 :
20470: LD_VAR 0 2
20474: PUSH
20475: LD_INT 1
20477: DOUBLE
20478: EQUAL
20479: IFTRUE 20483
20481: GO 20494
20483: POP
// bc_type := b_depot ; 2 :
20484: LD_ADDR_OWVAR 42
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
20492: GO 21114
20494: LD_INT 2
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20513
20502: POP
// bc_type := b_warehouse ; 3 :
20503: LD_ADDR_OWVAR 42
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
20511: GO 21114
20513: LD_INT 3
20515: DOUBLE
20516: EQUAL
20517: IFTRUE 20521
20519: GO 20532
20521: POP
// bc_type := b_lab ; 4 .. 9 :
20522: LD_ADDR_OWVAR 42
20526: PUSH
20527: LD_INT 6
20529: ST_TO_ADDR
20530: GO 21114
20532: LD_INT 4
20534: DOUBLE
20535: GREATEREQUAL
20536: IFFALSE 20544
20538: LD_INT 9
20540: DOUBLE
20541: LESSEQUAL
20542: IFTRUE 20546
20544: GO 20606
20546: POP
// begin bc_type := b_lab_half ;
20547: LD_ADDR_OWVAR 42
20551: PUSH
20552: LD_INT 7
20554: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20555: LD_ADDR_OWVAR 44
20559: PUSH
20560: LD_INT 10
20562: PUSH
20563: LD_INT 11
20565: PUSH
20566: LD_INT 12
20568: PUSH
20569: LD_INT 15
20571: PUSH
20572: LD_INT 14
20574: PUSH
20575: LD_INT 13
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: LD_INT 3
20593: MINUS
20594: ARRAY
20595: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20596: LD_ADDR_OWVAR 45
20600: PUSH
20601: LD_INT 9
20603: ST_TO_ADDR
// end ; 10 .. 13 :
20604: GO 21114
20606: LD_INT 10
20608: DOUBLE
20609: GREATEREQUAL
20610: IFFALSE 20618
20612: LD_INT 13
20614: DOUBLE
20615: LESSEQUAL
20616: IFTRUE 20620
20618: GO 20697
20620: POP
// begin bc_type := b_lab_full ;
20621: LD_ADDR_OWVAR 42
20625: PUSH
20626: LD_INT 8
20628: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20629: LD_ADDR_OWVAR 44
20633: PUSH
20634: LD_INT 10
20636: PUSH
20637: LD_INT 12
20639: PUSH
20640: LD_INT 14
20642: PUSH
20643: LD_INT 13
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: PUSH
20652: LD_VAR 0 2
20656: PUSH
20657: LD_INT 9
20659: MINUS
20660: ARRAY
20661: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20662: LD_ADDR_OWVAR 45
20666: PUSH
20667: LD_INT 11
20669: PUSH
20670: LD_INT 15
20672: PUSH
20673: LD_INT 12
20675: PUSH
20676: LD_INT 15
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: LD_VAR 0 2
20689: PUSH
20690: LD_INT 9
20692: MINUS
20693: ARRAY
20694: ST_TO_ADDR
// end ; 14 :
20695: GO 21114
20697: LD_INT 14
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20716
20705: POP
// bc_type := b_workshop ; 15 :
20706: LD_ADDR_OWVAR 42
20710: PUSH
20711: LD_INT 2
20713: ST_TO_ADDR
20714: GO 21114
20716: LD_INT 15
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20735
20724: POP
// bc_type := b_factory ; 16 :
20725: LD_ADDR_OWVAR 42
20729: PUSH
20730: LD_INT 3
20732: ST_TO_ADDR
20733: GO 21114
20735: LD_INT 16
20737: DOUBLE
20738: EQUAL
20739: IFTRUE 20743
20741: GO 20754
20743: POP
// bc_type := b_ext_gun ; 17 :
20744: LD_ADDR_OWVAR 42
20748: PUSH
20749: LD_INT 17
20751: ST_TO_ADDR
20752: GO 21114
20754: LD_INT 17
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20790
20762: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20763: LD_ADDR_OWVAR 42
20767: PUSH
20768: LD_INT 19
20770: PUSH
20771: LD_INT 23
20773: PUSH
20774: LD_INT 19
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PUSH
20782: LD_VAR 0 1
20786: ARRAY
20787: ST_TO_ADDR
20788: GO 21114
20790: LD_INT 18
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 20809
20798: POP
// bc_type := b_ext_radar ; 19 :
20799: LD_ADDR_OWVAR 42
20803: PUSH
20804: LD_INT 20
20806: ST_TO_ADDR
20807: GO 21114
20809: LD_INT 19
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20828
20817: POP
// bc_type := b_ext_radio ; 20 :
20818: LD_ADDR_OWVAR 42
20822: PUSH
20823: LD_INT 22
20825: ST_TO_ADDR
20826: GO 21114
20828: LD_INT 20
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20847
20836: POP
// bc_type := b_ext_siberium ; 21 :
20837: LD_ADDR_OWVAR 42
20841: PUSH
20842: LD_INT 21
20844: ST_TO_ADDR
20845: GO 21114
20847: LD_INT 21
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20866
20855: POP
// bc_type := b_ext_computer ; 22 :
20856: LD_ADDR_OWVAR 42
20860: PUSH
20861: LD_INT 24
20863: ST_TO_ADDR
20864: GO 21114
20866: LD_INT 22
20868: DOUBLE
20869: EQUAL
20870: IFTRUE 20874
20872: GO 20885
20874: POP
// bc_type := b_ext_track ; 23 :
20875: LD_ADDR_OWVAR 42
20879: PUSH
20880: LD_INT 16
20882: ST_TO_ADDR
20883: GO 21114
20885: LD_INT 23
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20904
20893: POP
// bc_type := b_ext_laser ; 24 :
20894: LD_ADDR_OWVAR 42
20898: PUSH
20899: LD_INT 25
20901: ST_TO_ADDR
20902: GO 21114
20904: LD_INT 24
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20923
20912: POP
// bc_type := b_control_tower ; 25 :
20913: LD_ADDR_OWVAR 42
20917: PUSH
20918: LD_INT 36
20920: ST_TO_ADDR
20921: GO 21114
20923: LD_INT 25
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 20942
20931: POP
// bc_type := b_breastwork ; 26 :
20932: LD_ADDR_OWVAR 42
20936: PUSH
20937: LD_INT 31
20939: ST_TO_ADDR
20940: GO 21114
20942: LD_INT 26
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20961
20950: POP
// bc_type := b_bunker ; 27 :
20951: LD_ADDR_OWVAR 42
20955: PUSH
20956: LD_INT 32
20958: ST_TO_ADDR
20959: GO 21114
20961: LD_INT 27
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20980
20969: POP
// bc_type := b_turret ; 28 :
20970: LD_ADDR_OWVAR 42
20974: PUSH
20975: LD_INT 33
20977: ST_TO_ADDR
20978: GO 21114
20980: LD_INT 28
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 20999
20988: POP
// bc_type := b_armoury ; 29 :
20989: LD_ADDR_OWVAR 42
20993: PUSH
20994: LD_INT 4
20996: ST_TO_ADDR
20997: GO 21114
20999: LD_INT 29
21001: DOUBLE
21002: EQUAL
21003: IFTRUE 21007
21005: GO 21018
21007: POP
// bc_type := b_barracks ; 30 :
21008: LD_ADDR_OWVAR 42
21012: PUSH
21013: LD_INT 5
21015: ST_TO_ADDR
21016: GO 21114
21018: LD_INT 30
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 21037
21026: POP
// bc_type := b_solar_power ; 31 :
21027: LD_ADDR_OWVAR 42
21031: PUSH
21032: LD_INT 27
21034: ST_TO_ADDR
21035: GO 21114
21037: LD_INT 31
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21056
21045: POP
// bc_type := b_oil_power ; 32 :
21046: LD_ADDR_OWVAR 42
21050: PUSH
21051: LD_INT 26
21053: ST_TO_ADDR
21054: GO 21114
21056: LD_INT 32
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21075
21064: POP
// bc_type := b_siberite_power ; 33 :
21065: LD_ADDR_OWVAR 42
21069: PUSH
21070: LD_INT 28
21072: ST_TO_ADDR
21073: GO 21114
21075: LD_INT 33
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21094
21083: POP
// bc_type := b_oil_mine ; 34 :
21084: LD_ADDR_OWVAR 42
21088: PUSH
21089: LD_INT 29
21091: ST_TO_ADDR
21092: GO 21114
21094: LD_INT 34
21096: DOUBLE
21097: EQUAL
21098: IFTRUE 21102
21100: GO 21113
21102: POP
// bc_type := b_siberite_mine ; end ;
21103: LD_ADDR_OWVAR 42
21107: PUSH
21108: LD_INT 30
21110: ST_TO_ADDR
21111: GO 21114
21113: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21114: LD_ADDR_VAR 0 8
21118: PUSH
21119: LD_VAR 0 5
21123: PPUSH
21124: LD_VAR 0 6
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: CALL_OW 47
21138: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21139: LD_OWVAR 42
21143: PUSH
21144: LD_INT 32
21146: PUSH
21147: LD_INT 33
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: IN
21154: IFFALSE 21170
// PlaceWeaponTurret ( b , weapon ) ;
21156: LD_VAR 0 8
21160: PPUSH
21161: LD_VAR 0 4
21165: PPUSH
21166: CALL_OW 431
// end ;
21170: LD_VAR 0 7
21174: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21175: LD_INT 0
21177: PPUSH
21178: PPUSH
21179: PPUSH
21180: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21181: LD_ADDR_VAR 0 4
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 30
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 30
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 4
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21303
// for i in tmp do
21244: LD_ADDR_VAR 0 2
21248: PUSH
21249: LD_VAR 0 4
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21301
// for j = 1 to 3 do
21257: LD_ADDR_VAR 0 3
21261: PUSH
21262: DOUBLE
21263: LD_INT 1
21265: DEC
21266: ST_TO_ADDR
21267: LD_INT 3
21269: PUSH
21270: FOR_TO
21271: IFFALSE 21297
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21273: LD_VAR 0 2
21277: PPUSH
21278: CALL_OW 274
21282: PPUSH
21283: LD_VAR 0 3
21287: PPUSH
21288: LD_INT 99999
21290: PPUSH
21291: CALL_OW 277
21295: GO 21270
21297: POP
21298: POP
21299: GO 21254
21301: POP
21302: POP
// end ;
21303: LD_VAR 0 1
21307: RET
// export function hHackSetLevel10 ; var i , j ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: PUSH
21333: FOR_IN
21334: IFFALSE 21386
// if IsSelected ( i ) then
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 306
21345: IFFALSE 21384
// begin for j := 1 to 4 do
21347: LD_ADDR_VAR 0 3
21351: PUSH
21352: DOUBLE
21353: LD_INT 1
21355: DEC
21356: ST_TO_ADDR
21357: LD_INT 4
21359: PUSH
21360: FOR_TO
21361: IFFALSE 21382
// SetSkill ( i , j , 10 ) ;
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 3
21372: PPUSH
21373: LD_INT 10
21375: PPUSH
21376: CALL_OW 237
21380: GO 21360
21382: POP
21383: POP
// end ;
21384: GO 21333
21386: POP
21387: POP
// end ;
21388: LD_VAR 0 1
21392: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21398: LD_ADDR_VAR 0 2
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_OWVAR 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 21
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PPUSH
21429: CALL_OW 69
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21476
// begin for j := 1 to 4 do
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: DOUBLE
21443: LD_INT 1
21445: DEC
21446: ST_TO_ADDR
21447: LD_INT 4
21449: PUSH
21450: FOR_TO
21451: IFFALSE 21472
// SetSkill ( i , j , 10 ) ;
21453: LD_VAR 0 2
21457: PPUSH
21458: LD_VAR 0 3
21462: PPUSH
21463: LD_INT 10
21465: PPUSH
21466: CALL_OW 237
21470: GO 21450
21472: POP
21473: POP
// end ;
21474: GO 21434
21476: POP
21477: POP
// end ;
21478: LD_VAR 0 1
21482: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21483: LD_INT 0
21485: PPUSH
// uc_side := your_side ;
21486: LD_ADDR_OWVAR 20
21490: PUSH
21491: LD_OWVAR 2
21495: ST_TO_ADDR
// uc_nation := nation ;
21496: LD_ADDR_OWVAR 21
21500: PUSH
21501: LD_VAR 0 1
21505: ST_TO_ADDR
// InitHc ;
21506: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21510: LD_INT 0
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_VAR 0 3
21522: PPUSH
21523: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21527: LD_VAR 0 4
21531: PPUSH
21532: LD_VAR 0 5
21536: PPUSH
21537: CALL_OW 428
21541: PUSH
21542: LD_INT 0
21544: EQUAL
21545: IFFALSE 21569
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21547: CALL_OW 44
21551: PPUSH
21552: LD_VAR 0 4
21556: PPUSH
21557: LD_VAR 0 5
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 48
// end ;
21569: LD_VAR 0 6
21573: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21574: LD_INT 0
21576: PPUSH
21577: PPUSH
// uc_side := your_side ;
21578: LD_ADDR_OWVAR 20
21582: PUSH
21583: LD_OWVAR 2
21587: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 3
21601: PUSH
21602: LD_INT 4
21604: PUSH
21605: LD_INT 5
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: IN
21615: IFFALSE 21627
// uc_nation := nation_american else
21617: LD_ADDR_OWVAR 21
21621: PUSH
21622: LD_INT 1
21624: ST_TO_ADDR
21625: GO 21670
// if chassis in [ 11 , 12 , 13 , 14 ] then
21627: LD_VAR 0 1
21631: PUSH
21632: LD_INT 11
21634: PUSH
21635: LD_INT 12
21637: PUSH
21638: LD_INT 13
21640: PUSH
21641: LD_INT 14
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: IN
21650: IFFALSE 21662
// uc_nation := nation_arabian else
21652: LD_ADDR_OWVAR 21
21656: PUSH
21657: LD_INT 2
21659: ST_TO_ADDR
21660: GO 21670
// uc_nation := nation_russian ;
21662: LD_ADDR_OWVAR 21
21666: PUSH
21667: LD_INT 3
21669: ST_TO_ADDR
// vc_chassis := chassis ;
21670: LD_ADDR_OWVAR 37
21674: PUSH
21675: LD_VAR 0 1
21679: ST_TO_ADDR
// vc_engine := engine ;
21680: LD_ADDR_OWVAR 39
21684: PUSH
21685: LD_VAR 0 2
21689: ST_TO_ADDR
// vc_control := control ;
21690: LD_ADDR_OWVAR 38
21694: PUSH
21695: LD_VAR 0 3
21699: ST_TO_ADDR
// vc_weapon := weapon ;
21700: LD_ADDR_OWVAR 40
21704: PUSH
21705: LD_VAR 0 4
21709: ST_TO_ADDR
// un := CreateVehicle ;
21710: LD_ADDR_VAR 0 8
21714: PUSH
21715: CALL_OW 45
21719: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21720: LD_VAR 0 8
21724: PPUSH
21725: LD_INT 0
21727: PPUSH
21728: LD_INT 5
21730: PPUSH
21731: CALL_OW 12
21735: PPUSH
21736: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21740: LD_VAR 0 8
21744: PPUSH
21745: LD_VAR 0 5
21749: PPUSH
21750: LD_VAR 0 6
21754: PPUSH
21755: LD_INT 1
21757: PPUSH
21758: CALL_OW 48
// end ;
21762: LD_VAR 0 7
21766: RET
// export hInvincible ; every 1 do
21767: GO 21769
21769: DISABLE
// hInvincible := [ ] ;
21770: LD_ADDR_EXP 77
21774: PUSH
21775: EMPTY
21776: ST_TO_ADDR
21777: END
// every 10 do var i ;
21778: GO 21780
21780: DISABLE
21781: LD_INT 0
21783: PPUSH
// begin enable ;
21784: ENABLE
// if not hInvincible then
21785: LD_EXP 77
21789: NOT
21790: IFFALSE 21794
// exit ;
21792: GO 21838
// for i in hInvincible do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: LD_EXP 77
21803: PUSH
21804: FOR_IN
21805: IFFALSE 21836
// if GetLives ( i ) < 1000 then
21807: LD_VAR 0 1
21811: PPUSH
21812: CALL_OW 256
21816: PUSH
21817: LD_INT 1000
21819: LESS
21820: IFFALSE 21834
// SetLives ( i , 1000 ) ;
21822: LD_VAR 0 1
21826: PPUSH
21827: LD_INT 1000
21829: PPUSH
21830: CALL_OW 234
21834: GO 21804
21836: POP
21837: POP
// end ;
21838: PPOPN 1
21840: END
// export function hHackInvincible ; var i ; begin
21841: LD_INT 0
21843: PPUSH
21844: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 21
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 21
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: PPUSH
21878: CALL_OW 69
21882: PUSH
21883: FOR_IN
21884: IFFALSE 21945
// if IsSelected ( i ) then
21886: LD_VAR 0 2
21890: PPUSH
21891: CALL_OW 306
21895: IFFALSE 21943
// begin if i in hInvincible then
21897: LD_VAR 0 2
21901: PUSH
21902: LD_EXP 77
21906: IN
21907: IFFALSE 21927
// hInvincible := hInvincible diff i else
21909: LD_ADDR_EXP 77
21913: PUSH
21914: LD_EXP 77
21918: PUSH
21919: LD_VAR 0 2
21923: DIFF
21924: ST_TO_ADDR
21925: GO 21943
// hInvincible := hInvincible union i ;
21927: LD_ADDR_EXP 77
21931: PUSH
21932: LD_EXP 77
21936: PUSH
21937: LD_VAR 0 2
21941: UNION
21942: ST_TO_ADDR
// end ;
21943: GO 21883
21945: POP
21946: POP
// end ;
21947: LD_VAR 0 1
21951: RET
// export function hHackInvisible ; var i , j ; begin
21952: LD_INT 0
21954: PPUSH
21955: PPUSH
21956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: PUSH
21977: FOR_IN
21978: IFFALSE 22002
// if IsSelected ( i ) then
21980: LD_VAR 0 2
21984: PPUSH
21985: CALL_OW 306
21989: IFFALSE 22000
// ComForceInvisible ( i ) ;
21991: LD_VAR 0 2
21995: PPUSH
21996: CALL_OW 496
22000: GO 21977
22002: POP
22003: POP
// end ;
22004: LD_VAR 0 1
22008: RET
// export function hHackChangeYourSide ; begin
22009: LD_INT 0
22011: PPUSH
// if your_side = 8 then
22012: LD_OWVAR 2
22016: PUSH
22017: LD_INT 8
22019: EQUAL
22020: IFFALSE 22032
// your_side := 0 else
22022: LD_ADDR_OWVAR 2
22026: PUSH
22027: LD_INT 0
22029: ST_TO_ADDR
22030: GO 22046
// your_side := your_side + 1 ;
22032: LD_ADDR_OWVAR 2
22036: PUSH
22037: LD_OWVAR 2
22041: PUSH
22042: LD_INT 1
22044: PLUS
22045: ST_TO_ADDR
// end ;
22046: LD_VAR 0 1
22050: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22051: LD_INT 0
22053: PPUSH
22054: PPUSH
22055: PPUSH
// for i in all_units do
22056: LD_ADDR_VAR 0 2
22060: PUSH
22061: LD_OWVAR 3
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22145
// if IsSelected ( i ) then
22069: LD_VAR 0 2
22073: PPUSH
22074: CALL_OW 306
22078: IFFALSE 22143
// begin j := GetSide ( i ) ;
22080: LD_ADDR_VAR 0 3
22084: PUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: CALL_OW 255
22094: ST_TO_ADDR
// if j = 8 then
22095: LD_VAR 0 3
22099: PUSH
22100: LD_INT 8
22102: EQUAL
22103: IFFALSE 22115
// j := 0 else
22105: LD_ADDR_VAR 0 3
22109: PUSH
22110: LD_INT 0
22112: ST_TO_ADDR
22113: GO 22129
// j := j + 1 ;
22115: LD_ADDR_VAR 0 3
22119: PUSH
22120: LD_VAR 0 3
22124: PUSH
22125: LD_INT 1
22127: PLUS
22128: ST_TO_ADDR
// SetSide ( i , j ) ;
22129: LD_VAR 0 2
22133: PPUSH
22134: LD_VAR 0 3
22138: PPUSH
22139: CALL_OW 235
// end ;
22143: GO 22066
22145: POP
22146: POP
// end ;
22147: LD_VAR 0 1
22151: RET
// export function hHackFog ; begin
22152: LD_INT 0
22154: PPUSH
// FogOff ( true ) ;
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 344
// end ;
22162: LD_VAR 0 1
22166: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22167: LD_INT 0
22169: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 2
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_INT 1
22187: PPUSH
22188: LD_INT 1
22190: PPUSH
22191: CALL_OW 483
// CenterOnXY ( x , y ) ;
22195: LD_VAR 0 2
22199: PPUSH
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 84
// end ;
22209: LD_VAR 0 4
22213: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22214: LD_INT 0
22216: PPUSH
22217: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22218: LD_VAR 0 1
22222: NOT
22223: PUSH
22224: LD_VAR 0 2
22228: PPUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 488
22238: NOT
22239: OR
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 266
22250: PUSH
22251: LD_INT 3
22253: NONEQUAL
22254: PUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 247
22264: PUSH
22265: LD_INT 1
22267: EQUAL
22268: NOT
22269: AND
22270: OR
22271: IFFALSE 22275
// exit ;
22273: GO 22424
// if GetType ( factory ) = unit_human then
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 247
22284: PUSH
22285: LD_INT 1
22287: EQUAL
22288: IFFALSE 22305
// factory := IsInUnit ( factory ) ;
22290: LD_ADDR_VAR 0 1
22294: PUSH
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 310
22304: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL_OW 266
22314: PUSH
22315: LD_INT 3
22317: NONEQUAL
22318: IFFALSE 22322
// exit ;
22320: GO 22424
// if HexInfo ( x , y ) = factory then
22322: LD_VAR 0 2
22326: PPUSH
22327: LD_VAR 0 3
22331: PPUSH
22332: CALL_OW 428
22336: PUSH
22337: LD_VAR 0 1
22341: EQUAL
22342: IFFALSE 22369
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22344: LD_ADDR_EXP 78
22348: PUSH
22349: LD_EXP 78
22353: PPUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_INT 0
22361: PPUSH
22362: CALL_OW 1
22366: ST_TO_ADDR
22367: GO 22420
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22369: LD_ADDR_EXP 78
22373: PUSH
22374: LD_EXP 78
22378: PPUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PUSH
22394: LD_VAR 0 1
22398: PUSH
22399: LD_VAR 0 2
22403: PUSH
22404: LD_VAR 0 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 1
22419: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22420: CALL 22429 0 0
// end ;
22424: LD_VAR 0 4
22428: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22434: LD_STRING resetFactoryWaypoint();
22436: PPUSH
22437: CALL_OW 559
// if factoryWaypoints then
22441: LD_EXP 78
22445: IFFALSE 22571
// begin list := PrepareArray ( factoryWaypoints ) ;
22447: LD_ADDR_VAR 0 3
22451: PUSH
22452: LD_EXP 78
22456: PPUSH
22457: CALL 64604 0 1
22461: ST_TO_ADDR
// for i := 1 to list do
22462: LD_ADDR_VAR 0 2
22466: PUSH
22467: DOUBLE
22468: LD_INT 1
22470: DEC
22471: ST_TO_ADDR
22472: LD_VAR 0 3
22476: PUSH
22477: FOR_TO
22478: IFFALSE 22569
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22480: LD_STRING setFactoryWaypointXY(
22482: PUSH
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 2
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: STR
22498: PUSH
22499: LD_STRING ,
22501: STR
22502: PUSH
22503: LD_VAR 0 3
22507: PUSH
22508: LD_VAR 0 2
22512: ARRAY
22513: PUSH
22514: LD_INT 2
22516: ARRAY
22517: STR
22518: PUSH
22519: LD_STRING ,
22521: STR
22522: PUSH
22523: LD_VAR 0 3
22527: PUSH
22528: LD_VAR 0 2
22532: ARRAY
22533: PUSH
22534: LD_INT 3
22536: ARRAY
22537: STR
22538: PUSH
22539: LD_STRING ,
22541: STR
22542: PUSH
22543: LD_VAR 0 3
22547: PUSH
22548: LD_VAR 0 2
22552: ARRAY
22553: PUSH
22554: LD_INT 4
22556: ARRAY
22557: STR
22558: PUSH
22559: LD_STRING )
22561: STR
22562: PPUSH
22563: CALL_OW 559
22567: GO 22477
22569: POP
22570: POP
// end ; end ;
22571: LD_VAR 0 1
22575: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22576: LD_INT 0
22578: PPUSH
// if HexInfo ( x , y ) = warehouse then
22579: LD_VAR 0 2
22583: PPUSH
22584: LD_VAR 0 3
22588: PPUSH
22589: CALL_OW 428
22593: PUSH
22594: LD_VAR 0 1
22598: EQUAL
22599: IFFALSE 22626
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22601: LD_ADDR_EXP 79
22605: PUSH
22606: LD_EXP 79
22610: PPUSH
22611: LD_VAR 0 1
22615: PPUSH
22616: LD_INT 0
22618: PPUSH
22619: CALL_OW 1
22623: ST_TO_ADDR
22624: GO 22677
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22626: LD_ADDR_EXP 79
22630: PUSH
22631: LD_EXP 79
22635: PPUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 255
22650: PUSH
22651: LD_VAR 0 1
22655: PUSH
22656: LD_VAR 0 2
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22677: CALL 22686 0 0
// end ;
22681: LD_VAR 0 4
22685: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22686: LD_INT 0
22688: PPUSH
22689: PPUSH
22690: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22691: LD_STRING resetWarehouseGatheringPoints();
22693: PPUSH
22694: CALL_OW 559
// if warehouseGatheringPoints then
22698: LD_EXP 79
22702: IFFALSE 22828
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22704: LD_ADDR_VAR 0 3
22708: PUSH
22709: LD_EXP 79
22713: PPUSH
22714: CALL 64604 0 1
22718: ST_TO_ADDR
// for i := 1 to list do
22719: LD_ADDR_VAR 0 2
22723: PUSH
22724: DOUBLE
22725: LD_INT 1
22727: DEC
22728: ST_TO_ADDR
22729: LD_VAR 0 3
22733: PUSH
22734: FOR_TO
22735: IFFALSE 22826
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22737: LD_STRING setWarehouseGatheringPointXY(
22739: PUSH
22740: LD_VAR 0 3
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: STR
22755: PUSH
22756: LD_STRING ,
22758: STR
22759: PUSH
22760: LD_VAR 0 3
22764: PUSH
22765: LD_VAR 0 2
22769: ARRAY
22770: PUSH
22771: LD_INT 2
22773: ARRAY
22774: STR
22775: PUSH
22776: LD_STRING ,
22778: STR
22779: PUSH
22780: LD_VAR 0 3
22784: PUSH
22785: LD_VAR 0 2
22789: ARRAY
22790: PUSH
22791: LD_INT 3
22793: ARRAY
22794: STR
22795: PUSH
22796: LD_STRING ,
22798: STR
22799: PUSH
22800: LD_VAR 0 3
22804: PUSH
22805: LD_VAR 0 2
22809: ARRAY
22810: PUSH
22811: LD_INT 4
22813: ARRAY
22814: STR
22815: PUSH
22816: LD_STRING )
22818: STR
22819: PPUSH
22820: CALL_OW 559
22824: GO 22734
22826: POP
22827: POP
// end ; end ;
22828: LD_VAR 0 1
22832: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22833: LD_EXP 79
22837: IFFALSE 23522
22839: GO 22841
22841: DISABLE
22842: LD_INT 0
22844: PPUSH
22845: PPUSH
22846: PPUSH
22847: PPUSH
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
22852: PPUSH
// begin enable ;
22853: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22854: LD_ADDR_VAR 0 3
22858: PUSH
22859: LD_EXP 79
22863: PPUSH
22864: CALL 64604 0 1
22868: ST_TO_ADDR
// if not list then
22869: LD_VAR 0 3
22873: NOT
22874: IFFALSE 22878
// exit ;
22876: GO 23522
// for i := 1 to list do
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: DOUBLE
22884: LD_INT 1
22886: DEC
22887: ST_TO_ADDR
22888: LD_VAR 0 3
22892: PUSH
22893: FOR_TO
22894: IFFALSE 23520
// begin depot := list [ i ] [ 2 ] ;
22896: LD_ADDR_VAR 0 8
22900: PUSH
22901: LD_VAR 0 3
22905: PUSH
22906: LD_VAR 0 1
22910: ARRAY
22911: PUSH
22912: LD_INT 2
22914: ARRAY
22915: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22916: LD_ADDR_VAR 0 5
22920: PUSH
22921: LD_VAR 0 3
22925: PUSH
22926: LD_VAR 0 1
22930: ARRAY
22931: PUSH
22932: LD_INT 1
22934: ARRAY
22935: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22936: LD_VAR 0 8
22940: PPUSH
22941: CALL_OW 301
22945: PUSH
22946: LD_VAR 0 5
22950: PUSH
22951: LD_VAR 0 8
22955: PPUSH
22956: CALL_OW 255
22960: NONEQUAL
22961: OR
22962: IFFALSE 22991
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22964: LD_ADDR_EXP 79
22968: PUSH
22969: LD_EXP 79
22973: PPUSH
22974: LD_VAR 0 8
22978: PPUSH
22979: LD_INT 0
22981: PPUSH
22982: CALL_OW 1
22986: ST_TO_ADDR
// exit ;
22987: POP
22988: POP
22989: GO 23522
// end ; x := list [ i ] [ 3 ] ;
22991: LD_ADDR_VAR 0 6
22995: PUSH
22996: LD_VAR 0 3
23000: PUSH
23001: LD_VAR 0 1
23005: ARRAY
23006: PUSH
23007: LD_INT 3
23009: ARRAY
23010: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23011: LD_ADDR_VAR 0 7
23015: PUSH
23016: LD_VAR 0 3
23020: PUSH
23021: LD_VAR 0 1
23025: ARRAY
23026: PUSH
23027: LD_INT 4
23029: ARRAY
23030: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23031: LD_ADDR_VAR 0 9
23035: PUSH
23036: LD_VAR 0 6
23040: PPUSH
23041: LD_VAR 0 7
23045: PPUSH
23046: LD_INT 16
23048: PPUSH
23049: CALL 63192 0 3
23053: ST_TO_ADDR
// if not cratesNearbyPoint then
23054: LD_VAR 0 9
23058: NOT
23059: IFFALSE 23065
// exit ;
23061: POP
23062: POP
23063: GO 23522
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23065: LD_ADDR_VAR 0 4
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_VAR 0 5
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 3
23084: PUSH
23085: LD_INT 60
23087: PUSH
23088: EMPTY
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 91
23097: PUSH
23098: LD_VAR 0 8
23102: PUSH
23103: LD_INT 6
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 25
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 25
23126: PUSH
23127: LD_INT 16
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: PPUSH
23145: CALL_OW 69
23149: PUSH
23150: LD_VAR 0 8
23154: PPUSH
23155: CALL_OW 313
23159: PPUSH
23160: LD_INT 3
23162: PUSH
23163: LD_INT 60
23165: PUSH
23166: EMPTY
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 25
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 25
23188: PUSH
23189: LD_INT 16
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 72
23209: UNION
23210: ST_TO_ADDR
// if tmp then
23211: LD_VAR 0 4
23215: IFFALSE 23295
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23217: LD_ADDR_VAR 0 4
23221: PUSH
23222: LD_VAR 0 4
23226: PPUSH
23227: LD_INT 3
23229: PPUSH
23230: CALL 61161 0 2
23234: ST_TO_ADDR
// for j in tmp do
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_VAR 0 4
23244: PUSH
23245: FOR_IN
23246: IFFALSE 23289
// begin if IsInUnit ( j ) then
23248: LD_VAR 0 2
23252: PPUSH
23253: CALL_OW 310
23257: IFFALSE 23268
// ComExit ( j ) ;
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL 61244 0 1
// AddComCollect ( j , x , y ) ;
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 6
23277: PPUSH
23278: LD_VAR 0 7
23282: PPUSH
23283: CALL_OW 177
// end ;
23287: GO 23245
23289: POP
23290: POP
// exit ;
23291: POP
23292: POP
23293: GO 23522
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_INT 22
23302: PUSH
23303: LD_VAR 0 5
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 91
23314: PUSH
23315: LD_VAR 0 8
23319: PUSH
23320: LD_INT 8
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 34
23333: PUSH
23334: LD_INT 12
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 34
23343: PUSH
23344: LD_INT 51
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 34
23353: PUSH
23354: LD_INT 32
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 34
23363: PUSH
23364: LD_INT 89
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if tmp then
23388: LD_VAR 0 4
23392: IFFALSE 23518
// begin for j in tmp do
23394: LD_ADDR_VAR 0 2
23398: PUSH
23399: LD_VAR 0 4
23403: PUSH
23404: FOR_IN
23405: IFFALSE 23516
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: CALL_OW 262
23416: PUSH
23417: LD_INT 3
23419: EQUAL
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 261
23430: PUSH
23431: LD_INT 20
23433: GREATER
23434: OR
23435: PUSH
23436: LD_VAR 0 2
23440: PPUSH
23441: CALL_OW 314
23445: NOT
23446: AND
23447: PUSH
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL_OW 263
23457: PUSH
23458: LD_INT 1
23460: NONEQUAL
23461: PUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: CALL_OW 311
23471: OR
23472: AND
23473: IFFALSE 23514
// begin ComCollect ( j , x , y ) ;
23475: LD_VAR 0 2
23479: PPUSH
23480: LD_VAR 0 6
23484: PPUSH
23485: LD_VAR 0 7
23489: PPUSH
23490: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23494: LD_VAR 0 2
23498: PPUSH
23499: LD_VAR 0 8
23503: PPUSH
23504: CALL_OW 172
// exit ;
23508: POP
23509: POP
23510: POP
23511: POP
23512: GO 23522
// end ;
23514: GO 23404
23516: POP
23517: POP
// end ; end ;
23518: GO 22893
23520: POP
23521: POP
// end ; end_of_file
23522: PPOPN 9
23524: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
// if exist_mode then
23529: LD_VAR 0 2
23533: IFFALSE 23558
// unit := CreateCharacter ( prefix & ident ) else
23535: LD_ADDR_VAR 0 5
23539: PUSH
23540: LD_VAR 0 3
23544: PUSH
23545: LD_VAR 0 1
23549: STR
23550: PPUSH
23551: CALL_OW 34
23555: ST_TO_ADDR
23556: GO 23573
// unit := NewCharacter ( ident ) ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: CALL_OW 25
23572: ST_TO_ADDR
// result := unit ;
23573: LD_ADDR_VAR 0 4
23577: PUSH
23578: LD_VAR 0 5
23582: ST_TO_ADDR
// end ;
23583: LD_VAR 0 4
23587: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23588: LD_INT 0
23590: PPUSH
23591: PPUSH
// if not side or not nation then
23592: LD_VAR 0 1
23596: NOT
23597: PUSH
23598: LD_VAR 0 2
23602: NOT
23603: OR
23604: IFFALSE 23608
// exit ;
23606: GO 24376
// case nation of nation_american :
23608: LD_VAR 0 2
23612: PUSH
23613: LD_INT 1
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23835
23621: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23622: LD_ADDR_VAR 0 4
23626: PUSH
23627: LD_INT 35
23629: PUSH
23630: LD_INT 45
23632: PUSH
23633: LD_INT 46
23635: PUSH
23636: LD_INT 47
23638: PUSH
23639: LD_INT 82
23641: PUSH
23642: LD_INT 83
23644: PUSH
23645: LD_INT 84
23647: PUSH
23648: LD_INT 85
23650: PUSH
23651: LD_INT 86
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: LD_INT 6
23662: PUSH
23663: LD_INT 15
23665: PUSH
23666: LD_INT 16
23668: PUSH
23669: LD_INT 7
23671: PUSH
23672: LD_INT 12
23674: PUSH
23675: LD_INT 13
23677: PUSH
23678: LD_INT 10
23680: PUSH
23681: LD_INT 14
23683: PUSH
23684: LD_INT 20
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 22
23692: PUSH
23693: LD_INT 25
23695: PUSH
23696: LD_INT 32
23698: PUSH
23699: LD_INT 27
23701: PUSH
23702: LD_INT 36
23704: PUSH
23705: LD_INT 69
23707: PUSH
23708: LD_INT 39
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 40
23716: PUSH
23717: LD_INT 48
23719: PUSH
23720: LD_INT 49
23722: PUSH
23723: LD_INT 50
23725: PUSH
23726: LD_INT 51
23728: PUSH
23729: LD_INT 52
23731: PUSH
23732: LD_INT 53
23734: PUSH
23735: LD_INT 54
23737: PUSH
23738: LD_INT 55
23740: PUSH
23741: LD_INT 56
23743: PUSH
23744: LD_INT 57
23746: PUSH
23747: LD_INT 58
23749: PUSH
23750: LD_INT 59
23752: PUSH
23753: LD_INT 60
23755: PUSH
23756: LD_INT 61
23758: PUSH
23759: LD_INT 62
23761: PUSH
23762: LD_INT 80
23764: PUSH
23765: LD_INT 82
23767: PUSH
23768: LD_INT 83
23770: PUSH
23771: LD_INT 84
23773: PUSH
23774: LD_INT 85
23776: PUSH
23777: LD_INT 86
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
23833: GO 24300
23835: LD_INT 2
23837: DOUBLE
23838: EQUAL
23839: IFTRUE 23843
23841: GO 24069
23843: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23844: LD_ADDR_VAR 0 4
23848: PUSH
23849: LD_INT 35
23851: PUSH
23852: LD_INT 45
23854: PUSH
23855: LD_INT 46
23857: PUSH
23858: LD_INT 47
23860: PUSH
23861: LD_INT 82
23863: PUSH
23864: LD_INT 83
23866: PUSH
23867: LD_INT 84
23869: PUSH
23870: LD_INT 85
23872: PUSH
23873: LD_INT 87
23875: PUSH
23876: LD_INT 70
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 11
23884: PUSH
23885: LD_INT 3
23887: PUSH
23888: LD_INT 4
23890: PUSH
23891: LD_INT 5
23893: PUSH
23894: LD_INT 6
23896: PUSH
23897: LD_INT 15
23899: PUSH
23900: LD_INT 18
23902: PUSH
23903: LD_INT 7
23905: PUSH
23906: LD_INT 17
23908: PUSH
23909: LD_INT 8
23911: PUSH
23912: LD_INT 20
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 22
23920: PUSH
23921: LD_INT 72
23923: PUSH
23924: LD_INT 26
23926: PUSH
23927: LD_INT 69
23929: PUSH
23930: LD_INT 39
23932: PUSH
23933: LD_INT 40
23935: PUSH
23936: LD_INT 41
23938: PUSH
23939: LD_INT 42
23941: PUSH
23942: LD_INT 43
23944: PUSH
23945: LD_INT 48
23947: PUSH
23948: LD_INT 49
23950: PUSH
23951: LD_INT 50
23953: PUSH
23954: LD_INT 51
23956: PUSH
23957: LD_INT 52
23959: PUSH
23960: LD_INT 53
23962: PUSH
23963: LD_INT 54
23965: PUSH
23966: LD_INT 55
23968: PUSH
23969: LD_INT 56
23971: PUSH
23972: LD_INT 60
23974: PUSH
23975: LD_INT 61
23977: PUSH
23978: LD_INT 62
23980: PUSH
23981: LD_INT 66
23983: PUSH
23984: LD_INT 67
23986: PUSH
23987: LD_INT 68
23989: PUSH
23990: LD_INT 81
23992: PUSH
23993: LD_INT 82
23995: PUSH
23996: LD_INT 83
23998: PUSH
23999: LD_INT 84
24001: PUSH
24002: LD_INT 85
24004: PUSH
24005: LD_INT 87
24007: PUSH
24008: LD_INT 88
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: ST_TO_ADDR
24067: GO 24300
24069: LD_INT 3
24071: DOUBLE
24072: EQUAL
24073: IFTRUE 24077
24075: GO 24299
24077: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24078: LD_ADDR_VAR 0 4
24082: PUSH
24083: LD_INT 46
24085: PUSH
24086: LD_INT 47
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 82
24097: PUSH
24098: LD_INT 83
24100: PUSH
24101: LD_INT 84
24103: PUSH
24104: LD_INT 85
24106: PUSH
24107: LD_INT 86
24109: PUSH
24110: LD_INT 11
24112: PUSH
24113: LD_INT 9
24115: PUSH
24116: LD_INT 20
24118: PUSH
24119: LD_INT 19
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 24
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_INT 25
24133: PUSH
24134: LD_INT 28
24136: PUSH
24137: LD_INT 29
24139: PUSH
24140: LD_INT 30
24142: PUSH
24143: LD_INT 31
24145: PUSH
24146: LD_INT 37
24148: PUSH
24149: LD_INT 38
24151: PUSH
24152: LD_INT 32
24154: PUSH
24155: LD_INT 27
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 69
24163: PUSH
24164: LD_INT 39
24166: PUSH
24167: LD_INT 34
24169: PUSH
24170: LD_INT 40
24172: PUSH
24173: LD_INT 71
24175: PUSH
24176: LD_INT 23
24178: PUSH
24179: LD_INT 44
24181: PUSH
24182: LD_INT 48
24184: PUSH
24185: LD_INT 49
24187: PUSH
24188: LD_INT 50
24190: PUSH
24191: LD_INT 51
24193: PUSH
24194: LD_INT 52
24196: PUSH
24197: LD_INT 53
24199: PUSH
24200: LD_INT 54
24202: PUSH
24203: LD_INT 55
24205: PUSH
24206: LD_INT 56
24208: PUSH
24209: LD_INT 57
24211: PUSH
24212: LD_INT 58
24214: PUSH
24215: LD_INT 59
24217: PUSH
24218: LD_INT 63
24220: PUSH
24221: LD_INT 64
24223: PUSH
24224: LD_INT 65
24226: PUSH
24227: LD_INT 82
24229: PUSH
24230: LD_INT 83
24232: PUSH
24233: LD_INT 84
24235: PUSH
24236: LD_INT 85
24238: PUSH
24239: LD_INT 86
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: ST_TO_ADDR
24297: GO 24300
24299: POP
// if state > - 1 and state < 3 then
24300: LD_VAR 0 3
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: GREATER
24309: PUSH
24310: LD_VAR 0 3
24314: PUSH
24315: LD_INT 3
24317: LESS
24318: AND
24319: IFFALSE 24376
// for i in result do
24321: LD_ADDR_VAR 0 5
24325: PUSH
24326: LD_VAR 0 4
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24374
// if GetTech ( i , side ) <> state then
24334: LD_VAR 0 5
24338: PPUSH
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 321
24348: PUSH
24349: LD_VAR 0 3
24353: NONEQUAL
24354: IFFALSE 24372
// result := result diff i ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_VAR 0 4
24365: PUSH
24366: LD_VAR 0 5
24370: DIFF
24371: ST_TO_ADDR
24372: GO 24331
24374: POP
24375: POP
// end ;
24376: LD_VAR 0 4
24380: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
// result := true ;
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_INT 1
24393: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24394: LD_ADDR_VAR 0 5
24398: PUSH
24399: LD_VAR 0 2
24403: PPUSH
24404: CALL_OW 480
24408: ST_TO_ADDR
// if not tmp then
24409: LD_VAR 0 5
24413: NOT
24414: IFFALSE 24418
// exit ;
24416: GO 24467
// for i in tmp do
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_VAR 0 5
24427: PUSH
24428: FOR_IN
24429: IFFALSE 24465
// if GetTech ( i , side ) <> state_researched then
24431: LD_VAR 0 4
24435: PPUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 321
24445: PUSH
24446: LD_INT 2
24448: NONEQUAL
24449: IFFALSE 24463
// begin result := false ;
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_INT 0
24458: ST_TO_ADDR
// exit ;
24459: POP
24460: POP
24461: GO 24467
// end ;
24463: GO 24428
24465: POP
24466: POP
// end ;
24467: LD_VAR 0 3
24471: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24472: LD_INT 0
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24487: LD_VAR 0 1
24491: NOT
24492: PUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 257
24502: PUSH
24503: LD_INT 9
24505: NONEQUAL
24506: OR
24507: IFFALSE 24511
// exit ;
24509: GO 25084
// side := GetSide ( unit ) ;
24511: LD_ADDR_VAR 0 9
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 255
24525: ST_TO_ADDR
// tech_space := tech_spacanom ;
24526: LD_ADDR_VAR 0 12
24530: PUSH
24531: LD_INT 29
24533: ST_TO_ADDR
// tech_time := tech_taurad ;
24534: LD_ADDR_VAR 0 13
24538: PUSH
24539: LD_INT 28
24541: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24542: LD_ADDR_VAR 0 11
24546: PUSH
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 310
24556: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24557: LD_VAR 0 11
24561: PPUSH
24562: CALL_OW 247
24566: PUSH
24567: LD_INT 2
24569: EQUAL
24570: IFFALSE 24574
// exit ;
24572: GO 25084
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24574: LD_ADDR_VAR 0 8
24578: PUSH
24579: LD_INT 81
24581: PUSH
24582: LD_VAR 0 9
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 3
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PPUSH
24612: CALL_OW 69
24616: ST_TO_ADDR
// if not tmp then
24617: LD_VAR 0 8
24621: NOT
24622: IFFALSE 24626
// exit ;
24624: GO 25084
// if in_unit then
24626: LD_VAR 0 11
24630: IFFALSE 24654
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24632: LD_ADDR_VAR 0 10
24636: PUSH
24637: LD_VAR 0 8
24641: PPUSH
24642: LD_VAR 0 11
24646: PPUSH
24647: CALL_OW 74
24651: ST_TO_ADDR
24652: GO 24674
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24654: LD_ADDR_VAR 0 10
24658: PUSH
24659: LD_VAR 0 8
24663: PPUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 74
24673: ST_TO_ADDR
// if not enemy then
24674: LD_VAR 0 10
24678: NOT
24679: IFFALSE 24683
// exit ;
24681: GO 25084
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24683: LD_VAR 0 11
24687: PUSH
24688: LD_VAR 0 11
24692: PPUSH
24693: LD_VAR 0 10
24697: PPUSH
24698: CALL_OW 296
24702: PUSH
24703: LD_INT 13
24705: GREATER
24706: AND
24707: PUSH
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_VAR 0 10
24717: PPUSH
24718: CALL_OW 296
24722: PUSH
24723: LD_INT 12
24725: GREATER
24726: OR
24727: IFFALSE 24731
// exit ;
24729: GO 25084
// missile := [ 1 ] ;
24731: LD_ADDR_VAR 0 14
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24742: LD_VAR 0 9
24746: PPUSH
24747: LD_VAR 0 12
24751: PPUSH
24752: CALL_OW 325
24756: IFFALSE 24785
// missile := Replace ( missile , missile + 1 , 2 ) ;
24758: LD_ADDR_VAR 0 14
24762: PUSH
24763: LD_VAR 0 14
24767: PPUSH
24768: LD_VAR 0 14
24772: PUSH
24773: LD_INT 1
24775: PLUS
24776: PPUSH
24777: LD_INT 2
24779: PPUSH
24780: CALL_OW 1
24784: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24785: LD_VAR 0 9
24789: PPUSH
24790: LD_VAR 0 13
24794: PPUSH
24795: CALL_OW 325
24799: PUSH
24800: LD_VAR 0 10
24804: PPUSH
24805: CALL_OW 255
24809: PPUSH
24810: LD_VAR 0 13
24814: PPUSH
24815: CALL_OW 325
24819: NOT
24820: AND
24821: IFFALSE 24850
// missile := Replace ( missile , missile + 1 , 3 ) ;
24823: LD_ADDR_VAR 0 14
24827: PUSH
24828: LD_VAR 0 14
24832: PPUSH
24833: LD_VAR 0 14
24837: PUSH
24838: LD_INT 1
24840: PLUS
24841: PPUSH
24842: LD_INT 3
24844: PPUSH
24845: CALL_OW 1
24849: ST_TO_ADDR
// if missile < 2 then
24850: LD_VAR 0 14
24854: PUSH
24855: LD_INT 2
24857: LESS
24858: IFFALSE 24862
// exit ;
24860: GO 25084
// x := GetX ( enemy ) ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_VAR 0 10
24871: PPUSH
24872: CALL_OW 250
24876: ST_TO_ADDR
// y := GetY ( enemy ) ;
24877: LD_ADDR_VAR 0 5
24881: PUSH
24882: LD_VAR 0 10
24886: PPUSH
24887: CALL_OW 251
24891: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 4
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PPUSH
24906: LD_INT 1
24908: PPUSH
24909: CALL_OW 12
24913: PLUS
24914: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24915: LD_ADDR_VAR 0 7
24919: PUSH
24920: LD_VAR 0 5
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 12
24936: PLUS
24937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24938: LD_VAR 0 6
24942: PPUSH
24943: LD_VAR 0 7
24947: PPUSH
24948: CALL_OW 488
24952: NOT
24953: IFFALSE 24975
// begin _x := x ;
24955: LD_ADDR_VAR 0 6
24959: PUSH
24960: LD_VAR 0 4
24964: ST_TO_ADDR
// _y := y ;
24965: LD_ADDR_VAR 0 7
24969: PUSH
24970: LD_VAR 0 5
24974: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 1
24982: PPUSH
24983: LD_VAR 0 14
24987: PPUSH
24988: CALL_OW 12
24992: ST_TO_ADDR
// case i of 1 :
24993: LD_VAR 0 3
24997: PUSH
24998: LD_INT 1
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25023
25006: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 10
25016: PPUSH
25017: CALL_OW 115
25021: GO 25084
25023: LD_INT 2
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25053
25031: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 6
25041: PPUSH
25042: LD_VAR 0 7
25046: PPUSH
25047: CALL_OW 153
25051: GO 25084
25053: LD_INT 3
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25083
25061: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_VAR 0 6
25071: PPUSH
25072: LD_VAR 0 7
25076: PPUSH
25077: CALL_OW 154
25081: GO 25084
25083: POP
// end ;
25084: LD_VAR 0 2
25088: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
// if not unit or not building then
25097: LD_VAR 0 1
25101: NOT
25102: PUSH
25103: LD_VAR 0 2
25107: NOT
25108: OR
25109: IFFALSE 25113
// exit ;
25111: GO 25271
// x := GetX ( building ) ;
25113: LD_ADDR_VAR 0 5
25117: PUSH
25118: LD_VAR 0 2
25122: PPUSH
25123: CALL_OW 250
25127: ST_TO_ADDR
// y := GetY ( building ) ;
25128: LD_ADDR_VAR 0 6
25132: PUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: CALL_OW 251
25142: ST_TO_ADDR
// for i = 0 to 5 do
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: DOUBLE
25149: LD_INT 0
25151: DEC
25152: ST_TO_ADDR
25153: LD_INT 5
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25269
// begin _x := ShiftX ( x , i , 3 ) ;
25159: LD_ADDR_VAR 0 7
25163: PUSH
25164: LD_VAR 0 5
25168: PPUSH
25169: LD_VAR 0 4
25173: PPUSH
25174: LD_INT 3
25176: PPUSH
25177: CALL_OW 272
25181: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25182: LD_ADDR_VAR 0 8
25186: PUSH
25187: LD_VAR 0 6
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: LD_INT 3
25199: PPUSH
25200: CALL_OW 273
25204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25205: LD_VAR 0 7
25209: PPUSH
25210: LD_VAR 0 8
25214: PPUSH
25215: CALL_OW 488
25219: NOT
25220: IFFALSE 25224
// continue ;
25222: GO 25156
// if HexInfo ( _x , _y ) = 0 then
25224: LD_VAR 0 7
25228: PPUSH
25229: LD_VAR 0 8
25233: PPUSH
25234: CALL_OW 428
25238: PUSH
25239: LD_INT 0
25241: EQUAL
25242: IFFALSE 25267
// begin ComMoveXY ( unit , _x , _y ) ;
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_VAR 0 7
25253: PPUSH
25254: LD_VAR 0 8
25258: PPUSH
25259: CALL_OW 111
// exit ;
25263: POP
25264: POP
25265: GO 25271
// end ; end ;
25267: GO 25156
25269: POP
25270: POP
// end ;
25271: LD_VAR 0 3
25275: RET
// export function ScanBase ( side , base_area ) ; begin
25276: LD_INT 0
25278: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25279: LD_ADDR_VAR 0 3
25283: PUSH
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_INT 81
25291: PUSH
25292: LD_VAR 0 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PPUSH
25301: CALL_OW 70
25305: ST_TO_ADDR
// end ;
25306: LD_VAR 0 3
25310: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
// result := false ;
25317: LD_ADDR_VAR 0 2
25321: PUSH
25322: LD_INT 0
25324: ST_TO_ADDR
// side := GetSide ( unit ) ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 255
25339: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25340: LD_ADDR_VAR 0 4
25344: PUSH
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL_OW 248
25354: ST_TO_ADDR
// case nat of 1 :
25355: LD_VAR 0 4
25359: PUSH
25360: LD_INT 1
25362: DOUBLE
25363: EQUAL
25364: IFTRUE 25368
25366: GO 25379
25368: POP
// tech := tech_lassight ; 2 :
25369: LD_ADDR_VAR 0 5
25373: PUSH
25374: LD_INT 12
25376: ST_TO_ADDR
25377: GO 25418
25379: LD_INT 2
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25398
25387: POP
// tech := tech_mortar ; 3 :
25388: LD_ADDR_VAR 0 5
25392: PUSH
25393: LD_INT 41
25395: ST_TO_ADDR
25396: GO 25418
25398: LD_INT 3
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25417
25406: POP
// tech := tech_bazooka ; end ;
25407: LD_ADDR_VAR 0 5
25411: PUSH
25412: LD_INT 44
25414: ST_TO_ADDR
25415: GO 25418
25417: POP
// if Researched ( side , tech ) then
25418: LD_VAR 0 3
25422: PPUSH
25423: LD_VAR 0 5
25427: PPUSH
25428: CALL_OW 325
25432: IFFALSE 25459
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_INT 5
25441: PUSH
25442: LD_INT 8
25444: PUSH
25445: LD_INT 9
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: LD_VAR 0 4
25457: ARRAY
25458: ST_TO_ADDR
// end ;
25459: LD_VAR 0 2
25463: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
25468: PPUSH
// if not mines then
25469: LD_VAR 0 2
25473: NOT
25474: IFFALSE 25478
// exit ;
25476: GO 25622
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_INT 81
25485: PUSH
25486: LD_VAR 0 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 21
25500: PUSH
25501: LD_INT 3
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 69
25520: ST_TO_ADDR
// for i in mines do
25521: LD_ADDR_VAR 0 4
25525: PUSH
25526: LD_VAR 0 2
25530: PUSH
25531: FOR_IN
25532: IFFALSE 25620
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25534: LD_VAR 0 4
25538: PUSH
25539: LD_INT 1
25541: ARRAY
25542: PPUSH
25543: LD_VAR 0 4
25547: PUSH
25548: LD_INT 2
25550: ARRAY
25551: PPUSH
25552: CALL_OW 458
25556: NOT
25557: IFFALSE 25561
// continue ;
25559: GO 25531
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25561: LD_VAR 0 4
25565: PUSH
25566: LD_INT 1
25568: ARRAY
25569: PPUSH
25570: LD_VAR 0 4
25574: PUSH
25575: LD_INT 2
25577: ARRAY
25578: PPUSH
25579: CALL_OW 428
25583: PUSH
25584: LD_VAR 0 5
25588: IN
25589: IFFALSE 25618
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25591: LD_VAR 0 4
25595: PUSH
25596: LD_INT 1
25598: ARRAY
25599: PPUSH
25600: LD_VAR 0 4
25604: PUSH
25605: LD_INT 2
25607: ARRAY
25608: PPUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: CALL_OW 456
// end ;
25618: GO 25531
25620: POP
25621: POP
// end ;
25622: LD_VAR 0 3
25626: RET
// export function Count ( array ) ; begin
25627: LD_INT 0
25629: PPUSH
// result := array + 0 ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: PUSH
25640: LD_INT 0
25642: PLUS
25643: ST_TO_ADDR
// end ;
25644: LD_VAR 0 2
25648: RET
// export function IsEmpty ( building ) ; begin
25649: LD_INT 0
25651: PPUSH
// if not building then
25652: LD_VAR 0 1
25656: NOT
25657: IFFALSE 25661
// exit ;
25659: GO 25704
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 22
25673: PUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 255
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 58
25690: PUSH
25691: EMPTY
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PPUSH
25698: CALL_OW 69
25702: IN
25703: ST_TO_ADDR
// end ;
25704: LD_VAR 0 2
25708: RET
// export function IsNotFull ( building ) ; var places ; begin
25709: LD_INT 0
25711: PPUSH
25712: PPUSH
// if not building then
25713: LD_VAR 0 1
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 25750
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25722: LD_ADDR_VAR 0 2
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: LD_INT 3
25734: PUSH
25735: LD_INT 62
25737: PUSH
25738: EMPTY
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 72
25749: ST_TO_ADDR
// end ;
25750: LD_VAR 0 2
25754: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// tmp := [ ] ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// list := [ ] ;
25768: LD_ADDR_VAR 0 5
25772: PUSH
25773: EMPTY
25774: ST_TO_ADDR
// for i = 16 to 25 do
25775: LD_ADDR_VAR 0 4
25779: PUSH
25780: DOUBLE
25781: LD_INT 16
25783: DEC
25784: ST_TO_ADDR
25785: LD_INT 25
25787: PUSH
25788: FOR_TO
25789: IFFALSE 25862
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_VAR 0 3
25800: PUSH
25801: LD_INT 22
25803: PUSH
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 255
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 91
25820: PUSH
25821: LD_VAR 0 1
25825: PUSH
25826: LD_INT 6
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 30
25836: PUSH
25837: LD_VAR 0 4
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: PPUSH
25854: CALL_OW 69
25858: ADD
25859: ST_TO_ADDR
25860: GO 25788
25862: POP
25863: POP
// for i = 1 to tmp do
25864: LD_ADDR_VAR 0 4
25868: PUSH
25869: DOUBLE
25870: LD_INT 1
25872: DEC
25873: ST_TO_ADDR
25874: LD_VAR 0 3
25878: PUSH
25879: FOR_TO
25880: IFFALSE 25968
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25882: LD_ADDR_VAR 0 5
25886: PUSH
25887: LD_VAR 0 5
25891: PUSH
25892: LD_VAR 0 3
25896: PUSH
25897: LD_VAR 0 4
25901: ARRAY
25902: PPUSH
25903: CALL_OW 266
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_VAR 0 4
25917: ARRAY
25918: PPUSH
25919: CALL_OW 250
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_VAR 0 4
25933: ARRAY
25934: PPUSH
25935: CALL_OW 251
25939: PUSH
25940: LD_VAR 0 3
25944: PUSH
25945: LD_VAR 0 4
25949: ARRAY
25950: PPUSH
25951: CALL_OW 254
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: ADD
25965: ST_TO_ADDR
25966: GO 25879
25968: POP
25969: POP
// result := list ;
25970: LD_ADDR_VAR 0 2
25974: PUSH
25975: LD_VAR 0 5
25979: ST_TO_ADDR
// end ;
25980: LD_VAR 0 2
25984: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
// if not factory then
25994: LD_VAR 0 1
25998: NOT
25999: IFFALSE 26003
// exit ;
26001: GO 26596
// if control = control_apeman then
26003: LD_VAR 0 4
26007: PUSH
26008: LD_INT 5
26010: EQUAL
26011: IFFALSE 26120
// begin tmp := UnitsInside ( factory ) ;
26013: LD_ADDR_VAR 0 8
26017: PUSH
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 313
26027: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26028: LD_VAR 0 8
26032: PPUSH
26033: LD_INT 25
26035: PUSH
26036: LD_INT 12
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 72
26047: NOT
26048: IFFALSE 26058
// control := control_manual ;
26050: LD_ADDR_VAR 0 4
26054: PUSH
26055: LD_INT 1
26057: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26058: LD_ADDR_VAR 0 8
26062: PUSH
26063: LD_VAR 0 1
26067: PPUSH
26068: CALL 25755 0 1
26072: ST_TO_ADDR
// if tmp then
26073: LD_VAR 0 8
26077: IFFALSE 26120
// begin for i in tmp do
26079: LD_ADDR_VAR 0 7
26083: PUSH
26084: LD_VAR 0 8
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26118
// if i [ 1 ] = b_ext_radio then
26092: LD_VAR 0 7
26096: PUSH
26097: LD_INT 1
26099: ARRAY
26100: PUSH
26101: LD_INT 22
26103: EQUAL
26104: IFFALSE 26116
// begin control := control_remote ;
26106: LD_ADDR_VAR 0 4
26110: PUSH
26111: LD_INT 2
26113: ST_TO_ADDR
// break ;
26114: GO 26118
// end ;
26116: GO 26089
26118: POP
26119: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_VAR 0 2
26129: PPUSH
26130: LD_VAR 0 3
26134: PPUSH
26135: LD_VAR 0 4
26139: PPUSH
26140: LD_VAR 0 5
26144: PPUSH
26145: CALL_OW 448
26149: IFFALSE 26184
// begin result := [ chassis , engine , control , weapon ] ;
26151: LD_ADDR_VAR 0 6
26155: PUSH
26156: LD_VAR 0 2
26160: PUSH
26161: LD_VAR 0 3
26165: PUSH
26166: LD_VAR 0 4
26170: PUSH
26171: LD_VAR 0 5
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: ST_TO_ADDR
// exit ;
26182: GO 26596
// end ; _chassis := AvailableChassisList ( factory ) ;
26184: LD_ADDR_VAR 0 9
26188: PUSH
26189: LD_VAR 0 1
26193: PPUSH
26194: CALL_OW 475
26198: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26199: LD_ADDR_VAR 0 11
26203: PUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 476
26213: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26214: LD_ADDR_VAR 0 12
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 477
26228: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26229: LD_ADDR_VAR 0 10
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 478
26243: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26244: LD_VAR 0 9
26248: NOT
26249: PUSH
26250: LD_VAR 0 11
26254: NOT
26255: OR
26256: PUSH
26257: LD_VAR 0 12
26261: NOT
26262: OR
26263: PUSH
26264: LD_VAR 0 10
26268: NOT
26269: OR
26270: IFFALSE 26305
// begin result := [ chassis , engine , control , weapon ] ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 2
26281: PUSH
26282: LD_VAR 0 3
26286: PUSH
26287: LD_VAR 0 4
26291: PUSH
26292: LD_VAR 0 5
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: ST_TO_ADDR
// exit ;
26303: GO 26596
// end ; if not chassis in _chassis then
26305: LD_VAR 0 2
26309: PUSH
26310: LD_VAR 0 9
26314: IN
26315: NOT
26316: IFFALSE 26342
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26318: LD_ADDR_VAR 0 2
26322: PUSH
26323: LD_VAR 0 9
26327: PUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_VAR 0 9
26335: PPUSH
26336: CALL_OW 12
26340: ARRAY
26341: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL 26601 0 2
26356: NOT
26357: IFFALSE 26416
// repeat engine := _engine [ 1 ] ;
26359: LD_ADDR_VAR 0 3
26363: PUSH
26364: LD_VAR 0 11
26368: PUSH
26369: LD_INT 1
26371: ARRAY
26372: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26373: LD_ADDR_VAR 0 11
26377: PUSH
26378: LD_VAR 0 11
26382: PPUSH
26383: LD_INT 1
26385: PPUSH
26386: CALL_OW 3
26390: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26391: LD_VAR 0 2
26395: PPUSH
26396: LD_VAR 0 3
26400: PPUSH
26401: CALL 26601 0 2
26405: PUSH
26406: LD_VAR 0 11
26410: PUSH
26411: EMPTY
26412: EQUAL
26413: OR
26414: IFFALSE 26359
// if not control in _control then
26416: LD_VAR 0 4
26420: PUSH
26421: LD_VAR 0 12
26425: IN
26426: NOT
26427: IFFALSE 26453
// control := _control [ rand ( 1 , _control ) ] ;
26429: LD_ADDR_VAR 0 4
26433: PUSH
26434: LD_VAR 0 12
26438: PUSH
26439: LD_INT 1
26441: PPUSH
26442: LD_VAR 0 12
26446: PPUSH
26447: CALL_OW 12
26451: ARRAY
26452: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_VAR 0 5
26462: PPUSH
26463: CALL 26821 0 2
26467: NOT
26468: IFFALSE 26527
// repeat weapon := _weapon [ 1 ] ;
26470: LD_ADDR_VAR 0 5
26474: PUSH
26475: LD_VAR 0 10
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26484: LD_ADDR_VAR 0 10
26488: PUSH
26489: LD_VAR 0 10
26493: PPUSH
26494: LD_INT 1
26496: PPUSH
26497: CALL_OW 3
26501: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26502: LD_VAR 0 2
26506: PPUSH
26507: LD_VAR 0 5
26511: PPUSH
26512: CALL 26821 0 2
26516: PUSH
26517: LD_VAR 0 10
26521: PUSH
26522: EMPTY
26523: EQUAL
26524: OR
26525: IFFALSE 26470
// result := [ ] ;
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: EMPTY
26533: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26534: LD_VAR 0 1
26538: PPUSH
26539: LD_VAR 0 2
26543: PPUSH
26544: LD_VAR 0 3
26548: PPUSH
26549: LD_VAR 0 4
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 448
26563: IFFALSE 26596
// result := [ chassis , engine , control , weapon ] ;
26565: LD_ADDR_VAR 0 6
26569: PUSH
26570: LD_VAR 0 2
26574: PUSH
26575: LD_VAR 0 3
26579: PUSH
26580: LD_VAR 0 4
26584: PUSH
26585: LD_VAR 0 5
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// end ;
26596: LD_VAR 0 6
26600: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26601: LD_INT 0
26603: PPUSH
// if not chassis or not engine then
26604: LD_VAR 0 1
26608: NOT
26609: PUSH
26610: LD_VAR 0 2
26614: NOT
26615: OR
26616: IFFALSE 26620
// exit ;
26618: GO 26816
// case engine of engine_solar :
26620: LD_VAR 0 2
26624: PUSH
26625: LD_INT 2
26627: DOUBLE
26628: EQUAL
26629: IFTRUE 26633
26631: GO 26671
26633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 11
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: LD_INT 13
26647: PUSH
26648: LD_INT 14
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 3
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
26669: GO 26800
26671: LD_INT 1
26673: DOUBLE
26674: EQUAL
26675: IFTRUE 26679
26677: GO 26741
26679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_INT 11
26687: PUSH
26688: LD_INT 12
26690: PUSH
26691: LD_INT 13
26693: PUSH
26694: LD_INT 14
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 2
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 4
26708: PUSH
26709: LD_INT 5
26711: PUSH
26712: LD_INT 21
26714: PUSH
26715: LD_INT 23
26717: PUSH
26718: LD_INT 22
26720: PUSH
26721: LD_INT 24
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
26739: GO 26800
26741: LD_INT 3
26743: DOUBLE
26744: EQUAL
26745: IFTRUE 26749
26747: GO 26799
26749: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26750: LD_ADDR_VAR 0 3
26754: PUSH
26755: LD_INT 13
26757: PUSH
26758: LD_INT 14
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 4
26769: PUSH
26770: LD_INT 5
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_INT 23
26781: PUSH
26782: LD_INT 24
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: ST_TO_ADDR
26797: GO 26800
26799: POP
// result := ( chassis in result ) ;
26800: LD_ADDR_VAR 0 3
26804: PUSH
26805: LD_VAR 0 1
26809: PUSH
26810: LD_VAR 0 3
26814: IN
26815: ST_TO_ADDR
// end ;
26816: LD_VAR 0 3
26820: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26821: LD_INT 0
26823: PPUSH
// if not chassis or not weapon then
26824: LD_VAR 0 1
26828: NOT
26829: PUSH
26830: LD_VAR 0 2
26834: NOT
26835: OR
26836: IFFALSE 26840
// exit ;
26838: GO 27900
// case weapon of us_machine_gun :
26840: LD_VAR 0 2
26844: PUSH
26845: LD_INT 2
26847: DOUBLE
26848: EQUAL
26849: IFTRUE 26853
26851: GO 26883
26853: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: LD_INT 5
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: ST_TO_ADDR
26881: GO 27884
26883: LD_INT 3
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26921
26891: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26892: LD_ADDR_VAR 0 3
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 4
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
26919: GO 27884
26921: LD_INT 11
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26959
26929: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: LD_INT 4
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
26957: GO 27884
26959: LD_INT 4
26961: DOUBLE
26962: EQUAL
26963: IFTRUE 26967
26965: GO 26993
26967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26968: LD_ADDR_VAR 0 3
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: LD_INT 4
26981: PUSH
26982: LD_INT 5
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
26991: GO 27884
26993: LD_INT 5
26995: DOUBLE
26996: EQUAL
26997: IFTRUE 27001
26999: GO 27027
27001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 3
27012: PUSH
27013: LD_INT 4
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
27025: GO 27884
27027: LD_INT 9
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27061
27035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27036: LD_ADDR_VAR 0 3
27040: PUSH
27041: LD_INT 2
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: LD_INT 4
27049: PUSH
27050: LD_INT 5
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
27059: GO 27884
27061: LD_INT 7
27063: DOUBLE
27064: EQUAL
27065: IFTRUE 27069
27067: GO 27095
27069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: LD_INT 4
27083: PUSH
27084: LD_INT 5
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: ST_TO_ADDR
27093: GO 27884
27095: LD_INT 12
27097: DOUBLE
27098: EQUAL
27099: IFTRUE 27103
27101: GO 27129
27103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27104: LD_ADDR_VAR 0 3
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 3
27114: PUSH
27115: LD_INT 4
27117: PUSH
27118: LD_INT 5
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: ST_TO_ADDR
27127: GO 27884
27129: LD_INT 13
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27163
27137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: LD_INT 4
27151: PUSH
27152: LD_INT 5
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
27161: GO 27884
27163: LD_INT 14
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27189
27171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 4
27179: PUSH
27180: LD_INT 5
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: ST_TO_ADDR
27187: GO 27884
27189: LD_INT 6
27191: DOUBLE
27192: EQUAL
27193: IFTRUE 27197
27195: GO 27215
27197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27198: LD_ADDR_VAR 0 3
27202: PUSH
27203: LD_INT 4
27205: PUSH
27206: LD_INT 5
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: ST_TO_ADDR
27213: GO 27884
27215: LD_INT 10
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27241
27223: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27224: LD_ADDR_VAR 0 3
27228: PUSH
27229: LD_INT 4
27231: PUSH
27232: LD_INT 5
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: ST_TO_ADDR
27239: GO 27884
27241: LD_INT 22
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27275
27249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_INT 11
27257: PUSH
27258: LD_INT 12
27260: PUSH
27261: LD_INT 13
27263: PUSH
27264: LD_INT 14
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
27273: GO 27884
27275: LD_INT 23
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27309
27283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_INT 11
27291: PUSH
27292: LD_INT 12
27294: PUSH
27295: LD_INT 13
27297: PUSH
27298: LD_INT 14
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
27307: GO 27884
27309: LD_INT 24
27311: DOUBLE
27312: EQUAL
27313: IFTRUE 27317
27315: GO 27343
27317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: LD_INT 11
27325: PUSH
27326: LD_INT 12
27328: PUSH
27329: LD_INT 13
27331: PUSH
27332: LD_INT 14
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: ST_TO_ADDR
27341: GO 27884
27343: LD_INT 30
27345: DOUBLE
27346: EQUAL
27347: IFTRUE 27351
27349: GO 27377
27351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_INT 11
27359: PUSH
27360: LD_INT 12
27362: PUSH
27363: LD_INT 13
27365: PUSH
27366: LD_INT 14
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
27375: GO 27884
27377: LD_INT 25
27379: DOUBLE
27380: EQUAL
27381: IFTRUE 27385
27383: GO 27403
27385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27386: LD_ADDR_VAR 0 3
27390: PUSH
27391: LD_INT 13
27393: PUSH
27394: LD_INT 14
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: ST_TO_ADDR
27401: GO 27884
27403: LD_INT 27
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27429
27411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 13
27419: PUSH
27420: LD_INT 14
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: ST_TO_ADDR
27427: GO 27884
27429: LD_INT 92
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27463
27437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 11
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: LD_INT 13
27451: PUSH
27452: LD_INT 14
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
27461: GO 27884
27463: LD_INT 28
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 27489
27471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: LD_INT 13
27479: PUSH
27480: LD_INT 14
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 27884
27489: LD_INT 29
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27515
27497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 13
27505: PUSH
27506: LD_INT 14
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 27884
27515: LD_INT 31
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27541
27523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 13
27531: PUSH
27532: LD_INT 14
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
27539: GO 27884
27541: LD_INT 26
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27567
27549: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 13
27557: PUSH
27558: LD_INT 14
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: ST_TO_ADDR
27565: GO 27884
27567: LD_INT 42
27569: DOUBLE
27570: EQUAL
27571: IFTRUE 27575
27573: GO 27601
27575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27576: LD_ADDR_VAR 0 3
27580: PUSH
27581: LD_INT 21
27583: PUSH
27584: LD_INT 22
27586: PUSH
27587: LD_INT 23
27589: PUSH
27590: LD_INT 24
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: ST_TO_ADDR
27599: GO 27884
27601: LD_INT 43
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27635
27609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_INT 21
27617: PUSH
27618: LD_INT 22
27620: PUSH
27621: LD_INT 23
27623: PUSH
27624: LD_INT 24
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
27633: GO 27884
27635: LD_INT 44
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27669
27643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27644: LD_ADDR_VAR 0 3
27648: PUSH
27649: LD_INT 21
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_INT 23
27657: PUSH
27658: LD_INT 24
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
27667: GO 27884
27669: LD_INT 45
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27703
27677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27678: LD_ADDR_VAR 0 3
27682: PUSH
27683: LD_INT 21
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_INT 23
27691: PUSH
27692: LD_INT 24
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
27701: GO 27884
27703: LD_INT 49
27705: DOUBLE
27706: EQUAL
27707: IFTRUE 27711
27709: GO 27737
27711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27712: LD_ADDR_VAR 0 3
27716: PUSH
27717: LD_INT 21
27719: PUSH
27720: LD_INT 22
27722: PUSH
27723: LD_INT 23
27725: PUSH
27726: LD_INT 24
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 27884
27737: LD_INT 51
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27771
27745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 21
27753: PUSH
27754: LD_INT 22
27756: PUSH
27757: LD_INT 23
27759: PUSH
27760: LD_INT 24
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 27884
27771: LD_INT 52
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27805
27779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 21
27787: PUSH
27788: LD_INT 22
27790: PUSH
27791: LD_INT 23
27793: PUSH
27794: LD_INT 24
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
27803: GO 27884
27805: LD_INT 53
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27813
27811: GO 27831
27813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_INT 23
27821: PUSH
27822: LD_INT 24
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: ST_TO_ADDR
27829: GO 27884
27831: LD_INT 46
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27857
27839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27840: LD_ADDR_VAR 0 3
27844: PUSH
27845: LD_INT 23
27847: PUSH
27848: LD_INT 24
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
27855: GO 27884
27857: LD_INT 47
27859: DOUBLE
27860: EQUAL
27861: IFTRUE 27865
27863: GO 27883
27865: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_INT 23
27873: PUSH
27874: LD_INT 24
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 27884
27883: POP
// result := ( chassis in result ) ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_VAR 0 1
27893: PUSH
27894: LD_VAR 0 3
27898: IN
27899: ST_TO_ADDR
// end ;
27900: LD_VAR 0 3
27904: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
27913: PPUSH
// result := array ;
27914: LD_ADDR_VAR 0 5
27918: PUSH
27919: LD_VAR 0 1
27923: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27924: LD_VAR 0 1
27928: NOT
27929: PUSH
27930: LD_VAR 0 2
27934: NOT
27935: OR
27936: PUSH
27937: LD_VAR 0 3
27941: NOT
27942: OR
27943: PUSH
27944: LD_VAR 0 2
27948: PUSH
27949: LD_VAR 0 1
27953: GREATER
27954: OR
27955: PUSH
27956: LD_VAR 0 3
27960: PUSH
27961: LD_VAR 0 1
27965: GREATER
27966: OR
27967: IFFALSE 27971
// exit ;
27969: GO 28267
// if direction then
27971: LD_VAR 0 4
27975: IFFALSE 28039
// begin d := 1 ;
27977: LD_ADDR_VAR 0 9
27981: PUSH
27982: LD_INT 1
27984: ST_TO_ADDR
// if i_from > i_to then
27985: LD_VAR 0 2
27989: PUSH
27990: LD_VAR 0 3
27994: GREATER
27995: IFFALSE 28021
// length := ( array - i_from ) + i_to else
27997: LD_ADDR_VAR 0 11
28001: PUSH
28002: LD_VAR 0 1
28006: PUSH
28007: LD_VAR 0 2
28011: MINUS
28012: PUSH
28013: LD_VAR 0 3
28017: PLUS
28018: ST_TO_ADDR
28019: GO 28037
// length := i_to - i_from ;
28021: LD_ADDR_VAR 0 11
28025: PUSH
28026: LD_VAR 0 3
28030: PUSH
28031: LD_VAR 0 2
28035: MINUS
28036: ST_TO_ADDR
// end else
28037: GO 28100
// begin d := - 1 ;
28039: LD_ADDR_VAR 0 9
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: ST_TO_ADDR
// if i_from > i_to then
28048: LD_VAR 0 2
28052: PUSH
28053: LD_VAR 0 3
28057: GREATER
28058: IFFALSE 28078
// length := i_from - i_to else
28060: LD_ADDR_VAR 0 11
28064: PUSH
28065: LD_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: MINUS
28075: ST_TO_ADDR
28076: GO 28100
// length := ( array - i_to ) + i_from ;
28078: LD_ADDR_VAR 0 11
28082: PUSH
28083: LD_VAR 0 1
28087: PUSH
28088: LD_VAR 0 3
28092: MINUS
28093: PUSH
28094: LD_VAR 0 2
28098: PLUS
28099: ST_TO_ADDR
// end ; if not length then
28100: LD_VAR 0 11
28104: NOT
28105: IFFALSE 28109
// exit ;
28107: GO 28267
// tmp := array ;
28109: LD_ADDR_VAR 0 10
28113: PUSH
28114: LD_VAR 0 1
28118: ST_TO_ADDR
// for i = 1 to length do
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: DOUBLE
28125: LD_INT 1
28127: DEC
28128: ST_TO_ADDR
28129: LD_VAR 0 11
28133: PUSH
28134: FOR_TO
28135: IFFALSE 28255
// begin for j = 1 to array do
28137: LD_ADDR_VAR 0 7
28141: PUSH
28142: DOUBLE
28143: LD_INT 1
28145: DEC
28146: ST_TO_ADDR
28147: LD_VAR 0 1
28151: PUSH
28152: FOR_TO
28153: IFFALSE 28241
// begin k := j + d ;
28155: LD_ADDR_VAR 0 8
28159: PUSH
28160: LD_VAR 0 7
28164: PUSH
28165: LD_VAR 0 9
28169: PLUS
28170: ST_TO_ADDR
// if k > array then
28171: LD_VAR 0 8
28175: PUSH
28176: LD_VAR 0 1
28180: GREATER
28181: IFFALSE 28191
// k := 1 ;
28183: LD_ADDR_VAR 0 8
28187: PUSH
28188: LD_INT 1
28190: ST_TO_ADDR
// if not k then
28191: LD_VAR 0 8
28195: NOT
28196: IFFALSE 28208
// k := array ;
28198: LD_ADDR_VAR 0 8
28202: PUSH
28203: LD_VAR 0 1
28207: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28208: LD_ADDR_VAR 0 10
28212: PUSH
28213: LD_VAR 0 10
28217: PPUSH
28218: LD_VAR 0 8
28222: PPUSH
28223: LD_VAR 0 1
28227: PUSH
28228: LD_VAR 0 7
28232: ARRAY
28233: PPUSH
28234: CALL_OW 1
28238: ST_TO_ADDR
// end ;
28239: GO 28152
28241: POP
28242: POP
// array := tmp ;
28243: LD_ADDR_VAR 0 1
28247: PUSH
28248: LD_VAR 0 10
28252: ST_TO_ADDR
// end ;
28253: GO 28134
28255: POP
28256: POP
// result := array ;
28257: LD_ADDR_VAR 0 5
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// end ;
28267: LD_VAR 0 5
28271: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
// result := 0 ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_INT 0
28283: ST_TO_ADDR
// if not array or not value in array then
28284: LD_VAR 0 1
28288: NOT
28289: PUSH
28290: LD_VAR 0 2
28294: PUSH
28295: LD_VAR 0 1
28299: IN
28300: NOT
28301: OR
28302: IFFALSE 28306
// exit ;
28304: GO 28360
// for i = 1 to array do
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: DOUBLE
28312: LD_INT 1
28314: DEC
28315: ST_TO_ADDR
28316: LD_VAR 0 1
28320: PUSH
28321: FOR_TO
28322: IFFALSE 28358
// if value = array [ i ] then
28324: LD_VAR 0 2
28328: PUSH
28329: LD_VAR 0 1
28333: PUSH
28334: LD_VAR 0 4
28338: ARRAY
28339: EQUAL
28340: IFFALSE 28356
// begin result := i ;
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_VAR 0 4
28351: ST_TO_ADDR
// exit ;
28352: POP
28353: POP
28354: GO 28360
// end ;
28356: GO 28321
28358: POP
28359: POP
// end ;
28360: LD_VAR 0 3
28364: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28365: LD_INT 0
28367: PPUSH
// vc_chassis := chassis ;
28368: LD_ADDR_OWVAR 37
28372: PUSH
28373: LD_VAR 0 1
28377: ST_TO_ADDR
// vc_engine := engine ;
28378: LD_ADDR_OWVAR 39
28382: PUSH
28383: LD_VAR 0 2
28387: ST_TO_ADDR
// vc_control := control ;
28388: LD_ADDR_OWVAR 38
28392: PUSH
28393: LD_VAR 0 3
28397: ST_TO_ADDR
// vc_weapon := weapon ;
28398: LD_ADDR_OWVAR 40
28402: PUSH
28403: LD_VAR 0 4
28407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28408: LD_ADDR_OWVAR 41
28412: PUSH
28413: LD_VAR 0 5
28417: ST_TO_ADDR
// end ;
28418: LD_VAR 0 6
28422: RET
// export function WantPlant ( unit ) ; var task ; begin
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
// result := false ;
28427: LD_ADDR_VAR 0 2
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: CALL_OW 437
28449: ST_TO_ADDR
// if task then
28450: LD_VAR 0 3
28454: IFFALSE 28482
// if task [ 1 ] [ 1 ] = p then
28456: LD_VAR 0 3
28460: PUSH
28461: LD_INT 1
28463: ARRAY
28464: PUSH
28465: LD_INT 1
28467: ARRAY
28468: PUSH
28469: LD_STRING p
28471: EQUAL
28472: IFFALSE 28482
// result := true ;
28474: LD_ADDR_VAR 0 2
28478: PUSH
28479: LD_INT 1
28481: ST_TO_ADDR
// end ;
28482: LD_VAR 0 2
28486: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
// if pos < 1 then
28493: LD_VAR 0 2
28497: PUSH
28498: LD_INT 1
28500: LESS
28501: IFFALSE 28505
// exit ;
28503: GO 28808
// if pos = 1 then
28505: LD_VAR 0 2
28509: PUSH
28510: LD_INT 1
28512: EQUAL
28513: IFFALSE 28546
// result := Replace ( arr , pos [ 1 ] , value ) else
28515: LD_ADDR_VAR 0 4
28519: PUSH
28520: LD_VAR 0 1
28524: PPUSH
28525: LD_VAR 0 2
28529: PUSH
28530: LD_INT 1
28532: ARRAY
28533: PPUSH
28534: LD_VAR 0 3
28538: PPUSH
28539: CALL_OW 1
28543: ST_TO_ADDR
28544: GO 28808
// begin tmp := arr ;
28546: LD_ADDR_VAR 0 6
28550: PUSH
28551: LD_VAR 0 1
28555: ST_TO_ADDR
// s_arr := [ tmp ] ;
28556: LD_ADDR_VAR 0 7
28560: PUSH
28561: LD_VAR 0 6
28565: PUSH
28566: EMPTY
28567: LIST
28568: ST_TO_ADDR
// for i = 1 to pos - 1 do
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: DOUBLE
28575: LD_INT 1
28577: DEC
28578: ST_TO_ADDR
28579: LD_VAR 0 2
28583: PUSH
28584: LD_INT 1
28586: MINUS
28587: PUSH
28588: FOR_TO
28589: IFFALSE 28634
// begin tmp := tmp [ pos [ i ] ] ;
28591: LD_ADDR_VAR 0 6
28595: PUSH
28596: LD_VAR 0 6
28600: PUSH
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 5
28610: ARRAY
28611: ARRAY
28612: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28613: LD_ADDR_VAR 0 7
28617: PUSH
28618: LD_VAR 0 7
28622: PUSH
28623: LD_VAR 0 6
28627: PUSH
28628: EMPTY
28629: LIST
28630: ADD
28631: ST_TO_ADDR
// end ;
28632: GO 28588
28634: POP
28635: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28636: LD_ADDR_VAR 0 6
28640: PUSH
28641: LD_VAR 0 6
28645: PPUSH
28646: LD_VAR 0 2
28650: PUSH
28651: LD_VAR 0 2
28655: ARRAY
28656: PPUSH
28657: LD_VAR 0 3
28661: PPUSH
28662: CALL_OW 1
28666: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28667: LD_ADDR_VAR 0 7
28671: PUSH
28672: LD_VAR 0 7
28676: PPUSH
28677: LD_VAR 0 7
28681: PPUSH
28682: LD_VAR 0 6
28686: PPUSH
28687: CALL_OW 1
28691: ST_TO_ADDR
// for i = s_arr downto 2 do
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: DOUBLE
28698: LD_VAR 0 7
28702: INC
28703: ST_TO_ADDR
28704: LD_INT 2
28706: PUSH
28707: FOR_DOWNTO
28708: IFFALSE 28792
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28710: LD_ADDR_VAR 0 6
28714: PUSH
28715: LD_VAR 0 7
28719: PUSH
28720: LD_VAR 0 5
28724: PUSH
28725: LD_INT 1
28727: MINUS
28728: ARRAY
28729: PPUSH
28730: LD_VAR 0 2
28734: PUSH
28735: LD_VAR 0 5
28739: PUSH
28740: LD_INT 1
28742: MINUS
28743: ARRAY
28744: PPUSH
28745: LD_VAR 0 7
28749: PUSH
28750: LD_VAR 0 5
28754: ARRAY
28755: PPUSH
28756: CALL_OW 1
28760: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_VAR 0 7
28770: PPUSH
28771: LD_VAR 0 5
28775: PUSH
28776: LD_INT 1
28778: MINUS
28779: PPUSH
28780: LD_VAR 0 6
28784: PPUSH
28785: CALL_OW 1
28789: ST_TO_ADDR
// end ;
28790: GO 28707
28792: POP
28793: POP
// result := s_arr [ 1 ] ;
28794: LD_ADDR_VAR 0 4
28798: PUSH
28799: LD_VAR 0 7
28803: PUSH
28804: LD_INT 1
28806: ARRAY
28807: ST_TO_ADDR
// end ; end ;
28808: LD_VAR 0 4
28812: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28813: LD_INT 0
28815: PPUSH
28816: PPUSH
// if not list then
28817: LD_VAR 0 1
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 28917
// i := list [ pos1 ] ;
28826: LD_ADDR_VAR 0 5
28830: PUSH
28831: LD_VAR 0 1
28835: PUSH
28836: LD_VAR 0 2
28840: ARRAY
28841: ST_TO_ADDR
// if not i then
28842: LD_VAR 0 5
28846: NOT
28847: IFFALSE 28851
// exit ;
28849: GO 28917
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28851: LD_ADDR_VAR 0 1
28855: PUSH
28856: LD_VAR 0 1
28860: PPUSH
28861: LD_VAR 0 2
28865: PPUSH
28866: LD_VAR 0 1
28870: PUSH
28871: LD_VAR 0 3
28875: ARRAY
28876: PPUSH
28877: CALL_OW 1
28881: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: LD_VAR 0 5
28901: PPUSH
28902: CALL_OW 1
28906: ST_TO_ADDR
// result := list ;
28907: LD_ADDR_VAR 0 4
28911: PUSH
28912: LD_VAR 0 1
28916: ST_TO_ADDR
// end ;
28917: LD_VAR 0 4
28921: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28922: LD_INT 0
28924: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28925: LD_ADDR_VAR 0 5
28929: PUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 250
28939: PPUSH
28940: LD_VAR 0 1
28944: PPUSH
28945: CALL_OW 251
28949: PPUSH
28950: LD_VAR 0 2
28954: PPUSH
28955: LD_VAR 0 3
28959: PPUSH
28960: LD_VAR 0 4
28964: PPUSH
28965: CALL 28975 0 5
28969: ST_TO_ADDR
// end ;
28970: LD_VAR 0 5
28974: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not list then
28981: LD_VAR 0 3
28985: NOT
28986: IFFALSE 28990
// exit ;
28988: GO 29378
// result := [ ] ;
28990: LD_ADDR_VAR 0 6
28994: PUSH
28995: EMPTY
28996: ST_TO_ADDR
// for i in list do
28997: LD_ADDR_VAR 0 7
29001: PUSH
29002: LD_VAR 0 3
29006: PUSH
29007: FOR_IN
29008: IFFALSE 29210
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29010: LD_ADDR_VAR 0 9
29014: PUSH
29015: LD_VAR 0 7
29019: PPUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_VAR 0 2
29029: PPUSH
29030: CALL_OW 297
29034: ST_TO_ADDR
// if not result then
29035: LD_VAR 0 6
29039: NOT
29040: IFFALSE 29066
// result := [ [ i , tmp ] ] else
29042: LD_ADDR_VAR 0 6
29046: PUSH
29047: LD_VAR 0 7
29051: PUSH
29052: LD_VAR 0 9
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: ST_TO_ADDR
29064: GO 29208
// begin if result [ result ] [ 2 ] < tmp then
29066: LD_VAR 0 6
29070: PUSH
29071: LD_VAR 0 6
29075: ARRAY
29076: PUSH
29077: LD_INT 2
29079: ARRAY
29080: PUSH
29081: LD_VAR 0 9
29085: LESS
29086: IFFALSE 29128
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29088: LD_ADDR_VAR 0 6
29092: PUSH
29093: LD_VAR 0 6
29097: PPUSH
29098: LD_VAR 0 6
29102: PUSH
29103: LD_INT 1
29105: PLUS
29106: PPUSH
29107: LD_VAR 0 7
29111: PUSH
29112: LD_VAR 0 9
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 2
29125: ST_TO_ADDR
29126: GO 29208
// for j = 1 to result do
29128: LD_ADDR_VAR 0 8
29132: PUSH
29133: DOUBLE
29134: LD_INT 1
29136: DEC
29137: ST_TO_ADDR
29138: LD_VAR 0 6
29142: PUSH
29143: FOR_TO
29144: IFFALSE 29206
// begin if tmp < result [ j ] [ 2 ] then
29146: LD_VAR 0 9
29150: PUSH
29151: LD_VAR 0 6
29155: PUSH
29156: LD_VAR 0 8
29160: ARRAY
29161: PUSH
29162: LD_INT 2
29164: ARRAY
29165: LESS
29166: IFFALSE 29204
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29168: LD_ADDR_VAR 0 6
29172: PUSH
29173: LD_VAR 0 6
29177: PPUSH
29178: LD_VAR 0 8
29182: PPUSH
29183: LD_VAR 0 7
29187: PUSH
29188: LD_VAR 0 9
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 2
29201: ST_TO_ADDR
// break ;
29202: GO 29206
// end ; end ;
29204: GO 29143
29206: POP
29207: POP
// end ; end ;
29208: GO 29007
29210: POP
29211: POP
// if result and not asc then
29212: LD_VAR 0 6
29216: PUSH
29217: LD_VAR 0 4
29221: NOT
29222: AND
29223: IFFALSE 29298
// begin tmp := result ;
29225: LD_ADDR_VAR 0 9
29229: PUSH
29230: LD_VAR 0 6
29234: ST_TO_ADDR
// for i = tmp downto 1 do
29235: LD_ADDR_VAR 0 7
29239: PUSH
29240: DOUBLE
29241: LD_VAR 0 9
29245: INC
29246: ST_TO_ADDR
29247: LD_INT 1
29249: PUSH
29250: FOR_DOWNTO
29251: IFFALSE 29296
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29253: LD_ADDR_VAR 0 6
29257: PUSH
29258: LD_VAR 0 6
29262: PPUSH
29263: LD_VAR 0 9
29267: PUSH
29268: LD_VAR 0 7
29272: MINUS
29273: PUSH
29274: LD_INT 1
29276: PLUS
29277: PPUSH
29278: LD_VAR 0 9
29282: PUSH
29283: LD_VAR 0 7
29287: ARRAY
29288: PPUSH
29289: CALL_OW 1
29293: ST_TO_ADDR
29294: GO 29250
29296: POP
29297: POP
// end ; tmp := [ ] ;
29298: LD_ADDR_VAR 0 9
29302: PUSH
29303: EMPTY
29304: ST_TO_ADDR
// if mode then
29305: LD_VAR 0 5
29309: IFFALSE 29378
// begin for i = 1 to result do
29311: LD_ADDR_VAR 0 7
29315: PUSH
29316: DOUBLE
29317: LD_INT 1
29319: DEC
29320: ST_TO_ADDR
29321: LD_VAR 0 6
29325: PUSH
29326: FOR_TO
29327: IFFALSE 29366
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29329: LD_ADDR_VAR 0 9
29333: PUSH
29334: LD_VAR 0 9
29338: PPUSH
29339: LD_VAR 0 7
29343: PPUSH
29344: LD_VAR 0 6
29348: PUSH
29349: LD_VAR 0 7
29353: ARRAY
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: PPUSH
29359: CALL_OW 1
29363: ST_TO_ADDR
29364: GO 29326
29366: POP
29367: POP
// result := tmp ;
29368: LD_ADDR_VAR 0 6
29372: PUSH
29373: LD_VAR 0 9
29377: ST_TO_ADDR
// end ; end ;
29378: LD_VAR 0 6
29382: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29383: LD_INT 0
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29391: LD_ADDR_VAR 0 5
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: ST_TO_ADDR
// if not x or not y then
29413: LD_VAR 0 2
29417: NOT
29418: PUSH
29419: LD_VAR 0 3
29423: NOT
29424: OR
29425: IFFALSE 29429
// exit ;
29427: GO 31079
// if not range then
29429: LD_VAR 0 4
29433: NOT
29434: IFFALSE 29444
// range := 10 ;
29436: LD_ADDR_VAR 0 4
29440: PUSH
29441: LD_INT 10
29443: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29444: LD_ADDR_VAR 0 8
29448: PUSH
29449: LD_INT 81
29451: PUSH
29452: LD_VAR 0 1
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 92
29463: PUSH
29464: LD_VAR 0 2
29468: PUSH
29469: LD_VAR 0 3
29473: PUSH
29474: LD_VAR 0 4
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 3
29487: PUSH
29488: LD_INT 21
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: PPUSH
29507: CALL_OW 69
29511: ST_TO_ADDR
// if not tmp then
29512: LD_VAR 0 8
29516: NOT
29517: IFFALSE 29521
// exit ;
29519: GO 31079
// for i in tmp do
29521: LD_ADDR_VAR 0 6
29525: PUSH
29526: LD_VAR 0 8
29530: PUSH
29531: FOR_IN
29532: IFFALSE 31054
// begin points := [ 0 , 0 , 0 ] ;
29534: LD_ADDR_VAR 0 9
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// bpoints := 1 ;
29553: LD_ADDR_VAR 0 10
29557: PUSH
29558: LD_INT 1
29560: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29561: LD_VAR 0 6
29565: PPUSH
29566: CALL_OW 247
29570: PUSH
29571: LD_INT 1
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 30157
29579: POP
// begin if GetClass ( i ) = 1 then
29580: LD_VAR 0 6
29584: PPUSH
29585: CALL_OW 257
29589: PUSH
29590: LD_INT 1
29592: EQUAL
29593: IFFALSE 29614
// points := [ 10 , 5 , 3 ] ;
29595: LD_ADDR_VAR 0 9
29599: PUSH
29600: LD_INT 10
29602: PUSH
29603: LD_INT 5
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29614: LD_VAR 0 6
29618: PPUSH
29619: CALL_OW 257
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 4
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: IN
29638: IFFALSE 29659
// points := [ 3 , 2 , 1 ] ;
29640: LD_ADDR_VAR 0 9
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29659: LD_VAR 0 6
29663: PPUSH
29664: CALL_OW 257
29668: PUSH
29669: LD_INT 5
29671: EQUAL
29672: IFFALSE 29693
// points := [ 130 , 5 , 2 ] ;
29674: LD_ADDR_VAR 0 9
29678: PUSH
29679: LD_INT 130
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29693: LD_VAR 0 6
29697: PPUSH
29698: CALL_OW 257
29702: PUSH
29703: LD_INT 8
29705: EQUAL
29706: IFFALSE 29727
// points := [ 35 , 35 , 30 ] ;
29708: LD_ADDR_VAR 0 9
29712: PUSH
29713: LD_INT 35
29715: PUSH
29716: LD_INT 35
29718: PUSH
29719: LD_INT 30
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29727: LD_VAR 0 6
29731: PPUSH
29732: CALL_OW 257
29736: PUSH
29737: LD_INT 9
29739: EQUAL
29740: IFFALSE 29761
// points := [ 20 , 55 , 40 ] ;
29742: LD_ADDR_VAR 0 9
29746: PUSH
29747: LD_INT 20
29749: PUSH
29750: LD_INT 55
29752: PUSH
29753: LD_INT 40
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29761: LD_VAR 0 6
29765: PPUSH
29766: CALL_OW 257
29770: PUSH
29771: LD_INT 12
29773: PUSH
29774: LD_INT 16
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: IN
29781: IFFALSE 29802
// points := [ 5 , 3 , 2 ] ;
29783: LD_ADDR_VAR 0 9
29787: PUSH
29788: LD_INT 5
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29802: LD_VAR 0 6
29806: PPUSH
29807: CALL_OW 257
29811: PUSH
29812: LD_INT 17
29814: EQUAL
29815: IFFALSE 29836
// points := [ 100 , 50 , 75 ] ;
29817: LD_ADDR_VAR 0 9
29821: PUSH
29822: LD_INT 100
29824: PUSH
29825: LD_INT 50
29827: PUSH
29828: LD_INT 75
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29836: LD_VAR 0 6
29840: PPUSH
29841: CALL_OW 257
29845: PUSH
29846: LD_INT 15
29848: EQUAL
29849: IFFALSE 29870
// points := [ 10 , 5 , 3 ] ;
29851: LD_ADDR_VAR 0 9
29855: PUSH
29856: LD_INT 10
29858: PUSH
29859: LD_INT 5
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29870: LD_VAR 0 6
29874: PPUSH
29875: CALL_OW 257
29879: PUSH
29880: LD_INT 14
29882: EQUAL
29883: IFFALSE 29904
// points := [ 10 , 0 , 0 ] ;
29885: LD_ADDR_VAR 0 9
29889: PUSH
29890: LD_INT 10
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29904: LD_VAR 0 6
29908: PPUSH
29909: CALL_OW 257
29913: PUSH
29914: LD_INT 11
29916: EQUAL
29917: IFFALSE 29938
// points := [ 30 , 10 , 5 ] ;
29919: LD_ADDR_VAR 0 9
29923: PUSH
29924: LD_INT 30
29926: PUSH
29927: LD_INT 10
29929: PUSH
29930: LD_INT 5
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29938: LD_VAR 0 1
29942: PPUSH
29943: LD_INT 5
29945: PPUSH
29946: CALL_OW 321
29950: PUSH
29951: LD_INT 2
29953: EQUAL
29954: IFFALSE 29971
// bpoints := bpoints * 1.8 ;
29956: LD_ADDR_VAR 0 10
29960: PUSH
29961: LD_VAR 0 10
29965: PUSH
29966: LD_REAL  1.80000000000000E+0000
29969: MUL
29970: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 257
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: LD_INT 3
29989: PUSH
29990: LD_INT 4
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: IN
29999: PUSH
30000: LD_VAR 0 1
30004: PPUSH
30005: LD_INT 51
30007: PPUSH
30008: CALL_OW 321
30012: PUSH
30013: LD_INT 2
30015: EQUAL
30016: AND
30017: IFFALSE 30034
// bpoints := bpoints * 1.2 ;
30019: LD_ADDR_VAR 0 10
30023: PUSH
30024: LD_VAR 0 10
30028: PUSH
30029: LD_REAL  1.20000000000000E+0000
30032: MUL
30033: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30034: LD_VAR 0 6
30038: PPUSH
30039: CALL_OW 257
30043: PUSH
30044: LD_INT 5
30046: PUSH
30047: LD_INT 7
30049: PUSH
30050: LD_INT 9
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: IN
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: LD_INT 52
30066: PPUSH
30067: CALL_OW 321
30071: PUSH
30072: LD_INT 2
30074: EQUAL
30075: AND
30076: IFFALSE 30093
// bpoints := bpoints * 1.5 ;
30078: LD_ADDR_VAR 0 10
30082: PUSH
30083: LD_VAR 0 10
30087: PUSH
30088: LD_REAL  1.50000000000000E+0000
30091: MUL
30092: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30093: LD_VAR 0 1
30097: PPUSH
30098: LD_INT 66
30100: PPUSH
30101: CALL_OW 321
30105: PUSH
30106: LD_INT 2
30108: EQUAL
30109: IFFALSE 30126
// bpoints := bpoints * 1.1 ;
30111: LD_ADDR_VAR 0 10
30115: PUSH
30116: LD_VAR 0 10
30120: PUSH
30121: LD_REAL  1.10000000000000E+0000
30124: MUL
30125: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30126: LD_ADDR_VAR 0 10
30130: PUSH
30131: LD_VAR 0 10
30135: PUSH
30136: LD_VAR 0 6
30140: PPUSH
30141: LD_INT 1
30143: PPUSH
30144: CALL_OW 259
30148: PUSH
30149: LD_REAL  1.15000000000000E+0000
30152: MUL
30153: MUL
30154: ST_TO_ADDR
// end ; unit_vehicle :
30155: GO 30983
30157: LD_INT 2
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30971
30165: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30166: LD_VAR 0 6
30170: PPUSH
30171: CALL_OW 264
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 42
30181: PUSH
30182: LD_INT 24
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: IN
30190: IFFALSE 30211
// points := [ 25 , 5 , 3 ] ;
30192: LD_ADDR_VAR 0 9
30196: PUSH
30197: LD_INT 25
30199: PUSH
30200: LD_INT 5
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30211: LD_VAR 0 6
30215: PPUSH
30216: CALL_OW 264
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 43
30226: PUSH
30227: LD_INT 25
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: IN
30235: IFFALSE 30256
// points := [ 40 , 15 , 5 ] ;
30237: LD_ADDR_VAR 0 9
30241: PUSH
30242: LD_INT 40
30244: PUSH
30245: LD_INT 15
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30256: LD_VAR 0 6
30260: PPUSH
30261: CALL_OW 264
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: LD_INT 23
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: IN
30276: IFFALSE 30297
// points := [ 7 , 25 , 8 ] ;
30278: LD_ADDR_VAR 0 9
30282: PUSH
30283: LD_INT 7
30285: PUSH
30286: LD_INT 25
30288: PUSH
30289: LD_INT 8
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30297: LD_VAR 0 6
30301: PPUSH
30302: CALL_OW 264
30306: PUSH
30307: LD_INT 5
30309: PUSH
30310: LD_INT 27
30312: PUSH
30313: LD_INT 44
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: IN
30321: IFFALSE 30342
// points := [ 14 , 50 , 16 ] ;
30323: LD_ADDR_VAR 0 9
30327: PUSH
30328: LD_INT 14
30330: PUSH
30331: LD_INT 50
30333: PUSH
30334: LD_INT 16
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30342: LD_VAR 0 6
30346: PPUSH
30347: CALL_OW 264
30351: PUSH
30352: LD_INT 6
30354: PUSH
30355: LD_INT 46
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: IN
30362: IFFALSE 30383
// points := [ 32 , 120 , 70 ] ;
30364: LD_ADDR_VAR 0 9
30368: PUSH
30369: LD_INT 32
30371: PUSH
30372: LD_INT 120
30374: PUSH
30375: LD_INT 70
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30383: LD_VAR 0 6
30387: PPUSH
30388: CALL_OW 264
30392: PUSH
30393: LD_INT 7
30395: PUSH
30396: LD_INT 28
30398: PUSH
30399: LD_INT 45
30401: PUSH
30402: LD_INT 92
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: IN
30411: IFFALSE 30432
// points := [ 35 , 20 , 45 ] ;
30413: LD_ADDR_VAR 0 9
30417: PUSH
30418: LD_INT 35
30420: PUSH
30421: LD_INT 20
30423: PUSH
30424: LD_INT 45
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30432: LD_VAR 0 6
30436: PPUSH
30437: CALL_OW 264
30441: PUSH
30442: LD_INT 47
30444: PUSH
30445: EMPTY
30446: LIST
30447: IN
30448: IFFALSE 30469
// points := [ 67 , 45 , 75 ] ;
30450: LD_ADDR_VAR 0 9
30454: PUSH
30455: LD_INT 67
30457: PUSH
30458: LD_INT 45
30460: PUSH
30461: LD_INT 75
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30469: LD_VAR 0 6
30473: PPUSH
30474: CALL_OW 264
30478: PUSH
30479: LD_INT 26
30481: PUSH
30482: EMPTY
30483: LIST
30484: IN
30485: IFFALSE 30506
// points := [ 120 , 30 , 80 ] ;
30487: LD_ADDR_VAR 0 9
30491: PUSH
30492: LD_INT 120
30494: PUSH
30495: LD_INT 30
30497: PUSH
30498: LD_INT 80
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30506: LD_VAR 0 6
30510: PPUSH
30511: CALL_OW 264
30515: PUSH
30516: LD_INT 22
30518: PUSH
30519: EMPTY
30520: LIST
30521: IN
30522: IFFALSE 30543
// points := [ 40 , 1 , 1 ] ;
30524: LD_ADDR_VAR 0 9
30528: PUSH
30529: LD_INT 40
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30543: LD_VAR 0 6
30547: PPUSH
30548: CALL_OW 264
30552: PUSH
30553: LD_INT 29
30555: PUSH
30556: EMPTY
30557: LIST
30558: IN
30559: IFFALSE 30580
// points := [ 70 , 200 , 400 ] ;
30561: LD_ADDR_VAR 0 9
30565: PUSH
30566: LD_INT 70
30568: PUSH
30569: LD_INT 200
30571: PUSH
30572: LD_INT 400
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30580: LD_VAR 0 6
30584: PPUSH
30585: CALL_OW 264
30589: PUSH
30590: LD_INT 14
30592: PUSH
30593: LD_INT 53
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: IN
30600: IFFALSE 30621
// points := [ 40 , 10 , 20 ] ;
30602: LD_ADDR_VAR 0 9
30606: PUSH
30607: LD_INT 40
30609: PUSH
30610: LD_INT 10
30612: PUSH
30613: LD_INT 20
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30621: LD_VAR 0 6
30625: PPUSH
30626: CALL_OW 264
30630: PUSH
30631: LD_INT 9
30633: PUSH
30634: EMPTY
30635: LIST
30636: IN
30637: IFFALSE 30658
// points := [ 5 , 70 , 20 ] ;
30639: LD_ADDR_VAR 0 9
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: LD_INT 70
30649: PUSH
30650: LD_INT 20
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30658: LD_VAR 0 6
30662: PPUSH
30663: CALL_OW 264
30667: PUSH
30668: LD_INT 10
30670: PUSH
30671: EMPTY
30672: LIST
30673: IN
30674: IFFALSE 30695
// points := [ 35 , 110 , 70 ] ;
30676: LD_ADDR_VAR 0 9
30680: PUSH
30681: LD_INT 35
30683: PUSH
30684: LD_INT 110
30686: PUSH
30687: LD_INT 70
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30695: LD_VAR 0 6
30699: PPUSH
30700: CALL_OW 265
30704: PUSH
30705: LD_INT 25
30707: EQUAL
30708: IFFALSE 30729
// points := [ 80 , 65 , 100 ] ;
30710: LD_ADDR_VAR 0 9
30714: PUSH
30715: LD_INT 80
30717: PUSH
30718: LD_INT 65
30720: PUSH
30721: LD_INT 100
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30729: LD_VAR 0 6
30733: PPUSH
30734: CALL_OW 263
30738: PUSH
30739: LD_INT 1
30741: EQUAL
30742: IFFALSE 30777
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30744: LD_ADDR_VAR 0 10
30748: PUSH
30749: LD_VAR 0 10
30753: PUSH
30754: LD_VAR 0 6
30758: PPUSH
30759: CALL_OW 311
30763: PPUSH
30764: LD_INT 3
30766: PPUSH
30767: CALL_OW 259
30771: PUSH
30772: LD_INT 4
30774: MUL
30775: MUL
30776: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30777: LD_VAR 0 6
30781: PPUSH
30782: CALL_OW 263
30786: PUSH
30787: LD_INT 2
30789: EQUAL
30790: IFFALSE 30841
// begin j := IsControledBy ( i ) ;
30792: LD_ADDR_VAR 0 7
30796: PUSH
30797: LD_VAR 0 6
30801: PPUSH
30802: CALL_OW 312
30806: ST_TO_ADDR
// if j then
30807: LD_VAR 0 7
30811: IFFALSE 30841
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30813: LD_ADDR_VAR 0 10
30817: PUSH
30818: LD_VAR 0 10
30822: PUSH
30823: LD_VAR 0 7
30827: PPUSH
30828: LD_INT 3
30830: PPUSH
30831: CALL_OW 259
30835: PUSH
30836: LD_INT 3
30838: MUL
30839: MUL
30840: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30841: LD_VAR 0 6
30845: PPUSH
30846: CALL_OW 264
30850: PUSH
30851: LD_INT 5
30853: PUSH
30854: LD_INT 6
30856: PUSH
30857: LD_INT 46
30859: PUSH
30860: LD_INT 44
30862: PUSH
30863: LD_INT 47
30865: PUSH
30866: LD_INT 45
30868: PUSH
30869: LD_INT 28
30871: PUSH
30872: LD_INT 7
30874: PUSH
30875: LD_INT 27
30877: PUSH
30878: LD_INT 29
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: IN
30893: PUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: LD_INT 52
30901: PPUSH
30902: CALL_OW 321
30906: PUSH
30907: LD_INT 2
30909: EQUAL
30910: AND
30911: IFFALSE 30928
// bpoints := bpoints * 1.2 ;
30913: LD_ADDR_VAR 0 10
30917: PUSH
30918: LD_VAR 0 10
30922: PUSH
30923: LD_REAL  1.20000000000000E+0000
30926: MUL
30927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30928: LD_VAR 0 6
30932: PPUSH
30933: CALL_OW 264
30937: PUSH
30938: LD_INT 6
30940: PUSH
30941: LD_INT 46
30943: PUSH
30944: LD_INT 47
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: IN
30952: IFFALSE 30969
// bpoints := bpoints * 1.2 ;
30954: LD_ADDR_VAR 0 10
30958: PUSH
30959: LD_VAR 0 10
30963: PUSH
30964: LD_REAL  1.20000000000000E+0000
30967: MUL
30968: ST_TO_ADDR
// end ; unit_building :
30969: GO 30983
30971: LD_INT 3
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 30982
30979: POP
// ; end ;
30980: GO 30983
30982: POP
// for j = 1 to 3 do
30983: LD_ADDR_VAR 0 7
30987: PUSH
30988: DOUBLE
30989: LD_INT 1
30991: DEC
30992: ST_TO_ADDR
30993: LD_INT 3
30995: PUSH
30996: FOR_TO
30997: IFFALSE 31050
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30999: LD_ADDR_VAR 0 5
31003: PUSH
31004: LD_VAR 0 5
31008: PPUSH
31009: LD_VAR 0 7
31013: PPUSH
31014: LD_VAR 0 5
31018: PUSH
31019: LD_VAR 0 7
31023: ARRAY
31024: PUSH
31025: LD_VAR 0 9
31029: PUSH
31030: LD_VAR 0 7
31034: ARRAY
31035: PUSH
31036: LD_VAR 0 10
31040: MUL
31041: PLUS
31042: PPUSH
31043: CALL_OW 1
31047: ST_TO_ADDR
31048: GO 30996
31050: POP
31051: POP
// end ;
31052: GO 29531
31054: POP
31055: POP
// result := Replace ( result , 4 , tmp ) ;
31056: LD_ADDR_VAR 0 5
31060: PUSH
31061: LD_VAR 0 5
31065: PPUSH
31066: LD_INT 4
31068: PPUSH
31069: LD_VAR 0 8
31073: PPUSH
31074: CALL_OW 1
31078: ST_TO_ADDR
// end ;
31079: LD_VAR 0 5
31083: RET
// export function DangerAtRange ( unit , range ) ; begin
31084: LD_INT 0
31086: PPUSH
// if not unit then
31087: LD_VAR 0 1
31091: NOT
31092: IFFALSE 31096
// exit ;
31094: GO 31141
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 255
31110: PPUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 250
31120: PPUSH
31121: LD_VAR 0 1
31125: PPUSH
31126: CALL_OW 251
31130: PPUSH
31131: LD_VAR 0 2
31135: PPUSH
31136: CALL 29383 0 4
31140: ST_TO_ADDR
// end ;
31141: LD_VAR 0 3
31145: RET
// export function DangerInArea ( side , area ) ; begin
31146: LD_INT 0
31148: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_VAR 0 2
31158: PPUSH
31159: LD_INT 81
31161: PUSH
31162: LD_VAR 0 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PPUSH
31171: CALL_OW 70
31175: ST_TO_ADDR
// end ;
31176: LD_VAR 0 3
31180: RET
// export function IsExtension ( b ) ; begin
31181: LD_INT 0
31183: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31184: LD_ADDR_VAR 0 2
31188: PUSH
31189: LD_VAR 0 1
31193: PUSH
31194: LD_INT 23
31196: PUSH
31197: LD_INT 20
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_INT 17
31205: PUSH
31206: LD_INT 24
31208: PUSH
31209: LD_INT 21
31211: PUSH
31212: LD_INT 19
31214: PUSH
31215: LD_INT 16
31217: PUSH
31218: LD_INT 25
31220: PUSH
31221: LD_INT 18
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: IN
31236: ST_TO_ADDR
// end ;
31237: LD_VAR 0 2
31241: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31242: LD_INT 0
31244: PPUSH
31245: PPUSH
31246: PPUSH
// result := [ ] ;
31247: LD_ADDR_VAR 0 4
31251: PUSH
31252: EMPTY
31253: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31254: LD_ADDR_VAR 0 5
31258: PUSH
31259: LD_VAR 0 2
31263: PPUSH
31264: LD_INT 21
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PPUSH
31274: CALL_OW 70
31278: ST_TO_ADDR
// if not tmp then
31279: LD_VAR 0 5
31283: NOT
31284: IFFALSE 31288
// exit ;
31286: GO 31352
// if checkLink then
31288: LD_VAR 0 3
31292: IFFALSE 31342
// begin for i in tmp do
31294: LD_ADDR_VAR 0 6
31298: PUSH
31299: LD_VAR 0 5
31303: PUSH
31304: FOR_IN
31305: IFFALSE 31340
// if GetBase ( i ) <> base then
31307: LD_VAR 0 6
31311: PPUSH
31312: CALL_OW 274
31316: PUSH
31317: LD_VAR 0 1
31321: NONEQUAL
31322: IFFALSE 31338
// ComLinkToBase ( base , i ) ;
31324: LD_VAR 0 1
31328: PPUSH
31329: LD_VAR 0 6
31333: PPUSH
31334: CALL_OW 169
31338: GO 31304
31340: POP
31341: POP
// end ; result := tmp ;
31342: LD_ADDR_VAR 0 4
31346: PUSH
31347: LD_VAR 0 5
31351: ST_TO_ADDR
// end ;
31352: LD_VAR 0 4
31356: RET
// export function ComComplete ( units , b ) ; var i ; begin
31357: LD_INT 0
31359: PPUSH
31360: PPUSH
// if not units then
31361: LD_VAR 0 1
31365: NOT
31366: IFFALSE 31370
// exit ;
31368: GO 31460
// for i in units do
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: LD_VAR 0 1
31379: PUSH
31380: FOR_IN
31381: IFFALSE 31458
// if BuildingStatus ( b ) = bs_build then
31383: LD_VAR 0 2
31387: PPUSH
31388: CALL_OW 461
31392: PUSH
31393: LD_INT 1
31395: EQUAL
31396: IFFALSE 31456
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31398: LD_VAR 0 4
31402: PPUSH
31403: LD_STRING h
31405: PUSH
31406: LD_VAR 0 2
31410: PPUSH
31411: CALL_OW 250
31415: PUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: CALL_OW 251
31425: PUSH
31426: LD_VAR 0 2
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: PPUSH
31452: CALL_OW 446
31456: GO 31380
31458: POP
31459: POP
// end ;
31460: LD_VAR 0 3
31464: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31465: LD_INT 0
31467: PPUSH
31468: PPUSH
31469: PPUSH
31470: PPUSH
31471: PPUSH
31472: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31473: LD_VAR 0 1
31477: NOT
31478: PUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 263
31488: PUSH
31489: LD_INT 2
31491: NONEQUAL
31492: OR
31493: IFFALSE 31497
// exit ;
31495: GO 31813
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31497: LD_ADDR_VAR 0 6
31501: PUSH
31502: LD_INT 22
31504: PUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: CALL_OW 255
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: LD_INT 30
31524: PUSH
31525: LD_INT 36
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 34
31534: PUSH
31535: LD_INT 31
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PPUSH
31551: CALL_OW 69
31555: ST_TO_ADDR
// if not tmp then
31556: LD_VAR 0 6
31560: NOT
31561: IFFALSE 31565
// exit ;
31563: GO 31813
// result := [ ] ;
31565: LD_ADDR_VAR 0 2
31569: PUSH
31570: EMPTY
31571: ST_TO_ADDR
// for i in tmp do
31572: LD_ADDR_VAR 0 3
31576: PUSH
31577: LD_VAR 0 6
31581: PUSH
31582: FOR_IN
31583: IFFALSE 31654
// begin t := UnitsInside ( i ) ;
31585: LD_ADDR_VAR 0 4
31589: PUSH
31590: LD_VAR 0 3
31594: PPUSH
31595: CALL_OW 313
31599: ST_TO_ADDR
// if t then
31600: LD_VAR 0 4
31604: IFFALSE 31652
// for j in t do
31606: LD_ADDR_VAR 0 7
31610: PUSH
31611: LD_VAR 0 4
31615: PUSH
31616: FOR_IN
31617: IFFALSE 31650
// result := Replace ( result , result + 1 , j ) ;
31619: LD_ADDR_VAR 0 2
31623: PUSH
31624: LD_VAR 0 2
31628: PPUSH
31629: LD_VAR 0 2
31633: PUSH
31634: LD_INT 1
31636: PLUS
31637: PPUSH
31638: LD_VAR 0 7
31642: PPUSH
31643: CALL_OW 1
31647: ST_TO_ADDR
31648: GO 31616
31650: POP
31651: POP
// end ;
31652: GO 31582
31654: POP
31655: POP
// if not result then
31656: LD_VAR 0 2
31660: NOT
31661: IFFALSE 31665
// exit ;
31663: GO 31813
// mech := result [ 1 ] ;
31665: LD_ADDR_VAR 0 5
31669: PUSH
31670: LD_VAR 0 2
31674: PUSH
31675: LD_INT 1
31677: ARRAY
31678: ST_TO_ADDR
// if result > 1 then
31679: LD_VAR 0 2
31683: PUSH
31684: LD_INT 1
31686: GREATER
31687: IFFALSE 31799
// begin for i = 2 to result do
31689: LD_ADDR_VAR 0 3
31693: PUSH
31694: DOUBLE
31695: LD_INT 2
31697: DEC
31698: ST_TO_ADDR
31699: LD_VAR 0 2
31703: PUSH
31704: FOR_TO
31705: IFFALSE 31797
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31707: LD_ADDR_VAR 0 4
31711: PUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_VAR 0 3
31721: ARRAY
31722: PPUSH
31723: LD_INT 3
31725: PPUSH
31726: CALL_OW 259
31730: PUSH
31731: LD_VAR 0 2
31735: PUSH
31736: LD_VAR 0 3
31740: ARRAY
31741: PPUSH
31742: CALL_OW 432
31746: MINUS
31747: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31748: LD_VAR 0 4
31752: PUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: LD_INT 3
31760: PPUSH
31761: CALL_OW 259
31765: PUSH
31766: LD_VAR 0 5
31770: PPUSH
31771: CALL_OW 432
31775: MINUS
31776: GREATEREQUAL
31777: IFFALSE 31795
// mech := result [ i ] ;
31779: LD_ADDR_VAR 0 5
31783: PUSH
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 3
31793: ARRAY
31794: ST_TO_ADDR
// end ;
31795: GO 31704
31797: POP
31798: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31799: LD_VAR 0 1
31803: PPUSH
31804: LD_VAR 0 5
31808: PPUSH
31809: CALL_OW 135
// end ;
31813: LD_VAR 0 2
31817: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31818: LD_INT 0
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
// result := [ ] ;
31833: LD_ADDR_VAR 0 7
31837: PUSH
31838: EMPTY
31839: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 266
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: IN
31860: NOT
31861: IFFALSE 31865
// exit ;
31863: GO 33499
// if name then
31865: LD_VAR 0 3
31869: IFFALSE 31885
// SetBName ( base_dep , name ) ;
31871: LD_VAR 0 1
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 500
// base := GetBase ( base_dep ) ;
31885: LD_ADDR_VAR 0 15
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 274
31899: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31900: LD_ADDR_VAR 0 16
31904: PUSH
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 255
31914: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31915: LD_ADDR_VAR 0 17
31919: PUSH
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 248
31929: ST_TO_ADDR
// if sources then
31930: LD_VAR 0 5
31934: IFFALSE 31981
// for i = 1 to 3 do
31936: LD_ADDR_VAR 0 8
31940: PUSH
31941: DOUBLE
31942: LD_INT 1
31944: DEC
31945: ST_TO_ADDR
31946: LD_INT 3
31948: PUSH
31949: FOR_TO
31950: IFFALSE 31979
// AddResourceType ( base , i , sources [ i ] ) ;
31952: LD_VAR 0 15
31956: PPUSH
31957: LD_VAR 0 8
31961: PPUSH
31962: LD_VAR 0 5
31966: PUSH
31967: LD_VAR 0 8
31971: ARRAY
31972: PPUSH
31973: CALL_OW 276
31977: GO 31949
31979: POP
31980: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31981: LD_ADDR_VAR 0 18
31985: PUSH
31986: LD_VAR 0 15
31990: PPUSH
31991: LD_VAR 0 2
31995: PPUSH
31996: LD_INT 1
31998: PPUSH
31999: CALL 31242 0 3
32003: ST_TO_ADDR
// InitHc ;
32004: CALL_OW 19
// InitUc ;
32008: CALL_OW 18
// uc_side := side ;
32012: LD_ADDR_OWVAR 20
32016: PUSH
32017: LD_VAR 0 16
32021: ST_TO_ADDR
// uc_nation := nation ;
32022: LD_ADDR_OWVAR 21
32026: PUSH
32027: LD_VAR 0 17
32031: ST_TO_ADDR
// if buildings then
32032: LD_VAR 0 18
32036: IFFALSE 33358
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32038: LD_ADDR_VAR 0 19
32042: PUSH
32043: LD_VAR 0 18
32047: PPUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 29
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: LD_INT 30
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 72
32080: ST_TO_ADDR
// if tmp then
32081: LD_VAR 0 19
32085: IFFALSE 32133
// for i in tmp do
32087: LD_ADDR_VAR 0 8
32091: PUSH
32092: LD_VAR 0 19
32096: PUSH
32097: FOR_IN
32098: IFFALSE 32131
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32100: LD_VAR 0 8
32104: PPUSH
32105: CALL_OW 250
32109: PPUSH
32110: LD_VAR 0 8
32114: PPUSH
32115: CALL_OW 251
32119: PPUSH
32120: LD_VAR 0 16
32124: PPUSH
32125: CALL_OW 441
32129: GO 32097
32131: POP
32132: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32133: LD_VAR 0 18
32137: PPUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 30
32143: PUSH
32144: LD_INT 32
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 30
32153: PUSH
32154: LD_INT 33
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 72
32170: IFFALSE 32258
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32172: LD_ADDR_VAR 0 8
32176: PUSH
32177: LD_VAR 0 18
32181: PPUSH
32182: LD_INT 2
32184: PUSH
32185: LD_INT 30
32187: PUSH
32188: LD_INT 32
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 30
32197: PUSH
32198: LD_INT 33
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: PPUSH
32210: CALL_OW 72
32214: PUSH
32215: FOR_IN
32216: IFFALSE 32256
// begin if not GetBWeapon ( i ) then
32218: LD_VAR 0 8
32222: PPUSH
32223: CALL_OW 269
32227: NOT
32228: IFFALSE 32254
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32230: LD_VAR 0 8
32234: PPUSH
32235: LD_VAR 0 8
32239: PPUSH
32240: LD_VAR 0 2
32244: PPUSH
32245: CALL 33504 0 2
32249: PPUSH
32250: CALL_OW 431
// end ;
32254: GO 32215
32256: POP
32257: POP
// end ; for i = 1 to personel do
32258: LD_ADDR_VAR 0 8
32262: PUSH
32263: DOUBLE
32264: LD_INT 1
32266: DEC
32267: ST_TO_ADDR
32268: LD_VAR 0 6
32272: PUSH
32273: FOR_TO
32274: IFFALSE 33338
// begin if i > 4 then
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 4
32283: GREATER
32284: IFFALSE 32288
// break ;
32286: GO 33338
// case i of 1 :
32288: LD_VAR 0 8
32292: PUSH
32293: LD_INT 1
32295: DOUBLE
32296: EQUAL
32297: IFTRUE 32301
32299: GO 32381
32301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32302: LD_ADDR_VAR 0 12
32306: PUSH
32307: LD_VAR 0 18
32311: PPUSH
32312: LD_INT 22
32314: PUSH
32315: LD_VAR 0 16
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 58
32326: PUSH
32327: EMPTY
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 30
32335: PUSH
32336: LD_INT 32
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 30
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 30
32355: PUSH
32356: LD_INT 5
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: PPUSH
32374: CALL_OW 72
32378: ST_TO_ADDR
32379: GO 32603
32381: LD_INT 2
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32451
32389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32390: LD_ADDR_VAR 0 12
32394: PUSH
32395: LD_VAR 0 18
32399: PPUSH
32400: LD_INT 22
32402: PUSH
32403: LD_VAR 0 16
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: LD_INT 30
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 30
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PPUSH
32444: CALL_OW 72
32448: ST_TO_ADDR
32449: GO 32603
32451: LD_INT 3
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32459
32457: GO 32521
32459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32460: LD_ADDR_VAR 0 12
32464: PUSH
32465: LD_VAR 0 18
32469: PPUSH
32470: LD_INT 22
32472: PUSH
32473: LD_VAR 0 16
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 30
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 72
32518: ST_TO_ADDR
32519: GO 32603
32521: LD_INT 4
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32602
32529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32530: LD_ADDR_VAR 0 12
32534: PUSH
32535: LD_VAR 0 18
32539: PPUSH
32540: LD_INT 22
32542: PUSH
32543: LD_VAR 0 16
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: PUSH
32555: LD_INT 30
32557: PUSH
32558: LD_INT 6
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 30
32567: PUSH
32568: LD_INT 7
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 30
32577: PUSH
32578: LD_INT 8
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 72
32599: ST_TO_ADDR
32600: GO 32603
32602: POP
// if i = 1 then
32603: LD_VAR 0 8
32607: PUSH
32608: LD_INT 1
32610: EQUAL
32611: IFFALSE 32722
// begin tmp := [ ] ;
32613: LD_ADDR_VAR 0 19
32617: PUSH
32618: EMPTY
32619: ST_TO_ADDR
// for j in f do
32620: LD_ADDR_VAR 0 9
32624: PUSH
32625: LD_VAR 0 12
32629: PUSH
32630: FOR_IN
32631: IFFALSE 32704
// if GetBType ( j ) = b_bunker then
32633: LD_VAR 0 9
32637: PPUSH
32638: CALL_OW 266
32642: PUSH
32643: LD_INT 32
32645: EQUAL
32646: IFFALSE 32673
// tmp := Insert ( tmp , 1 , j ) else
32648: LD_ADDR_VAR 0 19
32652: PUSH
32653: LD_VAR 0 19
32657: PPUSH
32658: LD_INT 1
32660: PPUSH
32661: LD_VAR 0 9
32665: PPUSH
32666: CALL_OW 2
32670: ST_TO_ADDR
32671: GO 32702
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32673: LD_ADDR_VAR 0 19
32677: PUSH
32678: LD_VAR 0 19
32682: PPUSH
32683: LD_VAR 0 19
32687: PUSH
32688: LD_INT 1
32690: PLUS
32691: PPUSH
32692: LD_VAR 0 9
32696: PPUSH
32697: CALL_OW 2
32701: ST_TO_ADDR
32702: GO 32630
32704: POP
32705: POP
// if tmp then
32706: LD_VAR 0 19
32710: IFFALSE 32722
// f := tmp ;
32712: LD_ADDR_VAR 0 12
32716: PUSH
32717: LD_VAR 0 19
32721: ST_TO_ADDR
// end ; x := personel [ i ] ;
32722: LD_ADDR_VAR 0 13
32726: PUSH
32727: LD_VAR 0 6
32731: PUSH
32732: LD_VAR 0 8
32736: ARRAY
32737: ST_TO_ADDR
// if x = - 1 then
32738: LD_VAR 0 13
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: EQUAL
32747: IFFALSE 32956
// begin for j in f do
32749: LD_ADDR_VAR 0 9
32753: PUSH
32754: LD_VAR 0 12
32758: PUSH
32759: FOR_IN
32760: IFFALSE 32952
// repeat InitHc ;
32762: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32766: LD_VAR 0 9
32770: PPUSH
32771: CALL_OW 266
32775: PUSH
32776: LD_INT 5
32778: EQUAL
32779: IFFALSE 32849
// begin if UnitsInside ( j ) < 3 then
32781: LD_VAR 0 9
32785: PPUSH
32786: CALL_OW 313
32790: PUSH
32791: LD_INT 3
32793: LESS
32794: IFFALSE 32830
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32796: LD_INT 0
32798: PPUSH
32799: LD_INT 5
32801: PUSH
32802: LD_INT 8
32804: PUSH
32805: LD_INT 9
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: PUSH
32813: LD_VAR 0 17
32817: ARRAY
32818: PPUSH
32819: LD_VAR 0 4
32823: PPUSH
32824: CALL_OW 380
32828: GO 32847
// PrepareHuman ( false , i , skill ) ;
32830: LD_INT 0
32832: PPUSH
32833: LD_VAR 0 8
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: CALL_OW 380
// end else
32847: GO 32866
// PrepareHuman ( false , i , skill ) ;
32849: LD_INT 0
32851: PPUSH
32852: LD_VAR 0 8
32856: PPUSH
32857: LD_VAR 0 4
32861: PPUSH
32862: CALL_OW 380
// un := CreateHuman ;
32866: LD_ADDR_VAR 0 14
32870: PUSH
32871: CALL_OW 44
32875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32876: LD_ADDR_VAR 0 7
32880: PUSH
32881: LD_VAR 0 7
32885: PPUSH
32886: LD_INT 1
32888: PPUSH
32889: LD_VAR 0 14
32893: PPUSH
32894: CALL_OW 2
32898: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32899: LD_VAR 0 14
32903: PPUSH
32904: LD_VAR 0 9
32908: PPUSH
32909: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32913: LD_VAR 0 9
32917: PPUSH
32918: CALL_OW 313
32922: PUSH
32923: LD_INT 6
32925: EQUAL
32926: PUSH
32927: LD_VAR 0 9
32931: PPUSH
32932: CALL_OW 266
32936: PUSH
32937: LD_INT 32
32939: PUSH
32940: LD_INT 31
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: IN
32947: OR
32948: IFFALSE 32762
32950: GO 32759
32952: POP
32953: POP
// end else
32954: GO 33336
// for j = 1 to x do
32956: LD_ADDR_VAR 0 9
32960: PUSH
32961: DOUBLE
32962: LD_INT 1
32964: DEC
32965: ST_TO_ADDR
32966: LD_VAR 0 13
32970: PUSH
32971: FOR_TO
32972: IFFALSE 33334
// begin InitHc ;
32974: CALL_OW 19
// if not f then
32978: LD_VAR 0 12
32982: NOT
32983: IFFALSE 33072
// begin PrepareHuman ( false , i , skill ) ;
32985: LD_INT 0
32987: PPUSH
32988: LD_VAR 0 8
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: CALL_OW 380
// un := CreateHuman ;
33002: LD_ADDR_VAR 0 14
33006: PUSH
33007: CALL_OW 44
33011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33012: LD_ADDR_VAR 0 7
33016: PUSH
33017: LD_VAR 0 7
33021: PPUSH
33022: LD_INT 1
33024: PPUSH
33025: LD_VAR 0 14
33029: PPUSH
33030: CALL_OW 2
33034: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33035: LD_VAR 0 14
33039: PPUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 250
33049: PPUSH
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 251
33059: PPUSH
33060: LD_INT 10
33062: PPUSH
33063: LD_INT 0
33065: PPUSH
33066: CALL_OW 50
// continue ;
33070: GO 32971
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33072: LD_VAR 0 12
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: PPUSH
33081: CALL_OW 313
33085: PUSH
33086: LD_VAR 0 12
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PPUSH
33095: CALL_OW 266
33099: PUSH
33100: LD_INT 32
33102: PUSH
33103: LD_INT 31
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: IN
33110: AND
33111: PUSH
33112: LD_VAR 0 12
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 313
33125: PUSH
33126: LD_INT 6
33128: EQUAL
33129: OR
33130: IFFALSE 33150
// f := Delete ( f , 1 ) ;
33132: LD_ADDR_VAR 0 12
33136: PUSH
33137: LD_VAR 0 12
33141: PPUSH
33142: LD_INT 1
33144: PPUSH
33145: CALL_OW 3
33149: ST_TO_ADDR
// if not f then
33150: LD_VAR 0 12
33154: NOT
33155: IFFALSE 33173
// begin x := x + 2 ;
33157: LD_ADDR_VAR 0 13
33161: PUSH
33162: LD_VAR 0 13
33166: PUSH
33167: LD_INT 2
33169: PLUS
33170: ST_TO_ADDR
// continue ;
33171: GO 32971
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33173: LD_VAR 0 12
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: PPUSH
33182: CALL_OW 266
33186: PUSH
33187: LD_INT 5
33189: EQUAL
33190: IFFALSE 33264
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33192: LD_VAR 0 12
33196: PUSH
33197: LD_INT 1
33199: ARRAY
33200: PPUSH
33201: CALL_OW 313
33205: PUSH
33206: LD_INT 3
33208: LESS
33209: IFFALSE 33245
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33211: LD_INT 0
33213: PPUSH
33214: LD_INT 5
33216: PUSH
33217: LD_INT 8
33219: PUSH
33220: LD_INT 9
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: LD_VAR 0 17
33232: ARRAY
33233: PPUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 380
33243: GO 33262
// PrepareHuman ( false , i , skill ) ;
33245: LD_INT 0
33247: PPUSH
33248: LD_VAR 0 8
33252: PPUSH
33253: LD_VAR 0 4
33257: PPUSH
33258: CALL_OW 380
// end else
33262: GO 33281
// PrepareHuman ( false , i , skill ) ;
33264: LD_INT 0
33266: PPUSH
33267: LD_VAR 0 8
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: CALL_OW 380
// un := CreateHuman ;
33281: LD_ADDR_VAR 0 14
33285: PUSH
33286: CALL_OW 44
33290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33291: LD_ADDR_VAR 0 7
33295: PUSH
33296: LD_VAR 0 7
33300: PPUSH
33301: LD_INT 1
33303: PPUSH
33304: LD_VAR 0 14
33308: PPUSH
33309: CALL_OW 2
33313: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33314: LD_VAR 0 14
33318: PPUSH
33319: LD_VAR 0 12
33323: PUSH
33324: LD_INT 1
33326: ARRAY
33327: PPUSH
33328: CALL_OW 52
// end ;
33332: GO 32971
33334: POP
33335: POP
// end ;
33336: GO 32273
33338: POP
33339: POP
// result := result ^ buildings ;
33340: LD_ADDR_VAR 0 7
33344: PUSH
33345: LD_VAR 0 7
33349: PUSH
33350: LD_VAR 0 18
33354: ADD
33355: ST_TO_ADDR
// end else
33356: GO 33499
// begin for i = 1 to personel do
33358: LD_ADDR_VAR 0 8
33362: PUSH
33363: DOUBLE
33364: LD_INT 1
33366: DEC
33367: ST_TO_ADDR
33368: LD_VAR 0 6
33372: PUSH
33373: FOR_TO
33374: IFFALSE 33497
// begin if i > 4 then
33376: LD_VAR 0 8
33380: PUSH
33381: LD_INT 4
33383: GREATER
33384: IFFALSE 33388
// break ;
33386: GO 33497
// x := personel [ i ] ;
33388: LD_ADDR_VAR 0 13
33392: PUSH
33393: LD_VAR 0 6
33397: PUSH
33398: LD_VAR 0 8
33402: ARRAY
33403: ST_TO_ADDR
// if x = - 1 then
33404: LD_VAR 0 13
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: EQUAL
33413: IFFALSE 33417
// continue ;
33415: GO 33373
// PrepareHuman ( false , i , skill ) ;
33417: LD_INT 0
33419: PPUSH
33420: LD_VAR 0 8
33424: PPUSH
33425: LD_VAR 0 4
33429: PPUSH
33430: CALL_OW 380
// un := CreateHuman ;
33434: LD_ADDR_VAR 0 14
33438: PUSH
33439: CALL_OW 44
33443: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33444: LD_VAR 0 14
33448: PPUSH
33449: LD_VAR 0 1
33453: PPUSH
33454: CALL_OW 250
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 251
33468: PPUSH
33469: LD_INT 10
33471: PPUSH
33472: LD_INT 0
33474: PPUSH
33475: CALL_OW 50
// result := result ^ un ;
33479: LD_ADDR_VAR 0 7
33483: PUSH
33484: LD_VAR 0 7
33488: PUSH
33489: LD_VAR 0 14
33493: ADD
33494: ST_TO_ADDR
// end ;
33495: GO 33373
33497: POP
33498: POP
// end ; end ;
33499: LD_VAR 0 7
33503: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33504: LD_INT 0
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
// result := false ;
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 0
33529: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33530: LD_VAR 0 1
33534: NOT
33535: PUSH
33536: LD_VAR 0 1
33540: PPUSH
33541: CALL_OW 266
33545: PUSH
33546: LD_INT 32
33548: PUSH
33549: LD_INT 33
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: IN
33556: NOT
33557: OR
33558: IFFALSE 33562
// exit ;
33560: GO 34671
// nat := GetNation ( tower ) ;
33562: LD_ADDR_VAR 0 12
33566: PUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL_OW 248
33576: ST_TO_ADDR
// side := GetSide ( tower ) ;
33577: LD_ADDR_VAR 0 16
33581: PUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 255
33591: ST_TO_ADDR
// x := GetX ( tower ) ;
33592: LD_ADDR_VAR 0 10
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 250
33606: ST_TO_ADDR
// y := GetY ( tower ) ;
33607: LD_ADDR_VAR 0 11
33611: PUSH
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 251
33621: ST_TO_ADDR
// if not x or not y then
33622: LD_VAR 0 10
33626: NOT
33627: PUSH
33628: LD_VAR 0 11
33632: NOT
33633: OR
33634: IFFALSE 33638
// exit ;
33636: GO 34671
// weapon := 0 ;
33638: LD_ADDR_VAR 0 18
33642: PUSH
33643: LD_INT 0
33645: ST_TO_ADDR
// fac_list := [ ] ;
33646: LD_ADDR_VAR 0 17
33650: PUSH
33651: EMPTY
33652: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33653: LD_ADDR_VAR 0 6
33657: PUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 274
33667: PPUSH
33668: LD_VAR 0 2
33672: PPUSH
33673: LD_INT 0
33675: PPUSH
33676: CALL 31242 0 3
33680: PPUSH
33681: LD_INT 30
33683: PUSH
33684: LD_INT 3
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PPUSH
33691: CALL_OW 72
33695: ST_TO_ADDR
// if not factories then
33696: LD_VAR 0 6
33700: NOT
33701: IFFALSE 33705
// exit ;
33703: GO 34671
// for i in factories do
33705: LD_ADDR_VAR 0 8
33709: PUSH
33710: LD_VAR 0 6
33714: PUSH
33715: FOR_IN
33716: IFFALSE 33741
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33718: LD_ADDR_VAR 0 17
33722: PUSH
33723: LD_VAR 0 17
33727: PUSH
33728: LD_VAR 0 8
33732: PPUSH
33733: CALL_OW 478
33737: UNION
33738: ST_TO_ADDR
33739: GO 33715
33741: POP
33742: POP
// if not fac_list then
33743: LD_VAR 0 17
33747: NOT
33748: IFFALSE 33752
// exit ;
33750: GO 34671
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33752: LD_ADDR_VAR 0 5
33756: PUSH
33757: LD_INT 4
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: LD_INT 9
33765: PUSH
33766: LD_INT 10
33768: PUSH
33769: LD_INT 6
33771: PUSH
33772: LD_INT 7
33774: PUSH
33775: LD_INT 11
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 27
33789: PUSH
33790: LD_INT 28
33792: PUSH
33793: LD_INT 26
33795: PUSH
33796: LD_INT 30
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 43
33807: PUSH
33808: LD_INT 44
33810: PUSH
33811: LD_INT 46
33813: PUSH
33814: LD_INT 45
33816: PUSH
33817: LD_INT 47
33819: PUSH
33820: LD_INT 49
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PUSH
33836: LD_VAR 0 12
33840: ARRAY
33841: ST_TO_ADDR
// list := list isect fac_list ;
33842: LD_ADDR_VAR 0 5
33846: PUSH
33847: LD_VAR 0 5
33851: PUSH
33852: LD_VAR 0 17
33856: ISECT
33857: ST_TO_ADDR
// if not list then
33858: LD_VAR 0 5
33862: NOT
33863: IFFALSE 33867
// exit ;
33865: GO 34671
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33867: LD_VAR 0 12
33871: PUSH
33872: LD_INT 3
33874: EQUAL
33875: PUSH
33876: LD_INT 49
33878: PUSH
33879: LD_VAR 0 5
33883: IN
33884: AND
33885: PUSH
33886: LD_INT 31
33888: PPUSH
33889: LD_VAR 0 16
33893: PPUSH
33894: CALL_OW 321
33898: PUSH
33899: LD_INT 2
33901: EQUAL
33902: AND
33903: IFFALSE 33963
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33905: LD_INT 22
33907: PUSH
33908: LD_VAR 0 16
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 35
33919: PUSH
33920: LD_INT 49
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 91
33929: PUSH
33930: LD_VAR 0 1
33934: PUSH
33935: LD_INT 10
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: PPUSH
33948: CALL_OW 69
33952: NOT
33953: IFFALSE 33963
// weapon := ru_time_lapser ;
33955: LD_ADDR_VAR 0 18
33959: PUSH
33960: LD_INT 49
33962: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33963: LD_VAR 0 12
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: IN
33978: PUSH
33979: LD_INT 11
33981: PUSH
33982: LD_VAR 0 5
33986: IN
33987: PUSH
33988: LD_INT 30
33990: PUSH
33991: LD_VAR 0 5
33995: IN
33996: OR
33997: AND
33998: PUSH
33999: LD_INT 6
34001: PPUSH
34002: LD_VAR 0 16
34006: PPUSH
34007: CALL_OW 321
34011: PUSH
34012: LD_INT 2
34014: EQUAL
34015: AND
34016: IFFALSE 34181
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34018: LD_INT 22
34020: PUSH
34021: LD_VAR 0 16
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 35
34035: PUSH
34036: LD_INT 11
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 35
34045: PUSH
34046: LD_INT 30
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 91
34060: PUSH
34061: LD_VAR 0 1
34065: PUSH
34066: LD_INT 18
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: PPUSH
34079: CALL_OW 69
34083: NOT
34084: PUSH
34085: LD_INT 22
34087: PUSH
34088: LD_VAR 0 16
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 30
34102: PUSH
34103: LD_INT 32
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 30
34112: PUSH
34113: LD_INT 33
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 91
34127: PUSH
34128: LD_VAR 0 1
34132: PUSH
34133: LD_INT 12
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: PPUSH
34149: CALL_OW 69
34153: PUSH
34154: LD_INT 2
34156: GREATER
34157: AND
34158: IFFALSE 34181
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34160: LD_ADDR_VAR 0 18
34164: PUSH
34165: LD_INT 11
34167: PUSH
34168: LD_INT 30
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_VAR 0 12
34179: ARRAY
34180: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34181: LD_VAR 0 18
34185: NOT
34186: PUSH
34187: LD_INT 40
34189: PPUSH
34190: LD_VAR 0 16
34194: PPUSH
34195: CALL_OW 321
34199: PUSH
34200: LD_INT 2
34202: EQUAL
34203: AND
34204: PUSH
34205: LD_INT 7
34207: PUSH
34208: LD_VAR 0 5
34212: IN
34213: PUSH
34214: LD_INT 28
34216: PUSH
34217: LD_VAR 0 5
34221: IN
34222: OR
34223: PUSH
34224: LD_INT 45
34226: PUSH
34227: LD_VAR 0 5
34231: IN
34232: OR
34233: AND
34234: IFFALSE 34488
// begin hex := GetHexInfo ( x , y ) ;
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_VAR 0 10
34245: PPUSH
34246: LD_VAR 0 11
34250: PPUSH
34251: CALL_OW 546
34255: ST_TO_ADDR
// if hex [ 1 ] then
34256: LD_VAR 0 4
34260: PUSH
34261: LD_INT 1
34263: ARRAY
34264: IFFALSE 34268
// exit ;
34266: GO 34671
// height := hex [ 2 ] ;
34268: LD_ADDR_VAR 0 15
34272: PUSH
34273: LD_VAR 0 4
34277: PUSH
34278: LD_INT 2
34280: ARRAY
34281: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34282: LD_ADDR_VAR 0 14
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: LD_INT 5
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// for i in tmp do
34305: LD_ADDR_VAR 0 8
34309: PUSH
34310: LD_VAR 0 14
34314: PUSH
34315: FOR_IN
34316: IFFALSE 34486
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34318: LD_ADDR_VAR 0 9
34322: PUSH
34323: LD_VAR 0 10
34327: PPUSH
34328: LD_VAR 0 8
34332: PPUSH
34333: LD_INT 5
34335: PPUSH
34336: CALL_OW 272
34340: PUSH
34341: LD_VAR 0 11
34345: PPUSH
34346: LD_VAR 0 8
34350: PPUSH
34351: LD_INT 5
34353: PPUSH
34354: CALL_OW 273
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34363: LD_VAR 0 9
34367: PUSH
34368: LD_INT 1
34370: ARRAY
34371: PPUSH
34372: LD_VAR 0 9
34376: PUSH
34377: LD_INT 2
34379: ARRAY
34380: PPUSH
34381: CALL_OW 488
34385: IFFALSE 34484
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34387: LD_ADDR_VAR 0 4
34391: PUSH
34392: LD_VAR 0 9
34396: PUSH
34397: LD_INT 1
34399: ARRAY
34400: PPUSH
34401: LD_VAR 0 9
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: PPUSH
34410: CALL_OW 546
34414: ST_TO_ADDR
// if hex [ 1 ] then
34415: LD_VAR 0 4
34419: PUSH
34420: LD_INT 1
34422: ARRAY
34423: IFFALSE 34427
// continue ;
34425: GO 34315
// h := hex [ 2 ] ;
34427: LD_ADDR_VAR 0 13
34431: PUSH
34432: LD_VAR 0 4
34436: PUSH
34437: LD_INT 2
34439: ARRAY
34440: ST_TO_ADDR
// if h + 7 < height then
34441: LD_VAR 0 13
34445: PUSH
34446: LD_INT 7
34448: PLUS
34449: PUSH
34450: LD_VAR 0 15
34454: LESS
34455: IFFALSE 34484
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34457: LD_ADDR_VAR 0 18
34461: PUSH
34462: LD_INT 7
34464: PUSH
34465: LD_INT 28
34467: PUSH
34468: LD_INT 45
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: PUSH
34476: LD_VAR 0 12
34480: ARRAY
34481: ST_TO_ADDR
// break ;
34482: GO 34486
// end ; end ; end ;
34484: GO 34315
34486: POP
34487: POP
// end ; if not weapon then
34488: LD_VAR 0 18
34492: NOT
34493: IFFALSE 34553
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34495: LD_ADDR_VAR 0 5
34499: PUSH
34500: LD_VAR 0 5
34504: PUSH
34505: LD_INT 11
34507: PUSH
34508: LD_INT 30
34510: PUSH
34511: LD_INT 49
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: DIFF
34519: ST_TO_ADDR
// if not list then
34520: LD_VAR 0 5
34524: NOT
34525: IFFALSE 34529
// exit ;
34527: GO 34671
// weapon := list [ rand ( 1 , list ) ] ;
34529: LD_ADDR_VAR 0 18
34533: PUSH
34534: LD_VAR 0 5
34538: PUSH
34539: LD_INT 1
34541: PPUSH
34542: LD_VAR 0 5
34546: PPUSH
34547: CALL_OW 12
34551: ARRAY
34552: ST_TO_ADDR
// end ; if weapon then
34553: LD_VAR 0 18
34557: IFFALSE 34671
// begin tmp := CostOfWeapon ( weapon ) ;
34559: LD_ADDR_VAR 0 14
34563: PUSH
34564: LD_VAR 0 18
34568: PPUSH
34569: CALL_OW 451
34573: ST_TO_ADDR
// j := GetBase ( tower ) ;
34574: LD_ADDR_VAR 0 9
34578: PUSH
34579: LD_VAR 0 1
34583: PPUSH
34584: CALL_OW 274
34588: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34589: LD_VAR 0 9
34593: PPUSH
34594: LD_INT 1
34596: PPUSH
34597: CALL_OW 275
34601: PUSH
34602: LD_VAR 0 14
34606: PUSH
34607: LD_INT 1
34609: ARRAY
34610: GREATEREQUAL
34611: PUSH
34612: LD_VAR 0 9
34616: PPUSH
34617: LD_INT 2
34619: PPUSH
34620: CALL_OW 275
34624: PUSH
34625: LD_VAR 0 14
34629: PUSH
34630: LD_INT 2
34632: ARRAY
34633: GREATEREQUAL
34634: AND
34635: PUSH
34636: LD_VAR 0 9
34640: PPUSH
34641: LD_INT 3
34643: PPUSH
34644: CALL_OW 275
34648: PUSH
34649: LD_VAR 0 14
34653: PUSH
34654: LD_INT 3
34656: ARRAY
34657: GREATEREQUAL
34658: AND
34659: IFFALSE 34671
// result := weapon ;
34661: LD_ADDR_VAR 0 3
34665: PUSH
34666: LD_VAR 0 18
34670: ST_TO_ADDR
// end ; end ;
34671: LD_VAR 0 3
34675: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
// result := true ;
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 1
34687: ST_TO_ADDR
// if array1 = array2 then
34688: LD_VAR 0 1
34692: PUSH
34693: LD_VAR 0 2
34697: EQUAL
34698: IFFALSE 34758
// begin for i = 1 to array1 do
34700: LD_ADDR_VAR 0 4
34704: PUSH
34705: DOUBLE
34706: LD_INT 1
34708: DEC
34709: ST_TO_ADDR
34710: LD_VAR 0 1
34714: PUSH
34715: FOR_TO
34716: IFFALSE 34754
// if array1 [ i ] <> array2 [ i ] then
34718: LD_VAR 0 1
34722: PUSH
34723: LD_VAR 0 4
34727: ARRAY
34728: PUSH
34729: LD_VAR 0 2
34733: PUSH
34734: LD_VAR 0 4
34738: ARRAY
34739: NONEQUAL
34740: IFFALSE 34752
// begin result := false ;
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: LD_INT 0
34749: ST_TO_ADDR
// break ;
34750: GO 34754
// end ;
34752: GO 34715
34754: POP
34755: POP
// end else
34756: GO 34766
// result := false ;
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_INT 0
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 3
34770: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34771: LD_INT 0
34773: PPUSH
34774: PPUSH
// if not array1 or not array2 then
34775: LD_VAR 0 1
34779: NOT
34780: PUSH
34781: LD_VAR 0 2
34785: NOT
34786: OR
34787: IFFALSE 34791
// exit ;
34789: GO 34855
// result := true ;
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 1
34798: ST_TO_ADDR
// for i = 1 to array1 do
34799: LD_ADDR_VAR 0 4
34803: PUSH
34804: DOUBLE
34805: LD_INT 1
34807: DEC
34808: ST_TO_ADDR
34809: LD_VAR 0 1
34813: PUSH
34814: FOR_TO
34815: IFFALSE 34853
// if array1 [ i ] <> array2 [ i ] then
34817: LD_VAR 0 1
34821: PUSH
34822: LD_VAR 0 4
34826: ARRAY
34827: PUSH
34828: LD_VAR 0 2
34832: PUSH
34833: LD_VAR 0 4
34837: ARRAY
34838: NONEQUAL
34839: IFFALSE 34851
// begin result := false ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_INT 0
34848: ST_TO_ADDR
// break ;
34849: GO 34853
// end ;
34851: GO 34814
34853: POP
34854: POP
// end ;
34855: LD_VAR 0 3
34859: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34860: LD_INT 0
34862: PPUSH
34863: PPUSH
34864: PPUSH
// pom := GetBase ( fac ) ;
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 274
34879: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34880: LD_ADDR_VAR 0 4
34884: PUSH
34885: LD_VAR 0 2
34889: PUSH
34890: LD_INT 1
34892: ARRAY
34893: PPUSH
34894: LD_VAR 0 2
34898: PUSH
34899: LD_INT 2
34901: ARRAY
34902: PPUSH
34903: LD_VAR 0 2
34907: PUSH
34908: LD_INT 3
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 2
34916: PUSH
34917: LD_INT 4
34919: ARRAY
34920: PPUSH
34921: CALL_OW 449
34925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_VAR 0 5
34935: PPUSH
34936: LD_INT 1
34938: PPUSH
34939: CALL_OW 275
34943: PUSH
34944: LD_VAR 0 4
34948: PUSH
34949: LD_INT 1
34951: ARRAY
34952: GREATEREQUAL
34953: PUSH
34954: LD_VAR 0 5
34958: PPUSH
34959: LD_INT 2
34961: PPUSH
34962: CALL_OW 275
34966: PUSH
34967: LD_VAR 0 4
34971: PUSH
34972: LD_INT 2
34974: ARRAY
34975: GREATEREQUAL
34976: AND
34977: PUSH
34978: LD_VAR 0 5
34982: PPUSH
34983: LD_INT 3
34985: PPUSH
34986: CALL_OW 275
34990: PUSH
34991: LD_VAR 0 4
34995: PUSH
34996: LD_INT 3
34998: ARRAY
34999: GREATEREQUAL
35000: AND
35001: ST_TO_ADDR
// end ;
35002: LD_VAR 0 3
35006: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35007: LD_INT 0
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
// pom := GetBase ( building ) ;
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL_OW 274
35027: ST_TO_ADDR
// if not pom then
35028: LD_VAR 0 3
35032: NOT
35033: IFFALSE 35037
// exit ;
35035: GO 35207
// btype := GetBType ( building ) ;
35037: LD_ADDR_VAR 0 5
35041: PUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 266
35051: ST_TO_ADDR
// if btype = b_armoury then
35052: LD_VAR 0 5
35056: PUSH
35057: LD_INT 4
35059: EQUAL
35060: IFFALSE 35070
// btype := b_barracks ;
35062: LD_ADDR_VAR 0 5
35066: PUSH
35067: LD_INT 5
35069: ST_TO_ADDR
// if btype = b_depot then
35070: LD_VAR 0 5
35074: PUSH
35075: LD_INT 0
35077: EQUAL
35078: IFFALSE 35088
// btype := b_warehouse ;
35080: LD_ADDR_VAR 0 5
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// if btype = b_workshop then
35088: LD_VAR 0 5
35092: PUSH
35093: LD_INT 2
35095: EQUAL
35096: IFFALSE 35106
// btype := b_factory ;
35098: LD_ADDR_VAR 0 5
35102: PUSH
35103: LD_INT 3
35105: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35106: LD_ADDR_VAR 0 4
35110: PUSH
35111: LD_VAR 0 5
35115: PPUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 248
35125: PPUSH
35126: CALL_OW 450
35130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35131: LD_ADDR_VAR 0 2
35135: PUSH
35136: LD_VAR 0 3
35140: PPUSH
35141: LD_INT 1
35143: PPUSH
35144: CALL_OW 275
35148: PUSH
35149: LD_VAR 0 4
35153: PUSH
35154: LD_INT 1
35156: ARRAY
35157: GREATEREQUAL
35158: PUSH
35159: LD_VAR 0 3
35163: PPUSH
35164: LD_INT 2
35166: PPUSH
35167: CALL_OW 275
35171: PUSH
35172: LD_VAR 0 4
35176: PUSH
35177: LD_INT 2
35179: ARRAY
35180: GREATEREQUAL
35181: AND
35182: PUSH
35183: LD_VAR 0 3
35187: PPUSH
35188: LD_INT 3
35190: PPUSH
35191: CALL_OW 275
35195: PUSH
35196: LD_VAR 0 4
35200: PUSH
35201: LD_INT 3
35203: ARRAY
35204: GREATEREQUAL
35205: AND
35206: ST_TO_ADDR
// end ;
35207: LD_VAR 0 2
35211: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
35216: PPUSH
// pom := GetBase ( building ) ;
35217: LD_ADDR_VAR 0 4
35221: PUSH
35222: LD_VAR 0 1
35226: PPUSH
35227: CALL_OW 274
35231: ST_TO_ADDR
// if not pom then
35232: LD_VAR 0 4
35236: NOT
35237: IFFALSE 35241
// exit ;
35239: GO 35342
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35241: LD_ADDR_VAR 0 5
35245: PUSH
35246: LD_VAR 0 2
35250: PPUSH
35251: LD_VAR 0 1
35255: PPUSH
35256: CALL_OW 248
35260: PPUSH
35261: CALL_OW 450
35265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_VAR 0 4
35275: PPUSH
35276: LD_INT 1
35278: PPUSH
35279: CALL_OW 275
35283: PUSH
35284: LD_VAR 0 5
35288: PUSH
35289: LD_INT 1
35291: ARRAY
35292: GREATEREQUAL
35293: PUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: LD_INT 2
35301: PPUSH
35302: CALL_OW 275
35306: PUSH
35307: LD_VAR 0 5
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: GREATEREQUAL
35316: AND
35317: PUSH
35318: LD_VAR 0 4
35322: PPUSH
35323: LD_INT 3
35325: PPUSH
35326: CALL_OW 275
35330: PUSH
35331: LD_VAR 0 5
35335: PUSH
35336: LD_INT 3
35338: ARRAY
35339: GREATEREQUAL
35340: AND
35341: ST_TO_ADDR
// end ;
35342: LD_VAR 0 3
35346: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
// result := false ;
35360: LD_ADDR_VAR 0 8
35364: PUSH
35365: LD_INT 0
35367: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35368: LD_VAR 0 5
35372: NOT
35373: PUSH
35374: LD_VAR 0 1
35378: NOT
35379: OR
35380: PUSH
35381: LD_VAR 0 2
35385: NOT
35386: OR
35387: PUSH
35388: LD_VAR 0 3
35392: NOT
35393: OR
35394: IFFALSE 35398
// exit ;
35396: GO 36212
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35398: LD_ADDR_VAR 0 14
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: LD_VAR 0 2
35412: PPUSH
35413: LD_VAR 0 3
35417: PPUSH
35418: LD_VAR 0 4
35422: PPUSH
35423: LD_VAR 0 5
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: CALL_OW 248
35436: PPUSH
35437: LD_INT 0
35439: PPUSH
35440: CALL 37465 0 6
35444: ST_TO_ADDR
// if not hexes then
35445: LD_VAR 0 14
35449: NOT
35450: IFFALSE 35454
// exit ;
35452: GO 36212
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35454: LD_ADDR_VAR 0 17
35458: PUSH
35459: LD_VAR 0 5
35463: PPUSH
35464: LD_INT 22
35466: PUSH
35467: LD_VAR 0 13
35471: PPUSH
35472: CALL_OW 255
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 30
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 30
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PPUSH
35513: CALL_OW 72
35517: ST_TO_ADDR
// for i = 1 to hexes do
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: DOUBLE
35524: LD_INT 1
35526: DEC
35527: ST_TO_ADDR
35528: LD_VAR 0 14
35532: PUSH
35533: FOR_TO
35534: IFFALSE 36210
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35536: LD_ADDR_VAR 0 13
35540: PUSH
35541: LD_VAR 0 14
35545: PUSH
35546: LD_VAR 0 9
35550: ARRAY
35551: PUSH
35552: LD_INT 1
35554: ARRAY
35555: PPUSH
35556: LD_VAR 0 14
35560: PUSH
35561: LD_VAR 0 9
35565: ARRAY
35566: PUSH
35567: LD_INT 2
35569: ARRAY
35570: PPUSH
35571: CALL_OW 428
35575: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35576: LD_VAR 0 14
35580: PUSH
35581: LD_VAR 0 9
35585: ARRAY
35586: PUSH
35587: LD_INT 1
35589: ARRAY
35590: PPUSH
35591: LD_VAR 0 14
35595: PUSH
35596: LD_VAR 0 9
35600: ARRAY
35601: PUSH
35602: LD_INT 2
35604: ARRAY
35605: PPUSH
35606: CALL_OW 351
35610: PUSH
35611: LD_VAR 0 14
35615: PUSH
35616: LD_VAR 0 9
35620: ARRAY
35621: PUSH
35622: LD_INT 1
35624: ARRAY
35625: PPUSH
35626: LD_VAR 0 14
35630: PUSH
35631: LD_VAR 0 9
35635: ARRAY
35636: PUSH
35637: LD_INT 2
35639: ARRAY
35640: PPUSH
35641: CALL_OW 488
35645: NOT
35646: OR
35647: PUSH
35648: LD_VAR 0 13
35652: PPUSH
35653: CALL_OW 247
35657: PUSH
35658: LD_INT 3
35660: EQUAL
35661: OR
35662: IFFALSE 35668
// exit ;
35664: POP
35665: POP
35666: GO 36212
// if not tmp then
35668: LD_VAR 0 13
35672: NOT
35673: IFFALSE 35677
// continue ;
35675: GO 35533
// result := true ;
35677: LD_ADDR_VAR 0 8
35681: PUSH
35682: LD_INT 1
35684: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35685: LD_VAR 0 6
35689: PUSH
35690: LD_VAR 0 13
35694: PPUSH
35695: CALL_OW 247
35699: PUSH
35700: LD_INT 2
35702: EQUAL
35703: AND
35704: PUSH
35705: LD_VAR 0 13
35709: PPUSH
35710: CALL_OW 263
35714: PUSH
35715: LD_INT 1
35717: EQUAL
35718: AND
35719: IFFALSE 35883
// begin if IsDrivenBy ( tmp ) then
35721: LD_VAR 0 13
35725: PPUSH
35726: CALL_OW 311
35730: IFFALSE 35734
// continue ;
35732: GO 35533
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35734: LD_VAR 0 6
35738: PPUSH
35739: LD_INT 3
35741: PUSH
35742: LD_INT 60
35744: PUSH
35745: EMPTY
35746: LIST
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: LD_INT 55
35757: PUSH
35758: EMPTY
35759: LIST
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PPUSH
35769: CALL_OW 72
35773: IFFALSE 35881
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35775: LD_ADDR_VAR 0 18
35779: PUSH
35780: LD_VAR 0 6
35784: PPUSH
35785: LD_INT 3
35787: PUSH
35788: LD_INT 60
35790: PUSH
35791: EMPTY
35792: LIST
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: LD_INT 55
35803: PUSH
35804: EMPTY
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PPUSH
35815: CALL_OW 72
35819: PUSH
35820: LD_INT 1
35822: ARRAY
35823: ST_TO_ADDR
// if IsInUnit ( driver ) then
35824: LD_VAR 0 18
35828: PPUSH
35829: CALL_OW 310
35833: IFFALSE 35844
// ComExit ( driver ) ;
35835: LD_VAR 0 18
35839: PPUSH
35840: CALL 61244 0 1
// AddComEnterUnit ( driver , tmp ) ;
35844: LD_VAR 0 18
35848: PPUSH
35849: LD_VAR 0 13
35853: PPUSH
35854: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35858: LD_VAR 0 18
35862: PPUSH
35863: LD_VAR 0 7
35867: PPUSH
35868: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35872: LD_VAR 0 18
35876: PPUSH
35877: CALL_OW 181
// end ; continue ;
35881: GO 35533
// end ; if not cleaners or not tmp in cleaners then
35883: LD_VAR 0 6
35887: NOT
35888: PUSH
35889: LD_VAR 0 13
35893: PUSH
35894: LD_VAR 0 6
35898: IN
35899: NOT
35900: OR
35901: IFFALSE 36208
// begin if dep then
35903: LD_VAR 0 17
35907: IFFALSE 36043
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35909: LD_ADDR_VAR 0 16
35913: PUSH
35914: LD_VAR 0 17
35918: PUSH
35919: LD_INT 1
35921: ARRAY
35922: PPUSH
35923: CALL_OW 250
35927: PPUSH
35928: LD_VAR 0 17
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PPUSH
35937: CALL_OW 254
35941: PPUSH
35942: LD_INT 5
35944: PPUSH
35945: CALL_OW 272
35949: PUSH
35950: LD_VAR 0 17
35954: PUSH
35955: LD_INT 1
35957: ARRAY
35958: PPUSH
35959: CALL_OW 251
35963: PPUSH
35964: LD_VAR 0 17
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: PPUSH
35973: CALL_OW 254
35977: PPUSH
35978: LD_INT 5
35980: PPUSH
35981: CALL_OW 273
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35990: LD_VAR 0 16
35994: PUSH
35995: LD_INT 1
35997: ARRAY
35998: PPUSH
35999: LD_VAR 0 16
36003: PUSH
36004: LD_INT 2
36006: ARRAY
36007: PPUSH
36008: CALL_OW 488
36012: IFFALSE 36043
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36014: LD_VAR 0 13
36018: PPUSH
36019: LD_VAR 0 16
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PPUSH
36028: LD_VAR 0 16
36032: PUSH
36033: LD_INT 2
36035: ARRAY
36036: PPUSH
36037: CALL_OW 111
// continue ;
36041: GO 35533
// end ; end ; r := GetDir ( tmp ) ;
36043: LD_ADDR_VAR 0 15
36047: PUSH
36048: LD_VAR 0 13
36052: PPUSH
36053: CALL_OW 254
36057: ST_TO_ADDR
// if r = 5 then
36058: LD_VAR 0 15
36062: PUSH
36063: LD_INT 5
36065: EQUAL
36066: IFFALSE 36076
// r := 0 ;
36068: LD_ADDR_VAR 0 15
36072: PUSH
36073: LD_INT 0
36075: ST_TO_ADDR
// for j = r to 5 do
36076: LD_ADDR_VAR 0 10
36080: PUSH
36081: DOUBLE
36082: LD_VAR 0 15
36086: DEC
36087: ST_TO_ADDR
36088: LD_INT 5
36090: PUSH
36091: FOR_TO
36092: IFFALSE 36206
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36094: LD_ADDR_VAR 0 11
36098: PUSH
36099: LD_VAR 0 13
36103: PPUSH
36104: CALL_OW 250
36108: PPUSH
36109: LD_VAR 0 10
36113: PPUSH
36114: LD_INT 2
36116: PPUSH
36117: CALL_OW 272
36121: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36122: LD_ADDR_VAR 0 12
36126: PUSH
36127: LD_VAR 0 13
36131: PPUSH
36132: CALL_OW 251
36136: PPUSH
36137: LD_VAR 0 10
36141: PPUSH
36142: LD_INT 2
36144: PPUSH
36145: CALL_OW 273
36149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36150: LD_VAR 0 11
36154: PPUSH
36155: LD_VAR 0 12
36159: PPUSH
36160: CALL_OW 488
36164: PUSH
36165: LD_VAR 0 11
36169: PPUSH
36170: LD_VAR 0 12
36174: PPUSH
36175: CALL_OW 428
36179: NOT
36180: AND
36181: IFFALSE 36204
// begin ComMoveXY ( tmp , _x , _y ) ;
36183: LD_VAR 0 13
36187: PPUSH
36188: LD_VAR 0 11
36192: PPUSH
36193: LD_VAR 0 12
36197: PPUSH
36198: CALL_OW 111
// break ;
36202: GO 36206
// end ; end ;
36204: GO 36091
36206: POP
36207: POP
// end ; end ;
36208: GO 35533
36210: POP
36211: POP
// end ;
36212: LD_VAR 0 8
36216: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36217: LD_INT 0
36219: PPUSH
// result := true ;
36220: LD_ADDR_VAR 0 3
36224: PUSH
36225: LD_INT 1
36227: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36228: LD_VAR 0 2
36232: PUSH
36233: LD_INT 24
36235: DOUBLE
36236: EQUAL
36237: IFTRUE 36247
36239: LD_INT 33
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36272
36247: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36248: LD_ADDR_VAR 0 3
36252: PUSH
36253: LD_INT 32
36255: PPUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: CALL_OW 321
36265: PUSH
36266: LD_INT 2
36268: EQUAL
36269: ST_TO_ADDR
36270: GO 36588
36272: LD_INT 20
36274: DOUBLE
36275: EQUAL
36276: IFTRUE 36280
36278: GO 36305
36280: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36281: LD_ADDR_VAR 0 3
36285: PUSH
36286: LD_INT 6
36288: PPUSH
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 321
36298: PUSH
36299: LD_INT 2
36301: EQUAL
36302: ST_TO_ADDR
36303: GO 36588
36305: LD_INT 22
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36319
36311: LD_INT 36
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36319
36317: GO 36344
36319: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_INT 15
36327: PPUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 321
36337: PUSH
36338: LD_INT 2
36340: EQUAL
36341: ST_TO_ADDR
36342: GO 36588
36344: LD_INT 30
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36352
36350: GO 36377
36352: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: LD_INT 20
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 321
36370: PUSH
36371: LD_INT 2
36373: EQUAL
36374: ST_TO_ADDR
36375: GO 36588
36377: LD_INT 28
36379: DOUBLE
36380: EQUAL
36381: IFTRUE 36391
36383: LD_INT 21
36385: DOUBLE
36386: EQUAL
36387: IFTRUE 36391
36389: GO 36416
36391: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36392: LD_ADDR_VAR 0 3
36396: PUSH
36397: LD_INT 21
36399: PPUSH
36400: LD_VAR 0 1
36404: PPUSH
36405: CALL_OW 321
36409: PUSH
36410: LD_INT 2
36412: EQUAL
36413: ST_TO_ADDR
36414: GO 36588
36416: LD_INT 16
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36449
36424: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36425: LD_ADDR_VAR 0 3
36429: PUSH
36430: LD_INT 84
36432: PPUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 321
36442: PUSH
36443: LD_INT 2
36445: EQUAL
36446: ST_TO_ADDR
36447: GO 36588
36449: LD_INT 19
36451: DOUBLE
36452: EQUAL
36453: IFTRUE 36463
36455: LD_INT 23
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36488
36463: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_INT 83
36471: PPUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 321
36481: PUSH
36482: LD_INT 2
36484: EQUAL
36485: ST_TO_ADDR
36486: GO 36588
36488: LD_INT 17
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36496
36494: GO 36521
36496: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36497: LD_ADDR_VAR 0 3
36501: PUSH
36502: LD_INT 39
36504: PPUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL_OW 321
36514: PUSH
36515: LD_INT 2
36517: EQUAL
36518: ST_TO_ADDR
36519: GO 36588
36521: LD_INT 18
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36554
36529: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 40
36537: PPUSH
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 321
36547: PUSH
36548: LD_INT 2
36550: EQUAL
36551: ST_TO_ADDR
36552: GO 36588
36554: LD_INT 27
36556: DOUBLE
36557: EQUAL
36558: IFTRUE 36562
36560: GO 36587
36562: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_INT 35
36570: PPUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 321
36580: PUSH
36581: LD_INT 2
36583: EQUAL
36584: ST_TO_ADDR
36585: GO 36588
36587: POP
// end ;
36588: LD_VAR 0 3
36592: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36593: LD_INT 0
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
// result := false ;
36606: LD_ADDR_VAR 0 6
36610: PUSH
36611: LD_INT 0
36613: ST_TO_ADDR
// if btype = b_depot then
36614: LD_VAR 0 2
36618: PUSH
36619: LD_INT 0
36621: EQUAL
36622: IFFALSE 36634
// begin result := true ;
36624: LD_ADDR_VAR 0 6
36628: PUSH
36629: LD_INT 1
36631: ST_TO_ADDR
// exit ;
36632: GO 37460
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36634: LD_VAR 0 1
36638: NOT
36639: PUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: CALL_OW 266
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: IN
36660: NOT
36661: OR
36662: PUSH
36663: LD_VAR 0 2
36667: NOT
36668: OR
36669: PUSH
36670: LD_VAR 0 5
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 3
36686: PUSH
36687: LD_INT 4
36689: PUSH
36690: LD_INT 5
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: IN
36701: NOT
36702: OR
36703: PUSH
36704: LD_VAR 0 3
36708: PPUSH
36709: LD_VAR 0 4
36713: PPUSH
36714: CALL_OW 488
36718: NOT
36719: OR
36720: IFFALSE 36724
// exit ;
36722: GO 37460
// side := GetSide ( depot ) ;
36724: LD_ADDR_VAR 0 9
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 255
36738: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36739: LD_VAR 0 9
36743: PPUSH
36744: LD_VAR 0 2
36748: PPUSH
36749: CALL 36217 0 2
36753: NOT
36754: IFFALSE 36758
// exit ;
36756: GO 37460
// pom := GetBase ( depot ) ;
36758: LD_ADDR_VAR 0 10
36762: PUSH
36763: LD_VAR 0 1
36767: PPUSH
36768: CALL_OW 274
36772: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36773: LD_ADDR_VAR 0 11
36777: PUSH
36778: LD_VAR 0 2
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 248
36792: PPUSH
36793: CALL_OW 450
36797: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36798: LD_VAR 0 10
36802: PPUSH
36803: LD_INT 1
36805: PPUSH
36806: CALL_OW 275
36810: PUSH
36811: LD_VAR 0 11
36815: PUSH
36816: LD_INT 1
36818: ARRAY
36819: GREATEREQUAL
36820: PUSH
36821: LD_VAR 0 10
36825: PPUSH
36826: LD_INT 2
36828: PPUSH
36829: CALL_OW 275
36833: PUSH
36834: LD_VAR 0 11
36838: PUSH
36839: LD_INT 2
36841: ARRAY
36842: GREATEREQUAL
36843: AND
36844: PUSH
36845: LD_VAR 0 10
36849: PPUSH
36850: LD_INT 3
36852: PPUSH
36853: CALL_OW 275
36857: PUSH
36858: LD_VAR 0 11
36862: PUSH
36863: LD_INT 3
36865: ARRAY
36866: GREATEREQUAL
36867: AND
36868: NOT
36869: IFFALSE 36873
// exit ;
36871: GO 37460
// if GetBType ( depot ) = b_depot then
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 266
36882: PUSH
36883: LD_INT 0
36885: EQUAL
36886: IFFALSE 36898
// dist := 28 else
36888: LD_ADDR_VAR 0 14
36892: PUSH
36893: LD_INT 28
36895: ST_TO_ADDR
36896: GO 36906
// dist := 36 ;
36898: LD_ADDR_VAR 0 14
36902: PUSH
36903: LD_INT 36
36905: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36906: LD_VAR 0 1
36910: PPUSH
36911: LD_VAR 0 3
36915: PPUSH
36916: LD_VAR 0 4
36920: PPUSH
36921: CALL_OW 297
36925: PUSH
36926: LD_VAR 0 14
36930: GREATER
36931: IFFALSE 36935
// exit ;
36933: GO 37460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36935: LD_ADDR_VAR 0 12
36939: PUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: LD_VAR 0 3
36949: PPUSH
36950: LD_VAR 0 4
36954: PPUSH
36955: LD_VAR 0 5
36959: PPUSH
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 248
36969: PPUSH
36970: LD_INT 0
36972: PPUSH
36973: CALL 37465 0 6
36977: ST_TO_ADDR
// if not hexes then
36978: LD_VAR 0 12
36982: NOT
36983: IFFALSE 36987
// exit ;
36985: GO 37460
// hex := GetHexInfo ( x , y ) ;
36987: LD_ADDR_VAR 0 15
36991: PUSH
36992: LD_VAR 0 3
36996: PPUSH
36997: LD_VAR 0 4
37001: PPUSH
37002: CALL_OW 546
37006: ST_TO_ADDR
// if hex [ 1 ] then
37007: LD_VAR 0 15
37011: PUSH
37012: LD_INT 1
37014: ARRAY
37015: IFFALSE 37019
// exit ;
37017: GO 37460
// height := hex [ 2 ] ;
37019: LD_ADDR_VAR 0 13
37023: PUSH
37024: LD_VAR 0 15
37028: PUSH
37029: LD_INT 2
37031: ARRAY
37032: ST_TO_ADDR
// for i = 1 to hexes do
37033: LD_ADDR_VAR 0 7
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_VAR 0 12
37047: PUSH
37048: FOR_TO
37049: IFFALSE 37379
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37051: LD_VAR 0 12
37055: PUSH
37056: LD_VAR 0 7
37060: ARRAY
37061: PUSH
37062: LD_INT 1
37064: ARRAY
37065: PPUSH
37066: LD_VAR 0 12
37070: PUSH
37071: LD_VAR 0 7
37075: ARRAY
37076: PUSH
37077: LD_INT 2
37079: ARRAY
37080: PPUSH
37081: CALL_OW 488
37085: NOT
37086: PUSH
37087: LD_VAR 0 12
37091: PUSH
37092: LD_VAR 0 7
37096: ARRAY
37097: PUSH
37098: LD_INT 1
37100: ARRAY
37101: PPUSH
37102: LD_VAR 0 12
37106: PUSH
37107: LD_VAR 0 7
37111: ARRAY
37112: PUSH
37113: LD_INT 2
37115: ARRAY
37116: PPUSH
37117: CALL_OW 428
37121: PUSH
37122: LD_INT 0
37124: GREATER
37125: OR
37126: PUSH
37127: LD_VAR 0 12
37131: PUSH
37132: LD_VAR 0 7
37136: ARRAY
37137: PUSH
37138: LD_INT 1
37140: ARRAY
37141: PPUSH
37142: LD_VAR 0 12
37146: PUSH
37147: LD_VAR 0 7
37151: ARRAY
37152: PUSH
37153: LD_INT 2
37155: ARRAY
37156: PPUSH
37157: CALL_OW 351
37161: OR
37162: IFFALSE 37168
// exit ;
37164: POP
37165: POP
37166: GO 37460
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37168: LD_ADDR_VAR 0 8
37172: PUSH
37173: LD_VAR 0 12
37177: PUSH
37178: LD_VAR 0 7
37182: ARRAY
37183: PUSH
37184: LD_INT 1
37186: ARRAY
37187: PPUSH
37188: LD_VAR 0 12
37192: PUSH
37193: LD_VAR 0 7
37197: ARRAY
37198: PUSH
37199: LD_INT 2
37201: ARRAY
37202: PPUSH
37203: CALL_OW 546
37207: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37208: LD_VAR 0 8
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: PUSH
37217: LD_VAR 0 8
37221: PUSH
37222: LD_INT 2
37224: ARRAY
37225: PUSH
37226: LD_VAR 0 13
37230: PUSH
37231: LD_INT 2
37233: PLUS
37234: GREATER
37235: OR
37236: PUSH
37237: LD_VAR 0 8
37241: PUSH
37242: LD_INT 2
37244: ARRAY
37245: PUSH
37246: LD_VAR 0 13
37250: PUSH
37251: LD_INT 2
37253: MINUS
37254: LESS
37255: OR
37256: PUSH
37257: LD_VAR 0 8
37261: PUSH
37262: LD_INT 3
37264: ARRAY
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 8
37271: PUSH
37272: LD_INT 9
37274: PUSH
37275: LD_INT 10
37277: PUSH
37278: LD_INT 11
37280: PUSH
37281: LD_INT 12
37283: PUSH
37284: LD_INT 13
37286: PUSH
37287: LD_INT 16
37289: PUSH
37290: LD_INT 17
37292: PUSH
37293: LD_INT 18
37295: PUSH
37296: LD_INT 19
37298: PUSH
37299: LD_INT 20
37301: PUSH
37302: LD_INT 21
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: IN
37320: NOT
37321: OR
37322: PUSH
37323: LD_VAR 0 8
37327: PUSH
37328: LD_INT 5
37330: ARRAY
37331: NOT
37332: OR
37333: PUSH
37334: LD_VAR 0 8
37338: PUSH
37339: LD_INT 6
37341: ARRAY
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 7
37351: PUSH
37352: LD_INT 9
37354: PUSH
37355: LD_INT 10
37357: PUSH
37358: LD_INT 11
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: IN
37369: NOT
37370: OR
37371: IFFALSE 37377
// exit ;
37373: POP
37374: POP
37375: GO 37460
// end ;
37377: GO 37048
37379: POP
37380: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37381: LD_VAR 0 9
37385: PPUSH
37386: LD_VAR 0 3
37390: PPUSH
37391: LD_VAR 0 4
37395: PPUSH
37396: LD_INT 20
37398: PPUSH
37399: CALL 29383 0 4
37403: PUSH
37404: LD_INT 4
37406: ARRAY
37407: IFFALSE 37411
// exit ;
37409: GO 37460
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37411: LD_VAR 0 2
37415: PUSH
37416: LD_INT 29
37418: PUSH
37419: LD_INT 30
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: IN
37426: PUSH
37427: LD_VAR 0 3
37431: PPUSH
37432: LD_VAR 0 4
37436: PPUSH
37437: LD_VAR 0 9
37441: PPUSH
37442: CALL_OW 440
37446: NOT
37447: AND
37448: IFFALSE 37452
// exit ;
37450: GO 37460
// result := true ;
37452: LD_ADDR_VAR 0 6
37456: PUSH
37457: LD_INT 1
37459: ST_TO_ADDR
// end ;
37460: LD_VAR 0 6
37464: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37465: LD_INT 0
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
// result = [ ] ;
37525: LD_ADDR_VAR 0 7
37529: PUSH
37530: EMPTY
37531: ST_TO_ADDR
// temp_list = [ ] ;
37532: LD_ADDR_VAR 0 9
37536: PUSH
37537: EMPTY
37538: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37539: LD_VAR 0 4
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: LD_INT 4
37558: PUSH
37559: LD_INT 5
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: IN
37570: NOT
37571: PUSH
37572: LD_VAR 0 1
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: IN
37587: PUSH
37588: LD_VAR 0 5
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: IN
37607: NOT
37608: AND
37609: OR
37610: IFFALSE 37614
// exit ;
37612: GO 56005
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37614: LD_VAR 0 1
37618: PUSH
37619: LD_INT 6
37621: PUSH
37622: LD_INT 7
37624: PUSH
37625: LD_INT 8
37627: PUSH
37628: LD_INT 13
37630: PUSH
37631: LD_INT 12
37633: PUSH
37634: LD_INT 15
37636: PUSH
37637: LD_INT 11
37639: PUSH
37640: LD_INT 14
37642: PUSH
37643: LD_INT 10
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: IN
37657: IFFALSE 37667
// btype = b_lab ;
37659: LD_ADDR_VAR 0 1
37663: PUSH
37664: LD_INT 6
37666: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37667: LD_VAR 0 6
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: IN
37686: NOT
37687: PUSH
37688: LD_VAR 0 1
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 3
37704: PUSH
37705: LD_INT 6
37707: PUSH
37708: LD_INT 36
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: LD_INT 31
37719: PUSH
37720: LD_INT 32
37722: PUSH
37723: LD_INT 33
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: IN
37739: NOT
37740: PUSH
37741: LD_VAR 0 6
37745: PUSH
37746: LD_INT 1
37748: EQUAL
37749: AND
37750: OR
37751: PUSH
37752: LD_VAR 0 1
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: IN
37767: NOT
37768: PUSH
37769: LD_VAR 0 6
37773: PUSH
37774: LD_INT 2
37776: EQUAL
37777: AND
37778: OR
37779: IFFALSE 37789
// mode = 0 ;
37781: LD_ADDR_VAR 0 6
37785: PUSH
37786: LD_INT 0
37788: ST_TO_ADDR
// case mode of 0 :
37789: LD_VAR 0 6
37793: PUSH
37794: LD_INT 0
37796: DOUBLE
37797: EQUAL
37798: IFTRUE 37802
37800: GO 49255
37802: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37803: LD_ADDR_VAR 0 11
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37996: LD_ADDR_VAR 0 12
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 3
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38192: LD_ADDR_VAR 0 13
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 3
38363: NEG
38364: PUSH
38365: LD_INT 3
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38391: LD_ADDR_VAR 0 14
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38587: LD_ADDR_VAR 0 15
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: NEG
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38780: LD_ADDR_VAR 0 16
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 3
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38973: LD_ADDR_VAR 0 17
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39203: LD_ADDR_VAR 0 18
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39433: LD_ADDR_VAR 0 19
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39663: LD_ADDR_VAR 0 20
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39893: LD_ADDR_VAR 0 21
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40123: LD_ADDR_VAR 0 22
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40353: LD_ADDR_VAR 0 23
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40633: LD_ADDR_VAR 0 24
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40909: LD_ADDR_VAR 0 25
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 3
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41183: LD_ADDR_VAR 0 26
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 3
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41459: LD_ADDR_VAR 0 27
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 3
41692: NEG
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41739: LD_ADDR_VAR 0 28
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42021: LD_ADDR_VAR 0 29
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: NEG
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 3
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42300: LD_ADDR_VAR 0 30
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 3
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42578: LD_ADDR_VAR 0 31
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42856: LD_ADDR_VAR 0 32
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43134: LD_ADDR_VAR 0 33
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43413: LD_ADDR_VAR 0 34
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 3
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: LD_INT 3
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43693: LD_ADDR_VAR 0 35
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43805: LD_ADDR_VAR 0 36
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43917: LD_ADDR_VAR 0 37
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44029: LD_ADDR_VAR 0 38
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44141: LD_ADDR_VAR 0 39
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44253: LD_ADDR_VAR 0 40
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44365: LD_ADDR_VAR 0 41
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 3
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 3
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 3
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44715: LD_ADDR_VAR 0 42
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 3
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 3
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 3
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45065: LD_ADDR_VAR 0 43
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 3
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 3
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45413: LD_ADDR_VAR 0 44
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 3
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45763: LD_ADDR_VAR 0 45
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 3
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 3
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 3
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46113: LD_ADDR_VAR 0 46
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 3
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46461: LD_ADDR_VAR 0 47
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46612: LD_ADDR_VAR 0 48
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46759: LD_ADDR_VAR 0 49
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46903: LD_ADDR_VAR 0 50
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47047: LD_ADDR_VAR 0 51
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47194: LD_ADDR_VAR 0 52
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47345: LD_ADDR_VAR 0 53
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47575: LD_ADDR_VAR 0 54
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: LD_INT 2
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47805: LD_ADDR_VAR 0 55
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48035: LD_ADDR_VAR 0 56
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48265: LD_ADDR_VAR 0 57
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48495: LD_ADDR_VAR 0 58
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48725: LD_ADDR_VAR 0 59
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48813: LD_ADDR_VAR 0 60
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48901: LD_ADDR_VAR 0 61
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48989: LD_ADDR_VAR 0 62
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49077: LD_ADDR_VAR 0 63
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49165: LD_ADDR_VAR 0 64
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: ST_TO_ADDR
// end ; 1 :
49253: GO 55150
49255: LD_INT 1
49257: DOUBLE
49258: EQUAL
49259: IFTRUE 49263
49261: GO 51886
49263: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49264: LD_ADDR_VAR 0 11
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49308: LD_ADDR_VAR 0 12
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49349: LD_ADDR_VAR 0 13
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 3
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49389: LD_ADDR_VAR 0 14
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49430: LD_ADDR_VAR 0 15
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49474: LD_ADDR_VAR 0 16
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49520: LD_ADDR_VAR 0 17
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49564: LD_ADDR_VAR 0 18
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49605: LD_ADDR_VAR 0 19
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49645: LD_ADDR_VAR 0 20
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49686: LD_ADDR_VAR 0 21
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49730: LD_ADDR_VAR 0 22
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49776: LD_ADDR_VAR 0 23
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49820: LD_ADDR_VAR 0 24
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 4
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49861: LD_ADDR_VAR 0 25
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 4
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49901: LD_ADDR_VAR 0 26
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49942: LD_ADDR_VAR 0 27
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 4
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49986: LD_ADDR_VAR 0 28
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 4
50017: NEG
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50032: LD_ADDR_VAR 0 29
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 4
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 5
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 5
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 4
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 6
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 6
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 5
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50187: LD_ADDR_VAR 0 30
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 4
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 5
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 5
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 6
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 6
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50330: LD_ADDR_VAR 0 31
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 4
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 4
50377: PUSH
50378: LD_INT 4
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 4
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 5
50397: PUSH
50398: LD_INT 4
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 5
50407: PUSH
50408: LD_INT 5
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 4
50417: PUSH
50418: LD_INT 5
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 6
50427: PUSH
50428: LD_INT 5
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 6
50437: PUSH
50438: LD_INT 6
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 5
50447: PUSH
50448: LD_INT 6
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50469: LD_ADDR_VAR 0 32
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 4
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 5
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 5
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 4
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 6
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 6
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 5
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50612: LD_ADDR_VAR 0 33
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 4
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 4
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 5
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 5
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 5
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 6
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 6
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50767: LD_ADDR_VAR 0 34
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 3
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 4
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: NEG
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: LD_INT 4
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 4
50846: NEG
50847: PUSH
50848: LD_INT 5
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 5
50858: NEG
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 5
50870: NEG
50871: PUSH
50872: LD_INT 5
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 5
50882: NEG
50883: PUSH
50884: LD_INT 6
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 6
50894: NEG
50895: PUSH
50896: LD_INT 5
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 6
50906: NEG
50907: PUSH
50908: LD_INT 6
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50930: LD_ADDR_VAR 0 41
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50974: LD_ADDR_VAR 0 42
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51015: LD_ADDR_VAR 0 43
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51055: LD_ADDR_VAR 0 44
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51096: LD_ADDR_VAR 0 45
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51140: LD_ADDR_VAR 0 46
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51186: LD_ADDR_VAR 0 47
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51219: LD_ADDR_VAR 0 48
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51250: LD_ADDR_VAR 0 49
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51279: LD_ADDR_VAR 0 50
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51308: LD_ADDR_VAR 0 51
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51339: LD_ADDR_VAR 0 52
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51372: LD_ADDR_VAR 0 53
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51416: LD_ADDR_VAR 0 54
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51457: LD_ADDR_VAR 0 55
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51497: LD_ADDR_VAR 0 56
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51538: LD_ADDR_VAR 0 57
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51582: LD_ADDR_VAR 0 58
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51628: LD_ADDR_VAR 0 59
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51672: LD_ADDR_VAR 0 60
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51713: LD_ADDR_VAR 0 61
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51753: LD_ADDR_VAR 0 62
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51794: LD_ADDR_VAR 0 63
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51838: LD_ADDR_VAR 0 64
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// end ; 2 :
51884: GO 55150
51886: LD_INT 2
51888: DOUBLE
51889: EQUAL
51890: IFTRUE 51894
51892: GO 55149
51894: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51895: LD_ADDR_VAR 0 29
51899: PUSH
51900: LD_INT 4
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 5
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 5
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 5
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 3
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 4
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: LD_INT 4
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 4
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 5
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 5
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 5
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 4
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: NEG
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: LD_INT 5
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 4
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 5
52340: NEG
52341: PUSH
52342: LD_INT 4
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 5
52352: NEG
52353: PUSH
52354: LD_INT 5
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 5
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52433: LD_ADDR_VAR 0 30
52437: PUSH
52438: LD_INT 4
52440: PUSH
52441: LD_INT 4
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 4
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 5
52460: PUSH
52461: LD_INT 4
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 4
52480: PUSH
52481: LD_INT 5
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: LD_INT 4
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 5
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 5
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 4
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 4
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 4
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 4
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 3
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 4
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 5
52679: NEG
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 5
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: LD_INT 4
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 4
52785: NEG
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: LD_INT 4
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 4
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 4
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 5
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 4
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 4
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 5
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 5
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52980: LD_ADDR_VAR 0 31
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 4
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 5
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 5
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 4
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 5
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 3
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 4
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 4
53159: NEG
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 4
53182: NEG
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 4
53194: NEG
53195: PUSH
53196: LD_INT 5
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 4
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 5
53242: NEG
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 5
53254: NEG
53255: PUSH
53256: LD_INT 5
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: LD_INT 5
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 5
53278: NEG
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 4
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 3
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 4
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 4
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 4
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 5
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 5
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 4
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53530: LD_ADDR_VAR 0 32
53534: PUSH
53535: LD_INT 4
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 5
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 5
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 5
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: LD_INT 4
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 4
53699: NEG
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 4
53711: NEG
53712: PUSH
53713: LD_INT 4
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 4
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 4
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 5
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 5
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 4
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 4
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 5
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 5
53972: PUSH
53973: LD_INT 5
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: LD_INT 5
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 5
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 5
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54077: LD_ADDR_VAR 0 33
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: LD_INT 4
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: LD_INT 5
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 4
54132: NEG
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 5
54144: NEG
54145: PUSH
54146: LD_INT 4
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 5
54156: NEG
54157: PUSH
54158: LD_INT 5
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 5
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: NEG
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 3
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 4
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 4
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 4
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 5
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 4
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 4
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: LD_INT 4
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: LD_INT 4
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 5
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 5
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54615: LD_ADDR_VAR 0 34
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 5
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 4
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 5
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 5
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 4
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: LD_INT 4
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 5
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 5
54847: PUSH
54848: LD_INT 5
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 4
54857: PUSH
54858: LD_INT 5
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: LD_INT 5
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 4
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 4
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 5
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 5
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 5
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// end ; end ;
55147: GO 55150
55149: POP
// case btype of b_depot , b_warehouse :
55150: LD_VAR 0 1
55154: PUSH
55155: LD_INT 0
55157: DOUBLE
55158: EQUAL
55159: IFTRUE 55169
55161: LD_INT 1
55163: DOUBLE
55164: EQUAL
55165: IFTRUE 55169
55167: GO 55370
55169: POP
// case nation of nation_american :
55170: LD_VAR 0 5
55174: PUSH
55175: LD_INT 1
55177: DOUBLE
55178: EQUAL
55179: IFTRUE 55183
55181: GO 55239
55183: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55184: LD_ADDR_VAR 0 9
55188: PUSH
55189: LD_VAR 0 11
55193: PUSH
55194: LD_VAR 0 12
55198: PUSH
55199: LD_VAR 0 13
55203: PUSH
55204: LD_VAR 0 14
55208: PUSH
55209: LD_VAR 0 15
55213: PUSH
55214: LD_VAR 0 16
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: PUSH
55227: LD_VAR 0 4
55231: PUSH
55232: LD_INT 1
55234: PLUS
55235: ARRAY
55236: ST_TO_ADDR
55237: GO 55368
55239: LD_INT 2
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 55303
55247: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55248: LD_ADDR_VAR 0 9
55252: PUSH
55253: LD_VAR 0 17
55257: PUSH
55258: LD_VAR 0 18
55262: PUSH
55263: LD_VAR 0 19
55267: PUSH
55268: LD_VAR 0 20
55272: PUSH
55273: LD_VAR 0 21
55277: PUSH
55278: LD_VAR 0 22
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: LD_VAR 0 4
55295: PUSH
55296: LD_INT 1
55298: PLUS
55299: ARRAY
55300: ST_TO_ADDR
55301: GO 55368
55303: LD_INT 3
55305: DOUBLE
55306: EQUAL
55307: IFTRUE 55311
55309: GO 55367
55311: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55312: LD_ADDR_VAR 0 9
55316: PUSH
55317: LD_VAR 0 23
55321: PUSH
55322: LD_VAR 0 24
55326: PUSH
55327: LD_VAR 0 25
55331: PUSH
55332: LD_VAR 0 26
55336: PUSH
55337: LD_VAR 0 27
55341: PUSH
55342: LD_VAR 0 28
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: PUSH
55355: LD_VAR 0 4
55359: PUSH
55360: LD_INT 1
55362: PLUS
55363: ARRAY
55364: ST_TO_ADDR
55365: GO 55368
55367: POP
55368: GO 55923
55370: LD_INT 2
55372: DOUBLE
55373: EQUAL
55374: IFTRUE 55384
55376: LD_INT 3
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55384
55382: GO 55440
55384: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55385: LD_ADDR_VAR 0 9
55389: PUSH
55390: LD_VAR 0 29
55394: PUSH
55395: LD_VAR 0 30
55399: PUSH
55400: LD_VAR 0 31
55404: PUSH
55405: LD_VAR 0 32
55409: PUSH
55410: LD_VAR 0 33
55414: PUSH
55415: LD_VAR 0 34
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: PUSH
55428: LD_VAR 0 4
55432: PUSH
55433: LD_INT 1
55435: PLUS
55436: ARRAY
55437: ST_TO_ADDR
55438: GO 55923
55440: LD_INT 16
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55502
55446: LD_INT 17
55448: DOUBLE
55449: EQUAL
55450: IFTRUE 55502
55452: LD_INT 18
55454: DOUBLE
55455: EQUAL
55456: IFTRUE 55502
55458: LD_INT 19
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55502
55464: LD_INT 22
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55502
55470: LD_INT 20
55472: DOUBLE
55473: EQUAL
55474: IFTRUE 55502
55476: LD_INT 21
55478: DOUBLE
55479: EQUAL
55480: IFTRUE 55502
55482: LD_INT 23
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55502
55488: LD_INT 24
55490: DOUBLE
55491: EQUAL
55492: IFTRUE 55502
55494: LD_INT 25
55496: DOUBLE
55497: EQUAL
55498: IFTRUE 55502
55500: GO 55558
55502: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55503: LD_ADDR_VAR 0 9
55507: PUSH
55508: LD_VAR 0 35
55512: PUSH
55513: LD_VAR 0 36
55517: PUSH
55518: LD_VAR 0 37
55522: PUSH
55523: LD_VAR 0 38
55527: PUSH
55528: LD_VAR 0 39
55532: PUSH
55533: LD_VAR 0 40
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: PUSH
55546: LD_VAR 0 4
55550: PUSH
55551: LD_INT 1
55553: PLUS
55554: ARRAY
55555: ST_TO_ADDR
55556: GO 55923
55558: LD_INT 6
55560: DOUBLE
55561: EQUAL
55562: IFTRUE 55614
55564: LD_INT 7
55566: DOUBLE
55567: EQUAL
55568: IFTRUE 55614
55570: LD_INT 8
55572: DOUBLE
55573: EQUAL
55574: IFTRUE 55614
55576: LD_INT 13
55578: DOUBLE
55579: EQUAL
55580: IFTRUE 55614
55582: LD_INT 12
55584: DOUBLE
55585: EQUAL
55586: IFTRUE 55614
55588: LD_INT 15
55590: DOUBLE
55591: EQUAL
55592: IFTRUE 55614
55594: LD_INT 11
55596: DOUBLE
55597: EQUAL
55598: IFTRUE 55614
55600: LD_INT 14
55602: DOUBLE
55603: EQUAL
55604: IFTRUE 55614
55606: LD_INT 10
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55614
55612: GO 55670
55614: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55615: LD_ADDR_VAR 0 9
55619: PUSH
55620: LD_VAR 0 41
55624: PUSH
55625: LD_VAR 0 42
55629: PUSH
55630: LD_VAR 0 43
55634: PUSH
55635: LD_VAR 0 44
55639: PUSH
55640: LD_VAR 0 45
55644: PUSH
55645: LD_VAR 0 46
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: PUSH
55658: LD_VAR 0 4
55662: PUSH
55663: LD_INT 1
55665: PLUS
55666: ARRAY
55667: ST_TO_ADDR
55668: GO 55923
55670: LD_INT 36
55672: DOUBLE
55673: EQUAL
55674: IFTRUE 55678
55676: GO 55734
55678: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55679: LD_ADDR_VAR 0 9
55683: PUSH
55684: LD_VAR 0 47
55688: PUSH
55689: LD_VAR 0 48
55693: PUSH
55694: LD_VAR 0 49
55698: PUSH
55699: LD_VAR 0 50
55703: PUSH
55704: LD_VAR 0 51
55708: PUSH
55709: LD_VAR 0 52
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: PUSH
55722: LD_VAR 0 4
55726: PUSH
55727: LD_INT 1
55729: PLUS
55730: ARRAY
55731: ST_TO_ADDR
55732: GO 55923
55734: LD_INT 4
55736: DOUBLE
55737: EQUAL
55738: IFTRUE 55760
55740: LD_INT 5
55742: DOUBLE
55743: EQUAL
55744: IFTRUE 55760
55746: LD_INT 34
55748: DOUBLE
55749: EQUAL
55750: IFTRUE 55760
55752: LD_INT 37
55754: DOUBLE
55755: EQUAL
55756: IFTRUE 55760
55758: GO 55816
55760: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55761: LD_ADDR_VAR 0 9
55765: PUSH
55766: LD_VAR 0 53
55770: PUSH
55771: LD_VAR 0 54
55775: PUSH
55776: LD_VAR 0 55
55780: PUSH
55781: LD_VAR 0 56
55785: PUSH
55786: LD_VAR 0 57
55790: PUSH
55791: LD_VAR 0 58
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: PUSH
55804: LD_VAR 0 4
55808: PUSH
55809: LD_INT 1
55811: PLUS
55812: ARRAY
55813: ST_TO_ADDR
55814: GO 55923
55816: LD_INT 31
55818: DOUBLE
55819: EQUAL
55820: IFTRUE 55866
55822: LD_INT 32
55824: DOUBLE
55825: EQUAL
55826: IFTRUE 55866
55828: LD_INT 33
55830: DOUBLE
55831: EQUAL
55832: IFTRUE 55866
55834: LD_INT 27
55836: DOUBLE
55837: EQUAL
55838: IFTRUE 55866
55840: LD_INT 26
55842: DOUBLE
55843: EQUAL
55844: IFTRUE 55866
55846: LD_INT 28
55848: DOUBLE
55849: EQUAL
55850: IFTRUE 55866
55852: LD_INT 29
55854: DOUBLE
55855: EQUAL
55856: IFTRUE 55866
55858: LD_INT 30
55860: DOUBLE
55861: EQUAL
55862: IFTRUE 55866
55864: GO 55922
55866: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55867: LD_ADDR_VAR 0 9
55871: PUSH
55872: LD_VAR 0 59
55876: PUSH
55877: LD_VAR 0 60
55881: PUSH
55882: LD_VAR 0 61
55886: PUSH
55887: LD_VAR 0 62
55891: PUSH
55892: LD_VAR 0 63
55896: PUSH
55897: LD_VAR 0 64
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: PUSH
55910: LD_VAR 0 4
55914: PUSH
55915: LD_INT 1
55917: PLUS
55918: ARRAY
55919: ST_TO_ADDR
55920: GO 55923
55922: POP
// temp_list2 = [ ] ;
55923: LD_ADDR_VAR 0 10
55927: PUSH
55928: EMPTY
55929: ST_TO_ADDR
// for i in temp_list do
55930: LD_ADDR_VAR 0 8
55934: PUSH
55935: LD_VAR 0 9
55939: PUSH
55940: FOR_IN
55941: IFFALSE 55993
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55943: LD_ADDR_VAR 0 10
55947: PUSH
55948: LD_VAR 0 10
55952: PUSH
55953: LD_VAR 0 8
55957: PUSH
55958: LD_INT 1
55960: ARRAY
55961: PUSH
55962: LD_VAR 0 2
55966: PLUS
55967: PUSH
55968: LD_VAR 0 8
55972: PUSH
55973: LD_INT 2
55975: ARRAY
55976: PUSH
55977: LD_VAR 0 3
55981: PLUS
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: ADD
55990: ST_TO_ADDR
55991: GO 55940
55993: POP
55994: POP
// result = temp_list2 ;
55995: LD_ADDR_VAR 0 7
55999: PUSH
56000: LD_VAR 0 10
56004: ST_TO_ADDR
// end ;
56005: LD_VAR 0 7
56009: RET
// export function EnemyInRange ( unit , dist ) ; begin
56010: LD_INT 0
56012: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56013: LD_ADDR_VAR 0 3
56017: PUSH
56018: LD_VAR 0 1
56022: PPUSH
56023: CALL_OW 255
56027: PPUSH
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 250
56037: PPUSH
56038: LD_VAR 0 1
56042: PPUSH
56043: CALL_OW 251
56047: PPUSH
56048: LD_VAR 0 2
56052: PPUSH
56053: CALL 29383 0 4
56057: PUSH
56058: LD_INT 4
56060: ARRAY
56061: ST_TO_ADDR
// end ;
56062: LD_VAR 0 3
56066: RET
// export function PlayerSeeMe ( unit ) ; begin
56067: LD_INT 0
56069: PPUSH
// result := See ( your_side , unit ) ;
56070: LD_ADDR_VAR 0 2
56074: PUSH
56075: LD_OWVAR 2
56079: PPUSH
56080: LD_VAR 0 1
56084: PPUSH
56085: CALL_OW 292
56089: ST_TO_ADDR
// end ;
56090: LD_VAR 0 2
56094: RET
// export function ReverseDir ( unit ) ; begin
56095: LD_INT 0
56097: PPUSH
// if not unit then
56098: LD_VAR 0 1
56102: NOT
56103: IFFALSE 56107
// exit ;
56105: GO 56130
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56107: LD_ADDR_VAR 0 2
56111: PUSH
56112: LD_VAR 0 1
56116: PPUSH
56117: CALL_OW 254
56121: PUSH
56122: LD_INT 3
56124: PLUS
56125: PUSH
56126: LD_INT 6
56128: MOD
56129: ST_TO_ADDR
// end ;
56130: LD_VAR 0 2
56134: RET
// export function ReverseArray ( array ) ; var i ; begin
56135: LD_INT 0
56137: PPUSH
56138: PPUSH
// if not array then
56139: LD_VAR 0 1
56143: NOT
56144: IFFALSE 56148
// exit ;
56146: GO 56203
// result := [ ] ;
56148: LD_ADDR_VAR 0 2
56152: PUSH
56153: EMPTY
56154: ST_TO_ADDR
// for i := array downto 1 do
56155: LD_ADDR_VAR 0 3
56159: PUSH
56160: DOUBLE
56161: LD_VAR 0 1
56165: INC
56166: ST_TO_ADDR
56167: LD_INT 1
56169: PUSH
56170: FOR_DOWNTO
56171: IFFALSE 56201
// result := Join ( result , array [ i ] ) ;
56173: LD_ADDR_VAR 0 2
56177: PUSH
56178: LD_VAR 0 2
56182: PPUSH
56183: LD_VAR 0 1
56187: PUSH
56188: LD_VAR 0 3
56192: ARRAY
56193: PPUSH
56194: CALL 60846 0 2
56198: ST_TO_ADDR
56199: GO 56170
56201: POP
56202: POP
// end ;
56203: LD_VAR 0 2
56207: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56208: LD_INT 0
56210: PPUSH
56211: PPUSH
56212: PPUSH
56213: PPUSH
56214: PPUSH
56215: PPUSH
// if not unit or not hexes then
56216: LD_VAR 0 1
56220: NOT
56221: PUSH
56222: LD_VAR 0 2
56226: NOT
56227: OR
56228: IFFALSE 56232
// exit ;
56230: GO 56355
// dist := 9999 ;
56232: LD_ADDR_VAR 0 5
56236: PUSH
56237: LD_INT 9999
56239: ST_TO_ADDR
// for i = 1 to hexes do
56240: LD_ADDR_VAR 0 4
56244: PUSH
56245: DOUBLE
56246: LD_INT 1
56248: DEC
56249: ST_TO_ADDR
56250: LD_VAR 0 2
56254: PUSH
56255: FOR_TO
56256: IFFALSE 56343
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56258: LD_ADDR_VAR 0 6
56262: PUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_VAR 0 4
56277: ARRAY
56278: PUSH
56279: LD_INT 1
56281: ARRAY
56282: PPUSH
56283: LD_VAR 0 2
56287: PUSH
56288: LD_VAR 0 4
56292: ARRAY
56293: PUSH
56294: LD_INT 2
56296: ARRAY
56297: PPUSH
56298: CALL_OW 297
56302: ST_TO_ADDR
// if tdist < dist then
56303: LD_VAR 0 6
56307: PUSH
56308: LD_VAR 0 5
56312: LESS
56313: IFFALSE 56341
// begin hex := hexes [ i ] ;
56315: LD_ADDR_VAR 0 8
56319: PUSH
56320: LD_VAR 0 2
56324: PUSH
56325: LD_VAR 0 4
56329: ARRAY
56330: ST_TO_ADDR
// dist := tdist ;
56331: LD_ADDR_VAR 0 5
56335: PUSH
56336: LD_VAR 0 6
56340: ST_TO_ADDR
// end ; end ;
56341: GO 56255
56343: POP
56344: POP
// result := hex ;
56345: LD_ADDR_VAR 0 3
56349: PUSH
56350: LD_VAR 0 8
56354: ST_TO_ADDR
// end ;
56355: LD_VAR 0 3
56359: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56360: LD_INT 0
56362: PPUSH
56363: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56364: LD_VAR 0 1
56368: NOT
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 21
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 23
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PPUSH
56399: CALL_OW 69
56403: IN
56404: NOT
56405: OR
56406: IFFALSE 56410
// exit ;
56408: GO 56457
// for i = 1 to 3 do
56410: LD_ADDR_VAR 0 3
56414: PUSH
56415: DOUBLE
56416: LD_INT 1
56418: DEC
56419: ST_TO_ADDR
56420: LD_INT 3
56422: PUSH
56423: FOR_TO
56424: IFFALSE 56455
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56426: LD_VAR 0 1
56430: PPUSH
56431: CALL_OW 250
56435: PPUSH
56436: LD_VAR 0 1
56440: PPUSH
56441: CALL_OW 251
56445: PPUSH
56446: LD_INT 1
56448: PPUSH
56449: CALL_OW 453
56453: GO 56423
56455: POP
56456: POP
// end ;
56457: LD_VAR 0 2
56461: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56462: LD_INT 0
56464: PPUSH
56465: PPUSH
56466: PPUSH
56467: PPUSH
56468: PPUSH
56469: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56470: LD_VAR 0 1
56474: NOT
56475: PUSH
56476: LD_VAR 0 2
56480: NOT
56481: OR
56482: PUSH
56483: LD_VAR 0 1
56487: PPUSH
56488: CALL_OW 314
56492: OR
56493: IFFALSE 56497
// exit ;
56495: GO 56964
// if GetLives ( i ) < 250 then
56497: LD_VAR 0 4
56501: PPUSH
56502: CALL_OW 256
56506: PUSH
56507: LD_INT 250
56509: LESS
56510: IFFALSE 56523
// begin ComAutodestruct ( i ) ;
56512: LD_VAR 0 4
56516: PPUSH
56517: CALL 56360 0 1
// exit ;
56521: GO 56964
// end ; x := GetX ( enemy_unit ) ;
56523: LD_ADDR_VAR 0 7
56527: PUSH
56528: LD_VAR 0 2
56532: PPUSH
56533: CALL_OW 250
56537: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56538: LD_ADDR_VAR 0 8
56542: PUSH
56543: LD_VAR 0 2
56547: PPUSH
56548: CALL_OW 251
56552: ST_TO_ADDR
// if not x or not y then
56553: LD_VAR 0 7
56557: NOT
56558: PUSH
56559: LD_VAR 0 8
56563: NOT
56564: OR
56565: IFFALSE 56569
// exit ;
56567: GO 56964
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56569: LD_ADDR_VAR 0 6
56573: PUSH
56574: LD_VAR 0 7
56578: PPUSH
56579: LD_INT 0
56581: PPUSH
56582: LD_INT 4
56584: PPUSH
56585: CALL_OW 272
56589: PUSH
56590: LD_VAR 0 8
56594: PPUSH
56595: LD_INT 0
56597: PPUSH
56598: LD_INT 4
56600: PPUSH
56601: CALL_OW 273
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_VAR 0 7
56614: PPUSH
56615: LD_INT 1
56617: PPUSH
56618: LD_INT 4
56620: PPUSH
56621: CALL_OW 272
56625: PUSH
56626: LD_VAR 0 8
56630: PPUSH
56631: LD_INT 1
56633: PPUSH
56634: LD_INT 4
56636: PPUSH
56637: CALL_OW 273
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_VAR 0 7
56650: PPUSH
56651: LD_INT 2
56653: PPUSH
56654: LD_INT 4
56656: PPUSH
56657: CALL_OW 272
56661: PUSH
56662: LD_VAR 0 8
56666: PPUSH
56667: LD_INT 2
56669: PPUSH
56670: LD_INT 4
56672: PPUSH
56673: CALL_OW 273
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_VAR 0 7
56686: PPUSH
56687: LD_INT 3
56689: PPUSH
56690: LD_INT 4
56692: PPUSH
56693: CALL_OW 272
56697: PUSH
56698: LD_VAR 0 8
56702: PPUSH
56703: LD_INT 3
56705: PPUSH
56706: LD_INT 4
56708: PPUSH
56709: CALL_OW 273
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_VAR 0 7
56722: PPUSH
56723: LD_INT 4
56725: PPUSH
56726: LD_INT 4
56728: PPUSH
56729: CALL_OW 272
56733: PUSH
56734: LD_VAR 0 8
56738: PPUSH
56739: LD_INT 4
56741: PPUSH
56742: LD_INT 4
56744: PPUSH
56745: CALL_OW 273
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_VAR 0 7
56758: PPUSH
56759: LD_INT 5
56761: PPUSH
56762: LD_INT 4
56764: PPUSH
56765: CALL_OW 272
56769: PUSH
56770: LD_VAR 0 8
56774: PPUSH
56775: LD_INT 5
56777: PPUSH
56778: LD_INT 4
56780: PPUSH
56781: CALL_OW 273
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// for i = tmp downto 1 do
56798: LD_ADDR_VAR 0 4
56802: PUSH
56803: DOUBLE
56804: LD_VAR 0 6
56808: INC
56809: ST_TO_ADDR
56810: LD_INT 1
56812: PUSH
56813: FOR_DOWNTO
56814: IFFALSE 56915
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56816: LD_VAR 0 6
56820: PUSH
56821: LD_VAR 0 4
56825: ARRAY
56826: PUSH
56827: LD_INT 1
56829: ARRAY
56830: PPUSH
56831: LD_VAR 0 6
56835: PUSH
56836: LD_VAR 0 4
56840: ARRAY
56841: PUSH
56842: LD_INT 2
56844: ARRAY
56845: PPUSH
56846: CALL_OW 488
56850: NOT
56851: PUSH
56852: LD_VAR 0 6
56856: PUSH
56857: LD_VAR 0 4
56861: ARRAY
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: PPUSH
56867: LD_VAR 0 6
56871: PUSH
56872: LD_VAR 0 4
56876: ARRAY
56877: PUSH
56878: LD_INT 2
56880: ARRAY
56881: PPUSH
56882: CALL_OW 428
56886: PUSH
56887: LD_INT 0
56889: NONEQUAL
56890: OR
56891: IFFALSE 56913
// tmp := Delete ( tmp , i ) ;
56893: LD_ADDR_VAR 0 6
56897: PUSH
56898: LD_VAR 0 6
56902: PPUSH
56903: LD_VAR 0 4
56907: PPUSH
56908: CALL_OW 3
56912: ST_TO_ADDR
56913: GO 56813
56915: POP
56916: POP
// j := GetClosestHex ( unit , tmp ) ;
56917: LD_ADDR_VAR 0 5
56921: PUSH
56922: LD_VAR 0 1
56926: PPUSH
56927: LD_VAR 0 6
56931: PPUSH
56932: CALL 56208 0 2
56936: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56937: LD_VAR 0 1
56941: PPUSH
56942: LD_VAR 0 5
56946: PUSH
56947: LD_INT 1
56949: ARRAY
56950: PPUSH
56951: LD_VAR 0 5
56955: PUSH
56956: LD_INT 2
56958: ARRAY
56959: PPUSH
56960: CALL_OW 111
// end ;
56964: LD_VAR 0 3
56968: RET
// export function PrepareApemanSoldier ( ) ; begin
56969: LD_INT 0
56971: PPUSH
// uc_nation := 0 ;
56972: LD_ADDR_OWVAR 21
56976: PUSH
56977: LD_INT 0
56979: ST_TO_ADDR
// hc_sex := sex_male ;
56980: LD_ADDR_OWVAR 27
56984: PUSH
56985: LD_INT 1
56987: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56988: LD_ADDR_OWVAR 28
56992: PUSH
56993: LD_INT 15
56995: ST_TO_ADDR
// hc_gallery :=  ;
56996: LD_ADDR_OWVAR 33
57000: PUSH
57001: LD_STRING 
57003: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57004: LD_ADDR_OWVAR 31
57008: PUSH
57009: LD_INT 0
57011: PPUSH
57012: LD_INT 3
57014: PPUSH
57015: CALL_OW 12
57019: PUSH
57020: LD_INT 0
57022: PPUSH
57023: LD_INT 3
57025: PPUSH
57026: CALL_OW 12
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// end ;
57043: LD_VAR 0 1
57047: RET
// export function PrepareApemanEngineer ( ) ; begin
57048: LD_INT 0
57050: PPUSH
// uc_nation := 0 ;
57051: LD_ADDR_OWVAR 21
57055: PUSH
57056: LD_INT 0
57058: ST_TO_ADDR
// hc_sex := sex_male ;
57059: LD_ADDR_OWVAR 27
57063: PUSH
57064: LD_INT 1
57066: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57067: LD_ADDR_OWVAR 28
57071: PUSH
57072: LD_INT 16
57074: ST_TO_ADDR
// hc_gallery :=  ;
57075: LD_ADDR_OWVAR 33
57079: PUSH
57080: LD_STRING 
57082: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57083: LD_ADDR_OWVAR 31
57087: PUSH
57088: LD_INT 0
57090: PPUSH
57091: LD_INT 3
57093: PPUSH
57094: CALL_OW 12
57098: PUSH
57099: LD_INT 0
57101: PPUSH
57102: LD_INT 3
57104: PPUSH
57105: CALL_OW 12
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// end ;
57122: LD_VAR 0 1
57126: RET
// export function PrepareApeman ( agressivity ) ; begin
57127: LD_INT 0
57129: PPUSH
// uc_side := 0 ;
57130: LD_ADDR_OWVAR 20
57134: PUSH
57135: LD_INT 0
57137: ST_TO_ADDR
// uc_nation := 0 ;
57138: LD_ADDR_OWVAR 21
57142: PUSH
57143: LD_INT 0
57145: ST_TO_ADDR
// hc_sex := sex_male ;
57146: LD_ADDR_OWVAR 27
57150: PUSH
57151: LD_INT 1
57153: ST_TO_ADDR
// hc_class := class_apeman ;
57154: LD_ADDR_OWVAR 28
57158: PUSH
57159: LD_INT 12
57161: ST_TO_ADDR
// hc_gallery :=  ;
57162: LD_ADDR_OWVAR 33
57166: PUSH
57167: LD_STRING 
57169: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57170: LD_ADDR_OWVAR 35
57174: PUSH
57175: LD_VAR 0 1
57179: NEG
57180: PPUSH
57181: LD_VAR 0 1
57185: PPUSH
57186: CALL_OW 12
57190: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57191: LD_ADDR_OWVAR 31
57195: PUSH
57196: LD_INT 0
57198: PPUSH
57199: LD_INT 3
57201: PPUSH
57202: CALL_OW 12
57206: PUSH
57207: LD_INT 0
57209: PPUSH
57210: LD_INT 3
57212: PPUSH
57213: CALL_OW 12
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// end ;
57230: LD_VAR 0 2
57234: RET
// export function PrepareTiger ( agressivity ) ; begin
57235: LD_INT 0
57237: PPUSH
// uc_side := 0 ;
57238: LD_ADDR_OWVAR 20
57242: PUSH
57243: LD_INT 0
57245: ST_TO_ADDR
// uc_nation := 0 ;
57246: LD_ADDR_OWVAR 21
57250: PUSH
57251: LD_INT 0
57253: ST_TO_ADDR
// hc_class := class_tiger ;
57254: LD_ADDR_OWVAR 28
57258: PUSH
57259: LD_INT 14
57261: ST_TO_ADDR
// hc_gallery :=  ;
57262: LD_ADDR_OWVAR 33
57266: PUSH
57267: LD_STRING 
57269: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57270: LD_ADDR_OWVAR 35
57274: PUSH
57275: LD_VAR 0 1
57279: NEG
57280: PPUSH
57281: LD_VAR 0 1
57285: PPUSH
57286: CALL_OW 12
57290: ST_TO_ADDR
// end ;
57291: LD_VAR 0 2
57295: RET
// export function PrepareEnchidna ( ) ; begin
57296: LD_INT 0
57298: PPUSH
// uc_side := 0 ;
57299: LD_ADDR_OWVAR 20
57303: PUSH
57304: LD_INT 0
57306: ST_TO_ADDR
// uc_nation := 0 ;
57307: LD_ADDR_OWVAR 21
57311: PUSH
57312: LD_INT 0
57314: ST_TO_ADDR
// hc_class := class_baggie ;
57315: LD_ADDR_OWVAR 28
57319: PUSH
57320: LD_INT 13
57322: ST_TO_ADDR
// hc_gallery :=  ;
57323: LD_ADDR_OWVAR 33
57327: PUSH
57328: LD_STRING 
57330: ST_TO_ADDR
// end ;
57331: LD_VAR 0 1
57335: RET
// export function PrepareFrog ( ) ; begin
57336: LD_INT 0
57338: PPUSH
// uc_side := 0 ;
57339: LD_ADDR_OWVAR 20
57343: PUSH
57344: LD_INT 0
57346: ST_TO_ADDR
// uc_nation := 0 ;
57347: LD_ADDR_OWVAR 21
57351: PUSH
57352: LD_INT 0
57354: ST_TO_ADDR
// hc_class := class_frog ;
57355: LD_ADDR_OWVAR 28
57359: PUSH
57360: LD_INT 19
57362: ST_TO_ADDR
// hc_gallery :=  ;
57363: LD_ADDR_OWVAR 33
57367: PUSH
57368: LD_STRING 
57370: ST_TO_ADDR
// end ;
57371: LD_VAR 0 1
57375: RET
// export function PrepareFish ( ) ; begin
57376: LD_INT 0
57378: PPUSH
// uc_side := 0 ;
57379: LD_ADDR_OWVAR 20
57383: PUSH
57384: LD_INT 0
57386: ST_TO_ADDR
// uc_nation := 0 ;
57387: LD_ADDR_OWVAR 21
57391: PUSH
57392: LD_INT 0
57394: ST_TO_ADDR
// hc_class := class_fish ;
57395: LD_ADDR_OWVAR 28
57399: PUSH
57400: LD_INT 20
57402: ST_TO_ADDR
// hc_gallery :=  ;
57403: LD_ADDR_OWVAR 33
57407: PUSH
57408: LD_STRING 
57410: ST_TO_ADDR
// end ;
57411: LD_VAR 0 1
57415: RET
// export function PrepareBird ( ) ; begin
57416: LD_INT 0
57418: PPUSH
// uc_side := 0 ;
57419: LD_ADDR_OWVAR 20
57423: PUSH
57424: LD_INT 0
57426: ST_TO_ADDR
// uc_nation := 0 ;
57427: LD_ADDR_OWVAR 21
57431: PUSH
57432: LD_INT 0
57434: ST_TO_ADDR
// hc_class := class_phororhacos ;
57435: LD_ADDR_OWVAR 28
57439: PUSH
57440: LD_INT 18
57442: ST_TO_ADDR
// hc_gallery :=  ;
57443: LD_ADDR_OWVAR 33
57447: PUSH
57448: LD_STRING 
57450: ST_TO_ADDR
// end ;
57451: LD_VAR 0 1
57455: RET
// export function PrepareHorse ( ) ; begin
57456: LD_INT 0
57458: PPUSH
// uc_side := 0 ;
57459: LD_ADDR_OWVAR 20
57463: PUSH
57464: LD_INT 0
57466: ST_TO_ADDR
// uc_nation := 0 ;
57467: LD_ADDR_OWVAR 21
57471: PUSH
57472: LD_INT 0
57474: ST_TO_ADDR
// hc_class := class_horse ;
57475: LD_ADDR_OWVAR 28
57479: PUSH
57480: LD_INT 21
57482: ST_TO_ADDR
// hc_gallery :=  ;
57483: LD_ADDR_OWVAR 33
57487: PUSH
57488: LD_STRING 
57490: ST_TO_ADDR
// end ;
57491: LD_VAR 0 1
57495: RET
// export function PrepareMastodont ( ) ; begin
57496: LD_INT 0
57498: PPUSH
// uc_side := 0 ;
57499: LD_ADDR_OWVAR 20
57503: PUSH
57504: LD_INT 0
57506: ST_TO_ADDR
// uc_nation := 0 ;
57507: LD_ADDR_OWVAR 21
57511: PUSH
57512: LD_INT 0
57514: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57515: LD_ADDR_OWVAR 37
57519: PUSH
57520: LD_INT 31
57522: ST_TO_ADDR
// vc_control := control_rider ;
57523: LD_ADDR_OWVAR 38
57527: PUSH
57528: LD_INT 4
57530: ST_TO_ADDR
// end ;
57531: LD_VAR 0 1
57535: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57536: LD_INT 0
57538: PPUSH
57539: PPUSH
57540: PPUSH
// uc_side = 0 ;
57541: LD_ADDR_OWVAR 20
57545: PUSH
57546: LD_INT 0
57548: ST_TO_ADDR
// uc_nation = 0 ;
57549: LD_ADDR_OWVAR 21
57553: PUSH
57554: LD_INT 0
57556: ST_TO_ADDR
// InitHc_All ( ) ;
57557: CALL_OW 584
// InitVc ;
57561: CALL_OW 20
// if mastodonts then
57565: LD_VAR 0 6
57569: IFFALSE 57636
// for i = 1 to mastodonts do
57571: LD_ADDR_VAR 0 11
57575: PUSH
57576: DOUBLE
57577: LD_INT 1
57579: DEC
57580: ST_TO_ADDR
57581: LD_VAR 0 6
57585: PUSH
57586: FOR_TO
57587: IFFALSE 57634
// begin vc_chassis := 31 ;
57589: LD_ADDR_OWVAR 37
57593: PUSH
57594: LD_INT 31
57596: ST_TO_ADDR
// vc_control := control_rider ;
57597: LD_ADDR_OWVAR 38
57601: PUSH
57602: LD_INT 4
57604: ST_TO_ADDR
// animal := CreateVehicle ;
57605: LD_ADDR_VAR 0 12
57609: PUSH
57610: CALL_OW 45
57614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57615: LD_VAR 0 12
57619: PPUSH
57620: LD_VAR 0 8
57624: PPUSH
57625: LD_INT 0
57627: PPUSH
57628: CALL 59764 0 3
// end ;
57632: GO 57586
57634: POP
57635: POP
// if horses then
57636: LD_VAR 0 5
57640: IFFALSE 57707
// for i = 1 to horses do
57642: LD_ADDR_VAR 0 11
57646: PUSH
57647: DOUBLE
57648: LD_INT 1
57650: DEC
57651: ST_TO_ADDR
57652: LD_VAR 0 5
57656: PUSH
57657: FOR_TO
57658: IFFALSE 57705
// begin hc_class := 21 ;
57660: LD_ADDR_OWVAR 28
57664: PUSH
57665: LD_INT 21
57667: ST_TO_ADDR
// hc_gallery :=  ;
57668: LD_ADDR_OWVAR 33
57672: PUSH
57673: LD_STRING 
57675: ST_TO_ADDR
// animal := CreateHuman ;
57676: LD_ADDR_VAR 0 12
57680: PUSH
57681: CALL_OW 44
57685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57686: LD_VAR 0 12
57690: PPUSH
57691: LD_VAR 0 8
57695: PPUSH
57696: LD_INT 0
57698: PPUSH
57699: CALL 59764 0 3
// end ;
57703: GO 57657
57705: POP
57706: POP
// if birds then
57707: LD_VAR 0 1
57711: IFFALSE 57778
// for i = 1 to birds do
57713: LD_ADDR_VAR 0 11
57717: PUSH
57718: DOUBLE
57719: LD_INT 1
57721: DEC
57722: ST_TO_ADDR
57723: LD_VAR 0 1
57727: PUSH
57728: FOR_TO
57729: IFFALSE 57776
// begin hc_class := 18 ;
57731: LD_ADDR_OWVAR 28
57735: PUSH
57736: LD_INT 18
57738: ST_TO_ADDR
// hc_gallery =  ;
57739: LD_ADDR_OWVAR 33
57743: PUSH
57744: LD_STRING 
57746: ST_TO_ADDR
// animal := CreateHuman ;
57747: LD_ADDR_VAR 0 12
57751: PUSH
57752: CALL_OW 44
57756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57757: LD_VAR 0 12
57761: PPUSH
57762: LD_VAR 0 8
57766: PPUSH
57767: LD_INT 0
57769: PPUSH
57770: CALL 59764 0 3
// end ;
57774: GO 57728
57776: POP
57777: POP
// if tigers then
57778: LD_VAR 0 2
57782: IFFALSE 57866
// for i = 1 to tigers do
57784: LD_ADDR_VAR 0 11
57788: PUSH
57789: DOUBLE
57790: LD_INT 1
57792: DEC
57793: ST_TO_ADDR
57794: LD_VAR 0 2
57798: PUSH
57799: FOR_TO
57800: IFFALSE 57864
// begin hc_class = class_tiger ;
57802: LD_ADDR_OWVAR 28
57806: PUSH
57807: LD_INT 14
57809: ST_TO_ADDR
// hc_gallery =  ;
57810: LD_ADDR_OWVAR 33
57814: PUSH
57815: LD_STRING 
57817: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57818: LD_ADDR_OWVAR 35
57822: PUSH
57823: LD_INT 7
57825: NEG
57826: PPUSH
57827: LD_INT 7
57829: PPUSH
57830: CALL_OW 12
57834: ST_TO_ADDR
// animal := CreateHuman ;
57835: LD_ADDR_VAR 0 12
57839: PUSH
57840: CALL_OW 44
57844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57845: LD_VAR 0 12
57849: PPUSH
57850: LD_VAR 0 8
57854: PPUSH
57855: LD_INT 0
57857: PPUSH
57858: CALL 59764 0 3
// end ;
57862: GO 57799
57864: POP
57865: POP
// if apemans then
57866: LD_VAR 0 3
57870: IFFALSE 57993
// for i = 1 to apemans do
57872: LD_ADDR_VAR 0 11
57876: PUSH
57877: DOUBLE
57878: LD_INT 1
57880: DEC
57881: ST_TO_ADDR
57882: LD_VAR 0 3
57886: PUSH
57887: FOR_TO
57888: IFFALSE 57991
// begin hc_class = class_apeman ;
57890: LD_ADDR_OWVAR 28
57894: PUSH
57895: LD_INT 12
57897: ST_TO_ADDR
// hc_gallery =  ;
57898: LD_ADDR_OWVAR 33
57902: PUSH
57903: LD_STRING 
57905: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57906: LD_ADDR_OWVAR 35
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PPUSH
57915: LD_INT 2
57917: PPUSH
57918: CALL_OW 12
57922: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57923: LD_ADDR_OWVAR 31
57927: PUSH
57928: LD_INT 1
57930: PPUSH
57931: LD_INT 3
57933: PPUSH
57934: CALL_OW 12
57938: PUSH
57939: LD_INT 1
57941: PPUSH
57942: LD_INT 3
57944: PPUSH
57945: CALL_OW 12
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// animal := CreateHuman ;
57962: LD_ADDR_VAR 0 12
57966: PUSH
57967: CALL_OW 44
57971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57972: LD_VAR 0 12
57976: PPUSH
57977: LD_VAR 0 8
57981: PPUSH
57982: LD_INT 0
57984: PPUSH
57985: CALL 59764 0 3
// end ;
57989: GO 57887
57991: POP
57992: POP
// if enchidnas then
57993: LD_VAR 0 4
57997: IFFALSE 58064
// for i = 1 to enchidnas do
57999: LD_ADDR_VAR 0 11
58003: PUSH
58004: DOUBLE
58005: LD_INT 1
58007: DEC
58008: ST_TO_ADDR
58009: LD_VAR 0 4
58013: PUSH
58014: FOR_TO
58015: IFFALSE 58062
// begin hc_class = 13 ;
58017: LD_ADDR_OWVAR 28
58021: PUSH
58022: LD_INT 13
58024: ST_TO_ADDR
// hc_gallery =  ;
58025: LD_ADDR_OWVAR 33
58029: PUSH
58030: LD_STRING 
58032: ST_TO_ADDR
// animal := CreateHuman ;
58033: LD_ADDR_VAR 0 12
58037: PUSH
58038: CALL_OW 44
58042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58043: LD_VAR 0 12
58047: PPUSH
58048: LD_VAR 0 8
58052: PPUSH
58053: LD_INT 0
58055: PPUSH
58056: CALL 59764 0 3
// end ;
58060: GO 58014
58062: POP
58063: POP
// if fishes then
58064: LD_VAR 0 7
58068: IFFALSE 58135
// for i = 1 to fishes do
58070: LD_ADDR_VAR 0 11
58074: PUSH
58075: DOUBLE
58076: LD_INT 1
58078: DEC
58079: ST_TO_ADDR
58080: LD_VAR 0 7
58084: PUSH
58085: FOR_TO
58086: IFFALSE 58133
// begin hc_class = 20 ;
58088: LD_ADDR_OWVAR 28
58092: PUSH
58093: LD_INT 20
58095: ST_TO_ADDR
// hc_gallery =  ;
58096: LD_ADDR_OWVAR 33
58100: PUSH
58101: LD_STRING 
58103: ST_TO_ADDR
// animal := CreateHuman ;
58104: LD_ADDR_VAR 0 12
58108: PUSH
58109: CALL_OW 44
58113: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58114: LD_VAR 0 12
58118: PPUSH
58119: LD_VAR 0 9
58123: PPUSH
58124: LD_INT 0
58126: PPUSH
58127: CALL 59764 0 3
// end ;
58131: GO 58085
58133: POP
58134: POP
// end ;
58135: LD_VAR 0 10
58139: RET
// export function WantHeal ( sci , unit ) ; begin
58140: LD_INT 0
58142: PPUSH
// if GetTaskList ( sci ) > 0 then
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 437
58152: PUSH
58153: LD_INT 0
58155: GREATER
58156: IFFALSE 58226
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58158: LD_VAR 0 1
58162: PPUSH
58163: CALL_OW 437
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_STRING l
58178: EQUAL
58179: PUSH
58180: LD_VAR 0 1
58184: PPUSH
58185: CALL_OW 437
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_INT 4
58196: ARRAY
58197: PUSH
58198: LD_VAR 0 2
58202: EQUAL
58203: AND
58204: IFFALSE 58216
// result := true else
58206: LD_ADDR_VAR 0 3
58210: PUSH
58211: LD_INT 1
58213: ST_TO_ADDR
58214: GO 58224
// result := false ;
58216: LD_ADDR_VAR 0 3
58220: PUSH
58221: LD_INT 0
58223: ST_TO_ADDR
// end else
58224: GO 58234
// result := false ;
58226: LD_ADDR_VAR 0 3
58230: PUSH
58231: LD_INT 0
58233: ST_TO_ADDR
// end ;
58234: LD_VAR 0 3
58238: RET
// export function HealTarget ( sci ) ; begin
58239: LD_INT 0
58241: PPUSH
// if not sci then
58242: LD_VAR 0 1
58246: NOT
58247: IFFALSE 58251
// exit ;
58249: GO 58316
// result := 0 ;
58251: LD_ADDR_VAR 0 2
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// if GetTaskList ( sci ) then
58259: LD_VAR 0 1
58263: PPUSH
58264: CALL_OW 437
58268: IFFALSE 58316
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58270: LD_VAR 0 1
58274: PPUSH
58275: CALL_OW 437
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PUSH
58284: LD_INT 1
58286: ARRAY
58287: PUSH
58288: LD_STRING l
58290: EQUAL
58291: IFFALSE 58316
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58293: LD_ADDR_VAR 0 2
58297: PUSH
58298: LD_VAR 0 1
58302: PPUSH
58303: CALL_OW 437
58307: PUSH
58308: LD_INT 1
58310: ARRAY
58311: PUSH
58312: LD_INT 4
58314: ARRAY
58315: ST_TO_ADDR
// end ;
58316: LD_VAR 0 2
58320: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58321: LD_INT 0
58323: PPUSH
58324: PPUSH
58325: PPUSH
58326: PPUSH
// if not base_units then
58327: LD_VAR 0 1
58331: NOT
58332: IFFALSE 58336
// exit ;
58334: GO 58423
// result := false ;
58336: LD_ADDR_VAR 0 2
58340: PUSH
58341: LD_INT 0
58343: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58344: LD_ADDR_VAR 0 5
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: LD_INT 21
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PPUSH
58364: CALL_OW 72
58368: ST_TO_ADDR
// if not tmp then
58369: LD_VAR 0 5
58373: NOT
58374: IFFALSE 58378
// exit ;
58376: GO 58423
// for i in tmp do
58378: LD_ADDR_VAR 0 3
58382: PUSH
58383: LD_VAR 0 5
58387: PUSH
58388: FOR_IN
58389: IFFALSE 58421
// begin result := EnemyInRange ( i , 22 ) ;
58391: LD_ADDR_VAR 0 2
58395: PUSH
58396: LD_VAR 0 3
58400: PPUSH
58401: LD_INT 22
58403: PPUSH
58404: CALL 56010 0 2
58408: ST_TO_ADDR
// if result then
58409: LD_VAR 0 2
58413: IFFALSE 58419
// exit ;
58415: POP
58416: POP
58417: GO 58423
// end ;
58419: GO 58388
58421: POP
58422: POP
// end ;
58423: LD_VAR 0 2
58427: RET
// export function FilterByTag ( units , tag ) ; begin
58428: LD_INT 0
58430: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58431: LD_ADDR_VAR 0 3
58435: PUSH
58436: LD_VAR 0 1
58440: PPUSH
58441: LD_INT 120
58443: PUSH
58444: LD_VAR 0 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PPUSH
58453: CALL_OW 72
58457: ST_TO_ADDR
// end ;
58458: LD_VAR 0 3
58462: RET
// export function IsDriver ( un ) ; begin
58463: LD_INT 0
58465: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58466: LD_ADDR_VAR 0 2
58470: PUSH
58471: LD_VAR 0 1
58475: PUSH
58476: LD_INT 55
58478: PUSH
58479: EMPTY
58480: LIST
58481: PPUSH
58482: CALL_OW 69
58486: IN
58487: ST_TO_ADDR
// end ;
58488: LD_VAR 0 2
58492: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58493: LD_INT 0
58495: PPUSH
58496: PPUSH
// list := [ ] ;
58497: LD_ADDR_VAR 0 5
58501: PUSH
58502: EMPTY
58503: ST_TO_ADDR
// case d of 0 :
58504: LD_VAR 0 3
58508: PUSH
58509: LD_INT 0
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58517
58515: GO 58650
58517: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58518: LD_ADDR_VAR 0 5
58522: PUSH
58523: LD_VAR 0 1
58527: PUSH
58528: LD_INT 4
58530: MINUS
58531: PUSH
58532: LD_VAR 0 2
58536: PUSH
58537: LD_INT 4
58539: MINUS
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 3
58556: MINUS
58557: PUSH
58558: LD_VAR 0 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: PUSH
58571: LD_VAR 0 1
58575: PUSH
58576: LD_INT 4
58578: PLUS
58579: PUSH
58580: LD_VAR 0 2
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: PUSH
58593: LD_VAR 0 1
58597: PUSH
58598: LD_INT 3
58600: PLUS
58601: PUSH
58602: LD_VAR 0 2
58606: PUSH
58607: LD_INT 3
58609: PLUS
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: PUSH
58619: LD_VAR 0 1
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_INT 4
58631: PLUS
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// end ; 1 :
58648: GO 59348
58650: LD_INT 1
58652: DOUBLE
58653: EQUAL
58654: IFTRUE 58658
58656: GO 58791
58658: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58659: LD_ADDR_VAR 0 5
58663: PUSH
58664: LD_VAR 0 1
58668: PUSH
58669: LD_VAR 0 2
58673: PUSH
58674: LD_INT 4
58676: MINUS
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: PUSH
58686: LD_VAR 0 1
58690: PUSH
58691: LD_INT 3
58693: MINUS
58694: PUSH
58695: LD_VAR 0 2
58699: PUSH
58700: LD_INT 3
58702: MINUS
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: PUSH
58712: LD_VAR 0 1
58716: PUSH
58717: LD_INT 4
58719: MINUS
58720: PUSH
58721: LD_VAR 0 2
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: PUSH
58734: LD_VAR 0 1
58738: PUSH
58739: LD_VAR 0 2
58743: PUSH
58744: LD_INT 3
58746: PLUS
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: PUSH
58756: LD_VAR 0 1
58760: PUSH
58761: LD_INT 4
58763: PLUS
58764: PUSH
58765: LD_VAR 0 2
58769: PUSH
58770: LD_INT 4
58772: PLUS
58773: PUSH
58774: LD_INT 5
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: ST_TO_ADDR
// end ; 2 :
58789: GO 59348
58791: LD_INT 2
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58799
58797: GO 58928
58799: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58800: LD_ADDR_VAR 0 5
58804: PUSH
58805: LD_VAR 0 1
58809: PUSH
58810: LD_VAR 0 2
58814: PUSH
58815: LD_INT 3
58817: MINUS
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: LD_VAR 0 1
58831: PUSH
58832: LD_INT 4
58834: PLUS
58835: PUSH
58836: LD_VAR 0 2
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: LD_VAR 0 1
58853: PUSH
58854: LD_VAR 0 2
58858: PUSH
58859: LD_INT 4
58861: PLUS
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: LIST
58870: PUSH
58871: LD_VAR 0 1
58875: PUSH
58876: LD_INT 3
58878: MINUS
58879: PUSH
58880: LD_VAR 0 2
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: PUSH
58893: LD_VAR 0 1
58897: PUSH
58898: LD_INT 4
58900: MINUS
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 4
58909: MINUS
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: ST_TO_ADDR
// end ; 3 :
58926: GO 59348
58928: LD_INT 3
58930: DOUBLE
58931: EQUAL
58932: IFTRUE 58936
58934: GO 59069
58936: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58937: LD_ADDR_VAR 0 5
58941: PUSH
58942: LD_VAR 0 1
58946: PUSH
58947: LD_INT 3
58949: PLUS
58950: PUSH
58951: LD_VAR 0 2
58955: PUSH
58956: LD_INT 4
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: PUSH
58964: LD_VAR 0 1
58968: PUSH
58969: LD_INT 4
58971: PLUS
58972: PUSH
58973: LD_VAR 0 2
58977: PUSH
58978: LD_INT 4
58980: PLUS
58981: PUSH
58982: LD_INT 5
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: PUSH
58990: LD_VAR 0 1
58994: PUSH
58995: LD_INT 4
58997: MINUS
58998: PUSH
58999: LD_VAR 0 2
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: PUSH
59012: LD_VAR 0 1
59016: PUSH
59017: LD_VAR 0 2
59021: PUSH
59022: LD_INT 4
59024: MINUS
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: PUSH
59034: LD_VAR 0 1
59038: PUSH
59039: LD_INT 3
59041: MINUS
59042: PUSH
59043: LD_VAR 0 2
59047: PUSH
59048: LD_INT 3
59050: MINUS
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: ST_TO_ADDR
// end ; 4 :
59067: GO 59348
59069: LD_INT 4
59071: DOUBLE
59072: EQUAL
59073: IFTRUE 59077
59075: GO 59210
59077: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59078: LD_ADDR_VAR 0 5
59082: PUSH
59083: LD_VAR 0 1
59087: PUSH
59088: LD_VAR 0 2
59092: PUSH
59093: LD_INT 4
59095: PLUS
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: PUSH
59105: LD_VAR 0 1
59109: PUSH
59110: LD_INT 3
59112: PLUS
59113: PUSH
59114: LD_VAR 0 2
59118: PUSH
59119: LD_INT 3
59121: PLUS
59122: PUSH
59123: LD_INT 5
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: LD_VAR 0 1
59135: PUSH
59136: LD_INT 4
59138: PLUS
59139: PUSH
59140: LD_VAR 0 2
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: PUSH
59153: LD_VAR 0 1
59157: PUSH
59158: LD_VAR 0 2
59162: PUSH
59163: LD_INT 3
59165: MINUS
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: PUSH
59175: LD_VAR 0 1
59179: PUSH
59180: LD_INT 4
59182: MINUS
59183: PUSH
59184: LD_VAR 0 2
59188: PUSH
59189: LD_INT 4
59191: MINUS
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// end ; 5 :
59208: GO 59348
59210: LD_INT 5
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59218
59216: GO 59347
59218: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59219: LD_ADDR_VAR 0 5
59223: PUSH
59224: LD_VAR 0 1
59228: PUSH
59229: LD_INT 4
59231: MINUS
59232: PUSH
59233: LD_VAR 0 2
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: PUSH
59246: LD_VAR 0 1
59250: PUSH
59251: LD_VAR 0 2
59255: PUSH
59256: LD_INT 4
59258: MINUS
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: PUSH
59268: LD_VAR 0 1
59272: PUSH
59273: LD_INT 4
59275: PLUS
59276: PUSH
59277: LD_VAR 0 2
59281: PUSH
59282: LD_INT 4
59284: PLUS
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: PUSH
59294: LD_VAR 0 1
59298: PUSH
59299: LD_INT 3
59301: PLUS
59302: PUSH
59303: LD_VAR 0 2
59307: PUSH
59308: LD_INT 4
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: PUSH
59316: LD_VAR 0 1
59320: PUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_INT 3
59328: PLUS
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: ST_TO_ADDR
// end ; end ;
59345: GO 59348
59347: POP
// result := list ;
59348: LD_ADDR_VAR 0 4
59352: PUSH
59353: LD_VAR 0 5
59357: ST_TO_ADDR
// end ;
59358: LD_VAR 0 4
59362: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59363: LD_INT 0
59365: PPUSH
59366: PPUSH
59367: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59368: LD_VAR 0 1
59372: NOT
59373: PUSH
59374: LD_VAR 0 2
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: IN
59397: NOT
59398: OR
59399: IFFALSE 59403
// exit ;
59401: GO 59486
// tmp := [ ] ;
59403: LD_ADDR_VAR 0 5
59407: PUSH
59408: EMPTY
59409: ST_TO_ADDR
// for i in units do
59410: LD_ADDR_VAR 0 4
59414: PUSH
59415: LD_VAR 0 1
59419: PUSH
59420: FOR_IN
59421: IFFALSE 59455
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59423: LD_ADDR_VAR 0 5
59427: PUSH
59428: LD_VAR 0 5
59432: PPUSH
59433: LD_VAR 0 4
59437: PPUSH
59438: LD_VAR 0 2
59442: PPUSH
59443: CALL_OW 259
59447: PPUSH
59448: CALL 60846 0 2
59452: ST_TO_ADDR
59453: GO 59420
59455: POP
59456: POP
// if not tmp then
59457: LD_VAR 0 5
59461: NOT
59462: IFFALSE 59466
// exit ;
59464: GO 59486
// result := SortListByListDesc ( units , tmp ) ;
59466: LD_ADDR_VAR 0 3
59470: PUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: LD_VAR 0 5
59480: PPUSH
59481: CALL_OW 77
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 3
59490: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59491: LD_INT 0
59493: PPUSH
59494: PPUSH
59495: PPUSH
// result := false ;
59496: LD_ADDR_VAR 0 3
59500: PUSH
59501: LD_INT 0
59503: ST_TO_ADDR
// if not building then
59504: LD_VAR 0 2
59508: NOT
59509: IFFALSE 59513
// exit ;
59511: GO 59651
// x := GetX ( building ) ;
59513: LD_ADDR_VAR 0 4
59517: PUSH
59518: LD_VAR 0 2
59522: PPUSH
59523: CALL_OW 250
59527: ST_TO_ADDR
// y := GetY ( building ) ;
59528: LD_ADDR_VAR 0 5
59532: PUSH
59533: LD_VAR 0 2
59537: PPUSH
59538: CALL_OW 251
59542: ST_TO_ADDR
// if not x or not y then
59543: LD_VAR 0 4
59547: NOT
59548: PUSH
59549: LD_VAR 0 5
59553: NOT
59554: OR
59555: IFFALSE 59559
// exit ;
59557: GO 59651
// if GetTaskList ( unit ) then
59559: LD_VAR 0 1
59563: PPUSH
59564: CALL_OW 437
59568: IFFALSE 59651
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59570: LD_STRING e
59572: PUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 437
59582: PUSH
59583: LD_INT 1
59585: ARRAY
59586: PUSH
59587: LD_INT 1
59589: ARRAY
59590: EQUAL
59591: PUSH
59592: LD_VAR 0 4
59596: PUSH
59597: LD_VAR 0 1
59601: PPUSH
59602: CALL_OW 437
59606: PUSH
59607: LD_INT 1
59609: ARRAY
59610: PUSH
59611: LD_INT 2
59613: ARRAY
59614: EQUAL
59615: AND
59616: PUSH
59617: LD_VAR 0 5
59621: PUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 437
59631: PUSH
59632: LD_INT 1
59634: ARRAY
59635: PUSH
59636: LD_INT 3
59638: ARRAY
59639: EQUAL
59640: AND
59641: IFFALSE 59651
// result := true end ;
59643: LD_ADDR_VAR 0 3
59647: PUSH
59648: LD_INT 1
59650: ST_TO_ADDR
// end ;
59651: LD_VAR 0 3
59655: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59656: LD_INT 0
59658: PPUSH
// result := false ;
59659: LD_ADDR_VAR 0 4
59663: PUSH
59664: LD_INT 0
59666: ST_TO_ADDR
// if GetTaskList ( unit ) then
59667: LD_VAR 0 1
59671: PPUSH
59672: CALL_OW 437
59676: IFFALSE 59759
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59678: LD_STRING M
59680: PUSH
59681: LD_VAR 0 1
59685: PPUSH
59686: CALL_OW 437
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PUSH
59695: LD_INT 1
59697: ARRAY
59698: EQUAL
59699: PUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_VAR 0 1
59709: PPUSH
59710: CALL_OW 437
59714: PUSH
59715: LD_INT 1
59717: ARRAY
59718: PUSH
59719: LD_INT 2
59721: ARRAY
59722: EQUAL
59723: AND
59724: PUSH
59725: LD_VAR 0 3
59729: PUSH
59730: LD_VAR 0 1
59734: PPUSH
59735: CALL_OW 437
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_INT 3
59746: ARRAY
59747: EQUAL
59748: AND
59749: IFFALSE 59759
// result := true ;
59751: LD_ADDR_VAR 0 4
59755: PUSH
59756: LD_INT 1
59758: ST_TO_ADDR
// end ; end ;
59759: LD_VAR 0 4
59763: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59764: LD_INT 0
59766: PPUSH
59767: PPUSH
59768: PPUSH
59769: PPUSH
// if not unit or not area then
59770: LD_VAR 0 1
59774: NOT
59775: PUSH
59776: LD_VAR 0 2
59780: NOT
59781: OR
59782: IFFALSE 59786
// exit ;
59784: GO 59949
// tmp := AreaToList ( area , i ) ;
59786: LD_ADDR_VAR 0 6
59790: PUSH
59791: LD_VAR 0 2
59795: PPUSH
59796: LD_VAR 0 5
59800: PPUSH
59801: CALL_OW 517
59805: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59806: LD_ADDR_VAR 0 5
59810: PUSH
59811: DOUBLE
59812: LD_INT 1
59814: DEC
59815: ST_TO_ADDR
59816: LD_VAR 0 6
59820: PUSH
59821: LD_INT 1
59823: ARRAY
59824: PUSH
59825: FOR_TO
59826: IFFALSE 59947
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59828: LD_ADDR_VAR 0 7
59832: PUSH
59833: LD_VAR 0 6
59837: PUSH
59838: LD_INT 1
59840: ARRAY
59841: PUSH
59842: LD_VAR 0 5
59846: ARRAY
59847: PUSH
59848: LD_VAR 0 6
59852: PUSH
59853: LD_INT 2
59855: ARRAY
59856: PUSH
59857: LD_VAR 0 5
59861: ARRAY
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
59867: LD_INT 92
59869: PUSH
59870: LD_VAR 0 7
59874: PUSH
59875: LD_INT 1
59877: ARRAY
59878: PUSH
59879: LD_VAR 0 7
59883: PUSH
59884: LD_INT 2
59886: ARRAY
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: PPUSH
59897: CALL_OW 69
59901: PUSH
59902: LD_INT 0
59904: EQUAL
59905: IFFALSE 59945
// begin PlaceUnitArea ( unit , area , mode ) ;
59907: LD_VAR 0 1
59911: PPUSH
59912: LD_VAR 0 2
59916: PPUSH
59917: LD_VAR 0 3
59921: PPUSH
59922: CALL_OW 49
// result := IsPlaced ( unit ) ;
59926: LD_ADDR_VAR 0 4
59930: PUSH
59931: LD_VAR 0 1
59935: PPUSH
59936: CALL_OW 305
59940: ST_TO_ADDR
// exit ;
59941: POP
59942: POP
59943: GO 59949
// end ; end ;
59945: GO 59825
59947: POP
59948: POP
// end ;
59949: LD_VAR 0 4
59953: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59954: LD_INT 0
59956: PPUSH
59957: PPUSH
59958: PPUSH
// if not side or side > 8 then
59959: LD_VAR 0 1
59963: NOT
59964: PUSH
59965: LD_VAR 0 1
59969: PUSH
59970: LD_INT 8
59972: GREATER
59973: OR
59974: IFFALSE 59978
// exit ;
59976: GO 60165
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_INT 22
59985: PUSH
59986: LD_VAR 0 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 21
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PPUSH
60009: CALL_OW 69
60013: ST_TO_ADDR
// if not tmp then
60014: LD_VAR 0 4
60018: NOT
60019: IFFALSE 60023
// exit ;
60021: GO 60165
// enable_addtolog := true ;
60023: LD_ADDR_OWVAR 81
60027: PUSH
60028: LD_INT 1
60030: ST_TO_ADDR
// AddToLog ( [ ) ;
60031: LD_STRING [
60033: PPUSH
60034: CALL_OW 561
// for i in tmp do
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: LD_VAR 0 4
60047: PUSH
60048: FOR_IN
60049: IFFALSE 60156
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60051: LD_STRING [
60053: PUSH
60054: LD_VAR 0 3
60058: PPUSH
60059: CALL_OW 266
60063: STR
60064: PUSH
60065: LD_STRING , 
60067: STR
60068: PUSH
60069: LD_VAR 0 3
60073: PPUSH
60074: CALL_OW 250
60078: STR
60079: PUSH
60080: LD_STRING , 
60082: STR
60083: PUSH
60084: LD_VAR 0 3
60088: PPUSH
60089: CALL_OW 251
60093: STR
60094: PUSH
60095: LD_STRING , 
60097: STR
60098: PUSH
60099: LD_VAR 0 3
60103: PPUSH
60104: CALL_OW 254
60108: STR
60109: PUSH
60110: LD_STRING , 
60112: STR
60113: PUSH
60114: LD_VAR 0 3
60118: PPUSH
60119: LD_INT 1
60121: PPUSH
60122: CALL_OW 268
60126: STR
60127: PUSH
60128: LD_STRING , 
60130: STR
60131: PUSH
60132: LD_VAR 0 3
60136: PPUSH
60137: LD_INT 2
60139: PPUSH
60140: CALL_OW 268
60144: STR
60145: PUSH
60146: LD_STRING ],
60148: STR
60149: PPUSH
60150: CALL_OW 561
// end ;
60154: GO 60048
60156: POP
60157: POP
// AddToLog ( ]; ) ;
60158: LD_STRING ];
60160: PPUSH
60161: CALL_OW 561
// end ;
60165: LD_VAR 0 2
60169: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60170: LD_INT 0
60172: PPUSH
60173: PPUSH
60174: PPUSH
60175: PPUSH
60176: PPUSH
// if not area or not rate or not max then
60177: LD_VAR 0 1
60181: NOT
60182: PUSH
60183: LD_VAR 0 2
60187: NOT
60188: OR
60189: PUSH
60190: LD_VAR 0 4
60194: NOT
60195: OR
60196: IFFALSE 60200
// exit ;
60198: GO 60389
// while 1 do
60200: LD_INT 1
60202: IFFALSE 60389
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60204: LD_ADDR_VAR 0 9
60208: PUSH
60209: LD_VAR 0 1
60213: PPUSH
60214: LD_INT 1
60216: PPUSH
60217: CALL_OW 287
60221: PUSH
60222: LD_INT 10
60224: MUL
60225: ST_TO_ADDR
// r := rate / 10 ;
60226: LD_ADDR_VAR 0 7
60230: PUSH
60231: LD_VAR 0 2
60235: PUSH
60236: LD_INT 10
60238: DIVREAL
60239: ST_TO_ADDR
// time := 1 1$00 ;
60240: LD_ADDR_VAR 0 8
60244: PUSH
60245: LD_INT 2100
60247: ST_TO_ADDR
// if amount < min then
60248: LD_VAR 0 9
60252: PUSH
60253: LD_VAR 0 3
60257: LESS
60258: IFFALSE 60276
// r := r * 2 else
60260: LD_ADDR_VAR 0 7
60264: PUSH
60265: LD_VAR 0 7
60269: PUSH
60270: LD_INT 2
60272: MUL
60273: ST_TO_ADDR
60274: GO 60302
// if amount > max then
60276: LD_VAR 0 9
60280: PUSH
60281: LD_VAR 0 4
60285: GREATER
60286: IFFALSE 60302
// r := r / 2 ;
60288: LD_ADDR_VAR 0 7
60292: PUSH
60293: LD_VAR 0 7
60297: PUSH
60298: LD_INT 2
60300: DIVREAL
60301: ST_TO_ADDR
// time := time / r ;
60302: LD_ADDR_VAR 0 8
60306: PUSH
60307: LD_VAR 0 8
60311: PUSH
60312: LD_VAR 0 7
60316: DIVREAL
60317: ST_TO_ADDR
// if time < 0 then
60318: LD_VAR 0 8
60322: PUSH
60323: LD_INT 0
60325: LESS
60326: IFFALSE 60343
// time := time * - 1 ;
60328: LD_ADDR_VAR 0 8
60332: PUSH
60333: LD_VAR 0 8
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: MUL
60342: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60343: LD_VAR 0 8
60347: PUSH
60348: LD_INT 35
60350: PPUSH
60351: LD_INT 875
60353: PPUSH
60354: CALL_OW 12
60358: PLUS
60359: PPUSH
60360: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60364: LD_INT 1
60366: PPUSH
60367: LD_INT 5
60369: PPUSH
60370: CALL_OW 12
60374: PPUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: LD_INT 1
60382: PPUSH
60383: CALL_OW 55
// end ;
60387: GO 60200
// end ;
60389: LD_VAR 0 5
60393: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60394: LD_INT 0
60396: PPUSH
60397: PPUSH
60398: PPUSH
60399: PPUSH
60400: PPUSH
60401: PPUSH
60402: PPUSH
60403: PPUSH
// if not turrets or not factories then
60404: LD_VAR 0 1
60408: NOT
60409: PUSH
60410: LD_VAR 0 2
60414: NOT
60415: OR
60416: IFFALSE 60420
// exit ;
60418: GO 60727
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60420: LD_ADDR_VAR 0 10
60424: PUSH
60425: LD_INT 5
60427: PUSH
60428: LD_INT 6
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: LD_INT 4
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 24
60462: PUSH
60463: LD_INT 25
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 23
60472: PUSH
60473: LD_INT 27
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 42
60486: PUSH
60487: LD_INT 43
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 44
60496: PUSH
60497: LD_INT 46
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 45
60506: PUSH
60507: LD_INT 47
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// result := [ ] ;
60524: LD_ADDR_VAR 0 3
60528: PUSH
60529: EMPTY
60530: ST_TO_ADDR
// for i in turrets do
60531: LD_ADDR_VAR 0 4
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: FOR_IN
60542: IFFALSE 60725
// begin nat := GetNation ( i ) ;
60544: LD_ADDR_VAR 0 7
60548: PUSH
60549: LD_VAR 0 4
60553: PPUSH
60554: CALL_OW 248
60558: ST_TO_ADDR
// weapon := 0 ;
60559: LD_ADDR_VAR 0 8
60563: PUSH
60564: LD_INT 0
60566: ST_TO_ADDR
// if not nat then
60567: LD_VAR 0 7
60571: NOT
60572: IFFALSE 60576
// continue ;
60574: GO 60541
// for j in list [ nat ] do
60576: LD_ADDR_VAR 0 5
60580: PUSH
60581: LD_VAR 0 10
60585: PUSH
60586: LD_VAR 0 7
60590: ARRAY
60591: PUSH
60592: FOR_IN
60593: IFFALSE 60634
// if GetBWeapon ( i ) = j [ 1 ] then
60595: LD_VAR 0 4
60599: PPUSH
60600: CALL_OW 269
60604: PUSH
60605: LD_VAR 0 5
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: EQUAL
60614: IFFALSE 60632
// begin weapon := j [ 2 ] ;
60616: LD_ADDR_VAR 0 8
60620: PUSH
60621: LD_VAR 0 5
60625: PUSH
60626: LD_INT 2
60628: ARRAY
60629: ST_TO_ADDR
// break ;
60630: GO 60634
// end ;
60632: GO 60592
60634: POP
60635: POP
// if not weapon then
60636: LD_VAR 0 8
60640: NOT
60641: IFFALSE 60645
// continue ;
60643: GO 60541
// for k in factories do
60645: LD_ADDR_VAR 0 6
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: FOR_IN
60656: IFFALSE 60721
// begin weapons := AvailableWeaponList ( k ) ;
60658: LD_ADDR_VAR 0 9
60662: PUSH
60663: LD_VAR 0 6
60667: PPUSH
60668: CALL_OW 478
60672: ST_TO_ADDR
// if not weapons then
60673: LD_VAR 0 9
60677: NOT
60678: IFFALSE 60682
// continue ;
60680: GO 60655
// if weapon in weapons then
60682: LD_VAR 0 8
60686: PUSH
60687: LD_VAR 0 9
60691: IN
60692: IFFALSE 60719
// begin result := [ i , weapon ] ;
60694: LD_ADDR_VAR 0 3
60698: PUSH
60699: LD_VAR 0 4
60703: PUSH
60704: LD_VAR 0 8
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// exit ;
60713: POP
60714: POP
60715: POP
60716: POP
60717: GO 60727
// end ; end ;
60719: GO 60655
60721: POP
60722: POP
// end ;
60723: GO 60541
60725: POP
60726: POP
// end ;
60727: LD_VAR 0 3
60731: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60732: LD_INT 0
60734: PPUSH
// if not side or side > 8 then
60735: LD_VAR 0 3
60739: NOT
60740: PUSH
60741: LD_VAR 0 3
60745: PUSH
60746: LD_INT 8
60748: GREATER
60749: OR
60750: IFFALSE 60754
// exit ;
60752: GO 60813
// if not range then
60754: LD_VAR 0 4
60758: NOT
60759: IFFALSE 60770
// range := - 12 ;
60761: LD_ADDR_VAR 0 4
60765: PUSH
60766: LD_INT 12
60768: NEG
60769: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60770: LD_VAR 0 1
60774: PPUSH
60775: LD_VAR 0 2
60779: PPUSH
60780: LD_VAR 0 3
60784: PPUSH
60785: LD_VAR 0 4
60789: PPUSH
60790: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60794: LD_VAR 0 1
60798: PPUSH
60799: LD_VAR 0 2
60803: PPUSH
60804: LD_VAR 0 3
60808: PPUSH
60809: CALL_OW 331
// end ;
60813: LD_VAR 0 5
60817: RET
// export function Video ( mode ) ; begin
60818: LD_INT 0
60820: PPUSH
// ingame_video = mode ;
60821: LD_ADDR_OWVAR 52
60825: PUSH
60826: LD_VAR 0 1
60830: ST_TO_ADDR
// interface_hidden = mode ;
60831: LD_ADDR_OWVAR 54
60835: PUSH
60836: LD_VAR 0 1
60840: ST_TO_ADDR
// end ;
60841: LD_VAR 0 2
60845: RET
// export function Join ( array , element ) ; begin
60846: LD_INT 0
60848: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60849: LD_ADDR_VAR 0 3
60853: PUSH
60854: LD_VAR 0 1
60858: PPUSH
60859: LD_VAR 0 1
60863: PUSH
60864: LD_INT 1
60866: PLUS
60867: PPUSH
60868: LD_VAR 0 2
60872: PPUSH
60873: CALL_OW 1
60877: ST_TO_ADDR
// end ;
60878: LD_VAR 0 3
60882: RET
// export function JoinUnion ( array , element ) ; begin
60883: LD_INT 0
60885: PPUSH
// result := array union element ;
60886: LD_ADDR_VAR 0 3
60890: PUSH
60891: LD_VAR 0 1
60895: PUSH
60896: LD_VAR 0 2
60900: UNION
60901: ST_TO_ADDR
// end ;
60902: LD_VAR 0 3
60906: RET
// export function GetBehemoths ( side ) ; begin
60907: LD_INT 0
60909: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60910: LD_ADDR_VAR 0 2
60914: PUSH
60915: LD_INT 22
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 31
60929: PUSH
60930: LD_INT 25
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PPUSH
60941: CALL_OW 69
60945: ST_TO_ADDR
// end ;
60946: LD_VAR 0 2
60950: RET
// export function Shuffle ( array ) ; var i , index ; begin
60951: LD_INT 0
60953: PPUSH
60954: PPUSH
60955: PPUSH
// result := [ ] ;
60956: LD_ADDR_VAR 0 2
60960: PUSH
60961: EMPTY
60962: ST_TO_ADDR
// if not array then
60963: LD_VAR 0 1
60967: NOT
60968: IFFALSE 60972
// exit ;
60970: GO 61071
// Randomize ;
60972: CALL_OW 10
// for i = array downto 1 do
60976: LD_ADDR_VAR 0 3
60980: PUSH
60981: DOUBLE
60982: LD_VAR 0 1
60986: INC
60987: ST_TO_ADDR
60988: LD_INT 1
60990: PUSH
60991: FOR_DOWNTO
60992: IFFALSE 61069
// begin index := rand ( 1 , array ) ;
60994: LD_ADDR_VAR 0 4
60998: PUSH
60999: LD_INT 1
61001: PPUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 12
61011: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61012: LD_ADDR_VAR 0 2
61016: PUSH
61017: LD_VAR 0 2
61021: PPUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_INT 1
61029: PLUS
61030: PPUSH
61031: LD_VAR 0 1
61035: PUSH
61036: LD_VAR 0 4
61040: ARRAY
61041: PPUSH
61042: CALL_OW 2
61046: ST_TO_ADDR
// array := Delete ( array , index ) ;
61047: LD_ADDR_VAR 0 1
61051: PUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: LD_VAR 0 4
61061: PPUSH
61062: CALL_OW 3
61066: ST_TO_ADDR
// end ;
61067: GO 60991
61069: POP
61070: POP
// end ;
61071: LD_VAR 0 2
61075: RET
// export function GetBaseMaterials ( base ) ; begin
61076: LD_INT 0
61078: PPUSH
// result := [ 0 , 0 , 0 ] ;
61079: LD_ADDR_VAR 0 2
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// if not base then
61098: LD_VAR 0 1
61102: NOT
61103: IFFALSE 61107
// exit ;
61105: GO 61156
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61107: LD_ADDR_VAR 0 2
61111: PUSH
61112: LD_VAR 0 1
61116: PPUSH
61117: LD_INT 1
61119: PPUSH
61120: CALL_OW 275
61124: PUSH
61125: LD_VAR 0 1
61129: PPUSH
61130: LD_INT 2
61132: PPUSH
61133: CALL_OW 275
61137: PUSH
61138: LD_VAR 0 1
61142: PPUSH
61143: LD_INT 3
61145: PPUSH
61146: CALL_OW 275
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: ST_TO_ADDR
// end ;
61156: LD_VAR 0 2
61160: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61161: LD_INT 0
61163: PPUSH
61164: PPUSH
// result := array ;
61165: LD_ADDR_VAR 0 3
61169: PUSH
61170: LD_VAR 0 1
61174: ST_TO_ADDR
// if size >= result then
61175: LD_VAR 0 2
61179: PUSH
61180: LD_VAR 0 3
61184: GREATEREQUAL
61185: IFFALSE 61189
// exit ;
61187: GO 61239
// if size then
61189: LD_VAR 0 2
61193: IFFALSE 61239
// for i := array downto size do
61195: LD_ADDR_VAR 0 4
61199: PUSH
61200: DOUBLE
61201: LD_VAR 0 1
61205: INC
61206: ST_TO_ADDR
61207: LD_VAR 0 2
61211: PUSH
61212: FOR_DOWNTO
61213: IFFALSE 61237
// result := Delete ( result , result ) ;
61215: LD_ADDR_VAR 0 3
61219: PUSH
61220: LD_VAR 0 3
61224: PPUSH
61225: LD_VAR 0 3
61229: PPUSH
61230: CALL_OW 3
61234: ST_TO_ADDR
61235: GO 61212
61237: POP
61238: POP
// end ;
61239: LD_VAR 0 3
61243: RET
// export function ComExit ( unit ) ; var tmp ; begin
61244: LD_INT 0
61246: PPUSH
61247: PPUSH
// if not IsInUnit ( unit ) then
61248: LD_VAR 0 1
61252: PPUSH
61253: CALL_OW 310
61257: NOT
61258: IFFALSE 61262
// exit ;
61260: GO 61322
// tmp := IsInUnit ( unit ) ;
61262: LD_ADDR_VAR 0 3
61266: PUSH
61267: LD_VAR 0 1
61271: PPUSH
61272: CALL_OW 310
61276: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61277: LD_VAR 0 3
61281: PPUSH
61282: CALL_OW 247
61286: PUSH
61287: LD_INT 2
61289: EQUAL
61290: IFFALSE 61303
// ComExitVehicle ( unit ) else
61292: LD_VAR 0 1
61296: PPUSH
61297: CALL_OW 121
61301: GO 61312
// ComExitBuilding ( unit ) ;
61303: LD_VAR 0 1
61307: PPUSH
61308: CALL_OW 122
// result := tmp ;
61312: LD_ADDR_VAR 0 2
61316: PUSH
61317: LD_VAR 0 3
61321: ST_TO_ADDR
// end ;
61322: LD_VAR 0 2
61326: RET
// export function ComExitAll ( units ) ; var i ; begin
61327: LD_INT 0
61329: PPUSH
61330: PPUSH
// if not units then
61331: LD_VAR 0 1
61335: NOT
61336: IFFALSE 61340
// exit ;
61338: GO 61366
// for i in units do
61340: LD_ADDR_VAR 0 3
61344: PUSH
61345: LD_VAR 0 1
61349: PUSH
61350: FOR_IN
61351: IFFALSE 61364
// ComExit ( i ) ;
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL 61244 0 1
61362: GO 61350
61364: POP
61365: POP
// end ;
61366: LD_VAR 0 2
61370: RET
// export function ResetHc ; begin
61371: LD_INT 0
61373: PPUSH
// InitHc ;
61374: CALL_OW 19
// hc_importance := 0 ;
61378: LD_ADDR_OWVAR 32
61382: PUSH
61383: LD_INT 0
61385: ST_TO_ADDR
// end ;
61386: LD_VAR 0 1
61390: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61391: LD_INT 0
61393: PPUSH
61394: PPUSH
61395: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61396: LD_ADDR_VAR 0 6
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_VAR 0 3
61410: PLUS
61411: PUSH
61412: LD_INT 2
61414: DIV
61415: ST_TO_ADDR
// if _x < 0 then
61416: LD_VAR 0 6
61420: PUSH
61421: LD_INT 0
61423: LESS
61424: IFFALSE 61441
// _x := _x * - 1 ;
61426: LD_ADDR_VAR 0 6
61430: PUSH
61431: LD_VAR 0 6
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: MUL
61440: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61441: LD_ADDR_VAR 0 7
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_VAR 0 4
61455: PLUS
61456: PUSH
61457: LD_INT 2
61459: DIV
61460: ST_TO_ADDR
// if _y < 0 then
61461: LD_VAR 0 7
61465: PUSH
61466: LD_INT 0
61468: LESS
61469: IFFALSE 61486
// _y := _y * - 1 ;
61471: LD_ADDR_VAR 0 7
61475: PUSH
61476: LD_VAR 0 7
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: MUL
61485: ST_TO_ADDR
// result := [ _x , _y ] ;
61486: LD_ADDR_VAR 0 5
61490: PUSH
61491: LD_VAR 0 6
61495: PUSH
61496: LD_VAR 0 7
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: ST_TO_ADDR
// end ;
61505: LD_VAR 0 5
61509: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61510: LD_INT 0
61512: PPUSH
61513: PPUSH
61514: PPUSH
61515: PPUSH
// task := GetTaskList ( unit ) ;
61516: LD_ADDR_VAR 0 7
61520: PUSH
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL_OW 437
61530: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61531: LD_VAR 0 7
61535: NOT
61536: PUSH
61537: LD_VAR 0 1
61541: PPUSH
61542: LD_VAR 0 2
61546: PPUSH
61547: CALL_OW 308
61551: NOT
61552: AND
61553: IFFALSE 61557
// exit ;
61555: GO 61675
// if IsInArea ( unit , area ) then
61557: LD_VAR 0 1
61561: PPUSH
61562: LD_VAR 0 2
61566: PPUSH
61567: CALL_OW 308
61571: IFFALSE 61589
// begin ComMoveToArea ( unit , goAway ) ;
61573: LD_VAR 0 1
61577: PPUSH
61578: LD_VAR 0 3
61582: PPUSH
61583: CALL_OW 113
// exit ;
61587: GO 61675
// end ; if task [ 1 ] [ 1 ] <> M then
61589: LD_VAR 0 7
61593: PUSH
61594: LD_INT 1
61596: ARRAY
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PUSH
61602: LD_STRING M
61604: NONEQUAL
61605: IFFALSE 61609
// exit ;
61607: GO 61675
// x := task [ 1 ] [ 2 ] ;
61609: LD_ADDR_VAR 0 5
61613: PUSH
61614: LD_VAR 0 7
61618: PUSH
61619: LD_INT 1
61621: ARRAY
61622: PUSH
61623: LD_INT 2
61625: ARRAY
61626: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61627: LD_ADDR_VAR 0 6
61631: PUSH
61632: LD_VAR 0 7
61636: PUSH
61637: LD_INT 1
61639: ARRAY
61640: PUSH
61641: LD_INT 3
61643: ARRAY
61644: ST_TO_ADDR
// if InArea ( x , y , area ) then
61645: LD_VAR 0 5
61649: PPUSH
61650: LD_VAR 0 6
61654: PPUSH
61655: LD_VAR 0 2
61659: PPUSH
61660: CALL_OW 309
61664: IFFALSE 61675
// ComStop ( unit ) ;
61666: LD_VAR 0 1
61670: PPUSH
61671: CALL_OW 141
// end ;
61675: LD_VAR 0 4
61679: RET
// export function Abs ( value ) ; begin
61680: LD_INT 0
61682: PPUSH
// result := value ;
61683: LD_ADDR_VAR 0 2
61687: PUSH
61688: LD_VAR 0 1
61692: ST_TO_ADDR
// if value < 0 then
61693: LD_VAR 0 1
61697: PUSH
61698: LD_INT 0
61700: LESS
61701: IFFALSE 61718
// result := value * - 1 ;
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: LD_VAR 0 1
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: MUL
61717: ST_TO_ADDR
// end ;
61718: LD_VAR 0 2
61722: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61723: LD_INT 0
61725: PPUSH
61726: PPUSH
61727: PPUSH
61728: PPUSH
61729: PPUSH
61730: PPUSH
61731: PPUSH
61732: PPUSH
// if not unit or not building then
61733: LD_VAR 0 1
61737: NOT
61738: PUSH
61739: LD_VAR 0 2
61743: NOT
61744: OR
61745: IFFALSE 61749
// exit ;
61747: GO 61975
// x := GetX ( building ) ;
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_VAR 0 2
61758: PPUSH
61759: CALL_OW 250
61763: ST_TO_ADDR
// y := GetY ( building ) ;
61764: LD_ADDR_VAR 0 6
61768: PUSH
61769: LD_VAR 0 2
61773: PPUSH
61774: CALL_OW 251
61778: ST_TO_ADDR
// d := GetDir ( building ) ;
61779: LD_ADDR_VAR 0 8
61783: PUSH
61784: LD_VAR 0 2
61788: PPUSH
61789: CALL_OW 254
61793: ST_TO_ADDR
// r := 4 ;
61794: LD_ADDR_VAR 0 9
61798: PUSH
61799: LD_INT 4
61801: ST_TO_ADDR
// for i := 1 to 5 do
61802: LD_ADDR_VAR 0 10
61806: PUSH
61807: DOUBLE
61808: LD_INT 1
61810: DEC
61811: ST_TO_ADDR
61812: LD_INT 5
61814: PUSH
61815: FOR_TO
61816: IFFALSE 61973
// begin _x := ShiftX ( x , d , r + i ) ;
61818: LD_ADDR_VAR 0 5
61822: PUSH
61823: LD_VAR 0 4
61827: PPUSH
61828: LD_VAR 0 8
61832: PPUSH
61833: LD_VAR 0 9
61837: PUSH
61838: LD_VAR 0 10
61842: PLUS
61843: PPUSH
61844: CALL_OW 272
61848: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61849: LD_ADDR_VAR 0 7
61853: PUSH
61854: LD_VAR 0 6
61858: PPUSH
61859: LD_VAR 0 8
61863: PPUSH
61864: LD_VAR 0 9
61868: PUSH
61869: LD_VAR 0 10
61873: PLUS
61874: PPUSH
61875: CALL_OW 273
61879: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61880: LD_VAR 0 5
61884: PPUSH
61885: LD_VAR 0 7
61889: PPUSH
61890: CALL_OW 488
61894: PUSH
61895: LD_VAR 0 5
61899: PPUSH
61900: LD_VAR 0 7
61904: PPUSH
61905: CALL_OW 428
61909: PPUSH
61910: CALL_OW 247
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: IN
61925: NOT
61926: AND
61927: IFFALSE 61971
// begin ComMoveXY ( unit , _x , _y ) ;
61929: LD_VAR 0 1
61933: PPUSH
61934: LD_VAR 0 5
61938: PPUSH
61939: LD_VAR 0 7
61943: PPUSH
61944: CALL_OW 111
// result := [ _x , _y ] ;
61948: LD_ADDR_VAR 0 3
61952: PUSH
61953: LD_VAR 0 5
61957: PUSH
61958: LD_VAR 0 7
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: ST_TO_ADDR
// exit ;
61967: POP
61968: POP
61969: GO 61975
// end ; end ;
61971: GO 61815
61973: POP
61974: POP
// end ;
61975: LD_VAR 0 3
61979: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
61984: PPUSH
// result := 0 ;
61985: LD_ADDR_VAR 0 3
61989: PUSH
61990: LD_INT 0
61992: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61993: LD_VAR 0 1
61997: PUSH
61998: LD_INT 0
62000: LESS
62001: PUSH
62002: LD_VAR 0 1
62006: PUSH
62007: LD_INT 8
62009: GREATER
62010: OR
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 0
62019: LESS
62020: OR
62021: PUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 8
62029: GREATER
62030: OR
62031: IFFALSE 62035
// exit ;
62033: GO 62110
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62035: LD_ADDR_VAR 0 4
62039: PUSH
62040: LD_INT 22
62042: PUSH
62043: LD_VAR 0 2
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PPUSH
62052: CALL_OW 69
62056: PUSH
62057: FOR_IN
62058: IFFALSE 62108
// begin un := UnitShoot ( i ) ;
62060: LD_ADDR_VAR 0 5
62064: PUSH
62065: LD_VAR 0 4
62069: PPUSH
62070: CALL_OW 504
62074: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62075: LD_VAR 0 5
62079: PPUSH
62080: CALL_OW 255
62084: PUSH
62085: LD_VAR 0 1
62089: EQUAL
62090: IFFALSE 62106
// begin result := un ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_VAR 0 5
62101: ST_TO_ADDR
// exit ;
62102: POP
62103: POP
62104: GO 62110
// end ; end ;
62106: GO 62057
62108: POP
62109: POP
// end ;
62110: LD_VAR 0 3
62114: RET
// export function GetCargoBay ( units ) ; begin
62115: LD_INT 0
62117: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62118: LD_ADDR_VAR 0 2
62122: PUSH
62123: LD_VAR 0 1
62127: PPUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 34
62133: PUSH
62134: LD_INT 12
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 34
62143: PUSH
62144: LD_INT 51
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 34
62153: PUSH
62154: LD_INT 32
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 34
62163: PUSH
62164: LD_INT 89
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 72
62182: ST_TO_ADDR
// end ;
62183: LD_VAR 0 2
62187: RET
// export function Negate ( value ) ; begin
62188: LD_INT 0
62190: PPUSH
// result := not value ;
62191: LD_ADDR_VAR 0 2
62195: PUSH
62196: LD_VAR 0 1
62200: NOT
62201: ST_TO_ADDR
// end ;
62202: LD_VAR 0 2
62206: RET
// export function Inc ( value ) ; begin
62207: LD_INT 0
62209: PPUSH
// result := value + 1 ;
62210: LD_ADDR_VAR 0 2
62214: PUSH
62215: LD_VAR 0 1
62219: PUSH
62220: LD_INT 1
62222: PLUS
62223: ST_TO_ADDR
// end ;
62224: LD_VAR 0 2
62228: RET
// export function Dec ( value ) ; begin
62229: LD_INT 0
62231: PPUSH
// result := value - 1 ;
62232: LD_ADDR_VAR 0 2
62236: PUSH
62237: LD_VAR 0 1
62241: PUSH
62242: LD_INT 1
62244: MINUS
62245: ST_TO_ADDR
// end ;
62246: LD_VAR 0 2
62250: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62251: LD_INT 0
62253: PPUSH
62254: PPUSH
62255: PPUSH
62256: PPUSH
62257: PPUSH
62258: PPUSH
62259: PPUSH
62260: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62261: LD_VAR 0 1
62265: PPUSH
62266: LD_VAR 0 2
62270: PPUSH
62271: CALL_OW 488
62275: NOT
62276: PUSH
62277: LD_VAR 0 3
62281: PPUSH
62282: LD_VAR 0 4
62286: PPUSH
62287: CALL_OW 488
62291: NOT
62292: OR
62293: IFFALSE 62306
// begin result := - 1 ;
62295: LD_ADDR_VAR 0 5
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: ST_TO_ADDR
// exit ;
62304: GO 62541
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62306: LD_ADDR_VAR 0 12
62310: PUSH
62311: LD_VAR 0 1
62315: PPUSH
62316: LD_VAR 0 2
62320: PPUSH
62321: LD_VAR 0 3
62325: PPUSH
62326: LD_VAR 0 4
62330: PPUSH
62331: CALL 61391 0 4
62335: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62336: LD_ADDR_VAR 0 11
62340: PUSH
62341: LD_VAR 0 1
62345: PPUSH
62346: LD_VAR 0 2
62350: PPUSH
62351: LD_VAR 0 12
62355: PUSH
62356: LD_INT 1
62358: ARRAY
62359: PPUSH
62360: LD_VAR 0 12
62364: PUSH
62365: LD_INT 2
62367: ARRAY
62368: PPUSH
62369: CALL_OW 298
62373: ST_TO_ADDR
// distance := 9999 ;
62374: LD_ADDR_VAR 0 10
62378: PUSH
62379: LD_INT 9999
62381: ST_TO_ADDR
// for i := 0 to 5 do
62382: LD_ADDR_VAR 0 6
62386: PUSH
62387: DOUBLE
62388: LD_INT 0
62390: DEC
62391: ST_TO_ADDR
62392: LD_INT 5
62394: PUSH
62395: FOR_TO
62396: IFFALSE 62539
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62398: LD_ADDR_VAR 0 7
62402: PUSH
62403: LD_VAR 0 1
62407: PPUSH
62408: LD_VAR 0 6
62412: PPUSH
62413: LD_VAR 0 11
62417: PPUSH
62418: CALL_OW 272
62422: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62423: LD_ADDR_VAR 0 8
62427: PUSH
62428: LD_VAR 0 2
62432: PPUSH
62433: LD_VAR 0 6
62437: PPUSH
62438: LD_VAR 0 11
62442: PPUSH
62443: CALL_OW 273
62447: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62448: LD_VAR 0 7
62452: PPUSH
62453: LD_VAR 0 8
62457: PPUSH
62458: CALL_OW 488
62462: NOT
62463: IFFALSE 62467
// continue ;
62465: GO 62395
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62467: LD_ADDR_VAR 0 9
62471: PUSH
62472: LD_VAR 0 12
62476: PUSH
62477: LD_INT 1
62479: ARRAY
62480: PPUSH
62481: LD_VAR 0 12
62485: PUSH
62486: LD_INT 2
62488: ARRAY
62489: PPUSH
62490: LD_VAR 0 7
62494: PPUSH
62495: LD_VAR 0 8
62499: PPUSH
62500: CALL_OW 298
62504: ST_TO_ADDR
// if tmp < distance then
62505: LD_VAR 0 9
62509: PUSH
62510: LD_VAR 0 10
62514: LESS
62515: IFFALSE 62537
// begin result := i ;
62517: LD_ADDR_VAR 0 5
62521: PUSH
62522: LD_VAR 0 6
62526: ST_TO_ADDR
// distance := tmp ;
62527: LD_ADDR_VAR 0 10
62531: PUSH
62532: LD_VAR 0 9
62536: ST_TO_ADDR
// end ; end ;
62537: GO 62395
62539: POP
62540: POP
// end ;
62541: LD_VAR 0 5
62545: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62546: LD_INT 0
62548: PPUSH
62549: PPUSH
// if not driver or not IsInUnit ( driver ) then
62550: LD_VAR 0 1
62554: NOT
62555: PUSH
62556: LD_VAR 0 1
62560: PPUSH
62561: CALL_OW 310
62565: NOT
62566: OR
62567: IFFALSE 62571
// exit ;
62569: GO 62661
// vehicle := IsInUnit ( driver ) ;
62571: LD_ADDR_VAR 0 3
62575: PUSH
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 310
62585: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62586: LD_VAR 0 1
62590: PPUSH
62591: LD_STRING \
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: LD_STRING E
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_VAR 0 3
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PPUSH
62657: CALL_OW 446
// end ;
62661: LD_VAR 0 2
62665: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62666: LD_INT 0
62668: PPUSH
62669: PPUSH
// if not driver or not IsInUnit ( driver ) then
62670: LD_VAR 0 1
62674: NOT
62675: PUSH
62676: LD_VAR 0 1
62680: PPUSH
62681: CALL_OW 310
62685: NOT
62686: OR
62687: IFFALSE 62691
// exit ;
62689: GO 62781
// vehicle := IsInUnit ( driver ) ;
62691: LD_ADDR_VAR 0 3
62695: PUSH
62696: LD_VAR 0 1
62700: PPUSH
62701: CALL_OW 310
62705: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_STRING \
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: PUSH
62741: LD_STRING E
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_VAR 0 3
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PPUSH
62777: CALL_OW 447
// end ;
62781: LD_VAR 0 2
62785: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62786: LD_INT 0
62788: PPUSH
62789: PPUSH
62790: PPUSH
// tmp := [ ] ;
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: EMPTY
62797: ST_TO_ADDR
// for i in units do
62798: LD_ADDR_VAR 0 4
62802: PUSH
62803: LD_VAR 0 1
62807: PUSH
62808: FOR_IN
62809: IFFALSE 62847
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62811: LD_ADDR_VAR 0 5
62815: PUSH
62816: LD_VAR 0 5
62820: PPUSH
62821: LD_VAR 0 5
62825: PUSH
62826: LD_INT 1
62828: PLUS
62829: PPUSH
62830: LD_VAR 0 4
62834: PPUSH
62835: CALL_OW 256
62839: PPUSH
62840: CALL_OW 2
62844: ST_TO_ADDR
62845: GO 62808
62847: POP
62848: POP
// if not tmp then
62849: LD_VAR 0 5
62853: NOT
62854: IFFALSE 62858
// exit ;
62856: GO 62906
// if asc then
62858: LD_VAR 0 2
62862: IFFALSE 62886
// result := SortListByListAsc ( units , tmp ) else
62864: LD_ADDR_VAR 0 3
62868: PUSH
62869: LD_VAR 0 1
62873: PPUSH
62874: LD_VAR 0 5
62878: PPUSH
62879: CALL_OW 76
62883: ST_TO_ADDR
62884: GO 62906
// result := SortListByListDesc ( units , tmp ) ;
62886: LD_ADDR_VAR 0 3
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: LD_VAR 0 5
62900: PPUSH
62901: CALL_OW 77
62905: ST_TO_ADDR
// end ;
62906: LD_VAR 0 3
62910: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62911: LD_INT 0
62913: PPUSH
62914: PPUSH
// task := GetTaskList ( mech ) ;
62915: LD_ADDR_VAR 0 4
62919: PUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: CALL_OW 437
62929: ST_TO_ADDR
// if not task then
62930: LD_VAR 0 4
62934: NOT
62935: IFFALSE 62939
// exit ;
62937: GO 62981
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62939: LD_ADDR_VAR 0 3
62943: PUSH
62944: LD_VAR 0 4
62948: PUSH
62949: LD_INT 1
62951: ARRAY
62952: PUSH
62953: LD_INT 1
62955: ARRAY
62956: PUSH
62957: LD_STRING r
62959: EQUAL
62960: PUSH
62961: LD_VAR 0 4
62965: PUSH
62966: LD_INT 1
62968: ARRAY
62969: PUSH
62970: LD_INT 4
62972: ARRAY
62973: PUSH
62974: LD_VAR 0 2
62978: EQUAL
62979: AND
62980: ST_TO_ADDR
// end ;
62981: LD_VAR 0 3
62985: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62986: LD_INT 0
62988: PPUSH
// SetDir ( unit , d ) ;
62989: LD_VAR 0 1
62993: PPUSH
62994: LD_VAR 0 4
62998: PPUSH
62999: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63003: LD_VAR 0 1
63007: PPUSH
63008: LD_VAR 0 2
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: LD_VAR 0 5
63022: PPUSH
63023: CALL_OW 48
// end ;
63027: LD_VAR 0 6
63031: RET
// export function ToNaturalNumber ( number ) ; begin
63032: LD_INT 0
63034: PPUSH
// result := number div 1 ;
63035: LD_ADDR_VAR 0 2
63039: PUSH
63040: LD_VAR 0 1
63044: PUSH
63045: LD_INT 1
63047: DIV
63048: ST_TO_ADDR
// if number < 0 then
63049: LD_VAR 0 1
63053: PUSH
63054: LD_INT 0
63056: LESS
63057: IFFALSE 63067
// result := 0 ;
63059: LD_ADDR_VAR 0 2
63063: PUSH
63064: LD_INT 0
63066: ST_TO_ADDR
// end ;
63067: LD_VAR 0 2
63071: RET
// export function SortByClass ( units , class ) ; var un ; begin
63072: LD_INT 0
63074: PPUSH
63075: PPUSH
// if not units or not class then
63076: LD_VAR 0 1
63080: NOT
63081: PUSH
63082: LD_VAR 0 2
63086: NOT
63087: OR
63088: IFFALSE 63092
// exit ;
63090: GO 63187
// result := [ ] ;
63092: LD_ADDR_VAR 0 3
63096: PUSH
63097: EMPTY
63098: ST_TO_ADDR
// for un in units do
63099: LD_ADDR_VAR 0 4
63103: PUSH
63104: LD_VAR 0 1
63108: PUSH
63109: FOR_IN
63110: IFFALSE 63185
// if GetClass ( un ) = class then
63112: LD_VAR 0 4
63116: PPUSH
63117: CALL_OW 257
63121: PUSH
63122: LD_VAR 0 2
63126: EQUAL
63127: IFFALSE 63154
// result := Insert ( result , 1 , un ) else
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_VAR 0 3
63138: PPUSH
63139: LD_INT 1
63141: PPUSH
63142: LD_VAR 0 4
63146: PPUSH
63147: CALL_OW 2
63151: ST_TO_ADDR
63152: GO 63183
// result := Replace ( result , result + 1 , un ) ;
63154: LD_ADDR_VAR 0 3
63158: PUSH
63159: LD_VAR 0 3
63163: PPUSH
63164: LD_VAR 0 3
63168: PUSH
63169: LD_INT 1
63171: PLUS
63172: PPUSH
63173: LD_VAR 0 4
63177: PPUSH
63178: CALL_OW 1
63182: ST_TO_ADDR
63183: GO 63109
63185: POP
63186: POP
// end ;
63187: LD_VAR 0 3
63191: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63192: LD_INT 0
63194: PPUSH
63195: PPUSH
63196: PPUSH
63197: PPUSH
63198: PPUSH
63199: PPUSH
63200: PPUSH
// result := [ ] ;
63201: LD_ADDR_VAR 0 4
63205: PUSH
63206: EMPTY
63207: ST_TO_ADDR
// if x - r < 0 then
63208: LD_VAR 0 1
63212: PUSH
63213: LD_VAR 0 3
63217: MINUS
63218: PUSH
63219: LD_INT 0
63221: LESS
63222: IFFALSE 63234
// min_x := 0 else
63224: LD_ADDR_VAR 0 8
63228: PUSH
63229: LD_INT 0
63231: ST_TO_ADDR
63232: GO 63250
// min_x := x - r ;
63234: LD_ADDR_VAR 0 8
63238: PUSH
63239: LD_VAR 0 1
63243: PUSH
63244: LD_VAR 0 3
63248: MINUS
63249: ST_TO_ADDR
// if y - r < 0 then
63250: LD_VAR 0 2
63254: PUSH
63255: LD_VAR 0 3
63259: MINUS
63260: PUSH
63261: LD_INT 0
63263: LESS
63264: IFFALSE 63276
// min_y := 0 else
63266: LD_ADDR_VAR 0 7
63270: PUSH
63271: LD_INT 0
63273: ST_TO_ADDR
63274: GO 63292
// min_y := y - r ;
63276: LD_ADDR_VAR 0 7
63280: PUSH
63281: LD_VAR 0 2
63285: PUSH
63286: LD_VAR 0 3
63290: MINUS
63291: ST_TO_ADDR
// max_x := x + r ;
63292: LD_ADDR_VAR 0 9
63296: PUSH
63297: LD_VAR 0 1
63301: PUSH
63302: LD_VAR 0 3
63306: PLUS
63307: ST_TO_ADDR
// max_y := y + r ;
63308: LD_ADDR_VAR 0 10
63312: PUSH
63313: LD_VAR 0 2
63317: PUSH
63318: LD_VAR 0 3
63322: PLUS
63323: ST_TO_ADDR
// for _x = min_x to max_x do
63324: LD_ADDR_VAR 0 5
63328: PUSH
63329: DOUBLE
63330: LD_VAR 0 8
63334: DEC
63335: ST_TO_ADDR
63336: LD_VAR 0 9
63340: PUSH
63341: FOR_TO
63342: IFFALSE 63443
// for _y = min_y to max_y do
63344: LD_ADDR_VAR 0 6
63348: PUSH
63349: DOUBLE
63350: LD_VAR 0 7
63354: DEC
63355: ST_TO_ADDR
63356: LD_VAR 0 10
63360: PUSH
63361: FOR_TO
63362: IFFALSE 63439
// begin if not ValidHex ( _x , _y ) then
63364: LD_VAR 0 5
63368: PPUSH
63369: LD_VAR 0 6
63373: PPUSH
63374: CALL_OW 488
63378: NOT
63379: IFFALSE 63383
// continue ;
63381: GO 63361
// if GetResourceTypeXY ( _x , _y ) then
63383: LD_VAR 0 5
63387: PPUSH
63388: LD_VAR 0 6
63392: PPUSH
63393: CALL_OW 283
63397: IFFALSE 63437
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63399: LD_ADDR_VAR 0 4
63403: PUSH
63404: LD_VAR 0 4
63408: PPUSH
63409: LD_VAR 0 4
63413: PUSH
63414: LD_INT 1
63416: PLUS
63417: PPUSH
63418: LD_VAR 0 5
63422: PUSH
63423: LD_VAR 0 6
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PPUSH
63432: CALL_OW 1
63436: ST_TO_ADDR
// end ;
63437: GO 63361
63439: POP
63440: POP
63441: GO 63341
63443: POP
63444: POP
// end ;
63445: LD_VAR 0 4
63449: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63450: LD_INT 0
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
63456: PPUSH
63457: PPUSH
63458: PPUSH
63459: PPUSH
// if not units then
63460: LD_VAR 0 1
63464: NOT
63465: IFFALSE 63469
// exit ;
63467: GO 63993
// result := UnitFilter ( units , [ f_ok ] ) ;
63469: LD_ADDR_VAR 0 3
63473: PUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: LD_INT 50
63481: PUSH
63482: EMPTY
63483: LIST
63484: PPUSH
63485: CALL_OW 72
63489: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63490: LD_ADDR_VAR 0 8
63494: PUSH
63495: LD_VAR 0 1
63499: PUSH
63500: LD_INT 1
63502: ARRAY
63503: PPUSH
63504: CALL_OW 255
63508: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63509: LD_ADDR_VAR 0 10
63513: PUSH
63514: LD_INT 29
63516: PUSH
63517: LD_INT 91
63519: PUSH
63520: LD_INT 49
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// if not result then
63528: LD_VAR 0 3
63532: NOT
63533: IFFALSE 63537
// exit ;
63535: GO 63993
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63537: LD_ADDR_VAR 0 5
63541: PUSH
63542: LD_INT 81
63544: PUSH
63545: LD_VAR 0 8
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 69
63558: ST_TO_ADDR
// for i in result do
63559: LD_ADDR_VAR 0 4
63563: PUSH
63564: LD_VAR 0 3
63568: PUSH
63569: FOR_IN
63570: IFFALSE 63991
// begin tag := GetTag ( i ) + 1 ;
63572: LD_ADDR_VAR 0 9
63576: PUSH
63577: LD_VAR 0 4
63581: PPUSH
63582: CALL_OW 110
63586: PUSH
63587: LD_INT 1
63589: PLUS
63590: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63591: LD_ADDR_VAR 0 7
63595: PUSH
63596: LD_VAR 0 4
63600: PPUSH
63601: CALL_OW 250
63605: PPUSH
63606: LD_VAR 0 4
63610: PPUSH
63611: CALL_OW 251
63615: PPUSH
63616: LD_INT 6
63618: PPUSH
63619: CALL 63192 0 3
63623: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63624: LD_VAR 0 4
63628: PPUSH
63629: CALL_OW 247
63633: PUSH
63634: LD_INT 2
63636: EQUAL
63637: PUSH
63638: LD_VAR 0 7
63642: AND
63643: PUSH
63644: LD_VAR 0 4
63648: PPUSH
63649: CALL_OW 264
63653: PUSH
63654: LD_VAR 0 10
63658: IN
63659: NOT
63660: AND
63661: IFFALSE 63700
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63663: LD_VAR 0 4
63667: PPUSH
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PPUSH
63681: LD_VAR 0 7
63685: PUSH
63686: LD_INT 1
63688: ARRAY
63689: PUSH
63690: LD_INT 2
63692: ARRAY
63693: PPUSH
63694: CALL_OW 116
63698: GO 63989
// if path > tag then
63700: LD_VAR 0 2
63704: PUSH
63705: LD_VAR 0 9
63709: GREATER
63710: IFFALSE 63918
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63712: LD_ADDR_VAR 0 6
63716: PUSH
63717: LD_VAR 0 5
63721: PPUSH
63722: LD_INT 91
63724: PUSH
63725: LD_VAR 0 4
63729: PUSH
63730: LD_INT 8
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: LIST
63737: PPUSH
63738: CALL_OW 72
63742: ST_TO_ADDR
// if nearEnemy then
63743: LD_VAR 0 6
63747: IFFALSE 63816
// begin if GetWeapon ( i ) = ru_time_lapser then
63749: LD_VAR 0 4
63753: PPUSH
63754: CALL_OW 264
63758: PUSH
63759: LD_INT 49
63761: EQUAL
63762: IFFALSE 63790
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63764: LD_VAR 0 4
63768: PPUSH
63769: LD_VAR 0 6
63773: PPUSH
63774: LD_VAR 0 4
63778: PPUSH
63779: CALL_OW 74
63783: PPUSH
63784: CALL_OW 112
63788: GO 63814
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63790: LD_VAR 0 4
63794: PPUSH
63795: LD_VAR 0 6
63799: PPUSH
63800: LD_VAR 0 4
63804: PPUSH
63805: CALL_OW 74
63809: PPUSH
63810: CALL 64918 0 2
// end else
63814: GO 63916
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63816: LD_VAR 0 4
63820: PPUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_VAR 0 9
63830: ARRAY
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PPUSH
63836: LD_VAR 0 2
63840: PUSH
63841: LD_VAR 0 9
63845: ARRAY
63846: PUSH
63847: LD_INT 2
63849: ARRAY
63850: PPUSH
63851: CALL_OW 297
63855: PUSH
63856: LD_INT 6
63858: GREATER
63859: IFFALSE 63902
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63861: LD_VAR 0 4
63865: PPUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_VAR 0 9
63875: ARRAY
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: PPUSH
63881: LD_VAR 0 2
63885: PUSH
63886: LD_VAR 0 9
63890: ARRAY
63891: PUSH
63892: LD_INT 2
63894: ARRAY
63895: PPUSH
63896: CALL_OW 114
63900: GO 63916
// SetTag ( i , tag ) ;
63902: LD_VAR 0 4
63906: PPUSH
63907: LD_VAR 0 9
63911: PPUSH
63912: CALL_OW 109
// end else
63916: GO 63989
// if enemy then
63918: LD_VAR 0 5
63922: IFFALSE 63989
// begin if GetWeapon ( i ) = ru_time_lapser then
63924: LD_VAR 0 4
63928: PPUSH
63929: CALL_OW 264
63933: PUSH
63934: LD_INT 49
63936: EQUAL
63937: IFFALSE 63965
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63939: LD_VAR 0 4
63943: PPUSH
63944: LD_VAR 0 5
63948: PPUSH
63949: LD_VAR 0 4
63953: PPUSH
63954: CALL_OW 74
63958: PPUSH
63959: CALL_OW 112
63963: GO 63989
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63965: LD_VAR 0 4
63969: PPUSH
63970: LD_VAR 0 5
63974: PPUSH
63975: LD_VAR 0 4
63979: PPUSH
63980: CALL_OW 74
63984: PPUSH
63985: CALL 64918 0 2
// end ; end ;
63989: GO 63569
63991: POP
63992: POP
// end ;
63993: LD_VAR 0 3
63997: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
64002: PPUSH
// if not unit or IsInUnit ( unit ) then
64003: LD_VAR 0 1
64007: NOT
64008: PUSH
64009: LD_VAR 0 1
64013: PPUSH
64014: CALL_OW 310
64018: OR
64019: IFFALSE 64023
// exit ;
64021: GO 64114
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64023: LD_ADDR_VAR 0 4
64027: PUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 250
64037: PPUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_INT 1
64045: PPUSH
64046: CALL_OW 272
64050: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64051: LD_ADDR_VAR 0 5
64055: PUSH
64056: LD_VAR 0 1
64060: PPUSH
64061: CALL_OW 251
64065: PPUSH
64066: LD_VAR 0 2
64070: PPUSH
64071: LD_INT 1
64073: PPUSH
64074: CALL_OW 273
64078: ST_TO_ADDR
// if ValidHex ( x , y ) then
64079: LD_VAR 0 4
64083: PPUSH
64084: LD_VAR 0 5
64088: PPUSH
64089: CALL_OW 488
64093: IFFALSE 64114
// ComTurnXY ( unit , x , y ) ;
64095: LD_VAR 0 1
64099: PPUSH
64100: LD_VAR 0 4
64104: PPUSH
64105: LD_VAR 0 5
64109: PPUSH
64110: CALL_OW 118
// end ;
64114: LD_VAR 0 3
64118: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64119: LD_INT 0
64121: PPUSH
64122: PPUSH
// result := false ;
64123: LD_ADDR_VAR 0 3
64127: PUSH
64128: LD_INT 0
64130: ST_TO_ADDR
// if not units then
64131: LD_VAR 0 2
64135: NOT
64136: IFFALSE 64140
// exit ;
64138: GO 64185
// for i in units do
64140: LD_ADDR_VAR 0 4
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: FOR_IN
64151: IFFALSE 64183
// if See ( side , i ) then
64153: LD_VAR 0 1
64157: PPUSH
64158: LD_VAR 0 4
64162: PPUSH
64163: CALL_OW 292
64167: IFFALSE 64181
// begin result := true ;
64169: LD_ADDR_VAR 0 3
64173: PUSH
64174: LD_INT 1
64176: ST_TO_ADDR
// exit ;
64177: POP
64178: POP
64179: GO 64185
// end ;
64181: GO 64150
64183: POP
64184: POP
// end ;
64185: LD_VAR 0 3
64189: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64190: LD_INT 0
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
// if not unit or not points then
64196: LD_VAR 0 1
64200: NOT
64201: PUSH
64202: LD_VAR 0 2
64206: NOT
64207: OR
64208: IFFALSE 64212
// exit ;
64210: GO 64302
// dist := 99999 ;
64212: LD_ADDR_VAR 0 5
64216: PUSH
64217: LD_INT 99999
64219: ST_TO_ADDR
// for i in points do
64220: LD_ADDR_VAR 0 4
64224: PUSH
64225: LD_VAR 0 2
64229: PUSH
64230: FOR_IN
64231: IFFALSE 64300
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64233: LD_ADDR_VAR 0 6
64237: PUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: LD_VAR 0 4
64247: PUSH
64248: LD_INT 1
64250: ARRAY
64251: PPUSH
64252: LD_VAR 0 4
64256: PUSH
64257: LD_INT 2
64259: ARRAY
64260: PPUSH
64261: CALL_OW 297
64265: ST_TO_ADDR
// if tmpDist < dist then
64266: LD_VAR 0 6
64270: PUSH
64271: LD_VAR 0 5
64275: LESS
64276: IFFALSE 64298
// begin result := i ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_VAR 0 4
64287: ST_TO_ADDR
// dist := tmpDist ;
64288: LD_ADDR_VAR 0 5
64292: PUSH
64293: LD_VAR 0 6
64297: ST_TO_ADDR
// end ; end ;
64298: GO 64230
64300: POP
64301: POP
// end ;
64302: LD_VAR 0 3
64306: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64307: LD_INT 0
64309: PPUSH
// uc_side := side ;
64310: LD_ADDR_OWVAR 20
64314: PUSH
64315: LD_VAR 0 1
64319: ST_TO_ADDR
// uc_nation := 3 ;
64320: LD_ADDR_OWVAR 21
64324: PUSH
64325: LD_INT 3
64327: ST_TO_ADDR
// vc_chassis := 25 ;
64328: LD_ADDR_OWVAR 37
64332: PUSH
64333: LD_INT 25
64335: ST_TO_ADDR
// vc_engine := engine_siberite ;
64336: LD_ADDR_OWVAR 39
64340: PUSH
64341: LD_INT 3
64343: ST_TO_ADDR
// vc_control := control_computer ;
64344: LD_ADDR_OWVAR 38
64348: PUSH
64349: LD_INT 3
64351: ST_TO_ADDR
// vc_weapon := 59 ;
64352: LD_ADDR_OWVAR 40
64356: PUSH
64357: LD_INT 59
64359: ST_TO_ADDR
// result := CreateVehicle ;
64360: LD_ADDR_VAR 0 5
64364: PUSH
64365: CALL_OW 45
64369: ST_TO_ADDR
// SetDir ( result , d ) ;
64370: LD_VAR 0 5
64374: PPUSH
64375: LD_VAR 0 4
64379: PPUSH
64380: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64384: LD_VAR 0 5
64388: PPUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: LD_VAR 0 3
64398: PPUSH
64399: LD_INT 0
64401: PPUSH
64402: CALL_OW 48
// end ;
64406: LD_VAR 0 5
64410: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64411: LD_INT 0
64413: PPUSH
64414: PPUSH
64415: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64416: LD_ADDR_VAR 0 2
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64439: LD_VAR 0 1
64443: NOT
64444: PUSH
64445: LD_VAR 0 1
64449: PPUSH
64450: CALL_OW 264
64454: PUSH
64455: LD_INT 12
64457: PUSH
64458: LD_INT 51
64460: PUSH
64461: LD_INT 32
64463: PUSH
64464: LD_INT 89
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: IN
64473: NOT
64474: OR
64475: IFFALSE 64479
// exit ;
64477: GO 64577
// for i := 1 to 3 do
64479: LD_ADDR_VAR 0 3
64483: PUSH
64484: DOUBLE
64485: LD_INT 1
64487: DEC
64488: ST_TO_ADDR
64489: LD_INT 3
64491: PUSH
64492: FOR_TO
64493: IFFALSE 64575
// begin tmp := GetCargo ( cargo , i ) ;
64495: LD_ADDR_VAR 0 4
64499: PUSH
64500: LD_VAR 0 1
64504: PPUSH
64505: LD_VAR 0 3
64509: PPUSH
64510: CALL_OW 289
64514: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64515: LD_ADDR_VAR 0 2
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_VAR 0 3
64529: PPUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: CALL_OW 1
64539: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64540: LD_ADDR_VAR 0 2
64544: PUSH
64545: LD_VAR 0 2
64549: PPUSH
64550: LD_INT 4
64552: PPUSH
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 4
64560: ARRAY
64561: PUSH
64562: LD_VAR 0 4
64566: PLUS
64567: PPUSH
64568: CALL_OW 1
64572: ST_TO_ADDR
// end ;
64573: GO 64492
64575: POP
64576: POP
// end ;
64577: LD_VAR 0 2
64581: RET
// export function Length ( array ) ; begin
64582: LD_INT 0
64584: PPUSH
// result := array + 0 ;
64585: LD_ADDR_VAR 0 2
64589: PUSH
64590: LD_VAR 0 1
64594: PUSH
64595: LD_INT 0
64597: PLUS
64598: ST_TO_ADDR
// end ;
64599: LD_VAR 0 2
64603: RET
// export function PrepareArray ( array ) ; begin
64604: LD_INT 0
64606: PPUSH
// result := array diff 0 ;
64607: LD_ADDR_VAR 0 2
64611: PUSH
64612: LD_VAR 0 1
64616: PUSH
64617: LD_INT 0
64619: DIFF
64620: ST_TO_ADDR
// if not result [ 1 ] then
64621: LD_VAR 0 2
64625: PUSH
64626: LD_INT 1
64628: ARRAY
64629: NOT
64630: IFFALSE 64650
// result := Delete ( result , 1 ) ;
64632: LD_ADDR_VAR 0 2
64636: PUSH
64637: LD_VAR 0 2
64641: PPUSH
64642: LD_INT 1
64644: PPUSH
64645: CALL_OW 3
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 2
64654: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64655: LD_INT 0
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
// sibRocketRange := 25 ;
64661: LD_ADDR_VAR 0 6
64665: PUSH
64666: LD_INT 25
64668: ST_TO_ADDR
// result := false ;
64669: LD_ADDR_VAR 0 4
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// for i := 0 to 5 do
64677: LD_ADDR_VAR 0 5
64681: PUSH
64682: DOUBLE
64683: LD_INT 0
64685: DEC
64686: ST_TO_ADDR
64687: LD_INT 5
64689: PUSH
64690: FOR_TO
64691: IFFALSE 64758
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64693: LD_VAR 0 1
64697: PPUSH
64698: LD_VAR 0 5
64702: PPUSH
64703: LD_VAR 0 6
64707: PPUSH
64708: CALL_OW 272
64712: PPUSH
64713: LD_VAR 0 2
64717: PPUSH
64718: LD_VAR 0 5
64722: PPUSH
64723: LD_VAR 0 6
64727: PPUSH
64728: CALL_OW 273
64732: PPUSH
64733: LD_VAR 0 3
64737: PPUSH
64738: CALL_OW 309
64742: IFFALSE 64756
// begin result := true ;
64744: LD_ADDR_VAR 0 4
64748: PUSH
64749: LD_INT 1
64751: ST_TO_ADDR
// exit ;
64752: POP
64753: POP
64754: GO 64760
// end ;
64756: GO 64690
64758: POP
64759: POP
// end ;
64760: LD_VAR 0 4
64764: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64765: LD_INT 0
64767: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64768: LD_VAR 0 1
64772: PPUSH
64773: LD_VAR 0 2
64777: PPUSH
64778: LD_INT 0
64780: PPUSH
64781: LD_INT 0
64783: PPUSH
64784: LD_INT 1
64786: PPUSH
64787: LD_INT 0
64789: PPUSH
64790: CALL_OW 587
// end ;
64794: LD_VAR 0 3
64798: RET
// export function CenterOnNow ( unit ) ; begin
64799: LD_INT 0
64801: PPUSH
// result := IsInUnit ( unit ) ;
64802: LD_ADDR_VAR 0 2
64806: PUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: CALL_OW 310
64816: ST_TO_ADDR
// if not result then
64817: LD_VAR 0 2
64821: NOT
64822: IFFALSE 64834
// result := unit ;
64824: LD_ADDR_VAR 0 2
64828: PUSH
64829: LD_VAR 0 1
64833: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 87
// end ;
64843: LD_VAR 0 2
64847: RET
// export function ComMoveHex ( unit , hex ) ; begin
64848: LD_INT 0
64850: PPUSH
// if not hex then
64851: LD_VAR 0 2
64855: NOT
64856: IFFALSE 64860
// exit ;
64858: GO 64913
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64860: LD_VAR 0 2
64864: PUSH
64865: LD_INT 1
64867: ARRAY
64868: PPUSH
64869: LD_VAR 0 2
64873: PUSH
64874: LD_INT 2
64876: ARRAY
64877: PPUSH
64878: CALL_OW 428
64882: IFFALSE 64886
// exit ;
64884: GO 64913
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64886: LD_VAR 0 1
64890: PPUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_INT 1
64898: ARRAY
64899: PPUSH
64900: LD_VAR 0 2
64904: PUSH
64905: LD_INT 2
64907: ARRAY
64908: PPUSH
64909: CALL_OW 111
// end ;
64913: LD_VAR 0 3
64917: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64918: LD_INT 0
64920: PPUSH
64921: PPUSH
64922: PPUSH
// if not unit or not enemy then
64923: LD_VAR 0 1
64927: NOT
64928: PUSH
64929: LD_VAR 0 2
64933: NOT
64934: OR
64935: IFFALSE 64939
// exit ;
64937: GO 65063
// x := GetX ( enemy ) ;
64939: LD_ADDR_VAR 0 4
64943: PUSH
64944: LD_VAR 0 2
64948: PPUSH
64949: CALL_OW 250
64953: ST_TO_ADDR
// y := GetY ( enemy ) ;
64954: LD_ADDR_VAR 0 5
64958: PUSH
64959: LD_VAR 0 2
64963: PPUSH
64964: CALL_OW 251
64968: ST_TO_ADDR
// if ValidHex ( x , y ) then
64969: LD_VAR 0 4
64973: PPUSH
64974: LD_VAR 0 5
64978: PPUSH
64979: CALL_OW 488
64983: IFFALSE 65063
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
64985: LD_VAR 0 2
64989: PPUSH
64990: CALL_OW 247
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: IN
65005: PUSH
65006: LD_VAR 0 1
65010: PPUSH
65011: CALL_OW 255
65015: PPUSH
65016: LD_VAR 0 2
65020: PPUSH
65021: CALL_OW 292
65025: AND
65026: IFFALSE 65044
// ComAttackUnit ( unit , enemy ) else
65028: LD_VAR 0 1
65032: PPUSH
65033: LD_VAR 0 2
65037: PPUSH
65038: CALL_OW 115
65042: GO 65063
// ComAgressiveMove ( unit , x , y ) ;
65044: LD_VAR 0 1
65048: PPUSH
65049: LD_VAR 0 4
65053: PPUSH
65054: LD_VAR 0 5
65058: PPUSH
65059: CALL_OW 114
// end ; end_of_file
65063: LD_VAR 0 3
65067: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65068: LD_VAR 0 1
65072: PUSH
65073: LD_INT 200
65075: DOUBLE
65076: GREATEREQUAL
65077: IFFALSE 65085
65079: LD_INT 299
65081: DOUBLE
65082: LESSEQUAL
65083: IFTRUE 65087
65085: GO 65119
65087: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65088: LD_VAR 0 1
65092: PPUSH
65093: LD_VAR 0 2
65097: PPUSH
65098: LD_VAR 0 3
65102: PPUSH
65103: LD_VAR 0 4
65107: PPUSH
65108: LD_VAR 0 5
65112: PPUSH
65113: CALL 65607 0 5
65117: GO 65196
65119: LD_INT 300
65121: DOUBLE
65122: GREATEREQUAL
65123: IFFALSE 65131
65125: LD_INT 399
65127: DOUBLE
65128: LESSEQUAL
65129: IFTRUE 65133
65131: GO 65195
65133: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65134: LD_VAR 0 1
65138: PPUSH
65139: LD_VAR 0 2
65143: PPUSH
65144: LD_VAR 0 3
65148: PPUSH
65149: LD_VAR 0 4
65153: PPUSH
65154: LD_VAR 0 5
65158: PPUSH
65159: LD_VAR 0 6
65163: PPUSH
65164: LD_VAR 0 7
65168: PPUSH
65169: LD_VAR 0 8
65173: PPUSH
65174: LD_VAR 0 9
65178: PPUSH
65179: LD_VAR 0 10
65183: PPUSH
65184: LD_VAR 0 11
65188: PPUSH
65189: CALL 20226 0 11
65193: GO 65196
65195: POP
// end ;
65196: PPOPN 11
65198: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65199: LD_VAR 0 1
65203: PPUSH
65204: LD_VAR 0 2
65208: PPUSH
65209: LD_VAR 0 3
65213: PPUSH
65214: LD_VAR 0 4
65218: PPUSH
65219: LD_VAR 0 5
65223: PPUSH
65224: CALL 65343 0 5
// end ; end_of_file
65228: PPOPN 5
65230: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65231: LD_INT 0
65233: PPUSH
65234: PPUSH
65235: PPUSH
65236: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65237: LD_VAR 0 1
65241: PPUSH
65242: CALL_OW 264
65246: PUSH
65247: LD_INT 91
65249: EQUAL
65250: IFFALSE 65322
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65252: LD_INT 68
65254: PPUSH
65255: LD_VAR 0 1
65259: PPUSH
65260: CALL_OW 255
65264: PPUSH
65265: CALL_OW 321
65269: PUSH
65270: LD_INT 2
65272: EQUAL
65273: IFFALSE 65285
// eff := 70 else
65275: LD_ADDR_VAR 0 4
65279: PUSH
65280: LD_INT 70
65282: ST_TO_ADDR
65283: GO 65293
// eff := 30 ;
65285: LD_ADDR_VAR 0 4
65289: PUSH
65290: LD_INT 30
65292: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 250
65302: PPUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: CALL_OW 251
65312: PPUSH
65313: LD_VAR 0 4
65317: PPUSH
65318: CALL_OW 495
// end ; end ;
65322: LD_VAR 0 2
65326: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65327: LD_INT 0
65329: PPUSH
// end ;
65330: LD_VAR 0 4
65334: RET
// export function SOS_Command ( cmd ) ; begin
65335: LD_INT 0
65337: PPUSH
// end ;
65338: LD_VAR 0 2
65342: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65343: LD_INT 0
65345: PPUSH
// end ;
65346: LD_VAR 0 6
65350: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65351: LD_INT 0
65353: PPUSH
65354: PPUSH
// if not vehicle or not factory then
65355: LD_VAR 0 1
65359: NOT
65360: PUSH
65361: LD_VAR 0 2
65365: NOT
65366: OR
65367: IFFALSE 65371
// exit ;
65369: GO 65602
// if factoryWaypoints >= factory then
65371: LD_EXP 78
65375: PUSH
65376: LD_VAR 0 2
65380: GREATEREQUAL
65381: IFFALSE 65602
// if factoryWaypoints [ factory ] then
65383: LD_EXP 78
65387: PUSH
65388: LD_VAR 0 2
65392: ARRAY
65393: IFFALSE 65602
// begin if GetControl ( vehicle ) = control_manual then
65395: LD_VAR 0 1
65399: PPUSH
65400: CALL_OW 263
65404: PUSH
65405: LD_INT 1
65407: EQUAL
65408: IFFALSE 65489
// begin driver := IsDrivenBy ( vehicle ) ;
65410: LD_ADDR_VAR 0 4
65414: PUSH
65415: LD_VAR 0 1
65419: PPUSH
65420: CALL_OW 311
65424: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65425: LD_VAR 0 4
65429: PPUSH
65430: LD_EXP 78
65434: PUSH
65435: LD_VAR 0 2
65439: ARRAY
65440: PUSH
65441: LD_INT 3
65443: ARRAY
65444: PPUSH
65445: LD_EXP 78
65449: PUSH
65450: LD_VAR 0 2
65454: ARRAY
65455: PUSH
65456: LD_INT 4
65458: ARRAY
65459: PPUSH
65460: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65464: LD_VAR 0 4
65468: PPUSH
65469: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65473: LD_VAR 0 4
65477: PPUSH
65478: LD_VAR 0 2
65482: PPUSH
65483: CALL_OW 180
// end else
65487: GO 65602
// if GetControl ( vehicle ) = control_remote then
65489: LD_VAR 0 1
65493: PPUSH
65494: CALL_OW 263
65498: PUSH
65499: LD_INT 2
65501: EQUAL
65502: IFFALSE 65563
// begin wait ( 0 0$2 ) ;
65504: LD_INT 70
65506: PPUSH
65507: CALL_OW 67
// if Connect ( vehicle ) then
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL 31465 0 1
65520: IFFALSE 65561
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65522: LD_VAR 0 1
65526: PPUSH
65527: LD_EXP 78
65531: PUSH
65532: LD_VAR 0 2
65536: ARRAY
65537: PUSH
65538: LD_INT 3
65540: ARRAY
65541: PPUSH
65542: LD_EXP 78
65546: PUSH
65547: LD_VAR 0 2
65551: ARRAY
65552: PUSH
65553: LD_INT 4
65555: ARRAY
65556: PPUSH
65557: CALL_OW 171
// end else
65561: GO 65602
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65563: LD_VAR 0 1
65567: PPUSH
65568: LD_EXP 78
65572: PUSH
65573: LD_VAR 0 2
65577: ARRAY
65578: PUSH
65579: LD_INT 3
65581: ARRAY
65582: PPUSH
65583: LD_EXP 78
65587: PUSH
65588: LD_VAR 0 2
65592: ARRAY
65593: PUSH
65594: LD_INT 4
65596: ARRAY
65597: PPUSH
65598: CALL_OW 171
// end ; end ;
65602: LD_VAR 0 3
65606: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65607: LD_INT 0
65609: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65610: LD_VAR 0 1
65614: PUSH
65615: LD_INT 250
65617: EQUAL
65618: PUSH
65619: LD_VAR 0 2
65623: PPUSH
65624: CALL_OW 264
65628: PUSH
65629: LD_INT 81
65631: EQUAL
65632: AND
65633: IFFALSE 65654
// MinerPlaceMine ( unit , x , y ) ;
65635: LD_VAR 0 2
65639: PPUSH
65640: LD_VAR 0 4
65644: PPUSH
65645: LD_VAR 0 5
65649: PPUSH
65650: CALL 68039 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65654: LD_VAR 0 1
65658: PUSH
65659: LD_INT 251
65661: EQUAL
65662: PUSH
65663: LD_VAR 0 2
65667: PPUSH
65668: CALL_OW 264
65672: PUSH
65673: LD_INT 81
65675: EQUAL
65676: AND
65677: IFFALSE 65698
// MinerDetonateMine ( unit , x , y ) ;
65679: LD_VAR 0 2
65683: PPUSH
65684: LD_VAR 0 4
65688: PPUSH
65689: LD_VAR 0 5
65693: PPUSH
65694: CALL 68314 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65698: LD_VAR 0 1
65702: PUSH
65703: LD_INT 252
65705: EQUAL
65706: PUSH
65707: LD_VAR 0 2
65711: PPUSH
65712: CALL_OW 264
65716: PUSH
65717: LD_INT 81
65719: EQUAL
65720: AND
65721: IFFALSE 65742
// MinerCreateMinefield ( unit , x , y ) ;
65723: LD_VAR 0 2
65727: PPUSH
65728: LD_VAR 0 4
65732: PPUSH
65733: LD_VAR 0 5
65737: PPUSH
65738: CALL 68731 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65742: LD_VAR 0 1
65746: PUSH
65747: LD_INT 253
65749: EQUAL
65750: PUSH
65751: LD_VAR 0 2
65755: PPUSH
65756: CALL_OW 257
65760: PUSH
65761: LD_INT 5
65763: EQUAL
65764: AND
65765: IFFALSE 65786
// ComBinocular ( unit , x , y ) ;
65767: LD_VAR 0 2
65771: PPUSH
65772: LD_VAR 0 4
65776: PPUSH
65777: LD_VAR 0 5
65781: PPUSH
65782: CALL 69100 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65786: LD_VAR 0 1
65790: PUSH
65791: LD_INT 254
65793: EQUAL
65794: PUSH
65795: LD_VAR 0 2
65799: PPUSH
65800: CALL_OW 264
65804: PUSH
65805: LD_INT 99
65807: EQUAL
65808: AND
65809: PUSH
65810: LD_VAR 0 3
65814: PPUSH
65815: CALL_OW 263
65819: PUSH
65820: LD_INT 3
65822: EQUAL
65823: AND
65824: IFFALSE 65840
// HackDestroyVehicle ( unit , selectedUnit ) ;
65826: LD_VAR 0 2
65830: PPUSH
65831: LD_VAR 0 3
65835: PPUSH
65836: CALL 67403 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65840: LD_VAR 0 1
65844: PUSH
65845: LD_INT 255
65847: EQUAL
65848: PUSH
65849: LD_VAR 0 2
65853: PPUSH
65854: CALL_OW 264
65858: PUSH
65859: LD_INT 14
65861: PUSH
65862: LD_INT 53
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: IN
65869: AND
65870: PUSH
65871: LD_VAR 0 4
65875: PPUSH
65876: LD_VAR 0 5
65880: PPUSH
65881: CALL_OW 488
65885: AND
65886: IFFALSE 65910
// CutTreeXYR ( unit , x , y , 12 ) ;
65888: LD_VAR 0 2
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: LD_VAR 0 5
65902: PPUSH
65903: LD_INT 12
65905: PPUSH
65906: CALL 65973 0 4
// if cmd = 256 then
65910: LD_VAR 0 1
65914: PUSH
65915: LD_INT 256
65917: EQUAL
65918: IFFALSE 65939
// SetFactoryWaypoint ( unit , x , y ) ;
65920: LD_VAR 0 2
65924: PPUSH
65925: LD_VAR 0 4
65929: PPUSH
65930: LD_VAR 0 5
65934: PPUSH
65935: CALL 22214 0 3
// if cmd = 257 then
65939: LD_VAR 0 1
65943: PUSH
65944: LD_INT 257
65946: EQUAL
65947: IFFALSE 65968
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65949: LD_VAR 0 2
65953: PPUSH
65954: LD_VAR 0 4
65958: PPUSH
65959: LD_VAR 0 5
65963: PPUSH
65964: CALL 22576 0 3
// end ;
65968: LD_VAR 0 6
65972: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65973: LD_INT 0
65975: PPUSH
65976: PPUSH
65977: PPUSH
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
65984: LD_VAR 0 1
65988: NOT
65989: PUSH
65990: LD_VAR 0 2
65994: PPUSH
65995: LD_VAR 0 3
65999: PPUSH
66000: CALL_OW 488
66004: NOT
66005: OR
66006: PUSH
66007: LD_VAR 0 4
66011: NOT
66012: OR
66013: IFFALSE 66017
// exit ;
66015: GO 66357
// list := [ ] ;
66017: LD_ADDR_VAR 0 13
66021: PUSH
66022: EMPTY
66023: ST_TO_ADDR
// if x - r < 0 then
66024: LD_VAR 0 2
66028: PUSH
66029: LD_VAR 0 4
66033: MINUS
66034: PUSH
66035: LD_INT 0
66037: LESS
66038: IFFALSE 66050
// min_x := 0 else
66040: LD_ADDR_VAR 0 7
66044: PUSH
66045: LD_INT 0
66047: ST_TO_ADDR
66048: GO 66066
// min_x := x - r ;
66050: LD_ADDR_VAR 0 7
66054: PUSH
66055: LD_VAR 0 2
66059: PUSH
66060: LD_VAR 0 4
66064: MINUS
66065: ST_TO_ADDR
// if y - r < 0 then
66066: LD_VAR 0 3
66070: PUSH
66071: LD_VAR 0 4
66075: MINUS
66076: PUSH
66077: LD_INT 0
66079: LESS
66080: IFFALSE 66092
// min_y := 0 else
66082: LD_ADDR_VAR 0 8
66086: PUSH
66087: LD_INT 0
66089: ST_TO_ADDR
66090: GO 66108
// min_y := y - r ;
66092: LD_ADDR_VAR 0 8
66096: PUSH
66097: LD_VAR 0 3
66101: PUSH
66102: LD_VAR 0 4
66106: MINUS
66107: ST_TO_ADDR
// max_x := x + r ;
66108: LD_ADDR_VAR 0 9
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_VAR 0 4
66122: PLUS
66123: ST_TO_ADDR
// max_y := y + r ;
66124: LD_ADDR_VAR 0 10
66128: PUSH
66129: LD_VAR 0 3
66133: PUSH
66134: LD_VAR 0 4
66138: PLUS
66139: ST_TO_ADDR
// for _x = min_x to max_x do
66140: LD_ADDR_VAR 0 11
66144: PUSH
66145: DOUBLE
66146: LD_VAR 0 7
66150: DEC
66151: ST_TO_ADDR
66152: LD_VAR 0 9
66156: PUSH
66157: FOR_TO
66158: IFFALSE 66275
// for _y = min_y to max_y do
66160: LD_ADDR_VAR 0 12
66164: PUSH
66165: DOUBLE
66166: LD_VAR 0 8
66170: DEC
66171: ST_TO_ADDR
66172: LD_VAR 0 10
66176: PUSH
66177: FOR_TO
66178: IFFALSE 66271
// begin if not ValidHex ( _x , _y ) then
66180: LD_VAR 0 11
66184: PPUSH
66185: LD_VAR 0 12
66189: PPUSH
66190: CALL_OW 488
66194: NOT
66195: IFFALSE 66199
// continue ;
66197: GO 66177
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66199: LD_VAR 0 11
66203: PPUSH
66204: LD_VAR 0 12
66208: PPUSH
66209: CALL_OW 351
66213: PUSH
66214: LD_VAR 0 11
66218: PPUSH
66219: LD_VAR 0 12
66223: PPUSH
66224: CALL_OW 554
66228: AND
66229: IFFALSE 66269
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66231: LD_ADDR_VAR 0 13
66235: PUSH
66236: LD_VAR 0 13
66240: PPUSH
66241: LD_VAR 0 13
66245: PUSH
66246: LD_INT 1
66248: PLUS
66249: PPUSH
66250: LD_VAR 0 11
66254: PUSH
66255: LD_VAR 0 12
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PPUSH
66264: CALL_OW 2
66268: ST_TO_ADDR
// end ;
66269: GO 66177
66271: POP
66272: POP
66273: GO 66157
66275: POP
66276: POP
// if not list then
66277: LD_VAR 0 13
66281: NOT
66282: IFFALSE 66286
// exit ;
66284: GO 66357
// for i in list do
66286: LD_ADDR_VAR 0 6
66290: PUSH
66291: LD_VAR 0 13
66295: PUSH
66296: FOR_IN
66297: IFFALSE 66355
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66299: LD_VAR 0 1
66303: PPUSH
66304: LD_STRING M
66306: PUSH
66307: LD_VAR 0 6
66311: PUSH
66312: LD_INT 1
66314: ARRAY
66315: PUSH
66316: LD_VAR 0 6
66320: PUSH
66321: LD_INT 2
66323: ARRAY
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: PPUSH
66349: CALL_OW 447
66353: GO 66296
66355: POP
66356: POP
// end ;
66357: LD_VAR 0 5
66361: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66362: LD_EXP 81
66366: NOT
66367: IFFALSE 66417
66369: GO 66371
66371: DISABLE
// begin initHack := true ;
66372: LD_ADDR_EXP 81
66376: PUSH
66377: LD_INT 1
66379: ST_TO_ADDR
// hackTanks := [ ] ;
66380: LD_ADDR_EXP 82
66384: PUSH
66385: EMPTY
66386: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66387: LD_ADDR_EXP 83
66391: PUSH
66392: EMPTY
66393: ST_TO_ADDR
// hackLimit := 3 ;
66394: LD_ADDR_EXP 84
66398: PUSH
66399: LD_INT 3
66401: ST_TO_ADDR
// hackDist := 12 ;
66402: LD_ADDR_EXP 85
66406: PUSH
66407: LD_INT 12
66409: ST_TO_ADDR
// hackCounter := [ ] ;
66410: LD_ADDR_EXP 86
66414: PUSH
66415: EMPTY
66416: ST_TO_ADDR
// end ;
66417: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66418: LD_EXP 81
66422: PUSH
66423: LD_INT 34
66425: PUSH
66426: LD_INT 99
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PPUSH
66433: CALL_OW 69
66437: AND
66438: IFFALSE 66691
66440: GO 66442
66442: DISABLE
66443: LD_INT 0
66445: PPUSH
66446: PPUSH
// begin enable ;
66447: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66448: LD_ADDR_VAR 0 1
66452: PUSH
66453: LD_INT 34
66455: PUSH
66456: LD_INT 99
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PPUSH
66463: CALL_OW 69
66467: PUSH
66468: FOR_IN
66469: IFFALSE 66689
// begin if not i in hackTanks then
66471: LD_VAR 0 1
66475: PUSH
66476: LD_EXP 82
66480: IN
66481: NOT
66482: IFFALSE 66565
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66484: LD_ADDR_EXP 82
66488: PUSH
66489: LD_EXP 82
66493: PPUSH
66494: LD_EXP 82
66498: PUSH
66499: LD_INT 1
66501: PLUS
66502: PPUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: CALL_OW 1
66512: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66513: LD_ADDR_EXP 83
66517: PUSH
66518: LD_EXP 83
66522: PPUSH
66523: LD_EXP 83
66527: PUSH
66528: LD_INT 1
66530: PLUS
66531: PPUSH
66532: EMPTY
66533: PPUSH
66534: CALL_OW 1
66538: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66539: LD_ADDR_EXP 86
66543: PUSH
66544: LD_EXP 86
66548: PPUSH
66549: LD_EXP 86
66553: PUSH
66554: LD_INT 1
66556: PLUS
66557: PPUSH
66558: EMPTY
66559: PPUSH
66560: CALL_OW 1
66564: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66565: LD_VAR 0 1
66569: PPUSH
66570: CALL_OW 302
66574: NOT
66575: IFFALSE 66588
// begin HackUnlinkAll ( i ) ;
66577: LD_VAR 0 1
66581: PPUSH
66582: CALL 66694 0 1
// continue ;
66586: GO 66468
// end ; HackCheckCapturedStatus ( i ) ;
66588: LD_VAR 0 1
66592: PPUSH
66593: CALL 67137 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66597: LD_ADDR_VAR 0 2
66601: PUSH
66602: LD_INT 81
66604: PUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: CALL_OW 255
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 33
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 91
66631: PUSH
66632: LD_VAR 0 1
66636: PUSH
66637: LD_EXP 85
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 50
66649: PUSH
66650: EMPTY
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: PPUSH
66659: CALL_OW 69
66663: ST_TO_ADDR
// if not tmp then
66664: LD_VAR 0 2
66668: NOT
66669: IFFALSE 66673
// continue ;
66671: GO 66468
// HackLink ( i , tmp ) ;
66673: LD_VAR 0 1
66677: PPUSH
66678: LD_VAR 0 2
66682: PPUSH
66683: CALL 66830 0 2
// end ;
66687: GO 66468
66689: POP
66690: POP
// end ;
66691: PPOPN 2
66693: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66694: LD_INT 0
66696: PPUSH
66697: PPUSH
66698: PPUSH
// if not hack in hackTanks then
66699: LD_VAR 0 1
66703: PUSH
66704: LD_EXP 82
66708: IN
66709: NOT
66710: IFFALSE 66714
// exit ;
66712: GO 66825
// index := GetElementIndex ( hackTanks , hack ) ;
66714: LD_ADDR_VAR 0 4
66718: PUSH
66719: LD_EXP 82
66723: PPUSH
66724: LD_VAR 0 1
66728: PPUSH
66729: CALL 28272 0 2
66733: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66734: LD_EXP 83
66738: PUSH
66739: LD_VAR 0 4
66743: ARRAY
66744: IFFALSE 66825
// begin for i in hackTanksCaptured [ index ] do
66746: LD_ADDR_VAR 0 3
66750: PUSH
66751: LD_EXP 83
66755: PUSH
66756: LD_VAR 0 4
66760: ARRAY
66761: PUSH
66762: FOR_IN
66763: IFFALSE 66789
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66765: LD_VAR 0 3
66769: PUSH
66770: LD_INT 1
66772: ARRAY
66773: PPUSH
66774: LD_VAR 0 3
66778: PUSH
66779: LD_INT 2
66781: ARRAY
66782: PPUSH
66783: CALL_OW 235
66787: GO 66762
66789: POP
66790: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66791: LD_ADDR_EXP 83
66795: PUSH
66796: LD_EXP 83
66800: PPUSH
66801: LD_VAR 0 4
66805: PPUSH
66806: EMPTY
66807: PPUSH
66808: CALL_OW 1
66812: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66813: LD_VAR 0 1
66817: PPUSH
66818: LD_INT 0
66820: PPUSH
66821: CALL_OW 505
// end ; end ;
66825: LD_VAR 0 2
66829: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66830: LD_INT 0
66832: PPUSH
66833: PPUSH
66834: PPUSH
// if not hack in hackTanks or not vehicles then
66835: LD_VAR 0 1
66839: PUSH
66840: LD_EXP 82
66844: IN
66845: NOT
66846: PUSH
66847: LD_VAR 0 2
66851: NOT
66852: OR
66853: IFFALSE 66857
// exit ;
66855: GO 67132
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66857: LD_ADDR_VAR 0 2
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: LD_VAR 0 2
66871: PPUSH
66872: LD_INT 1
66874: PPUSH
66875: LD_INT 1
66877: PPUSH
66878: CALL 28922 0 4
66882: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66883: LD_ADDR_VAR 0 5
66887: PUSH
66888: LD_EXP 82
66892: PPUSH
66893: LD_VAR 0 1
66897: PPUSH
66898: CALL 28272 0 2
66902: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66903: LD_EXP 83
66907: PUSH
66908: LD_VAR 0 5
66912: ARRAY
66913: PUSH
66914: LD_EXP 84
66918: LESS
66919: IFFALSE 67108
// begin for i := 1 to vehicles do
66921: LD_ADDR_VAR 0 4
66925: PUSH
66926: DOUBLE
66927: LD_INT 1
66929: DEC
66930: ST_TO_ADDR
66931: LD_VAR 0 2
66935: PUSH
66936: FOR_TO
66937: IFFALSE 67106
// begin if hackTanksCaptured [ index ] = hackLimit then
66939: LD_EXP 83
66943: PUSH
66944: LD_VAR 0 5
66948: ARRAY
66949: PUSH
66950: LD_EXP 84
66954: EQUAL
66955: IFFALSE 66959
// break ;
66957: GO 67106
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66959: LD_ADDR_EXP 86
66963: PUSH
66964: LD_EXP 86
66968: PPUSH
66969: LD_VAR 0 5
66973: PPUSH
66974: LD_EXP 86
66978: PUSH
66979: LD_VAR 0 5
66983: ARRAY
66984: PUSH
66985: LD_INT 1
66987: PLUS
66988: PPUSH
66989: CALL_OW 1
66993: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66994: LD_ADDR_EXP 83
66998: PUSH
66999: LD_EXP 83
67003: PPUSH
67004: LD_VAR 0 5
67008: PUSH
67009: LD_EXP 83
67013: PUSH
67014: LD_VAR 0 5
67018: ARRAY
67019: PUSH
67020: LD_INT 1
67022: PLUS
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PPUSH
67028: LD_VAR 0 2
67032: PUSH
67033: LD_VAR 0 4
67037: ARRAY
67038: PUSH
67039: LD_VAR 0 2
67043: PUSH
67044: LD_VAR 0 4
67048: ARRAY
67049: PPUSH
67050: CALL_OW 255
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PPUSH
67059: CALL 28487 0 3
67063: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67064: LD_VAR 0 2
67068: PUSH
67069: LD_VAR 0 4
67073: ARRAY
67074: PPUSH
67075: LD_VAR 0 1
67079: PPUSH
67080: CALL_OW 255
67084: PPUSH
67085: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67089: LD_VAR 0 2
67093: PUSH
67094: LD_VAR 0 4
67098: ARRAY
67099: PPUSH
67100: CALL_OW 141
// end ;
67104: GO 66936
67106: POP
67107: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67108: LD_VAR 0 1
67112: PPUSH
67113: LD_EXP 83
67117: PUSH
67118: LD_VAR 0 5
67122: ARRAY
67123: PUSH
67124: LD_INT 0
67126: PLUS
67127: PPUSH
67128: CALL_OW 505
// end ;
67132: LD_VAR 0 3
67136: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67137: LD_INT 0
67139: PPUSH
67140: PPUSH
67141: PPUSH
67142: PPUSH
// if not hack in hackTanks then
67143: LD_VAR 0 1
67147: PUSH
67148: LD_EXP 82
67152: IN
67153: NOT
67154: IFFALSE 67158
// exit ;
67156: GO 67398
// index := GetElementIndex ( hackTanks , hack ) ;
67158: LD_ADDR_VAR 0 4
67162: PUSH
67163: LD_EXP 82
67167: PPUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: CALL 28272 0 2
67177: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67178: LD_ADDR_VAR 0 3
67182: PUSH
67183: DOUBLE
67184: LD_EXP 83
67188: PUSH
67189: LD_VAR 0 4
67193: ARRAY
67194: INC
67195: ST_TO_ADDR
67196: LD_INT 1
67198: PUSH
67199: FOR_DOWNTO
67200: IFFALSE 67372
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67202: LD_ADDR_VAR 0 5
67206: PUSH
67207: LD_EXP 83
67211: PUSH
67212: LD_VAR 0 4
67216: ARRAY
67217: PUSH
67218: LD_VAR 0 3
67222: ARRAY
67223: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67224: LD_VAR 0 5
67228: PUSH
67229: LD_INT 1
67231: ARRAY
67232: PPUSH
67233: CALL_OW 302
67237: NOT
67238: PUSH
67239: LD_VAR 0 5
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: PPUSH
67248: CALL_OW 255
67252: PUSH
67253: LD_VAR 0 1
67257: PPUSH
67258: CALL_OW 255
67262: NONEQUAL
67263: OR
67264: IFFALSE 67370
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67266: LD_VAR 0 5
67270: PUSH
67271: LD_INT 1
67273: ARRAY
67274: PPUSH
67275: CALL_OW 305
67279: PUSH
67280: LD_VAR 0 5
67284: PUSH
67285: LD_INT 1
67287: ARRAY
67288: PPUSH
67289: CALL_OW 255
67293: PUSH
67294: LD_VAR 0 1
67298: PPUSH
67299: CALL_OW 255
67303: EQUAL
67304: AND
67305: IFFALSE 67329
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67307: LD_VAR 0 5
67311: PUSH
67312: LD_INT 1
67314: ARRAY
67315: PPUSH
67316: LD_VAR 0 5
67320: PUSH
67321: LD_INT 2
67323: ARRAY
67324: PPUSH
67325: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67329: LD_ADDR_EXP 83
67333: PUSH
67334: LD_EXP 83
67338: PPUSH
67339: LD_VAR 0 4
67343: PPUSH
67344: LD_EXP 83
67348: PUSH
67349: LD_VAR 0 4
67353: ARRAY
67354: PPUSH
67355: LD_VAR 0 3
67359: PPUSH
67360: CALL_OW 3
67364: PPUSH
67365: CALL_OW 1
67369: ST_TO_ADDR
// end ; end ;
67370: GO 67199
67372: POP
67373: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67374: LD_VAR 0 1
67378: PPUSH
67379: LD_EXP 83
67383: PUSH
67384: LD_VAR 0 4
67388: ARRAY
67389: PUSH
67390: LD_INT 0
67392: PLUS
67393: PPUSH
67394: CALL_OW 505
// end ;
67398: LD_VAR 0 2
67402: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67403: LD_INT 0
67405: PPUSH
67406: PPUSH
67407: PPUSH
67408: PPUSH
// if not hack in hackTanks then
67409: LD_VAR 0 1
67413: PUSH
67414: LD_EXP 82
67418: IN
67419: NOT
67420: IFFALSE 67424
// exit ;
67422: GO 67509
// index := GetElementIndex ( hackTanks , hack ) ;
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: LD_EXP 82
67433: PPUSH
67434: LD_VAR 0 1
67438: PPUSH
67439: CALL 28272 0 2
67443: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67444: LD_ADDR_VAR 0 4
67448: PUSH
67449: DOUBLE
67450: LD_INT 1
67452: DEC
67453: ST_TO_ADDR
67454: LD_EXP 83
67458: PUSH
67459: LD_VAR 0 5
67463: ARRAY
67464: PUSH
67465: FOR_TO
67466: IFFALSE 67507
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67468: LD_EXP 83
67472: PUSH
67473: LD_VAR 0 5
67477: ARRAY
67478: PUSH
67479: LD_VAR 0 4
67483: ARRAY
67484: PUSH
67485: LD_INT 1
67487: ARRAY
67488: PUSH
67489: LD_VAR 0 2
67493: EQUAL
67494: IFFALSE 67505
// KillUnit ( vehicle ) ;
67496: LD_VAR 0 2
67500: PPUSH
67501: CALL_OW 66
67505: GO 67465
67507: POP
67508: POP
// end ;
67509: LD_VAR 0 3
67513: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67514: LD_EXP 87
67518: NOT
67519: IFFALSE 67554
67521: GO 67523
67523: DISABLE
// begin initMiner := true ;
67524: LD_ADDR_EXP 87
67528: PUSH
67529: LD_INT 1
67531: ST_TO_ADDR
// minersList := [ ] ;
67532: LD_ADDR_EXP 88
67536: PUSH
67537: EMPTY
67538: ST_TO_ADDR
// minerMinesList := [ ] ;
67539: LD_ADDR_EXP 89
67543: PUSH
67544: EMPTY
67545: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67546: LD_ADDR_EXP 90
67550: PUSH
67551: LD_INT 5
67553: ST_TO_ADDR
// end ;
67554: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67555: LD_EXP 87
67559: PUSH
67560: LD_INT 34
67562: PUSH
67563: LD_INT 81
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PPUSH
67570: CALL_OW 69
67574: AND
67575: IFFALSE 68036
67577: GO 67579
67579: DISABLE
67580: LD_INT 0
67582: PPUSH
67583: PPUSH
67584: PPUSH
67585: PPUSH
// begin enable ;
67586: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67587: LD_ADDR_VAR 0 1
67591: PUSH
67592: LD_INT 34
67594: PUSH
67595: LD_INT 81
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PPUSH
67602: CALL_OW 69
67606: PUSH
67607: FOR_IN
67608: IFFALSE 67680
// begin if not i in minersList then
67610: LD_VAR 0 1
67614: PUSH
67615: LD_EXP 88
67619: IN
67620: NOT
67621: IFFALSE 67678
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67623: LD_ADDR_EXP 88
67627: PUSH
67628: LD_EXP 88
67632: PPUSH
67633: LD_EXP 88
67637: PUSH
67638: LD_INT 1
67640: PLUS
67641: PPUSH
67642: LD_VAR 0 1
67646: PPUSH
67647: CALL_OW 1
67651: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67652: LD_ADDR_EXP 89
67656: PUSH
67657: LD_EXP 89
67661: PPUSH
67662: LD_EXP 89
67666: PUSH
67667: LD_INT 1
67669: PLUS
67670: PPUSH
67671: EMPTY
67672: PPUSH
67673: CALL_OW 1
67677: ST_TO_ADDR
// end end ;
67678: GO 67607
67680: POP
67681: POP
// for i := minerMinesList downto 1 do
67682: LD_ADDR_VAR 0 1
67686: PUSH
67687: DOUBLE
67688: LD_EXP 89
67692: INC
67693: ST_TO_ADDR
67694: LD_INT 1
67696: PUSH
67697: FOR_DOWNTO
67698: IFFALSE 68034
// begin if IsLive ( minersList [ i ] ) then
67700: LD_EXP 88
67704: PUSH
67705: LD_VAR 0 1
67709: ARRAY
67710: PPUSH
67711: CALL_OW 300
67715: IFFALSE 67743
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67717: LD_EXP 88
67721: PUSH
67722: LD_VAR 0 1
67726: ARRAY
67727: PPUSH
67728: LD_EXP 89
67732: PUSH
67733: LD_VAR 0 1
67737: ARRAY
67738: PPUSH
67739: CALL_OW 505
// if not minerMinesList [ i ] then
67743: LD_EXP 89
67747: PUSH
67748: LD_VAR 0 1
67752: ARRAY
67753: NOT
67754: IFFALSE 67758
// continue ;
67756: GO 67697
// for j := minerMinesList [ i ] downto 1 do
67758: LD_ADDR_VAR 0 2
67762: PUSH
67763: DOUBLE
67764: LD_EXP 89
67768: PUSH
67769: LD_VAR 0 1
67773: ARRAY
67774: INC
67775: ST_TO_ADDR
67776: LD_INT 1
67778: PUSH
67779: FOR_DOWNTO
67780: IFFALSE 68030
// begin side := GetSide ( minersList [ i ] ) ;
67782: LD_ADDR_VAR 0 3
67786: PUSH
67787: LD_EXP 88
67791: PUSH
67792: LD_VAR 0 1
67796: ARRAY
67797: PPUSH
67798: CALL_OW 255
67802: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67803: LD_ADDR_VAR 0 4
67807: PUSH
67808: LD_EXP 89
67812: PUSH
67813: LD_VAR 0 1
67817: ARRAY
67818: PUSH
67819: LD_VAR 0 2
67823: ARRAY
67824: PUSH
67825: LD_INT 1
67827: ARRAY
67828: PPUSH
67829: LD_EXP 89
67833: PUSH
67834: LD_VAR 0 1
67838: ARRAY
67839: PUSH
67840: LD_VAR 0 2
67844: ARRAY
67845: PUSH
67846: LD_INT 2
67848: ARRAY
67849: PPUSH
67850: CALL_OW 428
67854: ST_TO_ADDR
// if not tmp then
67855: LD_VAR 0 4
67859: NOT
67860: IFFALSE 67864
// continue ;
67862: GO 67779
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67864: LD_VAR 0 4
67868: PUSH
67869: LD_INT 81
67871: PUSH
67872: LD_VAR 0 3
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PPUSH
67881: CALL_OW 69
67885: IN
67886: PUSH
67887: LD_EXP 89
67891: PUSH
67892: LD_VAR 0 1
67896: ARRAY
67897: PUSH
67898: LD_VAR 0 2
67902: ARRAY
67903: PUSH
67904: LD_INT 1
67906: ARRAY
67907: PPUSH
67908: LD_EXP 89
67912: PUSH
67913: LD_VAR 0 1
67917: ARRAY
67918: PUSH
67919: LD_VAR 0 2
67923: ARRAY
67924: PUSH
67925: LD_INT 2
67927: ARRAY
67928: PPUSH
67929: CALL_OW 458
67933: AND
67934: IFFALSE 68028
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67936: LD_EXP 89
67940: PUSH
67941: LD_VAR 0 1
67945: ARRAY
67946: PUSH
67947: LD_VAR 0 2
67951: ARRAY
67952: PUSH
67953: LD_INT 1
67955: ARRAY
67956: PPUSH
67957: LD_EXP 89
67961: PUSH
67962: LD_VAR 0 1
67966: ARRAY
67967: PUSH
67968: LD_VAR 0 2
67972: ARRAY
67973: PUSH
67974: LD_INT 2
67976: ARRAY
67977: PPUSH
67978: LD_VAR 0 3
67982: PPUSH
67983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67987: LD_ADDR_EXP 89
67991: PUSH
67992: LD_EXP 89
67996: PPUSH
67997: LD_VAR 0 1
68001: PPUSH
68002: LD_EXP 89
68006: PUSH
68007: LD_VAR 0 1
68011: ARRAY
68012: PPUSH
68013: LD_VAR 0 2
68017: PPUSH
68018: CALL_OW 3
68022: PPUSH
68023: CALL_OW 1
68027: ST_TO_ADDR
// end ; end ;
68028: GO 67779
68030: POP
68031: POP
// end ;
68032: GO 67697
68034: POP
68035: POP
// end ;
68036: PPOPN 4
68038: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
// result := false ;
68043: LD_ADDR_VAR 0 4
68047: PUSH
68048: LD_INT 0
68050: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68051: LD_VAR 0 1
68055: PPUSH
68056: CALL_OW 264
68060: PUSH
68061: LD_INT 81
68063: EQUAL
68064: NOT
68065: IFFALSE 68069
// exit ;
68067: GO 68309
// index := GetElementIndex ( minersList , unit ) ;
68069: LD_ADDR_VAR 0 5
68073: PUSH
68074: LD_EXP 88
68078: PPUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL 28272 0 2
68088: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68089: LD_EXP 89
68093: PUSH
68094: LD_VAR 0 5
68098: ARRAY
68099: PUSH
68100: LD_EXP 90
68104: GREATEREQUAL
68105: IFFALSE 68109
// exit ;
68107: GO 68309
// ComMoveXY ( unit , x , y ) ;
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_VAR 0 2
68118: PPUSH
68119: LD_VAR 0 3
68123: PPUSH
68124: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68128: LD_INT 35
68130: PPUSH
68131: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68135: LD_VAR 0 1
68139: PPUSH
68140: LD_VAR 0 2
68144: PPUSH
68145: LD_VAR 0 3
68149: PPUSH
68150: CALL 59656 0 3
68154: NOT
68155: PUSH
68156: LD_VAR 0 1
68160: PPUSH
68161: CALL_OW 314
68165: AND
68166: IFFALSE 68170
// exit ;
68168: GO 68309
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68170: LD_VAR 0 2
68174: PPUSH
68175: LD_VAR 0 3
68179: PPUSH
68180: CALL_OW 428
68184: PUSH
68185: LD_VAR 0 1
68189: EQUAL
68190: PUSH
68191: LD_VAR 0 1
68195: PPUSH
68196: CALL_OW 314
68200: NOT
68201: AND
68202: IFFALSE 68128
// PlaySoundXY ( x , y , PlantMine ) ;
68204: LD_VAR 0 2
68208: PPUSH
68209: LD_VAR 0 3
68213: PPUSH
68214: LD_STRING PlantMine
68216: PPUSH
68217: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68221: LD_VAR 0 2
68225: PPUSH
68226: LD_VAR 0 3
68230: PPUSH
68231: LD_VAR 0 1
68235: PPUSH
68236: CALL_OW 255
68240: PPUSH
68241: LD_INT 0
68243: PPUSH
68244: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68248: LD_ADDR_EXP 89
68252: PUSH
68253: LD_EXP 89
68257: PPUSH
68258: LD_VAR 0 5
68262: PUSH
68263: LD_EXP 89
68267: PUSH
68268: LD_VAR 0 5
68272: ARRAY
68273: PUSH
68274: LD_INT 1
68276: PLUS
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PPUSH
68282: LD_VAR 0 2
68286: PUSH
68287: LD_VAR 0 3
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PPUSH
68296: CALL 28487 0 3
68300: ST_TO_ADDR
// result := true ;
68301: LD_ADDR_VAR 0 4
68305: PUSH
68306: LD_INT 1
68308: ST_TO_ADDR
// end ;
68309: LD_VAR 0 4
68313: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68314: LD_INT 0
68316: PPUSH
68317: PPUSH
68318: PPUSH
// if not unit in minersList then
68319: LD_VAR 0 1
68323: PUSH
68324: LD_EXP 88
68328: IN
68329: NOT
68330: IFFALSE 68334
// exit ;
68332: GO 68726
// index := GetElementIndex ( minersList , unit ) ;
68334: LD_ADDR_VAR 0 6
68338: PUSH
68339: LD_EXP 88
68343: PPUSH
68344: LD_VAR 0 1
68348: PPUSH
68349: CALL 28272 0 2
68353: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68354: LD_ADDR_VAR 0 5
68358: PUSH
68359: DOUBLE
68360: LD_EXP 89
68364: PUSH
68365: LD_VAR 0 6
68369: ARRAY
68370: INC
68371: ST_TO_ADDR
68372: LD_INT 1
68374: PUSH
68375: FOR_DOWNTO
68376: IFFALSE 68537
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68378: LD_EXP 89
68382: PUSH
68383: LD_VAR 0 6
68387: ARRAY
68388: PUSH
68389: LD_VAR 0 5
68393: ARRAY
68394: PUSH
68395: LD_INT 1
68397: ARRAY
68398: PUSH
68399: LD_VAR 0 2
68403: EQUAL
68404: PUSH
68405: LD_EXP 89
68409: PUSH
68410: LD_VAR 0 6
68414: ARRAY
68415: PUSH
68416: LD_VAR 0 5
68420: ARRAY
68421: PUSH
68422: LD_INT 2
68424: ARRAY
68425: PUSH
68426: LD_VAR 0 3
68430: EQUAL
68431: AND
68432: IFFALSE 68535
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68434: LD_EXP 89
68438: PUSH
68439: LD_VAR 0 6
68443: ARRAY
68444: PUSH
68445: LD_VAR 0 5
68449: ARRAY
68450: PUSH
68451: LD_INT 1
68453: ARRAY
68454: PPUSH
68455: LD_EXP 89
68459: PUSH
68460: LD_VAR 0 6
68464: ARRAY
68465: PUSH
68466: LD_VAR 0 5
68470: ARRAY
68471: PUSH
68472: LD_INT 2
68474: ARRAY
68475: PPUSH
68476: LD_VAR 0 1
68480: PPUSH
68481: CALL_OW 255
68485: PPUSH
68486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68490: LD_ADDR_EXP 89
68494: PUSH
68495: LD_EXP 89
68499: PPUSH
68500: LD_VAR 0 6
68504: PPUSH
68505: LD_EXP 89
68509: PUSH
68510: LD_VAR 0 6
68514: ARRAY
68515: PPUSH
68516: LD_VAR 0 5
68520: PPUSH
68521: CALL_OW 3
68525: PPUSH
68526: CALL_OW 1
68530: ST_TO_ADDR
// exit ;
68531: POP
68532: POP
68533: GO 68726
// end ; end ;
68535: GO 68375
68537: POP
68538: POP
// for i := minerMinesList [ index ] downto 1 do
68539: LD_ADDR_VAR 0 5
68543: PUSH
68544: DOUBLE
68545: LD_EXP 89
68549: PUSH
68550: LD_VAR 0 6
68554: ARRAY
68555: INC
68556: ST_TO_ADDR
68557: LD_INT 1
68559: PUSH
68560: FOR_DOWNTO
68561: IFFALSE 68724
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68563: LD_EXP 89
68567: PUSH
68568: LD_VAR 0 6
68572: ARRAY
68573: PUSH
68574: LD_VAR 0 5
68578: ARRAY
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PPUSH
68584: LD_EXP 89
68588: PUSH
68589: LD_VAR 0 6
68593: ARRAY
68594: PUSH
68595: LD_VAR 0 5
68599: ARRAY
68600: PUSH
68601: LD_INT 2
68603: ARRAY
68604: PPUSH
68605: LD_VAR 0 2
68609: PPUSH
68610: LD_VAR 0 3
68614: PPUSH
68615: CALL_OW 298
68619: PUSH
68620: LD_INT 6
68622: LESS
68623: IFFALSE 68722
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68625: LD_EXP 89
68629: PUSH
68630: LD_VAR 0 6
68634: ARRAY
68635: PUSH
68636: LD_VAR 0 5
68640: ARRAY
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: PPUSH
68646: LD_EXP 89
68650: PUSH
68651: LD_VAR 0 6
68655: ARRAY
68656: PUSH
68657: LD_VAR 0 5
68661: ARRAY
68662: PUSH
68663: LD_INT 2
68665: ARRAY
68666: PPUSH
68667: LD_VAR 0 1
68671: PPUSH
68672: CALL_OW 255
68676: PPUSH
68677: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68681: LD_ADDR_EXP 89
68685: PUSH
68686: LD_EXP 89
68690: PPUSH
68691: LD_VAR 0 6
68695: PPUSH
68696: LD_EXP 89
68700: PUSH
68701: LD_VAR 0 6
68705: ARRAY
68706: PPUSH
68707: LD_VAR 0 5
68711: PPUSH
68712: CALL_OW 3
68716: PPUSH
68717: CALL_OW 1
68721: ST_TO_ADDR
// end ; end ;
68722: GO 68560
68724: POP
68725: POP
// end ;
68726: LD_VAR 0 4
68730: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68731: LD_INT 0
68733: PPUSH
68734: PPUSH
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68742: LD_VAR 0 1
68746: PPUSH
68747: CALL_OW 264
68751: PUSH
68752: LD_INT 81
68754: EQUAL
68755: NOT
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_EXP 88
68766: IN
68767: NOT
68768: OR
68769: IFFALSE 68773
// exit ;
68771: GO 69095
// index := GetElementIndex ( minersList , unit ) ;
68773: LD_ADDR_VAR 0 6
68777: PUSH
68778: LD_EXP 88
68782: PPUSH
68783: LD_VAR 0 1
68787: PPUSH
68788: CALL 28272 0 2
68792: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68793: LD_ADDR_VAR 0 8
68797: PUSH
68798: LD_EXP 90
68802: PUSH
68803: LD_EXP 89
68807: PUSH
68808: LD_VAR 0 6
68812: ARRAY
68813: MINUS
68814: ST_TO_ADDR
// if not minesFreeAmount then
68815: LD_VAR 0 8
68819: NOT
68820: IFFALSE 68824
// exit ;
68822: GO 69095
// tmp := [ ] ;
68824: LD_ADDR_VAR 0 7
68828: PUSH
68829: EMPTY
68830: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68831: LD_ADDR_VAR 0 5
68835: PUSH
68836: DOUBLE
68837: LD_INT 1
68839: DEC
68840: ST_TO_ADDR
68841: LD_VAR 0 8
68845: PUSH
68846: FOR_TO
68847: IFFALSE 69042
// begin _d := rand ( 0 , 5 ) ;
68849: LD_ADDR_VAR 0 11
68853: PUSH
68854: LD_INT 0
68856: PPUSH
68857: LD_INT 5
68859: PPUSH
68860: CALL_OW 12
68864: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68865: LD_ADDR_VAR 0 12
68869: PUSH
68870: LD_INT 2
68872: PPUSH
68873: LD_INT 6
68875: PPUSH
68876: CALL_OW 12
68880: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68881: LD_ADDR_VAR 0 9
68885: PUSH
68886: LD_VAR 0 2
68890: PPUSH
68891: LD_VAR 0 11
68895: PPUSH
68896: LD_VAR 0 12
68900: PPUSH
68901: CALL_OW 272
68905: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68906: LD_ADDR_VAR 0 10
68910: PUSH
68911: LD_VAR 0 3
68915: PPUSH
68916: LD_VAR 0 11
68920: PPUSH
68921: LD_VAR 0 12
68925: PPUSH
68926: CALL_OW 273
68930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68931: LD_VAR 0 9
68935: PPUSH
68936: LD_VAR 0 10
68940: PPUSH
68941: CALL_OW 488
68945: PUSH
68946: LD_VAR 0 9
68950: PUSH
68951: LD_VAR 0 10
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_VAR 0 7
68964: IN
68965: NOT
68966: AND
68967: PUSH
68968: LD_VAR 0 9
68972: PPUSH
68973: LD_VAR 0 10
68977: PPUSH
68978: CALL_OW 458
68982: NOT
68983: AND
68984: IFFALSE 69026
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68986: LD_ADDR_VAR 0 7
68990: PUSH
68991: LD_VAR 0 7
68995: PPUSH
68996: LD_VAR 0 7
69000: PUSH
69001: LD_INT 1
69003: PLUS
69004: PPUSH
69005: LD_VAR 0 9
69009: PUSH
69010: LD_VAR 0 10
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PPUSH
69019: CALL_OW 1
69023: ST_TO_ADDR
69024: GO 69040
// i := i - 1 ;
69026: LD_ADDR_VAR 0 5
69030: PUSH
69031: LD_VAR 0 5
69035: PUSH
69036: LD_INT 1
69038: MINUS
69039: ST_TO_ADDR
// end ;
69040: GO 68846
69042: POP
69043: POP
// for i in tmp do
69044: LD_ADDR_VAR 0 5
69048: PUSH
69049: LD_VAR 0 7
69053: PUSH
69054: FOR_IN
69055: IFFALSE 69093
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69057: LD_VAR 0 1
69061: PPUSH
69062: LD_VAR 0 5
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: PPUSH
69071: LD_VAR 0 5
69075: PUSH
69076: LD_INT 2
69078: ARRAY
69079: PPUSH
69080: CALL 68039 0 3
69084: NOT
69085: IFFALSE 69091
// exit ;
69087: POP
69088: POP
69089: GO 69095
69091: GO 69054
69093: POP
69094: POP
// end ;
69095: LD_VAR 0 4
69099: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69100: LD_INT 0
69102: PPUSH
69103: PPUSH
69104: PPUSH
69105: PPUSH
69106: PPUSH
69107: PPUSH
69108: PPUSH
// if not GetClass ( unit ) = class_sniper then
69109: LD_VAR 0 1
69113: PPUSH
69114: CALL_OW 257
69118: PUSH
69119: LD_INT 5
69121: EQUAL
69122: NOT
69123: IFFALSE 69127
// exit ;
69125: GO 69515
// dist := 8 ;
69127: LD_ADDR_VAR 0 5
69131: PUSH
69132: LD_INT 8
69134: ST_TO_ADDR
// viewRange := 12 ;
69135: LD_ADDR_VAR 0 7
69139: PUSH
69140: LD_INT 12
69142: ST_TO_ADDR
// side := GetSide ( unit ) ;
69143: LD_ADDR_VAR 0 6
69147: PUSH
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 255
69157: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69158: LD_INT 61
69160: PPUSH
69161: LD_VAR 0 6
69165: PPUSH
69166: CALL_OW 321
69170: PUSH
69171: LD_INT 2
69173: EQUAL
69174: IFFALSE 69184
// viewRange := 16 ;
69176: LD_ADDR_VAR 0 7
69180: PUSH
69181: LD_INT 16
69183: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69184: LD_VAR 0 1
69188: PPUSH
69189: LD_VAR 0 2
69193: PPUSH
69194: LD_VAR 0 3
69198: PPUSH
69199: CALL_OW 297
69203: PUSH
69204: LD_VAR 0 5
69208: GREATER
69209: IFFALSE 69288
// begin ComMoveXY ( unit , x , y ) ;
69211: LD_VAR 0 1
69215: PPUSH
69216: LD_VAR 0 2
69220: PPUSH
69221: LD_VAR 0 3
69225: PPUSH
69226: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69230: LD_INT 35
69232: PPUSH
69233: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69237: LD_VAR 0 1
69241: PPUSH
69242: LD_VAR 0 2
69246: PPUSH
69247: LD_VAR 0 3
69251: PPUSH
69252: CALL 59656 0 3
69256: NOT
69257: IFFALSE 69261
// exit ;
69259: GO 69515
// until GetDistUnitXY ( unit , x , y ) < dist ;
69261: LD_VAR 0 1
69265: PPUSH
69266: LD_VAR 0 2
69270: PPUSH
69271: LD_VAR 0 3
69275: PPUSH
69276: CALL_OW 297
69280: PUSH
69281: LD_VAR 0 5
69285: LESS
69286: IFFALSE 69230
// end ; ComTurnXY ( unit , x , y ) ;
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: LD_VAR 0 3
69302: PPUSH
69303: CALL_OW 118
// wait ( 5 ) ;
69307: LD_INT 5
69309: PPUSH
69310: CALL_OW 67
// _d := GetDir ( unit ) ;
69314: LD_ADDR_VAR 0 10
69318: PUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: CALL_OW 254
69328: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69329: LD_ADDR_VAR 0 8
69333: PUSH
69334: LD_VAR 0 1
69338: PPUSH
69339: CALL_OW 250
69343: PPUSH
69344: LD_VAR 0 10
69348: PPUSH
69349: LD_VAR 0 5
69353: PPUSH
69354: CALL_OW 272
69358: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69359: LD_ADDR_VAR 0 9
69363: PUSH
69364: LD_VAR 0 1
69368: PPUSH
69369: CALL_OW 251
69373: PPUSH
69374: LD_VAR 0 10
69378: PPUSH
69379: LD_VAR 0 5
69383: PPUSH
69384: CALL_OW 273
69388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69389: LD_VAR 0 8
69393: PPUSH
69394: LD_VAR 0 9
69398: PPUSH
69399: CALL_OW 488
69403: NOT
69404: IFFALSE 69408
// exit ;
69406: GO 69515
// ComAnimCustom ( unit , 1 ) ;
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_INT 1
69415: PPUSH
69416: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69420: LD_VAR 0 8
69424: PPUSH
69425: LD_VAR 0 9
69429: PPUSH
69430: LD_VAR 0 6
69434: PPUSH
69435: LD_VAR 0 7
69439: PPUSH
69440: CALL_OW 330
// repeat wait ( 1 ) ;
69444: LD_INT 1
69446: PPUSH
69447: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69451: LD_VAR 0 1
69455: PPUSH
69456: CALL_OW 316
69460: PUSH
69461: LD_VAR 0 1
69465: PPUSH
69466: CALL_OW 314
69470: OR
69471: PUSH
69472: LD_VAR 0 1
69476: PPUSH
69477: CALL_OW 302
69481: NOT
69482: OR
69483: PUSH
69484: LD_VAR 0 1
69488: PPUSH
69489: CALL_OW 301
69493: OR
69494: IFFALSE 69444
// RemoveSeeing ( _x , _y , side ) ;
69496: LD_VAR 0 8
69500: PPUSH
69501: LD_VAR 0 9
69505: PPUSH
69506: LD_VAR 0 6
69510: PPUSH
69511: CALL_OW 331
// end ; end_of_file
69515: LD_VAR 0 4
69519: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69520: LD_VAR 0 1
69524: PPUSH
69525: LD_VAR 0 2
69529: PPUSH
69530: LD_VAR 0 3
69534: PPUSH
69535: LD_VAR 0 4
69539: PPUSH
69540: LD_VAR 0 5
69544: PPUSH
69545: LD_VAR 0 6
69549: PPUSH
69550: CALL 7878 0 6
// end ;
69554: PPOPN 6
69556: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69557: LD_INT 0
69559: PPUSH
// begin if not units then
69560: LD_VAR 0 1
69564: NOT
69565: IFFALSE 69569
// exit ;
69567: GO 69569
// end ;
69569: PPOPN 7
69571: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69572: CALL 7782 0 0
// end ;
69576: PPOPN 1
69578: END
