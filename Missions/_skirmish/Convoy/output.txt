// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2186 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3121 0 0
// Action ;
  88: CALL 1261 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// player_commander := CreateHuman ;
 562: LD_ADDR_EXP 6
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 572: LD_ADDR_EXP 5
 576: PUSH
 577: LD_EXP 5
 581: PUSH
 582: LD_EXP 6
 586: ADD
 587: ST_TO_ADDR
// hc_importance := 0 ;
 588: LD_ADDR_OWVAR 32
 592: PUSH
 593: LD_INT 0
 595: ST_TO_ADDR
// case difficulty of 1 :
 596: LD_OWVAR 67
 600: PUSH
 601: LD_INT 1
 603: DOUBLE
 604: EQUAL
 605: IFTRUE 609
 607: GO 631
 609: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 610: LD_ADDR_VAR 0 4
 614: PUSH
 615: LD_INT 4
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
 629: GO 692
 631: LD_INT 2
 633: DOUBLE
 634: EQUAL
 635: IFTRUE 639
 637: GO 661
 639: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: LIST
 658: ST_TO_ADDR
 659: GO 692
 661: LD_INT 3
 663: DOUBLE
 664: EQUAL
 665: IFTRUE 669
 667: GO 691
 669: POP
// s = [ 3 , 1 , 1 ] ; end ;
 670: LD_ADDR_VAR 0 4
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
 689: GO 692
 691: POP
// ChangeSideFog ( 3 , 6 ) ;
 692: LD_INT 3
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 343
// for i = 1 to s [ 1 ] do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 4
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 767
// begin PrepareHuman ( false , 1 , sk ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_INT 1
 729: PPUSH
 730: LD_VAR 0 5
 734: PPUSH
 735: CALL_OW 380
// un := CreateHuman ;
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: CALL_OW 44
 748: ST_TO_ADDR
// player_force := player_force ^ un ;
 749: LD_ADDR_EXP 5
 753: PUSH
 754: LD_EXP 5
 758: PUSH
 759: LD_VAR 0 3
 763: ADD
 764: ST_TO_ADDR
// end ;
 765: GO 721
 767: POP
 768: POP
// SetClass ( un , class_bazooker ) ;
 769: LD_VAR 0 3
 773: PPUSH
 774: LD_INT 9
 776: PPUSH
 777: CALL_OW 336
// for i = 1 to s [ 2 ] do
 781: LD_ADDR_VAR 0 2
 785: PUSH
 786: DOUBLE
 787: LD_INT 1
 789: DEC
 790: ST_TO_ADDR
 791: LD_VAR 0 4
 795: PUSH
 796: LD_INT 2
 798: ARRAY
 799: PUSH
 800: FOR_TO
 801: IFFALSE 999
// begin if Prob ( 30 ) then
 803: LD_INT 30
 805: PPUSH
 806: CALL_OW 13
 810: IFFALSE 865
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 812: LD_ADDR_VAR 0 6
 816: PUSH
 817: LD_INT 3
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: LD_INT 22
 825: PPUSH
 826: LD_INT 3
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 43
 834: PUSH
 835: LD_INT 42
 837: PUSH
 838: LD_INT 44
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 3
 851: PPUSH
 852: CALL_OW 12
 856: ARRAY
 857: PPUSH
 858: CALL 7075 0 6
 862: ST_TO_ADDR
 863: GO 924
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 865: LD_ADDR_VAR 0 6
 869: PUSH
 870: LD_INT 3
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: LD_INT 22
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_INT 1
 884: PPUSH
 885: LD_INT 43
 887: PUSH
 888: LD_INT 42
 890: PUSH
 891: LD_INT 44
 893: PUSH
 894: LD_INT 42
 896: PUSH
 897: LD_INT 44
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_INT 5
 912: PPUSH
 913: CALL_OW 12
 917: ARRAY
 918: PPUSH
 919: CALL 7075 0 6
 923: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 924: LD_INT 0
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_VAR 0 5
 934: PPUSH
 935: CALL_OW 380
// mech := CreateHuman ;
 939: LD_ADDR_VAR 0 8
 943: PUSH
 944: CALL_OW 44
 948: ST_TO_ADDR
// vehs := vehs ^ veh ;
 949: LD_ADDR_VAR 0 7
 953: PUSH
 954: LD_VAR 0 7
 958: PUSH
 959: LD_VAR 0 6
 963: ADD
 964: ST_TO_ADDR
// player_force := player_force ^ veh ;
 965: LD_ADDR_EXP 5
 969: PUSH
 970: LD_EXP 5
 974: PUSH
 975: LD_VAR 0 6
 979: ADD
 980: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
 981: LD_ADDR_VAR 0 9
 985: PUSH
 986: LD_VAR 0 9
 990: PUSH
 991: LD_VAR 0 8
 995: ADD
 996: ST_TO_ADDR
// end ;
 997: GO 800
 999: POP
1000: POP
// for i = 1 to s [ 3 ] do
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: DOUBLE
1007: LD_INT 1
1009: DEC
1010: ST_TO_ADDR
1011: LD_VAR 0 4
1015: PUSH
1016: LD_INT 3
1018: ARRAY
1019: PUSH
1020: FOR_TO
1021: IFFALSE 1066
// begin PrepareHuman ( false , 4 , sk ) ;
1023: LD_INT 0
1025: PPUSH
1026: LD_INT 4
1028: PPUSH
1029: LD_VAR 0 5
1033: PPUSH
1034: CALL_OW 380
// un := CreateHuman ;
1038: LD_ADDR_VAR 0 3
1042: PUSH
1043: CALL_OW 44
1047: ST_TO_ADDR
// player_force := player_force ^ un ;
1048: LD_ADDR_EXP 5
1052: PUSH
1053: LD_EXP 5
1057: PUSH
1058: LD_VAR 0 3
1062: ADD
1063: ST_TO_ADDR
// end ;
1064: GO 1020
1066: POP
1067: POP
// case road of 1 :
1068: LD_EXP 2
1072: PUSH
1073: LD_INT 1
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1100
1081: POP
// begin start_area := pos2 ;
1082: LD_ADDR_EXP 7
1086: PUSH
1087: LD_INT 4
1089: ST_TO_ADDR
// finish_area := pos3 ;
1090: LD_ADDR_EXP 8
1094: PUSH
1095: LD_INT 6
1097: ST_TO_ADDR
// end ; 2 :
1098: GO 1128
1100: LD_INT 2
1102: DOUBLE
1103: EQUAL
1104: IFTRUE 1108
1106: GO 1127
1108: POP
// begin start_area := pos1 ;
1109: LD_ADDR_EXP 7
1113: PUSH
1114: LD_INT 2
1116: ST_TO_ADDR
// finish_area := pos2 ;
1117: LD_ADDR_EXP 8
1121: PUSH
1122: LD_INT 4
1124: ST_TO_ADDR
// end ; end ;
1125: GO 1128
1127: POP
// for i = 1 to player_force do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: DOUBLE
1134: LD_INT 1
1136: DEC
1137: ST_TO_ADDR
1138: LD_EXP 5
1142: PUSH
1143: FOR_TO
1144: IFFALSE 1202
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1146: LD_EXP 5
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 2
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_EXP 2
1171: ARRAY
1172: PPUSH
1173: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1177: LD_EXP 5
1181: PUSH
1182: LD_VAR 0 2
1186: ARRAY
1187: PPUSH
1188: LD_EXP 7
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// end ;
1200: GO 1143
1202: POP
1203: POP
// for i = 1 to s [ 2 ] do
1204: LD_ADDR_VAR 0 2
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_VAR 0 4
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1254
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1226: LD_VAR 0 9
1230: PUSH
1231: LD_VAR 0 2
1235: ARRAY
1236: PPUSH
1237: LD_VAR 0 7
1241: PUSH
1242: LD_VAR 0 2
1246: ARRAY
1247: PPUSH
1248: CALL_OW 52
1252: GO 1223
1254: POP
1255: POP
// end ;
1256: LD_VAR 0 1
1260: RET
// export function Action ; begin
1261: LD_INT 0
1263: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1264: LD_EXP 6
1268: PPUSH
1269: CALL_OW 87
// InGameOn ;
1273: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1277: LD_EXP 6
1281: PPUSH
1282: LD_STRING DS1
1284: PPUSH
1285: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1289: LD_EXP 6
1293: PPUSH
1294: LD_STRING DS2
1296: PPUSH
1297: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS3
1308: PPUSH
1309: CALL_OW 88
// InGameOff ;
1313: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1317: LD_STRING ObConv
1319: PPUSH
1320: CALL_OW 337
// if road = 1 then
1324: LD_EXP 2
1328: PUSH
1329: LD_INT 1
1331: EQUAL
1332: IFFALSE 1346
// SetAreaMapShow ( pos3 , 1 ) else
1334: LD_INT 6
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: CALL_OW 424
1344: GO 1366
// if road = 2 then
1346: LD_EXP 2
1350: PUSH
1351: LD_INT 2
1353: EQUAL
1354: IFFALSE 1366
// SetAreaMapShow ( pos2 , 1 ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 1
1361: PPUSH
1362: CALL_OW 424
// end ;
1366: LD_VAR 0 1
1370: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1371: LD_EXP 8
1375: PPUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 51
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PPUSH
1386: CALL_OW 70
1390: PUSH
1391: LD_INT 0
1393: GREATER
1394: PUSH
1395: LD_INT 22
1397: PUSH
1398: LD_INT 2
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PUSH
1410: LD_INT 0
1412: EQUAL
1413: PUSH
1414: LD_EXP 1
1418: NOT
1419: AND
1420: OR
1421: IFFALSE 1555
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1429: LD_EXP 6
1433: PPUSH
1434: LD_STRING DS-6
1436: PPUSH
1437: CALL_OW 88
// Wait ( 0 0$01 ) ;
1441: LD_INT 35
1443: PPUSH
1444: CALL_OW 67
// AddMedal ( med , 1 ) ;
1448: LD_STRING med
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1458: LD_INT 22
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_INT 0
1475: EQUAL
1476: IFFALSE 1490
// AddMedal ( convoy_clear , 1 ) else
1478: LD_STRING convoy_clear
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL_OW 101
1488: GO 1501
// AddMedal ( convoy_clear , - 1 ) ;
1490: LD_STRING convoy_clear
1492: PPUSH
1493: LD_INT 1
1495: NEG
1496: PPUSH
1497: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1501: LD_INT 22
1503: PUSH
1504: LD_INT 6
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 69
1515: PUSH
1516: LD_INT 2
1518: GREATEREQUAL
1519: IFFALSE 1533
// AddMedal ( convoy_cargos , 1 ) else
1521: LD_STRING convoy_cargos
1523: PPUSH
1524: LD_INT 1
1526: PPUSH
1527: CALL_OW 101
1531: GO 1544
// AddMedal ( convoy_cargos , - 1 ) ;
1533: LD_STRING convoy_cargos
1535: PPUSH
1536: LD_INT 1
1538: NEG
1539: PPUSH
1540: CALL_OW 101
// GiveMedals ( MAIN ) ;
1544: LD_STRING MAIN
1546: PPUSH
1547: CALL_OW 102
// YouWin ;
1551: CALL_OW 103
// end ;
1555: PPOPN 1
1557: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1558: LD_VAR 0 1
1562: PPUSH
1563: CALL_OW 255
1567: PUSH
1568: LD_INT 3
1570: EQUAL
1571: PUSH
1572: LD_VAR 0 1
1576: PPUSH
1577: CALL_OW 247
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: AND
1586: PUSH
1587: LD_INT 22
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 26
1599: PUSH
1600: LD_INT 1
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 69
1615: PUSH
1616: LD_INT 1
1618: GREATER
1619: AND
1620: PUSH
1621: LD_EXP 9
1625: NOT
1626: AND
1627: IFFALSE 1683
// begin hurt := true ;
1629: LD_ADDR_EXP 9
1633: PUSH
1634: LD_INT 1
1636: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1637: LD_INT 22
1639: PUSH
1640: LD_INT 3
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 26
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 69
1665: PUSH
1666: LD_EXP 6
1670: DIFF
1671: PUSH
1672: LD_INT 1
1674: ARRAY
1675: PPUSH
1676: LD_STRING DM4
1678: PPUSH
1679: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1683: LD_VAR 0 1
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 21
1700: PUSH
1701: LD_INT 2
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PPUSH
1712: CALL_OW 69
1716: IN
1717: IFFALSE 1842
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1719: LD_INT 280
1721: PPUSH
1722: LD_INT 490
1724: PPUSH
1725: CALL_OW 12
1729: PPUSH
1730: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1734: LD_VAR 0 1
1738: PPUSH
1739: CALL_OW 250
1743: PPUSH
1744: LD_VAR 0 1
1748: PPUSH
1749: CALL_OW 251
1753: PPUSH
1754: LD_INT 10
1756: PPUSH
1757: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1761: LD_VAR 0 1
1765: PPUSH
1766: CALL_OW 250
1770: PPUSH
1771: LD_VAR 0 1
1775: PPUSH
1776: CALL_OW 251
1780: PPUSH
1781: LD_INT 10
1783: PPUSH
1784: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 250
1797: PPUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 251
1807: PPUSH
1808: LD_INT 10
1810: PPUSH
1811: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 250
1824: PPUSH
1825: LD_VAR 0 1
1829: PPUSH
1830: CALL_OW 251
1834: PPUSH
1835: LD_INT 5
1837: PPUSH
1838: CALL_OW 453
// end ; end ;
1842: PPOPN 1
1844: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1845: LD_INT 3
1847: PPUSH
1848: LD_INT 31
1850: PUSH
1851: LD_INT 11
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: LD_INT 1
1865: ARRAY
1866: PPUSH
1867: CALL_OW 292
1871: IFFALSE 1922
1873: GO 1875
1875: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1876: LD_INT 22
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 26
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PPUSH
1900: CALL_OW 69
1904: PUSH
1905: LD_EXP 6
1909: DIFF
1910: PUSH
1911: LD_INT 1
1913: ARRAY
1914: PPUSH
1915: LD_STRING DM2
1917: PPUSH
1918: CALL_OW 88
// end ;
1922: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1923: LD_INT 3
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 2
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 25
1938: PUSH
1939: LD_INT 1
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PPUSH
1950: CALL_OW 69
1954: PPUSH
1955: LD_EXP 6
1959: PPUSH
1960: CALL_OW 74
1964: PPUSH
1965: CALL_OW 292
1969: IFFALSE 2020
1971: GO 1973
1973: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
1974: LD_INT 22
1976: PUSH
1977: LD_INT 3
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 26
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PPUSH
1998: CALL_OW 69
2002: PUSH
2003: LD_EXP 6
2007: DIFF
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: LD_STRING DM3
2015: PPUSH
2016: CALL_OW 88
// end ;
2020: END
// every 0 0$01 trigger mines_trigger do
2021: LD_EXP 10
2025: IFFALSE 2096
2027: GO 2029
2029: DISABLE
// begin DialogueOn ;
2030: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2034: LD_INT 22
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 26
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PPUSH
2058: CALL_OW 69
2062: PUSH
2063: LD_EXP 6
2067: DIFF
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: LD_STRING DM1
2075: PPUSH
2076: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2080: LD_EXP 6
2084: PPUSH
2085: LD_STRING DS4
2087: PPUSH
2088: CALL_OW 88
// DialogueOff ;
2092: CALL_OW 7
// end ;
2096: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2097: LD_INT 34
2099: PUSH
2100: LD_INT 51
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PPUSH
2107: CALL_OW 69
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
2117: GO 2119
2119: DISABLE
// begin Say ( player_commander , DS5 ) ;
2120: LD_EXP 6
2124: PPUSH
2125: LD_STRING DS5
2127: PPUSH
2128: CALL_OW 88
// end ;
2132: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2133: LD_INT 34
2135: PUSH
2136: LD_INT 51
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 0
2150: EQUAL
2151: IFFALSE 2163
2153: GO 2155
2155: DISABLE
// begin YouLost ( qconvl ) ;
2156: LD_STRING qconvl
2158: PPUSH
2159: CALL_OW 104
// end ;
2163: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2164: LD_EXP 6
2168: PPUSH
2169: CALL_OW 301
2173: IFFALSE 2185
2175: GO 2177
2177: DISABLE
// begin YouLost ( qcom ) ;
2178: LD_STRING qcom
2180: PPUSH
2181: CALL_OW 104
// end ; end_of_file
2185: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2186: LD_INT 0
2188: PPUSH
2189: PPUSH
2190: PPUSH
2191: PPUSH
2192: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2193: LD_INT 3
2195: PPUSH
2196: LD_INT 6
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: CALL_OW 80
// case road of 1 :
2209: LD_EXP 2
2213: PUSH
2214: LD_INT 1
2216: DOUBLE
2217: EQUAL
2218: IFTRUE 2222
2220: GO 2248
2222: POP
// begin area := pos2 ;
2223: LD_ADDR_VAR 0 3
2227: PUSH
2228: LD_INT 4
2230: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2231: LD_ADDR_VAR 0 5
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 46
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// end ; 2 :
2246: GO 2283
2248: LD_INT 2
2250: DOUBLE
2251: EQUAL
2252: IFTRUE 2256
2254: GO 2282
2256: POP
// begin area := pos1 ;
2257: LD_ADDR_VAR 0 3
2261: PUSH
2262: LD_INT 2
2264: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_INT 18
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: ST_TO_ADDR
// end ; end ;
2280: GO 2283
2282: POP
// if road = 1 then
2283: LD_EXP 2
2287: PUSH
2288: LD_INT 1
2290: EQUAL
2291: IFFALSE 2404
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2293: LD_ADDR_EXP 13
2297: PUSH
2298: LD_INT 36
2300: PUSH
2301: LD_INT 43
2303: PUSH
2304: LD_INT 40
2306: PUSH
2307: LD_INT 29
2309: PUSH
2310: LD_INT 56
2312: PUSH
2313: LD_INT 37
2315: PUSH
2316: LD_INT 70
2318: PUSH
2319: LD_INT 32
2321: PUSH
2322: LD_INT 63
2324: PUSH
2325: LD_INT 6
2327: PUSH
2328: LD_INT 84
2330: PUSH
2331: LD_INT 8
2333: PUSH
2334: LD_INT 90
2336: PUSH
2337: LD_INT 24
2339: PUSH
2340: LD_INT 96
2342: PUSH
2343: LD_INT 47
2345: PUSH
2346: LD_INT 110
2348: PUSH
2349: LD_INT 73
2351: PUSH
2352: LD_INT 143
2354: PUSH
2355: LD_INT 102
2357: PUSH
2358: LD_INT 121
2360: PUSH
2361: LD_INT 93
2363: PUSH
2364: LD_INT 98
2366: PUSH
2367: LD_INT 100
2369: PUSH
2370: LD_INT 62
2372: PUSH
2373: LD_INT 114
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// if road = 2 then
2404: LD_EXP 2
2408: PUSH
2409: LD_INT 2
2411: EQUAL
2412: IFFALSE 2549
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2414: LD_ADDR_EXP 13
2418: PUSH
2419: LD_INT 39
2421: PUSH
2422: LD_INT 18
2424: PUSH
2425: LD_INT 61
2427: PUSH
2428: LD_INT 36
2430: PUSH
2431: LD_INT 62
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 75
2439: PUSH
2440: LD_INT 5
2442: PUSH
2443: LD_INT 97
2445: PUSH
2446: LD_INT 17
2448: PUSH
2449: LD_INT 98
2451: PUSH
2452: LD_INT 30
2454: PUSH
2455: LD_INT 95
2457: PUSH
2458: LD_INT 49
2460: PUSH
2461: LD_INT 110
2463: PUSH
2464: LD_INT 71
2466: PUSH
2467: LD_INT 146
2469: PUSH
2470: LD_INT 112
2472: PUSH
2473: LD_INT 100
2475: PUSH
2476: LD_INT 81
2478: PUSH
2479: LD_INT 99
2481: PUSH
2482: LD_INT 115
2484: PUSH
2485: LD_INT 77
2487: PUSH
2488: LD_INT 105
2490: PUSH
2491: LD_INT 65
2493: PUSH
2494: LD_INT 75
2496: PUSH
2497: LD_INT 45
2499: PUSH
2500: LD_INT 46
2502: PUSH
2503: LD_INT 26
2505: PUSH
2506: LD_INT 47
2508: PUSH
2509: LD_INT 29
2511: PUSH
2512: LD_INT 54
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: ST_TO_ADDR
// conv_am := 1 ;
2549: LD_ADDR_EXP 12
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// conv := 0 ;
2557: LD_ADDR_EXP 11
2561: PUSH
2562: LD_INT 0
2564: ST_TO_ADDR
// uc_side := 6 ;
2565: LD_ADDR_OWVAR 20
2569: PUSH
2570: LD_INT 6
2572: ST_TO_ADDR
// uc_nation := 3 ;
2573: LD_ADDR_OWVAR 21
2577: PUSH
2578: LD_INT 3
2580: ST_TO_ADDR
// for i = 1 to 2 do
2581: LD_ADDR_VAR 0 4
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 2
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2700
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2597: LD_ADDR_VAR 0 2
2601: PUSH
2602: LD_INT 6
2604: PPUSH
2605: LD_INT 3
2607: PPUSH
2608: LD_INT 22
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: LD_INT 51
2619: PPUSH
2620: CALL 7075 0 6
2624: ST_TO_ADDR
// cargos := cargos ^ un ;
2625: LD_ADDR_EXP 4
2629: PUSH
2630: LD_EXP 4
2634: PUSH
2635: LD_VAR 0 2
2639: ADD
2640: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_EXP 2
2660: ARRAY
2661: PPUSH
2662: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: LD_VAR 0 3
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2683: LD_VAR 0 2
2687: PPUSH
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 100
2693: PPUSH
2694: CALL_OW 290
// end ;
2698: GO 2594
2700: POP
2701: POP
// end ;
2702: LD_VAR 0 1
2706: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2707: LD_EXP 4
2711: IFFALSE 2823
2713: GO 2715
2715: DISABLE
// begin enable ;
2716: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2717: LD_EXP 4
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PPUSH
2726: CALL_OW 306
2730: PUSH
2731: LD_EXP 4
2735: PUSH
2736: LD_INT 2
2738: ARRAY
2739: PPUSH
2740: CALL_OW 306
2744: OR
2745: IFFALSE 2823
// begin if debug then
2747: LD_EXP 1
2751: IFFALSE 2763
// display_strings := conv ;
2753: LD_ADDR_OWVAR 47
2757: PUSH
2758: LD_EXP 11
2762: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2763: LD_STRING QConv
2765: PPUSH
2766: CALL_OW 97
2770: PUSH
2771: LD_INT 1
2773: DOUBLE
2774: EQUAL
2775: IFTRUE 2779
2777: GO 2790
2779: POP
// conv := 0 ; 2 :
2780: LD_ADDR_EXP 11
2784: PUSH
2785: LD_INT 0
2787: ST_TO_ADDR
2788: GO 2810
2790: LD_INT 2
2792: DOUBLE
2793: EQUAL
2794: IFTRUE 2798
2796: GO 2809
2798: POP
// conv := 1 ; end ;
2799: LD_ADDR_EXP 11
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
2807: GO 2810
2809: POP
// disable ( 01 ) ;
2810: LD_INT 1
2812: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2813: LD_INT 175
2815: PPUSH
2816: CALL_OW 67
// enable ( 01 ) ;
2820: LD_INT 1
2822: ENABLE_MARKED
// end ; end ;
2823: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2824: LD_EXP 11
2828: PUSH
2829: LD_INT 1
2831: EQUAL
2832: IFFALSE 3044
2834: GO 2836
2836: DISABLE
2837: LD_INT 0
2839: PPUSH
2840: PPUSH
2841: PPUSH
// begin enable ;
2842: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2843: LD_ADDR_VAR 0 3
2847: PUSH
2848: LD_INT 34
2850: PUSH
2851: LD_INT 51
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PPUSH
2858: CALL_OW 69
2862: ST_TO_ADDR
// if debug then
2863: LD_EXP 1
2867: IFFALSE 2904
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2869: LD_ADDR_OWVAR 47
2873: PUSH
2874: LD_EXP 13
2878: PUSH
2879: LD_EXP 12
2883: ARRAY
2884: PUSH
2885: LD_EXP 13
2889: PUSH
2890: LD_EXP 12
2894: PUSH
2895: LD_INT 1
2897: PLUS
2898: ARRAY
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: ST_TO_ADDR
// for i = 1 to car do
2904: LD_ADDR_VAR 0 1
2908: PUSH
2909: DOUBLE
2910: LD_INT 1
2912: DEC
2913: ST_TO_ADDR
2914: LD_VAR 0 3
2918: PUSH
2919: FOR_TO
2920: IFFALSE 3042
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2922: LD_VAR 0 3
2926: PUSH
2927: LD_VAR 0 1
2931: ARRAY
2932: PPUSH
2933: LD_EXP 13
2937: PUSH
2938: LD_EXP 12
2942: ARRAY
2943: PPUSH
2944: LD_EXP 13
2948: PUSH
2949: LD_EXP 12
2953: PUSH
2954: LD_INT 1
2956: PLUS
2957: ARRAY
2958: PPUSH
2959: CALL 7153 0 3
2963: IFFALSE 2981
// conv_am := conv_am + 2 else
2965: LD_ADDR_EXP 12
2969: PUSH
2970: LD_EXP 12
2974: PUSH
2975: LD_INT 2
2977: PLUS
2978: ST_TO_ADDR
2979: GO 3040
// if not HasTask ( car [ i ] ) then
2981: LD_VAR 0 3
2985: PUSH
2986: LD_VAR 0 1
2990: ARRAY
2991: PPUSH
2992: CALL_OW 314
2996: NOT
2997: IFFALSE 3040
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2999: LD_VAR 0 3
3003: PUSH
3004: LD_VAR 0 1
3008: ARRAY
3009: PPUSH
3010: LD_EXP 13
3014: PUSH
3015: LD_EXP 12
3019: ARRAY
3020: PPUSH
3021: LD_EXP 13
3025: PUSH
3026: LD_EXP 12
3030: PUSH
3031: LD_INT 1
3033: PLUS
3034: ARRAY
3035: PPUSH
3036: CALL_OW 111
// end ;
3040: GO 2919
3042: POP
3043: POP
// end ;
3044: PPOPN 3
3046: END
// every 0 0$01 trigger conv = 0 do var i ;
3047: LD_EXP 11
3051: PUSH
3052: LD_INT 0
3054: EQUAL
3055: IFFALSE 3118
3057: GO 3059
3059: DISABLE
3060: LD_INT 0
3062: PPUSH
// begin enable ;
3063: ENABLE
// for i = 1 to cargos do
3064: LD_ADDR_VAR 0 1
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_EXP 4
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3116
// if HasTask ( cargos [ i ] ) then
3082: LD_EXP 4
3086: PUSH
3087: LD_VAR 0 1
3091: ARRAY
3092: PPUSH
3093: CALL_OW 314
3097: IFFALSE 3114
// ComStop ( cargos [ i ] ) ;
3099: LD_EXP 4
3103: PUSH
3104: LD_VAR 0 1
3108: ARRAY
3109: PPUSH
3110: CALL_OW 141
3114: GO 3079
3116: POP
3117: POP
// end ; end_of_file
3118: PPOPN 1
3120: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
3131: PPUSH
3132: PPUSH
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
3138: PPUSH
// uc_side := 2 ;
3139: LD_ADDR_OWVAR 20
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// uc_nation := 2 ;
3147: LD_ADDR_OWVAR 21
3151: PUSH
3152: LD_INT 2
3154: ST_TO_ADDR
// if road = 1 then
3155: LD_EXP 2
3159: PUSH
3160: LD_INT 1
3162: EQUAL
3163: IFFALSE 3925
// begin case Difficulty of 1 :
3165: LD_OWVAR 67
3169: PUSH
3170: LD_INT 1
3172: DOUBLE
3173: EQUAL
3174: IFTRUE 3178
3176: GO 3485
3178: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_INT 56
3186: PUSH
3187: LD_INT 37
3189: PUSH
3190: LD_INT 2
3192: PUSH
3193: LD_INT 81
3195: PUSH
3196: LD_INT 6
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: LD_INT 90
3204: PUSH
3205: LD_INT 25
3207: PUSH
3208: LD_INT 3
3210: PUSH
3211: LD_INT 105
3213: PUSH
3214: LD_INT 68
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 96
3222: PUSH
3223: LD_INT 82
3225: PUSH
3226: LD_INT 4
3228: PUSH
3229: LD_INT 80
3231: PUSH
3232: LD_INT 109
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: LD_INT 9
3268: PUSH
3269: LD_INT 10
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3281: LD_ADDR_VAR 0 4
3285: PUSH
3286: LD_INT 13
3288: PUSH
3289: LD_INT 14
3291: PUSH
3292: LD_INT 15
3294: PUSH
3295: LD_INT 16
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3304: LD_ADDR_VAR 0 15
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 0
3317: PUSH
3318: LD_INT 1
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3327: LD_ADDR_VAR 0 8
3331: PUSH
3332: LD_INT 68
3334: PUSH
3335: LD_INT 5
3337: PUSH
3338: LD_INT 96
3340: PUSH
3341: LD_INT 53
3343: PUSH
3344: LD_INT 142
3346: PUSH
3347: LD_INT 98
3349: PUSH
3350: LD_INT 96
3352: PUSH
3353: LD_INT 82
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3366: LD_ADDR_VAR 0 6
3370: PUSH
3371: LD_INT 17
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3381: LD_ADDR_VAR 0 5
3385: PUSH
3386: LD_INT 104
3388: PUSH
3389: LD_INT 21
3391: PUSH
3392: LD_INT 4
3394: PUSH
3395: LD_INT 100
3397: PUSH
3398: LD_INT 21
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3412: LD_ADDR_VAR 0 7
3416: PUSH
3417: LD_INT 38
3419: PUSH
3420: LD_INT 28
3422: PUSH
3423: LD_INT 41
3425: PUSH
3426: LD_INT 29
3428: PUSH
3429: LD_INT 62
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: LD_INT 65
3437: PUSH
3438: LD_INT 7
3440: PUSH
3441: LD_INT 95
3443: PUSH
3444: LD_INT 55
3446: PUSH
3447: LD_INT 98
3449: PUSH
3450: LD_INT 54
3452: PUSH
3453: LD_INT 96
3455: PUSH
3456: LD_INT 111
3458: PUSH
3459: LD_INT 99
3461: PUSH
3462: LD_INT 112
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: ST_TO_ADDR
// end ; 2 , 3 :
3483: GO 3923
3485: LD_INT 2
3487: DOUBLE
3488: EQUAL
3489: IFTRUE 3499
3491: LD_INT 3
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3922
3499: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: LD_INT 56
3507: PUSH
3508: LD_INT 37
3510: PUSH
3511: LD_INT 2
3513: PUSH
3514: LD_INT 81
3516: PUSH
3517: LD_INT 6
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 90
3525: PUSH
3526: LD_INT 25
3528: PUSH
3529: LD_INT 3
3531: PUSH
3532: LD_INT 105
3534: PUSH
3535: LD_INT 68
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 96
3543: PUSH
3544: LD_INT 82
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: LD_INT 80
3552: PUSH
3553: LD_INT 109
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3579: LD_ADDR_VAR 0 3
3583: PUSH
3584: LD_INT 7
3586: PUSH
3587: LD_INT 8
3589: PUSH
3590: LD_INT 9
3592: PUSH
3593: LD_INT 10
3595: PUSH
3596: LD_INT 11
3598: PUSH
3599: LD_INT 12
3601: PUSH
3602: LD_INT 42
3604: PUSH
3605: LD_INT 43
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3618: LD_ADDR_VAR 0 4
3622: PUSH
3623: LD_INT 13
3625: PUSH
3626: LD_INT 14
3628: PUSH
3629: LD_INT 15
3631: PUSH
3632: LD_INT 16
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3641: LD_ADDR_VAR 0 15
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3664: LD_ADDR_VAR 0 8
3668: PUSH
3669: LD_INT 68
3671: PUSH
3672: LD_INT 5
3674: PUSH
3675: LD_INT 96
3677: PUSH
3678: LD_INT 53
3680: PUSH
3681: LD_INT 142
3683: PUSH
3684: LD_INT 98
3686: PUSH
3687: LD_INT 96
3689: PUSH
3690: LD_INT 82
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3703: LD_ADDR_VAR 0 6
3707: PUSH
3708: LD_INT 17
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3718: LD_ADDR_VAR 0 5
3722: PUSH
3723: LD_INT 104
3725: PUSH
3726: LD_INT 21
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 100
3734: PUSH
3735: LD_INT 21
3737: PUSH
3738: LD_INT 4
3740: PUSH
3741: LD_INT 91
3743: PUSH
3744: LD_INT 28
3746: PUSH
3747: LD_INT 0
3749: PUSH
3750: LD_INT 92
3752: PUSH
3753: LD_INT 31
3755: PUSH
3756: LD_INT 1
3758: PUSH
3759: LD_INT 71
3761: PUSH
3762: LD_INT 106
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 71
3770: PUSH
3771: LD_INT 103
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 66
3779: PUSH
3780: LD_INT 102
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3809: LD_ADDR_VAR 0 7
3813: PUSH
3814: LD_INT 38
3816: PUSH
3817: LD_INT 28
3819: PUSH
3820: LD_INT 41
3822: PUSH
3823: LD_INT 29
3825: PUSH
3826: LD_INT 62
3828: PUSH
3829: LD_INT 5
3831: PUSH
3832: LD_INT 65
3834: PUSH
3835: LD_INT 7
3837: PUSH
3838: LD_INT 95
3840: PUSH
3841: LD_INT 55
3843: PUSH
3844: LD_INT 98
3846: PUSH
3847: LD_INT 54
3849: PUSH
3850: LD_INT 96
3852: PUSH
3853: LD_INT 111
3855: PUSH
3856: LD_INT 99
3858: PUSH
3859: LD_INT 112
3861: PUSH
3862: LD_INT 86
3864: PUSH
3865: LD_INT 17
3867: PUSH
3868: LD_INT 89
3870: PUSH
3871: LD_INT 17
3873: PUSH
3874: LD_INT 136
3876: PUSH
3877: LD_INT 91
3879: PUSH
3880: LD_INT 140
3882: PUSH
3883: LD_INT 91
3885: PUSH
3886: LD_INT 102
3888: PUSH
3889: LD_INT 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: ST_TO_ADDR
// end ; end ;
3920: GO 3923
3922: POP
// end else
3923: GO 4865
// if road = 2 then
3925: LD_EXP 2
3929: PUSH
3930: LD_INT 2
3932: EQUAL
3933: IFFALSE 4865
// begin case Difficulty of 1 :
3935: LD_OWVAR 67
3939: PUSH
3940: LD_INT 1
3942: DOUBLE
3943: EQUAL
3944: IFTRUE 3948
3946: GO 4359
3948: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: LD_INT 44
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 62
3965: PUSH
3966: LD_INT 8
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 68
3977: PUSH
3978: LD_INT 2
3980: PUSH
3981: LD_INT 143
3983: PUSH
3984: LD_INT 96
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 90
3992: PUSH
3993: LD_INT 115
3995: PUSH
3996: LD_INT 4
3998: PUSH
3999: LD_INT 56
4001: PUSH
4002: LD_INT 59
4004: PUSH
4005: LD_INT 5
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: LD_INT 45
4035: PUSH
4036: LD_INT 46
4038: PUSH
4039: LD_INT 47
4041: PUSH
4042: LD_INT 48
4044: PUSH
4045: LD_INT 49
4047: PUSH
4048: LD_INT 50
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 4
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4090: LD_ADDR_VAR 0 15
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 0
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: LD_INT 0
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4121: LD_ADDR_VAR 0 8
4125: PUSH
4126: LD_INT 44
4128: PUSH
4129: LD_INT 22
4131: PUSH
4132: LD_INT 62
4134: PUSH
4135: LD_INT 8
4137: PUSH
4138: LD_INT 106
4140: PUSH
4141: LD_INT 68
4143: PUSH
4144: LD_INT 143
4146: PUSH
4147: LD_INT 96
4149: PUSH
4150: LD_INT 90
4152: PUSH
4153: LD_INT 115
4155: PUSH
4156: LD_INT 56
4158: PUSH
4159: LD_INT 59
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4176: LD_ADDR_VAR 0 6
4180: PUSH
4181: LD_INT 17
4183: PUSH
4184: LD_INT 3
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4191: LD_ADDR_VAR 0 5
4195: PUSH
4196: LD_INT 51
4198: PUSH
4199: LD_INT 29
4201: PUSH
4202: LD_INT 5
4204: PUSH
4205: LD_INT 55
4207: PUSH
4208: LD_INT 33
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4222: LD_ADDR_VAR 0 7
4226: PUSH
4227: LD_INT 31
4229: PUSH
4230: LD_INT 13
4232: PUSH
4233: LD_INT 33
4235: PUSH
4236: LD_INT 13
4238: PUSH
4239: LD_INT 35
4241: PUSH
4242: LD_INT 13
4244: PUSH
4245: LD_INT 98
4247: PUSH
4248: LD_INT 20
4250: PUSH
4251: LD_INT 102
4253: PUSH
4254: LD_INT 25
4256: PUSH
4257: LD_INT 97
4259: PUSH
4260: LD_INT 33
4262: PUSH
4263: LD_INT 101
4265: PUSH
4266: LD_INT 54
4268: PUSH
4269: LD_INT 98
4271: PUSH
4272: LD_INT 54
4274: PUSH
4275: LD_INT 96
4277: PUSH
4278: LD_INT 55
4280: PUSH
4281: LD_INT 94
4283: PUSH
4284: LD_INT 56
4286: PUSH
4287: LD_INT 145
4289: PUSH
4290: LD_INT 102
4292: PUSH
4293: LD_INT 146
4295: PUSH
4296: LD_INT 100
4298: PUSH
4299: LD_INT 97
4301: PUSH
4302: LD_INT 114
4304: PUSH
4305: LD_INT 99
4307: PUSH
4308: LD_INT 117
4310: PUSH
4311: LD_INT 54
4313: PUSH
4314: LD_INT 58
4316: PUSH
4317: LD_INT 55
4319: PUSH
4320: LD_INT 56
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: ST_TO_ADDR
// end ; 2 , 3 :
4357: GO 4865
4359: LD_INT 2
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4373
4365: LD_INT 3
4367: DOUBLE
4368: EQUAL
4369: IFTRUE 4373
4371: GO 4864
4373: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4374: LD_ADDR_VAR 0 2
4378: PUSH
4379: LD_INT 44
4381: PUSH
4382: LD_INT 22
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 62
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: LD_INT 0
4396: PUSH
4397: LD_INT 106
4399: PUSH
4400: LD_INT 68
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 143
4408: PUSH
4409: LD_INT 96
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 90
4417: PUSH
4418: LD_INT 115
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: LD_INT 56
4426: PUSH
4427: LD_INT 59
4429: PUSH
4430: LD_INT 5
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 45
4460: PUSH
4461: LD_INT 46
4463: PUSH
4464: LD_INT 47
4466: PUSH
4467: LD_INT 48
4469: PUSH
4470: LD_INT 49
4472: PUSH
4473: LD_INT 50
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4515: LD_ADDR_VAR 0 15
4519: PUSH
4520: LD_INT 0
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: LD_INT 5
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4546: LD_ADDR_VAR 0 8
4550: PUSH
4551: LD_INT 21
4553: PUSH
4554: LD_INT 27
4556: PUSH
4557: LD_INT 44
4559: PUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 62
4565: PUSH
4566: LD_INT 8
4568: PUSH
4569: LD_INT 106
4571: PUSH
4572: LD_INT 68
4574: PUSH
4575: LD_INT 143
4577: PUSH
4578: LD_INT 96
4580: PUSH
4581: LD_INT 90
4583: PUSH
4584: LD_INT 115
4586: PUSH
4587: LD_INT 56
4589: PUSH
4590: LD_INT 59
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4609: LD_ADDR_VAR 0 6
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4624: LD_ADDR_VAR 0 5
4628: PUSH
4629: LD_INT 51
4631: PUSH
4632: LD_INT 29
4634: PUSH
4635: LD_INT 5
4637: PUSH
4638: LD_INT 55
4640: PUSH
4641: LD_INT 33
4643: PUSH
4644: LD_INT 5
4646: PUSH
4647: LD_INT 97
4649: PUSH
4650: LD_INT 37
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 112
4658: PUSH
4659: LD_INT 72
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 120
4667: PUSH
4668: LD_INT 93
4670: PUSH
4671: LD_INT 2
4673: PUSH
4674: LD_INT 25
4676: PUSH
4677: LD_INT 45
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: LD_INT 27
4685: PUSH
4686: LD_INT 48
4688: PUSH
4689: LD_INT 1
4691: PUSH
4692: LD_INT 28
4694: PUSH
4695: LD_INT 51
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4727: LD_ADDR_VAR 0 7
4731: PUSH
4732: LD_INT 31
4734: PUSH
4735: LD_INT 13
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 13
4743: PUSH
4744: LD_INT 35
4746: PUSH
4747: LD_INT 13
4749: PUSH
4750: LD_INT 98
4752: PUSH
4753: LD_INT 20
4755: PUSH
4756: LD_INT 102
4758: PUSH
4759: LD_INT 25
4761: PUSH
4762: LD_INT 97
4764: PUSH
4765: LD_INT 33
4767: PUSH
4768: LD_INT 101
4770: PUSH
4771: LD_INT 54
4773: PUSH
4774: LD_INT 98
4776: PUSH
4777: LD_INT 54
4779: PUSH
4780: LD_INT 96
4782: PUSH
4783: LD_INT 55
4785: PUSH
4786: LD_INT 94
4788: PUSH
4789: LD_INT 56
4791: PUSH
4792: LD_INT 145
4794: PUSH
4795: LD_INT 102
4797: PUSH
4798: LD_INT 146
4800: PUSH
4801: LD_INT 100
4803: PUSH
4804: LD_INT 97
4806: PUSH
4807: LD_INT 114
4809: PUSH
4810: LD_INT 99
4812: PUSH
4813: LD_INT 117
4815: PUSH
4816: LD_INT 54
4818: PUSH
4819: LD_INT 58
4821: PUSH
4822: LD_INT 55
4824: PUSH
4825: LD_INT 56
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: ST_TO_ADDR
// end ; end ;
4862: GO 4865
4864: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4865: LD_ADDR_EXP 3
4869: PUSH
4870: LD_INT 4
4872: PUSH
4873: LD_INT 5
4875: PUSH
4876: LD_INT 6
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: PUSH
4884: LD_OWVAR 67
4888: ARRAY
4889: ST_TO_ADDR
// if Difficulty > 1 then
4890: LD_OWVAR 67
4894: PUSH
4895: LD_INT 1
4897: GREATER
4898: IFFALSE 4913
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4900: LD_INT 5
4902: PPUSH
4903: LD_INT 2
4905: PPUSH
4906: LD_INT 2
4908: PPUSH
4909: CALL_OW 322
// if Difficulty > 1 then
4913: LD_OWVAR 67
4917: PUSH
4918: LD_INT 1
4920: GREATER
4921: IFFALSE 4936
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4923: LD_INT 52
4925: PPUSH
4926: LD_INT 2
4928: PPUSH
4929: LD_INT 2
4931: PPUSH
4932: CALL_OW 322
// miners := [ ] ;
4936: LD_ADDR_EXP 15
4940: PUSH
4941: EMPTY
4942: ST_TO_ADDR
// hovers := [ ] ;
4943: LD_ADDR_EXP 16
4947: PUSH
4948: EMPTY
4949: ST_TO_ADDR
// hovers_driver := [ ] ;
4950: LD_ADDR_EXP 17
4954: PUSH
4955: EMPTY
4956: ST_TO_ADDR
// tanks := [ ] ;
4957: LD_ADDR_EXP 18
4961: PUSH
4962: EMPTY
4963: ST_TO_ADDR
// p := 1 ;
4964: LD_ADDR_VAR 0 10
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4972: LD_ADDR_OWVAR 43
4976: PUSH
4977: LD_INT 4
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: LD_INT 6
4985: PUSH
4986: LD_INT 7
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_OWVAR 67
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: ARRAY
5004: ST_TO_ADDR
// bc_type = b_breastwork ;
5005: LD_ADDR_OWVAR 42
5009: PUSH
5010: LD_INT 31
5012: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5013: LD_ADDR_VAR 0 9
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 3
5030: DIVREAL
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5210
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5035: LD_ADDR_VAR 0 13
5039: PUSH
5040: LD_VAR 0 2
5044: PUSH
5045: LD_VAR 0 10
5049: ARRAY
5050: PPUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_VAR 0 10
5060: PUSH
5061: LD_INT 1
5063: PLUS
5064: ARRAY
5065: PPUSH
5066: LD_VAR 0 2
5070: PUSH
5071: LD_VAR 0 10
5075: PUSH
5076: LD_INT 2
5078: PLUS
5079: ARRAY
5080: PPUSH
5081: CALL_OW 47
5085: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5086: LD_INT 0
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_EXP 3
5096: PPUSH
5097: CALL_OW 380
// un := CreateHuman ;
5101: LD_ADDR_VAR 0 12
5105: PUSH
5106: CALL_OW 44
5110: ST_TO_ADDR
// dir := GetDir ( b ) ;
5111: LD_ADDR_VAR 0 16
5115: PUSH
5116: LD_VAR 0 13
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// if dir < 3 then
5126: LD_VAR 0 16
5130: PUSH
5131: LD_INT 3
5133: LESS
5134: IFFALSE 5152
// dir := dir + 3 else
5136: LD_ADDR_VAR 0 16
5140: PUSH
5141: LD_VAR 0 16
5145: PUSH
5146: LD_INT 3
5148: PLUS
5149: ST_TO_ADDR
5150: GO 5166
// dir := dir - 3 ;
5152: LD_ADDR_VAR 0 16
5156: PUSH
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: MINUS
5165: ST_TO_ADDR
// SetDir ( un , dir ) ;
5166: LD_VAR 0 12
5170: PPUSH
5171: LD_VAR 0 16
5175: PPUSH
5176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5180: LD_VAR 0 12
5184: PPUSH
5185: LD_VAR 0 13
5189: PPUSH
5190: CALL_OW 52
// p := p + 3 ;
5194: LD_ADDR_VAR 0 10
5198: PUSH
5199: LD_VAR 0 10
5203: PUSH
5204: LD_INT 3
5206: PLUS
5207: ST_TO_ADDR
// end ;
5208: GO 5032
5210: POP
5211: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5212: LD_ADDR_VAR 0 14
5216: PUSH
5217: LD_INT 2
5219: PUSH
5220: LD_INT 3
5222: PUSH
5223: LD_INT 4
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: LD_OWVAR 67
5235: ARRAY
5236: ST_TO_ADDR
// for i = 1 to sold_stand do
5237: LD_ADDR_VAR 0 9
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_VAR 0 3
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5432
// for p = 1 to x do
5255: LD_ADDR_VAR 0 10
5259: PUSH
5260: DOUBLE
5261: LD_INT 1
5263: DEC
5264: ST_TO_ADDR
5265: LD_VAR 0 14
5269: PUSH
5270: FOR_TO
5271: IFFALSE 5428
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_VAR 0 9
5282: ARRAY
5283: PUSH
5284: LD_INT 10
5286: EQUAL
5287: PUSH
5288: LD_EXP 2
5292: PUSH
5293: LD_INT 2
5295: EQUAL
5296: PUSH
5297: LD_OWVAR 67
5301: PUSH
5302: LD_INT 1
5304: GREATER
5305: AND
5306: PUSH
5307: LD_VAR 0 10
5311: PUSH
5312: LD_VAR 0 14
5316: EQUAL
5317: AND
5318: OR
5319: IFFALSE 5338
// PrepareHuman ( false , class_mortar , skill ) else
5321: LD_INT 0
5323: PPUSH
5324: LD_INT 8
5326: PPUSH
5327: LD_EXP 3
5331: PPUSH
5332: CALL_OW 380
5336: GO 5353
// PrepareHuman ( false , 1 , skill ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_EXP 3
5348: PPUSH
5349: CALL_OW 380
// un := CreateHuman ;
5353: LD_ADDR_VAR 0 12
5357: PUSH
5358: CALL_OW 44
5362: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5363: LD_VAR 0 12
5367: PPUSH
5368: CALL_OW 257
5372: PUSH
5373: LD_INT 1
5375: EQUAL
5376: IFFALSE 5394
// miners := miners ^ un ;
5378: LD_ADDR_EXP 15
5382: PUSH
5383: LD_EXP 15
5387: PUSH
5388: LD_VAR 0 12
5392: ADD
5393: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5394: LD_VAR 0 12
5398: PPUSH
5399: LD_VAR 0 3
5403: PUSH
5404: LD_VAR 0 9
5408: ARRAY
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// ComHold ( un ) ;
5417: LD_VAR 0 12
5421: PPUSH
5422: CALL_OW 140
// end ;
5426: GO 5270
5428: POP
5429: POP
5430: GO 5252
5432: POP
5433: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5434: LD_ADDR_VAR 0 14
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: LD_INT 4
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_OWVAR 67
5457: ARRAY
5458: ST_TO_ADDR
// for i = 1 to sold_crawl do
5459: LD_ADDR_VAR 0 9
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_VAR 0 4
5473: PUSH
5474: FOR_TO
5475: IFFALSE 5587
// for p = 1 to x do
5477: LD_ADDR_VAR 0 10
5481: PUSH
5482: DOUBLE
5483: LD_INT 1
5485: DEC
5486: ST_TO_ADDR
5487: LD_VAR 0 14
5491: PUSH
5492: FOR_TO
5493: IFFALSE 5583
// begin PrepareHuman ( false , 1 , skill ) ;
5495: LD_INT 0
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: LD_EXP 3
5505: PPUSH
5506: CALL_OW 380
// un := CreateHuman ;
5510: LD_ADDR_VAR 0 12
5514: PUSH
5515: CALL_OW 44
5519: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5520: LD_VAR 0 12
5524: PPUSH
5525: LD_VAR 0 15
5529: PUSH
5530: LD_VAR 0 9
5534: ARRAY
5535: PPUSH
5536: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5540: LD_VAR 0 12
5544: PPUSH
5545: LD_VAR 0 4
5549: PUSH
5550: LD_VAR 0 9
5554: ARRAY
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// ComCrawl ( un ) ;
5563: LD_VAR 0 12
5567: PPUSH
5568: CALL_OW 137
// AddComHold ( un ) ;
5572: LD_VAR 0 12
5576: PPUSH
5577: CALL_OW 200
// end ;
5581: GO 5492
5583: POP
5584: POP
5585: GO 5474
5587: POP
5588: POP
// p := 1 ;
5589: LD_ADDR_VAR 0 10
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5597: LD_ADDR_VAR 0 9
5601: PUSH
5602: DOUBLE
5603: LD_INT 1
5605: DEC
5606: ST_TO_ADDR
5607: LD_VAR 0 8
5611: PUSH
5612: LD_INT 2
5614: DIVREAL
5615: PUSH
5616: FOR_TO
5617: IFFALSE 5671
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5619: LD_VAR 0 8
5623: PUSH
5624: LD_VAR 0 10
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 8
5634: PUSH
5635: LD_VAR 0 10
5639: PUSH
5640: LD_INT 1
5642: PLUS
5643: ARRAY
5644: PPUSH
5645: LD_INT 2
5647: PPUSH
5648: LD_INT 10
5650: PPUSH
5651: CALL_OW 330
// p := p + 2 ;
5655: LD_ADDR_VAR 0 10
5659: PUSH
5660: LD_VAR 0 10
5664: PUSH
5665: LD_INT 2
5667: PLUS
5668: ST_TO_ADDR
// end ;
5669: GO 5616
5671: POP
5672: POP
// for i = 1 to hover_x [ 2 ] do
5673: LD_ADDR_VAR 0 9
5677: PUSH
5678: DOUBLE
5679: LD_INT 1
5681: DEC
5682: ST_TO_ADDR
5683: LD_VAR 0 6
5687: PUSH
5688: LD_INT 2
5690: ARRAY
5691: PUSH
5692: FOR_TO
5693: IFFALSE 5842
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5695: LD_INT 0
5697: PPUSH
5698: LD_INT 3
5700: PPUSH
5701: LD_EXP 3
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: CALL_OW 380
// un := CreateHuman ;
5714: LD_ADDR_VAR 0 12
5718: PUSH
5719: CALL_OW 44
5723: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5724: LD_ADDR_EXP 17
5728: PUSH
5729: LD_EXP 17
5733: PUSH
5734: LD_VAR 0 12
5738: ADD
5739: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5740: LD_ADDR_VAR 0 11
5744: PUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: LD_INT 11
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: LD_INT 92
5762: PUSH
5763: LD_INT 24
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_VAR 0 9
5774: PUSH
5775: LD_INT 2
5777: MOD
5778: PUSH
5779: LD_INT 1
5781: PLUS
5782: ARRAY
5783: PPUSH
5784: CALL 7075 0 6
5788: ST_TO_ADDR
// hovers := hovers ^ veh ;
5789: LD_ADDR_EXP 16
5793: PUSH
5794: LD_EXP 16
5798: PUSH
5799: LD_VAR 0 11
5803: ADD
5804: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5805: LD_VAR 0 11
5809: PPUSH
5810: LD_VAR 0 6
5814: PUSH
5815: LD_INT 1
5817: ARRAY
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5826: LD_VAR 0 12
5830: PPUSH
5831: LD_VAR 0 11
5835: PPUSH
5836: CALL_OW 52
// end ;
5840: GO 5692
5842: POP
5843: POP
// p := 1 ;
5844: LD_ADDR_VAR 0 10
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: DOUBLE
5858: LD_INT 1
5860: DEC
5861: ST_TO_ADDR
5862: LD_VAR 0 5
5866: PUSH
5867: LD_INT 3
5869: DIVREAL
5870: PUSH
5871: FOR_TO
5872: IFFALSE 6046
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_EXP 3
5884: PUSH
5885: LD_INT 1
5887: PLUS
5888: PPUSH
5889: CALL_OW 380
// un := CreateHuman ;
5893: LD_ADDR_VAR 0 12
5897: PUSH
5898: CALL_OW 44
5902: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5903: LD_ADDR_VAR 0 11
5907: PUSH
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 2
5913: PPUSH
5914: LD_INT 14
5916: PPUSH
5917: LD_INT 2
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: LD_INT 27
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 26
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_INT 3
5942: PPUSH
5943: CALL_OW 12
5947: ARRAY
5948: PPUSH
5949: CALL 7075 0 6
5953: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5954: LD_VAR 0 11
5958: PPUSH
5959: LD_VAR 0 5
5963: PUSH
5964: LD_VAR 0 10
5968: PUSH
5969: LD_INT 2
5971: PLUS
5972: ARRAY
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5978: LD_VAR 0 11
5982: PPUSH
5983: LD_VAR 0 5
5987: PUSH
5988: LD_VAR 0 10
5992: ARRAY
5993: PPUSH
5994: LD_VAR 0 5
5998: PUSH
5999: LD_VAR 0 10
6003: PUSH
6004: LD_INT 1
6006: PLUS
6007: ARRAY
6008: PPUSH
6009: LD_INT 0
6011: PPUSH
6012: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6016: LD_VAR 0 12
6020: PPUSH
6021: LD_VAR 0 11
6025: PPUSH
6026: CALL_OW 52
// p := p + 3 ;
6030: LD_ADDR_VAR 0 10
6034: PUSH
6035: LD_VAR 0 10
6039: PUSH
6040: LD_INT 3
6042: PLUS
6043: ST_TO_ADDR
// end ;
6044: GO 5871
6046: POP
6047: POP
// p := 1 ;
6048: LD_ADDR_VAR 0 10
6052: PUSH
6053: LD_INT 1
6055: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6056: LD_ADDR_VAR 0 9
6060: PUSH
6061: DOUBLE
6062: LD_INT 1
6064: DEC
6065: ST_TO_ADDR
6066: LD_VAR 0 7
6070: PUSH
6071: LD_INT 2
6073: DIVREAL
6074: PUSH
6075: FOR_TO
6076: IFFALSE 6130
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6078: LD_VAR 0 7
6082: PUSH
6083: LD_VAR 0 10
6087: ARRAY
6088: PPUSH
6089: LD_VAR 0 7
6093: PUSH
6094: LD_VAR 0 10
6098: PUSH
6099: LD_INT 1
6101: PLUS
6102: ARRAY
6103: PPUSH
6104: LD_INT 2
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 454
// p := p + 2 ;
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: LD_VAR 0 10
6123: PUSH
6124: LD_INT 2
6126: PLUS
6127: ST_TO_ADDR
// end ;
6128: GO 6075
6130: POP
6131: POP
// mines := mines_xy ;
6132: LD_ADDR_EXP 14
6136: PUSH
6137: LD_VAR 0 7
6141: ST_TO_ADDR
// end ;
6142: LD_VAR 0 1
6146: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6147: GO 6149
6149: DISABLE
6150: LD_INT 0
6152: PPUSH
6153: PPUSH
6154: PPUSH
// begin enable ;
6155: ENABLE
// if tanks > 0 then
6156: LD_EXP 18
6160: PUSH
6161: LD_INT 0
6163: GREATER
6164: IFFALSE 6272
// begin for i = 1 to tanks do
6166: LD_ADDR_VAR 0 3
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_EXP 18
6180: PUSH
6181: FOR_TO
6182: IFFALSE 6270
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6184: LD_INT 2
6186: PPUSH
6187: LD_EXP 18
6191: PUSH
6192: LD_VAR 0 3
6196: ARRAY
6197: PPUSH
6198: CALL_OW 292
6202: PUSH
6203: LD_EXP 18
6207: PUSH
6208: LD_VAR 0 3
6212: ARRAY
6213: PPUSH
6214: CALL_OW 314
6218: NOT
6219: AND
6220: IFFALSE 6268
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6222: LD_EXP 18
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: PPUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PPUSH
6243: CALL_OW 69
6247: PPUSH
6248: LD_EXP 18
6252: PUSH
6253: LD_VAR 0 3
6257: ARRAY
6258: PPUSH
6259: CALL_OW 74
6263: PPUSH
6264: CALL_OW 115
6268: GO 6181
6270: POP
6271: POP
// end ; if hovers > 0 then
6272: LD_EXP 16
6276: PUSH
6277: LD_INT 0
6279: GREATER
6280: IFFALSE 6605
// begin for i = 1 to hovers do
6282: LD_ADDR_VAR 0 3
6286: PUSH
6287: DOUBLE
6288: LD_INT 1
6290: DEC
6291: ST_TO_ADDR
6292: LD_EXP 16
6296: PUSH
6297: FOR_TO
6298: IFFALSE 6603
// begin if GetLives ( hovers [ i ] ) < 600 then
6300: LD_EXP 16
6304: PUSH
6305: LD_VAR 0 3
6309: ARRAY
6310: PPUSH
6311: CALL_OW 256
6315: PUSH
6316: LD_INT 600
6318: LESS
6319: IFFALSE 6430
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6321: LD_EXP 16
6325: PUSH
6326: LD_VAR 0 3
6330: ARRAY
6331: PPUSH
6332: LD_INT 18
6334: PPUSH
6335: CALL_OW 308
6339: NOT
6340: IFFALSE 6362
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6342: LD_EXP 16
6346: PUSH
6347: LD_VAR 0 3
6351: ARRAY
6352: PPUSH
6353: LD_INT 18
6355: PPUSH
6356: CALL_OW 113
6360: GO 6430
// if IsDrivenBy ( hovers [ i ] ) then
6362: LD_EXP 16
6366: PUSH
6367: LD_VAR 0 3
6371: ARRAY
6372: PPUSH
6373: CALL_OW 311
6377: IFFALSE 6430
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6379: LD_EXP 16
6383: PUSH
6384: LD_VAR 0 3
6388: ARRAY
6389: PPUSH
6390: CALL_OW 311
6394: PPUSH
6395: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6399: LD_EXP 16
6403: PUSH
6404: LD_VAR 0 3
6408: ARRAY
6409: PPUSH
6410: CALL_OW 311
6414: PPUSH
6415: LD_EXP 16
6419: PUSH
6420: LD_VAR 0 3
6424: ARRAY
6425: PPUSH
6426: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 256
6445: PUSH
6446: LD_INT 998
6448: GREATER
6449: IFFALSE 6601
// begin if not IsDrivenBy ( hovers [ i ] ) then
6451: LD_EXP 16
6455: PUSH
6456: LD_VAR 0 3
6460: ARRAY
6461: PPUSH
6462: CALL_OW 311
6466: NOT
6467: IFFALSE 6504
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6469: LD_EXP 17
6473: PUSH
6474: LD_VAR 0 3
6478: ARRAY
6479: PPUSH
6480: LD_EXP 16
6484: PPUSH
6485: LD_INT 58
6487: PUSH
6488: EMPTY
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: PPUSH
6500: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6504: LD_INT 19
6506: PPUSH
6507: LD_INT 22
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PPUSH
6517: CALL_OW 70
6521: PUSH
6522: LD_INT 0
6524: GREATER
6525: IFFALSE 6601
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6527: LD_EXP 16
6531: PUSH
6532: LD_VAR 0 3
6536: ARRAY
6537: PPUSH
6538: CALL_OW 311
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: IFFALSE 6601
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6550: LD_EXP 16
6554: PUSH
6555: LD_VAR 0 3
6559: ARRAY
6560: PPUSH
6561: CALL_OW 311
6565: PPUSH
6566: LD_INT 22
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 69
6580: PPUSH
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 74
6596: PPUSH
6597: CALL_OW 115
// end ; end ;
6601: GO 6297
6603: POP
6604: POP
// end ; p := 1 ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_EXP 14
6627: PUSH
6628: LD_INT 2
6630: DIVREAL
6631: PUSH
6632: FOR_TO
6633: IFFALSE 6851
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6635: LD_EXP 14
6639: PUSH
6640: LD_VAR 0 2
6644: ARRAY
6645: PPUSH
6646: LD_EXP 14
6650: PUSH
6651: LD_VAR 0 2
6655: PUSH
6656: LD_INT 1
6658: PLUS
6659: ARRAY
6660: PPUSH
6661: CALL_OW 428
6665: PPUSH
6666: CALL_OW 255
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 6
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: IN
6681: IFFALSE 6835
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6683: LD_EXP 14
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: LD_EXP 14
6698: PUSH
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 1
6706: PLUS
6707: ARRAY
6708: PPUSH
6709: CALL_OW 458
6713: IFFALSE 6835
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6715: LD_EXP 15
6719: PPUSH
6720: LD_EXP 14
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: LD_EXP 14
6735: PUSH
6736: LD_VAR 0 2
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PPUSH
6746: CALL_OW 73
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 297
6781: PUSH
6782: LD_INT 30
6784: LESS
6785: IFFALSE 6835
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6787: LD_EXP 14
6791: PUSH
6792: LD_VAR 0 2
6796: ARRAY
6797: PPUSH
6798: LD_EXP 14
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_INT 1
6810: PLUS
6811: ARRAY
6812: PPUSH
6813: LD_INT 2
6815: PPUSH
6816: CALL_OW 456
// if not mines_trigger then
6820: LD_EXP 10
6824: NOT
6825: IFFALSE 6835
// mines_trigger := true ;
6827: LD_ADDR_EXP 10
6831: PUSH
6832: LD_INT 1
6834: ST_TO_ADDR
// end ; p := p + 2 ;
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: LD_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: PLUS
6848: ST_TO_ADDR
// end ;
6849: GO 6632
6851: POP
6852: POP
// end ;
6853: PPOPN 3
6855: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6856: LD_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: LD_EXP 6
6869: PPUSH
6870: CALL_OW 296
6874: PUSH
6875: LD_INT 20
6877: GREATER
6878: PUSH
6879: LD_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 6
6892: PPUSH
6893: CALL_OW 296
6897: PUSH
6898: LD_INT 20
6900: GREATER
6901: OR
6902: IFFALSE 7017
6904: GO 6906
6906: DISABLE
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
// begin for i = 1 to Difficulty + 1 do
6911: LD_ADDR_VAR 0 1
6915: PUSH
6916: DOUBLE
6917: LD_INT 1
6919: DEC
6920: ST_TO_ADDR
6921: LD_OWVAR 67
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7015
// begin uc_side := 2 ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_INT 2
6940: ST_TO_ADDR
// uc_nation := 2 ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_INT 2
6948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6949: LD_INT 0
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 380
// un := CreateHuman ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: CALL_OW 44
6973: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
6974: LD_VAR 0 2
6978: PPUSH
6979: LD_INT 44
6981: PPUSH
6982: LD_INT 0
6984: PPUSH
6985: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
6989: LD_VAR 0 2
6993: PPUSH
6994: LD_EXP 4
6998: PPUSH
6999: LD_VAR 0 2
7003: PPUSH
7004: CALL_OW 74
7008: PPUSH
7009: CALL_OW 115
// end ;
7013: GO 6930
7015: POP
7016: POP
// end ;
7017: PPOPN 2
7019: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7020: LD_VAR 0 2
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: LD_INT 31
7040: PUSH
7041: LD_INT 11
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 69
7060: IN
7061: IFFALSE 7072
// ComRetreat ( driver ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: CALL 7204 0 1
// end ; end_of_file
7072: PPOPN 4
7074: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7075: LD_INT 0
7077: PPUSH
// uc_side := side ;
7078: LD_ADDR_OWVAR 20
7082: PUSH
7083: LD_VAR 0 1
7087: ST_TO_ADDR
// uc_nation := nation ;
7088: LD_ADDR_OWVAR 21
7092: PUSH
7093: LD_VAR 0 2
7097: ST_TO_ADDR
// vc_chassis := chassis ;
7098: LD_ADDR_OWVAR 37
7102: PUSH
7103: LD_VAR 0 3
7107: ST_TO_ADDR
// vc_engine := engine ;
7108: LD_ADDR_OWVAR 39
7112: PUSH
7113: LD_VAR 0 4
7117: ST_TO_ADDR
// vc_control := control ;
7118: LD_ADDR_OWVAR 38
7122: PUSH
7123: LD_VAR 0 5
7127: ST_TO_ADDR
// vc_weapon := weapon ;
7128: LD_ADDR_OWVAR 40
7132: PUSH
7133: LD_VAR 0 6
7137: ST_TO_ADDR
// result := CreateVehicle ;
7138: LD_ADDR_VAR 0 7
7142: PUSH
7143: CALL_OW 45
7147: ST_TO_ADDR
// end ;
7148: LD_VAR 0 7
7152: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7153: LD_INT 0
7155: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 297
7175: PUSH
7176: LD_INT 6
7178: LESS
7179: IFFALSE 7191
// result := true else
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_INT 1
7188: ST_TO_ADDR
7189: GO 7199
// result := false ;
7191: LD_ADDR_VAR 0 4
7195: PUSH
7196: LD_INT 0
7198: ST_TO_ADDR
// end ;
7199: LD_VAR 0 4
7203: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7204: LD_INT 0
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
7210: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_INT 81
7218: PUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 255
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 69
7237: PPUSH
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 74
7247: PPUSH
7248: CALL_OW 119
// dir := GetDir ( un ) ;
7252: LD_ADDR_VAR 0 4
7256: PUSH
7257: LD_VAR 0 1
7261: PPUSH
7262: CALL_OW 254
7266: ST_TO_ADDR
// dir := dir - 3 ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_VAR 0 4
7276: PUSH
7277: LD_INT 3
7279: MINUS
7280: ST_TO_ADDR
// if dir < 0 then
7281: LD_VAR 0 4
7285: PUSH
7286: LD_INT 0
7288: LESS
7289: IFFALSE 7305
// dir := dir + 6 ;
7291: LD_ADDR_VAR 0 4
7295: PUSH
7296: LD_VAR 0 4
7300: PUSH
7301: LD_INT 6
7303: PLUS
7304: ST_TO_ADDR
// while true do
7305: LD_INT 1
7307: IFFALSE 7678
// begin coord_dist := 3 ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 3
7316: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7317: LD_ADDR_VAR 0 5
7321: PUSH
7322: LD_VAR 0 1
7326: PPUSH
7327: CALL_OW 250
7331: PPUSH
7332: LD_VAR 0 4
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 272
7346: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7347: LD_ADDR_VAR 0 6
7351: PUSH
7352: LD_VAR 0 1
7356: PPUSH
7357: CALL_OW 251
7361: PPUSH
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_VAR 0 3
7371: PPUSH
7372: CALL_OW 273
7376: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7377: LD_VAR 0 5
7381: PPUSH
7382: LD_VAR 0 6
7386: PPUSH
7387: CALL_OW 351
7391: PUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: LD_VAR 0 6
7401: PPUSH
7402: CALL_OW 488
7406: PUSH
7407: LD_INT 0
7409: EQUAL
7410: OR
7411: PUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: LD_VAR 0 6
7421: PPUSH
7422: CALL_OW 428
7426: PUSH
7427: LD_INT 0
7429: NONEQUAL
7430: OR
7431: IFFALSE 7592
// begin repeat begin coord_dist := coord_dist + 1 ;
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: ST_TO_ADDR
// dir := dir + 1 ;
7447: LD_ADDR_VAR 0 4
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_INT 1
7459: PLUS
7460: ST_TO_ADDR
// if dir > 5 then
7461: LD_VAR 0 4
7465: PUSH
7466: LD_INT 5
7468: GREATER
7469: IFFALSE 7479
// dir = 0 ;
7471: LD_ADDR_VAR 0 4
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7479: LD_ADDR_VAR 0 5
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 250
7493: PPUSH
7494: LD_VAR 0 4
7498: PPUSH
7499: LD_VAR 0 3
7503: PPUSH
7504: CALL_OW 272
7508: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7509: LD_ADDR_VAR 0 6
7513: PUSH
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 251
7523: PPUSH
7524: LD_VAR 0 4
7528: PPUSH
7529: LD_VAR 0 3
7533: PPUSH
7534: CALL_OW 273
7538: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7539: LD_VAR 0 5
7543: PPUSH
7544: LD_VAR 0 6
7548: PPUSH
7549: CALL_OW 351
7553: NOT
7554: PUSH
7555: LD_VAR 0 5
7559: PPUSH
7560: LD_VAR 0 6
7564: PPUSH
7565: CALL_OW 488
7569: AND
7570: PUSH
7571: LD_VAR 0 5
7575: PPUSH
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 428
7585: PUSH
7586: LD_INT 0
7588: EQUAL
7589: AND
7590: IFFALSE 7433
// end ; ComMoveXY ( un , x , y ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_VAR 0 5
7601: PPUSH
7602: LD_VAR 0 6
7606: PPUSH
7607: CALL_OW 111
// Wait ( 0 0$1 ) ;
7611: LD_INT 35
7613: PPUSH
7614: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_INT 81
7625: PUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: CALL_OW 255
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 69
7644: PPUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 74
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 10
7662: GREATEREQUAL
7663: IFFALSE 7676
// begin ComStop ( un ) ;
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 141
// break ;
7674: GO 7678
// end ; end ;
7676: GO 7305
// end ; end_of_file end_of_file
7678: LD_VAR 0 2
7682: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7683: GO 7685
7685: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7686: LD_STRING initStreamRollete();
7688: PPUSH
7689: CALL_OW 559
// InitStreamMode ;
7693: CALL 7702 0 0
// DefineStreamItems ( ) ;
7697: CALL 8142 0 0
// end ;
7701: END
// function InitStreamMode ; begin
7702: LD_INT 0
7704: PPUSH
// streamModeActive := false ;
7705: LD_ADDR_EXP 19
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// normalCounter := 26 ;
7713: LD_ADDR_EXP 20
7717: PUSH
7718: LD_INT 26
7720: ST_TO_ADDR
// hardcoreCounter := 12 ;
7721: LD_ADDR_EXP 21
7725: PUSH
7726: LD_INT 12
7728: ST_TO_ADDR
// sRocket := false ;
7729: LD_ADDR_EXP 24
7733: PUSH
7734: LD_INT 0
7736: ST_TO_ADDR
// sSpeed := false ;
7737: LD_ADDR_EXP 23
7741: PUSH
7742: LD_INT 0
7744: ST_TO_ADDR
// sEngine := false ;
7745: LD_ADDR_EXP 25
7749: PUSH
7750: LD_INT 0
7752: ST_TO_ADDR
// sSpec := false ;
7753: LD_ADDR_EXP 22
7757: PUSH
7758: LD_INT 0
7760: ST_TO_ADDR
// sLevel := false ;
7761: LD_ADDR_EXP 26
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// sArmoury := false ;
7769: LD_ADDR_EXP 27
7773: PUSH
7774: LD_INT 0
7776: ST_TO_ADDR
// sRadar := false ;
7777: LD_ADDR_EXP 28
7781: PUSH
7782: LD_INT 0
7784: ST_TO_ADDR
// sBunker := false ;
7785: LD_ADDR_EXP 29
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// sHack := false ;
7793: LD_ADDR_EXP 30
7797: PUSH
7798: LD_INT 0
7800: ST_TO_ADDR
// sFire := false ;
7801: LD_ADDR_EXP 31
7805: PUSH
7806: LD_INT 0
7808: ST_TO_ADDR
// sRefresh := false ;
7809: LD_ADDR_EXP 32
7813: PUSH
7814: LD_INT 0
7816: ST_TO_ADDR
// sExp := false ;
7817: LD_ADDR_EXP 33
7821: PUSH
7822: LD_INT 0
7824: ST_TO_ADDR
// sDepot := false ;
7825: LD_ADDR_EXP 34
7829: PUSH
7830: LD_INT 0
7832: ST_TO_ADDR
// sFlag := false ;
7833: LD_ADDR_EXP 35
7837: PUSH
7838: LD_INT 0
7840: ST_TO_ADDR
// sKamikadze := false ;
7841: LD_ADDR_EXP 43
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// sTroll := false ;
7849: LD_ADDR_EXP 44
7853: PUSH
7854: LD_INT 0
7856: ST_TO_ADDR
// sSlow := false ;
7857: LD_ADDR_EXP 45
7861: PUSH
7862: LD_INT 0
7864: ST_TO_ADDR
// sLack := false ;
7865: LD_ADDR_EXP 46
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// sTank := false ;
7873: LD_ADDR_EXP 48
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// sRemote := false ;
7881: LD_ADDR_EXP 49
7885: PUSH
7886: LD_INT 0
7888: ST_TO_ADDR
// sPowell := false ;
7889: LD_ADDR_EXP 50
7893: PUSH
7894: LD_INT 0
7896: ST_TO_ADDR
// sTeleport := false ;
7897: LD_ADDR_EXP 53
7901: PUSH
7902: LD_INT 0
7904: ST_TO_ADDR
// sOilTower := false ;
7905: LD_ADDR_EXP 55
7909: PUSH
7910: LD_INT 0
7912: ST_TO_ADDR
// sShovel := false ;
7913: LD_ADDR_EXP 56
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// sSheik := false ;
7921: LD_ADDR_EXP 57
7925: PUSH
7926: LD_INT 0
7928: ST_TO_ADDR
// sEarthquake := false ;
7929: LD_ADDR_EXP 59
7933: PUSH
7934: LD_INT 0
7936: ST_TO_ADDR
// sAI := false ;
7937: LD_ADDR_EXP 60
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// sCargo := false ;
7945: LD_ADDR_EXP 63
7949: PUSH
7950: LD_INT 0
7952: ST_TO_ADDR
// sDLaser := false ;
7953: LD_ADDR_EXP 64
7957: PUSH
7958: LD_INT 0
7960: ST_TO_ADDR
// sExchange := false ;
7961: LD_ADDR_EXP 65
7965: PUSH
7966: LD_INT 0
7968: ST_TO_ADDR
// sFac := false ;
7969: LD_ADDR_EXP 66
7973: PUSH
7974: LD_INT 0
7976: ST_TO_ADDR
// sPower := false ;
7977: LD_ADDR_EXP 67
7981: PUSH
7982: LD_INT 0
7984: ST_TO_ADDR
// sRandom := false ;
7985: LD_ADDR_EXP 68
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// sShield := false ;
7993: LD_ADDR_EXP 69
7997: PUSH
7998: LD_INT 0
8000: ST_TO_ADDR
// sTime := false ;
8001: LD_ADDR_EXP 70
8005: PUSH
8006: LD_INT 0
8008: ST_TO_ADDR
// sTools := false ;
8009: LD_ADDR_EXP 71
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// sSold := false ;
8017: LD_ADDR_EXP 36
8021: PUSH
8022: LD_INT 0
8024: ST_TO_ADDR
// sDiff := false ;
8025: LD_ADDR_EXP 37
8029: PUSH
8030: LD_INT 0
8032: ST_TO_ADDR
// sFog := false ;
8033: LD_ADDR_EXP 40
8037: PUSH
8038: LD_INT 0
8040: ST_TO_ADDR
// sReset := false ;
8041: LD_ADDR_EXP 41
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// sSun := false ;
8049: LD_ADDR_EXP 42
8053: PUSH
8054: LD_INT 0
8056: ST_TO_ADDR
// sTiger := false ;
8057: LD_ADDR_EXP 38
8061: PUSH
8062: LD_INT 0
8064: ST_TO_ADDR
// sBomb := false ;
8065: LD_ADDR_EXP 39
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// sWound := false ;
8073: LD_ADDR_EXP 47
8077: PUSH
8078: LD_INT 0
8080: ST_TO_ADDR
// sBetray := false ;
8081: LD_ADDR_EXP 51
8085: PUSH
8086: LD_INT 0
8088: ST_TO_ADDR
// sContamin := false ;
8089: LD_ADDR_EXP 52
8093: PUSH
8094: LD_INT 0
8096: ST_TO_ADDR
// sOil := false ;
8097: LD_ADDR_EXP 54
8101: PUSH
8102: LD_INT 0
8104: ST_TO_ADDR
// sStu := false ;
8105: LD_ADDR_EXP 58
8109: PUSH
8110: LD_INT 0
8112: ST_TO_ADDR
// sBazooka := false ;
8113: LD_ADDR_EXP 61
8117: PUSH
8118: LD_INT 0
8120: ST_TO_ADDR
// sMortar := false ;
8121: LD_ADDR_EXP 62
8125: PUSH
8126: LD_INT 0
8128: ST_TO_ADDR
// sRanger := false ;
8129: LD_ADDR_EXP 72
8133: PUSH
8134: LD_INT 0
8136: ST_TO_ADDR
// end ;
8137: LD_VAR 0 1
8141: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8142: LD_INT 0
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
// result := [ ] ;
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: EMPTY
8155: ST_TO_ADDR
// if campaign_id = 1 then
8156: LD_OWVAR 69
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 11112
// begin case mission_number of 1 :
8166: LD_OWVAR 70
8170: PUSH
8171: LD_INT 1
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8243
8179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8180: LD_ADDR_VAR 0 1
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: LD_INT 11
8193: PUSH
8194: LD_INT 12
8196: PUSH
8197: LD_INT 15
8199: PUSH
8200: LD_INT 16
8202: PUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 23
8208: PUSH
8209: LD_INT 26
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 101
8225: PUSH
8226: LD_INT 102
8228: PUSH
8229: LD_INT 106
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: ST_TO_ADDR
8241: GO 11112
8243: LD_INT 2
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8323
8251: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 4
8262: PUSH
8263: LD_INT 11
8265: PUSH
8266: LD_INT 12
8268: PUSH
8269: LD_INT 15
8271: PUSH
8272: LD_INT 16
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 23
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 101
8297: PUSH
8298: LD_INT 102
8300: PUSH
8301: LD_INT 105
8303: PUSH
8304: LD_INT 106
8306: PUSH
8307: LD_INT 108
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: ST_TO_ADDR
8321: GO 11112
8323: LD_INT 3
8325: DOUBLE
8326: EQUAL
8327: IFTRUE 8331
8329: GO 8407
8331: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8332: LD_ADDR_VAR 0 1
8336: PUSH
8337: LD_INT 2
8339: PUSH
8340: LD_INT 4
8342: PUSH
8343: LD_INT 5
8345: PUSH
8346: LD_INT 11
8348: PUSH
8349: LD_INT 12
8351: PUSH
8352: LD_INT 15
8354: PUSH
8355: LD_INT 16
8357: PUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 26
8363: PUSH
8364: LD_INT 36
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 102
8384: PUSH
8385: LD_INT 105
8387: PUSH
8388: LD_INT 106
8390: PUSH
8391: LD_INT 108
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: ST_TO_ADDR
8405: GO 11112
8407: LD_INT 4
8409: DOUBLE
8410: EQUAL
8411: IFTRUE 8415
8413: GO 8499
8415: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8416: LD_ADDR_VAR 0 1
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: LD_INT 4
8426: PUSH
8427: LD_INT 5
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: LD_INT 11
8435: PUSH
8436: LD_INT 12
8438: PUSH
8439: LD_INT 15
8441: PUSH
8442: LD_INT 16
8444: PUSH
8445: LD_INT 22
8447: PUSH
8448: LD_INT 23
8450: PUSH
8451: LD_INT 26
8453: PUSH
8454: LD_INT 36
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 101
8473: PUSH
8474: LD_INT 102
8476: PUSH
8477: LD_INT 105
8479: PUSH
8480: LD_INT 106
8482: PUSH
8483: LD_INT 108
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: ST_TO_ADDR
8497: GO 11112
8499: LD_INT 5
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8607
8507: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8508: LD_ADDR_VAR 0 1
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: LD_INT 4
8518: PUSH
8519: LD_INT 5
8521: PUSH
8522: LD_INT 6
8524: PUSH
8525: LD_INT 8
8527: PUSH
8528: LD_INT 11
8530: PUSH
8531: LD_INT 12
8533: PUSH
8534: LD_INT 15
8536: PUSH
8537: LD_INT 16
8539: PUSH
8540: LD_INT 22
8542: PUSH
8543: LD_INT 23
8545: PUSH
8546: LD_INT 25
8548: PUSH
8549: LD_INT 26
8551: PUSH
8552: LD_INT 36
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 101
8573: PUSH
8574: LD_INT 102
8576: PUSH
8577: LD_INT 105
8579: PUSH
8580: LD_INT 106
8582: PUSH
8583: LD_INT 108
8585: PUSH
8586: LD_INT 109
8588: PUSH
8589: LD_INT 112
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: ST_TO_ADDR
8605: GO 11112
8607: LD_INT 6
8609: DOUBLE
8610: EQUAL
8611: IFTRUE 8615
8613: GO 8735
8615: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8616: LD_ADDR_VAR 0 1
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: LD_INT 4
8626: PUSH
8627: LD_INT 5
8629: PUSH
8630: LD_INT 6
8632: PUSH
8633: LD_INT 8
8635: PUSH
8636: LD_INT 11
8638: PUSH
8639: LD_INT 12
8641: PUSH
8642: LD_INT 15
8644: PUSH
8645: LD_INT 16
8647: PUSH
8648: LD_INT 20
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 22
8656: PUSH
8657: LD_INT 23
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: LD_INT 31
8671: PUSH
8672: LD_INT 32
8674: PUSH
8675: LD_INT 36
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 101
8701: PUSH
8702: LD_INT 102
8704: PUSH
8705: LD_INT 105
8707: PUSH
8708: LD_INT 106
8710: PUSH
8711: LD_INT 108
8713: PUSH
8714: LD_INT 109
8716: PUSH
8717: LD_INT 112
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: ST_TO_ADDR
8733: GO 11112
8735: LD_INT 7
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8843
8743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8744: LD_ADDR_VAR 0 1
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: LD_INT 4
8754: PUSH
8755: LD_INT 5
8757: PUSH
8758: LD_INT 7
8760: PUSH
8761: LD_INT 11
8763: PUSH
8764: LD_INT 12
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 16
8772: PUSH
8773: LD_INT 20
8775: PUSH
8776: LD_INT 21
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 23
8784: PUSH
8785: LD_INT 25
8787: PUSH
8788: LD_INT 26
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: PUSH
8807: LD_INT 101
8809: PUSH
8810: LD_INT 102
8812: PUSH
8813: LD_INT 103
8815: PUSH
8816: LD_INT 105
8818: PUSH
8819: LD_INT 106
8821: PUSH
8822: LD_INT 108
8824: PUSH
8825: LD_INT 112
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: ST_TO_ADDR
8841: GO 11112
8843: LD_INT 8
8845: DOUBLE
8846: EQUAL
8847: IFTRUE 8851
8849: GO 8979
8851: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8852: LD_ADDR_VAR 0 1
8856: PUSH
8857: LD_INT 2
8859: PUSH
8860: LD_INT 4
8862: PUSH
8863: LD_INT 5
8865: PUSH
8866: LD_INT 6
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: LD_INT 8
8874: PUSH
8875: LD_INT 11
8877: PUSH
8878: LD_INT 12
8880: PUSH
8881: LD_INT 15
8883: PUSH
8884: LD_INT 16
8886: PUSH
8887: LD_INT 20
8889: PUSH
8890: LD_INT 21
8892: PUSH
8893: LD_INT 22
8895: PUSH
8896: LD_INT 23
8898: PUSH
8899: LD_INT 25
8901: PUSH
8902: LD_INT 26
8904: PUSH
8905: LD_INT 30
8907: PUSH
8908: LD_INT 31
8910: PUSH
8911: LD_INT 32
8913: PUSH
8914: LD_INT 36
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 101
8941: PUSH
8942: LD_INT 102
8944: PUSH
8945: LD_INT 103
8947: PUSH
8948: LD_INT 105
8950: PUSH
8951: LD_INT 106
8953: PUSH
8954: LD_INT 108
8956: PUSH
8957: LD_INT 109
8959: PUSH
8960: LD_INT 112
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: ST_TO_ADDR
8977: GO 11112
8979: LD_INT 9
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 9123
8987: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8988: LD_ADDR_VAR 0 1
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 4
8998: PUSH
8999: LD_INT 5
9001: PUSH
9002: LD_INT 6
9004: PUSH
9005: LD_INT 7
9007: PUSH
9008: LD_INT 8
9010: PUSH
9011: LD_INT 11
9013: PUSH
9014: LD_INT 12
9016: PUSH
9017: LD_INT 15
9019: PUSH
9020: LD_INT 16
9022: PUSH
9023: LD_INT 20
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 23
9034: PUSH
9035: LD_INT 25
9037: PUSH
9038: LD_INT 26
9040: PUSH
9041: LD_INT 28
9043: PUSH
9044: LD_INT 30
9046: PUSH
9047: LD_INT 31
9049: PUSH
9050: LD_INT 32
9052: PUSH
9053: LD_INT 36
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 101
9081: PUSH
9082: LD_INT 102
9084: PUSH
9085: LD_INT 103
9087: PUSH
9088: LD_INT 105
9090: PUSH
9091: LD_INT 106
9093: PUSH
9094: LD_INT 108
9096: PUSH
9097: LD_INT 109
9099: PUSH
9100: LD_INT 112
9102: PUSH
9103: LD_INT 114
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: ST_TO_ADDR
9121: GO 11112
9123: LD_INT 10
9125: DOUBLE
9126: EQUAL
9127: IFTRUE 9131
9129: GO 9315
9131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9132: LD_ADDR_VAR 0 1
9136: PUSH
9137: LD_INT 2
9139: PUSH
9140: LD_INT 4
9142: PUSH
9143: LD_INT 5
9145: PUSH
9146: LD_INT 6
9148: PUSH
9149: LD_INT 7
9151: PUSH
9152: LD_INT 8
9154: PUSH
9155: LD_INT 9
9157: PUSH
9158: LD_INT 10
9160: PUSH
9161: LD_INT 11
9163: PUSH
9164: LD_INT 12
9166: PUSH
9167: LD_INT 13
9169: PUSH
9170: LD_INT 14
9172: PUSH
9173: LD_INT 15
9175: PUSH
9176: LD_INT 16
9178: PUSH
9179: LD_INT 17
9181: PUSH
9182: LD_INT 18
9184: PUSH
9185: LD_INT 19
9187: PUSH
9188: LD_INT 20
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 22
9196: PUSH
9197: LD_INT 23
9199: PUSH
9200: LD_INT 24
9202: PUSH
9203: LD_INT 25
9205: PUSH
9206: LD_INT 26
9208: PUSH
9209: LD_INT 28
9211: PUSH
9212: LD_INT 30
9214: PUSH
9215: LD_INT 31
9217: PUSH
9218: LD_INT 32
9220: PUSH
9221: LD_INT 36
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 101
9257: PUSH
9258: LD_INT 102
9260: PUSH
9261: LD_INT 103
9263: PUSH
9264: LD_INT 104
9266: PUSH
9267: LD_INT 105
9269: PUSH
9270: LD_INT 106
9272: PUSH
9273: LD_INT 107
9275: PUSH
9276: LD_INT 108
9278: PUSH
9279: LD_INT 109
9281: PUSH
9282: LD_INT 110
9284: PUSH
9285: LD_INT 111
9287: PUSH
9288: LD_INT 112
9290: PUSH
9291: LD_INT 114
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: ST_TO_ADDR
9313: GO 11112
9315: LD_INT 11
9317: DOUBLE
9318: EQUAL
9319: IFTRUE 9323
9321: GO 9515
9323: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9324: LD_ADDR_VAR 0 1
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: LD_INT 4
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: LD_INT 6
9343: PUSH
9344: LD_INT 7
9346: PUSH
9347: LD_INT 8
9349: PUSH
9350: LD_INT 9
9352: PUSH
9353: LD_INT 10
9355: PUSH
9356: LD_INT 11
9358: PUSH
9359: LD_INT 12
9361: PUSH
9362: LD_INT 13
9364: PUSH
9365: LD_INT 14
9367: PUSH
9368: LD_INT 15
9370: PUSH
9371: LD_INT 16
9373: PUSH
9374: LD_INT 17
9376: PUSH
9377: LD_INT 18
9379: PUSH
9380: LD_INT 19
9382: PUSH
9383: LD_INT 20
9385: PUSH
9386: LD_INT 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_INT 23
9394: PUSH
9395: LD_INT 24
9397: PUSH
9398: LD_INT 25
9400: PUSH
9401: LD_INT 26
9403: PUSH
9404: LD_INT 28
9406: PUSH
9407: LD_INT 30
9409: PUSH
9410: LD_INT 31
9412: PUSH
9413: LD_INT 32
9415: PUSH
9416: LD_INT 34
9418: PUSH
9419: LD_INT 36
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 101
9457: PUSH
9458: LD_INT 102
9460: PUSH
9461: LD_INT 103
9463: PUSH
9464: LD_INT 104
9466: PUSH
9467: LD_INT 105
9469: PUSH
9470: LD_INT 106
9472: PUSH
9473: LD_INT 107
9475: PUSH
9476: LD_INT 108
9478: PUSH
9479: LD_INT 109
9481: PUSH
9482: LD_INT 110
9484: PUSH
9485: LD_INT 111
9487: PUSH
9488: LD_INT 112
9490: PUSH
9491: LD_INT 114
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: ST_TO_ADDR
9513: GO 11112
9515: LD_INT 12
9517: DOUBLE
9518: EQUAL
9519: IFTRUE 9523
9521: GO 9731
9523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9524: LD_ADDR_VAR 0 1
9528: PUSH
9529: LD_INT 1
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: LD_INT 3
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: LD_INT 5
9543: PUSH
9544: LD_INT 6
9546: PUSH
9547: LD_INT 7
9549: PUSH
9550: LD_INT 8
9552: PUSH
9553: LD_INT 9
9555: PUSH
9556: LD_INT 10
9558: PUSH
9559: LD_INT 11
9561: PUSH
9562: LD_INT 12
9564: PUSH
9565: LD_INT 13
9567: PUSH
9568: LD_INT 14
9570: PUSH
9571: LD_INT 15
9573: PUSH
9574: LD_INT 16
9576: PUSH
9577: LD_INT 17
9579: PUSH
9580: LD_INT 18
9582: PUSH
9583: LD_INT 19
9585: PUSH
9586: LD_INT 20
9588: PUSH
9589: LD_INT 21
9591: PUSH
9592: LD_INT 22
9594: PUSH
9595: LD_INT 23
9597: PUSH
9598: LD_INT 24
9600: PUSH
9601: LD_INT 25
9603: PUSH
9604: LD_INT 26
9606: PUSH
9607: LD_INT 27
9609: PUSH
9610: LD_INT 28
9612: PUSH
9613: LD_INT 30
9615: PUSH
9616: LD_INT 31
9618: PUSH
9619: LD_INT 32
9621: PUSH
9622: LD_INT 33
9624: PUSH
9625: LD_INT 34
9627: PUSH
9628: LD_INT 36
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 101
9669: PUSH
9670: LD_INT 102
9672: PUSH
9673: LD_INT 103
9675: PUSH
9676: LD_INT 104
9678: PUSH
9679: LD_INT 105
9681: PUSH
9682: LD_INT 106
9684: PUSH
9685: LD_INT 107
9687: PUSH
9688: LD_INT 108
9690: PUSH
9691: LD_INT 109
9693: PUSH
9694: LD_INT 110
9696: PUSH
9697: LD_INT 111
9699: PUSH
9700: LD_INT 112
9702: PUSH
9703: LD_INT 113
9705: PUSH
9706: LD_INT 114
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: ST_TO_ADDR
9729: GO 11112
9731: LD_INT 13
9733: DOUBLE
9734: EQUAL
9735: IFTRUE 9739
9737: GO 9947
9739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9740: LD_ADDR_VAR 0 1
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 6
9762: PUSH
9763: LD_INT 7
9765: PUSH
9766: LD_INT 8
9768: PUSH
9769: LD_INT 9
9771: PUSH
9772: LD_INT 10
9774: PUSH
9775: LD_INT 11
9777: PUSH
9778: LD_INT 12
9780: PUSH
9781: LD_INT 13
9783: PUSH
9784: LD_INT 14
9786: PUSH
9787: LD_INT 15
9789: PUSH
9790: LD_INT 16
9792: PUSH
9793: LD_INT 17
9795: PUSH
9796: LD_INT 18
9798: PUSH
9799: LD_INT 19
9801: PUSH
9802: LD_INT 20
9804: PUSH
9805: LD_INT 21
9807: PUSH
9808: LD_INT 22
9810: PUSH
9811: LD_INT 23
9813: PUSH
9814: LD_INT 24
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 26
9822: PUSH
9823: LD_INT 27
9825: PUSH
9826: LD_INT 28
9828: PUSH
9829: LD_INT 30
9831: PUSH
9832: LD_INT 31
9834: PUSH
9835: LD_INT 32
9837: PUSH
9838: LD_INT 33
9840: PUSH
9841: LD_INT 34
9843: PUSH
9844: LD_INT 36
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 101
9885: PUSH
9886: LD_INT 102
9888: PUSH
9889: LD_INT 103
9891: PUSH
9892: LD_INT 104
9894: PUSH
9895: LD_INT 105
9897: PUSH
9898: LD_INT 106
9900: PUSH
9901: LD_INT 107
9903: PUSH
9904: LD_INT 108
9906: PUSH
9907: LD_INT 109
9909: PUSH
9910: LD_INT 110
9912: PUSH
9913: LD_INT 111
9915: PUSH
9916: LD_INT 112
9918: PUSH
9919: LD_INT 113
9921: PUSH
9922: LD_INT 114
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: ST_TO_ADDR
9945: GO 11112
9947: LD_INT 14
9949: DOUBLE
9950: EQUAL
9951: IFTRUE 9955
9953: GO 10167
9955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9956: LD_ADDR_VAR 0 1
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: LD_INT 2
9966: PUSH
9967: LD_INT 3
9969: PUSH
9970: LD_INT 4
9972: PUSH
9973: LD_INT 5
9975: PUSH
9976: LD_INT 6
9978: PUSH
9979: LD_INT 7
9981: PUSH
9982: LD_INT 8
9984: PUSH
9985: LD_INT 9
9987: PUSH
9988: LD_INT 10
9990: PUSH
9991: LD_INT 11
9993: PUSH
9994: LD_INT 12
9996: PUSH
9997: LD_INT 13
9999: PUSH
10000: LD_INT 14
10002: PUSH
10003: LD_INT 15
10005: PUSH
10006: LD_INT 16
10008: PUSH
10009: LD_INT 17
10011: PUSH
10012: LD_INT 18
10014: PUSH
10015: LD_INT 19
10017: PUSH
10018: LD_INT 20
10020: PUSH
10021: LD_INT 21
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 23
10029: PUSH
10030: LD_INT 24
10032: PUSH
10033: LD_INT 25
10035: PUSH
10036: LD_INT 26
10038: PUSH
10039: LD_INT 27
10041: PUSH
10042: LD_INT 28
10044: PUSH
10045: LD_INT 29
10047: PUSH
10048: LD_INT 30
10050: PUSH
10051: LD_INT 31
10053: PUSH
10054: LD_INT 32
10056: PUSH
10057: LD_INT 33
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 36
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 101
10105: PUSH
10106: LD_INT 102
10108: PUSH
10109: LD_INT 103
10111: PUSH
10112: LD_INT 104
10114: PUSH
10115: LD_INT 105
10117: PUSH
10118: LD_INT 106
10120: PUSH
10121: LD_INT 107
10123: PUSH
10124: LD_INT 108
10126: PUSH
10127: LD_INT 109
10129: PUSH
10130: LD_INT 110
10132: PUSH
10133: LD_INT 111
10135: PUSH
10136: LD_INT 112
10138: PUSH
10139: LD_INT 113
10141: PUSH
10142: LD_INT 114
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: ST_TO_ADDR
10165: GO 11112
10167: LD_INT 15
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10387
10175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10176: LD_ADDR_VAR 0 1
10180: PUSH
10181: LD_INT 1
10183: PUSH
10184: LD_INT 2
10186: PUSH
10187: LD_INT 3
10189: PUSH
10190: LD_INT 4
10192: PUSH
10193: LD_INT 5
10195: PUSH
10196: LD_INT 6
10198: PUSH
10199: LD_INT 7
10201: PUSH
10202: LD_INT 8
10204: PUSH
10205: LD_INT 9
10207: PUSH
10208: LD_INT 10
10210: PUSH
10211: LD_INT 11
10213: PUSH
10214: LD_INT 12
10216: PUSH
10217: LD_INT 13
10219: PUSH
10220: LD_INT 14
10222: PUSH
10223: LD_INT 15
10225: PUSH
10226: LD_INT 16
10228: PUSH
10229: LD_INT 17
10231: PUSH
10232: LD_INT 18
10234: PUSH
10235: LD_INT 19
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 23
10249: PUSH
10250: LD_INT 24
10252: PUSH
10253: LD_INT 25
10255: PUSH
10256: LD_INT 26
10258: PUSH
10259: LD_INT 27
10261: PUSH
10262: LD_INT 28
10264: PUSH
10265: LD_INT 29
10267: PUSH
10268: LD_INT 30
10270: PUSH
10271: LD_INT 31
10273: PUSH
10274: LD_INT 32
10276: PUSH
10277: LD_INT 33
10279: PUSH
10280: LD_INT 34
10282: PUSH
10283: LD_INT 36
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 101
10325: PUSH
10326: LD_INT 102
10328: PUSH
10329: LD_INT 103
10331: PUSH
10332: LD_INT 104
10334: PUSH
10335: LD_INT 105
10337: PUSH
10338: LD_INT 106
10340: PUSH
10341: LD_INT 107
10343: PUSH
10344: LD_INT 108
10346: PUSH
10347: LD_INT 109
10349: PUSH
10350: LD_INT 110
10352: PUSH
10353: LD_INT 111
10355: PUSH
10356: LD_INT 112
10358: PUSH
10359: LD_INT 113
10361: PUSH
10362: LD_INT 114
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: ST_TO_ADDR
10385: GO 11112
10387: LD_INT 16
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10519
10395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10396: LD_ADDR_VAR 0 1
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: LD_INT 4
10406: PUSH
10407: LD_INT 5
10409: PUSH
10410: LD_INT 7
10412: PUSH
10413: LD_INT 11
10415: PUSH
10416: LD_INT 12
10418: PUSH
10419: LD_INT 15
10421: PUSH
10422: LD_INT 16
10424: PUSH
10425: LD_INT 20
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 23
10436: PUSH
10437: LD_INT 25
10439: PUSH
10440: LD_INT 26
10442: PUSH
10443: LD_INT 30
10445: PUSH
10446: LD_INT 31
10448: PUSH
10449: LD_INT 32
10451: PUSH
10452: LD_INT 33
10454: PUSH
10455: LD_INT 34
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 101
10481: PUSH
10482: LD_INT 102
10484: PUSH
10485: LD_INT 103
10487: PUSH
10488: LD_INT 106
10490: PUSH
10491: LD_INT 108
10493: PUSH
10494: LD_INT 112
10496: PUSH
10497: LD_INT 113
10499: PUSH
10500: LD_INT 114
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: ST_TO_ADDR
10517: GO 11112
10519: LD_INT 17
10521: DOUBLE
10522: EQUAL
10523: IFTRUE 10527
10525: GO 10739
10527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10528: LD_ADDR_VAR 0 1
10532: PUSH
10533: LD_INT 1
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: LD_INT 4
10544: PUSH
10545: LD_INT 5
10547: PUSH
10548: LD_INT 6
10550: PUSH
10551: LD_INT 7
10553: PUSH
10554: LD_INT 8
10556: PUSH
10557: LD_INT 9
10559: PUSH
10560: LD_INT 10
10562: PUSH
10563: LD_INT 11
10565: PUSH
10566: LD_INT 12
10568: PUSH
10569: LD_INT 13
10571: PUSH
10572: LD_INT 14
10574: PUSH
10575: LD_INT 15
10577: PUSH
10578: LD_INT 16
10580: PUSH
10581: LD_INT 17
10583: PUSH
10584: LD_INT 18
10586: PUSH
10587: LD_INT 19
10589: PUSH
10590: LD_INT 20
10592: PUSH
10593: LD_INT 21
10595: PUSH
10596: LD_INT 22
10598: PUSH
10599: LD_INT 23
10601: PUSH
10602: LD_INT 24
10604: PUSH
10605: LD_INT 25
10607: PUSH
10608: LD_INT 26
10610: PUSH
10611: LD_INT 27
10613: PUSH
10614: LD_INT 28
10616: PUSH
10617: LD_INT 29
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 31
10625: PUSH
10626: LD_INT 32
10628: PUSH
10629: LD_INT 33
10631: PUSH
10632: LD_INT 34
10634: PUSH
10635: LD_INT 36
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 101
10677: PUSH
10678: LD_INT 102
10680: PUSH
10681: LD_INT 103
10683: PUSH
10684: LD_INT 104
10686: PUSH
10687: LD_INT 105
10689: PUSH
10690: LD_INT 106
10692: PUSH
10693: LD_INT 107
10695: PUSH
10696: LD_INT 108
10698: PUSH
10699: LD_INT 109
10701: PUSH
10702: LD_INT 110
10704: PUSH
10705: LD_INT 111
10707: PUSH
10708: LD_INT 112
10710: PUSH
10711: LD_INT 113
10713: PUSH
10714: LD_INT 114
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: ST_TO_ADDR
10737: GO 11112
10739: LD_INT 18
10741: DOUBLE
10742: EQUAL
10743: IFTRUE 10747
10745: GO 10883
10747: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10748: LD_ADDR_VAR 0 1
10752: PUSH
10753: LD_INT 2
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: LD_INT 5
10761: PUSH
10762: LD_INT 7
10764: PUSH
10765: LD_INT 11
10767: PUSH
10768: LD_INT 12
10770: PUSH
10771: LD_INT 15
10773: PUSH
10774: LD_INT 16
10776: PUSH
10777: LD_INT 20
10779: PUSH
10780: LD_INT 21
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_INT 23
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 26
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 33
10806: PUSH
10807: LD_INT 34
10809: PUSH
10810: LD_INT 35
10812: PUSH
10813: LD_INT 36
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 102
10844: PUSH
10845: LD_INT 103
10847: PUSH
10848: LD_INT 106
10850: PUSH
10851: LD_INT 108
10853: PUSH
10854: LD_INT 112
10856: PUSH
10857: LD_INT 113
10859: PUSH
10860: LD_INT 114
10862: PUSH
10863: LD_INT 115
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: ST_TO_ADDR
10881: GO 11112
10883: LD_INT 19
10885: DOUBLE
10886: EQUAL
10887: IFTRUE 10891
10889: GO 11111
10891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10892: LD_ADDR_VAR 0 1
10896: PUSH
10897: LD_INT 1
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 3
10905: PUSH
10906: LD_INT 4
10908: PUSH
10909: LD_INT 5
10911: PUSH
10912: LD_INT 6
10914: PUSH
10915: LD_INT 7
10917: PUSH
10918: LD_INT 8
10920: PUSH
10921: LD_INT 9
10923: PUSH
10924: LD_INT 10
10926: PUSH
10927: LD_INT 11
10929: PUSH
10930: LD_INT 12
10932: PUSH
10933: LD_INT 13
10935: PUSH
10936: LD_INT 14
10938: PUSH
10939: LD_INT 15
10941: PUSH
10942: LD_INT 16
10944: PUSH
10945: LD_INT 17
10947: PUSH
10948: LD_INT 18
10950: PUSH
10951: LD_INT 19
10953: PUSH
10954: LD_INT 20
10956: PUSH
10957: LD_INT 21
10959: PUSH
10960: LD_INT 22
10962: PUSH
10963: LD_INT 23
10965: PUSH
10966: LD_INT 24
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 26
10974: PUSH
10975: LD_INT 27
10977: PUSH
10978: LD_INT 28
10980: PUSH
10981: LD_INT 29
10983: PUSH
10984: LD_INT 30
10986: PUSH
10987: LD_INT 31
10989: PUSH
10990: LD_INT 32
10992: PUSH
10993: LD_INT 33
10995: PUSH
10996: LD_INT 34
10998: PUSH
10999: LD_INT 35
11001: PUSH
11002: LD_INT 36
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 101
11045: PUSH
11046: LD_INT 102
11048: PUSH
11049: LD_INT 103
11051: PUSH
11052: LD_INT 104
11054: PUSH
11055: LD_INT 105
11057: PUSH
11058: LD_INT 106
11060: PUSH
11061: LD_INT 107
11063: PUSH
11064: LD_INT 108
11066: PUSH
11067: LD_INT 109
11069: PUSH
11070: LD_INT 110
11072: PUSH
11073: LD_INT 111
11075: PUSH
11076: LD_INT 112
11078: PUSH
11079: LD_INT 113
11081: PUSH
11082: LD_INT 114
11084: PUSH
11085: LD_INT 115
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: ST_TO_ADDR
11109: GO 11112
11111: POP
// end ; if result then
11112: LD_VAR 0 1
11116: IFFALSE 11405
// begin normal :=  ;
11118: LD_ADDR_VAR 0 3
11122: PUSH
11123: LD_STRING 
11125: ST_TO_ADDR
// hardcore :=  ;
11126: LD_ADDR_VAR 0 4
11130: PUSH
11131: LD_STRING 
11133: ST_TO_ADDR
// for i = 1 to normalCounter do
11134: LD_ADDR_VAR 0 5
11138: PUSH
11139: DOUBLE
11140: LD_INT 1
11142: DEC
11143: ST_TO_ADDR
11144: LD_EXP 20
11148: PUSH
11149: FOR_TO
11150: IFFALSE 11251
// begin tmp := 0 ;
11152: LD_ADDR_VAR 0 2
11156: PUSH
11157: LD_STRING 0
11159: ST_TO_ADDR
// if result [ 1 ] then
11160: LD_VAR 0 1
11164: PUSH
11165: LD_INT 1
11167: ARRAY
11168: IFFALSE 11233
// if result [ 1 ] [ 1 ] = i then
11170: LD_VAR 0 1
11174: PUSH
11175: LD_INT 1
11177: ARRAY
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PUSH
11183: LD_VAR 0 5
11187: EQUAL
11188: IFFALSE 11233
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11190: LD_ADDR_VAR 0 1
11194: PUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: LD_VAR 0 1
11207: PUSH
11208: LD_INT 1
11210: ARRAY
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 3
11219: PPUSH
11220: CALL_OW 1
11224: ST_TO_ADDR
// tmp := 1 ;
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_STRING 1
11232: ST_TO_ADDR
// end ; normal := normal & tmp ;
11233: LD_ADDR_VAR 0 3
11237: PUSH
11238: LD_VAR 0 3
11242: PUSH
11243: LD_VAR 0 2
11247: STR
11248: ST_TO_ADDR
// end ;
11249: GO 11149
11251: POP
11252: POP
// for i = 1 to hardcoreCounter do
11253: LD_ADDR_VAR 0 5
11257: PUSH
11258: DOUBLE
11259: LD_INT 1
11261: DEC
11262: ST_TO_ADDR
11263: LD_EXP 21
11267: PUSH
11268: FOR_TO
11269: IFFALSE 11374
// begin tmp := 0 ;
11271: LD_ADDR_VAR 0 2
11275: PUSH
11276: LD_STRING 0
11278: ST_TO_ADDR
// if result [ 2 ] then
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 2
11286: ARRAY
11287: IFFALSE 11356
// if result [ 2 ] [ 1 ] = 100 + i then
11289: LD_VAR 0 1
11293: PUSH
11294: LD_INT 2
11296: ARRAY
11297: PUSH
11298: LD_INT 1
11300: ARRAY
11301: PUSH
11302: LD_INT 100
11304: PUSH
11305: LD_VAR 0 5
11309: PLUS
11310: EQUAL
11311: IFFALSE 11356
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11313: LD_ADDR_VAR 0 1
11317: PUSH
11318: LD_VAR 0 1
11322: PPUSH
11323: LD_INT 2
11325: PPUSH
11326: LD_VAR 0 1
11330: PUSH
11331: LD_INT 2
11333: ARRAY
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 3
11342: PPUSH
11343: CALL_OW 1
11347: ST_TO_ADDR
// tmp := 1 ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_STRING 1
11355: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11356: LD_ADDR_VAR 0 4
11360: PUSH
11361: LD_VAR 0 4
11365: PUSH
11366: LD_VAR 0 2
11370: STR
11371: ST_TO_ADDR
// end ;
11372: GO 11268
11374: POP
11375: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11376: LD_STRING getStreamItemsFromMission("
11378: PUSH
11379: LD_VAR 0 3
11383: STR
11384: PUSH
11385: LD_STRING ","
11387: STR
11388: PUSH
11389: LD_VAR 0 4
11393: STR
11394: PUSH
11395: LD_STRING ")
11397: STR
11398: PPUSH
11399: CALL_OW 559
// end else
11403: GO 11412
// ToLua ( getStreamItemsFromMission("","") ) ;
11405: LD_STRING getStreamItemsFromMission("","")
11407: PPUSH
11408: CALL_OW 559
// end ;
11412: LD_VAR 0 1
11416: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11417: LD_VAR 0 2
11421: PUSH
11422: LD_INT 100
11424: EQUAL
11425: IFFALSE 12374
// begin if not StreamModeActive then
11427: LD_EXP 19
11431: NOT
11432: IFFALSE 11442
// StreamModeActive := true ;
11434: LD_ADDR_EXP 19
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 0 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 0
11449: EQUAL
11450: IFFALSE 11456
// InitStreamMode ;
11452: CALL 7702 0 0
// if p3 = 1 then
11456: LD_VAR 0 3
11460: PUSH
11461: LD_INT 1
11463: EQUAL
11464: IFFALSE 11474
// sRocket := true ;
11466: LD_ADDR_EXP 24
11470: PUSH
11471: LD_INT 1
11473: ST_TO_ADDR
// if p3 = 2 then
11474: LD_VAR 0 3
11478: PUSH
11479: LD_INT 2
11481: EQUAL
11482: IFFALSE 11492
// sSpeed := true ;
11484: LD_ADDR_EXP 23
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// if p3 = 3 then
11492: LD_VAR 0 3
11496: PUSH
11497: LD_INT 3
11499: EQUAL
11500: IFFALSE 11510
// sEngine := true ;
11502: LD_ADDR_EXP 25
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// if p3 = 4 then
11510: LD_VAR 0 3
11514: PUSH
11515: LD_INT 4
11517: EQUAL
11518: IFFALSE 11528
// sSpec := true ;
11520: LD_ADDR_EXP 22
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if p3 = 5 then
11528: LD_VAR 0 3
11532: PUSH
11533: LD_INT 5
11535: EQUAL
11536: IFFALSE 11546
// sLevel := true ;
11538: LD_ADDR_EXP 26
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// if p3 = 6 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_INT 6
11553: EQUAL
11554: IFFALSE 11564
// sArmoury := true ;
11556: LD_ADDR_EXP 27
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// if p3 = 7 then
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 7
11571: EQUAL
11572: IFFALSE 11582
// sRadar := true ;
11574: LD_ADDR_EXP 28
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// if p3 = 8 then
11582: LD_VAR 0 3
11586: PUSH
11587: LD_INT 8
11589: EQUAL
11590: IFFALSE 11600
// sBunker := true ;
11592: LD_ADDR_EXP 29
11596: PUSH
11597: LD_INT 1
11599: ST_TO_ADDR
// if p3 = 9 then
11600: LD_VAR 0 3
11604: PUSH
11605: LD_INT 9
11607: EQUAL
11608: IFFALSE 11618
// sHack := true ;
11610: LD_ADDR_EXP 30
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// if p3 = 10 then
11618: LD_VAR 0 3
11622: PUSH
11623: LD_INT 10
11625: EQUAL
11626: IFFALSE 11636
// sFire := true ;
11628: LD_ADDR_EXP 31
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// if p3 = 11 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 11
11643: EQUAL
11644: IFFALSE 11654
// sRefresh := true ;
11646: LD_ADDR_EXP 32
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// if p3 = 12 then
11654: LD_VAR 0 3
11658: PUSH
11659: LD_INT 12
11661: EQUAL
11662: IFFALSE 11672
// sExp := true ;
11664: LD_ADDR_EXP 33
11668: PUSH
11669: LD_INT 1
11671: ST_TO_ADDR
// if p3 = 13 then
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 13
11679: EQUAL
11680: IFFALSE 11690
// sDepot := true ;
11682: LD_ADDR_EXP 34
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// if p3 = 14 then
11690: LD_VAR 0 3
11694: PUSH
11695: LD_INT 14
11697: EQUAL
11698: IFFALSE 11708
// sFlag := true ;
11700: LD_ADDR_EXP 35
11704: PUSH
11705: LD_INT 1
11707: ST_TO_ADDR
// if p3 = 15 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 15
11715: EQUAL
11716: IFFALSE 11726
// sKamikadze := true ;
11718: LD_ADDR_EXP 43
11722: PUSH
11723: LD_INT 1
11725: ST_TO_ADDR
// if p3 = 16 then
11726: LD_VAR 0 3
11730: PUSH
11731: LD_INT 16
11733: EQUAL
11734: IFFALSE 11744
// sTroll := true ;
11736: LD_ADDR_EXP 44
11740: PUSH
11741: LD_INT 1
11743: ST_TO_ADDR
// if p3 = 17 then
11744: LD_VAR 0 3
11748: PUSH
11749: LD_INT 17
11751: EQUAL
11752: IFFALSE 11762
// sSlow := true ;
11754: LD_ADDR_EXP 45
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// if p3 = 18 then
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 18
11769: EQUAL
11770: IFFALSE 11780
// sLack := true ;
11772: LD_ADDR_EXP 46
11776: PUSH
11777: LD_INT 1
11779: ST_TO_ADDR
// if p3 = 19 then
11780: LD_VAR 0 3
11784: PUSH
11785: LD_INT 19
11787: EQUAL
11788: IFFALSE 11798
// sTank := true ;
11790: LD_ADDR_EXP 48
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// if p3 = 20 then
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 20
11805: EQUAL
11806: IFFALSE 11816
// sRemote := true ;
11808: LD_ADDR_EXP 49
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// if p3 = 21 then
11816: LD_VAR 0 3
11820: PUSH
11821: LD_INT 21
11823: EQUAL
11824: IFFALSE 11834
// sPowell := true ;
11826: LD_ADDR_EXP 50
11830: PUSH
11831: LD_INT 1
11833: ST_TO_ADDR
// if p3 = 22 then
11834: LD_VAR 0 3
11838: PUSH
11839: LD_INT 22
11841: EQUAL
11842: IFFALSE 11852
// sTeleport := true ;
11844: LD_ADDR_EXP 53
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// if p3 = 23 then
11852: LD_VAR 0 3
11856: PUSH
11857: LD_INT 23
11859: EQUAL
11860: IFFALSE 11870
// sOilTower := true ;
11862: LD_ADDR_EXP 55
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// if p3 = 24 then
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 24
11877: EQUAL
11878: IFFALSE 11888
// sShovel := true ;
11880: LD_ADDR_EXP 56
11884: PUSH
11885: LD_INT 1
11887: ST_TO_ADDR
// if p3 = 25 then
11888: LD_VAR 0 3
11892: PUSH
11893: LD_INT 25
11895: EQUAL
11896: IFFALSE 11906
// sSheik := true ;
11898: LD_ADDR_EXP 57
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// if p3 = 26 then
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 26
11913: EQUAL
11914: IFFALSE 11924
// sEarthquake := true ;
11916: LD_ADDR_EXP 59
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// if p3 = 27 then
11924: LD_VAR 0 3
11928: PUSH
11929: LD_INT 27
11931: EQUAL
11932: IFFALSE 11942
// sAI := true ;
11934: LD_ADDR_EXP 60
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// if p3 = 28 then
11942: LD_VAR 0 3
11946: PUSH
11947: LD_INT 28
11949: EQUAL
11950: IFFALSE 11960
// sCargo := true ;
11952: LD_ADDR_EXP 63
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if p3 = 29 then
11960: LD_VAR 0 3
11964: PUSH
11965: LD_INT 29
11967: EQUAL
11968: IFFALSE 11978
// sDLaser := true ;
11970: LD_ADDR_EXP 64
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// if p3 = 30 then
11978: LD_VAR 0 3
11982: PUSH
11983: LD_INT 30
11985: EQUAL
11986: IFFALSE 11996
// sExchange := true ;
11988: LD_ADDR_EXP 65
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// if p3 = 31 then
11996: LD_VAR 0 3
12000: PUSH
12001: LD_INT 31
12003: EQUAL
12004: IFFALSE 12014
// sFac := true ;
12006: LD_ADDR_EXP 66
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if p3 = 32 then
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 32
12021: EQUAL
12022: IFFALSE 12032
// sPower := true ;
12024: LD_ADDR_EXP 67
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// if p3 = 33 then
12032: LD_VAR 0 3
12036: PUSH
12037: LD_INT 33
12039: EQUAL
12040: IFFALSE 12050
// sRandom := true ;
12042: LD_ADDR_EXP 68
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// if p3 = 34 then
12050: LD_VAR 0 3
12054: PUSH
12055: LD_INT 34
12057: EQUAL
12058: IFFALSE 12068
// sShield := true ;
12060: LD_ADDR_EXP 69
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if p3 = 35 then
12068: LD_VAR 0 3
12072: PUSH
12073: LD_INT 35
12075: EQUAL
12076: IFFALSE 12086
// sTime := true ;
12078: LD_ADDR_EXP 70
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// if p3 = 36 then
12086: LD_VAR 0 3
12090: PUSH
12091: LD_INT 36
12093: EQUAL
12094: IFFALSE 12104
// sTools := true ;
12096: LD_ADDR_EXP 71
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if p3 = 101 then
12104: LD_VAR 0 3
12108: PUSH
12109: LD_INT 101
12111: EQUAL
12112: IFFALSE 12122
// sSold := true ;
12114: LD_ADDR_EXP 36
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// if p3 = 102 then
12122: LD_VAR 0 3
12126: PUSH
12127: LD_INT 102
12129: EQUAL
12130: IFFALSE 12140
// sDiff := true ;
12132: LD_ADDR_EXP 37
12136: PUSH
12137: LD_INT 1
12139: ST_TO_ADDR
// if p3 = 103 then
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 103
12147: EQUAL
12148: IFFALSE 12158
// sFog := true ;
12150: LD_ADDR_EXP 40
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// if p3 = 104 then
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 104
12165: EQUAL
12166: IFFALSE 12176
// sReset := true ;
12168: LD_ADDR_EXP 41
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if p3 = 105 then
12176: LD_VAR 0 3
12180: PUSH
12181: LD_INT 105
12183: EQUAL
12184: IFFALSE 12194
// sSun := true ;
12186: LD_ADDR_EXP 42
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// if p3 = 106 then
12194: LD_VAR 0 3
12198: PUSH
12199: LD_INT 106
12201: EQUAL
12202: IFFALSE 12212
// sTiger := true ;
12204: LD_ADDR_EXP 38
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// if p3 = 107 then
12212: LD_VAR 0 3
12216: PUSH
12217: LD_INT 107
12219: EQUAL
12220: IFFALSE 12230
// sBomb := true ;
12222: LD_ADDR_EXP 39
12226: PUSH
12227: LD_INT 1
12229: ST_TO_ADDR
// if p3 = 108 then
12230: LD_VAR 0 3
12234: PUSH
12235: LD_INT 108
12237: EQUAL
12238: IFFALSE 12248
// sWound := true ;
12240: LD_ADDR_EXP 47
12244: PUSH
12245: LD_INT 1
12247: ST_TO_ADDR
// if p3 = 109 then
12248: LD_VAR 0 3
12252: PUSH
12253: LD_INT 109
12255: EQUAL
12256: IFFALSE 12266
// sBetray := true ;
12258: LD_ADDR_EXP 51
12262: PUSH
12263: LD_INT 1
12265: ST_TO_ADDR
// if p3 = 110 then
12266: LD_VAR 0 3
12270: PUSH
12271: LD_INT 110
12273: EQUAL
12274: IFFALSE 12284
// sContamin := true ;
12276: LD_ADDR_EXP 52
12280: PUSH
12281: LD_INT 1
12283: ST_TO_ADDR
// if p3 = 111 then
12284: LD_VAR 0 3
12288: PUSH
12289: LD_INT 111
12291: EQUAL
12292: IFFALSE 12302
// sOil := true ;
12294: LD_ADDR_EXP 54
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// if p3 = 112 then
12302: LD_VAR 0 3
12306: PUSH
12307: LD_INT 112
12309: EQUAL
12310: IFFALSE 12320
// sStu := true ;
12312: LD_ADDR_EXP 58
12316: PUSH
12317: LD_INT 1
12319: ST_TO_ADDR
// if p3 = 113 then
12320: LD_VAR 0 3
12324: PUSH
12325: LD_INT 113
12327: EQUAL
12328: IFFALSE 12338
// sBazooka := true ;
12330: LD_ADDR_EXP 61
12334: PUSH
12335: LD_INT 1
12337: ST_TO_ADDR
// if p3 = 114 then
12338: LD_VAR 0 3
12342: PUSH
12343: LD_INT 114
12345: EQUAL
12346: IFFALSE 12356
// sMortar := true ;
12348: LD_ADDR_EXP 62
12352: PUSH
12353: LD_INT 1
12355: ST_TO_ADDR
// if p3 = 115 then
12356: LD_VAR 0 3
12360: PUSH
12361: LD_INT 115
12363: EQUAL
12364: IFFALSE 12374
// sRanger := true ;
12366: LD_ADDR_EXP 72
12370: PUSH
12371: LD_INT 1
12373: ST_TO_ADDR
// end ; end ;
12374: PPOPN 6
12376: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12377: LD_EXP 19
12381: PUSH
12382: LD_EXP 24
12386: AND
12387: IFFALSE 12511
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
// begin enable ;
12396: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 22
12404: PUSH
12405: LD_OWVAR 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: LD_INT 34
12419: PUSH
12420: LD_INT 7
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 34
12429: PUSH
12430: LD_INT 45
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 34
12439: PUSH
12440: LD_INT 28
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 34
12449: PUSH
12450: LD_INT 47
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 69
12472: ST_TO_ADDR
// if not tmp then
12473: LD_VAR 0 2
12477: NOT
12478: IFFALSE 12482
// exit ;
12480: GO 12511
// for i in tmp do
12482: LD_ADDR_VAR 0 1
12486: PUSH
12487: LD_VAR 0 2
12491: PUSH
12492: FOR_IN
12493: IFFALSE 12509
// begin SetLives ( i , 0 ) ;
12495: LD_VAR 0 1
12499: PPUSH
12500: LD_INT 0
12502: PPUSH
12503: CALL_OW 234
// end ;
12507: GO 12492
12509: POP
12510: POP
// end ;
12511: PPOPN 2
12513: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12514: LD_EXP 19
12518: PUSH
12519: LD_EXP 25
12523: AND
12524: IFFALSE 12608
12526: GO 12528
12528: DISABLE
12529: LD_INT 0
12531: PPUSH
12532: PPUSH
// begin enable ;
12533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12534: LD_ADDR_VAR 0 2
12538: PUSH
12539: LD_INT 22
12541: PUSH
12542: LD_OWVAR 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 32
12553: PUSH
12554: LD_INT 3
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: ST_TO_ADDR
// if not tmp then
12570: LD_VAR 0 2
12574: NOT
12575: IFFALSE 12579
// exit ;
12577: GO 12608
// for i in tmp do
12579: LD_ADDR_VAR 0 1
12583: PUSH
12584: LD_VAR 0 2
12588: PUSH
12589: FOR_IN
12590: IFFALSE 12606
// begin SetLives ( i , 0 ) ;
12592: LD_VAR 0 1
12596: PPUSH
12597: LD_INT 0
12599: PPUSH
12600: CALL_OW 234
// end ;
12604: GO 12589
12606: POP
12607: POP
// end ;
12608: PPOPN 2
12610: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12611: LD_EXP 19
12615: PUSH
12616: LD_EXP 22
12620: AND
12621: IFFALSE 12714
12623: GO 12625
12625: DISABLE
12626: LD_INT 0
12628: PPUSH
// begin enable ;
12629: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_OWVAR 2
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 5
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 9
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 25
12672: PUSH
12673: LD_INT 8
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: PUSH
12695: FOR_IN
12696: IFFALSE 12712
// begin SetClass ( i , 1 ) ;
12698: LD_VAR 0 1
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: CALL_OW 336
// end ;
12710: GO 12695
12712: POP
12713: POP
// end ;
12714: PPOPN 1
12716: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12717: LD_EXP 19
12721: PUSH
12722: LD_EXP 23
12726: AND
12727: PUSH
12728: LD_OWVAR 65
12732: PUSH
12733: LD_INT 7
12735: LESS
12736: AND
12737: IFFALSE 12751
12739: GO 12741
12741: DISABLE
// begin enable ;
12742: ENABLE
// game_speed := 7 ;
12743: LD_ADDR_OWVAR 65
12747: PUSH
12748: LD_INT 7
12750: ST_TO_ADDR
// end ;
12751: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12752: LD_EXP 19
12756: PUSH
12757: LD_EXP 26
12761: AND
12762: IFFALSE 12964
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 81
12779: PUSH
12780: LD_OWVAR 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 21
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// if not tmp then
12808: LD_VAR 0 3
12812: NOT
12813: IFFALSE 12817
// exit ;
12815: GO 12964
// if tmp > 5 then
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 5
12824: GREATER
12825: IFFALSE 12837
// k := 5 else
12827: LD_ADDR_VAR 0 2
12831: PUSH
12832: LD_INT 5
12834: ST_TO_ADDR
12835: GO 12847
// k := tmp ;
12837: LD_ADDR_VAR 0 2
12841: PUSH
12842: LD_VAR 0 3
12846: ST_TO_ADDR
// for i := 1 to k do
12847: LD_ADDR_VAR 0 1
12851: PUSH
12852: DOUBLE
12853: LD_INT 1
12855: DEC
12856: ST_TO_ADDR
12857: LD_VAR 0 2
12861: PUSH
12862: FOR_TO
12863: IFFALSE 12962
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_VAR 0 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 1
12880: PUSH
12881: LD_INT 4
12883: MOD
12884: PUSH
12885: LD_INT 1
12887: PLUS
12888: PPUSH
12889: CALL_OW 259
12893: PUSH
12894: LD_INT 10
12896: LESS
12897: IFFALSE 12960
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12899: LD_VAR 0 3
12903: PUSH
12904: LD_VAR 0 1
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 4
12917: MOD
12918: PUSH
12919: LD_INT 1
12921: PLUS
12922: PPUSH
12923: LD_VAR 0 3
12927: PUSH
12928: LD_VAR 0 1
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 1
12938: PUSH
12939: LD_INT 4
12941: MOD
12942: PUSH
12943: LD_INT 1
12945: PLUS
12946: PPUSH
12947: CALL_OW 259
12951: PUSH
12952: LD_INT 1
12954: PLUS
12955: PPUSH
12956: CALL_OW 237
12960: GO 12862
12962: POP
12963: POP
// end ;
12964: PPOPN 3
12966: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12967: LD_EXP 19
12971: PUSH
12972: LD_EXP 27
12976: AND
12977: IFFALSE 12997
12979: GO 12981
12981: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12982: LD_INT 4
12984: PPUSH
12985: LD_OWVAR 2
12989: PPUSH
12990: LD_INT 0
12992: PPUSH
12993: CALL_OW 324
12997: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12998: LD_EXP 19
13002: PUSH
13003: LD_EXP 56
13007: AND
13008: IFFALSE 13028
13010: GO 13012
13012: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13013: LD_INT 19
13015: PPUSH
13016: LD_OWVAR 2
13020: PPUSH
13021: LD_INT 0
13023: PPUSH
13024: CALL_OW 324
13028: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13029: LD_EXP 19
13033: PUSH
13034: LD_EXP 28
13038: AND
13039: IFFALSE 13141
13041: GO 13043
13043: DISABLE
13044: LD_INT 0
13046: PPUSH
13047: PPUSH
// begin enable ;
13048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13049: LD_ADDR_VAR 0 2
13053: PUSH
13054: LD_INT 22
13056: PUSH
13057: LD_OWVAR 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 2
13068: PUSH
13069: LD_INT 34
13071: PUSH
13072: LD_INT 11
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 34
13081: PUSH
13082: LD_INT 30
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: LIST
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PPUSH
13098: CALL_OW 69
13102: ST_TO_ADDR
// if not tmp then
13103: LD_VAR 0 2
13107: NOT
13108: IFFALSE 13112
// exit ;
13110: GO 13141
// for i in tmp do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: FOR_IN
13123: IFFALSE 13139
// begin SetLives ( i , 0 ) ;
13125: LD_VAR 0 1
13129: PPUSH
13130: LD_INT 0
13132: PPUSH
13133: CALL_OW 234
// end ;
13137: GO 13122
13139: POP
13140: POP
// end ;
13141: PPOPN 2
13143: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13144: LD_EXP 19
13148: PUSH
13149: LD_EXP 29
13153: AND
13154: IFFALSE 13174
13156: GO 13158
13158: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13159: LD_INT 32
13161: PPUSH
13162: LD_OWVAR 2
13166: PPUSH
13167: LD_INT 0
13169: PPUSH
13170: CALL_OW 324
13174: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13175: LD_EXP 19
13179: PUSH
13180: LD_EXP 30
13184: AND
13185: IFFALSE 13366
13187: GO 13189
13189: DISABLE
13190: LD_INT 0
13192: PPUSH
13193: PPUSH
13194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13195: LD_ADDR_VAR 0 2
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: LD_OWVAR 2
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 33
13214: PUSH
13215: LD_INT 3
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: ST_TO_ADDR
// if not tmp then
13231: LD_VAR 0 2
13235: NOT
13236: IFFALSE 13240
// exit ;
13238: GO 13366
// side := 0 ;
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: LD_INT 0
13247: ST_TO_ADDR
// for i := 1 to 8 do
13248: LD_ADDR_VAR 0 1
13252: PUSH
13253: DOUBLE
13254: LD_INT 1
13256: DEC
13257: ST_TO_ADDR
13258: LD_INT 8
13260: PUSH
13261: FOR_TO
13262: IFFALSE 13310
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13264: LD_OWVAR 2
13268: PUSH
13269: LD_VAR 0 1
13273: NONEQUAL
13274: PUSH
13275: LD_OWVAR 2
13279: PPUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 81
13289: PUSH
13290: LD_INT 2
13292: EQUAL
13293: AND
13294: IFFALSE 13308
// begin side := i ;
13296: LD_ADDR_VAR 0 3
13300: PUSH
13301: LD_VAR 0 1
13305: ST_TO_ADDR
// break ;
13306: GO 13310
// end ;
13308: GO 13261
13310: POP
13311: POP
// if not side then
13312: LD_VAR 0 3
13316: NOT
13317: IFFALSE 13321
// exit ;
13319: GO 13366
// for i := 1 to tmp do
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: DOUBLE
13327: LD_INT 1
13329: DEC
13330: ST_TO_ADDR
13331: LD_VAR 0 2
13335: PUSH
13336: FOR_TO
13337: IFFALSE 13364
// if Prob ( 30 ) then
13339: LD_INT 30
13341: PPUSH
13342: CALL_OW 13
13346: IFFALSE 13362
// SetSide ( i , side ) ;
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_VAR 0 3
13357: PPUSH
13358: CALL_OW 235
13362: GO 13336
13364: POP
13365: POP
// end ;
13366: PPOPN 3
13368: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13369: LD_EXP 19
13373: PUSH
13374: LD_EXP 32
13378: AND
13379: IFFALSE 13498
13381: GO 13383
13383: DISABLE
13384: LD_INT 0
13386: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13387: LD_ADDR_VAR 0 1
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_OWVAR 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 21
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 3
13416: PUSH
13417: LD_INT 23
13419: PUSH
13420: LD_INT 0
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13496
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 257
13453: PUSH
13454: LD_INT 1
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: IN
13472: IFFALSE 13494
// SetClass ( un , rand ( 1 , 4 ) ) ;
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_INT 1
13481: PPUSH
13482: LD_INT 4
13484: PPUSH
13485: CALL_OW 12
13489: PPUSH
13490: CALL_OW 336
13494: GO 13441
13496: POP
13497: POP
// end ;
13498: PPOPN 1
13500: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13501: LD_EXP 19
13505: PUSH
13506: LD_EXP 31
13510: AND
13511: IFFALSE 13590
13513: GO 13515
13515: DISABLE
13516: LD_INT 0
13518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13519: LD_ADDR_VAR 0 1
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_OWVAR 2
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 3
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: ST_TO_ADDR
// if not tmp then
13555: LD_VAR 0 1
13559: NOT
13560: IFFALSE 13564
// exit ;
13562: GO 13590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: PPUSH
13572: LD_VAR 0 1
13576: PPUSH
13577: CALL_OW 12
13581: ARRAY
13582: PPUSH
13583: LD_INT 100
13585: PPUSH
13586: CALL_OW 234
// end ;
13590: PPOPN 1
13592: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13593: LD_EXP 19
13597: PUSH
13598: LD_EXP 33
13602: AND
13603: IFFALSE 13701
13605: GO 13607
13607: DISABLE
13608: LD_INT 0
13610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13611: LD_ADDR_VAR 0 1
13615: PUSH
13616: LD_INT 22
13618: PUSH
13619: LD_OWVAR 2
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PPUSH
13642: CALL_OW 69
13646: ST_TO_ADDR
// if not tmp then
13647: LD_VAR 0 1
13651: NOT
13652: IFFALSE 13656
// exit ;
13654: GO 13701
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13656: LD_VAR 0 1
13660: PUSH
13661: LD_INT 1
13663: PPUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 12
13673: ARRAY
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: LD_INT 4
13680: PPUSH
13681: CALL_OW 12
13685: PPUSH
13686: LD_INT 3000
13688: PPUSH
13689: LD_INT 9000
13691: PPUSH
13692: CALL_OW 12
13696: PPUSH
13697: CALL_OW 492
// end ;
13701: PPOPN 1
13703: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13704: LD_EXP 19
13708: PUSH
13709: LD_EXP 34
13713: AND
13714: IFFALSE 13734
13716: GO 13718
13718: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13719: LD_INT 1
13721: PPUSH
13722: LD_OWVAR 2
13726: PPUSH
13727: LD_INT 0
13729: PPUSH
13730: CALL_OW 324
13734: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13735: LD_EXP 19
13739: PUSH
13740: LD_EXP 35
13744: AND
13745: IFFALSE 13828
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
13753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13754: LD_ADDR_VAR 0 2
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_OWVAR 2
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 3
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: ST_TO_ADDR
// if not tmp then
13790: LD_VAR 0 2
13794: NOT
13795: IFFALSE 13799
// exit ;
13797: GO 13828
// for i in tmp do
13799: LD_ADDR_VAR 0 1
13803: PUSH
13804: LD_VAR 0 2
13808: PUSH
13809: FOR_IN
13810: IFFALSE 13826
// SetBLevel ( i , 10 ) ;
13812: LD_VAR 0 1
13816: PPUSH
13817: LD_INT 10
13819: PPUSH
13820: CALL_OW 241
13824: GO 13809
13826: POP
13827: POP
// end ;
13828: PPOPN 2
13830: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13831: LD_EXP 19
13835: PUSH
13836: LD_EXP 36
13840: AND
13841: IFFALSE 13952
13843: GO 13845
13845: DISABLE
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PPUSH
13882: CALL_OW 69
13886: ST_TO_ADDR
// if not tmp then
13887: LD_VAR 0 3
13891: NOT
13892: IFFALSE 13896
// exit ;
13894: GO 13952
// un := tmp [ rand ( 1 , tmp ) ] ;
13896: LD_ADDR_VAR 0 2
13900: PUSH
13901: LD_VAR 0 3
13905: PUSH
13906: LD_INT 1
13908: PPUSH
13909: LD_VAR 0 3
13913: PPUSH
13914: CALL_OW 12
13918: ARRAY
13919: ST_TO_ADDR
// if Crawls ( un ) then
13920: LD_VAR 0 2
13924: PPUSH
13925: CALL_OW 318
13929: IFFALSE 13940
// ComWalk ( un ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13940: LD_VAR 0 2
13944: PPUSH
13945: LD_INT 5
13947: PPUSH
13948: CALL_OW 336
// end ;
13952: PPOPN 3
13954: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13955: LD_EXP 19
13959: PUSH
13960: LD_EXP 37
13964: AND
13965: PUSH
13966: LD_OWVAR 67
13970: PUSH
13971: LD_INT 3
13973: LESS
13974: AND
13975: IFFALSE 13994
13977: GO 13979
13979: DISABLE
// Difficulty := Difficulty + 1 ;
13980: LD_ADDR_OWVAR 67
13984: PUSH
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 1
13992: PLUS
13993: ST_TO_ADDR
13994: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13995: LD_EXP 19
13999: PUSH
14000: LD_EXP 38
14004: AND
14005: IFFALSE 14108
14007: GO 14009
14009: DISABLE
14010: LD_INT 0
14012: PPUSH
// begin for i := 1 to 5 do
14013: LD_ADDR_VAR 0 1
14017: PUSH
14018: DOUBLE
14019: LD_INT 1
14021: DEC
14022: ST_TO_ADDR
14023: LD_INT 5
14025: PUSH
14026: FOR_TO
14027: IFFALSE 14106
// begin uc_nation := nation_nature ;
14029: LD_ADDR_OWVAR 21
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// uc_side := 0 ;
14037: LD_ADDR_OWVAR 20
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14045: LD_ADDR_OWVAR 29
14049: PUSH
14050: LD_INT 12
14052: PUSH
14053: LD_INT 12
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: ST_TO_ADDR
// hc_agressivity := 20 ;
14060: LD_ADDR_OWVAR 35
14064: PUSH
14065: LD_INT 20
14067: ST_TO_ADDR
// hc_class := class_tiger ;
14068: LD_ADDR_OWVAR 28
14072: PUSH
14073: LD_INT 14
14075: ST_TO_ADDR
// hc_gallery :=  ;
14076: LD_ADDR_OWVAR 33
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// hc_name :=  ;
14084: LD_ADDR_OWVAR 26
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14092: CALL_OW 44
14096: PPUSH
14097: LD_INT 0
14099: PPUSH
14100: CALL_OW 51
// end ;
14104: GO 14026
14106: POP
14107: POP
// end ;
14108: PPOPN 1
14110: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14111: LD_EXP 19
14115: PUSH
14116: LD_EXP 39
14120: AND
14121: IFFALSE 14130
14123: GO 14125
14125: DISABLE
// StreamSibBomb ;
14126: CALL 14131 0 0
14130: END
// export function StreamSibBomb ; var i , x , y ; begin
14131: LD_INT 0
14133: PPUSH
14134: PPUSH
14135: PPUSH
14136: PPUSH
// result := false ;
14137: LD_ADDR_VAR 0 1
14141: PUSH
14142: LD_INT 0
14144: ST_TO_ADDR
// for i := 1 to 16 do
14145: LD_ADDR_VAR 0 2
14149: PUSH
14150: DOUBLE
14151: LD_INT 1
14153: DEC
14154: ST_TO_ADDR
14155: LD_INT 16
14157: PUSH
14158: FOR_TO
14159: IFFALSE 14358
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 10
14168: PUSH
14169: LD_INT 20
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 40
14177: PUSH
14178: LD_INT 50
14180: PUSH
14181: LD_INT 60
14183: PUSH
14184: LD_INT 70
14186: PUSH
14187: LD_INT 80
14189: PUSH
14190: LD_INT 90
14192: PUSH
14193: LD_INT 100
14195: PUSH
14196: LD_INT 110
14198: PUSH
14199: LD_INT 120
14201: PUSH
14202: LD_INT 130
14204: PUSH
14205: LD_INT 140
14207: PUSH
14208: LD_INT 150
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 1
14230: PPUSH
14231: LD_INT 15
14233: PPUSH
14234: CALL_OW 12
14238: ARRAY
14239: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14240: LD_ADDR_VAR 0 4
14244: PUSH
14245: LD_INT 10
14247: PUSH
14248: LD_INT 20
14250: PUSH
14251: LD_INT 30
14253: PUSH
14254: LD_INT 40
14256: PUSH
14257: LD_INT 50
14259: PUSH
14260: LD_INT 60
14262: PUSH
14263: LD_INT 70
14265: PUSH
14266: LD_INT 80
14268: PUSH
14269: LD_INT 90
14271: PUSH
14272: LD_INT 100
14274: PUSH
14275: LD_INT 110
14277: PUSH
14278: LD_INT 120
14280: PUSH
14281: LD_INT 130
14283: PUSH
14284: LD_INT 140
14286: PUSH
14287: LD_INT 150
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 1
14309: PPUSH
14310: LD_INT 15
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: ST_TO_ADDR
// if ValidHex ( x , y ) then
14319: LD_VAR 0 3
14323: PPUSH
14324: LD_VAR 0 4
14328: PPUSH
14329: CALL_OW 488
14333: IFFALSE 14356
// begin result := [ x , y ] ;
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_VAR 0 3
14344: PUSH
14345: LD_VAR 0 4
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: ST_TO_ADDR
// break ;
14354: GO 14358
// end ; end ;
14356: GO 14158
14358: POP
14359: POP
// if result then
14360: LD_VAR 0 1
14364: IFFALSE 14424
// begin ToLua ( playSibBomb() ) ;
14366: LD_STRING playSibBomb()
14368: PPUSH
14369: CALL_OW 559
// wait ( 0 0$14 ) ;
14373: LD_INT 490
14375: PPUSH
14376: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14380: LD_VAR 0 1
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 2
14396: ARRAY
14397: PPUSH
14398: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 1
14409: ARRAY
14410: PPUSH
14411: LD_VAR 0 1
14415: PUSH
14416: LD_INT 2
14418: ARRAY
14419: PPUSH
14420: CALL_OW 429
// end ; end ;
14424: LD_VAR 0 1
14428: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14429: LD_EXP 19
14433: PUSH
14434: LD_EXP 41
14438: AND
14439: IFFALSE 14451
14441: GO 14443
14443: DISABLE
// YouLost (  ) ;
14444: LD_STRING 
14446: PPUSH
14447: CALL_OW 104
14451: END
// every 0 0$1 trigger StreamModeActive and sFog do
14452: LD_EXP 19
14456: PUSH
14457: LD_EXP 40
14461: AND
14462: IFFALSE 14476
14464: GO 14466
14466: DISABLE
// FogOff ( your_side ) ;
14467: LD_OWVAR 2
14471: PPUSH
14472: CALL_OW 344
14476: END
// every 0 0$1 trigger StreamModeActive and sSun do
14477: LD_EXP 19
14481: PUSH
14482: LD_EXP 42
14486: AND
14487: IFFALSE 14515
14489: GO 14491
14491: DISABLE
// begin solar_recharge_percent := 0 ;
14492: LD_ADDR_OWVAR 79
14496: PUSH
14497: LD_INT 0
14499: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14500: LD_INT 10500
14502: PPUSH
14503: CALL_OW 67
// solar_recharge_percent := 100 ;
14507: LD_ADDR_OWVAR 79
14511: PUSH
14512: LD_INT 100
14514: ST_TO_ADDR
// end ;
14515: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14516: LD_EXP 19
14520: PUSH
14521: LD_EXP 43
14525: AND
14526: IFFALSE 14765
14528: GO 14530
14530: DISABLE
14531: LD_INT 0
14533: PPUSH
14534: PPUSH
14535: PPUSH
// begin tmp := [ ] ;
14536: LD_ADDR_VAR 0 3
14540: PUSH
14541: EMPTY
14542: ST_TO_ADDR
// for i := 1 to 6 do
14543: LD_ADDR_VAR 0 1
14547: PUSH
14548: DOUBLE
14549: LD_INT 1
14551: DEC
14552: ST_TO_ADDR
14553: LD_INT 6
14555: PUSH
14556: FOR_TO
14557: IFFALSE 14662
// begin uc_nation := nation_nature ;
14559: LD_ADDR_OWVAR 21
14563: PUSH
14564: LD_INT 0
14566: ST_TO_ADDR
// uc_side := 0 ;
14567: LD_ADDR_OWVAR 20
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14575: LD_ADDR_OWVAR 29
14579: PUSH
14580: LD_INT 12
14582: PUSH
14583: LD_INT 12
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: ST_TO_ADDR
// hc_agressivity := 20 ;
14590: LD_ADDR_OWVAR 35
14594: PUSH
14595: LD_INT 20
14597: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14598: LD_ADDR_OWVAR 28
14602: PUSH
14603: LD_INT 17
14605: ST_TO_ADDR
// hc_gallery :=  ;
14606: LD_ADDR_OWVAR 33
14610: PUSH
14611: LD_STRING 
14613: ST_TO_ADDR
// hc_name :=  ;
14614: LD_ADDR_OWVAR 26
14618: PUSH
14619: LD_STRING 
14621: ST_TO_ADDR
// un := CreateHuman ;
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: CALL_OW 44
14631: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14632: LD_VAR 0 2
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 51
// tmp := tmp ^ un ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_VAR 0 3
14653: PUSH
14654: LD_VAR 0 2
14658: ADD
14659: ST_TO_ADDR
// end ;
14660: GO 14556
14662: POP
14663: POP
// repeat wait ( 0 0$1 ) ;
14664: LD_INT 35
14666: PPUSH
14667: CALL_OW 67
// for un in tmp do
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: LD_VAR 0 3
14680: PUSH
14681: FOR_IN
14682: IFFALSE 14756
// begin if IsDead ( un ) then
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 301
14693: IFFALSE 14713
// begin tmp := tmp diff un ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_VAR 0 3
14704: PUSH
14705: LD_VAR 0 2
14709: DIFF
14710: ST_TO_ADDR
// continue ;
14711: GO 14681
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14713: LD_VAR 0 2
14717: PPUSH
14718: LD_INT 3
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 0
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: PPUSH
14740: LD_VAR 0 2
14744: PPUSH
14745: CALL_OW 74
14749: PPUSH
14750: CALL_OW 115
// end ;
14754: GO 14681
14756: POP
14757: POP
// until not tmp ;
14758: LD_VAR 0 3
14762: NOT
14763: IFFALSE 14664
// end ;
14765: PPOPN 3
14767: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14768: LD_EXP 19
14772: PUSH
14773: LD_EXP 44
14777: AND
14778: IFFALSE 14832
14780: GO 14782
14782: DISABLE
// begin ToLua ( displayTroll(); ) ;
14783: LD_STRING displayTroll();
14785: PPUSH
14786: CALL_OW 559
// wait ( 3 3$00 ) ;
14790: LD_INT 6300
14792: PPUSH
14793: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14797: LD_STRING hideTroll();
14799: PPUSH
14800: CALL_OW 559
// wait ( 1 1$00 ) ;
14804: LD_INT 2100
14806: PPUSH
14807: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14811: LD_STRING displayTroll();
14813: PPUSH
14814: CALL_OW 559
// wait ( 1 1$00 ) ;
14818: LD_INT 2100
14820: PPUSH
14821: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14825: LD_STRING hideTroll();
14827: PPUSH
14828: CALL_OW 559
// end ;
14832: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14833: LD_EXP 19
14837: PUSH
14838: LD_EXP 45
14842: AND
14843: IFFALSE 14906
14845: GO 14847
14847: DISABLE
14848: LD_INT 0
14850: PPUSH
// begin p := 0 ;
14851: LD_ADDR_VAR 0 1
14855: PUSH
14856: LD_INT 0
14858: ST_TO_ADDR
// repeat game_speed := 1 ;
14859: LD_ADDR_OWVAR 65
14863: PUSH
14864: LD_INT 1
14866: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14867: LD_INT 35
14869: PPUSH
14870: CALL_OW 67
// p := p + 1 ;
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: LD_VAR 0 1
14883: PUSH
14884: LD_INT 1
14886: PLUS
14887: ST_TO_ADDR
// until p >= 60 ;
14888: LD_VAR 0 1
14892: PUSH
14893: LD_INT 60
14895: GREATEREQUAL
14896: IFFALSE 14859
// game_speed := 4 ;
14898: LD_ADDR_OWVAR 65
14902: PUSH
14903: LD_INT 4
14905: ST_TO_ADDR
// end ;
14906: PPOPN 1
14908: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14909: LD_EXP 19
14913: PUSH
14914: LD_EXP 46
14918: AND
14919: IFFALSE 15065
14921: GO 14923
14923: DISABLE
14924: LD_INT 0
14926: PPUSH
14927: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 30
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: ST_TO_ADDR
// if not depot then
14982: LD_VAR 0 1
14986: NOT
14987: IFFALSE 14991
// exit ;
14989: GO 15065
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_VAR 0 1
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 12
15013: ARRAY
15014: PPUSH
15015: CALL_OW 274
15019: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: LD_INT 0
15030: PPUSH
15031: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15035: LD_VAR 0 2
15039: PPUSH
15040: LD_INT 2
15042: PPUSH
15043: LD_INT 0
15045: PPUSH
15046: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_INT 3
15057: PPUSH
15058: LD_INT 0
15060: PPUSH
15061: CALL_OW 277
// end ;
15065: PPOPN 2
15067: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15068: LD_EXP 19
15072: PUSH
15073: LD_EXP 47
15077: AND
15078: IFFALSE 15175
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15086: LD_ADDR_VAR 0 1
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: LD_INT 23
15118: PUSH
15119: LD_INT 0
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if not tmp then
15140: LD_VAR 0 1
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15175
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 1
15156: PPUSH
15157: LD_VAR 0 1
15161: PPUSH
15162: CALL_OW 12
15166: ARRAY
15167: PPUSH
15168: LD_INT 200
15170: PPUSH
15171: CALL_OW 234
// end ;
15175: PPOPN 1
15177: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15178: LD_EXP 19
15182: PUSH
15183: LD_EXP 48
15187: AND
15188: IFFALSE 15267
15190: GO 15192
15192: DISABLE
15193: LD_INT 0
15195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15196: LD_ADDR_VAR 0 1
15200: PUSH
15201: LD_INT 22
15203: PUSH
15204: LD_OWVAR 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: LD_INT 2
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 69
15231: ST_TO_ADDR
// if not tmp then
15232: LD_VAR 0 1
15236: NOT
15237: IFFALSE 15241
// exit ;
15239: GO 15267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15241: LD_VAR 0 1
15245: PUSH
15246: LD_INT 1
15248: PPUSH
15249: LD_VAR 0 1
15253: PPUSH
15254: CALL_OW 12
15258: ARRAY
15259: PPUSH
15260: LD_INT 60
15262: PPUSH
15263: CALL_OW 234
// end ;
15267: PPOPN 1
15269: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15270: LD_EXP 19
15274: PUSH
15275: LD_EXP 49
15279: AND
15280: IFFALSE 15379
15282: GO 15284
15284: DISABLE
15285: LD_INT 0
15287: PPUSH
15288: PPUSH
// begin enable ;
15289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15290: LD_ADDR_VAR 0 1
15294: PUSH
15295: LD_INT 22
15297: PUSH
15298: LD_OWVAR 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 61
15309: PUSH
15310: EMPTY
15311: LIST
15312: PUSH
15313: LD_INT 33
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: ST_TO_ADDR
// if not tmp then
15333: LD_VAR 0 1
15337: NOT
15338: IFFALSE 15342
// exit ;
15340: GO 15379
// for i in tmp do
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_VAR 0 1
15351: PUSH
15352: FOR_IN
15353: IFFALSE 15377
// if IsControledBy ( i ) then
15355: LD_VAR 0 2
15359: PPUSH
15360: CALL_OW 312
15364: IFFALSE 15375
// ComUnlink ( i ) ;
15366: LD_VAR 0 2
15370: PPUSH
15371: CALL_OW 136
15375: GO 15352
15377: POP
15378: POP
// end ;
15379: PPOPN 2
15381: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15382: LD_EXP 19
15386: PUSH
15387: LD_EXP 50
15391: AND
15392: IFFALSE 15526
15394: GO 15396
15396: DISABLE
15397: LD_INT 0
15399: PPUSH
15400: PPUSH
// begin ToLua ( displayPowell(); ) ;
15401: LD_STRING displayPowell();
15403: PPUSH
15404: CALL_OW 559
// uc_side := 0 ;
15408: LD_ADDR_OWVAR 20
15412: PUSH
15413: LD_INT 0
15415: ST_TO_ADDR
// uc_nation := 2 ;
15416: LD_ADDR_OWVAR 21
15420: PUSH
15421: LD_INT 2
15423: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15424: LD_ADDR_OWVAR 37
15428: PUSH
15429: LD_INT 14
15431: ST_TO_ADDR
// vc_engine := engine_siberite ;
15432: LD_ADDR_OWVAR 39
15436: PUSH
15437: LD_INT 3
15439: ST_TO_ADDR
// vc_control := control_apeman ;
15440: LD_ADDR_OWVAR 38
15444: PUSH
15445: LD_INT 5
15447: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15448: LD_ADDR_OWVAR 40
15452: PUSH
15453: LD_INT 29
15455: ST_TO_ADDR
// un := CreateVehicle ;
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: CALL_OW 45
15465: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15478: LD_INT 35
15480: PPUSH
15481: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15485: LD_VAR 0 2
15489: PPUSH
15490: LD_OWVAR 3
15494: PUSH
15495: LD_VAR 0 2
15499: DIFF
15500: PPUSH
15501: LD_VAR 0 2
15505: PPUSH
15506: CALL_OW 74
15510: PPUSH
15511: CALL_OW 115
// until IsOk ( un ) ;
15515: LD_VAR 0 2
15519: PPUSH
15520: CALL_OW 302
15524: IFFALSE 15478
// end ;
15526: PPOPN 2
15528: END
// every 0 0$1 trigger StreamModeActive and sStu do
15529: LD_EXP 19
15533: PUSH
15534: LD_EXP 58
15538: AND
15539: IFFALSE 15551
15541: GO 15543
15543: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15544: LD_STRING displayStucuk();
15546: PPUSH
15547: CALL_OW 559
// end ;
15551: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15552: LD_EXP 19
15556: PUSH
15557: LD_EXP 51
15561: AND
15562: IFFALSE 15703
15564: GO 15566
15566: DISABLE
15567: LD_INT 0
15569: PPUSH
15570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15571: LD_ADDR_VAR 0 2
15575: PUSH
15576: LD_INT 22
15578: PUSH
15579: LD_OWVAR 2
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: ST_TO_ADDR
// if not tmp then
15607: LD_VAR 0 2
15611: NOT
15612: IFFALSE 15616
// exit ;
15614: GO 15703
// un := tmp [ rand ( 1 , tmp ) ] ;
15616: LD_ADDR_VAR 0 1
15620: PUSH
15621: LD_VAR 0 2
15625: PUSH
15626: LD_INT 1
15628: PPUSH
15629: LD_VAR 0 2
15633: PPUSH
15634: CALL_OW 12
15638: ARRAY
15639: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15640: LD_VAR 0 1
15644: PPUSH
15645: LD_INT 0
15647: PPUSH
15648: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_OWVAR 3
15661: PUSH
15662: LD_VAR 0 1
15666: DIFF
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 74
15677: PPUSH
15678: CALL_OW 115
// wait ( 0 0$20 ) ;
15682: LD_INT 700
15684: PPUSH
15685: CALL_OW 67
// SetSide ( un , your_side ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: CALL_OW 235
// end ;
15703: PPOPN 2
15705: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15706: LD_EXP 19
15710: PUSH
15711: LD_EXP 52
15715: AND
15716: IFFALSE 15822
15718: GO 15720
15720: DISABLE
15721: LD_INT 0
15723: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15724: LD_ADDR_VAR 0 1
15728: PUSH
15729: LD_INT 22
15731: PUSH
15732: LD_OWVAR 2
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 2
15743: PUSH
15744: LD_INT 30
15746: PUSH
15747: LD_INT 0
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 30
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PPUSH
15773: CALL_OW 69
15777: ST_TO_ADDR
// if not depot then
15778: LD_VAR 0 1
15782: NOT
15783: IFFALSE 15787
// exit ;
15785: GO 15822
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15787: LD_VAR 0 1
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PPUSH
15796: CALL_OW 250
15800: PPUSH
15801: LD_VAR 0 1
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PPUSH
15810: CALL_OW 251
15814: PPUSH
15815: LD_INT 70
15817: PPUSH
15818: CALL_OW 495
// end ;
15822: PPOPN 1
15824: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15825: LD_EXP 19
15829: PUSH
15830: LD_EXP 53
15834: AND
15835: IFFALSE 16046
15837: GO 15839
15839: DISABLE
15840: LD_INT 0
15842: PPUSH
15843: PPUSH
15844: PPUSH
15845: PPUSH
15846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15847: LD_ADDR_VAR 0 5
15851: PUSH
15852: LD_INT 22
15854: PUSH
15855: LD_OWVAR 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: ST_TO_ADDR
// if not tmp then
15883: LD_VAR 0 5
15887: NOT
15888: IFFALSE 15892
// exit ;
15890: GO 16046
// for i in tmp do
15892: LD_ADDR_VAR 0 1
15896: PUSH
15897: LD_VAR 0 5
15901: PUSH
15902: FOR_IN
15903: IFFALSE 16044
// begin d := rand ( 0 , 5 ) ;
15905: LD_ADDR_VAR 0 4
15909: PUSH
15910: LD_INT 0
15912: PPUSH
15913: LD_INT 5
15915: PPUSH
15916: CALL_OW 12
15920: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15921: LD_ADDR_VAR 0 2
15925: PUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 250
15935: PPUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: LD_INT 3
15943: PPUSH
15944: LD_INT 12
15946: PPUSH
15947: CALL_OW 12
15951: PPUSH
15952: CALL_OW 272
15956: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15957: LD_ADDR_VAR 0 3
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL_OW 251
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: LD_INT 3
15979: PPUSH
15980: LD_INT 12
15982: PPUSH
15983: CALL_OW 12
15987: PPUSH
15988: CALL_OW 273
15992: ST_TO_ADDR
// if ValidHex ( x , y ) then
15993: LD_VAR 0 2
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: CALL_OW 488
16007: IFFALSE 16042
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16009: LD_VAR 0 1
16013: PPUSH
16014: LD_VAR 0 2
16018: PPUSH
16019: LD_VAR 0 3
16023: PPUSH
16024: LD_INT 3
16026: PPUSH
16027: LD_INT 6
16029: PPUSH
16030: CALL_OW 12
16034: PPUSH
16035: LD_INT 1
16037: PPUSH
16038: CALL_OW 483
// end ;
16042: GO 15902
16044: POP
16045: POP
// end ;
16046: PPOPN 5
16048: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16049: LD_EXP 19
16053: PUSH
16054: LD_EXP 54
16058: AND
16059: IFFALSE 16153
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 32
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 21
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16153
// for i in tmp do
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_VAR 0 2
16133: PUSH
16134: FOR_IN
16135: IFFALSE 16151
// SetFuel ( i , 0 ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 0
16144: PPUSH
16145: CALL_OW 240
16149: GO 16134
16151: POP
16152: POP
// end ;
16153: PPOPN 2
16155: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16156: LD_EXP 19
16160: PUSH
16161: LD_EXP 55
16165: AND
16166: IFFALSE 16232
16168: GO 16170
16170: DISABLE
16171: LD_INT 0
16173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_INT 22
16181: PUSH
16182: LD_OWVAR 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 30
16193: PUSH
16194: LD_INT 29
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 69
16209: ST_TO_ADDR
// if not tmp then
16210: LD_VAR 0 1
16214: NOT
16215: IFFALSE 16219
// exit ;
16217: GO 16232
// DestroyUnit ( tmp [ 1 ] ) ;
16219: LD_VAR 0 1
16223: PUSH
16224: LD_INT 1
16226: ARRAY
16227: PPUSH
16228: CALL_OW 65
// end ;
16232: PPOPN 1
16234: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16235: LD_EXP 19
16239: PUSH
16240: LD_EXP 57
16244: AND
16245: IFFALSE 16374
16247: GO 16249
16249: DISABLE
16250: LD_INT 0
16252: PPUSH
// begin uc_side := 0 ;
16253: LD_ADDR_OWVAR 20
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// uc_nation := nation_arabian ;
16261: LD_ADDR_OWVAR 21
16265: PUSH
16266: LD_INT 2
16268: ST_TO_ADDR
// hc_gallery :=  ;
16269: LD_ADDR_OWVAR 33
16273: PUSH
16274: LD_STRING 
16276: ST_TO_ADDR
// hc_name :=  ;
16277: LD_ADDR_OWVAR 26
16281: PUSH
16282: LD_STRING 
16284: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16285: LD_INT 1
16287: PPUSH
16288: LD_INT 11
16290: PPUSH
16291: LD_INT 10
16293: PPUSH
16294: CALL_OW 380
// un := CreateHuman ;
16298: LD_ADDR_VAR 0 1
16302: PUSH
16303: CALL_OW 44
16307: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16308: LD_VAR 0 1
16312: PPUSH
16313: LD_INT 1
16315: PPUSH
16316: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16320: LD_INT 35
16322: PPUSH
16323: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16327: LD_VAR 0 1
16331: PPUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: PPUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 74
16358: PPUSH
16359: CALL_OW 115
// until IsDead ( un ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 301
16372: IFFALSE 16320
// end ;
16374: PPOPN 1
16376: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16377: LD_EXP 19
16381: PUSH
16382: LD_EXP 59
16386: AND
16387: IFFALSE 16399
16389: GO 16391
16391: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16392: LD_STRING earthquake(getX(game), 0, 32)
16394: PPUSH
16395: CALL_OW 559
16399: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16400: LD_EXP 19
16404: PUSH
16405: LD_EXP 60
16409: AND
16410: IFFALSE 16501
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
// begin enable ;
16418: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16419: LD_ADDR_VAR 0 1
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_OWVAR 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 33
16448: PUSH
16449: LD_INT 3
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: PPUSH
16461: CALL_OW 69
16465: ST_TO_ADDR
// if not tmp then
16466: LD_VAR 0 1
16470: NOT
16471: IFFALSE 16475
// exit ;
16473: GO 16501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16475: LD_VAR 0 1
16479: PUSH
16480: LD_INT 1
16482: PPUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 234
// end ;
16501: PPOPN 1
16503: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16504: LD_EXP 19
16508: PUSH
16509: LD_EXP 61
16513: AND
16514: IFFALSE 16655
16516: GO 16518
16518: DISABLE
16519: LD_INT 0
16521: PPUSH
16522: PPUSH
16523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16524: LD_ADDR_VAR 0 3
16528: PUSH
16529: LD_INT 22
16531: PUSH
16532: LD_OWVAR 2
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 25
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 69
16559: ST_TO_ADDR
// if not tmp then
16560: LD_VAR 0 3
16564: NOT
16565: IFFALSE 16569
// exit ;
16567: GO 16655
// un := tmp [ rand ( 1 , tmp ) ] ;
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_VAR 0 3
16578: PUSH
16579: LD_INT 1
16581: PPUSH
16582: LD_VAR 0 3
16586: PPUSH
16587: CALL_OW 12
16591: ARRAY
16592: ST_TO_ADDR
// if Crawls ( un ) then
16593: LD_VAR 0 2
16597: PPUSH
16598: CALL_OW 318
16602: IFFALSE 16613
// ComWalk ( un ) ;
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16613: LD_VAR 0 2
16617: PPUSH
16618: LD_INT 9
16620: PPUSH
16621: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16625: LD_INT 28
16627: PPUSH
16628: LD_OWVAR 2
16632: PPUSH
16633: LD_INT 2
16635: PPUSH
16636: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16640: LD_INT 29
16642: PPUSH
16643: LD_OWVAR 2
16647: PPUSH
16648: LD_INT 2
16650: PPUSH
16651: CALL_OW 322
// end ;
16655: PPOPN 3
16657: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16658: LD_EXP 19
16662: PUSH
16663: LD_EXP 62
16667: AND
16668: IFFALSE 16779
16670: GO 16672
16672: DISABLE
16673: LD_INT 0
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16678: LD_ADDR_VAR 0 3
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_OWVAR 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 1
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 3
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16779
// un := tmp [ rand ( 1 , tmp ) ] ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: CALL_OW 12
16745: ARRAY
16746: ST_TO_ADDR
// if Crawls ( un ) then
16747: LD_VAR 0 2
16751: PPUSH
16752: CALL_OW 318
16756: IFFALSE 16767
// ComWalk ( un ) ;
16758: LD_VAR 0 2
16762: PPUSH
16763: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16767: LD_VAR 0 2
16771: PPUSH
16772: LD_INT 8
16774: PPUSH
16775: CALL_OW 336
// end ;
16779: PPOPN 3
16781: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16782: LD_EXP 19
16786: PUSH
16787: LD_EXP 63
16791: AND
16792: IFFALSE 16936
16794: GO 16796
16796: DISABLE
16797: LD_INT 0
16799: PPUSH
16800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16801: LD_ADDR_VAR 0 2
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_OWVAR 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 21
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 2
16830: PUSH
16831: LD_INT 34
16833: PUSH
16834: LD_INT 12
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 34
16843: PUSH
16844: LD_INT 51
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 34
16853: PUSH
16854: LD_INT 32
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: ST_TO_ADDR
// if not tmp then
16877: LD_VAR 0 2
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 16936
// for i in tmp do
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_VAR 0 2
16895: PUSH
16896: FOR_IN
16897: IFFALSE 16934
// if GetCargo ( i , mat_artifact ) = 0 then
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 4
16906: PPUSH
16907: CALL_OW 289
16911: PUSH
16912: LD_INT 0
16914: EQUAL
16915: IFFALSE 16932
// SetCargo ( i , mat_siberit , 100 ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_INT 3
16924: PPUSH
16925: LD_INT 100
16927: PPUSH
16928: CALL_OW 290
16932: GO 16896
16934: POP
16935: POP
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16939: LD_EXP 19
16943: PUSH
16944: LD_EXP 64
16948: AND
16949: IFFALSE 17102
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_INT 22
16965: PUSH
16966: LD_OWVAR 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PPUSH
16975: CALL_OW 69
16979: ST_TO_ADDR
// if not tmp then
16980: LD_VAR 0 2
16984: NOT
16985: IFFALSE 16989
// exit ;
16987: GO 17102
// for i := 1 to 2 do
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: DOUBLE
16995: LD_INT 1
16997: DEC
16998: ST_TO_ADDR
16999: LD_INT 2
17001: PUSH
17002: FOR_TO
17003: IFFALSE 17100
// begin uc_side := your_side ;
17005: LD_ADDR_OWVAR 20
17009: PUSH
17010: LD_OWVAR 2
17014: ST_TO_ADDR
// uc_nation := nation_american ;
17015: LD_ADDR_OWVAR 21
17019: PUSH
17020: LD_INT 1
17022: ST_TO_ADDR
// vc_chassis := us_morphling ;
17023: LD_ADDR_OWVAR 37
17027: PUSH
17028: LD_INT 5
17030: ST_TO_ADDR
// vc_engine := engine_siberite ;
17031: LD_ADDR_OWVAR 39
17035: PUSH
17036: LD_INT 3
17038: ST_TO_ADDR
// vc_control := control_computer ;
17039: LD_ADDR_OWVAR 38
17043: PUSH
17044: LD_INT 3
17046: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17047: LD_ADDR_OWVAR 40
17051: PUSH
17052: LD_INT 10
17054: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
17055: CALL_OW 45
17059: PPUSH
17060: LD_VAR 0 2
17064: PUSH
17065: LD_INT 1
17067: ARRAY
17068: PPUSH
17069: CALL_OW 250
17073: PPUSH
17074: LD_VAR 0 2
17078: PUSH
17079: LD_INT 1
17081: ARRAY
17082: PPUSH
17083: CALL_OW 251
17087: PPUSH
17088: LD_INT 12
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 50
// end ;
17098: GO 17002
17100: POP
17101: POP
// end ;
17102: PPOPN 2
17104: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17105: LD_EXP 19
17109: PUSH
17110: LD_EXP 65
17114: AND
17115: IFFALSE 17337
17117: GO 17119
17119: DISABLE
17120: LD_INT 0
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17128: LD_ADDR_VAR 0 6
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_OWVAR 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 21
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 3
17157: PUSH
17158: LD_INT 23
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: PPUSH
17177: CALL_OW 69
17181: ST_TO_ADDR
// if not tmp then
17182: LD_VAR 0 6
17186: NOT
17187: IFFALSE 17191
// exit ;
17189: GO 17337
// s1 := rand ( 1 , 4 ) ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 1
17198: PPUSH
17199: LD_INT 4
17201: PPUSH
17202: CALL_OW 12
17206: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_VAR 0 6
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_VAR 0 2
17225: PPUSH
17226: CALL_OW 259
17230: ST_TO_ADDR
// if s1 = 1 then
17231: LD_VAR 0 2
17235: PUSH
17236: LD_INT 1
17238: EQUAL
17239: IFFALSE 17259
// s2 := rand ( 2 , 4 ) else
17241: LD_ADDR_VAR 0 3
17245: PUSH
17246: LD_INT 2
17248: PPUSH
17249: LD_INT 4
17251: PPUSH
17252: CALL_OW 12
17256: ST_TO_ADDR
17257: GO 17267
// s2 := 1 ;
17259: LD_ADDR_VAR 0 3
17263: PUSH
17264: LD_INT 1
17266: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17267: LD_ADDR_VAR 0 5
17271: PUSH
17272: LD_VAR 0 6
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 259
17290: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17291: LD_VAR 0 6
17295: PUSH
17296: LD_INT 1
17298: ARRAY
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_VAR 0 5
17309: PPUSH
17310: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17314: LD_VAR 0 6
17318: PUSH
17319: LD_INT 1
17321: ARRAY
17322: PPUSH
17323: LD_VAR 0 3
17327: PPUSH
17328: LD_VAR 0 4
17332: PPUSH
17333: CALL_OW 237
// end ;
17337: PPOPN 6
17339: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17340: LD_EXP 19
17344: PUSH
17345: LD_EXP 66
17349: AND
17350: IFFALSE 17429
17352: GO 17354
17354: DISABLE
17355: LD_INT 0
17357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_INT 22
17365: PUSH
17366: LD_OWVAR 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 30
17377: PUSH
17378: LD_INT 3
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: ST_TO_ADDR
// if not tmp then
17394: LD_VAR 0 1
17398: NOT
17399: IFFALSE 17403
// exit ;
17401: GO 17429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17403: LD_VAR 0 1
17407: PUSH
17408: LD_INT 1
17410: PPUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 12
17420: ARRAY
17421: PPUSH
17422: LD_INT 1
17424: PPUSH
17425: CALL_OW 234
// end ;
17429: PPOPN 1
17431: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17432: LD_EXP 19
17436: PUSH
17437: LD_EXP 67
17441: AND
17442: IFFALSE 17554
17444: GO 17446
17446: DISABLE
17447: LD_INT 0
17449: PPUSH
17450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_INT 22
17458: PUSH
17459: LD_OWVAR 2
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 30
17473: PUSH
17474: LD_INT 27
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 30
17483: PUSH
17484: LD_INT 26
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 30
17493: PUSH
17494: LD_INT 28
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17554
// for i in tmp do
17525: LD_ADDR_VAR 0 1
17529: PUSH
17530: LD_VAR 0 2
17534: PUSH
17535: FOR_IN
17536: IFFALSE 17552
// SetLives ( i , 1 ) ;
17538: LD_VAR 0 1
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 234
17550: GO 17535
17552: POP
17553: POP
// end ;
17554: PPOPN 2
17556: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17557: LD_EXP 19
17561: PUSH
17562: LD_EXP 68
17566: AND
17567: IFFALSE 17837
17569: GO 17571
17571: DISABLE
17572: LD_INT 0
17574: PPUSH
17575: PPUSH
17576: PPUSH
// begin i := rand ( 1 , 7 ) ;
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 7
17587: PPUSH
17588: CALL_OW 12
17592: ST_TO_ADDR
// case i of 1 :
17593: LD_VAR 0 1
17597: PUSH
17598: LD_INT 1
17600: DOUBLE
17601: EQUAL
17602: IFTRUE 17606
17604: GO 17616
17606: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17607: LD_STRING earthquake(getX(game), 0, 32)
17609: PPUSH
17610: CALL_OW 559
17614: GO 17837
17616: LD_INT 2
17618: DOUBLE
17619: EQUAL
17620: IFTRUE 17624
17622: GO 17634
17624: POP
// ToLua ( displayStucuk(); ) ; 3 :
17625: LD_STRING displayStucuk();
17627: PPUSH
17628: CALL_OW 559
17632: GO 17837
17634: LD_INT 3
17636: DOUBLE
17637: EQUAL
17638: IFTRUE 17642
17640: GO 17746
17642: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: LD_INT 22
17650: PUSH
17651: LD_OWVAR 2
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 25
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PPUSH
17674: CALL_OW 69
17678: ST_TO_ADDR
// if not tmp then
17679: LD_VAR 0 2
17683: NOT
17684: IFFALSE 17688
// exit ;
17686: GO 17837
// un := tmp [ rand ( 1 , tmp ) ] ;
17688: LD_ADDR_VAR 0 3
17692: PUSH
17693: LD_VAR 0 2
17697: PUSH
17698: LD_INT 1
17700: PPUSH
17701: LD_VAR 0 2
17705: PPUSH
17706: CALL_OW 12
17710: ARRAY
17711: ST_TO_ADDR
// if Crawls ( un ) then
17712: LD_VAR 0 3
17716: PPUSH
17717: CALL_OW 318
17721: IFFALSE 17732
// ComWalk ( un ) ;
17723: LD_VAR 0 3
17727: PPUSH
17728: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_INT 8
17739: PPUSH
17740: CALL_OW 336
// end ; 4 :
17744: GO 17837
17746: LD_INT 4
17748: DOUBLE
17749: EQUAL
17750: IFTRUE 17754
17752: GO 17815
17754: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17755: LD_ADDR_VAR 0 2
17759: PUSH
17760: LD_INT 22
17762: PUSH
17763: LD_OWVAR 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 30
17774: PUSH
17775: LD_INT 29
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PPUSH
17786: CALL_OW 69
17790: ST_TO_ADDR
// if not tmp then
17791: LD_VAR 0 2
17795: NOT
17796: IFFALSE 17800
// exit ;
17798: GO 17837
// DestroyUnit ( tmp [ 1 ] ) ;
17800: LD_VAR 0 2
17804: PUSH
17805: LD_INT 1
17807: ARRAY
17808: PPUSH
17809: CALL_OW 65
// end ; 5 .. 7 :
17813: GO 17837
17815: LD_INT 5
17817: DOUBLE
17818: GREATEREQUAL
17819: IFFALSE 17827
17821: LD_INT 7
17823: DOUBLE
17824: LESSEQUAL
17825: IFTRUE 17829
17827: GO 17836
17829: POP
// StreamSibBomb ; end ;
17830: CALL 14131 0 0
17834: GO 17837
17836: POP
// end ;
17837: PPOPN 3
17839: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17840: LD_EXP 19
17844: PUSH
17845: LD_EXP 69
17849: AND
17850: IFFALSE 18006
17852: GO 17854
17854: DISABLE
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
17859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17860: LD_ADDR_VAR 0 2
17864: PUSH
17865: LD_INT 81
17867: PUSH
17868: LD_OWVAR 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 21
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18006
// p := 0 ;
17923: LD_ADDR_VAR 0 3
17927: PUSH
17928: LD_INT 0
17930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17931: LD_INT 35
17933: PPUSH
17934: CALL_OW 67
// p := p + 1 ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_VAR 0 3
17947: PUSH
17948: LD_INT 1
17950: PLUS
17951: ST_TO_ADDR
// for i in tmp do
17952: LD_ADDR_VAR 0 1
17956: PUSH
17957: LD_VAR 0 2
17961: PUSH
17962: FOR_IN
17963: IFFALSE 17994
// if GetLives ( i ) < 1000 then
17965: LD_VAR 0 1
17969: PPUSH
17970: CALL_OW 256
17974: PUSH
17975: LD_INT 1000
17977: LESS
17978: IFFALSE 17992
// SetLives ( i , 1000 ) ;
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_INT 1000
17987: PPUSH
17988: CALL_OW 234
17992: GO 17962
17994: POP
17995: POP
// until p > 20 ;
17996: LD_VAR 0 3
18000: PUSH
18001: LD_INT 20
18003: GREATER
18004: IFFALSE 17931
// end ;
18006: PPOPN 3
18008: END
// every 0 0$1 trigger StreamModeActive and sTime do
18009: LD_EXP 19
18013: PUSH
18014: LD_EXP 70
18018: AND
18019: IFFALSE 18054
18021: GO 18023
18023: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18024: LD_INT 28
18026: PPUSH
18027: LD_OWVAR 2
18031: PPUSH
18032: LD_INT 2
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18039: LD_INT 30
18041: PPUSH
18042: LD_OWVAR 2
18046: PPUSH
18047: LD_INT 2
18049: PPUSH
18050: CALL_OW 322
// end ;
18054: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18055: LD_EXP 19
18059: PUSH
18060: LD_EXP 71
18064: AND
18065: IFFALSE 18186
18067: GO 18069
18069: DISABLE
18070: LD_INT 0
18072: PPUSH
18073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: LD_INT 22
18081: PUSH
18082: LD_OWVAR 2
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 21
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: LD_INT 23
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: ST_TO_ADDR
// if not tmp then
18128: LD_VAR 0 2
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 18186
// for i in tmp do
18137: LD_ADDR_VAR 0 1
18141: PUSH
18142: LD_VAR 0 2
18146: PUSH
18147: FOR_IN
18148: IFFALSE 18184
// begin if Crawls ( i ) then
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 318
18159: IFFALSE 18170
// ComWalk ( i ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 138
// SetClass ( i , 2 ) ;
18170: LD_VAR 0 1
18174: PPUSH
18175: LD_INT 2
18177: PPUSH
18178: CALL_OW 336
// end ;
18182: GO 18147
18184: POP
18185: POP
// end ;
18186: PPOPN 2
18188: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18189: LD_EXP 19
18193: PUSH
18194: LD_EXP 72
18198: AND
18199: IFFALSE 18404
18201: GO 18203
18203: DISABLE
18204: LD_INT 0
18206: PPUSH
18207: PPUSH
18208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18209: LD_OWVAR 2
18213: PPUSH
18214: LD_INT 9
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18227: LD_INT 9
18229: PPUSH
18230: LD_OWVAR 2
18234: PPUSH
18235: CALL_OW 343
// hc_name := Dark Warrior ;
18239: LD_ADDR_OWVAR 26
18243: PUSH
18244: LD_STRING Dark Warrior
18246: ST_TO_ADDR
// hc_gallery :=  ;
18247: LD_ADDR_OWVAR 33
18251: PUSH
18252: LD_STRING 
18254: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
18255: LD_INT 1
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_INT 10
18263: PPUSH
18264: CALL_OW 380
// un := CreateHuman ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: CALL_OW 44
18277: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18278: LD_VAR 0 3
18282: PPUSH
18283: LD_INT 1
18285: PPUSH
18286: CALL_OW 51
// p := 0 ;
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_INT 0
18297: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18298: LD_INT 35
18300: PPUSH
18301: CALL_OW 67
// if GetLives ( un ) < 1000 then
18305: LD_VAR 0 3
18309: PPUSH
18310: CALL_OW 256
18314: PUSH
18315: LD_INT 1000
18317: LESS
18318: IFFALSE 18332
// SetLives ( un , 1000 ) ;
18320: LD_VAR 0 3
18324: PPUSH
18325: LD_INT 1000
18327: PPUSH
18328: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
18332: LD_VAR 0 3
18336: PPUSH
18337: LD_INT 81
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL_OW 74
18363: PPUSH
18364: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18368: LD_VAR 0 2
18372: PUSH
18373: LD_INT 60
18375: GREATER
18376: PUSH
18377: LD_VAR 0 3
18381: PPUSH
18382: CALL_OW 301
18386: OR
18387: IFFALSE 18298
// if un then
18389: LD_VAR 0 3
18393: IFFALSE 18404
// RemoveUnit ( un ) ;
18395: LD_VAR 0 3
18399: PPUSH
18400: CALL_OW 64
// end ;
18404: PPOPN 3
18406: END
